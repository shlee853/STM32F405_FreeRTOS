
STM32F405_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007554  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab4  080076e8  080076e8  000176e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800819c  0800819c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800819c  0800819c  0001819c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081a4  080081a4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081a4  080081a4  000181a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080081ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          000042b8  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004490  20004490  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f5f4  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a5c  00000000  00000000  0002f83f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c70  00000000  00000000  000322a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000096f  00000000  00000000  00032f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002136e  00000000  00000000  0003387f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e824  00000000  00000000  00054bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c268a  00000000  00000000  00063411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000041d4  00000000  00000000  00125a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00129c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080076cc 	.word	0x080076cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080076cc 	.word	0x080076cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <_write>:
//#include "stm32f4xx_hal_def.h"

extern UART_HandleTypeDef huart6;

int _write(int file, char* p, int len)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
		if(HAL_UART_Transmit(&huart6, p, len , 10 )!= 0)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	230a      	movs	r3, #10
 8000eb6:	68b9      	ldr	r1, [r7, #8]
 8000eb8:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <_write+0x30>)
 8000eba:	f001 fc3b 	bl	8002734 <HAL_UART_Transmit>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <_write+0x26>
			//		while(!LL_USART_IsActiveFlag_TXE(USART6));0
			//		usDelay(100);	// 문자 1개 출력당 약 100us 소요, Float, int형 차이 없음
			return -1;
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec8:	e000      	b.n	8000ecc <_write+0x28>
		return len;
 8000eca:	687b      	ldr	r3, [r7, #4]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000494 	.word	0x20000494

08000ed8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ee8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <vApplicationGetIdleTaskMemory+0x30>)
 8000eee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200001f4 	.word	0x200001f4
 8000f08:	20000294 	.word	0x20000294

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b5b0      	push	{r4, r5, r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f12:	f000 fb5b 	bl	80015cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f16:	f000 f82d 	bl	8000f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1a:	f000 f8bf 	bl	800109c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000f1e:	f000 f893 	bl	8001048 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  freertos_IntroTitle();
 8000f22:	f000 f915 	bl	8001150 <freertos_IntroTitle>
  printf("[TASK]main\n");
 8000f26:	480f      	ldr	r0, [pc, #60]	; (8000f64 <main+0x58>)
 8000f28:	f004 fbde 	bl	80056e8 <puts>


  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <main+0x5c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <main+0x5c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0220 	orr.w	r2, r2, #32
 8000f3a:	60da      	str	r2, [r3, #12]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <main+0x60>)
 8000f3e:	1d3c      	adds	r4, r7, #4
 8000f40:	461d      	mov	r5, r3
 8000f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 fbbf 	bl	80036d6 <osThreadCreate>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <main+0x64>)
 8000f5c:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f5e:	f002 fbb3 	bl	80036c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <main+0x56>
 8000f64:	080076e8 	.word	0x080076e8
 8000f68:	20000494 	.word	0x20000494
 8000f6c:	08007700 	.word	0x08007700
 8000f70:	200004dc 	.word	0x200004dc

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b094      	sub	sp, #80	; 0x50
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 0320 	add.w	r3, r7, #32
 8000f7e:	2230      	movs	r2, #48	; 0x30
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f004 fc90 	bl	80058a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	4b28      	ldr	r3, [pc, #160]	; (8001040 <SystemClock_Config+0xcc>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	4a27      	ldr	r2, [pc, #156]	; (8001040 <SystemClock_Config+0xcc>)
 8000fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa8:	4b25      	ldr	r3, [pc, #148]	; (8001040 <SystemClock_Config+0xcc>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	4b22      	ldr	r3, [pc, #136]	; (8001044 <SystemClock_Config+0xd0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a21      	ldr	r2, [pc, #132]	; (8001044 <SystemClock_Config+0xd0>)
 8000fbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <SystemClock_Config+0xd0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fe8:	23a8      	movs	r3, #168	; 0xa8
 8000fea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff4:	f107 0320 	add.w	r3, r7, #32
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 feb3 	bl	8001d64 <HAL_RCC_OscConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001004:	f000 f928 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001008:	230f      	movs	r3, #15
 800100a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100c:	2302      	movs	r3, #2
 800100e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001014:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001018:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2105      	movs	r1, #5
 8001026:	4618      	mov	r0, r3
 8001028:	f001 f914 	bl	8002254 <HAL_RCC_ClockConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001032:	f000 f911 	bl	8001258 <Error_Handler>
  }
}
 8001036:	bf00      	nop
 8001038:	3750      	adds	r7, #80	; 0x50
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40007000 	.word	0x40007000

08001048 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_USART6_UART_Init+0x4c>)
 800104e:	4a12      	ldr	r2, [pc, #72]	; (8001098 <MX_USART6_UART_Init+0x50>)
 8001050:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_USART6_UART_Init+0x4c>)
 8001054:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001058:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_USART6_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_USART6_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <MX_USART6_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_USART6_UART_Init+0x4c>)
 800106e:	220c      	movs	r2, #12
 8001070:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <MX_USART6_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_USART6_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_USART6_UART_Init+0x4c>)
 8001080:	f001 fb08 	bl	8002694 <HAL_UART_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800108a:	f000 f8e5 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000494 	.word	0x20000494
 8001098:	40011400 	.word	0x40011400

0800109c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <MX_GPIO_Init+0x98>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a1e      	ldr	r2, [pc, #120]	; (8001134 <MX_GPIO_Init+0x98>)
 80010bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <MX_GPIO_Init+0x98>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MX_GPIO_Init+0x98>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a17      	ldr	r2, [pc, #92]	; (8001134 <MX_GPIO_Init+0x98>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <MX_GPIO_Init+0x98>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_GPIO_Init+0x98>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a10      	ldr	r2, [pc, #64]	; (8001134 <MX_GPIO_Init+0x98>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_GPIO_Init+0x98>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	2120      	movs	r1, #32
 800110a:	480b      	ldr	r0, [pc, #44]	; (8001138 <MX_GPIO_Init+0x9c>)
 800110c:	f000 fe10 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001110:	2320      	movs	r3, #32
 8001112:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	4619      	mov	r1, r3
 8001126:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_GPIO_Init+0x9c>)
 8001128:	f000 fc66 	bl	80019f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800112c:	bf00      	nop
 800112e:	3720      	adds	r7, #32
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40023800 	.word	0x40023800
 8001138:	40020400 	.word	0x40020400

0800113c <OSVersion>:

/* USER CODE BEGIN 4 */

char* OSVersion(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 8001140:	4b02      	ldr	r3, [pc, #8]	; (800114c <OSVersion+0x10>)
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	0800771c 	.word	0x0800771c

08001150 <freertos_IntroTitle>:

//
// 'freertos_IntroTitle'
//
void freertos_IntroTitle(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 8001154:	4823      	ldr	r0, [pc, #140]	; (80011e4 <freertos_IntroTitle+0x94>)
 8001156:	f004 fac7 	bl	80056e8 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 800115a:	4823      	ldr	r0, [pc, #140]	; (80011e8 <freertos_IntroTitle+0x98>)
 800115c:	f004 fac4 	bl	80056e8 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 8001160:	4822      	ldr	r0, [pc, #136]	; (80011ec <freertos_IntroTitle+0x9c>)
 8001162:	f004 fac1 	bl	80056e8 <puts>
  printf("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 8001166:	4822      	ldr	r0, [pc, #136]	; (80011f0 <freertos_IntroTitle+0xa0>)
 8001168:	f004 fabe 	bl	80056e8 <puts>
  printf("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 800116c:	4821      	ldr	r0, [pc, #132]	; (80011f4 <freertos_IntroTitle+0xa4>)
 800116e:	f004 fabb 	bl	80056e8 <puts>
  printf("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 8001172:	4821      	ldr	r0, [pc, #132]	; (80011f8 <freertos_IntroTitle+0xa8>)
 8001174:	f004 fab8 	bl	80056e8 <puts>
  printf("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 8001178:	4820      	ldr	r0, [pc, #128]	; (80011fc <freertos_IntroTitle+0xac>)
 800117a:	f004 fab5 	bl	80056e8 <puts>
  printf("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 800117e:	4820      	ldr	r0, [pc, #128]	; (8001200 <freertos_IntroTitle+0xb0>)
 8001180:	f004 fab2 	bl	80056e8 <puts>
  printf("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 8001184:	481f      	ldr	r0, [pc, #124]	; (8001204 <freertos_IntroTitle+0xb4>)
 8001186:	f004 faaf 	bl	80056e8 <puts>
  printf("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 800118a:	481f      	ldr	r0, [pc, #124]	; (8001208 <freertos_IntroTitle+0xb8>)
 800118c:	f004 faac 	bl	80056e8 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 8001190:	481e      	ldr	r0, [pc, #120]	; (800120c <freertos_IntroTitle+0xbc>)
 8001192:	f004 faa9 	bl	80056e8 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 8001196:	481e      	ldr	r0, [pc, #120]	; (8001210 <freertos_IntroTitle+0xc0>)
 8001198:	f004 faa6 	bl	80056e8 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 800119c:	481d      	ldr	r0, [pc, #116]	; (8001214 <freertos_IntroTitle+0xc4>)
 800119e:	f004 faa3 	bl	80056e8 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 80011a2:	481d      	ldr	r0, [pc, #116]	; (8001218 <freertos_IntroTitle+0xc8>)
 80011a4:	f004 faa0 	bl	80056e8 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 80011a8:	481c      	ldr	r0, [pc, #112]	; (800121c <freertos_IntroTitle+0xcc>)
 80011aa:	f004 fa9d 	bl	80056e8 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 80011ae:	481c      	ldr	r0, [pc, #112]	; (8001220 <freertos_IntroTitle+0xd0>)
 80011b0:	f004 fa9a 	bl	80056e8 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 80011b4:	481b      	ldr	r0, [pc, #108]	; (8001224 <freertos_IntroTitle+0xd4>)
 80011b6:	f004 fa97 	bl	80056e8 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 80011ba:	481b      	ldr	r0, [pc, #108]	; (8001228 <freertos_IntroTitle+0xd8>)
 80011bc:	f004 fa94 	bl	80056e8 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 80011c0:	481a      	ldr	r0, [pc, #104]	; (800122c <freertos_IntroTitle+0xdc>)
 80011c2:	f004 fa91 	bl	80056e8 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 80011c6:	f7ff ffb9 	bl	800113c <OSVersion>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4619      	mov	r1, r3
 80011ce:	4818      	ldr	r0, [pc, #96]	; (8001230 <freertos_IntroTitle+0xe0>)
 80011d0:	f004 fa24 	bl	800561c <iprintf>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 80011d4:	4817      	ldr	r0, [pc, #92]	; (8001234 <freertos_IntroTitle+0xe4>)
 80011d6:	f004 fa87 	bl	80056e8 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   Copyright guileschool.com\n");
 80011da:	4817      	ldr	r0, [pc, #92]	; (8001238 <freertos_IntroTitle+0xe8>)
 80011dc:	f004 fa84 	bl	80056e8 <puts>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	08007724 	.word	0x08007724
 80011e8:	08007764 	.word	0x08007764
 80011ec:	080077b8 	.word	0x080077b8
 80011f0:	0800780c 	.word	0x0800780c
 80011f4:	08007860 	.word	0x08007860
 80011f8:	080078b4 	.word	0x080078b4
 80011fc:	08007908 	.word	0x08007908
 8001200:	0800795c 	.word	0x0800795c
 8001204:	080079b0 	.word	0x080079b0
 8001208:	08007a04 	.word	0x08007a04
 800120c:	08007a58 	.word	0x08007a58
 8001210:	08007aac 	.word	0x08007aac
 8001214:	08007b00 	.word	0x08007b00
 8001218:	08007b54 	.word	0x08007b54
 800121c:	08007ba8 	.word	0x08007ba8
 8001220:	08007bfc 	.word	0x08007bfc
 8001224:	08007c50 	.word	0x08007c50
 8001228:	08007ca4 	.word	0x08007ca4
 800122c:	08007cec 	.word	0x08007cec
 8001230:	08007d18 	.word	0x08007d18
 8001234:	08007d5c 	.word	0x08007d5c
 8001238:	08007d88 	.word	0x08007d88

0800123c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	printf("[TASK] StartDefaultTask!\n");
 8001244:	4803      	ldr	r0, [pc, #12]	; (8001254 <StartDefaultTask+0x18>)
 8001246:	f004 fa4f 	bl	80056e8 <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800124a:	2001      	movs	r0, #1
 800124c:	f002 fa8f 	bl	800376e <osDelay>
 8001250:	e7fb      	b.n	800124a <StartDefaultTask+0xe>
 8001252:	bf00      	nop
 8001254:	08007df0 	.word	0x08007df0

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	e7fe      	b.n	8001260 <Error_Handler+0x8>
	...

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_MspInit+0x54>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a11      	ldr	r2, [pc, #68]	; (80012b8 <HAL_MspInit+0x54>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_MspInit+0x54>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_MspInit+0x54>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <HAL_MspInit+0x54>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HAL_MspInit+0x54>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	210f      	movs	r1, #15
 80012a6:	f06f 0001 	mvn.w	r0, #1
 80012aa:	f000 fadc 	bl	8001866 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800

080012bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <HAL_UART_MspInit+0x94>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d133      	bne.n	8001346 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <HAL_UART_MspInit+0x98>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <HAL_UART_MspInit+0x98>)
 80012e8:	f043 0320 	orr.w	r3, r3, #32
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_UART_MspInit+0x98>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f003 0320 	and.w	r3, r3, #32
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_UART_MspInit+0x98>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a14      	ldr	r2, [pc, #80]	; (8001354 <HAL_UART_MspInit+0x98>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_UART_MspInit+0x98>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001316:	23c0      	movs	r3, #192	; 0xc0
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001326:	2308      	movs	r3, #8
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4809      	ldr	r0, [pc, #36]	; (8001358 <HAL_UART_MspInit+0x9c>)
 8001332:	f000 fb61 	bl	80019f8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2105      	movs	r1, #5
 800133a:	2047      	movs	r0, #71	; 0x47
 800133c:	f000 fa93 	bl	8001866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001340:	2047      	movs	r0, #71	; 0x47
 8001342:	f000 faac 	bl	800189e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001346:	bf00      	nop
 8001348:	3728      	adds	r7, #40	; 0x28
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40011400 	.word	0x40011400
 8001354:	40023800 	.word	0x40023800
 8001358:	40020800 	.word	0x40020800

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001360:	e7fe      	b.n	8001360 <NMI_Handler+0x4>

08001362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <MemManage_Handler+0x4>

0800136e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <UsageFault_Handler+0x4>

0800137a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138c:	f000 f970 	bl	8001670 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001390:	f002 ff9c 	bl	80042cc <xTaskGetSchedulerState>
 8001394:	4603      	mov	r3, r0
 8001396:	2b01      	cmp	r3, #1
 8001398:	d001      	beq.n	800139e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800139a:	f003 f9dd 	bl	8004758 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)!=RESET)&&(__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_RXNE)!=RESET) ){
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <USART6_IRQHandler+0x54>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0320 	and.w	r3, r3, #32
 80013b4:	2b20      	cmp	r3, #32
 80013b6:	d117      	bne.n	80013e8 <USART6_IRQHandler+0x44>
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <USART6_IRQHandler+0x54>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	f003 0320 	and.w	r3, r3, #32
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d010      	beq.n	80013e8 <USART6_IRQHandler+0x44>
			g_rx_buffer = (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF);	// 데이터 1바이트 수신
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <USART6_IRQHandler+0x54>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <USART6_IRQHandler+0x58>)
 80013d0:	701a      	strb	r2, [r3, #0]
		  __HAL_UART_CLEAR_PEFLAG(&huart6);
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <USART6_IRQHandler+0x54>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <USART6_IRQHandler+0x54>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
	}


  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80013e8:	4803      	ldr	r0, [pc, #12]	; (80013f8 <USART6_IRQHandler+0x54>)
 80013ea:	f001 fa2f 	bl	800284c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000494 	.word	0x20000494
 80013fc:	200004e0 	.word	0x200004e0

08001400 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return 1;
 8001404:	2301      	movs	r3, #1
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <_kill>:

int _kill(int pid, int sig)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800141a:	f004 faed 	bl	80059f8 <__errno>
 800141e:	4603      	mov	r3, r0
 8001420:	2216      	movs	r2, #22
 8001422:	601a      	str	r2, [r3, #0]
  return -1;
 8001424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <_exit>:

void _exit (int status)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001438:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ffe7 	bl	8001410 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001442:	e7fe      	b.n	8001442 <_exit+0x12>

08001444 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	e00a      	b.n	800146c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001456:	f3af 8000 	nop.w
 800145a:	4601      	mov	r1, r0
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	60ba      	str	r2, [r7, #8]
 8001462:	b2ca      	uxtb	r2, r1
 8001464:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	3301      	adds	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	429a      	cmp	r2, r3
 8001472:	dbf0      	blt.n	8001456 <_read+0x12>
  }

  return len;
 8001474:	687b      	ldr	r3, [r7, #4]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <_close>:
  }
  return len;
}

int _close(int file)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014a6:	605a      	str	r2, [r3, #4]
  return 0;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <_isatty>:

int _isatty(int file)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014be:	2301      	movs	r3, #1
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f0:	4a14      	ldr	r2, [pc, #80]	; (8001544 <_sbrk+0x5c>)
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <_sbrk+0x60>)
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <_sbrk+0x64>)
 8001506:	4a12      	ldr	r2, [pc, #72]	; (8001550 <_sbrk+0x68>)
 8001508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	429a      	cmp	r2, r3
 8001516:	d207      	bcs.n	8001528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001518:	f004 fa6e 	bl	80059f8 <__errno>
 800151c:	4603      	mov	r3, r0
 800151e:	220c      	movs	r2, #12
 8001520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001526:	e009      	b.n	800153c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <_sbrk+0x64>)
 8001538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153a:	68fb      	ldr	r3, [r7, #12]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20020000 	.word	0x20020000
 8001548:	00000400 	.word	0x00000400
 800154c:	200004e4 	.word	0x200004e4
 8001550:	20004490 	.word	0x20004490

08001554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <SystemInit+0x20>)
 800155a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <SystemInit+0x20>)
 8001560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800157c:	f7ff ffea 	bl	8001554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001580:	480c      	ldr	r0, [pc, #48]	; (80015b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001582:	490d      	ldr	r1, [pc, #52]	; (80015b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001588:	e002      	b.n	8001590 <LoopCopyDataInit>

0800158a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800158c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158e:	3304      	adds	r3, #4

08001590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001594:	d3f9      	bcc.n	800158a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001598:	4c0a      	ldr	r4, [pc, #40]	; (80015c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800159c:	e001      	b.n	80015a2 <LoopFillZerobss>

0800159e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a0:	3204      	adds	r2, #4

080015a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a4:	d3fb      	bcc.n	800159e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80015a6:	f004 fa2d 	bl	8005a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015aa:	f7ff fcaf 	bl	8000f0c <main>
  bx  lr    
 80015ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80015bc:	080081ac 	.word	0x080081ac
  ldr r2, =_sbss
 80015c0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80015c4:	20004490 	.word	0x20004490

080015c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC_IRQHandler>
	...

080015cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0d      	ldr	r2, [pc, #52]	; (800160c <HAL_Init+0x40>)
 80015d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0a      	ldr	r2, [pc, #40]	; (800160c <HAL_Init+0x40>)
 80015e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_Init+0x40>)
 80015ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f4:	2003      	movs	r0, #3
 80015f6:	f000 f92b 	bl	8001850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fa:	200f      	movs	r0, #15
 80015fc:	f000 f808 	bl	8001610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001600:	f7ff fe30 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023c00 	.word	0x40023c00

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_InitTick+0x54>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_InitTick+0x58>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001626:	fbb3 f3f1 	udiv	r3, r3, r1
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f943 	bl	80018ba <HAL_SYSTICK_Config>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e00e      	b.n	800165c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b0f      	cmp	r3, #15
 8001642:	d80a      	bhi.n	800165a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001644:	2200      	movs	r2, #0
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800164c:	f000 f90b 	bl	8001866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001650:	4a06      	ldr	r2, [pc, #24]	; (800166c <HAL_InitTick+0x5c>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	e000      	b.n	800165c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000000 	.word	0x20000000
 8001668:	20000008 	.word	0x20000008
 800166c:	20000004 	.word	0x20000004

08001670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_IncTick+0x20>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_IncTick+0x24>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4413      	add	r3, r2
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <HAL_IncTick+0x24>)
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000008 	.word	0x20000008
 8001694:	200004e8 	.word	0x200004e8

08001698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return uwTick;
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <HAL_GetTick+0x14>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	200004e8 	.word	0x200004e8

080016b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016cc:	4013      	ands	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	60d3      	str	r3, [r2, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <__NVIC_GetPriorityGrouping+0x18>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	f003 0307 	and.w	r3, r3, #7
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	2b00      	cmp	r3, #0
 8001724:	db0b      	blt.n	800173e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	f003 021f 	and.w	r2, r3, #31
 800172c:	4907      	ldr	r1, [pc, #28]	; (800174c <__NVIC_EnableIRQ+0x38>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	2001      	movs	r0, #1
 8001736:	fa00 f202 	lsl.w	r2, r0, r2
 800173a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000e100 	.word	0xe000e100

08001750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	6039      	str	r1, [r7, #0]
 800175a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001760:	2b00      	cmp	r3, #0
 8001762:	db0a      	blt.n	800177a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	b2da      	uxtb	r2, r3
 8001768:	490c      	ldr	r1, [pc, #48]	; (800179c <__NVIC_SetPriority+0x4c>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	0112      	lsls	r2, r2, #4
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	440b      	add	r3, r1
 8001774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001778:	e00a      	b.n	8001790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4908      	ldr	r1, [pc, #32]	; (80017a0 <__NVIC_SetPriority+0x50>)
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	3b04      	subs	r3, #4
 8001788:	0112      	lsls	r2, r2, #4
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	440b      	add	r3, r1
 800178e:	761a      	strb	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000e100 	.word	0xe000e100
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b089      	sub	sp, #36	; 0x24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f1c3 0307 	rsb	r3, r3, #7
 80017be:	2b04      	cmp	r3, #4
 80017c0:	bf28      	it	cs
 80017c2:	2304      	movcs	r3, #4
 80017c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3304      	adds	r3, #4
 80017ca:	2b06      	cmp	r3, #6
 80017cc:	d902      	bls.n	80017d4 <NVIC_EncodePriority+0x30>
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3b03      	subs	r3, #3
 80017d2:	e000      	b.n	80017d6 <NVIC_EncodePriority+0x32>
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43da      	mvns	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	401a      	ands	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	43d9      	mvns	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	4313      	orrs	r3, r2
         );
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3724      	adds	r7, #36	; 0x24
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800181c:	d301      	bcc.n	8001822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181e:	2301      	movs	r3, #1
 8001820:	e00f      	b.n	8001842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001822:	4a0a      	ldr	r2, [pc, #40]	; (800184c <SysTick_Config+0x40>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182a:	210f      	movs	r1, #15
 800182c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001830:	f7ff ff8e 	bl	8001750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <SysTick_Config+0x40>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <SysTick_Config+0x40>)
 800183c:	2207      	movs	r2, #7
 800183e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	e000e010 	.word	0xe000e010

08001850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ff29 	bl	80016b0 <__NVIC_SetPriorityGrouping>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001878:	f7ff ff3e 	bl	80016f8 <__NVIC_GetPriorityGrouping>
 800187c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	6978      	ldr	r0, [r7, #20]
 8001884:	f7ff ff8e 	bl	80017a4 <NVIC_EncodePriority>
 8001888:	4602      	mov	r2, r0
 800188a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff5d 	bl	8001750 <__NVIC_SetPriority>
}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff31 	bl	8001714 <__NVIC_EnableIRQ>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffa2 	bl	800180c <SysTick_Config>
 80018c8:	4603      	mov	r3, r0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b084      	sub	sp, #16
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018e0:	f7ff feda 	bl	8001698 <HAL_GetTick>
 80018e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d008      	beq.n	8001904 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2280      	movs	r2, #128	; 0x80
 80018f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e052      	b.n	80019aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0216 	bic.w	r2, r2, #22
 8001912:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	695a      	ldr	r2, [r3, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001922:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	2b00      	cmp	r3, #0
 800192a:	d103      	bne.n	8001934 <HAL_DMA_Abort+0x62>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001930:	2b00      	cmp	r3, #0
 8001932:	d007      	beq.n	8001944 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0208 	bic.w	r2, r2, #8
 8001942:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0201 	bic.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001954:	e013      	b.n	800197e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001956:	f7ff fe9f 	bl	8001698 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b05      	cmp	r3, #5
 8001962:	d90c      	bls.n	800197e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2220      	movs	r2, #32
 8001968:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2203      	movs	r2, #3
 800196e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e015      	b.n	80019aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1e4      	bne.n	8001956 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001990:	223f      	movs	r2, #63	; 0x3f
 8001992:	409a      	lsls	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d004      	beq.n	80019d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2280      	movs	r2, #128	; 0x80
 80019ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e00c      	b.n	80019ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2205      	movs	r2, #5
 80019d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0201 	bic.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	e16b      	b.n	8001cec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a14:	2201      	movs	r2, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	f040 815a 	bne.w	8001ce6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d005      	beq.n	8001a4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d130      	bne.n	8001aac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	2203      	movs	r2, #3
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a80:	2201      	movs	r2, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 0201 	and.w	r2, r3, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d017      	beq.n	8001ae8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d123      	bne.n	8001b3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	08da      	lsrs	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3208      	adds	r2, #8
 8001afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	69b9      	ldr	r1, [r7, #24]
 8001b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0203 	and.w	r2, r3, #3
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80b4 	beq.w	8001ce6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b60      	ldr	r3, [pc, #384]	; (8001d04 <HAL_GPIO_Init+0x30c>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a5f      	ldr	r2, [pc, #380]	; (8001d04 <HAL_GPIO_Init+0x30c>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b5d      	ldr	r3, [pc, #372]	; (8001d04 <HAL_GPIO_Init+0x30c>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b9a:	4a5b      	ldr	r2, [pc, #364]	; (8001d08 <HAL_GPIO_Init+0x310>)
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a52      	ldr	r2, [pc, #328]	; (8001d0c <HAL_GPIO_Init+0x314>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d02b      	beq.n	8001c1e <HAL_GPIO_Init+0x226>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a51      	ldr	r2, [pc, #324]	; (8001d10 <HAL_GPIO_Init+0x318>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d025      	beq.n	8001c1a <HAL_GPIO_Init+0x222>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a50      	ldr	r2, [pc, #320]	; (8001d14 <HAL_GPIO_Init+0x31c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d01f      	beq.n	8001c16 <HAL_GPIO_Init+0x21e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4f      	ldr	r2, [pc, #316]	; (8001d18 <HAL_GPIO_Init+0x320>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d019      	beq.n	8001c12 <HAL_GPIO_Init+0x21a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4e      	ldr	r2, [pc, #312]	; (8001d1c <HAL_GPIO_Init+0x324>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_GPIO_Init+0x216>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4d      	ldr	r2, [pc, #308]	; (8001d20 <HAL_GPIO_Init+0x328>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00d      	beq.n	8001c0a <HAL_GPIO_Init+0x212>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4c      	ldr	r2, [pc, #304]	; (8001d24 <HAL_GPIO_Init+0x32c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d007      	beq.n	8001c06 <HAL_GPIO_Init+0x20e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4b      	ldr	r2, [pc, #300]	; (8001d28 <HAL_GPIO_Init+0x330>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_GPIO_Init+0x20a>
 8001bfe:	2307      	movs	r3, #7
 8001c00:	e00e      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c02:	2308      	movs	r3, #8
 8001c04:	e00c      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c06:	2306      	movs	r3, #6
 8001c08:	e00a      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c0a:	2305      	movs	r3, #5
 8001c0c:	e008      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c0e:	2304      	movs	r3, #4
 8001c10:	e006      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c12:	2303      	movs	r3, #3
 8001c14:	e004      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e002      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	f002 0203 	and.w	r2, r2, #3
 8001c26:	0092      	lsls	r2, r2, #2
 8001c28:	4093      	lsls	r3, r2
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c30:	4935      	ldr	r1, [pc, #212]	; (8001d08 <HAL_GPIO_Init+0x310>)
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	089b      	lsrs	r3, r3, #2
 8001c36:	3302      	adds	r3, #2
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c62:	4a32      	ldr	r2, [pc, #200]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c68:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c8c:	4a27      	ldr	r2, [pc, #156]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c92:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cb6:	4a1d      	ldr	r2, [pc, #116]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce0:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	2b0f      	cmp	r3, #15
 8001cf0:	f67f ae90 	bls.w	8001a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40013800 	.word	0x40013800
 8001d0c:	40020000 	.word	0x40020000
 8001d10:	40020400 	.word	0x40020400
 8001d14:	40020800 	.word	0x40020800
 8001d18:	40020c00 	.word	0x40020c00
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40021400 	.word	0x40021400
 8001d24:	40021800 	.word	0x40021800
 8001d28:	40021c00 	.word	0x40021c00
 8001d2c:	40013c00 	.word	0x40013c00

08001d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d40:	787b      	ldrb	r3, [r7, #1]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d4c:	e003      	b.n	8001d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	041a      	lsls	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	619a      	str	r2, [r3, #24]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e267      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d075      	beq.n	8001e6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d82:	4b88      	ldr	r3, [pc, #544]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d00c      	beq.n	8001da8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d8e:	4b85      	ldr	r3, [pc, #532]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d112      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d9a:	4b82      	ldr	r3, [pc, #520]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001da6:	d10b      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da8:	4b7e      	ldr	r3, [pc, #504]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d05b      	beq.n	8001e6c <HAL_RCC_OscConfig+0x108>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d157      	bne.n	8001e6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e242      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc8:	d106      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x74>
 8001dca:	4b76      	ldr	r3, [pc, #472]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a75      	ldr	r2, [pc, #468]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e01d      	b.n	8001e14 <HAL_RCC_OscConfig+0xb0>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x98>
 8001de2:	4b70      	ldr	r3, [pc, #448]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a6f      	ldr	r2, [pc, #444]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b6d      	ldr	r3, [pc, #436]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a6c      	ldr	r2, [pc, #432]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e00b      	b.n	8001e14 <HAL_RCC_OscConfig+0xb0>
 8001dfc:	4b69      	ldr	r3, [pc, #420]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a68      	ldr	r2, [pc, #416]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b66      	ldr	r3, [pc, #408]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a65      	ldr	r2, [pc, #404]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d013      	beq.n	8001e44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fc3c 	bl	8001698 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e24:	f7ff fc38 	bl	8001698 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	; 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e207      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e36:	4b5b      	ldr	r3, [pc, #364]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0xc0>
 8001e42:	e014      	b.n	8001e6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff fc28 	bl	8001698 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7ff fc24 	bl	8001698 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e1f3      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5e:	4b51      	ldr	r3, [pc, #324]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0xe8>
 8001e6a:	e000      	b.n	8001e6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d063      	beq.n	8001f42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e7a:	4b4a      	ldr	r3, [pc, #296]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00b      	beq.n	8001e9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e86:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d11c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e92:	4b44      	ldr	r3, [pc, #272]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d116      	bne.n	8001ecc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9e:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x152>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e1c7      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb6:	4b3b      	ldr	r3, [pc, #236]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4937      	ldr	r1, [pc, #220]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eca:	e03a      	b.n	8001f42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d020      	beq.n	8001f16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed4:	4b34      	ldr	r3, [pc, #208]	; (8001fa8 <HAL_RCC_OscConfig+0x244>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eda:	f7ff fbdd 	bl	8001698 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee2:	f7ff fbd9 	bl	8001698 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e1a8      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f00:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4925      	ldr	r1, [pc, #148]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	600b      	str	r3, [r1, #0]
 8001f14:	e015      	b.n	8001f42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f16:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <HAL_RCC_OscConfig+0x244>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fbbc 	bl	8001698 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f24:	f7ff fbb8 	bl	8001698 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e187      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f36:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d036      	beq.n	8001fbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d016      	beq.n	8001f84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_RCC_OscConfig+0x248>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5c:	f7ff fb9c 	bl	8001698 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f64:	f7ff fb98 	bl	8001698 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e167      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f76:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x200>
 8001f82:	e01b      	b.n	8001fbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_RCC_OscConfig+0x248>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8a:	f7ff fb85 	bl	8001698 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f90:	e00e      	b.n	8001fb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f92:	f7ff fb81 	bl	8001698 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d907      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e150      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	42470000 	.word	0x42470000
 8001fac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb0:	4b88      	ldr	r3, [pc, #544]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8001fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1ea      	bne.n	8001f92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 8097 	beq.w	80020f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fce:	4b81      	ldr	r3, [pc, #516]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10f      	bne.n	8001ffa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	4b7d      	ldr	r3, [pc, #500]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a7c      	ldr	r2, [pc, #496]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fea:	4b7a      	ldr	r3, [pc, #488]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffa:	4b77      	ldr	r3, [pc, #476]	; (80021d8 <HAL_RCC_OscConfig+0x474>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d118      	bne.n	8002038 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002006:	4b74      	ldr	r3, [pc, #464]	; (80021d8 <HAL_RCC_OscConfig+0x474>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a73      	ldr	r2, [pc, #460]	; (80021d8 <HAL_RCC_OscConfig+0x474>)
 800200c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002012:	f7ff fb41 	bl	8001698 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201a:	f7ff fb3d 	bl	8001698 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e10c      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202c:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <HAL_RCC_OscConfig+0x474>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d106      	bne.n	800204e <HAL_RCC_OscConfig+0x2ea>
 8002040:	4b64      	ldr	r3, [pc, #400]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	4a63      	ldr	r2, [pc, #396]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6713      	str	r3, [r2, #112]	; 0x70
 800204c:	e01c      	b.n	8002088 <HAL_RCC_OscConfig+0x324>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b05      	cmp	r3, #5
 8002054:	d10c      	bne.n	8002070 <HAL_RCC_OscConfig+0x30c>
 8002056:	4b5f      	ldr	r3, [pc, #380]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205a:	4a5e      	ldr	r2, [pc, #376]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 800205c:	f043 0304 	orr.w	r3, r3, #4
 8002060:	6713      	str	r3, [r2, #112]	; 0x70
 8002062:	4b5c      	ldr	r3, [pc, #368]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002066:	4a5b      	ldr	r2, [pc, #364]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6713      	str	r3, [r2, #112]	; 0x70
 800206e:	e00b      	b.n	8002088 <HAL_RCC_OscConfig+0x324>
 8002070:	4b58      	ldr	r3, [pc, #352]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	4a57      	ldr	r2, [pc, #348]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	6713      	str	r3, [r2, #112]	; 0x70
 800207c:	4b55      	ldr	r3, [pc, #340]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002080:	4a54      	ldr	r2, [pc, #336]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002082:	f023 0304 	bic.w	r3, r3, #4
 8002086:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d015      	beq.n	80020bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002090:	f7ff fb02 	bl	8001698 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002096:	e00a      	b.n	80020ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002098:	f7ff fafe 	bl	8001698 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e0cb      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ae:	4b49      	ldr	r3, [pc, #292]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0ee      	beq.n	8002098 <HAL_RCC_OscConfig+0x334>
 80020ba:	e014      	b.n	80020e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020bc:	f7ff faec 	bl	8001698 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c2:	e00a      	b.n	80020da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c4:	f7ff fae8 	bl	8001698 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e0b5      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020da:	4b3e      	ldr	r3, [pc, #248]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1ee      	bne.n	80020c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ec:	4b39      	ldr	r3, [pc, #228]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	4a38      	ldr	r2, [pc, #224]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 80020f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80a1 	beq.w	8002244 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002102:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b08      	cmp	r3, #8
 800210c:	d05c      	beq.n	80021c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d141      	bne.n	800219a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002116:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_RCC_OscConfig+0x478>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7ff fabc 	bl	8001698 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002124:	f7ff fab8 	bl	8001698 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e087      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002136:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69da      	ldr	r2, [r3, #28]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	019b      	lsls	r3, r3, #6
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	085b      	lsrs	r3, r3, #1
 800215a:	3b01      	subs	r3, #1
 800215c:	041b      	lsls	r3, r3, #16
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	061b      	lsls	r3, r3, #24
 8002166:	491b      	ldr	r1, [pc, #108]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_RCC_OscConfig+0x478>)
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002172:	f7ff fa91 	bl	8001698 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217a:	f7ff fa8d 	bl	8001698 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e05c      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x416>
 8002198:	e054      	b.n	8002244 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_RCC_OscConfig+0x478>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7ff fa7a 	bl	8001698 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a8:	f7ff fa76 	bl	8001698 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e045      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x444>
 80021c6:	e03d      	b.n	8002244 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d107      	bne.n	80021e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e038      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40007000 	.word	0x40007000
 80021dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_RCC_OscConfig+0x4ec>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d028      	beq.n	8002240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d121      	bne.n	8002240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d11a      	bne.n	8002240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002210:	4013      	ands	r3, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002216:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002218:	4293      	cmp	r3, r2
 800221a:	d111      	bne.n	8002240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	085b      	lsrs	r3, r3, #1
 8002228:	3b01      	subs	r3, #1
 800222a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800222c:	429a      	cmp	r2, r3
 800222e:	d107      	bne.n	8002240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800223c:	429a      	cmp	r2, r3
 800223e:	d001      	beq.n	8002244 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800

08002254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0cc      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002268:	4b68      	ldr	r3, [pc, #416]	; (800240c <HAL_RCC_ClockConfig+0x1b8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d90c      	bls.n	8002290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002276:	4b65      	ldr	r3, [pc, #404]	; (800240c <HAL_RCC_ClockConfig+0x1b8>)
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b63      	ldr	r3, [pc, #396]	; (800240c <HAL_RCC_ClockConfig+0x1b8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0b8      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022a8:	4b59      	ldr	r3, [pc, #356]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4a58      	ldr	r2, [pc, #352]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c0:	4b53      	ldr	r3, [pc, #332]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	4a52      	ldr	r2, [pc, #328]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022cc:	4b50      	ldr	r3, [pc, #320]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	494d      	ldr	r1, [pc, #308]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d044      	beq.n	8002374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d119      	bne.n	8002332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e07f      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d003      	beq.n	8002312 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800230e:	2b03      	cmp	r3, #3
 8002310:	d107      	bne.n	8002322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002312:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d109      	bne.n	8002332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e06f      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002322:	4b3b      	ldr	r3, [pc, #236]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e067      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002332:	4b37      	ldr	r3, [pc, #220]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f023 0203 	bic.w	r2, r3, #3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	4934      	ldr	r1, [pc, #208]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	4313      	orrs	r3, r2
 8002342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002344:	f7ff f9a8 	bl	8001698 <HAL_GetTick>
 8002348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	e00a      	b.n	8002362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800234c:	f7ff f9a4 	bl	8001698 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f241 3288 	movw	r2, #5000	; 0x1388
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e04f      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002362:	4b2b      	ldr	r3, [pc, #172]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 020c 	and.w	r2, r3, #12
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	429a      	cmp	r2, r3
 8002372:	d1eb      	bne.n	800234c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002374:	4b25      	ldr	r3, [pc, #148]	; (800240c <HAL_RCC_ClockConfig+0x1b8>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d20c      	bcs.n	800239c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002382:	4b22      	ldr	r3, [pc, #136]	; (800240c <HAL_RCC_ClockConfig+0x1b8>)
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_RCC_ClockConfig+0x1b8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e032      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a8:	4b19      	ldr	r3, [pc, #100]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4916      	ldr	r1, [pc, #88]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d009      	beq.n	80023da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023c6:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	490e      	ldr	r1, [pc, #56]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023da:	f000 f821 	bl	8002420 <HAL_RCC_GetSysClockFreq>
 80023de:	4602      	mov	r2, r0
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	490a      	ldr	r1, [pc, #40]	; (8002414 <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	5ccb      	ldrb	r3, [r1, r3]
 80023ee:	fa22 f303 	lsr.w	r3, r2, r3
 80023f2:	4a09      	ldr	r2, [pc, #36]	; (8002418 <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff f908 	bl	8001610 <HAL_InitTick>

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40023c00 	.word	0x40023c00
 8002410:	40023800 	.word	0x40023800
 8002414:	08007e14 	.word	0x08007e14
 8002418:	20000000 	.word	0x20000000
 800241c:	20000004 	.word	0x20000004

08002420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002424:	b094      	sub	sp, #80	; 0x50
 8002426:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	647b      	str	r3, [r7, #68]	; 0x44
 800242c:	2300      	movs	r3, #0
 800242e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002430:	2300      	movs	r3, #0
 8002432:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002438:	4b79      	ldr	r3, [pc, #484]	; (8002620 <HAL_RCC_GetSysClockFreq+0x200>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b08      	cmp	r3, #8
 8002442:	d00d      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x40>
 8002444:	2b08      	cmp	r3, #8
 8002446:	f200 80e1 	bhi.w	800260c <HAL_RCC_GetSysClockFreq+0x1ec>
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x34>
 800244e:	2b04      	cmp	r3, #4
 8002450:	d003      	beq.n	800245a <HAL_RCC_GetSysClockFreq+0x3a>
 8002452:	e0db      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002454:	4b73      	ldr	r3, [pc, #460]	; (8002624 <HAL_RCC_GetSysClockFreq+0x204>)
 8002456:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002458:	e0db      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800245a:	4b73      	ldr	r3, [pc, #460]	; (8002628 <HAL_RCC_GetSysClockFreq+0x208>)
 800245c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800245e:	e0d8      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002460:	4b6f      	ldr	r3, [pc, #444]	; (8002620 <HAL_RCC_GetSysClockFreq+0x200>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002468:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800246a:	4b6d      	ldr	r3, [pc, #436]	; (8002620 <HAL_RCC_GetSysClockFreq+0x200>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d063      	beq.n	800253e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002476:	4b6a      	ldr	r3, [pc, #424]	; (8002620 <HAL_RCC_GetSysClockFreq+0x200>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	099b      	lsrs	r3, r3, #6
 800247c:	2200      	movs	r2, #0
 800247e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002480:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002488:	633b      	str	r3, [r7, #48]	; 0x30
 800248a:	2300      	movs	r3, #0
 800248c:	637b      	str	r3, [r7, #52]	; 0x34
 800248e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002492:	4622      	mov	r2, r4
 8002494:	462b      	mov	r3, r5
 8002496:	f04f 0000 	mov.w	r0, #0
 800249a:	f04f 0100 	mov.w	r1, #0
 800249e:	0159      	lsls	r1, r3, #5
 80024a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024a4:	0150      	lsls	r0, r2, #5
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4621      	mov	r1, r4
 80024ac:	1a51      	subs	r1, r2, r1
 80024ae:	6139      	str	r1, [r7, #16]
 80024b0:	4629      	mov	r1, r5
 80024b2:	eb63 0301 	sbc.w	r3, r3, r1
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024c4:	4659      	mov	r1, fp
 80024c6:	018b      	lsls	r3, r1, #6
 80024c8:	4651      	mov	r1, sl
 80024ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024ce:	4651      	mov	r1, sl
 80024d0:	018a      	lsls	r2, r1, #6
 80024d2:	4651      	mov	r1, sl
 80024d4:	ebb2 0801 	subs.w	r8, r2, r1
 80024d8:	4659      	mov	r1, fp
 80024da:	eb63 0901 	sbc.w	r9, r3, r1
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024f2:	4690      	mov	r8, r2
 80024f4:	4699      	mov	r9, r3
 80024f6:	4623      	mov	r3, r4
 80024f8:	eb18 0303 	adds.w	r3, r8, r3
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	462b      	mov	r3, r5
 8002500:	eb49 0303 	adc.w	r3, r9, r3
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002512:	4629      	mov	r1, r5
 8002514:	024b      	lsls	r3, r1, #9
 8002516:	4621      	mov	r1, r4
 8002518:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800251c:	4621      	mov	r1, r4
 800251e:	024a      	lsls	r2, r1, #9
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002526:	2200      	movs	r2, #0
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
 800252a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800252c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002530:	f7fe fb3a 	bl	8000ba8 <__aeabi_uldivmod>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4613      	mov	r3, r2
 800253a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800253c:	e058      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800253e:	4b38      	ldr	r3, [pc, #224]	; (8002620 <HAL_RCC_GetSysClockFreq+0x200>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	099b      	lsrs	r3, r3, #6
 8002544:	2200      	movs	r2, #0
 8002546:	4618      	mov	r0, r3
 8002548:	4611      	mov	r1, r2
 800254a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800254e:	623b      	str	r3, [r7, #32]
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
 8002554:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002558:	4642      	mov	r2, r8
 800255a:	464b      	mov	r3, r9
 800255c:	f04f 0000 	mov.w	r0, #0
 8002560:	f04f 0100 	mov.w	r1, #0
 8002564:	0159      	lsls	r1, r3, #5
 8002566:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800256a:	0150      	lsls	r0, r2, #5
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4641      	mov	r1, r8
 8002572:	ebb2 0a01 	subs.w	sl, r2, r1
 8002576:	4649      	mov	r1, r9
 8002578:	eb63 0b01 	sbc.w	fp, r3, r1
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002588:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800258c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002590:	ebb2 040a 	subs.w	r4, r2, sl
 8002594:	eb63 050b 	sbc.w	r5, r3, fp
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	00eb      	lsls	r3, r5, #3
 80025a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025a6:	00e2      	lsls	r2, r4, #3
 80025a8:	4614      	mov	r4, r2
 80025aa:	461d      	mov	r5, r3
 80025ac:	4643      	mov	r3, r8
 80025ae:	18e3      	adds	r3, r4, r3
 80025b0:	603b      	str	r3, [r7, #0]
 80025b2:	464b      	mov	r3, r9
 80025b4:	eb45 0303 	adc.w	r3, r5, r3
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025c6:	4629      	mov	r1, r5
 80025c8:	028b      	lsls	r3, r1, #10
 80025ca:	4621      	mov	r1, r4
 80025cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025d0:	4621      	mov	r1, r4
 80025d2:	028a      	lsls	r2, r1, #10
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025da:	2200      	movs	r2, #0
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	61fa      	str	r2, [r7, #28]
 80025e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025e4:	f7fe fae0 	bl	8000ba8 <__aeabi_uldivmod>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4613      	mov	r3, r2
 80025ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	0c1b      	lsrs	r3, r3, #16
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	3301      	adds	r3, #1
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002600:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800260a:	e002      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_RCC_GetSysClockFreq+0x204>)
 800260e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002614:	4618      	mov	r0, r3
 8002616:	3750      	adds	r7, #80	; 0x50
 8002618:	46bd      	mov	sp, r7
 800261a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	00f42400 	.word	0x00f42400
 8002628:	007a1200 	.word	0x007a1200

0800262c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002630:	4b03      	ldr	r3, [pc, #12]	; (8002640 <HAL_RCC_GetHCLKFreq+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000000 	.word	0x20000000

08002644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002648:	f7ff fff0 	bl	800262c <HAL_RCC_GetHCLKFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	0a9b      	lsrs	r3, r3, #10
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4903      	ldr	r1, [pc, #12]	; (8002668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40023800 	.word	0x40023800
 8002668:	08007e24 	.word	0x08007e24

0800266c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002670:	f7ff ffdc 	bl	800262c <HAL_RCC_GetHCLKFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	0b5b      	lsrs	r3, r3, #13
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4903      	ldr	r1, [pc, #12]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40023800 	.word	0x40023800
 8002690:	08007e24 	.word	0x08007e24

08002694 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e042      	b.n	800272c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7fe fdfe 	bl	80012bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2224      	movs	r2, #36	; 0x24
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 fd69 	bl	80031b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800270c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af02      	add	r7, sp, #8
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b20      	cmp	r3, #32
 8002752:	d175      	bne.n	8002840 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_UART_Transmit+0x2c>
 800275a:	88fb      	ldrh	r3, [r7, #6]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e06e      	b.n	8002842 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2221      	movs	r2, #33	; 0x21
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002772:	f7fe ff91 	bl	8001698 <HAL_GetTick>
 8002776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	88fa      	ldrh	r2, [r7, #6]
 800277c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	88fa      	ldrh	r2, [r7, #6]
 8002782:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278c:	d108      	bne.n	80027a0 <HAL_UART_Transmit+0x6c>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d104      	bne.n	80027a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	61bb      	str	r3, [r7, #24]
 800279e:	e003      	b.n	80027a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027a8:	e02e      	b.n	8002808 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2200      	movs	r2, #0
 80027b2:	2180      	movs	r1, #128	; 0x80
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 fb05 	bl	8002dc4 <UART_WaitOnFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e03a      	b.n	8002842 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10b      	bne.n	80027ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	3302      	adds	r3, #2
 80027e6:	61bb      	str	r3, [r7, #24]
 80027e8:	e007      	b.n	80027fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	781a      	ldrb	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	3301      	adds	r3, #1
 80027f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1cb      	bne.n	80027aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2200      	movs	r2, #0
 800281a:	2140      	movs	r1, #64	; 0x40
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 fad1 	bl	8002dc4 <UART_WaitOnFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e006      	b.n	8002842 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	e000      	b.n	8002842 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002840:	2302      	movs	r3, #2
  }
}
 8002842:	4618      	mov	r0, r3
 8002844:	3720      	adds	r7, #32
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b0ba      	sub	sp, #232	; 0xe8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002878:	2300      	movs	r3, #0
 800287a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800287e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800288a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10f      	bne.n	80028b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <HAL_UART_IRQHandler+0x66>
 800289e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fbc2 	bl	8003034 <UART_Receive_IT>
      return;
 80028b0:	e25b      	b.n	8002d6a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80028b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80de 	beq.w	8002a78 <HAL_UART_IRQHandler+0x22c>
 80028bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d106      	bne.n	80028d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80d1 	beq.w	8002a78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <HAL_UART_IRQHandler+0xae>
 80028e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f043 0201 	orr.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <HAL_UART_IRQHandler+0xd2>
 8002906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d005      	beq.n	800291e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	f043 0202 	orr.w	r2, r3, #2
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800291e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <HAL_UART_IRQHandler+0xf6>
 800292a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d005      	beq.n	8002942 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	f043 0204 	orr.w	r2, r3, #4
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d011      	beq.n	8002972 <HAL_UART_IRQHandler+0x126>
 800294e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b00      	cmp	r3, #0
 8002958:	d105      	bne.n	8002966 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800295a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	f043 0208 	orr.w	r2, r3, #8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 81f2 	beq.w	8002d60 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800297c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_UART_IRQHandler+0x14e>
 8002988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fb4d 	bl	8003034 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a4:	2b40      	cmp	r3, #64	; 0x40
 80029a6:	bf0c      	ite	eq
 80029a8:	2301      	moveq	r3, #1
 80029aa:	2300      	movne	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d103      	bne.n	80029c6 <HAL_UART_IRQHandler+0x17a>
 80029be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d04f      	beq.n	8002a66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fa55 	bl	8002e76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d6:	2b40      	cmp	r3, #64	; 0x40
 80029d8:	d141      	bne.n	8002a5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	3314      	adds	r3, #20
 80029e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029e8:	e853 3f00 	ldrex	r3, [r3]
 80029ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	3314      	adds	r3, #20
 8002a02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a16:	e841 2300 	strex	r3, r2, [r1]
 8002a1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1d9      	bne.n	80029da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d013      	beq.n	8002a56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a32:	4a7e      	ldr	r2, [pc, #504]	; (8002c2c <HAL_UART_IRQHandler+0x3e0>)
 8002a34:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe ffb9 	bl	80019b2 <HAL_DMA_Abort_IT>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d016      	beq.n	8002a74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a50:	4610      	mov	r0, r2
 8002a52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a54:	e00e      	b.n	8002a74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f99e 	bl	8002d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a5c:	e00a      	b.n	8002a74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f99a 	bl	8002d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a64:	e006      	b.n	8002a74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f996 	bl	8002d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002a72:	e175      	b.n	8002d60 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a74:	bf00      	nop
    return;
 8002a76:	e173      	b.n	8002d60 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	f040 814f 	bne.w	8002d20 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 8148 	beq.w	8002d20 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a94:	f003 0310 	and.w	r3, r3, #16
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 8141 	beq.w	8002d20 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	f040 80b6 	bne.w	8002c30 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ad0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8145 	beq.w	8002d64 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ade:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	f080 813e 	bcs.w	8002d64 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002aee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002afa:	f000 8088 	beq.w	8002c0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	330c      	adds	r3, #12
 8002b04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b0c:	e853 3f00 	ldrex	r3, [r3]
 8002b10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	330c      	adds	r3, #12
 8002b26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b3a:	e841 2300 	strex	r3, r2, [r1]
 8002b3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1d9      	bne.n	8002afe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3314      	adds	r3, #20
 8002b50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b54:	e853 3f00 	ldrex	r3, [r3]
 8002b58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3314      	adds	r3, #20
 8002b6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b7a:	e841 2300 	strex	r3, r2, [r1]
 8002b7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1e1      	bne.n	8002b4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3314      	adds	r3, #20
 8002b8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b90:	e853 3f00 	ldrex	r3, [r3]
 8002b94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3314      	adds	r3, #20
 8002ba6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002baa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002bb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bb2:	e841 2300 	strex	r3, r2, [r1]
 8002bb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1e3      	bne.n	8002b86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	330c      	adds	r3, #12
 8002bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd6:	e853 3f00 	ldrex	r3, [r3]
 8002bda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bde:	f023 0310 	bic.w	r3, r3, #16
 8002be2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	330c      	adds	r3, #12
 8002bec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002bf0:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bf2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bf8:	e841 2300 	strex	r3, r2, [r1]
 8002bfc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1e3      	bne.n	8002bcc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fe fe62 	bl	80018d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2202      	movs	r2, #2
 8002c12:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	4619      	mov	r1, r3
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f8c1 	bl	8002dac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c2a:	e09b      	b.n	8002d64 <HAL_UART_IRQHandler+0x518>
 8002c2c:	08002f3d 	.word	0x08002f3d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 808e 	beq.w	8002d68 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002c4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8089 	beq.w	8002d68 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	330c      	adds	r3, #12
 8002c5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c60:	e853 3f00 	ldrex	r3, [r3]
 8002c64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	330c      	adds	r3, #12
 8002c76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c7a:	647a      	str	r2, [r7, #68]	; 0x44
 8002c7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c82:	e841 2300 	strex	r3, r2, [r1]
 8002c86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1e3      	bne.n	8002c56 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3314      	adds	r3, #20
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	e853 3f00 	ldrex	r3, [r3]
 8002c9c:	623b      	str	r3, [r7, #32]
   return(result);
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	f023 0301 	bic.w	r3, r3, #1
 8002ca4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3314      	adds	r3, #20
 8002cae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002cb2:	633a      	str	r2, [r7, #48]	; 0x30
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cba:	e841 2300 	strex	r3, r2, [r1]
 8002cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1e3      	bne.n	8002c8e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	e853 3f00 	ldrex	r3, [r3]
 8002ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 0310 	bic.w	r3, r3, #16
 8002cea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	330c      	adds	r3, #12
 8002cf4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002cf8:	61fa      	str	r2, [r7, #28]
 8002cfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfc:	69b9      	ldr	r1, [r7, #24]
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	e841 2300 	strex	r3, r2, [r1]
 8002d04:	617b      	str	r3, [r7, #20]
   return(result);
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1e3      	bne.n	8002cd4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d16:	4619      	mov	r1, r3
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f847 	bl	8002dac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d1e:	e023      	b.n	8002d68 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d009      	beq.n	8002d40 <HAL_UART_IRQHandler+0x4f4>
 8002d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f913 	bl	8002f64 <UART_Transmit_IT>
    return;
 8002d3e:	e014      	b.n	8002d6a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00e      	beq.n	8002d6a <HAL_UART_IRQHandler+0x51e>
 8002d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f953 	bl	8003004 <UART_EndTransmit_IT>
    return;
 8002d5e:	e004      	b.n	8002d6a <HAL_UART_IRQHandler+0x51e>
    return;
 8002d60:	bf00      	nop
 8002d62:	e002      	b.n	8002d6a <HAL_UART_IRQHandler+0x51e>
      return;
 8002d64:	bf00      	nop
 8002d66:	e000      	b.n	8002d6a <HAL_UART_IRQHandler+0x51e>
      return;
 8002d68:	bf00      	nop
  }
}
 8002d6a:	37e8      	adds	r7, #232	; 0xe8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd4:	e03b      	b.n	8002e4e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ddc:	d037      	beq.n	8002e4e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dde:	f7fe fc5b 	bl	8001698 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	6a3a      	ldr	r2, [r7, #32]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d302      	bcc.n	8002df4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e03a      	b.n	8002e6e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d023      	beq.n	8002e4e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b80      	cmp	r3, #128	; 0x80
 8002e0a:	d020      	beq.n	8002e4e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b40      	cmp	r3, #64	; 0x40
 8002e10:	d01d      	beq.n	8002e4e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d116      	bne.n	8002e4e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f81d 	bl	8002e76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2208      	movs	r2, #8
 8002e40:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e00f      	b.n	8002e6e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4013      	ands	r3, r2
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	bf0c      	ite	eq
 8002e5e:	2301      	moveq	r3, #1
 8002e60:	2300      	movne	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d0b4      	beq.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b095      	sub	sp, #84	; 0x54
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	330c      	adds	r3, #12
 8002e84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e88:	e853 3f00 	ldrex	r3, [r3]
 8002e8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	330c      	adds	r3, #12
 8002e9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e9e:	643a      	str	r2, [r7, #64]	; 0x40
 8002ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ea4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ea6:	e841 2300 	strex	r3, r2, [r1]
 8002eaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1e5      	bne.n	8002e7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3314      	adds	r3, #20
 8002eb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	e853 3f00 	ldrex	r3, [r3]
 8002ec0:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	3314      	adds	r3, #20
 8002ed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ed2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ed4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eda:	e841 2300 	strex	r3, r2, [r1]
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1e5      	bne.n	8002eb2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d119      	bne.n	8002f22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	330c      	adds	r3, #12
 8002ef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	e853 3f00 	ldrex	r3, [r3]
 8002efc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f023 0310 	bic.w	r3, r3, #16
 8002f04:	647b      	str	r3, [r7, #68]	; 0x44
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	330c      	adds	r3, #12
 8002f0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f0e:	61ba      	str	r2, [r7, #24]
 8002f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f12:	6979      	ldr	r1, [r7, #20]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1e5      	bne.n	8002eee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f30:	bf00      	nop
 8002f32:	3754      	adds	r7, #84	; 0x54
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f7ff ff1e 	bl	8002d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b21      	cmp	r3, #33	; 0x21
 8002f76:	d13e      	bne.n	8002ff6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f80:	d114      	bne.n	8002fac <UART_Transmit_IT+0x48>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d110      	bne.n	8002fac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f9e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	1c9a      	adds	r2, r3, #2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	621a      	str	r2, [r3, #32]
 8002faa:	e008      	b.n	8002fbe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	1c59      	adds	r1, r3, #1
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6211      	str	r1, [r2, #32]
 8002fb6:	781a      	ldrb	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10f      	bne.n	8002ff2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e000      	b.n	8002ff8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ff6:	2302      	movs	r3, #2
  }
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800301a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff fea3 	bl	8002d70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08c      	sub	sp, #48	; 0x30
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b22      	cmp	r3, #34	; 0x22
 8003046:	f040 80ae 	bne.w	80031a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003052:	d117      	bne.n	8003084 <UART_Receive_IT+0x50>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d113      	bne.n	8003084 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800305c:	2300      	movs	r3, #0
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	b29b      	uxth	r3, r3
 800306e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003072:	b29a      	uxth	r2, r3
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003076:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	1c9a      	adds	r2, r3, #2
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	629a      	str	r2, [r3, #40]	; 0x28
 8003082:	e026      	b.n	80030d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800308a:	2300      	movs	r3, #0
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003096:	d007      	beq.n	80030a8 <UART_Receive_IT+0x74>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10a      	bne.n	80030b6 <UART_Receive_IT+0x82>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d106      	bne.n	80030b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b2:	701a      	strb	r2, [r3, #0]
 80030b4:	e008      	b.n	80030c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29b      	uxth	r3, r3
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	4619      	mov	r1, r3
 80030e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d15d      	bne.n	80031a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0220 	bic.w	r2, r2, #32
 80030f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003104:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0201 	bic.w	r2, r2, #1
 8003114:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	2b01      	cmp	r3, #1
 800312a:	d135      	bne.n	8003198 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	330c      	adds	r3, #12
 8003138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	e853 3f00 	ldrex	r3, [r3]
 8003140:	613b      	str	r3, [r7, #16]
   return(result);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f023 0310 	bic.w	r3, r3, #16
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	330c      	adds	r3, #12
 8003150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003152:	623a      	str	r2, [r7, #32]
 8003154:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003156:	69f9      	ldr	r1, [r7, #28]
 8003158:	6a3a      	ldr	r2, [r7, #32]
 800315a:	e841 2300 	strex	r3, r2, [r1]
 800315e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1e5      	bne.n	8003132 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	2b10      	cmp	r3, #16
 8003172:	d10a      	bne.n	800318a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800318e:	4619      	mov	r1, r3
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff fe0b 	bl	8002dac <HAL_UARTEx_RxEventCallback>
 8003196:	e002      	b.n	800319e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff fdf3 	bl	8002d84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	e002      	b.n	80031a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e000      	b.n	80031a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80031a6:	2302      	movs	r3, #2
  }
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3730      	adds	r7, #48	; 0x30
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b4:	b0c0      	sub	sp, #256	; 0x100
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031cc:	68d9      	ldr	r1, [r3, #12]
 80031ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	ea40 0301 	orr.w	r3, r0, r1
 80031d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003208:	f021 010c 	bic.w	r1, r1, #12
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003216:	430b      	orrs	r3, r1
 8003218:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800321a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322a:	6999      	ldr	r1, [r3, #24]
 800322c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	ea40 0301 	orr.w	r3, r0, r1
 8003236:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	4b8f      	ldr	r3, [pc, #572]	; (800347c <UART_SetConfig+0x2cc>)
 8003240:	429a      	cmp	r2, r3
 8003242:	d005      	beq.n	8003250 <UART_SetConfig+0xa0>
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4b8d      	ldr	r3, [pc, #564]	; (8003480 <UART_SetConfig+0x2d0>)
 800324c:	429a      	cmp	r2, r3
 800324e:	d104      	bne.n	800325a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003250:	f7ff fa0c 	bl	800266c <HAL_RCC_GetPCLK2Freq>
 8003254:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003258:	e003      	b.n	8003262 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800325a:	f7ff f9f3 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 800325e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800326c:	f040 810c 	bne.w	8003488 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003274:	2200      	movs	r2, #0
 8003276:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800327a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800327e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003282:	4622      	mov	r2, r4
 8003284:	462b      	mov	r3, r5
 8003286:	1891      	adds	r1, r2, r2
 8003288:	65b9      	str	r1, [r7, #88]	; 0x58
 800328a:	415b      	adcs	r3, r3
 800328c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800328e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003292:	4621      	mov	r1, r4
 8003294:	eb12 0801 	adds.w	r8, r2, r1
 8003298:	4629      	mov	r1, r5
 800329a:	eb43 0901 	adc.w	r9, r3, r1
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032b2:	4690      	mov	r8, r2
 80032b4:	4699      	mov	r9, r3
 80032b6:	4623      	mov	r3, r4
 80032b8:	eb18 0303 	adds.w	r3, r8, r3
 80032bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032c0:	462b      	mov	r3, r5
 80032c2:	eb49 0303 	adc.w	r3, r9, r3
 80032c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032de:	460b      	mov	r3, r1
 80032e0:	18db      	adds	r3, r3, r3
 80032e2:	653b      	str	r3, [r7, #80]	; 0x50
 80032e4:	4613      	mov	r3, r2
 80032e6:	eb42 0303 	adc.w	r3, r2, r3
 80032ea:	657b      	str	r3, [r7, #84]	; 0x54
 80032ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032f4:	f7fd fc58 	bl	8000ba8 <__aeabi_uldivmod>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4b61      	ldr	r3, [pc, #388]	; (8003484 <UART_SetConfig+0x2d4>)
 80032fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	011c      	lsls	r4, r3, #4
 8003306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800330a:	2200      	movs	r2, #0
 800330c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003310:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003314:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003318:	4642      	mov	r2, r8
 800331a:	464b      	mov	r3, r9
 800331c:	1891      	adds	r1, r2, r2
 800331e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003320:	415b      	adcs	r3, r3
 8003322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003324:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003328:	4641      	mov	r1, r8
 800332a:	eb12 0a01 	adds.w	sl, r2, r1
 800332e:	4649      	mov	r1, r9
 8003330:	eb43 0b01 	adc.w	fp, r3, r1
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003340:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003344:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003348:	4692      	mov	sl, r2
 800334a:	469b      	mov	fp, r3
 800334c:	4643      	mov	r3, r8
 800334e:	eb1a 0303 	adds.w	r3, sl, r3
 8003352:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003356:	464b      	mov	r3, r9
 8003358:	eb4b 0303 	adc.w	r3, fp, r3
 800335c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800336c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003370:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003374:	460b      	mov	r3, r1
 8003376:	18db      	adds	r3, r3, r3
 8003378:	643b      	str	r3, [r7, #64]	; 0x40
 800337a:	4613      	mov	r3, r2
 800337c:	eb42 0303 	adc.w	r3, r2, r3
 8003380:	647b      	str	r3, [r7, #68]	; 0x44
 8003382:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003386:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800338a:	f7fd fc0d 	bl	8000ba8 <__aeabi_uldivmod>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4611      	mov	r1, r2
 8003394:	4b3b      	ldr	r3, [pc, #236]	; (8003484 <UART_SetConfig+0x2d4>)
 8003396:	fba3 2301 	umull	r2, r3, r3, r1
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	2264      	movs	r2, #100	; 0x64
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	1acb      	subs	r3, r1, r3
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033aa:	4b36      	ldr	r3, [pc, #216]	; (8003484 <UART_SetConfig+0x2d4>)
 80033ac:	fba3 2302 	umull	r2, r3, r3, r2
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033b8:	441c      	add	r4, r3
 80033ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033be:	2200      	movs	r2, #0
 80033c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80033c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033cc:	4642      	mov	r2, r8
 80033ce:	464b      	mov	r3, r9
 80033d0:	1891      	adds	r1, r2, r2
 80033d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80033d4:	415b      	adcs	r3, r3
 80033d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033dc:	4641      	mov	r1, r8
 80033de:	1851      	adds	r1, r2, r1
 80033e0:	6339      	str	r1, [r7, #48]	; 0x30
 80033e2:	4649      	mov	r1, r9
 80033e4:	414b      	adcs	r3, r1
 80033e6:	637b      	str	r3, [r7, #52]	; 0x34
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033f4:	4659      	mov	r1, fp
 80033f6:	00cb      	lsls	r3, r1, #3
 80033f8:	4651      	mov	r1, sl
 80033fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033fe:	4651      	mov	r1, sl
 8003400:	00ca      	lsls	r2, r1, #3
 8003402:	4610      	mov	r0, r2
 8003404:	4619      	mov	r1, r3
 8003406:	4603      	mov	r3, r0
 8003408:	4642      	mov	r2, r8
 800340a:	189b      	adds	r3, r3, r2
 800340c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003410:	464b      	mov	r3, r9
 8003412:	460a      	mov	r2, r1
 8003414:	eb42 0303 	adc.w	r3, r2, r3
 8003418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003428:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800342c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003430:	460b      	mov	r3, r1
 8003432:	18db      	adds	r3, r3, r3
 8003434:	62bb      	str	r3, [r7, #40]	; 0x28
 8003436:	4613      	mov	r3, r2
 8003438:	eb42 0303 	adc.w	r3, r2, r3
 800343c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800343e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003442:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003446:	f7fd fbaf 	bl	8000ba8 <__aeabi_uldivmod>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <UART_SetConfig+0x2d4>)
 8003450:	fba3 1302 	umull	r1, r3, r3, r2
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	2164      	movs	r1, #100	; 0x64
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	3332      	adds	r3, #50	; 0x32
 8003462:	4a08      	ldr	r2, [pc, #32]	; (8003484 <UART_SetConfig+0x2d4>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	f003 0207 	and.w	r2, r3, #7
 800346e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4422      	add	r2, r4
 8003476:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003478:	e106      	b.n	8003688 <UART_SetConfig+0x4d8>
 800347a:	bf00      	nop
 800347c:	40011000 	.word	0x40011000
 8003480:	40011400 	.word	0x40011400
 8003484:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800348c:	2200      	movs	r2, #0
 800348e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003492:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003496:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800349a:	4642      	mov	r2, r8
 800349c:	464b      	mov	r3, r9
 800349e:	1891      	adds	r1, r2, r2
 80034a0:	6239      	str	r1, [r7, #32]
 80034a2:	415b      	adcs	r3, r3
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
 80034a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034aa:	4641      	mov	r1, r8
 80034ac:	1854      	adds	r4, r2, r1
 80034ae:	4649      	mov	r1, r9
 80034b0:	eb43 0501 	adc.w	r5, r3, r1
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	00eb      	lsls	r3, r5, #3
 80034be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034c2:	00e2      	lsls	r2, r4, #3
 80034c4:	4614      	mov	r4, r2
 80034c6:	461d      	mov	r5, r3
 80034c8:	4643      	mov	r3, r8
 80034ca:	18e3      	adds	r3, r4, r3
 80034cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034d0:	464b      	mov	r3, r9
 80034d2:	eb45 0303 	adc.w	r3, r5, r3
 80034d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034f6:	4629      	mov	r1, r5
 80034f8:	008b      	lsls	r3, r1, #2
 80034fa:	4621      	mov	r1, r4
 80034fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003500:	4621      	mov	r1, r4
 8003502:	008a      	lsls	r2, r1, #2
 8003504:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003508:	f7fd fb4e 	bl	8000ba8 <__aeabi_uldivmod>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4b60      	ldr	r3, [pc, #384]	; (8003694 <UART_SetConfig+0x4e4>)
 8003512:	fba3 2302 	umull	r2, r3, r3, r2
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	011c      	lsls	r4, r3, #4
 800351a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800351e:	2200      	movs	r2, #0
 8003520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003524:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003528:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800352c:	4642      	mov	r2, r8
 800352e:	464b      	mov	r3, r9
 8003530:	1891      	adds	r1, r2, r2
 8003532:	61b9      	str	r1, [r7, #24]
 8003534:	415b      	adcs	r3, r3
 8003536:	61fb      	str	r3, [r7, #28]
 8003538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800353c:	4641      	mov	r1, r8
 800353e:	1851      	adds	r1, r2, r1
 8003540:	6139      	str	r1, [r7, #16]
 8003542:	4649      	mov	r1, r9
 8003544:	414b      	adcs	r3, r1
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003554:	4659      	mov	r1, fp
 8003556:	00cb      	lsls	r3, r1, #3
 8003558:	4651      	mov	r1, sl
 800355a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800355e:	4651      	mov	r1, sl
 8003560:	00ca      	lsls	r2, r1, #3
 8003562:	4610      	mov	r0, r2
 8003564:	4619      	mov	r1, r3
 8003566:	4603      	mov	r3, r0
 8003568:	4642      	mov	r2, r8
 800356a:	189b      	adds	r3, r3, r2
 800356c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003570:	464b      	mov	r3, r9
 8003572:	460a      	mov	r2, r1
 8003574:	eb42 0303 	adc.w	r3, r2, r3
 8003578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800357c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	67bb      	str	r3, [r7, #120]	; 0x78
 8003586:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003594:	4649      	mov	r1, r9
 8003596:	008b      	lsls	r3, r1, #2
 8003598:	4641      	mov	r1, r8
 800359a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800359e:	4641      	mov	r1, r8
 80035a0:	008a      	lsls	r2, r1, #2
 80035a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035a6:	f7fd faff 	bl	8000ba8 <__aeabi_uldivmod>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4611      	mov	r1, r2
 80035b0:	4b38      	ldr	r3, [pc, #224]	; (8003694 <UART_SetConfig+0x4e4>)
 80035b2:	fba3 2301 	umull	r2, r3, r3, r1
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	2264      	movs	r2, #100	; 0x64
 80035ba:	fb02 f303 	mul.w	r3, r2, r3
 80035be:	1acb      	subs	r3, r1, r3
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	3332      	adds	r3, #50	; 0x32
 80035c4:	4a33      	ldr	r2, [pc, #204]	; (8003694 <UART_SetConfig+0x4e4>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035d0:	441c      	add	r4, r3
 80035d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035d6:	2200      	movs	r2, #0
 80035d8:	673b      	str	r3, [r7, #112]	; 0x70
 80035da:	677a      	str	r2, [r7, #116]	; 0x74
 80035dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035e0:	4642      	mov	r2, r8
 80035e2:	464b      	mov	r3, r9
 80035e4:	1891      	adds	r1, r2, r2
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	415b      	adcs	r3, r3
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035f0:	4641      	mov	r1, r8
 80035f2:	1851      	adds	r1, r2, r1
 80035f4:	6039      	str	r1, [r7, #0]
 80035f6:	4649      	mov	r1, r9
 80035f8:	414b      	adcs	r3, r1
 80035fa:	607b      	str	r3, [r7, #4]
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003608:	4659      	mov	r1, fp
 800360a:	00cb      	lsls	r3, r1, #3
 800360c:	4651      	mov	r1, sl
 800360e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003612:	4651      	mov	r1, sl
 8003614:	00ca      	lsls	r2, r1, #3
 8003616:	4610      	mov	r0, r2
 8003618:	4619      	mov	r1, r3
 800361a:	4603      	mov	r3, r0
 800361c:	4642      	mov	r2, r8
 800361e:	189b      	adds	r3, r3, r2
 8003620:	66bb      	str	r3, [r7, #104]	; 0x68
 8003622:	464b      	mov	r3, r9
 8003624:	460a      	mov	r2, r1
 8003626:	eb42 0303 	adc.w	r3, r2, r3
 800362a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	663b      	str	r3, [r7, #96]	; 0x60
 8003636:	667a      	str	r2, [r7, #100]	; 0x64
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003644:	4649      	mov	r1, r9
 8003646:	008b      	lsls	r3, r1, #2
 8003648:	4641      	mov	r1, r8
 800364a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800364e:	4641      	mov	r1, r8
 8003650:	008a      	lsls	r2, r1, #2
 8003652:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003656:	f7fd faa7 	bl	8000ba8 <__aeabi_uldivmod>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <UART_SetConfig+0x4e4>)
 8003660:	fba3 1302 	umull	r1, r3, r3, r2
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	2164      	movs	r1, #100	; 0x64
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	3332      	adds	r3, #50	; 0x32
 8003672:	4a08      	ldr	r2, [pc, #32]	; (8003694 <UART_SetConfig+0x4e4>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	f003 020f 	and.w	r2, r3, #15
 800367e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4422      	add	r2, r4
 8003686:	609a      	str	r2, [r3, #8]
}
 8003688:	bf00      	nop
 800368a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800368e:	46bd      	mov	sp, r7
 8003690:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003694:	51eb851f 	.word	0x51eb851f

08003698 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80036a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036aa:	2b84      	cmp	r3, #132	; 0x84
 80036ac:	d005      	beq.n	80036ba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80036ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4413      	add	r3, r2
 80036b6:	3303      	adds	r3, #3
 80036b8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80036ba:	68fb      	ldr	r3, [r7, #12]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80036cc:	f000 faf6 	bl	8003cbc <vTaskStartScheduler>
  
  return osOK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80036d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036d8:	b089      	sub	sp, #36	; 0x24
 80036da:	af04      	add	r7, sp, #16
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d020      	beq.n	800372a <osThreadCreate+0x54>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01c      	beq.n	800372a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685c      	ldr	r4, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691e      	ldr	r6, [r3, #16]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff ffc8 	bl	8003698 <makeFreeRtosPriority>
 8003708:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003712:	9202      	str	r2, [sp, #8]
 8003714:	9301      	str	r3, [sp, #4]
 8003716:	9100      	str	r1, [sp, #0]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4632      	mov	r2, r6
 800371c:	4629      	mov	r1, r5
 800371e:	4620      	mov	r0, r4
 8003720:	f000 f8ed 	bl	80038fe <xTaskCreateStatic>
 8003724:	4603      	mov	r3, r0
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e01c      	b.n	8003764 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685c      	ldr	r4, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003736:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff ffaa 	bl	8003698 <makeFreeRtosPriority>
 8003744:	4602      	mov	r2, r0
 8003746:	f107 030c 	add.w	r3, r7, #12
 800374a:	9301      	str	r3, [sp, #4]
 800374c:	9200      	str	r2, [sp, #0]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	4632      	mov	r2, r6
 8003752:	4629      	mov	r1, r5
 8003754:	4620      	mov	r0, r4
 8003756:	f000 f92f 	bl	80039b8 <xTaskCreate>
 800375a:	4603      	mov	r3, r0
 800375c:	2b01      	cmp	r3, #1
 800375e:	d001      	beq.n	8003764 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003760:	2300      	movs	r3, #0
 8003762:	e000      	b.n	8003766 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003764:	68fb      	ldr	r3, [r7, #12]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800376e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <osDelay+0x16>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	e000      	b.n	8003786 <osDelay+0x18>
 8003784:	2301      	movs	r3, #1
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fa64 	bl	8003c54 <vTaskDelay>
  
  return osOK;
 800378c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f103 0208 	add.w	r2, r3, #8
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037ae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f103 0208 	add.w	r2, r3, #8
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f103 0208 	add.w	r2, r3, #8
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	601a      	str	r2, [r3, #0]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800384e:	d103      	bne.n	8003858 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e00c      	b.n	8003872 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3308      	adds	r3, #8
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	e002      	b.n	8003866 <vListInsert+0x2e>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	429a      	cmp	r2, r3
 8003870:	d2f6      	bcs.n	8003860 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	601a      	str	r2, [r3, #0]
}
 800389e:	bf00      	nop
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038aa:	b480      	push	{r7}
 80038ac:	b085      	sub	sp, #20
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6892      	ldr	r2, [r2, #8]
 80038c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6852      	ldr	r2, [r2, #4]
 80038ca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d103      	bne.n	80038de <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	1e5a      	subs	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b08e      	sub	sp, #56	; 0x38
 8003902:	af04      	add	r7, sp, #16
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800390c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003924:	bf00      	nop
 8003926:	e7fe      	b.n	8003926 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <xTaskCreateStatic+0x46>
	__asm volatile
 800392e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003932:	f383 8811 	msr	BASEPRI, r3
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	61fb      	str	r3, [r7, #28]
}
 8003940:	bf00      	nop
 8003942:	e7fe      	b.n	8003942 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003944:	23a0      	movs	r3, #160	; 0xa0
 8003946:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	2ba0      	cmp	r3, #160	; 0xa0
 800394c:	d00a      	beq.n	8003964 <xTaskCreateStatic+0x66>
	__asm volatile
 800394e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	61bb      	str	r3, [r7, #24]
}
 8003960:	bf00      	nop
 8003962:	e7fe      	b.n	8003962 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003964:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01e      	beq.n	80039aa <xTaskCreateStatic+0xac>
 800396c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396e:	2b00      	cmp	r3, #0
 8003970:	d01b      	beq.n	80039aa <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800397a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	2202      	movs	r2, #2
 8003980:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003984:	2300      	movs	r3, #0
 8003986:	9303      	str	r3, [sp, #12]
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	9302      	str	r3, [sp, #8]
 800398c:	f107 0314 	add.w	r3, r7, #20
 8003990:	9301      	str	r3, [sp, #4]
 8003992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f851 	bl	8003a44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039a4:	f000 f8ec 	bl	8003b80 <prvAddNewTaskToReadyList>
 80039a8:	e001      	b.n	80039ae <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039ae:	697b      	ldr	r3, [r7, #20]
	}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3728      	adds	r7, #40	; 0x28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08c      	sub	sp, #48	; 0x30
 80039bc:	af04      	add	r7, sp, #16
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039c8:	88fb      	ldrh	r3, [r7, #6]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 ff13 	bl	80047f8 <pvPortMalloc>
 80039d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00e      	beq.n	80039f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039da:	20a0      	movs	r0, #160	; 0xa0
 80039dc:	f000 ff0c 	bl	80047f8 <pvPortMalloc>
 80039e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30
 80039ee:	e005      	b.n	80039fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039f0:	6978      	ldr	r0, [r7, #20]
 80039f2:	f000 ffcd 	bl	8004990 <vPortFree>
 80039f6:	e001      	b.n	80039fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d017      	beq.n	8003a32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a0a:	88fa      	ldrh	r2, [r7, #6]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	9303      	str	r3, [sp, #12]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	9302      	str	r3, [sp, #8]
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68b9      	ldr	r1, [r7, #8]
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f80f 	bl	8003a44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a26:	69f8      	ldr	r0, [r7, #28]
 8003a28:	f000 f8aa 	bl	8003b80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	e002      	b.n	8003a38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a38:	69bb      	ldr	r3, [r7, #24]
	}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	f023 0307 	bic.w	r3, r3, #7
 8003a6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	617b      	str	r3, [r7, #20]
}
 8003a88:	bf00      	nop
 8003a8a:	e7fe      	b.n	8003a8a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01f      	beq.n	8003ad2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a92:	2300      	movs	r3, #0
 8003a94:	61fb      	str	r3, [r7, #28]
 8003a96:	e012      	b.n	8003abe <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	7819      	ldrb	r1, [r3, #0]
 8003aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3334      	adds	r3, #52	; 0x34
 8003aa8:	460a      	mov	r2, r1
 8003aaa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d006      	beq.n	8003ac6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	3301      	adds	r3, #1
 8003abc:	61fb      	str	r3, [r7, #28]
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	2b0f      	cmp	r3, #15
 8003ac2:	d9e9      	bls.n	8003a98 <prvInitialiseNewTask+0x54>
 8003ac4:	e000      	b.n	8003ac8 <prvInitialiseNewTask+0x84>
			{
				break;
 8003ac6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ad0:	e003      	b.n	8003ada <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	2b13      	cmp	r3, #19
 8003ade:	d901      	bls.n	8003ae4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ae0:	2313      	movs	r3, #19
 8003ae2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ae8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	2200      	movs	r2, #0
 8003af4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	3304      	adds	r3, #4
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff fe6b 	bl	80037d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	3318      	adds	r3, #24
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fe66 	bl	80037d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	f1c3 0214 	rsb	r2, r3, #20
 8003b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	334c      	adds	r3, #76	; 0x4c
 8003b34:	224c      	movs	r2, #76	; 0x4c
 8003b36:	2100      	movs	r1, #0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f001 feb5 	bl	80058a8 <memset>
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	4a0c      	ldr	r2, [pc, #48]	; (8003b74 <prvInitialiseNewTask+0x130>)
 8003b42:	651a      	str	r2, [r3, #80]	; 0x50
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	4a0c      	ldr	r2, [pc, #48]	; (8003b78 <prvInitialiseNewTask+0x134>)
 8003b48:	655a      	str	r2, [r3, #84]	; 0x54
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	4a0b      	ldr	r2, [pc, #44]	; (8003b7c <prvInitialiseNewTask+0x138>)
 8003b4e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	68f9      	ldr	r1, [r7, #12]
 8003b54:	69b8      	ldr	r0, [r7, #24]
 8003b56:	f000 fc3d 	bl	80043d4 <pxPortInitialiseStack>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b6c:	bf00      	nop
 8003b6e:	3720      	adds	r7, #32
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20004344 	.word	0x20004344
 8003b78:	200043ac 	.word	0x200043ac
 8003b7c:	20004414 	.word	0x20004414

08003b80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b88:	f000 fd54 	bl	8004634 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b8c:	4b2a      	ldr	r3, [pc, #168]	; (8003c38 <prvAddNewTaskToReadyList+0xb8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3301      	adds	r3, #1
 8003b92:	4a29      	ldr	r2, [pc, #164]	; (8003c38 <prvAddNewTaskToReadyList+0xb8>)
 8003b94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b96:	4b29      	ldr	r3, [pc, #164]	; (8003c3c <prvAddNewTaskToReadyList+0xbc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b9e:	4a27      	ldr	r2, [pc, #156]	; (8003c3c <prvAddNewTaskToReadyList+0xbc>)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ba4:	4b24      	ldr	r3, [pc, #144]	; (8003c38 <prvAddNewTaskToReadyList+0xb8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d110      	bne.n	8003bce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bac:	f000 facc 	bl	8004148 <prvInitialiseTaskLists>
 8003bb0:	e00d      	b.n	8003bce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bb2:	4b23      	ldr	r3, [pc, #140]	; (8003c40 <prvAddNewTaskToReadyList+0xc0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d109      	bne.n	8003bce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bba:	4b20      	ldr	r3, [pc, #128]	; (8003c3c <prvAddNewTaskToReadyList+0xbc>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d802      	bhi.n	8003bce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bc8:	4a1c      	ldr	r2, [pc, #112]	; (8003c3c <prvAddNewTaskToReadyList+0xbc>)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bce:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <prvAddNewTaskToReadyList+0xc4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	4a1b      	ldr	r2, [pc, #108]	; (8003c44 <prvAddNewTaskToReadyList+0xc4>)
 8003bd6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	2201      	movs	r2, #1
 8003bde:	409a      	lsls	r2, r3
 8003be0:	4b19      	ldr	r3, [pc, #100]	; (8003c48 <prvAddNewTaskToReadyList+0xc8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <prvAddNewTaskToReadyList+0xc8>)
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4a15      	ldr	r2, [pc, #84]	; (8003c4c <prvAddNewTaskToReadyList+0xcc>)
 8003bf8:	441a      	add	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4610      	mov	r0, r2
 8003c02:	f7ff fdf5 	bl	80037f0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c06:	f000 fd45 	bl	8004694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <prvAddNewTaskToReadyList+0xc0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00e      	beq.n	8003c30 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c12:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <prvAddNewTaskToReadyList+0xbc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d207      	bcs.n	8003c30 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <prvAddNewTaskToReadyList+0xd0>)
 8003c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	200006f0 	.word	0x200006f0
 8003c3c:	200004ec 	.word	0x200004ec
 8003c40:	200006fc 	.word	0x200006fc
 8003c44:	2000070c 	.word	0x2000070c
 8003c48:	200006f8 	.word	0x200006f8
 8003c4c:	200004f0 	.word	0x200004f0
 8003c50:	e000ed04 	.word	0xe000ed04

08003c54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d017      	beq.n	8003c96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c66:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <vTaskDelay+0x60>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <vTaskDelay+0x30>
	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	60bb      	str	r3, [r7, #8]
}
 8003c80:	bf00      	nop
 8003c82:	e7fe      	b.n	8003c82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c84:	f000 f884 	bl	8003d90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c88:	2100      	movs	r1, #0
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fb3c 	bl	8004308 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c90:	f000 f88c 	bl	8003dac <xTaskResumeAll>
 8003c94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d107      	bne.n	8003cac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <vTaskDelay+0x64>)
 8003c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	20000718 	.word	0x20000718
 8003cb8:	e000ed04 	.word	0xe000ed04

08003cbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08a      	sub	sp, #40	; 0x28
 8003cc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cca:	463a      	mov	r2, r7
 8003ccc:	1d39      	adds	r1, r7, #4
 8003cce:	f107 0308 	add.w	r3, r7, #8
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fd f900 	bl	8000ed8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cd8:	6839      	ldr	r1, [r7, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	9202      	str	r2, [sp, #8]
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	460a      	mov	r2, r1
 8003cea:	4921      	ldr	r1, [pc, #132]	; (8003d70 <vTaskStartScheduler+0xb4>)
 8003cec:	4821      	ldr	r0, [pc, #132]	; (8003d74 <vTaskStartScheduler+0xb8>)
 8003cee:	f7ff fe06 	bl	80038fe <xTaskCreateStatic>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4a20      	ldr	r2, [pc, #128]	; (8003d78 <vTaskStartScheduler+0xbc>)
 8003cf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cf8:	4b1f      	ldr	r3, [pc, #124]	; (8003d78 <vTaskStartScheduler+0xbc>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d00:	2301      	movs	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	e001      	b.n	8003d0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d11b      	bne.n	8003d48 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	613b      	str	r3, [r7, #16]
}
 8003d22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d24:	4b15      	ldr	r3, [pc, #84]	; (8003d7c <vTaskStartScheduler+0xc0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	334c      	adds	r3, #76	; 0x4c
 8003d2a:	4a15      	ldr	r2, [pc, #84]	; (8003d80 <vTaskStartScheduler+0xc4>)
 8003d2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d2e:	4b15      	ldr	r3, [pc, #84]	; (8003d84 <vTaskStartScheduler+0xc8>)
 8003d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d36:	4b14      	ldr	r3, [pc, #80]	; (8003d88 <vTaskStartScheduler+0xcc>)
 8003d38:	2201      	movs	r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d3c:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <vTaskStartScheduler+0xd0>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d42:	f000 fbd5 	bl	80044f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d46:	e00e      	b.n	8003d66 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d4e:	d10a      	bne.n	8003d66 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d54:	f383 8811 	msr	BASEPRI, r3
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	60fb      	str	r3, [r7, #12]
}
 8003d62:	bf00      	nop
 8003d64:	e7fe      	b.n	8003d64 <vTaskStartScheduler+0xa8>
}
 8003d66:	bf00      	nop
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	08007e0c 	.word	0x08007e0c
 8003d74:	08004119 	.word	0x08004119
 8003d78:	20000714 	.word	0x20000714
 8003d7c:	200004ec 	.word	0x200004ec
 8003d80:	20000068 	.word	0x20000068
 8003d84:	20000710 	.word	0x20000710
 8003d88:	200006fc 	.word	0x200006fc
 8003d8c:	200006f4 	.word	0x200006f4

08003d90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <vTaskSuspendAll+0x18>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	4a03      	ldr	r2, [pc, #12]	; (8003da8 <vTaskSuspendAll+0x18>)
 8003d9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003d9e:	bf00      	nop
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	20000718 	.word	0x20000718

08003dac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dba:	4b41      	ldr	r3, [pc, #260]	; (8003ec0 <xTaskResumeAll+0x114>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	603b      	str	r3, [r7, #0]
}
 8003dd4:	bf00      	nop
 8003dd6:	e7fe      	b.n	8003dd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dd8:	f000 fc2c 	bl	8004634 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ddc:	4b38      	ldr	r3, [pc, #224]	; (8003ec0 <xTaskResumeAll+0x114>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	4a37      	ldr	r2, [pc, #220]	; (8003ec0 <xTaskResumeAll+0x114>)
 8003de4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003de6:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <xTaskResumeAll+0x114>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d161      	bne.n	8003eb2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003dee:	4b35      	ldr	r3, [pc, #212]	; (8003ec4 <xTaskResumeAll+0x118>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d05d      	beq.n	8003eb2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003df6:	e02e      	b.n	8003e56 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003df8:	4b33      	ldr	r3, [pc, #204]	; (8003ec8 <xTaskResumeAll+0x11c>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	3318      	adds	r3, #24
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fd50 	bl	80038aa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff fd4b 	bl	80038aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	2201      	movs	r2, #1
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	4b2b      	ldr	r3, [pc, #172]	; (8003ecc <xTaskResumeAll+0x120>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	4a2a      	ldr	r2, [pc, #168]	; (8003ecc <xTaskResumeAll+0x120>)
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4a27      	ldr	r2, [pc, #156]	; (8003ed0 <xTaskResumeAll+0x124>)
 8003e34:	441a      	add	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	f7ff fcd7 	bl	80037f0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e46:	4b23      	ldr	r3, [pc, #140]	; (8003ed4 <xTaskResumeAll+0x128>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d302      	bcc.n	8003e56 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e50:	4b21      	ldr	r3, [pc, #132]	; (8003ed8 <xTaskResumeAll+0x12c>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e56:	4b1c      	ldr	r3, [pc, #112]	; (8003ec8 <xTaskResumeAll+0x11c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1cc      	bne.n	8003df8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e64:	f000 fa12 	bl	800428c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e68:	4b1c      	ldr	r3, [pc, #112]	; (8003edc <xTaskResumeAll+0x130>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d010      	beq.n	8003e96 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e74:	f000 f836 	bl	8003ee4 <xTaskIncrementTick>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e7e:	4b16      	ldr	r3, [pc, #88]	; (8003ed8 <xTaskResumeAll+0x12c>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1f1      	bne.n	8003e74 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003e90:	4b12      	ldr	r3, [pc, #72]	; (8003edc <xTaskResumeAll+0x130>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e96:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <xTaskResumeAll+0x12c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d009      	beq.n	8003eb2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ea2:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <xTaskResumeAll+0x134>)
 8003ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003eb2:	f000 fbef 	bl	8004694 <vPortExitCritical>

	return xAlreadyYielded;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20000718 	.word	0x20000718
 8003ec4:	200006f0 	.word	0x200006f0
 8003ec8:	200006b0 	.word	0x200006b0
 8003ecc:	200006f8 	.word	0x200006f8
 8003ed0:	200004f0 	.word	0x200004f0
 8003ed4:	200004ec 	.word	0x200004ec
 8003ed8:	20000704 	.word	0x20000704
 8003edc:	20000700 	.word	0x20000700
 8003ee0:	e000ed04 	.word	0xe000ed04

08003ee4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eee:	4b4e      	ldr	r3, [pc, #312]	; (8004028 <xTaskIncrementTick+0x144>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 808e 	bne.w	8004014 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ef8:	4b4c      	ldr	r3, [pc, #304]	; (800402c <xTaskIncrementTick+0x148>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3301      	adds	r3, #1
 8003efe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f00:	4a4a      	ldr	r2, [pc, #296]	; (800402c <xTaskIncrementTick+0x148>)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d120      	bne.n	8003f4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f0c:	4b48      	ldr	r3, [pc, #288]	; (8004030 <xTaskIncrementTick+0x14c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <xTaskIncrementTick+0x48>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	603b      	str	r3, [r7, #0]
}
 8003f28:	bf00      	nop
 8003f2a:	e7fe      	b.n	8003f2a <xTaskIncrementTick+0x46>
 8003f2c:	4b40      	ldr	r3, [pc, #256]	; (8004030 <xTaskIncrementTick+0x14c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	4b40      	ldr	r3, [pc, #256]	; (8004034 <xTaskIncrementTick+0x150>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a3e      	ldr	r2, [pc, #248]	; (8004030 <xTaskIncrementTick+0x14c>)
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4a3e      	ldr	r2, [pc, #248]	; (8004034 <xTaskIncrementTick+0x150>)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	4b3d      	ldr	r3, [pc, #244]	; (8004038 <xTaskIncrementTick+0x154>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3301      	adds	r3, #1
 8003f46:	4a3c      	ldr	r2, [pc, #240]	; (8004038 <xTaskIncrementTick+0x154>)
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	f000 f99f 	bl	800428c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f4e:	4b3b      	ldr	r3, [pc, #236]	; (800403c <xTaskIncrementTick+0x158>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d348      	bcc.n	8003fea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f58:	4b35      	ldr	r3, [pc, #212]	; (8004030 <xTaskIncrementTick+0x14c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d104      	bne.n	8003f6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f62:	4b36      	ldr	r3, [pc, #216]	; (800403c <xTaskIncrementTick+0x158>)
 8003f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f68:	601a      	str	r2, [r3, #0]
					break;
 8003f6a:	e03e      	b.n	8003fea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f6c:	4b30      	ldr	r3, [pc, #192]	; (8004030 <xTaskIncrementTick+0x14c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d203      	bcs.n	8003f8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f84:	4a2d      	ldr	r2, [pc, #180]	; (800403c <xTaskIncrementTick+0x158>)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f8a:	e02e      	b.n	8003fea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff fc8a 	bl	80038aa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d004      	beq.n	8003fa8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	3318      	adds	r3, #24
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff fc81 	bl	80038aa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	2201      	movs	r2, #1
 8003fae:	409a      	lsls	r2, r3
 8003fb0:	4b23      	ldr	r3, [pc, #140]	; (8004040 <xTaskIncrementTick+0x15c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	4a22      	ldr	r2, [pc, #136]	; (8004040 <xTaskIncrementTick+0x15c>)
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4a1f      	ldr	r2, [pc, #124]	; (8004044 <xTaskIncrementTick+0x160>)
 8003fc8:	441a      	add	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	f7ff fc0d 	bl	80037f0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fda:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <xTaskIncrementTick+0x164>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d3b9      	bcc.n	8003f58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fe8:	e7b6      	b.n	8003f58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fea:	4b17      	ldr	r3, [pc, #92]	; (8004048 <xTaskIncrementTick+0x164>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff0:	4914      	ldr	r1, [pc, #80]	; (8004044 <xTaskIncrementTick+0x160>)
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d901      	bls.n	8004006 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004002:	2301      	movs	r3, #1
 8004004:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004006:	4b11      	ldr	r3, [pc, #68]	; (800404c <xTaskIncrementTick+0x168>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d007      	beq.n	800401e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800400e:	2301      	movs	r3, #1
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	e004      	b.n	800401e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004014:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <xTaskIncrementTick+0x16c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3301      	adds	r3, #1
 800401a:	4a0d      	ldr	r2, [pc, #52]	; (8004050 <xTaskIncrementTick+0x16c>)
 800401c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800401e:	697b      	ldr	r3, [r7, #20]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20000718 	.word	0x20000718
 800402c:	200006f4 	.word	0x200006f4
 8004030:	200006a8 	.word	0x200006a8
 8004034:	200006ac 	.word	0x200006ac
 8004038:	20000708 	.word	0x20000708
 800403c:	20000710 	.word	0x20000710
 8004040:	200006f8 	.word	0x200006f8
 8004044:	200004f0 	.word	0x200004f0
 8004048:	200004ec 	.word	0x200004ec
 800404c:	20000704 	.word	0x20000704
 8004050:	20000700 	.word	0x20000700

08004054 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800405a:	4b29      	ldr	r3, [pc, #164]	; (8004100 <vTaskSwitchContext+0xac>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004062:	4b28      	ldr	r3, [pc, #160]	; (8004104 <vTaskSwitchContext+0xb0>)
 8004064:	2201      	movs	r2, #1
 8004066:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004068:	e044      	b.n	80040f4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800406a:	4b26      	ldr	r3, [pc, #152]	; (8004104 <vTaskSwitchContext+0xb0>)
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004070:	4b25      	ldr	r3, [pc, #148]	; (8004108 <vTaskSwitchContext+0xb4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	fab3 f383 	clz	r3, r3
 800407c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800407e:	7afb      	ldrb	r3, [r7, #11]
 8004080:	f1c3 031f 	rsb	r3, r3, #31
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	4921      	ldr	r1, [pc, #132]	; (800410c <vTaskSwitchContext+0xb8>)
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10a      	bne.n	80040b0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	607b      	str	r3, [r7, #4]
}
 80040ac:	bf00      	nop
 80040ae:	e7fe      	b.n	80040ae <vTaskSwitchContext+0x5a>
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4a14      	ldr	r2, [pc, #80]	; (800410c <vTaskSwitchContext+0xb8>)
 80040bc:	4413      	add	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	605a      	str	r2, [r3, #4]
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	3308      	adds	r3, #8
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d104      	bne.n	80040e0 <vTaskSwitchContext+0x8c>
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	605a      	str	r2, [r3, #4]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <vTaskSwitchContext+0xbc>)
 80040e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80040ea:	4b09      	ldr	r3, [pc, #36]	; (8004110 <vTaskSwitchContext+0xbc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	334c      	adds	r3, #76	; 0x4c
 80040f0:	4a08      	ldr	r2, [pc, #32]	; (8004114 <vTaskSwitchContext+0xc0>)
 80040f2:	6013      	str	r3, [r2, #0]
}
 80040f4:	bf00      	nop
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	20000718 	.word	0x20000718
 8004104:	20000704 	.word	0x20000704
 8004108:	200006f8 	.word	0x200006f8
 800410c:	200004f0 	.word	0x200004f0
 8004110:	200004ec 	.word	0x200004ec
 8004114:	20000068 	.word	0x20000068

08004118 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004120:	f000 f852 	bl	80041c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <prvIdleTask+0x28>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d9f9      	bls.n	8004120 <prvIdleTask+0x8>
			{
				taskYIELD();
 800412c:	4b05      	ldr	r3, [pc, #20]	; (8004144 <prvIdleTask+0x2c>)
 800412e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800413c:	e7f0      	b.n	8004120 <prvIdleTask+0x8>
 800413e:	bf00      	nop
 8004140:	200004f0 	.word	0x200004f0
 8004144:	e000ed04 	.word	0xe000ed04

08004148 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800414e:	2300      	movs	r3, #0
 8004150:	607b      	str	r3, [r7, #4]
 8004152:	e00c      	b.n	800416e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4a12      	ldr	r2, [pc, #72]	; (80041a8 <prvInitialiseTaskLists+0x60>)
 8004160:	4413      	add	r3, r2
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff fb17 	bl	8003796 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3301      	adds	r3, #1
 800416c:	607b      	str	r3, [r7, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b13      	cmp	r3, #19
 8004172:	d9ef      	bls.n	8004154 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004174:	480d      	ldr	r0, [pc, #52]	; (80041ac <prvInitialiseTaskLists+0x64>)
 8004176:	f7ff fb0e 	bl	8003796 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800417a:	480d      	ldr	r0, [pc, #52]	; (80041b0 <prvInitialiseTaskLists+0x68>)
 800417c:	f7ff fb0b 	bl	8003796 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004180:	480c      	ldr	r0, [pc, #48]	; (80041b4 <prvInitialiseTaskLists+0x6c>)
 8004182:	f7ff fb08 	bl	8003796 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004186:	480c      	ldr	r0, [pc, #48]	; (80041b8 <prvInitialiseTaskLists+0x70>)
 8004188:	f7ff fb05 	bl	8003796 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800418c:	480b      	ldr	r0, [pc, #44]	; (80041bc <prvInitialiseTaskLists+0x74>)
 800418e:	f7ff fb02 	bl	8003796 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004192:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <prvInitialiseTaskLists+0x78>)
 8004194:	4a05      	ldr	r2, [pc, #20]	; (80041ac <prvInitialiseTaskLists+0x64>)
 8004196:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004198:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <prvInitialiseTaskLists+0x7c>)
 800419a:	4a05      	ldr	r2, [pc, #20]	; (80041b0 <prvInitialiseTaskLists+0x68>)
 800419c:	601a      	str	r2, [r3, #0]
}
 800419e:	bf00      	nop
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	200004f0 	.word	0x200004f0
 80041ac:	20000680 	.word	0x20000680
 80041b0:	20000694 	.word	0x20000694
 80041b4:	200006b0 	.word	0x200006b0
 80041b8:	200006c4 	.word	0x200006c4
 80041bc:	200006dc 	.word	0x200006dc
 80041c0:	200006a8 	.word	0x200006a8
 80041c4:	200006ac 	.word	0x200006ac

080041c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041ce:	e019      	b.n	8004204 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041d0:	f000 fa30 	bl	8004634 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d4:	4b10      	ldr	r3, [pc, #64]	; (8004218 <prvCheckTasksWaitingTermination+0x50>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3304      	adds	r3, #4
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff fb62 	bl	80038aa <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041e6:	4b0d      	ldr	r3, [pc, #52]	; (800421c <prvCheckTasksWaitingTermination+0x54>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	4a0b      	ldr	r2, [pc, #44]	; (800421c <prvCheckTasksWaitingTermination+0x54>)
 80041ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <prvCheckTasksWaitingTermination+0x58>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <prvCheckTasksWaitingTermination+0x58>)
 80041f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041fa:	f000 fa4b 	bl	8004694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f810 	bl	8004224 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <prvCheckTasksWaitingTermination+0x58>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e1      	bne.n	80041d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	200006c4 	.word	0x200006c4
 800421c:	200006f0 	.word	0x200006f0
 8004220:	200006d8 	.word	0x200006d8

08004224 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	334c      	adds	r3, #76	; 0x4c
 8004230:	4618      	mov	r0, r3
 8004232:	f001 fb55 	bl	80058e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800423c:	2b00      	cmp	r3, #0
 800423e:	d108      	bne.n	8004252 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fba3 	bl	8004990 <vPortFree>
				vPortFree( pxTCB );
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fba0 	bl	8004990 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004250:	e018      	b.n	8004284 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004258:	2b01      	cmp	r3, #1
 800425a:	d103      	bne.n	8004264 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fb97 	bl	8004990 <vPortFree>
	}
 8004262:	e00f      	b.n	8004284 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800426a:	2b02      	cmp	r3, #2
 800426c:	d00a      	beq.n	8004284 <prvDeleteTCB+0x60>
	__asm volatile
 800426e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	60fb      	str	r3, [r7, #12]
}
 8004280:	bf00      	nop
 8004282:	e7fe      	b.n	8004282 <prvDeleteTCB+0x5e>
	}
 8004284:	bf00      	nop
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004292:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <prvResetNextTaskUnblockTime+0x38>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d104      	bne.n	80042a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800429c:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <prvResetNextTaskUnblockTime+0x3c>)
 800429e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042a4:	e008      	b.n	80042b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042a6:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <prvResetNextTaskUnblockTime+0x38>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4a04      	ldr	r2, [pc, #16]	; (80042c8 <prvResetNextTaskUnblockTime+0x3c>)
 80042b6:	6013      	str	r3, [r2, #0]
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	200006a8 	.word	0x200006a8
 80042c8:	20000710 	.word	0x20000710

080042cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042d2:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <xTaskGetSchedulerState+0x34>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042da:	2301      	movs	r3, #1
 80042dc:	607b      	str	r3, [r7, #4]
 80042de:	e008      	b.n	80042f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042e0:	4b08      	ldr	r3, [pc, #32]	; (8004304 <xTaskGetSchedulerState+0x38>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d102      	bne.n	80042ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042e8:	2302      	movs	r3, #2
 80042ea:	607b      	str	r3, [r7, #4]
 80042ec:	e001      	b.n	80042f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042ee:	2300      	movs	r3, #0
 80042f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042f2:	687b      	ldr	r3, [r7, #4]
	}
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	200006fc 	.word	0x200006fc
 8004304:	20000718 	.word	0x20000718

08004308 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004312:	4b29      	ldr	r3, [pc, #164]	; (80043b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004318:	4b28      	ldr	r3, [pc, #160]	; (80043bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3304      	adds	r3, #4
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff fac3 	bl	80038aa <uxListRemove>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10b      	bne.n	8004342 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800432a:	4b24      	ldr	r3, [pc, #144]	; (80043bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	2201      	movs	r2, #1
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	43da      	mvns	r2, r3
 8004338:	4b21      	ldr	r3, [pc, #132]	; (80043c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4013      	ands	r3, r2
 800433e:	4a20      	ldr	r2, [pc, #128]	; (80043c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004340:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004348:	d10a      	bne.n	8004360 <prvAddCurrentTaskToDelayedList+0x58>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d007      	beq.n	8004360 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004350:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3304      	adds	r3, #4
 8004356:	4619      	mov	r1, r3
 8004358:	481a      	ldr	r0, [pc, #104]	; (80043c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800435a:	f7ff fa49 	bl	80037f0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800435e:	e026      	b.n	80043ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004368:	4b14      	ldr	r3, [pc, #80]	; (80043bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	429a      	cmp	r2, r3
 8004376:	d209      	bcs.n	800438c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004378:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3304      	adds	r3, #4
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f7ff fa57 	bl	8003838 <vListInsert>
}
 800438a:	e010      	b.n	80043ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800438c:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3304      	adds	r3, #4
 8004396:	4619      	mov	r1, r3
 8004398:	4610      	mov	r0, r2
 800439a:	f7ff fa4d 	bl	8003838 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800439e:	4b0c      	ldr	r3, [pc, #48]	; (80043d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d202      	bcs.n	80043ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80043a8:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	6013      	str	r3, [r2, #0]
}
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	200006f4 	.word	0x200006f4
 80043bc:	200004ec 	.word	0x200004ec
 80043c0:	200006f8 	.word	0x200006f8
 80043c4:	200006dc 	.word	0x200006dc
 80043c8:	200006ac 	.word	0x200006ac
 80043cc:	200006a8 	.word	0x200006a8
 80043d0:	20000710 	.word	0x20000710

080043d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3b04      	subs	r3, #4
 80043e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3b04      	subs	r3, #4
 80043f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f023 0201 	bic.w	r2, r3, #1
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3b04      	subs	r3, #4
 8004402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004404:	4a0c      	ldr	r2, [pc, #48]	; (8004438 <pxPortInitialiseStack+0x64>)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3b14      	subs	r3, #20
 800440e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3b04      	subs	r3, #4
 800441a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f06f 0202 	mvn.w	r2, #2
 8004422:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3b20      	subs	r3, #32
 8004428:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800442a:	68fb      	ldr	r3, [r7, #12]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	0800443d 	.word	0x0800443d

0800443c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004442:	2300      	movs	r3, #0
 8004444:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <prvTaskExitError+0x54>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800444e:	d00a      	beq.n	8004466 <prvTaskExitError+0x2a>
	__asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	60fb      	str	r3, [r7, #12]
}
 8004462:	bf00      	nop
 8004464:	e7fe      	b.n	8004464 <prvTaskExitError+0x28>
	__asm volatile
 8004466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446a:	f383 8811 	msr	BASEPRI, r3
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	60bb      	str	r3, [r7, #8]
}
 8004478:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800447a:	bf00      	nop
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0fc      	beq.n	800447c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004482:	bf00      	nop
 8004484:	bf00      	nop
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	2000000c 	.word	0x2000000c
	...

080044a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80044a0:	4b07      	ldr	r3, [pc, #28]	; (80044c0 <pxCurrentTCBConst2>)
 80044a2:	6819      	ldr	r1, [r3, #0]
 80044a4:	6808      	ldr	r0, [r1, #0]
 80044a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044aa:	f380 8809 	msr	PSP, r0
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f04f 0000 	mov.w	r0, #0
 80044b6:	f380 8811 	msr	BASEPRI, r0
 80044ba:	4770      	bx	lr
 80044bc:	f3af 8000 	nop.w

080044c0 <pxCurrentTCBConst2>:
 80044c0:	200004ec 	.word	0x200004ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop

080044c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80044c8:	4808      	ldr	r0, [pc, #32]	; (80044ec <prvPortStartFirstTask+0x24>)
 80044ca:	6800      	ldr	r0, [r0, #0]
 80044cc:	6800      	ldr	r0, [r0, #0]
 80044ce:	f380 8808 	msr	MSP, r0
 80044d2:	f04f 0000 	mov.w	r0, #0
 80044d6:	f380 8814 	msr	CONTROL, r0
 80044da:	b662      	cpsie	i
 80044dc:	b661      	cpsie	f
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	df00      	svc	0
 80044e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044ea:	bf00      	nop
 80044ec:	e000ed08 	.word	0xe000ed08

080044f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044f6:	4b46      	ldr	r3, [pc, #280]	; (8004610 <xPortStartScheduler+0x120>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a46      	ldr	r2, [pc, #280]	; (8004614 <xPortStartScheduler+0x124>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d10a      	bne.n	8004516 <xPortStartScheduler+0x26>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	613b      	str	r3, [r7, #16]
}
 8004512:	bf00      	nop
 8004514:	e7fe      	b.n	8004514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004516:	4b3e      	ldr	r3, [pc, #248]	; (8004610 <xPortStartScheduler+0x120>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a3f      	ldr	r2, [pc, #252]	; (8004618 <xPortStartScheduler+0x128>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d10a      	bne.n	8004536 <xPortStartScheduler+0x46>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	60fb      	str	r3, [r7, #12]
}
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004536:	4b39      	ldr	r3, [pc, #228]	; (800461c <xPortStartScheduler+0x12c>)
 8004538:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	22ff      	movs	r2, #255	; 0xff
 8004546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4b31      	ldr	r3, [pc, #196]	; (8004620 <xPortStartScheduler+0x130>)
 800455c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800455e:	4b31      	ldr	r3, [pc, #196]	; (8004624 <xPortStartScheduler+0x134>)
 8004560:	2207      	movs	r2, #7
 8004562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004564:	e009      	b.n	800457a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004566:	4b2f      	ldr	r3, [pc, #188]	; (8004624 <xPortStartScheduler+0x134>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3b01      	subs	r3, #1
 800456c:	4a2d      	ldr	r2, [pc, #180]	; (8004624 <xPortStartScheduler+0x134>)
 800456e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	b2db      	uxtb	r3, r3
 8004578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800457a:	78fb      	ldrb	r3, [r7, #3]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004582:	2b80      	cmp	r3, #128	; 0x80
 8004584:	d0ef      	beq.n	8004566 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004586:	4b27      	ldr	r3, [pc, #156]	; (8004624 <xPortStartScheduler+0x134>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f1c3 0307 	rsb	r3, r3, #7
 800458e:	2b04      	cmp	r3, #4
 8004590:	d00a      	beq.n	80045a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	60bb      	str	r3, [r7, #8]
}
 80045a4:	bf00      	nop
 80045a6:	e7fe      	b.n	80045a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045a8:	4b1e      	ldr	r3, [pc, #120]	; (8004624 <xPortStartScheduler+0x134>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	021b      	lsls	r3, r3, #8
 80045ae:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <xPortStartScheduler+0x134>)
 80045b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045b2:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <xPortStartScheduler+0x134>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045ba:	4a1a      	ldr	r2, [pc, #104]	; (8004624 <xPortStartScheduler+0x134>)
 80045bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80045c6:	4b18      	ldr	r3, [pc, #96]	; (8004628 <xPortStartScheduler+0x138>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a17      	ldr	r2, [pc, #92]	; (8004628 <xPortStartScheduler+0x138>)
 80045cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045d2:	4b15      	ldr	r3, [pc, #84]	; (8004628 <xPortStartScheduler+0x138>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a14      	ldr	r2, [pc, #80]	; (8004628 <xPortStartScheduler+0x138>)
 80045d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80045dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045de:	f000 f8dd 	bl	800479c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045e2:	4b12      	ldr	r3, [pc, #72]	; (800462c <xPortStartScheduler+0x13c>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80045e8:	f000 f8fc 	bl	80047e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045ec:	4b10      	ldr	r3, [pc, #64]	; (8004630 <xPortStartScheduler+0x140>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a0f      	ldr	r2, [pc, #60]	; (8004630 <xPortStartScheduler+0x140>)
 80045f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80045f8:	f7ff ff66 	bl	80044c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045fc:	f7ff fd2a 	bl	8004054 <vTaskSwitchContext>
	prvTaskExitError();
 8004600:	f7ff ff1c 	bl	800443c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	e000ed00 	.word	0xe000ed00
 8004614:	410fc271 	.word	0x410fc271
 8004618:	410fc270 	.word	0x410fc270
 800461c:	e000e400 	.word	0xe000e400
 8004620:	2000071c 	.word	0x2000071c
 8004624:	20000720 	.word	0x20000720
 8004628:	e000ed20 	.word	0xe000ed20
 800462c:	2000000c 	.word	0x2000000c
 8004630:	e000ef34 	.word	0xe000ef34

08004634 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	607b      	str	r3, [r7, #4]
}
 800464c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800464e:	4b0f      	ldr	r3, [pc, #60]	; (800468c <vPortEnterCritical+0x58>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3301      	adds	r3, #1
 8004654:	4a0d      	ldr	r2, [pc, #52]	; (800468c <vPortEnterCritical+0x58>)
 8004656:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004658:	4b0c      	ldr	r3, [pc, #48]	; (800468c <vPortEnterCritical+0x58>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d10f      	bne.n	8004680 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004660:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <vPortEnterCritical+0x5c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <vPortEnterCritical+0x4c>
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	603b      	str	r3, [r7, #0]
}
 800467c:	bf00      	nop
 800467e:	e7fe      	b.n	800467e <vPortEnterCritical+0x4a>
	}
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	2000000c 	.word	0x2000000c
 8004690:	e000ed04 	.word	0xe000ed04

08004694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800469a:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <vPortExitCritical+0x50>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10a      	bne.n	80046b8 <vPortExitCritical+0x24>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	607b      	str	r3, [r7, #4]
}
 80046b4:	bf00      	nop
 80046b6:	e7fe      	b.n	80046b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80046b8:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <vPortExitCritical+0x50>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3b01      	subs	r3, #1
 80046be:	4a09      	ldr	r2, [pc, #36]	; (80046e4 <vPortExitCritical+0x50>)
 80046c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046c2:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <vPortExitCritical+0x50>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d105      	bne.n	80046d6 <vPortExitCritical+0x42>
 80046ca:	2300      	movs	r3, #0
 80046cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	2000000c 	.word	0x2000000c
	...

080046f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046f0:	f3ef 8009 	mrs	r0, PSP
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	4b15      	ldr	r3, [pc, #84]	; (8004750 <pxCurrentTCBConst>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	f01e 0f10 	tst.w	lr, #16
 8004700:	bf08      	it	eq
 8004702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800470a:	6010      	str	r0, [r2, #0]
 800470c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004710:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004714:	f380 8811 	msr	BASEPRI, r0
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f7ff fc98 	bl	8004054 <vTaskSwitchContext>
 8004724:	f04f 0000 	mov.w	r0, #0
 8004728:	f380 8811 	msr	BASEPRI, r0
 800472c:	bc09      	pop	{r0, r3}
 800472e:	6819      	ldr	r1, [r3, #0]
 8004730:	6808      	ldr	r0, [r1, #0]
 8004732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004736:	f01e 0f10 	tst.w	lr, #16
 800473a:	bf08      	it	eq
 800473c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004740:	f380 8809 	msr	PSP, r0
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	f3af 8000 	nop.w

08004750 <pxCurrentTCBConst>:
 8004750:	200004ec 	.word	0x200004ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop

08004758 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	607b      	str	r3, [r7, #4]
}
 8004770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004772:	f7ff fbb7 	bl	8003ee4 <xTaskIncrementTick>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800477c:	4b06      	ldr	r3, [pc, #24]	; (8004798 <xPortSysTickHandler+0x40>)
 800477e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	2300      	movs	r3, #0
 8004786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	f383 8811 	msr	BASEPRI, r3
}
 800478e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	e000ed04 	.word	0xe000ed04

0800479c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047a0:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <vPortSetupTimerInterrupt+0x34>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <vPortSetupTimerInterrupt+0x38>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047ac:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <vPortSetupTimerInterrupt+0x3c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a0a      	ldr	r2, [pc, #40]	; (80047dc <vPortSetupTimerInterrupt+0x40>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	099b      	lsrs	r3, r3, #6
 80047b8:	4a09      	ldr	r2, [pc, #36]	; (80047e0 <vPortSetupTimerInterrupt+0x44>)
 80047ba:	3b01      	subs	r3, #1
 80047bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047be:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <vPortSetupTimerInterrupt+0x34>)
 80047c0:	2207      	movs	r2, #7
 80047c2:	601a      	str	r2, [r3, #0]
}
 80047c4:	bf00      	nop
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	e000e010 	.word	0xe000e010
 80047d4:	e000e018 	.word	0xe000e018
 80047d8:	20000000 	.word	0x20000000
 80047dc:	10624dd3 	.word	0x10624dd3
 80047e0:	e000e014 	.word	0xe000e014

080047e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80047e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80047f4 <vPortEnableVFP+0x10>
 80047e8:	6801      	ldr	r1, [r0, #0]
 80047ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047ee:	6001      	str	r1, [r0, #0]
 80047f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80047f2:	bf00      	nop
 80047f4:	e000ed88 	.word	0xe000ed88

080047f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08a      	sub	sp, #40	; 0x28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004800:	2300      	movs	r3, #0
 8004802:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004804:	f7ff fac4 	bl	8003d90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004808:	4b5b      	ldr	r3, [pc, #364]	; (8004978 <pvPortMalloc+0x180>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004810:	f000 f920 	bl	8004a54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004814:	4b59      	ldr	r3, [pc, #356]	; (800497c <pvPortMalloc+0x184>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4013      	ands	r3, r2
 800481c:	2b00      	cmp	r3, #0
 800481e:	f040 8093 	bne.w	8004948 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d01d      	beq.n	8004864 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004828:	2208      	movs	r2, #8
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4413      	add	r3, r2
 800482e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	2b00      	cmp	r3, #0
 8004838:	d014      	beq.n	8004864 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f023 0307 	bic.w	r3, r3, #7
 8004840:	3308      	adds	r3, #8
 8004842:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <pvPortMalloc+0x6c>
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	617b      	str	r3, [r7, #20]
}
 8004860:	bf00      	nop
 8004862:	e7fe      	b.n	8004862 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d06e      	beq.n	8004948 <pvPortMalloc+0x150>
 800486a:	4b45      	ldr	r3, [pc, #276]	; (8004980 <pvPortMalloc+0x188>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	429a      	cmp	r2, r3
 8004872:	d869      	bhi.n	8004948 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004874:	4b43      	ldr	r3, [pc, #268]	; (8004984 <pvPortMalloc+0x18c>)
 8004876:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004878:	4b42      	ldr	r3, [pc, #264]	; (8004984 <pvPortMalloc+0x18c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800487e:	e004      	b.n	800488a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	429a      	cmp	r2, r3
 8004892:	d903      	bls.n	800489c <pvPortMalloc+0xa4>
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1f1      	bne.n	8004880 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800489c:	4b36      	ldr	r3, [pc, #216]	; (8004978 <pvPortMalloc+0x180>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d050      	beq.n	8004948 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2208      	movs	r2, #8
 80048ac:	4413      	add	r3, r2
 80048ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	1ad2      	subs	r2, r2, r3
 80048c0:	2308      	movs	r3, #8
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d91f      	bls.n	8004908 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4413      	add	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <pvPortMalloc+0xf8>
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	613b      	str	r3, [r7, #16]
}
 80048ec:	bf00      	nop
 80048ee:	e7fe      	b.n	80048ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	1ad2      	subs	r2, r2, r3
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004902:	69b8      	ldr	r0, [r7, #24]
 8004904:	f000 f908 	bl	8004b18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004908:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <pvPortMalloc+0x188>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	4a1b      	ldr	r2, [pc, #108]	; (8004980 <pvPortMalloc+0x188>)
 8004914:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004916:	4b1a      	ldr	r3, [pc, #104]	; (8004980 <pvPortMalloc+0x188>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	4b1b      	ldr	r3, [pc, #108]	; (8004988 <pvPortMalloc+0x190>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d203      	bcs.n	800492a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004922:	4b17      	ldr	r3, [pc, #92]	; (8004980 <pvPortMalloc+0x188>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a18      	ldr	r2, [pc, #96]	; (8004988 <pvPortMalloc+0x190>)
 8004928:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	4b13      	ldr	r3, [pc, #76]	; (800497c <pvPortMalloc+0x184>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	431a      	orrs	r2, r3
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800493e:	4b13      	ldr	r3, [pc, #76]	; (800498c <pvPortMalloc+0x194>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3301      	adds	r3, #1
 8004944:	4a11      	ldr	r2, [pc, #68]	; (800498c <pvPortMalloc+0x194>)
 8004946:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004948:	f7ff fa30 	bl	8003dac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <pvPortMalloc+0x174>
	__asm volatile
 8004956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	60fb      	str	r3, [r7, #12]
}
 8004968:	bf00      	nop
 800496a:	e7fe      	b.n	800496a <pvPortMalloc+0x172>
	return pvReturn;
 800496c:	69fb      	ldr	r3, [r7, #28]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3728      	adds	r7, #40	; 0x28
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	2000432c 	.word	0x2000432c
 800497c:	20004340 	.word	0x20004340
 8004980:	20004330 	.word	0x20004330
 8004984:	20004324 	.word	0x20004324
 8004988:	20004334 	.word	0x20004334
 800498c:	20004338 	.word	0x20004338

08004990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d04d      	beq.n	8004a3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049a2:	2308      	movs	r3, #8
 80049a4:	425b      	negs	r3, r3
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4413      	add	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	4b24      	ldr	r3, [pc, #144]	; (8004a48 <vPortFree+0xb8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <vPortFree+0x44>
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	60fb      	str	r3, [r7, #12]
}
 80049d0:	bf00      	nop
 80049d2:	e7fe      	b.n	80049d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <vPortFree+0x62>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	60bb      	str	r3, [r7, #8]
}
 80049ee:	bf00      	nop
 80049f0:	e7fe      	b.n	80049f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <vPortFree+0xb8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01e      	beq.n	8004a3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d11a      	bne.n	8004a3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <vPortFree+0xb8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	43db      	mvns	r3, r3
 8004a12:	401a      	ands	r2, r3
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a18:	f7ff f9ba 	bl	8003d90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	4b0a      	ldr	r3, [pc, #40]	; (8004a4c <vPortFree+0xbc>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4413      	add	r3, r2
 8004a26:	4a09      	ldr	r2, [pc, #36]	; (8004a4c <vPortFree+0xbc>)
 8004a28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a2a:	6938      	ldr	r0, [r7, #16]
 8004a2c:	f000 f874 	bl	8004b18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a30:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <vPortFree+0xc0>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3301      	adds	r3, #1
 8004a36:	4a06      	ldr	r2, [pc, #24]	; (8004a50 <vPortFree+0xc0>)
 8004a38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a3a:	f7ff f9b7 	bl	8003dac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a3e:	bf00      	nop
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20004340 	.word	0x20004340
 8004a4c:	20004330 	.word	0x20004330
 8004a50:	2000433c 	.word	0x2000433c

08004a54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004a5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a60:	4b27      	ldr	r3, [pc, #156]	; (8004b00 <prvHeapInit+0xac>)
 8004a62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00c      	beq.n	8004a88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3307      	adds	r3, #7
 8004a72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0307 	bic.w	r3, r3, #7
 8004a7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	4a1f      	ldr	r2, [pc, #124]	; (8004b00 <prvHeapInit+0xac>)
 8004a84:	4413      	add	r3, r2
 8004a86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a8c:	4a1d      	ldr	r2, [pc, #116]	; (8004b04 <prvHeapInit+0xb0>)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a92:	4b1c      	ldr	r3, [pc, #112]	; (8004b04 <prvHeapInit+0xb0>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0307 	bic.w	r3, r3, #7
 8004aae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a15      	ldr	r2, [pc, #84]	; (8004b08 <prvHeapInit+0xb4>)
 8004ab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ab6:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <prvHeapInit+0xb4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2200      	movs	r2, #0
 8004abc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004abe:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <prvHeapInit+0xb4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	1ad2      	subs	r2, r2, r3
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ad4:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <prvHeapInit+0xb4>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4a0a      	ldr	r2, [pc, #40]	; (8004b0c <prvHeapInit+0xb8>)
 8004ae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	4a09      	ldr	r2, [pc, #36]	; (8004b10 <prvHeapInit+0xbc>)
 8004aea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004aec:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <prvHeapInit+0xc0>)
 8004aee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004af2:	601a      	str	r2, [r3, #0]
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	20000724 	.word	0x20000724
 8004b04:	20004324 	.word	0x20004324
 8004b08:	2000432c 	.word	0x2000432c
 8004b0c:	20004334 	.word	0x20004334
 8004b10:	20004330 	.word	0x20004330
 8004b14:	20004340 	.word	0x20004340

08004b18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b20:	4b28      	ldr	r3, [pc, #160]	; (8004bc4 <prvInsertBlockIntoFreeList+0xac>)
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	e002      	b.n	8004b2c <prvInsertBlockIntoFreeList+0x14>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d8f7      	bhi.n	8004b26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	4413      	add	r3, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d108      	bne.n	8004b5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	441a      	add	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	441a      	add	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d118      	bne.n	8004ba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d00d      	beq.n	8004b96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	441a      	add	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	e008      	b.n	8004ba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b96:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	e003      	b.n	8004ba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d002      	beq.n	8004bb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bb6:	bf00      	nop
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20004324 	.word	0x20004324
 8004bc8:	2000432c 	.word	0x2000432c

08004bcc <__cvt>:
 8004bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd0:	ec55 4b10 	vmov	r4, r5, d0
 8004bd4:	2d00      	cmp	r5, #0
 8004bd6:	460e      	mov	r6, r1
 8004bd8:	4619      	mov	r1, r3
 8004bda:	462b      	mov	r3, r5
 8004bdc:	bfbb      	ittet	lt
 8004bde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004be2:	461d      	movlt	r5, r3
 8004be4:	2300      	movge	r3, #0
 8004be6:	232d      	movlt	r3, #45	; 0x2d
 8004be8:	700b      	strb	r3, [r1, #0]
 8004bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004bf0:	4691      	mov	r9, r2
 8004bf2:	f023 0820 	bic.w	r8, r3, #32
 8004bf6:	bfbc      	itt	lt
 8004bf8:	4622      	movlt	r2, r4
 8004bfa:	4614      	movlt	r4, r2
 8004bfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c00:	d005      	beq.n	8004c0e <__cvt+0x42>
 8004c02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c06:	d100      	bne.n	8004c0a <__cvt+0x3e>
 8004c08:	3601      	adds	r6, #1
 8004c0a:	2102      	movs	r1, #2
 8004c0c:	e000      	b.n	8004c10 <__cvt+0x44>
 8004c0e:	2103      	movs	r1, #3
 8004c10:	ab03      	add	r3, sp, #12
 8004c12:	9301      	str	r3, [sp, #4]
 8004c14:	ab02      	add	r3, sp, #8
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	ec45 4b10 	vmov	d0, r4, r5
 8004c1c:	4653      	mov	r3, sl
 8004c1e:	4632      	mov	r2, r6
 8004c20:	f000 ffae 	bl	8005b80 <_dtoa_r>
 8004c24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c28:	4607      	mov	r7, r0
 8004c2a:	d102      	bne.n	8004c32 <__cvt+0x66>
 8004c2c:	f019 0f01 	tst.w	r9, #1
 8004c30:	d022      	beq.n	8004c78 <__cvt+0xac>
 8004c32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c36:	eb07 0906 	add.w	r9, r7, r6
 8004c3a:	d110      	bne.n	8004c5e <__cvt+0x92>
 8004c3c:	783b      	ldrb	r3, [r7, #0]
 8004c3e:	2b30      	cmp	r3, #48	; 0x30
 8004c40:	d10a      	bne.n	8004c58 <__cvt+0x8c>
 8004c42:	2200      	movs	r2, #0
 8004c44:	2300      	movs	r3, #0
 8004c46:	4620      	mov	r0, r4
 8004c48:	4629      	mov	r1, r5
 8004c4a:	f7fb ff3d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c4e:	b918      	cbnz	r0, 8004c58 <__cvt+0x8c>
 8004c50:	f1c6 0601 	rsb	r6, r6, #1
 8004c54:	f8ca 6000 	str.w	r6, [sl]
 8004c58:	f8da 3000 	ldr.w	r3, [sl]
 8004c5c:	4499      	add	r9, r3
 8004c5e:	2200      	movs	r2, #0
 8004c60:	2300      	movs	r3, #0
 8004c62:	4620      	mov	r0, r4
 8004c64:	4629      	mov	r1, r5
 8004c66:	f7fb ff2f 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c6a:	b108      	cbz	r0, 8004c70 <__cvt+0xa4>
 8004c6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c70:	2230      	movs	r2, #48	; 0x30
 8004c72:	9b03      	ldr	r3, [sp, #12]
 8004c74:	454b      	cmp	r3, r9
 8004c76:	d307      	bcc.n	8004c88 <__cvt+0xbc>
 8004c78:	9b03      	ldr	r3, [sp, #12]
 8004c7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c7c:	1bdb      	subs	r3, r3, r7
 8004c7e:	4638      	mov	r0, r7
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	b004      	add	sp, #16
 8004c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c88:	1c59      	adds	r1, r3, #1
 8004c8a:	9103      	str	r1, [sp, #12]
 8004c8c:	701a      	strb	r2, [r3, #0]
 8004c8e:	e7f0      	b.n	8004c72 <__cvt+0xa6>

08004c90 <__exponent>:
 8004c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c92:	4603      	mov	r3, r0
 8004c94:	2900      	cmp	r1, #0
 8004c96:	bfb8      	it	lt
 8004c98:	4249      	neglt	r1, r1
 8004c9a:	f803 2b02 	strb.w	r2, [r3], #2
 8004c9e:	bfb4      	ite	lt
 8004ca0:	222d      	movlt	r2, #45	; 0x2d
 8004ca2:	222b      	movge	r2, #43	; 0x2b
 8004ca4:	2909      	cmp	r1, #9
 8004ca6:	7042      	strb	r2, [r0, #1]
 8004ca8:	dd2a      	ble.n	8004d00 <__exponent+0x70>
 8004caa:	f10d 0207 	add.w	r2, sp, #7
 8004cae:	4617      	mov	r7, r2
 8004cb0:	260a      	movs	r6, #10
 8004cb2:	4694      	mov	ip, r2
 8004cb4:	fb91 f5f6 	sdiv	r5, r1, r6
 8004cb8:	fb06 1415 	mls	r4, r6, r5, r1
 8004cbc:	3430      	adds	r4, #48	; 0x30
 8004cbe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	2c63      	cmp	r4, #99	; 0x63
 8004cc6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8004cca:	4629      	mov	r1, r5
 8004ccc:	dcf1      	bgt.n	8004cb2 <__exponent+0x22>
 8004cce:	3130      	adds	r1, #48	; 0x30
 8004cd0:	f1ac 0402 	sub.w	r4, ip, #2
 8004cd4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004cd8:	1c41      	adds	r1, r0, #1
 8004cda:	4622      	mov	r2, r4
 8004cdc:	42ba      	cmp	r2, r7
 8004cde:	d30a      	bcc.n	8004cf6 <__exponent+0x66>
 8004ce0:	f10d 0209 	add.w	r2, sp, #9
 8004ce4:	eba2 020c 	sub.w	r2, r2, ip
 8004ce8:	42bc      	cmp	r4, r7
 8004cea:	bf88      	it	hi
 8004cec:	2200      	movhi	r2, #0
 8004cee:	4413      	add	r3, r2
 8004cf0:	1a18      	subs	r0, r3, r0
 8004cf2:	b003      	add	sp, #12
 8004cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cf6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004cfa:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004cfe:	e7ed      	b.n	8004cdc <__exponent+0x4c>
 8004d00:	2330      	movs	r3, #48	; 0x30
 8004d02:	3130      	adds	r1, #48	; 0x30
 8004d04:	7083      	strb	r3, [r0, #2]
 8004d06:	70c1      	strb	r1, [r0, #3]
 8004d08:	1d03      	adds	r3, r0, #4
 8004d0a:	e7f1      	b.n	8004cf0 <__exponent+0x60>

08004d0c <_printf_float>:
 8004d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d10:	ed2d 8b02 	vpush	{d8}
 8004d14:	b08d      	sub	sp, #52	; 0x34
 8004d16:	460c      	mov	r4, r1
 8004d18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004d1c:	4616      	mov	r6, r2
 8004d1e:	461f      	mov	r7, r3
 8004d20:	4605      	mov	r5, r0
 8004d22:	f000 fdc9 	bl	80058b8 <_localeconv_r>
 8004d26:	f8d0 a000 	ldr.w	sl, [r0]
 8004d2a:	4650      	mov	r0, sl
 8004d2c:	f7fb faa0 	bl	8000270 <strlen>
 8004d30:	2300      	movs	r3, #0
 8004d32:	930a      	str	r3, [sp, #40]	; 0x28
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	9305      	str	r3, [sp, #20]
 8004d38:	f8d8 3000 	ldr.w	r3, [r8]
 8004d3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004d40:	3307      	adds	r3, #7
 8004d42:	f023 0307 	bic.w	r3, r3, #7
 8004d46:	f103 0208 	add.w	r2, r3, #8
 8004d4a:	f8c8 2000 	str.w	r2, [r8]
 8004d4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d56:	9307      	str	r3, [sp, #28]
 8004d58:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d5c:	ee08 0a10 	vmov	s16, r0
 8004d60:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004d64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d68:	4b9e      	ldr	r3, [pc, #632]	; (8004fe4 <_printf_float+0x2d8>)
 8004d6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d6e:	f7fb fedd 	bl	8000b2c <__aeabi_dcmpun>
 8004d72:	bb88      	cbnz	r0, 8004dd8 <_printf_float+0xcc>
 8004d74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d78:	4b9a      	ldr	r3, [pc, #616]	; (8004fe4 <_printf_float+0x2d8>)
 8004d7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d7e:	f7fb feb7 	bl	8000af0 <__aeabi_dcmple>
 8004d82:	bb48      	cbnz	r0, 8004dd8 <_printf_float+0xcc>
 8004d84:	2200      	movs	r2, #0
 8004d86:	2300      	movs	r3, #0
 8004d88:	4640      	mov	r0, r8
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	f7fb fea6 	bl	8000adc <__aeabi_dcmplt>
 8004d90:	b110      	cbz	r0, 8004d98 <_printf_float+0x8c>
 8004d92:	232d      	movs	r3, #45	; 0x2d
 8004d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d98:	4a93      	ldr	r2, [pc, #588]	; (8004fe8 <_printf_float+0x2dc>)
 8004d9a:	4b94      	ldr	r3, [pc, #592]	; (8004fec <_printf_float+0x2e0>)
 8004d9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004da0:	bf94      	ite	ls
 8004da2:	4690      	movls	r8, r2
 8004da4:	4698      	movhi	r8, r3
 8004da6:	2303      	movs	r3, #3
 8004da8:	6123      	str	r3, [r4, #16]
 8004daa:	9b05      	ldr	r3, [sp, #20]
 8004dac:	f023 0304 	bic.w	r3, r3, #4
 8004db0:	6023      	str	r3, [r4, #0]
 8004db2:	f04f 0900 	mov.w	r9, #0
 8004db6:	9700      	str	r7, [sp, #0]
 8004db8:	4633      	mov	r3, r6
 8004dba:	aa0b      	add	r2, sp, #44	; 0x2c
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f000 f9da 	bl	8005178 <_printf_common>
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	f040 8090 	bne.w	8004eea <_printf_float+0x1de>
 8004dca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dce:	b00d      	add	sp, #52	; 0x34
 8004dd0:	ecbd 8b02 	vpop	{d8}
 8004dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd8:	4642      	mov	r2, r8
 8004dda:	464b      	mov	r3, r9
 8004ddc:	4640      	mov	r0, r8
 8004dde:	4649      	mov	r1, r9
 8004de0:	f7fb fea4 	bl	8000b2c <__aeabi_dcmpun>
 8004de4:	b140      	cbz	r0, 8004df8 <_printf_float+0xec>
 8004de6:	464b      	mov	r3, r9
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bfbc      	itt	lt
 8004dec:	232d      	movlt	r3, #45	; 0x2d
 8004dee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004df2:	4a7f      	ldr	r2, [pc, #508]	; (8004ff0 <_printf_float+0x2e4>)
 8004df4:	4b7f      	ldr	r3, [pc, #508]	; (8004ff4 <_printf_float+0x2e8>)
 8004df6:	e7d1      	b.n	8004d9c <_printf_float+0x90>
 8004df8:	6863      	ldr	r3, [r4, #4]
 8004dfa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004dfe:	9206      	str	r2, [sp, #24]
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	d13f      	bne.n	8004e84 <_printf_float+0x178>
 8004e04:	2306      	movs	r3, #6
 8004e06:	6063      	str	r3, [r4, #4]
 8004e08:	9b05      	ldr	r3, [sp, #20]
 8004e0a:	6861      	ldr	r1, [r4, #4]
 8004e0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004e10:	2300      	movs	r3, #0
 8004e12:	9303      	str	r3, [sp, #12]
 8004e14:	ab0a      	add	r3, sp, #40	; 0x28
 8004e16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004e1a:	ab09      	add	r3, sp, #36	; 0x24
 8004e1c:	ec49 8b10 	vmov	d0, r8, r9
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	6022      	str	r2, [r4, #0]
 8004e24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e28:	4628      	mov	r0, r5
 8004e2a:	f7ff fecf 	bl	8004bcc <__cvt>
 8004e2e:	9b06      	ldr	r3, [sp, #24]
 8004e30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e32:	2b47      	cmp	r3, #71	; 0x47
 8004e34:	4680      	mov	r8, r0
 8004e36:	d108      	bne.n	8004e4a <_printf_float+0x13e>
 8004e38:	1cc8      	adds	r0, r1, #3
 8004e3a:	db02      	blt.n	8004e42 <_printf_float+0x136>
 8004e3c:	6863      	ldr	r3, [r4, #4]
 8004e3e:	4299      	cmp	r1, r3
 8004e40:	dd41      	ble.n	8004ec6 <_printf_float+0x1ba>
 8004e42:	f1ab 0302 	sub.w	r3, fp, #2
 8004e46:	fa5f fb83 	uxtb.w	fp, r3
 8004e4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e4e:	d820      	bhi.n	8004e92 <_printf_float+0x186>
 8004e50:	3901      	subs	r1, #1
 8004e52:	465a      	mov	r2, fp
 8004e54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e58:	9109      	str	r1, [sp, #36]	; 0x24
 8004e5a:	f7ff ff19 	bl	8004c90 <__exponent>
 8004e5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e60:	1813      	adds	r3, r2, r0
 8004e62:	2a01      	cmp	r2, #1
 8004e64:	4681      	mov	r9, r0
 8004e66:	6123      	str	r3, [r4, #16]
 8004e68:	dc02      	bgt.n	8004e70 <_printf_float+0x164>
 8004e6a:	6822      	ldr	r2, [r4, #0]
 8004e6c:	07d2      	lsls	r2, r2, #31
 8004e6e:	d501      	bpl.n	8004e74 <_printf_float+0x168>
 8004e70:	3301      	adds	r3, #1
 8004e72:	6123      	str	r3, [r4, #16]
 8004e74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d09c      	beq.n	8004db6 <_printf_float+0xaa>
 8004e7c:	232d      	movs	r3, #45	; 0x2d
 8004e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e82:	e798      	b.n	8004db6 <_printf_float+0xaa>
 8004e84:	9a06      	ldr	r2, [sp, #24]
 8004e86:	2a47      	cmp	r2, #71	; 0x47
 8004e88:	d1be      	bne.n	8004e08 <_printf_float+0xfc>
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1bc      	bne.n	8004e08 <_printf_float+0xfc>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e7b9      	b.n	8004e06 <_printf_float+0xfa>
 8004e92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004e96:	d118      	bne.n	8004eca <_printf_float+0x1be>
 8004e98:	2900      	cmp	r1, #0
 8004e9a:	6863      	ldr	r3, [r4, #4]
 8004e9c:	dd0b      	ble.n	8004eb6 <_printf_float+0x1aa>
 8004e9e:	6121      	str	r1, [r4, #16]
 8004ea0:	b913      	cbnz	r3, 8004ea8 <_printf_float+0x19c>
 8004ea2:	6822      	ldr	r2, [r4, #0]
 8004ea4:	07d0      	lsls	r0, r2, #31
 8004ea6:	d502      	bpl.n	8004eae <_printf_float+0x1a2>
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	440b      	add	r3, r1
 8004eac:	6123      	str	r3, [r4, #16]
 8004eae:	65a1      	str	r1, [r4, #88]	; 0x58
 8004eb0:	f04f 0900 	mov.w	r9, #0
 8004eb4:	e7de      	b.n	8004e74 <_printf_float+0x168>
 8004eb6:	b913      	cbnz	r3, 8004ebe <_printf_float+0x1b2>
 8004eb8:	6822      	ldr	r2, [r4, #0]
 8004eba:	07d2      	lsls	r2, r2, #31
 8004ebc:	d501      	bpl.n	8004ec2 <_printf_float+0x1b6>
 8004ebe:	3302      	adds	r3, #2
 8004ec0:	e7f4      	b.n	8004eac <_printf_float+0x1a0>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e7f2      	b.n	8004eac <_printf_float+0x1a0>
 8004ec6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ecc:	4299      	cmp	r1, r3
 8004ece:	db05      	blt.n	8004edc <_printf_float+0x1d0>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	6121      	str	r1, [r4, #16]
 8004ed4:	07d8      	lsls	r0, r3, #31
 8004ed6:	d5ea      	bpl.n	8004eae <_printf_float+0x1a2>
 8004ed8:	1c4b      	adds	r3, r1, #1
 8004eda:	e7e7      	b.n	8004eac <_printf_float+0x1a0>
 8004edc:	2900      	cmp	r1, #0
 8004ede:	bfd4      	ite	le
 8004ee0:	f1c1 0202 	rsble	r2, r1, #2
 8004ee4:	2201      	movgt	r2, #1
 8004ee6:	4413      	add	r3, r2
 8004ee8:	e7e0      	b.n	8004eac <_printf_float+0x1a0>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	055a      	lsls	r2, r3, #21
 8004eee:	d407      	bmi.n	8004f00 <_printf_float+0x1f4>
 8004ef0:	6923      	ldr	r3, [r4, #16]
 8004ef2:	4642      	mov	r2, r8
 8004ef4:	4631      	mov	r1, r6
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	47b8      	blx	r7
 8004efa:	3001      	adds	r0, #1
 8004efc:	d12c      	bne.n	8004f58 <_printf_float+0x24c>
 8004efe:	e764      	b.n	8004dca <_printf_float+0xbe>
 8004f00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f04:	f240 80e0 	bls.w	80050c8 <_printf_float+0x3bc>
 8004f08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f7fb fdda 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	d034      	beq.n	8004f82 <_printf_float+0x276>
 8004f18:	4a37      	ldr	r2, [pc, #220]	; (8004ff8 <_printf_float+0x2ec>)
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	4628      	mov	r0, r5
 8004f20:	47b8      	blx	r7
 8004f22:	3001      	adds	r0, #1
 8004f24:	f43f af51 	beq.w	8004dca <_printf_float+0xbe>
 8004f28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	db02      	blt.n	8004f36 <_printf_float+0x22a>
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	07d8      	lsls	r0, r3, #31
 8004f34:	d510      	bpl.n	8004f58 <_printf_float+0x24c>
 8004f36:	ee18 3a10 	vmov	r3, s16
 8004f3a:	4652      	mov	r2, sl
 8004f3c:	4631      	mov	r1, r6
 8004f3e:	4628      	mov	r0, r5
 8004f40:	47b8      	blx	r7
 8004f42:	3001      	adds	r0, #1
 8004f44:	f43f af41 	beq.w	8004dca <_printf_float+0xbe>
 8004f48:	f04f 0800 	mov.w	r8, #0
 8004f4c:	f104 091a 	add.w	r9, r4, #26
 8004f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f52:	3b01      	subs	r3, #1
 8004f54:	4543      	cmp	r3, r8
 8004f56:	dc09      	bgt.n	8004f6c <_printf_float+0x260>
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	079b      	lsls	r3, r3, #30
 8004f5c:	f100 8107 	bmi.w	800516e <_printf_float+0x462>
 8004f60:	68e0      	ldr	r0, [r4, #12]
 8004f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f64:	4298      	cmp	r0, r3
 8004f66:	bfb8      	it	lt
 8004f68:	4618      	movlt	r0, r3
 8004f6a:	e730      	b.n	8004dce <_printf_float+0xc2>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	464a      	mov	r2, r9
 8004f70:	4631      	mov	r1, r6
 8004f72:	4628      	mov	r0, r5
 8004f74:	47b8      	blx	r7
 8004f76:	3001      	adds	r0, #1
 8004f78:	f43f af27 	beq.w	8004dca <_printf_float+0xbe>
 8004f7c:	f108 0801 	add.w	r8, r8, #1
 8004f80:	e7e6      	b.n	8004f50 <_printf_float+0x244>
 8004f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	dc39      	bgt.n	8004ffc <_printf_float+0x2f0>
 8004f88:	4a1b      	ldr	r2, [pc, #108]	; (8004ff8 <_printf_float+0x2ec>)
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	4631      	mov	r1, r6
 8004f8e:	4628      	mov	r0, r5
 8004f90:	47b8      	blx	r7
 8004f92:	3001      	adds	r0, #1
 8004f94:	f43f af19 	beq.w	8004dca <_printf_float+0xbe>
 8004f98:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	d102      	bne.n	8004fa6 <_printf_float+0x29a>
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	07d9      	lsls	r1, r3, #31
 8004fa4:	d5d8      	bpl.n	8004f58 <_printf_float+0x24c>
 8004fa6:	ee18 3a10 	vmov	r3, s16
 8004faa:	4652      	mov	r2, sl
 8004fac:	4631      	mov	r1, r6
 8004fae:	4628      	mov	r0, r5
 8004fb0:	47b8      	blx	r7
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	f43f af09 	beq.w	8004dca <_printf_float+0xbe>
 8004fb8:	f04f 0900 	mov.w	r9, #0
 8004fbc:	f104 0a1a 	add.w	sl, r4, #26
 8004fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc2:	425b      	negs	r3, r3
 8004fc4:	454b      	cmp	r3, r9
 8004fc6:	dc01      	bgt.n	8004fcc <_printf_float+0x2c0>
 8004fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fca:	e792      	b.n	8004ef2 <_printf_float+0x1e6>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	4652      	mov	r2, sl
 8004fd0:	4631      	mov	r1, r6
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	47b8      	blx	r7
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	f43f aef7 	beq.w	8004dca <_printf_float+0xbe>
 8004fdc:	f109 0901 	add.w	r9, r9, #1
 8004fe0:	e7ee      	b.n	8004fc0 <_printf_float+0x2b4>
 8004fe2:	bf00      	nop
 8004fe4:	7fefffff 	.word	0x7fefffff
 8004fe8:	08007e2c 	.word	0x08007e2c
 8004fec:	08007e30 	.word	0x08007e30
 8004ff0:	08007e34 	.word	0x08007e34
 8004ff4:	08007e38 	.word	0x08007e38
 8004ff8:	08007e3c 	.word	0x08007e3c
 8004ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ffe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005000:	429a      	cmp	r2, r3
 8005002:	bfa8      	it	ge
 8005004:	461a      	movge	r2, r3
 8005006:	2a00      	cmp	r2, #0
 8005008:	4691      	mov	r9, r2
 800500a:	dc37      	bgt.n	800507c <_printf_float+0x370>
 800500c:	f04f 0b00 	mov.w	fp, #0
 8005010:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005014:	f104 021a 	add.w	r2, r4, #26
 8005018:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800501a:	9305      	str	r3, [sp, #20]
 800501c:	eba3 0309 	sub.w	r3, r3, r9
 8005020:	455b      	cmp	r3, fp
 8005022:	dc33      	bgt.n	800508c <_printf_float+0x380>
 8005024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005028:	429a      	cmp	r2, r3
 800502a:	db3b      	blt.n	80050a4 <_printf_float+0x398>
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	07da      	lsls	r2, r3, #31
 8005030:	d438      	bmi.n	80050a4 <_printf_float+0x398>
 8005032:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005036:	eba2 0903 	sub.w	r9, r2, r3
 800503a:	9b05      	ldr	r3, [sp, #20]
 800503c:	1ad2      	subs	r2, r2, r3
 800503e:	4591      	cmp	r9, r2
 8005040:	bfa8      	it	ge
 8005042:	4691      	movge	r9, r2
 8005044:	f1b9 0f00 	cmp.w	r9, #0
 8005048:	dc35      	bgt.n	80050b6 <_printf_float+0x3aa>
 800504a:	f04f 0800 	mov.w	r8, #0
 800504e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005052:	f104 0a1a 	add.w	sl, r4, #26
 8005056:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	eba3 0309 	sub.w	r3, r3, r9
 8005060:	4543      	cmp	r3, r8
 8005062:	f77f af79 	ble.w	8004f58 <_printf_float+0x24c>
 8005066:	2301      	movs	r3, #1
 8005068:	4652      	mov	r2, sl
 800506a:	4631      	mov	r1, r6
 800506c:	4628      	mov	r0, r5
 800506e:	47b8      	blx	r7
 8005070:	3001      	adds	r0, #1
 8005072:	f43f aeaa 	beq.w	8004dca <_printf_float+0xbe>
 8005076:	f108 0801 	add.w	r8, r8, #1
 800507a:	e7ec      	b.n	8005056 <_printf_float+0x34a>
 800507c:	4613      	mov	r3, r2
 800507e:	4631      	mov	r1, r6
 8005080:	4642      	mov	r2, r8
 8005082:	4628      	mov	r0, r5
 8005084:	47b8      	blx	r7
 8005086:	3001      	adds	r0, #1
 8005088:	d1c0      	bne.n	800500c <_printf_float+0x300>
 800508a:	e69e      	b.n	8004dca <_printf_float+0xbe>
 800508c:	2301      	movs	r3, #1
 800508e:	4631      	mov	r1, r6
 8005090:	4628      	mov	r0, r5
 8005092:	9205      	str	r2, [sp, #20]
 8005094:	47b8      	blx	r7
 8005096:	3001      	adds	r0, #1
 8005098:	f43f ae97 	beq.w	8004dca <_printf_float+0xbe>
 800509c:	9a05      	ldr	r2, [sp, #20]
 800509e:	f10b 0b01 	add.w	fp, fp, #1
 80050a2:	e7b9      	b.n	8005018 <_printf_float+0x30c>
 80050a4:	ee18 3a10 	vmov	r3, s16
 80050a8:	4652      	mov	r2, sl
 80050aa:	4631      	mov	r1, r6
 80050ac:	4628      	mov	r0, r5
 80050ae:	47b8      	blx	r7
 80050b0:	3001      	adds	r0, #1
 80050b2:	d1be      	bne.n	8005032 <_printf_float+0x326>
 80050b4:	e689      	b.n	8004dca <_printf_float+0xbe>
 80050b6:	9a05      	ldr	r2, [sp, #20]
 80050b8:	464b      	mov	r3, r9
 80050ba:	4442      	add	r2, r8
 80050bc:	4631      	mov	r1, r6
 80050be:	4628      	mov	r0, r5
 80050c0:	47b8      	blx	r7
 80050c2:	3001      	adds	r0, #1
 80050c4:	d1c1      	bne.n	800504a <_printf_float+0x33e>
 80050c6:	e680      	b.n	8004dca <_printf_float+0xbe>
 80050c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050ca:	2a01      	cmp	r2, #1
 80050cc:	dc01      	bgt.n	80050d2 <_printf_float+0x3c6>
 80050ce:	07db      	lsls	r3, r3, #31
 80050d0:	d53a      	bpl.n	8005148 <_printf_float+0x43c>
 80050d2:	2301      	movs	r3, #1
 80050d4:	4642      	mov	r2, r8
 80050d6:	4631      	mov	r1, r6
 80050d8:	4628      	mov	r0, r5
 80050da:	47b8      	blx	r7
 80050dc:	3001      	adds	r0, #1
 80050de:	f43f ae74 	beq.w	8004dca <_printf_float+0xbe>
 80050e2:	ee18 3a10 	vmov	r3, s16
 80050e6:	4652      	mov	r2, sl
 80050e8:	4631      	mov	r1, r6
 80050ea:	4628      	mov	r0, r5
 80050ec:	47b8      	blx	r7
 80050ee:	3001      	adds	r0, #1
 80050f0:	f43f ae6b 	beq.w	8004dca <_printf_float+0xbe>
 80050f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050f8:	2200      	movs	r2, #0
 80050fa:	2300      	movs	r3, #0
 80050fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005100:	f7fb fce2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005104:	b9d8      	cbnz	r0, 800513e <_printf_float+0x432>
 8005106:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800510a:	f108 0201 	add.w	r2, r8, #1
 800510e:	4631      	mov	r1, r6
 8005110:	4628      	mov	r0, r5
 8005112:	47b8      	blx	r7
 8005114:	3001      	adds	r0, #1
 8005116:	d10e      	bne.n	8005136 <_printf_float+0x42a>
 8005118:	e657      	b.n	8004dca <_printf_float+0xbe>
 800511a:	2301      	movs	r3, #1
 800511c:	4652      	mov	r2, sl
 800511e:	4631      	mov	r1, r6
 8005120:	4628      	mov	r0, r5
 8005122:	47b8      	blx	r7
 8005124:	3001      	adds	r0, #1
 8005126:	f43f ae50 	beq.w	8004dca <_printf_float+0xbe>
 800512a:	f108 0801 	add.w	r8, r8, #1
 800512e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005130:	3b01      	subs	r3, #1
 8005132:	4543      	cmp	r3, r8
 8005134:	dcf1      	bgt.n	800511a <_printf_float+0x40e>
 8005136:	464b      	mov	r3, r9
 8005138:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800513c:	e6da      	b.n	8004ef4 <_printf_float+0x1e8>
 800513e:	f04f 0800 	mov.w	r8, #0
 8005142:	f104 0a1a 	add.w	sl, r4, #26
 8005146:	e7f2      	b.n	800512e <_printf_float+0x422>
 8005148:	2301      	movs	r3, #1
 800514a:	4642      	mov	r2, r8
 800514c:	e7df      	b.n	800510e <_printf_float+0x402>
 800514e:	2301      	movs	r3, #1
 8005150:	464a      	mov	r2, r9
 8005152:	4631      	mov	r1, r6
 8005154:	4628      	mov	r0, r5
 8005156:	47b8      	blx	r7
 8005158:	3001      	adds	r0, #1
 800515a:	f43f ae36 	beq.w	8004dca <_printf_float+0xbe>
 800515e:	f108 0801 	add.w	r8, r8, #1
 8005162:	68e3      	ldr	r3, [r4, #12]
 8005164:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005166:	1a5b      	subs	r3, r3, r1
 8005168:	4543      	cmp	r3, r8
 800516a:	dcf0      	bgt.n	800514e <_printf_float+0x442>
 800516c:	e6f8      	b.n	8004f60 <_printf_float+0x254>
 800516e:	f04f 0800 	mov.w	r8, #0
 8005172:	f104 0919 	add.w	r9, r4, #25
 8005176:	e7f4      	b.n	8005162 <_printf_float+0x456>

08005178 <_printf_common>:
 8005178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800517c:	4616      	mov	r6, r2
 800517e:	4699      	mov	r9, r3
 8005180:	688a      	ldr	r2, [r1, #8]
 8005182:	690b      	ldr	r3, [r1, #16]
 8005184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005188:	4293      	cmp	r3, r2
 800518a:	bfb8      	it	lt
 800518c:	4613      	movlt	r3, r2
 800518e:	6033      	str	r3, [r6, #0]
 8005190:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005194:	4607      	mov	r7, r0
 8005196:	460c      	mov	r4, r1
 8005198:	b10a      	cbz	r2, 800519e <_printf_common+0x26>
 800519a:	3301      	adds	r3, #1
 800519c:	6033      	str	r3, [r6, #0]
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	0699      	lsls	r1, r3, #26
 80051a2:	bf42      	ittt	mi
 80051a4:	6833      	ldrmi	r3, [r6, #0]
 80051a6:	3302      	addmi	r3, #2
 80051a8:	6033      	strmi	r3, [r6, #0]
 80051aa:	6825      	ldr	r5, [r4, #0]
 80051ac:	f015 0506 	ands.w	r5, r5, #6
 80051b0:	d106      	bne.n	80051c0 <_printf_common+0x48>
 80051b2:	f104 0a19 	add.w	sl, r4, #25
 80051b6:	68e3      	ldr	r3, [r4, #12]
 80051b8:	6832      	ldr	r2, [r6, #0]
 80051ba:	1a9b      	subs	r3, r3, r2
 80051bc:	42ab      	cmp	r3, r5
 80051be:	dc26      	bgt.n	800520e <_printf_common+0x96>
 80051c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051c4:	1e13      	subs	r3, r2, #0
 80051c6:	6822      	ldr	r2, [r4, #0]
 80051c8:	bf18      	it	ne
 80051ca:	2301      	movne	r3, #1
 80051cc:	0692      	lsls	r2, r2, #26
 80051ce:	d42b      	bmi.n	8005228 <_printf_common+0xb0>
 80051d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051d4:	4649      	mov	r1, r9
 80051d6:	4638      	mov	r0, r7
 80051d8:	47c0      	blx	r8
 80051da:	3001      	adds	r0, #1
 80051dc:	d01e      	beq.n	800521c <_printf_common+0xa4>
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	6922      	ldr	r2, [r4, #16]
 80051e2:	f003 0306 	and.w	r3, r3, #6
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	bf02      	ittt	eq
 80051ea:	68e5      	ldreq	r5, [r4, #12]
 80051ec:	6833      	ldreq	r3, [r6, #0]
 80051ee:	1aed      	subeq	r5, r5, r3
 80051f0:	68a3      	ldr	r3, [r4, #8]
 80051f2:	bf0c      	ite	eq
 80051f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051f8:	2500      	movne	r5, #0
 80051fa:	4293      	cmp	r3, r2
 80051fc:	bfc4      	itt	gt
 80051fe:	1a9b      	subgt	r3, r3, r2
 8005200:	18ed      	addgt	r5, r5, r3
 8005202:	2600      	movs	r6, #0
 8005204:	341a      	adds	r4, #26
 8005206:	42b5      	cmp	r5, r6
 8005208:	d11a      	bne.n	8005240 <_printf_common+0xc8>
 800520a:	2000      	movs	r0, #0
 800520c:	e008      	b.n	8005220 <_printf_common+0xa8>
 800520e:	2301      	movs	r3, #1
 8005210:	4652      	mov	r2, sl
 8005212:	4649      	mov	r1, r9
 8005214:	4638      	mov	r0, r7
 8005216:	47c0      	blx	r8
 8005218:	3001      	adds	r0, #1
 800521a:	d103      	bne.n	8005224 <_printf_common+0xac>
 800521c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005224:	3501      	adds	r5, #1
 8005226:	e7c6      	b.n	80051b6 <_printf_common+0x3e>
 8005228:	18e1      	adds	r1, r4, r3
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	2030      	movs	r0, #48	; 0x30
 800522e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005232:	4422      	add	r2, r4
 8005234:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005238:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800523c:	3302      	adds	r3, #2
 800523e:	e7c7      	b.n	80051d0 <_printf_common+0x58>
 8005240:	2301      	movs	r3, #1
 8005242:	4622      	mov	r2, r4
 8005244:	4649      	mov	r1, r9
 8005246:	4638      	mov	r0, r7
 8005248:	47c0      	blx	r8
 800524a:	3001      	adds	r0, #1
 800524c:	d0e6      	beq.n	800521c <_printf_common+0xa4>
 800524e:	3601      	adds	r6, #1
 8005250:	e7d9      	b.n	8005206 <_printf_common+0x8e>
	...

08005254 <_printf_i>:
 8005254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005258:	7e0f      	ldrb	r7, [r1, #24]
 800525a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800525c:	2f78      	cmp	r7, #120	; 0x78
 800525e:	4691      	mov	r9, r2
 8005260:	4680      	mov	r8, r0
 8005262:	460c      	mov	r4, r1
 8005264:	469a      	mov	sl, r3
 8005266:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800526a:	d807      	bhi.n	800527c <_printf_i+0x28>
 800526c:	2f62      	cmp	r7, #98	; 0x62
 800526e:	d80a      	bhi.n	8005286 <_printf_i+0x32>
 8005270:	2f00      	cmp	r7, #0
 8005272:	f000 80d4 	beq.w	800541e <_printf_i+0x1ca>
 8005276:	2f58      	cmp	r7, #88	; 0x58
 8005278:	f000 80c0 	beq.w	80053fc <_printf_i+0x1a8>
 800527c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005284:	e03a      	b.n	80052fc <_printf_i+0xa8>
 8005286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800528a:	2b15      	cmp	r3, #21
 800528c:	d8f6      	bhi.n	800527c <_printf_i+0x28>
 800528e:	a101      	add	r1, pc, #4	; (adr r1, 8005294 <_printf_i+0x40>)
 8005290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005294:	080052ed 	.word	0x080052ed
 8005298:	08005301 	.word	0x08005301
 800529c:	0800527d 	.word	0x0800527d
 80052a0:	0800527d 	.word	0x0800527d
 80052a4:	0800527d 	.word	0x0800527d
 80052a8:	0800527d 	.word	0x0800527d
 80052ac:	08005301 	.word	0x08005301
 80052b0:	0800527d 	.word	0x0800527d
 80052b4:	0800527d 	.word	0x0800527d
 80052b8:	0800527d 	.word	0x0800527d
 80052bc:	0800527d 	.word	0x0800527d
 80052c0:	08005405 	.word	0x08005405
 80052c4:	0800532d 	.word	0x0800532d
 80052c8:	080053bf 	.word	0x080053bf
 80052cc:	0800527d 	.word	0x0800527d
 80052d0:	0800527d 	.word	0x0800527d
 80052d4:	08005427 	.word	0x08005427
 80052d8:	0800527d 	.word	0x0800527d
 80052dc:	0800532d 	.word	0x0800532d
 80052e0:	0800527d 	.word	0x0800527d
 80052e4:	0800527d 	.word	0x0800527d
 80052e8:	080053c7 	.word	0x080053c7
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	1d1a      	adds	r2, r3, #4
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	602a      	str	r2, [r5, #0]
 80052f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052fc:	2301      	movs	r3, #1
 80052fe:	e09f      	b.n	8005440 <_printf_i+0x1ec>
 8005300:	6820      	ldr	r0, [r4, #0]
 8005302:	682b      	ldr	r3, [r5, #0]
 8005304:	0607      	lsls	r7, r0, #24
 8005306:	f103 0104 	add.w	r1, r3, #4
 800530a:	6029      	str	r1, [r5, #0]
 800530c:	d501      	bpl.n	8005312 <_printf_i+0xbe>
 800530e:	681e      	ldr	r6, [r3, #0]
 8005310:	e003      	b.n	800531a <_printf_i+0xc6>
 8005312:	0646      	lsls	r6, r0, #25
 8005314:	d5fb      	bpl.n	800530e <_printf_i+0xba>
 8005316:	f9b3 6000 	ldrsh.w	r6, [r3]
 800531a:	2e00      	cmp	r6, #0
 800531c:	da03      	bge.n	8005326 <_printf_i+0xd2>
 800531e:	232d      	movs	r3, #45	; 0x2d
 8005320:	4276      	negs	r6, r6
 8005322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005326:	485a      	ldr	r0, [pc, #360]	; (8005490 <_printf_i+0x23c>)
 8005328:	230a      	movs	r3, #10
 800532a:	e012      	b.n	8005352 <_printf_i+0xfe>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	6820      	ldr	r0, [r4, #0]
 8005330:	1d19      	adds	r1, r3, #4
 8005332:	6029      	str	r1, [r5, #0]
 8005334:	0605      	lsls	r5, r0, #24
 8005336:	d501      	bpl.n	800533c <_printf_i+0xe8>
 8005338:	681e      	ldr	r6, [r3, #0]
 800533a:	e002      	b.n	8005342 <_printf_i+0xee>
 800533c:	0641      	lsls	r1, r0, #25
 800533e:	d5fb      	bpl.n	8005338 <_printf_i+0xe4>
 8005340:	881e      	ldrh	r6, [r3, #0]
 8005342:	4853      	ldr	r0, [pc, #332]	; (8005490 <_printf_i+0x23c>)
 8005344:	2f6f      	cmp	r7, #111	; 0x6f
 8005346:	bf0c      	ite	eq
 8005348:	2308      	moveq	r3, #8
 800534a:	230a      	movne	r3, #10
 800534c:	2100      	movs	r1, #0
 800534e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005352:	6865      	ldr	r5, [r4, #4]
 8005354:	60a5      	str	r5, [r4, #8]
 8005356:	2d00      	cmp	r5, #0
 8005358:	bfa2      	ittt	ge
 800535a:	6821      	ldrge	r1, [r4, #0]
 800535c:	f021 0104 	bicge.w	r1, r1, #4
 8005360:	6021      	strge	r1, [r4, #0]
 8005362:	b90e      	cbnz	r6, 8005368 <_printf_i+0x114>
 8005364:	2d00      	cmp	r5, #0
 8005366:	d04b      	beq.n	8005400 <_printf_i+0x1ac>
 8005368:	4615      	mov	r5, r2
 800536a:	fbb6 f1f3 	udiv	r1, r6, r3
 800536e:	fb03 6711 	mls	r7, r3, r1, r6
 8005372:	5dc7      	ldrb	r7, [r0, r7]
 8005374:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005378:	4637      	mov	r7, r6
 800537a:	42bb      	cmp	r3, r7
 800537c:	460e      	mov	r6, r1
 800537e:	d9f4      	bls.n	800536a <_printf_i+0x116>
 8005380:	2b08      	cmp	r3, #8
 8005382:	d10b      	bne.n	800539c <_printf_i+0x148>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	07de      	lsls	r6, r3, #31
 8005388:	d508      	bpl.n	800539c <_printf_i+0x148>
 800538a:	6923      	ldr	r3, [r4, #16]
 800538c:	6861      	ldr	r1, [r4, #4]
 800538e:	4299      	cmp	r1, r3
 8005390:	bfde      	ittt	le
 8005392:	2330      	movle	r3, #48	; 0x30
 8005394:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005398:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800539c:	1b52      	subs	r2, r2, r5
 800539e:	6122      	str	r2, [r4, #16]
 80053a0:	f8cd a000 	str.w	sl, [sp]
 80053a4:	464b      	mov	r3, r9
 80053a6:	aa03      	add	r2, sp, #12
 80053a8:	4621      	mov	r1, r4
 80053aa:	4640      	mov	r0, r8
 80053ac:	f7ff fee4 	bl	8005178 <_printf_common>
 80053b0:	3001      	adds	r0, #1
 80053b2:	d14a      	bne.n	800544a <_printf_i+0x1f6>
 80053b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053b8:	b004      	add	sp, #16
 80053ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	f043 0320 	orr.w	r3, r3, #32
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	4833      	ldr	r0, [pc, #204]	; (8005494 <_printf_i+0x240>)
 80053c8:	2778      	movs	r7, #120	; 0x78
 80053ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	6829      	ldr	r1, [r5, #0]
 80053d2:	061f      	lsls	r7, r3, #24
 80053d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80053d8:	d402      	bmi.n	80053e0 <_printf_i+0x18c>
 80053da:	065f      	lsls	r7, r3, #25
 80053dc:	bf48      	it	mi
 80053de:	b2b6      	uxthmi	r6, r6
 80053e0:	07df      	lsls	r7, r3, #31
 80053e2:	bf48      	it	mi
 80053e4:	f043 0320 	orrmi.w	r3, r3, #32
 80053e8:	6029      	str	r1, [r5, #0]
 80053ea:	bf48      	it	mi
 80053ec:	6023      	strmi	r3, [r4, #0]
 80053ee:	b91e      	cbnz	r6, 80053f8 <_printf_i+0x1a4>
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	f023 0320 	bic.w	r3, r3, #32
 80053f6:	6023      	str	r3, [r4, #0]
 80053f8:	2310      	movs	r3, #16
 80053fa:	e7a7      	b.n	800534c <_printf_i+0xf8>
 80053fc:	4824      	ldr	r0, [pc, #144]	; (8005490 <_printf_i+0x23c>)
 80053fe:	e7e4      	b.n	80053ca <_printf_i+0x176>
 8005400:	4615      	mov	r5, r2
 8005402:	e7bd      	b.n	8005380 <_printf_i+0x12c>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	6826      	ldr	r6, [r4, #0]
 8005408:	6961      	ldr	r1, [r4, #20]
 800540a:	1d18      	adds	r0, r3, #4
 800540c:	6028      	str	r0, [r5, #0]
 800540e:	0635      	lsls	r5, r6, #24
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	d501      	bpl.n	8005418 <_printf_i+0x1c4>
 8005414:	6019      	str	r1, [r3, #0]
 8005416:	e002      	b.n	800541e <_printf_i+0x1ca>
 8005418:	0670      	lsls	r0, r6, #25
 800541a:	d5fb      	bpl.n	8005414 <_printf_i+0x1c0>
 800541c:	8019      	strh	r1, [r3, #0]
 800541e:	2300      	movs	r3, #0
 8005420:	6123      	str	r3, [r4, #16]
 8005422:	4615      	mov	r5, r2
 8005424:	e7bc      	b.n	80053a0 <_printf_i+0x14c>
 8005426:	682b      	ldr	r3, [r5, #0]
 8005428:	1d1a      	adds	r2, r3, #4
 800542a:	602a      	str	r2, [r5, #0]
 800542c:	681d      	ldr	r5, [r3, #0]
 800542e:	6862      	ldr	r2, [r4, #4]
 8005430:	2100      	movs	r1, #0
 8005432:	4628      	mov	r0, r5
 8005434:	f7fa fecc 	bl	80001d0 <memchr>
 8005438:	b108      	cbz	r0, 800543e <_printf_i+0x1ea>
 800543a:	1b40      	subs	r0, r0, r5
 800543c:	6060      	str	r0, [r4, #4]
 800543e:	6863      	ldr	r3, [r4, #4]
 8005440:	6123      	str	r3, [r4, #16]
 8005442:	2300      	movs	r3, #0
 8005444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005448:	e7aa      	b.n	80053a0 <_printf_i+0x14c>
 800544a:	6923      	ldr	r3, [r4, #16]
 800544c:	462a      	mov	r2, r5
 800544e:	4649      	mov	r1, r9
 8005450:	4640      	mov	r0, r8
 8005452:	47d0      	blx	sl
 8005454:	3001      	adds	r0, #1
 8005456:	d0ad      	beq.n	80053b4 <_printf_i+0x160>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	079b      	lsls	r3, r3, #30
 800545c:	d413      	bmi.n	8005486 <_printf_i+0x232>
 800545e:	68e0      	ldr	r0, [r4, #12]
 8005460:	9b03      	ldr	r3, [sp, #12]
 8005462:	4298      	cmp	r0, r3
 8005464:	bfb8      	it	lt
 8005466:	4618      	movlt	r0, r3
 8005468:	e7a6      	b.n	80053b8 <_printf_i+0x164>
 800546a:	2301      	movs	r3, #1
 800546c:	4632      	mov	r2, r6
 800546e:	4649      	mov	r1, r9
 8005470:	4640      	mov	r0, r8
 8005472:	47d0      	blx	sl
 8005474:	3001      	adds	r0, #1
 8005476:	d09d      	beq.n	80053b4 <_printf_i+0x160>
 8005478:	3501      	adds	r5, #1
 800547a:	68e3      	ldr	r3, [r4, #12]
 800547c:	9903      	ldr	r1, [sp, #12]
 800547e:	1a5b      	subs	r3, r3, r1
 8005480:	42ab      	cmp	r3, r5
 8005482:	dcf2      	bgt.n	800546a <_printf_i+0x216>
 8005484:	e7eb      	b.n	800545e <_printf_i+0x20a>
 8005486:	2500      	movs	r5, #0
 8005488:	f104 0619 	add.w	r6, r4, #25
 800548c:	e7f5      	b.n	800547a <_printf_i+0x226>
 800548e:	bf00      	nop
 8005490:	08007e3e 	.word	0x08007e3e
 8005494:	08007e4f 	.word	0x08007e4f

08005498 <std>:
 8005498:	2300      	movs	r3, #0
 800549a:	b510      	push	{r4, lr}
 800549c:	4604      	mov	r4, r0
 800549e:	e9c0 3300 	strd	r3, r3, [r0]
 80054a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054a6:	6083      	str	r3, [r0, #8]
 80054a8:	8181      	strh	r1, [r0, #12]
 80054aa:	6643      	str	r3, [r0, #100]	; 0x64
 80054ac:	81c2      	strh	r2, [r0, #14]
 80054ae:	6183      	str	r3, [r0, #24]
 80054b0:	4619      	mov	r1, r3
 80054b2:	2208      	movs	r2, #8
 80054b4:	305c      	adds	r0, #92	; 0x5c
 80054b6:	f000 f9f7 	bl	80058a8 <memset>
 80054ba:	4b0d      	ldr	r3, [pc, #52]	; (80054f0 <std+0x58>)
 80054bc:	6263      	str	r3, [r4, #36]	; 0x24
 80054be:	4b0d      	ldr	r3, [pc, #52]	; (80054f4 <std+0x5c>)
 80054c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80054c2:	4b0d      	ldr	r3, [pc, #52]	; (80054f8 <std+0x60>)
 80054c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054c6:	4b0d      	ldr	r3, [pc, #52]	; (80054fc <std+0x64>)
 80054c8:	6323      	str	r3, [r4, #48]	; 0x30
 80054ca:	4b0d      	ldr	r3, [pc, #52]	; (8005500 <std+0x68>)
 80054cc:	6224      	str	r4, [r4, #32]
 80054ce:	429c      	cmp	r4, r3
 80054d0:	d006      	beq.n	80054e0 <std+0x48>
 80054d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80054d6:	4294      	cmp	r4, r2
 80054d8:	d002      	beq.n	80054e0 <std+0x48>
 80054da:	33d0      	adds	r3, #208	; 0xd0
 80054dc:	429c      	cmp	r4, r3
 80054de:	d105      	bne.n	80054ec <std+0x54>
 80054e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054e8:	f000 bab0 	b.w	8005a4c <__retarget_lock_init_recursive>
 80054ec:	bd10      	pop	{r4, pc}
 80054ee:	bf00      	nop
 80054f0:	080056f9 	.word	0x080056f9
 80054f4:	0800571b 	.word	0x0800571b
 80054f8:	08005753 	.word	0x08005753
 80054fc:	08005777 	.word	0x08005777
 8005500:	20004344 	.word	0x20004344

08005504 <stdio_exit_handler>:
 8005504:	4a02      	ldr	r2, [pc, #8]	; (8005510 <stdio_exit_handler+0xc>)
 8005506:	4903      	ldr	r1, [pc, #12]	; (8005514 <stdio_exit_handler+0x10>)
 8005508:	4803      	ldr	r0, [pc, #12]	; (8005518 <stdio_exit_handler+0x14>)
 800550a:	f000 b869 	b.w	80055e0 <_fwalk_sglue>
 800550e:	bf00      	nop
 8005510:	20000010 	.word	0x20000010
 8005514:	080073f1 	.word	0x080073f1
 8005518:	2000001c 	.word	0x2000001c

0800551c <cleanup_stdio>:
 800551c:	6841      	ldr	r1, [r0, #4]
 800551e:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <cleanup_stdio+0x34>)
 8005520:	4299      	cmp	r1, r3
 8005522:	b510      	push	{r4, lr}
 8005524:	4604      	mov	r4, r0
 8005526:	d001      	beq.n	800552c <cleanup_stdio+0x10>
 8005528:	f001 ff62 	bl	80073f0 <_fflush_r>
 800552c:	68a1      	ldr	r1, [r4, #8]
 800552e:	4b09      	ldr	r3, [pc, #36]	; (8005554 <cleanup_stdio+0x38>)
 8005530:	4299      	cmp	r1, r3
 8005532:	d002      	beq.n	800553a <cleanup_stdio+0x1e>
 8005534:	4620      	mov	r0, r4
 8005536:	f001 ff5b 	bl	80073f0 <_fflush_r>
 800553a:	68e1      	ldr	r1, [r4, #12]
 800553c:	4b06      	ldr	r3, [pc, #24]	; (8005558 <cleanup_stdio+0x3c>)
 800553e:	4299      	cmp	r1, r3
 8005540:	d004      	beq.n	800554c <cleanup_stdio+0x30>
 8005542:	4620      	mov	r0, r4
 8005544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005548:	f001 bf52 	b.w	80073f0 <_fflush_r>
 800554c:	bd10      	pop	{r4, pc}
 800554e:	bf00      	nop
 8005550:	20004344 	.word	0x20004344
 8005554:	200043ac 	.word	0x200043ac
 8005558:	20004414 	.word	0x20004414

0800555c <global_stdio_init.part.0>:
 800555c:	b510      	push	{r4, lr}
 800555e:	4b0b      	ldr	r3, [pc, #44]	; (800558c <global_stdio_init.part.0+0x30>)
 8005560:	4c0b      	ldr	r4, [pc, #44]	; (8005590 <global_stdio_init.part.0+0x34>)
 8005562:	4a0c      	ldr	r2, [pc, #48]	; (8005594 <global_stdio_init.part.0+0x38>)
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	4620      	mov	r0, r4
 8005568:	2200      	movs	r2, #0
 800556a:	2104      	movs	r1, #4
 800556c:	f7ff ff94 	bl	8005498 <std>
 8005570:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005574:	2201      	movs	r2, #1
 8005576:	2109      	movs	r1, #9
 8005578:	f7ff ff8e 	bl	8005498 <std>
 800557c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005580:	2202      	movs	r2, #2
 8005582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005586:	2112      	movs	r1, #18
 8005588:	f7ff bf86 	b.w	8005498 <std>
 800558c:	2000447c 	.word	0x2000447c
 8005590:	20004344 	.word	0x20004344
 8005594:	08005505 	.word	0x08005505

08005598 <__sfp_lock_acquire>:
 8005598:	4801      	ldr	r0, [pc, #4]	; (80055a0 <__sfp_lock_acquire+0x8>)
 800559a:	f000 ba58 	b.w	8005a4e <__retarget_lock_acquire_recursive>
 800559e:	bf00      	nop
 80055a0:	20004485 	.word	0x20004485

080055a4 <__sfp_lock_release>:
 80055a4:	4801      	ldr	r0, [pc, #4]	; (80055ac <__sfp_lock_release+0x8>)
 80055a6:	f000 ba53 	b.w	8005a50 <__retarget_lock_release_recursive>
 80055aa:	bf00      	nop
 80055ac:	20004485 	.word	0x20004485

080055b0 <__sinit>:
 80055b0:	b510      	push	{r4, lr}
 80055b2:	4604      	mov	r4, r0
 80055b4:	f7ff fff0 	bl	8005598 <__sfp_lock_acquire>
 80055b8:	6a23      	ldr	r3, [r4, #32]
 80055ba:	b11b      	cbz	r3, 80055c4 <__sinit+0x14>
 80055bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055c0:	f7ff bff0 	b.w	80055a4 <__sfp_lock_release>
 80055c4:	4b04      	ldr	r3, [pc, #16]	; (80055d8 <__sinit+0x28>)
 80055c6:	6223      	str	r3, [r4, #32]
 80055c8:	4b04      	ldr	r3, [pc, #16]	; (80055dc <__sinit+0x2c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1f5      	bne.n	80055bc <__sinit+0xc>
 80055d0:	f7ff ffc4 	bl	800555c <global_stdio_init.part.0>
 80055d4:	e7f2      	b.n	80055bc <__sinit+0xc>
 80055d6:	bf00      	nop
 80055d8:	0800551d 	.word	0x0800551d
 80055dc:	2000447c 	.word	0x2000447c

080055e0 <_fwalk_sglue>:
 80055e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055e4:	4607      	mov	r7, r0
 80055e6:	4688      	mov	r8, r1
 80055e8:	4614      	mov	r4, r2
 80055ea:	2600      	movs	r6, #0
 80055ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055f0:	f1b9 0901 	subs.w	r9, r9, #1
 80055f4:	d505      	bpl.n	8005602 <_fwalk_sglue+0x22>
 80055f6:	6824      	ldr	r4, [r4, #0]
 80055f8:	2c00      	cmp	r4, #0
 80055fa:	d1f7      	bne.n	80055ec <_fwalk_sglue+0xc>
 80055fc:	4630      	mov	r0, r6
 80055fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005602:	89ab      	ldrh	r3, [r5, #12]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d907      	bls.n	8005618 <_fwalk_sglue+0x38>
 8005608:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800560c:	3301      	adds	r3, #1
 800560e:	d003      	beq.n	8005618 <_fwalk_sglue+0x38>
 8005610:	4629      	mov	r1, r5
 8005612:	4638      	mov	r0, r7
 8005614:	47c0      	blx	r8
 8005616:	4306      	orrs	r6, r0
 8005618:	3568      	adds	r5, #104	; 0x68
 800561a:	e7e9      	b.n	80055f0 <_fwalk_sglue+0x10>

0800561c <iprintf>:
 800561c:	b40f      	push	{r0, r1, r2, r3}
 800561e:	b507      	push	{r0, r1, r2, lr}
 8005620:	4906      	ldr	r1, [pc, #24]	; (800563c <iprintf+0x20>)
 8005622:	ab04      	add	r3, sp, #16
 8005624:	6808      	ldr	r0, [r1, #0]
 8005626:	f853 2b04 	ldr.w	r2, [r3], #4
 800562a:	6881      	ldr	r1, [r0, #8]
 800562c:	9301      	str	r3, [sp, #4]
 800562e:	f001 fd3f 	bl	80070b0 <_vfiprintf_r>
 8005632:	b003      	add	sp, #12
 8005634:	f85d eb04 	ldr.w	lr, [sp], #4
 8005638:	b004      	add	sp, #16
 800563a:	4770      	bx	lr
 800563c:	20000068 	.word	0x20000068

08005640 <_puts_r>:
 8005640:	6a03      	ldr	r3, [r0, #32]
 8005642:	b570      	push	{r4, r5, r6, lr}
 8005644:	6884      	ldr	r4, [r0, #8]
 8005646:	4605      	mov	r5, r0
 8005648:	460e      	mov	r6, r1
 800564a:	b90b      	cbnz	r3, 8005650 <_puts_r+0x10>
 800564c:	f7ff ffb0 	bl	80055b0 <__sinit>
 8005650:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005652:	07db      	lsls	r3, r3, #31
 8005654:	d405      	bmi.n	8005662 <_puts_r+0x22>
 8005656:	89a3      	ldrh	r3, [r4, #12]
 8005658:	0598      	lsls	r0, r3, #22
 800565a:	d402      	bmi.n	8005662 <_puts_r+0x22>
 800565c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800565e:	f000 f9f6 	bl	8005a4e <__retarget_lock_acquire_recursive>
 8005662:	89a3      	ldrh	r3, [r4, #12]
 8005664:	0719      	lsls	r1, r3, #28
 8005666:	d513      	bpl.n	8005690 <_puts_r+0x50>
 8005668:	6923      	ldr	r3, [r4, #16]
 800566a:	b18b      	cbz	r3, 8005690 <_puts_r+0x50>
 800566c:	3e01      	subs	r6, #1
 800566e:	68a3      	ldr	r3, [r4, #8]
 8005670:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005674:	3b01      	subs	r3, #1
 8005676:	60a3      	str	r3, [r4, #8]
 8005678:	b9e9      	cbnz	r1, 80056b6 <_puts_r+0x76>
 800567a:	2b00      	cmp	r3, #0
 800567c:	da2e      	bge.n	80056dc <_puts_r+0x9c>
 800567e:	4622      	mov	r2, r4
 8005680:	210a      	movs	r1, #10
 8005682:	4628      	mov	r0, r5
 8005684:	f000 f87b 	bl	800577e <__swbuf_r>
 8005688:	3001      	adds	r0, #1
 800568a:	d007      	beq.n	800569c <_puts_r+0x5c>
 800568c:	250a      	movs	r5, #10
 800568e:	e007      	b.n	80056a0 <_puts_r+0x60>
 8005690:	4621      	mov	r1, r4
 8005692:	4628      	mov	r0, r5
 8005694:	f000 f8b0 	bl	80057f8 <__swsetup_r>
 8005698:	2800      	cmp	r0, #0
 800569a:	d0e7      	beq.n	800566c <_puts_r+0x2c>
 800569c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80056a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056a2:	07da      	lsls	r2, r3, #31
 80056a4:	d405      	bmi.n	80056b2 <_puts_r+0x72>
 80056a6:	89a3      	ldrh	r3, [r4, #12]
 80056a8:	059b      	lsls	r3, r3, #22
 80056aa:	d402      	bmi.n	80056b2 <_puts_r+0x72>
 80056ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056ae:	f000 f9cf 	bl	8005a50 <__retarget_lock_release_recursive>
 80056b2:	4628      	mov	r0, r5
 80056b4:	bd70      	pop	{r4, r5, r6, pc}
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	da04      	bge.n	80056c4 <_puts_r+0x84>
 80056ba:	69a2      	ldr	r2, [r4, #24]
 80056bc:	429a      	cmp	r2, r3
 80056be:	dc06      	bgt.n	80056ce <_puts_r+0x8e>
 80056c0:	290a      	cmp	r1, #10
 80056c2:	d004      	beq.n	80056ce <_puts_r+0x8e>
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	6022      	str	r2, [r4, #0]
 80056ca:	7019      	strb	r1, [r3, #0]
 80056cc:	e7cf      	b.n	800566e <_puts_r+0x2e>
 80056ce:	4622      	mov	r2, r4
 80056d0:	4628      	mov	r0, r5
 80056d2:	f000 f854 	bl	800577e <__swbuf_r>
 80056d6:	3001      	adds	r0, #1
 80056d8:	d1c9      	bne.n	800566e <_puts_r+0x2e>
 80056da:	e7df      	b.n	800569c <_puts_r+0x5c>
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	250a      	movs	r5, #10
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	6022      	str	r2, [r4, #0]
 80056e4:	701d      	strb	r5, [r3, #0]
 80056e6:	e7db      	b.n	80056a0 <_puts_r+0x60>

080056e8 <puts>:
 80056e8:	4b02      	ldr	r3, [pc, #8]	; (80056f4 <puts+0xc>)
 80056ea:	4601      	mov	r1, r0
 80056ec:	6818      	ldr	r0, [r3, #0]
 80056ee:	f7ff bfa7 	b.w	8005640 <_puts_r>
 80056f2:	bf00      	nop
 80056f4:	20000068 	.word	0x20000068

080056f8 <__sread>:
 80056f8:	b510      	push	{r4, lr}
 80056fa:	460c      	mov	r4, r1
 80056fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005700:	f000 f956 	bl	80059b0 <_read_r>
 8005704:	2800      	cmp	r0, #0
 8005706:	bfab      	itete	ge
 8005708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800570a:	89a3      	ldrhlt	r3, [r4, #12]
 800570c:	181b      	addge	r3, r3, r0
 800570e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005712:	bfac      	ite	ge
 8005714:	6563      	strge	r3, [r4, #84]	; 0x54
 8005716:	81a3      	strhlt	r3, [r4, #12]
 8005718:	bd10      	pop	{r4, pc}

0800571a <__swrite>:
 800571a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800571e:	461f      	mov	r7, r3
 8005720:	898b      	ldrh	r3, [r1, #12]
 8005722:	05db      	lsls	r3, r3, #23
 8005724:	4605      	mov	r5, r0
 8005726:	460c      	mov	r4, r1
 8005728:	4616      	mov	r6, r2
 800572a:	d505      	bpl.n	8005738 <__swrite+0x1e>
 800572c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005730:	2302      	movs	r3, #2
 8005732:	2200      	movs	r2, #0
 8005734:	f000 f92a 	bl	800598c <_lseek_r>
 8005738:	89a3      	ldrh	r3, [r4, #12]
 800573a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800573e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005742:	81a3      	strh	r3, [r4, #12]
 8005744:	4632      	mov	r2, r6
 8005746:	463b      	mov	r3, r7
 8005748:	4628      	mov	r0, r5
 800574a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800574e:	f000 b941 	b.w	80059d4 <_write_r>

08005752 <__sseek>:
 8005752:	b510      	push	{r4, lr}
 8005754:	460c      	mov	r4, r1
 8005756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800575a:	f000 f917 	bl	800598c <_lseek_r>
 800575e:	1c43      	adds	r3, r0, #1
 8005760:	89a3      	ldrh	r3, [r4, #12]
 8005762:	bf15      	itete	ne
 8005764:	6560      	strne	r0, [r4, #84]	; 0x54
 8005766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800576a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800576e:	81a3      	strheq	r3, [r4, #12]
 8005770:	bf18      	it	ne
 8005772:	81a3      	strhne	r3, [r4, #12]
 8005774:	bd10      	pop	{r4, pc}

08005776 <__sclose>:
 8005776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800577a:	f000 b8a1 	b.w	80058c0 <_close_r>

0800577e <__swbuf_r>:
 800577e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005780:	460e      	mov	r6, r1
 8005782:	4614      	mov	r4, r2
 8005784:	4605      	mov	r5, r0
 8005786:	b118      	cbz	r0, 8005790 <__swbuf_r+0x12>
 8005788:	6a03      	ldr	r3, [r0, #32]
 800578a:	b90b      	cbnz	r3, 8005790 <__swbuf_r+0x12>
 800578c:	f7ff ff10 	bl	80055b0 <__sinit>
 8005790:	69a3      	ldr	r3, [r4, #24]
 8005792:	60a3      	str	r3, [r4, #8]
 8005794:	89a3      	ldrh	r3, [r4, #12]
 8005796:	071a      	lsls	r2, r3, #28
 8005798:	d525      	bpl.n	80057e6 <__swbuf_r+0x68>
 800579a:	6923      	ldr	r3, [r4, #16]
 800579c:	b31b      	cbz	r3, 80057e6 <__swbuf_r+0x68>
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	6922      	ldr	r2, [r4, #16]
 80057a2:	1a98      	subs	r0, r3, r2
 80057a4:	6963      	ldr	r3, [r4, #20]
 80057a6:	b2f6      	uxtb	r6, r6
 80057a8:	4283      	cmp	r3, r0
 80057aa:	4637      	mov	r7, r6
 80057ac:	dc04      	bgt.n	80057b8 <__swbuf_r+0x3a>
 80057ae:	4621      	mov	r1, r4
 80057b0:	4628      	mov	r0, r5
 80057b2:	f001 fe1d 	bl	80073f0 <_fflush_r>
 80057b6:	b9e0      	cbnz	r0, 80057f2 <__swbuf_r+0x74>
 80057b8:	68a3      	ldr	r3, [r4, #8]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	60a3      	str	r3, [r4, #8]
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	6022      	str	r2, [r4, #0]
 80057c4:	701e      	strb	r6, [r3, #0]
 80057c6:	6962      	ldr	r2, [r4, #20]
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d004      	beq.n	80057d8 <__swbuf_r+0x5a>
 80057ce:	89a3      	ldrh	r3, [r4, #12]
 80057d0:	07db      	lsls	r3, r3, #31
 80057d2:	d506      	bpl.n	80057e2 <__swbuf_r+0x64>
 80057d4:	2e0a      	cmp	r6, #10
 80057d6:	d104      	bne.n	80057e2 <__swbuf_r+0x64>
 80057d8:	4621      	mov	r1, r4
 80057da:	4628      	mov	r0, r5
 80057dc:	f001 fe08 	bl	80073f0 <_fflush_r>
 80057e0:	b938      	cbnz	r0, 80057f2 <__swbuf_r+0x74>
 80057e2:	4638      	mov	r0, r7
 80057e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057e6:	4621      	mov	r1, r4
 80057e8:	4628      	mov	r0, r5
 80057ea:	f000 f805 	bl	80057f8 <__swsetup_r>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	d0d5      	beq.n	800579e <__swbuf_r+0x20>
 80057f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80057f6:	e7f4      	b.n	80057e2 <__swbuf_r+0x64>

080057f8 <__swsetup_r>:
 80057f8:	b538      	push	{r3, r4, r5, lr}
 80057fa:	4b2a      	ldr	r3, [pc, #168]	; (80058a4 <__swsetup_r+0xac>)
 80057fc:	4605      	mov	r5, r0
 80057fe:	6818      	ldr	r0, [r3, #0]
 8005800:	460c      	mov	r4, r1
 8005802:	b118      	cbz	r0, 800580c <__swsetup_r+0x14>
 8005804:	6a03      	ldr	r3, [r0, #32]
 8005806:	b90b      	cbnz	r3, 800580c <__swsetup_r+0x14>
 8005808:	f7ff fed2 	bl	80055b0 <__sinit>
 800580c:	89a3      	ldrh	r3, [r4, #12]
 800580e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005812:	0718      	lsls	r0, r3, #28
 8005814:	d422      	bmi.n	800585c <__swsetup_r+0x64>
 8005816:	06d9      	lsls	r1, r3, #27
 8005818:	d407      	bmi.n	800582a <__swsetup_r+0x32>
 800581a:	2309      	movs	r3, #9
 800581c:	602b      	str	r3, [r5, #0]
 800581e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005822:	81a3      	strh	r3, [r4, #12]
 8005824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005828:	e034      	b.n	8005894 <__swsetup_r+0x9c>
 800582a:	0758      	lsls	r0, r3, #29
 800582c:	d512      	bpl.n	8005854 <__swsetup_r+0x5c>
 800582e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005830:	b141      	cbz	r1, 8005844 <__swsetup_r+0x4c>
 8005832:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005836:	4299      	cmp	r1, r3
 8005838:	d002      	beq.n	8005840 <__swsetup_r+0x48>
 800583a:	4628      	mov	r0, r5
 800583c:	f000 ff92 	bl	8006764 <_free_r>
 8005840:	2300      	movs	r3, #0
 8005842:	6363      	str	r3, [r4, #52]	; 0x34
 8005844:	89a3      	ldrh	r3, [r4, #12]
 8005846:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800584a:	81a3      	strh	r3, [r4, #12]
 800584c:	2300      	movs	r3, #0
 800584e:	6063      	str	r3, [r4, #4]
 8005850:	6923      	ldr	r3, [r4, #16]
 8005852:	6023      	str	r3, [r4, #0]
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	f043 0308 	orr.w	r3, r3, #8
 800585a:	81a3      	strh	r3, [r4, #12]
 800585c:	6923      	ldr	r3, [r4, #16]
 800585e:	b94b      	cbnz	r3, 8005874 <__swsetup_r+0x7c>
 8005860:	89a3      	ldrh	r3, [r4, #12]
 8005862:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800586a:	d003      	beq.n	8005874 <__swsetup_r+0x7c>
 800586c:	4621      	mov	r1, r4
 800586e:	4628      	mov	r0, r5
 8005870:	f001 fe0c 	bl	800748c <__smakebuf_r>
 8005874:	89a0      	ldrh	r0, [r4, #12]
 8005876:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800587a:	f010 0301 	ands.w	r3, r0, #1
 800587e:	d00a      	beq.n	8005896 <__swsetup_r+0x9e>
 8005880:	2300      	movs	r3, #0
 8005882:	60a3      	str	r3, [r4, #8]
 8005884:	6963      	ldr	r3, [r4, #20]
 8005886:	425b      	negs	r3, r3
 8005888:	61a3      	str	r3, [r4, #24]
 800588a:	6923      	ldr	r3, [r4, #16]
 800588c:	b943      	cbnz	r3, 80058a0 <__swsetup_r+0xa8>
 800588e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005892:	d1c4      	bne.n	800581e <__swsetup_r+0x26>
 8005894:	bd38      	pop	{r3, r4, r5, pc}
 8005896:	0781      	lsls	r1, r0, #30
 8005898:	bf58      	it	pl
 800589a:	6963      	ldrpl	r3, [r4, #20]
 800589c:	60a3      	str	r3, [r4, #8]
 800589e:	e7f4      	b.n	800588a <__swsetup_r+0x92>
 80058a0:	2000      	movs	r0, #0
 80058a2:	e7f7      	b.n	8005894 <__swsetup_r+0x9c>
 80058a4:	20000068 	.word	0x20000068

080058a8 <memset>:
 80058a8:	4402      	add	r2, r0
 80058aa:	4603      	mov	r3, r0
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d100      	bne.n	80058b2 <memset+0xa>
 80058b0:	4770      	bx	lr
 80058b2:	f803 1b01 	strb.w	r1, [r3], #1
 80058b6:	e7f9      	b.n	80058ac <memset+0x4>

080058b8 <_localeconv_r>:
 80058b8:	4800      	ldr	r0, [pc, #0]	; (80058bc <_localeconv_r+0x4>)
 80058ba:	4770      	bx	lr
 80058bc:	2000015c 	.word	0x2000015c

080058c0 <_close_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4d06      	ldr	r5, [pc, #24]	; (80058dc <_close_r+0x1c>)
 80058c4:	2300      	movs	r3, #0
 80058c6:	4604      	mov	r4, r0
 80058c8:	4608      	mov	r0, r1
 80058ca:	602b      	str	r3, [r5, #0]
 80058cc:	f7fb fdd7 	bl	800147e <_close>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d102      	bne.n	80058da <_close_r+0x1a>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	b103      	cbz	r3, 80058da <_close_r+0x1a>
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	20004480 	.word	0x20004480

080058e0 <_reclaim_reent>:
 80058e0:	4b29      	ldr	r3, [pc, #164]	; (8005988 <_reclaim_reent+0xa8>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4283      	cmp	r3, r0
 80058e6:	b570      	push	{r4, r5, r6, lr}
 80058e8:	4604      	mov	r4, r0
 80058ea:	d04b      	beq.n	8005984 <_reclaim_reent+0xa4>
 80058ec:	69c3      	ldr	r3, [r0, #28]
 80058ee:	b143      	cbz	r3, 8005902 <_reclaim_reent+0x22>
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d144      	bne.n	8005980 <_reclaim_reent+0xa0>
 80058f6:	69e3      	ldr	r3, [r4, #28]
 80058f8:	6819      	ldr	r1, [r3, #0]
 80058fa:	b111      	cbz	r1, 8005902 <_reclaim_reent+0x22>
 80058fc:	4620      	mov	r0, r4
 80058fe:	f000 ff31 	bl	8006764 <_free_r>
 8005902:	6961      	ldr	r1, [r4, #20]
 8005904:	b111      	cbz	r1, 800590c <_reclaim_reent+0x2c>
 8005906:	4620      	mov	r0, r4
 8005908:	f000 ff2c 	bl	8006764 <_free_r>
 800590c:	69e1      	ldr	r1, [r4, #28]
 800590e:	b111      	cbz	r1, 8005916 <_reclaim_reent+0x36>
 8005910:	4620      	mov	r0, r4
 8005912:	f000 ff27 	bl	8006764 <_free_r>
 8005916:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005918:	b111      	cbz	r1, 8005920 <_reclaim_reent+0x40>
 800591a:	4620      	mov	r0, r4
 800591c:	f000 ff22 	bl	8006764 <_free_r>
 8005920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005922:	b111      	cbz	r1, 800592a <_reclaim_reent+0x4a>
 8005924:	4620      	mov	r0, r4
 8005926:	f000 ff1d 	bl	8006764 <_free_r>
 800592a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800592c:	b111      	cbz	r1, 8005934 <_reclaim_reent+0x54>
 800592e:	4620      	mov	r0, r4
 8005930:	f000 ff18 	bl	8006764 <_free_r>
 8005934:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005936:	b111      	cbz	r1, 800593e <_reclaim_reent+0x5e>
 8005938:	4620      	mov	r0, r4
 800593a:	f000 ff13 	bl	8006764 <_free_r>
 800593e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005940:	b111      	cbz	r1, 8005948 <_reclaim_reent+0x68>
 8005942:	4620      	mov	r0, r4
 8005944:	f000 ff0e 	bl	8006764 <_free_r>
 8005948:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800594a:	b111      	cbz	r1, 8005952 <_reclaim_reent+0x72>
 800594c:	4620      	mov	r0, r4
 800594e:	f000 ff09 	bl	8006764 <_free_r>
 8005952:	6a23      	ldr	r3, [r4, #32]
 8005954:	b1b3      	cbz	r3, 8005984 <_reclaim_reent+0xa4>
 8005956:	4620      	mov	r0, r4
 8005958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800595c:	4718      	bx	r3
 800595e:	5949      	ldr	r1, [r1, r5]
 8005960:	b941      	cbnz	r1, 8005974 <_reclaim_reent+0x94>
 8005962:	3504      	adds	r5, #4
 8005964:	69e3      	ldr	r3, [r4, #28]
 8005966:	2d80      	cmp	r5, #128	; 0x80
 8005968:	68d9      	ldr	r1, [r3, #12]
 800596a:	d1f8      	bne.n	800595e <_reclaim_reent+0x7e>
 800596c:	4620      	mov	r0, r4
 800596e:	f000 fef9 	bl	8006764 <_free_r>
 8005972:	e7c0      	b.n	80058f6 <_reclaim_reent+0x16>
 8005974:	680e      	ldr	r6, [r1, #0]
 8005976:	4620      	mov	r0, r4
 8005978:	f000 fef4 	bl	8006764 <_free_r>
 800597c:	4631      	mov	r1, r6
 800597e:	e7ef      	b.n	8005960 <_reclaim_reent+0x80>
 8005980:	2500      	movs	r5, #0
 8005982:	e7ef      	b.n	8005964 <_reclaim_reent+0x84>
 8005984:	bd70      	pop	{r4, r5, r6, pc}
 8005986:	bf00      	nop
 8005988:	20000068 	.word	0x20000068

0800598c <_lseek_r>:
 800598c:	b538      	push	{r3, r4, r5, lr}
 800598e:	4d07      	ldr	r5, [pc, #28]	; (80059ac <_lseek_r+0x20>)
 8005990:	4604      	mov	r4, r0
 8005992:	4608      	mov	r0, r1
 8005994:	4611      	mov	r1, r2
 8005996:	2200      	movs	r2, #0
 8005998:	602a      	str	r2, [r5, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	f7fb fd96 	bl	80014cc <_lseek>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	d102      	bne.n	80059aa <_lseek_r+0x1e>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	b103      	cbz	r3, 80059aa <_lseek_r+0x1e>
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	bd38      	pop	{r3, r4, r5, pc}
 80059ac:	20004480 	.word	0x20004480

080059b0 <_read_r>:
 80059b0:	b538      	push	{r3, r4, r5, lr}
 80059b2:	4d07      	ldr	r5, [pc, #28]	; (80059d0 <_read_r+0x20>)
 80059b4:	4604      	mov	r4, r0
 80059b6:	4608      	mov	r0, r1
 80059b8:	4611      	mov	r1, r2
 80059ba:	2200      	movs	r2, #0
 80059bc:	602a      	str	r2, [r5, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	f7fb fd40 	bl	8001444 <_read>
 80059c4:	1c43      	adds	r3, r0, #1
 80059c6:	d102      	bne.n	80059ce <_read_r+0x1e>
 80059c8:	682b      	ldr	r3, [r5, #0]
 80059ca:	b103      	cbz	r3, 80059ce <_read_r+0x1e>
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	bd38      	pop	{r3, r4, r5, pc}
 80059d0:	20004480 	.word	0x20004480

080059d4 <_write_r>:
 80059d4:	b538      	push	{r3, r4, r5, lr}
 80059d6:	4d07      	ldr	r5, [pc, #28]	; (80059f4 <_write_r+0x20>)
 80059d8:	4604      	mov	r4, r0
 80059da:	4608      	mov	r0, r1
 80059dc:	4611      	mov	r1, r2
 80059de:	2200      	movs	r2, #0
 80059e0:	602a      	str	r2, [r5, #0]
 80059e2:	461a      	mov	r2, r3
 80059e4:	f7fb fa5e 	bl	8000ea4 <_write>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d102      	bne.n	80059f2 <_write_r+0x1e>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	b103      	cbz	r3, 80059f2 <_write_r+0x1e>
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	20004480 	.word	0x20004480

080059f8 <__errno>:
 80059f8:	4b01      	ldr	r3, [pc, #4]	; (8005a00 <__errno+0x8>)
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	20000068 	.word	0x20000068

08005a04 <__libc_init_array>:
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	4d0d      	ldr	r5, [pc, #52]	; (8005a3c <__libc_init_array+0x38>)
 8005a08:	4c0d      	ldr	r4, [pc, #52]	; (8005a40 <__libc_init_array+0x3c>)
 8005a0a:	1b64      	subs	r4, r4, r5
 8005a0c:	10a4      	asrs	r4, r4, #2
 8005a0e:	2600      	movs	r6, #0
 8005a10:	42a6      	cmp	r6, r4
 8005a12:	d109      	bne.n	8005a28 <__libc_init_array+0x24>
 8005a14:	4d0b      	ldr	r5, [pc, #44]	; (8005a44 <__libc_init_array+0x40>)
 8005a16:	4c0c      	ldr	r4, [pc, #48]	; (8005a48 <__libc_init_array+0x44>)
 8005a18:	f001 fe58 	bl	80076cc <_init>
 8005a1c:	1b64      	subs	r4, r4, r5
 8005a1e:	10a4      	asrs	r4, r4, #2
 8005a20:	2600      	movs	r6, #0
 8005a22:	42a6      	cmp	r6, r4
 8005a24:	d105      	bne.n	8005a32 <__libc_init_array+0x2e>
 8005a26:	bd70      	pop	{r4, r5, r6, pc}
 8005a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a2c:	4798      	blx	r3
 8005a2e:	3601      	adds	r6, #1
 8005a30:	e7ee      	b.n	8005a10 <__libc_init_array+0xc>
 8005a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a36:	4798      	blx	r3
 8005a38:	3601      	adds	r6, #1
 8005a3a:	e7f2      	b.n	8005a22 <__libc_init_array+0x1e>
 8005a3c:	080081a4 	.word	0x080081a4
 8005a40:	080081a4 	.word	0x080081a4
 8005a44:	080081a4 	.word	0x080081a4
 8005a48:	080081a8 	.word	0x080081a8

08005a4c <__retarget_lock_init_recursive>:
 8005a4c:	4770      	bx	lr

08005a4e <__retarget_lock_acquire_recursive>:
 8005a4e:	4770      	bx	lr

08005a50 <__retarget_lock_release_recursive>:
 8005a50:	4770      	bx	lr

08005a52 <memcpy>:
 8005a52:	440a      	add	r2, r1
 8005a54:	4291      	cmp	r1, r2
 8005a56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a5a:	d100      	bne.n	8005a5e <memcpy+0xc>
 8005a5c:	4770      	bx	lr
 8005a5e:	b510      	push	{r4, lr}
 8005a60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a68:	4291      	cmp	r1, r2
 8005a6a:	d1f9      	bne.n	8005a60 <memcpy+0xe>
 8005a6c:	bd10      	pop	{r4, pc}

08005a6e <quorem>:
 8005a6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a72:	6903      	ldr	r3, [r0, #16]
 8005a74:	690c      	ldr	r4, [r1, #16]
 8005a76:	42a3      	cmp	r3, r4
 8005a78:	4607      	mov	r7, r0
 8005a7a:	db7e      	blt.n	8005b7a <quorem+0x10c>
 8005a7c:	3c01      	subs	r4, #1
 8005a7e:	f101 0814 	add.w	r8, r1, #20
 8005a82:	f100 0514 	add.w	r5, r0, #20
 8005a86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a8a:	9301      	str	r3, [sp, #4]
 8005a8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a94:	3301      	adds	r3, #1
 8005a96:	429a      	cmp	r2, r3
 8005a98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005a9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005aa0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005aa4:	d331      	bcc.n	8005b0a <quorem+0x9c>
 8005aa6:	f04f 0e00 	mov.w	lr, #0
 8005aaa:	4640      	mov	r0, r8
 8005aac:	46ac      	mov	ip, r5
 8005aae:	46f2      	mov	sl, lr
 8005ab0:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ab4:	b293      	uxth	r3, r2
 8005ab6:	fb06 e303 	mla	r3, r6, r3, lr
 8005aba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005abe:	0c1a      	lsrs	r2, r3, #16
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	ebaa 0303 	sub.w	r3, sl, r3
 8005ac6:	f8dc a000 	ldr.w	sl, [ip]
 8005aca:	fa13 f38a 	uxtah	r3, r3, sl
 8005ace:	fb06 220e 	mla	r2, r6, lr, r2
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	9b00      	ldr	r3, [sp, #0]
 8005ad6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ada:	b292      	uxth	r2, r2
 8005adc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ae0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ae4:	f8bd 3000 	ldrh.w	r3, [sp]
 8005ae8:	4581      	cmp	r9, r0
 8005aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005aee:	f84c 3b04 	str.w	r3, [ip], #4
 8005af2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005af6:	d2db      	bcs.n	8005ab0 <quorem+0x42>
 8005af8:	f855 300b 	ldr.w	r3, [r5, fp]
 8005afc:	b92b      	cbnz	r3, 8005b0a <quorem+0x9c>
 8005afe:	9b01      	ldr	r3, [sp, #4]
 8005b00:	3b04      	subs	r3, #4
 8005b02:	429d      	cmp	r5, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	d32c      	bcc.n	8005b62 <quorem+0xf4>
 8005b08:	613c      	str	r4, [r7, #16]
 8005b0a:	4638      	mov	r0, r7
 8005b0c:	f001 f9a6 	bl	8006e5c <__mcmp>
 8005b10:	2800      	cmp	r0, #0
 8005b12:	db22      	blt.n	8005b5a <quorem+0xec>
 8005b14:	3601      	adds	r6, #1
 8005b16:	4629      	mov	r1, r5
 8005b18:	2000      	movs	r0, #0
 8005b1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b1e:	f8d1 c000 	ldr.w	ip, [r1]
 8005b22:	b293      	uxth	r3, r2
 8005b24:	1ac3      	subs	r3, r0, r3
 8005b26:	0c12      	lsrs	r2, r2, #16
 8005b28:	fa13 f38c 	uxtah	r3, r3, ip
 8005b2c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005b30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b3a:	45c1      	cmp	r9, r8
 8005b3c:	f841 3b04 	str.w	r3, [r1], #4
 8005b40:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005b44:	d2e9      	bcs.n	8005b1a <quorem+0xac>
 8005b46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b4e:	b922      	cbnz	r2, 8005b5a <quorem+0xec>
 8005b50:	3b04      	subs	r3, #4
 8005b52:	429d      	cmp	r5, r3
 8005b54:	461a      	mov	r2, r3
 8005b56:	d30a      	bcc.n	8005b6e <quorem+0x100>
 8005b58:	613c      	str	r4, [r7, #16]
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	b003      	add	sp, #12
 8005b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b62:	6812      	ldr	r2, [r2, #0]
 8005b64:	3b04      	subs	r3, #4
 8005b66:	2a00      	cmp	r2, #0
 8005b68:	d1ce      	bne.n	8005b08 <quorem+0x9a>
 8005b6a:	3c01      	subs	r4, #1
 8005b6c:	e7c9      	b.n	8005b02 <quorem+0x94>
 8005b6e:	6812      	ldr	r2, [r2, #0]
 8005b70:	3b04      	subs	r3, #4
 8005b72:	2a00      	cmp	r2, #0
 8005b74:	d1f0      	bne.n	8005b58 <quorem+0xea>
 8005b76:	3c01      	subs	r4, #1
 8005b78:	e7eb      	b.n	8005b52 <quorem+0xe4>
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	e7ee      	b.n	8005b5c <quorem+0xee>
	...

08005b80 <_dtoa_r>:
 8005b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b84:	ed2d 8b04 	vpush	{d8-d9}
 8005b88:	69c5      	ldr	r5, [r0, #28]
 8005b8a:	b093      	sub	sp, #76	; 0x4c
 8005b8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005b90:	ec57 6b10 	vmov	r6, r7, d0
 8005b94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005b98:	9107      	str	r1, [sp, #28]
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	920a      	str	r2, [sp, #40]	; 0x28
 8005b9e:	930d      	str	r3, [sp, #52]	; 0x34
 8005ba0:	b975      	cbnz	r5, 8005bc0 <_dtoa_r+0x40>
 8005ba2:	2010      	movs	r0, #16
 8005ba4:	f000 fe2a 	bl	80067fc <malloc>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	61e0      	str	r0, [r4, #28]
 8005bac:	b920      	cbnz	r0, 8005bb8 <_dtoa_r+0x38>
 8005bae:	4bae      	ldr	r3, [pc, #696]	; (8005e68 <_dtoa_r+0x2e8>)
 8005bb0:	21ef      	movs	r1, #239	; 0xef
 8005bb2:	48ae      	ldr	r0, [pc, #696]	; (8005e6c <_dtoa_r+0x2ec>)
 8005bb4:	f001 fcd8 	bl	8007568 <__assert_func>
 8005bb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005bbc:	6005      	str	r5, [r0, #0]
 8005bbe:	60c5      	str	r5, [r0, #12]
 8005bc0:	69e3      	ldr	r3, [r4, #28]
 8005bc2:	6819      	ldr	r1, [r3, #0]
 8005bc4:	b151      	cbz	r1, 8005bdc <_dtoa_r+0x5c>
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	604a      	str	r2, [r1, #4]
 8005bca:	2301      	movs	r3, #1
 8005bcc:	4093      	lsls	r3, r2
 8005bce:	608b      	str	r3, [r1, #8]
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f000 ff07 	bl	80069e4 <_Bfree>
 8005bd6:	69e3      	ldr	r3, [r4, #28]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	1e3b      	subs	r3, r7, #0
 8005bde:	bfbb      	ittet	lt
 8005be0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005be4:	9303      	strlt	r3, [sp, #12]
 8005be6:	2300      	movge	r3, #0
 8005be8:	2201      	movlt	r2, #1
 8005bea:	bfac      	ite	ge
 8005bec:	f8c8 3000 	strge.w	r3, [r8]
 8005bf0:	f8c8 2000 	strlt.w	r2, [r8]
 8005bf4:	4b9e      	ldr	r3, [pc, #632]	; (8005e70 <_dtoa_r+0x2f0>)
 8005bf6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005bfa:	ea33 0308 	bics.w	r3, r3, r8
 8005bfe:	d11b      	bne.n	8005c38 <_dtoa_r+0xb8>
 8005c00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c02:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005c0c:	4333      	orrs	r3, r6
 8005c0e:	f000 8593 	beq.w	8006738 <_dtoa_r+0xbb8>
 8005c12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c14:	b963      	cbnz	r3, 8005c30 <_dtoa_r+0xb0>
 8005c16:	4b97      	ldr	r3, [pc, #604]	; (8005e74 <_dtoa_r+0x2f4>)
 8005c18:	e027      	b.n	8005c6a <_dtoa_r+0xea>
 8005c1a:	4b97      	ldr	r3, [pc, #604]	; (8005e78 <_dtoa_r+0x2f8>)
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	3308      	adds	r3, #8
 8005c20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	9800      	ldr	r0, [sp, #0]
 8005c26:	b013      	add	sp, #76	; 0x4c
 8005c28:	ecbd 8b04 	vpop	{d8-d9}
 8005c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c30:	4b90      	ldr	r3, [pc, #576]	; (8005e74 <_dtoa_r+0x2f4>)
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	3303      	adds	r3, #3
 8005c36:	e7f3      	b.n	8005c20 <_dtoa_r+0xa0>
 8005c38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	ec51 0b17 	vmov	r0, r1, d7
 8005c42:	eeb0 8a47 	vmov.f32	s16, s14
 8005c46:	eef0 8a67 	vmov.f32	s17, s15
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f7fa ff3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c50:	4681      	mov	r9, r0
 8005c52:	b160      	cbz	r0, 8005c6e <_dtoa_r+0xee>
 8005c54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c56:	2301      	movs	r3, #1
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 8568 	beq.w	8006732 <_dtoa_r+0xbb2>
 8005c62:	4b86      	ldr	r3, [pc, #536]	; (8005e7c <_dtoa_r+0x2fc>)
 8005c64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	e7da      	b.n	8005c24 <_dtoa_r+0xa4>
 8005c6e:	aa10      	add	r2, sp, #64	; 0x40
 8005c70:	a911      	add	r1, sp, #68	; 0x44
 8005c72:	4620      	mov	r0, r4
 8005c74:	eeb0 0a48 	vmov.f32	s0, s16
 8005c78:	eef0 0a68 	vmov.f32	s1, s17
 8005c7c:	f001 f994 	bl	8006fa8 <__d2b>
 8005c80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005c84:	4682      	mov	sl, r0
 8005c86:	2d00      	cmp	r5, #0
 8005c88:	d07f      	beq.n	8005d8a <_dtoa_r+0x20a>
 8005c8a:	ee18 3a90 	vmov	r3, s17
 8005c8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c92:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005c96:	ec51 0b18 	vmov	r0, r1, d8
 8005c9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005c9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005ca2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	2200      	movs	r2, #0
 8005caa:	4b75      	ldr	r3, [pc, #468]	; (8005e80 <_dtoa_r+0x300>)
 8005cac:	f7fa faec 	bl	8000288 <__aeabi_dsub>
 8005cb0:	a367      	add	r3, pc, #412	; (adr r3, 8005e50 <_dtoa_r+0x2d0>)
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	f7fa fc9f 	bl	80005f8 <__aeabi_dmul>
 8005cba:	a367      	add	r3, pc, #412	; (adr r3, 8005e58 <_dtoa_r+0x2d8>)
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	f7fa fae4 	bl	800028c <__adddf3>
 8005cc4:	4606      	mov	r6, r0
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	460f      	mov	r7, r1
 8005cca:	f7fa fc2b 	bl	8000524 <__aeabi_i2d>
 8005cce:	a364      	add	r3, pc, #400	; (adr r3, 8005e60 <_dtoa_r+0x2e0>)
 8005cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd4:	f7fa fc90 	bl	80005f8 <__aeabi_dmul>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4630      	mov	r0, r6
 8005cde:	4639      	mov	r1, r7
 8005ce0:	f7fa fad4 	bl	800028c <__adddf3>
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	460f      	mov	r7, r1
 8005ce8:	f7fa ff36 	bl	8000b58 <__aeabi_d2iz>
 8005cec:	2200      	movs	r2, #0
 8005cee:	4683      	mov	fp, r0
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	4639      	mov	r1, r7
 8005cf6:	f7fa fef1 	bl	8000adc <__aeabi_dcmplt>
 8005cfa:	b148      	cbz	r0, 8005d10 <_dtoa_r+0x190>
 8005cfc:	4658      	mov	r0, fp
 8005cfe:	f7fa fc11 	bl	8000524 <__aeabi_i2d>
 8005d02:	4632      	mov	r2, r6
 8005d04:	463b      	mov	r3, r7
 8005d06:	f7fa fedf 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d0a:	b908      	cbnz	r0, 8005d10 <_dtoa_r+0x190>
 8005d0c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005d10:	f1bb 0f16 	cmp.w	fp, #22
 8005d14:	d857      	bhi.n	8005dc6 <_dtoa_r+0x246>
 8005d16:	4b5b      	ldr	r3, [pc, #364]	; (8005e84 <_dtoa_r+0x304>)
 8005d18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d20:	ec51 0b18 	vmov	r0, r1, d8
 8005d24:	f7fa feda 	bl	8000adc <__aeabi_dcmplt>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d04e      	beq.n	8005dca <_dtoa_r+0x24a>
 8005d2c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005d30:	2300      	movs	r3, #0
 8005d32:	930c      	str	r3, [sp, #48]	; 0x30
 8005d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d36:	1b5b      	subs	r3, r3, r5
 8005d38:	1e5a      	subs	r2, r3, #1
 8005d3a:	bf45      	ittet	mi
 8005d3c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005d40:	9305      	strmi	r3, [sp, #20]
 8005d42:	2300      	movpl	r3, #0
 8005d44:	2300      	movmi	r3, #0
 8005d46:	9206      	str	r2, [sp, #24]
 8005d48:	bf54      	ite	pl
 8005d4a:	9305      	strpl	r3, [sp, #20]
 8005d4c:	9306      	strmi	r3, [sp, #24]
 8005d4e:	f1bb 0f00 	cmp.w	fp, #0
 8005d52:	db3c      	blt.n	8005dce <_dtoa_r+0x24e>
 8005d54:	9b06      	ldr	r3, [sp, #24]
 8005d56:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005d5a:	445b      	add	r3, fp
 8005d5c:	9306      	str	r3, [sp, #24]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	9308      	str	r3, [sp, #32]
 8005d62:	9b07      	ldr	r3, [sp, #28]
 8005d64:	2b09      	cmp	r3, #9
 8005d66:	d868      	bhi.n	8005e3a <_dtoa_r+0x2ba>
 8005d68:	2b05      	cmp	r3, #5
 8005d6a:	bfc4      	itt	gt
 8005d6c:	3b04      	subgt	r3, #4
 8005d6e:	9307      	strgt	r3, [sp, #28]
 8005d70:	9b07      	ldr	r3, [sp, #28]
 8005d72:	f1a3 0302 	sub.w	r3, r3, #2
 8005d76:	bfcc      	ite	gt
 8005d78:	2500      	movgt	r5, #0
 8005d7a:	2501      	movle	r5, #1
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	f200 8085 	bhi.w	8005e8c <_dtoa_r+0x30c>
 8005d82:	e8df f003 	tbb	[pc, r3]
 8005d86:	3b2e      	.short	0x3b2e
 8005d88:	5839      	.short	0x5839
 8005d8a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005d8e:	441d      	add	r5, r3
 8005d90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	bfc1      	itttt	gt
 8005d98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005d9c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005da0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005da4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005da8:	bfd6      	itet	le
 8005daa:	f1c3 0320 	rsble	r3, r3, #32
 8005dae:	ea48 0003 	orrgt.w	r0, r8, r3
 8005db2:	fa06 f003 	lslle.w	r0, r6, r3
 8005db6:	f7fa fba5 	bl	8000504 <__aeabi_ui2d>
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005dc0:	3d01      	subs	r5, #1
 8005dc2:	920e      	str	r2, [sp, #56]	; 0x38
 8005dc4:	e76f      	b.n	8005ca6 <_dtoa_r+0x126>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e7b3      	b.n	8005d32 <_dtoa_r+0x1b2>
 8005dca:	900c      	str	r0, [sp, #48]	; 0x30
 8005dcc:	e7b2      	b.n	8005d34 <_dtoa_r+0x1b4>
 8005dce:	9b05      	ldr	r3, [sp, #20]
 8005dd0:	eba3 030b 	sub.w	r3, r3, fp
 8005dd4:	9305      	str	r3, [sp, #20]
 8005dd6:	f1cb 0300 	rsb	r3, fp, #0
 8005dda:	9308      	str	r3, [sp, #32]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	930b      	str	r3, [sp, #44]	; 0x2c
 8005de0:	e7bf      	b.n	8005d62 <_dtoa_r+0x1e2>
 8005de2:	2300      	movs	r3, #0
 8005de4:	9309      	str	r3, [sp, #36]	; 0x24
 8005de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	dc52      	bgt.n	8005e92 <_dtoa_r+0x312>
 8005dec:	2301      	movs	r3, #1
 8005dee:	9301      	str	r3, [sp, #4]
 8005df0:	9304      	str	r3, [sp, #16]
 8005df2:	461a      	mov	r2, r3
 8005df4:	920a      	str	r2, [sp, #40]	; 0x28
 8005df6:	e00b      	b.n	8005e10 <_dtoa_r+0x290>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e7f3      	b.n	8005de4 <_dtoa_r+0x264>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8005e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e02:	445b      	add	r3, fp
 8005e04:	9301      	str	r3, [sp, #4]
 8005e06:	3301      	adds	r3, #1
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	9304      	str	r3, [sp, #16]
 8005e0c:	bfb8      	it	lt
 8005e0e:	2301      	movlt	r3, #1
 8005e10:	69e0      	ldr	r0, [r4, #28]
 8005e12:	2100      	movs	r1, #0
 8005e14:	2204      	movs	r2, #4
 8005e16:	f102 0614 	add.w	r6, r2, #20
 8005e1a:	429e      	cmp	r6, r3
 8005e1c:	d93d      	bls.n	8005e9a <_dtoa_r+0x31a>
 8005e1e:	6041      	str	r1, [r0, #4]
 8005e20:	4620      	mov	r0, r4
 8005e22:	f000 fd9f 	bl	8006964 <_Balloc>
 8005e26:	9000      	str	r0, [sp, #0]
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	d139      	bne.n	8005ea0 <_dtoa_r+0x320>
 8005e2c:	4b16      	ldr	r3, [pc, #88]	; (8005e88 <_dtoa_r+0x308>)
 8005e2e:	4602      	mov	r2, r0
 8005e30:	f240 11af 	movw	r1, #431	; 0x1af
 8005e34:	e6bd      	b.n	8005bb2 <_dtoa_r+0x32>
 8005e36:	2301      	movs	r3, #1
 8005e38:	e7e1      	b.n	8005dfe <_dtoa_r+0x27e>
 8005e3a:	2501      	movs	r5, #1
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	9307      	str	r3, [sp, #28]
 8005e40:	9509      	str	r5, [sp, #36]	; 0x24
 8005e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	9304      	str	r3, [sp, #16]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2312      	movs	r3, #18
 8005e4e:	e7d1      	b.n	8005df4 <_dtoa_r+0x274>
 8005e50:	636f4361 	.word	0x636f4361
 8005e54:	3fd287a7 	.word	0x3fd287a7
 8005e58:	8b60c8b3 	.word	0x8b60c8b3
 8005e5c:	3fc68a28 	.word	0x3fc68a28
 8005e60:	509f79fb 	.word	0x509f79fb
 8005e64:	3fd34413 	.word	0x3fd34413
 8005e68:	08007e6d 	.word	0x08007e6d
 8005e6c:	08007e84 	.word	0x08007e84
 8005e70:	7ff00000 	.word	0x7ff00000
 8005e74:	08007e69 	.word	0x08007e69
 8005e78:	08007e60 	.word	0x08007e60
 8005e7c:	08007e3d 	.word	0x08007e3d
 8005e80:	3ff80000 	.word	0x3ff80000
 8005e84:	08007f70 	.word	0x08007f70
 8005e88:	08007edc 	.word	0x08007edc
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e90:	e7d7      	b.n	8005e42 <_dtoa_r+0x2c2>
 8005e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e94:	9301      	str	r3, [sp, #4]
 8005e96:	9304      	str	r3, [sp, #16]
 8005e98:	e7ba      	b.n	8005e10 <_dtoa_r+0x290>
 8005e9a:	3101      	adds	r1, #1
 8005e9c:	0052      	lsls	r2, r2, #1
 8005e9e:	e7ba      	b.n	8005e16 <_dtoa_r+0x296>
 8005ea0:	69e3      	ldr	r3, [r4, #28]
 8005ea2:	9a00      	ldr	r2, [sp, #0]
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	9b04      	ldr	r3, [sp, #16]
 8005ea8:	2b0e      	cmp	r3, #14
 8005eaa:	f200 80a8 	bhi.w	8005ffe <_dtoa_r+0x47e>
 8005eae:	2d00      	cmp	r5, #0
 8005eb0:	f000 80a5 	beq.w	8005ffe <_dtoa_r+0x47e>
 8005eb4:	f1bb 0f00 	cmp.w	fp, #0
 8005eb8:	dd38      	ble.n	8005f2c <_dtoa_r+0x3ac>
 8005eba:	4bc0      	ldr	r3, [pc, #768]	; (80061bc <_dtoa_r+0x63c>)
 8005ebc:	f00b 020f 	and.w	r2, fp, #15
 8005ec0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ec4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005ec8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005ecc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005ed0:	d019      	beq.n	8005f06 <_dtoa_r+0x386>
 8005ed2:	4bbb      	ldr	r3, [pc, #748]	; (80061c0 <_dtoa_r+0x640>)
 8005ed4:	ec51 0b18 	vmov	r0, r1, d8
 8005ed8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005edc:	f7fa fcb6 	bl	800084c <__aeabi_ddiv>
 8005ee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ee4:	f008 080f 	and.w	r8, r8, #15
 8005ee8:	2503      	movs	r5, #3
 8005eea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80061c0 <_dtoa_r+0x640>
 8005eee:	f1b8 0f00 	cmp.w	r8, #0
 8005ef2:	d10a      	bne.n	8005f0a <_dtoa_r+0x38a>
 8005ef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ef8:	4632      	mov	r2, r6
 8005efa:	463b      	mov	r3, r7
 8005efc:	f7fa fca6 	bl	800084c <__aeabi_ddiv>
 8005f00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f04:	e02b      	b.n	8005f5e <_dtoa_r+0x3de>
 8005f06:	2502      	movs	r5, #2
 8005f08:	e7ef      	b.n	8005eea <_dtoa_r+0x36a>
 8005f0a:	f018 0f01 	tst.w	r8, #1
 8005f0e:	d008      	beq.n	8005f22 <_dtoa_r+0x3a2>
 8005f10:	4630      	mov	r0, r6
 8005f12:	4639      	mov	r1, r7
 8005f14:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005f18:	f7fa fb6e 	bl	80005f8 <__aeabi_dmul>
 8005f1c:	3501      	adds	r5, #1
 8005f1e:	4606      	mov	r6, r0
 8005f20:	460f      	mov	r7, r1
 8005f22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005f26:	f109 0908 	add.w	r9, r9, #8
 8005f2a:	e7e0      	b.n	8005eee <_dtoa_r+0x36e>
 8005f2c:	f000 809f 	beq.w	800606e <_dtoa_r+0x4ee>
 8005f30:	f1cb 0600 	rsb	r6, fp, #0
 8005f34:	4ba1      	ldr	r3, [pc, #644]	; (80061bc <_dtoa_r+0x63c>)
 8005f36:	4fa2      	ldr	r7, [pc, #648]	; (80061c0 <_dtoa_r+0x640>)
 8005f38:	f006 020f 	and.w	r2, r6, #15
 8005f3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	ec51 0b18 	vmov	r0, r1, d8
 8005f48:	f7fa fb56 	bl	80005f8 <__aeabi_dmul>
 8005f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f50:	1136      	asrs	r6, r6, #4
 8005f52:	2300      	movs	r3, #0
 8005f54:	2502      	movs	r5, #2
 8005f56:	2e00      	cmp	r6, #0
 8005f58:	d17e      	bne.n	8006058 <_dtoa_r+0x4d8>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1d0      	bne.n	8005f00 <_dtoa_r+0x380>
 8005f5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f60:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 8084 	beq.w	8006072 <_dtoa_r+0x4f2>
 8005f6a:	4b96      	ldr	r3, [pc, #600]	; (80061c4 <_dtoa_r+0x644>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	4640      	mov	r0, r8
 8005f70:	4649      	mov	r1, r9
 8005f72:	f7fa fdb3 	bl	8000adc <__aeabi_dcmplt>
 8005f76:	2800      	cmp	r0, #0
 8005f78:	d07b      	beq.n	8006072 <_dtoa_r+0x4f2>
 8005f7a:	9b04      	ldr	r3, [sp, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d078      	beq.n	8006072 <_dtoa_r+0x4f2>
 8005f80:	9b01      	ldr	r3, [sp, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	dd39      	ble.n	8005ffa <_dtoa_r+0x47a>
 8005f86:	4b90      	ldr	r3, [pc, #576]	; (80061c8 <_dtoa_r+0x648>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	4640      	mov	r0, r8
 8005f8c:	4649      	mov	r1, r9
 8005f8e:	f7fa fb33 	bl	80005f8 <__aeabi_dmul>
 8005f92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f96:	9e01      	ldr	r6, [sp, #4]
 8005f98:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8005f9c:	3501      	adds	r5, #1
 8005f9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	f7fa fabe 	bl	8000524 <__aeabi_i2d>
 8005fa8:	4642      	mov	r2, r8
 8005faa:	464b      	mov	r3, r9
 8005fac:	f7fa fb24 	bl	80005f8 <__aeabi_dmul>
 8005fb0:	4b86      	ldr	r3, [pc, #536]	; (80061cc <_dtoa_r+0x64c>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f7fa f96a 	bl	800028c <__adddf3>
 8005fb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fc0:	9303      	str	r3, [sp, #12]
 8005fc2:	2e00      	cmp	r6, #0
 8005fc4:	d158      	bne.n	8006078 <_dtoa_r+0x4f8>
 8005fc6:	4b82      	ldr	r3, [pc, #520]	; (80061d0 <_dtoa_r+0x650>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	4640      	mov	r0, r8
 8005fcc:	4649      	mov	r1, r9
 8005fce:	f7fa f95b 	bl	8000288 <__aeabi_dsub>
 8005fd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fd6:	4680      	mov	r8, r0
 8005fd8:	4689      	mov	r9, r1
 8005fda:	f7fa fd9d 	bl	8000b18 <__aeabi_dcmpgt>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	f040 8296 	bne.w	8006510 <_dtoa_r+0x990>
 8005fe4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005fe8:	4640      	mov	r0, r8
 8005fea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005fee:	4649      	mov	r1, r9
 8005ff0:	f7fa fd74 	bl	8000adc <__aeabi_dcmplt>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	f040 8289 	bne.w	800650c <_dtoa_r+0x98c>
 8005ffa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005ffe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006000:	2b00      	cmp	r3, #0
 8006002:	f2c0 814e 	blt.w	80062a2 <_dtoa_r+0x722>
 8006006:	f1bb 0f0e 	cmp.w	fp, #14
 800600a:	f300 814a 	bgt.w	80062a2 <_dtoa_r+0x722>
 800600e:	4b6b      	ldr	r3, [pc, #428]	; (80061bc <_dtoa_r+0x63c>)
 8006010:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006014:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800601a:	2b00      	cmp	r3, #0
 800601c:	f280 80dc 	bge.w	80061d8 <_dtoa_r+0x658>
 8006020:	9b04      	ldr	r3, [sp, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	f300 80d8 	bgt.w	80061d8 <_dtoa_r+0x658>
 8006028:	f040 826f 	bne.w	800650a <_dtoa_r+0x98a>
 800602c:	4b68      	ldr	r3, [pc, #416]	; (80061d0 <_dtoa_r+0x650>)
 800602e:	2200      	movs	r2, #0
 8006030:	4640      	mov	r0, r8
 8006032:	4649      	mov	r1, r9
 8006034:	f7fa fae0 	bl	80005f8 <__aeabi_dmul>
 8006038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800603c:	f7fa fd62 	bl	8000b04 <__aeabi_dcmpge>
 8006040:	9e04      	ldr	r6, [sp, #16]
 8006042:	4637      	mov	r7, r6
 8006044:	2800      	cmp	r0, #0
 8006046:	f040 8245 	bne.w	80064d4 <_dtoa_r+0x954>
 800604a:	9d00      	ldr	r5, [sp, #0]
 800604c:	2331      	movs	r3, #49	; 0x31
 800604e:	f805 3b01 	strb.w	r3, [r5], #1
 8006052:	f10b 0b01 	add.w	fp, fp, #1
 8006056:	e241      	b.n	80064dc <_dtoa_r+0x95c>
 8006058:	07f2      	lsls	r2, r6, #31
 800605a:	d505      	bpl.n	8006068 <_dtoa_r+0x4e8>
 800605c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006060:	f7fa faca 	bl	80005f8 <__aeabi_dmul>
 8006064:	3501      	adds	r5, #1
 8006066:	2301      	movs	r3, #1
 8006068:	1076      	asrs	r6, r6, #1
 800606a:	3708      	adds	r7, #8
 800606c:	e773      	b.n	8005f56 <_dtoa_r+0x3d6>
 800606e:	2502      	movs	r5, #2
 8006070:	e775      	b.n	8005f5e <_dtoa_r+0x3de>
 8006072:	9e04      	ldr	r6, [sp, #16]
 8006074:	465f      	mov	r7, fp
 8006076:	e792      	b.n	8005f9e <_dtoa_r+0x41e>
 8006078:	9900      	ldr	r1, [sp, #0]
 800607a:	4b50      	ldr	r3, [pc, #320]	; (80061bc <_dtoa_r+0x63c>)
 800607c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006080:	4431      	add	r1, r6
 8006082:	9102      	str	r1, [sp, #8]
 8006084:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006086:	eeb0 9a47 	vmov.f32	s18, s14
 800608a:	eef0 9a67 	vmov.f32	s19, s15
 800608e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006092:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006096:	2900      	cmp	r1, #0
 8006098:	d044      	beq.n	8006124 <_dtoa_r+0x5a4>
 800609a:	494e      	ldr	r1, [pc, #312]	; (80061d4 <_dtoa_r+0x654>)
 800609c:	2000      	movs	r0, #0
 800609e:	f7fa fbd5 	bl	800084c <__aeabi_ddiv>
 80060a2:	ec53 2b19 	vmov	r2, r3, d9
 80060a6:	f7fa f8ef 	bl	8000288 <__aeabi_dsub>
 80060aa:	9d00      	ldr	r5, [sp, #0]
 80060ac:	ec41 0b19 	vmov	d9, r0, r1
 80060b0:	4649      	mov	r1, r9
 80060b2:	4640      	mov	r0, r8
 80060b4:	f7fa fd50 	bl	8000b58 <__aeabi_d2iz>
 80060b8:	4606      	mov	r6, r0
 80060ba:	f7fa fa33 	bl	8000524 <__aeabi_i2d>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4640      	mov	r0, r8
 80060c4:	4649      	mov	r1, r9
 80060c6:	f7fa f8df 	bl	8000288 <__aeabi_dsub>
 80060ca:	3630      	adds	r6, #48	; 0x30
 80060cc:	f805 6b01 	strb.w	r6, [r5], #1
 80060d0:	ec53 2b19 	vmov	r2, r3, d9
 80060d4:	4680      	mov	r8, r0
 80060d6:	4689      	mov	r9, r1
 80060d8:	f7fa fd00 	bl	8000adc <__aeabi_dcmplt>
 80060dc:	2800      	cmp	r0, #0
 80060de:	d164      	bne.n	80061aa <_dtoa_r+0x62a>
 80060e0:	4642      	mov	r2, r8
 80060e2:	464b      	mov	r3, r9
 80060e4:	4937      	ldr	r1, [pc, #220]	; (80061c4 <_dtoa_r+0x644>)
 80060e6:	2000      	movs	r0, #0
 80060e8:	f7fa f8ce 	bl	8000288 <__aeabi_dsub>
 80060ec:	ec53 2b19 	vmov	r2, r3, d9
 80060f0:	f7fa fcf4 	bl	8000adc <__aeabi_dcmplt>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	f040 80b6 	bne.w	8006266 <_dtoa_r+0x6e6>
 80060fa:	9b02      	ldr	r3, [sp, #8]
 80060fc:	429d      	cmp	r5, r3
 80060fe:	f43f af7c 	beq.w	8005ffa <_dtoa_r+0x47a>
 8006102:	4b31      	ldr	r3, [pc, #196]	; (80061c8 <_dtoa_r+0x648>)
 8006104:	ec51 0b19 	vmov	r0, r1, d9
 8006108:	2200      	movs	r2, #0
 800610a:	f7fa fa75 	bl	80005f8 <__aeabi_dmul>
 800610e:	4b2e      	ldr	r3, [pc, #184]	; (80061c8 <_dtoa_r+0x648>)
 8006110:	ec41 0b19 	vmov	d9, r0, r1
 8006114:	2200      	movs	r2, #0
 8006116:	4640      	mov	r0, r8
 8006118:	4649      	mov	r1, r9
 800611a:	f7fa fa6d 	bl	80005f8 <__aeabi_dmul>
 800611e:	4680      	mov	r8, r0
 8006120:	4689      	mov	r9, r1
 8006122:	e7c5      	b.n	80060b0 <_dtoa_r+0x530>
 8006124:	ec51 0b17 	vmov	r0, r1, d7
 8006128:	f7fa fa66 	bl	80005f8 <__aeabi_dmul>
 800612c:	9b02      	ldr	r3, [sp, #8]
 800612e:	9d00      	ldr	r5, [sp, #0]
 8006130:	930f      	str	r3, [sp, #60]	; 0x3c
 8006132:	ec41 0b19 	vmov	d9, r0, r1
 8006136:	4649      	mov	r1, r9
 8006138:	4640      	mov	r0, r8
 800613a:	f7fa fd0d 	bl	8000b58 <__aeabi_d2iz>
 800613e:	4606      	mov	r6, r0
 8006140:	f7fa f9f0 	bl	8000524 <__aeabi_i2d>
 8006144:	3630      	adds	r6, #48	; 0x30
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	4640      	mov	r0, r8
 800614c:	4649      	mov	r1, r9
 800614e:	f7fa f89b 	bl	8000288 <__aeabi_dsub>
 8006152:	f805 6b01 	strb.w	r6, [r5], #1
 8006156:	9b02      	ldr	r3, [sp, #8]
 8006158:	429d      	cmp	r5, r3
 800615a:	4680      	mov	r8, r0
 800615c:	4689      	mov	r9, r1
 800615e:	f04f 0200 	mov.w	r2, #0
 8006162:	d124      	bne.n	80061ae <_dtoa_r+0x62e>
 8006164:	4b1b      	ldr	r3, [pc, #108]	; (80061d4 <_dtoa_r+0x654>)
 8006166:	ec51 0b19 	vmov	r0, r1, d9
 800616a:	f7fa f88f 	bl	800028c <__adddf3>
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	4640      	mov	r0, r8
 8006174:	4649      	mov	r1, r9
 8006176:	f7fa fccf 	bl	8000b18 <__aeabi_dcmpgt>
 800617a:	2800      	cmp	r0, #0
 800617c:	d173      	bne.n	8006266 <_dtoa_r+0x6e6>
 800617e:	ec53 2b19 	vmov	r2, r3, d9
 8006182:	4914      	ldr	r1, [pc, #80]	; (80061d4 <_dtoa_r+0x654>)
 8006184:	2000      	movs	r0, #0
 8006186:	f7fa f87f 	bl	8000288 <__aeabi_dsub>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4640      	mov	r0, r8
 8006190:	4649      	mov	r1, r9
 8006192:	f7fa fca3 	bl	8000adc <__aeabi_dcmplt>
 8006196:	2800      	cmp	r0, #0
 8006198:	f43f af2f 	beq.w	8005ffa <_dtoa_r+0x47a>
 800619c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800619e:	1e6b      	subs	r3, r5, #1
 80061a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80061a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80061a6:	2b30      	cmp	r3, #48	; 0x30
 80061a8:	d0f8      	beq.n	800619c <_dtoa_r+0x61c>
 80061aa:	46bb      	mov	fp, r7
 80061ac:	e04a      	b.n	8006244 <_dtoa_r+0x6c4>
 80061ae:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <_dtoa_r+0x648>)
 80061b0:	f7fa fa22 	bl	80005f8 <__aeabi_dmul>
 80061b4:	4680      	mov	r8, r0
 80061b6:	4689      	mov	r9, r1
 80061b8:	e7bd      	b.n	8006136 <_dtoa_r+0x5b6>
 80061ba:	bf00      	nop
 80061bc:	08007f70 	.word	0x08007f70
 80061c0:	08007f48 	.word	0x08007f48
 80061c4:	3ff00000 	.word	0x3ff00000
 80061c8:	40240000 	.word	0x40240000
 80061cc:	401c0000 	.word	0x401c0000
 80061d0:	40140000 	.word	0x40140000
 80061d4:	3fe00000 	.word	0x3fe00000
 80061d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80061dc:	9d00      	ldr	r5, [sp, #0]
 80061de:	4642      	mov	r2, r8
 80061e0:	464b      	mov	r3, r9
 80061e2:	4630      	mov	r0, r6
 80061e4:	4639      	mov	r1, r7
 80061e6:	f7fa fb31 	bl	800084c <__aeabi_ddiv>
 80061ea:	f7fa fcb5 	bl	8000b58 <__aeabi_d2iz>
 80061ee:	9001      	str	r0, [sp, #4]
 80061f0:	f7fa f998 	bl	8000524 <__aeabi_i2d>
 80061f4:	4642      	mov	r2, r8
 80061f6:	464b      	mov	r3, r9
 80061f8:	f7fa f9fe 	bl	80005f8 <__aeabi_dmul>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4630      	mov	r0, r6
 8006202:	4639      	mov	r1, r7
 8006204:	f7fa f840 	bl	8000288 <__aeabi_dsub>
 8006208:	9e01      	ldr	r6, [sp, #4]
 800620a:	9f04      	ldr	r7, [sp, #16]
 800620c:	3630      	adds	r6, #48	; 0x30
 800620e:	f805 6b01 	strb.w	r6, [r5], #1
 8006212:	9e00      	ldr	r6, [sp, #0]
 8006214:	1bae      	subs	r6, r5, r6
 8006216:	42b7      	cmp	r7, r6
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	d134      	bne.n	8006288 <_dtoa_r+0x708>
 800621e:	f7fa f835 	bl	800028c <__adddf3>
 8006222:	4642      	mov	r2, r8
 8006224:	464b      	mov	r3, r9
 8006226:	4606      	mov	r6, r0
 8006228:	460f      	mov	r7, r1
 800622a:	f7fa fc75 	bl	8000b18 <__aeabi_dcmpgt>
 800622e:	b9c8      	cbnz	r0, 8006264 <_dtoa_r+0x6e4>
 8006230:	4642      	mov	r2, r8
 8006232:	464b      	mov	r3, r9
 8006234:	4630      	mov	r0, r6
 8006236:	4639      	mov	r1, r7
 8006238:	f7fa fc46 	bl	8000ac8 <__aeabi_dcmpeq>
 800623c:	b110      	cbz	r0, 8006244 <_dtoa_r+0x6c4>
 800623e:	9b01      	ldr	r3, [sp, #4]
 8006240:	07db      	lsls	r3, r3, #31
 8006242:	d40f      	bmi.n	8006264 <_dtoa_r+0x6e4>
 8006244:	4651      	mov	r1, sl
 8006246:	4620      	mov	r0, r4
 8006248:	f000 fbcc 	bl	80069e4 <_Bfree>
 800624c:	2300      	movs	r3, #0
 800624e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006250:	702b      	strb	r3, [r5, #0]
 8006252:	f10b 0301 	add.w	r3, fp, #1
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800625a:	2b00      	cmp	r3, #0
 800625c:	f43f ace2 	beq.w	8005c24 <_dtoa_r+0xa4>
 8006260:	601d      	str	r5, [r3, #0]
 8006262:	e4df      	b.n	8005c24 <_dtoa_r+0xa4>
 8006264:	465f      	mov	r7, fp
 8006266:	462b      	mov	r3, r5
 8006268:	461d      	mov	r5, r3
 800626a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800626e:	2a39      	cmp	r2, #57	; 0x39
 8006270:	d106      	bne.n	8006280 <_dtoa_r+0x700>
 8006272:	9a00      	ldr	r2, [sp, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	d1f7      	bne.n	8006268 <_dtoa_r+0x6e8>
 8006278:	9900      	ldr	r1, [sp, #0]
 800627a:	2230      	movs	r2, #48	; 0x30
 800627c:	3701      	adds	r7, #1
 800627e:	700a      	strb	r2, [r1, #0]
 8006280:	781a      	ldrb	r2, [r3, #0]
 8006282:	3201      	adds	r2, #1
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	e790      	b.n	80061aa <_dtoa_r+0x62a>
 8006288:	4ba3      	ldr	r3, [pc, #652]	; (8006518 <_dtoa_r+0x998>)
 800628a:	2200      	movs	r2, #0
 800628c:	f7fa f9b4 	bl	80005f8 <__aeabi_dmul>
 8006290:	2200      	movs	r2, #0
 8006292:	2300      	movs	r3, #0
 8006294:	4606      	mov	r6, r0
 8006296:	460f      	mov	r7, r1
 8006298:	f7fa fc16 	bl	8000ac8 <__aeabi_dcmpeq>
 800629c:	2800      	cmp	r0, #0
 800629e:	d09e      	beq.n	80061de <_dtoa_r+0x65e>
 80062a0:	e7d0      	b.n	8006244 <_dtoa_r+0x6c4>
 80062a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062a4:	2a00      	cmp	r2, #0
 80062a6:	f000 80ca 	beq.w	800643e <_dtoa_r+0x8be>
 80062aa:	9a07      	ldr	r2, [sp, #28]
 80062ac:	2a01      	cmp	r2, #1
 80062ae:	f300 80ad 	bgt.w	800640c <_dtoa_r+0x88c>
 80062b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062b4:	2a00      	cmp	r2, #0
 80062b6:	f000 80a5 	beq.w	8006404 <_dtoa_r+0x884>
 80062ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80062be:	9e08      	ldr	r6, [sp, #32]
 80062c0:	9d05      	ldr	r5, [sp, #20]
 80062c2:	9a05      	ldr	r2, [sp, #20]
 80062c4:	441a      	add	r2, r3
 80062c6:	9205      	str	r2, [sp, #20]
 80062c8:	9a06      	ldr	r2, [sp, #24]
 80062ca:	2101      	movs	r1, #1
 80062cc:	441a      	add	r2, r3
 80062ce:	4620      	mov	r0, r4
 80062d0:	9206      	str	r2, [sp, #24]
 80062d2:	f000 fc3d 	bl	8006b50 <__i2b>
 80062d6:	4607      	mov	r7, r0
 80062d8:	b165      	cbz	r5, 80062f4 <_dtoa_r+0x774>
 80062da:	9b06      	ldr	r3, [sp, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	dd09      	ble.n	80062f4 <_dtoa_r+0x774>
 80062e0:	42ab      	cmp	r3, r5
 80062e2:	9a05      	ldr	r2, [sp, #20]
 80062e4:	bfa8      	it	ge
 80062e6:	462b      	movge	r3, r5
 80062e8:	1ad2      	subs	r2, r2, r3
 80062ea:	9205      	str	r2, [sp, #20]
 80062ec:	9a06      	ldr	r2, [sp, #24]
 80062ee:	1aed      	subs	r5, r5, r3
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	9306      	str	r3, [sp, #24]
 80062f4:	9b08      	ldr	r3, [sp, #32]
 80062f6:	b1f3      	cbz	r3, 8006336 <_dtoa_r+0x7b6>
 80062f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 80a3 	beq.w	8006446 <_dtoa_r+0x8c6>
 8006300:	2e00      	cmp	r6, #0
 8006302:	dd10      	ble.n	8006326 <_dtoa_r+0x7a6>
 8006304:	4639      	mov	r1, r7
 8006306:	4632      	mov	r2, r6
 8006308:	4620      	mov	r0, r4
 800630a:	f000 fce1 	bl	8006cd0 <__pow5mult>
 800630e:	4652      	mov	r2, sl
 8006310:	4601      	mov	r1, r0
 8006312:	4607      	mov	r7, r0
 8006314:	4620      	mov	r0, r4
 8006316:	f000 fc31 	bl	8006b7c <__multiply>
 800631a:	4651      	mov	r1, sl
 800631c:	4680      	mov	r8, r0
 800631e:	4620      	mov	r0, r4
 8006320:	f000 fb60 	bl	80069e4 <_Bfree>
 8006324:	46c2      	mov	sl, r8
 8006326:	9b08      	ldr	r3, [sp, #32]
 8006328:	1b9a      	subs	r2, r3, r6
 800632a:	d004      	beq.n	8006336 <_dtoa_r+0x7b6>
 800632c:	4651      	mov	r1, sl
 800632e:	4620      	mov	r0, r4
 8006330:	f000 fcce 	bl	8006cd0 <__pow5mult>
 8006334:	4682      	mov	sl, r0
 8006336:	2101      	movs	r1, #1
 8006338:	4620      	mov	r0, r4
 800633a:	f000 fc09 	bl	8006b50 <__i2b>
 800633e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006340:	2b00      	cmp	r3, #0
 8006342:	4606      	mov	r6, r0
 8006344:	f340 8081 	ble.w	800644a <_dtoa_r+0x8ca>
 8006348:	461a      	mov	r2, r3
 800634a:	4601      	mov	r1, r0
 800634c:	4620      	mov	r0, r4
 800634e:	f000 fcbf 	bl	8006cd0 <__pow5mult>
 8006352:	9b07      	ldr	r3, [sp, #28]
 8006354:	2b01      	cmp	r3, #1
 8006356:	4606      	mov	r6, r0
 8006358:	dd7a      	ble.n	8006450 <_dtoa_r+0x8d0>
 800635a:	f04f 0800 	mov.w	r8, #0
 800635e:	6933      	ldr	r3, [r6, #16]
 8006360:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006364:	6918      	ldr	r0, [r3, #16]
 8006366:	f000 fba5 	bl	8006ab4 <__hi0bits>
 800636a:	f1c0 0020 	rsb	r0, r0, #32
 800636e:	9b06      	ldr	r3, [sp, #24]
 8006370:	4418      	add	r0, r3
 8006372:	f010 001f 	ands.w	r0, r0, #31
 8006376:	f000 8094 	beq.w	80064a2 <_dtoa_r+0x922>
 800637a:	f1c0 0320 	rsb	r3, r0, #32
 800637e:	2b04      	cmp	r3, #4
 8006380:	f340 8085 	ble.w	800648e <_dtoa_r+0x90e>
 8006384:	9b05      	ldr	r3, [sp, #20]
 8006386:	f1c0 001c 	rsb	r0, r0, #28
 800638a:	4403      	add	r3, r0
 800638c:	9305      	str	r3, [sp, #20]
 800638e:	9b06      	ldr	r3, [sp, #24]
 8006390:	4403      	add	r3, r0
 8006392:	4405      	add	r5, r0
 8006394:	9306      	str	r3, [sp, #24]
 8006396:	9b05      	ldr	r3, [sp, #20]
 8006398:	2b00      	cmp	r3, #0
 800639a:	dd05      	ble.n	80063a8 <_dtoa_r+0x828>
 800639c:	4651      	mov	r1, sl
 800639e:	461a      	mov	r2, r3
 80063a0:	4620      	mov	r0, r4
 80063a2:	f000 fcef 	bl	8006d84 <__lshift>
 80063a6:	4682      	mov	sl, r0
 80063a8:	9b06      	ldr	r3, [sp, #24]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	dd05      	ble.n	80063ba <_dtoa_r+0x83a>
 80063ae:	4631      	mov	r1, r6
 80063b0:	461a      	mov	r2, r3
 80063b2:	4620      	mov	r0, r4
 80063b4:	f000 fce6 	bl	8006d84 <__lshift>
 80063b8:	4606      	mov	r6, r0
 80063ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d072      	beq.n	80064a6 <_dtoa_r+0x926>
 80063c0:	4631      	mov	r1, r6
 80063c2:	4650      	mov	r0, sl
 80063c4:	f000 fd4a 	bl	8006e5c <__mcmp>
 80063c8:	2800      	cmp	r0, #0
 80063ca:	da6c      	bge.n	80064a6 <_dtoa_r+0x926>
 80063cc:	2300      	movs	r3, #0
 80063ce:	4651      	mov	r1, sl
 80063d0:	220a      	movs	r2, #10
 80063d2:	4620      	mov	r0, r4
 80063d4:	f000 fb28 	bl	8006a28 <__multadd>
 80063d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063da:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80063de:	4682      	mov	sl, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 81b0 	beq.w	8006746 <_dtoa_r+0xbc6>
 80063e6:	2300      	movs	r3, #0
 80063e8:	4639      	mov	r1, r7
 80063ea:	220a      	movs	r2, #10
 80063ec:	4620      	mov	r0, r4
 80063ee:	f000 fb1b 	bl	8006a28 <__multadd>
 80063f2:	9b01      	ldr	r3, [sp, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	4607      	mov	r7, r0
 80063f8:	f300 8096 	bgt.w	8006528 <_dtoa_r+0x9a8>
 80063fc:	9b07      	ldr	r3, [sp, #28]
 80063fe:	2b02      	cmp	r3, #2
 8006400:	dc59      	bgt.n	80064b6 <_dtoa_r+0x936>
 8006402:	e091      	b.n	8006528 <_dtoa_r+0x9a8>
 8006404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006406:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800640a:	e758      	b.n	80062be <_dtoa_r+0x73e>
 800640c:	9b04      	ldr	r3, [sp, #16]
 800640e:	1e5e      	subs	r6, r3, #1
 8006410:	9b08      	ldr	r3, [sp, #32]
 8006412:	42b3      	cmp	r3, r6
 8006414:	bfbf      	itttt	lt
 8006416:	9b08      	ldrlt	r3, [sp, #32]
 8006418:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800641a:	9608      	strlt	r6, [sp, #32]
 800641c:	1af3      	sublt	r3, r6, r3
 800641e:	bfb4      	ite	lt
 8006420:	18d2      	addlt	r2, r2, r3
 8006422:	1b9e      	subge	r6, r3, r6
 8006424:	9b04      	ldr	r3, [sp, #16]
 8006426:	bfbc      	itt	lt
 8006428:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800642a:	2600      	movlt	r6, #0
 800642c:	2b00      	cmp	r3, #0
 800642e:	bfb7      	itett	lt
 8006430:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006434:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006438:	1a9d      	sublt	r5, r3, r2
 800643a:	2300      	movlt	r3, #0
 800643c:	e741      	b.n	80062c2 <_dtoa_r+0x742>
 800643e:	9e08      	ldr	r6, [sp, #32]
 8006440:	9d05      	ldr	r5, [sp, #20]
 8006442:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006444:	e748      	b.n	80062d8 <_dtoa_r+0x758>
 8006446:	9a08      	ldr	r2, [sp, #32]
 8006448:	e770      	b.n	800632c <_dtoa_r+0x7ac>
 800644a:	9b07      	ldr	r3, [sp, #28]
 800644c:	2b01      	cmp	r3, #1
 800644e:	dc19      	bgt.n	8006484 <_dtoa_r+0x904>
 8006450:	9b02      	ldr	r3, [sp, #8]
 8006452:	b9bb      	cbnz	r3, 8006484 <_dtoa_r+0x904>
 8006454:	9b03      	ldr	r3, [sp, #12]
 8006456:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800645a:	b99b      	cbnz	r3, 8006484 <_dtoa_r+0x904>
 800645c:	9b03      	ldr	r3, [sp, #12]
 800645e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006462:	0d1b      	lsrs	r3, r3, #20
 8006464:	051b      	lsls	r3, r3, #20
 8006466:	b183      	cbz	r3, 800648a <_dtoa_r+0x90a>
 8006468:	9b05      	ldr	r3, [sp, #20]
 800646a:	3301      	adds	r3, #1
 800646c:	9305      	str	r3, [sp, #20]
 800646e:	9b06      	ldr	r3, [sp, #24]
 8006470:	3301      	adds	r3, #1
 8006472:	9306      	str	r3, [sp, #24]
 8006474:	f04f 0801 	mov.w	r8, #1
 8006478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800647a:	2b00      	cmp	r3, #0
 800647c:	f47f af6f 	bne.w	800635e <_dtoa_r+0x7de>
 8006480:	2001      	movs	r0, #1
 8006482:	e774      	b.n	800636e <_dtoa_r+0x7ee>
 8006484:	f04f 0800 	mov.w	r8, #0
 8006488:	e7f6      	b.n	8006478 <_dtoa_r+0x8f8>
 800648a:	4698      	mov	r8, r3
 800648c:	e7f4      	b.n	8006478 <_dtoa_r+0x8f8>
 800648e:	d082      	beq.n	8006396 <_dtoa_r+0x816>
 8006490:	9a05      	ldr	r2, [sp, #20]
 8006492:	331c      	adds	r3, #28
 8006494:	441a      	add	r2, r3
 8006496:	9205      	str	r2, [sp, #20]
 8006498:	9a06      	ldr	r2, [sp, #24]
 800649a:	441a      	add	r2, r3
 800649c:	441d      	add	r5, r3
 800649e:	9206      	str	r2, [sp, #24]
 80064a0:	e779      	b.n	8006396 <_dtoa_r+0x816>
 80064a2:	4603      	mov	r3, r0
 80064a4:	e7f4      	b.n	8006490 <_dtoa_r+0x910>
 80064a6:	9b04      	ldr	r3, [sp, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	dc37      	bgt.n	800651c <_dtoa_r+0x99c>
 80064ac:	9b07      	ldr	r3, [sp, #28]
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	dd34      	ble.n	800651c <_dtoa_r+0x99c>
 80064b2:	9b04      	ldr	r3, [sp, #16]
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	9b01      	ldr	r3, [sp, #4]
 80064b8:	b963      	cbnz	r3, 80064d4 <_dtoa_r+0x954>
 80064ba:	4631      	mov	r1, r6
 80064bc:	2205      	movs	r2, #5
 80064be:	4620      	mov	r0, r4
 80064c0:	f000 fab2 	bl	8006a28 <__multadd>
 80064c4:	4601      	mov	r1, r0
 80064c6:	4606      	mov	r6, r0
 80064c8:	4650      	mov	r0, sl
 80064ca:	f000 fcc7 	bl	8006e5c <__mcmp>
 80064ce:	2800      	cmp	r0, #0
 80064d0:	f73f adbb 	bgt.w	800604a <_dtoa_r+0x4ca>
 80064d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064d6:	9d00      	ldr	r5, [sp, #0]
 80064d8:	ea6f 0b03 	mvn.w	fp, r3
 80064dc:	f04f 0800 	mov.w	r8, #0
 80064e0:	4631      	mov	r1, r6
 80064e2:	4620      	mov	r0, r4
 80064e4:	f000 fa7e 	bl	80069e4 <_Bfree>
 80064e8:	2f00      	cmp	r7, #0
 80064ea:	f43f aeab 	beq.w	8006244 <_dtoa_r+0x6c4>
 80064ee:	f1b8 0f00 	cmp.w	r8, #0
 80064f2:	d005      	beq.n	8006500 <_dtoa_r+0x980>
 80064f4:	45b8      	cmp	r8, r7
 80064f6:	d003      	beq.n	8006500 <_dtoa_r+0x980>
 80064f8:	4641      	mov	r1, r8
 80064fa:	4620      	mov	r0, r4
 80064fc:	f000 fa72 	bl	80069e4 <_Bfree>
 8006500:	4639      	mov	r1, r7
 8006502:	4620      	mov	r0, r4
 8006504:	f000 fa6e 	bl	80069e4 <_Bfree>
 8006508:	e69c      	b.n	8006244 <_dtoa_r+0x6c4>
 800650a:	2600      	movs	r6, #0
 800650c:	4637      	mov	r7, r6
 800650e:	e7e1      	b.n	80064d4 <_dtoa_r+0x954>
 8006510:	46bb      	mov	fp, r7
 8006512:	4637      	mov	r7, r6
 8006514:	e599      	b.n	800604a <_dtoa_r+0x4ca>
 8006516:	bf00      	nop
 8006518:	40240000 	.word	0x40240000
 800651c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 80c8 	beq.w	80066b4 <_dtoa_r+0xb34>
 8006524:	9b04      	ldr	r3, [sp, #16]
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	2d00      	cmp	r5, #0
 800652a:	dd05      	ble.n	8006538 <_dtoa_r+0x9b8>
 800652c:	4639      	mov	r1, r7
 800652e:	462a      	mov	r2, r5
 8006530:	4620      	mov	r0, r4
 8006532:	f000 fc27 	bl	8006d84 <__lshift>
 8006536:	4607      	mov	r7, r0
 8006538:	f1b8 0f00 	cmp.w	r8, #0
 800653c:	d05b      	beq.n	80065f6 <_dtoa_r+0xa76>
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	4620      	mov	r0, r4
 8006542:	f000 fa0f 	bl	8006964 <_Balloc>
 8006546:	4605      	mov	r5, r0
 8006548:	b928      	cbnz	r0, 8006556 <_dtoa_r+0x9d6>
 800654a:	4b83      	ldr	r3, [pc, #524]	; (8006758 <_dtoa_r+0xbd8>)
 800654c:	4602      	mov	r2, r0
 800654e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006552:	f7ff bb2e 	b.w	8005bb2 <_dtoa_r+0x32>
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	3202      	adds	r2, #2
 800655a:	0092      	lsls	r2, r2, #2
 800655c:	f107 010c 	add.w	r1, r7, #12
 8006560:	300c      	adds	r0, #12
 8006562:	f7ff fa76 	bl	8005a52 <memcpy>
 8006566:	2201      	movs	r2, #1
 8006568:	4629      	mov	r1, r5
 800656a:	4620      	mov	r0, r4
 800656c:	f000 fc0a 	bl	8006d84 <__lshift>
 8006570:	9b00      	ldr	r3, [sp, #0]
 8006572:	3301      	adds	r3, #1
 8006574:	9304      	str	r3, [sp, #16]
 8006576:	e9dd 2300 	ldrd	r2, r3, [sp]
 800657a:	4413      	add	r3, r2
 800657c:	9308      	str	r3, [sp, #32]
 800657e:	9b02      	ldr	r3, [sp, #8]
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	46b8      	mov	r8, r7
 8006586:	9306      	str	r3, [sp, #24]
 8006588:	4607      	mov	r7, r0
 800658a:	9b04      	ldr	r3, [sp, #16]
 800658c:	4631      	mov	r1, r6
 800658e:	3b01      	subs	r3, #1
 8006590:	4650      	mov	r0, sl
 8006592:	9301      	str	r3, [sp, #4]
 8006594:	f7ff fa6b 	bl	8005a6e <quorem>
 8006598:	4641      	mov	r1, r8
 800659a:	9002      	str	r0, [sp, #8]
 800659c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80065a0:	4650      	mov	r0, sl
 80065a2:	f000 fc5b 	bl	8006e5c <__mcmp>
 80065a6:	463a      	mov	r2, r7
 80065a8:	9005      	str	r0, [sp, #20]
 80065aa:	4631      	mov	r1, r6
 80065ac:	4620      	mov	r0, r4
 80065ae:	f000 fc71 	bl	8006e94 <__mdiff>
 80065b2:	68c2      	ldr	r2, [r0, #12]
 80065b4:	4605      	mov	r5, r0
 80065b6:	bb02      	cbnz	r2, 80065fa <_dtoa_r+0xa7a>
 80065b8:	4601      	mov	r1, r0
 80065ba:	4650      	mov	r0, sl
 80065bc:	f000 fc4e 	bl	8006e5c <__mcmp>
 80065c0:	4602      	mov	r2, r0
 80065c2:	4629      	mov	r1, r5
 80065c4:	4620      	mov	r0, r4
 80065c6:	9209      	str	r2, [sp, #36]	; 0x24
 80065c8:	f000 fa0c 	bl	80069e4 <_Bfree>
 80065cc:	9b07      	ldr	r3, [sp, #28]
 80065ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065d0:	9d04      	ldr	r5, [sp, #16]
 80065d2:	ea43 0102 	orr.w	r1, r3, r2
 80065d6:	9b06      	ldr	r3, [sp, #24]
 80065d8:	4319      	orrs	r1, r3
 80065da:	d110      	bne.n	80065fe <_dtoa_r+0xa7e>
 80065dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80065e0:	d029      	beq.n	8006636 <_dtoa_r+0xab6>
 80065e2:	9b05      	ldr	r3, [sp, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	dd02      	ble.n	80065ee <_dtoa_r+0xa6e>
 80065e8:	9b02      	ldr	r3, [sp, #8]
 80065ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80065ee:	9b01      	ldr	r3, [sp, #4]
 80065f0:	f883 9000 	strb.w	r9, [r3]
 80065f4:	e774      	b.n	80064e0 <_dtoa_r+0x960>
 80065f6:	4638      	mov	r0, r7
 80065f8:	e7ba      	b.n	8006570 <_dtoa_r+0x9f0>
 80065fa:	2201      	movs	r2, #1
 80065fc:	e7e1      	b.n	80065c2 <_dtoa_r+0xa42>
 80065fe:	9b05      	ldr	r3, [sp, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	db04      	blt.n	800660e <_dtoa_r+0xa8e>
 8006604:	9907      	ldr	r1, [sp, #28]
 8006606:	430b      	orrs	r3, r1
 8006608:	9906      	ldr	r1, [sp, #24]
 800660a:	430b      	orrs	r3, r1
 800660c:	d120      	bne.n	8006650 <_dtoa_r+0xad0>
 800660e:	2a00      	cmp	r2, #0
 8006610:	dded      	ble.n	80065ee <_dtoa_r+0xa6e>
 8006612:	4651      	mov	r1, sl
 8006614:	2201      	movs	r2, #1
 8006616:	4620      	mov	r0, r4
 8006618:	f000 fbb4 	bl	8006d84 <__lshift>
 800661c:	4631      	mov	r1, r6
 800661e:	4682      	mov	sl, r0
 8006620:	f000 fc1c 	bl	8006e5c <__mcmp>
 8006624:	2800      	cmp	r0, #0
 8006626:	dc03      	bgt.n	8006630 <_dtoa_r+0xab0>
 8006628:	d1e1      	bne.n	80065ee <_dtoa_r+0xa6e>
 800662a:	f019 0f01 	tst.w	r9, #1
 800662e:	d0de      	beq.n	80065ee <_dtoa_r+0xa6e>
 8006630:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006634:	d1d8      	bne.n	80065e8 <_dtoa_r+0xa68>
 8006636:	9a01      	ldr	r2, [sp, #4]
 8006638:	2339      	movs	r3, #57	; 0x39
 800663a:	7013      	strb	r3, [r2, #0]
 800663c:	462b      	mov	r3, r5
 800663e:	461d      	mov	r5, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006646:	2a39      	cmp	r2, #57	; 0x39
 8006648:	d06c      	beq.n	8006724 <_dtoa_r+0xba4>
 800664a:	3201      	adds	r2, #1
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	e747      	b.n	80064e0 <_dtoa_r+0x960>
 8006650:	2a00      	cmp	r2, #0
 8006652:	dd07      	ble.n	8006664 <_dtoa_r+0xae4>
 8006654:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006658:	d0ed      	beq.n	8006636 <_dtoa_r+0xab6>
 800665a:	9a01      	ldr	r2, [sp, #4]
 800665c:	f109 0301 	add.w	r3, r9, #1
 8006660:	7013      	strb	r3, [r2, #0]
 8006662:	e73d      	b.n	80064e0 <_dtoa_r+0x960>
 8006664:	9b04      	ldr	r3, [sp, #16]
 8006666:	9a08      	ldr	r2, [sp, #32]
 8006668:	f803 9c01 	strb.w	r9, [r3, #-1]
 800666c:	4293      	cmp	r3, r2
 800666e:	d043      	beq.n	80066f8 <_dtoa_r+0xb78>
 8006670:	4651      	mov	r1, sl
 8006672:	2300      	movs	r3, #0
 8006674:	220a      	movs	r2, #10
 8006676:	4620      	mov	r0, r4
 8006678:	f000 f9d6 	bl	8006a28 <__multadd>
 800667c:	45b8      	cmp	r8, r7
 800667e:	4682      	mov	sl, r0
 8006680:	f04f 0300 	mov.w	r3, #0
 8006684:	f04f 020a 	mov.w	r2, #10
 8006688:	4641      	mov	r1, r8
 800668a:	4620      	mov	r0, r4
 800668c:	d107      	bne.n	800669e <_dtoa_r+0xb1e>
 800668e:	f000 f9cb 	bl	8006a28 <__multadd>
 8006692:	4680      	mov	r8, r0
 8006694:	4607      	mov	r7, r0
 8006696:	9b04      	ldr	r3, [sp, #16]
 8006698:	3301      	adds	r3, #1
 800669a:	9304      	str	r3, [sp, #16]
 800669c:	e775      	b.n	800658a <_dtoa_r+0xa0a>
 800669e:	f000 f9c3 	bl	8006a28 <__multadd>
 80066a2:	4639      	mov	r1, r7
 80066a4:	4680      	mov	r8, r0
 80066a6:	2300      	movs	r3, #0
 80066a8:	220a      	movs	r2, #10
 80066aa:	4620      	mov	r0, r4
 80066ac:	f000 f9bc 	bl	8006a28 <__multadd>
 80066b0:	4607      	mov	r7, r0
 80066b2:	e7f0      	b.n	8006696 <_dtoa_r+0xb16>
 80066b4:	9b04      	ldr	r3, [sp, #16]
 80066b6:	9301      	str	r3, [sp, #4]
 80066b8:	9d00      	ldr	r5, [sp, #0]
 80066ba:	4631      	mov	r1, r6
 80066bc:	4650      	mov	r0, sl
 80066be:	f7ff f9d6 	bl	8005a6e <quorem>
 80066c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80066c6:	9b00      	ldr	r3, [sp, #0]
 80066c8:	f805 9b01 	strb.w	r9, [r5], #1
 80066cc:	1aea      	subs	r2, r5, r3
 80066ce:	9b01      	ldr	r3, [sp, #4]
 80066d0:	4293      	cmp	r3, r2
 80066d2:	dd07      	ble.n	80066e4 <_dtoa_r+0xb64>
 80066d4:	4651      	mov	r1, sl
 80066d6:	2300      	movs	r3, #0
 80066d8:	220a      	movs	r2, #10
 80066da:	4620      	mov	r0, r4
 80066dc:	f000 f9a4 	bl	8006a28 <__multadd>
 80066e0:	4682      	mov	sl, r0
 80066e2:	e7ea      	b.n	80066ba <_dtoa_r+0xb3a>
 80066e4:	9b01      	ldr	r3, [sp, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	bfc8      	it	gt
 80066ea:	461d      	movgt	r5, r3
 80066ec:	9b00      	ldr	r3, [sp, #0]
 80066ee:	bfd8      	it	le
 80066f0:	2501      	movle	r5, #1
 80066f2:	441d      	add	r5, r3
 80066f4:	f04f 0800 	mov.w	r8, #0
 80066f8:	4651      	mov	r1, sl
 80066fa:	2201      	movs	r2, #1
 80066fc:	4620      	mov	r0, r4
 80066fe:	f000 fb41 	bl	8006d84 <__lshift>
 8006702:	4631      	mov	r1, r6
 8006704:	4682      	mov	sl, r0
 8006706:	f000 fba9 	bl	8006e5c <__mcmp>
 800670a:	2800      	cmp	r0, #0
 800670c:	dc96      	bgt.n	800663c <_dtoa_r+0xabc>
 800670e:	d102      	bne.n	8006716 <_dtoa_r+0xb96>
 8006710:	f019 0f01 	tst.w	r9, #1
 8006714:	d192      	bne.n	800663c <_dtoa_r+0xabc>
 8006716:	462b      	mov	r3, r5
 8006718:	461d      	mov	r5, r3
 800671a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800671e:	2a30      	cmp	r2, #48	; 0x30
 8006720:	d0fa      	beq.n	8006718 <_dtoa_r+0xb98>
 8006722:	e6dd      	b.n	80064e0 <_dtoa_r+0x960>
 8006724:	9a00      	ldr	r2, [sp, #0]
 8006726:	429a      	cmp	r2, r3
 8006728:	d189      	bne.n	800663e <_dtoa_r+0xabe>
 800672a:	f10b 0b01 	add.w	fp, fp, #1
 800672e:	2331      	movs	r3, #49	; 0x31
 8006730:	e796      	b.n	8006660 <_dtoa_r+0xae0>
 8006732:	4b0a      	ldr	r3, [pc, #40]	; (800675c <_dtoa_r+0xbdc>)
 8006734:	f7ff ba99 	b.w	8005c6a <_dtoa_r+0xea>
 8006738:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800673a:	2b00      	cmp	r3, #0
 800673c:	f47f aa6d 	bne.w	8005c1a <_dtoa_r+0x9a>
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <_dtoa_r+0xbe0>)
 8006742:	f7ff ba92 	b.w	8005c6a <_dtoa_r+0xea>
 8006746:	9b01      	ldr	r3, [sp, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	dcb5      	bgt.n	80066b8 <_dtoa_r+0xb38>
 800674c:	9b07      	ldr	r3, [sp, #28]
 800674e:	2b02      	cmp	r3, #2
 8006750:	f73f aeb1 	bgt.w	80064b6 <_dtoa_r+0x936>
 8006754:	e7b0      	b.n	80066b8 <_dtoa_r+0xb38>
 8006756:	bf00      	nop
 8006758:	08007edc 	.word	0x08007edc
 800675c:	08007e3c 	.word	0x08007e3c
 8006760:	08007e60 	.word	0x08007e60

08006764 <_free_r>:
 8006764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006766:	2900      	cmp	r1, #0
 8006768:	d044      	beq.n	80067f4 <_free_r+0x90>
 800676a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800676e:	9001      	str	r0, [sp, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	f1a1 0404 	sub.w	r4, r1, #4
 8006776:	bfb8      	it	lt
 8006778:	18e4      	addlt	r4, r4, r3
 800677a:	f000 f8e7 	bl	800694c <__malloc_lock>
 800677e:	4a1e      	ldr	r2, [pc, #120]	; (80067f8 <_free_r+0x94>)
 8006780:	9801      	ldr	r0, [sp, #4]
 8006782:	6813      	ldr	r3, [r2, #0]
 8006784:	b933      	cbnz	r3, 8006794 <_free_r+0x30>
 8006786:	6063      	str	r3, [r4, #4]
 8006788:	6014      	str	r4, [r2, #0]
 800678a:	b003      	add	sp, #12
 800678c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006790:	f000 b8e2 	b.w	8006958 <__malloc_unlock>
 8006794:	42a3      	cmp	r3, r4
 8006796:	d908      	bls.n	80067aa <_free_r+0x46>
 8006798:	6825      	ldr	r5, [r4, #0]
 800679a:	1961      	adds	r1, r4, r5
 800679c:	428b      	cmp	r3, r1
 800679e:	bf01      	itttt	eq
 80067a0:	6819      	ldreq	r1, [r3, #0]
 80067a2:	685b      	ldreq	r3, [r3, #4]
 80067a4:	1949      	addeq	r1, r1, r5
 80067a6:	6021      	streq	r1, [r4, #0]
 80067a8:	e7ed      	b.n	8006786 <_free_r+0x22>
 80067aa:	461a      	mov	r2, r3
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	b10b      	cbz	r3, 80067b4 <_free_r+0x50>
 80067b0:	42a3      	cmp	r3, r4
 80067b2:	d9fa      	bls.n	80067aa <_free_r+0x46>
 80067b4:	6811      	ldr	r1, [r2, #0]
 80067b6:	1855      	adds	r5, r2, r1
 80067b8:	42a5      	cmp	r5, r4
 80067ba:	d10b      	bne.n	80067d4 <_free_r+0x70>
 80067bc:	6824      	ldr	r4, [r4, #0]
 80067be:	4421      	add	r1, r4
 80067c0:	1854      	adds	r4, r2, r1
 80067c2:	42a3      	cmp	r3, r4
 80067c4:	6011      	str	r1, [r2, #0]
 80067c6:	d1e0      	bne.n	800678a <_free_r+0x26>
 80067c8:	681c      	ldr	r4, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	6053      	str	r3, [r2, #4]
 80067ce:	440c      	add	r4, r1
 80067d0:	6014      	str	r4, [r2, #0]
 80067d2:	e7da      	b.n	800678a <_free_r+0x26>
 80067d4:	d902      	bls.n	80067dc <_free_r+0x78>
 80067d6:	230c      	movs	r3, #12
 80067d8:	6003      	str	r3, [r0, #0]
 80067da:	e7d6      	b.n	800678a <_free_r+0x26>
 80067dc:	6825      	ldr	r5, [r4, #0]
 80067de:	1961      	adds	r1, r4, r5
 80067e0:	428b      	cmp	r3, r1
 80067e2:	bf04      	itt	eq
 80067e4:	6819      	ldreq	r1, [r3, #0]
 80067e6:	685b      	ldreq	r3, [r3, #4]
 80067e8:	6063      	str	r3, [r4, #4]
 80067ea:	bf04      	itt	eq
 80067ec:	1949      	addeq	r1, r1, r5
 80067ee:	6021      	streq	r1, [r4, #0]
 80067f0:	6054      	str	r4, [r2, #4]
 80067f2:	e7ca      	b.n	800678a <_free_r+0x26>
 80067f4:	b003      	add	sp, #12
 80067f6:	bd30      	pop	{r4, r5, pc}
 80067f8:	20004488 	.word	0x20004488

080067fc <malloc>:
 80067fc:	4b02      	ldr	r3, [pc, #8]	; (8006808 <malloc+0xc>)
 80067fe:	4601      	mov	r1, r0
 8006800:	6818      	ldr	r0, [r3, #0]
 8006802:	f000 b823 	b.w	800684c <_malloc_r>
 8006806:	bf00      	nop
 8006808:	20000068 	.word	0x20000068

0800680c <sbrk_aligned>:
 800680c:	b570      	push	{r4, r5, r6, lr}
 800680e:	4e0e      	ldr	r6, [pc, #56]	; (8006848 <sbrk_aligned+0x3c>)
 8006810:	460c      	mov	r4, r1
 8006812:	6831      	ldr	r1, [r6, #0]
 8006814:	4605      	mov	r5, r0
 8006816:	b911      	cbnz	r1, 800681e <sbrk_aligned+0x12>
 8006818:	f000 fe96 	bl	8007548 <_sbrk_r>
 800681c:	6030      	str	r0, [r6, #0]
 800681e:	4621      	mov	r1, r4
 8006820:	4628      	mov	r0, r5
 8006822:	f000 fe91 	bl	8007548 <_sbrk_r>
 8006826:	1c43      	adds	r3, r0, #1
 8006828:	d00a      	beq.n	8006840 <sbrk_aligned+0x34>
 800682a:	1cc4      	adds	r4, r0, #3
 800682c:	f024 0403 	bic.w	r4, r4, #3
 8006830:	42a0      	cmp	r0, r4
 8006832:	d007      	beq.n	8006844 <sbrk_aligned+0x38>
 8006834:	1a21      	subs	r1, r4, r0
 8006836:	4628      	mov	r0, r5
 8006838:	f000 fe86 	bl	8007548 <_sbrk_r>
 800683c:	3001      	adds	r0, #1
 800683e:	d101      	bne.n	8006844 <sbrk_aligned+0x38>
 8006840:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006844:	4620      	mov	r0, r4
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	2000448c 	.word	0x2000448c

0800684c <_malloc_r>:
 800684c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006850:	1ccd      	adds	r5, r1, #3
 8006852:	f025 0503 	bic.w	r5, r5, #3
 8006856:	3508      	adds	r5, #8
 8006858:	2d0c      	cmp	r5, #12
 800685a:	bf38      	it	cc
 800685c:	250c      	movcc	r5, #12
 800685e:	2d00      	cmp	r5, #0
 8006860:	4607      	mov	r7, r0
 8006862:	db01      	blt.n	8006868 <_malloc_r+0x1c>
 8006864:	42a9      	cmp	r1, r5
 8006866:	d905      	bls.n	8006874 <_malloc_r+0x28>
 8006868:	230c      	movs	r3, #12
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	2600      	movs	r6, #0
 800686e:	4630      	mov	r0, r6
 8006870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006874:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006948 <_malloc_r+0xfc>
 8006878:	f000 f868 	bl	800694c <__malloc_lock>
 800687c:	f8d8 3000 	ldr.w	r3, [r8]
 8006880:	461c      	mov	r4, r3
 8006882:	bb5c      	cbnz	r4, 80068dc <_malloc_r+0x90>
 8006884:	4629      	mov	r1, r5
 8006886:	4638      	mov	r0, r7
 8006888:	f7ff ffc0 	bl	800680c <sbrk_aligned>
 800688c:	1c43      	adds	r3, r0, #1
 800688e:	4604      	mov	r4, r0
 8006890:	d155      	bne.n	800693e <_malloc_r+0xf2>
 8006892:	f8d8 4000 	ldr.w	r4, [r8]
 8006896:	4626      	mov	r6, r4
 8006898:	2e00      	cmp	r6, #0
 800689a:	d145      	bne.n	8006928 <_malloc_r+0xdc>
 800689c:	2c00      	cmp	r4, #0
 800689e:	d048      	beq.n	8006932 <_malloc_r+0xe6>
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	4631      	mov	r1, r6
 80068a4:	4638      	mov	r0, r7
 80068a6:	eb04 0903 	add.w	r9, r4, r3
 80068aa:	f000 fe4d 	bl	8007548 <_sbrk_r>
 80068ae:	4581      	cmp	r9, r0
 80068b0:	d13f      	bne.n	8006932 <_malloc_r+0xe6>
 80068b2:	6821      	ldr	r1, [r4, #0]
 80068b4:	1a6d      	subs	r5, r5, r1
 80068b6:	4629      	mov	r1, r5
 80068b8:	4638      	mov	r0, r7
 80068ba:	f7ff ffa7 	bl	800680c <sbrk_aligned>
 80068be:	3001      	adds	r0, #1
 80068c0:	d037      	beq.n	8006932 <_malloc_r+0xe6>
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	442b      	add	r3, r5
 80068c6:	6023      	str	r3, [r4, #0]
 80068c8:	f8d8 3000 	ldr.w	r3, [r8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d038      	beq.n	8006942 <_malloc_r+0xf6>
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	42a2      	cmp	r2, r4
 80068d4:	d12b      	bne.n	800692e <_malloc_r+0xe2>
 80068d6:	2200      	movs	r2, #0
 80068d8:	605a      	str	r2, [r3, #4]
 80068da:	e00f      	b.n	80068fc <_malloc_r+0xb0>
 80068dc:	6822      	ldr	r2, [r4, #0]
 80068de:	1b52      	subs	r2, r2, r5
 80068e0:	d41f      	bmi.n	8006922 <_malloc_r+0xd6>
 80068e2:	2a0b      	cmp	r2, #11
 80068e4:	d917      	bls.n	8006916 <_malloc_r+0xca>
 80068e6:	1961      	adds	r1, r4, r5
 80068e8:	42a3      	cmp	r3, r4
 80068ea:	6025      	str	r5, [r4, #0]
 80068ec:	bf18      	it	ne
 80068ee:	6059      	strne	r1, [r3, #4]
 80068f0:	6863      	ldr	r3, [r4, #4]
 80068f2:	bf08      	it	eq
 80068f4:	f8c8 1000 	streq.w	r1, [r8]
 80068f8:	5162      	str	r2, [r4, r5]
 80068fa:	604b      	str	r3, [r1, #4]
 80068fc:	4638      	mov	r0, r7
 80068fe:	f104 060b 	add.w	r6, r4, #11
 8006902:	f000 f829 	bl	8006958 <__malloc_unlock>
 8006906:	f026 0607 	bic.w	r6, r6, #7
 800690a:	1d23      	adds	r3, r4, #4
 800690c:	1af2      	subs	r2, r6, r3
 800690e:	d0ae      	beq.n	800686e <_malloc_r+0x22>
 8006910:	1b9b      	subs	r3, r3, r6
 8006912:	50a3      	str	r3, [r4, r2]
 8006914:	e7ab      	b.n	800686e <_malloc_r+0x22>
 8006916:	42a3      	cmp	r3, r4
 8006918:	6862      	ldr	r2, [r4, #4]
 800691a:	d1dd      	bne.n	80068d8 <_malloc_r+0x8c>
 800691c:	f8c8 2000 	str.w	r2, [r8]
 8006920:	e7ec      	b.n	80068fc <_malloc_r+0xb0>
 8006922:	4623      	mov	r3, r4
 8006924:	6864      	ldr	r4, [r4, #4]
 8006926:	e7ac      	b.n	8006882 <_malloc_r+0x36>
 8006928:	4634      	mov	r4, r6
 800692a:	6876      	ldr	r6, [r6, #4]
 800692c:	e7b4      	b.n	8006898 <_malloc_r+0x4c>
 800692e:	4613      	mov	r3, r2
 8006930:	e7cc      	b.n	80068cc <_malloc_r+0x80>
 8006932:	230c      	movs	r3, #12
 8006934:	603b      	str	r3, [r7, #0]
 8006936:	4638      	mov	r0, r7
 8006938:	f000 f80e 	bl	8006958 <__malloc_unlock>
 800693c:	e797      	b.n	800686e <_malloc_r+0x22>
 800693e:	6025      	str	r5, [r4, #0]
 8006940:	e7dc      	b.n	80068fc <_malloc_r+0xb0>
 8006942:	605b      	str	r3, [r3, #4]
 8006944:	deff      	udf	#255	; 0xff
 8006946:	bf00      	nop
 8006948:	20004488 	.word	0x20004488

0800694c <__malloc_lock>:
 800694c:	4801      	ldr	r0, [pc, #4]	; (8006954 <__malloc_lock+0x8>)
 800694e:	f7ff b87e 	b.w	8005a4e <__retarget_lock_acquire_recursive>
 8006952:	bf00      	nop
 8006954:	20004484 	.word	0x20004484

08006958 <__malloc_unlock>:
 8006958:	4801      	ldr	r0, [pc, #4]	; (8006960 <__malloc_unlock+0x8>)
 800695a:	f7ff b879 	b.w	8005a50 <__retarget_lock_release_recursive>
 800695e:	bf00      	nop
 8006960:	20004484 	.word	0x20004484

08006964 <_Balloc>:
 8006964:	b570      	push	{r4, r5, r6, lr}
 8006966:	69c6      	ldr	r6, [r0, #28]
 8006968:	4604      	mov	r4, r0
 800696a:	460d      	mov	r5, r1
 800696c:	b976      	cbnz	r6, 800698c <_Balloc+0x28>
 800696e:	2010      	movs	r0, #16
 8006970:	f7ff ff44 	bl	80067fc <malloc>
 8006974:	4602      	mov	r2, r0
 8006976:	61e0      	str	r0, [r4, #28]
 8006978:	b920      	cbnz	r0, 8006984 <_Balloc+0x20>
 800697a:	4b18      	ldr	r3, [pc, #96]	; (80069dc <_Balloc+0x78>)
 800697c:	4818      	ldr	r0, [pc, #96]	; (80069e0 <_Balloc+0x7c>)
 800697e:	216b      	movs	r1, #107	; 0x6b
 8006980:	f000 fdf2 	bl	8007568 <__assert_func>
 8006984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006988:	6006      	str	r6, [r0, #0]
 800698a:	60c6      	str	r6, [r0, #12]
 800698c:	69e6      	ldr	r6, [r4, #28]
 800698e:	68f3      	ldr	r3, [r6, #12]
 8006990:	b183      	cbz	r3, 80069b4 <_Balloc+0x50>
 8006992:	69e3      	ldr	r3, [r4, #28]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800699a:	b9b8      	cbnz	r0, 80069cc <_Balloc+0x68>
 800699c:	2101      	movs	r1, #1
 800699e:	fa01 f605 	lsl.w	r6, r1, r5
 80069a2:	1d72      	adds	r2, r6, #5
 80069a4:	0092      	lsls	r2, r2, #2
 80069a6:	4620      	mov	r0, r4
 80069a8:	f000 fdfc 	bl	80075a4 <_calloc_r>
 80069ac:	b160      	cbz	r0, 80069c8 <_Balloc+0x64>
 80069ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069b2:	e00e      	b.n	80069d2 <_Balloc+0x6e>
 80069b4:	2221      	movs	r2, #33	; 0x21
 80069b6:	2104      	movs	r1, #4
 80069b8:	4620      	mov	r0, r4
 80069ba:	f000 fdf3 	bl	80075a4 <_calloc_r>
 80069be:	69e3      	ldr	r3, [r4, #28]
 80069c0:	60f0      	str	r0, [r6, #12]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e4      	bne.n	8006992 <_Balloc+0x2e>
 80069c8:	2000      	movs	r0, #0
 80069ca:	bd70      	pop	{r4, r5, r6, pc}
 80069cc:	6802      	ldr	r2, [r0, #0]
 80069ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069d2:	2300      	movs	r3, #0
 80069d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069d8:	e7f7      	b.n	80069ca <_Balloc+0x66>
 80069da:	bf00      	nop
 80069dc:	08007e6d 	.word	0x08007e6d
 80069e0:	08007eed 	.word	0x08007eed

080069e4 <_Bfree>:
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	69c6      	ldr	r6, [r0, #28]
 80069e8:	4605      	mov	r5, r0
 80069ea:	460c      	mov	r4, r1
 80069ec:	b976      	cbnz	r6, 8006a0c <_Bfree+0x28>
 80069ee:	2010      	movs	r0, #16
 80069f0:	f7ff ff04 	bl	80067fc <malloc>
 80069f4:	4602      	mov	r2, r0
 80069f6:	61e8      	str	r0, [r5, #28]
 80069f8:	b920      	cbnz	r0, 8006a04 <_Bfree+0x20>
 80069fa:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <_Bfree+0x3c>)
 80069fc:	4809      	ldr	r0, [pc, #36]	; (8006a24 <_Bfree+0x40>)
 80069fe:	218f      	movs	r1, #143	; 0x8f
 8006a00:	f000 fdb2 	bl	8007568 <__assert_func>
 8006a04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a08:	6006      	str	r6, [r0, #0]
 8006a0a:	60c6      	str	r6, [r0, #12]
 8006a0c:	b13c      	cbz	r4, 8006a1e <_Bfree+0x3a>
 8006a0e:	69eb      	ldr	r3, [r5, #28]
 8006a10:	6862      	ldr	r2, [r4, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a18:	6021      	str	r1, [r4, #0]
 8006a1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}
 8006a20:	08007e6d 	.word	0x08007e6d
 8006a24:	08007eed 	.word	0x08007eed

08006a28 <__multadd>:
 8006a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2c:	690d      	ldr	r5, [r1, #16]
 8006a2e:	4607      	mov	r7, r0
 8006a30:	460c      	mov	r4, r1
 8006a32:	461e      	mov	r6, r3
 8006a34:	f101 0c14 	add.w	ip, r1, #20
 8006a38:	2000      	movs	r0, #0
 8006a3a:	f8dc 3000 	ldr.w	r3, [ip]
 8006a3e:	b299      	uxth	r1, r3
 8006a40:	fb02 6101 	mla	r1, r2, r1, r6
 8006a44:	0c1e      	lsrs	r6, r3, #16
 8006a46:	0c0b      	lsrs	r3, r1, #16
 8006a48:	fb02 3306 	mla	r3, r2, r6, r3
 8006a4c:	b289      	uxth	r1, r1
 8006a4e:	3001      	adds	r0, #1
 8006a50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a54:	4285      	cmp	r5, r0
 8006a56:	f84c 1b04 	str.w	r1, [ip], #4
 8006a5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a5e:	dcec      	bgt.n	8006a3a <__multadd+0x12>
 8006a60:	b30e      	cbz	r6, 8006aa6 <__multadd+0x7e>
 8006a62:	68a3      	ldr	r3, [r4, #8]
 8006a64:	42ab      	cmp	r3, r5
 8006a66:	dc19      	bgt.n	8006a9c <__multadd+0x74>
 8006a68:	6861      	ldr	r1, [r4, #4]
 8006a6a:	4638      	mov	r0, r7
 8006a6c:	3101      	adds	r1, #1
 8006a6e:	f7ff ff79 	bl	8006964 <_Balloc>
 8006a72:	4680      	mov	r8, r0
 8006a74:	b928      	cbnz	r0, 8006a82 <__multadd+0x5a>
 8006a76:	4602      	mov	r2, r0
 8006a78:	4b0c      	ldr	r3, [pc, #48]	; (8006aac <__multadd+0x84>)
 8006a7a:	480d      	ldr	r0, [pc, #52]	; (8006ab0 <__multadd+0x88>)
 8006a7c:	21ba      	movs	r1, #186	; 0xba
 8006a7e:	f000 fd73 	bl	8007568 <__assert_func>
 8006a82:	6922      	ldr	r2, [r4, #16]
 8006a84:	3202      	adds	r2, #2
 8006a86:	f104 010c 	add.w	r1, r4, #12
 8006a8a:	0092      	lsls	r2, r2, #2
 8006a8c:	300c      	adds	r0, #12
 8006a8e:	f7fe ffe0 	bl	8005a52 <memcpy>
 8006a92:	4621      	mov	r1, r4
 8006a94:	4638      	mov	r0, r7
 8006a96:	f7ff ffa5 	bl	80069e4 <_Bfree>
 8006a9a:	4644      	mov	r4, r8
 8006a9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006aa0:	3501      	adds	r5, #1
 8006aa2:	615e      	str	r6, [r3, #20]
 8006aa4:	6125      	str	r5, [r4, #16]
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aac:	08007edc 	.word	0x08007edc
 8006ab0:	08007eed 	.word	0x08007eed

08006ab4 <__hi0bits>:
 8006ab4:	0c03      	lsrs	r3, r0, #16
 8006ab6:	041b      	lsls	r3, r3, #16
 8006ab8:	b9d3      	cbnz	r3, 8006af0 <__hi0bits+0x3c>
 8006aba:	0400      	lsls	r0, r0, #16
 8006abc:	2310      	movs	r3, #16
 8006abe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006ac2:	bf04      	itt	eq
 8006ac4:	0200      	lsleq	r0, r0, #8
 8006ac6:	3308      	addeq	r3, #8
 8006ac8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006acc:	bf04      	itt	eq
 8006ace:	0100      	lsleq	r0, r0, #4
 8006ad0:	3304      	addeq	r3, #4
 8006ad2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006ad6:	bf04      	itt	eq
 8006ad8:	0080      	lsleq	r0, r0, #2
 8006ada:	3302      	addeq	r3, #2
 8006adc:	2800      	cmp	r0, #0
 8006ade:	db05      	blt.n	8006aec <__hi0bits+0x38>
 8006ae0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006ae4:	f103 0301 	add.w	r3, r3, #1
 8006ae8:	bf08      	it	eq
 8006aea:	2320      	moveq	r3, #32
 8006aec:	4618      	mov	r0, r3
 8006aee:	4770      	bx	lr
 8006af0:	2300      	movs	r3, #0
 8006af2:	e7e4      	b.n	8006abe <__hi0bits+0xa>

08006af4 <__lo0bits>:
 8006af4:	6803      	ldr	r3, [r0, #0]
 8006af6:	f013 0207 	ands.w	r2, r3, #7
 8006afa:	d00c      	beq.n	8006b16 <__lo0bits+0x22>
 8006afc:	07d9      	lsls	r1, r3, #31
 8006afe:	d422      	bmi.n	8006b46 <__lo0bits+0x52>
 8006b00:	079a      	lsls	r2, r3, #30
 8006b02:	bf49      	itett	mi
 8006b04:	085b      	lsrmi	r3, r3, #1
 8006b06:	089b      	lsrpl	r3, r3, #2
 8006b08:	6003      	strmi	r3, [r0, #0]
 8006b0a:	2201      	movmi	r2, #1
 8006b0c:	bf5c      	itt	pl
 8006b0e:	6003      	strpl	r3, [r0, #0]
 8006b10:	2202      	movpl	r2, #2
 8006b12:	4610      	mov	r0, r2
 8006b14:	4770      	bx	lr
 8006b16:	b299      	uxth	r1, r3
 8006b18:	b909      	cbnz	r1, 8006b1e <__lo0bits+0x2a>
 8006b1a:	0c1b      	lsrs	r3, r3, #16
 8006b1c:	2210      	movs	r2, #16
 8006b1e:	b2d9      	uxtb	r1, r3
 8006b20:	b909      	cbnz	r1, 8006b26 <__lo0bits+0x32>
 8006b22:	3208      	adds	r2, #8
 8006b24:	0a1b      	lsrs	r3, r3, #8
 8006b26:	0719      	lsls	r1, r3, #28
 8006b28:	bf04      	itt	eq
 8006b2a:	091b      	lsreq	r3, r3, #4
 8006b2c:	3204      	addeq	r2, #4
 8006b2e:	0799      	lsls	r1, r3, #30
 8006b30:	bf04      	itt	eq
 8006b32:	089b      	lsreq	r3, r3, #2
 8006b34:	3202      	addeq	r2, #2
 8006b36:	07d9      	lsls	r1, r3, #31
 8006b38:	d403      	bmi.n	8006b42 <__lo0bits+0x4e>
 8006b3a:	085b      	lsrs	r3, r3, #1
 8006b3c:	f102 0201 	add.w	r2, r2, #1
 8006b40:	d003      	beq.n	8006b4a <__lo0bits+0x56>
 8006b42:	6003      	str	r3, [r0, #0]
 8006b44:	e7e5      	b.n	8006b12 <__lo0bits+0x1e>
 8006b46:	2200      	movs	r2, #0
 8006b48:	e7e3      	b.n	8006b12 <__lo0bits+0x1e>
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	e7e1      	b.n	8006b12 <__lo0bits+0x1e>
	...

08006b50 <__i2b>:
 8006b50:	b510      	push	{r4, lr}
 8006b52:	460c      	mov	r4, r1
 8006b54:	2101      	movs	r1, #1
 8006b56:	f7ff ff05 	bl	8006964 <_Balloc>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	b928      	cbnz	r0, 8006b6a <__i2b+0x1a>
 8006b5e:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <__i2b+0x24>)
 8006b60:	4805      	ldr	r0, [pc, #20]	; (8006b78 <__i2b+0x28>)
 8006b62:	f240 1145 	movw	r1, #325	; 0x145
 8006b66:	f000 fcff 	bl	8007568 <__assert_func>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	6144      	str	r4, [r0, #20]
 8006b6e:	6103      	str	r3, [r0, #16]
 8006b70:	bd10      	pop	{r4, pc}
 8006b72:	bf00      	nop
 8006b74:	08007edc 	.word	0x08007edc
 8006b78:	08007eed 	.word	0x08007eed

08006b7c <__multiply>:
 8006b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b80:	4691      	mov	r9, r2
 8006b82:	690a      	ldr	r2, [r1, #16]
 8006b84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	bfb8      	it	lt
 8006b8c:	460b      	movlt	r3, r1
 8006b8e:	460c      	mov	r4, r1
 8006b90:	bfbc      	itt	lt
 8006b92:	464c      	movlt	r4, r9
 8006b94:	4699      	movlt	r9, r3
 8006b96:	6927      	ldr	r7, [r4, #16]
 8006b98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b9c:	68a3      	ldr	r3, [r4, #8]
 8006b9e:	6861      	ldr	r1, [r4, #4]
 8006ba0:	eb07 060a 	add.w	r6, r7, sl
 8006ba4:	42b3      	cmp	r3, r6
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	bfb8      	it	lt
 8006baa:	3101      	addlt	r1, #1
 8006bac:	f7ff feda 	bl	8006964 <_Balloc>
 8006bb0:	b930      	cbnz	r0, 8006bc0 <__multiply+0x44>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	4b44      	ldr	r3, [pc, #272]	; (8006cc8 <__multiply+0x14c>)
 8006bb6:	4845      	ldr	r0, [pc, #276]	; (8006ccc <__multiply+0x150>)
 8006bb8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006bbc:	f000 fcd4 	bl	8007568 <__assert_func>
 8006bc0:	f100 0514 	add.w	r5, r0, #20
 8006bc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006bc8:	462b      	mov	r3, r5
 8006bca:	2200      	movs	r2, #0
 8006bcc:	4543      	cmp	r3, r8
 8006bce:	d321      	bcc.n	8006c14 <__multiply+0x98>
 8006bd0:	f104 0314 	add.w	r3, r4, #20
 8006bd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006bd8:	f109 0314 	add.w	r3, r9, #20
 8006bdc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006be0:	9202      	str	r2, [sp, #8]
 8006be2:	1b3a      	subs	r2, r7, r4
 8006be4:	3a15      	subs	r2, #21
 8006be6:	f022 0203 	bic.w	r2, r2, #3
 8006bea:	3204      	adds	r2, #4
 8006bec:	f104 0115 	add.w	r1, r4, #21
 8006bf0:	428f      	cmp	r7, r1
 8006bf2:	bf38      	it	cc
 8006bf4:	2204      	movcc	r2, #4
 8006bf6:	9201      	str	r2, [sp, #4]
 8006bf8:	9a02      	ldr	r2, [sp, #8]
 8006bfa:	9303      	str	r3, [sp, #12]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d80c      	bhi.n	8006c1a <__multiply+0x9e>
 8006c00:	2e00      	cmp	r6, #0
 8006c02:	dd03      	ble.n	8006c0c <__multiply+0x90>
 8006c04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d05b      	beq.n	8006cc4 <__multiply+0x148>
 8006c0c:	6106      	str	r6, [r0, #16]
 8006c0e:	b005      	add	sp, #20
 8006c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c14:	f843 2b04 	str.w	r2, [r3], #4
 8006c18:	e7d8      	b.n	8006bcc <__multiply+0x50>
 8006c1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c1e:	f1ba 0f00 	cmp.w	sl, #0
 8006c22:	d024      	beq.n	8006c6e <__multiply+0xf2>
 8006c24:	f104 0e14 	add.w	lr, r4, #20
 8006c28:	46a9      	mov	r9, r5
 8006c2a:	f04f 0c00 	mov.w	ip, #0
 8006c2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c32:	f8d9 1000 	ldr.w	r1, [r9]
 8006c36:	fa1f fb82 	uxth.w	fp, r2
 8006c3a:	b289      	uxth	r1, r1
 8006c3c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006c40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006c44:	f8d9 2000 	ldr.w	r2, [r9]
 8006c48:	4461      	add	r1, ip
 8006c4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c4e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006c52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006c56:	b289      	uxth	r1, r1
 8006c58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c5c:	4577      	cmp	r7, lr
 8006c5e:	f849 1b04 	str.w	r1, [r9], #4
 8006c62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c66:	d8e2      	bhi.n	8006c2e <__multiply+0xb2>
 8006c68:	9a01      	ldr	r2, [sp, #4]
 8006c6a:	f845 c002 	str.w	ip, [r5, r2]
 8006c6e:	9a03      	ldr	r2, [sp, #12]
 8006c70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c74:	3304      	adds	r3, #4
 8006c76:	f1b9 0f00 	cmp.w	r9, #0
 8006c7a:	d021      	beq.n	8006cc0 <__multiply+0x144>
 8006c7c:	6829      	ldr	r1, [r5, #0]
 8006c7e:	f104 0c14 	add.w	ip, r4, #20
 8006c82:	46ae      	mov	lr, r5
 8006c84:	f04f 0a00 	mov.w	sl, #0
 8006c88:	f8bc b000 	ldrh.w	fp, [ip]
 8006c8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006c90:	fb09 220b 	mla	r2, r9, fp, r2
 8006c94:	4452      	add	r2, sl
 8006c96:	b289      	uxth	r1, r1
 8006c98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c9c:	f84e 1b04 	str.w	r1, [lr], #4
 8006ca0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006ca4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ca8:	f8be 1000 	ldrh.w	r1, [lr]
 8006cac:	fb09 110a 	mla	r1, r9, sl, r1
 8006cb0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006cb4:	4567      	cmp	r7, ip
 8006cb6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006cba:	d8e5      	bhi.n	8006c88 <__multiply+0x10c>
 8006cbc:	9a01      	ldr	r2, [sp, #4]
 8006cbe:	50a9      	str	r1, [r5, r2]
 8006cc0:	3504      	adds	r5, #4
 8006cc2:	e799      	b.n	8006bf8 <__multiply+0x7c>
 8006cc4:	3e01      	subs	r6, #1
 8006cc6:	e79b      	b.n	8006c00 <__multiply+0x84>
 8006cc8:	08007edc 	.word	0x08007edc
 8006ccc:	08007eed 	.word	0x08007eed

08006cd0 <__pow5mult>:
 8006cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cd4:	4615      	mov	r5, r2
 8006cd6:	f012 0203 	ands.w	r2, r2, #3
 8006cda:	4606      	mov	r6, r0
 8006cdc:	460f      	mov	r7, r1
 8006cde:	d007      	beq.n	8006cf0 <__pow5mult+0x20>
 8006ce0:	4c25      	ldr	r4, [pc, #148]	; (8006d78 <__pow5mult+0xa8>)
 8006ce2:	3a01      	subs	r2, #1
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cea:	f7ff fe9d 	bl	8006a28 <__multadd>
 8006cee:	4607      	mov	r7, r0
 8006cf0:	10ad      	asrs	r5, r5, #2
 8006cf2:	d03d      	beq.n	8006d70 <__pow5mult+0xa0>
 8006cf4:	69f4      	ldr	r4, [r6, #28]
 8006cf6:	b97c      	cbnz	r4, 8006d18 <__pow5mult+0x48>
 8006cf8:	2010      	movs	r0, #16
 8006cfa:	f7ff fd7f 	bl	80067fc <malloc>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	61f0      	str	r0, [r6, #28]
 8006d02:	b928      	cbnz	r0, 8006d10 <__pow5mult+0x40>
 8006d04:	4b1d      	ldr	r3, [pc, #116]	; (8006d7c <__pow5mult+0xac>)
 8006d06:	481e      	ldr	r0, [pc, #120]	; (8006d80 <__pow5mult+0xb0>)
 8006d08:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006d0c:	f000 fc2c 	bl	8007568 <__assert_func>
 8006d10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d14:	6004      	str	r4, [r0, #0]
 8006d16:	60c4      	str	r4, [r0, #12]
 8006d18:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006d1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d20:	b94c      	cbnz	r4, 8006d36 <__pow5mult+0x66>
 8006d22:	f240 2171 	movw	r1, #625	; 0x271
 8006d26:	4630      	mov	r0, r6
 8006d28:	f7ff ff12 	bl	8006b50 <__i2b>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d32:	4604      	mov	r4, r0
 8006d34:	6003      	str	r3, [r0, #0]
 8006d36:	f04f 0900 	mov.w	r9, #0
 8006d3a:	07eb      	lsls	r3, r5, #31
 8006d3c:	d50a      	bpl.n	8006d54 <__pow5mult+0x84>
 8006d3e:	4639      	mov	r1, r7
 8006d40:	4622      	mov	r2, r4
 8006d42:	4630      	mov	r0, r6
 8006d44:	f7ff ff1a 	bl	8006b7c <__multiply>
 8006d48:	4639      	mov	r1, r7
 8006d4a:	4680      	mov	r8, r0
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	f7ff fe49 	bl	80069e4 <_Bfree>
 8006d52:	4647      	mov	r7, r8
 8006d54:	106d      	asrs	r5, r5, #1
 8006d56:	d00b      	beq.n	8006d70 <__pow5mult+0xa0>
 8006d58:	6820      	ldr	r0, [r4, #0]
 8006d5a:	b938      	cbnz	r0, 8006d6c <__pow5mult+0x9c>
 8006d5c:	4622      	mov	r2, r4
 8006d5e:	4621      	mov	r1, r4
 8006d60:	4630      	mov	r0, r6
 8006d62:	f7ff ff0b 	bl	8006b7c <__multiply>
 8006d66:	6020      	str	r0, [r4, #0]
 8006d68:	f8c0 9000 	str.w	r9, [r0]
 8006d6c:	4604      	mov	r4, r0
 8006d6e:	e7e4      	b.n	8006d3a <__pow5mult+0x6a>
 8006d70:	4638      	mov	r0, r7
 8006d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d76:	bf00      	nop
 8006d78:	08008038 	.word	0x08008038
 8006d7c:	08007e6d 	.word	0x08007e6d
 8006d80:	08007eed 	.word	0x08007eed

08006d84 <__lshift>:
 8006d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d88:	460c      	mov	r4, r1
 8006d8a:	6849      	ldr	r1, [r1, #4]
 8006d8c:	6923      	ldr	r3, [r4, #16]
 8006d8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d92:	68a3      	ldr	r3, [r4, #8]
 8006d94:	4607      	mov	r7, r0
 8006d96:	4691      	mov	r9, r2
 8006d98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d9c:	f108 0601 	add.w	r6, r8, #1
 8006da0:	42b3      	cmp	r3, r6
 8006da2:	db0b      	blt.n	8006dbc <__lshift+0x38>
 8006da4:	4638      	mov	r0, r7
 8006da6:	f7ff fddd 	bl	8006964 <_Balloc>
 8006daa:	4605      	mov	r5, r0
 8006dac:	b948      	cbnz	r0, 8006dc2 <__lshift+0x3e>
 8006dae:	4602      	mov	r2, r0
 8006db0:	4b28      	ldr	r3, [pc, #160]	; (8006e54 <__lshift+0xd0>)
 8006db2:	4829      	ldr	r0, [pc, #164]	; (8006e58 <__lshift+0xd4>)
 8006db4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006db8:	f000 fbd6 	bl	8007568 <__assert_func>
 8006dbc:	3101      	adds	r1, #1
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	e7ee      	b.n	8006da0 <__lshift+0x1c>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	f100 0114 	add.w	r1, r0, #20
 8006dc8:	f100 0210 	add.w	r2, r0, #16
 8006dcc:	4618      	mov	r0, r3
 8006dce:	4553      	cmp	r3, sl
 8006dd0:	db33      	blt.n	8006e3a <__lshift+0xb6>
 8006dd2:	6920      	ldr	r0, [r4, #16]
 8006dd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006dd8:	f104 0314 	add.w	r3, r4, #20
 8006ddc:	f019 091f 	ands.w	r9, r9, #31
 8006de0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006de4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006de8:	d02b      	beq.n	8006e42 <__lshift+0xbe>
 8006dea:	f1c9 0e20 	rsb	lr, r9, #32
 8006dee:	468a      	mov	sl, r1
 8006df0:	2200      	movs	r2, #0
 8006df2:	6818      	ldr	r0, [r3, #0]
 8006df4:	fa00 f009 	lsl.w	r0, r0, r9
 8006df8:	4310      	orrs	r0, r2
 8006dfa:	f84a 0b04 	str.w	r0, [sl], #4
 8006dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e02:	459c      	cmp	ip, r3
 8006e04:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e08:	d8f3      	bhi.n	8006df2 <__lshift+0x6e>
 8006e0a:	ebac 0304 	sub.w	r3, ip, r4
 8006e0e:	3b15      	subs	r3, #21
 8006e10:	f023 0303 	bic.w	r3, r3, #3
 8006e14:	3304      	adds	r3, #4
 8006e16:	f104 0015 	add.w	r0, r4, #21
 8006e1a:	4584      	cmp	ip, r0
 8006e1c:	bf38      	it	cc
 8006e1e:	2304      	movcc	r3, #4
 8006e20:	50ca      	str	r2, [r1, r3]
 8006e22:	b10a      	cbz	r2, 8006e28 <__lshift+0xa4>
 8006e24:	f108 0602 	add.w	r6, r8, #2
 8006e28:	3e01      	subs	r6, #1
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	612e      	str	r6, [r5, #16]
 8006e2e:	4621      	mov	r1, r4
 8006e30:	f7ff fdd8 	bl	80069e4 <_Bfree>
 8006e34:	4628      	mov	r0, r5
 8006e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e3e:	3301      	adds	r3, #1
 8006e40:	e7c5      	b.n	8006dce <__lshift+0x4a>
 8006e42:	3904      	subs	r1, #4
 8006e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e48:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e4c:	459c      	cmp	ip, r3
 8006e4e:	d8f9      	bhi.n	8006e44 <__lshift+0xc0>
 8006e50:	e7ea      	b.n	8006e28 <__lshift+0xa4>
 8006e52:	bf00      	nop
 8006e54:	08007edc 	.word	0x08007edc
 8006e58:	08007eed 	.word	0x08007eed

08006e5c <__mcmp>:
 8006e5c:	b530      	push	{r4, r5, lr}
 8006e5e:	6902      	ldr	r2, [r0, #16]
 8006e60:	690c      	ldr	r4, [r1, #16]
 8006e62:	1b12      	subs	r2, r2, r4
 8006e64:	d10e      	bne.n	8006e84 <__mcmp+0x28>
 8006e66:	f100 0314 	add.w	r3, r0, #20
 8006e6a:	3114      	adds	r1, #20
 8006e6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e7c:	42a5      	cmp	r5, r4
 8006e7e:	d003      	beq.n	8006e88 <__mcmp+0x2c>
 8006e80:	d305      	bcc.n	8006e8e <__mcmp+0x32>
 8006e82:	2201      	movs	r2, #1
 8006e84:	4610      	mov	r0, r2
 8006e86:	bd30      	pop	{r4, r5, pc}
 8006e88:	4283      	cmp	r3, r0
 8006e8a:	d3f3      	bcc.n	8006e74 <__mcmp+0x18>
 8006e8c:	e7fa      	b.n	8006e84 <__mcmp+0x28>
 8006e8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e92:	e7f7      	b.n	8006e84 <__mcmp+0x28>

08006e94 <__mdiff>:
 8006e94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e98:	460c      	mov	r4, r1
 8006e9a:	4606      	mov	r6, r0
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	4690      	mov	r8, r2
 8006ea2:	f7ff ffdb 	bl	8006e5c <__mcmp>
 8006ea6:	1e05      	subs	r5, r0, #0
 8006ea8:	d110      	bne.n	8006ecc <__mdiff+0x38>
 8006eaa:	4629      	mov	r1, r5
 8006eac:	4630      	mov	r0, r6
 8006eae:	f7ff fd59 	bl	8006964 <_Balloc>
 8006eb2:	b930      	cbnz	r0, 8006ec2 <__mdiff+0x2e>
 8006eb4:	4b3a      	ldr	r3, [pc, #232]	; (8006fa0 <__mdiff+0x10c>)
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	f240 2137 	movw	r1, #567	; 0x237
 8006ebc:	4839      	ldr	r0, [pc, #228]	; (8006fa4 <__mdiff+0x110>)
 8006ebe:	f000 fb53 	bl	8007568 <__assert_func>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ecc:	bfa4      	itt	ge
 8006ece:	4643      	movge	r3, r8
 8006ed0:	46a0      	movge	r8, r4
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006ed8:	bfa6      	itte	ge
 8006eda:	461c      	movge	r4, r3
 8006edc:	2500      	movge	r5, #0
 8006ede:	2501      	movlt	r5, #1
 8006ee0:	f7ff fd40 	bl	8006964 <_Balloc>
 8006ee4:	b920      	cbnz	r0, 8006ef0 <__mdiff+0x5c>
 8006ee6:	4b2e      	ldr	r3, [pc, #184]	; (8006fa0 <__mdiff+0x10c>)
 8006ee8:	4602      	mov	r2, r0
 8006eea:	f240 2145 	movw	r1, #581	; 0x245
 8006eee:	e7e5      	b.n	8006ebc <__mdiff+0x28>
 8006ef0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006ef4:	6926      	ldr	r6, [r4, #16]
 8006ef6:	60c5      	str	r5, [r0, #12]
 8006ef8:	f104 0914 	add.w	r9, r4, #20
 8006efc:	f108 0514 	add.w	r5, r8, #20
 8006f00:	f100 0e14 	add.w	lr, r0, #20
 8006f04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006f08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f0c:	f108 0210 	add.w	r2, r8, #16
 8006f10:	46f2      	mov	sl, lr
 8006f12:	2100      	movs	r1, #0
 8006f14:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f1c:	fa11 f88b 	uxtah	r8, r1, fp
 8006f20:	b299      	uxth	r1, r3
 8006f22:	0c1b      	lsrs	r3, r3, #16
 8006f24:	eba8 0801 	sub.w	r8, r8, r1
 8006f28:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f2c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006f30:	fa1f f888 	uxth.w	r8, r8
 8006f34:	1419      	asrs	r1, r3, #16
 8006f36:	454e      	cmp	r6, r9
 8006f38:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006f3c:	f84a 3b04 	str.w	r3, [sl], #4
 8006f40:	d8e8      	bhi.n	8006f14 <__mdiff+0x80>
 8006f42:	1b33      	subs	r3, r6, r4
 8006f44:	3b15      	subs	r3, #21
 8006f46:	f023 0303 	bic.w	r3, r3, #3
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	3415      	adds	r4, #21
 8006f4e:	42a6      	cmp	r6, r4
 8006f50:	bf38      	it	cc
 8006f52:	2304      	movcc	r3, #4
 8006f54:	441d      	add	r5, r3
 8006f56:	4473      	add	r3, lr
 8006f58:	469e      	mov	lr, r3
 8006f5a:	462e      	mov	r6, r5
 8006f5c:	4566      	cmp	r6, ip
 8006f5e:	d30e      	bcc.n	8006f7e <__mdiff+0xea>
 8006f60:	f10c 0203 	add.w	r2, ip, #3
 8006f64:	1b52      	subs	r2, r2, r5
 8006f66:	f022 0203 	bic.w	r2, r2, #3
 8006f6a:	3d03      	subs	r5, #3
 8006f6c:	45ac      	cmp	ip, r5
 8006f6e:	bf38      	it	cc
 8006f70:	2200      	movcc	r2, #0
 8006f72:	4413      	add	r3, r2
 8006f74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006f78:	b17a      	cbz	r2, 8006f9a <__mdiff+0x106>
 8006f7a:	6107      	str	r7, [r0, #16]
 8006f7c:	e7a4      	b.n	8006ec8 <__mdiff+0x34>
 8006f7e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006f82:	fa11 f288 	uxtah	r2, r1, r8
 8006f86:	1414      	asrs	r4, r2, #16
 8006f88:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006f8c:	b292      	uxth	r2, r2
 8006f8e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006f92:	f84e 2b04 	str.w	r2, [lr], #4
 8006f96:	1421      	asrs	r1, r4, #16
 8006f98:	e7e0      	b.n	8006f5c <__mdiff+0xc8>
 8006f9a:	3f01      	subs	r7, #1
 8006f9c:	e7ea      	b.n	8006f74 <__mdiff+0xe0>
 8006f9e:	bf00      	nop
 8006fa0:	08007edc 	.word	0x08007edc
 8006fa4:	08007eed 	.word	0x08007eed

08006fa8 <__d2b>:
 8006fa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fac:	460f      	mov	r7, r1
 8006fae:	2101      	movs	r1, #1
 8006fb0:	ec59 8b10 	vmov	r8, r9, d0
 8006fb4:	4616      	mov	r6, r2
 8006fb6:	f7ff fcd5 	bl	8006964 <_Balloc>
 8006fba:	4604      	mov	r4, r0
 8006fbc:	b930      	cbnz	r0, 8006fcc <__d2b+0x24>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	4b24      	ldr	r3, [pc, #144]	; (8007054 <__d2b+0xac>)
 8006fc2:	4825      	ldr	r0, [pc, #148]	; (8007058 <__d2b+0xb0>)
 8006fc4:	f240 310f 	movw	r1, #783	; 0x30f
 8006fc8:	f000 face 	bl	8007568 <__assert_func>
 8006fcc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006fd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fd4:	bb2d      	cbnz	r5, 8007022 <__d2b+0x7a>
 8006fd6:	9301      	str	r3, [sp, #4]
 8006fd8:	f1b8 0300 	subs.w	r3, r8, #0
 8006fdc:	d026      	beq.n	800702c <__d2b+0x84>
 8006fde:	4668      	mov	r0, sp
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	f7ff fd87 	bl	8006af4 <__lo0bits>
 8006fe6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006fea:	b1e8      	cbz	r0, 8007028 <__d2b+0x80>
 8006fec:	f1c0 0320 	rsb	r3, r0, #32
 8006ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff4:	430b      	orrs	r3, r1
 8006ff6:	40c2      	lsrs	r2, r0
 8006ff8:	6163      	str	r3, [r4, #20]
 8006ffa:	9201      	str	r2, [sp, #4]
 8006ffc:	9b01      	ldr	r3, [sp, #4]
 8006ffe:	61a3      	str	r3, [r4, #24]
 8007000:	2b00      	cmp	r3, #0
 8007002:	bf14      	ite	ne
 8007004:	2202      	movne	r2, #2
 8007006:	2201      	moveq	r2, #1
 8007008:	6122      	str	r2, [r4, #16]
 800700a:	b1bd      	cbz	r5, 800703c <__d2b+0x94>
 800700c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007010:	4405      	add	r5, r0
 8007012:	603d      	str	r5, [r7, #0]
 8007014:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007018:	6030      	str	r0, [r6, #0]
 800701a:	4620      	mov	r0, r4
 800701c:	b003      	add	sp, #12
 800701e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007026:	e7d6      	b.n	8006fd6 <__d2b+0x2e>
 8007028:	6161      	str	r1, [r4, #20]
 800702a:	e7e7      	b.n	8006ffc <__d2b+0x54>
 800702c:	a801      	add	r0, sp, #4
 800702e:	f7ff fd61 	bl	8006af4 <__lo0bits>
 8007032:	9b01      	ldr	r3, [sp, #4]
 8007034:	6163      	str	r3, [r4, #20]
 8007036:	3020      	adds	r0, #32
 8007038:	2201      	movs	r2, #1
 800703a:	e7e5      	b.n	8007008 <__d2b+0x60>
 800703c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007040:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007044:	6038      	str	r0, [r7, #0]
 8007046:	6918      	ldr	r0, [r3, #16]
 8007048:	f7ff fd34 	bl	8006ab4 <__hi0bits>
 800704c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007050:	e7e2      	b.n	8007018 <__d2b+0x70>
 8007052:	bf00      	nop
 8007054:	08007edc 	.word	0x08007edc
 8007058:	08007eed 	.word	0x08007eed

0800705c <__sfputc_r>:
 800705c:	6893      	ldr	r3, [r2, #8]
 800705e:	3b01      	subs	r3, #1
 8007060:	2b00      	cmp	r3, #0
 8007062:	b410      	push	{r4}
 8007064:	6093      	str	r3, [r2, #8]
 8007066:	da08      	bge.n	800707a <__sfputc_r+0x1e>
 8007068:	6994      	ldr	r4, [r2, #24]
 800706a:	42a3      	cmp	r3, r4
 800706c:	db01      	blt.n	8007072 <__sfputc_r+0x16>
 800706e:	290a      	cmp	r1, #10
 8007070:	d103      	bne.n	800707a <__sfputc_r+0x1e>
 8007072:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007076:	f7fe bb82 	b.w	800577e <__swbuf_r>
 800707a:	6813      	ldr	r3, [r2, #0]
 800707c:	1c58      	adds	r0, r3, #1
 800707e:	6010      	str	r0, [r2, #0]
 8007080:	7019      	strb	r1, [r3, #0]
 8007082:	4608      	mov	r0, r1
 8007084:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007088:	4770      	bx	lr

0800708a <__sfputs_r>:
 800708a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708c:	4606      	mov	r6, r0
 800708e:	460f      	mov	r7, r1
 8007090:	4614      	mov	r4, r2
 8007092:	18d5      	adds	r5, r2, r3
 8007094:	42ac      	cmp	r4, r5
 8007096:	d101      	bne.n	800709c <__sfputs_r+0x12>
 8007098:	2000      	movs	r0, #0
 800709a:	e007      	b.n	80070ac <__sfputs_r+0x22>
 800709c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a0:	463a      	mov	r2, r7
 80070a2:	4630      	mov	r0, r6
 80070a4:	f7ff ffda 	bl	800705c <__sfputc_r>
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d1f3      	bne.n	8007094 <__sfputs_r+0xa>
 80070ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070b0 <_vfiprintf_r>:
 80070b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b4:	460d      	mov	r5, r1
 80070b6:	b09d      	sub	sp, #116	; 0x74
 80070b8:	4614      	mov	r4, r2
 80070ba:	4698      	mov	r8, r3
 80070bc:	4606      	mov	r6, r0
 80070be:	b118      	cbz	r0, 80070c8 <_vfiprintf_r+0x18>
 80070c0:	6a03      	ldr	r3, [r0, #32]
 80070c2:	b90b      	cbnz	r3, 80070c8 <_vfiprintf_r+0x18>
 80070c4:	f7fe fa74 	bl	80055b0 <__sinit>
 80070c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070ca:	07d9      	lsls	r1, r3, #31
 80070cc:	d405      	bmi.n	80070da <_vfiprintf_r+0x2a>
 80070ce:	89ab      	ldrh	r3, [r5, #12]
 80070d0:	059a      	lsls	r2, r3, #22
 80070d2:	d402      	bmi.n	80070da <_vfiprintf_r+0x2a>
 80070d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070d6:	f7fe fcba 	bl	8005a4e <__retarget_lock_acquire_recursive>
 80070da:	89ab      	ldrh	r3, [r5, #12]
 80070dc:	071b      	lsls	r3, r3, #28
 80070de:	d501      	bpl.n	80070e4 <_vfiprintf_r+0x34>
 80070e0:	692b      	ldr	r3, [r5, #16]
 80070e2:	b99b      	cbnz	r3, 800710c <_vfiprintf_r+0x5c>
 80070e4:	4629      	mov	r1, r5
 80070e6:	4630      	mov	r0, r6
 80070e8:	f7fe fb86 	bl	80057f8 <__swsetup_r>
 80070ec:	b170      	cbz	r0, 800710c <_vfiprintf_r+0x5c>
 80070ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070f0:	07dc      	lsls	r4, r3, #31
 80070f2:	d504      	bpl.n	80070fe <_vfiprintf_r+0x4e>
 80070f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070f8:	b01d      	add	sp, #116	; 0x74
 80070fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070fe:	89ab      	ldrh	r3, [r5, #12]
 8007100:	0598      	lsls	r0, r3, #22
 8007102:	d4f7      	bmi.n	80070f4 <_vfiprintf_r+0x44>
 8007104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007106:	f7fe fca3 	bl	8005a50 <__retarget_lock_release_recursive>
 800710a:	e7f3      	b.n	80070f4 <_vfiprintf_r+0x44>
 800710c:	2300      	movs	r3, #0
 800710e:	9309      	str	r3, [sp, #36]	; 0x24
 8007110:	2320      	movs	r3, #32
 8007112:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007116:	f8cd 800c 	str.w	r8, [sp, #12]
 800711a:	2330      	movs	r3, #48	; 0x30
 800711c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80072d0 <_vfiprintf_r+0x220>
 8007120:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007124:	f04f 0901 	mov.w	r9, #1
 8007128:	4623      	mov	r3, r4
 800712a:	469a      	mov	sl, r3
 800712c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007130:	b10a      	cbz	r2, 8007136 <_vfiprintf_r+0x86>
 8007132:	2a25      	cmp	r2, #37	; 0x25
 8007134:	d1f9      	bne.n	800712a <_vfiprintf_r+0x7a>
 8007136:	ebba 0b04 	subs.w	fp, sl, r4
 800713a:	d00b      	beq.n	8007154 <_vfiprintf_r+0xa4>
 800713c:	465b      	mov	r3, fp
 800713e:	4622      	mov	r2, r4
 8007140:	4629      	mov	r1, r5
 8007142:	4630      	mov	r0, r6
 8007144:	f7ff ffa1 	bl	800708a <__sfputs_r>
 8007148:	3001      	adds	r0, #1
 800714a:	f000 80a9 	beq.w	80072a0 <_vfiprintf_r+0x1f0>
 800714e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007150:	445a      	add	r2, fp
 8007152:	9209      	str	r2, [sp, #36]	; 0x24
 8007154:	f89a 3000 	ldrb.w	r3, [sl]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 80a1 	beq.w	80072a0 <_vfiprintf_r+0x1f0>
 800715e:	2300      	movs	r3, #0
 8007160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007164:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007168:	f10a 0a01 	add.w	sl, sl, #1
 800716c:	9304      	str	r3, [sp, #16]
 800716e:	9307      	str	r3, [sp, #28]
 8007170:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007174:	931a      	str	r3, [sp, #104]	; 0x68
 8007176:	4654      	mov	r4, sl
 8007178:	2205      	movs	r2, #5
 800717a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800717e:	4854      	ldr	r0, [pc, #336]	; (80072d0 <_vfiprintf_r+0x220>)
 8007180:	f7f9 f826 	bl	80001d0 <memchr>
 8007184:	9a04      	ldr	r2, [sp, #16]
 8007186:	b9d8      	cbnz	r0, 80071c0 <_vfiprintf_r+0x110>
 8007188:	06d1      	lsls	r1, r2, #27
 800718a:	bf44      	itt	mi
 800718c:	2320      	movmi	r3, #32
 800718e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007192:	0713      	lsls	r3, r2, #28
 8007194:	bf44      	itt	mi
 8007196:	232b      	movmi	r3, #43	; 0x2b
 8007198:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800719c:	f89a 3000 	ldrb.w	r3, [sl]
 80071a0:	2b2a      	cmp	r3, #42	; 0x2a
 80071a2:	d015      	beq.n	80071d0 <_vfiprintf_r+0x120>
 80071a4:	9a07      	ldr	r2, [sp, #28]
 80071a6:	4654      	mov	r4, sl
 80071a8:	2000      	movs	r0, #0
 80071aa:	f04f 0c0a 	mov.w	ip, #10
 80071ae:	4621      	mov	r1, r4
 80071b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071b4:	3b30      	subs	r3, #48	; 0x30
 80071b6:	2b09      	cmp	r3, #9
 80071b8:	d94d      	bls.n	8007256 <_vfiprintf_r+0x1a6>
 80071ba:	b1b0      	cbz	r0, 80071ea <_vfiprintf_r+0x13a>
 80071bc:	9207      	str	r2, [sp, #28]
 80071be:	e014      	b.n	80071ea <_vfiprintf_r+0x13a>
 80071c0:	eba0 0308 	sub.w	r3, r0, r8
 80071c4:	fa09 f303 	lsl.w	r3, r9, r3
 80071c8:	4313      	orrs	r3, r2
 80071ca:	9304      	str	r3, [sp, #16]
 80071cc:	46a2      	mov	sl, r4
 80071ce:	e7d2      	b.n	8007176 <_vfiprintf_r+0xc6>
 80071d0:	9b03      	ldr	r3, [sp, #12]
 80071d2:	1d19      	adds	r1, r3, #4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	9103      	str	r1, [sp, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	bfbb      	ittet	lt
 80071dc:	425b      	neglt	r3, r3
 80071de:	f042 0202 	orrlt.w	r2, r2, #2
 80071e2:	9307      	strge	r3, [sp, #28]
 80071e4:	9307      	strlt	r3, [sp, #28]
 80071e6:	bfb8      	it	lt
 80071e8:	9204      	strlt	r2, [sp, #16]
 80071ea:	7823      	ldrb	r3, [r4, #0]
 80071ec:	2b2e      	cmp	r3, #46	; 0x2e
 80071ee:	d10c      	bne.n	800720a <_vfiprintf_r+0x15a>
 80071f0:	7863      	ldrb	r3, [r4, #1]
 80071f2:	2b2a      	cmp	r3, #42	; 0x2a
 80071f4:	d134      	bne.n	8007260 <_vfiprintf_r+0x1b0>
 80071f6:	9b03      	ldr	r3, [sp, #12]
 80071f8:	1d1a      	adds	r2, r3, #4
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	9203      	str	r2, [sp, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	bfb8      	it	lt
 8007202:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007206:	3402      	adds	r4, #2
 8007208:	9305      	str	r3, [sp, #20]
 800720a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80072e0 <_vfiprintf_r+0x230>
 800720e:	7821      	ldrb	r1, [r4, #0]
 8007210:	2203      	movs	r2, #3
 8007212:	4650      	mov	r0, sl
 8007214:	f7f8 ffdc 	bl	80001d0 <memchr>
 8007218:	b138      	cbz	r0, 800722a <_vfiprintf_r+0x17a>
 800721a:	9b04      	ldr	r3, [sp, #16]
 800721c:	eba0 000a 	sub.w	r0, r0, sl
 8007220:	2240      	movs	r2, #64	; 0x40
 8007222:	4082      	lsls	r2, r0
 8007224:	4313      	orrs	r3, r2
 8007226:	3401      	adds	r4, #1
 8007228:	9304      	str	r3, [sp, #16]
 800722a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800722e:	4829      	ldr	r0, [pc, #164]	; (80072d4 <_vfiprintf_r+0x224>)
 8007230:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007234:	2206      	movs	r2, #6
 8007236:	f7f8 ffcb 	bl	80001d0 <memchr>
 800723a:	2800      	cmp	r0, #0
 800723c:	d03f      	beq.n	80072be <_vfiprintf_r+0x20e>
 800723e:	4b26      	ldr	r3, [pc, #152]	; (80072d8 <_vfiprintf_r+0x228>)
 8007240:	bb1b      	cbnz	r3, 800728a <_vfiprintf_r+0x1da>
 8007242:	9b03      	ldr	r3, [sp, #12]
 8007244:	3307      	adds	r3, #7
 8007246:	f023 0307 	bic.w	r3, r3, #7
 800724a:	3308      	adds	r3, #8
 800724c:	9303      	str	r3, [sp, #12]
 800724e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007250:	443b      	add	r3, r7
 8007252:	9309      	str	r3, [sp, #36]	; 0x24
 8007254:	e768      	b.n	8007128 <_vfiprintf_r+0x78>
 8007256:	fb0c 3202 	mla	r2, ip, r2, r3
 800725a:	460c      	mov	r4, r1
 800725c:	2001      	movs	r0, #1
 800725e:	e7a6      	b.n	80071ae <_vfiprintf_r+0xfe>
 8007260:	2300      	movs	r3, #0
 8007262:	3401      	adds	r4, #1
 8007264:	9305      	str	r3, [sp, #20]
 8007266:	4619      	mov	r1, r3
 8007268:	f04f 0c0a 	mov.w	ip, #10
 800726c:	4620      	mov	r0, r4
 800726e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007272:	3a30      	subs	r2, #48	; 0x30
 8007274:	2a09      	cmp	r2, #9
 8007276:	d903      	bls.n	8007280 <_vfiprintf_r+0x1d0>
 8007278:	2b00      	cmp	r3, #0
 800727a:	d0c6      	beq.n	800720a <_vfiprintf_r+0x15a>
 800727c:	9105      	str	r1, [sp, #20]
 800727e:	e7c4      	b.n	800720a <_vfiprintf_r+0x15a>
 8007280:	fb0c 2101 	mla	r1, ip, r1, r2
 8007284:	4604      	mov	r4, r0
 8007286:	2301      	movs	r3, #1
 8007288:	e7f0      	b.n	800726c <_vfiprintf_r+0x1bc>
 800728a:	ab03      	add	r3, sp, #12
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	462a      	mov	r2, r5
 8007290:	4b12      	ldr	r3, [pc, #72]	; (80072dc <_vfiprintf_r+0x22c>)
 8007292:	a904      	add	r1, sp, #16
 8007294:	4630      	mov	r0, r6
 8007296:	f7fd fd39 	bl	8004d0c <_printf_float>
 800729a:	4607      	mov	r7, r0
 800729c:	1c78      	adds	r0, r7, #1
 800729e:	d1d6      	bne.n	800724e <_vfiprintf_r+0x19e>
 80072a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072a2:	07d9      	lsls	r1, r3, #31
 80072a4:	d405      	bmi.n	80072b2 <_vfiprintf_r+0x202>
 80072a6:	89ab      	ldrh	r3, [r5, #12]
 80072a8:	059a      	lsls	r2, r3, #22
 80072aa:	d402      	bmi.n	80072b2 <_vfiprintf_r+0x202>
 80072ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072ae:	f7fe fbcf 	bl	8005a50 <__retarget_lock_release_recursive>
 80072b2:	89ab      	ldrh	r3, [r5, #12]
 80072b4:	065b      	lsls	r3, r3, #25
 80072b6:	f53f af1d 	bmi.w	80070f4 <_vfiprintf_r+0x44>
 80072ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072bc:	e71c      	b.n	80070f8 <_vfiprintf_r+0x48>
 80072be:	ab03      	add	r3, sp, #12
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	462a      	mov	r2, r5
 80072c4:	4b05      	ldr	r3, [pc, #20]	; (80072dc <_vfiprintf_r+0x22c>)
 80072c6:	a904      	add	r1, sp, #16
 80072c8:	4630      	mov	r0, r6
 80072ca:	f7fd ffc3 	bl	8005254 <_printf_i>
 80072ce:	e7e4      	b.n	800729a <_vfiprintf_r+0x1ea>
 80072d0:	08008044 	.word	0x08008044
 80072d4:	0800804e 	.word	0x0800804e
 80072d8:	08004d0d 	.word	0x08004d0d
 80072dc:	0800708b 	.word	0x0800708b
 80072e0:	0800804a 	.word	0x0800804a

080072e4 <__sflush_r>:
 80072e4:	898a      	ldrh	r2, [r1, #12]
 80072e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ea:	4605      	mov	r5, r0
 80072ec:	0710      	lsls	r0, r2, #28
 80072ee:	460c      	mov	r4, r1
 80072f0:	d458      	bmi.n	80073a4 <__sflush_r+0xc0>
 80072f2:	684b      	ldr	r3, [r1, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	dc05      	bgt.n	8007304 <__sflush_r+0x20>
 80072f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	dc02      	bgt.n	8007304 <__sflush_r+0x20>
 80072fe:	2000      	movs	r0, #0
 8007300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007306:	2e00      	cmp	r6, #0
 8007308:	d0f9      	beq.n	80072fe <__sflush_r+0x1a>
 800730a:	2300      	movs	r3, #0
 800730c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007310:	682f      	ldr	r7, [r5, #0]
 8007312:	6a21      	ldr	r1, [r4, #32]
 8007314:	602b      	str	r3, [r5, #0]
 8007316:	d032      	beq.n	800737e <__sflush_r+0x9a>
 8007318:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800731a:	89a3      	ldrh	r3, [r4, #12]
 800731c:	075a      	lsls	r2, r3, #29
 800731e:	d505      	bpl.n	800732c <__sflush_r+0x48>
 8007320:	6863      	ldr	r3, [r4, #4]
 8007322:	1ac0      	subs	r0, r0, r3
 8007324:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007326:	b10b      	cbz	r3, 800732c <__sflush_r+0x48>
 8007328:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800732a:	1ac0      	subs	r0, r0, r3
 800732c:	2300      	movs	r3, #0
 800732e:	4602      	mov	r2, r0
 8007330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007332:	6a21      	ldr	r1, [r4, #32]
 8007334:	4628      	mov	r0, r5
 8007336:	47b0      	blx	r6
 8007338:	1c43      	adds	r3, r0, #1
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	d106      	bne.n	800734c <__sflush_r+0x68>
 800733e:	6829      	ldr	r1, [r5, #0]
 8007340:	291d      	cmp	r1, #29
 8007342:	d82b      	bhi.n	800739c <__sflush_r+0xb8>
 8007344:	4a29      	ldr	r2, [pc, #164]	; (80073ec <__sflush_r+0x108>)
 8007346:	410a      	asrs	r2, r1
 8007348:	07d6      	lsls	r6, r2, #31
 800734a:	d427      	bmi.n	800739c <__sflush_r+0xb8>
 800734c:	2200      	movs	r2, #0
 800734e:	6062      	str	r2, [r4, #4]
 8007350:	04d9      	lsls	r1, r3, #19
 8007352:	6922      	ldr	r2, [r4, #16]
 8007354:	6022      	str	r2, [r4, #0]
 8007356:	d504      	bpl.n	8007362 <__sflush_r+0x7e>
 8007358:	1c42      	adds	r2, r0, #1
 800735a:	d101      	bne.n	8007360 <__sflush_r+0x7c>
 800735c:	682b      	ldr	r3, [r5, #0]
 800735e:	b903      	cbnz	r3, 8007362 <__sflush_r+0x7e>
 8007360:	6560      	str	r0, [r4, #84]	; 0x54
 8007362:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007364:	602f      	str	r7, [r5, #0]
 8007366:	2900      	cmp	r1, #0
 8007368:	d0c9      	beq.n	80072fe <__sflush_r+0x1a>
 800736a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800736e:	4299      	cmp	r1, r3
 8007370:	d002      	beq.n	8007378 <__sflush_r+0x94>
 8007372:	4628      	mov	r0, r5
 8007374:	f7ff f9f6 	bl	8006764 <_free_r>
 8007378:	2000      	movs	r0, #0
 800737a:	6360      	str	r0, [r4, #52]	; 0x34
 800737c:	e7c0      	b.n	8007300 <__sflush_r+0x1c>
 800737e:	2301      	movs	r3, #1
 8007380:	4628      	mov	r0, r5
 8007382:	47b0      	blx	r6
 8007384:	1c41      	adds	r1, r0, #1
 8007386:	d1c8      	bne.n	800731a <__sflush_r+0x36>
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d0c5      	beq.n	800731a <__sflush_r+0x36>
 800738e:	2b1d      	cmp	r3, #29
 8007390:	d001      	beq.n	8007396 <__sflush_r+0xb2>
 8007392:	2b16      	cmp	r3, #22
 8007394:	d101      	bne.n	800739a <__sflush_r+0xb6>
 8007396:	602f      	str	r7, [r5, #0]
 8007398:	e7b1      	b.n	80072fe <__sflush_r+0x1a>
 800739a:	89a3      	ldrh	r3, [r4, #12]
 800739c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073a0:	81a3      	strh	r3, [r4, #12]
 80073a2:	e7ad      	b.n	8007300 <__sflush_r+0x1c>
 80073a4:	690f      	ldr	r7, [r1, #16]
 80073a6:	2f00      	cmp	r7, #0
 80073a8:	d0a9      	beq.n	80072fe <__sflush_r+0x1a>
 80073aa:	0793      	lsls	r3, r2, #30
 80073ac:	680e      	ldr	r6, [r1, #0]
 80073ae:	bf08      	it	eq
 80073b0:	694b      	ldreq	r3, [r1, #20]
 80073b2:	600f      	str	r7, [r1, #0]
 80073b4:	bf18      	it	ne
 80073b6:	2300      	movne	r3, #0
 80073b8:	eba6 0807 	sub.w	r8, r6, r7
 80073bc:	608b      	str	r3, [r1, #8]
 80073be:	f1b8 0f00 	cmp.w	r8, #0
 80073c2:	dd9c      	ble.n	80072fe <__sflush_r+0x1a>
 80073c4:	6a21      	ldr	r1, [r4, #32]
 80073c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073c8:	4643      	mov	r3, r8
 80073ca:	463a      	mov	r2, r7
 80073cc:	4628      	mov	r0, r5
 80073ce:	47b0      	blx	r6
 80073d0:	2800      	cmp	r0, #0
 80073d2:	dc06      	bgt.n	80073e2 <__sflush_r+0xfe>
 80073d4:	89a3      	ldrh	r3, [r4, #12]
 80073d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073da:	81a3      	strh	r3, [r4, #12]
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073e0:	e78e      	b.n	8007300 <__sflush_r+0x1c>
 80073e2:	4407      	add	r7, r0
 80073e4:	eba8 0800 	sub.w	r8, r8, r0
 80073e8:	e7e9      	b.n	80073be <__sflush_r+0xda>
 80073ea:	bf00      	nop
 80073ec:	dfbffffe 	.word	0xdfbffffe

080073f0 <_fflush_r>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	690b      	ldr	r3, [r1, #16]
 80073f4:	4605      	mov	r5, r0
 80073f6:	460c      	mov	r4, r1
 80073f8:	b913      	cbnz	r3, 8007400 <_fflush_r+0x10>
 80073fa:	2500      	movs	r5, #0
 80073fc:	4628      	mov	r0, r5
 80073fe:	bd38      	pop	{r3, r4, r5, pc}
 8007400:	b118      	cbz	r0, 800740a <_fflush_r+0x1a>
 8007402:	6a03      	ldr	r3, [r0, #32]
 8007404:	b90b      	cbnz	r3, 800740a <_fflush_r+0x1a>
 8007406:	f7fe f8d3 	bl	80055b0 <__sinit>
 800740a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0f3      	beq.n	80073fa <_fflush_r+0xa>
 8007412:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007414:	07d0      	lsls	r0, r2, #31
 8007416:	d404      	bmi.n	8007422 <_fflush_r+0x32>
 8007418:	0599      	lsls	r1, r3, #22
 800741a:	d402      	bmi.n	8007422 <_fflush_r+0x32>
 800741c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800741e:	f7fe fb16 	bl	8005a4e <__retarget_lock_acquire_recursive>
 8007422:	4628      	mov	r0, r5
 8007424:	4621      	mov	r1, r4
 8007426:	f7ff ff5d 	bl	80072e4 <__sflush_r>
 800742a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800742c:	07da      	lsls	r2, r3, #31
 800742e:	4605      	mov	r5, r0
 8007430:	d4e4      	bmi.n	80073fc <_fflush_r+0xc>
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	059b      	lsls	r3, r3, #22
 8007436:	d4e1      	bmi.n	80073fc <_fflush_r+0xc>
 8007438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800743a:	f7fe fb09 	bl	8005a50 <__retarget_lock_release_recursive>
 800743e:	e7dd      	b.n	80073fc <_fflush_r+0xc>

08007440 <__swhatbuf_r>:
 8007440:	b570      	push	{r4, r5, r6, lr}
 8007442:	460c      	mov	r4, r1
 8007444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007448:	2900      	cmp	r1, #0
 800744a:	b096      	sub	sp, #88	; 0x58
 800744c:	4615      	mov	r5, r2
 800744e:	461e      	mov	r6, r3
 8007450:	da0d      	bge.n	800746e <__swhatbuf_r+0x2e>
 8007452:	89a3      	ldrh	r3, [r4, #12]
 8007454:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007458:	f04f 0100 	mov.w	r1, #0
 800745c:	bf0c      	ite	eq
 800745e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007462:	2340      	movne	r3, #64	; 0x40
 8007464:	2000      	movs	r0, #0
 8007466:	6031      	str	r1, [r6, #0]
 8007468:	602b      	str	r3, [r5, #0]
 800746a:	b016      	add	sp, #88	; 0x58
 800746c:	bd70      	pop	{r4, r5, r6, pc}
 800746e:	466a      	mov	r2, sp
 8007470:	f000 f848 	bl	8007504 <_fstat_r>
 8007474:	2800      	cmp	r0, #0
 8007476:	dbec      	blt.n	8007452 <__swhatbuf_r+0x12>
 8007478:	9901      	ldr	r1, [sp, #4]
 800747a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800747e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007482:	4259      	negs	r1, r3
 8007484:	4159      	adcs	r1, r3
 8007486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800748a:	e7eb      	b.n	8007464 <__swhatbuf_r+0x24>

0800748c <__smakebuf_r>:
 800748c:	898b      	ldrh	r3, [r1, #12]
 800748e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007490:	079d      	lsls	r5, r3, #30
 8007492:	4606      	mov	r6, r0
 8007494:	460c      	mov	r4, r1
 8007496:	d507      	bpl.n	80074a8 <__smakebuf_r+0x1c>
 8007498:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	6123      	str	r3, [r4, #16]
 80074a0:	2301      	movs	r3, #1
 80074a2:	6163      	str	r3, [r4, #20]
 80074a4:	b002      	add	sp, #8
 80074a6:	bd70      	pop	{r4, r5, r6, pc}
 80074a8:	ab01      	add	r3, sp, #4
 80074aa:	466a      	mov	r2, sp
 80074ac:	f7ff ffc8 	bl	8007440 <__swhatbuf_r>
 80074b0:	9900      	ldr	r1, [sp, #0]
 80074b2:	4605      	mov	r5, r0
 80074b4:	4630      	mov	r0, r6
 80074b6:	f7ff f9c9 	bl	800684c <_malloc_r>
 80074ba:	b948      	cbnz	r0, 80074d0 <__smakebuf_r+0x44>
 80074bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074c0:	059a      	lsls	r2, r3, #22
 80074c2:	d4ef      	bmi.n	80074a4 <__smakebuf_r+0x18>
 80074c4:	f023 0303 	bic.w	r3, r3, #3
 80074c8:	f043 0302 	orr.w	r3, r3, #2
 80074cc:	81a3      	strh	r3, [r4, #12]
 80074ce:	e7e3      	b.n	8007498 <__smakebuf_r+0xc>
 80074d0:	89a3      	ldrh	r3, [r4, #12]
 80074d2:	6020      	str	r0, [r4, #0]
 80074d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d8:	81a3      	strh	r3, [r4, #12]
 80074da:	9b00      	ldr	r3, [sp, #0]
 80074dc:	6163      	str	r3, [r4, #20]
 80074de:	9b01      	ldr	r3, [sp, #4]
 80074e0:	6120      	str	r0, [r4, #16]
 80074e2:	b15b      	cbz	r3, 80074fc <__smakebuf_r+0x70>
 80074e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074e8:	4630      	mov	r0, r6
 80074ea:	f000 f81d 	bl	8007528 <_isatty_r>
 80074ee:	b128      	cbz	r0, 80074fc <__smakebuf_r+0x70>
 80074f0:	89a3      	ldrh	r3, [r4, #12]
 80074f2:	f023 0303 	bic.w	r3, r3, #3
 80074f6:	f043 0301 	orr.w	r3, r3, #1
 80074fa:	81a3      	strh	r3, [r4, #12]
 80074fc:	89a3      	ldrh	r3, [r4, #12]
 80074fe:	431d      	orrs	r5, r3
 8007500:	81a5      	strh	r5, [r4, #12]
 8007502:	e7cf      	b.n	80074a4 <__smakebuf_r+0x18>

08007504 <_fstat_r>:
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	4d07      	ldr	r5, [pc, #28]	; (8007524 <_fstat_r+0x20>)
 8007508:	2300      	movs	r3, #0
 800750a:	4604      	mov	r4, r0
 800750c:	4608      	mov	r0, r1
 800750e:	4611      	mov	r1, r2
 8007510:	602b      	str	r3, [r5, #0]
 8007512:	f7f9 ffc0 	bl	8001496 <_fstat>
 8007516:	1c43      	adds	r3, r0, #1
 8007518:	d102      	bne.n	8007520 <_fstat_r+0x1c>
 800751a:	682b      	ldr	r3, [r5, #0]
 800751c:	b103      	cbz	r3, 8007520 <_fstat_r+0x1c>
 800751e:	6023      	str	r3, [r4, #0]
 8007520:	bd38      	pop	{r3, r4, r5, pc}
 8007522:	bf00      	nop
 8007524:	20004480 	.word	0x20004480

08007528 <_isatty_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d06      	ldr	r5, [pc, #24]	; (8007544 <_isatty_r+0x1c>)
 800752c:	2300      	movs	r3, #0
 800752e:	4604      	mov	r4, r0
 8007530:	4608      	mov	r0, r1
 8007532:	602b      	str	r3, [r5, #0]
 8007534:	f7f9 ffbf 	bl	80014b6 <_isatty>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d102      	bne.n	8007542 <_isatty_r+0x1a>
 800753c:	682b      	ldr	r3, [r5, #0]
 800753e:	b103      	cbz	r3, 8007542 <_isatty_r+0x1a>
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	20004480 	.word	0x20004480

08007548 <_sbrk_r>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	4d06      	ldr	r5, [pc, #24]	; (8007564 <_sbrk_r+0x1c>)
 800754c:	2300      	movs	r3, #0
 800754e:	4604      	mov	r4, r0
 8007550:	4608      	mov	r0, r1
 8007552:	602b      	str	r3, [r5, #0]
 8007554:	f7f9 ffc8 	bl	80014e8 <_sbrk>
 8007558:	1c43      	adds	r3, r0, #1
 800755a:	d102      	bne.n	8007562 <_sbrk_r+0x1a>
 800755c:	682b      	ldr	r3, [r5, #0]
 800755e:	b103      	cbz	r3, 8007562 <_sbrk_r+0x1a>
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	bd38      	pop	{r3, r4, r5, pc}
 8007564:	20004480 	.word	0x20004480

08007568 <__assert_func>:
 8007568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800756a:	4614      	mov	r4, r2
 800756c:	461a      	mov	r2, r3
 800756e:	4b09      	ldr	r3, [pc, #36]	; (8007594 <__assert_func+0x2c>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4605      	mov	r5, r0
 8007574:	68d8      	ldr	r0, [r3, #12]
 8007576:	b14c      	cbz	r4, 800758c <__assert_func+0x24>
 8007578:	4b07      	ldr	r3, [pc, #28]	; (8007598 <__assert_func+0x30>)
 800757a:	9100      	str	r1, [sp, #0]
 800757c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007580:	4906      	ldr	r1, [pc, #24]	; (800759c <__assert_func+0x34>)
 8007582:	462b      	mov	r3, r5
 8007584:	f000 f844 	bl	8007610 <fiprintf>
 8007588:	f000 f854 	bl	8007634 <abort>
 800758c:	4b04      	ldr	r3, [pc, #16]	; (80075a0 <__assert_func+0x38>)
 800758e:	461c      	mov	r4, r3
 8007590:	e7f3      	b.n	800757a <__assert_func+0x12>
 8007592:	bf00      	nop
 8007594:	20000068 	.word	0x20000068
 8007598:	0800805f 	.word	0x0800805f
 800759c:	0800806c 	.word	0x0800806c
 80075a0:	0800809a 	.word	0x0800809a

080075a4 <_calloc_r>:
 80075a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075a6:	fba1 2402 	umull	r2, r4, r1, r2
 80075aa:	b94c      	cbnz	r4, 80075c0 <_calloc_r+0x1c>
 80075ac:	4611      	mov	r1, r2
 80075ae:	9201      	str	r2, [sp, #4]
 80075b0:	f7ff f94c 	bl	800684c <_malloc_r>
 80075b4:	9a01      	ldr	r2, [sp, #4]
 80075b6:	4605      	mov	r5, r0
 80075b8:	b930      	cbnz	r0, 80075c8 <_calloc_r+0x24>
 80075ba:	4628      	mov	r0, r5
 80075bc:	b003      	add	sp, #12
 80075be:	bd30      	pop	{r4, r5, pc}
 80075c0:	220c      	movs	r2, #12
 80075c2:	6002      	str	r2, [r0, #0]
 80075c4:	2500      	movs	r5, #0
 80075c6:	e7f8      	b.n	80075ba <_calloc_r+0x16>
 80075c8:	4621      	mov	r1, r4
 80075ca:	f7fe f96d 	bl	80058a8 <memset>
 80075ce:	e7f4      	b.n	80075ba <_calloc_r+0x16>

080075d0 <__ascii_mbtowc>:
 80075d0:	b082      	sub	sp, #8
 80075d2:	b901      	cbnz	r1, 80075d6 <__ascii_mbtowc+0x6>
 80075d4:	a901      	add	r1, sp, #4
 80075d6:	b142      	cbz	r2, 80075ea <__ascii_mbtowc+0x1a>
 80075d8:	b14b      	cbz	r3, 80075ee <__ascii_mbtowc+0x1e>
 80075da:	7813      	ldrb	r3, [r2, #0]
 80075dc:	600b      	str	r3, [r1, #0]
 80075de:	7812      	ldrb	r2, [r2, #0]
 80075e0:	1e10      	subs	r0, r2, #0
 80075e2:	bf18      	it	ne
 80075e4:	2001      	movne	r0, #1
 80075e6:	b002      	add	sp, #8
 80075e8:	4770      	bx	lr
 80075ea:	4610      	mov	r0, r2
 80075ec:	e7fb      	b.n	80075e6 <__ascii_mbtowc+0x16>
 80075ee:	f06f 0001 	mvn.w	r0, #1
 80075f2:	e7f8      	b.n	80075e6 <__ascii_mbtowc+0x16>

080075f4 <__ascii_wctomb>:
 80075f4:	b149      	cbz	r1, 800760a <__ascii_wctomb+0x16>
 80075f6:	2aff      	cmp	r2, #255	; 0xff
 80075f8:	bf85      	ittet	hi
 80075fa:	238a      	movhi	r3, #138	; 0x8a
 80075fc:	6003      	strhi	r3, [r0, #0]
 80075fe:	700a      	strbls	r2, [r1, #0]
 8007600:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007604:	bf98      	it	ls
 8007606:	2001      	movls	r0, #1
 8007608:	4770      	bx	lr
 800760a:	4608      	mov	r0, r1
 800760c:	4770      	bx	lr
	...

08007610 <fiprintf>:
 8007610:	b40e      	push	{r1, r2, r3}
 8007612:	b503      	push	{r0, r1, lr}
 8007614:	4601      	mov	r1, r0
 8007616:	ab03      	add	r3, sp, #12
 8007618:	4805      	ldr	r0, [pc, #20]	; (8007630 <fiprintf+0x20>)
 800761a:	f853 2b04 	ldr.w	r2, [r3], #4
 800761e:	6800      	ldr	r0, [r0, #0]
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	f7ff fd45 	bl	80070b0 <_vfiprintf_r>
 8007626:	b002      	add	sp, #8
 8007628:	f85d eb04 	ldr.w	lr, [sp], #4
 800762c:	b003      	add	sp, #12
 800762e:	4770      	bx	lr
 8007630:	20000068 	.word	0x20000068

08007634 <abort>:
 8007634:	b508      	push	{r3, lr}
 8007636:	2006      	movs	r0, #6
 8007638:	f000 f82c 	bl	8007694 <raise>
 800763c:	2001      	movs	r0, #1
 800763e:	f7f9 fef7 	bl	8001430 <_exit>

08007642 <_raise_r>:
 8007642:	291f      	cmp	r1, #31
 8007644:	b538      	push	{r3, r4, r5, lr}
 8007646:	4604      	mov	r4, r0
 8007648:	460d      	mov	r5, r1
 800764a:	d904      	bls.n	8007656 <_raise_r+0x14>
 800764c:	2316      	movs	r3, #22
 800764e:	6003      	str	r3, [r0, #0]
 8007650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007654:	bd38      	pop	{r3, r4, r5, pc}
 8007656:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007658:	b112      	cbz	r2, 8007660 <_raise_r+0x1e>
 800765a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800765e:	b94b      	cbnz	r3, 8007674 <_raise_r+0x32>
 8007660:	4620      	mov	r0, r4
 8007662:	f000 f831 	bl	80076c8 <_getpid_r>
 8007666:	462a      	mov	r2, r5
 8007668:	4601      	mov	r1, r0
 800766a:	4620      	mov	r0, r4
 800766c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007670:	f000 b818 	b.w	80076a4 <_kill_r>
 8007674:	2b01      	cmp	r3, #1
 8007676:	d00a      	beq.n	800768e <_raise_r+0x4c>
 8007678:	1c59      	adds	r1, r3, #1
 800767a:	d103      	bne.n	8007684 <_raise_r+0x42>
 800767c:	2316      	movs	r3, #22
 800767e:	6003      	str	r3, [r0, #0]
 8007680:	2001      	movs	r0, #1
 8007682:	e7e7      	b.n	8007654 <_raise_r+0x12>
 8007684:	2400      	movs	r4, #0
 8007686:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800768a:	4628      	mov	r0, r5
 800768c:	4798      	blx	r3
 800768e:	2000      	movs	r0, #0
 8007690:	e7e0      	b.n	8007654 <_raise_r+0x12>
	...

08007694 <raise>:
 8007694:	4b02      	ldr	r3, [pc, #8]	; (80076a0 <raise+0xc>)
 8007696:	4601      	mov	r1, r0
 8007698:	6818      	ldr	r0, [r3, #0]
 800769a:	f7ff bfd2 	b.w	8007642 <_raise_r>
 800769e:	bf00      	nop
 80076a0:	20000068 	.word	0x20000068

080076a4 <_kill_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4d07      	ldr	r5, [pc, #28]	; (80076c4 <_kill_r+0x20>)
 80076a8:	2300      	movs	r3, #0
 80076aa:	4604      	mov	r4, r0
 80076ac:	4608      	mov	r0, r1
 80076ae:	4611      	mov	r1, r2
 80076b0:	602b      	str	r3, [r5, #0]
 80076b2:	f7f9 fead 	bl	8001410 <_kill>
 80076b6:	1c43      	adds	r3, r0, #1
 80076b8:	d102      	bne.n	80076c0 <_kill_r+0x1c>
 80076ba:	682b      	ldr	r3, [r5, #0]
 80076bc:	b103      	cbz	r3, 80076c0 <_kill_r+0x1c>
 80076be:	6023      	str	r3, [r4, #0]
 80076c0:	bd38      	pop	{r3, r4, r5, pc}
 80076c2:	bf00      	nop
 80076c4:	20004480 	.word	0x20004480

080076c8 <_getpid_r>:
 80076c8:	f7f9 be9a 	b.w	8001400 <_getpid>

080076cc <_init>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	bf00      	nop
 80076d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d2:	bc08      	pop	{r3}
 80076d4:	469e      	mov	lr, r3
 80076d6:	4770      	bx	lr

080076d8 <_fini>:
 80076d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076da:	bf00      	nop
 80076dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076de:	bc08      	pop	{r3}
 80076e0:	469e      	mov	lr, r3
 80076e2:	4770      	bx	lr
