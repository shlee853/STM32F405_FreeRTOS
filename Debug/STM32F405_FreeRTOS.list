
STM32F405_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012300  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011bc  08012490  08012490  00022490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801364c  0801364c  00031800  2**0
                  CONTENTS
  4 .ARM          00000008  0801364c  0801364c  0002364c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013654  08013654  00031800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013654  08013654  00023654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013658  08013658  00023658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a8  20000000  0801365c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmbss       00001430  200003a8  08013a04  000303a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .nzds         00000028  200017d8  08014e34  000317d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ccmram       00000000  10000000  10000000  00031800  2**0
                  CONTENTS
 12 .bss          000078d8  20001800  20001800  00031800  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  200090d8  200090d8  00031800  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00031800  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  00031830  2**0
                  CONTENTS, READONLY
 16 .debug_info   0002e17d  00000000  00000000  00031873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000802e  00000000  00000000  0005f9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002388  00000000  00000000  00067a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001ad5  00000000  00000000  00069da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000106fb  00000000  00000000  0006b87d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000306dc  00000000  00000000  0007bf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000e7023  00000000  00000000  000ac654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000a150  00000000  00000000  00193678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  0019d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001800 	.word	0x20001800
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012478 	.word	0x08012478

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001804 	.word	0x20001804
 80001cc:	08012478 	.word	0x08012478

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b9a4 	b.w	8000fc8 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f83a 	bl	8000d00 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_f2lz>:
 8000c98:	ee07 0a90 	vmov	s15, r0
 8000c9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca4:	d401      	bmi.n	8000caa <__aeabi_f2lz+0x12>
 8000ca6:	f000 b80b 	b.w	8000cc0 <__aeabi_f2ulz>
 8000caa:	eef1 7a67 	vneg.f32	s15, s15
 8000cae:	b508      	push	{r3, lr}
 8000cb0:	ee17 0a90 	vmov	r0, s15
 8000cb4:	f000 f804 	bl	8000cc0 <__aeabi_f2ulz>
 8000cb8:	4240      	negs	r0, r0
 8000cba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbe:	bd08      	pop	{r3, pc}

08000cc0 <__aeabi_f2ulz>:
 8000cc0:	b5d0      	push	{r4, r6, r7, lr}
 8000cc2:	f7ff fc51 	bl	8000568 <__aeabi_f2d>
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__aeabi_f2ulz+0x38>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4606      	mov	r6, r0
 8000ccc:	460f      	mov	r7, r1
 8000cce:	f7ff fca3 	bl	8000618 <__aeabi_dmul>
 8000cd2:	f000 f97b 	bl	8000fcc <__aeabi_d2uiz>
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	f7ff fc24 	bl	8000524 <__aeabi_ui2d>
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <__aeabi_f2ulz+0x3c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f7ff fc9a 	bl	8000618 <__aeabi_dmul>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4630      	mov	r0, r6
 8000cea:	4639      	mov	r1, r7
 8000cec:	f7ff fadc 	bl	80002a8 <__aeabi_dsub>
 8000cf0:	f000 f96c 	bl	8000fcc <__aeabi_d2uiz>
 8000cf4:	4621      	mov	r1, r4
 8000cf6:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf8:	3df00000 	.word	0x3df00000
 8000cfc:	41f00000 	.word	0x41f00000

08000d00 <__udivmoddi4>:
 8000d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d04:	9e08      	ldr	r6, [sp, #32]
 8000d06:	460d      	mov	r5, r1
 8000d08:	4604      	mov	r4, r0
 8000d0a:	460f      	mov	r7, r1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d14a      	bne.n	8000da6 <__udivmoddi4+0xa6>
 8000d10:	428a      	cmp	r2, r1
 8000d12:	4694      	mov	ip, r2
 8000d14:	d965      	bls.n	8000de2 <__udivmoddi4+0xe2>
 8000d16:	fab2 f382 	clz	r3, r2
 8000d1a:	b143      	cbz	r3, 8000d2e <__udivmoddi4+0x2e>
 8000d1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d20:	f1c3 0220 	rsb	r2, r3, #32
 8000d24:	409f      	lsls	r7, r3
 8000d26:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2a:	4317      	orrs	r7, r2
 8000d2c:	409c      	lsls	r4, r3
 8000d2e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d32:	fa1f f58c 	uxth.w	r5, ip
 8000d36:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d3a:	0c22      	lsrs	r2, r4, #16
 8000d3c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d40:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d44:	fb01 f005 	mul.w	r0, r1, r5
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	d90a      	bls.n	8000d62 <__udivmoddi4+0x62>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d54:	f080 811c 	bcs.w	8000f90 <__udivmoddi4+0x290>
 8000d58:	4290      	cmp	r0, r2
 8000d5a:	f240 8119 	bls.w	8000f90 <__udivmoddi4+0x290>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4462      	add	r2, ip
 8000d62:	1a12      	subs	r2, r2, r0
 8000d64:	b2a4      	uxth	r4, r4
 8000d66:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d6a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d6e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d72:	fb00 f505 	mul.w	r5, r0, r5
 8000d76:	42a5      	cmp	r5, r4
 8000d78:	d90a      	bls.n	8000d90 <__udivmoddi4+0x90>
 8000d7a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d82:	f080 8107 	bcs.w	8000f94 <__udivmoddi4+0x294>
 8000d86:	42a5      	cmp	r5, r4
 8000d88:	f240 8104 	bls.w	8000f94 <__udivmoddi4+0x294>
 8000d8c:	4464      	add	r4, ip
 8000d8e:	3802      	subs	r0, #2
 8000d90:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d94:	1b64      	subs	r4, r4, r5
 8000d96:	2100      	movs	r1, #0
 8000d98:	b11e      	cbz	r6, 8000da2 <__udivmoddi4+0xa2>
 8000d9a:	40dc      	lsrs	r4, r3
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e9c6 4300 	strd	r4, r3, [r6]
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0xbc>
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	f000 80ed 	beq.w	8000f8a <__udivmoddi4+0x28a>
 8000db0:	2100      	movs	r1, #0
 8000db2:	e9c6 0500 	strd	r0, r5, [r6]
 8000db6:	4608      	mov	r0, r1
 8000db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbc:	fab3 f183 	clz	r1, r3
 8000dc0:	2900      	cmp	r1, #0
 8000dc2:	d149      	bne.n	8000e58 <__udivmoddi4+0x158>
 8000dc4:	42ab      	cmp	r3, r5
 8000dc6:	d302      	bcc.n	8000dce <__udivmoddi4+0xce>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	f200 80f8 	bhi.w	8000fbe <__udivmoddi4+0x2be>
 8000dce:	1a84      	subs	r4, r0, r2
 8000dd0:	eb65 0203 	sbc.w	r2, r5, r3
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	4617      	mov	r7, r2
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d0e2      	beq.n	8000da2 <__udivmoddi4+0xa2>
 8000ddc:	e9c6 4700 	strd	r4, r7, [r6]
 8000de0:	e7df      	b.n	8000da2 <__udivmoddi4+0xa2>
 8000de2:	b902      	cbnz	r2, 8000de6 <__udivmoddi4+0xe6>
 8000de4:	deff      	udf	#255	; 0xff
 8000de6:	fab2 f382 	clz	r3, r2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f040 8090 	bne.w	8000f10 <__udivmoddi4+0x210>
 8000df0:	1a8a      	subs	r2, r1, r2
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e00:	fb07 2015 	mls	r0, r7, r5, r2
 8000e04:	0c22      	lsrs	r2, r4, #16
 8000e06:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e0a:	fb0e f005 	mul.w	r0, lr, r5
 8000e0e:	4290      	cmp	r0, r2
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x124>
 8000e12:	eb1c 0202 	adds.w	r2, ip, r2
 8000e16:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x122>
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2b8>
 8000e22:	4645      	mov	r5, r8
 8000e24:	1a12      	subs	r2, r2, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e2c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x14e>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x14c>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2c2>
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e56:	e79f      	b.n	8000d98 <__udivmoddi4+0x98>
 8000e58:	f1c1 0720 	rsb	r7, r1, #32
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e6e:	40fd      	lsrs	r5, r7
 8000e70:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e74:	4323      	orrs	r3, r4
 8000e76:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e7a:	fa1f fe8c 	uxth.w	lr, ip
 8000e7e:	fb09 5518 	mls	r5, r9, r8, r5
 8000e82:	0c1c      	lsrs	r4, r3, #16
 8000e84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e88:	fb08 f50e 	mul.w	r5, r8, lr
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e92:	fa00 f001 	lsl.w	r0, r0, r1
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b0>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2b4>
 8000ea4:	42a5      	cmp	r5, r4
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2b4>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4464      	add	r4, ip
 8000eb0:	1b64      	subs	r4, r4, r5
 8000eb2:	b29d      	uxth	r5, r3
 8000eb4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb8:	fb09 4413 	mls	r4, r9, r3, r4
 8000ebc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1da>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2ac>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2ac>
 8000ed6:	3b02      	subs	r3, #2
 8000ed8:	4464      	add	r4, ip
 8000eda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ede:	fba3 9502 	umull	r9, r5, r3, r2
 8000ee2:	eba4 040e 	sub.w	r4, r4, lr
 8000ee6:	42ac      	cmp	r4, r5
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46ae      	mov	lr, r5
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x29c>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x298>
 8000ef0:	b156      	cbz	r6, 8000f08 <__udivmoddi4+0x208>
 8000ef2:	ebb0 0208 	subs.w	r2, r0, r8
 8000ef6:	eb64 040e 	sbc.w	r4, r4, lr
 8000efa:	fa04 f707 	lsl.w	r7, r4, r7
 8000efe:	40ca      	lsrs	r2, r1
 8000f00:	40cc      	lsrs	r4, r1
 8000f02:	4317      	orrs	r7, r2
 8000f04:	e9c6 7400 	strd	r7, r4, [r6]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f10:	f1c3 0120 	rsb	r1, r3, #32
 8000f14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f18:	fa20 f201 	lsr.w	r2, r0, r1
 8000f1c:	fa25 f101 	lsr.w	r1, r5, r1
 8000f20:	409d      	lsls	r5, r3
 8000f22:	432a      	orrs	r2, r5
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f30:	fb07 1510 	mls	r5, r7, r0, r1
 8000f34:	0c11      	lsrs	r1, r2, #16
 8000f36:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f3a:	fb00 f50e 	mul.w	r5, r0, lr
 8000f3e:	428d      	cmp	r5, r1
 8000f40:	fa04 f403 	lsl.w	r4, r4, r3
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x258>
 8000f46:	eb1c 0101 	adds.w	r1, ip, r1
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b0>
 8000f50:	428d      	cmp	r5, r1
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b0>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4461      	add	r1, ip
 8000f58:	1b49      	subs	r1, r1, r5
 8000f5a:	b292      	uxth	r2, r2
 8000f5c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f60:	fb07 1115 	mls	r1, r7, r5, r1
 8000f64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f68:	fb05 f10e 	mul.w	r1, r5, lr
 8000f6c:	4291      	cmp	r1, r2
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x282>
 8000f70:	eb1c 0202 	adds.w	r2, ip, r2
 8000f74:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2a8>
 8000f7a:	4291      	cmp	r1, r2
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2a8>
 8000f7e:	3d02      	subs	r5, #2
 8000f80:	4462      	add	r2, ip
 8000f82:	1a52      	subs	r2, r2, r1
 8000f84:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0xfc>
 8000f8a:	4631      	mov	r1, r6
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xa2>
 8000f90:	4639      	mov	r1, r7
 8000f92:	e6e6      	b.n	8000d62 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e6fb      	b.n	8000d90 <__udivmoddi4+0x90>
 8000f98:	4548      	cmp	r0, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f0>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f0>
 8000fa8:	4645      	mov	r5, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x282>
 8000fac:	462b      	mov	r3, r5
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1da>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x258>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b0>
 8000fb8:	3d02      	subs	r5, #2
 8000fba:	4462      	add	r2, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x124>
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	e70a      	b.n	8000dd8 <__udivmoddi4+0xd8>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x14e>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <__aeabi_d2uiz>:
 8000fcc:	004a      	lsls	r2, r1, #1
 8000fce:	d211      	bcs.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fd4:	d211      	bcs.n	8000ffa <__aeabi_d2uiz+0x2e>
 8000fd6:	d50d      	bpl.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fe0:	d40e      	bmi.n	8001000 <__aeabi_d2uiz+0x34>
 8000fe2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fee:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff2:	4770      	bx	lr
 8000ff4:	f04f 0000 	mov.w	r0, #0
 8000ff8:	4770      	bx	lr
 8000ffa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ffe:	d102      	bne.n	8001006 <__aeabi_d2uiz+0x3a>
 8001000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr

0800100c <crtpInit>:

STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpTxTask, CRTP_TX_TASK_STACKSIZE);
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpRxTask, CRTP_RX_TASK_STACKSIZE);

void crtpInit(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af04      	add	r7, sp, #16
  if(isInit)
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <crtpInit+0x70>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d12d      	bne.n	8001076 <crtpInit+0x6a>
    return;

  txQueue = xQueueCreate(CRTP_TX_QUEUE_SIZE, sizeof(CRTPPacket));
 800101a:	2200      	movs	r2, #0
 800101c:	2120      	movs	r1, #32
 800101e:	2078      	movs	r0, #120	; 0x78
 8001020:	f00a fe18 	bl	800bc54 <xQueueGenericCreate>
 8001024:	4603      	mov	r3, r0
 8001026:	4a16      	ldr	r2, [pc, #88]	; (8001080 <crtpInit+0x74>)
 8001028:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(txQueue);
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <crtpInit+0x74>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a15      	ldr	r2, [pc, #84]	; (8001084 <crtpInit+0x78>)
 8001030:	4915      	ldr	r1, [pc, #84]	; (8001088 <crtpInit+0x7c>)
 8001032:	4618      	mov	r0, r3
 8001034:	f001 fe3c 	bl	8002cb0 <qmRegisterQueue>

  STATIC_MEM_TASK_CREATE(crtpTxTask, crtpTxTask, CRTP_TX_TASK_NAME, NULL, CRTP_TX_TASK_PRI);
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	461a      	mov	r2, r3
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <crtpInit+0x80>)
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <crtpInit+0x84>)
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	2302      	movs	r3, #2
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2300      	movs	r3, #0
 800104a:	4912      	ldr	r1, [pc, #72]	; (8001094 <crtpInit+0x88>)
 800104c:	4812      	ldr	r0, [pc, #72]	; (8001098 <crtpInit+0x8c>)
 800104e:	f00b fcb9 	bl	800c9c4 <xTaskCreateStatic>
  STATIC_MEM_TASK_CREATE(crtpRxTask, crtpRxTask, CRTP_RX_TASK_NAME, NULL, CRTP_RX_TASK_PRI);
 8001052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001056:	461a      	mov	r2, r3
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <crtpInit+0x90>)
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <crtpInit+0x94>)
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	2302      	movs	r3, #2
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2300      	movs	r3, #0
 8001066:	490f      	ldr	r1, [pc, #60]	; (80010a4 <crtpInit+0x98>)
 8001068:	480f      	ldr	r0, [pc, #60]	; (80010a8 <crtpInit+0x9c>)
 800106a:	f00b fcab 	bl	800c9c4 <xTaskCreateStatic>

  isInit = true;
 800106e:	4b03      	ldr	r3, [pc, #12]	; (800107c <crtpInit+0x70>)
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
 8001074:	e000      	b.n	8001078 <crtpInit+0x6c>
    return;
 8001076:	bf00      	nop
}
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2000181c 	.word	0x2000181c
 8001080:	20001834 	.word	0x20001834
 8001084:	08012490 	.word	0x08012490
 8001088:	08012498 	.word	0x08012498
 800108c:	200005a8 	.word	0x200005a8
 8001090:	200003a8 	.word	0x200003a8
 8001094:	080124b4 	.word	0x080124b4
 8001098:	080010ad 	.word	0x080010ad
 800109c:	20000a5c 	.word	0x20000a5c
 80010a0:	2000065c 	.word	0x2000065c
 80010a4:	080124bc 	.word	0x080124bc
 80010a8:	0800111d 	.word	0x0800111d

080010ac <crtpTxTask>:
{
  return (CRTP_TX_QUEUE_SIZE - uxQueueMessagesWaiting(txQueue));
}

void crtpTxTask(void *param)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  CRTPPacket p;

  while (true)
  {
    if (link != &nopLink)
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <crtpTxTask+0x60>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a15      	ldr	r2, [pc, #84]	; (8001110 <crtpTxTask+0x64>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d021      	beq.n	8001102 <crtpTxTask+0x56>
    {
      if (xQueueReceive(txQueue, &p, portMAX_DELAY) == pdTRUE)
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <crtpTxTask+0x68>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f107 0108 	add.w	r1, r7, #8
 80010c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ca:	4618      	mov	r0, r3
 80010cc:	f00b f87a 	bl	800c1c4 <xQueueReceive>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d1ee      	bne.n	80010b4 <crtpTxTask+0x8>
      {
        // Keep testing, if the link changes to USB it will go though
        while (link->sendPacket(&p) == false)
 80010d6:	e002      	b.n	80010de <crtpTxTask+0x32>
        {
          // Relaxation time
          vTaskDelay((10));
 80010d8:	200a      	movs	r0, #10
 80010da:	f00b fe2f 	bl	800cd3c <vTaskDelay>
        while (link->sendPacket(&p) == false)
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <crtpTxTask+0x60>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f107 0208 	add.w	r2, r7, #8
 80010e8:	4610      	mov	r0, r2
 80010ea:	4798      	blx	r3
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f2      	beq.n	80010d8 <crtpTxTask+0x2c>
        }
        stats.txCount++;
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <crtpTxTask+0x6c>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	3301      	adds	r3, #1
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <crtpTxTask+0x6c>)
 80010fa:	6053      	str	r3, [r2, #4]
        updateStats();
 80010fc:	f000 f87e 	bl	80011fc <updateStats>
 8001100:	e7d8      	b.n	80010b4 <crtpTxTask+0x8>
      }
    }
    else
    {
      vTaskDelay((10));
 8001102:	200a      	movs	r0, #10
 8001104:	f00b fe1a 	bl	800cd3c <vTaskDelay>
    if (link != &nopLink)
 8001108:	e7d4      	b.n	80010b4 <crtpTxTask+0x8>
 800110a:	bf00      	nop
 800110c:	20000014 	.word	0x20000014
 8001110:	20000000 	.word	0x20000000
 8001114:	20001834 	.word	0x20001834
 8001118:	20001820 	.word	0x20001820

0800111c <crtpRxTask>:
    }
  }
}

void crtpRxTask(void *param)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  CRTPPacket p;

  while (true)
  {
    if (link != &nopLink)
 8001124:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <crtpRxTask+0x9c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a24      	ldr	r2, [pc, #144]	; (80011bc <crtpRxTask+0xa0>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d040      	beq.n	80011b0 <crtpRxTask+0x94>
    {
      if (!link->receivePacket(&p))
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <crtpRxTask+0x9c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f107 0208 	add.w	r2, r7, #8
 8001138:	4610      	mov	r0, r2
 800113a:	4798      	blx	r3
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f0      	bne.n	8001124 <crtpRxTask+0x8>
      {
        if (queues[p.port])
 8001142:	7a7b      	ldrb	r3, [r7, #9]
 8001144:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001148:	b2db      	uxtb	r3, r3
 800114a:	461a      	mov	r2, r3
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <crtpRxTask+0xa4>)
 800114e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00e      	beq.n	8001174 <crtpRxTask+0x58>
        {
          // Block, since we should never drop a packet
          xQueueSend(queues[p.port], &p, portMAX_DELAY);
 8001156:	7a7b      	ldrb	r3, [r7, #9]
 8001158:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800115c:	b2db      	uxtb	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <crtpRxTask+0xa4>)
 8001162:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001166:	f107 0108 	add.w	r1, r7, #8
 800116a:	2300      	movs	r3, #0
 800116c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001170:	f00a fe02 	bl	800bd78 <xQueueGenericSend>
        }

        if (callbacks[p.port])
 8001174:	7a7b      	ldrb	r3, [r7, #9]
 8001176:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800117a:	b2db      	uxtb	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <crtpRxTask+0xa8>)
 8001180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00b      	beq.n	80011a0 <crtpRxTask+0x84>
        {
          callbacks[p.port](&p);
 8001188:	7a7b      	ldrb	r3, [r7, #9]
 800118a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800118e:	b2db      	uxtb	r3, r3
 8001190:	461a      	mov	r2, r3
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <crtpRxTask+0xa8>)
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	f107 0208 	add.w	r2, r7, #8
 800119c:	4610      	mov	r0, r2
 800119e:	4798      	blx	r3
        }

        stats.rxCount++;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <crtpRxTask+0xac>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	4a08      	ldr	r2, [pc, #32]	; (80011c8 <crtpRxTask+0xac>)
 80011a8:	6013      	str	r3, [r2, #0]
        updateStats();
 80011aa:	f000 f827 	bl	80011fc <updateStats>
 80011ae:	e7b9      	b.n	8001124 <crtpRxTask+0x8>
      }
    }
    else
    {
      vTaskDelay((10));
 80011b0:	200a      	movs	r0, #10
 80011b2:	f00b fdc3 	bl	800cd3c <vTaskDelay>
    if (link != &nopLink)
 80011b6:	e7b5      	b.n	8001124 <crtpRxTask+0x8>
 80011b8:	20000014 	.word	0x20000014
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20001838 	.word	0x20001838
 80011c4:	20001878 	.word	0x20001878
 80011c8:	20001820 	.word	0x20001820

080011cc <nopFunc>:

  link->setEnable(true);
}

static int nopFunc(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ENETDOWN;
 80011d0:	2373      	movs	r3, #115	; 0x73
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <clearStats>:

static void clearStats()
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  stats.rxCount = 0;
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <clearStats+0x1c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
  stats.txCount = 0;
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <clearStats+0x1c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20001820 	.word	0x20001820

080011fc <updateStats>:

static void updateStats()
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
  uint32_t now = xTaskGetTickCount();
 8001202:	f00b ff51 	bl	800d0a8 <xTaskGetTickCount>
 8001206:	6078      	str	r0, [r7, #4]
  if (now > stats.nextStatisticsTime) {
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <updateStats+0x9c>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	429a      	cmp	r2, r3
 8001210:	d93d      	bls.n	800128e <updateStats+0x92>
    float interval = now - stats.previousStatisticsTime;
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <updateStats+0x9c>)
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001222:	edc7 7a00 	vstr	s15, [r7]
    stats.rxRate = (uint16_t)(1000.0f * stats.rxCount / interval);
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <updateStats+0x9c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001232:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800129c <updateStats+0xa0>
 8001236:	ee67 6a87 	vmul.f32	s13, s15, s14
 800123a:	ed97 7a00 	vldr	s14, [r7]
 800123e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001246:	ee17 3a90 	vmov	r3, s15
 800124a:	b29a      	uxth	r2, r3
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <updateStats+0x9c>)
 800124e:	811a      	strh	r2, [r3, #8]
    stats.txRate = (uint16_t)(1000.0f * stats.txCount / interval);
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <updateStats+0x9c>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800125c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800129c <updateStats+0xa0>
 8001260:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001264:	ed97 7a00 	vldr	s14, [r7]
 8001268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800126c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001270:	ee17 3a90 	vmov	r3, s15
 8001274:	b29a      	uxth	r2, r3
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <updateStats+0x9c>)
 8001278:	815a      	strh	r2, [r3, #10]

    clearStats();
 800127a:	f7ff ffaf 	bl	80011dc <clearStats>
    stats.previousStatisticsTime = now;
 800127e:	4a06      	ldr	r2, [pc, #24]	; (8001298 <updateStats+0x9c>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6113      	str	r3, [r2, #16]
    stats.nextStatisticsTime = now + STATS_INTERVAL;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800128a:	4a03      	ldr	r2, [pc, #12]	; (8001298 <updateStats+0x9c>)
 800128c:	60d3      	str	r3, [r2, #12]
  }
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20001820 	.word	0x20001820
 800129c:	447a0000 	.word	0x447a0000

080012a0 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	601a      	str	r2, [r3, #0]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f023 0210 	bic.w	r2, r3, #16
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	605a      	str	r2, [r3, #4]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <LL_SPI_IsActiveFlag_RXNE+0x18>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b02      	cmp	r3, #2
 800131e:	d101      	bne.n	8001324 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	330c      	adds	r3, #12
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800134e:	b480      	push	{r7}
 8001350:	b085      	sub	sp, #20
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	330c      	adds	r3, #12
 800135e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	78fa      	ldrb	r2, [r7, #3]
 8001364:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800137e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4313      	orrs	r3, r2
 8001386:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800138a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4013      	ands	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40023800 	.word	0x40023800

080013a4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013b0:	4907      	ldr	r1, [pc, #28]	; (80013d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4013      	ands	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	40023800 	.word	0x40023800

080013d4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	619a      	str	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	041a      	lsls	r2, r3, #16
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	619a      	str	r2, [r3, #24]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b090      	sub	sp, #64	; 0x40
 8001414:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001416:	f107 0318 	add.w	r3, r7, #24
 800141a:	2228      	movs	r2, #40	; 0x28
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f00f f97e 	bl	8010720 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	463b      	mov	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]
 8001432:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001434:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001438:	f7ff ffb4 	bl	80013a4 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800143c:	2001      	movs	r0, #1
 800143e:	f7ff ff99 	bl	8001374 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001442:	2004      	movs	r0, #4
 8001444:	f7ff ff96 	bl	8001374 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001448:	23e0      	movs	r3, #224	; 0xe0
 800144a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800144c:	2302      	movs	r3, #2
 800144e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800145c:	2305      	movs	r3, #5
 800145e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	463b      	mov	r3, r7
 8001462:	4619      	mov	r1, r3
 8001464:	4825      	ldr	r0, [pc, #148]	; (80014fc <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001466:	f006 fe1a 	bl	800809e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800146e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001472:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001478:	2302      	movs	r3, #2
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800147c:	2301      	movs	r3, #1
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001486:	2310      	movs	r3, #16
 8001488:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800148a:	2300      	movs	r3, #0
 800148c:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001492:	230a      	movs	r3, #10
 8001494:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8001496:	f107 0318 	add.w	r3, r7, #24
 800149a:	4619      	mov	r1, r3
 800149c:	4818      	ldr	r0, [pc, #96]	; (8001500 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800149e:	f006 fea2 	bl	80081e6 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80014a2:	2100      	movs	r1, #0
 80014a4:	4816      	ldr	r0, [pc, #88]	; (8001500 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80014a6:	f7ff ff0b 	bl	80012c0 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80014aa:	2110      	movs	r1, #16
 80014ac:	4813      	ldr	r0, [pc, #76]	; (80014fc <ICM20602_GPIO_SPI_Initialization+0xec>)
 80014ae:	f7ff ff9f 	bl	80013f0 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80014b2:	2310      	movs	r3, #16
 80014b4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014b6:	2301      	movs	r3, #1
 80014b8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 80014c6:	463b      	mov	r3, r7
 80014c8:	4619      	mov	r1, r3
 80014ca:	480c      	ldr	r0, [pc, #48]	; (80014fc <ICM20602_GPIO_SPI_Initialization+0xec>)
 80014cc:	f006 fde7 	bl	800809e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80014d0:	2310      	movs	r3, #16
 80014d2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80014d8:	2301      	movs	r3, #1
 80014da:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 80014dc:	463b      	mov	r3, r7
 80014de:	4619      	mov	r1, r3
 80014e0:	4808      	ldr	r0, [pc, #32]	; (8001504 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80014e2:	f006 fddc 	bl	800809e <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 80014e6:	4806      	ldr	r0, [pc, #24]	; (8001500 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80014e8:	f7ff feda 	bl	80012a0 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 80014ec:	2110      	movs	r1, #16
 80014ee:	4803      	ldr	r0, [pc, #12]	; (80014fc <ICM20602_GPIO_SPI_Initialization+0xec>)
 80014f0:	f7ff ff70 	bl	80013d4 <LL_GPIO_SetOutputPin>
}
 80014f4:	bf00      	nop
 80014f6:	3740      	adds	r7, #64	; 0x40
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40020000 	.word	0x40020000
 8001500:	40013000 	.word	0x40013000
 8001504:	40020800 	.word	0x40020800

08001508 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8001512:	bf00      	nop
 8001514:	480c      	ldr	r0, [pc, #48]	; (8001548 <SPI1_SendByte+0x40>)
 8001516:	f7ff fef9 	bl	800130c <LL_SPI_IsActiveFlag_TXE>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f9      	beq.n	8001514 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	4619      	mov	r1, r3
 8001524:	4808      	ldr	r0, [pc, #32]	; (8001548 <SPI1_SendByte+0x40>)
 8001526:	f7ff ff12 	bl	800134e <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 800152a:	bf00      	nop
 800152c:	4806      	ldr	r0, [pc, #24]	; (8001548 <SPI1_SendByte+0x40>)
 800152e:	f7ff feda 	bl	80012e6 <LL_SPI_IsActiveFlag_RXNE>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f9      	beq.n	800152c <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001538:	4803      	ldr	r0, [pc, #12]	; (8001548 <SPI1_SendByte+0x40>)
 800153a:	f7ff fefa 	bl	8001332 <LL_SPI_ReceiveData8>
 800153e:	4603      	mov	r3, r0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40013000 	.word	0x40013000

0800154c <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8001556:	2110      	movs	r1, #16
 8001558:	480b      	ldr	r0, [pc, #44]	; (8001588 <ICM20602_Readbyte+0x3c>)
 800155a:	f7ff ff49 	bl	80013f0 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ffce 	bl	8001508 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff ffcb 	bl	8001508 <SPI1_SendByte>
 8001572:	4603      	mov	r3, r0
 8001574:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8001576:	2110      	movs	r1, #16
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <ICM20602_Readbyte+0x3c>)
 800157a:	f7ff ff2b 	bl	80013d4 <LL_GPIO_SetOutputPin>
	
	return val;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40020000 	.word	0x40020000

0800158c <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	460a      	mov	r2, r1
 8001596:	71fb      	strb	r3, [r7, #7]
 8001598:	4613      	mov	r3, r2
 800159a:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 800159c:	2110      	movs	r1, #16
 800159e:	480b      	ldr	r0, [pc, #44]	; (80015cc <ICM20602_Writebyte+0x40>)
 80015a0:	f7ff ff26 	bl	80013f0 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ffab 	bl	8001508 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80015b2:	79bb      	ldrb	r3, [r7, #6]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ffa7 	bl	8001508 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80015ba:	2110      	movs	r1, #16
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <ICM20602_Writebyte+0x40>)
 80015be:	f7ff ff09 	bl	80013d4 <LL_GPIO_SetOutputPin>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40020000 	.word	0x40020000

080015d0 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80015e4:	463b      	mov	r3, r7
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 80015ec:	f7ff ff10 	bl	8001410 <ICM20602_GPIO_SPI_Initialization>
	
	DEBUG_PRINT("Checking ICM20602...");
 80015f0:	4934      	ldr	r1, [pc, #208]	; (80016c4 <ICM20602_Initialization+0xf4>)
 80015f2:	4835      	ldr	r0, [pc, #212]	; (80016c8 <ICM20602_Initialization+0xf8>)
 80015f4:	f001 fafe 	bl	8002bf4 <eprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80015f8:	2075      	movs	r0, #117	; 0x75
 80015fa:	f7ff ffa7 	bl	800154c <ICM20602_Readbyte>
 80015fe:	4603      	mov	r3, r0
 8001600:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	2b12      	cmp	r3, #18
 8001606:	d106      	bne.n	8001616 <ICM20602_Initialization+0x46>
	{
		DEBUG_PRINT("\r\nICM20602 who_am_i = 0x%02x.................Pass\n", who_am_i);
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	461a      	mov	r2, r3
 800160c:	492f      	ldr	r1, [pc, #188]	; (80016cc <ICM20602_Initialization+0xfc>)
 800160e:	482e      	ldr	r0, [pc, #184]	; (80016c8 <ICM20602_Initialization+0xf8>)
 8001610:	f001 faf0 	bl	8002bf4 <eprintf>
 8001614:	e012      	b.n	800163c <ICM20602_Initialization+0x6c>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	2b12      	cmp	r3, #18
 800161a:	d00f      	beq.n	800163c <ICM20602_Initialization+0x6c>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 800161c:	2075      	movs	r0, #117	; 0x75
 800161e:	f7ff ff95 	bl	800154c <ICM20602_Readbyte>
 8001622:	4603      	mov	r3, r0
 8001624:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	2b12      	cmp	r3, #18
 800162a:	d007      	beq.n	800163c <ICM20602_Initialization+0x6c>
			DEBUG_PRINT( "ICM20602 is not found: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	2312      	movs	r3, #18
 8001630:	4927      	ldr	r1, [pc, #156]	; (80016d0 <ICM20602_Initialization+0x100>)
 8001632:	4825      	ldr	r0, [pc, #148]	; (80016c8 <ICM20602_Initialization+0xf8>)
 8001634:	f001 fade 	bl	8002bf4 <eprintf>
			return 1; //ERROR
 8001638:	2301      	movs	r3, #1
 800163a:	e03f      	b.n	80016bc <ICM20602_Initialization+0xec>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	206b      	movs	r0, #107	; 0x6b
 8001640:	f7ff ffa4 	bl	800158c <ICM20602_Writebyte>
	delay_us(5000000);
 8001644:	4823      	ldr	r0, [pc, #140]	; (80016d4 <ICM20602_Initialization+0x104>)
 8001646:	f002 f899 	bl	800377c <delay_us>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 800164a:	2101      	movs	r1, #1
 800164c:	206b      	movs	r0, #107	; 0x6b
 800164e:	f7ff ff9d 	bl	800158c <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	delay_us(5000000);
 8001652:	4820      	ldr	r0, [pc, #128]	; (80016d4 <ICM20602_Initialization+0x104>)
 8001654:	f002 f892 	bl	800377c <delay_us>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 8001658:	2100      	movs	r1, #0
 800165a:	206c      	movs	r0, #108	; 0x6c
 800165c:	f7ff ff96 	bl	800158c <ICM20602_Writebyte>
	delay_us(5000000);
 8001660:	481c      	ldr	r0, [pc, #112]	; (80016d4 <ICM20602_Initialization+0x104>)
 8001662:	f002 f88b 	bl	800377c <delay_us>

	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8001666:	2100      	movs	r1, #0
 8001668:	2019      	movs	r0, #25
 800166a:	f7ff ff8f 	bl	800158c <ICM20602_Writebyte>
	delay_us(5000000);
 800166e:	4819      	ldr	r0, [pc, #100]	; (80016d4 <ICM20602_Initialization+0x104>)
 8001670:	f002 f884 	bl	800377c <delay_us>
	
	// Gyro DLPF Config
//	ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001674:	2105      	movs	r1, #5
 8001676:	201a      	movs	r0, #26
 8001678:	f7ff ff88 	bl	800158c <ICM20602_Writebyte>
	delay_us(5000000);
 800167c:	4815      	ldr	r0, [pc, #84]	; (80016d4 <ICM20602_Initialization+0x104>)
 800167e:	f002 f87d 	bl	800377c <delay_us>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001682:	2118      	movs	r1, #24
 8001684:	201b      	movs	r0, #27
 8001686:	f7ff ff81 	bl	800158c <ICM20602_Writebyte>
	delay_us(5000000);
 800168a:	4812      	ldr	r0, [pc, #72]	; (80016d4 <ICM20602_Initialization+0x104>)
 800168c:	f002 f876 	bl	800377c <delay_us>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001690:	2118      	movs	r1, #24
 8001692:	201c      	movs	r0, #28
 8001694:	f7ff ff7a 	bl	800158c <ICM20602_Writebyte>
	delay_us(5000000);
 8001698:	480e      	ldr	r0, [pc, #56]	; (80016d4 <ICM20602_Initialization+0x104>)
 800169a:	f002 f86f 	bl	800377c <delay_us>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 800169e:	2103      	movs	r1, #3
 80016a0:	201d      	movs	r0, #29
 80016a2:	f7ff ff73 	bl	800158c <ICM20602_Writebyte>
	delay_us(5000000);
 80016a6:	480b      	ldr	r0, [pc, #44]	; (80016d4 <ICM20602_Initialization+0x104>)
 80016a8:	f002 f868 	bl	800377c <delay_us>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80016ac:	2101      	movs	r1, #1
 80016ae:	2038      	movs	r0, #56	; 0x38
 80016b0:	f7ff ff6c 	bl	800158c <ICM20602_Writebyte>
	delay_us(5000000);
 80016b4:	4807      	ldr	r0, [pc, #28]	; (80016d4 <ICM20602_Initialization+0x104>)
 80016b6:	f002 f861 	bl	800377c <delay_us>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	08012510 	.word	0x08012510
 80016c8:	08002365 	.word	0x08002365
 80016cc:	08012528 	.word	0x08012528
 80016d0:	0801255c 	.word	0x0801255c
 80016d4:	004c4b40 	.word	0x004c4b40

080016d8 <branch_to_bootloader>:
 * Based from the micropython machine_bootloader function.
 * 
 * @param r0 The register to utilize
 * @param bl_addr The bootloader address to jump to
 */
static void branch_to_bootloader(uint32_t r0, uint32_t bl_addr){
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
    __asm volatile (
 80016e2:	680a      	ldr	r2, [r1, #0]
 80016e4:	f382 8808 	msr	MSP, r2
 80016e8:	684a      	ldr	r2, [r1, #4]
 80016ea:	4710      	bx	r2
        "msr msp, r2\n"         // get stack pointer
        "ldr r2, [r1, #4]\n"    // get address of destination
        "bx r2\n"               // branch to bootloader
        );
    //unreachable code
    while(1);
 80016ec:	e7fe      	b.n	80016ec <branch_to_bootloader+0x14>
	...

080016f0 <check_enter_bootloader>:
}

void check_enter_bootloader(){
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
    uint64_t bl_state = *BL_STATE_PTR;
 80016f6:	491d      	ldr	r1, [pc, #116]	; (800176c <check_enter_bootloader+0x7c>)
 80016f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016fc:	e9c7 0100 	strd	r0, r1, [r7]
    //set to invalid for next boot
    *BL_STATE_PTR = BL_STATE_INVALID;
 8001700:	4c1a      	ldr	r4, [pc, #104]	; (800176c <check_enter_bootloader+0x7c>)
 8001702:	f04f 0000 	mov.w	r0, #0
 8001706:	f04f 0100 	mov.w	r1, #0
 800170a:	e9c4 0100 	strd	r0, r1, [r4]

    if(BL_STATE_GET_KEY(bl_state) == BL_STATE_KEY && (RCC->CSR & RCC_CSR_SFTRSTF)){
 800170e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001712:	f04f 0000 	mov.w	r0, #0
 8001716:	f04f 0100 	mov.w	r1, #0
 800171a:	0028      	movs	r0, r5
 800171c:	2100      	movs	r1, #0
 800171e:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8001722:	2300      	movs	r3, #0
 8001724:	4912      	ldr	r1, [pc, #72]	; (8001770 <check_enter_bootloader+0x80>)
 8001726:	4411      	add	r1, r2
 8001728:	430b      	orrs	r3, r1
 800172a:	d11a      	bne.n	8001762 <check_enter_bootloader+0x72>
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <check_enter_bootloader+0x84>)
 800172e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d014      	beq.n	8001762 <check_enter_bootloader+0x72>

        //remap memory to system flash
//        SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SystemFlash);
    		//위 함수를 아래 함수로 대체
        assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap_SystemFlash));
        SYSCFG->MEMRMP = SYSCFG_MemoryRemap_SystemFlash;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <check_enter_bootloader+0x88>)
 800173a:	2201      	movs	r2, #1
 800173c:	601a      	str	r2, [r3, #0]

        branch_to_bootloader(BL_STATE_GET_REG(bl_state), BL_STATE_GET_ADDR(bl_state));
 800173e:	683c      	ldr	r4, [r7, #0]
 8001740:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	000a      	movs	r2, r1
 800174e:	2300      	movs	r3, #0
 8001750:	4613      	mov	r3, r2
 8001752:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001756:	f023 030f 	bic.w	r3, r3, #15
 800175a:	4619      	mov	r1, r3
 800175c:	4620      	mov	r0, r4
 800175e:	f7ff ffbb 	bl	80016d8 <branch_to_bootloader>
    }
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bdb0      	pop	{r4, r5, r7, pc}
 800176a:	bf00      	nop
 800176c:	2001c000 	.word	0x2001c000
 8001770:	fffffa5b 	.word	0xfffffa5b
 8001774:	40023800 	.word	0x40023800
 8001778:	40013800 	.word	0x40013800

0800177c <ledSetForce>:
    ledSet(i, ledLastState[i]);
  }
}

static void ledSetForce(led_t led, bool value)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	460a      	mov	r2, r1
 8001786:	71fb      	strb	r3, [r7, #7]
 8001788:	4613      	mov	r3, r2
 800178a:	71bb      	strb	r3, [r7, #6]
  if (led > LED_NUM)
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	2b06      	cmp	r3, #6
 8001790:	d832      	bhi.n	80017f8 <ledSetForce+0x7c>
  {
    return;
  }

  if (led_polarity[led] == LED_POL_NEG)
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <ledSetForce+0x84>)
 8001796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d10d      	bne.n	80017ba <ledSetForce+0x3e>
  {
    value = !value;
 800179e:	79bb      	ldrb	r3, [r7, #6]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf14      	ite	ne
 80017a4:	2301      	movne	r3, #1
 80017a6:	2300      	moveq	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f083 0301 	eor.w	r3, r3, #1
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	71bb      	strb	r3, [r7, #6]
 80017b2:	79bb      	ldrb	r3, [r7, #6]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	71bb      	strb	r3, [r7, #6]
    syslinkSendPacket(&slp);
  }
  else
  {
  */
    if (value)
 80017ba:	79bb      	ldrb	r3, [r7, #6]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00d      	beq.n	80017dc <ledSetForce+0x60>
    {
      HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_SET);
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	4a10      	ldr	r2, [pc, #64]	; (8001804 <ledSetForce+0x88>)
 80017c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	4a0f      	ldr	r2, [pc, #60]	; (8001808 <ledSetForce+0x8c>)
 80017cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	2201      	movs	r2, #1
 80017d4:	4619      	mov	r1, r3
 80017d6:	f003 f9a9 	bl	8004b2c <HAL_GPIO_WritePin>
 80017da:	e00e      	b.n	80017fa <ledSetForce+0x7e>
    }
    else
    {
        HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_RESET);
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <ledSetForce+0x88>)
 80017e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	4a08      	ldr	r2, [pc, #32]	; (8001808 <ledSetForce+0x8c>)
 80017e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	2200      	movs	r2, #0
 80017f0:	4619      	mov	r1, r3
 80017f2:	f003 f99b 	bl	8004b2c <HAL_GPIO_WritePin>
 80017f6:	e000      	b.n	80017fa <ledSetForce+0x7e>
    return;
 80017f8:	bf00      	nop
    }

//  }

}
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000048 	.word	0x20000048
 8001804:	20000018 	.word	0x20000018
 8001808:	20000030 	.word	0x20000030

0800180c <ledInit>:
    ledSetSwitch(LED_LEDSEQ);
  }
}

void ledInit(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
  int i;

  if(isInit)
 8001812:	4b32      	ldr	r3, [pc, #200]	; (80018dc <ledInit+0xd0>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d15b      	bne.n	80018d2 <ledInit+0xc6>
    return;

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <ledInit+0xd4>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a2b      	ldr	r2, [pc, #172]	; (80018e0 <ledInit+0xd4>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <ledInit+0xd4>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <ledInit+0xd4>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a24      	ldr	r2, [pc, #144]	; (80018e0 <ledInit+0xd4>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <ledInit+0xd4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]

  for (i = 0; i < LED_NUM; i++)
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	e02a      	b.n	80018be <ledInit+0xb2>
  {
    //Initialize the LED pins as an output
	HAL_GPIO_WritePin(led_port[i], led_pin[i], GPIO_PIN_RESET);
 8001868:	4a1e      	ldr	r2, [pc, #120]	; (80018e4 <ledInit+0xd8>)
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001870:	4a1d      	ldr	r2, [pc, #116]	; (80018e8 <ledInit+0xdc>)
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	b29b      	uxth	r3, r3
 800187a:	2200      	movs	r2, #0
 800187c:	4619      	mov	r1, r3
 800187e:	f003 f955 	bl	8004b2c <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = led_pin[i];
 8001882:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <ledInit+0xdc>)
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188c:	2301      	movs	r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001890:	2301      	movs	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(led_port[i], &GPIO_InitStruct);
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <ledInit+0xd8>)
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a0:	f107 0208 	add.w	r2, r7, #8
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 ffa4 	bl	80047f4 <HAL_GPIO_Init>
    //Turn off the LED:s
    ledSet(i, 0);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 f81c 	bl	80018f0 <ledSet>
  for (i = 0; i < LED_NUM; i++)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	3301      	adds	r3, #1
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	ddd1      	ble.n	8001868 <ledInit+0x5c>
  }

  ledSwitchState = LED_LEDSEQ;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <ledInit+0xe0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
  isInit = true;
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <ledInit+0xd0>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	e000      	b.n	80018d4 <ledInit+0xc8>
    return;
 80018d2:	bf00      	nop
}
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200018b8 	.word	0x200018b8
 80018e0:	40023800 	.word	0x40023800
 80018e4:	20000018 	.word	0x20000018
 80018e8:	20000030 	.word	0x20000030
 80018ec:	200018c2 	.word	0x200018c2

080018f0 <ledSet>:
    //Turn on the LED:s
    ledSet(i, 1);
  }
}
void ledSet(led_t led, bool value)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	460a      	mov	r2, r1
 80018fa:	71fb      	strb	r3, [r7, #7]
 80018fc:	4613      	mov	r3, r2
 80018fe:	71bb      	strb	r3, [r7, #6]
  ASSERT(led < LED_NUM);
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	2b05      	cmp	r3, #5
 8001904:	d904      	bls.n	8001910 <ledSet+0x20>
 8001906:	22e4      	movs	r2, #228	; 0xe4
 8001908:	490a      	ldr	r1, [pc, #40]	; (8001934 <ledSet+0x44>)
 800190a:	480b      	ldr	r0, [pc, #44]	; (8001938 <ledSet+0x48>)
 800190c:	f000 fc12 	bl	8002134 <assertFail>
  if (ledSwitchState == LED_LEDSEQ)
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <ledSet+0x4c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d105      	bne.n	8001924 <ledSet+0x34>
  {
    ledSetForce(led, value);
 8001918:	79ba      	ldrb	r2, [r7, #6]
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff2c 	bl	800177c <ledSetForce>
  }

  ledLastState[led] = value;
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	79b9      	ldrb	r1, [r7, #6]
 8001928:	4a05      	ldr	r2, [pc, #20]	; (8001940 <ledSet+0x50>)
 800192a:	54d1      	strb	r1, [r2, r3]
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	0801258c 	.word	0x0801258c
 8001938:	080125a8 	.word	0x080125a8
 800193c:	200018c2 	.word	0x200018c2
 8001940:	200018bc 	.word	0x200018bc

08001944 <ledShowFaultPattern>:

void ledShowFaultPattern(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  ledSet(LED_GREEN_L, 0);
 8001948:	2100      	movs	r1, #0
 800194a:	2001      	movs	r0, #1
 800194c:	f7ff ffd0 	bl	80018f0 <ledSet>
  ledSet(LED_GREEN_R, 0);
 8001950:	2100      	movs	r1, #0
 8001952:	2003      	movs	r0, #3
 8001954:	f7ff ffcc 	bl	80018f0 <ledSet>
  ledSet(LED_RED_L, 1);
 8001958:	2101      	movs	r1, #1
 800195a:	2002      	movs	r0, #2
 800195c:	f7ff ffc8 	bl	80018f0 <ledSet>
  ledSet(LED_RED_R, 1);
 8001960:	2101      	movs	r1, #1
 8001962:	2004      	movs	r0, #4
 8001964:	f7ff ffc4 	bl	80018f0 <ledSet>
  ledSet(LED_BLUE_L, 0);
 8001968:	2100      	movs	r1, #0
 800196a:	2000      	movs	r0, #0
 800196c:	f7ff ffc0 	bl	80018f0 <ledSet>
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}

08001974 <systemLaunch>:
/* Private functions */
static void systemTask(void *arg);

/* Public functions */
void systemLaunch(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 800197a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800197e:	461a      	mov	r2, r3
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <systemLaunch+0x30>)
 8001982:	9302      	str	r3, [sp, #8]
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <systemLaunch+0x34>)
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	2302      	movs	r3, #2
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2300      	movs	r3, #0
 800198e:	4907      	ldr	r1, [pc, #28]	; (80019ac <systemLaunch+0x38>)
 8001990:	4807      	ldr	r0, [pc, #28]	; (80019b0 <systemLaunch+0x3c>)
 8001992:	f00b f817 	bl	800c9c4 <xTaskCreateStatic>
  DEBUG_PRINT("[TASK] systemTask is running!\n");
 8001996:	4907      	ldr	r1, [pc, #28]	; (80019b4 <systemLaunch+0x40>)
 8001998:	4807      	ldr	r0, [pc, #28]	; (80019b8 <systemLaunch+0x44>)
 800199a:	f001 f92b 	bl	8002bf4 <eprintf>

}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000b10 	.word	0x20000b10
 80019a8:	200018cc 	.word	0x200018cc
 80019ac:	080125d0 	.word	0x080125d0
 80019b0:	080019bd 	.word	0x080019bd
 80019b4:	080125d8 	.word	0x080125d8
 80019b8:	08002365 	.word	0x08002365

080019bc <systemTask>:


/* Private functions implementation */

void systemTask(void *arg)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  bool pass = true;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]


  uint32_t ld = SysTick->LOAD;
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <systemTask+0x84>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	60bb      	str	r3, [r7, #8]
  time1 = DWT->CYCCNT;
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <systemTask+0x88>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <systemTask+0x8c>)
 80019d4:	6013      	str	r3, [r2, #0]
  delay_us(1000);	// 1ms
 80019d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019da:	f001 fecf 	bl	800377c <delay_us>
  time2 = DWT->CYCCNT;
 80019de:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <systemTask+0x88>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4a1a      	ldr	r2, [pc, #104]	; (8001a4c <systemTask+0x90>)
 80019e4:	6013      	str	r3, [r2, #0]
  DEBUG_PRINT("delay = %.2f(us)\n",(float)(time2-time1)/CLOCK_PER_USEC);
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <systemTask+0x90>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <systemTask+0x8c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	ee07 3a90 	vmov	s15, r3
 80019f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001a50 <systemTask+0x94>
 80019fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a00:	ee16 0a90 	vmov	r0, s13
 8001a04:	f7fe fdb0 	bl	8000568 <__aeabi_f2d>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4911      	ldr	r1, [pc, #68]	; (8001a54 <systemTask+0x98>)
 8001a0e:	4812      	ldr	r0, [pc, #72]	; (8001a58 <systemTask+0x9c>)
 8001a10:	f001 f8f0 	bl	8002bf4 <eprintf>


  ledInit();
 8001a14:	f7ff fefa 	bl	800180c <ledInit>
  ledSet(CHG_LED, SET);
 8001a18:	2101      	movs	r1, #1
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff ff68 	bl	80018f0 <ledSet>


#ifdef CONFIG_DEBUG_QUEUE_MONITOR
  queueMonitorInit();
 8001a20:	f001 f8fe 	bl	8002c20 <queueMonitorInit>
#endif

#ifdef CONFIG_DEBUG_QUEUE_MONITOR
  uartInit();
 8001a24:	f000 fc04 	bl	8002230 <uartInit>
  uartDmaInit();
 8001a28:	f000 fc20 	bl	800226c <uartDmaInit>
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
#endif

  ICM20602_Initialization();	// 여기서 일정 시간 지연이 있어야 STM32 VCP 포트가 활성화됨 원인파악중
 8001a2c:	f7ff fdd0 	bl	80015d0 <ICM20602_Initialization>

  passthroughInit();	// Create passthrough task
 8001a30:	f000 f9fa 	bl	8001e28 <passthroughInit>

  systemInit();
 8001a34:	f000 f834 	bl	8001aa0 <systemInit>
//  commInit();
//  commanderInit();

}
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	e000e010 	.word	0xe000e010
 8001a44:	e0001000 	.word	0xe0001000
 8001a48:	200018c4 	.word	0x200018c4
 8001a4c:	200018c8 	.word	0x200018c8
 8001a50:	42900000 	.word	0x42900000
 8001a54:	080125fc 	.word	0x080125fc
 8001a58:	08002365 	.word	0x08002365

08001a5c <systemWaitStart>:



void systemWaitStart(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  //This permits to guarantee that the system task is initialized before other
  //tasks waits for the start event.
  while(!isInit)
 8001a60:	e002      	b.n	8001a68 <systemWaitStart+0xc>
    vTaskDelay(2);
 8001a62:	2002      	movs	r0, #2
 8001a64:	f00b f96a 	bl	800cd3c <vTaskDelay>
  while(!isInit)
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <systemWaitStart+0x3c>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	f083 0301 	eor.w	r3, r3, #1
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f5      	bne.n	8001a62 <systemWaitStart+0x6>

  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <systemWaitStart+0x40>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f00a fc80 	bl	800c384 <xQueueSemaphoreTake>
  xSemaphoreGive(canStartMutex);
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <systemWaitStart+0x40>)
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	f00a f973 	bl	800bd78 <xQueueGenericSend>
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200018c3 	.word	0x200018c3
 8001a9c:	20001ccc 	.word	0x20001ccc

08001aa0 <systemInit>:



// This must be the first module to be initialized!
void systemInit(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af02      	add	r7, sp, #8
  if(isInit)
 8001aa6:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <systemInit+0xe0>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d164      	bne.n	8001b78 <systemInit+0xd8>
    return;

  canStartMutex = xSemaphoreCreateMutexStatic(&canStartMutexBuffer);
 8001aae:	4935      	ldr	r1, [pc, #212]	; (8001b84 <systemInit+0xe4>)
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f00a f946 	bl	800bd42 <xQueueCreateMutexStatic>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4a33      	ldr	r2, [pc, #204]	; (8001b88 <systemInit+0xe8>)
 8001aba:	6013      	str	r3, [r2, #0]
  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 8001abc:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <systemInit+0xe8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f00a fc5d 	bl	800c384 <xQueueSemaphoreTake>

  usblinkInit();
 8001aca:	f000 f967 	bl	8001d9c <usblinkInit>
  DEBUG_PRINT("[TASK] usblinkTask is running!\n");
 8001ace:	492f      	ldr	r1, [pc, #188]	; (8001b8c <systemInit+0xec>)
 8001ad0:	482f      	ldr	r0, [pc, #188]	; (8001b90 <systemInit+0xf0>)
 8001ad2:	f001 f88f 	bl	8002bf4 <eprintf>

  sysLoadInit();
 8001ad6:	f001 f9c3 	bl	8002e60 <sysLoadInit>
  DEBUG_PRINT("sysLoadMonitorTimer is Initialized\n");
 8001ada:	492e      	ldr	r1, [pc, #184]	; (8001b94 <systemInit+0xf4>)
 8001adc:	482c      	ldr	r0, [pc, #176]	; (8001b90 <systemInit+0xf0>)
 8001ade:	f001 f889 	bl	8002bf4 <eprintf>
#if CONFIG_ENABLE_CPX
//  cpxlinkInit();
#endif

  /* Initialized here so that DEBUG_PRINT (buffered) can be used early */
  debugInit();
 8001ae2:	f000 fb9d 	bl	8002220 <debugInit>
  crtpInit();
 8001ae6:	f7ff fa91 	bl	800100c <crtpInit>
  DEBUG_PRINT("[TASK] crtpTxTask is running!\n");
 8001aea:	492b      	ldr	r1, [pc, #172]	; (8001b98 <systemInit+0xf8>)
 8001aec:	4828      	ldr	r0, [pc, #160]	; (8001b90 <systemInit+0xf0>)
 8001aee:	f001 f881 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("[TASK] crtpRxTask is running!\n");
 8001af2:	492a      	ldr	r1, [pc, #168]	; (8001b9c <systemInit+0xfc>)
 8001af4:	4826      	ldr	r0, [pc, #152]	; (8001b90 <systemInit+0xf0>)
 8001af6:	f001 f87d 	bl	8002bf4 <eprintf>

  consoleInit();
 8001afa:	f000 fb61 	bl	80021c0 <consoleInit>

  DEBUG_PRINT("%s is up and running!\n", platformConfigGetDeviceTypeName());
 8001afe:	f000 faa5 	bl	800204c <platformConfigGetDeviceTypeName>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461a      	mov	r2, r3
 8001b06:	4926      	ldr	r1, [pc, #152]	; (8001ba0 <systemInit+0x100>)
 8001b08:	4821      	ldr	r0, [pc, #132]	; (8001b90 <systemInit+0xf0>)
 8001b0a:	f001 f873 	bl	8002bf4 <eprintf>

  if (V_PRODUCTION_RELEASE) {
 8001b0e:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <systemInit+0x104>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d007      	beq.n	8001b26 <systemInit+0x86>
    DEBUG_PRINT("Production release %s\n", V_STAG);
 8001b16:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <systemInit+0x108>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4923      	ldr	r1, [pc, #140]	; (8001bac <systemInit+0x10c>)
 8001b1e:	481c      	ldr	r0, [pc, #112]	; (8001b90 <systemInit+0xf0>)
 8001b20:	f001 f868 	bl	8002bf4 <eprintf>
 8001b24:	e014      	b.n	8001b50 <systemInit+0xb0>
  } else {
    DEBUG_PRINT("Build %s:%s (%s) %s\n", V_SLOCAL_REVISION,
 8001b26:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <systemInit+0x110>)
 8001b28:	6819      	ldr	r1, [r3, #0]
 8001b2a:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <systemInit+0x114>)
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <systemInit+0x108>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a21      	ldr	r2, [pc, #132]	; (8001bb8 <systemInit+0x118>)
 8001b34:	7812      	ldrb	r2, [r2, #0]
 8001b36:	2a00      	cmp	r2, #0
 8001b38:	d001      	beq.n	8001b3e <systemInit+0x9e>
 8001b3a:	4a20      	ldr	r2, [pc, #128]	; (8001bbc <systemInit+0x11c>)
 8001b3c:	e000      	b.n	8001b40 <systemInit+0xa0>
 8001b3e:	4a20      	ldr	r2, [pc, #128]	; (8001bc0 <systemInit+0x120>)
 8001b40:	9201      	str	r2, [sp, #4]
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	4603      	mov	r3, r0
 8001b46:	460a      	mov	r2, r1
 8001b48:	491e      	ldr	r1, [pc, #120]	; (8001bc4 <systemInit+0x124>)
 8001b4a:	4811      	ldr	r0, [pc, #68]	; (8001b90 <systemInit+0xf0>)
 8001b4c:	f001 f852 	bl	8002bf4 <eprintf>
                V_SREVISION, V_STAG, (V_MODIFIED)?"MODIFIED":"CLEAN");
  }
  DEBUG_PRINT("I am 0x%08X%08X%08X and I have %dKB of flash!\n",
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <systemInit+0x128>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <systemInit+0x12c>)
 8001b56:	6819      	ldr	r1, [r3, #0]
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <systemInit+0x130>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	481d      	ldr	r0, [pc, #116]	; (8001bd4 <systemInit+0x134>)
 8001b5e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8001b62:	9001      	str	r0, [sp, #4]
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	460b      	mov	r3, r1
 8001b68:	491b      	ldr	r1, [pc, #108]	; (8001bd8 <systemInit+0x138>)
 8001b6a:	4809      	ldr	r0, [pc, #36]	; (8001b90 <systemInit+0xf0>)
 8001b6c:	f001 f842 	bl	8002bf4 <eprintf>

#ifdef CONFIG_APP_ENABLE
  appInit();
#endif
*/
  isInit = true;
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <systemInit+0xe0>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	701a      	strb	r2, [r3, #0]
 8001b76:	e000      	b.n	8001b7a <systemInit+0xda>
    return;
 8001b78:	bf00      	nop
}
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200018c3 	.word	0x200018c3
 8001b84:	20001cd0 	.word	0x20001cd0
 8001b88:	20001ccc 	.word	0x20001ccc
 8001b8c:	08012614 	.word	0x08012614
 8001b90:	08002365 	.word	0x08002365
 8001b94:	0801263c 	.word	0x0801263c
 8001b98:	08012668 	.word	0x08012668
 8001b9c:	0801268c 	.word	0x0801268c
 8001ba0:	080126b0 	.word	0x080126b0
 8001ba4:	080132b5 	.word	0x080132b5
 8001ba8:	200000dc 	.word	0x200000dc
 8001bac:	080126cc 	.word	0x080126cc
 8001bb0:	200000d4 	.word	0x200000d4
 8001bb4:	200000d8 	.word	0x200000d8
 8001bb8:	080132b4 	.word	0x080132b4
 8001bbc:	080126e8 	.word	0x080126e8
 8001bc0:	080126f4 	.word	0x080126f4
 8001bc4:	080126fc 	.word	0x080126fc
 8001bc8:	1fff7a18 	.word	0x1fff7a18
 8001bcc:	1fff7a14 	.word	0x1fff7a14
 8001bd0:	1fff7a10 	.word	0x1fff7a10
 8001bd4:	1fff7a22 	.word	0x1fff7a22
 8001bd8:	08012718 	.word	0x08012718

08001bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	db0b      	blt.n	8001c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	f003 021f 	and.w	r2, r3, #31
 8001bf4:	4907      	ldr	r1, [pc, #28]	; (8001c14 <__NVIC_EnableIRQ+0x38>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	095b      	lsrs	r3, r3, #5
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000e100 	.word	0xe000e100

08001c18 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db12      	blt.n	8001c50 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	f003 021f 	and.w	r2, r3, #31
 8001c30:	490a      	ldr	r1, [pc, #40]	; (8001c5c <__NVIC_DisableIRQ+0x44>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	2001      	movs	r0, #1
 8001c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3e:	3320      	adds	r3, #32
 8001c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c44:	f3bf 8f4f 	dsb	sy
}
 8001c48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c4a:	f3bf 8f6f 	isb	sy
}
 8001c4e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000e100 	.word	0xe000e100

08001c60 <usbGetDataBlocking>:
};
*/


bool usbGetDataBlocking(USBPacket *in)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  while (xQueueReceive(usbDataRx, in, portMAX_DELAY) != pdTRUE); // Don't return until we get some data on the USB
 8001c68:	bf00      	nop
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <usbGetDataBlocking+0x50>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f00a faa5 	bl	800c1c4 <xQueueReceive>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d1f4      	bne.n	8001c6a <usbGetDataBlocking+0xa>

  // Disabling USB interrupt to make sure we can check and re-enable the endpoint
  // if it is not currently accepting data (ie. can happen if the RX queue was full)
  NVIC_DisableIRQ(OTG_FS_IRQn);
 8001c80:	2043      	movs	r0, #67	; 0x43
 8001c82:	f7ff ffc9 	bl	8001c18 <__NVIC_DisableIRQ>
  if (rxStopped) {
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <usbGetDataBlocking+0x54>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <usbGetDataBlocking+0x40>
	  USBD_LL_PrepareReceive(&hUsbDeviceFS, CF_OUT_EP, (uint8_t*)(inPacket.data), USB_RX_TX_PACKET_SIZE);
 8001c8e:	2340      	movs	r3, #64	; 0x40
 8001c90:	4a09      	ldr	r2, [pc, #36]	; (8001cb8 <usbGetDataBlocking+0x58>)
 8001c92:	2101      	movs	r1, #1
 8001c94:	4809      	ldr	r0, [pc, #36]	; (8001cbc <usbGetDataBlocking+0x5c>)
 8001c96:	f00d fdef 	bl	800f878 <USBD_LL_PrepareReceive>
    rxStopped = false;
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <usbGetDataBlocking+0x54>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
  }
  NVIC_EnableIRQ(OTG_FS_IRQn);
 8001ca0:	2043      	movs	r0, #67	; 0x43
 8001ca2:	f7ff ff9b 	bl	8001bdc <__NVIC_EnableIRQ>

  return true;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20001d24 	.word	0x20001d24
 8001cb4:	20000060 	.word	0x20000060
 8001cb8:	20001d2d 	.word	0x20001d2d
 8001cbc:	200073ac 	.word	0x200073ac

08001cc0 <usbInit>:

void usbInit(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af02      	add	r7, sp, #8

//  MX_USB_DEVICE_Init();		// HAL 드라이버에서 생성됨
  usbDataRx = STATIC_MEM_QUEUE_CREATE(usbDataRx);
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	4618      	mov	r0, r3
 8001cca:	2341      	movs	r3, #65	; 0x41
 8001ccc:	4619      	mov	r1, r3
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <usbInit+0x64>)
 8001cd4:	4a14      	ldr	r2, [pc, #80]	; (8001d28 <usbInit+0x68>)
 8001cd6:	f009 ff45 	bl	800bb64 <xQueueGenericCreateStatic>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4a13      	ldr	r2, [pc, #76]	; (8001d2c <usbInit+0x6c>)
 8001cde:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataRx);
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <usbInit+0x6c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <usbInit+0x70>)
 8001ce6:	4913      	ldr	r1, [pc, #76]	; (8001d34 <usbInit+0x74>)
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 ffe1 	bl	8002cb0 <qmRegisterQueue>
  usbDataTx = STATIC_MEM_QUEUE_CREATE(usbDataTx);
 8001cee:	2301      	movs	r3, #1
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	2341      	movs	r3, #65	; 0x41
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <usbInit+0x78>)
 8001cfc:	4a0f      	ldr	r2, [pc, #60]	; (8001d3c <usbInit+0x7c>)
 8001cfe:	f009 ff31 	bl	800bb64 <xQueueGenericCreateStatic>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <usbInit+0x80>)
 8001d06:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataTx);
 8001d08:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <usbInit+0x80>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	; (8001d44 <usbInit+0x84>)
 8001d0e:	4909      	ldr	r1, [pc, #36]	; (8001d34 <usbInit+0x74>)
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 ffcd 	bl	8002cb0 <qmRegisterQueue>

  isInit = true;
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <usbInit+0x88>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000d0c 	.word	0x20000d0c
 8001d28:	20000bc4 	.word	0x20000bc4
 8001d2c:	20001d24 	.word	0x20001d24
 8001d30:	0801274c 	.word	0x0801274c
 8001d34:	08012758 	.word	0x08012758
 8001d38:	20000da0 	.word	0x20000da0
 8001d3c:	20000d5c 	.word	0x20000d5c
 8001d40:	20001d28 	.word	0x20001d28
 8001d44:	08012774 	.word	0x08012774
 8001d48:	20001d20 	.word	0x20001d20

08001d4c <usblinkTask>:
 * and so much other cool things that I don't have time for it ...)
 */
static USBPacket usbIn;
static CRTPPacket p;
static void usblinkTask(void *param)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  while(1)
  {
    // Fetch a USB packet off the queue
    usbGetDataBlocking(&usbIn);
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <usblinkTask+0x3c>)
 8001d56:	f7ff ff83 	bl	8001c60 <usbGetDataBlocking>
    p.size = usbIn.size - 1;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <usblinkTask+0x3c>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <usblinkTask+0x40>)
 8001d64:	701a      	strb	r2, [r3, #0]
    memcpy(&p.raw, usbIn.data, usbIn.size);
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <usblinkTask+0x3c>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4908      	ldr	r1, [pc, #32]	; (8001d90 <usblinkTask+0x44>)
 8001d6e:	4809      	ldr	r0, [pc, #36]	; (8001d94 <usblinkTask+0x48>)
 8001d70:	f00e fdbf 	bl	80108f2 <memcpy>
    // This queuing will copy a CRTP packet size from usbIn
    xQueueSend(crtpPacketDelivery, &p, portMAX_DELAY);
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <usblinkTask+0x4c>)
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d7e:	4903      	ldr	r1, [pc, #12]	; (8001d8c <usblinkTask+0x40>)
 8001d80:	f009 fffa 	bl	800bd78 <xQueueGenericSend>
    usbGetDataBlocking(&usbIn);
 8001d84:	e7e6      	b.n	8001d54 <usblinkTask+0x8>
 8001d86:	bf00      	nop
 8001d88:	20001f74 	.word	0x20001f74
 8001d8c:	20001fb8 	.word	0x20001fb8
 8001d90:	20001f75 	.word	0x20001f75
 8001d94:	20001fb9 	.word	0x20001fb9
 8001d98:	20001d70 	.word	0x20001d70

08001d9c <usblinkInit>:
/*
 * Public functions
 */

void usblinkInit()
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af04      	add	r7, sp, #16
  if(isInit)
 8001da2:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <usblinkInit+0x64>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d126      	bne.n	8001df8 <usblinkInit+0x5c>
    return;

  // Initialize the USB peripheral
  usbInit();
 8001daa:	f7ff ff89 	bl	8001cc0 <usbInit>

  crtpPacketDelivery = STATIC_MEM_QUEUE_CREATE(crtpPacketDelivery);
 8001dae:	2310      	movs	r3, #16
 8001db0:	4618      	mov	r0, r3
 8001db2:	2320      	movs	r3, #32
 8001db4:	4619      	mov	r1, r3
 8001db6:	2300      	movs	r3, #0
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <usblinkInit+0x68>)
 8001dbc:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <usblinkInit+0x6c>)
 8001dbe:	f009 fed1 	bl	800bb64 <xQueueGenericCreateStatic>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4a11      	ldr	r2, [pc, #68]	; (8001e0c <usblinkInit+0x70>)
 8001dc6:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(crtpPacketDelivery);
 8001dc8:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <usblinkInit+0x70>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a10      	ldr	r2, [pc, #64]	; (8001e10 <usblinkInit+0x74>)
 8001dce:	4911      	ldr	r1, [pc, #68]	; (8001e14 <usblinkInit+0x78>)
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 ff6d 	bl	8002cb0 <qmRegisterQueue>

  STATIC_MEM_TASK_CREATE(usblinkTask, usblinkTask, USBLINK_TASK_NAME, NULL, USBLINK_TASK_PRI);
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <usblinkInit+0x7c>)
 8001ddc:	9302      	str	r3, [sp, #8]
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <usblinkInit+0x80>)
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	2303      	movs	r3, #3
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	2300      	movs	r3, #0
 8001de8:	490d      	ldr	r1, [pc, #52]	; (8001e20 <usblinkInit+0x84>)
 8001dea:	480e      	ldr	r0, [pc, #56]	; (8001e24 <usblinkInit+0x88>)
 8001dec:	f00a fdea 	bl	800c9c4 <xTaskCreateStatic>

  isInit = true;
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <usblinkInit+0x64>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	e000      	b.n	8001dfa <usblinkInit+0x5e>
    return;
 8001df8:	bf00      	nop
}
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20001d6d 	.word	0x20001d6d
 8001e04:	20000ff0 	.word	0x20000ff0
 8001e08:	20000df0 	.word	0x20000df0
 8001e0c:	20001d70 	.word	0x20001d70
 8001e10:	08012780 	.word	0x08012780
 8001e14:	08012794 	.word	0x08012794
 8001e18:	20001040 	.word	0x20001040
 8001e1c:	20001d74 	.word	0x20001d74
 8001e20:	080127b4 	.word	0x080127b4
 8001e24:	08001d4d 	.word	0x08001d4d

08001e28 <passthroughInit>:
static void blHeliConfigHandshake();

void passthroughTask(void *param);

void passthroughInit()
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af04      	add	r7, sp, #16
  if(isInit)
 8001e2e:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <passthroughInit+0x8c>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d13b      	bne.n	8001eae <passthroughInit+0x86>
    return;

  ptRxQueue = STATIC_MEM_QUEUE_CREATE(ptRxQueue);
 8001e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	4619      	mov	r1, r3
 8001e40:	2300      	movs	r3, #0
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <passthroughInit+0x90>)
 8001e46:	4a1d      	ldr	r2, [pc, #116]	; (8001ebc <passthroughInit+0x94>)
 8001e48:	f009 fe8c 	bl	800bb64 <xQueueGenericCreateStatic>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4a1c      	ldr	r2, [pc, #112]	; (8001ec0 <passthroughInit+0x98>)
 8001e50:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 8001e52:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <passthroughInit+0x98>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <passthroughInit+0x9c>)
 8001e58:	491b      	ldr	r1, [pc, #108]	; (8001ec8 <passthroughInit+0xa0>)
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 ff28 	bl	8002cb0 <qmRegisterQueue>
  ptTxQueue = STATIC_MEM_QUEUE_CREATE(ptTxQueue);
 8001e60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e64:	4618      	mov	r0, r3
 8001e66:	2301      	movs	r3, #1
 8001e68:	4619      	mov	r1, r3
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <passthroughInit+0xa4>)
 8001e70:	4a17      	ldr	r2, [pc, #92]	; (8001ed0 <passthroughInit+0xa8>)
 8001e72:	f009 fe77 	bl	800bb64 <xQueueGenericCreateStatic>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4a16      	ldr	r2, [pc, #88]	; (8001ed4 <passthroughInit+0xac>)
 8001e7a:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 8001e7c:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <passthroughInit+0x98>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a10      	ldr	r2, [pc, #64]	; (8001ec4 <passthroughInit+0x9c>)
 8001e82:	4911      	ldr	r1, [pc, #68]	; (8001ec8 <passthroughInit+0xa0>)
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 ff13 	bl	8002cb0 <qmRegisterQueue>

  passthroughTaskHandle = STATIC_MEM_TASK_CREATE(passthroughTask, passthroughTask, PASSTHROUGH_TASK_NAME, NULL, PASSTHROUGH_TASK_PRI);
 8001e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <passthroughInit+0xb0>)
 8001e92:	9302      	str	r3, [sp, #8]
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <passthroughInit+0xb4>)
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	2305      	movs	r3, #5
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	4910      	ldr	r1, [pc, #64]	; (8001ee0 <passthroughInit+0xb8>)
 8001ea0:	4810      	ldr	r0, [pc, #64]	; (8001ee4 <passthroughInit+0xbc>)
 8001ea2:	f00a fd8f 	bl	800c9c4 <xTaskCreateStatic>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <passthroughInit+0xc0>)
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	e000      	b.n	8001eb0 <passthroughInit+0x88>
    return;
 8001eae:	bf00      	nop
}
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	200023dc 	.word	0x200023dc
 8001eb8:	200013a8 	.word	0x200013a8
 8001ebc:	200011a8 	.word	0x200011a8
 8001ec0:	200023e0 	.word	0x200023e0
 8001ec4:	080127bc 	.word	0x080127bc
 8001ec8:	080127c8 	.word	0x080127c8
 8001ecc:	200015f8 	.word	0x200015f8
 8001ed0:	200013f8 	.word	0x200013f8
 8001ed4:	200023e4 	.word	0x200023e4
 8001ed8:	200010f4 	.word	0x200010f4
 8001edc:	20001fdc 	.word	0x20001fdc
 8001ee0:	080127f4 	.word	0x080127f4
 8001ee4:	08001eed 	.word	0x08001eed
 8001ee8:	20001fd8 	.word	0x20001fd8

08001eec <passthroughTask>:
  BaseType_t xHigherPriorityTaskWoken;
  return xQueueReceiveFromISR(ptTxQueue, receiveChPtr, &xHigherPriorityTaskWoken);
}

void passthroughTask(void *param)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 8001ef4:	f7ff fdb2 	bl	8001a5c <systemWaitStart>

  while (true)
  {
    // Wait for interface to be activated, typically when ACM or COM port control message is sent
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001efc:	2001      	movs	r0, #1
 8001efe:	f00b ff69 	bl	800ddd4 <ulTaskNotifyTake>
//    paramVarId_t motorPowerSetEnableParam;
//    motorPowerSetEnableParam = paramGetVarId("motorPowerSet", "enable");
//    paramSetInt(motorPowerSetEnableParam, 0);

    // Clear any notifications that was queued during 4way process.
    ulTaskNotifyValueClear(NULL, 0xFFFFFFFF);
 8001f02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f06:	2000      	movs	r0, #0
 8001f08:	f00b ffb0 	bl	800de6c <ulTaskNotifyValueClear>
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001f0c:	e7f4      	b.n	8001ef8 <passthroughTask+0xc>

08001f0e <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f8a2 	bl	8002064 <platformGetListOfConfigurations>
 8001f20:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4619      	mov	r1, r3
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f854 	bl	8001fd4 <platformInitConfiguration>
 8001f2c:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <platformInit+0x2c>
  }

//  platformInitHardware();	// NVIC, EXINT 초기화로 대체
  return 0;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b30      	cmp	r3, #48	; 0x30
 8001f52:	d104      	bne.n	8001f5e <platformParseDeviceTypeString+0x1c>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3301      	adds	r3, #1
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b3b      	cmp	r3, #59	; 0x3b
 8001f5c:	d001      	beq.n	8001f62 <platformParseDeviceTypeString+0x20>
    return 1;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e034      	b.n	8001fcc <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 8001f62:	2302      	movs	r3, #2
 8001f64:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	60fb      	str	r3, [r7, #12]
  int end = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	e00e      	b.n	8001f94 <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00c      	beq.n	8001f9c <platformParseDeviceTypeString+0x5a>
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b3b      	cmp	r3, #59	; 0x3b
 8001f8c:	d006      	beq.n	8001f9c <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	ddec      	ble.n	8001f76 <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	dd01      	ble.n	8001fa8 <platformParseDeviceTypeString+0x66>
    return 1;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e011      	b.n	8001fcc <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	6838      	ldr	r0, [r7, #0]
 8001fbc:	f00e fc99 	bl	80108f2 <memcpy>
  deviceType[length] = '\0';
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
  return 0;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b090      	sub	sp, #64	; 0x40
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f85e 	bl	80020a4 <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 8001fe8:	f107 020c 	add.w	r2, r7, #12
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ffa5 	bl	8001f42 <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ffc:	e01a      	b.n	8002034 <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 8001ffe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 8002010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002012:	f107 020c 	add.w	r2, r7, #12
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe f8d9 	bl	80001d0 <strcmp>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d104      	bne.n	800202e <platformInitConfiguration+0x5a>
      active_config = config;
 8002024:	4a08      	ldr	r2, [pc, #32]	; (8002048 <platformInitConfiguration+0x74>)
 8002026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002028:	6013      	str	r3, [r2, #0]
      return 0;
 800202a:	2300      	movs	r3, #0
 800202c:	e007      	b.n	800203e <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 800202e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002030:	3301      	adds	r3, #1
 8002032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002034:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	dbe0      	blt.n	8001ffe <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 800203c:	2301      	movs	r3, #1
}
 800203e:	4618      	mov	r0, r3
 8002040:	3740      	adds	r7, #64	; 0x40
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200023e8 	.word	0x200023e8

0800204c <platformConfigGetDeviceTypeName>:

const char* platformConfigGetDeviceType() {
  return active_config->deviceType;
}

const char* platformConfigGetDeviceTypeName() {
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return active_config->deviceTypeName;
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <platformConfigGetDeviceTypeName+0x14>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	3305      	adds	r3, #5
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	200023e8 	.word	0x200023e8

08002064 <platformGetListOfConfigurations>:
  //  .motorMap = motorMapCF21Brushless,
  },
#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2203      	movs	r2, #3
 8002070:	601a      	str	r2, [r3, #0]
  return configs;
 8002072:	4b03      	ldr	r3, [pc, #12]	; (8002080 <platformGetListOfConfigurations+0x1c>)
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	20000064 	.word	0x20000064

08002084 <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;CF20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8002092:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002096:	015b      	lsls	r3, r3, #5
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  char* block = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	e00d      	b.n	80020d2 <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 80020b6:	6938      	ldr	r0, [r7, #16]
 80020b8:	f7ff ffe4 	bl	8002084 <getAddressOfOtpMemoryBlock>
 80020bc:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	617b      	str	r3, [r7, #20]
      break;
 80020ca:	e005      	b.n	80020d8 <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	3301      	adds	r3, #1
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b0f      	cmp	r3, #15
 80020d6:	ddee      	ble.n	80020b6 <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <platformGetDeviceTypeString+0x42>
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2bff      	cmp	r3, #255	; 0xff
 80020e4:	d101      	bne.n	80020ea <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <platformGetDeviceTypeString+0x60>)
 80020e8:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 80020ea:	2220      	movs	r2, #32
 80020ec:	6979      	ldr	r1, [r7, #20]
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f00e fb1e 	bl	8010730 <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3320      	adds	r3, #32
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
}
 80020fc:	bf00      	nop
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	080128e8 	.word	0x080128e8

08002108 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800210c:	f3bf 8f4f 	dsb	sy
}
 8002110:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <__NVIC_SystemReset+0x24>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800211a:	4904      	ldr	r1, [pc, #16]	; (800212c <__NVIC_SystemReset+0x24>)
 800211c:	4b04      	ldr	r3, [pc, #16]	; (8002130 <__NVIC_SystemReset+0x28>)
 800211e:	4313      	orrs	r3, r2
 8002120:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002122:	f3bf 8f4f 	dsb	sy
}
 8002126:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <__NVIC_SystemReset+0x20>
 800212c:	e000ed00 	.word	0xe000ed00
 8002130:	05fa0004 	.word	0x05fa0004

08002134 <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002144:	f383 8811 	msr	BASEPRI, r3
 8002148:	f3bf 8f6f 	isb	sy
 800214c:	f3bf 8f4f 	dsb	sy
 8002150:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002152:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	68b8      	ldr	r0, [r7, #8]
 8002158:	f000 f810 	bl	800217c <storeAssertFileData>
//  DEBUG_PRINT("Assert failed %s:%d\n", file, line);
//  motorsStop();
  ledShowFaultPattern();
 800215c:	f7ff fbf2 	bl	8001944 <ledShowFaultPattern>

  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <assertFail+0x44>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <assertFail+0x3c>
  {
    // Only reset if debugger is not connected
    NVIC_SystemReset();
 800216c:	f7ff ffcc 	bl	8002108 <__NVIC_SystemReset>
  }
}
 8002170:	bf00      	nop
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	e000edf0 	.word	0xe000edf0

0800217c <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <storeAssertFileData+0x38>)
 8002188:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <storeAssertFileData+0x3c>)
 800218a:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 800218c:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <storeAssertFileData+0x38>)
 800218e:	2201      	movs	r2, #1
 8002190:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <storeAssertFileData+0x38>)
 8002194:	791a      	ldrb	r2, [r3, #4]
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <storeAssertFileData+0x40>)
 8002198:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 800219a:	4a06      	ldr	r2, [pc, #24]	; (80021b4 <storeAssertFileData+0x38>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 80021a0:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <storeAssertFileData+0x38>)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	60d3      	str	r3, [r2, #12]
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	200017d8 	.word	0x200017d8
 80021b8:	2f8a001f 	.word	0x2f8a001f
 80021bc:	200023ec 	.word	0x200023ec

080021c0 <consoleInit>:

  return true;
}

void consoleInit()
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  if (isInit)
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <consoleInit+0x50>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d11f      	bne.n	800220c <consoleInit+0x4c>
    return;

  messageToPrint.size = 0;
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <consoleInit+0x54>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
  messageToPrint.header = CRTP_HEADER(CRTP_PORT_CONSOLE, 0);
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <consoleInit+0x54>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	705a      	strb	r2, [r3, #1]
  vSemaphoreCreateBinary(synch);
 80021d8:	2203      	movs	r2, #3
 80021da:	2100      	movs	r1, #0
 80021dc:	2001      	movs	r0, #1
 80021de:	f009 fd39 	bl	800bc54 <xQueueGenericCreate>
 80021e2:	4603      	mov	r3, r0
 80021e4:	4a0c      	ldr	r2, [pc, #48]	; (8002218 <consoleInit+0x58>)
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <consoleInit+0x58>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d006      	beq.n	80021fe <consoleInit+0x3e>
 80021f0:	4b09      	ldr	r3, [pc, #36]	; (8002218 <consoleInit+0x58>)
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	2300      	movs	r3, #0
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	f009 fdbd 	bl	800bd78 <xQueueGenericSend>
  messageSendingIsPending = false;
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <consoleInit+0x5c>)
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]

  isInit = true;
 8002204:	4b02      	ldr	r3, [pc, #8]	; (8002210 <consoleInit+0x50>)
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
 800220a:	e000      	b.n	800220e <consoleInit+0x4e>
    return;
 800220c:	bf00      	nop
}
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20002418 	.word	0x20002418
 8002214:	200023f0 	.word	0x200023f0
 8002218:	20002414 	.word	0x20002414
 800221c:	20002410 	.word	0x20002410

08002220 <debugInit>:
 */
#include "debug.h"


void debugInit(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
#ifdef DEBUG_PRINT_ON_SEGGER_RTT
  SEGGER_RTT_Init();
  SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_TRIM);
#endif
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <uartInit>:
			return -1;
		return len;
}


void uartInit(void) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af02      	add	r7, sp, #8
	uartqueue = STATIC_MEM_QUEUE_CREATE(uartqueue);
 8002236:	2340      	movs	r3, #64	; 0x40
 8002238:	4618      	mov	r0, r3
 800223a:	2301      	movs	r3, #1
 800223c:	4619      	mov	r1, r3
 800223e:	2300      	movs	r3, #0
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <uartInit+0x2c>)
 8002244:	4a06      	ldr	r2, [pc, #24]	; (8002260 <uartInit+0x30>)
 8002246:	f009 fc8d 	bl	800bb64 <xQueueGenericCreateStatic>
 800224a:	4603      	mov	r3, r0
 800224c:	4a05      	ldr	r2, [pc, #20]	; (8002264 <uartInit+0x34>)
 800224e:	6013      	str	r3, [r2, #0]
    isInit = true;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <uartInit+0x38>)
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20001688 	.word	0x20001688
 8002260:	20001648 	.word	0x20001648
 8002264:	2000241c 	.word	0x2000241c
 8002268:	200024c9 	.word	0x200024c9

0800226c <uartDmaInit>:



void uartDmaInit(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af02      	add	r7, sp, #8

  // initialize the FreeRTOS structures first, to prevent null pointers in interrupts
  waitUntilSendDone = xSemaphoreCreateBinaryStatic(&waitUntilSendDoneBuffer); // initialized as blocking
 8002272:	2303      	movs	r3, #3
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	4b21      	ldr	r3, [pc, #132]	; (80022fc <uartDmaInit+0x90>)
 8002278:	2200      	movs	r2, #0
 800227a:	2100      	movs	r1, #0
 800227c:	2001      	movs	r0, #1
 800227e:	f009 fc71 	bl	800bb64 <xQueueGenericCreateStatic>
 8002282:	4603      	mov	r3, r0
 8002284:	4a1e      	ldr	r2, [pc, #120]	; (8002300 <uartDmaInit+0x94>)
 8002286:	6013      	str	r3, [r2, #0]
  uartBusy = xSemaphoreCreateBinaryStatic(&uartBusyBuffer); // initialized as blocking
 8002288:	2303      	movs	r3, #3
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <uartDmaInit+0x98>)
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	2001      	movs	r0, #1
 8002294:	f009 fc66 	bl	800bb64 <xQueueGenericCreateStatic>
 8002298:	4603      	mov	r3, r0
 800229a:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <uartDmaInit+0x9c>)
 800229c:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(uartBusy); // but we give it because the uart isn't busy at initialization
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <uartDmaInit+0x9c>)
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	2300      	movs	r3, #0
 80022a4:	2200      	movs	r2, #0
 80022a6:	2100      	movs	r1, #0
 80022a8:	f009 fd66 	bl	800bd78 <xQueueGenericSend>
  xSemaphoreGive(waitUntilSendDone);
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <uartDmaInit+0x94>)
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	2300      	movs	r3, #0
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	f009 fd5f 	bl	800bd78 <xQueueGenericSend>

  __HAL_RCC_DMA2_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <uartDmaInit+0xa0>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a12      	ldr	r2, [pc, #72]	; (800230c <uartDmaInit+0xa0>)
 80022c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <uartDmaInit+0xa0>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
  HAL_DMA_Init(&hdma_usart6_tx);
 80022d6:	480e      	ldr	r0, [pc, #56]	; (8002310 <uartDmaInit+0xa4>)
 80022d8:	f001 ff10 	bl	80040fc <HAL_DMA_Init>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80022dc:	2200      	movs	r2, #0
 80022de:	2105      	movs	r1, #5
 80022e0:	2045      	movs	r0, #69	; 0x45
 80022e2:	f001 fed4 	bl	800408e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80022e6:	2045      	movs	r0, #69	; 0x45
 80022e8:	f001 feed 	bl	80040c6 <HAL_NVIC_EnableIRQ>

  isUartDmaInitialized = true;
 80022ec:	4b09      	ldr	r3, [pc, #36]	; (8002314 <uartDmaInit+0xa8>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]

}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20002478 	.word	0x20002478
 8002300:	20002474 	.word	0x20002474
 8002304:	20002424 	.word	0x20002424
 8002308:	20002420 	.word	0x20002420
 800230c:	40023800 	.word	0x40023800
 8002310:	200032bc 	.word	0x200032bc
 8002314:	200024c8 	.word	0x200024c8

08002318 <uartSendData>:




void uartSendData(uint32_t size, uint8_t* data)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t i;

  for(i = 0; i < size; i++)
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	e00f      	b.n	8002348 <uartSendData+0x30>
  {
    while (!(USART6->SR & UART_FLAG_TXE));
 8002328:	bf00      	nop
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <uartSendData+0x48>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f9      	beq.n	800232a <uartSendData+0x12>
    USART6->DR = (data[i] & 0x00FF);
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	781a      	ldrb	r2, [r3, #0]
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <uartSendData+0x48>)
 8002340:	605a      	str	r2, [r3, #4]
  for(i = 0; i < size; i++)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3301      	adds	r3, #1
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	429a      	cmp	r2, r3
 800234e:	d3eb      	bcc.n	8002328 <uartSendData+0x10>
  }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40011400 	.word	0x40011400

08002364 <uartPutchar>:


int uartPutchar(int ch)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
    uartSendData(1, (uint8_t *)&ch);
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	4619      	mov	r1, r3
 8002370:	2001      	movs	r0, #1
 8002372:	f7ff ffd1 	bl	8002318 <uartSendData>
    return (unsigned char)ch;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	b2db      	uxtb	r3, r3
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <getIntLen>:

static const char digit[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 
                             'A', 'B', 'C', 'D', 'E', 'F'};

static int getIntLen (long int value)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  int l = 1;
 800238c:	2301      	movs	r3, #1
 800238e:	60fb      	str	r3, [r7, #12]
  while(value > 9)
 8002390:	e00a      	b.n	80023a8 <getIntLen+0x24>
  {
    l++;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3301      	adds	r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
    value /= 10;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a08      	ldr	r2, [pc, #32]	; (80023bc <getIntLen+0x38>)
 800239c:	fb82 1203 	smull	r1, r2, r2, r3
 80023a0:	1092      	asrs	r2, r2, #2
 80023a2:	17db      	asrs	r3, r3, #31
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	607b      	str	r3, [r7, #4]
  while(value > 9)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b09      	cmp	r3, #9
 80023ac:	dcf1      	bgt.n	8002392 <getIntLen+0xe>
  }
  return l;
 80023ae:	68fb      	ldr	r3, [r7, #12]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	66666667 	.word	0x66666667

080023c0 <power>:

int power(int a, int b)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  int i;
  int x = a;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	60bb      	str	r3, [r7, #8]

  for (i = 1; i < b; i++)
 80023ce:	2301      	movs	r3, #1
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	e007      	b.n	80023e4 <power+0x24>
  {
    x *= a;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < b; i++)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3301      	adds	r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	dbf3      	blt.n	80023d4 <power+0x14>
  }

  return x;
 80023ec:	68bb      	ldr	r3, [r7, #8]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <itoa10Unsigned>:

static int itoa10Unsigned(putc_t putcf, unsigned long long int num)
{
 80023fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002400:	b088      	sub	sp, #32
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]

  if (num == 0)
 800240e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002412:	4313      	orrs	r3, r2
 8002414:	d104      	bne.n	8002420 <itoa10Unsigned+0x24>
  {
    putcf('0');
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2030      	movs	r0, #48	; 0x30
 800241a:	4798      	blx	r3
    return 1;
 800241c:	2301      	movs	r3, #1
 800241e:	e057      	b.n	80024d0 <itoa10Unsigned+0xd4>
  }

  unsigned long long int i = 1;
 8002420:	f04f 0201 	mov.w	r2, #1
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	e9c7 2304 	strd	r2, r3, [r7, #16]

  while ((num / i) > 9)
 800242c:	e019      	b.n	8002462 <itoa10Unsigned+0x66>
  {
    i *= 10L;
 800242e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002432:	4642      	mov	r2, r8
 8002434:	464b      	mov	r3, r9
 8002436:	f04f 0000 	mov.w	r0, #0
 800243a:	f04f 0100 	mov.w	r1, #0
 800243e:	0099      	lsls	r1, r3, #2
 8002440:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002444:	0090      	lsls	r0, r2, #2
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	eb12 0408 	adds.w	r4, r2, r8
 800244e:	eb43 0509 	adc.w	r5, r3, r9
 8002452:	eb14 0a04 	adds.w	sl, r4, r4
 8002456:	eb45 0b05 	adc.w	fp, r5, r5
 800245a:	4654      	mov	r4, sl
 800245c:	465d      	mov	r5, fp
 800245e:	e9c7 4504 	strd	r4, r5, [r7, #16]
  while ((num / i) > 9)
 8002462:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002466:	e9d7 0100 	ldrd	r0, r1, [r7]
 800246a:	f7fe fbfd 	bl	8000c68 <__aeabi_uldivmod>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	2a0a      	cmp	r2, #10
 8002474:	f173 0300 	sbcs.w	r3, r3, #0
 8002478:	d2d9      	bcs.n	800242e <itoa10Unsigned+0x32>
  }

  do
  {
    putcf(digit[(num / i) % 10L]);
 800247a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800247e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002482:	f7fe fbf1 	bl	8000c68 <__aeabi_uldivmod>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f04f 020a 	mov.w	r2, #10
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	f7fe fbe7 	bl	8000c68 <__aeabi_uldivmod>
 800249a:	4910      	ldr	r1, [pc, #64]	; (80024dc <itoa10Unsigned+0xe0>)
 800249c:	188b      	adds	r3, r1, r2
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4610      	mov	r0, r2
 80024a6:	4798      	blx	r3
    len++;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	3301      	adds	r3, #1
 80024ac:	61fb      	str	r3, [r7, #28]
  }
  while (i /= 10L);
 80024ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024b2:	f04f 020a 	mov.w	r2, #10
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	f7fe fbd5 	bl	8000c68 <__aeabi_uldivmod>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80024c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	d1d5      	bne.n	800247a <itoa10Unsigned+0x7e>

  return len;
 80024ce:	69fb      	ldr	r3, [r7, #28]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3720      	adds	r7, #32
 80024d4:	46bd      	mov	sp, r7
 80024d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024da:	bf00      	nop
 80024dc:	080132a4 	.word	0x080132a4

080024e0 <itoa10>:

static int itoa10(putc_t putcf, long long int num, int precision)
{
 80024e0:	b5b0      	push	{r4, r5, r7, lr}
 80024e2:	b08a      	sub	sp, #40	; 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (num == 0)
 80024f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	d104      	bne.n	8002502 <itoa10+0x22>
  {
    putcf('0');
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2030      	movs	r0, #48	; 0x30
 80024fc:	4798      	blx	r3
    return 1;
 80024fe:	2301      	movs	r3, #1
 8002500:	e037      	b.n	8002572 <itoa10+0x92>
  }

  long long unsigned int n = num;
 8002502:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002506:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (num < 0)
 800250a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800250e:	2b00      	cmp	r3, #0
 8002510:	da0d      	bge.n	800252e <itoa10+0x4e>
  {
    n = -num;
 8002512:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002516:	2100      	movs	r1, #0
 8002518:	4254      	negs	r4, r2
 800251a:	eb61 0503 	sbc.w	r5, r1, r3
 800251e:	e9c7 4506 	strd	r4, r5, [r7, #24]
    putcf('-');
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	202d      	movs	r0, #45	; 0x2d
 8002526:	4798      	blx	r3
    len++;
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	3301      	adds	r3, #1
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  int numLenght = getIntLen(num);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff27 	bl	8002384 <getIntLen>
 8002536:	6138      	str	r0, [r7, #16]
  if (numLenght < precision)
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253c:	429a      	cmp	r2, r3
 800253e:	da10      	bge.n	8002562 <itoa10+0x82>
  {
    int fillWithZero = precision - numLenght;
 8002540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	617b      	str	r3, [r7, #20]
    while (fillWithZero > 0)
 8002548:	e008      	b.n	800255c <itoa10+0x7c>
    {
      putcf('0');
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2030      	movs	r0, #48	; 0x30
 800254e:	4798      	blx	r3
      len++;
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	3301      	adds	r3, #1
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
      fillWithZero--;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	3b01      	subs	r3, #1
 800255a:	617b      	str	r3, [r7, #20]
    while (fillWithZero > 0)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	dcf3      	bgt.n	800254a <itoa10+0x6a>
    }
  }

  return itoa10Unsigned(putcf, n) + len;
 8002562:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f7ff ff48 	bl	80023fc <itoa10Unsigned>
 800256c:	4602      	mov	r2, r0
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	4413      	add	r3, r2
}
 8002572:	4618      	mov	r0, r3
 8002574:	3728      	adds	r7, #40	; 0x28
 8002576:	46bd      	mov	sp, r7
 8002578:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800257c <itoa16>:

static int itoa16(putc_t putcf, uint64_t num, int width, char padChar)
{
 800257c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002580:	b08d      	sub	sp, #52	; 0x34
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
  bool foundFirst = false;
 800258e:	2300      	movs	r3, #0
 8002590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  for (int i = 15; i >= 0; i--)
 8002594:	230f      	movs	r3, #15
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
 8002598:	e059      	b.n	800264e <itoa16+0xd2>
  {
    int shift = i * 4;
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	623b      	str	r3, [r7, #32]
    uint64_t mask = (uint64_t)0x0F << shift;
 80025a0:	f04f 020f 	mov.w	r2, #15
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	6a39      	ldr	r1, [r7, #32]
 80025aa:	f1a1 0620 	sub.w	r6, r1, #32
 80025ae:	f1c1 0020 	rsb	r0, r1, #32
 80025b2:	fa03 f501 	lsl.w	r5, r3, r1
 80025b6:	fa02 f606 	lsl.w	r6, r2, r6
 80025ba:	4335      	orrs	r5, r6
 80025bc:	fa22 f000 	lsr.w	r0, r2, r0
 80025c0:	4305      	orrs	r5, r0
 80025c2:	fa02 f401 	lsl.w	r4, r2, r1
 80025c6:	e9c7 4506 	strd	r4, r5, [r7, #24]
    uint64_t val = (num & mask) >> shift;
 80025ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025d2:	ea00 0a02 	and.w	sl, r0, r2
 80025d6:	ea01 0b03 	and.w	fp, r1, r3
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	f1c3 0120 	rsb	r1, r3, #32
 80025e0:	f1a3 0220 	sub.w	r2, r3, #32
 80025e4:	fa2a f803 	lsr.w	r8, sl, r3
 80025e8:	fa0b f101 	lsl.w	r1, fp, r1
 80025ec:	ea48 0801 	orr.w	r8, r8, r1
 80025f0:	fa2b f202 	lsr.w	r2, fp, r2
 80025f4:	ea48 0802 	orr.w	r8, r8, r2
 80025f8:	fa2b f903 	lsr.w	r9, fp, r3
 80025fc:	e9c7 8904 	strd	r8, r9, [r7, #16]

    if (val > 0)
 8002600:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	d002      	beq.n	800260e <itoa16+0x92>
    {
      foundFirst = true;
 8002608:	2301      	movs	r3, #1
 800260a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }

    if (foundFirst || i < width)
 800260e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002612:	2b00      	cmp	r3, #0
 8002614:	d103      	bne.n	800261e <itoa16+0xa2>
 8002616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800261a:	429a      	cmp	r2, r3
 800261c:	da14      	bge.n	8002648 <itoa16+0xcc>
    {
      if (foundFirst)
 800261e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002622:	2b00      	cmp	r3, #0
 8002624:	d008      	beq.n	8002638 <itoa16+0xbc>
      {
        putcf(digit[val]);
 8002626:	4a0e      	ldr	r2, [pc, #56]	; (8002660 <itoa16+0xe4>)
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4413      	add	r3, r2
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4610      	mov	r0, r2
 8002634:	4798      	blx	r3
 8002636:	e004      	b.n	8002642 <itoa16+0xc6>
      }
      else
      {
        putcf(padChar);
 8002638:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4610      	mov	r0, r2
 8002640:	4798      	blx	r3
      }

      len++;
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	3301      	adds	r3, #1
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (int i = 15; i >= 0; i--)
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	3b01      	subs	r3, #1
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	daa2      	bge.n	800259a <itoa16+0x1e>
    }
  }

  return len;
 8002654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002656:	4618      	mov	r0, r3
 8002658:	3734      	adds	r7, #52	; 0x34
 800265a:	46bd      	mov	sp, r7
 800265c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002660:	080132a4 	.word	0x080132a4

08002664 <handleLongLong>:

static int handleLongLong(putc_t putcf, const char** fmt, unsigned long long int val, int width, char padChar)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af02      	add	r7, sp, #8
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]

  switch(*((*fmt)++))
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	1c59      	adds	r1, r3, #1
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	6011      	str	r1, [r2, #0]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	3b58      	subs	r3, #88	; 0x58
 8002684:	2b20      	cmp	r3, #32
 8002686:	d861      	bhi.n	800274c <handleLongLong+0xe8>
 8002688:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <handleLongLong+0x2c>)
 800268a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268e:	bf00      	nop
 8002690:	08002735 	.word	0x08002735
 8002694:	0800274d 	.word	0x0800274d
 8002698:	0800274d 	.word	0x0800274d
 800269c:	0800274d 	.word	0x0800274d
 80026a0:	0800274d 	.word	0x0800274d
 80026a4:	0800274d 	.word	0x0800274d
 80026a8:	0800274d 	.word	0x0800274d
 80026ac:	0800274d 	.word	0x0800274d
 80026b0:	0800274d 	.word	0x0800274d
 80026b4:	0800274d 	.word	0x0800274d
 80026b8:	0800274d 	.word	0x0800274d
 80026bc:	0800274d 	.word	0x0800274d
 80026c0:	08002715 	.word	0x08002715
 80026c4:	0800274d 	.word	0x0800274d
 80026c8:	0800274d 	.word	0x0800274d
 80026cc:	0800274d 	.word	0x0800274d
 80026d0:	0800274d 	.word	0x0800274d
 80026d4:	08002715 	.word	0x08002715
 80026d8:	0800274d 	.word	0x0800274d
 80026dc:	0800274d 	.word	0x0800274d
 80026e0:	0800274d 	.word	0x0800274d
 80026e4:	0800274d 	.word	0x0800274d
 80026e8:	0800274d 	.word	0x0800274d
 80026ec:	0800274d 	.word	0x0800274d
 80026f0:	0800274d 	.word	0x0800274d
 80026f4:	0800274d 	.word	0x0800274d
 80026f8:	0800274d 	.word	0x0800274d
 80026fc:	0800274d 	.word	0x0800274d
 8002700:	0800274d 	.word	0x0800274d
 8002704:	08002727 	.word	0x08002727
 8002708:	0800274d 	.word	0x0800274d
 800270c:	0800274d 	.word	0x0800274d
 8002710:	08002735 	.word	0x08002735
  {
    case 'i':
    case 'd':
      len = itoa10(putcf, (long long int)val, 0);
 8002714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002718:	2100      	movs	r1, #0
 800271a:	9100      	str	r1, [sp, #0]
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f7ff fedf 	bl	80024e0 <itoa10>
 8002722:	6178      	str	r0, [r7, #20]
      break;
 8002724:	e013      	b.n	800274e <handleLongLong+0xea>
    case 'u':
      len = itoa10Unsigned(putcf, val);
 8002726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f7ff fe66 	bl	80023fc <itoa10Unsigned>
 8002730:	6178      	str	r0, [r7, #20]
      break;
 8002732:	e00c      	b.n	800274e <handleLongLong+0xea>
    case 'x':
    case 'X':
      len = itoa16(putcf, val, width, padChar);
 8002734:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f7ff ff1a 	bl	800257c <itoa16>
 8002748:	6178      	str	r0, [r7, #20]
      break;
 800274a:	e000      	b.n	800274e <handleLongLong+0xea>
    default:
      // Nothing here
      break;
 800274c:	bf00      	nop
  }

  return len;
 800274e:	697b      	ldr	r3, [r7, #20]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <handleLong>:

static int handleLong(putc_t putcf, const char** fmt, unsigned long int val, int width, char padChar)
{
 8002758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800275c:	b088      	sub	sp, #32
 800275e:	af02      	add	r7, sp, #8
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	603b      	str	r3, [r7, #0]
  int len = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]

  switch(*((*fmt)++))
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	1c59      	adds	r1, r3, #1
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	6011      	str	r1, [r2, #0]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	3b58      	subs	r3, #88	; 0x58
 800277a:	2b20      	cmp	r3, #32
 800277c:	d86c      	bhi.n	8002858 <handleLong+0x100>
 800277e:	a201      	add	r2, pc, #4	; (adr r2, 8002784 <handleLong+0x2c>)
 8002780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002784:	08002839 	.word	0x08002839
 8002788:	08002859 	.word	0x08002859
 800278c:	08002859 	.word	0x08002859
 8002790:	08002859 	.word	0x08002859
 8002794:	08002859 	.word	0x08002859
 8002798:	08002859 	.word	0x08002859
 800279c:	08002859 	.word	0x08002859
 80027a0:	08002859 	.word	0x08002859
 80027a4:	08002859 	.word	0x08002859
 80027a8:	08002859 	.word	0x08002859
 80027ac:	08002859 	.word	0x08002859
 80027b0:	08002859 	.word	0x08002859
 80027b4:	08002809 	.word	0x08002809
 80027b8:	08002859 	.word	0x08002859
 80027bc:	08002859 	.word	0x08002859
 80027c0:	08002859 	.word	0x08002859
 80027c4:	08002859 	.word	0x08002859
 80027c8:	08002809 	.word	0x08002809
 80027cc:	08002859 	.word	0x08002859
 80027d0:	08002859 	.word	0x08002859
 80027d4:	08002859 	.word	0x08002859
 80027d8:	08002859 	.word	0x08002859
 80027dc:	08002859 	.word	0x08002859
 80027e0:	08002859 	.word	0x08002859
 80027e4:	08002859 	.word	0x08002859
 80027e8:	08002859 	.word	0x08002859
 80027ec:	08002859 	.word	0x08002859
 80027f0:	08002859 	.word	0x08002859
 80027f4:	08002859 	.word	0x08002859
 80027f8:	08002823 	.word	0x08002823
 80027fc:	08002859 	.word	0x08002859
 8002800:	08002859 	.word	0x08002859
 8002804:	08002839 	.word	0x08002839
  {
    case 'i':
    case 'd':
      len = itoa10(putcf, (long int)val, 0);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	17da      	asrs	r2, r3, #31
 800280c:	469a      	mov	sl, r3
 800280e:	4693      	mov	fp, r2
 8002810:	2300      	movs	r3, #0
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	4652      	mov	r2, sl
 8002816:	465b      	mov	r3, fp
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f7ff fe61 	bl	80024e0 <itoa10>
 800281e:	6178      	str	r0, [r7, #20]
      break;
 8002820:	e01b      	b.n	800285a <handleLong+0x102>
    case 'u':
      len = itoa10Unsigned(putcf, val);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	4698      	mov	r8, r3
 8002828:	4691      	mov	r9, r2
 800282a:	4642      	mov	r2, r8
 800282c:	464b      	mov	r3, r9
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff fde4 	bl	80023fc <itoa10Unsigned>
 8002834:	6178      	str	r0, [r7, #20]
      break;
 8002836:	e010      	b.n	800285a <handleLong+0x102>
    case 'x':
    case 'X':
      len = itoa16(putcf, val, width, padChar);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	461c      	mov	r4, r3
 800283e:	4615      	mov	r5, r2
 8002840:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	4622      	mov	r2, r4
 800284c:	462b      	mov	r3, r5
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f7ff fe94 	bl	800257c <itoa16>
 8002854:	6178      	str	r0, [r7, #20]
      break;
 8002856:	e000      	b.n	800285a <handleLong+0x102>
    default:
      // Nothing here
      break;
 8002858:	bf00      	nop
  }

  return len;
 800285a:	697b      	ldr	r3, [r7, #20]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002866:	bf00      	nop

08002868 <evprintf>:

int evprintf(putc_t putcf, const char * fmt, va_list ap)
{
 8002868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800286c:	ed2d 8b02 	vpush	{d8}
 8002870:	b08e      	sub	sp, #56	; 0x38
 8002872:	af02      	add	r7, sp, #8
 8002874:	6178      	str	r0, [r7, #20]
 8002876:	6139      	str	r1, [r7, #16]
 8002878:	60fa      	str	r2, [r7, #12]
  int len=0;
 800287a:	2300      	movs	r3, #0
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
  char* str;
  int precision;
  int width;
  char padChar;

  while (*fmt)
 800287e:	e1ac      	b.n	8002bda <evprintf+0x372>
  {
    if (*fmt == '%')
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b25      	cmp	r3, #37	; 0x25
 8002886:	f040 819d 	bne.w	8002bc4 <evprintf+0x35c>
    {
      precision = 6;
 800288a:	2306      	movs	r3, #6
 800288c:	623b      	str	r3, [r7, #32]
      padChar = ' ';
 800288e:	2320      	movs	r3, #32
 8002890:	76fb      	strb	r3, [r7, #27]
      width = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]

      fmt++;
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	3301      	adds	r3, #1
 800289a:	613b      	str	r3, [r7, #16]
      if (*fmt == '%') {
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b25      	cmp	r3, #37	; 0x25
 80028a2:	d110      	bne.n	80028c6 <evprintf+0x5e>
        putcf(*fmt++);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	613a      	str	r2, [r7, #16]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	4610      	mov	r0, r2
 80028b2:	4798      	blx	r3
        len++;
 80028b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b6:	3301      	adds	r3, #1
 80028b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        continue;
 80028ba:	e18e      	b.n	8002bda <evprintf+0x372>
      }

      while ('0' == *fmt)
      {
        padChar = '0';
 80028bc:	2330      	movs	r3, #48	; 0x30
 80028be:	76fb      	strb	r3, [r7, #27]
        fmt++;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	3301      	adds	r3, #1
 80028c4:	613b      	str	r3, [r7, #16]
      while ('0' == *fmt)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b30      	cmp	r3, #48	; 0x30
 80028cc:	d0f6      	beq.n	80028bc <evprintf+0x54>
      }

			while(isdigit((unsigned)*fmt))
 80028ce:	e00e      	b.n	80028ee <evprintf+0x86>
			{
				width *= 10;
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	61fb      	str	r3, [r7, #28]
				width += *fmt - '0';
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	3b30      	subs	r3, #48	; 0x30
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	4413      	add	r3, r2
 80028e6:	61fb      	str	r3, [r7, #28]
				fmt++;
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	3301      	adds	r3, #1
 80028ec:	613b      	str	r3, [r7, #16]
			while(isdigit((unsigned)*fmt))
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	3301      	adds	r3, #1
 80028f4:	4ab2      	ldr	r2, [pc, #712]	; (8002bc0 <evprintf+0x358>)
 80028f6:	4413      	add	r3, r2
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1e6      	bne.n	80028d0 <evprintf+0x68>
			}

      while (!isalpha((unsigned) *fmt))
 8002902:	e017      	b.n	8002934 <evprintf+0xcc>
      {
        if (*fmt == '.')
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b2e      	cmp	r3, #46	; 0x2e
 800290a:	d113      	bne.n	8002934 <evprintf+0xcc>
        {
          fmt++;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	3301      	adds	r3, #1
 8002910:	613b      	str	r3, [r7, #16]
          if (isdigit((unsigned)*fmt))
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	3301      	adds	r3, #1
 8002918:	4aa9      	ldr	r2, [pc, #676]	; (8002bc0 <evprintf+0x358>)
 800291a:	4413      	add	r3, r2
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b00      	cmp	r3, #0
 8002924:	d006      	beq.n	8002934 <evprintf+0xcc>
          {
            precision = *fmt - '0';
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	3b30      	subs	r3, #48	; 0x30
 800292c:	623b      	str	r3, [r7, #32]
            fmt++;
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	3301      	adds	r3, #1
 8002932:	613b      	str	r3, [r7, #16]
      while (!isalpha((unsigned) *fmt))
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	3301      	adds	r3, #1
 800293a:	4aa1      	ldr	r2, [pc, #644]	; (8002bc0 <evprintf+0x358>)
 800293c:	4413      	add	r3, r2
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0dd      	beq.n	8002904 <evprintf+0x9c>
          }
        }
      }
      switch (*fmt++)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	613a      	str	r2, [r7, #16]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	3b58      	subs	r3, #88	; 0x58
 8002952:	2b20      	cmp	r3, #32
 8002954:	f200 8132 	bhi.w	8002bbc <evprintf+0x354>
 8002958:	a201      	add	r2, pc, #4	; (adr r2, 8002960 <evprintf+0xf8>)
 800295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295e:	bf00      	nop
 8002960:	08002a2d 	.word	0x08002a2d
 8002964:	08002bbd 	.word	0x08002bbd
 8002968:	08002bbd 	.word	0x08002bbd
 800296c:	08002bbd 	.word	0x08002bbd
 8002970:	08002bbd 	.word	0x08002bbd
 8002974:	08002bbd 	.word	0x08002bbd
 8002978:	08002bbd 	.word	0x08002bbd
 800297c:	08002bbd 	.word	0x08002bbd
 8002980:	08002bbd 	.word	0x08002bbd
 8002984:	08002bbd 	.word	0x08002bbd
 8002988:	08002bbd 	.word	0x08002bbd
 800298c:	08002ba3 	.word	0x08002ba3
 8002990:	080029e5 	.word	0x080029e5
 8002994:	08002bbd 	.word	0x08002bbd
 8002998:	08002ab7 	.word	0x08002ab7
 800299c:	08002bbd 	.word	0x08002bbd
 80029a0:	08002bbd 	.word	0x08002bbd
 80029a4:	080029e5 	.word	0x080029e5
 80029a8:	08002bbd 	.word	0x08002bbd
 80029ac:	08002bbd 	.word	0x08002bbd
 80029b0:	08002a57 	.word	0x08002a57
 80029b4:	08002bbd 	.word	0x08002bbd
 80029b8:	08002bbd 	.word	0x08002bbd
 80029bc:	08002bbd 	.word	0x08002bbd
 80029c0:	08002bbd 	.word	0x08002bbd
 80029c4:	08002bbd 	.word	0x08002bbd
 80029c8:	08002bbd 	.word	0x08002bbd
 80029cc:	08002b77 	.word	0x08002b77
 80029d0:	08002bbd 	.word	0x08002bbd
 80029d4:	08002a0b 	.word	0x08002a0b
 80029d8:	08002bbd 	.word	0x08002bbd
 80029dc:	08002bbd 	.word	0x08002bbd
 80029e0:	08002a2d 	.word	0x08002a2d
      {
        case 'i':
        case 'd':
          len += itoa10(putcf, va_arg(ap, int), 0);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1d1a      	adds	r2, r3, #4
 80029e8:	60fa      	str	r2, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	17da      	asrs	r2, r3, #31
 80029ee:	461c      	mov	r4, r3
 80029f0:	4615      	mov	r5, r2
 80029f2:	2300      	movs	r3, #0
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	4622      	mov	r2, r4
 80029f8:	462b      	mov	r3, r5
 80029fa:	6978      	ldr	r0, [r7, #20]
 80029fc:	f7ff fd70 	bl	80024e0 <itoa10>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	4413      	add	r3, r2
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8002a08:	e0e7      	b.n	8002bda <evprintf+0x372>
        case 'u':
          len += itoa10Unsigned(putcf, va_arg(ap, unsigned int));
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1d1a      	adds	r2, r3, #4
 8002a0e:	60fa      	str	r2, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2200      	movs	r2, #0
 8002a14:	4698      	mov	r8, r3
 8002a16:	4691      	mov	r9, r2
 8002a18:	4642      	mov	r2, r8
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	6978      	ldr	r0, [r7, #20]
 8002a1e:	f7ff fced 	bl	80023fc <itoa10Unsigned>
 8002a22:	4602      	mov	r2, r0
 8002a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a26:	4413      	add	r3, r2
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8002a2a:	e0d6      	b.n	8002bda <evprintf+0x372>
        case 'x':
        case 'X':
          len += itoa16(putcf, va_arg(ap, unsigned int), width, padChar);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1d1a      	adds	r2, r3, #4
 8002a30:	60fa      	str	r2, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2200      	movs	r2, #0
 8002a36:	469a      	mov	sl, r3
 8002a38:	4693      	mov	fp, r2
 8002a3a:	7efb      	ldrb	r3, [r7, #27]
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	4652      	mov	r2, sl
 8002a44:	465b      	mov	r3, fp
 8002a46:	6978      	ldr	r0, [r7, #20]
 8002a48:	f7ff fd98 	bl	800257c <itoa16>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a50:	4413      	add	r3, r2
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8002a54:	e0c1      	b.n	8002bda <evprintf+0x372>
        case 'l':
          // Look ahead for ll
          if (*fmt == 'l') {
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b6c      	cmp	r3, #108	; 0x6c
 8002a5c:	d11a      	bne.n	8002a94 <evprintf+0x22c>
            fmt++;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	3301      	adds	r3, #1
 8002a62:	613b      	str	r3, [r7, #16]
            len += handleLongLong(putcf, &fmt, va_arg(ap, unsigned long long int), width, padChar);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3307      	adds	r3, #7
 8002a68:	f023 0307 	bic.w	r3, r3, #7
 8002a6c:	f103 0208 	add.w	r2, r3, #8
 8002a70:	60fa      	str	r2, [r7, #12]
 8002a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a76:	f107 0010 	add.w	r0, r7, #16
 8002a7a:	7ef9      	ldrb	r1, [r7, #27]
 8002a7c:	9101      	str	r1, [sp, #4]
 8002a7e:	69f9      	ldr	r1, [r7, #28]
 8002a80:	9100      	str	r1, [sp, #0]
 8002a82:	4601      	mov	r1, r0
 8002a84:	6978      	ldr	r0, [r7, #20]
 8002a86:	f7ff fded 	bl	8002664 <handleLongLong>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8e:	4413      	add	r3, r2
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
          } else {
            len += handleLong(putcf, &fmt, va_arg(ap, unsigned long int), width, padChar);
          }

          break;
 8002a92:	e0a2      	b.n	8002bda <evprintf+0x372>
            len += handleLong(putcf, &fmt, va_arg(ap, unsigned long int), width, padChar);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1d1a      	adds	r2, r3, #4
 8002a98:	60fa      	str	r2, [r7, #12]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	f107 0110 	add.w	r1, r7, #16
 8002aa0:	7efb      	ldrb	r3, [r7, #27]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	6978      	ldr	r0, [r7, #20]
 8002aa8:	f7ff fe56 	bl	8002758 <handleLong>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab0:	4413      	add	r3, r2
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8002ab4:	e091      	b.n	8002bda <evprintf+0x372>
        case 'f':
          num = va_arg(ap, double);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3307      	adds	r3, #7
 8002aba:	f023 0307 	bic.w	r3, r3, #7
 8002abe:	f103 0208 	add.w	r2, r3, #8
 8002ac2:	60fa      	str	r2, [r7, #12]
 8002ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	f7fe f87c 	bl	8000bc8 <__aeabi_d2f>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28
          if(num<0)
 8002ad4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002ad8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae0:	d50b      	bpl.n	8002afa <evprintf+0x292>
          {
            putcf('-');
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	202d      	movs	r0, #45	; 0x2d
 8002ae6:	4798      	blx	r3
            num = -num;
 8002ae8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002aec:	eef1 7a67 	vneg.f32	s15, s15
 8002af0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            len++;
 8002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af6:	3301      	adds	r3, #1
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
          }
          len += itoa10(putcf, (int)num, 0);
 8002afa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002afe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b02:	ee17 2a90 	vmov	r2, s15
 8002b06:	17d3      	asrs	r3, r2, #31
 8002b08:	603a      	str	r2, [r7, #0]
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b14:	6978      	ldr	r0, [r7, #20]
 8002b16:	f7ff fce3 	bl	80024e0 <itoa10>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	4413      	add	r3, r2
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
          putcf('.'); len++;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	202e      	movs	r0, #46	; 0x2e
 8002b26:	4798      	blx	r3
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
          len += itoa10(putcf, (num - (int)num) * power(10,precision), precision);
 8002b2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002b32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b3a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002b3e:	ee37 8a67 	vsub.f32	s16, s14, s15
 8002b42:	6a39      	ldr	r1, [r7, #32]
 8002b44:	200a      	movs	r0, #10
 8002b46:	f7ff fc3b 	bl	80023c0 <power>
 8002b4a:	ee07 0a90 	vmov	s15, r0
 8002b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b52:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002b56:	ee17 0a90 	vmov	r0, s15
 8002b5a:	f7fe f89d 	bl	8000c98 <__aeabi_f2lz>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	6a39      	ldr	r1, [r7, #32]
 8002b64:	9100      	str	r1, [sp, #0]
 8002b66:	6978      	ldr	r0, [r7, #20]
 8002b68:	f7ff fcba 	bl	80024e0 <itoa10>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b70:	4413      	add	r3, r2
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8002b74:	e031      	b.n	8002bda <evprintf+0x372>
        case 's':
          str = va_arg(ap, char* );
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1d1a      	adds	r2, r3, #4
 8002b7a:	60fa      	str	r2, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
          while(*str)
 8002b80:	e00a      	b.n	8002b98 <evprintf+0x330>
          {
            putcf(*str++);
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	627a      	str	r2, [r7, #36]	; 0x24
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	4610      	mov	r0, r2
 8002b90:	4798      	blx	r3
            len++;
 8002b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b94:	3301      	adds	r3, #1
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
          while(*str)
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f0      	bne.n	8002b82 <evprintf+0x31a>
          }
          break;
 8002ba0:	e01b      	b.n	8002bda <evprintf+0x372>
        case 'c':
          putcf((char)va_arg(ap, int));
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1d1a      	adds	r2, r3, #4
 8002ba6:	60fa      	str	r2, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	461a      	mov	r2, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4798      	blx	r3
          len++;
 8002bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8002bba:	e00e      	b.n	8002bda <evprintf+0x372>
        default:
          break;
 8002bbc:	bf00      	nop
 8002bbe:	e00c      	b.n	8002bda <evprintf+0x372>
 8002bc0:	080132d8 	.word	0x080132d8
      }
    }
    else
    {
      putcf(*fmt++);
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	613a      	str	r2, [r7, #16]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4798      	blx	r3
      len++;
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (*fmt)
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f47f ae4e 	bne.w	8002880 <evprintf+0x18>
    }
  }
  
  return len;
 8002be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3730      	adds	r7, #48	; 0x30
 8002bea:	46bd      	mov	sp, r7
 8002bec:	ecbd 8b02 	vpop	{d8}
 8002bf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002bf4 <eprintf>:

int eprintf(putc_t putcf, const char * fmt, ...)
{
 8002bf4:	b40e      	push	{r1, r2, r3}
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  va_list ap;
  int len;

  va_start(ap, fmt);
 8002bfe:	f107 0320 	add.w	r3, r7, #32
 8002c02:	60bb      	str	r3, [r7, #8]
  len = evprintf(putcf, fmt, ap);
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	69f9      	ldr	r1, [r7, #28]
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff fe2d 	bl	8002868 <evprintf>
 8002c0e:	60f8      	str	r0, [r7, #12]
  va_end(ap);

  return len;
 8002c10:	68fb      	ldr	r3, [r7, #12]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c1c:	b003      	add	sp, #12
 8002c1e:	4770      	bx	lr

08002c20 <queueMonitorInit>:
static int getMaxWaiting(xQueueHandle* xQueue, int prevPeak);
static void resetCounters();

unsigned char ucQueueGetQueueNumber( xQueueHandle xQueue );

void queueMonitorInit() {
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <queueMonitorInit+0x6c>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	f083 0301 	eor.w	r3, r3, #1
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d104      	bne.n	8002c3e <queueMonitorInit+0x1e>
 8002c34:	2248      	movs	r2, #72	; 0x48
 8002c36:	4916      	ldr	r1, [pc, #88]	; (8002c90 <queueMonitorInit+0x70>)
 8002c38:	4816      	ldr	r0, [pc, #88]	; (8002c94 <queueMonitorInit+0x74>)
 8002c3a:	f7ff fa7b 	bl	8002134 <assertFail>
  timer = xTimerCreateStatic( "queueMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 8002c3e:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <queueMonitorInit+0x78>)
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <queueMonitorInit+0x7c>)
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	2300      	movs	r3, #0
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f242 7110 	movw	r1, #10000	; 0x2710
 8002c4e:	4814      	ldr	r0, [pc, #80]	; (8002ca0 <queueMonitorInit+0x80>)
 8002c50:	f00b f9e0 	bl	800e014 <xTimerCreateStatic>
 8002c54:	4603      	mov	r3, r0
 8002c56:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <queueMonitorInit+0x84>)
 8002c58:	6013      	str	r3, [r2, #0]
  xTimerStart(timer, 100);
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <queueMonitorInit+0x84>)
 8002c5c:	681c      	ldr	r4, [r3, #0]
 8002c5e:	f00a fa23 	bl	800d0a8 <xTaskGetTickCount>
 8002c62:	4602      	mov	r2, r0
 8002c64:	2364      	movs	r3, #100	; 0x64
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	f00b fa4b 	bl	800e108 <xTimerGenericCommand>

  data[0].fileName = "Na";
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <queueMonitorInit+0x88>)
 8002c74:	4a0d      	ldr	r2, [pc, #52]	; (8002cac <queueMonitorInit+0x8c>)
 8002c76:	601a      	str	r2, [r3, #0]
  data[0].queueName = "Na";
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <queueMonitorInit+0x88>)
 8002c7a:	4a0c      	ldr	r2, [pc, #48]	; (8002cac <queueMonitorInit+0x8c>)
 8002c7c:	605a      	str	r2, [r3, #4]

  initialized = true;
 8002c7e:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <queueMonitorInit+0x6c>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]
}
 8002c84:	bf00      	nop
 8002c86:	3704      	adds	r7, #4
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd90      	pop	{r4, r7, pc}
 8002c8c:	2000268c 	.word	0x2000268c
 8002c90:	080128f0 	.word	0x080128f0
 8002c94:	08012914 	.word	0x08012914
 8002c98:	20002660 	.word	0x20002660
 8002c9c:	08002e4d 	.word	0x08002e4d
 8002ca0:	08012924 	.word	0x08012924
 8002ca4:	2000265c 	.word	0x2000265c
 8002ca8:	200024cc 	.word	0x200024cc
 8002cac:	08012938 	.word	0x08012938

08002cb0 <qmRegisterQueue>:

    queueData->fullCount++;
  }
}

void qmRegisterQueue(xQueueHandle* xQueue, char* fileName, char* queueName) {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  ASSERT(initialized);
 8002cbc:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <qmRegisterQueue+0x70>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d104      	bne.n	8002cce <qmRegisterQueue+0x1e>
 8002cc4:	2265      	movs	r2, #101	; 0x65
 8002cc6:	4917      	ldr	r1, [pc, #92]	; (8002d24 <qmRegisterQueue+0x74>)
 8002cc8:	4817      	ldr	r0, [pc, #92]	; (8002d28 <qmRegisterQueue+0x78>)
 8002cca:	f7ff fa33 	bl	8002134 <assertFail>
  ASSERT(nrOfQueues < MAX_NR_OF_QUEUES);
 8002cce:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <qmRegisterQueue+0x7c>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b13      	cmp	r3, #19
 8002cd4:	d904      	bls.n	8002ce0 <qmRegisterQueue+0x30>
 8002cd6:	2266      	movs	r2, #102	; 0x66
 8002cd8:	4912      	ldr	r1, [pc, #72]	; (8002d24 <qmRegisterQueue+0x74>)
 8002cda:	4815      	ldr	r0, [pc, #84]	; (8002d30 <qmRegisterQueue+0x80>)
 8002cdc:	f7ff fa2a 	bl	8002134 <assertFail>
  Data* queueData = &data[nrOfQueues];
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <qmRegisterQueue+0x7c>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4a11      	ldr	r2, [pc, #68]	; (8002d34 <qmRegisterQueue+0x84>)
 8002cf0:	4413      	add	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]

  queueData->fileName = fileName;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	601a      	str	r2, [r3, #0]
  queueData->queueName = queueName;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	605a      	str	r2, [r3, #4]
  vQueueSetQueueNumber(xQueue, nrOfQueues);
 8002d00:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <qmRegisterQueue+0x7c>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	4619      	mov	r1, r3
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f009 fcc8 	bl	800c69c <vQueueSetQueueNumber>

  nrOfQueues++;
 8002d0c:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <qmRegisterQueue+0x7c>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	3301      	adds	r3, #1
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <qmRegisterQueue+0x7c>)
 8002d16:	701a      	strb	r2, [r3, #0]
}
 8002d18:	bf00      	nop
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	2000268c 	.word	0x2000268c
 8002d24:	080128f0 	.word	0x080128f0
 8002d28:	0801293c 	.word	0x0801293c
 8002d2c:	200000d3 	.word	0x200000d3
 8002d30:	08012948 	.word	0x08012948
 8002d34:	200024cc 	.word	0x200024cc

08002d38 <debugPrint>:
    return waiting;
  }
  return prevPeak;
}

static void debugPrint() {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
  int i = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 8002d42:	2300      	movs	r3, #0
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	e013      	b.n	8002d70 <debugPrint+0x38>
    Data* queueData = &data[i];
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4a0d      	ldr	r2, [pc, #52]	; (8002d88 <debugPrint+0x50>)
 8002d54:	4413      	add	r3, r2
 8002d56:	603b      	str	r3, [r7, #0]
    if (filter(queueData)) {
 8002d58:	6838      	ldr	r0, [r7, #0]
 8002d5a:	f000 f819 	bl	8002d90 <filter>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <debugPrint+0x32>
      debugPrintQueue(queueData);
 8002d64:	6838      	ldr	r0, [r7, #0]
 8002d66:	f000 f827 	bl	8002db8 <debugPrintQueue>
  for (i = 0; i < nrOfQueues; i++) {
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	607b      	str	r3, [r7, #4]
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <debugPrint+0x54>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	dbe5      	blt.n	8002d48 <debugPrint+0x10>
    }
  }

  if (RESET_COUNTERS_AFTER_DISPLAY) {
    resetCounters();
 8002d7c:	f000 f838 	bl	8002df0 <resetCounters>
  }
}
 8002d80:	bf00      	nop
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	200024cc 	.word	0x200024cc
 8002d8c:	200000d3 	.word	0x200000d3

08002d90 <filter>:

static bool filter(Data* queueData) {
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  bool doDisplay = false;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	73fb      	strb	r3, [r7, #15]
  if (DISPLAY_ONLY_OVERFLOW_QUEUES) {
    doDisplay = (queueData->fullCount != 0);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf14      	ite	ne
 8002da4:	2301      	movne	r3, #1
 8002da6:	2300      	moveq	r3, #0
 8002da8:	73fb      	strb	r3, [r7, #15]
  } else {
    doDisplay = true;
  }
  return doDisplay;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <debugPrintQueue>:

static void debugPrintQueue(Data* queueData) {
 8002db8:	b590      	push	{r4, r7, lr}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	6078      	str	r0, [r7, #4]
  printf("%s:%s, sent: %i, peak: %i, full: %i\n",queueData->fileName, queueData->queueName, queueData->sendCount,queueData->maxWaiting, queueData->fullCount);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6819      	ldr	r1, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6858      	ldr	r0, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689c      	ldr	r4, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6912      	ldr	r2, [r2, #16]
 8002dd4:	9201      	str	r2, [sp, #4]
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	4623      	mov	r3, r4
 8002dda:	4602      	mov	r2, r0
 8002ddc:	4803      	ldr	r0, [pc, #12]	; (8002dec <debugPrintQueue+0x34>)
 8002dde:	f00d fbad 	bl	801053c <iprintf>
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd90      	pop	{r4, r7, pc}
 8002dea:	bf00      	nop
 8002dec:	08012984 	.word	0x08012984

08002df0 <resetCounters>:

static void resetCounters() {
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
  int i = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	607b      	str	r3, [r7, #4]
 8002dfe:	e013      	b.n	8002e28 <resetCounters+0x38>
    Data* queueData = &data[i];
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4a0e      	ldr	r2, [pc, #56]	; (8002e44 <resetCounters+0x54>)
 8002e0c:	4413      	add	r3, r2
 8002e0e:	603b      	str	r3, [r7, #0]

    queueData->sendCount = 0;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	2200      	movs	r2, #0
 8002e14:	609a      	str	r2, [r3, #8]
    queueData->maxWaiting = 0;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	60da      	str	r2, [r3, #12]
    queueData->fullCount = 0;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	611a      	str	r2, [r3, #16]
  for (i = 0; i < nrOfQueues; i++) {
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3301      	adds	r3, #1
 8002e26:	607b      	str	r3, [r7, #4]
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <resetCounters+0x58>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4293      	cmp	r3, r2
 8002e32:	dbe5      	blt.n	8002e00 <resetCounters+0x10>
  }
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	200024cc 	.word	0x200024cc
 8002e48:	200000d3 	.word	0x200000d3

08002e4c <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  debugPrint();
 8002e54:	f7ff ff70 	bl	8002d38 <debugPrint>
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <sysLoadInit>:
static int taskTopIndex = 0;
static uint32_t previousTotalRunTime = 0;

static StaticTimer_t timerBuffer;

void sysLoadInit() {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 8002e66:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <sysLoadInit+0x58>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	f083 0301 	eor.w	r3, r3, #1
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d104      	bne.n	8002e7e <sysLoadInit+0x1e>
 8002e74:	223c      	movs	r2, #60	; 0x3c
 8002e76:	4911      	ldr	r1, [pc, #68]	; (8002ebc <sysLoadInit+0x5c>)
 8002e78:	4811      	ldr	r0, [pc, #68]	; (8002ec0 <sysLoadInit+0x60>)
 8002e7a:	f7ff f95b 	bl	8002134 <assertFail>

  xTimerHandle timer = xTimerCreateStatic( "sysLoadMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <sysLoadInit+0x64>)
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <sysLoadInit+0x68>)
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	2300      	movs	r3, #0
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e8e:	480f      	ldr	r0, [pc, #60]	; (8002ecc <sysLoadInit+0x6c>)
 8002e90:	f00b f8c0 	bl	800e014 <xTimerCreateStatic>
 8002e94:	6078      	str	r0, [r7, #4]
  xTimerStart(timer, 100);
 8002e96:	f00a f907 	bl	800d0a8 <xTaskGetTickCount>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	2364      	movs	r3, #100	; 0x64
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f00b f92f 	bl	800e108 <xTimerGenericCommand>

  initialized = true;
 8002eaa:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <sysLoadInit+0x58>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	701a      	strb	r2, [r3, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	2000268d 	.word	0x2000268d
 8002ebc:	080129ac 	.word	0x080129ac
 8002ec0:	080129c8 	.word	0x080129c8
 8002ec4:	20002698 	.word	0x20002698
 8002ec8:	08002f51 	.word	0x08002f51
 8002ecc:	080129d8 	.word	0x080129d8

08002ed0 <getPreviousTaskData>:


static taskData_t* getPreviousTaskData(uint32_t xTaskNumber) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  // Try to find the task in the list of tasks
  for (int i = 0; i < taskTopIndex; i++) {
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	e00f      	b.n	8002efe <getPreviousTaskData+0x2e>
    if (previousSnapshot[i].xTaskNumber == xTaskNumber) {
 8002ede:	4a18      	ldr	r2, [pc, #96]	; (8002f40 <getPreviousTaskData+0x70>)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d104      	bne.n	8002ef8 <getPreviousTaskData+0x28>
      return &previousSnapshot[i];
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4a13      	ldr	r2, [pc, #76]	; (8002f40 <getPreviousTaskData+0x70>)
 8002ef4:	4413      	add	r3, r2
 8002ef6:	e01f      	b.n	8002f38 <getPreviousTaskData+0x68>
  for (int i = 0; i < taskTopIndex; i++) {
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	3301      	adds	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <getPreviousTaskData+0x74>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	dbea      	blt.n	8002ede <getPreviousTaskData+0xe>
    }
  }

  // Allocate a new entry
  ASSERT(taskTopIndex < TASK_MAX_COUNT);
 8002f08:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <getPreviousTaskData+0x74>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b1f      	cmp	r3, #31
 8002f0e:	dd04      	ble.n	8002f1a <getPreviousTaskData+0x4a>
 8002f10:	224e      	movs	r2, #78	; 0x4e
 8002f12:	490d      	ldr	r1, [pc, #52]	; (8002f48 <getPreviousTaskData+0x78>)
 8002f14:	480d      	ldr	r0, [pc, #52]	; (8002f4c <getPreviousTaskData+0x7c>)
 8002f16:	f7ff f90d 	bl	8002134 <assertFail>
  taskData_t* result = &previousSnapshot[taskTopIndex];
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <getPreviousTaskData+0x74>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <getPreviousTaskData+0x70>)
 8002f22:	4413      	add	r3, r2
 8002f24:	60bb      	str	r3, [r7, #8]
  result->xTaskNumber = xTaskNumber;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	605a      	str	r2, [r3, #4]

  taskTopIndex++;
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <getPreviousTaskData+0x74>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3301      	adds	r3, #1
 8002f32:	4a04      	ldr	r2, [pc, #16]	; (8002f44 <getPreviousTaskData+0x74>)
 8002f34:	6013      	str	r3, [r2, #0]

  return result;
 8002f36:	68bb      	ldr	r3, [r7, #8]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	200016d8 	.word	0x200016d8
 8002f44:	20002690 	.word	0x20002690
 8002f48:	080129ac 	.word	0x080129ac
 8002f4c:	080129ec 	.word	0x080129ec

08002f50 <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8002f56:	af02      	add	r7, sp, #8
 8002f58:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002f5c:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8002f60:	6018      	str	r0, [r3, #0]
  if (triggerDump != 0) {
 8002f62:	4b4e      	ldr	r3, [pc, #312]	; (800309c <timerHandler+0x14c>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 8092 	beq.w	8003090 <timerHandler+0x140>
    uint32_t totalRunTime;

    TaskStatus_t taskStats[TASK_MAX_COUNT];
    uint32_t taskCount = uxTaskGetSystemState(taskStats, TASK_MAX_COUNT, &totalRunTime);
 8002f6c:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 8002f70:	f107 030c 	add.w	r3, r7, #12
 8002f74:	2120      	movs	r1, #32
 8002f76:	4618      	mov	r0, r3
 8002f78:	f00a f8a6 	bl	800d0c8 <uxTaskGetSystemState>
 8002f7c:	f8c7 04a8 	str.w	r0, [r7, #1192]	; 0x4a8
    ASSERT(taskCount < TASK_MAX_COUNT);
 8002f80:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8002f84:	2b1f      	cmp	r3, #31
 8002f86:	d904      	bls.n	8002f92 <timerHandler+0x42>
 8002f88:	225d      	movs	r2, #93	; 0x5d
 8002f8a:	4945      	ldr	r1, [pc, #276]	; (80030a0 <timerHandler+0x150>)
 8002f8c:	4845      	ldr	r0, [pc, #276]	; (80030a4 <timerHandler+0x154>)
 8002f8e:	f7ff f8d1 	bl	8002134 <assertFail>

    uint32_t totalDelta = totalRunTime - previousTotalRunTime;
 8002f92:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 8002f96:	4b44      	ldr	r3, [pc, #272]	; (80030a8 <timerHandler+0x158>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
    float f = 100.0 / totalDelta;
 8002fa0:	f8d7 04a4 	ldr.w	r0, [r7, #1188]	; 0x4a4
 8002fa4:	f7fd fabe 	bl	8000524 <__aeabi_ui2d>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	f04f 0000 	mov.w	r0, #0
 8002fb0:	493e      	ldr	r1, [pc, #248]	; (80030ac <timerHandler+0x15c>)
 8002fb2:	f7fd fc5b 	bl	800086c <__aeabi_ddiv>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4610      	mov	r0, r2
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f7fd fe03 	bl	8000bc8 <__aeabi_d2f>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8002fc8:	6013      	str	r3, [r2, #0]

    // Dumps the the CPU load and stack usage for all tasks
    // CPU usage is since last dump in % compared to total time spent in tasks. Note that time spent in interrupts will be included in measured time.
    // Stack usage is displayed as nr of unused bytes at peak stack usage.

    DEBUG_PRINT("Task dump\n");
 8002fca:	4939      	ldr	r1, [pc, #228]	; (80030b0 <timerHandler+0x160>)
 8002fcc:	4839      	ldr	r0, [pc, #228]	; (80030b4 <timerHandler+0x164>)
 8002fce:	f7ff fe11 	bl	8002bf4 <eprintf>
    DEBUG_PRINT("Load\tStack left\tName\n");
 8002fd2:	4939      	ldr	r1, [pc, #228]	; (80030b8 <timerHandler+0x168>)
 8002fd4:	4837      	ldr	r0, [pc, #220]	; (80030b4 <timerHandler+0x164>)
 8002fd6:	f7ff fe0d 	bl	8002bf4 <eprintf>
    for (uint32_t i = 0; i < taskCount; i++) {
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8002fe0:	e049      	b.n	8003076 <timerHandler+0x126>
      TaskStatus_t* stats = &taskStats[i];
 8002fe2:	f107 010c 	add.w	r1, r7, #12
 8002fe6:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      taskData_t* previousTaskData = getPreviousTaskData(stats->xTaskNumber);
 8002ff8:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ff66 	bl	8002ed0 <getPreviousTaskData>
 8003004:	f8c7 0498 	str.w	r0, [r7, #1176]	; 0x498

      uint32_t taskRunTime = stats->ulRunTimeCounter;
 8003008:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
      float load = f * (taskRunTime - previousTaskData->ulRunTimeCounter);
 8003012:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003026:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800302a:	ed93 7a00 	vldr	s14, [r3]
 800302e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003032:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003036:	edc3 7a00 	vstr	s15, [r3]
      DEBUG_PRINT("%.2f \t%u \t%s\n", (double)load, stats->usStackHighWaterMark, stats->pcTaskName);
 800303a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	f7fd fa92 	bl	8000568 <__aeabi_f2d>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 800304c:	8c09      	ldrh	r1, [r1, #32]
 800304e:	4608      	mov	r0, r1
 8003050:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 8003054:	6849      	ldr	r1, [r1, #4]
 8003056:	9101      	str	r1, [sp, #4]
 8003058:	9000      	str	r0, [sp, #0]
 800305a:	4918      	ldr	r1, [pc, #96]	; (80030bc <timerHandler+0x16c>)
 800305c:	4815      	ldr	r0, [pc, #84]	; (80030b4 <timerHandler+0x164>)
 800305e:	f7ff fdc9 	bl	8002bf4 <eprintf>

      previousTaskData->ulRunTimeCounter = taskRunTime;
 8003062:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8003066:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 800306a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < taskCount; i++) {
 800306c:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 8003070:	3301      	adds	r3, #1
 8003072:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8003076:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 800307a:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 800307e:	429a      	cmp	r2, r3
 8003080:	d3af      	bcc.n	8002fe2 <timerHandler+0x92>
    }

    previousTotalRunTime = totalRunTime;
 8003082:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8003086:	4a08      	ldr	r2, [pc, #32]	; (80030a8 <timerHandler+0x158>)
 8003088:	6013      	str	r3, [r2, #0]

    triggerDump = 0;
 800308a:	4b04      	ldr	r3, [pc, #16]	; (800309c <timerHandler+0x14c>)
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
  }
}
 8003090:	bf00      	nop
 8003092:	f507 6796 	add.w	r7, r7, #1200	; 0x4b0
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	2000268e 	.word	0x2000268e
 80030a0:	080129ac 	.word	0x080129ac
 80030a4:	08012a0c 	.word	0x08012a0c
 80030a8:	20002694 	.word	0x20002694
 80030ac:	40590000 	.word	0x40590000
 80030b0:	08012a28 	.word	0x08012a28
 80030b4:	08002365 	.word	0x08002365
 80030b8:	08012a3c 	.word	0x08012a3c
 80030bc:	08012a5c 	.word	0x08012a5c

080030c0 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0

}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80030ce:	b480      	push	{r7}
 80030d0:	af00      	add	r7, sp, #0
return 0;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4a07      	ldr	r2, [pc, #28]	; (8003120 <vApplicationGetIdleTaskMemory+0x2c>)
 8003104:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4a06      	ldr	r2, [pc, #24]	; (8003124 <vApplicationGetIdleTaskMemory+0x30>)
 800310a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2280      	movs	r2, #128	; 0x80
 8003110:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003112:	bf00      	nop
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	200026c4 	.word	0x200026c4
 8003124:	20002778 	.word	0x20002778

08003128 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4a07      	ldr	r2, [pc, #28]	; (8003154 <vApplicationGetTimerTaskMemory+0x2c>)
 8003138:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4a06      	ldr	r2, [pc, #24]	; (8003158 <vApplicationGetTimerTaskMemory+0x30>)
 800313e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003146:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003148:	bf00      	nop
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	20002978 	.word	0x20002978
 8003158:	20002a2c 	.word	0x20002a2c

0800315c <LL_SPI_SetStandard>:
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f023 0210 	bic.w	r2, r3, #16
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	605a      	str	r2, [r3, #4]
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <LL_AHB1_GRP1_EnableClock>:
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800318c:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800318e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003190:	4907      	ldr	r1, [pc, #28]	; (80031b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4313      	orrs	r3, r2
 8003196:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003198:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800319a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4013      	ands	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031a2:	68fb      	ldr	r3, [r7, #12]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	40023800 	.word	0x40023800

080031b4 <LL_APB2_GRP1_EnableClock>:
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80031be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031c0:	4907      	ldr	r1, [pc, #28]	; (80031e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80031ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4013      	ands	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031d2:	68fb      	ldr	r3, [r7, #12]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	40023800 	.word	0x40023800

080031e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031e4:	b5b0      	push	{r4, r5, r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031ea:	f000 fddf 	bl	8003dac <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031ee:	f000 f871 	bl	80032d4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031f2:	f000 f9a9 	bl	8003548 <MX_GPIO_Init>
  MX_DMA_Init();
 80031f6:	f000 f987 	bl	8003508 <MX_DMA_Init>
  MX_USART6_UART_Init();
 80031fa:	f000 f95b 	bl	80034b4 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 80031fe:	f000 f923 	bl	8003448 <MX_TIM7_Init>
  MX_SPI1_Init();
 8003202:	f000 f8cf 	bl	80033a4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

//  InitTick(72000000, 1000000U);			//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8003206:	4b29      	ldr	r3, [pc, #164]	; (80032ac <main+0xc8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	4b27      	ldr	r3, [pc, #156]	; (80032ac <main+0xc8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 0220 	orr.w	r2, r2, #32
 8003214:	60da      	str	r2, [r3, #12]

  freertos_IntroTitle();
 8003216:	f000 fa23 	bl	8003660 <freertos_IntroTitle>



  check_enter_bootloader();
 800321a:	f7fe fa69 	bl	80016f0 <check_enter_bootloader>

  int err = platformInit();
 800321e:	f7fe fe76 	bl	8001f0e <platformInit>
 8003222:	61f8      	str	r0, [r7, #28]
  if (err != 0) {
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d000      	beq.n	800322c <main+0x48>
  	    // The firmware is running on the wrong hardware. Halt
  	    while(1);
 800322a:	e7fe      	b.n	800322a <main+0x46>
  }

  HAL_TIM_Base_Start_IT(&htim7);
 800322c:	4820      	ldr	r0, [pc, #128]	; (80032b0 <main+0xcc>)
 800322e:	f003 fbcf 	bl	80069d0 <HAL_TIM_Base_Start_IT>
  t1 = DWT->CYCCNT;
 8003232:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <main+0xd0>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4a20      	ldr	r2, [pc, #128]	; (80032b8 <main+0xd4>)
 8003238:	6013      	str	r3, [r2, #0]
  delay_us(1000);	// 1002 us
 800323a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800323e:	f000 fa9d 	bl	800377c <delay_us>
//  vTaskDelay(1);	// 입력값에 상관없이 약 7us, 정상적인 동작 안됨
//  usDelay(10);
//  HAL_Delay(1);		// 1350 us
  t2 = DWT->CYCCNT;
 8003242:	4b1c      	ldr	r3, [pc, #112]	; (80032b4 <main+0xd0>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4a1d      	ldr	r2, [pc, #116]	; (80032bc <main+0xd8>)
 8003248:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Stop_IT(&htim7);
 800324a:	4819      	ldr	r0, [pc, #100]	; (80032b0 <main+0xcc>)
 800324c:	f003 fc30 	bl	8006ab0 <HAL_TIM_Base_Stop_IT>
  DEBUG_PRINT("delay = %.2f(us)\n",(float)(t2-t1)/CLOCK_PER_USEC);
 8003250:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <main+0xd8>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b18      	ldr	r3, [pc, #96]	; (80032b8 <main+0xd4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003262:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80032c0 <main+0xdc>
 8003266:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800326a:	ee16 0a90 	vmov	r0, s13
 800326e:	f7fd f97b 	bl	8000568 <__aeabi_f2d>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4913      	ldr	r1, [pc, #76]	; (80032c4 <main+0xe0>)
 8003278:	4813      	ldr	r0, [pc, #76]	; (80032c8 <main+0xe4>)
 800327a:	f7ff fcbb 	bl	8002bf4 <eprintf>
//  uint32_t ld = SysTick->LOAD;


  systemLaunch();
 800327e:	f7fe fb79 	bl	8001974 <systemLaunch>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <main+0xe8>)
 8003284:	463c      	mov	r4, r7
 8003286:	461d      	mov	r5, r3
 8003288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800328a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800328c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003294:	463b      	mov	r3, r7
 8003296:	2100      	movs	r1, #0
 8003298:	4618      	mov	r0, r3
 800329a:	f008 fae0 	bl	800b85e <osThreadCreate>
 800329e:	4603      	mov	r3, r0
 80032a0:	4a0b      	ldr	r2, [pc, #44]	; (80032d0 <main+0xec>)
 80032a2:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80032a4:	f008 fad4 	bl	800b850 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80032a8:	e7fe      	b.n	80032a8 <main+0xc4>
 80032aa:	bf00      	nop
 80032ac:	20003274 	.word	0x20003274
 80032b0:	2000322c 	.word	0x2000322c
 80032b4:	e0001000 	.word	0xe0001000
 80032b8:	20003320 	.word	0x20003320
 80032bc:	20003324 	.word	0x20003324
 80032c0:	42900000 	.word	0x42900000
 80032c4:	08012afc 	.word	0x08012afc
 80032c8:	08002365 	.word	0x08002365
 80032cc:	08012b1c 	.word	0x08012b1c
 80032d0:	2000331c 	.word	0x2000331c

080032d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b094      	sub	sp, #80	; 0x50
 80032d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032da:	f107 0320 	add.w	r3, r7, #32
 80032de:	2230      	movs	r2, #48	; 0x30
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f00d fa1c 	bl	8010720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032e8:	f107 030c 	add.w	r3, r7, #12
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032f8:	2300      	movs	r3, #0
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	4b27      	ldr	r3, [pc, #156]	; (800339c <SystemClock_Config+0xc8>)
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	4a26      	ldr	r2, [pc, #152]	; (800339c <SystemClock_Config+0xc8>)
 8003302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003306:	6413      	str	r3, [r2, #64]	; 0x40
 8003308:	4b24      	ldr	r3, [pc, #144]	; (800339c <SystemClock_Config+0xc8>)
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003314:	2300      	movs	r3, #0
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	4b21      	ldr	r3, [pc, #132]	; (80033a0 <SystemClock_Config+0xcc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a20      	ldr	r2, [pc, #128]	; (80033a0 <SystemClock_Config+0xcc>)
 800331e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b1e      	ldr	r3, [pc, #120]	; (80033a0 <SystemClock_Config+0xcc>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003330:	2301      	movs	r3, #1
 8003332:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800333a:	2302      	movs	r3, #2
 800333c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800333e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003342:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003344:	2304      	movs	r3, #4
 8003346:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003348:	2348      	movs	r3, #72	; 0x48
 800334a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800334c:	2302      	movs	r3, #2
 800334e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003350:	2303      	movs	r3, #3
 8003352:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003354:	f107 0320 	add.w	r3, r7, #32
 8003358:	4618      	mov	r0, r3
 800335a:	f002 fe51 	bl	8006000 <HAL_RCC_OscConfig>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003364:	f000 fa38 	bl	80037d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003368:	230f      	movs	r3, #15
 800336a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800336c:	2302      	movs	r3, #2
 800336e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003378:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800337e:	f107 030c 	add.w	r3, r7, #12
 8003382:	2102      	movs	r1, #2
 8003384:	4618      	mov	r0, r3
 8003386:	f003 f8b3 	bl	80064f0 <HAL_RCC_ClockConfig>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003390:	f000 fa22 	bl	80037d8 <Error_Handler>
  }
}
 8003394:	bf00      	nop
 8003396:	3750      	adds	r7, #80	; 0x50
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40023800 	.word	0x40023800
 80033a0:	40007000 	.word	0x40007000

080033a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b090      	sub	sp, #64	; 0x40
 80033a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80033aa:	f107 0318 	add.w	r3, r7, #24
 80033ae:	2228      	movs	r2, #40	; 0x28
 80033b0:	2100      	movs	r1, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f00d f9b4 	bl	8010720 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b8:	463b      	mov	r3, r7
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	609a      	str	r2, [r3, #8]
 80033c2:	60da      	str	r2, [r3, #12]
 80033c4:	611a      	str	r2, [r3, #16]
 80033c6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80033c8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80033cc:	f7ff fef2 	bl	80031b4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80033d0:	2001      	movs	r0, #1
 80033d2:	f7ff fed7 	bl	8003184 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80033d6:	23e0      	movs	r3, #224	; 0xe0
 80033d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80033da:	2302      	movs	r3, #2
 80033dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80033de:	2303      	movs	r3, #3
 80033e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80033e6:	2300      	movs	r3, #0
 80033e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80033ea:	2305      	movs	r3, #5
 80033ec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ee:	463b      	mov	r3, r7
 80033f0:	4619      	mov	r1, r3
 80033f2:	4813      	ldr	r0, [pc, #76]	; (8003440 <MX_SPI1_Init+0x9c>)
 80033f4:	f004 fe53 	bl	800809e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80033fc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003400:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003402:	2300      	movs	r3, #0
 8003404:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003406:	2302      	movs	r3, #2
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800340a:	2301      	movs	r3, #1
 800340c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800340e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8003414:	2310      	movs	r3, #16
 8003416:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003418:	2300      	movs	r3, #0
 800341a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800341c:	2300      	movs	r3, #0
 800341e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003420:	230a      	movs	r3, #10
 8003422:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003424:	f107 0318 	add.w	r3, r7, #24
 8003428:	4619      	mov	r1, r3
 800342a:	4806      	ldr	r0, [pc, #24]	; (8003444 <MX_SPI1_Init+0xa0>)
 800342c:	f004 fedb 	bl	80081e6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003430:	2100      	movs	r1, #0
 8003432:	4804      	ldr	r0, [pc, #16]	; (8003444 <MX_SPI1_Init+0xa0>)
 8003434:	f7ff fe92 	bl	800315c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003438:	bf00      	nop
 800343a:	3740      	adds	r7, #64	; 0x40
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40020000 	.word	0x40020000
 8003444:	40013000 	.word	0x40013000

08003448 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800344e:	463b      	mov	r3, r7
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003456:	4b15      	ldr	r3, [pc, #84]	; (80034ac <MX_TIM7_Init+0x64>)
 8003458:	4a15      	ldr	r2, [pc, #84]	; (80034b0 <MX_TIM7_Init+0x68>)
 800345a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 800345c:	4b13      	ldr	r3, [pc, #76]	; (80034ac <MX_TIM7_Init+0x64>)
 800345e:	2247      	movs	r2, #71	; 0x47
 8003460:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003462:	4b12      	ldr	r3, [pc, #72]	; (80034ac <MX_TIM7_Init+0x64>)
 8003464:	2200      	movs	r2, #0
 8003466:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8003468:	4b10      	ldr	r3, [pc, #64]	; (80034ac <MX_TIM7_Init+0x64>)
 800346a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800346e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003470:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <MX_TIM7_Init+0x64>)
 8003472:	2200      	movs	r2, #0
 8003474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003476:	480d      	ldr	r0, [pc, #52]	; (80034ac <MX_TIM7_Init+0x64>)
 8003478:	f003 fa5a 	bl	8006930 <HAL_TIM_Base_Init>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003482:	f000 f9a9 	bl	80037d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003486:	2300      	movs	r3, #0
 8003488:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800348a:	2300      	movs	r3, #0
 800348c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800348e:	463b      	mov	r3, r7
 8003490:	4619      	mov	r1, r3
 8003492:	4806      	ldr	r0, [pc, #24]	; (80034ac <MX_TIM7_Init+0x64>)
 8003494:	f003 fd0a 	bl	8006eac <HAL_TIMEx_MasterConfigSynchronization>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800349e:	f000 f99b 	bl	80037d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	2000322c 	.word	0x2000322c
 80034b0:	40001400 	.word	0x40001400

080034b4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80034b8:	4b11      	ldr	r3, [pc, #68]	; (8003500 <MX_USART6_UART_Init+0x4c>)
 80034ba:	4a12      	ldr	r2, [pc, #72]	; (8003504 <MX_USART6_UART_Init+0x50>)
 80034bc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <MX_USART6_UART_Init+0x4c>)
 80034c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034c4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80034c6:	4b0e      	ldr	r3, [pc, #56]	; (8003500 <MX_USART6_UART_Init+0x4c>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <MX_USART6_UART_Init+0x4c>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80034d2:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <MX_USART6_UART_Init+0x4c>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80034d8:	4b09      	ldr	r3, [pc, #36]	; (8003500 <MX_USART6_UART_Init+0x4c>)
 80034da:	220c      	movs	r2, #12
 80034dc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <MX_USART6_UART_Init+0x4c>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80034e4:	4b06      	ldr	r3, [pc, #24]	; (8003500 <MX_USART6_UART_Init+0x4c>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80034ea:	4805      	ldr	r0, [pc, #20]	; (8003500 <MX_USART6_UART_Init+0x4c>)
 80034ec:	f003 fd6e 	bl	8006fcc <HAL_UART_Init>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80034f6:	f000 f96f 	bl	80037d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20003274 	.word	0x20003274
 8003504:	40011400 	.word	0x40011400

08003508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	607b      	str	r3, [r7, #4]
 8003512:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <MX_DMA_Init+0x3c>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	4a0b      	ldr	r2, [pc, #44]	; (8003544 <MX_DMA_Init+0x3c>)
 8003518:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800351c:	6313      	str	r3, [r2, #48]	; 0x30
 800351e:	4b09      	ldr	r3, [pc, #36]	; (8003544 <MX_DMA_Init+0x3c>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003526:	607b      	str	r3, [r7, #4]
 8003528:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800352a:	2200      	movs	r2, #0
 800352c:	2105      	movs	r1, #5
 800352e:	2045      	movs	r0, #69	; 0x45
 8003530:	f000 fdad 	bl	800408e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003534:	2045      	movs	r0, #69	; 0x45
 8003536:	f000 fdc6 	bl	80040c6 <HAL_NVIC_EnableIRQ>

}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800

08003548 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354e:	f107 0314 	add.w	r3, r7, #20
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	605a      	str	r2, [r3, #4]
 8003558:	609a      	str	r2, [r3, #8]
 800355a:	60da      	str	r2, [r3, #12]
 800355c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	4b36      	ldr	r3, [pc, #216]	; (800363c <MX_GPIO_Init+0xf4>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	4a35      	ldr	r2, [pc, #212]	; (800363c <MX_GPIO_Init+0xf4>)
 8003568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800356c:	6313      	str	r3, [r2, #48]	; 0x30
 800356e:	4b33      	ldr	r3, [pc, #204]	; (800363c <MX_GPIO_Init+0xf4>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003576:	613b      	str	r3, [r7, #16]
 8003578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	4b2f      	ldr	r3, [pc, #188]	; (800363c <MX_GPIO_Init+0xf4>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	4a2e      	ldr	r2, [pc, #184]	; (800363c <MX_GPIO_Init+0xf4>)
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	6313      	str	r3, [r2, #48]	; 0x30
 800358a:	4b2c      	ldr	r3, [pc, #176]	; (800363c <MX_GPIO_Init+0xf4>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	4b28      	ldr	r3, [pc, #160]	; (800363c <MX_GPIO_Init+0xf4>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	4a27      	ldr	r2, [pc, #156]	; (800363c <MX_GPIO_Init+0xf4>)
 80035a0:	f043 0304 	orr.w	r3, r3, #4
 80035a4:	6313      	str	r3, [r2, #48]	; 0x30
 80035a6:	4b25      	ldr	r3, [pc, #148]	; (800363c <MX_GPIO_Init+0xf4>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	607b      	str	r3, [r7, #4]
 80035b6:	4b21      	ldr	r3, [pc, #132]	; (800363c <MX_GPIO_Init+0xf4>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	4a20      	ldr	r2, [pc, #128]	; (800363c <MX_GPIO_Init+0xf4>)
 80035bc:	f043 0302 	orr.w	r3, r3, #2
 80035c0:	6313      	str	r3, [r2, #48]	; 0x30
 80035c2:	4b1e      	ldr	r3, [pc, #120]	; (800363c <MX_GPIO_Init+0xf4>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	607b      	str	r3, [r7, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_PIN_GPIO_Port, SPI1_NSS_PIN_Pin, GPIO_PIN_SET);
 80035ce:	2201      	movs	r2, #1
 80035d0:	2110      	movs	r1, #16
 80035d2:	481b      	ldr	r0, [pc, #108]	; (8003640 <MX_GPIO_Init+0xf8>)
 80035d4:	f001 faaa 	bl	8004b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80035d8:	2200      	movs	r2, #0
 80035da:	2120      	movs	r1, #32
 80035dc:	4819      	ldr	r0, [pc, #100]	; (8003644 <MX_GPIO_Init+0xfc>)
 80035de:	f001 faa5 	bl	8004b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_PIN_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_PIN_Pin;
 80035e2:	2310      	movs	r3, #16
 80035e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e6:	2301      	movs	r3, #1
 80035e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ee:	2303      	movs	r3, #3
 80035f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_PIN_GPIO_Port, &GPIO_InitStruct);
 80035f2:	f107 0314 	add.w	r3, r7, #20
 80035f6:	4619      	mov	r1, r3
 80035f8:	4811      	ldr	r0, [pc, #68]	; (8003640 <MX_GPIO_Init+0xf8>)
 80035fa:	f001 f8fb 	bl	80047f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_INT_Pin */
  GPIO_InitStruct.Pin = SPI1_INT_Pin;
 80035fe:	2310      	movs	r3, #16
 8003600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003602:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_INT_GPIO_Port, &GPIO_InitStruct);
 800360c:	f107 0314 	add.w	r3, r7, #20
 8003610:	4619      	mov	r1, r3
 8003612:	480d      	ldr	r0, [pc, #52]	; (8003648 <MX_GPIO_Init+0x100>)
 8003614:	f001 f8ee 	bl	80047f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8003618:	2320      	movs	r3, #32
 800361a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800361c:	2301      	movs	r3, #1
 800361e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003624:	2300      	movs	r3, #0
 8003626:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8003628:	f107 0314 	add.w	r3, r7, #20
 800362c:	4619      	mov	r1, r3
 800362e:	4805      	ldr	r0, [pc, #20]	; (8003644 <MX_GPIO_Init+0xfc>)
 8003630:	f001 f8e0 	bl	80047f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003634:	bf00      	nop
 8003636:	3728      	adds	r7, #40	; 0x28
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40023800 	.word	0x40023800
 8003640:	40020000 	.word	0x40020000
 8003644:	40020400 	.word	0x40020400
 8003648:	40020800 	.word	0x40020800

0800364c <OSVersion>:

/* USER CODE BEGIN 4 */

char* OSVersion(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 8003650:	4b02      	ldr	r3, [pc, #8]	; (800365c <OSVersion+0x10>)
}
 8003652:	4618      	mov	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	08012b38 	.word	0x08012b38

08003660 <freertos_IntroTitle>:


void freertos_IntroTitle(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 8003664:	492e      	ldr	r1, [pc, #184]	; (8003720 <freertos_IntroTitle+0xc0>)
 8003666:	482f      	ldr	r0, [pc, #188]	; (8003724 <freertos_IntroTitle+0xc4>)
 8003668:	f7ff fac4 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 800366c:	492e      	ldr	r1, [pc, #184]	; (8003728 <freertos_IntroTitle+0xc8>)
 800366e:	482d      	ldr	r0, [pc, #180]	; (8003724 <freertos_IntroTitle+0xc4>)
 8003670:	f7ff fac0 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 8003674:	492d      	ldr	r1, [pc, #180]	; (800372c <freertos_IntroTitle+0xcc>)
 8003676:	482b      	ldr	r0, [pc, #172]	; (8003724 <freertos_IntroTitle+0xc4>)
 8003678:	f7ff fabc 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 800367c:	492c      	ldr	r1, [pc, #176]	; (8003730 <freertos_IntroTitle+0xd0>)
 800367e:	4829      	ldr	r0, [pc, #164]	; (8003724 <freertos_IntroTitle+0xc4>)
 8003680:	f7ff fab8 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 8003684:	492b      	ldr	r1, [pc, #172]	; (8003734 <freertos_IntroTitle+0xd4>)
 8003686:	4827      	ldr	r0, [pc, #156]	; (8003724 <freertos_IntroTitle+0xc4>)
 8003688:	f7ff fab4 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 800368c:	492a      	ldr	r1, [pc, #168]	; (8003738 <freertos_IntroTitle+0xd8>)
 800368e:	4825      	ldr	r0, [pc, #148]	; (8003724 <freertos_IntroTitle+0xc4>)
 8003690:	f7ff fab0 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 8003694:	4929      	ldr	r1, [pc, #164]	; (800373c <freertos_IntroTitle+0xdc>)
 8003696:	4823      	ldr	r0, [pc, #140]	; (8003724 <freertos_IntroTitle+0xc4>)
 8003698:	f7ff faac 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 800369c:	4928      	ldr	r1, [pc, #160]	; (8003740 <freertos_IntroTitle+0xe0>)
 800369e:	4821      	ldr	r0, [pc, #132]	; (8003724 <freertos_IntroTitle+0xc4>)
 80036a0:	f7ff faa8 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 80036a4:	4927      	ldr	r1, [pc, #156]	; (8003744 <freertos_IntroTitle+0xe4>)
 80036a6:	481f      	ldr	r0, [pc, #124]	; (8003724 <freertos_IntroTitle+0xc4>)
 80036a8:	f7ff faa4 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 80036ac:	4926      	ldr	r1, [pc, #152]	; (8003748 <freertos_IntroTitle+0xe8>)
 80036ae:	481d      	ldr	r0, [pc, #116]	; (8003724 <freertos_IntroTitle+0xc4>)
 80036b0:	f7ff faa0 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 80036b4:	4925      	ldr	r1, [pc, #148]	; (800374c <freertos_IntroTitle+0xec>)
 80036b6:	481b      	ldr	r0, [pc, #108]	; (8003724 <freertos_IntroTitle+0xc4>)
 80036b8:	f7ff fa9c 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 80036bc:	4924      	ldr	r1, [pc, #144]	; (8003750 <freertos_IntroTitle+0xf0>)
 80036be:	4819      	ldr	r0, [pc, #100]	; (8003724 <freertos_IntroTitle+0xc4>)
 80036c0:	f7ff fa98 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 80036c4:	4923      	ldr	r1, [pc, #140]	; (8003754 <freertos_IntroTitle+0xf4>)
 80036c6:	4817      	ldr	r0, [pc, #92]	; (8003724 <freertos_IntroTitle+0xc4>)
 80036c8:	f7ff fa94 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 80036cc:	4922      	ldr	r1, [pc, #136]	; (8003758 <freertos_IntroTitle+0xf8>)
 80036ce:	4815      	ldr	r0, [pc, #84]	; (8003724 <freertos_IntroTitle+0xc4>)
 80036d0:	f7ff fa90 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 80036d4:	4921      	ldr	r1, [pc, #132]	; (800375c <freertos_IntroTitle+0xfc>)
 80036d6:	4813      	ldr	r0, [pc, #76]	; (8003724 <freertos_IntroTitle+0xc4>)
 80036d8:	f7ff fa8c 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 80036dc:	4920      	ldr	r1, [pc, #128]	; (8003760 <freertos_IntroTitle+0x100>)
 80036de:	4811      	ldr	r0, [pc, #68]	; (8003724 <freertos_IntroTitle+0xc4>)
 80036e0:	f7ff fa88 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 80036e4:	491f      	ldr	r1, [pc, #124]	; (8003764 <freertos_IntroTitle+0x104>)
 80036e6:	480f      	ldr	r0, [pc, #60]	; (8003724 <freertos_IntroTitle+0xc4>)
 80036e8:	f7ff fa84 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 80036ec:	491e      	ldr	r1, [pc, #120]	; (8003768 <freertos_IntroTitle+0x108>)
 80036ee:	480d      	ldr	r0, [pc, #52]	; (8003724 <freertos_IntroTitle+0xc4>)
 80036f0:	f7ff fa80 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 80036f4:	491d      	ldr	r1, [pc, #116]	; (800376c <freertos_IntroTitle+0x10c>)
 80036f6:	480b      	ldr	r0, [pc, #44]	; (8003724 <freertos_IntroTitle+0xc4>)
 80036f8:	f7ff fa7c 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 80036fc:	f7ff ffa6 	bl	800364c <OSVersion>
 8003700:	4603      	mov	r3, r0
 8003702:	461a      	mov	r2, r3
 8003704:	491a      	ldr	r1, [pc, #104]	; (8003770 <freertos_IntroTitle+0x110>)
 8003706:	4807      	ldr	r0, [pc, #28]	; (8003724 <freertos_IntroTitle+0xc4>)
 8003708:	f7ff fa74 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 800370c:	4919      	ldr	r1, [pc, #100]	; (8003774 <freertos_IntroTitle+0x114>)
 800370e:	4805      	ldr	r0, [pc, #20]	; (8003724 <freertos_IntroTitle+0xc4>)
 8003710:	f7ff fa70 	bl	8002bf4 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8003714:	4918      	ldr	r1, [pc, #96]	; (8003778 <freertos_IntroTitle+0x118>)
 8003716:	4803      	ldr	r0, [pc, #12]	; (8003724 <freertos_IntroTitle+0xc4>)
 8003718:	f7ff fa6c 	bl	8002bf4 <eprintf>
}
 800371c:	bf00      	nop
 800371e:	bd80      	pop	{r7, pc}
 8003720:	08012b40 	.word	0x08012b40
 8003724:	08002365 	.word	0x08002365
 8003728:	08012b80 	.word	0x08012b80
 800372c:	08012bd4 	.word	0x08012bd4
 8003730:	08012c28 	.word	0x08012c28
 8003734:	08012c7c 	.word	0x08012c7c
 8003738:	08012cd0 	.word	0x08012cd0
 800373c:	08012d24 	.word	0x08012d24
 8003740:	08012d78 	.word	0x08012d78
 8003744:	08012dcc 	.word	0x08012dcc
 8003748:	08012e20 	.word	0x08012e20
 800374c:	08012e74 	.word	0x08012e74
 8003750:	08012ec8 	.word	0x08012ec8
 8003754:	08012f1c 	.word	0x08012f1c
 8003758:	08012f70 	.word	0x08012f70
 800375c:	08012fc4 	.word	0x08012fc4
 8003760:	08013018 	.word	0x08013018
 8003764:	0801306c 	.word	0x0801306c
 8003768:	080130c0 	.word	0x080130c0
 800376c:	08013108 	.word	0x08013108
 8003770:	08013138 	.word	0x08013138
 8003774:	0801317c 	.word	0x0801317c
 8003778:	080131a8 	.word	0x080131a8

0800377c <delay_us>:
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; 				// 시간 측정 초기화
  DWT->CYCCNT = 0;   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

void delay_us (uint16_t us)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	80fb      	strh	r3, [r7, #6]

	HAL_TIM_Base_Start_IT(&htim7);
 8003786:	480a      	ldr	r0, [pc, #40]	; (80037b0 <delay_us+0x34>)
 8003788:	f003 f922 	bl	80069d0 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim7,0);  // set the counter value a 0
 800378c:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <delay_us+0x34>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2200      	movs	r2, #0
 8003792:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 8003794:	bf00      	nop
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <delay_us+0x34>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d3f9      	bcc.n	8003796 <delay_us+0x1a>
	HAL_TIM_Base_Stop_IT(&htim7);
 80037a2:	4803      	ldr	r0, [pc, #12]	; (80037b0 <delay_us+0x34>)
 80037a4:	f003 f984 	bl	8006ab0 <HAL_TIM_Base_Stop_IT>
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	2000322c 	.word	0x2000322c

080037b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80037bc:	f00b fbe0 	bl	800ef80 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	DEBUG_PRINT("[TASK] StartDefaultTask is running!\n");
 80037c0:	4903      	ldr	r1, [pc, #12]	; (80037d0 <StartDefaultTask+0x1c>)
 80037c2:	4804      	ldr	r0, [pc, #16]	; (80037d4 <StartDefaultTask+0x20>)
 80037c4:	f7ff fa16 	bl	8002bf4 <eprintf>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80037c8:	2001      	movs	r0, #1
 80037ca:	f008 f895 	bl	800b8f8 <osDelay>
 80037ce:	e7fb      	b.n	80037c8 <StartDefaultTask+0x14>
 80037d0:	080131f4 	.word	0x080131f4
 80037d4:	08002365 	.word	0x08002365

080037d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037dc:	b672      	cpsid	i
}
 80037de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037e0:	e7fe      	b.n	80037e0 <Error_Handler+0x8>
	...

080037e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	4b16      	ldr	r3, [pc, #88]	; (8003848 <HAL_MspInit+0x64>)
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	4a15      	ldr	r2, [pc, #84]	; (8003848 <HAL_MspInit+0x64>)
 80037f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f8:	6453      	str	r3, [r2, #68]	; 0x44
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <HAL_MspInit+0x64>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	4b0f      	ldr	r3, [pc, #60]	; (8003848 <HAL_MspInit+0x64>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	4a0e      	ldr	r2, [pc, #56]	; (8003848 <HAL_MspInit+0x64>)
 8003810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003814:	6413      	str	r3, [r2, #64]	; 0x40
 8003816:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <HAL_MspInit+0x64>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003822:	2200      	movs	r2, #0
 8003824:	210f      	movs	r1, #15
 8003826:	f06f 0001 	mvn.w	r0, #1
 800382a:	f000 fc30 	bl	800408e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800382e:	2200      	movs	r2, #0
 8003830:	2105      	movs	r1, #5
 8003832:	2005      	movs	r0, #5
 8003834:	f000 fc2b 	bl	800408e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003838:	2005      	movs	r0, #5
 800383a:	f000 fc44 	bl	80040c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40023800 	.word	0x40023800

0800384c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a0e      	ldr	r2, [pc, #56]	; (8003894 <HAL_TIM_Base_MspInit+0x48>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d115      	bne.n	800388a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <HAL_TIM_Base_MspInit+0x4c>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	4a0c      	ldr	r2, [pc, #48]	; (8003898 <HAL_TIM_Base_MspInit+0x4c>)
 8003868:	f043 0320 	orr.w	r3, r3, #32
 800386c:	6413      	str	r3, [r2, #64]	; 0x40
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <HAL_TIM_Base_MspInit+0x4c>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800387a:	2200      	movs	r2, #0
 800387c:	2105      	movs	r1, #5
 800387e:	2037      	movs	r0, #55	; 0x37
 8003880:	f000 fc05 	bl	800408e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003884:	2037      	movs	r0, #55	; 0x37
 8003886:	f000 fc1e 	bl	80040c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800388a:	bf00      	nop
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40001400 	.word	0x40001400
 8003898:	40023800 	.word	0x40023800

0800389c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	; 0x28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a4:	f107 0314 	add.w	r3, r7, #20
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	60da      	str	r2, [r3, #12]
 80038b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a34      	ldr	r2, [pc, #208]	; (800398c <HAL_UART_MspInit+0xf0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d161      	bne.n	8003982 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	4b33      	ldr	r3, [pc, #204]	; (8003990 <HAL_UART_MspInit+0xf4>)
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	4a32      	ldr	r2, [pc, #200]	; (8003990 <HAL_UART_MspInit+0xf4>)
 80038c8:	f043 0320 	orr.w	r3, r3, #32
 80038cc:	6453      	str	r3, [r2, #68]	; 0x44
 80038ce:	4b30      	ldr	r3, [pc, #192]	; (8003990 <HAL_UART_MspInit+0xf4>)
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	4b2c      	ldr	r3, [pc, #176]	; (8003990 <HAL_UART_MspInit+0xf4>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	4a2b      	ldr	r2, [pc, #172]	; (8003990 <HAL_UART_MspInit+0xf4>)
 80038e4:	f043 0304 	orr.w	r3, r3, #4
 80038e8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ea:	4b29      	ldr	r3, [pc, #164]	; (8003990 <HAL_UART_MspInit+0xf4>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = UART6_TX_DEBUG_Pin|UART6_RX_DEBUG_Pin;
 80038f6:	23c0      	movs	r3, #192	; 0xc0
 80038f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fa:	2302      	movs	r3, #2
 80038fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003902:	2303      	movs	r3, #3
 8003904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003906:	2308      	movs	r3, #8
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800390a:	f107 0314 	add.w	r3, r7, #20
 800390e:	4619      	mov	r1, r3
 8003910:	4820      	ldr	r0, [pc, #128]	; (8003994 <HAL_UART_MspInit+0xf8>)
 8003912:	f000 ff6f 	bl	80047f4 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003916:	4b20      	ldr	r3, [pc, #128]	; (8003998 <HAL_UART_MspInit+0xfc>)
 8003918:	4a20      	ldr	r2, [pc, #128]	; (800399c <HAL_UART_MspInit+0x100>)
 800391a:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800391c:	4b1e      	ldr	r3, [pc, #120]	; (8003998 <HAL_UART_MspInit+0xfc>)
 800391e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003922:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003924:	4b1c      	ldr	r3, [pc, #112]	; (8003998 <HAL_UART_MspInit+0xfc>)
 8003926:	2240      	movs	r2, #64	; 0x40
 8003928:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800392a:	4b1b      	ldr	r3, [pc, #108]	; (8003998 <HAL_UART_MspInit+0xfc>)
 800392c:	2200      	movs	r2, #0
 800392e:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003930:	4b19      	ldr	r3, [pc, #100]	; (8003998 <HAL_UART_MspInit+0xfc>)
 8003932:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003936:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003938:	4b17      	ldr	r3, [pc, #92]	; (8003998 <HAL_UART_MspInit+0xfc>)
 800393a:	2200      	movs	r2, #0
 800393c:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800393e:	4b16      	ldr	r3, [pc, #88]	; (8003998 <HAL_UART_MspInit+0xfc>)
 8003940:	2200      	movs	r2, #0
 8003942:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003944:	4b14      	ldr	r3, [pc, #80]	; (8003998 <HAL_UART_MspInit+0xfc>)
 8003946:	2200      	movs	r2, #0
 8003948:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800394a:	4b13      	ldr	r3, [pc, #76]	; (8003998 <HAL_UART_MspInit+0xfc>)
 800394c:	2200      	movs	r2, #0
 800394e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <HAL_UART_MspInit+0xfc>)
 8003952:	2200      	movs	r2, #0
 8003954:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003956:	4810      	ldr	r0, [pc, #64]	; (8003998 <HAL_UART_MspInit+0xfc>)
 8003958:	f000 fbd0 	bl	80040fc <HAL_DMA_Init>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003962:	f7ff ff39 	bl	80037d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a0b      	ldr	r2, [pc, #44]	; (8003998 <HAL_UART_MspInit+0xfc>)
 800396a:	639a      	str	r2, [r3, #56]	; 0x38
 800396c:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <HAL_UART_MspInit+0xfc>)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003972:	2200      	movs	r2, #0
 8003974:	2105      	movs	r1, #5
 8003976:	2047      	movs	r0, #71	; 0x47
 8003978:	f000 fb89 	bl	800408e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800397c:	2047      	movs	r0, #71	; 0x47
 800397e:	f000 fba2 	bl	80040c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003982:	bf00      	nop
 8003984:	3728      	adds	r7, #40	; 0x28
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40011400 	.word	0x40011400
 8003990:	40023800 	.word	0x40023800
 8003994:	40020800 	.word	0x40020800
 8003998:	200032bc 	.word	0x200032bc
 800399c:	400264a0 	.word	0x400264a0

080039a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039a4:	e7fe      	b.n	80039a4 <NMI_Handler+0x4>

080039a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039a6:	b480      	push	{r7}
 80039a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039aa:	e7fe      	b.n	80039aa <HardFault_Handler+0x4>

080039ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039b0:	e7fe      	b.n	80039b0 <MemManage_Handler+0x4>

080039b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039b2:	b480      	push	{r7}
 80039b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039b6:	e7fe      	b.n	80039b6 <BusFault_Handler+0x4>

080039b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039bc:	e7fe      	b.n	80039bc <UsageFault_Handler+0x4>

080039be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039be:	b480      	push	{r7}
 80039c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039c2:	bf00      	nop
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <SysTick_Handler+0x2c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d004      	beq.n	80039e2 <SysTick_Handler+0x16>

		TimingDelay--;
 80039d8:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <SysTick_Handler+0x2c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3b01      	subs	r3, #1
 80039de:	4a06      	ldr	r2, [pc, #24]	; (80039f8 <SysTick_Handler+0x2c>)
 80039e0:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039e2:	f000 fa35 	bl	8003e50 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80039e6:	f00a f839 	bl	800da5c <xTaskGetSchedulerState>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d001      	beq.n	80039f4 <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80039f0:	f00b f852 	bl	800ea98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039f4:	bf00      	nop
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	2000332c 	.word	0x2000332c

080039fc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003a00:	bf00      	nop
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003a10:	4802      	ldr	r0, [pc, #8]	; (8003a1c <TIM7_IRQHandler+0x10>)
 8003a12:	f003 f87c 	bl	8006b0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	2000322c 	.word	0x2000322c

08003a20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003a24:	4802      	ldr	r0, [pc, #8]	; (8003a30 <OTG_FS_IRQHandler+0x10>)
 8003a26:	f001 f9de 	bl	8004de6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20008888 	.word	0x20008888

08003a34 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
  xSemaphoreTakeFromISR(waitUntilSendDone, portMAX_DELAY);
 8003a3a:	4b28      	ldr	r3, [pc, #160]	; (8003adc <DMA2_Stream6_IRQHandler+0xa8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f008 fda9 	bl	800c59c <xQueueReceiveFromISR>

  portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	607b      	str	r3, [r7, #4]
  __HAL_DMA_CLEAR_FLAG(&hdma_usart6_tx, DMA_FLAG_TCIF2_6);
 8003a4e:	4b24      	ldr	r3, [pc, #144]	; (8003ae0 <DMA2_Stream6_IRQHandler+0xac>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <DMA2_Stream6_IRQHandler+0xb0>)
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d904      	bls.n	8003a64 <DMA2_Stream6_IRQHandler+0x30>
 8003a5a:	4b23      	ldr	r3, [pc, #140]	; (8003ae8 <DMA2_Stream6_IRQHandler+0xb4>)
 8003a5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003a60:	60da      	str	r2, [r3, #12]
 8003a62:	e019      	b.n	8003a98 <DMA2_Stream6_IRQHandler+0x64>
 8003a64:	4b1e      	ldr	r3, [pc, #120]	; (8003ae0 <DMA2_Stream6_IRQHandler+0xac>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <DMA2_Stream6_IRQHandler+0xb8>)
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d904      	bls.n	8003a7a <DMA2_Stream6_IRQHandler+0x46>
 8003a70:	4a1d      	ldr	r2, [pc, #116]	; (8003ae8 <DMA2_Stream6_IRQHandler+0xb4>)
 8003a72:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a76:	6093      	str	r3, [r2, #8]
 8003a78:	e00e      	b.n	8003a98 <DMA2_Stream6_IRQHandler+0x64>
 8003a7a:	4b19      	ldr	r3, [pc, #100]	; (8003ae0 <DMA2_Stream6_IRQHandler+0xac>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <DMA2_Stream6_IRQHandler+0xbc>)
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d904      	bls.n	8003a90 <DMA2_Stream6_IRQHandler+0x5c>
 8003a86:	4a1b      	ldr	r2, [pc, #108]	; (8003af4 <DMA2_Stream6_IRQHandler+0xc0>)
 8003a88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a8c:	60d3      	str	r3, [r2, #12]
 8003a8e:	e003      	b.n	8003a98 <DMA2_Stream6_IRQHandler+0x64>
 8003a90:	4a18      	ldr	r2, [pc, #96]	; (8003af4 <DMA2_Stream6_IRQHandler+0xc0>)
 8003a92:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a96:	6093      	str	r3, [r2, #8]
  __HAL_DMA_DISABLE(&hdma_usart6_tx);
 8003a98:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <DMA2_Stream6_IRQHandler+0xac>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <DMA2_Stream6_IRQHandler+0xac>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
  xSemaphoreGiveFromISR(waitUntilSendDone, &xHigherPriorityTaskWoken);
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <DMA2_Stream6_IRQHandler+0xa8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	1d3a      	adds	r2, r7, #4
 8003aae:	4611      	mov	r1, r2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f008 fafa 	bl	800c0aa <xQueueGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <DMA2_Stream6_IRQHandler+0x98>
 8003abc:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <DMA2_Stream6_IRQHandler+0xc4>)
 8003abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003acc:	4804      	ldr	r0, [pc, #16]	; (8003ae0 <DMA2_Stream6_IRQHandler+0xac>)
 8003ace:	f000 fc55 	bl	800437c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20002474 	.word	0x20002474
 8003ae0:	200032bc 	.word	0x200032bc
 8003ae4:	40026458 	.word	0x40026458
 8003ae8:	40026400 	.word	0x40026400
 8003aec:	400260b8 	.word	0x400260b8
 8003af0:	40026058 	.word	0x40026058
 8003af4:	40026000 	.word	0x40026000
 8003af8:	e000ed04 	.word	0xe000ed04

08003afc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)!=RESET)&&(__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_RXNE)!=RESET) ){
 8003b02:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <USART6_IRQHandler+0x7c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d12b      	bne.n	8003b68 <USART6_IRQHandler+0x6c>
 8003b10:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <USART6_IRQHandler+0x7c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d024      	beq.n	8003b68 <USART6_IRQHandler+0x6c>
		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	607b      	str	r3, [r7, #4]
		g_rx_buffer = (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF);	// 데이터 1바이트 수신
 8003b22:	4b15      	ldr	r3, [pc, #84]	; (8003b78 <USART6_IRQHandler+0x7c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <USART6_IRQHandler+0x80>)
 8003b2c:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_CLEAR_PEFLAG(&huart6);
 8003b2e:	2300      	movs	r3, #0
 8003b30:	603b      	str	r3, [r7, #0]
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <USART6_IRQHandler+0x7c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <USART6_IRQHandler+0x7c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
		xQueueSendFromISR(uartqueue, &g_rx_buffer, &xHigherPriorityTaskWoken);	// Queue에서 멈춤
 8003b44:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <USART6_IRQHandler+0x84>)
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	1d3a      	adds	r2, r7, #4
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	490b      	ldr	r1, [pc, #44]	; (8003b7c <USART6_IRQHandler+0x80>)
 8003b4e:	f008 fa11 	bl	800bf74 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d007      	beq.n	8003b68 <USART6_IRQHandler+0x6c>
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <USART6_IRQHandler+0x88>)
 8003b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	f3bf 8f6f 	isb	sy
	}

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003b68:	4803      	ldr	r0, [pc, #12]	; (8003b78 <USART6_IRQHandler+0x7c>)
 8003b6a:	f003 fa7f 	bl	800706c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20003274 	.word	0x20003274
 8003b7c:	20003328 	.word	0x20003328
 8003b80:	2000241c 	.word	0x2000241c
 8003b84:	e000ed04 	.word	0xe000ed04

08003b88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return 1;
 8003b8c:	2301      	movs	r3, #1
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <_kill>:

int _kill(int pid, int sig)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ba2:	f00c fe79 	bl	8010898 <__errno>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2216      	movs	r2, #22
 8003baa:	601a      	str	r2, [r3, #0]
  return -1;
 8003bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <_exit>:

void _exit (int status)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff ffe7 	bl	8003b98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003bca:	e7fe      	b.n	8003bca <_exit+0x12>

08003bcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	e00a      	b.n	8003bf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003bde:	f3af 8000 	nop.w
 8003be2:	4601      	mov	r1, r0
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	60ba      	str	r2, [r7, #8]
 8003bea:	b2ca      	uxtb	r2, r1
 8003bec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	dbf0      	blt.n	8003bde <_read+0x12>
  }

  return len;
 8003bfc:	687b      	ldr	r3, [r7, #4]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b086      	sub	sp, #24
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e009      	b.n	8003c2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	60ba      	str	r2, [r7, #8]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	dbf1      	blt.n	8003c18 <_write+0x12>
  }
  return len;
 8003c34:	687b      	ldr	r3, [r7, #4]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <_close>:

int _close(int file)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c66:	605a      	str	r2, [r3, #4]
  return 0;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <_isatty>:

int _isatty(int file)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c7e:	2301      	movs	r3, #1
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
	...

08003ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cb0:	4a14      	ldr	r2, [pc, #80]	; (8003d04 <_sbrk+0x5c>)
 8003cb2:	4b15      	ldr	r3, [pc, #84]	; (8003d08 <_sbrk+0x60>)
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cbc:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <_sbrk+0x64>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d102      	bne.n	8003cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cc4:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <_sbrk+0x64>)
 8003cc6:	4a12      	ldr	r2, [pc, #72]	; (8003d10 <_sbrk+0x68>)
 8003cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <_sbrk+0x64>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d207      	bcs.n	8003ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cd8:	f00c fdde 	bl	8010898 <__errno>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	220c      	movs	r2, #12
 8003ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ce6:	e009      	b.n	8003cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ce8:	4b08      	ldr	r3, [pc, #32]	; (8003d0c <_sbrk+0x64>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cee:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <_sbrk+0x64>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	4a05      	ldr	r2, [pc, #20]	; (8003d0c <_sbrk+0x64>)
 8003cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20020000 	.word	0x20020000
 8003d08:	00000400 	.word	0x00000400
 8003d0c:	20003330 	.word	0x20003330
 8003d10:	200090d8 	.word	0x200090d8

08003d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <SystemInit+0x20>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	4a05      	ldr	r2, [pc, #20]	; (8003d34 <SystemInit+0x20>)
 8003d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <vApplicationIdleHook>:
	}
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook (void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
	printf("."); fflush(stdout);
 8003d3c:	202e      	movs	r0, #46	; 0x2e
 8003d3e:	f00c fc0f 	bl	8010560 <putchar>
 8003d42:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <vApplicationIdleHook+0x1c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f00c fb21 	bl	8010390 <fflush>
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000238 	.word	0x20000238

08003d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003d5c:	f7ff ffda 	bl	8003d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d60:	480c      	ldr	r0, [pc, #48]	; (8003d94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d62:	490d      	ldr	r1, [pc, #52]	; (8003d98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d64:	4a0d      	ldr	r2, [pc, #52]	; (8003d9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d68:	e002      	b.n	8003d70 <LoopCopyDataInit>

08003d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d6e:	3304      	adds	r3, #4

08003d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d74:	d3f9      	bcc.n	8003d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d76:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d78:	4c0a      	ldr	r4, [pc, #40]	; (8003da4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d7c:	e001      	b.n	8003d82 <LoopFillZerobss>

08003d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d80:	3204      	adds	r2, #4

08003d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d84:	d3fb      	bcc.n	8003d7e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003d86:	f00c fd8d 	bl	80108a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d8a:	f7ff fa2b 	bl	80031e4 <main>
  bx  lr    
 8003d8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d98:	200003a8 	.word	0x200003a8
  ldr r2, =_sidata
 8003d9c:	0801365c 	.word	0x0801365c
  ldr r2, =_sbss
 8003da0:	20001800 	.word	0x20001800
  ldr r4, =_ebss
 8003da4:	200090d8 	.word	0x200090d8

08003da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003da8:	e7fe      	b.n	8003da8 <ADC_IRQHandler>
	...

08003dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003db0:	4b0e      	ldr	r3, [pc, #56]	; (8003dec <HAL_Init+0x40>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a0d      	ldr	r2, [pc, #52]	; (8003dec <HAL_Init+0x40>)
 8003db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_Init+0x40>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a0a      	ldr	r2, [pc, #40]	; (8003dec <HAL_Init+0x40>)
 8003dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dc8:	4b08      	ldr	r3, [pc, #32]	; (8003dec <HAL_Init+0x40>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a07      	ldr	r2, [pc, #28]	; (8003dec <HAL_Init+0x40>)
 8003dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dd4:	2003      	movs	r0, #3
 8003dd6:	f000 f94f 	bl	8004078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dda:	200f      	movs	r0, #15
 8003ddc:	f000 f808 	bl	8003df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003de0:	f7ff fd00 	bl	80037e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40023c00 	.word	0x40023c00

08003df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003df8:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <HAL_InitTick+0x54>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <HAL_InitTick+0x58>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	4619      	mov	r1, r3
 8003e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f967 	bl	80040e2 <HAL_SYSTICK_Config>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e00e      	b.n	8003e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b0f      	cmp	r3, #15
 8003e22:	d80a      	bhi.n	8003e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e24:	2200      	movs	r2, #0
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e2c:	f000 f92f 	bl	800408e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e30:	4a06      	ldr	r2, [pc, #24]	; (8003e4c <HAL_InitTick+0x5c>)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	e000      	b.n	8003e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	200000e0 	.word	0x200000e0
 8003e48:	200000e8 	.word	0x200000e8
 8003e4c:	200000e4 	.word	0x200000e4

08003e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e54:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <HAL_IncTick+0x20>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <HAL_IncTick+0x24>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4413      	add	r3, r2
 8003e60:	4a04      	ldr	r2, [pc, #16]	; (8003e74 <HAL_IncTick+0x24>)
 8003e62:	6013      	str	r3, [r2, #0]
}
 8003e64:	bf00      	nop
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	200000e8 	.word	0x200000e8
 8003e74:	20003334 	.word	0x20003334

08003e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e7c:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <HAL_GetTick+0x14>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20003334 	.word	0x20003334

08003e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e98:	f7ff ffee 	bl	8003e78 <HAL_GetTick>
 8003e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ea8:	d005      	beq.n	8003eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003eaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <HAL_Delay+0x44>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003eb6:	bf00      	nop
 8003eb8:	f7ff ffde 	bl	8003e78 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d8f7      	bhi.n	8003eb8 <HAL_Delay+0x28>
  {
  }
}
 8003ec8:	bf00      	nop
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	200000e8 	.word	0x200000e8

08003ed8 <__NVIC_SetPriorityGrouping>:
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <__NVIC_SetPriorityGrouping+0x44>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f0a:	4a04      	ldr	r2, [pc, #16]	; (8003f1c <__NVIC_SetPriorityGrouping+0x44>)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	60d3      	str	r3, [r2, #12]
}
 8003f10:	bf00      	nop
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <__NVIC_GetPriorityGrouping>:
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f24:	4b04      	ldr	r3, [pc, #16]	; (8003f38 <__NVIC_GetPriorityGrouping+0x18>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	0a1b      	lsrs	r3, r3, #8
 8003f2a:	f003 0307 	and.w	r3, r3, #7
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <__NVIC_EnableIRQ>:
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	4603      	mov	r3, r0
 8003f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	db0b      	blt.n	8003f66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	f003 021f 	and.w	r2, r3, #31
 8003f54:	4907      	ldr	r1, [pc, #28]	; (8003f74 <__NVIC_EnableIRQ+0x38>)
 8003f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	e000e100 	.word	0xe000e100

08003f78 <__NVIC_SetPriority>:
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	4603      	mov	r3, r0
 8003f80:	6039      	str	r1, [r7, #0]
 8003f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	db0a      	blt.n	8003fa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	490c      	ldr	r1, [pc, #48]	; (8003fc4 <__NVIC_SetPriority+0x4c>)
 8003f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f96:	0112      	lsls	r2, r2, #4
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003fa0:	e00a      	b.n	8003fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	4908      	ldr	r1, [pc, #32]	; (8003fc8 <__NVIC_SetPriority+0x50>)
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	3b04      	subs	r3, #4
 8003fb0:	0112      	lsls	r2, r2, #4
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	761a      	strb	r2, [r3, #24]
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	e000e100 	.word	0xe000e100
 8003fc8:	e000ed00 	.word	0xe000ed00

08003fcc <NVIC_EncodePriority>:
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b089      	sub	sp, #36	; 0x24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f1c3 0307 	rsb	r3, r3, #7
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	bf28      	it	cs
 8003fea:	2304      	movcs	r3, #4
 8003fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	2b06      	cmp	r3, #6
 8003ff4:	d902      	bls.n	8003ffc <NVIC_EncodePriority+0x30>
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	3b03      	subs	r3, #3
 8003ffa:	e000      	b.n	8003ffe <NVIC_EncodePriority+0x32>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43da      	mvns	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	401a      	ands	r2, r3
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004014:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	fa01 f303 	lsl.w	r3, r1, r3
 800401e:	43d9      	mvns	r1, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004024:	4313      	orrs	r3, r2
}
 8004026:	4618      	mov	r0, r3
 8004028:	3724      	adds	r7, #36	; 0x24
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
	...

08004034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3b01      	subs	r3, #1
 8004040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004044:	d301      	bcc.n	800404a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004046:	2301      	movs	r3, #1
 8004048:	e00f      	b.n	800406a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800404a:	4a0a      	ldr	r2, [pc, #40]	; (8004074 <SysTick_Config+0x40>)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3b01      	subs	r3, #1
 8004050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004052:	210f      	movs	r1, #15
 8004054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004058:	f7ff ff8e 	bl	8003f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <SysTick_Config+0x40>)
 800405e:	2200      	movs	r2, #0
 8004060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004062:	4b04      	ldr	r3, [pc, #16]	; (8004074 <SysTick_Config+0x40>)
 8004064:	2207      	movs	r2, #7
 8004066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	e000e010 	.word	0xe000e010

08004078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff ff29 	bl	8003ed8 <__NVIC_SetPriorityGrouping>
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800408e:	b580      	push	{r7, lr}
 8004090:	b086      	sub	sp, #24
 8004092:	af00      	add	r7, sp, #0
 8004094:	4603      	mov	r3, r0
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
 800409a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800409c:	2300      	movs	r3, #0
 800409e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040a0:	f7ff ff3e 	bl	8003f20 <__NVIC_GetPriorityGrouping>
 80040a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	68b9      	ldr	r1, [r7, #8]
 80040aa:	6978      	ldr	r0, [r7, #20]
 80040ac:	f7ff ff8e 	bl	8003fcc <NVIC_EncodePriority>
 80040b0:	4602      	mov	r2, r0
 80040b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff ff5d 	bl	8003f78 <__NVIC_SetPriority>
}
 80040be:	bf00      	nop
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	4603      	mov	r3, r0
 80040ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff ff31 	bl	8003f3c <__NVIC_EnableIRQ>
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff ffa2 	bl	8004034 <SysTick_Config>
 80040f0:	4603      	mov	r3, r0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004108:	f7ff feb6 	bl	8003e78 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e099      	b.n	800424c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0201 	bic.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004138:	e00f      	b.n	800415a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800413a:	f7ff fe9d 	bl	8003e78 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b05      	cmp	r3, #5
 8004146:	d908      	bls.n	800415a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2203      	movs	r2, #3
 8004152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e078      	b.n	800424c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e8      	bne.n	800413a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4b38      	ldr	r3, [pc, #224]	; (8004254 <HAL_DMA_Init+0x158>)
 8004174:	4013      	ands	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004186:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004192:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800419e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d107      	bne.n	80041c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	4313      	orrs	r3, r2
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 0307 	bic.w	r3, r3, #7
 80041da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d117      	bne.n	800421e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00e      	beq.n	800421e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fa7b 	bl	80046fc <DMA_CheckFifoParam>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2240      	movs	r2, #64	; 0x40
 8004210:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800421a:	2301      	movs	r3, #1
 800421c:	e016      	b.n	800424c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fa32 	bl	8004690 <DMA_CalcBaseAndBitshift>
 800422c:	4603      	mov	r3, r0
 800422e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004234:	223f      	movs	r2, #63	; 0x3f
 8004236:	409a      	lsls	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	f010803f 	.word	0xf010803f

08004258 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004264:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004266:	f7ff fe07 	bl	8003e78 <HAL_GetTick>
 800426a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d008      	beq.n	800428a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2280      	movs	r2, #128	; 0x80
 800427c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e052      	b.n	8004330 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0216 	bic.w	r2, r2, #22
 8004298:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d103      	bne.n	80042ba <HAL_DMA_Abort+0x62>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d007      	beq.n	80042ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0208 	bic.w	r2, r2, #8
 80042c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0201 	bic.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042da:	e013      	b.n	8004304 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042dc:	f7ff fdcc 	bl	8003e78 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b05      	cmp	r3, #5
 80042e8:	d90c      	bls.n	8004304 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2220      	movs	r2, #32
 80042ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2203      	movs	r2, #3
 80042f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e015      	b.n	8004330 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1e4      	bne.n	80042dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004316:	223f      	movs	r2, #63	; 0x3f
 8004318:	409a      	lsls	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d004      	beq.n	8004356 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2280      	movs	r2, #128	; 0x80
 8004350:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e00c      	b.n	8004370 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2205      	movs	r2, #5
 800435a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0201 	bic.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004388:	4b8e      	ldr	r3, [pc, #568]	; (80045c4 <HAL_DMA_IRQHandler+0x248>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a8e      	ldr	r2, [pc, #568]	; (80045c8 <HAL_DMA_IRQHandler+0x24c>)
 800438e:	fba2 2303 	umull	r2, r3, r2, r3
 8004392:	0a9b      	lsrs	r3, r3, #10
 8004394:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a6:	2208      	movs	r2, #8
 80043a8:	409a      	lsls	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4013      	ands	r3, r2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d01a      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d013      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0204 	bic.w	r2, r2, #4
 80043ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d4:	2208      	movs	r2, #8
 80043d6:	409a      	lsls	r2, r3
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	f043 0201 	orr.w	r2, r3, #1
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ec:	2201      	movs	r2, #1
 80043ee:	409a      	lsls	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d012      	beq.n	800441e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00b      	beq.n	800441e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440a:	2201      	movs	r2, #1
 800440c:	409a      	lsls	r2, r3
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004416:	f043 0202 	orr.w	r2, r3, #2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004422:	2204      	movs	r2, #4
 8004424:	409a      	lsls	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4013      	ands	r3, r2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d012      	beq.n	8004454 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00b      	beq.n	8004454 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004440:	2204      	movs	r2, #4
 8004442:	409a      	lsls	r2, r3
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444c:	f043 0204 	orr.w	r2, r3, #4
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004458:	2210      	movs	r2, #16
 800445a:	409a      	lsls	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4013      	ands	r3, r2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d043      	beq.n	80044ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d03c      	beq.n	80044ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004476:	2210      	movs	r2, #16
 8004478:	409a      	lsls	r2, r3
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d018      	beq.n	80044be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d108      	bne.n	80044ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d024      	beq.n	80044ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	4798      	blx	r3
 80044aa:	e01f      	b.n	80044ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01b      	beq.n	80044ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	4798      	blx	r3
 80044bc:	e016      	b.n	80044ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d107      	bne.n	80044dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0208 	bic.w	r2, r2, #8
 80044da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f0:	2220      	movs	r2, #32
 80044f2:	409a      	lsls	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 808f 	beq.w	800461c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 8087 	beq.w	800461c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004512:	2220      	movs	r2, #32
 8004514:	409a      	lsls	r2, r3
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b05      	cmp	r3, #5
 8004524:	d136      	bne.n	8004594 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0216 	bic.w	r2, r2, #22
 8004534:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695a      	ldr	r2, [r3, #20]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004544:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d103      	bne.n	8004556 <HAL_DMA_IRQHandler+0x1da>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004552:	2b00      	cmp	r3, #0
 8004554:	d007      	beq.n	8004566 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0208 	bic.w	r2, r2, #8
 8004564:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456a:	223f      	movs	r2, #63	; 0x3f
 800456c:	409a      	lsls	r2, r3
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004586:	2b00      	cmp	r3, #0
 8004588:	d07e      	beq.n	8004688 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	4798      	blx	r3
        }
        return;
 8004592:	e079      	b.n	8004688 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d01d      	beq.n	80045de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10d      	bne.n	80045cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d031      	beq.n	800461c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	4798      	blx	r3
 80045c0:	e02c      	b.n	800461c <HAL_DMA_IRQHandler+0x2a0>
 80045c2:	bf00      	nop
 80045c4:	200000e0 	.word	0x200000e0
 80045c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d023      	beq.n	800461c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	4798      	blx	r3
 80045dc:	e01e      	b.n	800461c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10f      	bne.n	800460c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0210 	bic.w	r2, r2, #16
 80045fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004620:	2b00      	cmp	r3, #0
 8004622:	d032      	beq.n	800468a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	d022      	beq.n	8004676 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2205      	movs	r2, #5
 8004634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	3301      	adds	r3, #1
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	429a      	cmp	r2, r3
 8004652:	d307      	bcc.n	8004664 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f2      	bne.n	8004648 <HAL_DMA_IRQHandler+0x2cc>
 8004662:	e000      	b.n	8004666 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004664:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	4798      	blx	r3
 8004686:	e000      	b.n	800468a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004688:	bf00      	nop
    }
  }
}
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	3b10      	subs	r3, #16
 80046a0:	4a14      	ldr	r2, [pc, #80]	; (80046f4 <DMA_CalcBaseAndBitshift+0x64>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	091b      	lsrs	r3, r3, #4
 80046a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046aa:	4a13      	ldr	r2, [pc, #76]	; (80046f8 <DMA_CalcBaseAndBitshift+0x68>)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d909      	bls.n	80046d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046c6:	f023 0303 	bic.w	r3, r3, #3
 80046ca:	1d1a      	adds	r2, r3, #4
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	659a      	str	r2, [r3, #88]	; 0x58
 80046d0:	e007      	b.n	80046e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046da:	f023 0303 	bic.w	r3, r3, #3
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	aaaaaaab 	.word	0xaaaaaaab
 80046f8:	080132d0 	.word	0x080132d0

080046fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004704:	2300      	movs	r3, #0
 8004706:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d11f      	bne.n	8004756 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b03      	cmp	r3, #3
 800471a:	d856      	bhi.n	80047ca <DMA_CheckFifoParam+0xce>
 800471c:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <DMA_CheckFifoParam+0x28>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	08004735 	.word	0x08004735
 8004728:	08004747 	.word	0x08004747
 800472c:	08004735 	.word	0x08004735
 8004730:	080047cb 	.word	0x080047cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d046      	beq.n	80047ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004744:	e043      	b.n	80047ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800474e:	d140      	bne.n	80047d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004754:	e03d      	b.n	80047d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475e:	d121      	bne.n	80047a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b03      	cmp	r3, #3
 8004764:	d837      	bhi.n	80047d6 <DMA_CheckFifoParam+0xda>
 8004766:	a201      	add	r2, pc, #4	; (adr r2, 800476c <DMA_CheckFifoParam+0x70>)
 8004768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476c:	0800477d 	.word	0x0800477d
 8004770:	08004783 	.word	0x08004783
 8004774:	0800477d 	.word	0x0800477d
 8004778:	08004795 	.word	0x08004795
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
      break;
 8004780:	e030      	b.n	80047e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d025      	beq.n	80047da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004792:	e022      	b.n	80047da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800479c:	d11f      	bne.n	80047de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047a2:	e01c      	b.n	80047de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d903      	bls.n	80047b2 <DMA_CheckFifoParam+0xb6>
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d003      	beq.n	80047b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047b0:	e018      	b.n	80047e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	73fb      	strb	r3, [r7, #15]
      break;
 80047b6:	e015      	b.n	80047e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00e      	beq.n	80047e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	73fb      	strb	r3, [r7, #15]
      break;
 80047c8:	e00b      	b.n	80047e2 <DMA_CheckFifoParam+0xe6>
      break;
 80047ca:	bf00      	nop
 80047cc:	e00a      	b.n	80047e4 <DMA_CheckFifoParam+0xe8>
      break;
 80047ce:	bf00      	nop
 80047d0:	e008      	b.n	80047e4 <DMA_CheckFifoParam+0xe8>
      break;
 80047d2:	bf00      	nop
 80047d4:	e006      	b.n	80047e4 <DMA_CheckFifoParam+0xe8>
      break;
 80047d6:	bf00      	nop
 80047d8:	e004      	b.n	80047e4 <DMA_CheckFifoParam+0xe8>
      break;
 80047da:	bf00      	nop
 80047dc:	e002      	b.n	80047e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80047de:	bf00      	nop
 80047e0:	e000      	b.n	80047e4 <DMA_CheckFifoParam+0xe8>
      break;
 80047e2:	bf00      	nop
    }
  } 
  
  return status; 
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop

080047f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b089      	sub	sp, #36	; 0x24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004802:	2300      	movs	r3, #0
 8004804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004806:	2300      	movs	r3, #0
 8004808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	e16b      	b.n	8004ae8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004810:	2201      	movs	r2, #1
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4013      	ands	r3, r2
 8004822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	429a      	cmp	r2, r3
 800482a:	f040 815a 	bne.w	8004ae2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b01      	cmp	r3, #1
 8004838:	d005      	beq.n	8004846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004842:	2b02      	cmp	r3, #2
 8004844:	d130      	bne.n	80048a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	2203      	movs	r2, #3
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	43db      	mvns	r3, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4013      	ands	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800487c:	2201      	movs	r2, #1
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	43db      	mvns	r3, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4013      	ands	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	091b      	lsrs	r3, r3, #4
 8004892:	f003 0201 	and.w	r2, r3, #1
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4313      	orrs	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d017      	beq.n	80048e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	2203      	movs	r2, #3
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4013      	ands	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f003 0303 	and.w	r3, r3, #3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d123      	bne.n	8004938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	08da      	lsrs	r2, r3, #3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3208      	adds	r2, #8
 80048f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	220f      	movs	r2, #15
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	43db      	mvns	r3, r3
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4013      	ands	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4313      	orrs	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	08da      	lsrs	r2, r3, #3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3208      	adds	r2, #8
 8004932:	69b9      	ldr	r1, [r7, #24]
 8004934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	2203      	movs	r2, #3
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	43db      	mvns	r3, r3
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4013      	ands	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f003 0203 	and.w	r2, r3, #3
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	4313      	orrs	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 80b4 	beq.w	8004ae2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	4b60      	ldr	r3, [pc, #384]	; (8004b00 <HAL_GPIO_Init+0x30c>)
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	4a5f      	ldr	r2, [pc, #380]	; (8004b00 <HAL_GPIO_Init+0x30c>)
 8004984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004988:	6453      	str	r3, [r2, #68]	; 0x44
 800498a:	4b5d      	ldr	r3, [pc, #372]	; (8004b00 <HAL_GPIO_Init+0x30c>)
 800498c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004996:	4a5b      	ldr	r2, [pc, #364]	; (8004b04 <HAL_GPIO_Init+0x310>)
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	089b      	lsrs	r3, r3, #2
 800499c:	3302      	adds	r3, #2
 800499e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	220f      	movs	r2, #15
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43db      	mvns	r3, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4013      	ands	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a52      	ldr	r2, [pc, #328]	; (8004b08 <HAL_GPIO_Init+0x314>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d02b      	beq.n	8004a1a <HAL_GPIO_Init+0x226>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a51      	ldr	r2, [pc, #324]	; (8004b0c <HAL_GPIO_Init+0x318>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d025      	beq.n	8004a16 <HAL_GPIO_Init+0x222>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a50      	ldr	r2, [pc, #320]	; (8004b10 <HAL_GPIO_Init+0x31c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d01f      	beq.n	8004a12 <HAL_GPIO_Init+0x21e>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a4f      	ldr	r2, [pc, #316]	; (8004b14 <HAL_GPIO_Init+0x320>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d019      	beq.n	8004a0e <HAL_GPIO_Init+0x21a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a4e      	ldr	r2, [pc, #312]	; (8004b18 <HAL_GPIO_Init+0x324>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <HAL_GPIO_Init+0x216>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a4d      	ldr	r2, [pc, #308]	; (8004b1c <HAL_GPIO_Init+0x328>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00d      	beq.n	8004a06 <HAL_GPIO_Init+0x212>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a4c      	ldr	r2, [pc, #304]	; (8004b20 <HAL_GPIO_Init+0x32c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d007      	beq.n	8004a02 <HAL_GPIO_Init+0x20e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a4b      	ldr	r2, [pc, #300]	; (8004b24 <HAL_GPIO_Init+0x330>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d101      	bne.n	80049fe <HAL_GPIO_Init+0x20a>
 80049fa:	2307      	movs	r3, #7
 80049fc:	e00e      	b.n	8004a1c <HAL_GPIO_Init+0x228>
 80049fe:	2308      	movs	r3, #8
 8004a00:	e00c      	b.n	8004a1c <HAL_GPIO_Init+0x228>
 8004a02:	2306      	movs	r3, #6
 8004a04:	e00a      	b.n	8004a1c <HAL_GPIO_Init+0x228>
 8004a06:	2305      	movs	r3, #5
 8004a08:	e008      	b.n	8004a1c <HAL_GPIO_Init+0x228>
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	e006      	b.n	8004a1c <HAL_GPIO_Init+0x228>
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e004      	b.n	8004a1c <HAL_GPIO_Init+0x228>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e002      	b.n	8004a1c <HAL_GPIO_Init+0x228>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e000      	b.n	8004a1c <HAL_GPIO_Init+0x228>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	f002 0203 	and.w	r2, r2, #3
 8004a22:	0092      	lsls	r2, r2, #2
 8004a24:	4093      	lsls	r3, r2
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a2c:	4935      	ldr	r1, [pc, #212]	; (8004b04 <HAL_GPIO_Init+0x310>)
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	089b      	lsrs	r3, r3, #2
 8004a32:	3302      	adds	r3, #2
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a3a:	4b3b      	ldr	r3, [pc, #236]	; (8004b28 <HAL_GPIO_Init+0x334>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	43db      	mvns	r3, r3
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4013      	ands	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a5e:	4a32      	ldr	r2, [pc, #200]	; (8004b28 <HAL_GPIO_Init+0x334>)
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a64:	4b30      	ldr	r3, [pc, #192]	; (8004b28 <HAL_GPIO_Init+0x334>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	4013      	ands	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a88:	4a27      	ldr	r2, [pc, #156]	; (8004b28 <HAL_GPIO_Init+0x334>)
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a8e:	4b26      	ldr	r3, [pc, #152]	; (8004b28 <HAL_GPIO_Init+0x334>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	43db      	mvns	r3, r3
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ab2:	4a1d      	ldr	r2, [pc, #116]	; (8004b28 <HAL_GPIO_Init+0x334>)
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ab8:	4b1b      	ldr	r3, [pc, #108]	; (8004b28 <HAL_GPIO_Init+0x334>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004adc:	4a12      	ldr	r2, [pc, #72]	; (8004b28 <HAL_GPIO_Init+0x334>)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	61fb      	str	r3, [r7, #28]
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	2b0f      	cmp	r3, #15
 8004aec:	f67f ae90 	bls.w	8004810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004af0:	bf00      	nop
 8004af2:	bf00      	nop
 8004af4:	3724      	adds	r7, #36	; 0x24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40023800 	.word	0x40023800
 8004b04:	40013800 	.word	0x40013800
 8004b08:	40020000 	.word	0x40020000
 8004b0c:	40020400 	.word	0x40020400
 8004b10:	40020800 	.word	0x40020800
 8004b14:	40020c00 	.word	0x40020c00
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	40021400 	.word	0x40021400
 8004b20:	40021800 	.word	0x40021800
 8004b24:	40021c00 	.word	0x40021c00
 8004b28:	40013c00 	.word	0x40013c00

08004b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	807b      	strh	r3, [r7, #2]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b3c:	787b      	ldrb	r3, [r7, #1]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b42:	887a      	ldrh	r2, [r7, #2]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b48:	e003      	b.n	8004b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b4a:	887b      	ldrh	r3, [r7, #2]
 8004b4c:	041a      	lsls	r2, r3, #16
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	619a      	str	r2, [r3, #24]
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b086      	sub	sp, #24
 8004b62:	af02      	add	r7, sp, #8
 8004b64:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e101      	b.n	8004d74 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f00a fbd8 	bl	800f340 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2203      	movs	r2, #3
 8004b94:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b9e:	d102      	bne.n	8004ba6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f003 fc85 	bl	80084ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	7c1a      	ldrb	r2, [r3, #16]
 8004bb8:	f88d 2000 	strb.w	r2, [sp]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bc0:	f003 fb63 	bl	800828a <USB_CoreInit>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e0ce      	b.n	8004d74 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2100      	movs	r1, #0
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f003 fc7d 	bl	80084dc <USB_SetCurrentMode>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e0bf      	b.n	8004d74 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	73fb      	strb	r3, [r7, #15]
 8004bf8:	e04a      	b.n	8004c90 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004bfa:	7bfa      	ldrb	r2, [r7, #15]
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	440b      	add	r3, r1
 8004c08:	3315      	adds	r3, #21
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c0e:	7bfa      	ldrb	r2, [r7, #15]
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	4613      	mov	r3, r2
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	4413      	add	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	3314      	adds	r3, #20
 8004c1e:	7bfa      	ldrb	r2, [r7, #15]
 8004c20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c22:	7bfa      	ldrb	r2, [r7, #15]
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	b298      	uxth	r0, r3
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	4413      	add	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	332e      	adds	r3, #46	; 0x2e
 8004c36:	4602      	mov	r2, r0
 8004c38:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c3a:	7bfa      	ldrb	r2, [r7, #15]
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	440b      	add	r3, r1
 8004c48:	3318      	adds	r3, #24
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c4e:	7bfa      	ldrb	r2, [r7, #15]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	4413      	add	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	331c      	adds	r3, #28
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c62:	7bfa      	ldrb	r2, [r7, #15]
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	4613      	mov	r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	440b      	add	r3, r1
 8004c70:	3320      	adds	r3, #32
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c76:	7bfa      	ldrb	r2, [r7, #15]
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	440b      	add	r3, r1
 8004c84:	3324      	adds	r3, #36	; 0x24
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	73fb      	strb	r3, [r7, #15]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	791b      	ldrb	r3, [r3, #4]
 8004c94:	7bfa      	ldrb	r2, [r7, #15]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d3af      	bcc.n	8004bfa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	73fb      	strb	r3, [r7, #15]
 8004c9e:	e044      	b.n	8004d2a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ca0:	7bfa      	ldrb	r2, [r7, #15]
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	f203 2355 	addw	r3, r3, #597	; 0x255
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004cb6:	7bfa      	ldrb	r2, [r7, #15]
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8004cc8:	7bfa      	ldrb	r2, [r7, #15]
 8004cca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ccc:	7bfa      	ldrb	r2, [r7, #15]
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004cde:	2200      	movs	r2, #0
 8004ce0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ce2:	7bfa      	ldrb	r2, [r7, #15]
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	4413      	add	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004cf8:	7bfa      	ldrb	r2, [r7, #15]
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	4413      	add	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d0e:	7bfa      	ldrb	r2, [r7, #15]
 8004d10:	6879      	ldr	r1, [r7, #4]
 8004d12:	4613      	mov	r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	3301      	adds	r3, #1
 8004d28:	73fb      	strb	r3, [r7, #15]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	791b      	ldrb	r3, [r3, #4]
 8004d2e:	7bfa      	ldrb	r2, [r7, #15]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d3b5      	bcc.n	8004ca0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6818      	ldr	r0, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	7c1a      	ldrb	r2, [r3, #16]
 8004d3c:	f88d 2000 	strb.w	r2, [sp]
 8004d40:	3304      	adds	r3, #4
 8004d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d44:	f003 fc16 	bl	8008574 <USB_DevInit>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d005      	beq.n	8004d5a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2202      	movs	r2, #2
 8004d52:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e00c      	b.n	8004d74 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f004 fc5a 	bl	8009626 <USB_DevDisconnect>

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_PCD_Start+0x1c>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e022      	b.n	8004dde <HAL_PCD_Start+0x62>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d009      	beq.n	8004dc0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d105      	bne.n	8004dc0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f003 fb67 	bl	8008498 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f004 fc08 	bl	80095e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004de6:	b590      	push	{r4, r7, lr}
 8004de8:	b08d      	sub	sp, #52	; 0x34
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f004 fcc6 	bl	800978e <USB_GetMode>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f040 848c 	bne.w	8005722 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f004 fc2a 	bl	8009668 <USB_ReadInterrupts>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 8482 	beq.w	8005720 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	0a1b      	lsrs	r3, r3, #8
 8004e26:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f004 fc17 	bl	8009668 <USB_ReadInterrupts>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d107      	bne.n	8004e54 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695a      	ldr	r2, [r3, #20]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f002 0202 	and.w	r2, r2, #2
 8004e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f004 fc05 	bl	8009668 <USB_ReadInterrupts>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d161      	bne.n	8004f2c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699a      	ldr	r2, [r3, #24]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0210 	bic.w	r2, r2, #16
 8004e76:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f003 020f 	and.w	r2, r3, #15
 8004e84:	4613      	mov	r3, r2
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	4413      	add	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	4413      	add	r3, r2
 8004e94:	3304      	adds	r3, #4
 8004e96:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	0c5b      	lsrs	r3, r3, #17
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d124      	bne.n	8004eee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d035      	beq.n	8004f1c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	091b      	lsrs	r3, r3, #4
 8004eb8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	6a38      	ldr	r0, [r7, #32]
 8004ec4:	f004 fa3c 	bl	8009340 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	091b      	lsrs	r3, r3, #4
 8004ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ed4:	441a      	add	r2, r3
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	695a      	ldr	r2, [r3, #20]
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	091b      	lsrs	r3, r3, #4
 8004ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ee6:	441a      	add	r2, r3
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	615a      	str	r2, [r3, #20]
 8004eec:	e016      	b.n	8004f1c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	0c5b      	lsrs	r3, r3, #17
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	2b06      	cmp	r3, #6
 8004ef8:	d110      	bne.n	8004f1c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004f00:	2208      	movs	r2, #8
 8004f02:	4619      	mov	r1, r3
 8004f04:	6a38      	ldr	r0, [r7, #32]
 8004f06:	f004 fa1b 	bl	8009340 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	695a      	ldr	r2, [r3, #20]
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f16:	441a      	add	r2, r3
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0210 	orr.w	r2, r2, #16
 8004f2a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f004 fb99 	bl	8009668 <USB_ReadInterrupts>
 8004f36:	4603      	mov	r3, r0
 8004f38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f40:	f040 80a7 	bne.w	8005092 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f004 fb9e 	bl	800968e <USB_ReadDevAllOutEpInterrupt>
 8004f52:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004f54:	e099      	b.n	800508a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 808e 	beq.w	800507e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f004 fbc2 	bl	80096f6 <USB_ReadDevOutEPInterrupt>
 8004f72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00c      	beq.n	8004f98 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fea2 	bl	8005cdc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00c      	beq.n	8004fbc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fae:	461a      	mov	r2, r3
 8004fb0:	2308      	movs	r3, #8
 8004fb2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004fb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 ff78 	bl	8005eac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d008      	beq.n	8004fd8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d030      	beq.n	8005044 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fea:	2b80      	cmp	r3, #128	; 0x80
 8004fec:	d109      	bne.n	8005002 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	69fa      	ldr	r2, [r7, #28]
 8004ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ffc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005000:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005004:	4613      	mov	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	4413      	add	r3, r2
 8005014:	3304      	adds	r3, #4
 8005016:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	78db      	ldrb	r3, [r3, #3]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d108      	bne.n	8005032 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	2200      	movs	r2, #0
 8005024:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	b2db      	uxtb	r3, r3
 800502a:	4619      	mov	r1, r3
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f00a fa8d 	bl	800f54c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503e:	461a      	mov	r2, r3
 8005040:	2302      	movs	r3, #2
 8005042:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b00      	cmp	r3, #0
 800504c:	d008      	beq.n	8005060 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505a:	461a      	mov	r2, r3
 800505c:	2320      	movs	r3, #32
 800505e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d009      	beq.n	800507e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005076:	461a      	mov	r2, r3
 8005078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800507c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	3301      	adds	r3, #1
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	2b00      	cmp	r3, #0
 800508e:	f47f af62 	bne.w	8004f56 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f004 fae6 	bl	8009668 <USB_ReadInterrupts>
 800509c:	4603      	mov	r3, r0
 800509e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050a6:	f040 80db 	bne.w	8005260 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f004 fb07 	bl	80096c2 <USB_ReadDevAllInEpInterrupt>
 80050b4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80050ba:	e0cd      	b.n	8005258 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 80c2 	beq.w	800524c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	4611      	mov	r1, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f004 fb2d 	bl	8009732 <USB_ReadDevInEPInterrupt>
 80050d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d057      	beq.n	8005194 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	2201      	movs	r2, #1
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	43db      	mvns	r3, r3
 80050fe:	69f9      	ldr	r1, [r7, #28]
 8005100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005104:	4013      	ands	r3, r2
 8005106:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	461a      	mov	r2, r3
 8005116:	2301      	movs	r3, #1
 8005118:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	799b      	ldrb	r3, [r3, #6]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d132      	bne.n	8005188 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005126:	4613      	mov	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	440b      	add	r3, r1
 8005130:	3320      	adds	r3, #32
 8005132:	6819      	ldr	r1, [r3, #0]
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005138:	4613      	mov	r3, r2
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	4413      	add	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4403      	add	r3, r0
 8005142:	331c      	adds	r3, #28
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4419      	add	r1, r3
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514c:	4613      	mov	r3, r2
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4403      	add	r3, r0
 8005156:	3320      	adds	r3, #32
 8005158:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	2b00      	cmp	r3, #0
 800515e:	d113      	bne.n	8005188 <HAL_PCD_IRQHandler+0x3a2>
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	3324      	adds	r3, #36	; 0x24
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d108      	bne.n	8005188 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005180:	461a      	mov	r2, r3
 8005182:	2101      	movs	r1, #1
 8005184:	f004 fb34 	bl	80097f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	b2db      	uxtb	r3, r3
 800518c:	4619      	mov	r1, r3
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f00a f957 	bl	800f442 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d008      	beq.n	80051b0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051aa:	461a      	mov	r2, r3
 80051ac:	2308      	movs	r3, #8
 80051ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f003 0310 	and.w	r3, r3, #16
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d008      	beq.n	80051cc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c6:	461a      	mov	r2, r3
 80051c8:	2310      	movs	r3, #16
 80051ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d008      	beq.n	80051e8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e2:	461a      	mov	r2, r3
 80051e4:	2340      	movs	r3, #64	; 0x40
 80051e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d023      	beq.n	800523a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80051f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051f4:	6a38      	ldr	r0, [r7, #32]
 80051f6:	f003 fb21 	bl	800883c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80051fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fc:	4613      	mov	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	4413      	add	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	3310      	adds	r3, #16
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	4413      	add	r3, r2
 800520a:	3304      	adds	r3, #4
 800520c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	78db      	ldrb	r3, [r3, #3]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d108      	bne.n	8005228 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2200      	movs	r2, #0
 800521a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	b2db      	uxtb	r3, r3
 8005220:	4619      	mov	r1, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f00a f9a4 	bl	800f570 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005234:	461a      	mov	r2, r3
 8005236:	2302      	movs	r3, #2
 8005238:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fcbb 	bl	8005bc2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	3301      	adds	r3, #1
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	085b      	lsrs	r3, r3, #1
 8005256:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	2b00      	cmp	r3, #0
 800525c:	f47f af2e 	bne.w	80050bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4618      	mov	r0, r3
 8005266:	f004 f9ff 	bl	8009668 <USB_ReadInterrupts>
 800526a:	4603      	mov	r3, r0
 800526c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005274:	d122      	bne.n	80052bc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	69fa      	ldr	r2, [r7, #28]
 8005280:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005284:	f023 0301 	bic.w	r3, r3, #1
 8005288:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8005290:	2b01      	cmp	r3, #1
 8005292:	d108      	bne.n	80052a6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800529c:	2100      	movs	r1, #0
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fea2 	bl	8005fe8 <HAL_PCDEx_LPM_Callback>
 80052a4:	e002      	b.n	80052ac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f00a f942 	bl	800f530 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695a      	ldr	r2, [r3, #20]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80052ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f004 f9d1 	bl	8009668 <USB_ReadInterrupts>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d0:	d112      	bne.n	80052f8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d102      	bne.n	80052e8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f00a f8fe 	bl	800f4e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80052f6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f004 f9b3 	bl	8009668 <USB_ReadInterrupts>
 8005302:	4603      	mov	r3, r0
 8005304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800530c:	f040 80b7 	bne.w	800547e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2110      	movs	r1, #16
 800532a:	4618      	mov	r0, r3
 800532c:	f003 fa86 	bl	800883c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005330:	2300      	movs	r3, #0
 8005332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005334:	e046      	b.n	80053c4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	4413      	add	r3, r2
 800533e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005342:	461a      	mov	r2, r3
 8005344:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005348:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800535a:	0151      	lsls	r1, r2, #5
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	440a      	add	r2, r1
 8005360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005364:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005368:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005376:	461a      	mov	r2, r3
 8005378:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800537c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800538e:	0151      	lsls	r1, r2, #5
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	440a      	add	r2, r1
 8005394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005398:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800539c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800539e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ae:	0151      	lsls	r1, r2, #5
 80053b0:	69fa      	ldr	r2, [r7, #28]
 80053b2:	440a      	add	r2, r1
 80053b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c0:	3301      	adds	r3, #1
 80053c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	791b      	ldrb	r3, [r3, #4]
 80053c8:	461a      	mov	r2, r3
 80053ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d3b2      	bcc.n	8005336 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053de:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80053e2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	7bdb      	ldrb	r3, [r3, #15]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d016      	beq.n	800541a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f6:	69fa      	ldr	r2, [r7, #28]
 80053f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053fc:	f043 030b 	orr.w	r3, r3, #11
 8005400:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540c:	69fa      	ldr	r2, [r7, #28]
 800540e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005412:	f043 030b 	orr.w	r3, r3, #11
 8005416:	6453      	str	r3, [r2, #68]	; 0x44
 8005418:	e015      	b.n	8005446 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005428:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800542c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005430:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005440:	f043 030b 	orr.w	r3, r3, #11
 8005444:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005454:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005458:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6818      	ldr	r0, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005468:	461a      	mov	r2, r3
 800546a:	f004 f9c1 	bl	80097f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695a      	ldr	r2, [r3, #20]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800547c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f004 f8f0 	bl	8009668 <USB_ReadInterrupts>
 8005488:	4603      	mov	r3, r0
 800548a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800548e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005492:	d123      	bne.n	80054dc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f004 f986 	bl	80097aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f003 fa43 	bl	800892e <USB_GetDevSpeed>
 80054a8:	4603      	mov	r3, r0
 80054aa:	461a      	mov	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681c      	ldr	r4, [r3, #0]
 80054b4:	f001 fa08 	bl	80068c8 <HAL_RCC_GetHCLKFreq>
 80054b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054be:	461a      	mov	r2, r3
 80054c0:	4620      	mov	r0, r4
 80054c2:	f002 ff47 	bl	8008354 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f009 ffe3 	bl	800f492 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695a      	ldr	r2, [r3, #20]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80054da:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f004 f8c1 	bl	8009668 <USB_ReadInterrupts>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d10a      	bne.n	8005506 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f009 ffc0 	bl	800f476 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	695a      	ldr	r2, [r3, #20]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f002 0208 	and.w	r2, r2, #8
 8005504:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f004 f8ac 	bl	8009668 <USB_ReadInterrupts>
 8005510:	4603      	mov	r3, r0
 8005512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005516:	2b80      	cmp	r3, #128	; 0x80
 8005518:	d123      	bne.n	8005562 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005526:	2301      	movs	r3, #1
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
 800552a:	e014      	b.n	8005556 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005530:	4613      	mov	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d105      	bne.n	8005550 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	b2db      	uxtb	r3, r3
 8005548:	4619      	mov	r1, r3
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fb08 	bl	8005b60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	3301      	adds	r3, #1
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	791b      	ldrb	r3, [r3, #4]
 800555a:	461a      	mov	r2, r3
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	4293      	cmp	r3, r2
 8005560:	d3e4      	bcc.n	800552c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f004 f87e 	bl	8009668 <USB_ReadInterrupts>
 800556c:	4603      	mov	r3, r0
 800556e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005576:	d13c      	bne.n	80055f2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005578:	2301      	movs	r3, #1
 800557a:	627b      	str	r3, [r7, #36]	; 0x24
 800557c:	e02b      	b.n	80055d6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005592:	4613      	mov	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	3318      	adds	r3, #24
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d115      	bne.n	80055d0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80055a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	da12      	bge.n	80055d0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ae:	4613      	mov	r3, r2
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	3317      	adds	r3, #23
 80055ba:	2201      	movs	r2, #1
 80055bc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	4619      	mov	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fac8 	bl	8005b60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	3301      	adds	r3, #1
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	791b      	ldrb	r3, [r3, #4]
 80055da:	461a      	mov	r2, r3
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	4293      	cmp	r3, r2
 80055e0:	d3cd      	bcc.n	800557e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695a      	ldr	r2, [r3, #20]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80055f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f004 f836 	bl	8009668 <USB_ReadInterrupts>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005606:	d156      	bne.n	80056b6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005608:	2301      	movs	r3, #1
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
 800560c:	e045      	b.n	800569a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d12e      	bne.n	8005694 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005636:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005638:	2b00      	cmp	r3, #0
 800563a:	da2b      	bge.n	8005694 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8005648:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800564c:	429a      	cmp	r2, r3
 800564e:	d121      	bne.n	8005694 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005654:	4613      	mov	r3, r2
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	4413      	add	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8005662:	2201      	movs	r2, #1
 8005664:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10a      	bne.n	8005694 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800568c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005690:	6053      	str	r3, [r2, #4]
            break;
 8005692:	e008      	b.n	80056a6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	3301      	adds	r3, #1
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	791b      	ldrb	r3, [r3, #4]
 800569e:	461a      	mov	r2, r3
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d3b3      	bcc.n	800560e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695a      	ldr	r2, [r3, #20]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80056b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f003 ffd4 	bl	8009668 <USB_ReadInterrupts>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ca:	d10a      	bne.n	80056e2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f009 ff61 	bl	800f594 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80056e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f003 ffbe 	bl	8009668 <USB_ReadInterrupts>
 80056ec:	4603      	mov	r3, r0
 80056ee:	f003 0304 	and.w	r3, r3, #4
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d115      	bne.n	8005722 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f009 ff51 	bl	800f5b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6859      	ldr	r1, [r3, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]
 800571e:	e000      	b.n	8005722 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005720:	bf00      	nop
    }
  }
}
 8005722:	3734      	adds	r7, #52	; 0x34
 8005724:	46bd      	mov	sp, r7
 8005726:	bd90      	pop	{r4, r7, pc}

08005728 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	460b      	mov	r3, r1
 8005732:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_PCD_SetAddress+0x1a>
 800573e:	2302      	movs	r3, #2
 8005740:	e012      	b.n	8005768 <HAL_PCD_SetAddress+0x40>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	78fa      	ldrb	r2, [r7, #3]
 800574e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	78fa      	ldrb	r2, [r7, #3]
 8005756:	4611      	mov	r1, r2
 8005758:	4618      	mov	r0, r3
 800575a:	f003 ff1d 	bl	8009598 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	4608      	mov	r0, r1
 800577a:	4611      	mov	r1, r2
 800577c:	461a      	mov	r2, r3
 800577e:	4603      	mov	r3, r0
 8005780:	70fb      	strb	r3, [r7, #3]
 8005782:	460b      	mov	r3, r1
 8005784:	803b      	strh	r3, [r7, #0]
 8005786:	4613      	mov	r3, r2
 8005788:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800578e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005792:	2b00      	cmp	r3, #0
 8005794:	da0f      	bge.n	80057b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005796:	78fb      	ldrb	r3, [r7, #3]
 8005798:	f003 020f 	and.w	r2, r3, #15
 800579c:	4613      	mov	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	3310      	adds	r3, #16
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	4413      	add	r3, r2
 80057aa:	3304      	adds	r3, #4
 80057ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2201      	movs	r2, #1
 80057b2:	705a      	strb	r2, [r3, #1]
 80057b4:	e00f      	b.n	80057d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057b6:	78fb      	ldrb	r3, [r7, #3]
 80057b8:	f003 020f 	and.w	r2, r3, #15
 80057bc:	4613      	mov	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	4413      	add	r3, r2
 80057cc:	3304      	adds	r3, #4
 80057ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80057d6:	78fb      	ldrb	r3, [r7, #3]
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80057e2:	883a      	ldrh	r2, [r7, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	78ba      	ldrb	r2, [r7, #2]
 80057ec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	785b      	ldrb	r3, [r3, #1]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d004      	beq.n	8005800 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005800:	78bb      	ldrb	r3, [r7, #2]
 8005802:	2b02      	cmp	r3, #2
 8005804:	d102      	bne.n	800580c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <HAL_PCD_EP_Open+0xaa>
 8005816:	2302      	movs	r3, #2
 8005818:	e00e      	b.n	8005838 <HAL_PCD_EP_Open+0xc8>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68f9      	ldr	r1, [r7, #12]
 8005828:	4618      	mov	r0, r3
 800582a:	f003 f8a5 	bl	8008978 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8005836:	7afb      	ldrb	r3, [r7, #11]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800584c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005850:	2b00      	cmp	r3, #0
 8005852:	da0f      	bge.n	8005874 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	f003 020f 	and.w	r2, r3, #15
 800585a:	4613      	mov	r3, r2
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	4413      	add	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	3310      	adds	r3, #16
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	4413      	add	r3, r2
 8005868:	3304      	adds	r3, #4
 800586a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2201      	movs	r2, #1
 8005870:	705a      	strb	r2, [r3, #1]
 8005872:	e00f      	b.n	8005894 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005874:	78fb      	ldrb	r3, [r7, #3]
 8005876:	f003 020f 	and.w	r2, r3, #15
 800587a:	4613      	mov	r3, r2
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	4413      	add	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	4413      	add	r3, r2
 800588a:	3304      	adds	r3, #4
 800588c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	b2da      	uxtb	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <HAL_PCD_EP_Close+0x6e>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e00e      	b.n	80058cc <HAL_PCD_EP_Close+0x8c>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68f9      	ldr	r1, [r7, #12]
 80058bc:	4618      	mov	r0, r3
 80058be:	f003 f8e3 	bl	8008a88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	607a      	str	r2, [r7, #4]
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	460b      	mov	r3, r1
 80058e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058e4:	7afb      	ldrb	r3, [r7, #11]
 80058e6:	f003 020f 	and.w	r2, r3, #15
 80058ea:	4613      	mov	r3, r2
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4413      	add	r3, r2
 80058fa:	3304      	adds	r3, #4
 80058fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2200      	movs	r2, #0
 800590e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	2200      	movs	r2, #0
 8005914:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005916:	7afb      	ldrb	r3, [r7, #11]
 8005918:	f003 030f 	and.w	r3, r3, #15
 800591c:	b2da      	uxtb	r2, r3
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	799b      	ldrb	r3, [r3, #6]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d102      	bne.n	8005930 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6818      	ldr	r0, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	799b      	ldrb	r3, [r3, #6]
 8005938:	461a      	mov	r2, r3
 800593a:	6979      	ldr	r1, [r7, #20]
 800593c:	f003 f980 	bl	8008c40 <USB_EPStartXfer>

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	460b      	mov	r3, r1
 8005954:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005956:	78fb      	ldrb	r3, [r7, #3]
 8005958:	f003 020f 	and.w	r2, r3, #15
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	440b      	add	r3, r1
 8005968:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800596c:	681b      	ldr	r3, [r3, #0]
}
 800596e:	4618      	mov	r0, r3
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b086      	sub	sp, #24
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
 8005986:	460b      	mov	r3, r1
 8005988:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800598a:	7afb      	ldrb	r3, [r7, #11]
 800598c:	f003 020f 	and.w	r2, r3, #15
 8005990:	4613      	mov	r3, r2
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	3310      	adds	r3, #16
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	4413      	add	r3, r2
 800599e:	3304      	adds	r3, #4
 80059a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2200      	movs	r2, #0
 80059b2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2201      	movs	r2, #1
 80059b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059ba:	7afb      	ldrb	r3, [r7, #11]
 80059bc:	f003 030f 	and.w	r3, r3, #15
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	799b      	ldrb	r3, [r3, #6]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d102      	bne.n	80059d4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	799b      	ldrb	r3, [r3, #6]
 80059dc:	461a      	mov	r2, r3
 80059de:	6979      	ldr	r1, [r7, #20]
 80059e0:	f003 f92e 	bl	8008c40 <USB_EPStartXfer>

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b084      	sub	sp, #16
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	460b      	mov	r3, r1
 80059f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80059fa:	78fb      	ldrb	r3, [r7, #3]
 80059fc:	f003 030f 	and.w	r3, r3, #15
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	7912      	ldrb	r2, [r2, #4]
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d901      	bls.n	8005a0c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e04f      	b.n	8005aac <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	da0f      	bge.n	8005a34 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a14:	78fb      	ldrb	r3, [r7, #3]
 8005a16:	f003 020f 	and.w	r2, r3, #15
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	4413      	add	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	3310      	adds	r3, #16
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	4413      	add	r3, r2
 8005a28:	3304      	adds	r3, #4
 8005a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	705a      	strb	r2, [r3, #1]
 8005a32:	e00d      	b.n	8005a50 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a34:	78fa      	ldrb	r2, [r7, #3]
 8005a36:	4613      	mov	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	4413      	add	r3, r2
 8005a46:	3304      	adds	r3, #4
 8005a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2201      	movs	r2, #1
 8005a54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	f003 030f 	and.w	r3, r3, #15
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_PCD_EP_SetStall+0x82>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e01d      	b.n	8005aac <HAL_PCD_EP_SetStall+0xbe>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68f9      	ldr	r1, [r7, #12]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f003 fcb6 	bl	80093f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d109      	bne.n	8005aa2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	7999      	ldrb	r1, [r3, #6]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	f003 fea7 	bl	80097f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	7912      	ldrb	r2, [r2, #4]
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d901      	bls.n	8005ad2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e042      	b.n	8005b58 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	da0f      	bge.n	8005afa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ada:	78fb      	ldrb	r3, [r7, #3]
 8005adc:	f003 020f 	and.w	r2, r3, #15
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	3310      	adds	r3, #16
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	4413      	add	r3, r2
 8005aee:	3304      	adds	r3, #4
 8005af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	705a      	strb	r2, [r3, #1]
 8005af8:	e00f      	b.n	8005b1a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005afa:	78fb      	ldrb	r3, [r7, #3]
 8005afc:	f003 020f 	and.w	r2, r3, #15
 8005b00:	4613      	mov	r3, r2
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	4413      	add	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	4413      	add	r3, r2
 8005b10:	3304      	adds	r3, #4
 8005b12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d101      	bne.n	8005b3a <HAL_PCD_EP_ClrStall+0x86>
 8005b36:	2302      	movs	r3, #2
 8005b38:	e00e      	b.n	8005b58 <HAL_PCD_EP_ClrStall+0xa4>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68f9      	ldr	r1, [r7, #12]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f003 fcbf 	bl	80094cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005b6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	da0c      	bge.n	8005b8e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b74:	78fb      	ldrb	r3, [r7, #3]
 8005b76:	f003 020f 	and.w	r2, r3, #15
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	3310      	adds	r3, #16
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	4413      	add	r3, r2
 8005b88:	3304      	adds	r3, #4
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	e00c      	b.n	8005ba8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b8e:	78fb      	ldrb	r3, [r7, #3]
 8005b90:	f003 020f 	and.w	r2, r3, #15
 8005b94:	4613      	mov	r3, r2
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	4413      	add	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68f9      	ldr	r1, [r7, #12]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f003 fade 	bl	8009170 <USB_EPStopXfer>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005bb8:	7afb      	ldrb	r3, [r7, #11]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b08a      	sub	sp, #40	; 0x28
 8005bc6:	af02      	add	r7, sp, #8
 8005bc8:	6078      	str	r0, [r7, #4]
 8005bca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	4413      	add	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	3310      	adds	r3, #16
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	4413      	add	r3, r2
 8005be6:	3304      	adds	r3, #4
 8005be8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	695a      	ldr	r2, [r3, #20]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d901      	bls.n	8005bfa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e06b      	b.n	8005cd2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	691a      	ldr	r2, [r3, #16]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d902      	bls.n	8005c16 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	3303      	adds	r3, #3
 8005c1a:	089b      	lsrs	r3, r3, #2
 8005c1c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c1e:	e02a      	b.n	8005c76 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	691a      	ldr	r2, [r3, #16]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	69fa      	ldr	r2, [r7, #28]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d902      	bls.n	8005c3c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	3303      	adds	r3, #3
 8005c40:	089b      	lsrs	r3, r3, #2
 8005c42:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	68d9      	ldr	r1, [r3, #12]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	4603      	mov	r3, r0
 8005c58:	6978      	ldr	r0, [r7, #20]
 8005c5a:	f003 fb33 	bl	80092c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	441a      	add	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	695a      	ldr	r2, [r3, #20]
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	441a      	add	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d809      	bhi.n	8005ca0 <PCD_WriteEmptyTxFifo+0xde>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	695a      	ldr	r2, [r3, #20]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d203      	bcs.n	8005ca0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1bf      	bne.n	8005c20 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d811      	bhi.n	8005cd0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	6939      	ldr	r1, [r7, #16]
 8005cc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ccc:	4013      	ands	r3, r2
 8005cce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3720      	adds	r7, #32
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	333c      	adds	r3, #60	; 0x3c
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	799b      	ldrb	r3, [r3, #6]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d17b      	bne.n	8005e0a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d015      	beq.n	8005d48 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	4a61      	ldr	r2, [pc, #388]	; (8005ea4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	f240 80b9 	bls.w	8005e98 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 80b3 	beq.w	8005e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d44:	6093      	str	r3, [r2, #8]
 8005d46:	e0a7      	b.n	8005e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f003 0320 	and.w	r3, r3, #32
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d009      	beq.n	8005d66 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5e:	461a      	mov	r2, r3
 8005d60:	2320      	movs	r3, #32
 8005d62:	6093      	str	r3, [r2, #8]
 8005d64:	e098      	b.n	8005e98 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f040 8093 	bne.w	8005e98 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	4a4b      	ldr	r2, [pc, #300]	; (8005ea4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d90f      	bls.n	8005d9a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00a      	beq.n	8005d9a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d90:	461a      	mov	r2, r3
 8005d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d96:	6093      	str	r3, [r2, #8]
 8005d98:	e07e      	b.n	8005e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	4413      	add	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	4413      	add	r3, r2
 8005dac:	3304      	adds	r3, #4
 8005dae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a1a      	ldr	r2, [r3, #32]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	0159      	lsls	r1, r3, #5
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	440b      	add	r3, r1
 8005dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dc6:	1ad2      	subs	r2, r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d114      	bne.n	8005dfc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d109      	bne.n	8005dee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005de4:	461a      	mov	r2, r3
 8005de6:	2101      	movs	r1, #1
 8005de8:	f003 fd02 	bl	80097f0 <USB_EP0_OutStart>
 8005dec:	e006      	b.n	8005dfc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	441a      	add	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	4619      	mov	r1, r3
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f009 fb02 	bl	800f40c <HAL_PCD_DataOutStageCallback>
 8005e08:	e046      	b.n	8005e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	4a26      	ldr	r2, [pc, #152]	; (8005ea8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d124      	bne.n	8005e5c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e28:	461a      	mov	r2, r3
 8005e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e2e:	6093      	str	r3, [r2, #8]
 8005e30:	e032      	b.n	8005e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f003 0320 	and.w	r3, r3, #32
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d008      	beq.n	8005e4e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e48:	461a      	mov	r2, r3
 8005e4a:	2320      	movs	r3, #32
 8005e4c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	4619      	mov	r1, r3
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f009 fad9 	bl	800f40c <HAL_PCD_DataOutStageCallback>
 8005e5a:	e01d      	b.n	8005e98 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d114      	bne.n	8005e8c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	4613      	mov	r3, r2
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	4413      	add	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	440b      	add	r3, r1
 8005e70:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d108      	bne.n	8005e8c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6818      	ldr	r0, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005e84:	461a      	mov	r2, r3
 8005e86:	2100      	movs	r1, #0
 8005e88:	f003 fcb2 	bl	80097f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	4619      	mov	r1, r3
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f009 faba 	bl	800f40c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3720      	adds	r7, #32
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	4f54300a 	.word	0x4f54300a
 8005ea8:	4f54310a 	.word	0x4f54310a

08005eac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	333c      	adds	r3, #60	; 0x3c
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4a15      	ldr	r2, [pc, #84]	; (8005f34 <PCD_EP_OutSetupPacket_int+0x88>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d90e      	bls.n	8005f00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d009      	beq.n	8005f00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005efe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f009 fa71 	bl	800f3e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4a0a      	ldr	r2, [pc, #40]	; (8005f34 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d90c      	bls.n	8005f28 <PCD_EP_OutSetupPacket_int+0x7c>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	799b      	ldrb	r3, [r3, #6]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d108      	bne.n	8005f28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6818      	ldr	r0, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005f20:	461a      	mov	r2, r3
 8005f22:	2101      	movs	r1, #1
 8005f24:	f003 fc64 	bl	80097f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	4f54300a 	.word	0x4f54300a

08005f38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	460b      	mov	r3, r1
 8005f42:	70fb      	strb	r3, [r7, #3]
 8005f44:	4613      	mov	r3, r2
 8005f46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005f50:	78fb      	ldrb	r3, [r7, #3]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d107      	bne.n	8005f66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005f56:	883b      	ldrh	r3, [r7, #0]
 8005f58:	0419      	lsls	r1, r3, #16
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	629a      	str	r2, [r3, #40]	; 0x28
 8005f64:	e028      	b.n	8005fb8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6c:	0c1b      	lsrs	r3, r3, #16
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	4413      	add	r3, r2
 8005f72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f74:	2300      	movs	r3, #0
 8005f76:	73fb      	strb	r3, [r7, #15]
 8005f78:	e00d      	b.n	8005f96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
 8005f80:	3340      	adds	r3, #64	; 0x40
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	0c1b      	lsrs	r3, r3, #16
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	3301      	adds	r3, #1
 8005f94:	73fb      	strb	r3, [r7, #15]
 8005f96:	7bfa      	ldrb	r2, [r7, #15]
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d3ec      	bcc.n	8005f7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005fa0:	883b      	ldrh	r3, [r7, #0]
 8005fa2:	0418      	lsls	r0, r3, #16
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6819      	ldr	r1, [r3, #0]
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	4302      	orrs	r2, r0
 8005fb0:	3340      	adds	r3, #64	; 0x40
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	440b      	add	r3, r1
 8005fb6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	460b      	mov	r3, r1
 8005fd0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	887a      	ldrh	r2, [r7, #2]
 8005fd8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e267      	b.n	80064e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d075      	beq.n	800610a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800601e:	4b88      	ldr	r3, [pc, #544]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 030c 	and.w	r3, r3, #12
 8006026:	2b04      	cmp	r3, #4
 8006028:	d00c      	beq.n	8006044 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800602a:	4b85      	ldr	r3, [pc, #532]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006032:	2b08      	cmp	r3, #8
 8006034:	d112      	bne.n	800605c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006036:	4b82      	ldr	r3, [pc, #520]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800603e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006042:	d10b      	bne.n	800605c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006044:	4b7e      	ldr	r3, [pc, #504]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d05b      	beq.n	8006108 <HAL_RCC_OscConfig+0x108>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d157      	bne.n	8006108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e242      	b.n	80064e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006064:	d106      	bne.n	8006074 <HAL_RCC_OscConfig+0x74>
 8006066:	4b76      	ldr	r3, [pc, #472]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a75      	ldr	r2, [pc, #468]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 800606c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006070:	6013      	str	r3, [r2, #0]
 8006072:	e01d      	b.n	80060b0 <HAL_RCC_OscConfig+0xb0>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800607c:	d10c      	bne.n	8006098 <HAL_RCC_OscConfig+0x98>
 800607e:	4b70      	ldr	r3, [pc, #448]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a6f      	ldr	r2, [pc, #444]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 8006084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	4b6d      	ldr	r3, [pc, #436]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a6c      	ldr	r2, [pc, #432]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 8006090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	e00b      	b.n	80060b0 <HAL_RCC_OscConfig+0xb0>
 8006098:	4b69      	ldr	r3, [pc, #420]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a68      	ldr	r2, [pc, #416]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 800609e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060a2:	6013      	str	r3, [r2, #0]
 80060a4:	4b66      	ldr	r3, [pc, #408]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a65      	ldr	r2, [pc, #404]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 80060aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d013      	beq.n	80060e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b8:	f7fd fede 	bl	8003e78 <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060c0:	f7fd feda 	bl	8003e78 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b64      	cmp	r3, #100	; 0x64
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e207      	b.n	80064e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060d2:	4b5b      	ldr	r3, [pc, #364]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d0f0      	beq.n	80060c0 <HAL_RCC_OscConfig+0xc0>
 80060de:	e014      	b.n	800610a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e0:	f7fd feca 	bl	8003e78 <HAL_GetTick>
 80060e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060e8:	f7fd fec6 	bl	8003e78 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b64      	cmp	r3, #100	; 0x64
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e1f3      	b.n	80064e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060fa:	4b51      	ldr	r3, [pc, #324]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1f0      	bne.n	80060e8 <HAL_RCC_OscConfig+0xe8>
 8006106:	e000      	b.n	800610a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d063      	beq.n	80061de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006116:	4b4a      	ldr	r3, [pc, #296]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 030c 	and.w	r3, r3, #12
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00b      	beq.n	800613a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006122:	4b47      	ldr	r3, [pc, #284]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800612a:	2b08      	cmp	r3, #8
 800612c:	d11c      	bne.n	8006168 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800612e:	4b44      	ldr	r3, [pc, #272]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d116      	bne.n	8006168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800613a:	4b41      	ldr	r3, [pc, #260]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d005      	beq.n	8006152 <HAL_RCC_OscConfig+0x152>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d001      	beq.n	8006152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e1c7      	b.n	80064e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006152:	4b3b      	ldr	r3, [pc, #236]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	4937      	ldr	r1, [pc, #220]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 8006162:	4313      	orrs	r3, r2
 8006164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006166:	e03a      	b.n	80061de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d020      	beq.n	80061b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006170:	4b34      	ldr	r3, [pc, #208]	; (8006244 <HAL_RCC_OscConfig+0x244>)
 8006172:	2201      	movs	r2, #1
 8006174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006176:	f7fd fe7f 	bl	8003e78 <HAL_GetTick>
 800617a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800617c:	e008      	b.n	8006190 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800617e:	f7fd fe7b 	bl	8003e78 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d901      	bls.n	8006190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e1a8      	b.n	80064e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006190:	4b2b      	ldr	r3, [pc, #172]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0f0      	beq.n	800617e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800619c:	4b28      	ldr	r3, [pc, #160]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	4925      	ldr	r1, [pc, #148]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	600b      	str	r3, [r1, #0]
 80061b0:	e015      	b.n	80061de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061b2:	4b24      	ldr	r3, [pc, #144]	; (8006244 <HAL_RCC_OscConfig+0x244>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b8:	f7fd fe5e 	bl	8003e78 <HAL_GetTick>
 80061bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061c0:	f7fd fe5a 	bl	8003e78 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e187      	b.n	80064e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061d2:	4b1b      	ldr	r3, [pc, #108]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1f0      	bne.n	80061c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0308 	and.w	r3, r3, #8
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d036      	beq.n	8006258 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d016      	beq.n	8006220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061f2:	4b15      	ldr	r3, [pc, #84]	; (8006248 <HAL_RCC_OscConfig+0x248>)
 80061f4:	2201      	movs	r2, #1
 80061f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f8:	f7fd fe3e 	bl	8003e78 <HAL_GetTick>
 80061fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061fe:	e008      	b.n	8006212 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006200:	f7fd fe3a 	bl	8003e78 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b02      	cmp	r3, #2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e167      	b.n	80064e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006212:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <HAL_RCC_OscConfig+0x240>)
 8006214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d0f0      	beq.n	8006200 <HAL_RCC_OscConfig+0x200>
 800621e:	e01b      	b.n	8006258 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006220:	4b09      	ldr	r3, [pc, #36]	; (8006248 <HAL_RCC_OscConfig+0x248>)
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006226:	f7fd fe27 	bl	8003e78 <HAL_GetTick>
 800622a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800622c:	e00e      	b.n	800624c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800622e:	f7fd fe23 	bl	8003e78 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d907      	bls.n	800624c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e150      	b.n	80064e2 <HAL_RCC_OscConfig+0x4e2>
 8006240:	40023800 	.word	0x40023800
 8006244:	42470000 	.word	0x42470000
 8006248:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800624c:	4b88      	ldr	r3, [pc, #544]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 800624e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1ea      	bne.n	800622e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 8097 	beq.w	8006394 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006266:	2300      	movs	r3, #0
 8006268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800626a:	4b81      	ldr	r3, [pc, #516]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10f      	bne.n	8006296 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006276:	2300      	movs	r3, #0
 8006278:	60bb      	str	r3, [r7, #8]
 800627a:	4b7d      	ldr	r3, [pc, #500]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	4a7c      	ldr	r2, [pc, #496]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 8006280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006284:	6413      	str	r3, [r2, #64]	; 0x40
 8006286:	4b7a      	ldr	r3, [pc, #488]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 8006288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800628e:	60bb      	str	r3, [r7, #8]
 8006290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006292:	2301      	movs	r3, #1
 8006294:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006296:	4b77      	ldr	r3, [pc, #476]	; (8006474 <HAL_RCC_OscConfig+0x474>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d118      	bne.n	80062d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062a2:	4b74      	ldr	r3, [pc, #464]	; (8006474 <HAL_RCC_OscConfig+0x474>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a73      	ldr	r2, [pc, #460]	; (8006474 <HAL_RCC_OscConfig+0x474>)
 80062a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062ae:	f7fd fde3 	bl	8003e78 <HAL_GetTick>
 80062b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062b4:	e008      	b.n	80062c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062b6:	f7fd fddf 	bl	8003e78 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d901      	bls.n	80062c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e10c      	b.n	80064e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062c8:	4b6a      	ldr	r3, [pc, #424]	; (8006474 <HAL_RCC_OscConfig+0x474>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d0f0      	beq.n	80062b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d106      	bne.n	80062ea <HAL_RCC_OscConfig+0x2ea>
 80062dc:	4b64      	ldr	r3, [pc, #400]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 80062de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e0:	4a63      	ldr	r2, [pc, #396]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 80062e2:	f043 0301 	orr.w	r3, r3, #1
 80062e6:	6713      	str	r3, [r2, #112]	; 0x70
 80062e8:	e01c      	b.n	8006324 <HAL_RCC_OscConfig+0x324>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	2b05      	cmp	r3, #5
 80062f0:	d10c      	bne.n	800630c <HAL_RCC_OscConfig+0x30c>
 80062f2:	4b5f      	ldr	r3, [pc, #380]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 80062f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f6:	4a5e      	ldr	r2, [pc, #376]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 80062f8:	f043 0304 	orr.w	r3, r3, #4
 80062fc:	6713      	str	r3, [r2, #112]	; 0x70
 80062fe:	4b5c      	ldr	r3, [pc, #368]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 8006300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006302:	4a5b      	ldr	r2, [pc, #364]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 8006304:	f043 0301 	orr.w	r3, r3, #1
 8006308:	6713      	str	r3, [r2, #112]	; 0x70
 800630a:	e00b      	b.n	8006324 <HAL_RCC_OscConfig+0x324>
 800630c:	4b58      	ldr	r3, [pc, #352]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 800630e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006310:	4a57      	ldr	r2, [pc, #348]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 8006312:	f023 0301 	bic.w	r3, r3, #1
 8006316:	6713      	str	r3, [r2, #112]	; 0x70
 8006318:	4b55      	ldr	r3, [pc, #340]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 800631a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631c:	4a54      	ldr	r2, [pc, #336]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 800631e:	f023 0304 	bic.w	r3, r3, #4
 8006322:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d015      	beq.n	8006358 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800632c:	f7fd fda4 	bl	8003e78 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006332:	e00a      	b.n	800634a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006334:	f7fd fda0 	bl	8003e78 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006342:	4293      	cmp	r3, r2
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e0cb      	b.n	80064e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800634a:	4b49      	ldr	r3, [pc, #292]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 800634c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0ee      	beq.n	8006334 <HAL_RCC_OscConfig+0x334>
 8006356:	e014      	b.n	8006382 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006358:	f7fd fd8e 	bl	8003e78 <HAL_GetTick>
 800635c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800635e:	e00a      	b.n	8006376 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006360:	f7fd fd8a 	bl	8003e78 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	f241 3288 	movw	r2, #5000	; 0x1388
 800636e:	4293      	cmp	r3, r2
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e0b5      	b.n	80064e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006376:	4b3e      	ldr	r3, [pc, #248]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 8006378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1ee      	bne.n	8006360 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006382:	7dfb      	ldrb	r3, [r7, #23]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d105      	bne.n	8006394 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006388:	4b39      	ldr	r3, [pc, #228]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 800638a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638c:	4a38      	ldr	r2, [pc, #224]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 800638e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006392:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 80a1 	beq.w	80064e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800639e:	4b34      	ldr	r3, [pc, #208]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f003 030c 	and.w	r3, r3, #12
 80063a6:	2b08      	cmp	r3, #8
 80063a8:	d05c      	beq.n	8006464 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d141      	bne.n	8006436 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063b2:	4b31      	ldr	r3, [pc, #196]	; (8006478 <HAL_RCC_OscConfig+0x478>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b8:	f7fd fd5e 	bl	8003e78 <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063c0:	f7fd fd5a 	bl	8003e78 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e087      	b.n	80064e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063d2:	4b27      	ldr	r3, [pc, #156]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f0      	bne.n	80063c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	69da      	ldr	r2, [r3, #28]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	019b      	lsls	r3, r3, #6
 80063ee:	431a      	orrs	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f4:	085b      	lsrs	r3, r3, #1
 80063f6:	3b01      	subs	r3, #1
 80063f8:	041b      	lsls	r3, r3, #16
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	061b      	lsls	r3, r3, #24
 8006402:	491b      	ldr	r1, [pc, #108]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 8006404:	4313      	orrs	r3, r2
 8006406:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006408:	4b1b      	ldr	r3, [pc, #108]	; (8006478 <HAL_RCC_OscConfig+0x478>)
 800640a:	2201      	movs	r2, #1
 800640c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800640e:	f7fd fd33 	bl	8003e78 <HAL_GetTick>
 8006412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006414:	e008      	b.n	8006428 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006416:	f7fd fd2f 	bl	8003e78 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d901      	bls.n	8006428 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e05c      	b.n	80064e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006428:	4b11      	ldr	r3, [pc, #68]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d0f0      	beq.n	8006416 <HAL_RCC_OscConfig+0x416>
 8006434:	e054      	b.n	80064e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006436:	4b10      	ldr	r3, [pc, #64]	; (8006478 <HAL_RCC_OscConfig+0x478>)
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800643c:	f7fd fd1c 	bl	8003e78 <HAL_GetTick>
 8006440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006444:	f7fd fd18 	bl	8003e78 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b02      	cmp	r3, #2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e045      	b.n	80064e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006456:	4b06      	ldr	r3, [pc, #24]	; (8006470 <HAL_RCC_OscConfig+0x470>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1f0      	bne.n	8006444 <HAL_RCC_OscConfig+0x444>
 8006462:	e03d      	b.n	80064e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d107      	bne.n	800647c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e038      	b.n	80064e2 <HAL_RCC_OscConfig+0x4e2>
 8006470:	40023800 	.word	0x40023800
 8006474:	40007000 	.word	0x40007000
 8006478:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800647c:	4b1b      	ldr	r3, [pc, #108]	; (80064ec <HAL_RCC_OscConfig+0x4ec>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d028      	beq.n	80064dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006494:	429a      	cmp	r2, r3
 8006496:	d121      	bne.n	80064dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d11a      	bne.n	80064dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80064ac:	4013      	ands	r3, r2
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d111      	bne.n	80064dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c2:	085b      	lsrs	r3, r3, #1
 80064c4:	3b01      	subs	r3, #1
 80064c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d107      	bne.n	80064dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064d8:	429a      	cmp	r2, r3
 80064da:	d001      	beq.n	80064e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e000      	b.n	80064e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	40023800 	.word	0x40023800

080064f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e0cc      	b.n	800669e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006504:	4b68      	ldr	r3, [pc, #416]	; (80066a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d90c      	bls.n	800652c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006512:	4b65      	ldr	r3, [pc, #404]	; (80066a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800651a:	4b63      	ldr	r3, [pc, #396]	; (80066a8 <HAL_RCC_ClockConfig+0x1b8>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d001      	beq.n	800652c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e0b8      	b.n	800669e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d020      	beq.n	800657a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006544:	4b59      	ldr	r3, [pc, #356]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	4a58      	ldr	r2, [pc, #352]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 800654a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800654e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b00      	cmp	r3, #0
 800655a:	d005      	beq.n	8006568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800655c:	4b53      	ldr	r3, [pc, #332]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	4a52      	ldr	r2, [pc, #328]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 8006562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006568:	4b50      	ldr	r3, [pc, #320]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	494d      	ldr	r1, [pc, #308]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 8006576:	4313      	orrs	r3, r2
 8006578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d044      	beq.n	8006610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d107      	bne.n	800659e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800658e:	4b47      	ldr	r3, [pc, #284]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d119      	bne.n	80065ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e07f      	b.n	800669e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d003      	beq.n	80065ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d107      	bne.n	80065be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ae:	4b3f      	ldr	r3, [pc, #252]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d109      	bne.n	80065ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e06f      	b.n	800669e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065be:	4b3b      	ldr	r3, [pc, #236]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e067      	b.n	800669e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065ce:	4b37      	ldr	r3, [pc, #220]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f023 0203 	bic.w	r2, r3, #3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	4934      	ldr	r1, [pc, #208]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065e0:	f7fd fc4a 	bl	8003e78 <HAL_GetTick>
 80065e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e6:	e00a      	b.n	80065fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065e8:	f7fd fc46 	bl	8003e78 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d901      	bls.n	80065fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e04f      	b.n	800669e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065fe:	4b2b      	ldr	r3, [pc, #172]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f003 020c 	and.w	r2, r3, #12
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	429a      	cmp	r2, r3
 800660e:	d1eb      	bne.n	80065e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006610:	4b25      	ldr	r3, [pc, #148]	; (80066a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	429a      	cmp	r2, r3
 800661c:	d20c      	bcs.n	8006638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800661e:	4b22      	ldr	r3, [pc, #136]	; (80066a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	b2d2      	uxtb	r2, r2
 8006624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006626:	4b20      	ldr	r3, [pc, #128]	; (80066a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	429a      	cmp	r2, r3
 8006632:	d001      	beq.n	8006638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e032      	b.n	800669e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d008      	beq.n	8006656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006644:	4b19      	ldr	r3, [pc, #100]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	4916      	ldr	r1, [pc, #88]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 8006652:	4313      	orrs	r3, r2
 8006654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0308 	and.w	r3, r3, #8
 800665e:	2b00      	cmp	r3, #0
 8006660:	d009      	beq.n	8006676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006662:	4b12      	ldr	r3, [pc, #72]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	00db      	lsls	r3, r3, #3
 8006670:	490e      	ldr	r1, [pc, #56]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 8006672:	4313      	orrs	r3, r2
 8006674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006676:	f000 f821 	bl	80066bc <HAL_RCC_GetSysClockFreq>
 800667a:	4602      	mov	r2, r0
 800667c:	4b0b      	ldr	r3, [pc, #44]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	091b      	lsrs	r3, r3, #4
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	490a      	ldr	r1, [pc, #40]	; (80066b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006688:	5ccb      	ldrb	r3, [r1, r3]
 800668a:	fa22 f303 	lsr.w	r3, r2, r3
 800668e:	4a09      	ldr	r2, [pc, #36]	; (80066b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006692:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4618      	mov	r0, r3
 8006698:	f7fd fbaa 	bl	8003df0 <HAL_InitTick>

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	40023c00 	.word	0x40023c00
 80066ac:	40023800 	.word	0x40023800
 80066b0:	080132b8 	.word	0x080132b8
 80066b4:	200000e0 	.word	0x200000e0
 80066b8:	200000e4 	.word	0x200000e4

080066bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066c0:	b094      	sub	sp, #80	; 0x50
 80066c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	647b      	str	r3, [r7, #68]	; 0x44
 80066c8:	2300      	movs	r3, #0
 80066ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066cc:	2300      	movs	r3, #0
 80066ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066d4:	4b79      	ldr	r3, [pc, #484]	; (80068bc <HAL_RCC_GetSysClockFreq+0x200>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f003 030c 	and.w	r3, r3, #12
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d00d      	beq.n	80066fc <HAL_RCC_GetSysClockFreq+0x40>
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	f200 80e1 	bhi.w	80068a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_RCC_GetSysClockFreq+0x34>
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d003      	beq.n	80066f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80066ee:	e0db      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066f0:	4b73      	ldr	r3, [pc, #460]	; (80068c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80066f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80066f4:	e0db      	b.n	80068ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066f6:	4b73      	ldr	r3, [pc, #460]	; (80068c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80066f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066fa:	e0d8      	b.n	80068ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066fc:	4b6f      	ldr	r3, [pc, #444]	; (80068bc <HAL_RCC_GetSysClockFreq+0x200>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006704:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006706:	4b6d      	ldr	r3, [pc, #436]	; (80068bc <HAL_RCC_GetSysClockFreq+0x200>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d063      	beq.n	80067da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006712:	4b6a      	ldr	r3, [pc, #424]	; (80068bc <HAL_RCC_GetSysClockFreq+0x200>)
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	099b      	lsrs	r3, r3, #6
 8006718:	2200      	movs	r2, #0
 800671a:	63bb      	str	r3, [r7, #56]	; 0x38
 800671c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800671e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006724:	633b      	str	r3, [r7, #48]	; 0x30
 8006726:	2300      	movs	r3, #0
 8006728:	637b      	str	r3, [r7, #52]	; 0x34
 800672a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800672e:	4622      	mov	r2, r4
 8006730:	462b      	mov	r3, r5
 8006732:	f04f 0000 	mov.w	r0, #0
 8006736:	f04f 0100 	mov.w	r1, #0
 800673a:	0159      	lsls	r1, r3, #5
 800673c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006740:	0150      	lsls	r0, r2, #5
 8006742:	4602      	mov	r2, r0
 8006744:	460b      	mov	r3, r1
 8006746:	4621      	mov	r1, r4
 8006748:	1a51      	subs	r1, r2, r1
 800674a:	6139      	str	r1, [r7, #16]
 800674c:	4629      	mov	r1, r5
 800674e:	eb63 0301 	sbc.w	r3, r3, r1
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	f04f 0200 	mov.w	r2, #0
 8006758:	f04f 0300 	mov.w	r3, #0
 800675c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006760:	4659      	mov	r1, fp
 8006762:	018b      	lsls	r3, r1, #6
 8006764:	4651      	mov	r1, sl
 8006766:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800676a:	4651      	mov	r1, sl
 800676c:	018a      	lsls	r2, r1, #6
 800676e:	4651      	mov	r1, sl
 8006770:	ebb2 0801 	subs.w	r8, r2, r1
 8006774:	4659      	mov	r1, fp
 8006776:	eb63 0901 	sbc.w	r9, r3, r1
 800677a:	f04f 0200 	mov.w	r2, #0
 800677e:	f04f 0300 	mov.w	r3, #0
 8006782:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006786:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800678a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800678e:	4690      	mov	r8, r2
 8006790:	4699      	mov	r9, r3
 8006792:	4623      	mov	r3, r4
 8006794:	eb18 0303 	adds.w	r3, r8, r3
 8006798:	60bb      	str	r3, [r7, #8]
 800679a:	462b      	mov	r3, r5
 800679c:	eb49 0303 	adc.w	r3, r9, r3
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	f04f 0200 	mov.w	r2, #0
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80067ae:	4629      	mov	r1, r5
 80067b0:	024b      	lsls	r3, r1, #9
 80067b2:	4621      	mov	r1, r4
 80067b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067b8:	4621      	mov	r1, r4
 80067ba:	024a      	lsls	r2, r1, #9
 80067bc:	4610      	mov	r0, r2
 80067be:	4619      	mov	r1, r3
 80067c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067c2:	2200      	movs	r2, #0
 80067c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067cc:	f7fa fa4c 	bl	8000c68 <__aeabi_uldivmod>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	4613      	mov	r3, r2
 80067d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067d8:	e058      	b.n	800688c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067da:	4b38      	ldr	r3, [pc, #224]	; (80068bc <HAL_RCC_GetSysClockFreq+0x200>)
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	099b      	lsrs	r3, r3, #6
 80067e0:	2200      	movs	r2, #0
 80067e2:	4618      	mov	r0, r3
 80067e4:	4611      	mov	r1, r2
 80067e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80067ea:	623b      	str	r3, [r7, #32]
 80067ec:	2300      	movs	r3, #0
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
 80067f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80067f4:	4642      	mov	r2, r8
 80067f6:	464b      	mov	r3, r9
 80067f8:	f04f 0000 	mov.w	r0, #0
 80067fc:	f04f 0100 	mov.w	r1, #0
 8006800:	0159      	lsls	r1, r3, #5
 8006802:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006806:	0150      	lsls	r0, r2, #5
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	4641      	mov	r1, r8
 800680e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006812:	4649      	mov	r1, r9
 8006814:	eb63 0b01 	sbc.w	fp, r3, r1
 8006818:	f04f 0200 	mov.w	r2, #0
 800681c:	f04f 0300 	mov.w	r3, #0
 8006820:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006824:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006828:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800682c:	ebb2 040a 	subs.w	r4, r2, sl
 8006830:	eb63 050b 	sbc.w	r5, r3, fp
 8006834:	f04f 0200 	mov.w	r2, #0
 8006838:	f04f 0300 	mov.w	r3, #0
 800683c:	00eb      	lsls	r3, r5, #3
 800683e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006842:	00e2      	lsls	r2, r4, #3
 8006844:	4614      	mov	r4, r2
 8006846:	461d      	mov	r5, r3
 8006848:	4643      	mov	r3, r8
 800684a:	18e3      	adds	r3, r4, r3
 800684c:	603b      	str	r3, [r7, #0]
 800684e:	464b      	mov	r3, r9
 8006850:	eb45 0303 	adc.w	r3, r5, r3
 8006854:	607b      	str	r3, [r7, #4]
 8006856:	f04f 0200 	mov.w	r2, #0
 800685a:	f04f 0300 	mov.w	r3, #0
 800685e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006862:	4629      	mov	r1, r5
 8006864:	028b      	lsls	r3, r1, #10
 8006866:	4621      	mov	r1, r4
 8006868:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800686c:	4621      	mov	r1, r4
 800686e:	028a      	lsls	r2, r1, #10
 8006870:	4610      	mov	r0, r2
 8006872:	4619      	mov	r1, r3
 8006874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006876:	2200      	movs	r2, #0
 8006878:	61bb      	str	r3, [r7, #24]
 800687a:	61fa      	str	r2, [r7, #28]
 800687c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006880:	f7fa f9f2 	bl	8000c68 <__aeabi_uldivmod>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4613      	mov	r3, r2
 800688a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800688c:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <HAL_RCC_GetSysClockFreq+0x200>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	0c1b      	lsrs	r3, r3, #16
 8006892:	f003 0303 	and.w	r3, r3, #3
 8006896:	3301      	adds	r3, #1
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800689c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800689e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068a6:	e002      	b.n	80068ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068a8:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80068aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3750      	adds	r7, #80	; 0x50
 80068b4:	46bd      	mov	sp, r7
 80068b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068ba:	bf00      	nop
 80068bc:	40023800 	.word	0x40023800
 80068c0:	00f42400 	.word	0x00f42400
 80068c4:	007a1200 	.word	0x007a1200

080068c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068cc:	4b03      	ldr	r3, [pc, #12]	; (80068dc <HAL_RCC_GetHCLKFreq+0x14>)
 80068ce:	681b      	ldr	r3, [r3, #0]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	200000e0 	.word	0x200000e0

080068e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068e4:	f7ff fff0 	bl	80068c8 <HAL_RCC_GetHCLKFreq>
 80068e8:	4602      	mov	r2, r0
 80068ea:	4b05      	ldr	r3, [pc, #20]	; (8006900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	0a9b      	lsrs	r3, r3, #10
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	4903      	ldr	r1, [pc, #12]	; (8006904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068f6:	5ccb      	ldrb	r3, [r1, r3]
 80068f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	40023800 	.word	0x40023800
 8006904:	080132c8 	.word	0x080132c8

08006908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800690c:	f7ff ffdc 	bl	80068c8 <HAL_RCC_GetHCLKFreq>
 8006910:	4602      	mov	r2, r0
 8006912:	4b05      	ldr	r3, [pc, #20]	; (8006928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	0b5b      	lsrs	r3, r3, #13
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	4903      	ldr	r1, [pc, #12]	; (800692c <HAL_RCC_GetPCLK2Freq+0x24>)
 800691e:	5ccb      	ldrb	r3, [r1, r3]
 8006920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006924:	4618      	mov	r0, r3
 8006926:	bd80      	pop	{r7, pc}
 8006928:	40023800 	.word	0x40023800
 800692c:	080132c8 	.word	0x080132c8

08006930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e041      	b.n	80069c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d106      	bne.n	800695c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fc ff78 	bl	800384c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3304      	adds	r3, #4
 800696c:	4619      	mov	r1, r3
 800696e:	4610      	mov	r0, r2
 8006970:	f000 f9f0 	bl	8006d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d001      	beq.n	80069e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e04e      	b.n	8006a86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0201 	orr.w	r2, r2, #1
 80069fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a23      	ldr	r2, [pc, #140]	; (8006a94 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d022      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a12:	d01d      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a1f      	ldr	r2, [pc, #124]	; (8006a98 <HAL_TIM_Base_Start_IT+0xc8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d018      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a1e      	ldr	r2, [pc, #120]	; (8006a9c <HAL_TIM_Base_Start_IT+0xcc>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d013      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a1c      	ldr	r2, [pc, #112]	; (8006aa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d00e      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a1b      	ldr	r2, [pc, #108]	; (8006aa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d009      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a19      	ldr	r2, [pc, #100]	; (8006aa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d004      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a18      	ldr	r2, [pc, #96]	; (8006aac <HAL_TIM_Base_Start_IT+0xdc>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d111      	bne.n	8006a74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f003 0307 	and.w	r3, r3, #7
 8006a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b06      	cmp	r3, #6
 8006a60:	d010      	beq.n	8006a84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f042 0201 	orr.w	r2, r2, #1
 8006a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a72:	e007      	b.n	8006a84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f042 0201 	orr.w	r2, r2, #1
 8006a82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	40010000 	.word	0x40010000
 8006a98:	40000400 	.word	0x40000400
 8006a9c:	40000800 	.word	0x40000800
 8006aa0:	40000c00 	.word	0x40000c00
 8006aa4:	40010400 	.word	0x40010400
 8006aa8:	40014000 	.word	0x40014000
 8006aac:	40001800 	.word	0x40001800

08006ab0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f022 0201 	bic.w	r2, r2, #1
 8006ac6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6a1a      	ldr	r2, [r3, #32]
 8006ace:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10f      	bne.n	8006af8 <HAL_TIM_Base_Stop_IT+0x48>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6a1a      	ldr	r2, [r3, #32]
 8006ade:	f240 4344 	movw	r3, #1092	; 0x444
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d107      	bne.n	8006af8 <HAL_TIM_Base_Stop_IT+0x48>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 0201 	bic.w	r2, r2, #1
 8006af6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d020      	beq.n	8006b72 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d01b      	beq.n	8006b72 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f06f 0202 	mvn.w	r2, #2
 8006b42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	f003 0303 	and.w	r3, r3, #3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f8dc 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 8006b5e:	e005      	b.n	8006b6c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f8ce 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f8df 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d020      	beq.n	8006bbe <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f003 0304 	and.w	r3, r3, #4
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d01b      	beq.n	8006bbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f06f 0204 	mvn.w	r2, #4
 8006b8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f8b6 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 8006baa:	e005      	b.n	8006bb8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f8a8 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f8b9 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d020      	beq.n	8006c0a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f003 0308 	and.w	r3, r3, #8
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d01b      	beq.n	8006c0a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f06f 0208 	mvn.w	r2, #8
 8006bda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2204      	movs	r2, #4
 8006be0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	f003 0303 	and.w	r3, r3, #3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f890 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 8006bf6:	e005      	b.n	8006c04 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f882 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f893 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f003 0310 	and.w	r3, r3, #16
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d020      	beq.n	8006c56 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f003 0310 	and.w	r3, r3, #16
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d01b      	beq.n	8006c56 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f06f 0210 	mvn.w	r2, #16
 8006c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2208      	movs	r2, #8
 8006c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d003      	beq.n	8006c44 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f86a 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 8006c42:	e005      	b.n	8006c50 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f85c 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f86d 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00c      	beq.n	8006c7a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d007      	beq.n	8006c7a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f06f 0201 	mvn.w	r2, #1
 8006c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f83a 	bl	8006cee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00c      	beq.n	8006c9e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d007      	beq.n	8006c9e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f98d 	bl	8006fb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00c      	beq.n	8006cc2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d007      	beq.n	8006cc2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f83e 	bl	8006d3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00c      	beq.n	8006ce6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d007      	beq.n	8006ce6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f06f 0220 	mvn.w	r2, #32
 8006cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f95f 	bl	8006fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ce6:	bf00      	nop
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006cf6:	bf00      	nop
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d1e:	bf00      	nop
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d32:	bf00      	nop
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
	...

08006d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a46      	ldr	r2, [pc, #280]	; (8006e80 <TIM_Base_SetConfig+0x12c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d013      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d72:	d00f      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a43      	ldr	r2, [pc, #268]	; (8006e84 <TIM_Base_SetConfig+0x130>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00b      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a42      	ldr	r2, [pc, #264]	; (8006e88 <TIM_Base_SetConfig+0x134>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d007      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a41      	ldr	r2, [pc, #260]	; (8006e8c <TIM_Base_SetConfig+0x138>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d003      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a40      	ldr	r2, [pc, #256]	; (8006e90 <TIM_Base_SetConfig+0x13c>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d108      	bne.n	8006da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a35      	ldr	r2, [pc, #212]	; (8006e80 <TIM_Base_SetConfig+0x12c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d02b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db4:	d027      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a32      	ldr	r2, [pc, #200]	; (8006e84 <TIM_Base_SetConfig+0x130>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d023      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a31      	ldr	r2, [pc, #196]	; (8006e88 <TIM_Base_SetConfig+0x134>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d01f      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a30      	ldr	r2, [pc, #192]	; (8006e8c <TIM_Base_SetConfig+0x138>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d01b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a2f      	ldr	r2, [pc, #188]	; (8006e90 <TIM_Base_SetConfig+0x13c>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d017      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a2e      	ldr	r2, [pc, #184]	; (8006e94 <TIM_Base_SetConfig+0x140>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a2d      	ldr	r2, [pc, #180]	; (8006e98 <TIM_Base_SetConfig+0x144>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00f      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a2c      	ldr	r2, [pc, #176]	; (8006e9c <TIM_Base_SetConfig+0x148>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a2b      	ldr	r2, [pc, #172]	; (8006ea0 <TIM_Base_SetConfig+0x14c>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d007      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a2a      	ldr	r2, [pc, #168]	; (8006ea4 <TIM_Base_SetConfig+0x150>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d003      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a29      	ldr	r2, [pc, #164]	; (8006ea8 <TIM_Base_SetConfig+0x154>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d108      	bne.n	8006e18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a10      	ldr	r2, [pc, #64]	; (8006e80 <TIM_Base_SetConfig+0x12c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d003      	beq.n	8006e4c <TIM_Base_SetConfig+0xf8>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a12      	ldr	r2, [pc, #72]	; (8006e90 <TIM_Base_SetConfig+0x13c>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d103      	bne.n	8006e54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	691a      	ldr	r2, [r3, #16]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d105      	bne.n	8006e72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	f023 0201 	bic.w	r2, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	611a      	str	r2, [r3, #16]
  }
}
 8006e72:	bf00      	nop
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	40010000 	.word	0x40010000
 8006e84:	40000400 	.word	0x40000400
 8006e88:	40000800 	.word	0x40000800
 8006e8c:	40000c00 	.word	0x40000c00
 8006e90:	40010400 	.word	0x40010400
 8006e94:	40014000 	.word	0x40014000
 8006e98:	40014400 	.word	0x40014400
 8006e9c:	40014800 	.word	0x40014800
 8006ea0:	40001800 	.word	0x40001800
 8006ea4:	40001c00 	.word	0x40001c00
 8006ea8:	40002000 	.word	0x40002000

08006eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d101      	bne.n	8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	e05a      	b.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a21      	ldr	r2, [pc, #132]	; (8006f88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d022      	beq.n	8006f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f10:	d01d      	beq.n	8006f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a1d      	ldr	r2, [pc, #116]	; (8006f8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d018      	beq.n	8006f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a1b      	ldr	r2, [pc, #108]	; (8006f90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d013      	beq.n	8006f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a1a      	ldr	r2, [pc, #104]	; (8006f94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d00e      	beq.n	8006f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a18      	ldr	r2, [pc, #96]	; (8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d009      	beq.n	8006f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a17      	ldr	r2, [pc, #92]	; (8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d004      	beq.n	8006f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a15      	ldr	r2, [pc, #84]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d10c      	bne.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	40010000 	.word	0x40010000
 8006f8c:	40000400 	.word	0x40000400
 8006f90:	40000800 	.word	0x40000800
 8006f94:	40000c00 	.word	0x40000c00
 8006f98:	40010400 	.word	0x40010400
 8006f9c:	40014000 	.word	0x40014000
 8006fa0:	40001800 	.word	0x40001800

08006fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e042      	b.n	8007064 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d106      	bne.n	8006ff8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7fc fc52 	bl	800389c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2224      	movs	r2, #36	; 0x24
 8006ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800700e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fc85 	bl	8007920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	691a      	ldr	r2, [r3, #16]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007024:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	695a      	ldr	r2, [r3, #20]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007034:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68da      	ldr	r2, [r3, #12]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007044:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2220      	movs	r2, #32
 8007050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2220      	movs	r2, #32
 8007058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b0ba      	sub	sp, #232	; 0xe8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007092:	2300      	movs	r3, #0
 8007094:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007098:	2300      	movs	r3, #0
 800709a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800709e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a2:	f003 030f 	and.w	r3, r3, #15
 80070a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80070aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10f      	bne.n	80070d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070b6:	f003 0320 	and.w	r3, r3, #32
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d009      	beq.n	80070d2 <HAL_UART_IRQHandler+0x66>
 80070be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c2:	f003 0320 	and.w	r3, r3, #32
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fb69 	bl	80077a2 <UART_Receive_IT>
      return;
 80070d0:	e25b      	b.n	800758a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 80de 	beq.w	8007298 <HAL_UART_IRQHandler+0x22c>
 80070dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d106      	bne.n	80070f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 80d1 	beq.w	8007298 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00b      	beq.n	800711a <HAL_UART_IRQHandler+0xae>
 8007102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007112:	f043 0201 	orr.w	r2, r3, #1
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800711a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711e:	f003 0304 	and.w	r3, r3, #4
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00b      	beq.n	800713e <HAL_UART_IRQHandler+0xd2>
 8007126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d005      	beq.n	800713e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007136:	f043 0202 	orr.w	r2, r3, #2
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800713e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00b      	beq.n	8007162 <HAL_UART_IRQHandler+0xf6>
 800714a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	d005      	beq.n	8007162 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715a:	f043 0204 	orr.w	r2, r3, #4
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007166:	f003 0308 	and.w	r3, r3, #8
 800716a:	2b00      	cmp	r3, #0
 800716c:	d011      	beq.n	8007192 <HAL_UART_IRQHandler+0x126>
 800716e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007172:	f003 0320 	and.w	r3, r3, #32
 8007176:	2b00      	cmp	r3, #0
 8007178:	d105      	bne.n	8007186 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800717a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d005      	beq.n	8007192 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718a:	f043 0208 	orr.w	r2, r3, #8
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 81f2 	beq.w	8007580 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800719c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d008      	beq.n	80071ba <HAL_UART_IRQHandler+0x14e>
 80071a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ac:	f003 0320 	and.w	r3, r3, #32
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d002      	beq.n	80071ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 faf4 	bl	80077a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c4:	2b40      	cmp	r3, #64	; 0x40
 80071c6:	bf0c      	ite	eq
 80071c8:	2301      	moveq	r3, #1
 80071ca:	2300      	movne	r3, #0
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d6:	f003 0308 	and.w	r3, r3, #8
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d103      	bne.n	80071e6 <HAL_UART_IRQHandler+0x17a>
 80071de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d04f      	beq.n	8007286 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f9fc 	bl	80075e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f6:	2b40      	cmp	r3, #64	; 0x40
 80071f8:	d141      	bne.n	800727e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3314      	adds	r3, #20
 8007200:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007210:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3314      	adds	r3, #20
 8007222:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007226:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800722a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007232:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800723e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1d9      	bne.n	80071fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724a:	2b00      	cmp	r3, #0
 800724c:	d013      	beq.n	8007276 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007252:	4a7e      	ldr	r2, [pc, #504]	; (800744c <HAL_UART_IRQHandler+0x3e0>)
 8007254:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725a:	4618      	mov	r0, r3
 800725c:	f7fd f86c 	bl	8004338 <HAL_DMA_Abort_IT>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d016      	beq.n	8007294 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007270:	4610      	mov	r0, r2
 8007272:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007274:	e00e      	b.n	8007294 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f99e 	bl	80075b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800727c:	e00a      	b.n	8007294 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f99a 	bl	80075b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007284:	e006      	b.n	8007294 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f996 	bl	80075b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007292:	e175      	b.n	8007580 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007294:	bf00      	nop
    return;
 8007296:	e173      	b.n	8007580 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729c:	2b01      	cmp	r3, #1
 800729e:	f040 814f 	bne.w	8007540 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a6:	f003 0310 	and.w	r3, r3, #16
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 8148 	beq.w	8007540 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80072b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b4:	f003 0310 	and.w	r3, r3, #16
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 8141 	beq.w	8007540 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072be:	2300      	movs	r3, #0
 80072c0:	60bb      	str	r3, [r7, #8]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	60bb      	str	r3, [r7, #8]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	60bb      	str	r3, [r7, #8]
 80072d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072de:	2b40      	cmp	r3, #64	; 0x40
 80072e0:	f040 80b6 	bne.w	8007450 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 8145 	beq.w	8007584 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007302:	429a      	cmp	r2, r3
 8007304:	f080 813e 	bcs.w	8007584 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800730e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800731a:	f000 8088 	beq.w	800742e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	330c      	adds	r3, #12
 8007324:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007334:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800733c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	330c      	adds	r3, #12
 8007346:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800734a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800734e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007356:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1d9      	bne.n	800731e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3314      	adds	r3, #20
 8007370:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800737a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800737c:	f023 0301 	bic.w	r3, r3, #1
 8007380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3314      	adds	r3, #20
 800738a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800738e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007392:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007394:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007396:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800739a:	e841 2300 	strex	r3, r2, [r1]
 800739e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1e1      	bne.n	800736a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3314      	adds	r3, #20
 80073ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073b0:	e853 3f00 	ldrex	r3, [r3]
 80073b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3314      	adds	r3, #20
 80073c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e3      	bne.n	80073a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2220      	movs	r2, #32
 80073e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	330c      	adds	r3, #12
 80073f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073fe:	f023 0310 	bic.w	r3, r3, #16
 8007402:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	330c      	adds	r3, #12
 800740c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007410:	65ba      	str	r2, [r7, #88]	; 0x58
 8007412:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007416:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007418:	e841 2300 	strex	r3, r2, [r1]
 800741c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800741e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e3      	bne.n	80073ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007428:	4618      	mov	r0, r3
 800742a:	f7fc ff15 	bl	8004258 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2202      	movs	r2, #2
 8007432:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800743c:	b29b      	uxth	r3, r3
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	b29b      	uxth	r3, r3
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f8c1 	bl	80075cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800744a:	e09b      	b.n	8007584 <HAL_UART_IRQHandler+0x518>
 800744c:	080076ab 	.word	0x080076ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007458:	b29b      	uxth	r3, r3
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007464:	b29b      	uxth	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	f000 808e 	beq.w	8007588 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800746c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 8089 	beq.w	8007588 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	330c      	adds	r3, #12
 800747c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007488:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800748c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	330c      	adds	r3, #12
 8007496:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800749a:	647a      	str	r2, [r7, #68]	; 0x44
 800749c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074a2:	e841 2300 	strex	r3, r2, [r1]
 80074a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1e3      	bne.n	8007476 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3314      	adds	r3, #20
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	623b      	str	r3, [r7, #32]
   return(result);
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	f023 0301 	bic.w	r3, r3, #1
 80074c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3314      	adds	r3, #20
 80074ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074d2:	633a      	str	r2, [r7, #48]	; 0x30
 80074d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074da:	e841 2300 	strex	r3, r2, [r1]
 80074de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1e3      	bne.n	80074ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2220      	movs	r2, #32
 80074ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	330c      	adds	r3, #12
 80074fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	e853 3f00 	ldrex	r3, [r3]
 8007502:	60fb      	str	r3, [r7, #12]
   return(result);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0310 	bic.w	r3, r3, #16
 800750a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	330c      	adds	r3, #12
 8007514:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007518:	61fa      	str	r2, [r7, #28]
 800751a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	69b9      	ldr	r1, [r7, #24]
 800751e:	69fa      	ldr	r2, [r7, #28]
 8007520:	e841 2300 	strex	r3, r2, [r1]
 8007524:	617b      	str	r3, [r7, #20]
   return(result);
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e3      	bne.n	80074f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2202      	movs	r2, #2
 8007530:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007532:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f847 	bl	80075cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800753e:	e023      	b.n	8007588 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007548:	2b00      	cmp	r3, #0
 800754a:	d009      	beq.n	8007560 <HAL_UART_IRQHandler+0x4f4>
 800754c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f8ba 	bl	80076d2 <UART_Transmit_IT>
    return;
 800755e:	e014      	b.n	800758a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00e      	beq.n	800758a <HAL_UART_IRQHandler+0x51e>
 800756c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007574:	2b00      	cmp	r3, #0
 8007576:	d008      	beq.n	800758a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f8fa 	bl	8007772 <UART_EndTransmit_IT>
    return;
 800757e:	e004      	b.n	800758a <HAL_UART_IRQHandler+0x51e>
    return;
 8007580:	bf00      	nop
 8007582:	e002      	b.n	800758a <HAL_UART_IRQHandler+0x51e>
      return;
 8007584:	bf00      	nop
 8007586:	e000      	b.n	800758a <HAL_UART_IRQHandler+0x51e>
      return;
 8007588:	bf00      	nop
  }
}
 800758a:	37e8      	adds	r7, #232	; 0xe8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b095      	sub	sp, #84	; 0x54
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	330c      	adds	r3, #12
 80075f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f6:	e853 3f00 	ldrex	r3, [r3]
 80075fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	330c      	adds	r3, #12
 800760a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800760c:	643a      	str	r2, [r7, #64]	; 0x40
 800760e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007612:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e5      	bne.n	80075ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3314      	adds	r3, #20
 8007626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	e853 3f00 	ldrex	r3, [r3]
 800762e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	f023 0301 	bic.w	r3, r3, #1
 8007636:	64bb      	str	r3, [r7, #72]	; 0x48
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3314      	adds	r3, #20
 800763e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007640:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007648:	e841 2300 	strex	r3, r2, [r1]
 800764c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1e5      	bne.n	8007620 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007658:	2b01      	cmp	r3, #1
 800765a:	d119      	bne.n	8007690 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	330c      	adds	r3, #12
 8007662:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	e853 3f00 	ldrex	r3, [r3]
 800766a:	60bb      	str	r3, [r7, #8]
   return(result);
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f023 0310 	bic.w	r3, r3, #16
 8007672:	647b      	str	r3, [r7, #68]	; 0x44
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	330c      	adds	r3, #12
 800767a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800767c:	61ba      	str	r2, [r7, #24]
 800767e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007680:	6979      	ldr	r1, [r7, #20]
 8007682:	69ba      	ldr	r2, [r7, #24]
 8007684:	e841 2300 	strex	r3, r2, [r1]
 8007688:	613b      	str	r3, [r7, #16]
   return(result);
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e5      	bne.n	800765c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2220      	movs	r2, #32
 8007694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800769e:	bf00      	nop
 80076a0:	3754      	adds	r7, #84	; 0x54
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f7ff ff77 	bl	80075b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ca:	bf00      	nop
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b085      	sub	sp, #20
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b21      	cmp	r3, #33	; 0x21
 80076e4:	d13e      	bne.n	8007764 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ee:	d114      	bne.n	800771a <UART_Transmit_IT+0x48>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d110      	bne.n	800771a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a1b      	ldr	r3, [r3, #32]
 80076fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800770c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	1c9a      	adds	r2, r3, #2
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	621a      	str	r2, [r3, #32]
 8007718:	e008      	b.n	800772c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	1c59      	adds	r1, r3, #1
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	6211      	str	r1, [r2, #32]
 8007724:	781a      	ldrb	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007730:	b29b      	uxth	r3, r3
 8007732:	3b01      	subs	r3, #1
 8007734:	b29b      	uxth	r3, r3
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	4619      	mov	r1, r3
 800773a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10f      	bne.n	8007760 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68da      	ldr	r2, [r3, #12]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800774e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800775e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	e000      	b.n	8007766 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007764:	2302      	movs	r3, #2
  }
}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b082      	sub	sp, #8
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68da      	ldr	r2, [r3, #12]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007788:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2220      	movs	r2, #32
 800778e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7ff fefc 	bl	8007590 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b08c      	sub	sp, #48	; 0x30
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b22      	cmp	r3, #34	; 0x22
 80077b4:	f040 80ae 	bne.w	8007914 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c0:	d117      	bne.n	80077f2 <UART_Receive_IT+0x50>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d113      	bne.n	80077f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077ca:	2300      	movs	r3, #0
 80077cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ea:	1c9a      	adds	r2, r3, #2
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	629a      	str	r2, [r3, #40]	; 0x28
 80077f0:	e026      	b.n	8007840 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80077f8:	2300      	movs	r3, #0
 80077fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007804:	d007      	beq.n	8007816 <UART_Receive_IT+0x74>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10a      	bne.n	8007824 <UART_Receive_IT+0x82>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d106      	bne.n	8007824 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	b2da      	uxtb	r2, r3
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	701a      	strb	r2, [r3, #0]
 8007822:	e008      	b.n	8007836 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	b2db      	uxtb	r3, r3
 800782c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007830:	b2da      	uxtb	r2, r3
 8007832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007834:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007844:	b29b      	uxth	r3, r3
 8007846:	3b01      	subs	r3, #1
 8007848:	b29b      	uxth	r3, r3
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	4619      	mov	r1, r3
 800784e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007850:	2b00      	cmp	r3, #0
 8007852:	d15d      	bne.n	8007910 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0220 	bic.w	r2, r2, #32
 8007862:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007872:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	695a      	ldr	r2, [r3, #20]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 0201 	bic.w	r2, r2, #1
 8007882:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2220      	movs	r2, #32
 8007888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007896:	2b01      	cmp	r3, #1
 8007898:	d135      	bne.n	8007906 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	330c      	adds	r3, #12
 80078a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	613b      	str	r3, [r7, #16]
   return(result);
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	f023 0310 	bic.w	r3, r3, #16
 80078b6:	627b      	str	r3, [r7, #36]	; 0x24
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	330c      	adds	r3, #12
 80078be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c0:	623a      	str	r2, [r7, #32]
 80078c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	69f9      	ldr	r1, [r7, #28]
 80078c6:	6a3a      	ldr	r2, [r7, #32]
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e5      	bne.n	80078a0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0310 	and.w	r3, r3, #16
 80078de:	2b10      	cmp	r3, #16
 80078e0:	d10a      	bne.n	80078f8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078e2:	2300      	movs	r3, #0
 80078e4:	60fb      	str	r3, [r7, #12]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	60fb      	str	r3, [r7, #12]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7ff fe64 	bl	80075cc <HAL_UARTEx_RxEventCallback>
 8007904:	e002      	b.n	800790c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff fe4c 	bl	80075a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	e002      	b.n	8007916 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007910:	2300      	movs	r3, #0
 8007912:	e000      	b.n	8007916 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007914:	2302      	movs	r3, #2
  }
}
 8007916:	4618      	mov	r0, r3
 8007918:	3730      	adds	r7, #48	; 0x30
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007924:	b0c0      	sub	sp, #256	; 0x100
 8007926:	af00      	add	r7, sp, #0
 8007928:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800792c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800793c:	68d9      	ldr	r1, [r3, #12]
 800793e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	ea40 0301 	orr.w	r3, r0, r1
 8007948:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800794a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	431a      	orrs	r2, r3
 8007958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	431a      	orrs	r2, r3
 8007960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	4313      	orrs	r3, r2
 8007968:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800796c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007978:	f021 010c 	bic.w	r1, r1, #12
 800797c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007986:	430b      	orrs	r3, r1
 8007988:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800798a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800799a:	6999      	ldr	r1, [r3, #24]
 800799c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	ea40 0301 	orr.w	r3, r0, r1
 80079a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	4b8f      	ldr	r3, [pc, #572]	; (8007bec <UART_SetConfig+0x2cc>)
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d005      	beq.n	80079c0 <UART_SetConfig+0xa0>
 80079b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	4b8d      	ldr	r3, [pc, #564]	; (8007bf0 <UART_SetConfig+0x2d0>)
 80079bc:	429a      	cmp	r2, r3
 80079be:	d104      	bne.n	80079ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079c0:	f7fe ffa2 	bl	8006908 <HAL_RCC_GetPCLK2Freq>
 80079c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80079c8:	e003      	b.n	80079d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079ca:	f7fe ff89 	bl	80068e0 <HAL_RCC_GetPCLK1Freq>
 80079ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d6:	69db      	ldr	r3, [r3, #28]
 80079d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079dc:	f040 810c 	bne.w	8007bf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079e4:	2200      	movs	r2, #0
 80079e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80079ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80079f2:	4622      	mov	r2, r4
 80079f4:	462b      	mov	r3, r5
 80079f6:	1891      	adds	r1, r2, r2
 80079f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80079fa:	415b      	adcs	r3, r3
 80079fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a02:	4621      	mov	r1, r4
 8007a04:	eb12 0801 	adds.w	r8, r2, r1
 8007a08:	4629      	mov	r1, r5
 8007a0a:	eb43 0901 	adc.w	r9, r3, r1
 8007a0e:	f04f 0200 	mov.w	r2, #0
 8007a12:	f04f 0300 	mov.w	r3, #0
 8007a16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a22:	4690      	mov	r8, r2
 8007a24:	4699      	mov	r9, r3
 8007a26:	4623      	mov	r3, r4
 8007a28:	eb18 0303 	adds.w	r3, r8, r3
 8007a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a30:	462b      	mov	r3, r5
 8007a32:	eb49 0303 	adc.w	r3, r9, r3
 8007a36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007a4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007a4e:	460b      	mov	r3, r1
 8007a50:	18db      	adds	r3, r3, r3
 8007a52:	653b      	str	r3, [r7, #80]	; 0x50
 8007a54:	4613      	mov	r3, r2
 8007a56:	eb42 0303 	adc.w	r3, r2, r3
 8007a5a:	657b      	str	r3, [r7, #84]	; 0x54
 8007a5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007a64:	f7f9 f900 	bl	8000c68 <__aeabi_uldivmod>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4b61      	ldr	r3, [pc, #388]	; (8007bf4 <UART_SetConfig+0x2d4>)
 8007a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a72:	095b      	lsrs	r3, r3, #5
 8007a74:	011c      	lsls	r4, r3, #4
 8007a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007a84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007a88:	4642      	mov	r2, r8
 8007a8a:	464b      	mov	r3, r9
 8007a8c:	1891      	adds	r1, r2, r2
 8007a8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007a90:	415b      	adcs	r3, r3
 8007a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a98:	4641      	mov	r1, r8
 8007a9a:	eb12 0a01 	adds.w	sl, r2, r1
 8007a9e:	4649      	mov	r1, r9
 8007aa0:	eb43 0b01 	adc.w	fp, r3, r1
 8007aa4:	f04f 0200 	mov.w	r2, #0
 8007aa8:	f04f 0300 	mov.w	r3, #0
 8007aac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ab0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ab8:	4692      	mov	sl, r2
 8007aba:	469b      	mov	fp, r3
 8007abc:	4643      	mov	r3, r8
 8007abe:	eb1a 0303 	adds.w	r3, sl, r3
 8007ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ac6:	464b      	mov	r3, r9
 8007ac8:	eb4b 0303 	adc.w	r3, fp, r3
 8007acc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007adc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ae0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	18db      	adds	r3, r3, r3
 8007ae8:	643b      	str	r3, [r7, #64]	; 0x40
 8007aea:	4613      	mov	r3, r2
 8007aec:	eb42 0303 	adc.w	r3, r2, r3
 8007af0:	647b      	str	r3, [r7, #68]	; 0x44
 8007af2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007af6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007afa:	f7f9 f8b5 	bl	8000c68 <__aeabi_uldivmod>
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
 8007b02:	4611      	mov	r1, r2
 8007b04:	4b3b      	ldr	r3, [pc, #236]	; (8007bf4 <UART_SetConfig+0x2d4>)
 8007b06:	fba3 2301 	umull	r2, r3, r3, r1
 8007b0a:	095b      	lsrs	r3, r3, #5
 8007b0c:	2264      	movs	r2, #100	; 0x64
 8007b0e:	fb02 f303 	mul.w	r3, r2, r3
 8007b12:	1acb      	subs	r3, r1, r3
 8007b14:	00db      	lsls	r3, r3, #3
 8007b16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007b1a:	4b36      	ldr	r3, [pc, #216]	; (8007bf4 <UART_SetConfig+0x2d4>)
 8007b1c:	fba3 2302 	umull	r2, r3, r3, r2
 8007b20:	095b      	lsrs	r3, r3, #5
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b28:	441c      	add	r4, r3
 8007b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007b38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007b3c:	4642      	mov	r2, r8
 8007b3e:	464b      	mov	r3, r9
 8007b40:	1891      	adds	r1, r2, r2
 8007b42:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b44:	415b      	adcs	r3, r3
 8007b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b4c:	4641      	mov	r1, r8
 8007b4e:	1851      	adds	r1, r2, r1
 8007b50:	6339      	str	r1, [r7, #48]	; 0x30
 8007b52:	4649      	mov	r1, r9
 8007b54:	414b      	adcs	r3, r1
 8007b56:	637b      	str	r3, [r7, #52]	; 0x34
 8007b58:	f04f 0200 	mov.w	r2, #0
 8007b5c:	f04f 0300 	mov.w	r3, #0
 8007b60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007b64:	4659      	mov	r1, fp
 8007b66:	00cb      	lsls	r3, r1, #3
 8007b68:	4651      	mov	r1, sl
 8007b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b6e:	4651      	mov	r1, sl
 8007b70:	00ca      	lsls	r2, r1, #3
 8007b72:	4610      	mov	r0, r2
 8007b74:	4619      	mov	r1, r3
 8007b76:	4603      	mov	r3, r0
 8007b78:	4642      	mov	r2, r8
 8007b7a:	189b      	adds	r3, r3, r2
 8007b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b80:	464b      	mov	r3, r9
 8007b82:	460a      	mov	r2, r1
 8007b84:	eb42 0303 	adc.w	r3, r2, r3
 8007b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007b9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	18db      	adds	r3, r3, r3
 8007ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	eb42 0303 	adc.w	r3, r2, r3
 8007bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007bb6:	f7f9 f857 	bl	8000c68 <__aeabi_uldivmod>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	4b0d      	ldr	r3, [pc, #52]	; (8007bf4 <UART_SetConfig+0x2d4>)
 8007bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8007bc4:	095b      	lsrs	r3, r3, #5
 8007bc6:	2164      	movs	r1, #100	; 0x64
 8007bc8:	fb01 f303 	mul.w	r3, r1, r3
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	3332      	adds	r3, #50	; 0x32
 8007bd2:	4a08      	ldr	r2, [pc, #32]	; (8007bf4 <UART_SetConfig+0x2d4>)
 8007bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd8:	095b      	lsrs	r3, r3, #5
 8007bda:	f003 0207 	and.w	r2, r3, #7
 8007bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4422      	add	r2, r4
 8007be6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007be8:	e106      	b.n	8007df8 <UART_SetConfig+0x4d8>
 8007bea:	bf00      	nop
 8007bec:	40011000 	.word	0x40011000
 8007bf0:	40011400 	.word	0x40011400
 8007bf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007c06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007c0a:	4642      	mov	r2, r8
 8007c0c:	464b      	mov	r3, r9
 8007c0e:	1891      	adds	r1, r2, r2
 8007c10:	6239      	str	r1, [r7, #32]
 8007c12:	415b      	adcs	r3, r3
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24
 8007c16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c1a:	4641      	mov	r1, r8
 8007c1c:	1854      	adds	r4, r2, r1
 8007c1e:	4649      	mov	r1, r9
 8007c20:	eb43 0501 	adc.w	r5, r3, r1
 8007c24:	f04f 0200 	mov.w	r2, #0
 8007c28:	f04f 0300 	mov.w	r3, #0
 8007c2c:	00eb      	lsls	r3, r5, #3
 8007c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c32:	00e2      	lsls	r2, r4, #3
 8007c34:	4614      	mov	r4, r2
 8007c36:	461d      	mov	r5, r3
 8007c38:	4643      	mov	r3, r8
 8007c3a:	18e3      	adds	r3, r4, r3
 8007c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c40:	464b      	mov	r3, r9
 8007c42:	eb45 0303 	adc.w	r3, r5, r3
 8007c46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c5a:	f04f 0200 	mov.w	r2, #0
 8007c5e:	f04f 0300 	mov.w	r3, #0
 8007c62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007c66:	4629      	mov	r1, r5
 8007c68:	008b      	lsls	r3, r1, #2
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c70:	4621      	mov	r1, r4
 8007c72:	008a      	lsls	r2, r1, #2
 8007c74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007c78:	f7f8 fff6 	bl	8000c68 <__aeabi_uldivmod>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	4b60      	ldr	r3, [pc, #384]	; (8007e04 <UART_SetConfig+0x4e4>)
 8007c82:	fba3 2302 	umull	r2, r3, r3, r2
 8007c86:	095b      	lsrs	r3, r3, #5
 8007c88:	011c      	lsls	r4, r3, #4
 8007c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007c98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007c9c:	4642      	mov	r2, r8
 8007c9e:	464b      	mov	r3, r9
 8007ca0:	1891      	adds	r1, r2, r2
 8007ca2:	61b9      	str	r1, [r7, #24]
 8007ca4:	415b      	adcs	r3, r3
 8007ca6:	61fb      	str	r3, [r7, #28]
 8007ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cac:	4641      	mov	r1, r8
 8007cae:	1851      	adds	r1, r2, r1
 8007cb0:	6139      	str	r1, [r7, #16]
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	414b      	adcs	r3, r1
 8007cb6:	617b      	str	r3, [r7, #20]
 8007cb8:	f04f 0200 	mov.w	r2, #0
 8007cbc:	f04f 0300 	mov.w	r3, #0
 8007cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007cc4:	4659      	mov	r1, fp
 8007cc6:	00cb      	lsls	r3, r1, #3
 8007cc8:	4651      	mov	r1, sl
 8007cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cce:	4651      	mov	r1, sl
 8007cd0:	00ca      	lsls	r2, r1, #3
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	4642      	mov	r2, r8
 8007cda:	189b      	adds	r3, r3, r2
 8007cdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ce0:	464b      	mov	r3, r9
 8007ce2:	460a      	mov	r2, r1
 8007ce4:	eb42 0303 	adc.w	r3, r2, r3
 8007ce8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007cf6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007cf8:	f04f 0200 	mov.w	r2, #0
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007d04:	4649      	mov	r1, r9
 8007d06:	008b      	lsls	r3, r1, #2
 8007d08:	4641      	mov	r1, r8
 8007d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d0e:	4641      	mov	r1, r8
 8007d10:	008a      	lsls	r2, r1, #2
 8007d12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007d16:	f7f8 ffa7 	bl	8000c68 <__aeabi_uldivmod>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4611      	mov	r1, r2
 8007d20:	4b38      	ldr	r3, [pc, #224]	; (8007e04 <UART_SetConfig+0x4e4>)
 8007d22:	fba3 2301 	umull	r2, r3, r3, r1
 8007d26:	095b      	lsrs	r3, r3, #5
 8007d28:	2264      	movs	r2, #100	; 0x64
 8007d2a:	fb02 f303 	mul.w	r3, r2, r3
 8007d2e:	1acb      	subs	r3, r1, r3
 8007d30:	011b      	lsls	r3, r3, #4
 8007d32:	3332      	adds	r3, #50	; 0x32
 8007d34:	4a33      	ldr	r2, [pc, #204]	; (8007e04 <UART_SetConfig+0x4e4>)
 8007d36:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3a:	095b      	lsrs	r3, r3, #5
 8007d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d40:	441c      	add	r4, r3
 8007d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d46:	2200      	movs	r2, #0
 8007d48:	673b      	str	r3, [r7, #112]	; 0x70
 8007d4a:	677a      	str	r2, [r7, #116]	; 0x74
 8007d4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007d50:	4642      	mov	r2, r8
 8007d52:	464b      	mov	r3, r9
 8007d54:	1891      	adds	r1, r2, r2
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	415b      	adcs	r3, r3
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d60:	4641      	mov	r1, r8
 8007d62:	1851      	adds	r1, r2, r1
 8007d64:	6039      	str	r1, [r7, #0]
 8007d66:	4649      	mov	r1, r9
 8007d68:	414b      	adcs	r3, r1
 8007d6a:	607b      	str	r3, [r7, #4]
 8007d6c:	f04f 0200 	mov.w	r2, #0
 8007d70:	f04f 0300 	mov.w	r3, #0
 8007d74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d78:	4659      	mov	r1, fp
 8007d7a:	00cb      	lsls	r3, r1, #3
 8007d7c:	4651      	mov	r1, sl
 8007d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d82:	4651      	mov	r1, sl
 8007d84:	00ca      	lsls	r2, r1, #3
 8007d86:	4610      	mov	r0, r2
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	4642      	mov	r2, r8
 8007d8e:	189b      	adds	r3, r3, r2
 8007d90:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d92:	464b      	mov	r3, r9
 8007d94:	460a      	mov	r2, r1
 8007d96:	eb42 0303 	adc.w	r3, r2, r3
 8007d9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	663b      	str	r3, [r7, #96]	; 0x60
 8007da6:	667a      	str	r2, [r7, #100]	; 0x64
 8007da8:	f04f 0200 	mov.w	r2, #0
 8007dac:	f04f 0300 	mov.w	r3, #0
 8007db0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007db4:	4649      	mov	r1, r9
 8007db6:	008b      	lsls	r3, r1, #2
 8007db8:	4641      	mov	r1, r8
 8007dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dbe:	4641      	mov	r1, r8
 8007dc0:	008a      	lsls	r2, r1, #2
 8007dc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007dc6:	f7f8 ff4f 	bl	8000c68 <__aeabi_uldivmod>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4b0d      	ldr	r3, [pc, #52]	; (8007e04 <UART_SetConfig+0x4e4>)
 8007dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8007dd4:	095b      	lsrs	r3, r3, #5
 8007dd6:	2164      	movs	r1, #100	; 0x64
 8007dd8:	fb01 f303 	mul.w	r3, r1, r3
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	011b      	lsls	r3, r3, #4
 8007de0:	3332      	adds	r3, #50	; 0x32
 8007de2:	4a08      	ldr	r2, [pc, #32]	; (8007e04 <UART_SetConfig+0x4e4>)
 8007de4:	fba2 2303 	umull	r2, r3, r2, r3
 8007de8:	095b      	lsrs	r3, r3, #5
 8007dea:	f003 020f 	and.w	r2, r3, #15
 8007dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4422      	add	r2, r4
 8007df6:	609a      	str	r2, [r3, #8]
}
 8007df8:	bf00      	nop
 8007dfa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e04:	51eb851f 	.word	0x51eb851f

08007e08 <LL_GPIO_SetPinMode>:
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b08b      	sub	sp, #44	; 0x2c
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	fa93 f3a3 	rbit	r3, r3
 8007e22:	613b      	str	r3, [r7, #16]
  return result;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8007e2e:	2320      	movs	r3, #32
 8007e30:	e003      	b.n	8007e3a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	fab3 f383 	clz	r3, r3
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	005b      	lsls	r3, r3, #1
 8007e3c:	2103      	movs	r1, #3
 8007e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e42:	43db      	mvns	r3, r3
 8007e44:	401a      	ands	r2, r3
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	fa93 f3a3 	rbit	r3, r3
 8007e50:	61fb      	str	r3, [r7, #28]
  return result;
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007e5c:	2320      	movs	r3, #32
 8007e5e:	e003      	b.n	8007e68 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	fab3 f383 	clz	r3, r3
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e70:	431a      	orrs	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	601a      	str	r2, [r3, #0]
}
 8007e76:	bf00      	nop
 8007e78:	372c      	adds	r7, #44	; 0x2c
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <LL_GPIO_SetPinOutputType>:
{
 8007e82:	b480      	push	{r7}
 8007e84:	b085      	sub	sp, #20
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	43db      	mvns	r3, r3
 8007e96:	401a      	ands	r2, r3
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	6879      	ldr	r1, [r7, #4]
 8007e9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	605a      	str	r2, [r3, #4]
}
 8007ea6:	bf00      	nop
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <LL_GPIO_SetPinSpeed>:
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b08b      	sub	sp, #44	; 0x2c
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	689a      	ldr	r2, [r3, #8]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	fa93 f3a3 	rbit	r3, r3
 8007ecc:	613b      	str	r3, [r7, #16]
  return result;
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d101      	bne.n	8007edc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007ed8:	2320      	movs	r3, #32
 8007eda:	e003      	b.n	8007ee4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	fab3 f383 	clz	r3, r3
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	005b      	lsls	r3, r3, #1
 8007ee6:	2103      	movs	r1, #3
 8007ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8007eec:	43db      	mvns	r3, r3
 8007eee:	401a      	ands	r2, r3
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	fa93 f3a3 	rbit	r3, r3
 8007efa:	61fb      	str	r3, [r7, #28]
  return result;
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007f06:	2320      	movs	r3, #32
 8007f08:	e003      	b.n	8007f12 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	fab3 f383 	clz	r3, r3
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	fa01 f303 	lsl.w	r3, r1, r3
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	609a      	str	r2, [r3, #8]
}
 8007f20:	bf00      	nop
 8007f22:	372c      	adds	r7, #44	; 0x2c
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <LL_GPIO_SetPinPull>:
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b08b      	sub	sp, #44	; 0x2c
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	68da      	ldr	r2, [r3, #12]
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	fa93 f3a3 	rbit	r3, r3
 8007f46:	613b      	str	r3, [r7, #16]
  return result;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8007f52:	2320      	movs	r3, #32
 8007f54:	e003      	b.n	8007f5e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	fab3 f383 	clz	r3, r3
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	005b      	lsls	r3, r3, #1
 8007f60:	2103      	movs	r1, #3
 8007f62:	fa01 f303 	lsl.w	r3, r1, r3
 8007f66:	43db      	mvns	r3, r3
 8007f68:	401a      	ands	r2, r3
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f6e:	6a3b      	ldr	r3, [r7, #32]
 8007f70:	fa93 f3a3 	rbit	r3, r3
 8007f74:	61fb      	str	r3, [r7, #28]
  return result;
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d101      	bne.n	8007f84 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007f80:	2320      	movs	r3, #32
 8007f82:	e003      	b.n	8007f8c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	fab3 f383 	clz	r3, r3
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	005b      	lsls	r3, r3, #1
 8007f8e:	6879      	ldr	r1, [r7, #4]
 8007f90:	fa01 f303 	lsl.w	r3, r1, r3
 8007f94:	431a      	orrs	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	60da      	str	r2, [r3, #12]
}
 8007f9a:	bf00      	nop
 8007f9c:	372c      	adds	r7, #44	; 0x2c
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <LL_GPIO_SetAFPin_0_7>:
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b08b      	sub	sp, #44	; 0x2c
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	60f8      	str	r0, [r7, #12]
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6a1a      	ldr	r2, [r3, #32]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	fa93 f3a3 	rbit	r3, r3
 8007fc0:	613b      	str	r3, [r7, #16]
  return result;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007fcc:	2320      	movs	r3, #32
 8007fce:	e003      	b.n	8007fd8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	fab3 f383 	clz	r3, r3
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	210f      	movs	r1, #15
 8007fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe0:	43db      	mvns	r3, r3
 8007fe2:	401a      	ands	r2, r3
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	fa93 f3a3 	rbit	r3, r3
 8007fee:	61fb      	str	r3, [r7, #28]
  return result;
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007ffa:	2320      	movs	r3, #32
 8007ffc:	e003      	b.n	8008006 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	fab3 f383 	clz	r3, r3
 8008004:	b2db      	uxtb	r3, r3
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	6879      	ldr	r1, [r7, #4]
 800800a:	fa01 f303 	lsl.w	r3, r1, r3
 800800e:	431a      	orrs	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	621a      	str	r2, [r3, #32]
}
 8008014:	bf00      	nop
 8008016:	372c      	adds	r7, #44	; 0x2c
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <LL_GPIO_SetAFPin_8_15>:
{
 8008020:	b480      	push	{r7}
 8008022:	b08b      	sub	sp, #44	; 0x2c
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	0a1b      	lsrs	r3, r3, #8
 8008034:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	fa93 f3a3 	rbit	r3, r3
 800803c:	613b      	str	r3, [r7, #16]
  return result;
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008048:	2320      	movs	r3, #32
 800804a:	e003      	b.n	8008054 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	fab3 f383 	clz	r3, r3
 8008052:	b2db      	uxtb	r3, r3
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	210f      	movs	r1, #15
 8008058:	fa01 f303 	lsl.w	r3, r1, r3
 800805c:	43db      	mvns	r3, r3
 800805e:	401a      	ands	r2, r3
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	0a1b      	lsrs	r3, r3, #8
 8008064:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	fa93 f3a3 	rbit	r3, r3
 800806c:	61fb      	str	r3, [r7, #28]
  return result;
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008078:	2320      	movs	r3, #32
 800807a:	e003      	b.n	8008084 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	fab3 f383 	clz	r3, r3
 8008082:	b2db      	uxtb	r3, r3
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	6879      	ldr	r1, [r7, #4]
 8008088:	fa01 f303 	lsl.w	r3, r1, r3
 800808c:	431a      	orrs	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008092:	bf00      	nop
 8008094:	372c      	adds	r7, #44	; 0x2c
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b08a      	sub	sp, #40	; 0x28
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80080a8:	2300      	movs	r3, #0
 80080aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 80080ac:	2300      	movs	r3, #0
 80080ae:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	fa93 f3a3 	rbit	r3, r3
 80080bc:	617b      	str	r3, [r7, #20]
  return result;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <LL_GPIO_Init+0x2e>
    return 32U;
 80080c8:	2320      	movs	r3, #32
 80080ca:	e003      	b.n	80080d4 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	fab3 f383 	clz	r3, r3
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80080d6:	e057      	b.n	8008188 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	2101      	movs	r1, #1
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	fa01 f303 	lsl.w	r3, r1, r3
 80080e4:	4013      	ands	r3, r2
 80080e6:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 80080e8:	6a3b      	ldr	r3, [r7, #32]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d049      	beq.n	8008182 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d003      	beq.n	80080fe <LL_GPIO_Init+0x60>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d10d      	bne.n	800811a <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	461a      	mov	r2, r3
 8008104:	6a39      	ldr	r1, [r7, #32]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7ff fed3 	bl	8007eb2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	461a      	mov	r2, r3
 8008112:	6a39      	ldr	r1, [r7, #32]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7ff feb4 	bl	8007e82 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	461a      	mov	r2, r3
 8008120:	6a39      	ldr	r1, [r7, #32]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7ff ff02 	bl	8007f2c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	2b02      	cmp	r3, #2
 800812e:	d121      	bne.n	8008174 <LL_GPIO_Init+0xd6>
 8008130:	6a3b      	ldr	r3, [r7, #32]
 8008132:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	fa93 f3a3 	rbit	r3, r3
 800813a:	60bb      	str	r3, [r7, #8]
  return result;
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <LL_GPIO_Init+0xac>
    return 32U;
 8008146:	2320      	movs	r3, #32
 8008148:	e003      	b.n	8008152 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	fab3 f383 	clz	r3, r3
 8008150:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8008152:	2b07      	cmp	r3, #7
 8008154:	d807      	bhi.n	8008166 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	461a      	mov	r2, r3
 800815c:	6a39      	ldr	r1, [r7, #32]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7ff ff21 	bl	8007fa6 <LL_GPIO_SetAFPin_0_7>
 8008164:	e006      	b.n	8008174 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	461a      	mov	r2, r3
 800816c:	6a39      	ldr	r1, [r7, #32]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7ff ff56 	bl	8008020 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	461a      	mov	r2, r3
 800817a:	6a39      	ldr	r1, [r7, #32]
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f7ff fe43 	bl	8007e08 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	3301      	adds	r3, #1
 8008186:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818e:	fa22 f303 	lsr.w	r3, r2, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1a0      	bne.n	80080d8 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3728      	adds	r7, #40	; 0x28
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <LL_SPI_IsEnabled>:
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b0:	2b40      	cmp	r3, #64	; 0x40
 80081b2:	d101      	bne.n	80081b8 <LL_SPI_IsEnabled+0x18>
 80081b4:	2301      	movs	r3, #1
 80081b6:	e000      	b.n	80081ba <LL_SPI_IsEnabled+0x1a>
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <LL_SPI_SetCRCPolynomial>:
{
 80081c6:	b480      	push	{r7}
 80081c8:	b083      	sub	sp, #12
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	461a      	mov	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	611a      	str	r2, [r3, #16]
}
 80081da:	bf00      	nop
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b084      	sub	sp, #16
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7ff ffd3 	bl	80081a0 <LL_SPI_IsEnabled>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d139      	bne.n	8008274 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008208:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800820c:	683a      	ldr	r2, [r7, #0]
 800820e:	6811      	ldr	r1, [r2, #0]
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	6852      	ldr	r2, [r2, #4]
 8008214:	4311      	orrs	r1, r2
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	6892      	ldr	r2, [r2, #8]
 800821a:	4311      	orrs	r1, r2
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	68d2      	ldr	r2, [r2, #12]
 8008220:	4311      	orrs	r1, r2
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	6912      	ldr	r2, [r2, #16]
 8008226:	4311      	orrs	r1, r2
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	6952      	ldr	r2, [r2, #20]
 800822c:	4311      	orrs	r1, r2
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	6992      	ldr	r2, [r2, #24]
 8008232:	4311      	orrs	r1, r2
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	69d2      	ldr	r2, [r2, #28]
 8008238:	4311      	orrs	r1, r2
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	6a12      	ldr	r2, [r2, #32]
 800823e:	430a      	orrs	r2, r1
 8008240:	431a      	orrs	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	f023 0204 	bic.w	r2, r3, #4
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	0c1b      	lsrs	r3, r3, #16
 8008254:	431a      	orrs	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008262:	d105      	bne.n	8008270 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	4619      	mov	r1, r3
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7ff ffab 	bl	80081c6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8008270:	2300      	movs	r3, #0
 8008272:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	69db      	ldr	r3, [r3, #28]
 8008278:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	61da      	str	r2, [r3, #28]
  return status;
 8008280:	7bfb      	ldrb	r3, [r7, #15]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800828a:	b084      	sub	sp, #16
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	f107 001c 	add.w	r0, r7, #28
 8008298:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800829c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d123      	bne.n	80082ec <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80082b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d105      	bne.n	80082e0 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f001 fae3 	bl	80098ac <USB_CoreReset>
 80082e6:	4603      	mov	r3, r0
 80082e8:	73fb      	strb	r3, [r7, #15]
 80082ea:	e01b      	b.n	8008324 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f001 fad7 	bl	80098ac <USB_CoreReset>
 80082fe:	4603      	mov	r3, r0
 8008300:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008302:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008306:	2b00      	cmp	r3, #0
 8008308:	d106      	bne.n	8008318 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	639a      	str	r2, [r3, #56]	; 0x38
 8008316:	e005      	b.n	8008324 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008324:	7fbb      	ldrb	r3, [r7, #30]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d10b      	bne.n	8008342 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f043 0206 	orr.w	r2, r3, #6
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f043 0220 	orr.w	r2, r3, #32
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008342:	7bfb      	ldrb	r3, [r7, #15]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800834e:	b004      	add	sp, #16
 8008350:	4770      	bx	lr
	...

08008354 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	4613      	mov	r3, r2
 8008360:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008362:	79fb      	ldrb	r3, [r7, #7]
 8008364:	2b02      	cmp	r3, #2
 8008366:	d165      	bne.n	8008434 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	4a41      	ldr	r2, [pc, #260]	; (8008470 <USB_SetTurnaroundTime+0x11c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d906      	bls.n	800837e <USB_SetTurnaroundTime+0x2a>
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	4a40      	ldr	r2, [pc, #256]	; (8008474 <USB_SetTurnaroundTime+0x120>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d202      	bcs.n	800837e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008378:	230f      	movs	r3, #15
 800837a:	617b      	str	r3, [r7, #20]
 800837c:	e062      	b.n	8008444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	4a3c      	ldr	r2, [pc, #240]	; (8008474 <USB_SetTurnaroundTime+0x120>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d306      	bcc.n	8008394 <USB_SetTurnaroundTime+0x40>
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	4a3b      	ldr	r2, [pc, #236]	; (8008478 <USB_SetTurnaroundTime+0x124>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d202      	bcs.n	8008394 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800838e:	230e      	movs	r3, #14
 8008390:	617b      	str	r3, [r7, #20]
 8008392:	e057      	b.n	8008444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	4a38      	ldr	r2, [pc, #224]	; (8008478 <USB_SetTurnaroundTime+0x124>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d306      	bcc.n	80083aa <USB_SetTurnaroundTime+0x56>
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	4a37      	ldr	r2, [pc, #220]	; (800847c <USB_SetTurnaroundTime+0x128>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d202      	bcs.n	80083aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80083a4:	230d      	movs	r3, #13
 80083a6:	617b      	str	r3, [r7, #20]
 80083a8:	e04c      	b.n	8008444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	4a33      	ldr	r2, [pc, #204]	; (800847c <USB_SetTurnaroundTime+0x128>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d306      	bcc.n	80083c0 <USB_SetTurnaroundTime+0x6c>
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	4a32      	ldr	r2, [pc, #200]	; (8008480 <USB_SetTurnaroundTime+0x12c>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d802      	bhi.n	80083c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80083ba:	230c      	movs	r3, #12
 80083bc:	617b      	str	r3, [r7, #20]
 80083be:	e041      	b.n	8008444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	4a2f      	ldr	r2, [pc, #188]	; (8008480 <USB_SetTurnaroundTime+0x12c>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d906      	bls.n	80083d6 <USB_SetTurnaroundTime+0x82>
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	4a2e      	ldr	r2, [pc, #184]	; (8008484 <USB_SetTurnaroundTime+0x130>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d802      	bhi.n	80083d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80083d0:	230b      	movs	r3, #11
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	e036      	b.n	8008444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	4a2a      	ldr	r2, [pc, #168]	; (8008484 <USB_SetTurnaroundTime+0x130>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d906      	bls.n	80083ec <USB_SetTurnaroundTime+0x98>
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	4a29      	ldr	r2, [pc, #164]	; (8008488 <USB_SetTurnaroundTime+0x134>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d802      	bhi.n	80083ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80083e6:	230a      	movs	r3, #10
 80083e8:	617b      	str	r3, [r7, #20]
 80083ea:	e02b      	b.n	8008444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	4a26      	ldr	r2, [pc, #152]	; (8008488 <USB_SetTurnaroundTime+0x134>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d906      	bls.n	8008402 <USB_SetTurnaroundTime+0xae>
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	4a25      	ldr	r2, [pc, #148]	; (800848c <USB_SetTurnaroundTime+0x138>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d202      	bcs.n	8008402 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80083fc:	2309      	movs	r3, #9
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	e020      	b.n	8008444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	4a21      	ldr	r2, [pc, #132]	; (800848c <USB_SetTurnaroundTime+0x138>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d306      	bcc.n	8008418 <USB_SetTurnaroundTime+0xc4>
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	4a20      	ldr	r2, [pc, #128]	; (8008490 <USB_SetTurnaroundTime+0x13c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d802      	bhi.n	8008418 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008412:	2308      	movs	r3, #8
 8008414:	617b      	str	r3, [r7, #20]
 8008416:	e015      	b.n	8008444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	4a1d      	ldr	r2, [pc, #116]	; (8008490 <USB_SetTurnaroundTime+0x13c>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d906      	bls.n	800842e <USB_SetTurnaroundTime+0xda>
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	4a1c      	ldr	r2, [pc, #112]	; (8008494 <USB_SetTurnaroundTime+0x140>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d202      	bcs.n	800842e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008428:	2307      	movs	r3, #7
 800842a:	617b      	str	r3, [r7, #20]
 800842c:	e00a      	b.n	8008444 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800842e:	2306      	movs	r3, #6
 8008430:	617b      	str	r3, [r7, #20]
 8008432:	e007      	b.n	8008444 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008434:	79fb      	ldrb	r3, [r7, #7]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d102      	bne.n	8008440 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800843a:	2309      	movs	r3, #9
 800843c:	617b      	str	r3, [r7, #20]
 800843e:	e001      	b.n	8008444 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008440:	2309      	movs	r3, #9
 8008442:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	68da      	ldr	r2, [r3, #12]
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	029b      	lsls	r3, r3, #10
 8008458:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800845c:	431a      	orrs	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	371c      	adds	r7, #28
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	00d8acbf 	.word	0x00d8acbf
 8008474:	00e4e1c0 	.word	0x00e4e1c0
 8008478:	00f42400 	.word	0x00f42400
 800847c:	01067380 	.word	0x01067380
 8008480:	011a499f 	.word	0x011a499f
 8008484:	01312cff 	.word	0x01312cff
 8008488:	014ca43f 	.word	0x014ca43f
 800848c:	016e3600 	.word	0x016e3600
 8008490:	01a6ab1f 	.word	0x01a6ab1f
 8008494:	01e84800 	.word	0x01e84800

08008498 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	f043 0201 	orr.w	r2, r3, #1
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b083      	sub	sp, #12
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f023 0201 	bic.w	r2, r3, #1
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	460b      	mov	r3, r1
 80084e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80084e8:	2300      	movs	r3, #0
 80084ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80084f8:	78fb      	ldrb	r3, [r7, #3]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d115      	bne.n	800852a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800850a:	200a      	movs	r0, #10
 800850c:	f7fb fcc0 	bl	8003e90 <HAL_Delay>
      ms += 10U;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	330a      	adds	r3, #10
 8008514:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f001 f939 	bl	800978e <USB_GetMode>
 800851c:	4603      	mov	r3, r0
 800851e:	2b01      	cmp	r3, #1
 8008520:	d01e      	beq.n	8008560 <USB_SetCurrentMode+0x84>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2bc7      	cmp	r3, #199	; 0xc7
 8008526:	d9f0      	bls.n	800850a <USB_SetCurrentMode+0x2e>
 8008528:	e01a      	b.n	8008560 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800852a:	78fb      	ldrb	r3, [r7, #3]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d115      	bne.n	800855c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800853c:	200a      	movs	r0, #10
 800853e:	f7fb fca7 	bl	8003e90 <HAL_Delay>
      ms += 10U;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	330a      	adds	r3, #10
 8008546:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 f920 	bl	800978e <USB_GetMode>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d005      	beq.n	8008560 <USB_SetCurrentMode+0x84>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2bc7      	cmp	r3, #199	; 0xc7
 8008558:	d9f0      	bls.n	800853c <USB_SetCurrentMode+0x60>
 800855a:	e001      	b.n	8008560 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e005      	b.n	800856c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2bc8      	cmp	r3, #200	; 0xc8
 8008564:	d101      	bne.n	800856a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e000      	b.n	800856c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008574:	b084      	sub	sp, #16
 8008576:	b580      	push	{r7, lr}
 8008578:	b086      	sub	sp, #24
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800858e:	2300      	movs	r3, #0
 8008590:	613b      	str	r3, [r7, #16]
 8008592:	e009      	b.n	80085a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	3340      	adds	r3, #64	; 0x40
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	2200      	movs	r2, #0
 80085a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	3301      	adds	r3, #1
 80085a6:	613b      	str	r3, [r7, #16]
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	2b0e      	cmp	r3, #14
 80085ac:	d9f2      	bls.n	8008594 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80085ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d11c      	bne.n	80085f0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085c4:	f043 0302 	orr.w	r3, r3, #2
 80085c8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085da:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	639a      	str	r2, [r3, #56]	; 0x38
 80085ee:	e00b      	b.n	8008608 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008600:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800860e:	461a      	mov	r2, r3
 8008610:	2300      	movs	r3, #0
 8008612:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008614:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008618:	2b01      	cmp	r3, #1
 800861a:	d10d      	bne.n	8008638 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800861c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008620:	2b00      	cmp	r3, #0
 8008622:	d104      	bne.n	800862e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008624:	2100      	movs	r1, #0
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f968 	bl	80088fc <USB_SetDevSpeed>
 800862c:	e008      	b.n	8008640 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800862e:	2101      	movs	r1, #1
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f963 	bl	80088fc <USB_SetDevSpeed>
 8008636:	e003      	b.n	8008640 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008638:	2103      	movs	r1, #3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f95e 	bl	80088fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008640:	2110      	movs	r1, #16
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f8fa 	bl	800883c <USB_FlushTxFifo>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f924 	bl	80088a0 <USB_FlushRxFifo>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008668:	461a      	mov	r2, r3
 800866a:	2300      	movs	r3, #0
 800866c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008674:	461a      	mov	r2, r3
 8008676:	2300      	movs	r3, #0
 8008678:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008680:	461a      	mov	r2, r3
 8008682:	2300      	movs	r3, #0
 8008684:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008686:	2300      	movs	r3, #0
 8008688:	613b      	str	r3, [r7, #16]
 800868a:	e043      	b.n	8008714 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4413      	add	r3, r2
 8008694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800869e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086a2:	d118      	bne.n	80086d6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10a      	bne.n	80086c0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	015a      	lsls	r2, r3, #5
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	4413      	add	r3, r2
 80086b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b6:	461a      	mov	r2, r3
 80086b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80086bc:	6013      	str	r3, [r2, #0]
 80086be:	e013      	b.n	80086e8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086cc:	461a      	mov	r2, r3
 80086ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086d2:	6013      	str	r3, [r2, #0]
 80086d4:	e008      	b.n	80086e8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	015a      	lsls	r2, r3, #5
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	4413      	add	r3, r2
 80086de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e2:	461a      	mov	r2, r3
 80086e4:	2300      	movs	r3, #0
 80086e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f4:	461a      	mov	r2, r3
 80086f6:	2300      	movs	r3, #0
 80086f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4413      	add	r3, r2
 8008702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008706:	461a      	mov	r2, r3
 8008708:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800870c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	3301      	adds	r3, #1
 8008712:	613b      	str	r3, [r7, #16]
 8008714:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008718:	461a      	mov	r2, r3
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	4293      	cmp	r3, r2
 800871e:	d3b5      	bcc.n	800868c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008720:	2300      	movs	r3, #0
 8008722:	613b      	str	r3, [r7, #16]
 8008724:	e043      	b.n	80087ae <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	4413      	add	r3, r2
 800872e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800873c:	d118      	bne.n	8008770 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10a      	bne.n	800875a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4413      	add	r3, r2
 800874c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008750:	461a      	mov	r2, r3
 8008752:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008756:	6013      	str	r3, [r2, #0]
 8008758:	e013      	b.n	8008782 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	4413      	add	r3, r2
 8008762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008766:	461a      	mov	r2, r3
 8008768:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800876c:	6013      	str	r3, [r2, #0]
 800876e:	e008      	b.n	8008782 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4413      	add	r3, r2
 8008778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800877c:	461a      	mov	r2, r3
 800877e:	2300      	movs	r3, #0
 8008780:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	4413      	add	r3, r2
 800878a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800878e:	461a      	mov	r2, r3
 8008790:	2300      	movs	r3, #0
 8008792:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4413      	add	r3, r2
 800879c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a0:	461a      	mov	r2, r3
 80087a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80087a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	3301      	adds	r3, #1
 80087ac:	613b      	str	r3, [r7, #16]
 80087ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80087b2:	461a      	mov	r2, r3
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d3b5      	bcc.n	8008726 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80087da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80087dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d105      	bne.n	80087f0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	f043 0210 	orr.w	r2, r3, #16
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	699a      	ldr	r2, [r3, #24]
 80087f4:	4b10      	ldr	r3, [pc, #64]	; (8008838 <USB_DevInit+0x2c4>)
 80087f6:	4313      	orrs	r3, r2
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80087fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008800:	2b00      	cmp	r3, #0
 8008802:	d005      	beq.n	8008810 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	f043 0208 	orr.w	r2, r3, #8
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008810:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008814:	2b01      	cmp	r3, #1
 8008816:	d107      	bne.n	8008828 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008820:	f043 0304 	orr.w	r3, r3, #4
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008828:	7dfb      	ldrb	r3, [r7, #23]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008834:	b004      	add	sp, #16
 8008836:	4770      	bx	lr
 8008838:	803c3800 	.word	0x803c3800

0800883c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008846:	2300      	movs	r3, #0
 8008848:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	3301      	adds	r3, #1
 800884e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008856:	d901      	bls.n	800885c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e01b      	b.n	8008894 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	daf2      	bge.n	800884a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008864:	2300      	movs	r3, #0
 8008866:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	019b      	lsls	r3, r3, #6
 800886c:	f043 0220 	orr.w	r2, r3, #32
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	3301      	adds	r3, #1
 8008878:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008880:	d901      	bls.n	8008886 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008882:	2303      	movs	r3, #3
 8008884:	e006      	b.n	8008894 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	f003 0320 	and.w	r3, r3, #32
 800888e:	2b20      	cmp	r3, #32
 8008890:	d0f0      	beq.n	8008874 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	3301      	adds	r3, #1
 80088b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80088b8:	d901      	bls.n	80088be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e018      	b.n	80088f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	daf2      	bge.n	80088ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80088c6:	2300      	movs	r3, #0
 80088c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2210      	movs	r2, #16
 80088ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	3301      	adds	r3, #1
 80088d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80088dc:	d901      	bls.n	80088e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80088de:	2303      	movs	r3, #3
 80088e0:	e006      	b.n	80088f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	f003 0310 	and.w	r3, r3, #16
 80088ea:	2b10      	cmp	r3, #16
 80088ec:	d0f0      	beq.n	80088d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	78fb      	ldrb	r3, [r7, #3]
 8008916:	68f9      	ldr	r1, [r7, #12]
 8008918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800891c:	4313      	orrs	r3, r2
 800891e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800892e:	b480      	push	{r7}
 8008930:	b087      	sub	sp, #28
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f003 0306 	and.w	r3, r3, #6
 8008946:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d102      	bne.n	8008954 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800894e:	2300      	movs	r3, #0
 8008950:	75fb      	strb	r3, [r7, #23]
 8008952:	e00a      	b.n	800896a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b02      	cmp	r3, #2
 8008958:	d002      	beq.n	8008960 <USB_GetDevSpeed+0x32>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2b06      	cmp	r3, #6
 800895e:	d102      	bne.n	8008966 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008960:	2302      	movs	r3, #2
 8008962:	75fb      	strb	r3, [r7, #23]
 8008964:	e001      	b.n	800896a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008966:	230f      	movs	r3, #15
 8008968:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800896a:	7dfb      	ldrb	r3, [r7, #23]
}
 800896c:	4618      	mov	r0, r3
 800896e:	371c      	adds	r7, #28
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	785b      	ldrb	r3, [r3, #1]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d13a      	bne.n	8008a0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800899a:	69da      	ldr	r2, [r3, #28]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	f003 030f 	and.w	r3, r3, #15
 80089a4:	2101      	movs	r1, #1
 80089a6:	fa01 f303 	lsl.w	r3, r1, r3
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	68f9      	ldr	r1, [r7, #12]
 80089ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089b2:	4313      	orrs	r3, r2
 80089b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	015a      	lsls	r2, r3, #5
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	4413      	add	r3, r2
 80089be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d155      	bne.n	8008a78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	015a      	lsls	r2, r3, #5
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	791b      	ldrb	r3, [r3, #4]
 80089e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	059b      	lsls	r3, r3, #22
 80089ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089f0:	4313      	orrs	r3, r2
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	0151      	lsls	r1, r2, #5
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	440a      	add	r2, r1
 80089fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	e036      	b.n	8008a78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a10:	69da      	ldr	r2, [r3, #28]
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	f003 030f 	and.w	r3, r3, #15
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a20:	041b      	lsls	r3, r3, #16
 8008a22:	68f9      	ldr	r1, [r7, #12]
 8008a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	015a      	lsls	r2, r3, #5
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	4413      	add	r3, r2
 8008a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d11a      	bne.n	8008a78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	015a      	lsls	r2, r3, #5
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	4413      	add	r3, r2
 8008a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	791b      	ldrb	r3, [r3, #4]
 8008a5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a5e:	430b      	orrs	r3, r1
 8008a60:	4313      	orrs	r3, r2
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	0151      	lsls	r1, r2, #5
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	440a      	add	r2, r1
 8008a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
	...

08008a88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	785b      	ldrb	r3, [r3, #1]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d161      	bne.n	8008b68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	015a      	lsls	r2, r3, #5
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	4413      	add	r3, r2
 8008aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008aba:	d11f      	bne.n	8008afc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	015a      	lsls	r2, r3, #5
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	0151      	lsls	r1, r2, #5
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	440a      	add	r2, r1
 8008ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ada:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	015a      	lsls	r2, r3, #5
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	0151      	lsls	r1, r2, #5
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	440a      	add	r2, r1
 8008af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008af6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008afa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	f003 030f 	and.w	r3, r3, #15
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	43db      	mvns	r3, r3
 8008b16:	68f9      	ldr	r1, [r7, #12]
 8008b18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b26:	69da      	ldr	r2, [r3, #28]
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	f003 030f 	and.w	r3, r3, #15
 8008b30:	2101      	movs	r1, #1
 8008b32:	fa01 f303 	lsl.w	r3, r1, r3
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	43db      	mvns	r3, r3
 8008b3a:	68f9      	ldr	r1, [r7, #12]
 8008b3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b40:	4013      	ands	r3, r2
 8008b42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	015a      	lsls	r2, r3, #5
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	0159      	lsls	r1, r3, #5
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	440b      	add	r3, r1
 8008b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b5e:	4619      	mov	r1, r3
 8008b60:	4b35      	ldr	r3, [pc, #212]	; (8008c38 <USB_DeactivateEndpoint+0x1b0>)
 8008b62:	4013      	ands	r3, r2
 8008b64:	600b      	str	r3, [r1, #0]
 8008b66:	e060      	b.n	8008c2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	015a      	lsls	r2, r3, #5
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	4413      	add	r3, r2
 8008b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b7e:	d11f      	bne.n	8008bc0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	0151      	lsls	r1, r2, #5
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	440a      	add	r2, r1
 8008b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	0151      	lsls	r1, r2, #5
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	440a      	add	r2, r1
 8008bb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	f003 030f 	and.w	r3, r3, #15
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8008bd6:	041b      	lsls	r3, r3, #16
 8008bd8:	43db      	mvns	r3, r3
 8008bda:	68f9      	ldr	r1, [r7, #12]
 8008bdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008be0:	4013      	ands	r3, r2
 8008be2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bea:	69da      	ldr	r2, [r3, #28]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	f003 030f 	and.w	r3, r3, #15
 8008bf4:	2101      	movs	r1, #1
 8008bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8008bfa:	041b      	lsls	r3, r3, #16
 8008bfc:	43db      	mvns	r3, r3
 8008bfe:	68f9      	ldr	r1, [r7, #12]
 8008c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c04:	4013      	ands	r3, r2
 8008c06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	015a      	lsls	r2, r3, #5
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	4413      	add	r3, r2
 8008c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	0159      	lsls	r1, r3, #5
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	440b      	add	r3, r1
 8008c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c22:	4619      	mov	r1, r3
 8008c24:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <USB_DeactivateEndpoint+0x1b4>)
 8008c26:	4013      	ands	r3, r2
 8008c28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3714      	adds	r7, #20
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr
 8008c38:	ec337800 	.word	0xec337800
 8008c3c:	eff37800 	.word	0xeff37800

08008c40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b08a      	sub	sp, #40	; 0x28
 8008c44:	af02      	add	r7, sp, #8
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	785b      	ldrb	r3, [r3, #1]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	f040 817a 	bne.w	8008f56 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d132      	bne.n	8008cd0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	015a      	lsls	r2, r3, #5
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	4413      	add	r3, r2
 8008c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	69ba      	ldr	r2, [r7, #24]
 8008c7a:	0151      	lsls	r1, r2, #5
 8008c7c:	69fa      	ldr	r2, [r7, #28]
 8008c7e:	440a      	add	r2, r1
 8008c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	015a      	lsls	r2, r3, #5
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	4413      	add	r3, r2
 8008c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	0151      	lsls	r1, r2, #5
 8008ca0:	69fa      	ldr	r2, [r7, #28]
 8008ca2:	440a      	add	r2, r1
 8008ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ca8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	015a      	lsls	r2, r3, #5
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	0151      	lsls	r1, r2, #5
 8008cc0:	69fa      	ldr	r2, [r7, #28]
 8008cc2:	440a      	add	r2, r1
 8008cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cc8:	0cdb      	lsrs	r3, r3, #19
 8008cca:	04db      	lsls	r3, r3, #19
 8008ccc:	6113      	str	r3, [r2, #16]
 8008cce:	e092      	b.n	8008df6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	015a      	lsls	r2, r3, #5
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	69ba      	ldr	r2, [r7, #24]
 8008ce0:	0151      	lsls	r1, r2, #5
 8008ce2:	69fa      	ldr	r2, [r7, #28]
 8008ce4:	440a      	add	r2, r1
 8008ce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cea:	0cdb      	lsrs	r3, r3, #19
 8008cec:	04db      	lsls	r3, r3, #19
 8008cee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	69ba      	ldr	r2, [r7, #24]
 8008d00:	0151      	lsls	r1, r2, #5
 8008d02:	69fa      	ldr	r2, [r7, #28]
 8008d04:	440a      	add	r2, r1
 8008d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d12:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d11a      	bne.n	8008d50 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	691a      	ldr	r2, [r3, #16]
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d903      	bls.n	8008d2e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	689a      	ldr	r2, [r3, #8]
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	69ba      	ldr	r2, [r7, #24]
 8008d3e:	0151      	lsls	r1, r2, #5
 8008d40:	69fa      	ldr	r2, [r7, #28]
 8008d42:	440a      	add	r2, r1
 8008d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d4c:	6113      	str	r3, [r2, #16]
 8008d4e:	e01b      	b.n	8008d88 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	015a      	lsls	r2, r3, #5
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d5c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	6919      	ldr	r1, [r3, #16]
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	440b      	add	r3, r1
 8008d68:	1e59      	subs	r1, r3, #1
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d72:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d74:	4ba2      	ldr	r3, [pc, #648]	; (8009000 <USB_EPStartXfer+0x3c0>)
 8008d76:	400b      	ands	r3, r1
 8008d78:	69b9      	ldr	r1, [r7, #24]
 8008d7a:	0148      	lsls	r0, r1, #5
 8008d7c:	69f9      	ldr	r1, [r7, #28]
 8008d7e:	4401      	add	r1, r0
 8008d80:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d84:	4313      	orrs	r3, r2
 8008d86:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	015a      	lsls	r2, r3, #5
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	4413      	add	r3, r2
 8008d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d94:	691a      	ldr	r2, [r3, #16]
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d9e:	69b9      	ldr	r1, [r7, #24]
 8008da0:	0148      	lsls	r0, r1, #5
 8008da2:	69f9      	ldr	r1, [r7, #28]
 8008da4:	4401      	add	r1, r0
 8008da6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008daa:	4313      	orrs	r3, r2
 8008dac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	791b      	ldrb	r3, [r3, #4]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d11f      	bne.n	8008df6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	0151      	lsls	r1, r2, #5
 8008dc8:	69fa      	ldr	r2, [r7, #28]
 8008dca:	440a      	add	r2, r1
 8008dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dd0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008dd4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	69ba      	ldr	r2, [r7, #24]
 8008de6:	0151      	lsls	r1, r2, #5
 8008de8:	69fa      	ldr	r2, [r7, #28]
 8008dea:	440a      	add	r2, r1
 8008dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008df0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008df4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d14b      	bne.n	8008e94 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	69db      	ldr	r3, [r3, #28]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d009      	beq.n	8008e18 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e10:	461a      	mov	r2, r3
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	69db      	ldr	r3, [r3, #28]
 8008e16:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	791b      	ldrb	r3, [r3, #4]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d128      	bne.n	8008e72 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d110      	bne.n	8008e52 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	015a      	lsls	r2, r3, #5
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	4413      	add	r3, r2
 8008e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	69ba      	ldr	r2, [r7, #24]
 8008e40:	0151      	lsls	r1, r2, #5
 8008e42:	69fa      	ldr	r2, [r7, #28]
 8008e44:	440a      	add	r2, r1
 8008e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e4e:	6013      	str	r3, [r2, #0]
 8008e50:	e00f      	b.n	8008e72 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	69ba      	ldr	r2, [r7, #24]
 8008e62:	0151      	lsls	r1, r2, #5
 8008e64:	69fa      	ldr	r2, [r7, #28]
 8008e66:	440a      	add	r2, r1
 8008e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e70:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	69ba      	ldr	r2, [r7, #24]
 8008e82:	0151      	lsls	r1, r2, #5
 8008e84:	69fa      	ldr	r2, [r7, #28]
 8008e86:	440a      	add	r2, r1
 8008e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e90:	6013      	str	r3, [r2, #0]
 8008e92:	e165      	b.n	8009160 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	69ba      	ldr	r2, [r7, #24]
 8008ea4:	0151      	lsls	r1, r2, #5
 8008ea6:	69fa      	ldr	r2, [r7, #28]
 8008ea8:	440a      	add	r2, r1
 8008eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008eb2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	791b      	ldrb	r3, [r3, #4]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d015      	beq.n	8008ee8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 814d 	beq.w	8009160 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	f003 030f 	and.w	r3, r3, #15
 8008ed6:	2101      	movs	r1, #1
 8008ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8008edc:	69f9      	ldr	r1, [r7, #28]
 8008ede:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	634b      	str	r3, [r1, #52]	; 0x34
 8008ee6:	e13b      	b.n	8009160 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d110      	bne.n	8008f1a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	015a      	lsls	r2, r3, #5
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	4413      	add	r3, r2
 8008f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	69ba      	ldr	r2, [r7, #24]
 8008f08:	0151      	lsls	r1, r2, #5
 8008f0a:	69fa      	ldr	r2, [r7, #28]
 8008f0c:	440a      	add	r2, r1
 8008f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f16:	6013      	str	r3, [r2, #0]
 8008f18:	e00f      	b.n	8008f3a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	015a      	lsls	r2, r3, #5
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	69ba      	ldr	r2, [r7, #24]
 8008f2a:	0151      	lsls	r1, r2, #5
 8008f2c:	69fa      	ldr	r2, [r7, #28]
 8008f2e:	440a      	add	r2, r1
 8008f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f38:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	68d9      	ldr	r1, [r3, #12]
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	781a      	ldrb	r2, [r3, #0]
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	b298      	uxth	r0, r3
 8008f48:	79fb      	ldrb	r3, [r7, #7]
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f000 f9b8 	bl	80092c4 <USB_WritePacket>
 8008f54:	e104      	b.n	8009160 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	015a      	lsls	r2, r3, #5
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	0151      	lsls	r1, r2, #5
 8008f68:	69fa      	ldr	r2, [r7, #28]
 8008f6a:	440a      	add	r2, r1
 8008f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f70:	0cdb      	lsrs	r3, r3, #19
 8008f72:	04db      	lsls	r3, r3, #19
 8008f74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	69ba      	ldr	r2, [r7, #24]
 8008f86:	0151      	lsls	r1, r2, #5
 8008f88:	69fa      	ldr	r2, [r7, #28]
 8008f8a:	440a      	add	r2, r1
 8008f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f98:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d131      	bne.n	8009004 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d003      	beq.n	8008fb0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	689a      	ldr	r2, [r3, #8]
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	689a      	ldr	r2, [r3, #8]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc4:	691a      	ldr	r2, [r3, #16]
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fce:	69b9      	ldr	r1, [r7, #24]
 8008fd0:	0148      	lsls	r0, r1, #5
 8008fd2:	69f9      	ldr	r1, [r7, #28]
 8008fd4:	4401      	add	r1, r0
 8008fd6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	015a      	lsls	r2, r3, #5
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	69ba      	ldr	r2, [r7, #24]
 8008fee:	0151      	lsls	r1, r2, #5
 8008ff0:	69fa      	ldr	r2, [r7, #28]
 8008ff2:	440a      	add	r2, r1
 8008ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ff8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ffc:	6113      	str	r3, [r2, #16]
 8008ffe:	e061      	b.n	80090c4 <USB_EPStartXfer+0x484>
 8009000:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d123      	bne.n	8009054 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	015a      	lsls	r2, r3, #5
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	4413      	add	r3, r2
 8009014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009018:	691a      	ldr	r2, [r3, #16]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009022:	69b9      	ldr	r1, [r7, #24]
 8009024:	0148      	lsls	r0, r1, #5
 8009026:	69f9      	ldr	r1, [r7, #28]
 8009028:	4401      	add	r1, r0
 800902a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800902e:	4313      	orrs	r3, r2
 8009030:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	015a      	lsls	r2, r3, #5
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	4413      	add	r3, r2
 800903a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	0151      	lsls	r1, r2, #5
 8009044:	69fa      	ldr	r2, [r7, #28]
 8009046:	440a      	add	r2, r1
 8009048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800904c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009050:	6113      	str	r3, [r2, #16]
 8009052:	e037      	b.n	80090c4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	691a      	ldr	r2, [r3, #16]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	4413      	add	r3, r2
 800905e:	1e5a      	subs	r2, r3, #1
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	fbb2 f3f3 	udiv	r3, r2, r3
 8009068:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	8afa      	ldrh	r2, [r7, #22]
 8009070:	fb03 f202 	mul.w	r2, r3, r2
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	015a      	lsls	r2, r3, #5
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	4413      	add	r3, r2
 8009080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009084:	691a      	ldr	r2, [r3, #16]
 8009086:	8afb      	ldrh	r3, [r7, #22]
 8009088:	04d9      	lsls	r1, r3, #19
 800908a:	4b38      	ldr	r3, [pc, #224]	; (800916c <USB_EPStartXfer+0x52c>)
 800908c:	400b      	ands	r3, r1
 800908e:	69b9      	ldr	r1, [r7, #24]
 8009090:	0148      	lsls	r0, r1, #5
 8009092:	69f9      	ldr	r1, [r7, #28]
 8009094:	4401      	add	r1, r0
 8009096:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800909a:	4313      	orrs	r3, r2
 800909c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	015a      	lsls	r2, r3, #5
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	4413      	add	r3, r2
 80090a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090aa:	691a      	ldr	r2, [r3, #16]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	6a1b      	ldr	r3, [r3, #32]
 80090b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090b4:	69b9      	ldr	r1, [r7, #24]
 80090b6:	0148      	lsls	r0, r1, #5
 80090b8:	69f9      	ldr	r1, [r7, #28]
 80090ba:	4401      	add	r1, r0
 80090bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80090c0:	4313      	orrs	r3, r2
 80090c2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80090c4:	79fb      	ldrb	r3, [r7, #7]
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d10d      	bne.n	80090e6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d009      	beq.n	80090e6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	68d9      	ldr	r1, [r3, #12]
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	015a      	lsls	r2, r3, #5
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e2:	460a      	mov	r2, r1
 80090e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	791b      	ldrb	r3, [r3, #4]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d128      	bne.n	8009140 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d110      	bne.n	8009120 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	015a      	lsls	r2, r3, #5
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	4413      	add	r3, r2
 8009106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	69ba      	ldr	r2, [r7, #24]
 800910e:	0151      	lsls	r1, r2, #5
 8009110:	69fa      	ldr	r2, [r7, #28]
 8009112:	440a      	add	r2, r1
 8009114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009118:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800911c:	6013      	str	r3, [r2, #0]
 800911e:	e00f      	b.n	8009140 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	015a      	lsls	r2, r3, #5
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	4413      	add	r3, r2
 8009128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	69ba      	ldr	r2, [r7, #24]
 8009130:	0151      	lsls	r1, r2, #5
 8009132:	69fa      	ldr	r2, [r7, #28]
 8009134:	440a      	add	r2, r1
 8009136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800913a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800913e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	015a      	lsls	r2, r3, #5
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	4413      	add	r3, r2
 8009148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	69ba      	ldr	r2, [r7, #24]
 8009150:	0151      	lsls	r1, r2, #5
 8009152:	69fa      	ldr	r2, [r7, #28]
 8009154:	440a      	add	r2, r1
 8009156:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800915a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800915e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3720      	adds	r7, #32
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	1ff80000 	.word	0x1ff80000

08009170 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009170:	b480      	push	{r7}
 8009172:	b087      	sub	sp, #28
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800917a:	2300      	movs	r3, #0
 800917c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	785b      	ldrb	r3, [r3, #1]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d14a      	bne.n	8009224 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	4413      	add	r3, r2
 8009198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091a6:	f040 8086 	bne.w	80092b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	015a      	lsls	r2, r3, #5
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	4413      	add	r3, r2
 80091b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	7812      	ldrb	r2, [r2, #0]
 80091be:	0151      	lsls	r1, r2, #5
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	440a      	add	r2, r1
 80091c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	015a      	lsls	r2, r3, #5
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	7812      	ldrb	r2, [r2, #0]
 80091e2:	0151      	lsls	r1, r2, #5
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	440a      	add	r2, r1
 80091e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	3301      	adds	r3, #1
 80091f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80091fe:	4293      	cmp	r3, r2
 8009200:	d902      	bls.n	8009208 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	75fb      	strb	r3, [r7, #23]
          break;
 8009206:	e056      	b.n	80092b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	015a      	lsls	r2, r3, #5
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	4413      	add	r3, r2
 8009212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800921c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009220:	d0e7      	beq.n	80091f2 <USB_EPStopXfer+0x82>
 8009222:	e048      	b.n	80092b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	015a      	lsls	r2, r3, #5
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	4413      	add	r3, r2
 800922e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800923c:	d13b      	bne.n	80092b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	7812      	ldrb	r2, [r2, #0]
 8009252:	0151      	lsls	r1, r2, #5
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	440a      	add	r2, r1
 8009258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800925c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009260:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	015a      	lsls	r2, r3, #5
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	4413      	add	r3, r2
 800926c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	7812      	ldrb	r2, [r2, #0]
 8009276:	0151      	lsls	r1, r2, #5
 8009278:	693a      	ldr	r2, [r7, #16]
 800927a:	440a      	add	r2, r1
 800927c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009280:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009284:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	3301      	adds	r3, #1
 800928a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009292:	4293      	cmp	r3, r2
 8009294:	d902      	bls.n	800929c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	75fb      	strb	r3, [r7, #23]
          break;
 800929a:	e00c      	b.n	80092b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	015a      	lsls	r2, r3, #5
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	4413      	add	r3, r2
 80092a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092b4:	d0e7      	beq.n	8009286 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80092b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	371c      	adds	r7, #28
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b089      	sub	sp, #36	; 0x24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	4611      	mov	r1, r2
 80092d0:	461a      	mov	r2, r3
 80092d2:	460b      	mov	r3, r1
 80092d4:	71fb      	strb	r3, [r7, #7]
 80092d6:	4613      	mov	r3, r2
 80092d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80092e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d123      	bne.n	8009332 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80092ea:	88bb      	ldrh	r3, [r7, #4]
 80092ec:	3303      	adds	r3, #3
 80092ee:	089b      	lsrs	r3, r3, #2
 80092f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80092f2:	2300      	movs	r3, #0
 80092f4:	61bb      	str	r3, [r7, #24]
 80092f6:	e018      	b.n	800932a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80092f8:	79fb      	ldrb	r3, [r7, #7]
 80092fa:	031a      	lsls	r2, r3, #12
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	4413      	add	r3, r2
 8009300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009304:	461a      	mov	r2, r3
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	3301      	adds	r3, #1
 8009310:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	3301      	adds	r3, #1
 8009316:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	3301      	adds	r3, #1
 800931c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	3301      	adds	r3, #1
 8009322:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	3301      	adds	r3, #1
 8009328:	61bb      	str	r3, [r7, #24]
 800932a:	69ba      	ldr	r2, [r7, #24]
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	429a      	cmp	r2, r3
 8009330:	d3e2      	bcc.n	80092f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3724      	adds	r7, #36	; 0x24
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009340:	b480      	push	{r7}
 8009342:	b08b      	sub	sp, #44	; 0x2c
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	4613      	mov	r3, r2
 800934c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009356:	88fb      	ldrh	r3, [r7, #6]
 8009358:	089b      	lsrs	r3, r3, #2
 800935a:	b29b      	uxth	r3, r3
 800935c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800935e:	88fb      	ldrh	r3, [r7, #6]
 8009360:	f003 0303 	and.w	r3, r3, #3
 8009364:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009366:	2300      	movs	r3, #0
 8009368:	623b      	str	r3, [r7, #32]
 800936a:	e014      	b.n	8009396 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	601a      	str	r2, [r3, #0]
    pDest++;
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	3301      	adds	r3, #1
 800937c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800937e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009380:	3301      	adds	r3, #1
 8009382:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	3301      	adds	r3, #1
 8009388:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938c:	3301      	adds	r3, #1
 800938e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009390:	6a3b      	ldr	r3, [r7, #32]
 8009392:	3301      	adds	r3, #1
 8009394:	623b      	str	r3, [r7, #32]
 8009396:	6a3a      	ldr	r2, [r7, #32]
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	429a      	cmp	r2, r3
 800939c:	d3e6      	bcc.n	800936c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800939e:	8bfb      	ldrh	r3, [r7, #30]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d01e      	beq.n	80093e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80093a4:	2300      	movs	r3, #0
 80093a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ae:	461a      	mov	r2, r3
 80093b0:	f107 0310 	add.w	r3, r7, #16
 80093b4:	6812      	ldr	r2, [r2, #0]
 80093b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	6a3b      	ldr	r3, [r7, #32]
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	00db      	lsls	r3, r3, #3
 80093c0:	fa22 f303 	lsr.w	r3, r2, r3
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c8:	701a      	strb	r2, [r3, #0]
      i++;
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	3301      	adds	r3, #1
 80093ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	3301      	adds	r3, #1
 80093d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80093d6:	8bfb      	ldrh	r3, [r7, #30]
 80093d8:	3b01      	subs	r3, #1
 80093da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80093dc:	8bfb      	ldrh	r3, [r7, #30]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1ea      	bne.n	80093b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80093e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	372c      	adds	r7, #44	; 0x2c
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	785b      	ldrb	r3, [r3, #1]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d12c      	bne.n	8009466 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	015a      	lsls	r2, r3, #5
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	4413      	add	r3, r2
 8009414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	db12      	blt.n	8009444 <USB_EPSetStall+0x54>
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00f      	beq.n	8009444 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	4413      	add	r3, r2
 800942c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	0151      	lsls	r1, r2, #5
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	440a      	add	r2, r1
 800943a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800943e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009442:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	4413      	add	r3, r2
 800944c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	0151      	lsls	r1, r2, #5
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	440a      	add	r2, r1
 800945a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800945e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009462:	6013      	str	r3, [r2, #0]
 8009464:	e02b      	b.n	80094be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	4413      	add	r3, r2
 800946e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	db12      	blt.n	800949e <USB_EPSetStall+0xae>
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00f      	beq.n	800949e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	4413      	add	r3, r2
 8009486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	0151      	lsls	r1, r2, #5
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	440a      	add	r2, r1
 8009494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009498:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800949c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	0151      	lsls	r1, r2, #5
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	440a      	add	r2, r1
 80094b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80094bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3714      	adds	r7, #20
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	785b      	ldrb	r3, [r3, #1]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d128      	bne.n	800953a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	015a      	lsls	r2, r3, #5
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4413      	add	r3, r2
 80094f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	0151      	lsls	r1, r2, #5
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	440a      	add	r2, r1
 80094fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009502:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009506:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	791b      	ldrb	r3, [r3, #4]
 800950c:	2b03      	cmp	r3, #3
 800950e:	d003      	beq.n	8009518 <USB_EPClearStall+0x4c>
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	791b      	ldrb	r3, [r3, #4]
 8009514:	2b02      	cmp	r3, #2
 8009516:	d138      	bne.n	800958a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	015a      	lsls	r2, r3, #5
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	4413      	add	r3, r2
 8009520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	0151      	lsls	r1, r2, #5
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	440a      	add	r2, r1
 800952e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009536:	6013      	str	r3, [r2, #0]
 8009538:	e027      	b.n	800958a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	015a      	lsls	r2, r3, #5
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	4413      	add	r3, r2
 8009542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	0151      	lsls	r1, r2, #5
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	440a      	add	r2, r1
 8009550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009554:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009558:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	791b      	ldrb	r3, [r3, #4]
 800955e:	2b03      	cmp	r3, #3
 8009560:	d003      	beq.n	800956a <USB_EPClearStall+0x9e>
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	791b      	ldrb	r3, [r3, #4]
 8009566:	2b02      	cmp	r3, #2
 8009568:	d10f      	bne.n	800958a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	015a      	lsls	r2, r3, #5
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	4413      	add	r3, r2
 8009572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	0151      	lsls	r1, r2, #5
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	440a      	add	r2, r1
 8009580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009588:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80095ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	78fb      	ldrb	r3, [r7, #3]
 80095c6:	011b      	lsls	r3, r3, #4
 80095c8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80095cc:	68f9      	ldr	r1, [r7, #12]
 80095ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095d2:	4313      	orrs	r3, r2
 80095d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80095fe:	f023 0303 	bic.w	r3, r3, #3
 8009602:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009612:	f023 0302 	bic.w	r3, r3, #2
 8009616:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3714      	adds	r7, #20
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009626:	b480      	push	{r7}
 8009628:	b085      	sub	sp, #20
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009640:	f023 0303 	bic.w	r3, r3, #3
 8009644:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009654:	f043 0302 	orr.w	r3, r3, #2
 8009658:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3714      	adds	r7, #20
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	695b      	ldr	r3, [r3, #20]
 8009674:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	4013      	ands	r3, r2
 800967e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009680:	68fb      	ldr	r3, [r7, #12]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3714      	adds	r7, #20
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr

0800968e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800968e:	b480      	push	{r7}
 8009690:	b085      	sub	sp, #20
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096aa:	69db      	ldr	r3, [r3, #28]
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	4013      	ands	r3, r2
 80096b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	0c1b      	lsrs	r3, r3, #16
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80096c2:	b480      	push	{r7}
 80096c4:	b085      	sub	sp, #20
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096de:	69db      	ldr	r3, [r3, #28]
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	4013      	ands	r3, r2
 80096e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	b29b      	uxth	r3, r3
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80096f6:	b480      	push	{r7}
 80096f8:	b085      	sub	sp, #20
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	460b      	mov	r3, r1
 8009700:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009706:	78fb      	ldrb	r3, [r7, #3]
 8009708:	015a      	lsls	r2, r3, #5
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	4413      	add	r3, r2
 800970e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800971c:	695b      	ldr	r3, [r3, #20]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	4013      	ands	r3, r2
 8009722:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009724:	68bb      	ldr	r3, [r7, #8]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009732:	b480      	push	{r7}
 8009734:	b087      	sub	sp, #28
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	460b      	mov	r3, r1
 800973c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009754:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009756:	78fb      	ldrb	r3, [r7, #3]
 8009758:	f003 030f 	and.w	r3, r3, #15
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	fa22 f303 	lsr.w	r3, r2, r3
 8009762:	01db      	lsls	r3, r3, #7
 8009764:	b2db      	uxtb	r3, r3
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	4313      	orrs	r3, r2
 800976a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800976c:	78fb      	ldrb	r3, [r7, #3]
 800976e:	015a      	lsls	r2, r3, #5
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	4413      	add	r3, r2
 8009774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	4013      	ands	r3, r2
 800977e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009780:	68bb      	ldr	r3, [r7, #8]
}
 8009782:	4618      	mov	r0, r3
 8009784:	371c      	adds	r7, #28
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr

0800978e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800978e:	b480      	push	{r7}
 8009790:	b083      	sub	sp, #12
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	f003 0301 	and.w	r3, r3, #1
}
 800979e:	4618      	mov	r0, r3
 80097a0:	370c      	adds	r7, #12
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b085      	sub	sp, #20
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80097c8:	f023 0307 	bic.w	r3, r3, #7
 80097cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3714      	adds	r7, #20
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b087      	sub	sp, #28
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	460b      	mov	r3, r1
 80097fa:	607a      	str	r2, [r7, #4]
 80097fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	333c      	adds	r3, #60	; 0x3c
 8009806:	3304      	adds	r3, #4
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	4a26      	ldr	r2, [pc, #152]	; (80098a8 <USB_EP0_OutStart+0xb8>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d90a      	bls.n	800982a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009824:	d101      	bne.n	800982a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009826:	2300      	movs	r3, #0
 8009828:	e037      	b.n	800989a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009830:	461a      	mov	r2, r3
 8009832:	2300      	movs	r3, #0
 8009834:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	697a      	ldr	r2, [r7, #20]
 8009840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009844:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009848:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009858:	f043 0318 	orr.w	r3, r3, #24
 800985c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800986c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009870:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009872:	7afb      	ldrb	r3, [r7, #11]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d10f      	bne.n	8009898 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800987e:	461a      	mov	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009892:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009896:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	371c      	adds	r7, #28
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	4f54300a 	.word	0x4f54300a

080098ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098b4:	2300      	movs	r3, #0
 80098b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	3301      	adds	r3, #1
 80098bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80098c4:	d901      	bls.n	80098ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80098c6:	2303      	movs	r3, #3
 80098c8:	e01b      	b.n	8009902 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	daf2      	bge.n	80098b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80098d2:	2300      	movs	r3, #0
 80098d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	f043 0201 	orr.w	r2, r3, #1
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	3301      	adds	r3, #1
 80098e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80098ee:	d901      	bls.n	80098f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80098f0:	2303      	movs	r3, #3
 80098f2:	e006      	b.n	8009902 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	f003 0301 	and.w	r3, r3, #1
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d0f0      	beq.n	80098e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
	...

08009910 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	460b      	mov	r3, r1
 800991a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800991c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009920:	f005 ffde 	bl	800f8e0 <USBD_static_malloc>
 8009924:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d109      	bne.n	8009940 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	32b0      	adds	r2, #176	; 0xb0
 8009936:	2100      	movs	r1, #0
 8009938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800993c:	2302      	movs	r3, #2
 800993e:	e0d4      	b.n	8009aea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009940:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009944:	2100      	movs	r1, #0
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f006 feea 	bl	8010720 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	32b0      	adds	r2, #176	; 0xb0
 8009956:	68f9      	ldr	r1, [r7, #12]
 8009958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	32b0      	adds	r2, #176	; 0xb0
 8009966:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	7c1b      	ldrb	r3, [r3, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d138      	bne.n	80099ea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009978:	4b5e      	ldr	r3, [pc, #376]	; (8009af4 <USBD_CDC_Init+0x1e4>)
 800997a:	7819      	ldrb	r1, [r3, #0]
 800997c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009980:	2202      	movs	r2, #2
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f005 fe89 	bl	800f69a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009988:	4b5a      	ldr	r3, [pc, #360]	; (8009af4 <USBD_CDC_Init+0x1e4>)
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	f003 020f 	and.w	r2, r3, #15
 8009990:	6879      	ldr	r1, [r7, #4]
 8009992:	4613      	mov	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4413      	add	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	440b      	add	r3, r1
 800999c:	3324      	adds	r3, #36	; 0x24
 800999e:	2201      	movs	r2, #1
 80099a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80099a2:	4b55      	ldr	r3, [pc, #340]	; (8009af8 <USBD_CDC_Init+0x1e8>)
 80099a4:	7819      	ldrb	r1, [r3, #0]
 80099a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099aa:	2202      	movs	r2, #2
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f005 fe74 	bl	800f69a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80099b2:	4b51      	ldr	r3, [pc, #324]	; (8009af8 <USBD_CDC_Init+0x1e8>)
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	f003 020f 	and.w	r2, r3, #15
 80099ba:	6879      	ldr	r1, [r7, #4]
 80099bc:	4613      	mov	r3, r2
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4413      	add	r3, r2
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	440b      	add	r3, r1
 80099c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80099ca:	2201      	movs	r2, #1
 80099cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80099ce:	4b4b      	ldr	r3, [pc, #300]	; (8009afc <USBD_CDC_Init+0x1ec>)
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	f003 020f 	and.w	r2, r3, #15
 80099d6:	6879      	ldr	r1, [r7, #4]
 80099d8:	4613      	mov	r3, r2
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4413      	add	r3, r2
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	440b      	add	r3, r1
 80099e2:	3326      	adds	r3, #38	; 0x26
 80099e4:	2210      	movs	r2, #16
 80099e6:	801a      	strh	r2, [r3, #0]
 80099e8:	e035      	b.n	8009a56 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80099ea:	4b42      	ldr	r3, [pc, #264]	; (8009af4 <USBD_CDC_Init+0x1e4>)
 80099ec:	7819      	ldrb	r1, [r3, #0]
 80099ee:	2340      	movs	r3, #64	; 0x40
 80099f0:	2202      	movs	r2, #2
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f005 fe51 	bl	800f69a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80099f8:	4b3e      	ldr	r3, [pc, #248]	; (8009af4 <USBD_CDC_Init+0x1e4>)
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	f003 020f 	and.w	r2, r3, #15
 8009a00:	6879      	ldr	r1, [r7, #4]
 8009a02:	4613      	mov	r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	4413      	add	r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	440b      	add	r3, r1
 8009a0c:	3324      	adds	r3, #36	; 0x24
 8009a0e:	2201      	movs	r2, #1
 8009a10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009a12:	4b39      	ldr	r3, [pc, #228]	; (8009af8 <USBD_CDC_Init+0x1e8>)
 8009a14:	7819      	ldrb	r1, [r3, #0]
 8009a16:	2340      	movs	r3, #64	; 0x40
 8009a18:	2202      	movs	r2, #2
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f005 fe3d 	bl	800f69a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009a20:	4b35      	ldr	r3, [pc, #212]	; (8009af8 <USBD_CDC_Init+0x1e8>)
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	f003 020f 	and.w	r2, r3, #15
 8009a28:	6879      	ldr	r1, [r7, #4]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	4413      	add	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	440b      	add	r3, r1
 8009a34:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009a38:	2201      	movs	r2, #1
 8009a3a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009a3c:	4b2f      	ldr	r3, [pc, #188]	; (8009afc <USBD_CDC_Init+0x1ec>)
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	f003 020f 	and.w	r2, r3, #15
 8009a44:	6879      	ldr	r1, [r7, #4]
 8009a46:	4613      	mov	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4413      	add	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	440b      	add	r3, r1
 8009a50:	3326      	adds	r3, #38	; 0x26
 8009a52:	2210      	movs	r2, #16
 8009a54:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009a56:	4b29      	ldr	r3, [pc, #164]	; (8009afc <USBD_CDC_Init+0x1ec>)
 8009a58:	7819      	ldrb	r1, [r3, #0]
 8009a5a:	2308      	movs	r3, #8
 8009a5c:	2203      	movs	r2, #3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f005 fe1b 	bl	800f69a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009a64:	4b25      	ldr	r3, [pc, #148]	; (8009afc <USBD_CDC_Init+0x1ec>)
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	f003 020f 	and.w	r2, r3, #15
 8009a6c:	6879      	ldr	r1, [r7, #4]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4413      	add	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	440b      	add	r3, r1
 8009a78:	3324      	adds	r3, #36	; 0x24
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	33b0      	adds	r3, #176	; 0xb0
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d101      	bne.n	8009ab8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	e018      	b.n	8009aea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	7c1b      	ldrb	r3, [r3, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d10a      	bne.n	8009ad6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ac0:	4b0d      	ldr	r3, [pc, #52]	; (8009af8 <USBD_CDC_Init+0x1e8>)
 8009ac2:	7819      	ldrb	r1, [r3, #0]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009aca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f005 fed2 	bl	800f878 <USBD_LL_PrepareReceive>
 8009ad4:	e008      	b.n	8009ae8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ad6:	4b08      	ldr	r3, [pc, #32]	; (8009af8 <USBD_CDC_Init+0x1e8>)
 8009ad8:	7819      	ldrb	r1, [r3, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ae0:	2340      	movs	r3, #64	; 0x40
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f005 fec8 	bl	800f878 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	20000173 	.word	0x20000173
 8009af8:	20000174 	.word	0x20000174
 8009afc:	20000175 	.word	0x20000175

08009b00 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009b0c:	4b3a      	ldr	r3, [pc, #232]	; (8009bf8 <USBD_CDC_DeInit+0xf8>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	4619      	mov	r1, r3
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f005 fde7 	bl	800f6e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009b18:	4b37      	ldr	r3, [pc, #220]	; (8009bf8 <USBD_CDC_DeInit+0xf8>)
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	f003 020f 	and.w	r2, r3, #15
 8009b20:	6879      	ldr	r1, [r7, #4]
 8009b22:	4613      	mov	r3, r2
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	4413      	add	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	440b      	add	r3, r1
 8009b2c:	3324      	adds	r3, #36	; 0x24
 8009b2e:	2200      	movs	r2, #0
 8009b30:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009b32:	4b32      	ldr	r3, [pc, #200]	; (8009bfc <USBD_CDC_DeInit+0xfc>)
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f005 fdd4 	bl	800f6e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009b3e:	4b2f      	ldr	r3, [pc, #188]	; (8009bfc <USBD_CDC_DeInit+0xfc>)
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	f003 020f 	and.w	r2, r3, #15
 8009b46:	6879      	ldr	r1, [r7, #4]
 8009b48:	4613      	mov	r3, r2
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	4413      	add	r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	440b      	add	r3, r1
 8009b52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009b56:	2200      	movs	r2, #0
 8009b58:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009b5a:	4b29      	ldr	r3, [pc, #164]	; (8009c00 <USBD_CDC_DeInit+0x100>)
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f005 fdc0 	bl	800f6e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009b66:	4b26      	ldr	r3, [pc, #152]	; (8009c00 <USBD_CDC_DeInit+0x100>)
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	f003 020f 	and.w	r2, r3, #15
 8009b6e:	6879      	ldr	r1, [r7, #4]
 8009b70:	4613      	mov	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	4413      	add	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	440b      	add	r3, r1
 8009b7a:	3324      	adds	r3, #36	; 0x24
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009b80:	4b1f      	ldr	r3, [pc, #124]	; (8009c00 <USBD_CDC_DeInit+0x100>)
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	f003 020f 	and.w	r2, r3, #15
 8009b88:	6879      	ldr	r1, [r7, #4]
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	4413      	add	r3, r2
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	440b      	add	r3, r1
 8009b94:	3326      	adds	r3, #38	; 0x26
 8009b96:	2200      	movs	r2, #0
 8009b98:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	32b0      	adds	r2, #176	; 0xb0
 8009ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d01f      	beq.n	8009bec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	33b0      	adds	r3, #176	; 0xb0
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	32b0      	adds	r2, #176	; 0xb0
 8009bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f005 fe94 	bl	800f8fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	32b0      	adds	r2, #176	; 0xb0
 8009bde:	2100      	movs	r1, #0
 8009be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	20000173 	.word	0x20000173
 8009bfc:	20000174 	.word	0x20000174
 8009c00:	20000175 	.word	0x20000175

08009c04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b086      	sub	sp, #24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	32b0      	adds	r2, #176	; 0xb0
 8009c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c1c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009c22:	2300      	movs	r3, #0
 8009c24:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c26:	2300      	movs	r3, #0
 8009c28:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009c30:	2303      	movs	r3, #3
 8009c32:	e0bf      	b.n	8009db4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d050      	beq.n	8009ce2 <USBD_CDC_Setup+0xde>
 8009c40:	2b20      	cmp	r3, #32
 8009c42:	f040 80af 	bne.w	8009da4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	88db      	ldrh	r3, [r3, #6]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d03a      	beq.n	8009cc4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	b25b      	sxtb	r3, r3
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	da1b      	bge.n	8009c90 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	33b0      	adds	r3, #176	; 0xb0
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4413      	add	r3, r2
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009c6e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c70:	683a      	ldr	r2, [r7, #0]
 8009c72:	88d2      	ldrh	r2, [r2, #6]
 8009c74:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	88db      	ldrh	r3, [r3, #6]
 8009c7a:	2b07      	cmp	r3, #7
 8009c7c:	bf28      	it	cs
 8009c7e:	2307      	movcs	r3, #7
 8009c80:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	89fa      	ldrh	r2, [r7, #14]
 8009c86:	4619      	mov	r1, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f001 fd49 	bl	800b720 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009c8e:	e090      	b.n	8009db2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	785a      	ldrb	r2, [r3, #1]
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	88db      	ldrh	r3, [r3, #6]
 8009c9e:	2b3f      	cmp	r3, #63	; 0x3f
 8009ca0:	d803      	bhi.n	8009caa <USBD_CDC_Setup+0xa6>
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	88db      	ldrh	r3, [r3, #6]
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	e000      	b.n	8009cac <USBD_CDC_Setup+0xa8>
 8009caa:	2240      	movs	r2, #64	; 0x40
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009cb2:	6939      	ldr	r1, [r7, #16]
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009cba:	461a      	mov	r2, r3
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f001 fd5b 	bl	800b778 <USBD_CtlPrepareRx>
      break;
 8009cc2:	e076      	b.n	8009db2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	33b0      	adds	r3, #176	; 0xb0
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	683a      	ldr	r2, [r7, #0]
 8009cd8:	7850      	ldrb	r0, [r2, #1]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	4798      	blx	r3
      break;
 8009ce0:	e067      	b.n	8009db2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	785b      	ldrb	r3, [r3, #1]
 8009ce6:	2b0b      	cmp	r3, #11
 8009ce8:	d851      	bhi.n	8009d8e <USBD_CDC_Setup+0x18a>
 8009cea:	a201      	add	r2, pc, #4	; (adr r2, 8009cf0 <USBD_CDC_Setup+0xec>)
 8009cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf0:	08009d21 	.word	0x08009d21
 8009cf4:	08009d9d 	.word	0x08009d9d
 8009cf8:	08009d8f 	.word	0x08009d8f
 8009cfc:	08009d8f 	.word	0x08009d8f
 8009d00:	08009d8f 	.word	0x08009d8f
 8009d04:	08009d8f 	.word	0x08009d8f
 8009d08:	08009d8f 	.word	0x08009d8f
 8009d0c:	08009d8f 	.word	0x08009d8f
 8009d10:	08009d8f 	.word	0x08009d8f
 8009d14:	08009d8f 	.word	0x08009d8f
 8009d18:	08009d4b 	.word	0x08009d4b
 8009d1c:	08009d75 	.word	0x08009d75
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	2b03      	cmp	r3, #3
 8009d2a:	d107      	bne.n	8009d3c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009d2c:	f107 030a 	add.w	r3, r7, #10
 8009d30:	2202      	movs	r2, #2
 8009d32:	4619      	mov	r1, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f001 fcf3 	bl	800b720 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d3a:	e032      	b.n	8009da2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f001 fc7d 	bl	800b63e <USBD_CtlError>
            ret = USBD_FAIL;
 8009d44:	2303      	movs	r3, #3
 8009d46:	75fb      	strb	r3, [r7, #23]
          break;
 8009d48:	e02b      	b.n	8009da2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	2b03      	cmp	r3, #3
 8009d54:	d107      	bne.n	8009d66 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009d56:	f107 030d 	add.w	r3, r7, #13
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f001 fcde 	bl	800b720 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d64:	e01d      	b.n	8009da2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f001 fc68 	bl	800b63e <USBD_CtlError>
            ret = USBD_FAIL;
 8009d6e:	2303      	movs	r3, #3
 8009d70:	75fb      	strb	r3, [r7, #23]
          break;
 8009d72:	e016      	b.n	8009da2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2b03      	cmp	r3, #3
 8009d7e:	d00f      	beq.n	8009da0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f001 fc5b 	bl	800b63e <USBD_CtlError>
            ret = USBD_FAIL;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009d8c:	e008      	b.n	8009da0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f001 fc54 	bl	800b63e <USBD_CtlError>
          ret = USBD_FAIL;
 8009d96:	2303      	movs	r3, #3
 8009d98:	75fb      	strb	r3, [r7, #23]
          break;
 8009d9a:	e002      	b.n	8009da2 <USBD_CDC_Setup+0x19e>
          break;
 8009d9c:	bf00      	nop
 8009d9e:	e008      	b.n	8009db2 <USBD_CDC_Setup+0x1ae>
          break;
 8009da0:	bf00      	nop
      }
      break;
 8009da2:	e006      	b.n	8009db2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f001 fc49 	bl	800b63e <USBD_CtlError>
      ret = USBD_FAIL;
 8009dac:	2303      	movs	r3, #3
 8009dae:	75fb      	strb	r3, [r7, #23]
      break;
 8009db0:	bf00      	nop
  }

  return (uint8_t)ret;
 8009db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3718      	adds	r7, #24
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009dce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	32b0      	adds	r2, #176	; 0xb0
 8009dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d101      	bne.n	8009de6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009de2:	2303      	movs	r3, #3
 8009de4:	e065      	b.n	8009eb2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	32b0      	adds	r2, #176	; 0xb0
 8009df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009df6:	78fb      	ldrb	r3, [r7, #3]
 8009df8:	f003 020f 	and.w	r2, r3, #15
 8009dfc:	6879      	ldr	r1, [r7, #4]
 8009dfe:	4613      	mov	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4413      	add	r3, r2
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	440b      	add	r3, r1
 8009e08:	3318      	adds	r3, #24
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d02f      	beq.n	8009e70 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009e10:	78fb      	ldrb	r3, [r7, #3]
 8009e12:	f003 020f 	and.w	r2, r3, #15
 8009e16:	6879      	ldr	r1, [r7, #4]
 8009e18:	4613      	mov	r3, r2
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	4413      	add	r3, r2
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	440b      	add	r3, r1
 8009e22:	3318      	adds	r3, #24
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	78fb      	ldrb	r3, [r7, #3]
 8009e28:	f003 010f 	and.w	r1, r3, #15
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	00db      	lsls	r3, r3, #3
 8009e32:	440b      	add	r3, r1
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	4403      	add	r3, r0
 8009e38:	331c      	adds	r3, #28
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009e40:	fb01 f303 	mul.w	r3, r1, r3
 8009e44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d112      	bne.n	8009e70 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009e4a:	78fb      	ldrb	r3, [r7, #3]
 8009e4c:	f003 020f 	and.w	r2, r3, #15
 8009e50:	6879      	ldr	r1, [r7, #4]
 8009e52:	4613      	mov	r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	4413      	add	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	440b      	add	r3, r1
 8009e5c:	3318      	adds	r3, #24
 8009e5e:	2200      	movs	r2, #0
 8009e60:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009e62:	78f9      	ldrb	r1, [r7, #3]
 8009e64:	2300      	movs	r3, #0
 8009e66:	2200      	movs	r2, #0
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f005 fce4 	bl	800f836 <USBD_LL_Transmit>
 8009e6e:	e01f      	b.n	8009eb0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	33b0      	adds	r3, #176	; 0xb0
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d010      	beq.n	8009eb0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	33b0      	adds	r3, #176	; 0xb0
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	4413      	add	r3, r2
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	68ba      	ldr	r2, [r7, #8]
 8009ea2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009eac:	78fa      	ldrb	r2, [r7, #3]
 8009eae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b084      	sub	sp, #16
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	32b0      	adds	r2, #176	; 0xb0
 8009ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	32b0      	adds	r2, #176	; 0xb0
 8009ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d101      	bne.n	8009eec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009ee8:	2303      	movs	r3, #3
 8009eea:	e01a      	b.n	8009f22 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009eec:	78fb      	ldrb	r3, [r7, #3]
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f005 fce2 	bl	800f8ba <USBD_LL_GetRxDataSize>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	33b0      	adds	r3, #176	; 0xb0
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	4413      	add	r3, r2
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009f16:	68fa      	ldr	r2, [r7, #12]
 8009f18:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	32b0      	adds	r2, #176	; 0xb0
 8009f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d101      	bne.n	8009f4c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009f48:	2303      	movs	r3, #3
 8009f4a:	e025      	b.n	8009f98 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	33b0      	adds	r3, #176	; 0xb0
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4413      	add	r3, r2
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d01a      	beq.n	8009f96 <USBD_CDC_EP0_RxReady+0x6c>
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009f66:	2bff      	cmp	r3, #255	; 0xff
 8009f68:	d015      	beq.n	8009f96 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	33b0      	adds	r3, #176	; 0xb0
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009f82:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009f8a:	b292      	uxth	r2, r2
 8009f8c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	22ff      	movs	r2, #255	; 0xff
 8009f92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009fa8:	2182      	movs	r1, #130	; 0x82
 8009faa:	4818      	ldr	r0, [pc, #96]	; (800a00c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009fac:	f000 fd0f 	bl	800a9ce <USBD_GetEpDesc>
 8009fb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009fb2:	2101      	movs	r1, #1
 8009fb4:	4815      	ldr	r0, [pc, #84]	; (800a00c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009fb6:	f000 fd0a 	bl	800a9ce <USBD_GetEpDesc>
 8009fba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009fbc:	2181      	movs	r1, #129	; 0x81
 8009fbe:	4813      	ldr	r0, [pc, #76]	; (800a00c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009fc0:	f000 fd05 	bl	800a9ce <USBD_GetEpDesc>
 8009fc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d002      	beq.n	8009fd2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	2210      	movs	r2, #16
 8009fd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d006      	beq.n	8009fe6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fe0:	711a      	strb	r2, [r3, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d006      	beq.n	8009ffa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ff4:	711a      	strb	r2, [r3, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2243      	movs	r2, #67	; 0x43
 8009ffe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a000:	4b02      	ldr	r3, [pc, #8]	; (800a00c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a002:	4618      	mov	r0, r3
 800a004:	3718      	adds	r7, #24
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	20000130 	.word	0x20000130

0800a010 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a018:	2182      	movs	r1, #130	; 0x82
 800a01a:	4818      	ldr	r0, [pc, #96]	; (800a07c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a01c:	f000 fcd7 	bl	800a9ce <USBD_GetEpDesc>
 800a020:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a022:	2101      	movs	r1, #1
 800a024:	4815      	ldr	r0, [pc, #84]	; (800a07c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a026:	f000 fcd2 	bl	800a9ce <USBD_GetEpDesc>
 800a02a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a02c:	2181      	movs	r1, #129	; 0x81
 800a02e:	4813      	ldr	r0, [pc, #76]	; (800a07c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a030:	f000 fccd 	bl	800a9ce <USBD_GetEpDesc>
 800a034:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d002      	beq.n	800a042 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	2210      	movs	r2, #16
 800a040:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d006      	beq.n	800a056 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	2200      	movs	r2, #0
 800a04c:	711a      	strb	r2, [r3, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	f042 0202 	orr.w	r2, r2, #2
 800a054:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d006      	beq.n	800a06a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2200      	movs	r2, #0
 800a060:	711a      	strb	r2, [r3, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	f042 0202 	orr.w	r2, r2, #2
 800a068:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2243      	movs	r2, #67	; 0x43
 800a06e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a070:	4b02      	ldr	r3, [pc, #8]	; (800a07c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a072:	4618      	mov	r0, r3
 800a074:	3718      	adds	r7, #24
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	20000130 	.word	0x20000130

0800a080 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a088:	2182      	movs	r1, #130	; 0x82
 800a08a:	4818      	ldr	r0, [pc, #96]	; (800a0ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a08c:	f000 fc9f 	bl	800a9ce <USBD_GetEpDesc>
 800a090:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a092:	2101      	movs	r1, #1
 800a094:	4815      	ldr	r0, [pc, #84]	; (800a0ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a096:	f000 fc9a 	bl	800a9ce <USBD_GetEpDesc>
 800a09a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a09c:	2181      	movs	r1, #129	; 0x81
 800a09e:	4813      	ldr	r0, [pc, #76]	; (800a0ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a0a0:	f000 fc95 	bl	800a9ce <USBD_GetEpDesc>
 800a0a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d002      	beq.n	800a0b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	2210      	movs	r2, #16
 800a0b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d006      	beq.n	800a0c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0c0:	711a      	strb	r2, [r3, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d006      	beq.n	800a0da <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0d4:	711a      	strb	r2, [r3, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2243      	movs	r2, #67	; 0x43
 800a0de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a0e0:	4b02      	ldr	r3, [pc, #8]	; (800a0ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3718      	adds	r7, #24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	20000130 	.word	0x20000130

0800a0f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	220a      	movs	r2, #10
 800a0fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a0fe:	4b03      	ldr	r3, [pc, #12]	; (800a10c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a100:	4618      	mov	r0, r3
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	200000ec 	.word	0x200000ec

0800a110 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a120:	2303      	movs	r3, #3
 800a122:	e009      	b.n	800a138 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	33b0      	adds	r3, #176	; 0xb0
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	683a      	ldr	r2, [r7, #0]
 800a134:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a144:	b480      	push	{r7}
 800a146:	b087      	sub	sp, #28
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	32b0      	adds	r2, #176	; 0xb0
 800a15a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a15e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d101      	bne.n	800a16a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a166:	2303      	movs	r3, #3
 800a168:	e008      	b.n	800a17c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	371c      	adds	r7, #28
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	32b0      	adds	r2, #176	; 0xb0
 800a19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d101      	bne.n	800a1ac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	e004      	b.n	800a1b6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	683a      	ldr	r2, [r7, #0]
 800a1b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3714      	adds	r7, #20
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
	...

0800a1c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	32b0      	adds	r2, #176	; 0xb0
 800a1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	32b0      	adds	r2, #176	; 0xb0
 800a1e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d101      	bne.n	800a1f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e018      	b.n	800a224 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	7c1b      	ldrb	r3, [r3, #16]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10a      	bne.n	800a210 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a1fa:	4b0c      	ldr	r3, [pc, #48]	; (800a22c <USBD_CDC_ReceivePacket+0x68>)
 800a1fc:	7819      	ldrb	r1, [r3, #0]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a204:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f005 fb35 	bl	800f878 <USBD_LL_PrepareReceive>
 800a20e:	e008      	b.n	800a222 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a210:	4b06      	ldr	r3, [pc, #24]	; (800a22c <USBD_CDC_ReceivePacket+0x68>)
 800a212:	7819      	ldrb	r1, [r3, #0]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a21a:	2340      	movs	r3, #64	; 0x40
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f005 fb2b 	bl	800f878 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20000174 	.word	0x20000174

0800a230 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	4613      	mov	r3, r2
 800a23c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d101      	bne.n	800a248 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a244:	2303      	movs	r3, #3
 800a246:	e01f      	b.n	800a288 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2200      	movs	r2, #0
 800a254:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2201      	movs	r2, #1
 800a272:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	79fa      	ldrb	r2, [r7, #7]
 800a27a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f005 f9a5 	bl	800f5cc <USBD_LL_Init>
 800a282:	4603      	mov	r3, r0
 800a284:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a286:	7dfb      	ldrb	r3, [r7, #23]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3718      	adds	r7, #24
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a29a:	2300      	movs	r3, #0
 800a29c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d101      	bne.n	800a2a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e025      	b.n	800a2f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	32ae      	adds	r2, #174	; 0xae
 800a2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00f      	beq.n	800a2e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	32ae      	adds	r2, #174	; 0xae
 800a2ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d4:	f107 020e 	add.w	r2, r7, #14
 800a2d8:	4610      	mov	r0, r2
 800a2da:	4798      	blx	r3
 800a2dc:	4602      	mov	r2, r0
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a2ea:	1c5a      	adds	r2, r3, #1
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f005 f9ad 	bl	800f664 <USBD_LL_Start>
 800a30a:	4603      	mov	r3, r0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a31c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a31e:	4618      	mov	r0, r3
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b084      	sub	sp, #16
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
 800a332:	460b      	mov	r3, r1
 800a334:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a340:	2b00      	cmp	r3, #0
 800a342:	d009      	beq.n	800a358 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	78fa      	ldrb	r2, [r7, #3]
 800a34e:	4611      	mov	r1, r2
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	4798      	blx	r3
 800a354:	4603      	mov	r3, r0
 800a356:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a358:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b084      	sub	sp, #16
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	460b      	mov	r3, r1
 800a36c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a36e:	2300      	movs	r3, #0
 800a370:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	78fa      	ldrb	r2, [r7, #3]
 800a37c:	4611      	mov	r1, r2
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	4798      	blx	r3
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a388:	2303      	movs	r3, #3
 800a38a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b084      	sub	sp, #16
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
 800a39e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3a6:	6839      	ldr	r1, [r7, #0]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f001 f90e 	bl	800b5ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a3bc:	461a      	mov	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a3ca:	f003 031f 	and.w	r3, r3, #31
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d01a      	beq.n	800a408 <USBD_LL_SetupStage+0x72>
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d822      	bhi.n	800a41c <USBD_LL_SetupStage+0x86>
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d002      	beq.n	800a3e0 <USBD_LL_SetupStage+0x4a>
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d00a      	beq.n	800a3f4 <USBD_LL_SetupStage+0x5e>
 800a3de:	e01d      	b.n	800a41c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 fb65 	bl	800aab8 <USBD_StdDevReq>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a3f2:	e020      	b.n	800a436 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 fbcd 	bl	800ab9c <USBD_StdItfReq>
 800a402:	4603      	mov	r3, r0
 800a404:	73fb      	strb	r3, [r7, #15]
      break;
 800a406:	e016      	b.n	800a436 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a40e:	4619      	mov	r1, r3
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 fc2f 	bl	800ac74 <USBD_StdEPReq>
 800a416:	4603      	mov	r3, r0
 800a418:	73fb      	strb	r3, [r7, #15]
      break;
 800a41a:	e00c      	b.n	800a436 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a422:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a426:	b2db      	uxtb	r3, r3
 800a428:	4619      	mov	r1, r3
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f005 f97a 	bl	800f724 <USBD_LL_StallEP>
 800a430:	4603      	mov	r3, r0
 800a432:	73fb      	strb	r3, [r7, #15]
      break;
 800a434:	bf00      	nop
  }

  return ret;
 800a436:	7bfb      	ldrb	r3, [r7, #15]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3710      	adds	r7, #16
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	460b      	mov	r3, r1
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a452:	7afb      	ldrb	r3, [r7, #11]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d16e      	bne.n	800a536 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a45e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a466:	2b03      	cmp	r3, #3
 800a468:	f040 8098 	bne.w	800a59c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	689a      	ldr	r2, [r3, #8]
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	429a      	cmp	r2, r3
 800a476:	d913      	bls.n	800a4a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	689a      	ldr	r2, [r3, #8]
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	1ad2      	subs	r2, r2, r3
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	68da      	ldr	r2, [r3, #12]
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	4293      	cmp	r3, r2
 800a490:	bf28      	it	cs
 800a492:	4613      	movcs	r3, r2
 800a494:	461a      	mov	r2, r3
 800a496:	6879      	ldr	r1, [r7, #4]
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f001 f98a 	bl	800b7b2 <USBD_CtlContinueRx>
 800a49e:	e07d      	b.n	800a59c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a4a6:	f003 031f 	and.w	r3, r3, #31
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d014      	beq.n	800a4d8 <USBD_LL_DataOutStage+0x98>
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	d81d      	bhi.n	800a4ee <USBD_LL_DataOutStage+0xae>
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d002      	beq.n	800a4bc <USBD_LL_DataOutStage+0x7c>
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d003      	beq.n	800a4c2 <USBD_LL_DataOutStage+0x82>
 800a4ba:	e018      	b.n	800a4ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	75bb      	strb	r3, [r7, #22]
            break;
 800a4c0:	e018      	b.n	800a4f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f000 fa64 	bl	800a99a <USBD_CoreFindIF>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	75bb      	strb	r3, [r7, #22]
            break;
 800a4d6:	e00d      	b.n	800a4f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f000 fa66 	bl	800a9b4 <USBD_CoreFindEP>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	75bb      	strb	r3, [r7, #22]
            break;
 800a4ec:	e002      	b.n	800a4f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	75bb      	strb	r3, [r7, #22]
            break;
 800a4f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a4f4:	7dbb      	ldrb	r3, [r7, #22]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d119      	bne.n	800a52e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b03      	cmp	r3, #3
 800a504:	d113      	bne.n	800a52e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a506:	7dba      	ldrb	r2, [r7, #22]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	32ae      	adds	r2, #174	; 0xae
 800a50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00b      	beq.n	800a52e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a516:	7dba      	ldrb	r2, [r7, #22]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a51e:	7dba      	ldrb	r2, [r7, #22]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	32ae      	adds	r2, #174	; 0xae
 800a524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f001 f950 	bl	800b7d4 <USBD_CtlSendStatus>
 800a534:	e032      	b.n	800a59c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a536:	7afb      	ldrb	r3, [r7, #11]
 800a538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	4619      	mov	r1, r3
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f000 fa37 	bl	800a9b4 <USBD_CoreFindEP>
 800a546:	4603      	mov	r3, r0
 800a548:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a54a:	7dbb      	ldrb	r3, [r7, #22]
 800a54c:	2bff      	cmp	r3, #255	; 0xff
 800a54e:	d025      	beq.n	800a59c <USBD_LL_DataOutStage+0x15c>
 800a550:	7dbb      	ldrb	r3, [r7, #22]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d122      	bne.n	800a59c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	2b03      	cmp	r3, #3
 800a560:	d117      	bne.n	800a592 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a562:	7dba      	ldrb	r2, [r7, #22]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	32ae      	adds	r2, #174	; 0xae
 800a568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00f      	beq.n	800a592 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a572:	7dba      	ldrb	r2, [r7, #22]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a57a:	7dba      	ldrb	r2, [r7, #22]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	32ae      	adds	r2, #174	; 0xae
 800a580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	7afa      	ldrb	r2, [r7, #11]
 800a588:	4611      	mov	r1, r2
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	4798      	blx	r3
 800a58e:	4603      	mov	r3, r0
 800a590:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a592:	7dfb      	ldrb	r3, [r7, #23]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d001      	beq.n	800a59c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a598:	7dfb      	ldrb	r3, [r7, #23]
 800a59a:	e000      	b.n	800a59e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3718      	adds	r7, #24
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b086      	sub	sp, #24
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	60f8      	str	r0, [r7, #12]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	607a      	str	r2, [r7, #4]
 800a5b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a5b4:	7afb      	ldrb	r3, [r7, #11]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d16f      	bne.n	800a69a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3314      	adds	r3, #20
 800a5be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	d15a      	bne.n	800a680 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	689a      	ldr	r2, [r3, #8]
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d914      	bls.n	800a600 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	689a      	ldr	r2, [r3, #8]
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	1ad2      	subs	r2, r2, r3
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	6879      	ldr	r1, [r7, #4]
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	f001 f8b2 	bl	800b756 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f005 f93d 	bl	800f878 <USBD_LL_PrepareReceive>
 800a5fe:	e03f      	b.n	800a680 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	68da      	ldr	r2, [r3, #12]
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d11c      	bne.n	800a646 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	685a      	ldr	r2, [r3, #4]
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a614:	429a      	cmp	r2, r3
 800a616:	d316      	bcc.n	800a646 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	685a      	ldr	r2, [r3, #4]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a622:	429a      	cmp	r2, r3
 800a624:	d20f      	bcs.n	800a646 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a626:	2200      	movs	r2, #0
 800a628:	2100      	movs	r1, #0
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	f001 f893 	bl	800b756 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a638:	2300      	movs	r3, #0
 800a63a:	2200      	movs	r2, #0
 800a63c:	2100      	movs	r1, #0
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f005 f91a 	bl	800f878 <USBD_LL_PrepareReceive>
 800a644:	e01c      	b.n	800a680 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	2b03      	cmp	r3, #3
 800a650:	d10f      	bne.n	800a672 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d009      	beq.n	800a672 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2200      	movs	r2, #0
 800a662:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a672:	2180      	movs	r1, #128	; 0x80
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f005 f855 	bl	800f724 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f001 f8bd 	bl	800b7fa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d03a      	beq.n	800a700 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f7ff fe42 	bl	800a314 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a698:	e032      	b.n	800a700 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a69a:	7afb      	ldrb	r3, [r7, #11]
 800a69c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 f985 	bl	800a9b4 <USBD_CoreFindEP>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6ae:	7dfb      	ldrb	r3, [r7, #23]
 800a6b0:	2bff      	cmp	r3, #255	; 0xff
 800a6b2:	d025      	beq.n	800a700 <USBD_LL_DataInStage+0x15a>
 800a6b4:	7dfb      	ldrb	r3, [r7, #23]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d122      	bne.n	800a700 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	2b03      	cmp	r3, #3
 800a6c4:	d11c      	bne.n	800a700 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a6c6:	7dfa      	ldrb	r2, [r7, #23]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	32ae      	adds	r2, #174	; 0xae
 800a6cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d014      	beq.n	800a700 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a6d6:	7dfa      	ldrb	r2, [r7, #23]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a6de:	7dfa      	ldrb	r2, [r7, #23]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	32ae      	adds	r2, #174	; 0xae
 800a6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	7afa      	ldrb	r2, [r7, #11]
 800a6ec:	4611      	mov	r1, r2
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	4798      	blx	r3
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a6f6:	7dbb      	ldrb	r3, [r7, #22]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d001      	beq.n	800a700 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a6fc:	7dbb      	ldrb	r3, [r7, #22]
 800a6fe:	e000      	b.n	800a702 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3718      	adds	r7, #24
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b084      	sub	sp, #16
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2201      	movs	r2, #1
 800a71a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a742:	2b00      	cmp	r3, #0
 800a744:	d014      	beq.n	800a770 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00e      	beq.n	800a770 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	6852      	ldr	r2, [r2, #4]
 800a75e:	b2d2      	uxtb	r2, r2
 800a760:	4611      	mov	r1, r2
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	4798      	blx	r3
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a76c:	2303      	movs	r3, #3
 800a76e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a770:	2340      	movs	r3, #64	; 0x40
 800a772:	2200      	movs	r2, #0
 800a774:	2100      	movs	r1, #0
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f004 ff8f 	bl	800f69a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2240      	movs	r2, #64	; 0x40
 800a788:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a78c:	2340      	movs	r3, #64	; 0x40
 800a78e:	2200      	movs	r2, #0
 800a790:	2180      	movs	r1, #128	; 0x80
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f004 ff81 	bl	800f69a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2240      	movs	r2, #64	; 0x40
 800a7a2:	621a      	str	r2, [r3, #32]

  return ret;
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a7ae:	b480      	push	{r7}
 800a7b0:	b083      	sub	sp, #12
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	78fa      	ldrb	r2, [r7, #3]
 800a7be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	370c      	adds	r7, #12
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a7ce:	b480      	push	{r7}
 800a7d0:	b083      	sub	sp, #12
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	2b04      	cmp	r3, #4
 800a7e0:	d006      	beq.n	800a7f0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7e8:	b2da      	uxtb	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2204      	movs	r2, #4
 800a7f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	370c      	adds	r7, #12
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr

0800a806 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a806:	b480      	push	{r7}
 800a808:	b083      	sub	sp, #12
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b04      	cmp	r3, #4
 800a818:	d106      	bne.n	800a828 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a820:	b2da      	uxtb	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	370c      	adds	r7, #12
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b082      	sub	sp, #8
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a844:	b2db      	uxtb	r3, r3
 800a846:	2b03      	cmp	r3, #3
 800a848:	d110      	bne.n	800a86c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a850:	2b00      	cmp	r3, #0
 800a852:	d00b      	beq.n	800a86c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a85a:	69db      	ldr	r3, [r3, #28]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d005      	beq.n	800a86c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a866:	69db      	ldr	r3, [r3, #28]
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}

0800a876 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a876:	b580      	push	{r7, lr}
 800a878:	b082      	sub	sp, #8
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
 800a87e:	460b      	mov	r3, r1
 800a880:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	32ae      	adds	r2, #174	; 0xae
 800a88c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d101      	bne.n	800a898 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a894:	2303      	movs	r3, #3
 800a896:	e01c      	b.n	800a8d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	2b03      	cmp	r3, #3
 800a8a2:	d115      	bne.n	800a8d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	32ae      	adds	r2, #174	; 0xae
 800a8ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8b2:	6a1b      	ldr	r3, [r3, #32]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00b      	beq.n	800a8d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	32ae      	adds	r2, #174	; 0xae
 800a8c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c6:	6a1b      	ldr	r3, [r3, #32]
 800a8c8:	78fa      	ldrb	r2, [r7, #3]
 800a8ca:	4611      	mov	r1, r2
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b082      	sub	sp, #8
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	32ae      	adds	r2, #174	; 0xae
 800a8f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d101      	bne.n	800a8fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	e01c      	b.n	800a936 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a902:	b2db      	uxtb	r3, r3
 800a904:	2b03      	cmp	r3, #3
 800a906:	d115      	bne.n	800a934 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	32ae      	adds	r2, #174	; 0xae
 800a912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00b      	beq.n	800a934 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	32ae      	adds	r2, #174	; 0xae
 800a926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92c:	78fa      	ldrb	r2, [r7, #3]
 800a92e:	4611      	mov	r1, r2
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a93e:	b480      	push	{r7}
 800a940:	b083      	sub	sp, #12
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a95c:	2300      	movs	r3, #0
 800a95e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00e      	beq.n	800a990 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	6852      	ldr	r2, [r2, #4]
 800a97e:	b2d2      	uxtb	r2, r2
 800a980:	4611      	mov	r1, r2
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	4798      	blx	r3
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d001      	beq.n	800a990 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a98c:	2303      	movs	r3, #3
 800a98e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a990:	7bfb      	ldrb	r3, [r7, #15]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a99a:	b480      	push	{r7}
 800a99c:	b083      	sub	sp, #12
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a9a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	460b      	mov	r3, r1
 800a9be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a9c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	370c      	adds	r7, #12
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b086      	sub	sp, #24
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	885b      	ldrh	r3, [r3, #2]
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d920      	bls.n	800aa38 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a9fe:	e013      	b.n	800aa28 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aa00:	f107 030a 	add.w	r3, r7, #10
 800aa04:	4619      	mov	r1, r3
 800aa06:	6978      	ldr	r0, [r7, #20]
 800aa08:	f000 f81b 	bl	800aa42 <USBD_GetNextDesc>
 800aa0c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	785b      	ldrb	r3, [r3, #1]
 800aa12:	2b05      	cmp	r3, #5
 800aa14:	d108      	bne.n	800aa28 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	789b      	ldrb	r3, [r3, #2]
 800aa1e:	78fa      	ldrb	r2, [r7, #3]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d008      	beq.n	800aa36 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800aa24:	2300      	movs	r3, #0
 800aa26:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	885b      	ldrh	r3, [r3, #2]
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	897b      	ldrh	r3, [r7, #10]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d8e5      	bhi.n	800aa00 <USBD_GetEpDesc+0x32>
 800aa34:	e000      	b.n	800aa38 <USBD_GetEpDesc+0x6a>
          break;
 800aa36:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aa38:	693b      	ldr	r3, [r7, #16]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3718      	adds	r7, #24
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b085      	sub	sp, #20
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	881a      	ldrh	r2, [r3, #0]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	4413      	add	r3, r2
 800aa5c:	b29a      	uxth	r2, r3
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	461a      	mov	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3714      	adds	r7, #20
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b087      	sub	sp, #28
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	3301      	adds	r3, #1
 800aa92:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aa9a:	8a3b      	ldrh	r3, [r7, #16]
 800aa9c:	021b      	lsls	r3, r3, #8
 800aa9e:	b21a      	sxth	r2, r3
 800aaa0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	b21b      	sxth	r3, r3
 800aaa8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aaaa:	89fb      	ldrh	r3, [r7, #14]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	371c      	adds	r7, #28
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aace:	2b40      	cmp	r3, #64	; 0x40
 800aad0:	d005      	beq.n	800aade <USBD_StdDevReq+0x26>
 800aad2:	2b40      	cmp	r3, #64	; 0x40
 800aad4:	d857      	bhi.n	800ab86 <USBD_StdDevReq+0xce>
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00f      	beq.n	800aafa <USBD_StdDevReq+0x42>
 800aada:	2b20      	cmp	r3, #32
 800aadc:	d153      	bne.n	800ab86 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	32ae      	adds	r2, #174	; 0xae
 800aae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	6839      	ldr	r1, [r7, #0]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	4798      	blx	r3
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	73fb      	strb	r3, [r7, #15]
      break;
 800aaf8:	e04a      	b.n	800ab90 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	785b      	ldrb	r3, [r3, #1]
 800aafe:	2b09      	cmp	r3, #9
 800ab00:	d83b      	bhi.n	800ab7a <USBD_StdDevReq+0xc2>
 800ab02:	a201      	add	r2, pc, #4	; (adr r2, 800ab08 <USBD_StdDevReq+0x50>)
 800ab04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab08:	0800ab5d 	.word	0x0800ab5d
 800ab0c:	0800ab71 	.word	0x0800ab71
 800ab10:	0800ab7b 	.word	0x0800ab7b
 800ab14:	0800ab67 	.word	0x0800ab67
 800ab18:	0800ab7b 	.word	0x0800ab7b
 800ab1c:	0800ab3b 	.word	0x0800ab3b
 800ab20:	0800ab31 	.word	0x0800ab31
 800ab24:	0800ab7b 	.word	0x0800ab7b
 800ab28:	0800ab53 	.word	0x0800ab53
 800ab2c:	0800ab45 	.word	0x0800ab45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ab30:	6839      	ldr	r1, [r7, #0]
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 fa3c 	bl	800afb0 <USBD_GetDescriptor>
          break;
 800ab38:	e024      	b.n	800ab84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ab3a:	6839      	ldr	r1, [r7, #0]
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 fba1 	bl	800b284 <USBD_SetAddress>
          break;
 800ab42:	e01f      	b.n	800ab84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fbe0 	bl	800b30c <USBD_SetConfig>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	73fb      	strb	r3, [r7, #15]
          break;
 800ab50:	e018      	b.n	800ab84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ab52:	6839      	ldr	r1, [r7, #0]
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fc83 	bl	800b460 <USBD_GetConfig>
          break;
 800ab5a:	e013      	b.n	800ab84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 fcb4 	bl	800b4cc <USBD_GetStatus>
          break;
 800ab64:	e00e      	b.n	800ab84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ab66:	6839      	ldr	r1, [r7, #0]
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 fce3 	bl	800b534 <USBD_SetFeature>
          break;
 800ab6e:	e009      	b.n	800ab84 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ab70:	6839      	ldr	r1, [r7, #0]
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 fd07 	bl	800b586 <USBD_ClrFeature>
          break;
 800ab78:	e004      	b.n	800ab84 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ab7a:	6839      	ldr	r1, [r7, #0]
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 fd5e 	bl	800b63e <USBD_CtlError>
          break;
 800ab82:	bf00      	nop
      }
      break;
 800ab84:	e004      	b.n	800ab90 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ab86:	6839      	ldr	r1, [r7, #0]
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 fd58 	bl	800b63e <USBD_CtlError>
      break;
 800ab8e:	bf00      	nop
  }

  return ret;
 800ab90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop

0800ab9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800abb2:	2b40      	cmp	r3, #64	; 0x40
 800abb4:	d005      	beq.n	800abc2 <USBD_StdItfReq+0x26>
 800abb6:	2b40      	cmp	r3, #64	; 0x40
 800abb8:	d852      	bhi.n	800ac60 <USBD_StdItfReq+0xc4>
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d001      	beq.n	800abc2 <USBD_StdItfReq+0x26>
 800abbe:	2b20      	cmp	r3, #32
 800abc0:	d14e      	bne.n	800ac60 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	3b01      	subs	r3, #1
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d840      	bhi.n	800ac52 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	889b      	ldrh	r3, [r3, #4]
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d836      	bhi.n	800ac48 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	889b      	ldrh	r3, [r3, #4]
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	4619      	mov	r1, r3
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f7ff fed9 	bl	800a99a <USBD_CoreFindIF>
 800abe8:	4603      	mov	r3, r0
 800abea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800abec:	7bbb      	ldrb	r3, [r7, #14]
 800abee:	2bff      	cmp	r3, #255	; 0xff
 800abf0:	d01d      	beq.n	800ac2e <USBD_StdItfReq+0x92>
 800abf2:	7bbb      	ldrb	r3, [r7, #14]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d11a      	bne.n	800ac2e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800abf8:	7bba      	ldrb	r2, [r7, #14]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	32ae      	adds	r2, #174	; 0xae
 800abfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d00f      	beq.n	800ac28 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ac08:	7bba      	ldrb	r2, [r7, #14]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ac10:	7bba      	ldrb	r2, [r7, #14]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	32ae      	adds	r2, #174	; 0xae
 800ac16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	6839      	ldr	r1, [r7, #0]
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	4798      	blx	r3
 800ac22:	4603      	mov	r3, r0
 800ac24:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac26:	e004      	b.n	800ac32 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac2c:	e001      	b.n	800ac32 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ac2e:	2303      	movs	r3, #3
 800ac30:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	88db      	ldrh	r3, [r3, #6]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d110      	bne.n	800ac5c <USBD_StdItfReq+0xc0>
 800ac3a:	7bfb      	ldrb	r3, [r7, #15]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10d      	bne.n	800ac5c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 fdc7 	bl	800b7d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ac46:	e009      	b.n	800ac5c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fcf7 	bl	800b63e <USBD_CtlError>
          break;
 800ac50:	e004      	b.n	800ac5c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ac52:	6839      	ldr	r1, [r7, #0]
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 fcf2 	bl	800b63e <USBD_CtlError>
          break;
 800ac5a:	e000      	b.n	800ac5e <USBD_StdItfReq+0xc2>
          break;
 800ac5c:	bf00      	nop
      }
      break;
 800ac5e:	e004      	b.n	800ac6a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ac60:	6839      	ldr	r1, [r7, #0]
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 fceb 	bl	800b63e <USBD_CtlError>
      break;
 800ac68:	bf00      	nop
  }

  return ret;
 800ac6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3710      	adds	r7, #16
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	889b      	ldrh	r3, [r3, #4]
 800ac86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac90:	2b40      	cmp	r3, #64	; 0x40
 800ac92:	d007      	beq.n	800aca4 <USBD_StdEPReq+0x30>
 800ac94:	2b40      	cmp	r3, #64	; 0x40
 800ac96:	f200 817f 	bhi.w	800af98 <USBD_StdEPReq+0x324>
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d02a      	beq.n	800acf4 <USBD_StdEPReq+0x80>
 800ac9e:	2b20      	cmp	r3, #32
 800aca0:	f040 817a 	bne.w	800af98 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aca4:	7bbb      	ldrb	r3, [r7, #14]
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f7ff fe83 	bl	800a9b4 <USBD_CoreFindEP>
 800acae:	4603      	mov	r3, r0
 800acb0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800acb2:	7b7b      	ldrb	r3, [r7, #13]
 800acb4:	2bff      	cmp	r3, #255	; 0xff
 800acb6:	f000 8174 	beq.w	800afa2 <USBD_StdEPReq+0x32e>
 800acba:	7b7b      	ldrb	r3, [r7, #13]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f040 8170 	bne.w	800afa2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800acc2:	7b7a      	ldrb	r2, [r7, #13]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800acca:	7b7a      	ldrb	r2, [r7, #13]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	32ae      	adds	r2, #174	; 0xae
 800acd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 8163 	beq.w	800afa2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800acdc:	7b7a      	ldrb	r2, [r7, #13]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	32ae      	adds	r2, #174	; 0xae
 800ace2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	6839      	ldr	r1, [r7, #0]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	4798      	blx	r3
 800acee:	4603      	mov	r3, r0
 800acf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800acf2:	e156      	b.n	800afa2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	785b      	ldrb	r3, [r3, #1]
 800acf8:	2b03      	cmp	r3, #3
 800acfa:	d008      	beq.n	800ad0e <USBD_StdEPReq+0x9a>
 800acfc:	2b03      	cmp	r3, #3
 800acfe:	f300 8145 	bgt.w	800af8c <USBD_StdEPReq+0x318>
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f000 809b 	beq.w	800ae3e <USBD_StdEPReq+0x1ca>
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d03c      	beq.n	800ad86 <USBD_StdEPReq+0x112>
 800ad0c:	e13e      	b.n	800af8c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	d002      	beq.n	800ad20 <USBD_StdEPReq+0xac>
 800ad1a:	2b03      	cmp	r3, #3
 800ad1c:	d016      	beq.n	800ad4c <USBD_StdEPReq+0xd8>
 800ad1e:	e02c      	b.n	800ad7a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad20:	7bbb      	ldrb	r3, [r7, #14]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00d      	beq.n	800ad42 <USBD_StdEPReq+0xce>
 800ad26:	7bbb      	ldrb	r3, [r7, #14]
 800ad28:	2b80      	cmp	r3, #128	; 0x80
 800ad2a:	d00a      	beq.n	800ad42 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad2c:	7bbb      	ldrb	r3, [r7, #14]
 800ad2e:	4619      	mov	r1, r3
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f004 fcf7 	bl	800f724 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad36:	2180      	movs	r1, #128	; 0x80
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f004 fcf3 	bl	800f724 <USBD_LL_StallEP>
 800ad3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad40:	e020      	b.n	800ad84 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fc7a 	bl	800b63e <USBD_CtlError>
              break;
 800ad4a:	e01b      	b.n	800ad84 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	885b      	ldrh	r3, [r3, #2]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10e      	bne.n	800ad72 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ad54:	7bbb      	ldrb	r3, [r7, #14]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00b      	beq.n	800ad72 <USBD_StdEPReq+0xfe>
 800ad5a:	7bbb      	ldrb	r3, [r7, #14]
 800ad5c:	2b80      	cmp	r3, #128	; 0x80
 800ad5e:	d008      	beq.n	800ad72 <USBD_StdEPReq+0xfe>
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	88db      	ldrh	r3, [r3, #6]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d104      	bne.n	800ad72 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad68:	7bbb      	ldrb	r3, [r7, #14]
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f004 fcd9 	bl	800f724 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 fd2e 	bl	800b7d4 <USBD_CtlSendStatus>

              break;
 800ad78:	e004      	b.n	800ad84 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 fc5e 	bl	800b63e <USBD_CtlError>
              break;
 800ad82:	bf00      	nop
          }
          break;
 800ad84:	e107      	b.n	800af96 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d002      	beq.n	800ad98 <USBD_StdEPReq+0x124>
 800ad92:	2b03      	cmp	r3, #3
 800ad94:	d016      	beq.n	800adc4 <USBD_StdEPReq+0x150>
 800ad96:	e04b      	b.n	800ae30 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad98:	7bbb      	ldrb	r3, [r7, #14]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00d      	beq.n	800adba <USBD_StdEPReq+0x146>
 800ad9e:	7bbb      	ldrb	r3, [r7, #14]
 800ada0:	2b80      	cmp	r3, #128	; 0x80
 800ada2:	d00a      	beq.n	800adba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ada4:	7bbb      	ldrb	r3, [r7, #14]
 800ada6:	4619      	mov	r1, r3
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f004 fcbb 	bl	800f724 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800adae:	2180      	movs	r1, #128	; 0x80
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f004 fcb7 	bl	800f724 <USBD_LL_StallEP>
 800adb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800adb8:	e040      	b.n	800ae3c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fc3e 	bl	800b63e <USBD_CtlError>
              break;
 800adc2:	e03b      	b.n	800ae3c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	885b      	ldrh	r3, [r3, #2]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d136      	bne.n	800ae3a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800adcc:	7bbb      	ldrb	r3, [r7, #14]
 800adce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800add2:	2b00      	cmp	r3, #0
 800add4:	d004      	beq.n	800ade0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800add6:	7bbb      	ldrb	r3, [r7, #14]
 800add8:	4619      	mov	r1, r3
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f004 fcc1 	bl	800f762 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fcf7 	bl	800b7d4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ade6:	7bbb      	ldrb	r3, [r7, #14]
 800ade8:	4619      	mov	r1, r3
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7ff fde2 	bl	800a9b4 <USBD_CoreFindEP>
 800adf0:	4603      	mov	r3, r0
 800adf2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800adf4:	7b7b      	ldrb	r3, [r7, #13]
 800adf6:	2bff      	cmp	r3, #255	; 0xff
 800adf8:	d01f      	beq.n	800ae3a <USBD_StdEPReq+0x1c6>
 800adfa:	7b7b      	ldrb	r3, [r7, #13]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d11c      	bne.n	800ae3a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ae00:	7b7a      	ldrb	r2, [r7, #13]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ae08:	7b7a      	ldrb	r2, [r7, #13]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	32ae      	adds	r2, #174	; 0xae
 800ae0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d010      	beq.n	800ae3a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae18:	7b7a      	ldrb	r2, [r7, #13]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	32ae      	adds	r2, #174	; 0xae
 800ae1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	4798      	blx	r3
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ae2e:	e004      	b.n	800ae3a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ae30:	6839      	ldr	r1, [r7, #0]
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 fc03 	bl	800b63e <USBD_CtlError>
              break;
 800ae38:	e000      	b.n	800ae3c <USBD_StdEPReq+0x1c8>
              break;
 800ae3a:	bf00      	nop
          }
          break;
 800ae3c:	e0ab      	b.n	800af96 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	d002      	beq.n	800ae50 <USBD_StdEPReq+0x1dc>
 800ae4a:	2b03      	cmp	r3, #3
 800ae4c:	d032      	beq.n	800aeb4 <USBD_StdEPReq+0x240>
 800ae4e:	e097      	b.n	800af80 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae50:	7bbb      	ldrb	r3, [r7, #14]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d007      	beq.n	800ae66 <USBD_StdEPReq+0x1f2>
 800ae56:	7bbb      	ldrb	r3, [r7, #14]
 800ae58:	2b80      	cmp	r3, #128	; 0x80
 800ae5a:	d004      	beq.n	800ae66 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ae5c:	6839      	ldr	r1, [r7, #0]
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fbed 	bl	800b63e <USBD_CtlError>
                break;
 800ae64:	e091      	b.n	800af8a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	da0b      	bge.n	800ae86 <USBD_StdEPReq+0x212>
 800ae6e:	7bbb      	ldrb	r3, [r7, #14]
 800ae70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae74:	4613      	mov	r3, r2
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	4413      	add	r3, r2
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	3310      	adds	r3, #16
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	4413      	add	r3, r2
 800ae82:	3304      	adds	r3, #4
 800ae84:	e00b      	b.n	800ae9e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae86:	7bbb      	ldrb	r3, [r7, #14]
 800ae88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	4413      	add	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	2200      	movs	r2, #0
 800aea4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	2202      	movs	r2, #2
 800aeaa:	4619      	mov	r1, r3
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 fc37 	bl	800b720 <USBD_CtlSendData>
              break;
 800aeb2:	e06a      	b.n	800af8a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aeb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	da11      	bge.n	800aee0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aebc:	7bbb      	ldrb	r3, [r7, #14]
 800aebe:	f003 020f 	and.w	r2, r3, #15
 800aec2:	6879      	ldr	r1, [r7, #4]
 800aec4:	4613      	mov	r3, r2
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	4413      	add	r3, r2
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	440b      	add	r3, r1
 800aece:	3324      	adds	r3, #36	; 0x24
 800aed0:	881b      	ldrh	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d117      	bne.n	800af06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aed6:	6839      	ldr	r1, [r7, #0]
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 fbb0 	bl	800b63e <USBD_CtlError>
                  break;
 800aede:	e054      	b.n	800af8a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aee0:	7bbb      	ldrb	r3, [r7, #14]
 800aee2:	f003 020f 	and.w	r2, r3, #15
 800aee6:	6879      	ldr	r1, [r7, #4]
 800aee8:	4613      	mov	r3, r2
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	440b      	add	r3, r1
 800aef2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aef6:	881b      	ldrh	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d104      	bne.n	800af06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aefc:	6839      	ldr	r1, [r7, #0]
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 fb9d 	bl	800b63e <USBD_CtlError>
                  break;
 800af04:	e041      	b.n	800af8a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	da0b      	bge.n	800af26 <USBD_StdEPReq+0x2b2>
 800af0e:	7bbb      	ldrb	r3, [r7, #14]
 800af10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af14:	4613      	mov	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4413      	add	r3, r2
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	3310      	adds	r3, #16
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	4413      	add	r3, r2
 800af22:	3304      	adds	r3, #4
 800af24:	e00b      	b.n	800af3e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af26:	7bbb      	ldrb	r3, [r7, #14]
 800af28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af2c:	4613      	mov	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4413      	add	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	4413      	add	r3, r2
 800af3c:	3304      	adds	r3, #4
 800af3e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800af40:	7bbb      	ldrb	r3, [r7, #14]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d002      	beq.n	800af4c <USBD_StdEPReq+0x2d8>
 800af46:	7bbb      	ldrb	r3, [r7, #14]
 800af48:	2b80      	cmp	r3, #128	; 0x80
 800af4a:	d103      	bne.n	800af54 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	2200      	movs	r2, #0
 800af50:	601a      	str	r2, [r3, #0]
 800af52:	e00e      	b.n	800af72 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800af54:	7bbb      	ldrb	r3, [r7, #14]
 800af56:	4619      	mov	r1, r3
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f004 fc21 	bl	800f7a0 <USBD_LL_IsStallEP>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d003      	beq.n	800af6c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	2201      	movs	r2, #1
 800af68:	601a      	str	r2, [r3, #0]
 800af6a:	e002      	b.n	800af72 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	2200      	movs	r2, #0
 800af70:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	2202      	movs	r2, #2
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 fbd1 	bl	800b720 <USBD_CtlSendData>
              break;
 800af7e:	e004      	b.n	800af8a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fb5b 	bl	800b63e <USBD_CtlError>
              break;
 800af88:	bf00      	nop
          }
          break;
 800af8a:	e004      	b.n	800af96 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800af8c:	6839      	ldr	r1, [r7, #0]
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 fb55 	bl	800b63e <USBD_CtlError>
          break;
 800af94:	bf00      	nop
      }
      break;
 800af96:	e005      	b.n	800afa4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fb4f 	bl	800b63e <USBD_CtlError>
      break;
 800afa0:	e000      	b.n	800afa4 <USBD_StdEPReq+0x330>
      break;
 800afa2:	bf00      	nop
  }

  return ret;
 800afa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
	...

0800afb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800afba:	2300      	movs	r3, #0
 800afbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800afbe:	2300      	movs	r3, #0
 800afc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800afc2:	2300      	movs	r3, #0
 800afc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	885b      	ldrh	r3, [r3, #2]
 800afca:	0a1b      	lsrs	r3, r3, #8
 800afcc:	b29b      	uxth	r3, r3
 800afce:	3b01      	subs	r3, #1
 800afd0:	2b06      	cmp	r3, #6
 800afd2:	f200 8128 	bhi.w	800b226 <USBD_GetDescriptor+0x276>
 800afd6:	a201      	add	r2, pc, #4	; (adr r2, 800afdc <USBD_GetDescriptor+0x2c>)
 800afd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afdc:	0800aff9 	.word	0x0800aff9
 800afe0:	0800b011 	.word	0x0800b011
 800afe4:	0800b051 	.word	0x0800b051
 800afe8:	0800b227 	.word	0x0800b227
 800afec:	0800b227 	.word	0x0800b227
 800aff0:	0800b1c7 	.word	0x0800b1c7
 800aff4:	0800b1f3 	.word	0x0800b1f3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	7c12      	ldrb	r2, [r2, #16]
 800b004:	f107 0108 	add.w	r1, r7, #8
 800b008:	4610      	mov	r0, r2
 800b00a:	4798      	blx	r3
 800b00c:	60f8      	str	r0, [r7, #12]
      break;
 800b00e:	e112      	b.n	800b236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	7c1b      	ldrb	r3, [r3, #16]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10d      	bne.n	800b034 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b020:	f107 0208 	add.w	r2, r7, #8
 800b024:	4610      	mov	r0, r2
 800b026:	4798      	blx	r3
 800b028:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	3301      	adds	r3, #1
 800b02e:	2202      	movs	r2, #2
 800b030:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b032:	e100      	b.n	800b236 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b03c:	f107 0208 	add.w	r2, r7, #8
 800b040:	4610      	mov	r0, r2
 800b042:	4798      	blx	r3
 800b044:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	3301      	adds	r3, #1
 800b04a:	2202      	movs	r2, #2
 800b04c:	701a      	strb	r2, [r3, #0]
      break;
 800b04e:	e0f2      	b.n	800b236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	885b      	ldrh	r3, [r3, #2]
 800b054:	b2db      	uxtb	r3, r3
 800b056:	2b05      	cmp	r3, #5
 800b058:	f200 80ac 	bhi.w	800b1b4 <USBD_GetDescriptor+0x204>
 800b05c:	a201      	add	r2, pc, #4	; (adr r2, 800b064 <USBD_GetDescriptor+0xb4>)
 800b05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b062:	bf00      	nop
 800b064:	0800b07d 	.word	0x0800b07d
 800b068:	0800b0b1 	.word	0x0800b0b1
 800b06c:	0800b0e5 	.word	0x0800b0e5
 800b070:	0800b119 	.word	0x0800b119
 800b074:	0800b14d 	.word	0x0800b14d
 800b078:	0800b181 	.word	0x0800b181
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00b      	beq.n	800b0a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	7c12      	ldrb	r2, [r2, #16]
 800b094:	f107 0108 	add.w	r1, r7, #8
 800b098:	4610      	mov	r0, r2
 800b09a:	4798      	blx	r3
 800b09c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b09e:	e091      	b.n	800b1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0a0:	6839      	ldr	r1, [r7, #0]
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 facb 	bl	800b63e <USBD_CtlError>
            err++;
 800b0a8:	7afb      	ldrb	r3, [r7, #11]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	72fb      	strb	r3, [r7, #11]
          break;
 800b0ae:	e089      	b.n	800b1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00b      	beq.n	800b0d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	7c12      	ldrb	r2, [r2, #16]
 800b0c8:	f107 0108 	add.w	r1, r7, #8
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	4798      	blx	r3
 800b0d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0d2:	e077      	b.n	800b1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0d4:	6839      	ldr	r1, [r7, #0]
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 fab1 	bl	800b63e <USBD_CtlError>
            err++;
 800b0dc:	7afb      	ldrb	r3, [r7, #11]
 800b0de:	3301      	adds	r3, #1
 800b0e0:	72fb      	strb	r3, [r7, #11]
          break;
 800b0e2:	e06f      	b.n	800b1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ea:	68db      	ldr	r3, [r3, #12]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00b      	beq.n	800b108 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	7c12      	ldrb	r2, [r2, #16]
 800b0fc:	f107 0108 	add.w	r1, r7, #8
 800b100:	4610      	mov	r0, r2
 800b102:	4798      	blx	r3
 800b104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b106:	e05d      	b.n	800b1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fa97 	bl	800b63e <USBD_CtlError>
            err++;
 800b110:	7afb      	ldrb	r3, [r7, #11]
 800b112:	3301      	adds	r3, #1
 800b114:	72fb      	strb	r3, [r7, #11]
          break;
 800b116:	e055      	b.n	800b1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00b      	beq.n	800b13c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b12a:	691b      	ldr	r3, [r3, #16]
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	7c12      	ldrb	r2, [r2, #16]
 800b130:	f107 0108 	add.w	r1, r7, #8
 800b134:	4610      	mov	r0, r2
 800b136:	4798      	blx	r3
 800b138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b13a:	e043      	b.n	800b1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b13c:	6839      	ldr	r1, [r7, #0]
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 fa7d 	bl	800b63e <USBD_CtlError>
            err++;
 800b144:	7afb      	ldrb	r3, [r7, #11]
 800b146:	3301      	adds	r3, #1
 800b148:	72fb      	strb	r3, [r7, #11]
          break;
 800b14a:	e03b      	b.n	800b1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b152:	695b      	ldr	r3, [r3, #20]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00b      	beq.n	800b170 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b15e:	695b      	ldr	r3, [r3, #20]
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	7c12      	ldrb	r2, [r2, #16]
 800b164:	f107 0108 	add.w	r1, r7, #8
 800b168:	4610      	mov	r0, r2
 800b16a:	4798      	blx	r3
 800b16c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b16e:	e029      	b.n	800b1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b170:	6839      	ldr	r1, [r7, #0]
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fa63 	bl	800b63e <USBD_CtlError>
            err++;
 800b178:	7afb      	ldrb	r3, [r7, #11]
 800b17a:	3301      	adds	r3, #1
 800b17c:	72fb      	strb	r3, [r7, #11]
          break;
 800b17e:	e021      	b.n	800b1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b186:	699b      	ldr	r3, [r3, #24]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00b      	beq.n	800b1a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b192:	699b      	ldr	r3, [r3, #24]
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	7c12      	ldrb	r2, [r2, #16]
 800b198:	f107 0108 	add.w	r1, r7, #8
 800b19c:	4610      	mov	r0, r2
 800b19e:	4798      	blx	r3
 800b1a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1a2:	e00f      	b.n	800b1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1a4:	6839      	ldr	r1, [r7, #0]
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 fa49 	bl	800b63e <USBD_CtlError>
            err++;
 800b1ac:	7afb      	ldrb	r3, [r7, #11]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b1b2:	e007      	b.n	800b1c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b1b4:	6839      	ldr	r1, [r7, #0]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fa41 	bl	800b63e <USBD_CtlError>
          err++;
 800b1bc:	7afb      	ldrb	r3, [r7, #11]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b1c2:	bf00      	nop
      }
      break;
 800b1c4:	e037      	b.n	800b236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	7c1b      	ldrb	r3, [r3, #16]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d109      	bne.n	800b1e2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d6:	f107 0208 	add.w	r2, r7, #8
 800b1da:	4610      	mov	r0, r2
 800b1dc:	4798      	blx	r3
 800b1de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b1e0:	e029      	b.n	800b236 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b1e2:	6839      	ldr	r1, [r7, #0]
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 fa2a 	bl	800b63e <USBD_CtlError>
        err++;
 800b1ea:	7afb      	ldrb	r3, [r7, #11]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	72fb      	strb	r3, [r7, #11]
      break;
 800b1f0:	e021      	b.n	800b236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	7c1b      	ldrb	r3, [r3, #16]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d10d      	bne.n	800b216 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b202:	f107 0208 	add.w	r2, r7, #8
 800b206:	4610      	mov	r0, r2
 800b208:	4798      	blx	r3
 800b20a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	3301      	adds	r3, #1
 800b210:	2207      	movs	r2, #7
 800b212:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b214:	e00f      	b.n	800b236 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b216:	6839      	ldr	r1, [r7, #0]
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 fa10 	bl	800b63e <USBD_CtlError>
        err++;
 800b21e:	7afb      	ldrb	r3, [r7, #11]
 800b220:	3301      	adds	r3, #1
 800b222:	72fb      	strb	r3, [r7, #11]
      break;
 800b224:	e007      	b.n	800b236 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b226:	6839      	ldr	r1, [r7, #0]
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 fa08 	bl	800b63e <USBD_CtlError>
      err++;
 800b22e:	7afb      	ldrb	r3, [r7, #11]
 800b230:	3301      	adds	r3, #1
 800b232:	72fb      	strb	r3, [r7, #11]
      break;
 800b234:	bf00      	nop
  }

  if (err != 0U)
 800b236:	7afb      	ldrb	r3, [r7, #11]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d11e      	bne.n	800b27a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	88db      	ldrh	r3, [r3, #6]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d016      	beq.n	800b272 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b244:	893b      	ldrh	r3, [r7, #8]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00e      	beq.n	800b268 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	88da      	ldrh	r2, [r3, #6]
 800b24e:	893b      	ldrh	r3, [r7, #8]
 800b250:	4293      	cmp	r3, r2
 800b252:	bf28      	it	cs
 800b254:	4613      	movcs	r3, r2
 800b256:	b29b      	uxth	r3, r3
 800b258:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b25a:	893b      	ldrh	r3, [r7, #8]
 800b25c:	461a      	mov	r2, r3
 800b25e:	68f9      	ldr	r1, [r7, #12]
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 fa5d 	bl	800b720 <USBD_CtlSendData>
 800b266:	e009      	b.n	800b27c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b268:	6839      	ldr	r1, [r7, #0]
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f9e7 	bl	800b63e <USBD_CtlError>
 800b270:	e004      	b.n	800b27c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 faae 	bl	800b7d4 <USBD_CtlSendStatus>
 800b278:	e000      	b.n	800b27c <USBD_GetDescriptor+0x2cc>
    return;
 800b27a:	bf00      	nop
  }
}
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop

0800b284 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	889b      	ldrh	r3, [r3, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d131      	bne.n	800b2fa <USBD_SetAddress+0x76>
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	88db      	ldrh	r3, [r3, #6]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d12d      	bne.n	800b2fa <USBD_SetAddress+0x76>
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	885b      	ldrh	r3, [r3, #2]
 800b2a2:	2b7f      	cmp	r3, #127	; 0x7f
 800b2a4:	d829      	bhi.n	800b2fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	885b      	ldrh	r3, [r3, #2]
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	2b03      	cmp	r3, #3
 800b2bc:	d104      	bne.n	800b2c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b2be:	6839      	ldr	r1, [r7, #0]
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f9bc 	bl	800b63e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2c6:	e01d      	b.n	800b304 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	7bfa      	ldrb	r2, [r7, #15]
 800b2cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b2d0:	7bfb      	ldrb	r3, [r7, #15]
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f004 fa8f 	bl	800f7f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 fa7a 	bl	800b7d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b2e0:	7bfb      	ldrb	r3, [r7, #15]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d004      	beq.n	800b2f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2202      	movs	r2, #2
 800b2ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2ee:	e009      	b.n	800b304 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2f8:	e004      	b.n	800b304 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 f99e 	bl	800b63e <USBD_CtlError>
  }
}
 800b302:	bf00      	nop
 800b304:	bf00      	nop
 800b306:	3710      	adds	r7, #16
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b316:	2300      	movs	r3, #0
 800b318:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	885b      	ldrh	r3, [r3, #2]
 800b31e:	b2da      	uxtb	r2, r3
 800b320:	4b4e      	ldr	r3, [pc, #312]	; (800b45c <USBD_SetConfig+0x150>)
 800b322:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b324:	4b4d      	ldr	r3, [pc, #308]	; (800b45c <USBD_SetConfig+0x150>)
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d905      	bls.n	800b338 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b32c:	6839      	ldr	r1, [r7, #0]
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 f985 	bl	800b63e <USBD_CtlError>
    return USBD_FAIL;
 800b334:	2303      	movs	r3, #3
 800b336:	e08c      	b.n	800b452 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	2b02      	cmp	r3, #2
 800b342:	d002      	beq.n	800b34a <USBD_SetConfig+0x3e>
 800b344:	2b03      	cmp	r3, #3
 800b346:	d029      	beq.n	800b39c <USBD_SetConfig+0x90>
 800b348:	e075      	b.n	800b436 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b34a:	4b44      	ldr	r3, [pc, #272]	; (800b45c <USBD_SetConfig+0x150>)
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d020      	beq.n	800b394 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b352:	4b42      	ldr	r3, [pc, #264]	; (800b45c <USBD_SetConfig+0x150>)
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	461a      	mov	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b35c:	4b3f      	ldr	r3, [pc, #252]	; (800b45c <USBD_SetConfig+0x150>)
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	4619      	mov	r1, r3
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f7fe ffe1 	bl	800a32a <USBD_SetClassConfig>
 800b368:	4603      	mov	r3, r0
 800b36a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b36c:	7bfb      	ldrb	r3, [r7, #15]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d008      	beq.n	800b384 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b372:	6839      	ldr	r1, [r7, #0]
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 f962 	bl	800b63e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2202      	movs	r2, #2
 800b37e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b382:	e065      	b.n	800b450 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 fa25 	bl	800b7d4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2203      	movs	r2, #3
 800b38e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b392:	e05d      	b.n	800b450 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 fa1d 	bl	800b7d4 <USBD_CtlSendStatus>
      break;
 800b39a:	e059      	b.n	800b450 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b39c:	4b2f      	ldr	r3, [pc, #188]	; (800b45c <USBD_SetConfig+0x150>)
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d112      	bne.n	800b3ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2202      	movs	r2, #2
 800b3a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b3ac:	4b2b      	ldr	r3, [pc, #172]	; (800b45c <USBD_SetConfig+0x150>)
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b3b6:	4b29      	ldr	r3, [pc, #164]	; (800b45c <USBD_SetConfig+0x150>)
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f7fe ffd0 	bl	800a362 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 fa06 	bl	800b7d4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b3c8:	e042      	b.n	800b450 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b3ca:	4b24      	ldr	r3, [pc, #144]	; (800b45c <USBD_SetConfig+0x150>)
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d02a      	beq.n	800b42e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	4619      	mov	r1, r3
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f7fe ffbe 	bl	800a362 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b3e6:	4b1d      	ldr	r3, [pc, #116]	; (800b45c <USBD_SetConfig+0x150>)
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b3f0:	4b1a      	ldr	r3, [pc, #104]	; (800b45c <USBD_SetConfig+0x150>)
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f7fe ff97 	bl	800a32a <USBD_SetClassConfig>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b400:	7bfb      	ldrb	r3, [r7, #15]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00f      	beq.n	800b426 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b406:	6839      	ldr	r1, [r7, #0]
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 f918 	bl	800b63e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	b2db      	uxtb	r3, r3
 800b414:	4619      	mov	r1, r3
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7fe ffa3 	bl	800a362 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2202      	movs	r2, #2
 800b420:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b424:	e014      	b.n	800b450 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 f9d4 	bl	800b7d4 <USBD_CtlSendStatus>
      break;
 800b42c:	e010      	b.n	800b450 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 f9d0 	bl	800b7d4 <USBD_CtlSendStatus>
      break;
 800b434:	e00c      	b.n	800b450 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 f900 	bl	800b63e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b43e:	4b07      	ldr	r3, [pc, #28]	; (800b45c <USBD_SetConfig+0x150>)
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	4619      	mov	r1, r3
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f7fe ff8c 	bl	800a362 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b44a:	2303      	movs	r3, #3
 800b44c:	73fb      	strb	r3, [r7, #15]
      break;
 800b44e:	bf00      	nop
  }

  return ret;
 800b450:	7bfb      	ldrb	r3, [r7, #15]
}
 800b452:	4618      	mov	r0, r3
 800b454:	3710      	adds	r7, #16
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	20003338 	.word	0x20003338

0800b460 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	88db      	ldrh	r3, [r3, #6]
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d004      	beq.n	800b47c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b472:	6839      	ldr	r1, [r7, #0]
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 f8e2 	bl	800b63e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b47a:	e023      	b.n	800b4c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b482:	b2db      	uxtb	r3, r3
 800b484:	2b02      	cmp	r3, #2
 800b486:	dc02      	bgt.n	800b48e <USBD_GetConfig+0x2e>
 800b488:	2b00      	cmp	r3, #0
 800b48a:	dc03      	bgt.n	800b494 <USBD_GetConfig+0x34>
 800b48c:	e015      	b.n	800b4ba <USBD_GetConfig+0x5a>
 800b48e:	2b03      	cmp	r3, #3
 800b490:	d00b      	beq.n	800b4aa <USBD_GetConfig+0x4a>
 800b492:	e012      	b.n	800b4ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	3308      	adds	r3, #8
 800b49e:	2201      	movs	r2, #1
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 f93c 	bl	800b720 <USBD_CtlSendData>
        break;
 800b4a8:	e00c      	b.n	800b4c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	3304      	adds	r3, #4
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 f934 	bl	800b720 <USBD_CtlSendData>
        break;
 800b4b8:	e004      	b.n	800b4c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b4ba:	6839      	ldr	r1, [r7, #0]
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 f8be 	bl	800b63e <USBD_CtlError>
        break;
 800b4c2:	bf00      	nop
}
 800b4c4:	bf00      	nop
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	3b01      	subs	r3, #1
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d81e      	bhi.n	800b522 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	88db      	ldrh	r3, [r3, #6]
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d004      	beq.n	800b4f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b4ec:	6839      	ldr	r1, [r7, #0]
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 f8a5 	bl	800b63e <USBD_CtlError>
        break;
 800b4f4:	e01a      	b.n	800b52c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b502:	2b00      	cmp	r3, #0
 800b504:	d005      	beq.n	800b512 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	f043 0202 	orr.w	r2, r3, #2
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	330c      	adds	r3, #12
 800b516:	2202      	movs	r2, #2
 800b518:	4619      	mov	r1, r3
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f900 	bl	800b720 <USBD_CtlSendData>
      break;
 800b520:	e004      	b.n	800b52c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b522:	6839      	ldr	r1, [r7, #0]
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 f88a 	bl	800b63e <USBD_CtlError>
      break;
 800b52a:	bf00      	nop
  }
}
 800b52c:	bf00      	nop
 800b52e:	3708      	adds	r7, #8
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	885b      	ldrh	r3, [r3, #2]
 800b542:	2b01      	cmp	r3, #1
 800b544:	d107      	bne.n	800b556 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2201      	movs	r2, #1
 800b54a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f940 	bl	800b7d4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b554:	e013      	b.n	800b57e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	885b      	ldrh	r3, [r3, #2]
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	d10b      	bne.n	800b576 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	889b      	ldrh	r3, [r3, #4]
 800b562:	0a1b      	lsrs	r3, r3, #8
 800b564:	b29b      	uxth	r3, r3
 800b566:	b2da      	uxtb	r2, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 f930 	bl	800b7d4 <USBD_CtlSendStatus>
}
 800b574:	e003      	b.n	800b57e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b576:	6839      	ldr	r1, [r7, #0]
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 f860 	bl	800b63e <USBD_CtlError>
}
 800b57e:	bf00      	nop
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b082      	sub	sp, #8
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
 800b58e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b596:	b2db      	uxtb	r3, r3
 800b598:	3b01      	subs	r3, #1
 800b59a:	2b02      	cmp	r3, #2
 800b59c:	d80b      	bhi.n	800b5b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	885b      	ldrh	r3, [r3, #2]
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d10c      	bne.n	800b5c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 f910 	bl	800b7d4 <USBD_CtlSendStatus>
      }
      break;
 800b5b4:	e004      	b.n	800b5c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b5b6:	6839      	ldr	r1, [r7, #0]
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f840 	bl	800b63e <USBD_CtlError>
      break;
 800b5be:	e000      	b.n	800b5c2 <USBD_ClrFeature+0x3c>
      break;
 800b5c0:	bf00      	nop
  }
}
 800b5c2:	bf00      	nop
 800b5c4:	3708      	adds	r7, #8
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b084      	sub	sp, #16
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	781a      	ldrb	r2, [r3, #0]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	781a      	ldrb	r2, [r3, #0]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f7ff fa41 	bl	800aa7c <SWAPBYTE>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	3301      	adds	r3, #1
 800b606:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	3301      	adds	r3, #1
 800b60c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	f7ff fa34 	bl	800aa7c <SWAPBYTE>
 800b614:	4603      	mov	r3, r0
 800b616:	461a      	mov	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	3301      	adds	r3, #1
 800b620:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	3301      	adds	r3, #1
 800b626:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f7ff fa27 	bl	800aa7c <SWAPBYTE>
 800b62e:	4603      	mov	r3, r0
 800b630:	461a      	mov	r2, r3
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	80da      	strh	r2, [r3, #6]
}
 800b636:	bf00      	nop
 800b638:	3710      	adds	r7, #16
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b63e:	b580      	push	{r7, lr}
 800b640:	b082      	sub	sp, #8
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
 800b646:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b648:	2180      	movs	r1, #128	; 0x80
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f004 f86a 	bl	800f724 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b650:	2100      	movs	r1, #0
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f004 f866 	bl	800f724 <USBD_LL_StallEP>
}
 800b658:	bf00      	nop
 800b65a:	3708      	adds	r7, #8
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b66c:	2300      	movs	r3, #0
 800b66e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d036      	beq.n	800b6e4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b67a:	6938      	ldr	r0, [r7, #16]
 800b67c:	f000 f836 	bl	800b6ec <USBD_GetLen>
 800b680:	4603      	mov	r3, r0
 800b682:	3301      	adds	r3, #1
 800b684:	b29b      	uxth	r3, r3
 800b686:	005b      	lsls	r3, r3, #1
 800b688:	b29a      	uxth	r2, r3
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b68e:	7dfb      	ldrb	r3, [r7, #23]
 800b690:	68ba      	ldr	r2, [r7, #8]
 800b692:	4413      	add	r3, r2
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	7812      	ldrb	r2, [r2, #0]
 800b698:	701a      	strb	r2, [r3, #0]
  idx++;
 800b69a:	7dfb      	ldrb	r3, [r7, #23]
 800b69c:	3301      	adds	r3, #1
 800b69e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b6a0:	7dfb      	ldrb	r3, [r7, #23]
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	2203      	movs	r2, #3
 800b6a8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b6aa:	7dfb      	ldrb	r3, [r7, #23]
 800b6ac:	3301      	adds	r3, #1
 800b6ae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b6b0:	e013      	b.n	800b6da <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b6b2:	7dfb      	ldrb	r3, [r7, #23]
 800b6b4:	68ba      	ldr	r2, [r7, #8]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	693a      	ldr	r2, [r7, #16]
 800b6ba:	7812      	ldrb	r2, [r2, #0]
 800b6bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	613b      	str	r3, [r7, #16]
    idx++;
 800b6c4:	7dfb      	ldrb	r3, [r7, #23]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b6ca:	7dfb      	ldrb	r3, [r7, #23]
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b6d4:	7dfb      	ldrb	r3, [r7, #23]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1e7      	bne.n	800b6b2 <USBD_GetString+0x52>
 800b6e2:	e000      	b.n	800b6e6 <USBD_GetString+0x86>
    return;
 800b6e4:	bf00      	nop
  }
}
 800b6e6:	3718      	adds	r7, #24
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b6fc:	e005      	b.n	800b70a <USBD_GetLen+0x1e>
  {
    len++;
 800b6fe:	7bfb      	ldrb	r3, [r7, #15]
 800b700:	3301      	adds	r3, #1
 800b702:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	3301      	adds	r3, #1
 800b708:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d1f5      	bne.n	800b6fe <USBD_GetLen+0x12>
  }

  return len;
 800b712:	7bfb      	ldrb	r3, [r7, #15]
}
 800b714:	4618      	mov	r0, r3
 800b716:	3714      	adds	r7, #20
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2202      	movs	r2, #2
 800b730:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	68ba      	ldr	r2, [r7, #8]
 800b744:	2100      	movs	r1, #0
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f004 f875 	bl	800f836 <USBD_LL_Transmit>

  return USBD_OK;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b084      	sub	sp, #16
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	60f8      	str	r0, [r7, #12]
 800b75e:	60b9      	str	r1, [r7, #8]
 800b760:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	68ba      	ldr	r2, [r7, #8]
 800b766:	2100      	movs	r1, #0
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	f004 f864 	bl	800f836 <USBD_LL_Transmit>

  return USBD_OK;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3710      	adds	r7, #16
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2203      	movs	r2, #3
 800b788:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	f004 f868 	bl	800f878 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b084      	sub	sp, #16
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	60f8      	str	r0, [r7, #12]
 800b7ba:	60b9      	str	r1, [r7, #8]
 800b7bc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	68ba      	ldr	r2, [r7, #8]
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	f004 f857 	bl	800f878 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2204      	movs	r2, #4
 800b7e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f004 f823 	bl	800f836 <USBD_LL_Transmit>

  return USBD_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b082      	sub	sp, #8
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2205      	movs	r2, #5
 800b806:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b80a:	2300      	movs	r3, #0
 800b80c:	2200      	movs	r2, #0
 800b80e:	2100      	movs	r1, #0
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f004 f831 	bl	800f878 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3708      	adds	r7, #8
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b820:	b480      	push	{r7}
 800b822:	b085      	sub	sp, #20
 800b824:	af00      	add	r7, sp, #0
 800b826:	4603      	mov	r3, r0
 800b828:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b82a:	2300      	movs	r3, #0
 800b82c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b82e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b832:	2b84      	cmp	r3, #132	; 0x84
 800b834:	d005      	beq.n	800b842 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b836:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	4413      	add	r3, r2
 800b83e:	3303      	adds	r3, #3
 800b840:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b842:	68fb      	ldr	r3, [r7, #12]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3714      	adds	r7, #20
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b854:	f001 fb0c 	bl	800ce70 <vTaskStartScheduler>
  
  return osOK;
 800b858:	2300      	movs	r3, #0
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b85e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b860:	b089      	sub	sp, #36	; 0x24
 800b862:	af04      	add	r7, sp, #16
 800b864:	6078      	str	r0, [r7, #4]
 800b866:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	695b      	ldr	r3, [r3, #20]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d020      	beq.n	800b8b2 <osThreadCreate+0x54>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d01c      	beq.n	800b8b2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	685c      	ldr	r4, [r3, #4]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	691e      	ldr	r6, [r3, #16]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7ff ffc8 	bl	800b820 <makeFreeRtosPriority>
 800b890:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	695b      	ldr	r3, [r3, #20]
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b89a:	9202      	str	r2, [sp, #8]
 800b89c:	9301      	str	r3, [sp, #4]
 800b89e:	9100      	str	r1, [sp, #0]
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	4632      	mov	r2, r6
 800b8a4:	4629      	mov	r1, r5
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f001 f88c 	bl	800c9c4 <xTaskCreateStatic>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	60fb      	str	r3, [r7, #12]
 800b8b0:	e01c      	b.n	800b8ec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	685c      	ldr	r4, [r3, #4]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b8be:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7ff ffaa 	bl	800b820 <makeFreeRtosPriority>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	f107 030c 	add.w	r3, r7, #12
 800b8d2:	9301      	str	r3, [sp, #4]
 800b8d4:	9200      	str	r2, [sp, #0]
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	4632      	mov	r2, r6
 800b8da:	4629      	mov	r1, r5
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f001 f8ce 	bl	800ca7e <xTaskCreate>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d001      	beq.n	800b8ec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	e000      	b.n	800b8ee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3714      	adds	r7, #20
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b8f8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a09      	ldr	r2, [pc, #36]	; (800b928 <osDelay+0x30>)
 800b904:	fba2 2303 	umull	r2, r3, r2, r3
 800b908:	099b      	lsrs	r3, r3, #6
 800b90a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d001      	beq.n	800b916 <osDelay+0x1e>
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	e000      	b.n	800b918 <osDelay+0x20>
 800b916:	2301      	movs	r3, #1
 800b918:	4618      	mov	r0, r3
 800b91a:	f001 fa0f 	bl	800cd3c <vTaskDelay>
  
  return osOK;
 800b91e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	10624dd3 	.word	0x10624dd3

0800b92c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f103 0208 	add.w	r2, r3, #8
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b944:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f103 0208 	add.w	r2, r3, #8
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f103 0208 	add.w	r2, r3, #8
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b960:	bf00      	nop
 800b962:	370c      	adds	r7, #12
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b97a:	bf00      	nop
 800b97c:	370c      	adds	r7, #12
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr

0800b986 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b986:	b480      	push	{r7}
 800b988:	b085      	sub	sp, #20
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
 800b98e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	68fa      	ldr	r2, [r7, #12]
 800b99a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	689a      	ldr	r2, [r3, #8]
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	683a      	ldr	r2, [r7, #0]
 800b9aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	683a      	ldr	r2, [r7, #0]
 800b9b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	1c5a      	adds	r2, r3, #1
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	601a      	str	r2, [r3, #0]
}
 800b9c2:	bf00      	nop
 800b9c4:	3714      	adds	r7, #20
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b9ce:	b480      	push	{r7}
 800b9d0:	b085      	sub	sp, #20
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
 800b9d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9e4:	d103      	bne.n	800b9ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	691b      	ldr	r3, [r3, #16]
 800b9ea:	60fb      	str	r3, [r7, #12]
 800b9ec:	e00c      	b.n	800ba08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	3308      	adds	r3, #8
 800b9f2:	60fb      	str	r3, [r7, #12]
 800b9f4:	e002      	b.n	800b9fc <vListInsert+0x2e>
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	60fb      	str	r3, [r7, #12]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	68ba      	ldr	r2, [r7, #8]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d2f6      	bcs.n	800b9f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	685a      	ldr	r2, [r3, #4]
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	683a      	ldr	r2, [r7, #0]
 800ba16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	683a      	ldr	r2, [r7, #0]
 800ba22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	1c5a      	adds	r2, r3, #1
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	601a      	str	r2, [r3, #0]
}
 800ba34:	bf00      	nop
 800ba36:	3714      	adds	r7, #20
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ba40:	b480      	push	{r7}
 800ba42:	b085      	sub	sp, #20
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	691b      	ldr	r3, [r3, #16]
 800ba4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	6892      	ldr	r2, [r2, #8]
 800ba56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	6852      	ldr	r2, [r2, #4]
 800ba60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d103      	bne.n	800ba74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	689a      	ldr	r2, [r3, #8]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	1e5a      	subs	r2, r3, #1
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3714      	adds	r7, #20
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d10a      	bne.n	800babe <xQueueGenericReset+0x2a>
	__asm volatile
 800baa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baac:	f383 8811 	msr	BASEPRI, r3
 800bab0:	f3bf 8f6f 	isb	sy
 800bab4:	f3bf 8f4f 	dsb	sy
 800bab8:	60bb      	str	r3, [r7, #8]
}
 800baba:	bf00      	nop
 800babc:	e7fe      	b.n	800babc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800babe:	f002 ff59 	bl	800e974 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baca:	68f9      	ldr	r1, [r7, #12]
 800bacc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bace:	fb01 f303 	mul.w	r3, r1, r3
 800bad2:	441a      	add	r2, r3
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2200      	movs	r2, #0
 800badc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baee:	3b01      	subs	r3, #1
 800baf0:	68f9      	ldr	r1, [r7, #12]
 800baf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800baf4:	fb01 f303 	mul.w	r3, r1, r3
 800baf8:	441a      	add	r2, r3
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	22ff      	movs	r2, #255	; 0xff
 800bb02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	22ff      	movs	r2, #255	; 0xff
 800bb0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d114      	bne.n	800bb3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	691b      	ldr	r3, [r3, #16]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d01a      	beq.n	800bb52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	3310      	adds	r3, #16
 800bb20:	4618      	mov	r0, r3
 800bb22:	f001 fd05 	bl	800d530 <xTaskRemoveFromEventList>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d012      	beq.n	800bb52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bb2c:	4b0c      	ldr	r3, [pc, #48]	; (800bb60 <xQueueGenericReset+0xcc>)
 800bb2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb32:	601a      	str	r2, [r3, #0]
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	e009      	b.n	800bb52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	3310      	adds	r3, #16
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7ff fef2 	bl	800b92c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	3324      	adds	r3, #36	; 0x24
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7ff feed 	bl	800b92c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bb52:	f002 ff3f 	bl	800e9d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bb56:	2301      	movs	r3, #1
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	e000ed04 	.word	0xe000ed04

0800bb64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b08e      	sub	sp, #56	; 0x38
 800bb68:	af02      	add	r7, sp, #8
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
 800bb70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10a      	bne.n	800bb8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7c:	f383 8811 	msr	BASEPRI, r3
 800bb80:	f3bf 8f6f 	isb	sy
 800bb84:	f3bf 8f4f 	dsb	sy
 800bb88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb8a:	bf00      	nop
 800bb8c:	e7fe      	b.n	800bb8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d10a      	bne.n	800bbaa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb98:	f383 8811 	msr	BASEPRI, r3
 800bb9c:	f3bf 8f6f 	isb	sy
 800bba0:	f3bf 8f4f 	dsb	sy
 800bba4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bba6:	bf00      	nop
 800bba8:	e7fe      	b.n	800bba8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d002      	beq.n	800bbb6 <xQueueGenericCreateStatic+0x52>
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d001      	beq.n	800bbba <xQueueGenericCreateStatic+0x56>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e000      	b.n	800bbbc <xQueueGenericCreateStatic+0x58>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d10a      	bne.n	800bbd6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc4:	f383 8811 	msr	BASEPRI, r3
 800bbc8:	f3bf 8f6f 	isb	sy
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	623b      	str	r3, [r7, #32]
}
 800bbd2:	bf00      	nop
 800bbd4:	e7fe      	b.n	800bbd4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d102      	bne.n	800bbe2 <xQueueGenericCreateStatic+0x7e>
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d101      	bne.n	800bbe6 <xQueueGenericCreateStatic+0x82>
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e000      	b.n	800bbe8 <xQueueGenericCreateStatic+0x84>
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d10a      	bne.n	800bc02 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf0:	f383 8811 	msr	BASEPRI, r3
 800bbf4:	f3bf 8f6f 	isb	sy
 800bbf8:	f3bf 8f4f 	dsb	sy
 800bbfc:	61fb      	str	r3, [r7, #28]
}
 800bbfe:	bf00      	nop
 800bc00:	e7fe      	b.n	800bc00 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bc02:	2350      	movs	r3, #80	; 0x50
 800bc04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	2b50      	cmp	r3, #80	; 0x50
 800bc0a:	d00a      	beq.n	800bc22 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc10:	f383 8811 	msr	BASEPRI, r3
 800bc14:	f3bf 8f6f 	isb	sy
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	61bb      	str	r3, [r7, #24]
}
 800bc1e:	bf00      	nop
 800bc20:	e7fe      	b.n	800bc20 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bc22:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d00d      	beq.n	800bc4a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc30:	2201      	movs	r2, #1
 800bc32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	4613      	mov	r3, r2
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	68b9      	ldr	r1, [r7, #8]
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	f000 f83f 	bl	800bcc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3730      	adds	r7, #48	; 0x30
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b08a      	sub	sp, #40	; 0x28
 800bc58:	af02      	add	r7, sp, #8
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d10a      	bne.n	800bc7e <xQueueGenericCreate+0x2a>
	__asm volatile
 800bc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6c:	f383 8811 	msr	BASEPRI, r3
 800bc70:	f3bf 8f6f 	isb	sy
 800bc74:	f3bf 8f4f 	dsb	sy
 800bc78:	613b      	str	r3, [r7, #16]
}
 800bc7a:	bf00      	nop
 800bc7c:	e7fe      	b.n	800bc7c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	68ba      	ldr	r2, [r7, #8]
 800bc82:	fb02 f303 	mul.w	r3, r2, r3
 800bc86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	3350      	adds	r3, #80	; 0x50
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f002 ff8d 	bl	800ebac <pvPortMalloc>
 800bc92:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bc94:	69bb      	ldr	r3, [r7, #24]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d011      	beq.n	800bcbe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	3350      	adds	r3, #80	; 0x50
 800bca2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bcac:	79fa      	ldrb	r2, [r7, #7]
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	697a      	ldr	r2, [r7, #20]
 800bcb6:	68b9      	ldr	r1, [r7, #8]
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f000 f805 	bl	800bcc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bcbe:	69bb      	ldr	r3, [r7, #24]
	}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3720      	adds	r7, #32
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
 800bcd4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d103      	bne.n	800bce4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	69ba      	ldr	r2, [r7, #24]
 800bce0:	601a      	str	r2, [r3, #0]
 800bce2:	e002      	b.n	800bcea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bce4:	69bb      	ldr	r3, [r7, #24]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bcf0:	69bb      	ldr	r3, [r7, #24]
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bcf6:	2101      	movs	r1, #1
 800bcf8:	69b8      	ldr	r0, [r7, #24]
 800bcfa:	f7ff fecb 	bl	800ba94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	78fa      	ldrb	r2, [r7, #3]
 800bd02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bd06:	bf00      	nop
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b082      	sub	sp, #8
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00e      	beq.n	800bd3a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bd2e:	2300      	movs	r3, #0
 800bd30:	2200      	movs	r2, #0
 800bd32:	2100      	movs	r1, #0
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 f81f 	bl	800bd78 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bd3a:	bf00      	nop
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b088      	sub	sp, #32
 800bd46:	af02      	add	r7, sp, #8
 800bd48:	4603      	mov	r3, r0
 800bd4a:	6039      	str	r1, [r7, #0]
 800bd4c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	617b      	str	r3, [r7, #20]
 800bd52:	2300      	movs	r3, #0
 800bd54:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bd56:	79fb      	ldrb	r3, [r7, #7]
 800bd58:	9300      	str	r3, [sp, #0]
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	6939      	ldr	r1, [r7, #16]
 800bd60:	6978      	ldr	r0, [r7, #20]
 800bd62:	f7ff feff 	bl	800bb64 <xQueueGenericCreateStatic>
 800bd66:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bd68:	68f8      	ldr	r0, [r7, #12]
 800bd6a:	f7ff ffd0 	bl	800bd0e <prvInitialiseMutex>

		return xNewQueue;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
	}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3718      	adds	r7, #24
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b08e      	sub	sp, #56	; 0x38
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
 800bd84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bd86:	2300      	movs	r3, #0
 800bd88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10a      	bne.n	800bdaa <xQueueGenericSend+0x32>
	__asm volatile
 800bd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd98:	f383 8811 	msr	BASEPRI, r3
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f3bf 8f4f 	dsb	sy
 800bda4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bda6:	bf00      	nop
 800bda8:	e7fe      	b.n	800bda8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d103      	bne.n	800bdb8 <xQueueGenericSend+0x40>
 800bdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d101      	bne.n	800bdbc <xQueueGenericSend+0x44>
 800bdb8:	2301      	movs	r3, #1
 800bdba:	e000      	b.n	800bdbe <xQueueGenericSend+0x46>
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d10a      	bne.n	800bdd8 <xQueueGenericSend+0x60>
	__asm volatile
 800bdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc6:	f383 8811 	msr	BASEPRI, r3
 800bdca:	f3bf 8f6f 	isb	sy
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bdd4:	bf00      	nop
 800bdd6:	e7fe      	b.n	800bdd6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	2b02      	cmp	r3, #2
 800bddc:	d103      	bne.n	800bde6 <xQueueGenericSend+0x6e>
 800bdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d101      	bne.n	800bdea <xQueueGenericSend+0x72>
 800bde6:	2301      	movs	r3, #1
 800bde8:	e000      	b.n	800bdec <xQueueGenericSend+0x74>
 800bdea:	2300      	movs	r3, #0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d10a      	bne.n	800be06 <xQueueGenericSend+0x8e>
	__asm volatile
 800bdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf4:	f383 8811 	msr	BASEPRI, r3
 800bdf8:	f3bf 8f6f 	isb	sy
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	623b      	str	r3, [r7, #32]
}
 800be02:	bf00      	nop
 800be04:	e7fe      	b.n	800be04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be06:	f001 fe29 	bl	800da5c <xTaskGetSchedulerState>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d102      	bne.n	800be16 <xQueueGenericSend+0x9e>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d101      	bne.n	800be1a <xQueueGenericSend+0xa2>
 800be16:	2301      	movs	r3, #1
 800be18:	e000      	b.n	800be1c <xQueueGenericSend+0xa4>
 800be1a:	2300      	movs	r3, #0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d10a      	bne.n	800be36 <xQueueGenericSend+0xbe>
	__asm volatile
 800be20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	61fb      	str	r3, [r7, #28]
}
 800be32:	bf00      	nop
 800be34:	e7fe      	b.n	800be34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be36:	f002 fd9d 	bl	800e974 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be42:	429a      	cmp	r2, r3
 800be44:	d302      	bcc.n	800be4c <xQueueGenericSend+0xd4>
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	2b02      	cmp	r3, #2
 800be4a:	d129      	bne.n	800bea0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be4c:	683a      	ldr	r2, [r7, #0]
 800be4e:	68b9      	ldr	r1, [r7, #8]
 800be50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be52:	f000 fc49 	bl	800c6e8 <prvCopyDataToQueue>
 800be56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d010      	beq.n	800be82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be62:	3324      	adds	r3, #36	; 0x24
 800be64:	4618      	mov	r0, r3
 800be66:	f001 fb63 	bl	800d530 <xTaskRemoveFromEventList>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d013      	beq.n	800be98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800be70:	4b3f      	ldr	r3, [pc, #252]	; (800bf70 <xQueueGenericSend+0x1f8>)
 800be72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be76:	601a      	str	r2, [r3, #0]
 800be78:	f3bf 8f4f 	dsb	sy
 800be7c:	f3bf 8f6f 	isb	sy
 800be80:	e00a      	b.n	800be98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800be82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be84:	2b00      	cmp	r3, #0
 800be86:	d007      	beq.n	800be98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800be88:	4b39      	ldr	r3, [pc, #228]	; (800bf70 <xQueueGenericSend+0x1f8>)
 800be8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be8e:	601a      	str	r2, [r3, #0]
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800be98:	f002 fd9c 	bl	800e9d4 <vPortExitCritical>
				return pdPASS;
 800be9c:	2301      	movs	r3, #1
 800be9e:	e063      	b.n	800bf68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d103      	bne.n	800beae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bea6:	f002 fd95 	bl	800e9d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800beaa:	2300      	movs	r3, #0
 800beac:	e05c      	b.n	800bf68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800beae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d106      	bne.n	800bec2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800beb4:	f107 0314 	add.w	r3, r7, #20
 800beb8:	4618      	mov	r0, r3
 800beba:	f001 fb9b 	bl	800d5f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bebe:	2301      	movs	r3, #1
 800bec0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bec2:	f002 fd87 	bl	800e9d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bec6:	f001 f845 	bl	800cf54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800beca:	f002 fd53 	bl	800e974 <vPortEnterCritical>
 800bece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bed4:	b25b      	sxtb	r3, r3
 800bed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800beda:	d103      	bne.n	800bee4 <xQueueGenericSend+0x16c>
 800bedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bede:	2200      	movs	r2, #0
 800bee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800beea:	b25b      	sxtb	r3, r3
 800beec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bef0:	d103      	bne.n	800befa <xQueueGenericSend+0x182>
 800bef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef4:	2200      	movs	r2, #0
 800bef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800befa:	f002 fd6b 	bl	800e9d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800befe:	1d3a      	adds	r2, r7, #4
 800bf00:	f107 0314 	add.w	r3, r7, #20
 800bf04:	4611      	mov	r1, r2
 800bf06:	4618      	mov	r0, r3
 800bf08:	f001 fb8a 	bl	800d620 <xTaskCheckForTimeOut>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d124      	bne.n	800bf5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bf12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf14:	f000 fce0 	bl	800c8d8 <prvIsQueueFull>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d018      	beq.n	800bf50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf20:	3310      	adds	r3, #16
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	4611      	mov	r1, r2
 800bf26:	4618      	mov	r0, r3
 800bf28:	f001 fab2 	bl	800d490 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bf2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf2e:	f000 fc6b 	bl	800c808 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bf32:	f001 f81d 	bl	800cf70 <xTaskResumeAll>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	f47f af7c 	bne.w	800be36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bf3e:	4b0c      	ldr	r3, [pc, #48]	; (800bf70 <xQueueGenericSend+0x1f8>)
 800bf40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf44:	601a      	str	r2, [r3, #0]
 800bf46:	f3bf 8f4f 	dsb	sy
 800bf4a:	f3bf 8f6f 	isb	sy
 800bf4e:	e772      	b.n	800be36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bf50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf52:	f000 fc59 	bl	800c808 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf56:	f001 f80b 	bl	800cf70 <xTaskResumeAll>
 800bf5a:	e76c      	b.n	800be36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bf5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf5e:	f000 fc53 	bl	800c808 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf62:	f001 f805 	bl	800cf70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bf66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3738      	adds	r7, #56	; 0x38
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	e000ed04 	.word	0xe000ed04

0800bf74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b090      	sub	sp, #64	; 0x40
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	607a      	str	r2, [r7, #4]
 800bf80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bf86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d10a      	bne.n	800bfa2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf90:	f383 8811 	msr	BASEPRI, r3
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf9e:	bf00      	nop
 800bfa0:	e7fe      	b.n	800bfa0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d103      	bne.n	800bfb0 <xQueueGenericSendFromISR+0x3c>
 800bfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d101      	bne.n	800bfb4 <xQueueGenericSendFromISR+0x40>
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e000      	b.n	800bfb6 <xQueueGenericSendFromISR+0x42>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d10a      	bne.n	800bfd0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfbe:	f383 8811 	msr	BASEPRI, r3
 800bfc2:	f3bf 8f6f 	isb	sy
 800bfc6:	f3bf 8f4f 	dsb	sy
 800bfca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bfcc:	bf00      	nop
 800bfce:	e7fe      	b.n	800bfce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	2b02      	cmp	r3, #2
 800bfd4:	d103      	bne.n	800bfde <xQueueGenericSendFromISR+0x6a>
 800bfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d101      	bne.n	800bfe2 <xQueueGenericSendFromISR+0x6e>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e000      	b.n	800bfe4 <xQueueGenericSendFromISR+0x70>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d10a      	bne.n	800bffe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfec:	f383 8811 	msr	BASEPRI, r3
 800bff0:	f3bf 8f6f 	isb	sy
 800bff4:	f3bf 8f4f 	dsb	sy
 800bff8:	623b      	str	r3, [r7, #32]
}
 800bffa:	bf00      	nop
 800bffc:	e7fe      	b.n	800bffc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bffe:	f002 fd95 	bl	800eb2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c002:	f3ef 8211 	mrs	r2, BASEPRI
 800c006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00a:	f383 8811 	msr	BASEPRI, r3
 800c00e:	f3bf 8f6f 	isb	sy
 800c012:	f3bf 8f4f 	dsb	sy
 800c016:	61fa      	str	r2, [r7, #28]
 800c018:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c01a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c01c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c026:	429a      	cmp	r2, r3
 800c028:	d302      	bcc.n	800c030 <xQueueGenericSendFromISR+0xbc>
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	2b02      	cmp	r3, #2
 800c02e:	d12f      	bne.n	800c090 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c032:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c03e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c040:	683a      	ldr	r2, [r7, #0]
 800c042:	68b9      	ldr	r1, [r7, #8]
 800c044:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c046:	f000 fb4f 	bl	800c6e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c04a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c04e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c052:	d112      	bne.n	800c07a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d016      	beq.n	800c08a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05e:	3324      	adds	r3, #36	; 0x24
 800c060:	4618      	mov	r0, r3
 800c062:	f001 fa65 	bl	800d530 <xTaskRemoveFromEventList>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00e      	beq.n	800c08a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d00b      	beq.n	800c08a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2201      	movs	r2, #1
 800c076:	601a      	str	r2, [r3, #0]
 800c078:	e007      	b.n	800c08a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c07a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c07e:	3301      	adds	r3, #1
 800c080:	b2db      	uxtb	r3, r3
 800c082:	b25a      	sxtb	r2, r3
 800c084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c08a:	2301      	movs	r3, #1
 800c08c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c08e:	e001      	b.n	800c094 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c090:	2300      	movs	r3, #0
 800c092:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c096:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c09e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c0a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3740      	adds	r7, #64	; 0x40
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}

0800c0aa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c0aa:	b580      	push	{r7, lr}
 800c0ac:	b08e      	sub	sp, #56	; 0x38
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
 800c0b2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10a      	bne.n	800c0d4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	623b      	str	r3, [r7, #32]
}
 800c0d0:	bf00      	nop
 800c0d2:	e7fe      	b.n	800c0d2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d00a      	beq.n	800c0f2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e0:	f383 8811 	msr	BASEPRI, r3
 800c0e4:	f3bf 8f6f 	isb	sy
 800c0e8:	f3bf 8f4f 	dsb	sy
 800c0ec:	61fb      	str	r3, [r7, #28]
}
 800c0ee:	bf00      	nop
 800c0f0:	e7fe      	b.n	800c0f0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d103      	bne.n	800c102 <xQueueGiveFromISR+0x58>
 800c0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d101      	bne.n	800c106 <xQueueGiveFromISR+0x5c>
 800c102:	2301      	movs	r3, #1
 800c104:	e000      	b.n	800c108 <xQueueGiveFromISR+0x5e>
 800c106:	2300      	movs	r3, #0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10a      	bne.n	800c122 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c110:	f383 8811 	msr	BASEPRI, r3
 800c114:	f3bf 8f6f 	isb	sy
 800c118:	f3bf 8f4f 	dsb	sy
 800c11c:	61bb      	str	r3, [r7, #24]
}
 800c11e:	bf00      	nop
 800c120:	e7fe      	b.n	800c120 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c122:	f002 fd03 	bl	800eb2c <vPortValidateInterruptPriority>
	__asm volatile
 800c126:	f3ef 8211 	mrs	r2, BASEPRI
 800c12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12e:	f383 8811 	msr	BASEPRI, r3
 800c132:	f3bf 8f6f 	isb	sy
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	617a      	str	r2, [r7, #20]
 800c13c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c13e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c140:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c146:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c14c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c14e:	429a      	cmp	r2, r3
 800c150:	d22b      	bcs.n	800c1aa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15e:	1c5a      	adds	r2, r3, #1
 800c160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c162:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c164:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c16c:	d112      	bne.n	800c194 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c172:	2b00      	cmp	r3, #0
 800c174:	d016      	beq.n	800c1a4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c178:	3324      	adds	r3, #36	; 0x24
 800c17a:	4618      	mov	r0, r3
 800c17c:	f001 f9d8 	bl	800d530 <xTaskRemoveFromEventList>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00e      	beq.n	800c1a4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00b      	beq.n	800c1a4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	2201      	movs	r2, #1
 800c190:	601a      	str	r2, [r3, #0]
 800c192:	e007      	b.n	800c1a4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c198:	3301      	adds	r3, #1
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	b25a      	sxtb	r2, r3
 800c19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	637b      	str	r3, [r7, #52]	; 0x34
 800c1a8:	e001      	b.n	800c1ae <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	637b      	str	r3, [r7, #52]	; 0x34
 800c1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f383 8811 	msr	BASEPRI, r3
}
 800c1b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c1ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3738      	adds	r7, #56	; 0x38
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b08c      	sub	sp, #48	; 0x30
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d10a      	bne.n	800c1f4 <xQueueReceive+0x30>
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e2:	f383 8811 	msr	BASEPRI, r3
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	623b      	str	r3, [r7, #32]
}
 800c1f0:	bf00      	nop
 800c1f2:	e7fe      	b.n	800c1f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d103      	bne.n	800c202 <xQueueReceive+0x3e>
 800c1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d101      	bne.n	800c206 <xQueueReceive+0x42>
 800c202:	2301      	movs	r3, #1
 800c204:	e000      	b.n	800c208 <xQueueReceive+0x44>
 800c206:	2300      	movs	r3, #0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10a      	bne.n	800c222 <xQueueReceive+0x5e>
	__asm volatile
 800c20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c210:	f383 8811 	msr	BASEPRI, r3
 800c214:	f3bf 8f6f 	isb	sy
 800c218:	f3bf 8f4f 	dsb	sy
 800c21c:	61fb      	str	r3, [r7, #28]
}
 800c21e:	bf00      	nop
 800c220:	e7fe      	b.n	800c220 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c222:	f001 fc1b 	bl	800da5c <xTaskGetSchedulerState>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d102      	bne.n	800c232 <xQueueReceive+0x6e>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d101      	bne.n	800c236 <xQueueReceive+0x72>
 800c232:	2301      	movs	r3, #1
 800c234:	e000      	b.n	800c238 <xQueueReceive+0x74>
 800c236:	2300      	movs	r3, #0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d10a      	bne.n	800c252 <xQueueReceive+0x8e>
	__asm volatile
 800c23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c240:	f383 8811 	msr	BASEPRI, r3
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	61bb      	str	r3, [r7, #24]
}
 800c24e:	bf00      	nop
 800c250:	e7fe      	b.n	800c250 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c252:	f002 fb8f 	bl	800e974 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c25a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d01f      	beq.n	800c2a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c262:	68b9      	ldr	r1, [r7, #8]
 800c264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c266:	f000 faa9 	bl	800c7bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26c:	1e5a      	subs	r2, r3, #1
 800c26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c270:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c274:	691b      	ldr	r3, [r3, #16]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00f      	beq.n	800c29a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27c:	3310      	adds	r3, #16
 800c27e:	4618      	mov	r0, r3
 800c280:	f001 f956 	bl	800d530 <xTaskRemoveFromEventList>
 800c284:	4603      	mov	r3, r0
 800c286:	2b00      	cmp	r3, #0
 800c288:	d007      	beq.n	800c29a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c28a:	4b3d      	ldr	r3, [pc, #244]	; (800c380 <xQueueReceive+0x1bc>)
 800c28c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c290:	601a      	str	r2, [r3, #0]
 800c292:	f3bf 8f4f 	dsb	sy
 800c296:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c29a:	f002 fb9b 	bl	800e9d4 <vPortExitCritical>
				return pdPASS;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e069      	b.n	800c376 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d103      	bne.n	800c2b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c2a8:	f002 fb94 	bl	800e9d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	e062      	b.n	800c376 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d106      	bne.n	800c2c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2b6:	f107 0310 	add.w	r3, r7, #16
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f001 f99a 	bl	800d5f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c2c4:	f002 fb86 	bl	800e9d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2c8:	f000 fe44 	bl	800cf54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2cc:	f002 fb52 	bl	800e974 <vPortEnterCritical>
 800c2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2d6:	b25b      	sxtb	r3, r3
 800c2d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2dc:	d103      	bne.n	800c2e6 <xQueueReceive+0x122>
 800c2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2ec:	b25b      	sxtb	r3, r3
 800c2ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2f2:	d103      	bne.n	800c2fc <xQueueReceive+0x138>
 800c2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2fc:	f002 fb6a 	bl	800e9d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c300:	1d3a      	adds	r2, r7, #4
 800c302:	f107 0310 	add.w	r3, r7, #16
 800c306:	4611      	mov	r1, r2
 800c308:	4618      	mov	r0, r3
 800c30a:	f001 f989 	bl	800d620 <xTaskCheckForTimeOut>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d123      	bne.n	800c35c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c316:	f000 fac9 	bl	800c8ac <prvIsQueueEmpty>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d017      	beq.n	800c350 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c322:	3324      	adds	r3, #36	; 0x24
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	4611      	mov	r1, r2
 800c328:	4618      	mov	r0, r3
 800c32a:	f001 f8b1 	bl	800d490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c32e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c330:	f000 fa6a 	bl	800c808 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c334:	f000 fe1c 	bl	800cf70 <xTaskResumeAll>
 800c338:	4603      	mov	r3, r0
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d189      	bne.n	800c252 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c33e:	4b10      	ldr	r3, [pc, #64]	; (800c380 <xQueueReceive+0x1bc>)
 800c340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c344:	601a      	str	r2, [r3, #0]
 800c346:	f3bf 8f4f 	dsb	sy
 800c34a:	f3bf 8f6f 	isb	sy
 800c34e:	e780      	b.n	800c252 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c352:	f000 fa59 	bl	800c808 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c356:	f000 fe0b 	bl	800cf70 <xTaskResumeAll>
 800c35a:	e77a      	b.n	800c252 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c35c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c35e:	f000 fa53 	bl	800c808 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c362:	f000 fe05 	bl	800cf70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c368:	f000 faa0 	bl	800c8ac <prvIsQueueEmpty>
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b00      	cmp	r3, #0
 800c370:	f43f af6f 	beq.w	800c252 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c374:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c376:	4618      	mov	r0, r3
 800c378:	3730      	adds	r7, #48	; 0x30
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	e000ed04 	.word	0xe000ed04

0800c384 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b08e      	sub	sp, #56	; 0x38
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c38e:	2300      	movs	r3, #0
 800c390:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c396:	2300      	movs	r3, #0
 800c398:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d10a      	bne.n	800c3b6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	623b      	str	r3, [r7, #32]
}
 800c3b2:	bf00      	nop
 800c3b4:	e7fe      	b.n	800c3b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d00a      	beq.n	800c3d4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c2:	f383 8811 	msr	BASEPRI, r3
 800c3c6:	f3bf 8f6f 	isb	sy
 800c3ca:	f3bf 8f4f 	dsb	sy
 800c3ce:	61fb      	str	r3, [r7, #28]
}
 800c3d0:	bf00      	nop
 800c3d2:	e7fe      	b.n	800c3d2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3d4:	f001 fb42 	bl	800da5c <xTaskGetSchedulerState>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d102      	bne.n	800c3e4 <xQueueSemaphoreTake+0x60>
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d101      	bne.n	800c3e8 <xQueueSemaphoreTake+0x64>
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e000      	b.n	800c3ea <xQueueSemaphoreTake+0x66>
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d10a      	bne.n	800c404 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f2:	f383 8811 	msr	BASEPRI, r3
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	61bb      	str	r3, [r7, #24]
}
 800c400:	bf00      	nop
 800c402:	e7fe      	b.n	800c402 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c404:	f002 fab6 	bl	800e974 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c40c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c410:	2b00      	cmp	r3, #0
 800c412:	d024      	beq.n	800c45e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c416:	1e5a      	subs	r2, r3, #1
 800c418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d104      	bne.n	800c42e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c424:	f001 fcc2 	bl	800ddac <pvTaskIncrementMutexHeldCount>
 800c428:	4602      	mov	r2, r0
 800c42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c430:	691b      	ldr	r3, [r3, #16]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00f      	beq.n	800c456 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c438:	3310      	adds	r3, #16
 800c43a:	4618      	mov	r0, r3
 800c43c:	f001 f878 	bl	800d530 <xTaskRemoveFromEventList>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d007      	beq.n	800c456 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c446:	4b54      	ldr	r3, [pc, #336]	; (800c598 <xQueueSemaphoreTake+0x214>)
 800c448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c44c:	601a      	str	r2, [r3, #0]
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c456:	f002 fabd 	bl	800e9d4 <vPortExitCritical>
				return pdPASS;
 800c45a:	2301      	movs	r3, #1
 800c45c:	e097      	b.n	800c58e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d111      	bne.n	800c488 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00a      	beq.n	800c480 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46e:	f383 8811 	msr	BASEPRI, r3
 800c472:	f3bf 8f6f 	isb	sy
 800c476:	f3bf 8f4f 	dsb	sy
 800c47a:	617b      	str	r3, [r7, #20]
}
 800c47c:	bf00      	nop
 800c47e:	e7fe      	b.n	800c47e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c480:	f002 faa8 	bl	800e9d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c484:	2300      	movs	r3, #0
 800c486:	e082      	b.n	800c58e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d106      	bne.n	800c49c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c48e:	f107 030c 	add.w	r3, r7, #12
 800c492:	4618      	mov	r0, r3
 800c494:	f001 f8ae 	bl	800d5f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c498:	2301      	movs	r3, #1
 800c49a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c49c:	f002 fa9a 	bl	800e9d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c4a0:	f000 fd58 	bl	800cf54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c4a4:	f002 fa66 	bl	800e974 <vPortEnterCritical>
 800c4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4ae:	b25b      	sxtb	r3, r3
 800c4b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4b4:	d103      	bne.n	800c4be <xQueueSemaphoreTake+0x13a>
 800c4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4c4:	b25b      	sxtb	r3, r3
 800c4c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4ca:	d103      	bne.n	800c4d4 <xQueueSemaphoreTake+0x150>
 800c4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4d4:	f002 fa7e 	bl	800e9d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4d8:	463a      	mov	r2, r7
 800c4da:	f107 030c 	add.w	r3, r7, #12
 800c4de:	4611      	mov	r1, r2
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f001 f89d 	bl	800d620 <xTaskCheckForTimeOut>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d132      	bne.n	800c552 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4ee:	f000 f9dd 	bl	800c8ac <prvIsQueueEmpty>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d026      	beq.n	800c546 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d109      	bne.n	800c514 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c500:	f002 fa38 	bl	800e974 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	4618      	mov	r0, r3
 800c50a:	f001 fac5 	bl	800da98 <xTaskPriorityInherit>
 800c50e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c510:	f002 fa60 	bl	800e9d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c516:	3324      	adds	r3, #36	; 0x24
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	4611      	mov	r1, r2
 800c51c:	4618      	mov	r0, r3
 800c51e:	f000 ffb7 	bl	800d490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c522:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c524:	f000 f970 	bl	800c808 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c528:	f000 fd22 	bl	800cf70 <xTaskResumeAll>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f47f af68 	bne.w	800c404 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c534:	4b18      	ldr	r3, [pc, #96]	; (800c598 <xQueueSemaphoreTake+0x214>)
 800c536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c53a:	601a      	str	r2, [r3, #0]
 800c53c:	f3bf 8f4f 	dsb	sy
 800c540:	f3bf 8f6f 	isb	sy
 800c544:	e75e      	b.n	800c404 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c546:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c548:	f000 f95e 	bl	800c808 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c54c:	f000 fd10 	bl	800cf70 <xTaskResumeAll>
 800c550:	e758      	b.n	800c404 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c554:	f000 f958 	bl	800c808 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c558:	f000 fd0a 	bl	800cf70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c55c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c55e:	f000 f9a5 	bl	800c8ac <prvIsQueueEmpty>
 800c562:	4603      	mov	r3, r0
 800c564:	2b00      	cmp	r3, #0
 800c566:	f43f af4d 	beq.w	800c404 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00d      	beq.n	800c58c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c570:	f002 fa00 	bl	800e974 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c576:	f000 f89f 	bl	800c6b8 <prvGetDisinheritPriorityAfterTimeout>
 800c57a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c57e:	689b      	ldr	r3, [r3, #8]
 800c580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c582:	4618      	mov	r0, r3
 800c584:	f001 fb84 	bl	800dc90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c588:	f002 fa24 	bl	800e9d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c58c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3738      	adds	r7, #56	; 0x38
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	e000ed04 	.word	0xe000ed04

0800c59c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b08e      	sub	sp, #56	; 0x38
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d10a      	bne.n	800c5c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b6:	f383 8811 	msr	BASEPRI, r3
 800c5ba:	f3bf 8f6f 	isb	sy
 800c5be:	f3bf 8f4f 	dsb	sy
 800c5c2:	623b      	str	r3, [r7, #32]
}
 800c5c4:	bf00      	nop
 800c5c6:	e7fe      	b.n	800c5c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d103      	bne.n	800c5d6 <xQueueReceiveFromISR+0x3a>
 800c5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d101      	bne.n	800c5da <xQueueReceiveFromISR+0x3e>
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e000      	b.n	800c5dc <xQueueReceiveFromISR+0x40>
 800c5da:	2300      	movs	r3, #0
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d10a      	bne.n	800c5f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	61fb      	str	r3, [r7, #28]
}
 800c5f2:	bf00      	nop
 800c5f4:	e7fe      	b.n	800c5f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5f6:	f002 fa99 	bl	800eb2c <vPortValidateInterruptPriority>
	__asm volatile
 800c5fa:	f3ef 8211 	mrs	r2, BASEPRI
 800c5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c602:	f383 8811 	msr	BASEPRI, r3
 800c606:	f3bf 8f6f 	isb	sy
 800c60a:	f3bf 8f4f 	dsb	sy
 800c60e:	61ba      	str	r2, [r7, #24]
 800c610:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c612:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c614:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c61a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d02f      	beq.n	800c682 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c62c:	68b9      	ldr	r1, [r7, #8]
 800c62e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c630:	f000 f8c4 	bl	800c7bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c636:	1e5a      	subs	r2, r3, #1
 800c638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c63c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c644:	d112      	bne.n	800c66c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c648:	691b      	ldr	r3, [r3, #16]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d016      	beq.n	800c67c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c650:	3310      	adds	r3, #16
 800c652:	4618      	mov	r0, r3
 800c654:	f000 ff6c 	bl	800d530 <xTaskRemoveFromEventList>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00e      	beq.n	800c67c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d00b      	beq.n	800c67c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2201      	movs	r2, #1
 800c668:	601a      	str	r2, [r3, #0]
 800c66a:	e007      	b.n	800c67c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c66c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c670:	3301      	adds	r3, #1
 800c672:	b2db      	uxtb	r3, r3
 800c674:	b25a      	sxtb	r2, r3
 800c676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c67c:	2301      	movs	r3, #1
 800c67e:	637b      	str	r3, [r7, #52]	; 0x34
 800c680:	e001      	b.n	800c686 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c682:	2300      	movs	r3, #0
 800c684:	637b      	str	r3, [r7, #52]	; 0x34
 800c686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c688:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	f383 8811 	msr	BASEPRI, r3
}
 800c690:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c694:	4618      	mov	r0, r3
 800c696:	3738      	adds	r7, #56	; 0x38
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	683a      	ldr	r2, [r7, #0]
 800c6aa:	649a      	str	r2, [r3, #72]	; 0x48
	}
 800c6ac:	bf00      	nop
 800c6ae:	370c      	adds	r7, #12
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b085      	sub	sp, #20
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d006      	beq.n	800c6d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f1c3 0314 	rsb	r3, r3, #20
 800c6d2:	60fb      	str	r3, [r7, #12]
 800c6d4:	e001      	b.n	800c6da <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c6da:	68fb      	ldr	r3, [r7, #12]
	}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3714      	adds	r7, #20
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b086      	sub	sp, #24
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c702:	2b00      	cmp	r3, #0
 800c704:	d10d      	bne.n	800c722 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d14d      	bne.n	800c7aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	4618      	mov	r0, r3
 800c714:	f001 fa36 	bl	800db84 <xTaskPriorityDisinherit>
 800c718:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2200      	movs	r2, #0
 800c71e:	609a      	str	r2, [r3, #8]
 800c720:	e043      	b.n	800c7aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d119      	bne.n	800c75c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6858      	ldr	r0, [r3, #4]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c730:	461a      	mov	r2, r3
 800c732:	68b9      	ldr	r1, [r7, #8]
 800c734:	f004 f8dd 	bl	80108f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	685a      	ldr	r2, [r3, #4]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c740:	441a      	add	r2, r3
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	685a      	ldr	r2, [r3, #4]
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	689b      	ldr	r3, [r3, #8]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d32b      	bcc.n	800c7aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	605a      	str	r2, [r3, #4]
 800c75a:	e026      	b.n	800c7aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	68d8      	ldr	r0, [r3, #12]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c764:	461a      	mov	r2, r3
 800c766:	68b9      	ldr	r1, [r7, #8]
 800c768:	f004 f8c3 	bl	80108f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	68da      	ldr	r2, [r3, #12]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c774:	425b      	negs	r3, r3
 800c776:	441a      	add	r2, r3
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	68da      	ldr	r2, [r3, #12]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	429a      	cmp	r2, r3
 800c786:	d207      	bcs.n	800c798 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	689a      	ldr	r2, [r3, #8]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c790:	425b      	negs	r3, r3
 800c792:	441a      	add	r2, r3
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	d105      	bne.n	800c7aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d002      	beq.n	800c7aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	1c5a      	adds	r2, r3, #1
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c7b2:	697b      	ldr	r3, [r7, #20]
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3718      	adds	r7, #24
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d018      	beq.n	800c800 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	68da      	ldr	r2, [r3, #12]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d6:	441a      	add	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	68da      	ldr	r2, [r3, #12]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	689b      	ldr	r3, [r3, #8]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d303      	bcc.n	800c7f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681a      	ldr	r2, [r3, #0]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	68d9      	ldr	r1, [r3, #12]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	6838      	ldr	r0, [r7, #0]
 800c7fc:	f004 f879 	bl	80108f2 <memcpy>
	}
}
 800c800:	bf00      	nop
 800c802:	3708      	adds	r7, #8
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c810:	f002 f8b0 	bl	800e974 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c81a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c81c:	e011      	b.n	800c842 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c822:	2b00      	cmp	r3, #0
 800c824:	d012      	beq.n	800c84c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	3324      	adds	r3, #36	; 0x24
 800c82a:	4618      	mov	r0, r3
 800c82c:	f000 fe80 	bl	800d530 <xTaskRemoveFromEventList>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d001      	beq.n	800c83a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c836:	f000 ff55 	bl	800d6e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c83a:	7bfb      	ldrb	r3, [r7, #15]
 800c83c:	3b01      	subs	r3, #1
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c846:	2b00      	cmp	r3, #0
 800c848:	dce9      	bgt.n	800c81e <prvUnlockQueue+0x16>
 800c84a:	e000      	b.n	800c84e <prvUnlockQueue+0x46>
					break;
 800c84c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	22ff      	movs	r2, #255	; 0xff
 800c852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c856:	f002 f8bd 	bl	800e9d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c85a:	f002 f88b 	bl	800e974 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c864:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c866:	e011      	b.n	800c88c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	691b      	ldr	r3, [r3, #16]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d012      	beq.n	800c896 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	3310      	adds	r3, #16
 800c874:	4618      	mov	r0, r3
 800c876:	f000 fe5b 	bl	800d530 <xTaskRemoveFromEventList>
 800c87a:	4603      	mov	r3, r0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d001      	beq.n	800c884 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c880:	f000 ff30 	bl	800d6e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c884:	7bbb      	ldrb	r3, [r7, #14]
 800c886:	3b01      	subs	r3, #1
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c88c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c890:	2b00      	cmp	r3, #0
 800c892:	dce9      	bgt.n	800c868 <prvUnlockQueue+0x60>
 800c894:	e000      	b.n	800c898 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c896:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	22ff      	movs	r2, #255	; 0xff
 800c89c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c8a0:	f002 f898 	bl	800e9d4 <vPortExitCritical>
}
 800c8a4:	bf00      	nop
 800c8a6:	3710      	adds	r7, #16
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c8b4:	f002 f85e 	bl	800e974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d102      	bne.n	800c8c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	60fb      	str	r3, [r7, #12]
 800c8c4:	e001      	b.n	800c8ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8ca:	f002 f883 	bl	800e9d4 <vPortExitCritical>

	return xReturn;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c8e0:	f002 f848 	bl	800e974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d102      	bne.n	800c8f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	60fb      	str	r3, [r7, #12]
 800c8f4:	e001      	b.n	800c8fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8fa:	f002 f86b 	bl	800e9d4 <vPortExitCritical>

	return xReturn;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
}
 800c900:	4618      	mov	r0, r3
 800c902:	3710      	adds	r7, #16
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c908:	b480      	push	{r7}
 800c90a:	b085      	sub	sp, #20
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c912:	2300      	movs	r3, #0
 800c914:	60fb      	str	r3, [r7, #12]
 800c916:	e014      	b.n	800c942 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c918:	4a0f      	ldr	r2, [pc, #60]	; (800c958 <vQueueAddToRegistry+0x50>)
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d10b      	bne.n	800c93c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c924:	490c      	ldr	r1, [pc, #48]	; (800c958 <vQueueAddToRegistry+0x50>)
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	683a      	ldr	r2, [r7, #0]
 800c92a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c92e:	4a0a      	ldr	r2, [pc, #40]	; (800c958 <vQueueAddToRegistry+0x50>)
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	00db      	lsls	r3, r3, #3
 800c934:	4413      	add	r3, r2
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c93a:	e006      	b.n	800c94a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	3301      	adds	r3, #1
 800c940:	60fb      	str	r3, [r7, #12]
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2b07      	cmp	r3, #7
 800c946:	d9e7      	bls.n	800c918 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c948:	bf00      	nop
 800c94a:	bf00      	nop
 800c94c:	3714      	adds	r7, #20
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr
 800c956:	bf00      	nop
 800c958:	2000333c 	.word	0x2000333c

0800c95c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b086      	sub	sp, #24
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c96c:	f002 f802 	bl	800e974 <vPortEnterCritical>
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c976:	b25b      	sxtb	r3, r3
 800c978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c97c:	d103      	bne.n	800c986 <vQueueWaitForMessageRestricted+0x2a>
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	2200      	movs	r2, #0
 800c982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c98c:	b25b      	sxtb	r3, r3
 800c98e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c992:	d103      	bne.n	800c99c <vQueueWaitForMessageRestricted+0x40>
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	2200      	movs	r2, #0
 800c998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c99c:	f002 f81a 	bl	800e9d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d106      	bne.n	800c9b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	3324      	adds	r3, #36	; 0x24
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	68b9      	ldr	r1, [r7, #8]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f000 fd91 	bl	800d4d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c9b6:	6978      	ldr	r0, [r7, #20]
 800c9b8:	f7ff ff26 	bl	800c808 <prvUnlockQueue>
	}
 800c9bc:	bf00      	nop
 800c9be:	3718      	adds	r7, #24
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b08e      	sub	sp, #56	; 0x38
 800c9c8:	af04      	add	r7, sp, #16
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	607a      	str	r2, [r7, #4]
 800c9d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d10a      	bne.n	800c9ee <xTaskCreateStatic+0x2a>
	__asm volatile
 800c9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9dc:	f383 8811 	msr	BASEPRI, r3
 800c9e0:	f3bf 8f6f 	isb	sy
 800c9e4:	f3bf 8f4f 	dsb	sy
 800c9e8:	623b      	str	r3, [r7, #32]
}
 800c9ea:	bf00      	nop
 800c9ec:	e7fe      	b.n	800c9ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d10a      	bne.n	800ca0a <xTaskCreateStatic+0x46>
	__asm volatile
 800c9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f8:	f383 8811 	msr	BASEPRI, r3
 800c9fc:	f3bf 8f6f 	isb	sy
 800ca00:	f3bf 8f4f 	dsb	sy
 800ca04:	61fb      	str	r3, [r7, #28]
}
 800ca06:	bf00      	nop
 800ca08:	e7fe      	b.n	800ca08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ca0a:	23b4      	movs	r3, #180	; 0xb4
 800ca0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	2bb4      	cmp	r3, #180	; 0xb4
 800ca12:	d00a      	beq.n	800ca2a <xTaskCreateStatic+0x66>
	__asm volatile
 800ca14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca18:	f383 8811 	msr	BASEPRI, r3
 800ca1c:	f3bf 8f6f 	isb	sy
 800ca20:	f3bf 8f4f 	dsb	sy
 800ca24:	61bb      	str	r3, [r7, #24]
}
 800ca26:	bf00      	nop
 800ca28:	e7fe      	b.n	800ca28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ca2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ca2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d01e      	beq.n	800ca70 <xTaskCreateStatic+0xac>
 800ca32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d01b      	beq.n	800ca70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ca3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca44:	2202      	movs	r2, #2
 800ca46:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	9303      	str	r3, [sp, #12]
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca50:	9302      	str	r3, [sp, #8]
 800ca52:	f107 0314 	add.w	r3, r7, #20
 800ca56:	9301      	str	r3, [sp, #4]
 800ca58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5a:	9300      	str	r3, [sp, #0]
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	68b9      	ldr	r1, [r7, #8]
 800ca62:	68f8      	ldr	r0, [r7, #12]
 800ca64:	f000 f850 	bl	800cb08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca6a:	f000 f8f9 	bl	800cc60 <prvAddNewTaskToReadyList>
 800ca6e:	e001      	b.n	800ca74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ca70:	2300      	movs	r3, #0
 800ca72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ca74:	697b      	ldr	r3, [r7, #20]
	}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3728      	adds	r7, #40	; 0x28
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b08c      	sub	sp, #48	; 0x30
 800ca82:	af04      	add	r7, sp, #16
 800ca84:	60f8      	str	r0, [r7, #12]
 800ca86:	60b9      	str	r1, [r7, #8]
 800ca88:	603b      	str	r3, [r7, #0]
 800ca8a:	4613      	mov	r3, r2
 800ca8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ca8e:	88fb      	ldrh	r3, [r7, #6]
 800ca90:	009b      	lsls	r3, r3, #2
 800ca92:	4618      	mov	r0, r3
 800ca94:	f002 f88a 	bl	800ebac <pvPortMalloc>
 800ca98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00e      	beq.n	800cabe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800caa0:	20b4      	movs	r0, #180	; 0xb4
 800caa2:	f002 f883 	bl	800ebac <pvPortMalloc>
 800caa6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d003      	beq.n	800cab6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	697a      	ldr	r2, [r7, #20]
 800cab2:	631a      	str	r2, [r3, #48]	; 0x30
 800cab4:	e005      	b.n	800cac2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cab6:	6978      	ldr	r0, [r7, #20]
 800cab8:	f002 f944 	bl	800ed44 <vPortFree>
 800cabc:	e001      	b.n	800cac2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cabe:	2300      	movs	r3, #0
 800cac0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cac2:	69fb      	ldr	r3, [r7, #28]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d017      	beq.n	800caf8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cac8:	69fb      	ldr	r3, [r7, #28]
 800caca:	2200      	movs	r2, #0
 800cacc:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cad0:	88fa      	ldrh	r2, [r7, #6]
 800cad2:	2300      	movs	r3, #0
 800cad4:	9303      	str	r3, [sp, #12]
 800cad6:	69fb      	ldr	r3, [r7, #28]
 800cad8:	9302      	str	r3, [sp, #8]
 800cada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cadc:	9301      	str	r3, [sp, #4]
 800cade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae0:	9300      	str	r3, [sp, #0]
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	68b9      	ldr	r1, [r7, #8]
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	f000 f80e 	bl	800cb08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800caec:	69f8      	ldr	r0, [r7, #28]
 800caee:	f000 f8b7 	bl	800cc60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800caf2:	2301      	movs	r3, #1
 800caf4:	61bb      	str	r3, [r7, #24]
 800caf6:	e002      	b.n	800cafe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800caf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cafc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cafe:	69bb      	ldr	r3, [r7, #24]
	}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3720      	adds	r7, #32
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b088      	sub	sp, #32
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
 800cb14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	461a      	mov	r2, r3
 800cb20:	21a5      	movs	r1, #165	; 0xa5
 800cb22:	f003 fdfd 	bl	8010720 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cb30:	3b01      	subs	r3, #1
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	4413      	add	r3, r2
 800cb36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	f023 0307 	bic.w	r3, r3, #7
 800cb3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	f003 0307 	and.w	r3, r3, #7
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d00a      	beq.n	800cb60 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4e:	f383 8811 	msr	BASEPRI, r3
 800cb52:	f3bf 8f6f 	isb	sy
 800cb56:	f3bf 8f4f 	dsb	sy
 800cb5a:	617b      	str	r3, [r7, #20]
}
 800cb5c:	bf00      	nop
 800cb5e:	e7fe      	b.n	800cb5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d01f      	beq.n	800cba6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb66:	2300      	movs	r3, #0
 800cb68:	61fb      	str	r3, [r7, #28]
 800cb6a:	e012      	b.n	800cb92 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb6c:	68ba      	ldr	r2, [r7, #8]
 800cb6e:	69fb      	ldr	r3, [r7, #28]
 800cb70:	4413      	add	r3, r2
 800cb72:	7819      	ldrb	r1, [r3, #0]
 800cb74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb76:	69fb      	ldr	r3, [r7, #28]
 800cb78:	4413      	add	r3, r2
 800cb7a:	3334      	adds	r3, #52	; 0x34
 800cb7c:	460a      	mov	r2, r1
 800cb7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cb80:	68ba      	ldr	r2, [r7, #8]
 800cb82:	69fb      	ldr	r3, [r7, #28]
 800cb84:	4413      	add	r3, r2
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d006      	beq.n	800cb9a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	61fb      	str	r3, [r7, #28]
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	2b0f      	cmp	r3, #15
 800cb96:	d9e9      	bls.n	800cb6c <prvInitialiseNewTask+0x64>
 800cb98:	e000      	b.n	800cb9c <prvInitialiseNewTask+0x94>
			{
				break;
 800cb9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9e:	2200      	movs	r2, #0
 800cba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cba4:	e003      	b.n	800cbae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb0:	2b13      	cmp	r3, #19
 800cbb2:	d901      	bls.n	800cbb8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cbb4:	2313      	movs	r3, #19
 800cbb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbc2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbcc:	3304      	adds	r3, #4
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7fe fecc 	bl	800b96c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd6:	3318      	adds	r3, #24
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7fe fec7 	bl	800b96c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbe2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe6:	f1c3 0214 	rsb	r2, r3, #20
 800cbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbf2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc02:	2200      	movs	r2, #0
 800cc04:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc12:	335c      	adds	r3, #92	; 0x5c
 800cc14:	224c      	movs	r2, #76	; 0x4c
 800cc16:	2100      	movs	r1, #0
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f003 fd81 	bl	8010720 <memset>
 800cc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc20:	4a0c      	ldr	r2, [pc, #48]	; (800cc54 <prvInitialiseNewTask+0x14c>)
 800cc22:	661a      	str	r2, [r3, #96]	; 0x60
 800cc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc26:	4a0c      	ldr	r2, [pc, #48]	; (800cc58 <prvInitialiseNewTask+0x150>)
 800cc28:	665a      	str	r2, [r3, #100]	; 0x64
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2c:	4a0b      	ldr	r2, [pc, #44]	; (800cc5c <prvInitialiseNewTask+0x154>)
 800cc2e:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cc30:	683a      	ldr	r2, [r7, #0]
 800cc32:	68f9      	ldr	r1, [r7, #12]
 800cc34:	69b8      	ldr	r0, [r7, #24]
 800cc36:	f001 fd6d 	bl	800e714 <pxPortInitialiseStack>
 800cc3a:	4602      	mov	r2, r0
 800cc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d002      	beq.n	800cc4c <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc4c:	bf00      	nop
 800cc4e:	3720      	adds	r7, #32
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	20008f8c 	.word	0x20008f8c
 800cc58:	20008ff4 	.word	0x20008ff4
 800cc5c:	2000905c 	.word	0x2000905c

0800cc60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cc68:	f001 fe84 	bl	800e974 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cc6c:	4b2c      	ldr	r3, [pc, #176]	; (800cd20 <prvAddNewTaskToReadyList+0xc0>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	3301      	adds	r3, #1
 800cc72:	4a2b      	ldr	r2, [pc, #172]	; (800cd20 <prvAddNewTaskToReadyList+0xc0>)
 800cc74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cc76:	4b2b      	ldr	r3, [pc, #172]	; (800cd24 <prvAddNewTaskToReadyList+0xc4>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d109      	bne.n	800cc92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cc7e:	4a29      	ldr	r2, [pc, #164]	; (800cd24 <prvAddNewTaskToReadyList+0xc4>)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc84:	4b26      	ldr	r3, [pc, #152]	; (800cd20 <prvAddNewTaskToReadyList+0xc0>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d110      	bne.n	800ccae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc8c:	f000 fd50 	bl	800d730 <prvInitialiseTaskLists>
 800cc90:	e00d      	b.n	800ccae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc92:	4b25      	ldr	r3, [pc, #148]	; (800cd28 <prvAddNewTaskToReadyList+0xc8>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d109      	bne.n	800ccae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc9a:	4b22      	ldr	r3, [pc, #136]	; (800cd24 <prvAddNewTaskToReadyList+0xc4>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d802      	bhi.n	800ccae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cca8:	4a1e      	ldr	r2, [pc, #120]	; (800cd24 <prvAddNewTaskToReadyList+0xc4>)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ccae:	4b1f      	ldr	r3, [pc, #124]	; (800cd2c <prvAddNewTaskToReadyList+0xcc>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	4a1d      	ldr	r2, [pc, #116]	; (800cd2c <prvAddNewTaskToReadyList+0xcc>)
 800ccb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ccb8:	4b1c      	ldr	r3, [pc, #112]	; (800cd2c <prvAddNewTaskToReadyList+0xcc>)
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	409a      	lsls	r2, r3
 800ccc8:	4b19      	ldr	r3, [pc, #100]	; (800cd30 <prvAddNewTaskToReadyList+0xd0>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4313      	orrs	r3, r2
 800ccce:	4a18      	ldr	r2, [pc, #96]	; (800cd30 <prvAddNewTaskToReadyList+0xd0>)
 800ccd0:	6013      	str	r3, [r2, #0]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	009b      	lsls	r3, r3, #2
 800ccda:	4413      	add	r3, r2
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	4a15      	ldr	r2, [pc, #84]	; (800cd34 <prvAddNewTaskToReadyList+0xd4>)
 800cce0:	441a      	add	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	3304      	adds	r3, #4
 800cce6:	4619      	mov	r1, r3
 800cce8:	4610      	mov	r0, r2
 800ccea:	f7fe fe4c 	bl	800b986 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ccee:	f001 fe71 	bl	800e9d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ccf2:	4b0d      	ldr	r3, [pc, #52]	; (800cd28 <prvAddNewTaskToReadyList+0xc8>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00e      	beq.n	800cd18 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ccfa:	4b0a      	ldr	r3, [pc, #40]	; (800cd24 <prvAddNewTaskToReadyList+0xc4>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d207      	bcs.n	800cd18 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cd08:	4b0b      	ldr	r3, [pc, #44]	; (800cd38 <prvAddNewTaskToReadyList+0xd8>)
 800cd0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd0e:	601a      	str	r2, [r3, #0]
 800cd10:	f3bf 8f4f 	dsb	sy
 800cd14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd18:	bf00      	nop
 800cd1a:	3708      	adds	r7, #8
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	20003584 	.word	0x20003584
 800cd24:	2000337c 	.word	0x2000337c
 800cd28:	20003590 	.word	0x20003590
 800cd2c:	200035a0 	.word	0x200035a0
 800cd30:	2000358c 	.word	0x2000358c
 800cd34:	20003380 	.word	0x20003380
 800cd38:	e000ed04 	.word	0xe000ed04

0800cd3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cd44:	2300      	movs	r3, #0
 800cd46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d017      	beq.n	800cd7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cd4e:	4b13      	ldr	r3, [pc, #76]	; (800cd9c <vTaskDelay+0x60>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d00a      	beq.n	800cd6c <vTaskDelay+0x30>
	__asm volatile
 800cd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5a:	f383 8811 	msr	BASEPRI, r3
 800cd5e:	f3bf 8f6f 	isb	sy
 800cd62:	f3bf 8f4f 	dsb	sy
 800cd66:	60bb      	str	r3, [r7, #8]
}
 800cd68:	bf00      	nop
 800cd6a:	e7fe      	b.n	800cd6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cd6c:	f000 f8f2 	bl	800cf54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cd70:	2100      	movs	r1, #0
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f001 f8a0 	bl	800deb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cd78:	f000 f8fa 	bl	800cf70 <xTaskResumeAll>
 800cd7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d107      	bne.n	800cd94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cd84:	4b06      	ldr	r3, [pc, #24]	; (800cda0 <vTaskDelay+0x64>)
 800cd86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd8a:	601a      	str	r2, [r3, #0]
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd94:	bf00      	nop
 800cd96:	3710      	adds	r7, #16
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	200035ac 	.word	0x200035ac
 800cda0:	e000ed04 	.word	0xe000ed04

0800cda4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b088      	sub	sp, #32
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d10a      	bne.n	800cdcc <eTaskGetState+0x28>
	__asm volatile
 800cdb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdba:	f383 8811 	msr	BASEPRI, r3
 800cdbe:	f3bf 8f6f 	isb	sy
 800cdc2:	f3bf 8f4f 	dsb	sy
 800cdc6:	60bb      	str	r3, [r7, #8]
}
 800cdc8:	bf00      	nop
 800cdca:	e7fe      	b.n	800cdca <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800cdcc:	4b23      	ldr	r3, [pc, #140]	; (800ce5c <eTaskGetState+0xb8>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	69ba      	ldr	r2, [r7, #24]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d102      	bne.n	800cddc <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	77fb      	strb	r3, [r7, #31]
 800cdda:	e03a      	b.n	800ce52 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800cddc:	f001 fdca 	bl	800e974 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	695b      	ldr	r3, [r3, #20]
 800cde4:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800cde6:	4b1e      	ldr	r3, [pc, #120]	; (800ce60 <eTaskGetState+0xbc>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800cdec:	4b1d      	ldr	r3, [pc, #116]	; (800ce64 <eTaskGetState+0xc0>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800cdf2:	f001 fdef 	bl	800e9d4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800cdf6:	697a      	ldr	r2, [r7, #20]
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d003      	beq.n	800ce06 <eTaskGetState+0x62>
 800cdfe:	697a      	ldr	r2, [r7, #20]
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d102      	bne.n	800ce0c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800ce06:	2302      	movs	r3, #2
 800ce08:	77fb      	strb	r3, [r7, #31]
 800ce0a:	e022      	b.n	800ce52 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	4a16      	ldr	r2, [pc, #88]	; (800ce68 <eTaskGetState+0xc4>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d112      	bne.n	800ce3a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800ce14:	69bb      	ldr	r3, [r7, #24]
 800ce16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d10b      	bne.n	800ce34 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d102      	bne.n	800ce2e <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800ce28:	2302      	movs	r3, #2
 800ce2a:	77fb      	strb	r3, [r7, #31]
 800ce2c:	e011      	b.n	800ce52 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800ce2e:	2303      	movs	r3, #3
 800ce30:	77fb      	strb	r3, [r7, #31]
 800ce32:	e00e      	b.n	800ce52 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800ce34:	2302      	movs	r3, #2
 800ce36:	77fb      	strb	r3, [r7, #31]
 800ce38:	e00b      	b.n	800ce52 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	4a0b      	ldr	r2, [pc, #44]	; (800ce6c <eTaskGetState+0xc8>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d002      	beq.n	800ce48 <eTaskGetState+0xa4>
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d102      	bne.n	800ce4e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800ce48:	2304      	movs	r3, #4
 800ce4a:	77fb      	strb	r3, [r7, #31]
 800ce4c:	e001      	b.n	800ce52 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800ce52:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ce54:	4618      	mov	r0, r3
 800ce56:	3720      	adds	r7, #32
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	2000337c 	.word	0x2000337c
 800ce60:	20003538 	.word	0x20003538
 800ce64:	2000353c 	.word	0x2000353c
 800ce68:	2000356c 	.word	0x2000356c
 800ce6c:	20003554 	.word	0x20003554

0800ce70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b08a      	sub	sp, #40	; 0x28
 800ce74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ce76:	2300      	movs	r3, #0
 800ce78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ce7e:	463a      	mov	r2, r7
 800ce80:	1d39      	adds	r1, r7, #4
 800ce82:	f107 0308 	add.w	r3, r7, #8
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7f6 f934 	bl	80030f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ce8c:	6839      	ldr	r1, [r7, #0]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	9202      	str	r2, [sp, #8]
 800ce94:	9301      	str	r3, [sp, #4]
 800ce96:	2300      	movs	r3, #0
 800ce98:	9300      	str	r3, [sp, #0]
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	460a      	mov	r2, r1
 800ce9e:	4925      	ldr	r1, [pc, #148]	; (800cf34 <vTaskStartScheduler+0xc4>)
 800cea0:	4825      	ldr	r0, [pc, #148]	; (800cf38 <vTaskStartScheduler+0xc8>)
 800cea2:	f7ff fd8f 	bl	800c9c4 <xTaskCreateStatic>
 800cea6:	4603      	mov	r3, r0
 800cea8:	4a24      	ldr	r2, [pc, #144]	; (800cf3c <vTaskStartScheduler+0xcc>)
 800ceaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ceac:	4b23      	ldr	r3, [pc, #140]	; (800cf3c <vTaskStartScheduler+0xcc>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d002      	beq.n	800ceba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	617b      	str	r3, [r7, #20]
 800ceb8:	e001      	b.n	800cebe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ceba:	2300      	movs	r3, #0
 800cebc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d102      	bne.n	800ceca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cec4:	f001 f85e 	bl	800df84 <xTimerCreateTimerTask>
 800cec8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d11d      	bne.n	800cf0c <vTaskStartScheduler+0x9c>
	__asm volatile
 800ced0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced4:	f383 8811 	msr	BASEPRI, r3
 800ced8:	f3bf 8f6f 	isb	sy
 800cedc:	f3bf 8f4f 	dsb	sy
 800cee0:	613b      	str	r3, [r7, #16]
}
 800cee2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cee4:	4b16      	ldr	r3, [pc, #88]	; (800cf40 <vTaskStartScheduler+0xd0>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	335c      	adds	r3, #92	; 0x5c
 800ceea:	4a16      	ldr	r2, [pc, #88]	; (800cf44 <vTaskStartScheduler+0xd4>)
 800ceec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ceee:	4b16      	ldr	r3, [pc, #88]	; (800cf48 <vTaskStartScheduler+0xd8>)
 800cef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cef4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cef6:	4b15      	ldr	r3, [pc, #84]	; (800cf4c <vTaskStartScheduler+0xdc>)
 800cef8:	2201      	movs	r2, #1
 800cefa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cefc:	4b14      	ldr	r3, [pc, #80]	; (800cf50 <vTaskStartScheduler+0xe0>)
 800cefe:	2200      	movs	r2, #0
 800cf00:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800cf02:	f7f6 f8dd 	bl	80030c0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cf06:	f001 fc93 	bl	800e830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cf0a:	e00e      	b.n	800cf2a <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf12:	d10a      	bne.n	800cf2a <vTaskStartScheduler+0xba>
	__asm volatile
 800cf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf18:	f383 8811 	msr	BASEPRI, r3
 800cf1c:	f3bf 8f6f 	isb	sy
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	60fb      	str	r3, [r7, #12]
}
 800cf26:	bf00      	nop
 800cf28:	e7fe      	b.n	800cf28 <vTaskStartScheduler+0xb8>
}
 800cf2a:	bf00      	nop
 800cf2c:	3718      	adds	r7, #24
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	0801321c 	.word	0x0801321c
 800cf38:	0800d6fd 	.word	0x0800d6fd
 800cf3c:	200035a8 	.word	0x200035a8
 800cf40:	2000337c 	.word	0x2000337c
 800cf44:	20000238 	.word	0x20000238
 800cf48:	200035a4 	.word	0x200035a4
 800cf4c:	20003590 	.word	0x20003590
 800cf50:	20003588 	.word	0x20003588

0800cf54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cf54:	b480      	push	{r7}
 800cf56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cf58:	4b04      	ldr	r3, [pc, #16]	; (800cf6c <vTaskSuspendAll+0x18>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	4a03      	ldr	r2, [pc, #12]	; (800cf6c <vTaskSuspendAll+0x18>)
 800cf60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cf62:	bf00      	nop
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr
 800cf6c:	200035ac 	.word	0x200035ac

0800cf70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cf76:	2300      	movs	r3, #0
 800cf78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cf7e:	4b41      	ldr	r3, [pc, #260]	; (800d084 <xTaskResumeAll+0x114>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d10a      	bne.n	800cf9c <xTaskResumeAll+0x2c>
	__asm volatile
 800cf86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8a:	f383 8811 	msr	BASEPRI, r3
 800cf8e:	f3bf 8f6f 	isb	sy
 800cf92:	f3bf 8f4f 	dsb	sy
 800cf96:	603b      	str	r3, [r7, #0]
}
 800cf98:	bf00      	nop
 800cf9a:	e7fe      	b.n	800cf9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cf9c:	f001 fcea 	bl	800e974 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cfa0:	4b38      	ldr	r3, [pc, #224]	; (800d084 <xTaskResumeAll+0x114>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	3b01      	subs	r3, #1
 800cfa6:	4a37      	ldr	r2, [pc, #220]	; (800d084 <xTaskResumeAll+0x114>)
 800cfa8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfaa:	4b36      	ldr	r3, [pc, #216]	; (800d084 <xTaskResumeAll+0x114>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d161      	bne.n	800d076 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cfb2:	4b35      	ldr	r3, [pc, #212]	; (800d088 <xTaskResumeAll+0x118>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d05d      	beq.n	800d076 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cfba:	e02e      	b.n	800d01a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfbc:	4b33      	ldr	r3, [pc, #204]	; (800d08c <xTaskResumeAll+0x11c>)
 800cfbe:	68db      	ldr	r3, [r3, #12]
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	3318      	adds	r3, #24
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7fe fd39 	bl	800ba40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	3304      	adds	r3, #4
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7fe fd34 	bl	800ba40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfdc:	2201      	movs	r2, #1
 800cfde:	409a      	lsls	r2, r3
 800cfe0:	4b2b      	ldr	r3, [pc, #172]	; (800d090 <xTaskResumeAll+0x120>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	4a2a      	ldr	r2, [pc, #168]	; (800d090 <xTaskResumeAll+0x120>)
 800cfe8:	6013      	str	r3, [r2, #0]
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfee:	4613      	mov	r3, r2
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	4413      	add	r3, r2
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	4a27      	ldr	r2, [pc, #156]	; (800d094 <xTaskResumeAll+0x124>)
 800cff8:	441a      	add	r2, r3
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	3304      	adds	r3, #4
 800cffe:	4619      	mov	r1, r3
 800d000:	4610      	mov	r0, r2
 800d002:	f7fe fcc0 	bl	800b986 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d00a:	4b23      	ldr	r3, [pc, #140]	; (800d098 <xTaskResumeAll+0x128>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d010:	429a      	cmp	r2, r3
 800d012:	d302      	bcc.n	800d01a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d014:	4b21      	ldr	r3, [pc, #132]	; (800d09c <xTaskResumeAll+0x12c>)
 800d016:	2201      	movs	r2, #1
 800d018:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d01a:	4b1c      	ldr	r3, [pc, #112]	; (800d08c <xTaskResumeAll+0x11c>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d1cc      	bne.n	800cfbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d001      	beq.n	800d02c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d028:	f000 fcf8 	bl	800da1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d02c:	4b1c      	ldr	r3, [pc, #112]	; (800d0a0 <xTaskResumeAll+0x130>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d010      	beq.n	800d05a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d038:	f000 f8d6 	bl	800d1e8 <xTaskIncrementTick>
 800d03c:	4603      	mov	r3, r0
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d002      	beq.n	800d048 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d042:	4b16      	ldr	r3, [pc, #88]	; (800d09c <xTaskResumeAll+0x12c>)
 800d044:	2201      	movs	r2, #1
 800d046:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	3b01      	subs	r3, #1
 800d04c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d1f1      	bne.n	800d038 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d054:	4b12      	ldr	r3, [pc, #72]	; (800d0a0 <xTaskResumeAll+0x130>)
 800d056:	2200      	movs	r2, #0
 800d058:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d05a:	4b10      	ldr	r3, [pc, #64]	; (800d09c <xTaskResumeAll+0x12c>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d009      	beq.n	800d076 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d062:	2301      	movs	r3, #1
 800d064:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d066:	4b0f      	ldr	r3, [pc, #60]	; (800d0a4 <xTaskResumeAll+0x134>)
 800d068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d06c:	601a      	str	r2, [r3, #0]
 800d06e:	f3bf 8f4f 	dsb	sy
 800d072:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d076:	f001 fcad 	bl	800e9d4 <vPortExitCritical>

	return xAlreadyYielded;
 800d07a:	68bb      	ldr	r3, [r7, #8]
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3710      	adds	r7, #16
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	200035ac 	.word	0x200035ac
 800d088:	20003584 	.word	0x20003584
 800d08c:	20003540 	.word	0x20003540
 800d090:	2000358c 	.word	0x2000358c
 800d094:	20003380 	.word	0x20003380
 800d098:	2000337c 	.word	0x2000337c
 800d09c:	20003598 	.word	0x20003598
 800d0a0:	20003594 	.word	0x20003594
 800d0a4:	e000ed04 	.word	0xe000ed04

0800d0a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d0ae:	4b05      	ldr	r3, [pc, #20]	; (800d0c4 <xTaskGetTickCount+0x1c>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d0b4:	687b      	ldr	r3, [r7, #4]
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	370c      	adds	r7, #12
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr
 800d0c2:	bf00      	nop
 800d0c4:	20003588 	.word	0x20003588

0800d0c8 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b086      	sub	sp, #24
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	617b      	str	r3, [r7, #20]
 800d0d8:	2314      	movs	r3, #20
 800d0da:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800d0dc:	f7ff ff3a 	bl	800cf54 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800d0e0:	4b3b      	ldr	r3, [pc, #236]	; (800d1d0 <uxTaskGetSystemState+0x108>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	68ba      	ldr	r2, [r7, #8]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d36a      	bcc.n	800d1c0 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	3b01      	subs	r3, #1
 800d0ee:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800d0f0:	697a      	ldr	r2, [r7, #20]
 800d0f2:	4613      	mov	r3, r2
 800d0f4:	00db      	lsls	r3, r3, #3
 800d0f6:	4413      	add	r3, r2
 800d0f8:	009b      	lsls	r3, r3, #2
 800d0fa:	461a      	mov	r2, r3
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	1898      	adds	r0, r3, r2
 800d100:	693a      	ldr	r2, [r7, #16]
 800d102:	4613      	mov	r3, r2
 800d104:	009b      	lsls	r3, r3, #2
 800d106:	4413      	add	r3, r2
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	4a32      	ldr	r2, [pc, #200]	; (800d1d4 <uxTaskGetSystemState+0x10c>)
 800d10c:	4413      	add	r3, r2
 800d10e:	2201      	movs	r2, #1
 800d110:	4619      	mov	r1, r3
 800d112:	f000 fbe1 	bl	800d8d8 <prvListTasksWithinSingleList>
 800d116:	4602      	mov	r2, r0
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	4413      	add	r3, r2
 800d11c:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1e2      	bne.n	800d0ea <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800d124:	697a      	ldr	r2, [r7, #20]
 800d126:	4613      	mov	r3, r2
 800d128:	00db      	lsls	r3, r3, #3
 800d12a:	4413      	add	r3, r2
 800d12c:	009b      	lsls	r3, r3, #2
 800d12e:	461a      	mov	r2, r3
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	4413      	add	r3, r2
 800d134:	4a28      	ldr	r2, [pc, #160]	; (800d1d8 <uxTaskGetSystemState+0x110>)
 800d136:	6811      	ldr	r1, [r2, #0]
 800d138:	2202      	movs	r2, #2
 800d13a:	4618      	mov	r0, r3
 800d13c:	f000 fbcc 	bl	800d8d8 <prvListTasksWithinSingleList>
 800d140:	4602      	mov	r2, r0
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	4413      	add	r3, r2
 800d146:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800d148:	697a      	ldr	r2, [r7, #20]
 800d14a:	4613      	mov	r3, r2
 800d14c:	00db      	lsls	r3, r3, #3
 800d14e:	4413      	add	r3, r2
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	461a      	mov	r2, r3
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	4413      	add	r3, r2
 800d158:	4a20      	ldr	r2, [pc, #128]	; (800d1dc <uxTaskGetSystemState+0x114>)
 800d15a:	6811      	ldr	r1, [r2, #0]
 800d15c:	2202      	movs	r2, #2
 800d15e:	4618      	mov	r0, r3
 800d160:	f000 fbba 	bl	800d8d8 <prvListTasksWithinSingleList>
 800d164:	4602      	mov	r2, r0
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	4413      	add	r3, r2
 800d16a:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800d16c:	697a      	ldr	r2, [r7, #20]
 800d16e:	4613      	mov	r3, r2
 800d170:	00db      	lsls	r3, r3, #3
 800d172:	4413      	add	r3, r2
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	461a      	mov	r2, r3
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	4413      	add	r3, r2
 800d17c:	2204      	movs	r2, #4
 800d17e:	4918      	ldr	r1, [pc, #96]	; (800d1e0 <uxTaskGetSystemState+0x118>)
 800d180:	4618      	mov	r0, r3
 800d182:	f000 fba9 	bl	800d8d8 <prvListTasksWithinSingleList>
 800d186:	4602      	mov	r2, r0
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	4413      	add	r3, r2
 800d18c:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800d18e:	697a      	ldr	r2, [r7, #20]
 800d190:	4613      	mov	r3, r2
 800d192:	00db      	lsls	r3, r3, #3
 800d194:	4413      	add	r3, r2
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	461a      	mov	r2, r3
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	4413      	add	r3, r2
 800d19e:	2203      	movs	r2, #3
 800d1a0:	4910      	ldr	r1, [pc, #64]	; (800d1e4 <uxTaskGetSystemState+0x11c>)
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f000 fb98 	bl	800d8d8 <prvListTasksWithinSingleList>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d004      	beq.n	800d1c0 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800d1b6:	f7f5 ff8a 	bl	80030ce <getRunTimeCounterValue>
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800d1c0:	f7ff fed6 	bl	800cf70 <xTaskResumeAll>

		return uxTask;
 800d1c4:	697b      	ldr	r3, [r7, #20]
	}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3718      	adds	r7, #24
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	20003584 	.word	0x20003584
 800d1d4:	20003380 	.word	0x20003380
 800d1d8:	20003538 	.word	0x20003538
 800d1dc:	2000353c 	.word	0x2000353c
 800d1e0:	20003554 	.word	0x20003554
 800d1e4:	2000356c 	.word	0x2000356c

0800d1e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b086      	sub	sp, #24
 800d1ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1f2:	4b4e      	ldr	r3, [pc, #312]	; (800d32c <xTaskIncrementTick+0x144>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	f040 808e 	bne.w	800d318 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d1fc:	4b4c      	ldr	r3, [pc, #304]	; (800d330 <xTaskIncrementTick+0x148>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	3301      	adds	r3, #1
 800d202:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d204:	4a4a      	ldr	r2, [pc, #296]	; (800d330 <xTaskIncrementTick+0x148>)
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d120      	bne.n	800d252 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d210:	4b48      	ldr	r3, [pc, #288]	; (800d334 <xTaskIncrementTick+0x14c>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d00a      	beq.n	800d230 <xTaskIncrementTick+0x48>
	__asm volatile
 800d21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21e:	f383 8811 	msr	BASEPRI, r3
 800d222:	f3bf 8f6f 	isb	sy
 800d226:	f3bf 8f4f 	dsb	sy
 800d22a:	603b      	str	r3, [r7, #0]
}
 800d22c:	bf00      	nop
 800d22e:	e7fe      	b.n	800d22e <xTaskIncrementTick+0x46>
 800d230:	4b40      	ldr	r3, [pc, #256]	; (800d334 <xTaskIncrementTick+0x14c>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	60fb      	str	r3, [r7, #12]
 800d236:	4b40      	ldr	r3, [pc, #256]	; (800d338 <xTaskIncrementTick+0x150>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4a3e      	ldr	r2, [pc, #248]	; (800d334 <xTaskIncrementTick+0x14c>)
 800d23c:	6013      	str	r3, [r2, #0]
 800d23e:	4a3e      	ldr	r2, [pc, #248]	; (800d338 <xTaskIncrementTick+0x150>)
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	6013      	str	r3, [r2, #0]
 800d244:	4b3d      	ldr	r3, [pc, #244]	; (800d33c <xTaskIncrementTick+0x154>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	3301      	adds	r3, #1
 800d24a:	4a3c      	ldr	r2, [pc, #240]	; (800d33c <xTaskIncrementTick+0x154>)
 800d24c:	6013      	str	r3, [r2, #0]
 800d24e:	f000 fbe5 	bl	800da1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d252:	4b3b      	ldr	r3, [pc, #236]	; (800d340 <xTaskIncrementTick+0x158>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	693a      	ldr	r2, [r7, #16]
 800d258:	429a      	cmp	r2, r3
 800d25a:	d348      	bcc.n	800d2ee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d25c:	4b35      	ldr	r3, [pc, #212]	; (800d334 <xTaskIncrementTick+0x14c>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d104      	bne.n	800d270 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d266:	4b36      	ldr	r3, [pc, #216]	; (800d340 <xTaskIncrementTick+0x158>)
 800d268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d26c:	601a      	str	r2, [r3, #0]
					break;
 800d26e:	e03e      	b.n	800d2ee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d270:	4b30      	ldr	r3, [pc, #192]	; (800d334 <xTaskIncrementTick+0x14c>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d280:	693a      	ldr	r2, [r7, #16]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	429a      	cmp	r2, r3
 800d286:	d203      	bcs.n	800d290 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d288:	4a2d      	ldr	r2, [pc, #180]	; (800d340 <xTaskIncrementTick+0x158>)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d28e:	e02e      	b.n	800d2ee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	3304      	adds	r3, #4
 800d294:	4618      	mov	r0, r3
 800d296:	f7fe fbd3 	bl	800ba40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d004      	beq.n	800d2ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	3318      	adds	r3, #24
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7fe fbca 	bl	800ba40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	409a      	lsls	r2, r3
 800d2b4:	4b23      	ldr	r3, [pc, #140]	; (800d344 <xTaskIncrementTick+0x15c>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	4a22      	ldr	r2, [pc, #136]	; (800d344 <xTaskIncrementTick+0x15c>)
 800d2bc:	6013      	str	r3, [r2, #0]
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	4413      	add	r3, r2
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	4a1f      	ldr	r2, [pc, #124]	; (800d348 <xTaskIncrementTick+0x160>)
 800d2cc:	441a      	add	r2, r3
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	3304      	adds	r3, #4
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	4610      	mov	r0, r2
 800d2d6:	f7fe fb56 	bl	800b986 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2de:	4b1b      	ldr	r3, [pc, #108]	; (800d34c <xTaskIncrementTick+0x164>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d3b9      	bcc.n	800d25c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2ec:	e7b6      	b.n	800d25c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d2ee:	4b17      	ldr	r3, [pc, #92]	; (800d34c <xTaskIncrementTick+0x164>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2f4:	4914      	ldr	r1, [pc, #80]	; (800d348 <xTaskIncrementTick+0x160>)
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	009b      	lsls	r3, r3, #2
 800d2fa:	4413      	add	r3, r2
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	440b      	add	r3, r1
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	2b01      	cmp	r3, #1
 800d304:	d901      	bls.n	800d30a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d306:	2301      	movs	r3, #1
 800d308:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d30a:	4b11      	ldr	r3, [pc, #68]	; (800d350 <xTaskIncrementTick+0x168>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d007      	beq.n	800d322 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d312:	2301      	movs	r3, #1
 800d314:	617b      	str	r3, [r7, #20]
 800d316:	e004      	b.n	800d322 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d318:	4b0e      	ldr	r3, [pc, #56]	; (800d354 <xTaskIncrementTick+0x16c>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	3301      	adds	r3, #1
 800d31e:	4a0d      	ldr	r2, [pc, #52]	; (800d354 <xTaskIncrementTick+0x16c>)
 800d320:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d322:	697b      	ldr	r3, [r7, #20]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3718      	adds	r7, #24
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}
 800d32c:	200035ac 	.word	0x200035ac
 800d330:	20003588 	.word	0x20003588
 800d334:	20003538 	.word	0x20003538
 800d338:	2000353c 	.word	0x2000353c
 800d33c:	2000359c 	.word	0x2000359c
 800d340:	200035a4 	.word	0x200035a4
 800d344:	2000358c 	.word	0x2000358c
 800d348:	20003380 	.word	0x20003380
 800d34c:	2000337c 	.word	0x2000337c
 800d350:	20003598 	.word	0x20003598
 800d354:	20003594 	.word	0x20003594

0800d358 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b086      	sub	sp, #24
 800d35c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d35e:	4b43      	ldr	r3, [pc, #268]	; (800d46c <vTaskSwitchContext+0x114>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d003      	beq.n	800d36e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d366:	4b42      	ldr	r3, [pc, #264]	; (800d470 <vTaskSwitchContext+0x118>)
 800d368:	2201      	movs	r2, #1
 800d36a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d36c:	e07a      	b.n	800d464 <vTaskSwitchContext+0x10c>
		xYieldPending = pdFALSE;
 800d36e:	4b40      	ldr	r3, [pc, #256]	; (800d470 <vTaskSwitchContext+0x118>)
 800d370:	2200      	movs	r2, #0
 800d372:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800d374:	f7f5 feab 	bl	80030ce <getRunTimeCounterValue>
 800d378:	4603      	mov	r3, r0
 800d37a:	4a3e      	ldr	r2, [pc, #248]	; (800d474 <vTaskSwitchContext+0x11c>)
 800d37c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800d37e:	4b3d      	ldr	r3, [pc, #244]	; (800d474 <vTaskSwitchContext+0x11c>)
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	4b3d      	ldr	r3, [pc, #244]	; (800d478 <vTaskSwitchContext+0x120>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	429a      	cmp	r2, r3
 800d388:	d909      	bls.n	800d39e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800d38a:	4b3c      	ldr	r3, [pc, #240]	; (800d47c <vTaskSwitchContext+0x124>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800d390:	4a38      	ldr	r2, [pc, #224]	; (800d474 <vTaskSwitchContext+0x11c>)
 800d392:	6810      	ldr	r0, [r2, #0]
 800d394:	4a38      	ldr	r2, [pc, #224]	; (800d478 <vTaskSwitchContext+0x120>)
 800d396:	6812      	ldr	r2, [r2, #0]
 800d398:	1a82      	subs	r2, r0, r2
 800d39a:	440a      	add	r2, r1
 800d39c:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800d39e:	4b35      	ldr	r3, [pc, #212]	; (800d474 <vTaskSwitchContext+0x11c>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4a35      	ldr	r2, [pc, #212]	; (800d478 <vTaskSwitchContext+0x120>)
 800d3a4:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d3a6:	4b35      	ldr	r3, [pc, #212]	; (800d47c <vTaskSwitchContext+0x124>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	4b33      	ldr	r3, [pc, #204]	; (800d47c <vTaskSwitchContext+0x124>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d808      	bhi.n	800d3c8 <vTaskSwitchContext+0x70>
 800d3b6:	4b31      	ldr	r3, [pc, #196]	; (800d47c <vTaskSwitchContext+0x124>)
 800d3b8:	681a      	ldr	r2, [r3, #0]
 800d3ba:	4b30      	ldr	r3, [pc, #192]	; (800d47c <vTaskSwitchContext+0x124>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	3334      	adds	r3, #52	; 0x34
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	4610      	mov	r0, r2
 800d3c4:	f7f5 fe8b 	bl	80030de <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800d3c8:	4b2c      	ldr	r3, [pc, #176]	; (800d47c <vTaskSwitchContext+0x124>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a2c      	ldr	r2, [pc, #176]	; (800d480 <vTaskSwitchContext+0x128>)
 800d3ce:	6812      	ldr	r2, [r2, #0]
 800d3d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3d4:	4b2b      	ldr	r3, [pc, #172]	; (800d484 <vTaskSwitchContext+0x12c>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	fab3 f383 	clz	r3, r3
 800d3e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d3e2:	7afb      	ldrb	r3, [r7, #11]
 800d3e4:	f1c3 031f 	rsb	r3, r3, #31
 800d3e8:	617b      	str	r3, [r7, #20]
 800d3ea:	4927      	ldr	r1, [pc, #156]	; (800d488 <vTaskSwitchContext+0x130>)
 800d3ec:	697a      	ldr	r2, [r7, #20]
 800d3ee:	4613      	mov	r3, r2
 800d3f0:	009b      	lsls	r3, r3, #2
 800d3f2:	4413      	add	r3, r2
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	440b      	add	r3, r1
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d10a      	bne.n	800d414 <vTaskSwitchContext+0xbc>
	__asm volatile
 800d3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d402:	f383 8811 	msr	BASEPRI, r3
 800d406:	f3bf 8f6f 	isb	sy
 800d40a:	f3bf 8f4f 	dsb	sy
 800d40e:	607b      	str	r3, [r7, #4]
}
 800d410:	bf00      	nop
 800d412:	e7fe      	b.n	800d412 <vTaskSwitchContext+0xba>
 800d414:	697a      	ldr	r2, [r7, #20]
 800d416:	4613      	mov	r3, r2
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	4413      	add	r3, r2
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	4a1a      	ldr	r2, [pc, #104]	; (800d488 <vTaskSwitchContext+0x130>)
 800d420:	4413      	add	r3, r2
 800d422:	613b      	str	r3, [r7, #16]
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	685a      	ldr	r2, [r3, #4]
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	605a      	str	r2, [r3, #4]
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	685a      	ldr	r2, [r3, #4]
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	3308      	adds	r3, #8
 800d436:	429a      	cmp	r2, r3
 800d438:	d104      	bne.n	800d444 <vTaskSwitchContext+0xec>
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	685a      	ldr	r2, [r3, #4]
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	605a      	str	r2, [r3, #4]
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	4a0c      	ldr	r2, [pc, #48]	; (800d47c <vTaskSwitchContext+0x124>)
 800d44c:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800d44e:	4b0b      	ldr	r3, [pc, #44]	; (800d47c <vTaskSwitchContext+0x124>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d456:	4a0a      	ldr	r2, [pc, #40]	; (800d480 <vTaskSwitchContext+0x128>)
 800d458:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d45a:	4b08      	ldr	r3, [pc, #32]	; (800d47c <vTaskSwitchContext+0x124>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	335c      	adds	r3, #92	; 0x5c
 800d460:	4a0a      	ldr	r2, [pc, #40]	; (800d48c <vTaskSwitchContext+0x134>)
 800d462:	6013      	str	r3, [r2, #0]
}
 800d464:	bf00      	nop
 800d466:	3718      	adds	r7, #24
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	200035ac 	.word	0x200035ac
 800d470:	20003598 	.word	0x20003598
 800d474:	200035b4 	.word	0x200035b4
 800d478:	200035b0 	.word	0x200035b0
 800d47c:	2000337c 	.word	0x2000337c
 800d480:	20003580 	.word	0x20003580
 800d484:	2000358c 	.word	0x2000358c
 800d488:	20003380 	.word	0x20003380
 800d48c:	20000238 	.word	0x20000238

0800d490 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d10a      	bne.n	800d4b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a4:	f383 8811 	msr	BASEPRI, r3
 800d4a8:	f3bf 8f6f 	isb	sy
 800d4ac:	f3bf 8f4f 	dsb	sy
 800d4b0:	60fb      	str	r3, [r7, #12]
}
 800d4b2:	bf00      	nop
 800d4b4:	e7fe      	b.n	800d4b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d4b6:	4b07      	ldr	r3, [pc, #28]	; (800d4d4 <vTaskPlaceOnEventList+0x44>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	3318      	adds	r3, #24
 800d4bc:	4619      	mov	r1, r3
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f7fe fa85 	bl	800b9ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d4c4:	2101      	movs	r1, #1
 800d4c6:	6838      	ldr	r0, [r7, #0]
 800d4c8:	f000 fcf6 	bl	800deb8 <prvAddCurrentTaskToDelayedList>
}
 800d4cc:	bf00      	nop
 800d4ce:	3710      	adds	r7, #16
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	2000337c 	.word	0x2000337c

0800d4d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b086      	sub	sp, #24
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d10a      	bne.n	800d500 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ee:	f383 8811 	msr	BASEPRI, r3
 800d4f2:	f3bf 8f6f 	isb	sy
 800d4f6:	f3bf 8f4f 	dsb	sy
 800d4fa:	617b      	str	r3, [r7, #20]
}
 800d4fc:	bf00      	nop
 800d4fe:	e7fe      	b.n	800d4fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d500:	4b0a      	ldr	r3, [pc, #40]	; (800d52c <vTaskPlaceOnEventListRestricted+0x54>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	3318      	adds	r3, #24
 800d506:	4619      	mov	r1, r3
 800d508:	68f8      	ldr	r0, [r7, #12]
 800d50a:	f7fe fa3c 	bl	800b986 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d002      	beq.n	800d51a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d518:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d51a:	6879      	ldr	r1, [r7, #4]
 800d51c:	68b8      	ldr	r0, [r7, #8]
 800d51e:	f000 fccb 	bl	800deb8 <prvAddCurrentTaskToDelayedList>
	}
 800d522:	bf00      	nop
 800d524:	3718      	adds	r7, #24
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}
 800d52a:	bf00      	nop
 800d52c:	2000337c 	.word	0x2000337c

0800d530 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b086      	sub	sp, #24
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	68db      	ldr	r3, [r3, #12]
 800d53c:	68db      	ldr	r3, [r3, #12]
 800d53e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d10a      	bne.n	800d55c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54a:	f383 8811 	msr	BASEPRI, r3
 800d54e:	f3bf 8f6f 	isb	sy
 800d552:	f3bf 8f4f 	dsb	sy
 800d556:	60fb      	str	r3, [r7, #12]
}
 800d558:	bf00      	nop
 800d55a:	e7fe      	b.n	800d55a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	3318      	adds	r3, #24
 800d560:	4618      	mov	r0, r3
 800d562:	f7fe fa6d 	bl	800ba40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d566:	4b1d      	ldr	r3, [pc, #116]	; (800d5dc <xTaskRemoveFromEventList+0xac>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d11c      	bne.n	800d5a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	3304      	adds	r3, #4
 800d572:	4618      	mov	r0, r3
 800d574:	f7fe fa64 	bl	800ba40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d57c:	2201      	movs	r2, #1
 800d57e:	409a      	lsls	r2, r3
 800d580:	4b17      	ldr	r3, [pc, #92]	; (800d5e0 <xTaskRemoveFromEventList+0xb0>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4313      	orrs	r3, r2
 800d586:	4a16      	ldr	r2, [pc, #88]	; (800d5e0 <xTaskRemoveFromEventList+0xb0>)
 800d588:	6013      	str	r3, [r2, #0]
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d58e:	4613      	mov	r3, r2
 800d590:	009b      	lsls	r3, r3, #2
 800d592:	4413      	add	r3, r2
 800d594:	009b      	lsls	r3, r3, #2
 800d596:	4a13      	ldr	r2, [pc, #76]	; (800d5e4 <xTaskRemoveFromEventList+0xb4>)
 800d598:	441a      	add	r2, r3
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	3304      	adds	r3, #4
 800d59e:	4619      	mov	r1, r3
 800d5a0:	4610      	mov	r0, r2
 800d5a2:	f7fe f9f0 	bl	800b986 <vListInsertEnd>
 800d5a6:	e005      	b.n	800d5b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	3318      	adds	r3, #24
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	480e      	ldr	r0, [pc, #56]	; (800d5e8 <xTaskRemoveFromEventList+0xb8>)
 800d5b0:	f7fe f9e9 	bl	800b986 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5b8:	4b0c      	ldr	r3, [pc, #48]	; (800d5ec <xTaskRemoveFromEventList+0xbc>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d905      	bls.n	800d5ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d5c6:	4b0a      	ldr	r3, [pc, #40]	; (800d5f0 <xTaskRemoveFromEventList+0xc0>)
 800d5c8:	2201      	movs	r2, #1
 800d5ca:	601a      	str	r2, [r3, #0]
 800d5cc:	e001      	b.n	800d5d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d5d2:	697b      	ldr	r3, [r7, #20]
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3718      	adds	r7, #24
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}
 800d5dc:	200035ac 	.word	0x200035ac
 800d5e0:	2000358c 	.word	0x2000358c
 800d5e4:	20003380 	.word	0x20003380
 800d5e8:	20003540 	.word	0x20003540
 800d5ec:	2000337c 	.word	0x2000337c
 800d5f0:	20003598 	.word	0x20003598

0800d5f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d5fc:	4b06      	ldr	r3, [pc, #24]	; (800d618 <vTaskInternalSetTimeOutState+0x24>)
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d604:	4b05      	ldr	r3, [pc, #20]	; (800d61c <vTaskInternalSetTimeOutState+0x28>)
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	605a      	str	r2, [r3, #4]
}
 800d60c:	bf00      	nop
 800d60e:	370c      	adds	r7, #12
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr
 800d618:	2000359c 	.word	0x2000359c
 800d61c:	20003588 	.word	0x20003588

0800d620 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b088      	sub	sp, #32
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d10a      	bne.n	800d646 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d634:	f383 8811 	msr	BASEPRI, r3
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	613b      	str	r3, [r7, #16]
}
 800d642:	bf00      	nop
 800d644:	e7fe      	b.n	800d644 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d10a      	bne.n	800d662 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d650:	f383 8811 	msr	BASEPRI, r3
 800d654:	f3bf 8f6f 	isb	sy
 800d658:	f3bf 8f4f 	dsb	sy
 800d65c:	60fb      	str	r3, [r7, #12]
}
 800d65e:	bf00      	nop
 800d660:	e7fe      	b.n	800d660 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d662:	f001 f987 	bl	800e974 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d666:	4b1d      	ldr	r3, [pc, #116]	; (800d6dc <xTaskCheckForTimeOut+0xbc>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	69ba      	ldr	r2, [r7, #24]
 800d672:	1ad3      	subs	r3, r2, r3
 800d674:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d67e:	d102      	bne.n	800d686 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d680:	2300      	movs	r3, #0
 800d682:	61fb      	str	r3, [r7, #28]
 800d684:	e023      	b.n	800d6ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	4b15      	ldr	r3, [pc, #84]	; (800d6e0 <xTaskCheckForTimeOut+0xc0>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d007      	beq.n	800d6a2 <xTaskCheckForTimeOut+0x82>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	685b      	ldr	r3, [r3, #4]
 800d696:	69ba      	ldr	r2, [r7, #24]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d302      	bcc.n	800d6a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d69c:	2301      	movs	r3, #1
 800d69e:	61fb      	str	r3, [r7, #28]
 800d6a0:	e015      	b.n	800d6ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	697a      	ldr	r2, [r7, #20]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d20b      	bcs.n	800d6c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	1ad2      	subs	r2, r2, r3
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f7ff ff9b 	bl	800d5f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	61fb      	str	r3, [r7, #28]
 800d6c2:	e004      	b.n	800d6ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d6ce:	f001 f981 	bl	800e9d4 <vPortExitCritical>

	return xReturn;
 800d6d2:	69fb      	ldr	r3, [r7, #28]
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3720      	adds	r7, #32
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	20003588 	.word	0x20003588
 800d6e0:	2000359c 	.word	0x2000359c

0800d6e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d6e8:	4b03      	ldr	r3, [pc, #12]	; (800d6f8 <vTaskMissedYield+0x14>)
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	601a      	str	r2, [r3, #0]
}
 800d6ee:	bf00      	nop
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr
 800d6f8:	20003598 	.word	0x20003598

0800d6fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d704:	f000 f854 	bl	800d7b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d708:	4b07      	ldr	r3, [pc, #28]	; (800d728 <prvIdleTask+0x2c>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d907      	bls.n	800d720 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d710:	4b06      	ldr	r3, [pc, #24]	; (800d72c <prvIdleTask+0x30>)
 800d712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d716:	601a      	str	r2, [r3, #0]
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d720:	f7f6 fb0a 	bl	8003d38 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d724:	e7ee      	b.n	800d704 <prvIdleTask+0x8>
 800d726:	bf00      	nop
 800d728:	20003380 	.word	0x20003380
 800d72c:	e000ed04 	.word	0xe000ed04

0800d730 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d736:	2300      	movs	r3, #0
 800d738:	607b      	str	r3, [r7, #4]
 800d73a:	e00c      	b.n	800d756 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d73c:	687a      	ldr	r2, [r7, #4]
 800d73e:	4613      	mov	r3, r2
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	4413      	add	r3, r2
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	4a12      	ldr	r2, [pc, #72]	; (800d790 <prvInitialiseTaskLists+0x60>)
 800d748:	4413      	add	r3, r2
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fe f8ee 	bl	800b92c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	3301      	adds	r3, #1
 800d754:	607b      	str	r3, [r7, #4]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2b13      	cmp	r3, #19
 800d75a:	d9ef      	bls.n	800d73c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d75c:	480d      	ldr	r0, [pc, #52]	; (800d794 <prvInitialiseTaskLists+0x64>)
 800d75e:	f7fe f8e5 	bl	800b92c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d762:	480d      	ldr	r0, [pc, #52]	; (800d798 <prvInitialiseTaskLists+0x68>)
 800d764:	f7fe f8e2 	bl	800b92c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d768:	480c      	ldr	r0, [pc, #48]	; (800d79c <prvInitialiseTaskLists+0x6c>)
 800d76a:	f7fe f8df 	bl	800b92c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d76e:	480c      	ldr	r0, [pc, #48]	; (800d7a0 <prvInitialiseTaskLists+0x70>)
 800d770:	f7fe f8dc 	bl	800b92c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d774:	480b      	ldr	r0, [pc, #44]	; (800d7a4 <prvInitialiseTaskLists+0x74>)
 800d776:	f7fe f8d9 	bl	800b92c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d77a:	4b0b      	ldr	r3, [pc, #44]	; (800d7a8 <prvInitialiseTaskLists+0x78>)
 800d77c:	4a05      	ldr	r2, [pc, #20]	; (800d794 <prvInitialiseTaskLists+0x64>)
 800d77e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d780:	4b0a      	ldr	r3, [pc, #40]	; (800d7ac <prvInitialiseTaskLists+0x7c>)
 800d782:	4a05      	ldr	r2, [pc, #20]	; (800d798 <prvInitialiseTaskLists+0x68>)
 800d784:	601a      	str	r2, [r3, #0]
}
 800d786:	bf00      	nop
 800d788:	3708      	adds	r7, #8
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	20003380 	.word	0x20003380
 800d794:	20003510 	.word	0x20003510
 800d798:	20003524 	.word	0x20003524
 800d79c:	20003540 	.word	0x20003540
 800d7a0:	20003554 	.word	0x20003554
 800d7a4:	2000356c 	.word	0x2000356c
 800d7a8:	20003538 	.word	0x20003538
 800d7ac:	2000353c 	.word	0x2000353c

0800d7b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d7b6:	e019      	b.n	800d7ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d7b8:	f001 f8dc 	bl	800e974 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7bc:	4b10      	ldr	r3, [pc, #64]	; (800d800 <prvCheckTasksWaitingTermination+0x50>)
 800d7be:	68db      	ldr	r3, [r3, #12]
 800d7c0:	68db      	ldr	r3, [r3, #12]
 800d7c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	3304      	adds	r3, #4
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7fe f939 	bl	800ba40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d7ce:	4b0d      	ldr	r3, [pc, #52]	; (800d804 <prvCheckTasksWaitingTermination+0x54>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	4a0b      	ldr	r2, [pc, #44]	; (800d804 <prvCheckTasksWaitingTermination+0x54>)
 800d7d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d7d8:	4b0b      	ldr	r3, [pc, #44]	; (800d808 <prvCheckTasksWaitingTermination+0x58>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	3b01      	subs	r3, #1
 800d7de:	4a0a      	ldr	r2, [pc, #40]	; (800d808 <prvCheckTasksWaitingTermination+0x58>)
 800d7e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d7e2:	f001 f8f7 	bl	800e9d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 f8e4 	bl	800d9b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d7ec:	4b06      	ldr	r3, [pc, #24]	; (800d808 <prvCheckTasksWaitingTermination+0x58>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d1e1      	bne.n	800d7b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d7f4:	bf00      	nop
 800d7f6:	bf00      	nop
 800d7f8:	3708      	adds	r7, #8
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
 800d7fe:	bf00      	nop
 800d800:	20003554 	.word	0x20003554
 800d804:	20003584 	.word	0x20003584
 800d808:	20003568 	.word	0x20003568

0800d80c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b086      	sub	sp, #24
 800d810:	af00      	add	r7, sp, #0
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	60b9      	str	r1, [r7, #8]
 800d816:	607a      	str	r2, [r7, #4]
 800d818:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d102      	bne.n	800d826 <vTaskGetInfo+0x1a>
 800d820:	4b2c      	ldr	r3, [pc, #176]	; (800d8d4 <vTaskGetInfo+0xc8>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	e000      	b.n	800d828 <vTaskGetInfo+0x1c>
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	697a      	ldr	r2, [r7, #20]
 800d82e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800d862:	78fb      	ldrb	r3, [r7, #3]
 800d864:	2b05      	cmp	r3, #5
 800d866:	d01a      	beq.n	800d89e <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800d868:	4b1a      	ldr	r3, [pc, #104]	; (800d8d4 <vTaskGetInfo+0xc8>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	697a      	ldr	r2, [r7, #20]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d103      	bne.n	800d87a <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	2200      	movs	r2, #0
 800d876:	731a      	strb	r2, [r3, #12]
 800d878:	e018      	b.n	800d8ac <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	78fa      	ldrb	r2, [r7, #3]
 800d87e:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800d880:	78fb      	ldrb	r3, [r7, #3]
 800d882:	2b03      	cmp	r3, #3
 800d884:	d112      	bne.n	800d8ac <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800d886:	f7ff fb65 	bl	800cf54 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d002      	beq.n	800d898 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	2202      	movs	r2, #2
 800d896:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800d898:	f7ff fb6a 	bl	800cf70 <xTaskResumeAll>
 800d89c:	e006      	b.n	800d8ac <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800d89e:	6978      	ldr	r0, [r7, #20]
 800d8a0:	f7ff fa80 	bl	800cda4 <eTaskGetState>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d009      	beq.n	800d8c6 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f000 f860 	bl	800d97c <prvTaskCheckFreeStackSpace>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	461a      	mov	r2, r3
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800d8c4:	e002      	b.n	800d8cc <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	841a      	strh	r2, [r3, #32]
	}
 800d8cc:	bf00      	nop
 800d8ce:	3718      	adds	r7, #24
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	2000337c 	.word	0x2000337c

0800d8d8 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b08a      	sub	sp, #40	; 0x28
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	60b9      	str	r1, [r7, #8]
 800d8e2:	4613      	mov	r3, r2
 800d8e4:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d03f      	beq.n	800d972 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	623b      	str	r3, [r7, #32]
 800d8f6:	6a3b      	ldr	r3, [r7, #32]
 800d8f8:	685b      	ldr	r3, [r3, #4]
 800d8fa:	685a      	ldr	r2, [r3, #4]
 800d8fc:	6a3b      	ldr	r3, [r7, #32]
 800d8fe:	605a      	str	r2, [r3, #4]
 800d900:	6a3b      	ldr	r3, [r7, #32]
 800d902:	685a      	ldr	r2, [r3, #4]
 800d904:	6a3b      	ldr	r3, [r7, #32]
 800d906:	3308      	adds	r3, #8
 800d908:	429a      	cmp	r2, r3
 800d90a:	d104      	bne.n	800d916 <prvListTasksWithinSingleList+0x3e>
 800d90c:	6a3b      	ldr	r3, [r7, #32]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	685a      	ldr	r2, [r3, #4]
 800d912:	6a3b      	ldr	r3, [r7, #32]
 800d914:	605a      	str	r2, [r3, #4]
 800d916:	6a3b      	ldr	r3, [r7, #32]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	68db      	ldr	r3, [r3, #12]
 800d91c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	61bb      	str	r3, [r7, #24]
 800d922:	69bb      	ldr	r3, [r7, #24]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	685a      	ldr	r2, [r3, #4]
 800d928:	69bb      	ldr	r3, [r7, #24]
 800d92a:	605a      	str	r2, [r3, #4]
 800d92c:	69bb      	ldr	r3, [r7, #24]
 800d92e:	685a      	ldr	r2, [r3, #4]
 800d930:	69bb      	ldr	r3, [r7, #24]
 800d932:	3308      	adds	r3, #8
 800d934:	429a      	cmp	r2, r3
 800d936:	d104      	bne.n	800d942 <prvListTasksWithinSingleList+0x6a>
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	685a      	ldr	r2, [r3, #4]
 800d93e:	69bb      	ldr	r3, [r7, #24]
 800d940:	605a      	str	r2, [r3, #4]
 800d942:	69bb      	ldr	r3, [r7, #24]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	68db      	ldr	r3, [r3, #12]
 800d948:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800d94a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d94c:	4613      	mov	r3, r2
 800d94e:	00db      	lsls	r3, r3, #3
 800d950:	4413      	add	r3, r2
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	461a      	mov	r2, r3
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	1899      	adds	r1, r3, r2
 800d95a:	79fb      	ldrb	r3, [r7, #7]
 800d95c:	2201      	movs	r2, #1
 800d95e:	6978      	ldr	r0, [r7, #20]
 800d960:	f7ff ff54 	bl	800d80c <vTaskGetInfo>
				uxTask++;
 800d964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d966:	3301      	adds	r3, #1
 800d968:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800d96a:	697a      	ldr	r2, [r7, #20]
 800d96c:	69fb      	ldr	r3, [r7, #28]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d1d5      	bne.n	800d91e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800d972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d974:	4618      	mov	r0, r3
 800d976:	3728      	adds	r7, #40	; 0x28
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800d97c:	b480      	push	{r7}
 800d97e:	b085      	sub	sp, #20
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800d984:	2300      	movs	r3, #0
 800d986:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d988:	e005      	b.n	800d996 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	3301      	adds	r3, #1
 800d98e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	3301      	adds	r3, #1
 800d994:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	2ba5      	cmp	r3, #165	; 0xa5
 800d99c:	d0f5      	beq.n	800d98a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	089b      	lsrs	r3, r3, #2
 800d9a2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	b29b      	uxth	r3, r3
	}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3714      	adds	r7, #20
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr

0800d9b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	335c      	adds	r3, #92	; 0x5c
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f002 fedd 	bl	8010780 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d108      	bne.n	800d9e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f001 f9b5 	bl	800ed44 <vPortFree>
				vPortFree( pxTCB );
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f001 f9b2 	bl	800ed44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d9e0:	e018      	b.n	800da14 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800d9e8:	2b01      	cmp	r3, #1
 800d9ea:	d103      	bne.n	800d9f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f001 f9a9 	bl	800ed44 <vPortFree>
	}
 800d9f2:	e00f      	b.n	800da14 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800d9fa:	2b02      	cmp	r3, #2
 800d9fc:	d00a      	beq.n	800da14 <prvDeleteTCB+0x60>
	__asm volatile
 800d9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da02:	f383 8811 	msr	BASEPRI, r3
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	60fb      	str	r3, [r7, #12]
}
 800da10:	bf00      	nop
 800da12:	e7fe      	b.n	800da12 <prvDeleteTCB+0x5e>
	}
 800da14:	bf00      	nop
 800da16:	3710      	adds	r7, #16
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da22:	4b0c      	ldr	r3, [pc, #48]	; (800da54 <prvResetNextTaskUnblockTime+0x38>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d104      	bne.n	800da36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800da2c:	4b0a      	ldr	r3, [pc, #40]	; (800da58 <prvResetNextTaskUnblockTime+0x3c>)
 800da2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800da34:	e008      	b.n	800da48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da36:	4b07      	ldr	r3, [pc, #28]	; (800da54 <prvResetNextTaskUnblockTime+0x38>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	68db      	ldr	r3, [r3, #12]
 800da3c:	68db      	ldr	r3, [r3, #12]
 800da3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	4a04      	ldr	r2, [pc, #16]	; (800da58 <prvResetNextTaskUnblockTime+0x3c>)
 800da46:	6013      	str	r3, [r2, #0]
}
 800da48:	bf00      	nop
 800da4a:	370c      	adds	r7, #12
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr
 800da54:	20003538 	.word	0x20003538
 800da58:	200035a4 	.word	0x200035a4

0800da5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800da62:	4b0b      	ldr	r3, [pc, #44]	; (800da90 <xTaskGetSchedulerState+0x34>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d102      	bne.n	800da70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800da6a:	2301      	movs	r3, #1
 800da6c:	607b      	str	r3, [r7, #4]
 800da6e:	e008      	b.n	800da82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da70:	4b08      	ldr	r3, [pc, #32]	; (800da94 <xTaskGetSchedulerState+0x38>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d102      	bne.n	800da7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800da78:	2302      	movs	r3, #2
 800da7a:	607b      	str	r3, [r7, #4]
 800da7c:	e001      	b.n	800da82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800da7e:	2300      	movs	r3, #0
 800da80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800da82:	687b      	ldr	r3, [r7, #4]
	}
 800da84:	4618      	mov	r0, r3
 800da86:	370c      	adds	r7, #12
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr
 800da90:	20003590 	.word	0x20003590
 800da94:	200035ac 	.word	0x200035ac

0800da98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800daa4:	2300      	movs	r3, #0
 800daa6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d05e      	beq.n	800db6c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dab2:	4b31      	ldr	r3, [pc, #196]	; (800db78 <xTaskPriorityInherit+0xe0>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab8:	429a      	cmp	r2, r3
 800daba:	d24e      	bcs.n	800db5a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	699b      	ldr	r3, [r3, #24]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	db06      	blt.n	800dad2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dac4:	4b2c      	ldr	r3, [pc, #176]	; (800db78 <xTaskPriorityInherit+0xe0>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daca:	f1c3 0214 	rsb	r2, r3, #20
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	6959      	ldr	r1, [r3, #20]
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dada:	4613      	mov	r3, r2
 800dadc:	009b      	lsls	r3, r3, #2
 800dade:	4413      	add	r3, r2
 800dae0:	009b      	lsls	r3, r3, #2
 800dae2:	4a26      	ldr	r2, [pc, #152]	; (800db7c <xTaskPriorityInherit+0xe4>)
 800dae4:	4413      	add	r3, r2
 800dae6:	4299      	cmp	r1, r3
 800dae8:	d12f      	bne.n	800db4a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	3304      	adds	r3, #4
 800daee:	4618      	mov	r0, r3
 800daf0:	f7fd ffa6 	bl	800ba40 <uxListRemove>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d10a      	bne.n	800db10 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dafe:	2201      	movs	r2, #1
 800db00:	fa02 f303 	lsl.w	r3, r2, r3
 800db04:	43da      	mvns	r2, r3
 800db06:	4b1e      	ldr	r3, [pc, #120]	; (800db80 <xTaskPriorityInherit+0xe8>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4013      	ands	r3, r2
 800db0c:	4a1c      	ldr	r2, [pc, #112]	; (800db80 <xTaskPriorityInherit+0xe8>)
 800db0e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db10:	4b19      	ldr	r3, [pc, #100]	; (800db78 <xTaskPriorityInherit+0xe0>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db1e:	2201      	movs	r2, #1
 800db20:	409a      	lsls	r2, r3
 800db22:	4b17      	ldr	r3, [pc, #92]	; (800db80 <xTaskPriorityInherit+0xe8>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4313      	orrs	r3, r2
 800db28:	4a15      	ldr	r2, [pc, #84]	; (800db80 <xTaskPriorityInherit+0xe8>)
 800db2a:	6013      	str	r3, [r2, #0]
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db30:	4613      	mov	r3, r2
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	4413      	add	r3, r2
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	4a10      	ldr	r2, [pc, #64]	; (800db7c <xTaskPriorityInherit+0xe4>)
 800db3a:	441a      	add	r2, r3
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	3304      	adds	r3, #4
 800db40:	4619      	mov	r1, r3
 800db42:	4610      	mov	r0, r2
 800db44:	f7fd ff1f 	bl	800b986 <vListInsertEnd>
 800db48:	e004      	b.n	800db54 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db4a:	4b0b      	ldr	r3, [pc, #44]	; (800db78 <xTaskPriorityInherit+0xe0>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800db54:	2301      	movs	r3, #1
 800db56:	60fb      	str	r3, [r7, #12]
 800db58:	e008      	b.n	800db6c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db5e:	4b06      	ldr	r3, [pc, #24]	; (800db78 <xTaskPriorityInherit+0xe0>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db64:	429a      	cmp	r2, r3
 800db66:	d201      	bcs.n	800db6c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800db68:	2301      	movs	r3, #1
 800db6a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db6c:	68fb      	ldr	r3, [r7, #12]
	}
 800db6e:	4618      	mov	r0, r3
 800db70:	3710      	adds	r7, #16
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	2000337c 	.word	0x2000337c
 800db7c:	20003380 	.word	0x20003380
 800db80:	2000358c 	.word	0x2000358c

0800db84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800db84:	b580      	push	{r7, lr}
 800db86:	b086      	sub	sp, #24
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800db90:	2300      	movs	r3, #0
 800db92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d06e      	beq.n	800dc78 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800db9a:	4b3a      	ldr	r3, [pc, #232]	; (800dc84 <xTaskPriorityDisinherit+0x100>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	693a      	ldr	r2, [r7, #16]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d00a      	beq.n	800dbba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba8:	f383 8811 	msr	BASEPRI, r3
 800dbac:	f3bf 8f6f 	isb	sy
 800dbb0:	f3bf 8f4f 	dsb	sy
 800dbb4:	60fb      	str	r3, [r7, #12]
}
 800dbb6:	bf00      	nop
 800dbb8:	e7fe      	b.n	800dbb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d10a      	bne.n	800dbd8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc6:	f383 8811 	msr	BASEPRI, r3
 800dbca:	f3bf 8f6f 	isb	sy
 800dbce:	f3bf 8f4f 	dsb	sy
 800dbd2:	60bb      	str	r3, [r7, #8]
}
 800dbd4:	bf00      	nop
 800dbd6:	e7fe      	b.n	800dbd6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbdc:	1e5a      	subs	r2, r3, #1
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d044      	beq.n	800dc78 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d140      	bne.n	800dc78 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	3304      	adds	r3, #4
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7fd ff20 	bl	800ba40 <uxListRemove>
 800dc00:	4603      	mov	r3, r0
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d115      	bne.n	800dc32 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc0a:	491f      	ldr	r1, [pc, #124]	; (800dc88 <xTaskPriorityDisinherit+0x104>)
 800dc0c:	4613      	mov	r3, r2
 800dc0e:	009b      	lsls	r3, r3, #2
 800dc10:	4413      	add	r3, r2
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	440b      	add	r3, r1
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d10a      	bne.n	800dc32 <xTaskPriorityDisinherit+0xae>
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc20:	2201      	movs	r2, #1
 800dc22:	fa02 f303 	lsl.w	r3, r2, r3
 800dc26:	43da      	mvns	r2, r3
 800dc28:	4b18      	ldr	r3, [pc, #96]	; (800dc8c <xTaskPriorityDisinherit+0x108>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4013      	ands	r3, r2
 800dc2e:	4a17      	ldr	r2, [pc, #92]	; (800dc8c <xTaskPriorityDisinherit+0x108>)
 800dc30:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc3e:	f1c3 0214 	rsb	r2, r3, #20
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	409a      	lsls	r2, r3
 800dc4e:	4b0f      	ldr	r3, [pc, #60]	; (800dc8c <xTaskPriorityDisinherit+0x108>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4313      	orrs	r3, r2
 800dc54:	4a0d      	ldr	r2, [pc, #52]	; (800dc8c <xTaskPriorityDisinherit+0x108>)
 800dc56:	6013      	str	r3, [r2, #0]
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc5c:	4613      	mov	r3, r2
 800dc5e:	009b      	lsls	r3, r3, #2
 800dc60:	4413      	add	r3, r2
 800dc62:	009b      	lsls	r3, r3, #2
 800dc64:	4a08      	ldr	r2, [pc, #32]	; (800dc88 <xTaskPriorityDisinherit+0x104>)
 800dc66:	441a      	add	r2, r3
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	3304      	adds	r3, #4
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	4610      	mov	r0, r2
 800dc70:	f7fd fe89 	bl	800b986 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dc74:	2301      	movs	r3, #1
 800dc76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc78:	697b      	ldr	r3, [r7, #20]
	}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3718      	adds	r7, #24
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	2000337c 	.word	0x2000337c
 800dc88:	20003380 	.word	0x20003380
 800dc8c:	2000358c 	.word	0x2000358c

0800dc90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b088      	sub	sp, #32
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dc9e:	2301      	movs	r3, #1
 800dca0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d077      	beq.n	800dd98 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d10a      	bne.n	800dcc6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800dcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb4:	f383 8811 	msr	BASEPRI, r3
 800dcb8:	f3bf 8f6f 	isb	sy
 800dcbc:	f3bf 8f4f 	dsb	sy
 800dcc0:	60fb      	str	r3, [r7, #12]
}
 800dcc2:	bf00      	nop
 800dcc4:	e7fe      	b.n	800dcc4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcca:	683a      	ldr	r2, [r7, #0]
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d902      	bls.n	800dcd6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	61fb      	str	r3, [r7, #28]
 800dcd4:	e002      	b.n	800dcdc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dcd6:	69bb      	ldr	r3, [r7, #24]
 800dcd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcda:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dcdc:	69bb      	ldr	r3, [r7, #24]
 800dcde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dce0:	69fa      	ldr	r2, [r7, #28]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d058      	beq.n	800dd98 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcea:	697a      	ldr	r2, [r7, #20]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d153      	bne.n	800dd98 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dcf0:	4b2b      	ldr	r3, [pc, #172]	; (800dda0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	69ba      	ldr	r2, [r7, #24]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d10a      	bne.n	800dd10 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800dcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfe:	f383 8811 	msr	BASEPRI, r3
 800dd02:	f3bf 8f6f 	isb	sy
 800dd06:	f3bf 8f4f 	dsb	sy
 800dd0a:	60bb      	str	r3, [r7, #8]
}
 800dd0c:	bf00      	nop
 800dd0e:	e7fe      	b.n	800dd0e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dd10:	69bb      	ldr	r3, [r7, #24]
 800dd12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dd16:	69bb      	ldr	r3, [r7, #24]
 800dd18:	69fa      	ldr	r2, [r7, #28]
 800dd1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd1c:	69bb      	ldr	r3, [r7, #24]
 800dd1e:	699b      	ldr	r3, [r3, #24]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	db04      	blt.n	800dd2e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	f1c3 0214 	rsb	r2, r3, #20
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dd2e:	69bb      	ldr	r3, [r7, #24]
 800dd30:	6959      	ldr	r1, [r3, #20]
 800dd32:	693a      	ldr	r2, [r7, #16]
 800dd34:	4613      	mov	r3, r2
 800dd36:	009b      	lsls	r3, r3, #2
 800dd38:	4413      	add	r3, r2
 800dd3a:	009b      	lsls	r3, r3, #2
 800dd3c:	4a19      	ldr	r2, [pc, #100]	; (800dda4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800dd3e:	4413      	add	r3, r2
 800dd40:	4299      	cmp	r1, r3
 800dd42:	d129      	bne.n	800dd98 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd44:	69bb      	ldr	r3, [r7, #24]
 800dd46:	3304      	adds	r3, #4
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7fd fe79 	bl	800ba40 <uxListRemove>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d10a      	bne.n	800dd6a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800dd54:	69bb      	ldr	r3, [r7, #24]
 800dd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd58:	2201      	movs	r2, #1
 800dd5a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd5e:	43da      	mvns	r2, r3
 800dd60:	4b11      	ldr	r3, [pc, #68]	; (800dda8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4013      	ands	r3, r2
 800dd66:	4a10      	ldr	r2, [pc, #64]	; (800dda8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dd68:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dd6a:	69bb      	ldr	r3, [r7, #24]
 800dd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd6e:	2201      	movs	r2, #1
 800dd70:	409a      	lsls	r2, r3
 800dd72:	4b0d      	ldr	r3, [pc, #52]	; (800dda8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	4313      	orrs	r3, r2
 800dd78:	4a0b      	ldr	r2, [pc, #44]	; (800dda8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dd7a:	6013      	str	r3, [r2, #0]
 800dd7c:	69bb      	ldr	r3, [r7, #24]
 800dd7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd80:	4613      	mov	r3, r2
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	4413      	add	r3, r2
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	4a06      	ldr	r2, [pc, #24]	; (800dda4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800dd8a:	441a      	add	r2, r3
 800dd8c:	69bb      	ldr	r3, [r7, #24]
 800dd8e:	3304      	adds	r3, #4
 800dd90:	4619      	mov	r1, r3
 800dd92:	4610      	mov	r0, r2
 800dd94:	f7fd fdf7 	bl	800b986 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd98:	bf00      	nop
 800dd9a:	3720      	adds	r7, #32
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	2000337c 	.word	0x2000337c
 800dda4:	20003380 	.word	0x20003380
 800dda8:	2000358c 	.word	0x2000358c

0800ddac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ddac:	b480      	push	{r7}
 800ddae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ddb0:	4b07      	ldr	r3, [pc, #28]	; (800ddd0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d004      	beq.n	800ddc2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ddb8:	4b05      	ldr	r3, [pc, #20]	; (800ddd0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ddbe:	3201      	adds	r2, #1
 800ddc0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ddc2:	4b03      	ldr	r3, [pc, #12]	; (800ddd0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
	}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr
 800ddd0:	2000337c 	.word	0x2000337c

0800ddd4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ddde:	f000 fdc9 	bl	800e974 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800dde2:	4b20      	ldr	r3, [pc, #128]	; (800de64 <ulTaskNotifyTake+0x90>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d113      	bne.n	800de16 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ddee:	4b1d      	ldr	r3, [pc, #116]	; (800de64 <ulTaskNotifyTake+0x90>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	2201      	movs	r2, #1
 800ddf4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d00b      	beq.n	800de16 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ddfe:	2101      	movs	r1, #1
 800de00:	6838      	ldr	r0, [r7, #0]
 800de02:	f000 f859 	bl	800deb8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800de06:	4b18      	ldr	r3, [pc, #96]	; (800de68 <ulTaskNotifyTake+0x94>)
 800de08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de0c:	601a      	str	r2, [r3, #0]
 800de0e:	f3bf 8f4f 	dsb	sy
 800de12:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800de16:	f000 fddd 	bl	800e9d4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800de1a:	f000 fdab 	bl	800e974 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800de1e:	4b11      	ldr	r3, [pc, #68]	; (800de64 <ulTaskNotifyTake+0x90>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800de26:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00e      	beq.n	800de4c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d005      	beq.n	800de40 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800de34:	4b0b      	ldr	r3, [pc, #44]	; (800de64 <ulTaskNotifyTake+0x90>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	2200      	movs	r2, #0
 800de3a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800de3e:	e005      	b.n	800de4c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800de40:	4b08      	ldr	r3, [pc, #32]	; (800de64 <ulTaskNotifyTake+0x90>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	68fa      	ldr	r2, [r7, #12]
 800de46:	3a01      	subs	r2, #1
 800de48:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800de4c:	4b05      	ldr	r3, [pc, #20]	; (800de64 <ulTaskNotifyTake+0x90>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2200      	movs	r2, #0
 800de52:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 800de56:	f000 fdbd 	bl	800e9d4 <vPortExitCritical>

		return ulReturn;
 800de5a:	68fb      	ldr	r3, [r7, #12]
	}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3710      	adds	r7, #16
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	2000337c 	.word	0x2000337c
 800de68:	e000ed04 	.word	0xe000ed04

0800de6c <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b084      	sub	sp, #16
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d102      	bne.n	800de82 <ulTaskNotifyValueClear+0x16>
 800de7c:	4b0d      	ldr	r3, [pc, #52]	; (800deb4 <ulTaskNotifyValueClear+0x48>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	e000      	b.n	800de84 <ulTaskNotifyValueClear+0x18>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	60fb      	str	r3, [r7, #12]

		taskENTER_CRITICAL();
 800de86:	f000 fd75 	bl	800e974 <vPortEnterCritical>
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800de8a:	4b0a      	ldr	r3, [pc, #40]	; (800deb4 <ulTaskNotifyValueClear+0x48>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800de92:	60bb      	str	r3, [r7, #8]
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	43db      	mvns	r3, r3
 800de9e:	401a      	ands	r2, r3
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		}
		taskEXIT_CRITICAL();
 800dea6:	f000 fd95 	bl	800e9d4 <vPortExitCritical>

		return ulReturn;
 800deaa:	68bb      	ldr	r3, [r7, #8]
	}
 800deac:	4618      	mov	r0, r3
 800deae:	3710      	adds	r7, #16
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	2000337c 	.word	0x2000337c

0800deb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dec2:	4b29      	ldr	r3, [pc, #164]	; (800df68 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dec8:	4b28      	ldr	r3, [pc, #160]	; (800df6c <prvAddCurrentTaskToDelayedList+0xb4>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	3304      	adds	r3, #4
 800dece:	4618      	mov	r0, r3
 800ded0:	f7fd fdb6 	bl	800ba40 <uxListRemove>
 800ded4:	4603      	mov	r3, r0
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d10b      	bne.n	800def2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800deda:	4b24      	ldr	r3, [pc, #144]	; (800df6c <prvAddCurrentTaskToDelayedList+0xb4>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dee0:	2201      	movs	r2, #1
 800dee2:	fa02 f303 	lsl.w	r3, r2, r3
 800dee6:	43da      	mvns	r2, r3
 800dee8:	4b21      	ldr	r3, [pc, #132]	; (800df70 <prvAddCurrentTaskToDelayedList+0xb8>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	4013      	ands	r3, r2
 800deee:	4a20      	ldr	r2, [pc, #128]	; (800df70 <prvAddCurrentTaskToDelayedList+0xb8>)
 800def0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800def8:	d10a      	bne.n	800df10 <prvAddCurrentTaskToDelayedList+0x58>
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d007      	beq.n	800df10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df00:	4b1a      	ldr	r3, [pc, #104]	; (800df6c <prvAddCurrentTaskToDelayedList+0xb4>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	3304      	adds	r3, #4
 800df06:	4619      	mov	r1, r3
 800df08:	481a      	ldr	r0, [pc, #104]	; (800df74 <prvAddCurrentTaskToDelayedList+0xbc>)
 800df0a:	f7fd fd3c 	bl	800b986 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800df0e:	e026      	b.n	800df5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800df10:	68fa      	ldr	r2, [r7, #12]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	4413      	add	r3, r2
 800df16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800df18:	4b14      	ldr	r3, [pc, #80]	; (800df6c <prvAddCurrentTaskToDelayedList+0xb4>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	68ba      	ldr	r2, [r7, #8]
 800df1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800df20:	68ba      	ldr	r2, [r7, #8]
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	429a      	cmp	r2, r3
 800df26:	d209      	bcs.n	800df3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df28:	4b13      	ldr	r3, [pc, #76]	; (800df78 <prvAddCurrentTaskToDelayedList+0xc0>)
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	4b0f      	ldr	r3, [pc, #60]	; (800df6c <prvAddCurrentTaskToDelayedList+0xb4>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	3304      	adds	r3, #4
 800df32:	4619      	mov	r1, r3
 800df34:	4610      	mov	r0, r2
 800df36:	f7fd fd4a 	bl	800b9ce <vListInsert>
}
 800df3a:	e010      	b.n	800df5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df3c:	4b0f      	ldr	r3, [pc, #60]	; (800df7c <prvAddCurrentTaskToDelayedList+0xc4>)
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	4b0a      	ldr	r3, [pc, #40]	; (800df6c <prvAddCurrentTaskToDelayedList+0xb4>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	3304      	adds	r3, #4
 800df46:	4619      	mov	r1, r3
 800df48:	4610      	mov	r0, r2
 800df4a:	f7fd fd40 	bl	800b9ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800df4e:	4b0c      	ldr	r3, [pc, #48]	; (800df80 <prvAddCurrentTaskToDelayedList+0xc8>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	68ba      	ldr	r2, [r7, #8]
 800df54:	429a      	cmp	r2, r3
 800df56:	d202      	bcs.n	800df5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800df58:	4a09      	ldr	r2, [pc, #36]	; (800df80 <prvAddCurrentTaskToDelayedList+0xc8>)
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	6013      	str	r3, [r2, #0]
}
 800df5e:	bf00      	nop
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	20003588 	.word	0x20003588
 800df6c:	2000337c 	.word	0x2000337c
 800df70:	2000358c 	.word	0x2000358c
 800df74:	2000356c 	.word	0x2000356c
 800df78:	2000353c 	.word	0x2000353c
 800df7c:	20003538 	.word	0x20003538
 800df80:	200035a4 	.word	0x200035a4

0800df84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b08a      	sub	sp, #40	; 0x28
 800df88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800df8a:	2300      	movs	r3, #0
 800df8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800df8e:	f000 fb81 	bl	800e694 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800df92:	4b1c      	ldr	r3, [pc, #112]	; (800e004 <xTimerCreateTimerTask+0x80>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d021      	beq.n	800dfde <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800df9a:	2300      	movs	r3, #0
 800df9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dfa2:	1d3a      	adds	r2, r7, #4
 800dfa4:	f107 0108 	add.w	r1, r7, #8
 800dfa8:	f107 030c 	add.w	r3, r7, #12
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7f5 f8bb 	bl	8003128 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dfb2:	6879      	ldr	r1, [r7, #4]
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	68fa      	ldr	r2, [r7, #12]
 800dfb8:	9202      	str	r2, [sp, #8]
 800dfba:	9301      	str	r3, [sp, #4]
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	9300      	str	r3, [sp, #0]
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	460a      	mov	r2, r1
 800dfc4:	4910      	ldr	r1, [pc, #64]	; (800e008 <xTimerCreateTimerTask+0x84>)
 800dfc6:	4811      	ldr	r0, [pc, #68]	; (800e00c <xTimerCreateTimerTask+0x88>)
 800dfc8:	f7fe fcfc 	bl	800c9c4 <xTaskCreateStatic>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	4a10      	ldr	r2, [pc, #64]	; (800e010 <xTimerCreateTimerTask+0x8c>)
 800dfd0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dfd2:	4b0f      	ldr	r3, [pc, #60]	; (800e010 <xTimerCreateTimerTask+0x8c>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d001      	beq.n	800dfde <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d10a      	bne.n	800dffa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe8:	f383 8811 	msr	BASEPRI, r3
 800dfec:	f3bf 8f6f 	isb	sy
 800dff0:	f3bf 8f4f 	dsb	sy
 800dff4:	613b      	str	r3, [r7, #16]
}
 800dff6:	bf00      	nop
 800dff8:	e7fe      	b.n	800dff8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dffa:	697b      	ldr	r3, [r7, #20]
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3718      	adds	r7, #24
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}
 800e004:	200035e8 	.word	0x200035e8
 800e008:	0801324c 	.word	0x0801324c
 800e00c:	0800e23d 	.word	0x0800e23d
 800e010:	200035ec 	.word	0x200035ec

0800e014 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800e014:	b580      	push	{r7, lr}
 800e016:	b08a      	sub	sp, #40	; 0x28
 800e018:	af02      	add	r7, sp, #8
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	607a      	str	r2, [r7, #4]
 800e020:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800e022:	232c      	movs	r3, #44	; 0x2c
 800e024:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	2b2c      	cmp	r3, #44	; 0x2c
 800e02a:	d00a      	beq.n	800e042 <xTimerCreateStatic+0x2e>
	__asm volatile
 800e02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e030:	f383 8811 	msr	BASEPRI, r3
 800e034:	f3bf 8f6f 	isb	sy
 800e038:	f3bf 8f4f 	dsb	sy
 800e03c:	61bb      	str	r3, [r7, #24]
}
 800e03e:	bf00      	nop
 800e040:	e7fe      	b.n	800e040 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e042:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800e044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e046:	2b00      	cmp	r3, #0
 800e048:	d10a      	bne.n	800e060 <xTimerCreateStatic+0x4c>
	__asm volatile
 800e04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e04e:	f383 8811 	msr	BASEPRI, r3
 800e052:	f3bf 8f6f 	isb	sy
 800e056:	f3bf 8f4f 	dsb	sy
 800e05a:	617b      	str	r3, [r7, #20]
}
 800e05c:	bf00      	nop
 800e05e:	e7fe      	b.n	800e05e <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800e060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e062:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d00d      	beq.n	800e086 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	2202      	movs	r2, #2
 800e06e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e072:	69fb      	ldr	r3, [r7, #28]
 800e074:	9301      	str	r3, [sp, #4]
 800e076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e078:	9300      	str	r3, [sp, #0]
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	687a      	ldr	r2, [r7, #4]
 800e07e:	68b9      	ldr	r1, [r7, #8]
 800e080:	68f8      	ldr	r0, [r7, #12]
 800e082:	f000 f805 	bl	800e090 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e086:	69fb      	ldr	r3, [r7, #28]
	}
 800e088:	4618      	mov	r0, r3
 800e08a:	3720      	adds	r7, #32
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b086      	sub	sp, #24
 800e094:	af00      	add	r7, sp, #0
 800e096:	60f8      	str	r0, [r7, #12]
 800e098:	60b9      	str	r1, [r7, #8]
 800e09a:	607a      	str	r2, [r7, #4]
 800e09c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d10a      	bne.n	800e0ba <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800e0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a8:	f383 8811 	msr	BASEPRI, r3
 800e0ac:	f3bf 8f6f 	isb	sy
 800e0b0:	f3bf 8f4f 	dsb	sy
 800e0b4:	617b      	str	r3, [r7, #20]
}
 800e0b6:	bf00      	nop
 800e0b8:	e7fe      	b.n	800e0b8 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800e0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d01e      	beq.n	800e0fe <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800e0c0:	f000 fae8 	bl	800e694 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800e0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c6:	68fa      	ldr	r2, [r7, #12]
 800e0c8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0cc:	68ba      	ldr	r2, [r7, #8]
 800e0ce:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800e0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d2:	683a      	ldr	r2, [r7, #0]
 800e0d4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d8:	6a3a      	ldr	r2, [r7, #32]
 800e0da:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0de:	3304      	adds	r3, #4
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7fd fc43 	bl	800b96c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d008      	beq.n	800e0fe <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800e0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0f2:	f043 0304 	orr.w	r3, r3, #4
 800e0f6:	b2da      	uxtb	r2, r3
 800e0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800e0fe:	bf00      	nop
 800e100:	3718      	adds	r7, #24
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
	...

0800e108 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b08a      	sub	sp, #40	; 0x28
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
 800e114:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e116:	2300      	movs	r3, #0
 800e118:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d10a      	bne.n	800e136 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e124:	f383 8811 	msr	BASEPRI, r3
 800e128:	f3bf 8f6f 	isb	sy
 800e12c:	f3bf 8f4f 	dsb	sy
 800e130:	623b      	str	r3, [r7, #32]
}
 800e132:	bf00      	nop
 800e134:	e7fe      	b.n	800e134 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e136:	4b1a      	ldr	r3, [pc, #104]	; (800e1a0 <xTimerGenericCommand+0x98>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d02a      	beq.n	800e194 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	2b05      	cmp	r3, #5
 800e14e:	dc18      	bgt.n	800e182 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e150:	f7ff fc84 	bl	800da5c <xTaskGetSchedulerState>
 800e154:	4603      	mov	r3, r0
 800e156:	2b02      	cmp	r3, #2
 800e158:	d109      	bne.n	800e16e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e15a:	4b11      	ldr	r3, [pc, #68]	; (800e1a0 <xTimerGenericCommand+0x98>)
 800e15c:	6818      	ldr	r0, [r3, #0]
 800e15e:	f107 0110 	add.w	r1, r7, #16
 800e162:	2300      	movs	r3, #0
 800e164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e166:	f7fd fe07 	bl	800bd78 <xQueueGenericSend>
 800e16a:	6278      	str	r0, [r7, #36]	; 0x24
 800e16c:	e012      	b.n	800e194 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e16e:	4b0c      	ldr	r3, [pc, #48]	; (800e1a0 <xTimerGenericCommand+0x98>)
 800e170:	6818      	ldr	r0, [r3, #0]
 800e172:	f107 0110 	add.w	r1, r7, #16
 800e176:	2300      	movs	r3, #0
 800e178:	2200      	movs	r2, #0
 800e17a:	f7fd fdfd 	bl	800bd78 <xQueueGenericSend>
 800e17e:	6278      	str	r0, [r7, #36]	; 0x24
 800e180:	e008      	b.n	800e194 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e182:	4b07      	ldr	r3, [pc, #28]	; (800e1a0 <xTimerGenericCommand+0x98>)
 800e184:	6818      	ldr	r0, [r3, #0]
 800e186:	f107 0110 	add.w	r1, r7, #16
 800e18a:	2300      	movs	r3, #0
 800e18c:	683a      	ldr	r2, [r7, #0]
 800e18e:	f7fd fef1 	bl	800bf74 <xQueueGenericSendFromISR>
 800e192:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e196:	4618      	mov	r0, r3
 800e198:	3728      	adds	r7, #40	; 0x28
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	200035e8 	.word	0x200035e8

0800e1a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b088      	sub	sp, #32
 800e1a8:	af02      	add	r7, sp, #8
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1ae:	4b22      	ldr	r3, [pc, #136]	; (800e238 <prvProcessExpiredTimer+0x94>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	68db      	ldr	r3, [r3, #12]
 800e1b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	3304      	adds	r3, #4
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7fd fc3f 	bl	800ba40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1c8:	f003 0304 	and.w	r3, r3, #4
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d022      	beq.n	800e216 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	699a      	ldr	r2, [r3, #24]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	18d1      	adds	r1, r2, r3
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	683a      	ldr	r2, [r7, #0]
 800e1dc:	6978      	ldr	r0, [r7, #20]
 800e1de:	f000 f8d1 	bl	800e384 <prvInsertTimerInActiveList>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d01f      	beq.n	800e228 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	9300      	str	r3, [sp, #0]
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	2100      	movs	r1, #0
 800e1f2:	6978      	ldr	r0, [r7, #20]
 800e1f4:	f7ff ff88 	bl	800e108 <xTimerGenericCommand>
 800e1f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d113      	bne.n	800e228 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e204:	f383 8811 	msr	BASEPRI, r3
 800e208:	f3bf 8f6f 	isb	sy
 800e20c:	f3bf 8f4f 	dsb	sy
 800e210:	60fb      	str	r3, [r7, #12]
}
 800e212:	bf00      	nop
 800e214:	e7fe      	b.n	800e214 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e21c:	f023 0301 	bic.w	r3, r3, #1
 800e220:	b2da      	uxtb	r2, r3
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	6a1b      	ldr	r3, [r3, #32]
 800e22c:	6978      	ldr	r0, [r7, #20]
 800e22e:	4798      	blx	r3
}
 800e230:	bf00      	nop
 800e232:	3718      	adds	r7, #24
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	200035e0 	.word	0x200035e0

0800e23c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e244:	f107 0308 	add.w	r3, r7, #8
 800e248:	4618      	mov	r0, r3
 800e24a:	f000 f857 	bl	800e2fc <prvGetNextExpireTime>
 800e24e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	4619      	mov	r1, r3
 800e254:	68f8      	ldr	r0, [r7, #12]
 800e256:	f000 f803 	bl	800e260 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e25a:	f000 f8d5 	bl	800e408 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e25e:	e7f1      	b.n	800e244 <prvTimerTask+0x8>

0800e260 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b084      	sub	sp, #16
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
 800e268:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e26a:	f7fe fe73 	bl	800cf54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e26e:	f107 0308 	add.w	r3, r7, #8
 800e272:	4618      	mov	r0, r3
 800e274:	f000 f866 	bl	800e344 <prvSampleTimeNow>
 800e278:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d130      	bne.n	800e2e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d10a      	bne.n	800e29c <prvProcessTimerOrBlockTask+0x3c>
 800e286:	687a      	ldr	r2, [r7, #4]
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d806      	bhi.n	800e29c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e28e:	f7fe fe6f 	bl	800cf70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e292:	68f9      	ldr	r1, [r7, #12]
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f7ff ff85 	bl	800e1a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e29a:	e024      	b.n	800e2e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d008      	beq.n	800e2b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e2a2:	4b13      	ldr	r3, [pc, #76]	; (800e2f0 <prvProcessTimerOrBlockTask+0x90>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d101      	bne.n	800e2b0 <prvProcessTimerOrBlockTask+0x50>
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	e000      	b.n	800e2b2 <prvProcessTimerOrBlockTask+0x52>
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e2b4:	4b0f      	ldr	r3, [pc, #60]	; (800e2f4 <prvProcessTimerOrBlockTask+0x94>)
 800e2b6:	6818      	ldr	r0, [r3, #0]
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	1ad3      	subs	r3, r2, r3
 800e2be:	683a      	ldr	r2, [r7, #0]
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	f7fe fb4b 	bl	800c95c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e2c6:	f7fe fe53 	bl	800cf70 <xTaskResumeAll>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d10a      	bne.n	800e2e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e2d0:	4b09      	ldr	r3, [pc, #36]	; (800e2f8 <prvProcessTimerOrBlockTask+0x98>)
 800e2d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2d6:	601a      	str	r2, [r3, #0]
 800e2d8:	f3bf 8f4f 	dsb	sy
 800e2dc:	f3bf 8f6f 	isb	sy
}
 800e2e0:	e001      	b.n	800e2e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e2e2:	f7fe fe45 	bl	800cf70 <xTaskResumeAll>
}
 800e2e6:	bf00      	nop
 800e2e8:	3710      	adds	r7, #16
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	200035e4 	.word	0x200035e4
 800e2f4:	200035e8 	.word	0x200035e8
 800e2f8:	e000ed04 	.word	0xe000ed04

0800e2fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b085      	sub	sp, #20
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e304:	4b0e      	ldr	r3, [pc, #56]	; (800e340 <prvGetNextExpireTime+0x44>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d101      	bne.n	800e312 <prvGetNextExpireTime+0x16>
 800e30e:	2201      	movs	r2, #1
 800e310:	e000      	b.n	800e314 <prvGetNextExpireTime+0x18>
 800e312:	2200      	movs	r2, #0
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d105      	bne.n	800e32c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e320:	4b07      	ldr	r3, [pc, #28]	; (800e340 <prvGetNextExpireTime+0x44>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	60fb      	str	r3, [r7, #12]
 800e32a:	e001      	b.n	800e330 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e32c:	2300      	movs	r3, #0
 800e32e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e330:	68fb      	ldr	r3, [r7, #12]
}
 800e332:	4618      	mov	r0, r3
 800e334:	3714      	adds	r7, #20
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr
 800e33e:	bf00      	nop
 800e340:	200035e0 	.word	0x200035e0

0800e344 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e34c:	f7fe feac 	bl	800d0a8 <xTaskGetTickCount>
 800e350:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e352:	4b0b      	ldr	r3, [pc, #44]	; (800e380 <prvSampleTimeNow+0x3c>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	68fa      	ldr	r2, [r7, #12]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d205      	bcs.n	800e368 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e35c:	f000 f936 	bl	800e5cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2201      	movs	r2, #1
 800e364:	601a      	str	r2, [r3, #0]
 800e366:	e002      	b.n	800e36e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2200      	movs	r2, #0
 800e36c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e36e:	4a04      	ldr	r2, [pc, #16]	; (800e380 <prvSampleTimeNow+0x3c>)
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e374:	68fb      	ldr	r3, [r7, #12]
}
 800e376:	4618      	mov	r0, r3
 800e378:	3710      	adds	r7, #16
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	200035f0 	.word	0x200035f0

0800e384 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b086      	sub	sp, #24
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	60b9      	str	r1, [r7, #8]
 800e38e:	607a      	str	r2, [r7, #4]
 800e390:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e392:	2300      	movs	r3, #0
 800e394:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	68ba      	ldr	r2, [r7, #8]
 800e39a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	68fa      	ldr	r2, [r7, #12]
 800e3a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e3a2:	68ba      	ldr	r2, [r7, #8]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d812      	bhi.n	800e3d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	1ad2      	subs	r2, r2, r3
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	699b      	ldr	r3, [r3, #24]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d302      	bcc.n	800e3be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	617b      	str	r3, [r7, #20]
 800e3bc:	e01b      	b.n	800e3f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e3be:	4b10      	ldr	r3, [pc, #64]	; (800e400 <prvInsertTimerInActiveList+0x7c>)
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	3304      	adds	r3, #4
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	4610      	mov	r0, r2
 800e3ca:	f7fd fb00 	bl	800b9ce <vListInsert>
 800e3ce:	e012      	b.n	800e3f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d206      	bcs.n	800e3e6 <prvInsertTimerInActiveList+0x62>
 800e3d8:	68ba      	ldr	r2, [r7, #8]
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d302      	bcc.n	800e3e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	617b      	str	r3, [r7, #20]
 800e3e4:	e007      	b.n	800e3f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e3e6:	4b07      	ldr	r3, [pc, #28]	; (800e404 <prvInsertTimerInActiveList+0x80>)
 800e3e8:	681a      	ldr	r2, [r3, #0]
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	3304      	adds	r3, #4
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	4610      	mov	r0, r2
 800e3f2:	f7fd faec 	bl	800b9ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e3f6:	697b      	ldr	r3, [r7, #20]
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3718      	adds	r7, #24
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	200035e4 	.word	0x200035e4
 800e404:	200035e0 	.word	0x200035e0

0800e408 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b08e      	sub	sp, #56	; 0x38
 800e40c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e40e:	e0ca      	b.n	800e5a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2b00      	cmp	r3, #0
 800e414:	da18      	bge.n	800e448 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e416:	1d3b      	adds	r3, r7, #4
 800e418:	3304      	adds	r3, #4
 800e41a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d10a      	bne.n	800e438 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e426:	f383 8811 	msr	BASEPRI, r3
 800e42a:	f3bf 8f6f 	isb	sy
 800e42e:	f3bf 8f4f 	dsb	sy
 800e432:	61fb      	str	r3, [r7, #28]
}
 800e434:	bf00      	nop
 800e436:	e7fe      	b.n	800e436 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e43e:	6850      	ldr	r0, [r2, #4]
 800e440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e442:	6892      	ldr	r2, [r2, #8]
 800e444:	4611      	mov	r1, r2
 800e446:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	f2c0 80ab 	blt.w	800e5a6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e456:	695b      	ldr	r3, [r3, #20]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d004      	beq.n	800e466 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45e:	3304      	adds	r3, #4
 800e460:	4618      	mov	r0, r3
 800e462:	f7fd faed 	bl	800ba40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e466:	463b      	mov	r3, r7
 800e468:	4618      	mov	r0, r3
 800e46a:	f7ff ff6b 	bl	800e344 <prvSampleTimeNow>
 800e46e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2b09      	cmp	r3, #9
 800e474:	f200 8096 	bhi.w	800e5a4 <prvProcessReceivedCommands+0x19c>
 800e478:	a201      	add	r2, pc, #4	; (adr r2, 800e480 <prvProcessReceivedCommands+0x78>)
 800e47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e47e:	bf00      	nop
 800e480:	0800e4a9 	.word	0x0800e4a9
 800e484:	0800e4a9 	.word	0x0800e4a9
 800e488:	0800e4a9 	.word	0x0800e4a9
 800e48c:	0800e51d 	.word	0x0800e51d
 800e490:	0800e531 	.word	0x0800e531
 800e494:	0800e57b 	.word	0x0800e57b
 800e498:	0800e4a9 	.word	0x0800e4a9
 800e49c:	0800e4a9 	.word	0x0800e4a9
 800e4a0:	0800e51d 	.word	0x0800e51d
 800e4a4:	0800e531 	.word	0x0800e531
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4ae:	f043 0301 	orr.w	r3, r3, #1
 800e4b2:	b2da      	uxtb	r2, r3
 800e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e4ba:	68ba      	ldr	r2, [r7, #8]
 800e4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4be:	699b      	ldr	r3, [r3, #24]
 800e4c0:	18d1      	adds	r1, r2, r3
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4c8:	f7ff ff5c 	bl	800e384 <prvInsertTimerInActiveList>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d069      	beq.n	800e5a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d4:	6a1b      	ldr	r3, [r3, #32]
 800e4d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4e0:	f003 0304 	and.w	r3, r3, #4
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d05e      	beq.n	800e5a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e4e8:	68ba      	ldr	r2, [r7, #8]
 800e4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ec:	699b      	ldr	r3, [r3, #24]
 800e4ee:	441a      	add	r2, r3
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	9300      	str	r3, [sp, #0]
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	2100      	movs	r1, #0
 800e4f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4fa:	f7ff fe05 	bl	800e108 <xTimerGenericCommand>
 800e4fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e500:	6a3b      	ldr	r3, [r7, #32]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d14f      	bne.n	800e5a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e50a:	f383 8811 	msr	BASEPRI, r3
 800e50e:	f3bf 8f6f 	isb	sy
 800e512:	f3bf 8f4f 	dsb	sy
 800e516:	61bb      	str	r3, [r7, #24]
}
 800e518:	bf00      	nop
 800e51a:	e7fe      	b.n	800e51a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e51e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e522:	f023 0301 	bic.w	r3, r3, #1
 800e526:	b2da      	uxtb	r2, r3
 800e528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e52a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e52e:	e03a      	b.n	800e5a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e536:	f043 0301 	orr.w	r3, r3, #1
 800e53a:	b2da      	uxtb	r2, r3
 800e53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e53e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e542:	68ba      	ldr	r2, [r7, #8]
 800e544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e546:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54a:	699b      	ldr	r3, [r3, #24]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d10a      	bne.n	800e566 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e554:	f383 8811 	msr	BASEPRI, r3
 800e558:	f3bf 8f6f 	isb	sy
 800e55c:	f3bf 8f4f 	dsb	sy
 800e560:	617b      	str	r3, [r7, #20]
}
 800e562:	bf00      	nop
 800e564:	e7fe      	b.n	800e564 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e568:	699a      	ldr	r2, [r3, #24]
 800e56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56c:	18d1      	adds	r1, r2, r3
 800e56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e574:	f7ff ff06 	bl	800e384 <prvInsertTimerInActiveList>
					break;
 800e578:	e015      	b.n	800e5a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e57c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e580:	f003 0302 	and.w	r3, r3, #2
 800e584:	2b00      	cmp	r3, #0
 800e586:	d103      	bne.n	800e590 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e58a:	f000 fbdb 	bl	800ed44 <vPortFree>
 800e58e:	e00a      	b.n	800e5a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e596:	f023 0301 	bic.w	r3, r3, #1
 800e59a:	b2da      	uxtb	r2, r3
 800e59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e5a2:	e000      	b.n	800e5a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800e5a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e5a6:	4b08      	ldr	r3, [pc, #32]	; (800e5c8 <prvProcessReceivedCommands+0x1c0>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	1d39      	adds	r1, r7, #4
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fd fe08 	bl	800c1c4 <xQueueReceive>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	f47f af2a 	bne.w	800e410 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e5bc:	bf00      	nop
 800e5be:	bf00      	nop
 800e5c0:	3730      	adds	r7, #48	; 0x30
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	bf00      	nop
 800e5c8:	200035e8 	.word	0x200035e8

0800e5cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b088      	sub	sp, #32
 800e5d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e5d2:	e048      	b.n	800e666 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e5d4:	4b2d      	ldr	r3, [pc, #180]	; (800e68c <prvSwitchTimerLists+0xc0>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	68db      	ldr	r3, [r3, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5de:	4b2b      	ldr	r3, [pc, #172]	; (800e68c <prvSwitchTimerLists+0xc0>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	68db      	ldr	r3, [r3, #12]
 800e5e4:	68db      	ldr	r3, [r3, #12]
 800e5e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	3304      	adds	r3, #4
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f7fd fa27 	bl	800ba40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	6a1b      	ldr	r3, [r3, #32]
 800e5f6:	68f8      	ldr	r0, [r7, #12]
 800e5f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e600:	f003 0304 	and.w	r3, r3, #4
 800e604:	2b00      	cmp	r3, #0
 800e606:	d02e      	beq.n	800e666 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	699b      	ldr	r3, [r3, #24]
 800e60c:	693a      	ldr	r2, [r7, #16]
 800e60e:	4413      	add	r3, r2
 800e610:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e612:	68ba      	ldr	r2, [r7, #8]
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	429a      	cmp	r2, r3
 800e618:	d90e      	bls.n	800e638 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	68ba      	ldr	r2, [r7, #8]
 800e61e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	68fa      	ldr	r2, [r7, #12]
 800e624:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e626:	4b19      	ldr	r3, [pc, #100]	; (800e68c <prvSwitchTimerLists+0xc0>)
 800e628:	681a      	ldr	r2, [r3, #0]
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	3304      	adds	r3, #4
 800e62e:	4619      	mov	r1, r3
 800e630:	4610      	mov	r0, r2
 800e632:	f7fd f9cc 	bl	800b9ce <vListInsert>
 800e636:	e016      	b.n	800e666 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e638:	2300      	movs	r3, #0
 800e63a:	9300      	str	r3, [sp, #0]
 800e63c:	2300      	movs	r3, #0
 800e63e:	693a      	ldr	r2, [r7, #16]
 800e640:	2100      	movs	r1, #0
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	f7ff fd60 	bl	800e108 <xTimerGenericCommand>
 800e648:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d10a      	bne.n	800e666 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e654:	f383 8811 	msr	BASEPRI, r3
 800e658:	f3bf 8f6f 	isb	sy
 800e65c:	f3bf 8f4f 	dsb	sy
 800e660:	603b      	str	r3, [r7, #0]
}
 800e662:	bf00      	nop
 800e664:	e7fe      	b.n	800e664 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e666:	4b09      	ldr	r3, [pc, #36]	; (800e68c <prvSwitchTimerLists+0xc0>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d1b1      	bne.n	800e5d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e670:	4b06      	ldr	r3, [pc, #24]	; (800e68c <prvSwitchTimerLists+0xc0>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e676:	4b06      	ldr	r3, [pc, #24]	; (800e690 <prvSwitchTimerLists+0xc4>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	4a04      	ldr	r2, [pc, #16]	; (800e68c <prvSwitchTimerLists+0xc0>)
 800e67c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e67e:	4a04      	ldr	r2, [pc, #16]	; (800e690 <prvSwitchTimerLists+0xc4>)
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	6013      	str	r3, [r2, #0]
}
 800e684:	bf00      	nop
 800e686:	3718      	adds	r7, #24
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	200035e0 	.word	0x200035e0
 800e690:	200035e4 	.word	0x200035e4

0800e694 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b082      	sub	sp, #8
 800e698:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e69a:	f000 f96b 	bl	800e974 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e69e:	4b15      	ldr	r3, [pc, #84]	; (800e6f4 <prvCheckForValidListAndQueue+0x60>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d120      	bne.n	800e6e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e6a6:	4814      	ldr	r0, [pc, #80]	; (800e6f8 <prvCheckForValidListAndQueue+0x64>)
 800e6a8:	f7fd f940 	bl	800b92c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e6ac:	4813      	ldr	r0, [pc, #76]	; (800e6fc <prvCheckForValidListAndQueue+0x68>)
 800e6ae:	f7fd f93d 	bl	800b92c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e6b2:	4b13      	ldr	r3, [pc, #76]	; (800e700 <prvCheckForValidListAndQueue+0x6c>)
 800e6b4:	4a10      	ldr	r2, [pc, #64]	; (800e6f8 <prvCheckForValidListAndQueue+0x64>)
 800e6b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e6b8:	4b12      	ldr	r3, [pc, #72]	; (800e704 <prvCheckForValidListAndQueue+0x70>)
 800e6ba:	4a10      	ldr	r2, [pc, #64]	; (800e6fc <prvCheckForValidListAndQueue+0x68>)
 800e6bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e6be:	2300      	movs	r3, #0
 800e6c0:	9300      	str	r3, [sp, #0]
 800e6c2:	4b11      	ldr	r3, [pc, #68]	; (800e708 <prvCheckForValidListAndQueue+0x74>)
 800e6c4:	4a11      	ldr	r2, [pc, #68]	; (800e70c <prvCheckForValidListAndQueue+0x78>)
 800e6c6:	2110      	movs	r1, #16
 800e6c8:	2014      	movs	r0, #20
 800e6ca:	f7fd fa4b 	bl	800bb64 <xQueueGenericCreateStatic>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	4a08      	ldr	r2, [pc, #32]	; (800e6f4 <prvCheckForValidListAndQueue+0x60>)
 800e6d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e6d4:	4b07      	ldr	r3, [pc, #28]	; (800e6f4 <prvCheckForValidListAndQueue+0x60>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d005      	beq.n	800e6e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e6dc:	4b05      	ldr	r3, [pc, #20]	; (800e6f4 <prvCheckForValidListAndQueue+0x60>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	490b      	ldr	r1, [pc, #44]	; (800e710 <prvCheckForValidListAndQueue+0x7c>)
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7fe f910 	bl	800c908 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e6e8:	f000 f974 	bl	800e9d4 <vPortExitCritical>
}
 800e6ec:	bf00      	nop
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	200035e8 	.word	0x200035e8
 800e6f8:	200035b8 	.word	0x200035b8
 800e6fc:	200035cc 	.word	0x200035cc
 800e700:	200035e0 	.word	0x200035e0
 800e704:	200035e4 	.word	0x200035e4
 800e708:	20003734 	.word	0x20003734
 800e70c:	200035f4 	.word	0x200035f4
 800e710:	08013254 	.word	0x08013254

0800e714 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e714:	b480      	push	{r7}
 800e716:	b085      	sub	sp, #20
 800e718:	af00      	add	r7, sp, #0
 800e71a:	60f8      	str	r0, [r7, #12]
 800e71c:	60b9      	str	r1, [r7, #8]
 800e71e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	3b04      	subs	r3, #4
 800e724:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e72c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	3b04      	subs	r3, #4
 800e732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	f023 0201 	bic.w	r2, r3, #1
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	3b04      	subs	r3, #4
 800e742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e744:	4a0c      	ldr	r2, [pc, #48]	; (800e778 <pxPortInitialiseStack+0x64>)
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	3b14      	subs	r3, #20
 800e74e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e750:	687a      	ldr	r2, [r7, #4]
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	3b04      	subs	r3, #4
 800e75a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f06f 0202 	mvn.w	r2, #2
 800e762:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	3b20      	subs	r3, #32
 800e768:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e76a:	68fb      	ldr	r3, [r7, #12]
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3714      	adds	r7, #20
 800e770:	46bd      	mov	sp, r7
 800e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e776:	4770      	bx	lr
 800e778:	0800e77d 	.word	0x0800e77d

0800e77c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e77c:	b480      	push	{r7}
 800e77e:	b085      	sub	sp, #20
 800e780:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e782:	2300      	movs	r3, #0
 800e784:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e786:	4b12      	ldr	r3, [pc, #72]	; (800e7d0 <prvTaskExitError+0x54>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e78e:	d00a      	beq.n	800e7a6 <prvTaskExitError+0x2a>
	__asm volatile
 800e790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e794:	f383 8811 	msr	BASEPRI, r3
 800e798:	f3bf 8f6f 	isb	sy
 800e79c:	f3bf 8f4f 	dsb	sy
 800e7a0:	60fb      	str	r3, [r7, #12]
}
 800e7a2:	bf00      	nop
 800e7a4:	e7fe      	b.n	800e7a4 <prvTaskExitError+0x28>
	__asm volatile
 800e7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7aa:	f383 8811 	msr	BASEPRI, r3
 800e7ae:	f3bf 8f6f 	isb	sy
 800e7b2:	f3bf 8f4f 	dsb	sy
 800e7b6:	60bb      	str	r3, [r7, #8]
}
 800e7b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e7ba:	bf00      	nop
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d0fc      	beq.n	800e7bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e7c2:	bf00      	nop
 800e7c4:	bf00      	nop
 800e7c6:	3714      	adds	r7, #20
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr
 800e7d0:	20000178 	.word	0x20000178
	...

0800e7e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e7e0:	4b07      	ldr	r3, [pc, #28]	; (800e800 <pxCurrentTCBConst2>)
 800e7e2:	6819      	ldr	r1, [r3, #0]
 800e7e4:	6808      	ldr	r0, [r1, #0]
 800e7e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ea:	f380 8809 	msr	PSP, r0
 800e7ee:	f3bf 8f6f 	isb	sy
 800e7f2:	f04f 0000 	mov.w	r0, #0
 800e7f6:	f380 8811 	msr	BASEPRI, r0
 800e7fa:	4770      	bx	lr
 800e7fc:	f3af 8000 	nop.w

0800e800 <pxCurrentTCBConst2>:
 800e800:	2000337c 	.word	0x2000337c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e804:	bf00      	nop
 800e806:	bf00      	nop

0800e808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e808:	4808      	ldr	r0, [pc, #32]	; (800e82c <prvPortStartFirstTask+0x24>)
 800e80a:	6800      	ldr	r0, [r0, #0]
 800e80c:	6800      	ldr	r0, [r0, #0]
 800e80e:	f380 8808 	msr	MSP, r0
 800e812:	f04f 0000 	mov.w	r0, #0
 800e816:	f380 8814 	msr	CONTROL, r0
 800e81a:	b662      	cpsie	i
 800e81c:	b661      	cpsie	f
 800e81e:	f3bf 8f4f 	dsb	sy
 800e822:	f3bf 8f6f 	isb	sy
 800e826:	df00      	svc	0
 800e828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e82a:	bf00      	nop
 800e82c:	e000ed08 	.word	0xe000ed08

0800e830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b086      	sub	sp, #24
 800e834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e836:	4b46      	ldr	r3, [pc, #280]	; (800e950 <xPortStartScheduler+0x120>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	4a46      	ldr	r2, [pc, #280]	; (800e954 <xPortStartScheduler+0x124>)
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d10a      	bne.n	800e856 <xPortStartScheduler+0x26>
	__asm volatile
 800e840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e844:	f383 8811 	msr	BASEPRI, r3
 800e848:	f3bf 8f6f 	isb	sy
 800e84c:	f3bf 8f4f 	dsb	sy
 800e850:	613b      	str	r3, [r7, #16]
}
 800e852:	bf00      	nop
 800e854:	e7fe      	b.n	800e854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e856:	4b3e      	ldr	r3, [pc, #248]	; (800e950 <xPortStartScheduler+0x120>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	4a3f      	ldr	r2, [pc, #252]	; (800e958 <xPortStartScheduler+0x128>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d10a      	bne.n	800e876 <xPortStartScheduler+0x46>
	__asm volatile
 800e860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e864:	f383 8811 	msr	BASEPRI, r3
 800e868:	f3bf 8f6f 	isb	sy
 800e86c:	f3bf 8f4f 	dsb	sy
 800e870:	60fb      	str	r3, [r7, #12]
}
 800e872:	bf00      	nop
 800e874:	e7fe      	b.n	800e874 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e876:	4b39      	ldr	r3, [pc, #228]	; (800e95c <xPortStartScheduler+0x12c>)
 800e878:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	22ff      	movs	r2, #255	; 0xff
 800e886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e890:	78fb      	ldrb	r3, [r7, #3]
 800e892:	b2db      	uxtb	r3, r3
 800e894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e898:	b2da      	uxtb	r2, r3
 800e89a:	4b31      	ldr	r3, [pc, #196]	; (800e960 <xPortStartScheduler+0x130>)
 800e89c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e89e:	4b31      	ldr	r3, [pc, #196]	; (800e964 <xPortStartScheduler+0x134>)
 800e8a0:	2207      	movs	r2, #7
 800e8a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8a4:	e009      	b.n	800e8ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e8a6:	4b2f      	ldr	r3, [pc, #188]	; (800e964 <xPortStartScheduler+0x134>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	3b01      	subs	r3, #1
 800e8ac:	4a2d      	ldr	r2, [pc, #180]	; (800e964 <xPortStartScheduler+0x134>)
 800e8ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e8b0:	78fb      	ldrb	r3, [r7, #3]
 800e8b2:	b2db      	uxtb	r3, r3
 800e8b4:	005b      	lsls	r3, r3, #1
 800e8b6:	b2db      	uxtb	r3, r3
 800e8b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8ba:	78fb      	ldrb	r3, [r7, #3]
 800e8bc:	b2db      	uxtb	r3, r3
 800e8be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8c2:	2b80      	cmp	r3, #128	; 0x80
 800e8c4:	d0ef      	beq.n	800e8a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e8c6:	4b27      	ldr	r3, [pc, #156]	; (800e964 <xPortStartScheduler+0x134>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f1c3 0307 	rsb	r3, r3, #7
 800e8ce:	2b04      	cmp	r3, #4
 800e8d0:	d00a      	beq.n	800e8e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d6:	f383 8811 	msr	BASEPRI, r3
 800e8da:	f3bf 8f6f 	isb	sy
 800e8de:	f3bf 8f4f 	dsb	sy
 800e8e2:	60bb      	str	r3, [r7, #8]
}
 800e8e4:	bf00      	nop
 800e8e6:	e7fe      	b.n	800e8e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e8e8:	4b1e      	ldr	r3, [pc, #120]	; (800e964 <xPortStartScheduler+0x134>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	021b      	lsls	r3, r3, #8
 800e8ee:	4a1d      	ldr	r2, [pc, #116]	; (800e964 <xPortStartScheduler+0x134>)
 800e8f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e8f2:	4b1c      	ldr	r3, [pc, #112]	; (800e964 <xPortStartScheduler+0x134>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e8fa:	4a1a      	ldr	r2, [pc, #104]	; (800e964 <xPortStartScheduler+0x134>)
 800e8fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	b2da      	uxtb	r2, r3
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e906:	4b18      	ldr	r3, [pc, #96]	; (800e968 <xPortStartScheduler+0x138>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	4a17      	ldr	r2, [pc, #92]	; (800e968 <xPortStartScheduler+0x138>)
 800e90c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e910:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e912:	4b15      	ldr	r3, [pc, #84]	; (800e968 <xPortStartScheduler+0x138>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	4a14      	ldr	r2, [pc, #80]	; (800e968 <xPortStartScheduler+0x138>)
 800e918:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e91c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e91e:	f000 f8dd 	bl	800eadc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e922:	4b12      	ldr	r3, [pc, #72]	; (800e96c <xPortStartScheduler+0x13c>)
 800e924:	2200      	movs	r2, #0
 800e926:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e928:	f000 f8f6 	bl	800eb18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e92c:	4b10      	ldr	r3, [pc, #64]	; (800e970 <xPortStartScheduler+0x140>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4a0f      	ldr	r2, [pc, #60]	; (800e970 <xPortStartScheduler+0x140>)
 800e932:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e936:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e938:	f7ff ff66 	bl	800e808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e93c:	f7fe fd0c 	bl	800d358 <vTaskSwitchContext>
	prvTaskExitError();
 800e940:	f7ff ff1c 	bl	800e77c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	3718      	adds	r7, #24
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	e000ed00 	.word	0xe000ed00
 800e954:	410fc271 	.word	0x410fc271
 800e958:	410fc270 	.word	0x410fc270
 800e95c:	e000e400 	.word	0xe000e400
 800e960:	20003784 	.word	0x20003784
 800e964:	20003788 	.word	0x20003788
 800e968:	e000ed20 	.word	0xe000ed20
 800e96c:	20000178 	.word	0x20000178
 800e970:	e000ef34 	.word	0xe000ef34

0800e974 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
	__asm volatile
 800e97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e97e:	f383 8811 	msr	BASEPRI, r3
 800e982:	f3bf 8f6f 	isb	sy
 800e986:	f3bf 8f4f 	dsb	sy
 800e98a:	607b      	str	r3, [r7, #4]
}
 800e98c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e98e:	4b0f      	ldr	r3, [pc, #60]	; (800e9cc <vPortEnterCritical+0x58>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	3301      	adds	r3, #1
 800e994:	4a0d      	ldr	r2, [pc, #52]	; (800e9cc <vPortEnterCritical+0x58>)
 800e996:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e998:	4b0c      	ldr	r3, [pc, #48]	; (800e9cc <vPortEnterCritical+0x58>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	d10f      	bne.n	800e9c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e9a0:	4b0b      	ldr	r3, [pc, #44]	; (800e9d0 <vPortEnterCritical+0x5c>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	b2db      	uxtb	r3, r3
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d00a      	beq.n	800e9c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ae:	f383 8811 	msr	BASEPRI, r3
 800e9b2:	f3bf 8f6f 	isb	sy
 800e9b6:	f3bf 8f4f 	dsb	sy
 800e9ba:	603b      	str	r3, [r7, #0]
}
 800e9bc:	bf00      	nop
 800e9be:	e7fe      	b.n	800e9be <vPortEnterCritical+0x4a>
	}
}
 800e9c0:	bf00      	nop
 800e9c2:	370c      	adds	r7, #12
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr
 800e9cc:	20000178 	.word	0x20000178
 800e9d0:	e000ed04 	.word	0xe000ed04

0800e9d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e9da:	4b12      	ldr	r3, [pc, #72]	; (800ea24 <vPortExitCritical+0x50>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d10a      	bne.n	800e9f8 <vPortExitCritical+0x24>
	__asm volatile
 800e9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e6:	f383 8811 	msr	BASEPRI, r3
 800e9ea:	f3bf 8f6f 	isb	sy
 800e9ee:	f3bf 8f4f 	dsb	sy
 800e9f2:	607b      	str	r3, [r7, #4]
}
 800e9f4:	bf00      	nop
 800e9f6:	e7fe      	b.n	800e9f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e9f8:	4b0a      	ldr	r3, [pc, #40]	; (800ea24 <vPortExitCritical+0x50>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	3b01      	subs	r3, #1
 800e9fe:	4a09      	ldr	r2, [pc, #36]	; (800ea24 <vPortExitCritical+0x50>)
 800ea00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ea02:	4b08      	ldr	r3, [pc, #32]	; (800ea24 <vPortExitCritical+0x50>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d105      	bne.n	800ea16 <vPortExitCritical+0x42>
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	f383 8811 	msr	BASEPRI, r3
}
 800ea14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ea16:	bf00      	nop
 800ea18:	370c      	adds	r7, #12
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea20:	4770      	bx	lr
 800ea22:	bf00      	nop
 800ea24:	20000178 	.word	0x20000178
	...

0800ea30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ea30:	f3ef 8009 	mrs	r0, PSP
 800ea34:	f3bf 8f6f 	isb	sy
 800ea38:	4b15      	ldr	r3, [pc, #84]	; (800ea90 <pxCurrentTCBConst>)
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	f01e 0f10 	tst.w	lr, #16
 800ea40:	bf08      	it	eq
 800ea42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ea46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea4a:	6010      	str	r0, [r2, #0]
 800ea4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ea50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ea54:	f380 8811 	msr	BASEPRI, r0
 800ea58:	f3bf 8f4f 	dsb	sy
 800ea5c:	f3bf 8f6f 	isb	sy
 800ea60:	f7fe fc7a 	bl	800d358 <vTaskSwitchContext>
 800ea64:	f04f 0000 	mov.w	r0, #0
 800ea68:	f380 8811 	msr	BASEPRI, r0
 800ea6c:	bc09      	pop	{r0, r3}
 800ea6e:	6819      	ldr	r1, [r3, #0]
 800ea70:	6808      	ldr	r0, [r1, #0]
 800ea72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea76:	f01e 0f10 	tst.w	lr, #16
 800ea7a:	bf08      	it	eq
 800ea7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ea80:	f380 8809 	msr	PSP, r0
 800ea84:	f3bf 8f6f 	isb	sy
 800ea88:	4770      	bx	lr
 800ea8a:	bf00      	nop
 800ea8c:	f3af 8000 	nop.w

0800ea90 <pxCurrentTCBConst>:
 800ea90:	2000337c 	.word	0x2000337c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ea94:	bf00      	nop
 800ea96:	bf00      	nop

0800ea98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ea9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa2:	f383 8811 	msr	BASEPRI, r3
 800eaa6:	f3bf 8f6f 	isb	sy
 800eaaa:	f3bf 8f4f 	dsb	sy
 800eaae:	607b      	str	r3, [r7, #4]
}
 800eab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eab2:	f7fe fb99 	bl	800d1e8 <xTaskIncrementTick>
 800eab6:	4603      	mov	r3, r0
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d003      	beq.n	800eac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eabc:	4b06      	ldr	r3, [pc, #24]	; (800ead8 <xPortSysTickHandler+0x40>)
 800eabe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eac2:	601a      	str	r2, [r3, #0]
 800eac4:	2300      	movs	r3, #0
 800eac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	f383 8811 	msr	BASEPRI, r3
}
 800eace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ead0:	bf00      	nop
 800ead2:	3708      	adds	r7, #8
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	e000ed04 	.word	0xe000ed04

0800eadc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eadc:	b480      	push	{r7}
 800eade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eae0:	4b09      	ldr	r3, [pc, #36]	; (800eb08 <vPortSetupTimerInterrupt+0x2c>)
 800eae2:	2200      	movs	r2, #0
 800eae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eae6:	4b09      	ldr	r3, [pc, #36]	; (800eb0c <vPortSetupTimerInterrupt+0x30>)
 800eae8:	2200      	movs	r2, #0
 800eaea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eaec:	4b08      	ldr	r3, [pc, #32]	; (800eb10 <vPortSetupTimerInterrupt+0x34>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	4a08      	ldr	r2, [pc, #32]	; (800eb14 <vPortSetupTimerInterrupt+0x38>)
 800eaf2:	3b01      	subs	r3, #1
 800eaf4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eaf6:	4b04      	ldr	r3, [pc, #16]	; (800eb08 <vPortSetupTimerInterrupt+0x2c>)
 800eaf8:	2207      	movs	r2, #7
 800eafa:	601a      	str	r2, [r3, #0]
}
 800eafc:	bf00      	nop
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr
 800eb06:	bf00      	nop
 800eb08:	e000e010 	.word	0xe000e010
 800eb0c:	e000e018 	.word	0xe000e018
 800eb10:	200000e0 	.word	0x200000e0
 800eb14:	e000e014 	.word	0xe000e014

0800eb18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eb18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eb28 <vPortEnableVFP+0x10>
 800eb1c:	6801      	ldr	r1, [r0, #0]
 800eb1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eb22:	6001      	str	r1, [r0, #0]
 800eb24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eb26:	bf00      	nop
 800eb28:	e000ed88 	.word	0xe000ed88

0800eb2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b085      	sub	sp, #20
 800eb30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eb32:	f3ef 8305 	mrs	r3, IPSR
 800eb36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	2b0f      	cmp	r3, #15
 800eb3c:	d914      	bls.n	800eb68 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eb3e:	4a17      	ldr	r2, [pc, #92]	; (800eb9c <vPortValidateInterruptPriority+0x70>)
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	4413      	add	r3, r2
 800eb44:	781b      	ldrb	r3, [r3, #0]
 800eb46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eb48:	4b15      	ldr	r3, [pc, #84]	; (800eba0 <vPortValidateInterruptPriority+0x74>)
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	7afa      	ldrb	r2, [r7, #11]
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d20a      	bcs.n	800eb68 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800eb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb56:	f383 8811 	msr	BASEPRI, r3
 800eb5a:	f3bf 8f6f 	isb	sy
 800eb5e:	f3bf 8f4f 	dsb	sy
 800eb62:	607b      	str	r3, [r7, #4]
}
 800eb64:	bf00      	nop
 800eb66:	e7fe      	b.n	800eb66 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eb68:	4b0e      	ldr	r3, [pc, #56]	; (800eba4 <vPortValidateInterruptPriority+0x78>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eb70:	4b0d      	ldr	r3, [pc, #52]	; (800eba8 <vPortValidateInterruptPriority+0x7c>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d90a      	bls.n	800eb8e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800eb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7c:	f383 8811 	msr	BASEPRI, r3
 800eb80:	f3bf 8f6f 	isb	sy
 800eb84:	f3bf 8f4f 	dsb	sy
 800eb88:	603b      	str	r3, [r7, #0]
}
 800eb8a:	bf00      	nop
 800eb8c:	e7fe      	b.n	800eb8c <vPortValidateInterruptPriority+0x60>
	}
 800eb8e:	bf00      	nop
 800eb90:	3714      	adds	r7, #20
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr
 800eb9a:	bf00      	nop
 800eb9c:	e000e3f0 	.word	0xe000e3f0
 800eba0:	20003784 	.word	0x20003784
 800eba4:	e000ed0c 	.word	0xe000ed0c
 800eba8:	20003788 	.word	0x20003788

0800ebac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b08a      	sub	sp, #40	; 0x28
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ebb8:	f7fe f9cc 	bl	800cf54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ebbc:	4b5b      	ldr	r3, [pc, #364]	; (800ed2c <pvPortMalloc+0x180>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d101      	bne.n	800ebc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ebc4:	f000 f920 	bl	800ee08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ebc8:	4b59      	ldr	r3, [pc, #356]	; (800ed30 <pvPortMalloc+0x184>)
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	4013      	ands	r3, r2
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	f040 8093 	bne.w	800ecfc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d01d      	beq.n	800ec18 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ebdc:	2208      	movs	r2, #8
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f003 0307 	and.w	r3, r3, #7
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d014      	beq.n	800ec18 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f023 0307 	bic.w	r3, r3, #7
 800ebf4:	3308      	adds	r3, #8
 800ebf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f003 0307 	and.w	r3, r3, #7
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d00a      	beq.n	800ec18 <pvPortMalloc+0x6c>
	__asm volatile
 800ec02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec06:	f383 8811 	msr	BASEPRI, r3
 800ec0a:	f3bf 8f6f 	isb	sy
 800ec0e:	f3bf 8f4f 	dsb	sy
 800ec12:	617b      	str	r3, [r7, #20]
}
 800ec14:	bf00      	nop
 800ec16:	e7fe      	b.n	800ec16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d06e      	beq.n	800ecfc <pvPortMalloc+0x150>
 800ec1e:	4b45      	ldr	r3, [pc, #276]	; (800ed34 <pvPortMalloc+0x188>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	687a      	ldr	r2, [r7, #4]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d869      	bhi.n	800ecfc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ec28:	4b43      	ldr	r3, [pc, #268]	; (800ed38 <pvPortMalloc+0x18c>)
 800ec2a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ec2c:	4b42      	ldr	r3, [pc, #264]	; (800ed38 <pvPortMalloc+0x18c>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec32:	e004      	b.n	800ec3e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ec34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec36:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ec38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	687a      	ldr	r2, [r7, #4]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d903      	bls.n	800ec50 <pvPortMalloc+0xa4>
 800ec48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d1f1      	bne.n	800ec34 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ec50:	4b36      	ldr	r3, [pc, #216]	; (800ed2c <pvPortMalloc+0x180>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d050      	beq.n	800ecfc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec5a:	6a3b      	ldr	r3, [r7, #32]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	2208      	movs	r2, #8
 800ec60:	4413      	add	r3, r2
 800ec62:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec66:	681a      	ldr	r2, [r3, #0]
 800ec68:	6a3b      	ldr	r3, [r7, #32]
 800ec6a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ec6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6e:	685a      	ldr	r2, [r3, #4]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	1ad2      	subs	r2, r2, r3
 800ec74:	2308      	movs	r3, #8
 800ec76:	005b      	lsls	r3, r3, #1
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d91f      	bls.n	800ecbc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ec7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	4413      	add	r3, r2
 800ec82:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec84:	69bb      	ldr	r3, [r7, #24]
 800ec86:	f003 0307 	and.w	r3, r3, #7
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d00a      	beq.n	800eca4 <pvPortMalloc+0xf8>
	__asm volatile
 800ec8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec92:	f383 8811 	msr	BASEPRI, r3
 800ec96:	f3bf 8f6f 	isb	sy
 800ec9a:	f3bf 8f4f 	dsb	sy
 800ec9e:	613b      	str	r3, [r7, #16]
}
 800eca0:	bf00      	nop
 800eca2:	e7fe      	b.n	800eca2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca6:	685a      	ldr	r2, [r3, #4]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	1ad2      	subs	r2, r2, r3
 800ecac:	69bb      	ldr	r3, [r7, #24]
 800ecae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ecb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb2:	687a      	ldr	r2, [r7, #4]
 800ecb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ecb6:	69b8      	ldr	r0, [r7, #24]
 800ecb8:	f000 f908 	bl	800eecc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ecbc:	4b1d      	ldr	r3, [pc, #116]	; (800ed34 <pvPortMalloc+0x188>)
 800ecbe:	681a      	ldr	r2, [r3, #0]
 800ecc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc2:	685b      	ldr	r3, [r3, #4]
 800ecc4:	1ad3      	subs	r3, r2, r3
 800ecc6:	4a1b      	ldr	r2, [pc, #108]	; (800ed34 <pvPortMalloc+0x188>)
 800ecc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ecca:	4b1a      	ldr	r3, [pc, #104]	; (800ed34 <pvPortMalloc+0x188>)
 800eccc:	681a      	ldr	r2, [r3, #0]
 800ecce:	4b1b      	ldr	r3, [pc, #108]	; (800ed3c <pvPortMalloc+0x190>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d203      	bcs.n	800ecde <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ecd6:	4b17      	ldr	r3, [pc, #92]	; (800ed34 <pvPortMalloc+0x188>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	4a18      	ldr	r2, [pc, #96]	; (800ed3c <pvPortMalloc+0x190>)
 800ecdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ecde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece0:	685a      	ldr	r2, [r3, #4]
 800ece2:	4b13      	ldr	r3, [pc, #76]	; (800ed30 <pvPortMalloc+0x184>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	431a      	orrs	r2, r3
 800ece8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ecec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecee:	2200      	movs	r2, #0
 800ecf0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ecf2:	4b13      	ldr	r3, [pc, #76]	; (800ed40 <pvPortMalloc+0x194>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	3301      	adds	r3, #1
 800ecf8:	4a11      	ldr	r2, [pc, #68]	; (800ed40 <pvPortMalloc+0x194>)
 800ecfa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ecfc:	f7fe f938 	bl	800cf70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed00:	69fb      	ldr	r3, [r7, #28]
 800ed02:	f003 0307 	and.w	r3, r3, #7
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d00a      	beq.n	800ed20 <pvPortMalloc+0x174>
	__asm volatile
 800ed0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed0e:	f383 8811 	msr	BASEPRI, r3
 800ed12:	f3bf 8f6f 	isb	sy
 800ed16:	f3bf 8f4f 	dsb	sy
 800ed1a:	60fb      	str	r3, [r7, #12]
}
 800ed1c:	bf00      	nop
 800ed1e:	e7fe      	b.n	800ed1e <pvPortMalloc+0x172>
	return pvReturn;
 800ed20:	69fb      	ldr	r3, [r7, #28]
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3728      	adds	r7, #40	; 0x28
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
 800ed2a:	bf00      	nop
 800ed2c:	20007394 	.word	0x20007394
 800ed30:	200073a8 	.word	0x200073a8
 800ed34:	20007398 	.word	0x20007398
 800ed38:	2000738c 	.word	0x2000738c
 800ed3c:	2000739c 	.word	0x2000739c
 800ed40:	200073a0 	.word	0x200073a0

0800ed44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b086      	sub	sp, #24
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d04d      	beq.n	800edf2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ed56:	2308      	movs	r3, #8
 800ed58:	425b      	negs	r3, r3
 800ed5a:	697a      	ldr	r2, [r7, #20]
 800ed5c:	4413      	add	r3, r2
 800ed5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	685a      	ldr	r2, [r3, #4]
 800ed68:	4b24      	ldr	r3, [pc, #144]	; (800edfc <vPortFree+0xb8>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4013      	ands	r3, r2
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d10a      	bne.n	800ed88 <vPortFree+0x44>
	__asm volatile
 800ed72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed76:	f383 8811 	msr	BASEPRI, r3
 800ed7a:	f3bf 8f6f 	isb	sy
 800ed7e:	f3bf 8f4f 	dsb	sy
 800ed82:	60fb      	str	r3, [r7, #12]
}
 800ed84:	bf00      	nop
 800ed86:	e7fe      	b.n	800ed86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d00a      	beq.n	800eda6 <vPortFree+0x62>
	__asm volatile
 800ed90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed94:	f383 8811 	msr	BASEPRI, r3
 800ed98:	f3bf 8f6f 	isb	sy
 800ed9c:	f3bf 8f4f 	dsb	sy
 800eda0:	60bb      	str	r3, [r7, #8]
}
 800eda2:	bf00      	nop
 800eda4:	e7fe      	b.n	800eda4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	685a      	ldr	r2, [r3, #4]
 800edaa:	4b14      	ldr	r3, [pc, #80]	; (800edfc <vPortFree+0xb8>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	4013      	ands	r3, r2
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d01e      	beq.n	800edf2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d11a      	bne.n	800edf2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	685a      	ldr	r2, [r3, #4]
 800edc0:	4b0e      	ldr	r3, [pc, #56]	; (800edfc <vPortFree+0xb8>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	43db      	mvns	r3, r3
 800edc6:	401a      	ands	r2, r3
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800edcc:	f7fe f8c2 	bl	800cf54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	685a      	ldr	r2, [r3, #4]
 800edd4:	4b0a      	ldr	r3, [pc, #40]	; (800ee00 <vPortFree+0xbc>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4413      	add	r3, r2
 800edda:	4a09      	ldr	r2, [pc, #36]	; (800ee00 <vPortFree+0xbc>)
 800eddc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800edde:	6938      	ldr	r0, [r7, #16]
 800ede0:	f000 f874 	bl	800eecc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ede4:	4b07      	ldr	r3, [pc, #28]	; (800ee04 <vPortFree+0xc0>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	3301      	adds	r3, #1
 800edea:	4a06      	ldr	r2, [pc, #24]	; (800ee04 <vPortFree+0xc0>)
 800edec:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800edee:	f7fe f8bf 	bl	800cf70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800edf2:	bf00      	nop
 800edf4:	3718      	adds	r7, #24
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop
 800edfc:	200073a8 	.word	0x200073a8
 800ee00:	20007398 	.word	0x20007398
 800ee04:	200073a4 	.word	0x200073a4

0800ee08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b085      	sub	sp, #20
 800ee0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ee0e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ee12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ee14:	4b27      	ldr	r3, [pc, #156]	; (800eeb4 <prvHeapInit+0xac>)
 800ee16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f003 0307 	and.w	r3, r3, #7
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d00c      	beq.n	800ee3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	3307      	adds	r3, #7
 800ee26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f023 0307 	bic.w	r3, r3, #7
 800ee2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ee30:	68ba      	ldr	r2, [r7, #8]
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	1ad3      	subs	r3, r2, r3
 800ee36:	4a1f      	ldr	r2, [pc, #124]	; (800eeb4 <prvHeapInit+0xac>)
 800ee38:	4413      	add	r3, r2
 800ee3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ee40:	4a1d      	ldr	r2, [pc, #116]	; (800eeb8 <prvHeapInit+0xb0>)
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee46:	4b1c      	ldr	r3, [pc, #112]	; (800eeb8 <prvHeapInit+0xb0>)
 800ee48:	2200      	movs	r2, #0
 800ee4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	68ba      	ldr	r2, [r7, #8]
 800ee50:	4413      	add	r3, r2
 800ee52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ee54:	2208      	movs	r2, #8
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	1a9b      	subs	r3, r3, r2
 800ee5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f023 0307 	bic.w	r3, r3, #7
 800ee62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	4a15      	ldr	r2, [pc, #84]	; (800eebc <prvHeapInit+0xb4>)
 800ee68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ee6a:	4b14      	ldr	r3, [pc, #80]	; (800eebc <prvHeapInit+0xb4>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ee72:	4b12      	ldr	r3, [pc, #72]	; (800eebc <prvHeapInit+0xb4>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2200      	movs	r2, #0
 800ee78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	68fa      	ldr	r2, [r7, #12]
 800ee82:	1ad2      	subs	r2, r2, r3
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ee88:	4b0c      	ldr	r3, [pc, #48]	; (800eebc <prvHeapInit+0xb4>)
 800ee8a:	681a      	ldr	r2, [r3, #0]
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	4a0a      	ldr	r2, [pc, #40]	; (800eec0 <prvHeapInit+0xb8>)
 800ee96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	4a09      	ldr	r2, [pc, #36]	; (800eec4 <prvHeapInit+0xbc>)
 800ee9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eea0:	4b09      	ldr	r3, [pc, #36]	; (800eec8 <prvHeapInit+0xc0>)
 800eea2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eea6:	601a      	str	r2, [r3, #0]
}
 800eea8:	bf00      	nop
 800eeaa:	3714      	adds	r7, #20
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr
 800eeb4:	2000378c 	.word	0x2000378c
 800eeb8:	2000738c 	.word	0x2000738c
 800eebc:	20007394 	.word	0x20007394
 800eec0:	2000739c 	.word	0x2000739c
 800eec4:	20007398 	.word	0x20007398
 800eec8:	200073a8 	.word	0x200073a8

0800eecc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eecc:	b480      	push	{r7}
 800eece:	b085      	sub	sp, #20
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eed4:	4b28      	ldr	r3, [pc, #160]	; (800ef78 <prvInsertBlockIntoFreeList+0xac>)
 800eed6:	60fb      	str	r3, [r7, #12]
 800eed8:	e002      	b.n	800eee0 <prvInsertBlockIntoFreeList+0x14>
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	60fb      	str	r3, [r7, #12]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	687a      	ldr	r2, [r7, #4]
 800eee6:	429a      	cmp	r2, r3
 800eee8:	d8f7      	bhi.n	800eeda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	68ba      	ldr	r2, [r7, #8]
 800eef4:	4413      	add	r3, r2
 800eef6:	687a      	ldr	r2, [r7, #4]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d108      	bne.n	800ef0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	685a      	ldr	r2, [r3, #4]
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	685b      	ldr	r3, [r3, #4]
 800ef04:	441a      	add	r2, r3
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	68ba      	ldr	r2, [r7, #8]
 800ef18:	441a      	add	r2, r3
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d118      	bne.n	800ef54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681a      	ldr	r2, [r3, #0]
 800ef26:	4b15      	ldr	r3, [pc, #84]	; (800ef7c <prvInsertBlockIntoFreeList+0xb0>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d00d      	beq.n	800ef4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	685a      	ldr	r2, [r3, #4]
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	685b      	ldr	r3, [r3, #4]
 800ef38:	441a      	add	r2, r3
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	601a      	str	r2, [r3, #0]
 800ef48:	e008      	b.n	800ef5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ef4a:	4b0c      	ldr	r3, [pc, #48]	; (800ef7c <prvInsertBlockIntoFreeList+0xb0>)
 800ef4c:	681a      	ldr	r2, [r3, #0]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	601a      	str	r2, [r3, #0]
 800ef52:	e003      	b.n	800ef5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	681a      	ldr	r2, [r3, #0]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ef5c:	68fa      	ldr	r2, [r7, #12]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d002      	beq.n	800ef6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	687a      	ldr	r2, [r7, #4]
 800ef68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef6a:	bf00      	nop
 800ef6c:	3714      	adds	r7, #20
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef74:	4770      	bx	lr
 800ef76:	bf00      	nop
 800ef78:	2000738c 	.word	0x2000738c
 800ef7c:	20007394 	.word	0x20007394

0800ef80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ef84:	2200      	movs	r2, #0
 800ef86:	4912      	ldr	r1, [pc, #72]	; (800efd0 <MX_USB_DEVICE_Init+0x50>)
 800ef88:	4812      	ldr	r0, [pc, #72]	; (800efd4 <MX_USB_DEVICE_Init+0x54>)
 800ef8a:	f7fb f951 	bl	800a230 <USBD_Init>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d001      	beq.n	800ef98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ef94:	f7f4 fc20 	bl	80037d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ef98:	490f      	ldr	r1, [pc, #60]	; (800efd8 <MX_USB_DEVICE_Init+0x58>)
 800ef9a:	480e      	ldr	r0, [pc, #56]	; (800efd4 <MX_USB_DEVICE_Init+0x54>)
 800ef9c:	f7fb f978 	bl	800a290 <USBD_RegisterClass>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d001      	beq.n	800efaa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800efa6:	f7f4 fc17 	bl	80037d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800efaa:	490c      	ldr	r1, [pc, #48]	; (800efdc <MX_USB_DEVICE_Init+0x5c>)
 800efac:	4809      	ldr	r0, [pc, #36]	; (800efd4 <MX_USB_DEVICE_Init+0x54>)
 800efae:	f7fb f8af 	bl	800a110 <USBD_CDC_RegisterInterface>
 800efb2:	4603      	mov	r3, r0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d001      	beq.n	800efbc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800efb8:	f7f4 fc0e 	bl	80037d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800efbc:	4805      	ldr	r0, [pc, #20]	; (800efd4 <MX_USB_DEVICE_Init+0x54>)
 800efbe:	f7fb f99d 	bl	800a2fc <USBD_Start>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d001      	beq.n	800efcc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800efc8:	f7f4 fc06 	bl	80037d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800efcc:	bf00      	nop
 800efce:	bd80      	pop	{r7, pc}
 800efd0:	20000190 	.word	0x20000190
 800efd4:	200073ac 	.word	0x200073ac
 800efd8:	200000f8 	.word	0x200000f8
 800efdc:	2000017c 	.word	0x2000017c

0800efe0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800efe4:	2200      	movs	r2, #0
 800efe6:	4905      	ldr	r1, [pc, #20]	; (800effc <CDC_Init_FS+0x1c>)
 800efe8:	4805      	ldr	r0, [pc, #20]	; (800f000 <CDC_Init_FS+0x20>)
 800efea:	f7fb f8ab 	bl	800a144 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800efee:	4905      	ldr	r1, [pc, #20]	; (800f004 <CDC_Init_FS+0x24>)
 800eff0:	4803      	ldr	r0, [pc, #12]	; (800f000 <CDC_Init_FS+0x20>)
 800eff2:	f7fb f8c9 	bl	800a188 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800eff6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800eff8:	4618      	mov	r0, r3
 800effa:	bd80      	pop	{r7, pc}
 800effc:	20007e88 	.word	0x20007e88
 800f000:	200073ac 	.word	0x200073ac
 800f004:	20007688 	.word	0x20007688

0800f008 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f008:	b480      	push	{r7}
 800f00a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f00c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f00e:	4618      	mov	r0, r3
 800f010:	46bd      	mov	sp, r7
 800f012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f016:	4770      	bx	lr

0800f018 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f018:	b480      	push	{r7}
 800f01a:	b083      	sub	sp, #12
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	4603      	mov	r3, r0
 800f020:	6039      	str	r1, [r7, #0]
 800f022:	71fb      	strb	r3, [r7, #7]
 800f024:	4613      	mov	r3, r2
 800f026:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f028:	79fb      	ldrb	r3, [r7, #7]
 800f02a:	2b23      	cmp	r3, #35	; 0x23
 800f02c:	d84a      	bhi.n	800f0c4 <CDC_Control_FS+0xac>
 800f02e:	a201      	add	r2, pc, #4	; (adr r2, 800f034 <CDC_Control_FS+0x1c>)
 800f030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f034:	0800f0c5 	.word	0x0800f0c5
 800f038:	0800f0c5 	.word	0x0800f0c5
 800f03c:	0800f0c5 	.word	0x0800f0c5
 800f040:	0800f0c5 	.word	0x0800f0c5
 800f044:	0800f0c5 	.word	0x0800f0c5
 800f048:	0800f0c5 	.word	0x0800f0c5
 800f04c:	0800f0c5 	.word	0x0800f0c5
 800f050:	0800f0c5 	.word	0x0800f0c5
 800f054:	0800f0c5 	.word	0x0800f0c5
 800f058:	0800f0c5 	.word	0x0800f0c5
 800f05c:	0800f0c5 	.word	0x0800f0c5
 800f060:	0800f0c5 	.word	0x0800f0c5
 800f064:	0800f0c5 	.word	0x0800f0c5
 800f068:	0800f0c5 	.word	0x0800f0c5
 800f06c:	0800f0c5 	.word	0x0800f0c5
 800f070:	0800f0c5 	.word	0x0800f0c5
 800f074:	0800f0c5 	.word	0x0800f0c5
 800f078:	0800f0c5 	.word	0x0800f0c5
 800f07c:	0800f0c5 	.word	0x0800f0c5
 800f080:	0800f0c5 	.word	0x0800f0c5
 800f084:	0800f0c5 	.word	0x0800f0c5
 800f088:	0800f0c5 	.word	0x0800f0c5
 800f08c:	0800f0c5 	.word	0x0800f0c5
 800f090:	0800f0c5 	.word	0x0800f0c5
 800f094:	0800f0c5 	.word	0x0800f0c5
 800f098:	0800f0c5 	.word	0x0800f0c5
 800f09c:	0800f0c5 	.word	0x0800f0c5
 800f0a0:	0800f0c5 	.word	0x0800f0c5
 800f0a4:	0800f0c5 	.word	0x0800f0c5
 800f0a8:	0800f0c5 	.word	0x0800f0c5
 800f0ac:	0800f0c5 	.word	0x0800f0c5
 800f0b0:	0800f0c5 	.word	0x0800f0c5
 800f0b4:	0800f0c5 	.word	0x0800f0c5
 800f0b8:	0800f0c5 	.word	0x0800f0c5
 800f0bc:	0800f0c5 	.word	0x0800f0c5
 800f0c0:	0800f0c5 	.word	0x0800f0c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f0c4:	bf00      	nop
  }

  return (USBD_OK);
 800f0c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	370c      	adds	r7, #12
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr

0800f0d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b082      	sub	sp, #8
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f0de:	6879      	ldr	r1, [r7, #4]
 800f0e0:	4805      	ldr	r0, [pc, #20]	; (800f0f8 <CDC_Receive_FS+0x24>)
 800f0e2:	f7fb f851 	bl	800a188 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f0e6:	4804      	ldr	r0, [pc, #16]	; (800f0f8 <CDC_Receive_FS+0x24>)
 800f0e8:	f7fb f86c 	bl	800a1c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f0ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3708      	adds	r7, #8
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	200073ac 	.word	0x200073ac

0800f0fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b087      	sub	sp, #28
 800f100:	af00      	add	r7, sp, #0
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	4613      	mov	r3, r2
 800f108:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f10a:	2300      	movs	r3, #0
 800f10c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f10e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f112:	4618      	mov	r0, r3
 800f114:	371c      	adds	r7, #28
 800f116:	46bd      	mov	sp, r7
 800f118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11c:	4770      	bx	lr
	...

0800f120 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f120:	b480      	push	{r7}
 800f122:	b083      	sub	sp, #12
 800f124:	af00      	add	r7, sp, #0
 800f126:	4603      	mov	r3, r0
 800f128:	6039      	str	r1, [r7, #0]
 800f12a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	2212      	movs	r2, #18
 800f130:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f132:	4b03      	ldr	r3, [pc, #12]	; (800f140 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f134:	4618      	mov	r0, r3
 800f136:	370c      	adds	r7, #12
 800f138:	46bd      	mov	sp, r7
 800f13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13e:	4770      	bx	lr
 800f140:	200001ac 	.word	0x200001ac

0800f144 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f144:	b480      	push	{r7}
 800f146:	b083      	sub	sp, #12
 800f148:	af00      	add	r7, sp, #0
 800f14a:	4603      	mov	r3, r0
 800f14c:	6039      	str	r1, [r7, #0]
 800f14e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	2204      	movs	r2, #4
 800f154:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f156:	4b03      	ldr	r3, [pc, #12]	; (800f164 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f158:	4618      	mov	r0, r3
 800f15a:	370c      	adds	r7, #12
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr
 800f164:	200001c0 	.word	0x200001c0

0800f168 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b082      	sub	sp, #8
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	4603      	mov	r3, r0
 800f170:	6039      	str	r1, [r7, #0]
 800f172:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f174:	79fb      	ldrb	r3, [r7, #7]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d105      	bne.n	800f186 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f17a:	683a      	ldr	r2, [r7, #0]
 800f17c:	4907      	ldr	r1, [pc, #28]	; (800f19c <USBD_FS_ProductStrDescriptor+0x34>)
 800f17e:	4808      	ldr	r0, [pc, #32]	; (800f1a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800f180:	f7fc fa6e 	bl	800b660 <USBD_GetString>
 800f184:	e004      	b.n	800f190 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f186:	683a      	ldr	r2, [r7, #0]
 800f188:	4904      	ldr	r1, [pc, #16]	; (800f19c <USBD_FS_ProductStrDescriptor+0x34>)
 800f18a:	4805      	ldr	r0, [pc, #20]	; (800f1a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800f18c:	f7fc fa68 	bl	800b660 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f190:	4b02      	ldr	r3, [pc, #8]	; (800f19c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f192:	4618      	mov	r0, r3
 800f194:	3708      	adds	r7, #8
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	20008688 	.word	0x20008688
 800f1a0:	0801325c 	.word	0x0801325c

0800f1a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b082      	sub	sp, #8
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	6039      	str	r1, [r7, #0]
 800f1ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f1b0:	683a      	ldr	r2, [r7, #0]
 800f1b2:	4904      	ldr	r1, [pc, #16]	; (800f1c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f1b4:	4804      	ldr	r0, [pc, #16]	; (800f1c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f1b6:	f7fc fa53 	bl	800b660 <USBD_GetString>
  return USBD_StrDesc;
 800f1ba:	4b02      	ldr	r3, [pc, #8]	; (800f1c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3708      	adds	r7, #8
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}
 800f1c4:	20008688 	.word	0x20008688
 800f1c8:	08013274 	.word	0x08013274

0800f1cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	6039      	str	r1, [r7, #0]
 800f1d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	221a      	movs	r2, #26
 800f1dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f1de:	f000 f843 	bl	800f268 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f1e2:	4b02      	ldr	r3, [pc, #8]	; (800f1ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	3708      	adds	r7, #8
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}
 800f1ec:	200001c4 	.word	0x200001c4

0800f1f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	6039      	str	r1, [r7, #0]
 800f1fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f1fc:	79fb      	ldrb	r3, [r7, #7]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d105      	bne.n	800f20e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f202:	683a      	ldr	r2, [r7, #0]
 800f204:	4907      	ldr	r1, [pc, #28]	; (800f224 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f206:	4808      	ldr	r0, [pc, #32]	; (800f228 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f208:	f7fc fa2a 	bl	800b660 <USBD_GetString>
 800f20c:	e004      	b.n	800f218 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f20e:	683a      	ldr	r2, [r7, #0]
 800f210:	4904      	ldr	r1, [pc, #16]	; (800f224 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f212:	4805      	ldr	r0, [pc, #20]	; (800f228 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f214:	f7fc fa24 	bl	800b660 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f218:	4b02      	ldr	r3, [pc, #8]	; (800f224 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	20008688 	.word	0x20008688
 800f228:	08013288 	.word	0x08013288

0800f22c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b082      	sub	sp, #8
 800f230:	af00      	add	r7, sp, #0
 800f232:	4603      	mov	r3, r0
 800f234:	6039      	str	r1, [r7, #0]
 800f236:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f238:	79fb      	ldrb	r3, [r7, #7]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d105      	bne.n	800f24a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f23e:	683a      	ldr	r2, [r7, #0]
 800f240:	4907      	ldr	r1, [pc, #28]	; (800f260 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f242:	4808      	ldr	r0, [pc, #32]	; (800f264 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f244:	f7fc fa0c 	bl	800b660 <USBD_GetString>
 800f248:	e004      	b.n	800f254 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f24a:	683a      	ldr	r2, [r7, #0]
 800f24c:	4904      	ldr	r1, [pc, #16]	; (800f260 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f24e:	4805      	ldr	r0, [pc, #20]	; (800f264 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f250:	f7fc fa06 	bl	800b660 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f254:	4b02      	ldr	r3, [pc, #8]	; (800f260 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f256:	4618      	mov	r0, r3
 800f258:	3708      	adds	r7, #8
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	20008688 	.word	0x20008688
 800f264:	08013294 	.word	0x08013294

0800f268 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f26e:	4b0f      	ldr	r3, [pc, #60]	; (800f2ac <Get_SerialNum+0x44>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f274:	4b0e      	ldr	r3, [pc, #56]	; (800f2b0 <Get_SerialNum+0x48>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f27a:	4b0e      	ldr	r3, [pc, #56]	; (800f2b4 <Get_SerialNum+0x4c>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f280:	68fa      	ldr	r2, [r7, #12]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	4413      	add	r3, r2
 800f286:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d009      	beq.n	800f2a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f28e:	2208      	movs	r2, #8
 800f290:	4909      	ldr	r1, [pc, #36]	; (800f2b8 <Get_SerialNum+0x50>)
 800f292:	68f8      	ldr	r0, [r7, #12]
 800f294:	f000 f814 	bl	800f2c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f298:	2204      	movs	r2, #4
 800f29a:	4908      	ldr	r1, [pc, #32]	; (800f2bc <Get_SerialNum+0x54>)
 800f29c:	68b8      	ldr	r0, [r7, #8]
 800f29e:	f000 f80f 	bl	800f2c0 <IntToUnicode>
  }
}
 800f2a2:	bf00      	nop
 800f2a4:	3710      	adds	r7, #16
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop
 800f2ac:	1fff7a10 	.word	0x1fff7a10
 800f2b0:	1fff7a14 	.word	0x1fff7a14
 800f2b4:	1fff7a18 	.word	0x1fff7a18
 800f2b8:	200001c6 	.word	0x200001c6
 800f2bc:	200001d6 	.word	0x200001d6

0800f2c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b087      	sub	sp, #28
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	60b9      	str	r1, [r7, #8]
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	75fb      	strb	r3, [r7, #23]
 800f2d6:	e027      	b.n	800f328 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	0f1b      	lsrs	r3, r3, #28
 800f2dc:	2b09      	cmp	r3, #9
 800f2de:	d80b      	bhi.n	800f2f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	0f1b      	lsrs	r3, r3, #28
 800f2e4:	b2da      	uxtb	r2, r3
 800f2e6:	7dfb      	ldrb	r3, [r7, #23]
 800f2e8:	005b      	lsls	r3, r3, #1
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	440b      	add	r3, r1
 800f2f0:	3230      	adds	r2, #48	; 0x30
 800f2f2:	b2d2      	uxtb	r2, r2
 800f2f4:	701a      	strb	r2, [r3, #0]
 800f2f6:	e00a      	b.n	800f30e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	0f1b      	lsrs	r3, r3, #28
 800f2fc:	b2da      	uxtb	r2, r3
 800f2fe:	7dfb      	ldrb	r3, [r7, #23]
 800f300:	005b      	lsls	r3, r3, #1
 800f302:	4619      	mov	r1, r3
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	440b      	add	r3, r1
 800f308:	3237      	adds	r2, #55	; 0x37
 800f30a:	b2d2      	uxtb	r2, r2
 800f30c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	011b      	lsls	r3, r3, #4
 800f312:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f314:	7dfb      	ldrb	r3, [r7, #23]
 800f316:	005b      	lsls	r3, r3, #1
 800f318:	3301      	adds	r3, #1
 800f31a:	68ba      	ldr	r2, [r7, #8]
 800f31c:	4413      	add	r3, r2
 800f31e:	2200      	movs	r2, #0
 800f320:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f322:	7dfb      	ldrb	r3, [r7, #23]
 800f324:	3301      	adds	r3, #1
 800f326:	75fb      	strb	r3, [r7, #23]
 800f328:	7dfa      	ldrb	r2, [r7, #23]
 800f32a:	79fb      	ldrb	r3, [r7, #7]
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d3d3      	bcc.n	800f2d8 <IntToUnicode+0x18>
  }
}
 800f330:	bf00      	nop
 800f332:	bf00      	nop
 800f334:	371c      	adds	r7, #28
 800f336:	46bd      	mov	sp, r7
 800f338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33c:	4770      	bx	lr
	...

0800f340 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b08a      	sub	sp, #40	; 0x28
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f348:	f107 0314 	add.w	r3, r7, #20
 800f34c:	2200      	movs	r2, #0
 800f34e:	601a      	str	r2, [r3, #0]
 800f350:	605a      	str	r2, [r3, #4]
 800f352:	609a      	str	r2, [r3, #8]
 800f354:	60da      	str	r2, [r3, #12]
 800f356:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f360:	d13a      	bne.n	800f3d8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f362:	2300      	movs	r3, #0
 800f364:	613b      	str	r3, [r7, #16]
 800f366:	4b1e      	ldr	r3, [pc, #120]	; (800f3e0 <HAL_PCD_MspInit+0xa0>)
 800f368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f36a:	4a1d      	ldr	r2, [pc, #116]	; (800f3e0 <HAL_PCD_MspInit+0xa0>)
 800f36c:	f043 0301 	orr.w	r3, r3, #1
 800f370:	6313      	str	r3, [r2, #48]	; 0x30
 800f372:	4b1b      	ldr	r3, [pc, #108]	; (800f3e0 <HAL_PCD_MspInit+0xa0>)
 800f374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f376:	f003 0301 	and.w	r3, r3, #1
 800f37a:	613b      	str	r3, [r7, #16]
 800f37c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f37e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f384:	2302      	movs	r3, #2
 800f386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f388:	2300      	movs	r3, #0
 800f38a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f38c:	2303      	movs	r3, #3
 800f38e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f390:	230a      	movs	r3, #10
 800f392:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f394:	f107 0314 	add.w	r3, r7, #20
 800f398:	4619      	mov	r1, r3
 800f39a:	4812      	ldr	r0, [pc, #72]	; (800f3e4 <HAL_PCD_MspInit+0xa4>)
 800f39c:	f7f5 fa2a 	bl	80047f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f3a0:	4b0f      	ldr	r3, [pc, #60]	; (800f3e0 <HAL_PCD_MspInit+0xa0>)
 800f3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3a4:	4a0e      	ldr	r2, [pc, #56]	; (800f3e0 <HAL_PCD_MspInit+0xa0>)
 800f3a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3aa:	6353      	str	r3, [r2, #52]	; 0x34
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	60fb      	str	r3, [r7, #12]
 800f3b0:	4b0b      	ldr	r3, [pc, #44]	; (800f3e0 <HAL_PCD_MspInit+0xa0>)
 800f3b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3b4:	4a0a      	ldr	r2, [pc, #40]	; (800f3e0 <HAL_PCD_MspInit+0xa0>)
 800f3b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f3ba:	6453      	str	r3, [r2, #68]	; 0x44
 800f3bc:	4b08      	ldr	r3, [pc, #32]	; (800f3e0 <HAL_PCD_MspInit+0xa0>)
 800f3be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f3c4:	60fb      	str	r3, [r7, #12]
 800f3c6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	2105      	movs	r1, #5
 800f3cc:	2043      	movs	r0, #67	; 0x43
 800f3ce:	f7f4 fe5e 	bl	800408e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f3d2:	2043      	movs	r0, #67	; 0x43
 800f3d4:	f7f4 fe77 	bl	80040c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f3d8:	bf00      	nop
 800f3da:	3728      	adds	r7, #40	; 0x28
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}
 800f3e0:	40023800 	.word	0x40023800
 800f3e4:	40020000 	.word	0x40020000

0800f3e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b082      	sub	sp, #8
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	4610      	mov	r0, r2
 800f400:	f7fa ffc9 	bl	800a396 <USBD_LL_SetupStage>
}
 800f404:	bf00      	nop
 800f406:	3708      	adds	r7, #8
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b082      	sub	sp, #8
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	460b      	mov	r3, r1
 800f416:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800f41e:	78fa      	ldrb	r2, [r7, #3]
 800f420:	6879      	ldr	r1, [r7, #4]
 800f422:	4613      	mov	r3, r2
 800f424:	00db      	lsls	r3, r3, #3
 800f426:	4413      	add	r3, r2
 800f428:	009b      	lsls	r3, r3, #2
 800f42a:	440b      	add	r3, r1
 800f42c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f430:	681a      	ldr	r2, [r3, #0]
 800f432:	78fb      	ldrb	r3, [r7, #3]
 800f434:	4619      	mov	r1, r3
 800f436:	f7fb f803 	bl	800a440 <USBD_LL_DataOutStage>
}
 800f43a:	bf00      	nop
 800f43c:	3708      	adds	r7, #8
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}

0800f442 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f442:	b580      	push	{r7, lr}
 800f444:	b082      	sub	sp, #8
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]
 800f44a:	460b      	mov	r3, r1
 800f44c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800f454:	78fa      	ldrb	r2, [r7, #3]
 800f456:	6879      	ldr	r1, [r7, #4]
 800f458:	4613      	mov	r3, r2
 800f45a:	00db      	lsls	r3, r3, #3
 800f45c:	4413      	add	r3, r2
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	440b      	add	r3, r1
 800f462:	3320      	adds	r3, #32
 800f464:	681a      	ldr	r2, [r3, #0]
 800f466:	78fb      	ldrb	r3, [r7, #3]
 800f468:	4619      	mov	r1, r3
 800f46a:	f7fb f89c 	bl	800a5a6 <USBD_LL_DataInStage>
}
 800f46e:	bf00      	nop
 800f470:	3708      	adds	r7, #8
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}

0800f476 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f476:	b580      	push	{r7, lr}
 800f478:	b082      	sub	sp, #8
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f484:	4618      	mov	r0, r3
 800f486:	f7fb f9d6 	bl	800a836 <USBD_LL_SOF>
}
 800f48a:	bf00      	nop
 800f48c:	3708      	adds	r7, #8
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}

0800f492 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f492:	b580      	push	{r7, lr}
 800f494:	b084      	sub	sp, #16
 800f496:	af00      	add	r7, sp, #0
 800f498:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f49a:	2301      	movs	r3, #1
 800f49c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	79db      	ldrb	r3, [r3, #7]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d102      	bne.n	800f4ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	73fb      	strb	r3, [r7, #15]
 800f4aa:	e008      	b.n	800f4be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	79db      	ldrb	r3, [r3, #7]
 800f4b0:	2b02      	cmp	r3, #2
 800f4b2:	d102      	bne.n	800f4ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	73fb      	strb	r3, [r7, #15]
 800f4b8:	e001      	b.n	800f4be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f4ba:	f7f4 f98d 	bl	80037d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f4c4:	7bfa      	ldrb	r2, [r7, #15]
 800f4c6:	4611      	mov	r1, r2
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7fb f970 	bl	800a7ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7fb f918 	bl	800a70a <USBD_LL_Reset>
}
 800f4da:	bf00      	nop
 800f4dc:	3710      	adds	r7, #16
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
	...

0800f4e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7fb f96b 	bl	800a7ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	6812      	ldr	r2, [r2, #0]
 800f506:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f50a:	f043 0301 	orr.w	r3, r3, #1
 800f50e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	7adb      	ldrb	r3, [r3, #11]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d005      	beq.n	800f524 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f518:	4b04      	ldr	r3, [pc, #16]	; (800f52c <HAL_PCD_SuspendCallback+0x48>)
 800f51a:	691b      	ldr	r3, [r3, #16]
 800f51c:	4a03      	ldr	r2, [pc, #12]	; (800f52c <HAL_PCD_SuspendCallback+0x48>)
 800f51e:	f043 0306 	orr.w	r3, r3, #6
 800f522:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f524:	bf00      	nop
 800f526:	3708      	adds	r7, #8
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}
 800f52c:	e000ed00 	.word	0xe000ed00

0800f530 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b082      	sub	sp, #8
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f53e:	4618      	mov	r0, r3
 800f540:	f7fb f961 	bl	800a806 <USBD_LL_Resume>
}
 800f544:	bf00      	nop
 800f546:	3708      	adds	r7, #8
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}

0800f54c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b082      	sub	sp, #8
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	460b      	mov	r3, r1
 800f556:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f55e:	78fa      	ldrb	r2, [r7, #3]
 800f560:	4611      	mov	r1, r2
 800f562:	4618      	mov	r0, r3
 800f564:	f7fb f9b9 	bl	800a8da <USBD_LL_IsoOUTIncomplete>
}
 800f568:	bf00      	nop
 800f56a:	3708      	adds	r7, #8
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}

0800f570 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b082      	sub	sp, #8
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	460b      	mov	r3, r1
 800f57a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f582:	78fa      	ldrb	r2, [r7, #3]
 800f584:	4611      	mov	r1, r2
 800f586:	4618      	mov	r0, r3
 800f588:	f7fb f975 	bl	800a876 <USBD_LL_IsoINIncomplete>
}
 800f58c:	bf00      	nop
 800f58e:	3708      	adds	r7, #8
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b082      	sub	sp, #8
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7fb f9cb 	bl	800a93e <USBD_LL_DevConnected>
}
 800f5a8:	bf00      	nop
 800f5aa:	3708      	adds	r7, #8
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}

0800f5b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b082      	sub	sp, #8
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7fb f9c8 	bl	800a954 <USBD_LL_DevDisconnected>
}
 800f5c4:	bf00      	nop
 800f5c6:	3708      	adds	r7, #8
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}

0800f5cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d13c      	bne.n	800f656 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f5dc:	4a20      	ldr	r2, [pc, #128]	; (800f660 <USBD_LL_Init+0x94>)
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	4a1e      	ldr	r2, [pc, #120]	; (800f660 <USBD_LL_Init+0x94>)
 800f5e8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f5ec:	4b1c      	ldr	r3, [pc, #112]	; (800f660 <USBD_LL_Init+0x94>)
 800f5ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f5f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f5f4:	4b1a      	ldr	r3, [pc, #104]	; (800f660 <USBD_LL_Init+0x94>)
 800f5f6:	2204      	movs	r2, #4
 800f5f8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f5fa:	4b19      	ldr	r3, [pc, #100]	; (800f660 <USBD_LL_Init+0x94>)
 800f5fc:	2202      	movs	r2, #2
 800f5fe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f600:	4b17      	ldr	r3, [pc, #92]	; (800f660 <USBD_LL_Init+0x94>)
 800f602:	2200      	movs	r2, #0
 800f604:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f606:	4b16      	ldr	r3, [pc, #88]	; (800f660 <USBD_LL_Init+0x94>)
 800f608:	2202      	movs	r2, #2
 800f60a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f60c:	4b14      	ldr	r3, [pc, #80]	; (800f660 <USBD_LL_Init+0x94>)
 800f60e:	2200      	movs	r2, #0
 800f610:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f612:	4b13      	ldr	r3, [pc, #76]	; (800f660 <USBD_LL_Init+0x94>)
 800f614:	2200      	movs	r2, #0
 800f616:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f618:	4b11      	ldr	r3, [pc, #68]	; (800f660 <USBD_LL_Init+0x94>)
 800f61a:	2200      	movs	r2, #0
 800f61c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f61e:	4b10      	ldr	r3, [pc, #64]	; (800f660 <USBD_LL_Init+0x94>)
 800f620:	2200      	movs	r2, #0
 800f622:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f624:	4b0e      	ldr	r3, [pc, #56]	; (800f660 <USBD_LL_Init+0x94>)
 800f626:	2200      	movs	r2, #0
 800f628:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f62a:	480d      	ldr	r0, [pc, #52]	; (800f660 <USBD_LL_Init+0x94>)
 800f62c:	f7f5 fa97 	bl	8004b5e <HAL_PCD_Init>
 800f630:	4603      	mov	r3, r0
 800f632:	2b00      	cmp	r3, #0
 800f634:	d001      	beq.n	800f63a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f636:	f7f4 f8cf 	bl	80037d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f63a:	2180      	movs	r1, #128	; 0x80
 800f63c:	4808      	ldr	r0, [pc, #32]	; (800f660 <USBD_LL_Init+0x94>)
 800f63e:	f7f6 fcc2 	bl	8005fc6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f642:	2240      	movs	r2, #64	; 0x40
 800f644:	2100      	movs	r1, #0
 800f646:	4806      	ldr	r0, [pc, #24]	; (800f660 <USBD_LL_Init+0x94>)
 800f648:	f7f6 fc76 	bl	8005f38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f64c:	2280      	movs	r2, #128	; 0x80
 800f64e:	2101      	movs	r1, #1
 800f650:	4803      	ldr	r0, [pc, #12]	; (800f660 <USBD_LL_Init+0x94>)
 800f652:	f7f6 fc71 	bl	8005f38 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f656:	2300      	movs	r3, #0
}
 800f658:	4618      	mov	r0, r3
 800f65a:	3708      	adds	r7, #8
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}
 800f660:	20008888 	.word	0x20008888

0800f664 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b084      	sub	sp, #16
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f66c:	2300      	movs	r3, #0
 800f66e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f670:	2300      	movs	r3, #0
 800f672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7f5 fb7e 	bl	8004d7c <HAL_PCD_Start>
 800f680:	4603      	mov	r3, r0
 800f682:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f684:	7bfb      	ldrb	r3, [r7, #15]
 800f686:	4618      	mov	r0, r3
 800f688:	f000 f942 	bl	800f910 <USBD_Get_USB_Status>
 800f68c:	4603      	mov	r3, r0
 800f68e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f690:	7bbb      	ldrb	r3, [r7, #14]
}
 800f692:	4618      	mov	r0, r3
 800f694:	3710      	adds	r7, #16
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}

0800f69a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f69a:	b580      	push	{r7, lr}
 800f69c:	b084      	sub	sp, #16
 800f69e:	af00      	add	r7, sp, #0
 800f6a0:	6078      	str	r0, [r7, #4]
 800f6a2:	4608      	mov	r0, r1
 800f6a4:	4611      	mov	r1, r2
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	70fb      	strb	r3, [r7, #3]
 800f6ac:	460b      	mov	r3, r1
 800f6ae:	70bb      	strb	r3, [r7, #2]
 800f6b0:	4613      	mov	r3, r2
 800f6b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f6c2:	78bb      	ldrb	r3, [r7, #2]
 800f6c4:	883a      	ldrh	r2, [r7, #0]
 800f6c6:	78f9      	ldrb	r1, [r7, #3]
 800f6c8:	f7f6 f852 	bl	8005770 <HAL_PCD_EP_Open>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6d0:	7bfb      	ldrb	r3, [r7, #15]
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f000 f91c 	bl	800f910 <USBD_Get_USB_Status>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3710      	adds	r7, #16
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b084      	sub	sp, #16
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f700:	78fa      	ldrb	r2, [r7, #3]
 800f702:	4611      	mov	r1, r2
 800f704:	4618      	mov	r0, r3
 800f706:	f7f6 f89b 	bl	8005840 <HAL_PCD_EP_Close>
 800f70a:	4603      	mov	r3, r0
 800f70c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f70e:	7bfb      	ldrb	r3, [r7, #15]
 800f710:	4618      	mov	r0, r3
 800f712:	f000 f8fd 	bl	800f910 <USBD_Get_USB_Status>
 800f716:	4603      	mov	r3, r0
 800f718:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f71a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3710      	adds	r7, #16
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}

0800f724 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b084      	sub	sp, #16
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	460b      	mov	r3, r1
 800f72e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f730:	2300      	movs	r3, #0
 800f732:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f734:	2300      	movs	r3, #0
 800f736:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f73e:	78fa      	ldrb	r2, [r7, #3]
 800f740:	4611      	mov	r1, r2
 800f742:	4618      	mov	r0, r3
 800f744:	f7f6 f953 	bl	80059ee <HAL_PCD_EP_SetStall>
 800f748:	4603      	mov	r3, r0
 800f74a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f74c:	7bfb      	ldrb	r3, [r7, #15]
 800f74e:	4618      	mov	r0, r3
 800f750:	f000 f8de 	bl	800f910 <USBD_Get_USB_Status>
 800f754:	4603      	mov	r3, r0
 800f756:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f758:	7bbb      	ldrb	r3, [r7, #14]
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	3710      	adds	r7, #16
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}

0800f762 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f762:	b580      	push	{r7, lr}
 800f764:	b084      	sub	sp, #16
 800f766:	af00      	add	r7, sp, #0
 800f768:	6078      	str	r0, [r7, #4]
 800f76a:	460b      	mov	r3, r1
 800f76c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f76e:	2300      	movs	r3, #0
 800f770:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f772:	2300      	movs	r3, #0
 800f774:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f77c:	78fa      	ldrb	r2, [r7, #3]
 800f77e:	4611      	mov	r1, r2
 800f780:	4618      	mov	r0, r3
 800f782:	f7f6 f997 	bl	8005ab4 <HAL_PCD_EP_ClrStall>
 800f786:	4603      	mov	r3, r0
 800f788:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f78a:	7bfb      	ldrb	r3, [r7, #15]
 800f78c:	4618      	mov	r0, r3
 800f78e:	f000 f8bf 	bl	800f910 <USBD_Get_USB_Status>
 800f792:	4603      	mov	r3, r0
 800f794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f796:	7bbb      	ldrb	r3, [r7, #14]
}
 800f798:	4618      	mov	r0, r3
 800f79a:	3710      	adds	r7, #16
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}

0800f7a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b085      	sub	sp, #20
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	460b      	mov	r3, r1
 800f7aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f7b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f7b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	da0b      	bge.n	800f7d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f7bc:	78fb      	ldrb	r3, [r7, #3]
 800f7be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f7c2:	68f9      	ldr	r1, [r7, #12]
 800f7c4:	4613      	mov	r3, r2
 800f7c6:	00db      	lsls	r3, r3, #3
 800f7c8:	4413      	add	r3, r2
 800f7ca:	009b      	lsls	r3, r3, #2
 800f7cc:	440b      	add	r3, r1
 800f7ce:	3316      	adds	r3, #22
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	e00b      	b.n	800f7ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f7d4:	78fb      	ldrb	r3, [r7, #3]
 800f7d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f7da:	68f9      	ldr	r1, [r7, #12]
 800f7dc:	4613      	mov	r3, r2
 800f7de:	00db      	lsls	r3, r3, #3
 800f7e0:	4413      	add	r3, r2
 800f7e2:	009b      	lsls	r3, r3, #2
 800f7e4:	440b      	add	r3, r1
 800f7e6:	f203 2356 	addw	r3, r3, #598	; 0x256
 800f7ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3714      	adds	r7, #20
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr

0800f7f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b084      	sub	sp, #16
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
 800f800:	460b      	mov	r3, r1
 800f802:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f804:	2300      	movs	r3, #0
 800f806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f808:	2300      	movs	r3, #0
 800f80a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f812:	78fa      	ldrb	r2, [r7, #3]
 800f814:	4611      	mov	r1, r2
 800f816:	4618      	mov	r0, r3
 800f818:	f7f5 ff86 	bl	8005728 <HAL_PCD_SetAddress>
 800f81c:	4603      	mov	r3, r0
 800f81e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f820:	7bfb      	ldrb	r3, [r7, #15]
 800f822:	4618      	mov	r0, r3
 800f824:	f000 f874 	bl	800f910 <USBD_Get_USB_Status>
 800f828:	4603      	mov	r3, r0
 800f82a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f82c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f82e:	4618      	mov	r0, r3
 800f830:	3710      	adds	r7, #16
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}

0800f836 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f836:	b580      	push	{r7, lr}
 800f838:	b086      	sub	sp, #24
 800f83a:	af00      	add	r7, sp, #0
 800f83c:	60f8      	str	r0, [r7, #12]
 800f83e:	607a      	str	r2, [r7, #4]
 800f840:	603b      	str	r3, [r7, #0]
 800f842:	460b      	mov	r3, r1
 800f844:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f846:	2300      	movs	r3, #0
 800f848:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f84a:	2300      	movs	r3, #0
 800f84c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f854:	7af9      	ldrb	r1, [r7, #11]
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	687a      	ldr	r2, [r7, #4]
 800f85a:	f7f6 f88e 	bl	800597a <HAL_PCD_EP_Transmit>
 800f85e:	4603      	mov	r3, r0
 800f860:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f862:	7dfb      	ldrb	r3, [r7, #23]
 800f864:	4618      	mov	r0, r3
 800f866:	f000 f853 	bl	800f910 <USBD_Get_USB_Status>
 800f86a:	4603      	mov	r3, r0
 800f86c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f86e:	7dbb      	ldrb	r3, [r7, #22]
}
 800f870:	4618      	mov	r0, r3
 800f872:	3718      	adds	r7, #24
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}

0800f878 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b086      	sub	sp, #24
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	60f8      	str	r0, [r7, #12]
 800f880:	607a      	str	r2, [r7, #4]
 800f882:	603b      	str	r3, [r7, #0]
 800f884:	460b      	mov	r3, r1
 800f886:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f888:	2300      	movs	r3, #0
 800f88a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f88c:	2300      	movs	r3, #0
 800f88e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f896:	7af9      	ldrb	r1, [r7, #11]
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	f7f6 f81a 	bl	80058d4 <HAL_PCD_EP_Receive>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8a4:	7dfb      	ldrb	r3, [r7, #23]
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f000 f832 	bl	800f910 <USBD_Get_USB_Status>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f8b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3718      	adds	r7, #24
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}

0800f8ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8ba:	b580      	push	{r7, lr}
 800f8bc:	b082      	sub	sp, #8
 800f8be:	af00      	add	r7, sp, #0
 800f8c0:	6078      	str	r0, [r7, #4]
 800f8c2:	460b      	mov	r3, r1
 800f8c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f8cc:	78fa      	ldrb	r2, [r7, #3]
 800f8ce:	4611      	mov	r1, r2
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7f6 f83a 	bl	800594a <HAL_PCD_EP_GetRxCount>
 800f8d6:	4603      	mov	r3, r0
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3708      	adds	r7, #8
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}

0800f8e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b083      	sub	sp, #12
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f8e8:	4b03      	ldr	r3, [pc, #12]	; (800f8f8 <USBD_static_malloc+0x18>)
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	370c      	adds	r7, #12
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	20008d6c 	.word	0x20008d6c

0800f8fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]

}
 800f904:	bf00      	nop
 800f906:	370c      	adds	r7, #12
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr

0800f910 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f910:	b480      	push	{r7}
 800f912:	b085      	sub	sp, #20
 800f914:	af00      	add	r7, sp, #0
 800f916:	4603      	mov	r3, r0
 800f918:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f91a:	2300      	movs	r3, #0
 800f91c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f91e:	79fb      	ldrb	r3, [r7, #7]
 800f920:	2b03      	cmp	r3, #3
 800f922:	d817      	bhi.n	800f954 <USBD_Get_USB_Status+0x44>
 800f924:	a201      	add	r2, pc, #4	; (adr r2, 800f92c <USBD_Get_USB_Status+0x1c>)
 800f926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f92a:	bf00      	nop
 800f92c:	0800f93d 	.word	0x0800f93d
 800f930:	0800f943 	.word	0x0800f943
 800f934:	0800f949 	.word	0x0800f949
 800f938:	0800f94f 	.word	0x0800f94f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f93c:	2300      	movs	r3, #0
 800f93e:	73fb      	strb	r3, [r7, #15]
    break;
 800f940:	e00b      	b.n	800f95a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f942:	2303      	movs	r3, #3
 800f944:	73fb      	strb	r3, [r7, #15]
    break;
 800f946:	e008      	b.n	800f95a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f948:	2301      	movs	r3, #1
 800f94a:	73fb      	strb	r3, [r7, #15]
    break;
 800f94c:	e005      	b.n	800f95a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f94e:	2303      	movs	r3, #3
 800f950:	73fb      	strb	r3, [r7, #15]
    break;
 800f952:	e002      	b.n	800f95a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f954:	2303      	movs	r3, #3
 800f956:	73fb      	strb	r3, [r7, #15]
    break;
 800f958:	bf00      	nop
  }
  return usb_status;
 800f95a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	3714      	adds	r7, #20
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <__cvt>:
 800f968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f96c:	ec55 4b10 	vmov	r4, r5, d0
 800f970:	2d00      	cmp	r5, #0
 800f972:	460e      	mov	r6, r1
 800f974:	4619      	mov	r1, r3
 800f976:	462b      	mov	r3, r5
 800f978:	bfbb      	ittet	lt
 800f97a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f97e:	461d      	movlt	r5, r3
 800f980:	2300      	movge	r3, #0
 800f982:	232d      	movlt	r3, #45	; 0x2d
 800f984:	700b      	strb	r3, [r1, #0]
 800f986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f988:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f98c:	4691      	mov	r9, r2
 800f98e:	f023 0820 	bic.w	r8, r3, #32
 800f992:	bfbc      	itt	lt
 800f994:	4622      	movlt	r2, r4
 800f996:	4614      	movlt	r4, r2
 800f998:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f99c:	d005      	beq.n	800f9aa <__cvt+0x42>
 800f99e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f9a2:	d100      	bne.n	800f9a6 <__cvt+0x3e>
 800f9a4:	3601      	adds	r6, #1
 800f9a6:	2102      	movs	r1, #2
 800f9a8:	e000      	b.n	800f9ac <__cvt+0x44>
 800f9aa:	2103      	movs	r1, #3
 800f9ac:	ab03      	add	r3, sp, #12
 800f9ae:	9301      	str	r3, [sp, #4]
 800f9b0:	ab02      	add	r3, sp, #8
 800f9b2:	9300      	str	r3, [sp, #0]
 800f9b4:	ec45 4b10 	vmov	d0, r4, r5
 800f9b8:	4653      	mov	r3, sl
 800f9ba:	4632      	mov	r2, r6
 800f9bc:	f001 f830 	bl	8010a20 <_dtoa_r>
 800f9c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f9c4:	4607      	mov	r7, r0
 800f9c6:	d102      	bne.n	800f9ce <__cvt+0x66>
 800f9c8:	f019 0f01 	tst.w	r9, #1
 800f9cc:	d022      	beq.n	800fa14 <__cvt+0xac>
 800f9ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f9d2:	eb07 0906 	add.w	r9, r7, r6
 800f9d6:	d110      	bne.n	800f9fa <__cvt+0x92>
 800f9d8:	783b      	ldrb	r3, [r7, #0]
 800f9da:	2b30      	cmp	r3, #48	; 0x30
 800f9dc:	d10a      	bne.n	800f9f4 <__cvt+0x8c>
 800f9de:	2200      	movs	r2, #0
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	4629      	mov	r1, r5
 800f9e6:	f7f1 f87f 	bl	8000ae8 <__aeabi_dcmpeq>
 800f9ea:	b918      	cbnz	r0, 800f9f4 <__cvt+0x8c>
 800f9ec:	f1c6 0601 	rsb	r6, r6, #1
 800f9f0:	f8ca 6000 	str.w	r6, [sl]
 800f9f4:	f8da 3000 	ldr.w	r3, [sl]
 800f9f8:	4499      	add	r9, r3
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	4620      	mov	r0, r4
 800fa00:	4629      	mov	r1, r5
 800fa02:	f7f1 f871 	bl	8000ae8 <__aeabi_dcmpeq>
 800fa06:	b108      	cbz	r0, 800fa0c <__cvt+0xa4>
 800fa08:	f8cd 900c 	str.w	r9, [sp, #12]
 800fa0c:	2230      	movs	r2, #48	; 0x30
 800fa0e:	9b03      	ldr	r3, [sp, #12]
 800fa10:	454b      	cmp	r3, r9
 800fa12:	d307      	bcc.n	800fa24 <__cvt+0xbc>
 800fa14:	9b03      	ldr	r3, [sp, #12]
 800fa16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fa18:	1bdb      	subs	r3, r3, r7
 800fa1a:	4638      	mov	r0, r7
 800fa1c:	6013      	str	r3, [r2, #0]
 800fa1e:	b004      	add	sp, #16
 800fa20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa24:	1c59      	adds	r1, r3, #1
 800fa26:	9103      	str	r1, [sp, #12]
 800fa28:	701a      	strb	r2, [r3, #0]
 800fa2a:	e7f0      	b.n	800fa0e <__cvt+0xa6>

0800fa2c <__exponent>:
 800fa2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa2e:	4603      	mov	r3, r0
 800fa30:	2900      	cmp	r1, #0
 800fa32:	bfb8      	it	lt
 800fa34:	4249      	neglt	r1, r1
 800fa36:	f803 2b02 	strb.w	r2, [r3], #2
 800fa3a:	bfb4      	ite	lt
 800fa3c:	222d      	movlt	r2, #45	; 0x2d
 800fa3e:	222b      	movge	r2, #43	; 0x2b
 800fa40:	2909      	cmp	r1, #9
 800fa42:	7042      	strb	r2, [r0, #1]
 800fa44:	dd2a      	ble.n	800fa9c <__exponent+0x70>
 800fa46:	f10d 0207 	add.w	r2, sp, #7
 800fa4a:	4617      	mov	r7, r2
 800fa4c:	260a      	movs	r6, #10
 800fa4e:	4694      	mov	ip, r2
 800fa50:	fb91 f5f6 	sdiv	r5, r1, r6
 800fa54:	fb06 1415 	mls	r4, r6, r5, r1
 800fa58:	3430      	adds	r4, #48	; 0x30
 800fa5a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800fa5e:	460c      	mov	r4, r1
 800fa60:	2c63      	cmp	r4, #99	; 0x63
 800fa62:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800fa66:	4629      	mov	r1, r5
 800fa68:	dcf1      	bgt.n	800fa4e <__exponent+0x22>
 800fa6a:	3130      	adds	r1, #48	; 0x30
 800fa6c:	f1ac 0402 	sub.w	r4, ip, #2
 800fa70:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fa74:	1c41      	adds	r1, r0, #1
 800fa76:	4622      	mov	r2, r4
 800fa78:	42ba      	cmp	r2, r7
 800fa7a:	d30a      	bcc.n	800fa92 <__exponent+0x66>
 800fa7c:	f10d 0209 	add.w	r2, sp, #9
 800fa80:	eba2 020c 	sub.w	r2, r2, ip
 800fa84:	42bc      	cmp	r4, r7
 800fa86:	bf88      	it	hi
 800fa88:	2200      	movhi	r2, #0
 800fa8a:	4413      	add	r3, r2
 800fa8c:	1a18      	subs	r0, r3, r0
 800fa8e:	b003      	add	sp, #12
 800fa90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa92:	f812 5b01 	ldrb.w	r5, [r2], #1
 800fa96:	f801 5f01 	strb.w	r5, [r1, #1]!
 800fa9a:	e7ed      	b.n	800fa78 <__exponent+0x4c>
 800fa9c:	2330      	movs	r3, #48	; 0x30
 800fa9e:	3130      	adds	r1, #48	; 0x30
 800faa0:	7083      	strb	r3, [r0, #2]
 800faa2:	70c1      	strb	r1, [r0, #3]
 800faa4:	1d03      	adds	r3, r0, #4
 800faa6:	e7f1      	b.n	800fa8c <__exponent+0x60>

0800faa8 <_printf_float>:
 800faa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faac:	ed2d 8b02 	vpush	{d8}
 800fab0:	b08d      	sub	sp, #52	; 0x34
 800fab2:	460c      	mov	r4, r1
 800fab4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fab8:	4616      	mov	r6, r2
 800faba:	461f      	mov	r7, r3
 800fabc:	4605      	mov	r5, r0
 800fabe:	f000 fe4b 	bl	8010758 <_localeconv_r>
 800fac2:	f8d0 a000 	ldr.w	sl, [r0]
 800fac6:	4650      	mov	r0, sl
 800fac8:	f7f0 fbe2 	bl	8000290 <strlen>
 800facc:	2300      	movs	r3, #0
 800face:	930a      	str	r3, [sp, #40]	; 0x28
 800fad0:	6823      	ldr	r3, [r4, #0]
 800fad2:	9305      	str	r3, [sp, #20]
 800fad4:	f8d8 3000 	ldr.w	r3, [r8]
 800fad8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fadc:	3307      	adds	r3, #7
 800fade:	f023 0307 	bic.w	r3, r3, #7
 800fae2:	f103 0208 	add.w	r2, r3, #8
 800fae6:	f8c8 2000 	str.w	r2, [r8]
 800faea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800faee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800faf2:	9307      	str	r3, [sp, #28]
 800faf4:	f8cd 8018 	str.w	r8, [sp, #24]
 800faf8:	ee08 0a10 	vmov	s16, r0
 800fafc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800fb00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fb04:	4b9e      	ldr	r3, [pc, #632]	; (800fd80 <_printf_float+0x2d8>)
 800fb06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb0a:	f7f1 f81f 	bl	8000b4c <__aeabi_dcmpun>
 800fb0e:	bb88      	cbnz	r0, 800fb74 <_printf_float+0xcc>
 800fb10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fb14:	4b9a      	ldr	r3, [pc, #616]	; (800fd80 <_printf_float+0x2d8>)
 800fb16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb1a:	f7f0 fff9 	bl	8000b10 <__aeabi_dcmple>
 800fb1e:	bb48      	cbnz	r0, 800fb74 <_printf_float+0xcc>
 800fb20:	2200      	movs	r2, #0
 800fb22:	2300      	movs	r3, #0
 800fb24:	4640      	mov	r0, r8
 800fb26:	4649      	mov	r1, r9
 800fb28:	f7f0 ffe8 	bl	8000afc <__aeabi_dcmplt>
 800fb2c:	b110      	cbz	r0, 800fb34 <_printf_float+0x8c>
 800fb2e:	232d      	movs	r3, #45	; 0x2d
 800fb30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb34:	4a93      	ldr	r2, [pc, #588]	; (800fd84 <_printf_float+0x2dc>)
 800fb36:	4b94      	ldr	r3, [pc, #592]	; (800fd88 <_printf_float+0x2e0>)
 800fb38:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fb3c:	bf94      	ite	ls
 800fb3e:	4690      	movls	r8, r2
 800fb40:	4698      	movhi	r8, r3
 800fb42:	2303      	movs	r3, #3
 800fb44:	6123      	str	r3, [r4, #16]
 800fb46:	9b05      	ldr	r3, [sp, #20]
 800fb48:	f023 0304 	bic.w	r3, r3, #4
 800fb4c:	6023      	str	r3, [r4, #0]
 800fb4e:	f04f 0900 	mov.w	r9, #0
 800fb52:	9700      	str	r7, [sp, #0]
 800fb54:	4633      	mov	r3, r6
 800fb56:	aa0b      	add	r2, sp, #44	; 0x2c
 800fb58:	4621      	mov	r1, r4
 800fb5a:	4628      	mov	r0, r5
 800fb5c:	f000 f9da 	bl	800ff14 <_printf_common>
 800fb60:	3001      	adds	r0, #1
 800fb62:	f040 8090 	bne.w	800fc86 <_printf_float+0x1de>
 800fb66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb6a:	b00d      	add	sp, #52	; 0x34
 800fb6c:	ecbd 8b02 	vpop	{d8}
 800fb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb74:	4642      	mov	r2, r8
 800fb76:	464b      	mov	r3, r9
 800fb78:	4640      	mov	r0, r8
 800fb7a:	4649      	mov	r1, r9
 800fb7c:	f7f0 ffe6 	bl	8000b4c <__aeabi_dcmpun>
 800fb80:	b140      	cbz	r0, 800fb94 <_printf_float+0xec>
 800fb82:	464b      	mov	r3, r9
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	bfbc      	itt	lt
 800fb88:	232d      	movlt	r3, #45	; 0x2d
 800fb8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fb8e:	4a7f      	ldr	r2, [pc, #508]	; (800fd8c <_printf_float+0x2e4>)
 800fb90:	4b7f      	ldr	r3, [pc, #508]	; (800fd90 <_printf_float+0x2e8>)
 800fb92:	e7d1      	b.n	800fb38 <_printf_float+0x90>
 800fb94:	6863      	ldr	r3, [r4, #4]
 800fb96:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fb9a:	9206      	str	r2, [sp, #24]
 800fb9c:	1c5a      	adds	r2, r3, #1
 800fb9e:	d13f      	bne.n	800fc20 <_printf_float+0x178>
 800fba0:	2306      	movs	r3, #6
 800fba2:	6063      	str	r3, [r4, #4]
 800fba4:	9b05      	ldr	r3, [sp, #20]
 800fba6:	6861      	ldr	r1, [r4, #4]
 800fba8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fbac:	2300      	movs	r3, #0
 800fbae:	9303      	str	r3, [sp, #12]
 800fbb0:	ab0a      	add	r3, sp, #40	; 0x28
 800fbb2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fbb6:	ab09      	add	r3, sp, #36	; 0x24
 800fbb8:	ec49 8b10 	vmov	d0, r8, r9
 800fbbc:	9300      	str	r3, [sp, #0]
 800fbbe:	6022      	str	r2, [r4, #0]
 800fbc0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fbc4:	4628      	mov	r0, r5
 800fbc6:	f7ff fecf 	bl	800f968 <__cvt>
 800fbca:	9b06      	ldr	r3, [sp, #24]
 800fbcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fbce:	2b47      	cmp	r3, #71	; 0x47
 800fbd0:	4680      	mov	r8, r0
 800fbd2:	d108      	bne.n	800fbe6 <_printf_float+0x13e>
 800fbd4:	1cc8      	adds	r0, r1, #3
 800fbd6:	db02      	blt.n	800fbde <_printf_float+0x136>
 800fbd8:	6863      	ldr	r3, [r4, #4]
 800fbda:	4299      	cmp	r1, r3
 800fbdc:	dd41      	ble.n	800fc62 <_printf_float+0x1ba>
 800fbde:	f1ab 0302 	sub.w	r3, fp, #2
 800fbe2:	fa5f fb83 	uxtb.w	fp, r3
 800fbe6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fbea:	d820      	bhi.n	800fc2e <_printf_float+0x186>
 800fbec:	3901      	subs	r1, #1
 800fbee:	465a      	mov	r2, fp
 800fbf0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fbf4:	9109      	str	r1, [sp, #36]	; 0x24
 800fbf6:	f7ff ff19 	bl	800fa2c <__exponent>
 800fbfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fbfc:	1813      	adds	r3, r2, r0
 800fbfe:	2a01      	cmp	r2, #1
 800fc00:	4681      	mov	r9, r0
 800fc02:	6123      	str	r3, [r4, #16]
 800fc04:	dc02      	bgt.n	800fc0c <_printf_float+0x164>
 800fc06:	6822      	ldr	r2, [r4, #0]
 800fc08:	07d2      	lsls	r2, r2, #31
 800fc0a:	d501      	bpl.n	800fc10 <_printf_float+0x168>
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	6123      	str	r3, [r4, #16]
 800fc10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d09c      	beq.n	800fb52 <_printf_float+0xaa>
 800fc18:	232d      	movs	r3, #45	; 0x2d
 800fc1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc1e:	e798      	b.n	800fb52 <_printf_float+0xaa>
 800fc20:	9a06      	ldr	r2, [sp, #24]
 800fc22:	2a47      	cmp	r2, #71	; 0x47
 800fc24:	d1be      	bne.n	800fba4 <_printf_float+0xfc>
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d1bc      	bne.n	800fba4 <_printf_float+0xfc>
 800fc2a:	2301      	movs	r3, #1
 800fc2c:	e7b9      	b.n	800fba2 <_printf_float+0xfa>
 800fc2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fc32:	d118      	bne.n	800fc66 <_printf_float+0x1be>
 800fc34:	2900      	cmp	r1, #0
 800fc36:	6863      	ldr	r3, [r4, #4]
 800fc38:	dd0b      	ble.n	800fc52 <_printf_float+0x1aa>
 800fc3a:	6121      	str	r1, [r4, #16]
 800fc3c:	b913      	cbnz	r3, 800fc44 <_printf_float+0x19c>
 800fc3e:	6822      	ldr	r2, [r4, #0]
 800fc40:	07d0      	lsls	r0, r2, #31
 800fc42:	d502      	bpl.n	800fc4a <_printf_float+0x1a2>
 800fc44:	3301      	adds	r3, #1
 800fc46:	440b      	add	r3, r1
 800fc48:	6123      	str	r3, [r4, #16]
 800fc4a:	65a1      	str	r1, [r4, #88]	; 0x58
 800fc4c:	f04f 0900 	mov.w	r9, #0
 800fc50:	e7de      	b.n	800fc10 <_printf_float+0x168>
 800fc52:	b913      	cbnz	r3, 800fc5a <_printf_float+0x1b2>
 800fc54:	6822      	ldr	r2, [r4, #0]
 800fc56:	07d2      	lsls	r2, r2, #31
 800fc58:	d501      	bpl.n	800fc5e <_printf_float+0x1b6>
 800fc5a:	3302      	adds	r3, #2
 800fc5c:	e7f4      	b.n	800fc48 <_printf_float+0x1a0>
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e7f2      	b.n	800fc48 <_printf_float+0x1a0>
 800fc62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fc66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc68:	4299      	cmp	r1, r3
 800fc6a:	db05      	blt.n	800fc78 <_printf_float+0x1d0>
 800fc6c:	6823      	ldr	r3, [r4, #0]
 800fc6e:	6121      	str	r1, [r4, #16]
 800fc70:	07d8      	lsls	r0, r3, #31
 800fc72:	d5ea      	bpl.n	800fc4a <_printf_float+0x1a2>
 800fc74:	1c4b      	adds	r3, r1, #1
 800fc76:	e7e7      	b.n	800fc48 <_printf_float+0x1a0>
 800fc78:	2900      	cmp	r1, #0
 800fc7a:	bfd4      	ite	le
 800fc7c:	f1c1 0202 	rsble	r2, r1, #2
 800fc80:	2201      	movgt	r2, #1
 800fc82:	4413      	add	r3, r2
 800fc84:	e7e0      	b.n	800fc48 <_printf_float+0x1a0>
 800fc86:	6823      	ldr	r3, [r4, #0]
 800fc88:	055a      	lsls	r2, r3, #21
 800fc8a:	d407      	bmi.n	800fc9c <_printf_float+0x1f4>
 800fc8c:	6923      	ldr	r3, [r4, #16]
 800fc8e:	4642      	mov	r2, r8
 800fc90:	4631      	mov	r1, r6
 800fc92:	4628      	mov	r0, r5
 800fc94:	47b8      	blx	r7
 800fc96:	3001      	adds	r0, #1
 800fc98:	d12c      	bne.n	800fcf4 <_printf_float+0x24c>
 800fc9a:	e764      	b.n	800fb66 <_printf_float+0xbe>
 800fc9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fca0:	f240 80e0 	bls.w	800fe64 <_printf_float+0x3bc>
 800fca4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fca8:	2200      	movs	r2, #0
 800fcaa:	2300      	movs	r3, #0
 800fcac:	f7f0 ff1c 	bl	8000ae8 <__aeabi_dcmpeq>
 800fcb0:	2800      	cmp	r0, #0
 800fcb2:	d034      	beq.n	800fd1e <_printf_float+0x276>
 800fcb4:	4a37      	ldr	r2, [pc, #220]	; (800fd94 <_printf_float+0x2ec>)
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	4631      	mov	r1, r6
 800fcba:	4628      	mov	r0, r5
 800fcbc:	47b8      	blx	r7
 800fcbe:	3001      	adds	r0, #1
 800fcc0:	f43f af51 	beq.w	800fb66 <_printf_float+0xbe>
 800fcc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	db02      	blt.n	800fcd2 <_printf_float+0x22a>
 800fccc:	6823      	ldr	r3, [r4, #0]
 800fcce:	07d8      	lsls	r0, r3, #31
 800fcd0:	d510      	bpl.n	800fcf4 <_printf_float+0x24c>
 800fcd2:	ee18 3a10 	vmov	r3, s16
 800fcd6:	4652      	mov	r2, sl
 800fcd8:	4631      	mov	r1, r6
 800fcda:	4628      	mov	r0, r5
 800fcdc:	47b8      	blx	r7
 800fcde:	3001      	adds	r0, #1
 800fce0:	f43f af41 	beq.w	800fb66 <_printf_float+0xbe>
 800fce4:	f04f 0800 	mov.w	r8, #0
 800fce8:	f104 091a 	add.w	r9, r4, #26
 800fcec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcee:	3b01      	subs	r3, #1
 800fcf0:	4543      	cmp	r3, r8
 800fcf2:	dc09      	bgt.n	800fd08 <_printf_float+0x260>
 800fcf4:	6823      	ldr	r3, [r4, #0]
 800fcf6:	079b      	lsls	r3, r3, #30
 800fcf8:	f100 8107 	bmi.w	800ff0a <_printf_float+0x462>
 800fcfc:	68e0      	ldr	r0, [r4, #12]
 800fcfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd00:	4298      	cmp	r0, r3
 800fd02:	bfb8      	it	lt
 800fd04:	4618      	movlt	r0, r3
 800fd06:	e730      	b.n	800fb6a <_printf_float+0xc2>
 800fd08:	2301      	movs	r3, #1
 800fd0a:	464a      	mov	r2, r9
 800fd0c:	4631      	mov	r1, r6
 800fd0e:	4628      	mov	r0, r5
 800fd10:	47b8      	blx	r7
 800fd12:	3001      	adds	r0, #1
 800fd14:	f43f af27 	beq.w	800fb66 <_printf_float+0xbe>
 800fd18:	f108 0801 	add.w	r8, r8, #1
 800fd1c:	e7e6      	b.n	800fcec <_printf_float+0x244>
 800fd1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	dc39      	bgt.n	800fd98 <_printf_float+0x2f0>
 800fd24:	4a1b      	ldr	r2, [pc, #108]	; (800fd94 <_printf_float+0x2ec>)
 800fd26:	2301      	movs	r3, #1
 800fd28:	4631      	mov	r1, r6
 800fd2a:	4628      	mov	r0, r5
 800fd2c:	47b8      	blx	r7
 800fd2e:	3001      	adds	r0, #1
 800fd30:	f43f af19 	beq.w	800fb66 <_printf_float+0xbe>
 800fd34:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fd38:	4313      	orrs	r3, r2
 800fd3a:	d102      	bne.n	800fd42 <_printf_float+0x29a>
 800fd3c:	6823      	ldr	r3, [r4, #0]
 800fd3e:	07d9      	lsls	r1, r3, #31
 800fd40:	d5d8      	bpl.n	800fcf4 <_printf_float+0x24c>
 800fd42:	ee18 3a10 	vmov	r3, s16
 800fd46:	4652      	mov	r2, sl
 800fd48:	4631      	mov	r1, r6
 800fd4a:	4628      	mov	r0, r5
 800fd4c:	47b8      	blx	r7
 800fd4e:	3001      	adds	r0, #1
 800fd50:	f43f af09 	beq.w	800fb66 <_printf_float+0xbe>
 800fd54:	f04f 0900 	mov.w	r9, #0
 800fd58:	f104 0a1a 	add.w	sl, r4, #26
 800fd5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd5e:	425b      	negs	r3, r3
 800fd60:	454b      	cmp	r3, r9
 800fd62:	dc01      	bgt.n	800fd68 <_printf_float+0x2c0>
 800fd64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd66:	e792      	b.n	800fc8e <_printf_float+0x1e6>
 800fd68:	2301      	movs	r3, #1
 800fd6a:	4652      	mov	r2, sl
 800fd6c:	4631      	mov	r1, r6
 800fd6e:	4628      	mov	r0, r5
 800fd70:	47b8      	blx	r7
 800fd72:	3001      	adds	r0, #1
 800fd74:	f43f aef7 	beq.w	800fb66 <_printf_float+0xbe>
 800fd78:	f109 0901 	add.w	r9, r9, #1
 800fd7c:	e7ee      	b.n	800fd5c <_printf_float+0x2b4>
 800fd7e:	bf00      	nop
 800fd80:	7fefffff 	.word	0x7fefffff
 800fd84:	080133d9 	.word	0x080133d9
 800fd88:	080133dd 	.word	0x080133dd
 800fd8c:	080133e1 	.word	0x080133e1
 800fd90:	080133e5 	.word	0x080133e5
 800fd94:	080133e9 	.word	0x080133e9
 800fd98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	bfa8      	it	ge
 800fda0:	461a      	movge	r2, r3
 800fda2:	2a00      	cmp	r2, #0
 800fda4:	4691      	mov	r9, r2
 800fda6:	dc37      	bgt.n	800fe18 <_printf_float+0x370>
 800fda8:	f04f 0b00 	mov.w	fp, #0
 800fdac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fdb0:	f104 021a 	add.w	r2, r4, #26
 800fdb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fdb6:	9305      	str	r3, [sp, #20]
 800fdb8:	eba3 0309 	sub.w	r3, r3, r9
 800fdbc:	455b      	cmp	r3, fp
 800fdbe:	dc33      	bgt.n	800fe28 <_printf_float+0x380>
 800fdc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	db3b      	blt.n	800fe40 <_printf_float+0x398>
 800fdc8:	6823      	ldr	r3, [r4, #0]
 800fdca:	07da      	lsls	r2, r3, #31
 800fdcc:	d438      	bmi.n	800fe40 <_printf_float+0x398>
 800fdce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fdd2:	eba2 0903 	sub.w	r9, r2, r3
 800fdd6:	9b05      	ldr	r3, [sp, #20]
 800fdd8:	1ad2      	subs	r2, r2, r3
 800fdda:	4591      	cmp	r9, r2
 800fddc:	bfa8      	it	ge
 800fdde:	4691      	movge	r9, r2
 800fde0:	f1b9 0f00 	cmp.w	r9, #0
 800fde4:	dc35      	bgt.n	800fe52 <_printf_float+0x3aa>
 800fde6:	f04f 0800 	mov.w	r8, #0
 800fdea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fdee:	f104 0a1a 	add.w	sl, r4, #26
 800fdf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fdf6:	1a9b      	subs	r3, r3, r2
 800fdf8:	eba3 0309 	sub.w	r3, r3, r9
 800fdfc:	4543      	cmp	r3, r8
 800fdfe:	f77f af79 	ble.w	800fcf4 <_printf_float+0x24c>
 800fe02:	2301      	movs	r3, #1
 800fe04:	4652      	mov	r2, sl
 800fe06:	4631      	mov	r1, r6
 800fe08:	4628      	mov	r0, r5
 800fe0a:	47b8      	blx	r7
 800fe0c:	3001      	adds	r0, #1
 800fe0e:	f43f aeaa 	beq.w	800fb66 <_printf_float+0xbe>
 800fe12:	f108 0801 	add.w	r8, r8, #1
 800fe16:	e7ec      	b.n	800fdf2 <_printf_float+0x34a>
 800fe18:	4613      	mov	r3, r2
 800fe1a:	4631      	mov	r1, r6
 800fe1c:	4642      	mov	r2, r8
 800fe1e:	4628      	mov	r0, r5
 800fe20:	47b8      	blx	r7
 800fe22:	3001      	adds	r0, #1
 800fe24:	d1c0      	bne.n	800fda8 <_printf_float+0x300>
 800fe26:	e69e      	b.n	800fb66 <_printf_float+0xbe>
 800fe28:	2301      	movs	r3, #1
 800fe2a:	4631      	mov	r1, r6
 800fe2c:	4628      	mov	r0, r5
 800fe2e:	9205      	str	r2, [sp, #20]
 800fe30:	47b8      	blx	r7
 800fe32:	3001      	adds	r0, #1
 800fe34:	f43f ae97 	beq.w	800fb66 <_printf_float+0xbe>
 800fe38:	9a05      	ldr	r2, [sp, #20]
 800fe3a:	f10b 0b01 	add.w	fp, fp, #1
 800fe3e:	e7b9      	b.n	800fdb4 <_printf_float+0x30c>
 800fe40:	ee18 3a10 	vmov	r3, s16
 800fe44:	4652      	mov	r2, sl
 800fe46:	4631      	mov	r1, r6
 800fe48:	4628      	mov	r0, r5
 800fe4a:	47b8      	blx	r7
 800fe4c:	3001      	adds	r0, #1
 800fe4e:	d1be      	bne.n	800fdce <_printf_float+0x326>
 800fe50:	e689      	b.n	800fb66 <_printf_float+0xbe>
 800fe52:	9a05      	ldr	r2, [sp, #20]
 800fe54:	464b      	mov	r3, r9
 800fe56:	4442      	add	r2, r8
 800fe58:	4631      	mov	r1, r6
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	47b8      	blx	r7
 800fe5e:	3001      	adds	r0, #1
 800fe60:	d1c1      	bne.n	800fde6 <_printf_float+0x33e>
 800fe62:	e680      	b.n	800fb66 <_printf_float+0xbe>
 800fe64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe66:	2a01      	cmp	r2, #1
 800fe68:	dc01      	bgt.n	800fe6e <_printf_float+0x3c6>
 800fe6a:	07db      	lsls	r3, r3, #31
 800fe6c:	d53a      	bpl.n	800fee4 <_printf_float+0x43c>
 800fe6e:	2301      	movs	r3, #1
 800fe70:	4642      	mov	r2, r8
 800fe72:	4631      	mov	r1, r6
 800fe74:	4628      	mov	r0, r5
 800fe76:	47b8      	blx	r7
 800fe78:	3001      	adds	r0, #1
 800fe7a:	f43f ae74 	beq.w	800fb66 <_printf_float+0xbe>
 800fe7e:	ee18 3a10 	vmov	r3, s16
 800fe82:	4652      	mov	r2, sl
 800fe84:	4631      	mov	r1, r6
 800fe86:	4628      	mov	r0, r5
 800fe88:	47b8      	blx	r7
 800fe8a:	3001      	adds	r0, #1
 800fe8c:	f43f ae6b 	beq.w	800fb66 <_printf_float+0xbe>
 800fe90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fe94:	2200      	movs	r2, #0
 800fe96:	2300      	movs	r3, #0
 800fe98:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800fe9c:	f7f0 fe24 	bl	8000ae8 <__aeabi_dcmpeq>
 800fea0:	b9d8      	cbnz	r0, 800feda <_printf_float+0x432>
 800fea2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800fea6:	f108 0201 	add.w	r2, r8, #1
 800feaa:	4631      	mov	r1, r6
 800feac:	4628      	mov	r0, r5
 800feae:	47b8      	blx	r7
 800feb0:	3001      	adds	r0, #1
 800feb2:	d10e      	bne.n	800fed2 <_printf_float+0x42a>
 800feb4:	e657      	b.n	800fb66 <_printf_float+0xbe>
 800feb6:	2301      	movs	r3, #1
 800feb8:	4652      	mov	r2, sl
 800feba:	4631      	mov	r1, r6
 800febc:	4628      	mov	r0, r5
 800febe:	47b8      	blx	r7
 800fec0:	3001      	adds	r0, #1
 800fec2:	f43f ae50 	beq.w	800fb66 <_printf_float+0xbe>
 800fec6:	f108 0801 	add.w	r8, r8, #1
 800feca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fecc:	3b01      	subs	r3, #1
 800fece:	4543      	cmp	r3, r8
 800fed0:	dcf1      	bgt.n	800feb6 <_printf_float+0x40e>
 800fed2:	464b      	mov	r3, r9
 800fed4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fed8:	e6da      	b.n	800fc90 <_printf_float+0x1e8>
 800feda:	f04f 0800 	mov.w	r8, #0
 800fede:	f104 0a1a 	add.w	sl, r4, #26
 800fee2:	e7f2      	b.n	800feca <_printf_float+0x422>
 800fee4:	2301      	movs	r3, #1
 800fee6:	4642      	mov	r2, r8
 800fee8:	e7df      	b.n	800feaa <_printf_float+0x402>
 800feea:	2301      	movs	r3, #1
 800feec:	464a      	mov	r2, r9
 800feee:	4631      	mov	r1, r6
 800fef0:	4628      	mov	r0, r5
 800fef2:	47b8      	blx	r7
 800fef4:	3001      	adds	r0, #1
 800fef6:	f43f ae36 	beq.w	800fb66 <_printf_float+0xbe>
 800fefa:	f108 0801 	add.w	r8, r8, #1
 800fefe:	68e3      	ldr	r3, [r4, #12]
 800ff00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ff02:	1a5b      	subs	r3, r3, r1
 800ff04:	4543      	cmp	r3, r8
 800ff06:	dcf0      	bgt.n	800feea <_printf_float+0x442>
 800ff08:	e6f8      	b.n	800fcfc <_printf_float+0x254>
 800ff0a:	f04f 0800 	mov.w	r8, #0
 800ff0e:	f104 0919 	add.w	r9, r4, #25
 800ff12:	e7f4      	b.n	800fefe <_printf_float+0x456>

0800ff14 <_printf_common>:
 800ff14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff18:	4616      	mov	r6, r2
 800ff1a:	4699      	mov	r9, r3
 800ff1c:	688a      	ldr	r2, [r1, #8]
 800ff1e:	690b      	ldr	r3, [r1, #16]
 800ff20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ff24:	4293      	cmp	r3, r2
 800ff26:	bfb8      	it	lt
 800ff28:	4613      	movlt	r3, r2
 800ff2a:	6033      	str	r3, [r6, #0]
 800ff2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ff30:	4607      	mov	r7, r0
 800ff32:	460c      	mov	r4, r1
 800ff34:	b10a      	cbz	r2, 800ff3a <_printf_common+0x26>
 800ff36:	3301      	adds	r3, #1
 800ff38:	6033      	str	r3, [r6, #0]
 800ff3a:	6823      	ldr	r3, [r4, #0]
 800ff3c:	0699      	lsls	r1, r3, #26
 800ff3e:	bf42      	ittt	mi
 800ff40:	6833      	ldrmi	r3, [r6, #0]
 800ff42:	3302      	addmi	r3, #2
 800ff44:	6033      	strmi	r3, [r6, #0]
 800ff46:	6825      	ldr	r5, [r4, #0]
 800ff48:	f015 0506 	ands.w	r5, r5, #6
 800ff4c:	d106      	bne.n	800ff5c <_printf_common+0x48>
 800ff4e:	f104 0a19 	add.w	sl, r4, #25
 800ff52:	68e3      	ldr	r3, [r4, #12]
 800ff54:	6832      	ldr	r2, [r6, #0]
 800ff56:	1a9b      	subs	r3, r3, r2
 800ff58:	42ab      	cmp	r3, r5
 800ff5a:	dc26      	bgt.n	800ffaa <_printf_common+0x96>
 800ff5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ff60:	1e13      	subs	r3, r2, #0
 800ff62:	6822      	ldr	r2, [r4, #0]
 800ff64:	bf18      	it	ne
 800ff66:	2301      	movne	r3, #1
 800ff68:	0692      	lsls	r2, r2, #26
 800ff6a:	d42b      	bmi.n	800ffc4 <_printf_common+0xb0>
 800ff6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ff70:	4649      	mov	r1, r9
 800ff72:	4638      	mov	r0, r7
 800ff74:	47c0      	blx	r8
 800ff76:	3001      	adds	r0, #1
 800ff78:	d01e      	beq.n	800ffb8 <_printf_common+0xa4>
 800ff7a:	6823      	ldr	r3, [r4, #0]
 800ff7c:	6922      	ldr	r2, [r4, #16]
 800ff7e:	f003 0306 	and.w	r3, r3, #6
 800ff82:	2b04      	cmp	r3, #4
 800ff84:	bf02      	ittt	eq
 800ff86:	68e5      	ldreq	r5, [r4, #12]
 800ff88:	6833      	ldreq	r3, [r6, #0]
 800ff8a:	1aed      	subeq	r5, r5, r3
 800ff8c:	68a3      	ldr	r3, [r4, #8]
 800ff8e:	bf0c      	ite	eq
 800ff90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff94:	2500      	movne	r5, #0
 800ff96:	4293      	cmp	r3, r2
 800ff98:	bfc4      	itt	gt
 800ff9a:	1a9b      	subgt	r3, r3, r2
 800ff9c:	18ed      	addgt	r5, r5, r3
 800ff9e:	2600      	movs	r6, #0
 800ffa0:	341a      	adds	r4, #26
 800ffa2:	42b5      	cmp	r5, r6
 800ffa4:	d11a      	bne.n	800ffdc <_printf_common+0xc8>
 800ffa6:	2000      	movs	r0, #0
 800ffa8:	e008      	b.n	800ffbc <_printf_common+0xa8>
 800ffaa:	2301      	movs	r3, #1
 800ffac:	4652      	mov	r2, sl
 800ffae:	4649      	mov	r1, r9
 800ffb0:	4638      	mov	r0, r7
 800ffb2:	47c0      	blx	r8
 800ffb4:	3001      	adds	r0, #1
 800ffb6:	d103      	bne.n	800ffc0 <_printf_common+0xac>
 800ffb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ffbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffc0:	3501      	adds	r5, #1
 800ffc2:	e7c6      	b.n	800ff52 <_printf_common+0x3e>
 800ffc4:	18e1      	adds	r1, r4, r3
 800ffc6:	1c5a      	adds	r2, r3, #1
 800ffc8:	2030      	movs	r0, #48	; 0x30
 800ffca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ffce:	4422      	add	r2, r4
 800ffd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ffd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ffd8:	3302      	adds	r3, #2
 800ffda:	e7c7      	b.n	800ff6c <_printf_common+0x58>
 800ffdc:	2301      	movs	r3, #1
 800ffde:	4622      	mov	r2, r4
 800ffe0:	4649      	mov	r1, r9
 800ffe2:	4638      	mov	r0, r7
 800ffe4:	47c0      	blx	r8
 800ffe6:	3001      	adds	r0, #1
 800ffe8:	d0e6      	beq.n	800ffb8 <_printf_common+0xa4>
 800ffea:	3601      	adds	r6, #1
 800ffec:	e7d9      	b.n	800ffa2 <_printf_common+0x8e>
	...

0800fff0 <_printf_i>:
 800fff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fff4:	7e0f      	ldrb	r7, [r1, #24]
 800fff6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fff8:	2f78      	cmp	r7, #120	; 0x78
 800fffa:	4691      	mov	r9, r2
 800fffc:	4680      	mov	r8, r0
 800fffe:	460c      	mov	r4, r1
 8010000:	469a      	mov	sl, r3
 8010002:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010006:	d807      	bhi.n	8010018 <_printf_i+0x28>
 8010008:	2f62      	cmp	r7, #98	; 0x62
 801000a:	d80a      	bhi.n	8010022 <_printf_i+0x32>
 801000c:	2f00      	cmp	r7, #0
 801000e:	f000 80d4 	beq.w	80101ba <_printf_i+0x1ca>
 8010012:	2f58      	cmp	r7, #88	; 0x58
 8010014:	f000 80c0 	beq.w	8010198 <_printf_i+0x1a8>
 8010018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801001c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010020:	e03a      	b.n	8010098 <_printf_i+0xa8>
 8010022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010026:	2b15      	cmp	r3, #21
 8010028:	d8f6      	bhi.n	8010018 <_printf_i+0x28>
 801002a:	a101      	add	r1, pc, #4	; (adr r1, 8010030 <_printf_i+0x40>)
 801002c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010030:	08010089 	.word	0x08010089
 8010034:	0801009d 	.word	0x0801009d
 8010038:	08010019 	.word	0x08010019
 801003c:	08010019 	.word	0x08010019
 8010040:	08010019 	.word	0x08010019
 8010044:	08010019 	.word	0x08010019
 8010048:	0801009d 	.word	0x0801009d
 801004c:	08010019 	.word	0x08010019
 8010050:	08010019 	.word	0x08010019
 8010054:	08010019 	.word	0x08010019
 8010058:	08010019 	.word	0x08010019
 801005c:	080101a1 	.word	0x080101a1
 8010060:	080100c9 	.word	0x080100c9
 8010064:	0801015b 	.word	0x0801015b
 8010068:	08010019 	.word	0x08010019
 801006c:	08010019 	.word	0x08010019
 8010070:	080101c3 	.word	0x080101c3
 8010074:	08010019 	.word	0x08010019
 8010078:	080100c9 	.word	0x080100c9
 801007c:	08010019 	.word	0x08010019
 8010080:	08010019 	.word	0x08010019
 8010084:	08010163 	.word	0x08010163
 8010088:	682b      	ldr	r3, [r5, #0]
 801008a:	1d1a      	adds	r2, r3, #4
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	602a      	str	r2, [r5, #0]
 8010090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010098:	2301      	movs	r3, #1
 801009a:	e09f      	b.n	80101dc <_printf_i+0x1ec>
 801009c:	6820      	ldr	r0, [r4, #0]
 801009e:	682b      	ldr	r3, [r5, #0]
 80100a0:	0607      	lsls	r7, r0, #24
 80100a2:	f103 0104 	add.w	r1, r3, #4
 80100a6:	6029      	str	r1, [r5, #0]
 80100a8:	d501      	bpl.n	80100ae <_printf_i+0xbe>
 80100aa:	681e      	ldr	r6, [r3, #0]
 80100ac:	e003      	b.n	80100b6 <_printf_i+0xc6>
 80100ae:	0646      	lsls	r6, r0, #25
 80100b0:	d5fb      	bpl.n	80100aa <_printf_i+0xba>
 80100b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80100b6:	2e00      	cmp	r6, #0
 80100b8:	da03      	bge.n	80100c2 <_printf_i+0xd2>
 80100ba:	232d      	movs	r3, #45	; 0x2d
 80100bc:	4276      	negs	r6, r6
 80100be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100c2:	485a      	ldr	r0, [pc, #360]	; (801022c <_printf_i+0x23c>)
 80100c4:	230a      	movs	r3, #10
 80100c6:	e012      	b.n	80100ee <_printf_i+0xfe>
 80100c8:	682b      	ldr	r3, [r5, #0]
 80100ca:	6820      	ldr	r0, [r4, #0]
 80100cc:	1d19      	adds	r1, r3, #4
 80100ce:	6029      	str	r1, [r5, #0]
 80100d0:	0605      	lsls	r5, r0, #24
 80100d2:	d501      	bpl.n	80100d8 <_printf_i+0xe8>
 80100d4:	681e      	ldr	r6, [r3, #0]
 80100d6:	e002      	b.n	80100de <_printf_i+0xee>
 80100d8:	0641      	lsls	r1, r0, #25
 80100da:	d5fb      	bpl.n	80100d4 <_printf_i+0xe4>
 80100dc:	881e      	ldrh	r6, [r3, #0]
 80100de:	4853      	ldr	r0, [pc, #332]	; (801022c <_printf_i+0x23c>)
 80100e0:	2f6f      	cmp	r7, #111	; 0x6f
 80100e2:	bf0c      	ite	eq
 80100e4:	2308      	moveq	r3, #8
 80100e6:	230a      	movne	r3, #10
 80100e8:	2100      	movs	r1, #0
 80100ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80100ee:	6865      	ldr	r5, [r4, #4]
 80100f0:	60a5      	str	r5, [r4, #8]
 80100f2:	2d00      	cmp	r5, #0
 80100f4:	bfa2      	ittt	ge
 80100f6:	6821      	ldrge	r1, [r4, #0]
 80100f8:	f021 0104 	bicge.w	r1, r1, #4
 80100fc:	6021      	strge	r1, [r4, #0]
 80100fe:	b90e      	cbnz	r6, 8010104 <_printf_i+0x114>
 8010100:	2d00      	cmp	r5, #0
 8010102:	d04b      	beq.n	801019c <_printf_i+0x1ac>
 8010104:	4615      	mov	r5, r2
 8010106:	fbb6 f1f3 	udiv	r1, r6, r3
 801010a:	fb03 6711 	mls	r7, r3, r1, r6
 801010e:	5dc7      	ldrb	r7, [r0, r7]
 8010110:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010114:	4637      	mov	r7, r6
 8010116:	42bb      	cmp	r3, r7
 8010118:	460e      	mov	r6, r1
 801011a:	d9f4      	bls.n	8010106 <_printf_i+0x116>
 801011c:	2b08      	cmp	r3, #8
 801011e:	d10b      	bne.n	8010138 <_printf_i+0x148>
 8010120:	6823      	ldr	r3, [r4, #0]
 8010122:	07de      	lsls	r6, r3, #31
 8010124:	d508      	bpl.n	8010138 <_printf_i+0x148>
 8010126:	6923      	ldr	r3, [r4, #16]
 8010128:	6861      	ldr	r1, [r4, #4]
 801012a:	4299      	cmp	r1, r3
 801012c:	bfde      	ittt	le
 801012e:	2330      	movle	r3, #48	; 0x30
 8010130:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010134:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010138:	1b52      	subs	r2, r2, r5
 801013a:	6122      	str	r2, [r4, #16]
 801013c:	f8cd a000 	str.w	sl, [sp]
 8010140:	464b      	mov	r3, r9
 8010142:	aa03      	add	r2, sp, #12
 8010144:	4621      	mov	r1, r4
 8010146:	4640      	mov	r0, r8
 8010148:	f7ff fee4 	bl	800ff14 <_printf_common>
 801014c:	3001      	adds	r0, #1
 801014e:	d14a      	bne.n	80101e6 <_printf_i+0x1f6>
 8010150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010154:	b004      	add	sp, #16
 8010156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801015a:	6823      	ldr	r3, [r4, #0]
 801015c:	f043 0320 	orr.w	r3, r3, #32
 8010160:	6023      	str	r3, [r4, #0]
 8010162:	4833      	ldr	r0, [pc, #204]	; (8010230 <_printf_i+0x240>)
 8010164:	2778      	movs	r7, #120	; 0x78
 8010166:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801016a:	6823      	ldr	r3, [r4, #0]
 801016c:	6829      	ldr	r1, [r5, #0]
 801016e:	061f      	lsls	r7, r3, #24
 8010170:	f851 6b04 	ldr.w	r6, [r1], #4
 8010174:	d402      	bmi.n	801017c <_printf_i+0x18c>
 8010176:	065f      	lsls	r7, r3, #25
 8010178:	bf48      	it	mi
 801017a:	b2b6      	uxthmi	r6, r6
 801017c:	07df      	lsls	r7, r3, #31
 801017e:	bf48      	it	mi
 8010180:	f043 0320 	orrmi.w	r3, r3, #32
 8010184:	6029      	str	r1, [r5, #0]
 8010186:	bf48      	it	mi
 8010188:	6023      	strmi	r3, [r4, #0]
 801018a:	b91e      	cbnz	r6, 8010194 <_printf_i+0x1a4>
 801018c:	6823      	ldr	r3, [r4, #0]
 801018e:	f023 0320 	bic.w	r3, r3, #32
 8010192:	6023      	str	r3, [r4, #0]
 8010194:	2310      	movs	r3, #16
 8010196:	e7a7      	b.n	80100e8 <_printf_i+0xf8>
 8010198:	4824      	ldr	r0, [pc, #144]	; (801022c <_printf_i+0x23c>)
 801019a:	e7e4      	b.n	8010166 <_printf_i+0x176>
 801019c:	4615      	mov	r5, r2
 801019e:	e7bd      	b.n	801011c <_printf_i+0x12c>
 80101a0:	682b      	ldr	r3, [r5, #0]
 80101a2:	6826      	ldr	r6, [r4, #0]
 80101a4:	6961      	ldr	r1, [r4, #20]
 80101a6:	1d18      	adds	r0, r3, #4
 80101a8:	6028      	str	r0, [r5, #0]
 80101aa:	0635      	lsls	r5, r6, #24
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	d501      	bpl.n	80101b4 <_printf_i+0x1c4>
 80101b0:	6019      	str	r1, [r3, #0]
 80101b2:	e002      	b.n	80101ba <_printf_i+0x1ca>
 80101b4:	0670      	lsls	r0, r6, #25
 80101b6:	d5fb      	bpl.n	80101b0 <_printf_i+0x1c0>
 80101b8:	8019      	strh	r1, [r3, #0]
 80101ba:	2300      	movs	r3, #0
 80101bc:	6123      	str	r3, [r4, #16]
 80101be:	4615      	mov	r5, r2
 80101c0:	e7bc      	b.n	801013c <_printf_i+0x14c>
 80101c2:	682b      	ldr	r3, [r5, #0]
 80101c4:	1d1a      	adds	r2, r3, #4
 80101c6:	602a      	str	r2, [r5, #0]
 80101c8:	681d      	ldr	r5, [r3, #0]
 80101ca:	6862      	ldr	r2, [r4, #4]
 80101cc:	2100      	movs	r1, #0
 80101ce:	4628      	mov	r0, r5
 80101d0:	f7f0 f80e 	bl	80001f0 <memchr>
 80101d4:	b108      	cbz	r0, 80101da <_printf_i+0x1ea>
 80101d6:	1b40      	subs	r0, r0, r5
 80101d8:	6060      	str	r0, [r4, #4]
 80101da:	6863      	ldr	r3, [r4, #4]
 80101dc:	6123      	str	r3, [r4, #16]
 80101de:	2300      	movs	r3, #0
 80101e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101e4:	e7aa      	b.n	801013c <_printf_i+0x14c>
 80101e6:	6923      	ldr	r3, [r4, #16]
 80101e8:	462a      	mov	r2, r5
 80101ea:	4649      	mov	r1, r9
 80101ec:	4640      	mov	r0, r8
 80101ee:	47d0      	blx	sl
 80101f0:	3001      	adds	r0, #1
 80101f2:	d0ad      	beq.n	8010150 <_printf_i+0x160>
 80101f4:	6823      	ldr	r3, [r4, #0]
 80101f6:	079b      	lsls	r3, r3, #30
 80101f8:	d413      	bmi.n	8010222 <_printf_i+0x232>
 80101fa:	68e0      	ldr	r0, [r4, #12]
 80101fc:	9b03      	ldr	r3, [sp, #12]
 80101fe:	4298      	cmp	r0, r3
 8010200:	bfb8      	it	lt
 8010202:	4618      	movlt	r0, r3
 8010204:	e7a6      	b.n	8010154 <_printf_i+0x164>
 8010206:	2301      	movs	r3, #1
 8010208:	4632      	mov	r2, r6
 801020a:	4649      	mov	r1, r9
 801020c:	4640      	mov	r0, r8
 801020e:	47d0      	blx	sl
 8010210:	3001      	adds	r0, #1
 8010212:	d09d      	beq.n	8010150 <_printf_i+0x160>
 8010214:	3501      	adds	r5, #1
 8010216:	68e3      	ldr	r3, [r4, #12]
 8010218:	9903      	ldr	r1, [sp, #12]
 801021a:	1a5b      	subs	r3, r3, r1
 801021c:	42ab      	cmp	r3, r5
 801021e:	dcf2      	bgt.n	8010206 <_printf_i+0x216>
 8010220:	e7eb      	b.n	80101fa <_printf_i+0x20a>
 8010222:	2500      	movs	r5, #0
 8010224:	f104 0619 	add.w	r6, r4, #25
 8010228:	e7f5      	b.n	8010216 <_printf_i+0x226>
 801022a:	bf00      	nop
 801022c:	080133eb 	.word	0x080133eb
 8010230:	080133fc 	.word	0x080133fc

08010234 <__sflush_r>:
 8010234:	898a      	ldrh	r2, [r1, #12]
 8010236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801023a:	4605      	mov	r5, r0
 801023c:	0710      	lsls	r0, r2, #28
 801023e:	460c      	mov	r4, r1
 8010240:	d458      	bmi.n	80102f4 <__sflush_r+0xc0>
 8010242:	684b      	ldr	r3, [r1, #4]
 8010244:	2b00      	cmp	r3, #0
 8010246:	dc05      	bgt.n	8010254 <__sflush_r+0x20>
 8010248:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801024a:	2b00      	cmp	r3, #0
 801024c:	dc02      	bgt.n	8010254 <__sflush_r+0x20>
 801024e:	2000      	movs	r0, #0
 8010250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010254:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010256:	2e00      	cmp	r6, #0
 8010258:	d0f9      	beq.n	801024e <__sflush_r+0x1a>
 801025a:	2300      	movs	r3, #0
 801025c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010260:	682f      	ldr	r7, [r5, #0]
 8010262:	6a21      	ldr	r1, [r4, #32]
 8010264:	602b      	str	r3, [r5, #0]
 8010266:	d032      	beq.n	80102ce <__sflush_r+0x9a>
 8010268:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801026a:	89a3      	ldrh	r3, [r4, #12]
 801026c:	075a      	lsls	r2, r3, #29
 801026e:	d505      	bpl.n	801027c <__sflush_r+0x48>
 8010270:	6863      	ldr	r3, [r4, #4]
 8010272:	1ac0      	subs	r0, r0, r3
 8010274:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010276:	b10b      	cbz	r3, 801027c <__sflush_r+0x48>
 8010278:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801027a:	1ac0      	subs	r0, r0, r3
 801027c:	2300      	movs	r3, #0
 801027e:	4602      	mov	r2, r0
 8010280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010282:	6a21      	ldr	r1, [r4, #32]
 8010284:	4628      	mov	r0, r5
 8010286:	47b0      	blx	r6
 8010288:	1c43      	adds	r3, r0, #1
 801028a:	89a3      	ldrh	r3, [r4, #12]
 801028c:	d106      	bne.n	801029c <__sflush_r+0x68>
 801028e:	6829      	ldr	r1, [r5, #0]
 8010290:	291d      	cmp	r1, #29
 8010292:	d82b      	bhi.n	80102ec <__sflush_r+0xb8>
 8010294:	4a29      	ldr	r2, [pc, #164]	; (801033c <__sflush_r+0x108>)
 8010296:	410a      	asrs	r2, r1
 8010298:	07d6      	lsls	r6, r2, #31
 801029a:	d427      	bmi.n	80102ec <__sflush_r+0xb8>
 801029c:	2200      	movs	r2, #0
 801029e:	6062      	str	r2, [r4, #4]
 80102a0:	04d9      	lsls	r1, r3, #19
 80102a2:	6922      	ldr	r2, [r4, #16]
 80102a4:	6022      	str	r2, [r4, #0]
 80102a6:	d504      	bpl.n	80102b2 <__sflush_r+0x7e>
 80102a8:	1c42      	adds	r2, r0, #1
 80102aa:	d101      	bne.n	80102b0 <__sflush_r+0x7c>
 80102ac:	682b      	ldr	r3, [r5, #0]
 80102ae:	b903      	cbnz	r3, 80102b2 <__sflush_r+0x7e>
 80102b0:	6560      	str	r0, [r4, #84]	; 0x54
 80102b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102b4:	602f      	str	r7, [r5, #0]
 80102b6:	2900      	cmp	r1, #0
 80102b8:	d0c9      	beq.n	801024e <__sflush_r+0x1a>
 80102ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102be:	4299      	cmp	r1, r3
 80102c0:	d002      	beq.n	80102c8 <__sflush_r+0x94>
 80102c2:	4628      	mov	r0, r5
 80102c4:	f001 f99e 	bl	8011604 <_free_r>
 80102c8:	2000      	movs	r0, #0
 80102ca:	6360      	str	r0, [r4, #52]	; 0x34
 80102cc:	e7c0      	b.n	8010250 <__sflush_r+0x1c>
 80102ce:	2301      	movs	r3, #1
 80102d0:	4628      	mov	r0, r5
 80102d2:	47b0      	blx	r6
 80102d4:	1c41      	adds	r1, r0, #1
 80102d6:	d1c8      	bne.n	801026a <__sflush_r+0x36>
 80102d8:	682b      	ldr	r3, [r5, #0]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d0c5      	beq.n	801026a <__sflush_r+0x36>
 80102de:	2b1d      	cmp	r3, #29
 80102e0:	d001      	beq.n	80102e6 <__sflush_r+0xb2>
 80102e2:	2b16      	cmp	r3, #22
 80102e4:	d101      	bne.n	80102ea <__sflush_r+0xb6>
 80102e6:	602f      	str	r7, [r5, #0]
 80102e8:	e7b1      	b.n	801024e <__sflush_r+0x1a>
 80102ea:	89a3      	ldrh	r3, [r4, #12]
 80102ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102f0:	81a3      	strh	r3, [r4, #12]
 80102f2:	e7ad      	b.n	8010250 <__sflush_r+0x1c>
 80102f4:	690f      	ldr	r7, [r1, #16]
 80102f6:	2f00      	cmp	r7, #0
 80102f8:	d0a9      	beq.n	801024e <__sflush_r+0x1a>
 80102fa:	0793      	lsls	r3, r2, #30
 80102fc:	680e      	ldr	r6, [r1, #0]
 80102fe:	bf08      	it	eq
 8010300:	694b      	ldreq	r3, [r1, #20]
 8010302:	600f      	str	r7, [r1, #0]
 8010304:	bf18      	it	ne
 8010306:	2300      	movne	r3, #0
 8010308:	eba6 0807 	sub.w	r8, r6, r7
 801030c:	608b      	str	r3, [r1, #8]
 801030e:	f1b8 0f00 	cmp.w	r8, #0
 8010312:	dd9c      	ble.n	801024e <__sflush_r+0x1a>
 8010314:	6a21      	ldr	r1, [r4, #32]
 8010316:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010318:	4643      	mov	r3, r8
 801031a:	463a      	mov	r2, r7
 801031c:	4628      	mov	r0, r5
 801031e:	47b0      	blx	r6
 8010320:	2800      	cmp	r0, #0
 8010322:	dc06      	bgt.n	8010332 <__sflush_r+0xfe>
 8010324:	89a3      	ldrh	r3, [r4, #12]
 8010326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801032a:	81a3      	strh	r3, [r4, #12]
 801032c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010330:	e78e      	b.n	8010250 <__sflush_r+0x1c>
 8010332:	4407      	add	r7, r0
 8010334:	eba8 0800 	sub.w	r8, r8, r0
 8010338:	e7e9      	b.n	801030e <__sflush_r+0xda>
 801033a:	bf00      	nop
 801033c:	dfbffffe 	.word	0xdfbffffe

08010340 <_fflush_r>:
 8010340:	b538      	push	{r3, r4, r5, lr}
 8010342:	690b      	ldr	r3, [r1, #16]
 8010344:	4605      	mov	r5, r0
 8010346:	460c      	mov	r4, r1
 8010348:	b913      	cbnz	r3, 8010350 <_fflush_r+0x10>
 801034a:	2500      	movs	r5, #0
 801034c:	4628      	mov	r0, r5
 801034e:	bd38      	pop	{r3, r4, r5, pc}
 8010350:	b118      	cbz	r0, 801035a <_fflush_r+0x1a>
 8010352:	6a03      	ldr	r3, [r0, #32]
 8010354:	b90b      	cbnz	r3, 801035a <_fflush_r+0x1a>
 8010356:	f000 f8bb 	bl	80104d0 <__sinit>
 801035a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d0f3      	beq.n	801034a <_fflush_r+0xa>
 8010362:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010364:	07d0      	lsls	r0, r2, #31
 8010366:	d404      	bmi.n	8010372 <_fflush_r+0x32>
 8010368:	0599      	lsls	r1, r3, #22
 801036a:	d402      	bmi.n	8010372 <_fflush_r+0x32>
 801036c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801036e:	f000 fabe 	bl	80108ee <__retarget_lock_acquire_recursive>
 8010372:	4628      	mov	r0, r5
 8010374:	4621      	mov	r1, r4
 8010376:	f7ff ff5d 	bl	8010234 <__sflush_r>
 801037a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801037c:	07da      	lsls	r2, r3, #31
 801037e:	4605      	mov	r5, r0
 8010380:	d4e4      	bmi.n	801034c <_fflush_r+0xc>
 8010382:	89a3      	ldrh	r3, [r4, #12]
 8010384:	059b      	lsls	r3, r3, #22
 8010386:	d4e1      	bmi.n	801034c <_fflush_r+0xc>
 8010388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801038a:	f000 fab1 	bl	80108f0 <__retarget_lock_release_recursive>
 801038e:	e7dd      	b.n	801034c <_fflush_r+0xc>

08010390 <fflush>:
 8010390:	4601      	mov	r1, r0
 8010392:	b920      	cbnz	r0, 801039e <fflush+0xe>
 8010394:	4a04      	ldr	r2, [pc, #16]	; (80103a8 <fflush+0x18>)
 8010396:	4905      	ldr	r1, [pc, #20]	; (80103ac <fflush+0x1c>)
 8010398:	4805      	ldr	r0, [pc, #20]	; (80103b0 <fflush+0x20>)
 801039a:	f000 b8b1 	b.w	8010500 <_fwalk_sglue>
 801039e:	4b05      	ldr	r3, [pc, #20]	; (80103b4 <fflush+0x24>)
 80103a0:	6818      	ldr	r0, [r3, #0]
 80103a2:	f7ff bfcd 	b.w	8010340 <_fflush_r>
 80103a6:	bf00      	nop
 80103a8:	200001e0 	.word	0x200001e0
 80103ac:	08010341 	.word	0x08010341
 80103b0:	200001ec 	.word	0x200001ec
 80103b4:	20000238 	.word	0x20000238

080103b8 <std>:
 80103b8:	2300      	movs	r3, #0
 80103ba:	b510      	push	{r4, lr}
 80103bc:	4604      	mov	r4, r0
 80103be:	e9c0 3300 	strd	r3, r3, [r0]
 80103c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80103c6:	6083      	str	r3, [r0, #8]
 80103c8:	8181      	strh	r1, [r0, #12]
 80103ca:	6643      	str	r3, [r0, #100]	; 0x64
 80103cc:	81c2      	strh	r2, [r0, #14]
 80103ce:	6183      	str	r3, [r0, #24]
 80103d0:	4619      	mov	r1, r3
 80103d2:	2208      	movs	r2, #8
 80103d4:	305c      	adds	r0, #92	; 0x5c
 80103d6:	f000 f9a3 	bl	8010720 <memset>
 80103da:	4b0d      	ldr	r3, [pc, #52]	; (8010410 <std+0x58>)
 80103dc:	6263      	str	r3, [r4, #36]	; 0x24
 80103de:	4b0d      	ldr	r3, [pc, #52]	; (8010414 <std+0x5c>)
 80103e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80103e2:	4b0d      	ldr	r3, [pc, #52]	; (8010418 <std+0x60>)
 80103e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80103e6:	4b0d      	ldr	r3, [pc, #52]	; (801041c <std+0x64>)
 80103e8:	6323      	str	r3, [r4, #48]	; 0x30
 80103ea:	4b0d      	ldr	r3, [pc, #52]	; (8010420 <std+0x68>)
 80103ec:	6224      	str	r4, [r4, #32]
 80103ee:	429c      	cmp	r4, r3
 80103f0:	d006      	beq.n	8010400 <std+0x48>
 80103f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80103f6:	4294      	cmp	r4, r2
 80103f8:	d002      	beq.n	8010400 <std+0x48>
 80103fa:	33d0      	adds	r3, #208	; 0xd0
 80103fc:	429c      	cmp	r4, r3
 80103fe:	d105      	bne.n	801040c <std+0x54>
 8010400:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010408:	f000 ba70 	b.w	80108ec <__retarget_lock_init_recursive>
 801040c:	bd10      	pop	{r4, pc}
 801040e:	bf00      	nop
 8010410:	08010571 	.word	0x08010571
 8010414:	08010593 	.word	0x08010593
 8010418:	080105cb 	.word	0x080105cb
 801041c:	080105ef 	.word	0x080105ef
 8010420:	20008f8c 	.word	0x20008f8c

08010424 <stdio_exit_handler>:
 8010424:	4a02      	ldr	r2, [pc, #8]	; (8010430 <stdio_exit_handler+0xc>)
 8010426:	4903      	ldr	r1, [pc, #12]	; (8010434 <stdio_exit_handler+0x10>)
 8010428:	4803      	ldr	r0, [pc, #12]	; (8010438 <stdio_exit_handler+0x14>)
 801042a:	f000 b869 	b.w	8010500 <_fwalk_sglue>
 801042e:	bf00      	nop
 8010430:	200001e0 	.word	0x200001e0
 8010434:	08010341 	.word	0x08010341
 8010438:	200001ec 	.word	0x200001ec

0801043c <cleanup_stdio>:
 801043c:	6841      	ldr	r1, [r0, #4]
 801043e:	4b0c      	ldr	r3, [pc, #48]	; (8010470 <cleanup_stdio+0x34>)
 8010440:	4299      	cmp	r1, r3
 8010442:	b510      	push	{r4, lr}
 8010444:	4604      	mov	r4, r0
 8010446:	d001      	beq.n	801044c <cleanup_stdio+0x10>
 8010448:	f7ff ff7a 	bl	8010340 <_fflush_r>
 801044c:	68a1      	ldr	r1, [r4, #8]
 801044e:	4b09      	ldr	r3, [pc, #36]	; (8010474 <cleanup_stdio+0x38>)
 8010450:	4299      	cmp	r1, r3
 8010452:	d002      	beq.n	801045a <cleanup_stdio+0x1e>
 8010454:	4620      	mov	r0, r4
 8010456:	f7ff ff73 	bl	8010340 <_fflush_r>
 801045a:	68e1      	ldr	r1, [r4, #12]
 801045c:	4b06      	ldr	r3, [pc, #24]	; (8010478 <cleanup_stdio+0x3c>)
 801045e:	4299      	cmp	r1, r3
 8010460:	d004      	beq.n	801046c <cleanup_stdio+0x30>
 8010462:	4620      	mov	r0, r4
 8010464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010468:	f7ff bf6a 	b.w	8010340 <_fflush_r>
 801046c:	bd10      	pop	{r4, pc}
 801046e:	bf00      	nop
 8010470:	20008f8c 	.word	0x20008f8c
 8010474:	20008ff4 	.word	0x20008ff4
 8010478:	2000905c 	.word	0x2000905c

0801047c <global_stdio_init.part.0>:
 801047c:	b510      	push	{r4, lr}
 801047e:	4b0b      	ldr	r3, [pc, #44]	; (80104ac <global_stdio_init.part.0+0x30>)
 8010480:	4c0b      	ldr	r4, [pc, #44]	; (80104b0 <global_stdio_init.part.0+0x34>)
 8010482:	4a0c      	ldr	r2, [pc, #48]	; (80104b4 <global_stdio_init.part.0+0x38>)
 8010484:	601a      	str	r2, [r3, #0]
 8010486:	4620      	mov	r0, r4
 8010488:	2200      	movs	r2, #0
 801048a:	2104      	movs	r1, #4
 801048c:	f7ff ff94 	bl	80103b8 <std>
 8010490:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010494:	2201      	movs	r2, #1
 8010496:	2109      	movs	r1, #9
 8010498:	f7ff ff8e 	bl	80103b8 <std>
 801049c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80104a0:	2202      	movs	r2, #2
 80104a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104a6:	2112      	movs	r1, #18
 80104a8:	f7ff bf86 	b.w	80103b8 <std>
 80104ac:	200090c4 	.word	0x200090c4
 80104b0:	20008f8c 	.word	0x20008f8c
 80104b4:	08010425 	.word	0x08010425

080104b8 <__sfp_lock_acquire>:
 80104b8:	4801      	ldr	r0, [pc, #4]	; (80104c0 <__sfp_lock_acquire+0x8>)
 80104ba:	f000 ba18 	b.w	80108ee <__retarget_lock_acquire_recursive>
 80104be:	bf00      	nop
 80104c0:	200090cd 	.word	0x200090cd

080104c4 <__sfp_lock_release>:
 80104c4:	4801      	ldr	r0, [pc, #4]	; (80104cc <__sfp_lock_release+0x8>)
 80104c6:	f000 ba13 	b.w	80108f0 <__retarget_lock_release_recursive>
 80104ca:	bf00      	nop
 80104cc:	200090cd 	.word	0x200090cd

080104d0 <__sinit>:
 80104d0:	b510      	push	{r4, lr}
 80104d2:	4604      	mov	r4, r0
 80104d4:	f7ff fff0 	bl	80104b8 <__sfp_lock_acquire>
 80104d8:	6a23      	ldr	r3, [r4, #32]
 80104da:	b11b      	cbz	r3, 80104e4 <__sinit+0x14>
 80104dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104e0:	f7ff bff0 	b.w	80104c4 <__sfp_lock_release>
 80104e4:	4b04      	ldr	r3, [pc, #16]	; (80104f8 <__sinit+0x28>)
 80104e6:	6223      	str	r3, [r4, #32]
 80104e8:	4b04      	ldr	r3, [pc, #16]	; (80104fc <__sinit+0x2c>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d1f5      	bne.n	80104dc <__sinit+0xc>
 80104f0:	f7ff ffc4 	bl	801047c <global_stdio_init.part.0>
 80104f4:	e7f2      	b.n	80104dc <__sinit+0xc>
 80104f6:	bf00      	nop
 80104f8:	0801043d 	.word	0x0801043d
 80104fc:	200090c4 	.word	0x200090c4

08010500 <_fwalk_sglue>:
 8010500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010504:	4607      	mov	r7, r0
 8010506:	4688      	mov	r8, r1
 8010508:	4614      	mov	r4, r2
 801050a:	2600      	movs	r6, #0
 801050c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010510:	f1b9 0901 	subs.w	r9, r9, #1
 8010514:	d505      	bpl.n	8010522 <_fwalk_sglue+0x22>
 8010516:	6824      	ldr	r4, [r4, #0]
 8010518:	2c00      	cmp	r4, #0
 801051a:	d1f7      	bne.n	801050c <_fwalk_sglue+0xc>
 801051c:	4630      	mov	r0, r6
 801051e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010522:	89ab      	ldrh	r3, [r5, #12]
 8010524:	2b01      	cmp	r3, #1
 8010526:	d907      	bls.n	8010538 <_fwalk_sglue+0x38>
 8010528:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801052c:	3301      	adds	r3, #1
 801052e:	d003      	beq.n	8010538 <_fwalk_sglue+0x38>
 8010530:	4629      	mov	r1, r5
 8010532:	4638      	mov	r0, r7
 8010534:	47c0      	blx	r8
 8010536:	4306      	orrs	r6, r0
 8010538:	3568      	adds	r5, #104	; 0x68
 801053a:	e7e9      	b.n	8010510 <_fwalk_sglue+0x10>

0801053c <iprintf>:
 801053c:	b40f      	push	{r0, r1, r2, r3}
 801053e:	b507      	push	{r0, r1, r2, lr}
 8010540:	4906      	ldr	r1, [pc, #24]	; (801055c <iprintf+0x20>)
 8010542:	ab04      	add	r3, sp, #16
 8010544:	6808      	ldr	r0, [r1, #0]
 8010546:	f853 2b04 	ldr.w	r2, [r3], #4
 801054a:	6881      	ldr	r1, [r0, #8]
 801054c:	9301      	str	r3, [sp, #4]
 801054e:	f001 fcff 	bl	8011f50 <_vfiprintf_r>
 8010552:	b003      	add	sp, #12
 8010554:	f85d eb04 	ldr.w	lr, [sp], #4
 8010558:	b004      	add	sp, #16
 801055a:	4770      	bx	lr
 801055c:	20000238 	.word	0x20000238

08010560 <putchar>:
 8010560:	4b02      	ldr	r3, [pc, #8]	; (801056c <putchar+0xc>)
 8010562:	4601      	mov	r1, r0
 8010564:	6818      	ldr	r0, [r3, #0]
 8010566:	6882      	ldr	r2, [r0, #8]
 8010568:	f001 be6e 	b.w	8012248 <_putc_r>
 801056c:	20000238 	.word	0x20000238

08010570 <__sread>:
 8010570:	b510      	push	{r4, lr}
 8010572:	460c      	mov	r4, r1
 8010574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010578:	f000 f96a 	bl	8010850 <_read_r>
 801057c:	2800      	cmp	r0, #0
 801057e:	bfab      	itete	ge
 8010580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010582:	89a3      	ldrhlt	r3, [r4, #12]
 8010584:	181b      	addge	r3, r3, r0
 8010586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801058a:	bfac      	ite	ge
 801058c:	6563      	strge	r3, [r4, #84]	; 0x54
 801058e:	81a3      	strhlt	r3, [r4, #12]
 8010590:	bd10      	pop	{r4, pc}

08010592 <__swrite>:
 8010592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010596:	461f      	mov	r7, r3
 8010598:	898b      	ldrh	r3, [r1, #12]
 801059a:	05db      	lsls	r3, r3, #23
 801059c:	4605      	mov	r5, r0
 801059e:	460c      	mov	r4, r1
 80105a0:	4616      	mov	r6, r2
 80105a2:	d505      	bpl.n	80105b0 <__swrite+0x1e>
 80105a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105a8:	2302      	movs	r3, #2
 80105aa:	2200      	movs	r2, #0
 80105ac:	f000 f93e 	bl	801082c <_lseek_r>
 80105b0:	89a3      	ldrh	r3, [r4, #12]
 80105b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80105ba:	81a3      	strh	r3, [r4, #12]
 80105bc:	4632      	mov	r2, r6
 80105be:	463b      	mov	r3, r7
 80105c0:	4628      	mov	r0, r5
 80105c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105c6:	f000 b955 	b.w	8010874 <_write_r>

080105ca <__sseek>:
 80105ca:	b510      	push	{r4, lr}
 80105cc:	460c      	mov	r4, r1
 80105ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105d2:	f000 f92b 	bl	801082c <_lseek_r>
 80105d6:	1c43      	adds	r3, r0, #1
 80105d8:	89a3      	ldrh	r3, [r4, #12]
 80105da:	bf15      	itete	ne
 80105dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80105de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80105e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80105e6:	81a3      	strheq	r3, [r4, #12]
 80105e8:	bf18      	it	ne
 80105ea:	81a3      	strhne	r3, [r4, #12]
 80105ec:	bd10      	pop	{r4, pc}

080105ee <__sclose>:
 80105ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105f2:	f000 b8b5 	b.w	8010760 <_close_r>

080105f6 <__swbuf_r>:
 80105f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105f8:	460e      	mov	r6, r1
 80105fa:	4614      	mov	r4, r2
 80105fc:	4605      	mov	r5, r0
 80105fe:	b118      	cbz	r0, 8010608 <__swbuf_r+0x12>
 8010600:	6a03      	ldr	r3, [r0, #32]
 8010602:	b90b      	cbnz	r3, 8010608 <__swbuf_r+0x12>
 8010604:	f7ff ff64 	bl	80104d0 <__sinit>
 8010608:	69a3      	ldr	r3, [r4, #24]
 801060a:	60a3      	str	r3, [r4, #8]
 801060c:	89a3      	ldrh	r3, [r4, #12]
 801060e:	071a      	lsls	r2, r3, #28
 8010610:	d525      	bpl.n	801065e <__swbuf_r+0x68>
 8010612:	6923      	ldr	r3, [r4, #16]
 8010614:	b31b      	cbz	r3, 801065e <__swbuf_r+0x68>
 8010616:	6823      	ldr	r3, [r4, #0]
 8010618:	6922      	ldr	r2, [r4, #16]
 801061a:	1a98      	subs	r0, r3, r2
 801061c:	6963      	ldr	r3, [r4, #20]
 801061e:	b2f6      	uxtb	r6, r6
 8010620:	4283      	cmp	r3, r0
 8010622:	4637      	mov	r7, r6
 8010624:	dc04      	bgt.n	8010630 <__swbuf_r+0x3a>
 8010626:	4621      	mov	r1, r4
 8010628:	4628      	mov	r0, r5
 801062a:	f7ff fe89 	bl	8010340 <_fflush_r>
 801062e:	b9e0      	cbnz	r0, 801066a <__swbuf_r+0x74>
 8010630:	68a3      	ldr	r3, [r4, #8]
 8010632:	3b01      	subs	r3, #1
 8010634:	60a3      	str	r3, [r4, #8]
 8010636:	6823      	ldr	r3, [r4, #0]
 8010638:	1c5a      	adds	r2, r3, #1
 801063a:	6022      	str	r2, [r4, #0]
 801063c:	701e      	strb	r6, [r3, #0]
 801063e:	6962      	ldr	r2, [r4, #20]
 8010640:	1c43      	adds	r3, r0, #1
 8010642:	429a      	cmp	r2, r3
 8010644:	d004      	beq.n	8010650 <__swbuf_r+0x5a>
 8010646:	89a3      	ldrh	r3, [r4, #12]
 8010648:	07db      	lsls	r3, r3, #31
 801064a:	d506      	bpl.n	801065a <__swbuf_r+0x64>
 801064c:	2e0a      	cmp	r6, #10
 801064e:	d104      	bne.n	801065a <__swbuf_r+0x64>
 8010650:	4621      	mov	r1, r4
 8010652:	4628      	mov	r0, r5
 8010654:	f7ff fe74 	bl	8010340 <_fflush_r>
 8010658:	b938      	cbnz	r0, 801066a <__swbuf_r+0x74>
 801065a:	4638      	mov	r0, r7
 801065c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801065e:	4621      	mov	r1, r4
 8010660:	4628      	mov	r0, r5
 8010662:	f000 f805 	bl	8010670 <__swsetup_r>
 8010666:	2800      	cmp	r0, #0
 8010668:	d0d5      	beq.n	8010616 <__swbuf_r+0x20>
 801066a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801066e:	e7f4      	b.n	801065a <__swbuf_r+0x64>

08010670 <__swsetup_r>:
 8010670:	b538      	push	{r3, r4, r5, lr}
 8010672:	4b2a      	ldr	r3, [pc, #168]	; (801071c <__swsetup_r+0xac>)
 8010674:	4605      	mov	r5, r0
 8010676:	6818      	ldr	r0, [r3, #0]
 8010678:	460c      	mov	r4, r1
 801067a:	b118      	cbz	r0, 8010684 <__swsetup_r+0x14>
 801067c:	6a03      	ldr	r3, [r0, #32]
 801067e:	b90b      	cbnz	r3, 8010684 <__swsetup_r+0x14>
 8010680:	f7ff ff26 	bl	80104d0 <__sinit>
 8010684:	89a3      	ldrh	r3, [r4, #12]
 8010686:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801068a:	0718      	lsls	r0, r3, #28
 801068c:	d422      	bmi.n	80106d4 <__swsetup_r+0x64>
 801068e:	06d9      	lsls	r1, r3, #27
 8010690:	d407      	bmi.n	80106a2 <__swsetup_r+0x32>
 8010692:	2309      	movs	r3, #9
 8010694:	602b      	str	r3, [r5, #0]
 8010696:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801069a:	81a3      	strh	r3, [r4, #12]
 801069c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106a0:	e034      	b.n	801070c <__swsetup_r+0x9c>
 80106a2:	0758      	lsls	r0, r3, #29
 80106a4:	d512      	bpl.n	80106cc <__swsetup_r+0x5c>
 80106a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106a8:	b141      	cbz	r1, 80106bc <__swsetup_r+0x4c>
 80106aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106ae:	4299      	cmp	r1, r3
 80106b0:	d002      	beq.n	80106b8 <__swsetup_r+0x48>
 80106b2:	4628      	mov	r0, r5
 80106b4:	f000 ffa6 	bl	8011604 <_free_r>
 80106b8:	2300      	movs	r3, #0
 80106ba:	6363      	str	r3, [r4, #52]	; 0x34
 80106bc:	89a3      	ldrh	r3, [r4, #12]
 80106be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80106c2:	81a3      	strh	r3, [r4, #12]
 80106c4:	2300      	movs	r3, #0
 80106c6:	6063      	str	r3, [r4, #4]
 80106c8:	6923      	ldr	r3, [r4, #16]
 80106ca:	6023      	str	r3, [r4, #0]
 80106cc:	89a3      	ldrh	r3, [r4, #12]
 80106ce:	f043 0308 	orr.w	r3, r3, #8
 80106d2:	81a3      	strh	r3, [r4, #12]
 80106d4:	6923      	ldr	r3, [r4, #16]
 80106d6:	b94b      	cbnz	r3, 80106ec <__swsetup_r+0x7c>
 80106d8:	89a3      	ldrh	r3, [r4, #12]
 80106da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80106de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80106e2:	d003      	beq.n	80106ec <__swsetup_r+0x7c>
 80106e4:	4621      	mov	r1, r4
 80106e6:	4628      	mov	r0, r5
 80106e8:	f001 fd72 	bl	80121d0 <__smakebuf_r>
 80106ec:	89a0      	ldrh	r0, [r4, #12]
 80106ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80106f2:	f010 0301 	ands.w	r3, r0, #1
 80106f6:	d00a      	beq.n	801070e <__swsetup_r+0x9e>
 80106f8:	2300      	movs	r3, #0
 80106fa:	60a3      	str	r3, [r4, #8]
 80106fc:	6963      	ldr	r3, [r4, #20]
 80106fe:	425b      	negs	r3, r3
 8010700:	61a3      	str	r3, [r4, #24]
 8010702:	6923      	ldr	r3, [r4, #16]
 8010704:	b943      	cbnz	r3, 8010718 <__swsetup_r+0xa8>
 8010706:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801070a:	d1c4      	bne.n	8010696 <__swsetup_r+0x26>
 801070c:	bd38      	pop	{r3, r4, r5, pc}
 801070e:	0781      	lsls	r1, r0, #30
 8010710:	bf58      	it	pl
 8010712:	6963      	ldrpl	r3, [r4, #20]
 8010714:	60a3      	str	r3, [r4, #8]
 8010716:	e7f4      	b.n	8010702 <__swsetup_r+0x92>
 8010718:	2000      	movs	r0, #0
 801071a:	e7f7      	b.n	801070c <__swsetup_r+0x9c>
 801071c:	20000238 	.word	0x20000238

08010720 <memset>:
 8010720:	4402      	add	r2, r0
 8010722:	4603      	mov	r3, r0
 8010724:	4293      	cmp	r3, r2
 8010726:	d100      	bne.n	801072a <memset+0xa>
 8010728:	4770      	bx	lr
 801072a:	f803 1b01 	strb.w	r1, [r3], #1
 801072e:	e7f9      	b.n	8010724 <memset+0x4>

08010730 <strncpy>:
 8010730:	b510      	push	{r4, lr}
 8010732:	3901      	subs	r1, #1
 8010734:	4603      	mov	r3, r0
 8010736:	b132      	cbz	r2, 8010746 <strncpy+0x16>
 8010738:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801073c:	f803 4b01 	strb.w	r4, [r3], #1
 8010740:	3a01      	subs	r2, #1
 8010742:	2c00      	cmp	r4, #0
 8010744:	d1f7      	bne.n	8010736 <strncpy+0x6>
 8010746:	441a      	add	r2, r3
 8010748:	2100      	movs	r1, #0
 801074a:	4293      	cmp	r3, r2
 801074c:	d100      	bne.n	8010750 <strncpy+0x20>
 801074e:	bd10      	pop	{r4, pc}
 8010750:	f803 1b01 	strb.w	r1, [r3], #1
 8010754:	e7f9      	b.n	801074a <strncpy+0x1a>
	...

08010758 <_localeconv_r>:
 8010758:	4800      	ldr	r0, [pc, #0]	; (801075c <_localeconv_r+0x4>)
 801075a:	4770      	bx	lr
 801075c:	2000032c 	.word	0x2000032c

08010760 <_close_r>:
 8010760:	b538      	push	{r3, r4, r5, lr}
 8010762:	4d06      	ldr	r5, [pc, #24]	; (801077c <_close_r+0x1c>)
 8010764:	2300      	movs	r3, #0
 8010766:	4604      	mov	r4, r0
 8010768:	4608      	mov	r0, r1
 801076a:	602b      	str	r3, [r5, #0]
 801076c:	f7f3 fa67 	bl	8003c3e <_close>
 8010770:	1c43      	adds	r3, r0, #1
 8010772:	d102      	bne.n	801077a <_close_r+0x1a>
 8010774:	682b      	ldr	r3, [r5, #0]
 8010776:	b103      	cbz	r3, 801077a <_close_r+0x1a>
 8010778:	6023      	str	r3, [r4, #0]
 801077a:	bd38      	pop	{r3, r4, r5, pc}
 801077c:	200090c8 	.word	0x200090c8

08010780 <_reclaim_reent>:
 8010780:	4b29      	ldr	r3, [pc, #164]	; (8010828 <_reclaim_reent+0xa8>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	4283      	cmp	r3, r0
 8010786:	b570      	push	{r4, r5, r6, lr}
 8010788:	4604      	mov	r4, r0
 801078a:	d04b      	beq.n	8010824 <_reclaim_reent+0xa4>
 801078c:	69c3      	ldr	r3, [r0, #28]
 801078e:	b143      	cbz	r3, 80107a2 <_reclaim_reent+0x22>
 8010790:	68db      	ldr	r3, [r3, #12]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d144      	bne.n	8010820 <_reclaim_reent+0xa0>
 8010796:	69e3      	ldr	r3, [r4, #28]
 8010798:	6819      	ldr	r1, [r3, #0]
 801079a:	b111      	cbz	r1, 80107a2 <_reclaim_reent+0x22>
 801079c:	4620      	mov	r0, r4
 801079e:	f000 ff31 	bl	8011604 <_free_r>
 80107a2:	6961      	ldr	r1, [r4, #20]
 80107a4:	b111      	cbz	r1, 80107ac <_reclaim_reent+0x2c>
 80107a6:	4620      	mov	r0, r4
 80107a8:	f000 ff2c 	bl	8011604 <_free_r>
 80107ac:	69e1      	ldr	r1, [r4, #28]
 80107ae:	b111      	cbz	r1, 80107b6 <_reclaim_reent+0x36>
 80107b0:	4620      	mov	r0, r4
 80107b2:	f000 ff27 	bl	8011604 <_free_r>
 80107b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80107b8:	b111      	cbz	r1, 80107c0 <_reclaim_reent+0x40>
 80107ba:	4620      	mov	r0, r4
 80107bc:	f000 ff22 	bl	8011604 <_free_r>
 80107c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107c2:	b111      	cbz	r1, 80107ca <_reclaim_reent+0x4a>
 80107c4:	4620      	mov	r0, r4
 80107c6:	f000 ff1d 	bl	8011604 <_free_r>
 80107ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80107cc:	b111      	cbz	r1, 80107d4 <_reclaim_reent+0x54>
 80107ce:	4620      	mov	r0, r4
 80107d0:	f000 ff18 	bl	8011604 <_free_r>
 80107d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80107d6:	b111      	cbz	r1, 80107de <_reclaim_reent+0x5e>
 80107d8:	4620      	mov	r0, r4
 80107da:	f000 ff13 	bl	8011604 <_free_r>
 80107de:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80107e0:	b111      	cbz	r1, 80107e8 <_reclaim_reent+0x68>
 80107e2:	4620      	mov	r0, r4
 80107e4:	f000 ff0e 	bl	8011604 <_free_r>
 80107e8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80107ea:	b111      	cbz	r1, 80107f2 <_reclaim_reent+0x72>
 80107ec:	4620      	mov	r0, r4
 80107ee:	f000 ff09 	bl	8011604 <_free_r>
 80107f2:	6a23      	ldr	r3, [r4, #32]
 80107f4:	b1b3      	cbz	r3, 8010824 <_reclaim_reent+0xa4>
 80107f6:	4620      	mov	r0, r4
 80107f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80107fc:	4718      	bx	r3
 80107fe:	5949      	ldr	r1, [r1, r5]
 8010800:	b941      	cbnz	r1, 8010814 <_reclaim_reent+0x94>
 8010802:	3504      	adds	r5, #4
 8010804:	69e3      	ldr	r3, [r4, #28]
 8010806:	2d80      	cmp	r5, #128	; 0x80
 8010808:	68d9      	ldr	r1, [r3, #12]
 801080a:	d1f8      	bne.n	80107fe <_reclaim_reent+0x7e>
 801080c:	4620      	mov	r0, r4
 801080e:	f000 fef9 	bl	8011604 <_free_r>
 8010812:	e7c0      	b.n	8010796 <_reclaim_reent+0x16>
 8010814:	680e      	ldr	r6, [r1, #0]
 8010816:	4620      	mov	r0, r4
 8010818:	f000 fef4 	bl	8011604 <_free_r>
 801081c:	4631      	mov	r1, r6
 801081e:	e7ef      	b.n	8010800 <_reclaim_reent+0x80>
 8010820:	2500      	movs	r5, #0
 8010822:	e7ef      	b.n	8010804 <_reclaim_reent+0x84>
 8010824:	bd70      	pop	{r4, r5, r6, pc}
 8010826:	bf00      	nop
 8010828:	20000238 	.word	0x20000238

0801082c <_lseek_r>:
 801082c:	b538      	push	{r3, r4, r5, lr}
 801082e:	4d07      	ldr	r5, [pc, #28]	; (801084c <_lseek_r+0x20>)
 8010830:	4604      	mov	r4, r0
 8010832:	4608      	mov	r0, r1
 8010834:	4611      	mov	r1, r2
 8010836:	2200      	movs	r2, #0
 8010838:	602a      	str	r2, [r5, #0]
 801083a:	461a      	mov	r2, r3
 801083c:	f7f3 fa26 	bl	8003c8c <_lseek>
 8010840:	1c43      	adds	r3, r0, #1
 8010842:	d102      	bne.n	801084a <_lseek_r+0x1e>
 8010844:	682b      	ldr	r3, [r5, #0]
 8010846:	b103      	cbz	r3, 801084a <_lseek_r+0x1e>
 8010848:	6023      	str	r3, [r4, #0]
 801084a:	bd38      	pop	{r3, r4, r5, pc}
 801084c:	200090c8 	.word	0x200090c8

08010850 <_read_r>:
 8010850:	b538      	push	{r3, r4, r5, lr}
 8010852:	4d07      	ldr	r5, [pc, #28]	; (8010870 <_read_r+0x20>)
 8010854:	4604      	mov	r4, r0
 8010856:	4608      	mov	r0, r1
 8010858:	4611      	mov	r1, r2
 801085a:	2200      	movs	r2, #0
 801085c:	602a      	str	r2, [r5, #0]
 801085e:	461a      	mov	r2, r3
 8010860:	f7f3 f9b4 	bl	8003bcc <_read>
 8010864:	1c43      	adds	r3, r0, #1
 8010866:	d102      	bne.n	801086e <_read_r+0x1e>
 8010868:	682b      	ldr	r3, [r5, #0]
 801086a:	b103      	cbz	r3, 801086e <_read_r+0x1e>
 801086c:	6023      	str	r3, [r4, #0]
 801086e:	bd38      	pop	{r3, r4, r5, pc}
 8010870:	200090c8 	.word	0x200090c8

08010874 <_write_r>:
 8010874:	b538      	push	{r3, r4, r5, lr}
 8010876:	4d07      	ldr	r5, [pc, #28]	; (8010894 <_write_r+0x20>)
 8010878:	4604      	mov	r4, r0
 801087a:	4608      	mov	r0, r1
 801087c:	4611      	mov	r1, r2
 801087e:	2200      	movs	r2, #0
 8010880:	602a      	str	r2, [r5, #0]
 8010882:	461a      	mov	r2, r3
 8010884:	f7f3 f9bf 	bl	8003c06 <_write>
 8010888:	1c43      	adds	r3, r0, #1
 801088a:	d102      	bne.n	8010892 <_write_r+0x1e>
 801088c:	682b      	ldr	r3, [r5, #0]
 801088e:	b103      	cbz	r3, 8010892 <_write_r+0x1e>
 8010890:	6023      	str	r3, [r4, #0]
 8010892:	bd38      	pop	{r3, r4, r5, pc}
 8010894:	200090c8 	.word	0x200090c8

08010898 <__errno>:
 8010898:	4b01      	ldr	r3, [pc, #4]	; (80108a0 <__errno+0x8>)
 801089a:	6818      	ldr	r0, [r3, #0]
 801089c:	4770      	bx	lr
 801089e:	bf00      	nop
 80108a0:	20000238 	.word	0x20000238

080108a4 <__libc_init_array>:
 80108a4:	b570      	push	{r4, r5, r6, lr}
 80108a6:	4d0d      	ldr	r5, [pc, #52]	; (80108dc <__libc_init_array+0x38>)
 80108a8:	4c0d      	ldr	r4, [pc, #52]	; (80108e0 <__libc_init_array+0x3c>)
 80108aa:	1b64      	subs	r4, r4, r5
 80108ac:	10a4      	asrs	r4, r4, #2
 80108ae:	2600      	movs	r6, #0
 80108b0:	42a6      	cmp	r6, r4
 80108b2:	d109      	bne.n	80108c8 <__libc_init_array+0x24>
 80108b4:	4d0b      	ldr	r5, [pc, #44]	; (80108e4 <__libc_init_array+0x40>)
 80108b6:	4c0c      	ldr	r4, [pc, #48]	; (80108e8 <__libc_init_array+0x44>)
 80108b8:	f001 fdde 	bl	8012478 <_init>
 80108bc:	1b64      	subs	r4, r4, r5
 80108be:	10a4      	asrs	r4, r4, #2
 80108c0:	2600      	movs	r6, #0
 80108c2:	42a6      	cmp	r6, r4
 80108c4:	d105      	bne.n	80108d2 <__libc_init_array+0x2e>
 80108c6:	bd70      	pop	{r4, r5, r6, pc}
 80108c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80108cc:	4798      	blx	r3
 80108ce:	3601      	adds	r6, #1
 80108d0:	e7ee      	b.n	80108b0 <__libc_init_array+0xc>
 80108d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80108d6:	4798      	blx	r3
 80108d8:	3601      	adds	r6, #1
 80108da:	e7f2      	b.n	80108c2 <__libc_init_array+0x1e>
 80108dc:	08013654 	.word	0x08013654
 80108e0:	08013654 	.word	0x08013654
 80108e4:	08013654 	.word	0x08013654
 80108e8:	08013658 	.word	0x08013658

080108ec <__retarget_lock_init_recursive>:
 80108ec:	4770      	bx	lr

080108ee <__retarget_lock_acquire_recursive>:
 80108ee:	4770      	bx	lr

080108f0 <__retarget_lock_release_recursive>:
 80108f0:	4770      	bx	lr

080108f2 <memcpy>:
 80108f2:	440a      	add	r2, r1
 80108f4:	4291      	cmp	r1, r2
 80108f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80108fa:	d100      	bne.n	80108fe <memcpy+0xc>
 80108fc:	4770      	bx	lr
 80108fe:	b510      	push	{r4, lr}
 8010900:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010904:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010908:	4291      	cmp	r1, r2
 801090a:	d1f9      	bne.n	8010900 <memcpy+0xe>
 801090c:	bd10      	pop	{r4, pc}

0801090e <quorem>:
 801090e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010912:	6903      	ldr	r3, [r0, #16]
 8010914:	690c      	ldr	r4, [r1, #16]
 8010916:	42a3      	cmp	r3, r4
 8010918:	4607      	mov	r7, r0
 801091a:	db7e      	blt.n	8010a1a <quorem+0x10c>
 801091c:	3c01      	subs	r4, #1
 801091e:	f101 0814 	add.w	r8, r1, #20
 8010922:	f100 0514 	add.w	r5, r0, #20
 8010926:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801092a:	9301      	str	r3, [sp, #4]
 801092c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010930:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010934:	3301      	adds	r3, #1
 8010936:	429a      	cmp	r2, r3
 8010938:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801093c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010940:	fbb2 f6f3 	udiv	r6, r2, r3
 8010944:	d331      	bcc.n	80109aa <quorem+0x9c>
 8010946:	f04f 0e00 	mov.w	lr, #0
 801094a:	4640      	mov	r0, r8
 801094c:	46ac      	mov	ip, r5
 801094e:	46f2      	mov	sl, lr
 8010950:	f850 2b04 	ldr.w	r2, [r0], #4
 8010954:	b293      	uxth	r3, r2
 8010956:	fb06 e303 	mla	r3, r6, r3, lr
 801095a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801095e:	0c1a      	lsrs	r2, r3, #16
 8010960:	b29b      	uxth	r3, r3
 8010962:	ebaa 0303 	sub.w	r3, sl, r3
 8010966:	f8dc a000 	ldr.w	sl, [ip]
 801096a:	fa13 f38a 	uxtah	r3, r3, sl
 801096e:	fb06 220e 	mla	r2, r6, lr, r2
 8010972:	9300      	str	r3, [sp, #0]
 8010974:	9b00      	ldr	r3, [sp, #0]
 8010976:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801097a:	b292      	uxth	r2, r2
 801097c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010980:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010984:	f8bd 3000 	ldrh.w	r3, [sp]
 8010988:	4581      	cmp	r9, r0
 801098a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801098e:	f84c 3b04 	str.w	r3, [ip], #4
 8010992:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010996:	d2db      	bcs.n	8010950 <quorem+0x42>
 8010998:	f855 300b 	ldr.w	r3, [r5, fp]
 801099c:	b92b      	cbnz	r3, 80109aa <quorem+0x9c>
 801099e:	9b01      	ldr	r3, [sp, #4]
 80109a0:	3b04      	subs	r3, #4
 80109a2:	429d      	cmp	r5, r3
 80109a4:	461a      	mov	r2, r3
 80109a6:	d32c      	bcc.n	8010a02 <quorem+0xf4>
 80109a8:	613c      	str	r4, [r7, #16]
 80109aa:	4638      	mov	r0, r7
 80109ac:	f001 f9a6 	bl	8011cfc <__mcmp>
 80109b0:	2800      	cmp	r0, #0
 80109b2:	db22      	blt.n	80109fa <quorem+0xec>
 80109b4:	3601      	adds	r6, #1
 80109b6:	4629      	mov	r1, r5
 80109b8:	2000      	movs	r0, #0
 80109ba:	f858 2b04 	ldr.w	r2, [r8], #4
 80109be:	f8d1 c000 	ldr.w	ip, [r1]
 80109c2:	b293      	uxth	r3, r2
 80109c4:	1ac3      	subs	r3, r0, r3
 80109c6:	0c12      	lsrs	r2, r2, #16
 80109c8:	fa13 f38c 	uxtah	r3, r3, ip
 80109cc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80109d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80109d4:	b29b      	uxth	r3, r3
 80109d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109da:	45c1      	cmp	r9, r8
 80109dc:	f841 3b04 	str.w	r3, [r1], #4
 80109e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80109e4:	d2e9      	bcs.n	80109ba <quorem+0xac>
 80109e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80109ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80109ee:	b922      	cbnz	r2, 80109fa <quorem+0xec>
 80109f0:	3b04      	subs	r3, #4
 80109f2:	429d      	cmp	r5, r3
 80109f4:	461a      	mov	r2, r3
 80109f6:	d30a      	bcc.n	8010a0e <quorem+0x100>
 80109f8:	613c      	str	r4, [r7, #16]
 80109fa:	4630      	mov	r0, r6
 80109fc:	b003      	add	sp, #12
 80109fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a02:	6812      	ldr	r2, [r2, #0]
 8010a04:	3b04      	subs	r3, #4
 8010a06:	2a00      	cmp	r2, #0
 8010a08:	d1ce      	bne.n	80109a8 <quorem+0x9a>
 8010a0a:	3c01      	subs	r4, #1
 8010a0c:	e7c9      	b.n	80109a2 <quorem+0x94>
 8010a0e:	6812      	ldr	r2, [r2, #0]
 8010a10:	3b04      	subs	r3, #4
 8010a12:	2a00      	cmp	r2, #0
 8010a14:	d1f0      	bne.n	80109f8 <quorem+0xea>
 8010a16:	3c01      	subs	r4, #1
 8010a18:	e7eb      	b.n	80109f2 <quorem+0xe4>
 8010a1a:	2000      	movs	r0, #0
 8010a1c:	e7ee      	b.n	80109fc <quorem+0xee>
	...

08010a20 <_dtoa_r>:
 8010a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a24:	ed2d 8b04 	vpush	{d8-d9}
 8010a28:	69c5      	ldr	r5, [r0, #28]
 8010a2a:	b093      	sub	sp, #76	; 0x4c
 8010a2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010a30:	ec57 6b10 	vmov	r6, r7, d0
 8010a34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010a38:	9107      	str	r1, [sp, #28]
 8010a3a:	4604      	mov	r4, r0
 8010a3c:	920a      	str	r2, [sp, #40]	; 0x28
 8010a3e:	930d      	str	r3, [sp, #52]	; 0x34
 8010a40:	b975      	cbnz	r5, 8010a60 <_dtoa_r+0x40>
 8010a42:	2010      	movs	r0, #16
 8010a44:	f000 fe2a 	bl	801169c <malloc>
 8010a48:	4602      	mov	r2, r0
 8010a4a:	61e0      	str	r0, [r4, #28]
 8010a4c:	b920      	cbnz	r0, 8010a58 <_dtoa_r+0x38>
 8010a4e:	4bae      	ldr	r3, [pc, #696]	; (8010d08 <_dtoa_r+0x2e8>)
 8010a50:	21ef      	movs	r1, #239	; 0xef
 8010a52:	48ae      	ldr	r0, [pc, #696]	; (8010d0c <_dtoa_r+0x2ec>)
 8010a54:	f001 fc5e 	bl	8012314 <__assert_func>
 8010a58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010a5c:	6005      	str	r5, [r0, #0]
 8010a5e:	60c5      	str	r5, [r0, #12]
 8010a60:	69e3      	ldr	r3, [r4, #28]
 8010a62:	6819      	ldr	r1, [r3, #0]
 8010a64:	b151      	cbz	r1, 8010a7c <_dtoa_r+0x5c>
 8010a66:	685a      	ldr	r2, [r3, #4]
 8010a68:	604a      	str	r2, [r1, #4]
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	4093      	lsls	r3, r2
 8010a6e:	608b      	str	r3, [r1, #8]
 8010a70:	4620      	mov	r0, r4
 8010a72:	f000 ff07 	bl	8011884 <_Bfree>
 8010a76:	69e3      	ldr	r3, [r4, #28]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	601a      	str	r2, [r3, #0]
 8010a7c:	1e3b      	subs	r3, r7, #0
 8010a7e:	bfbb      	ittet	lt
 8010a80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010a84:	9303      	strlt	r3, [sp, #12]
 8010a86:	2300      	movge	r3, #0
 8010a88:	2201      	movlt	r2, #1
 8010a8a:	bfac      	ite	ge
 8010a8c:	f8c8 3000 	strge.w	r3, [r8]
 8010a90:	f8c8 2000 	strlt.w	r2, [r8]
 8010a94:	4b9e      	ldr	r3, [pc, #632]	; (8010d10 <_dtoa_r+0x2f0>)
 8010a96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010a9a:	ea33 0308 	bics.w	r3, r3, r8
 8010a9e:	d11b      	bne.n	8010ad8 <_dtoa_r+0xb8>
 8010aa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010aa2:	f242 730f 	movw	r3, #9999	; 0x270f
 8010aa6:	6013      	str	r3, [r2, #0]
 8010aa8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010aac:	4333      	orrs	r3, r6
 8010aae:	f000 8593 	beq.w	80115d8 <_dtoa_r+0xbb8>
 8010ab2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ab4:	b963      	cbnz	r3, 8010ad0 <_dtoa_r+0xb0>
 8010ab6:	4b97      	ldr	r3, [pc, #604]	; (8010d14 <_dtoa_r+0x2f4>)
 8010ab8:	e027      	b.n	8010b0a <_dtoa_r+0xea>
 8010aba:	4b97      	ldr	r3, [pc, #604]	; (8010d18 <_dtoa_r+0x2f8>)
 8010abc:	9300      	str	r3, [sp, #0]
 8010abe:	3308      	adds	r3, #8
 8010ac0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010ac2:	6013      	str	r3, [r2, #0]
 8010ac4:	9800      	ldr	r0, [sp, #0]
 8010ac6:	b013      	add	sp, #76	; 0x4c
 8010ac8:	ecbd 8b04 	vpop	{d8-d9}
 8010acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ad0:	4b90      	ldr	r3, [pc, #576]	; (8010d14 <_dtoa_r+0x2f4>)
 8010ad2:	9300      	str	r3, [sp, #0]
 8010ad4:	3303      	adds	r3, #3
 8010ad6:	e7f3      	b.n	8010ac0 <_dtoa_r+0xa0>
 8010ad8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010adc:	2200      	movs	r2, #0
 8010ade:	ec51 0b17 	vmov	r0, r1, d7
 8010ae2:	eeb0 8a47 	vmov.f32	s16, s14
 8010ae6:	eef0 8a67 	vmov.f32	s17, s15
 8010aea:	2300      	movs	r3, #0
 8010aec:	f7ef fffc 	bl	8000ae8 <__aeabi_dcmpeq>
 8010af0:	4681      	mov	r9, r0
 8010af2:	b160      	cbz	r0, 8010b0e <_dtoa_r+0xee>
 8010af4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010af6:	2301      	movs	r3, #1
 8010af8:	6013      	str	r3, [r2, #0]
 8010afa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	f000 8568 	beq.w	80115d2 <_dtoa_r+0xbb2>
 8010b02:	4b86      	ldr	r3, [pc, #536]	; (8010d1c <_dtoa_r+0x2fc>)
 8010b04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010b06:	6013      	str	r3, [r2, #0]
 8010b08:	3b01      	subs	r3, #1
 8010b0a:	9300      	str	r3, [sp, #0]
 8010b0c:	e7da      	b.n	8010ac4 <_dtoa_r+0xa4>
 8010b0e:	aa10      	add	r2, sp, #64	; 0x40
 8010b10:	a911      	add	r1, sp, #68	; 0x44
 8010b12:	4620      	mov	r0, r4
 8010b14:	eeb0 0a48 	vmov.f32	s0, s16
 8010b18:	eef0 0a68 	vmov.f32	s1, s17
 8010b1c:	f001 f994 	bl	8011e48 <__d2b>
 8010b20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010b24:	4682      	mov	sl, r0
 8010b26:	2d00      	cmp	r5, #0
 8010b28:	d07f      	beq.n	8010c2a <_dtoa_r+0x20a>
 8010b2a:	ee18 3a90 	vmov	r3, s17
 8010b2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010b32:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010b36:	ec51 0b18 	vmov	r0, r1, d8
 8010b3a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010b3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010b42:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010b46:	4619      	mov	r1, r3
 8010b48:	2200      	movs	r2, #0
 8010b4a:	4b75      	ldr	r3, [pc, #468]	; (8010d20 <_dtoa_r+0x300>)
 8010b4c:	f7ef fbac 	bl	80002a8 <__aeabi_dsub>
 8010b50:	a367      	add	r3, pc, #412	; (adr r3, 8010cf0 <_dtoa_r+0x2d0>)
 8010b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b56:	f7ef fd5f 	bl	8000618 <__aeabi_dmul>
 8010b5a:	a367      	add	r3, pc, #412	; (adr r3, 8010cf8 <_dtoa_r+0x2d8>)
 8010b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b60:	f7ef fba4 	bl	80002ac <__adddf3>
 8010b64:	4606      	mov	r6, r0
 8010b66:	4628      	mov	r0, r5
 8010b68:	460f      	mov	r7, r1
 8010b6a:	f7ef fceb 	bl	8000544 <__aeabi_i2d>
 8010b6e:	a364      	add	r3, pc, #400	; (adr r3, 8010d00 <_dtoa_r+0x2e0>)
 8010b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b74:	f7ef fd50 	bl	8000618 <__aeabi_dmul>
 8010b78:	4602      	mov	r2, r0
 8010b7a:	460b      	mov	r3, r1
 8010b7c:	4630      	mov	r0, r6
 8010b7e:	4639      	mov	r1, r7
 8010b80:	f7ef fb94 	bl	80002ac <__adddf3>
 8010b84:	4606      	mov	r6, r0
 8010b86:	460f      	mov	r7, r1
 8010b88:	f7ef fff6 	bl	8000b78 <__aeabi_d2iz>
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	4683      	mov	fp, r0
 8010b90:	2300      	movs	r3, #0
 8010b92:	4630      	mov	r0, r6
 8010b94:	4639      	mov	r1, r7
 8010b96:	f7ef ffb1 	bl	8000afc <__aeabi_dcmplt>
 8010b9a:	b148      	cbz	r0, 8010bb0 <_dtoa_r+0x190>
 8010b9c:	4658      	mov	r0, fp
 8010b9e:	f7ef fcd1 	bl	8000544 <__aeabi_i2d>
 8010ba2:	4632      	mov	r2, r6
 8010ba4:	463b      	mov	r3, r7
 8010ba6:	f7ef ff9f 	bl	8000ae8 <__aeabi_dcmpeq>
 8010baa:	b908      	cbnz	r0, 8010bb0 <_dtoa_r+0x190>
 8010bac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010bb0:	f1bb 0f16 	cmp.w	fp, #22
 8010bb4:	d857      	bhi.n	8010c66 <_dtoa_r+0x246>
 8010bb6:	4b5b      	ldr	r3, [pc, #364]	; (8010d24 <_dtoa_r+0x304>)
 8010bb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc0:	ec51 0b18 	vmov	r0, r1, d8
 8010bc4:	f7ef ff9a 	bl	8000afc <__aeabi_dcmplt>
 8010bc8:	2800      	cmp	r0, #0
 8010bca:	d04e      	beq.n	8010c6a <_dtoa_r+0x24a>
 8010bcc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	930c      	str	r3, [sp, #48]	; 0x30
 8010bd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010bd6:	1b5b      	subs	r3, r3, r5
 8010bd8:	1e5a      	subs	r2, r3, #1
 8010bda:	bf45      	ittet	mi
 8010bdc:	f1c3 0301 	rsbmi	r3, r3, #1
 8010be0:	9305      	strmi	r3, [sp, #20]
 8010be2:	2300      	movpl	r3, #0
 8010be4:	2300      	movmi	r3, #0
 8010be6:	9206      	str	r2, [sp, #24]
 8010be8:	bf54      	ite	pl
 8010bea:	9305      	strpl	r3, [sp, #20]
 8010bec:	9306      	strmi	r3, [sp, #24]
 8010bee:	f1bb 0f00 	cmp.w	fp, #0
 8010bf2:	db3c      	blt.n	8010c6e <_dtoa_r+0x24e>
 8010bf4:	9b06      	ldr	r3, [sp, #24]
 8010bf6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010bfa:	445b      	add	r3, fp
 8010bfc:	9306      	str	r3, [sp, #24]
 8010bfe:	2300      	movs	r3, #0
 8010c00:	9308      	str	r3, [sp, #32]
 8010c02:	9b07      	ldr	r3, [sp, #28]
 8010c04:	2b09      	cmp	r3, #9
 8010c06:	d868      	bhi.n	8010cda <_dtoa_r+0x2ba>
 8010c08:	2b05      	cmp	r3, #5
 8010c0a:	bfc4      	itt	gt
 8010c0c:	3b04      	subgt	r3, #4
 8010c0e:	9307      	strgt	r3, [sp, #28]
 8010c10:	9b07      	ldr	r3, [sp, #28]
 8010c12:	f1a3 0302 	sub.w	r3, r3, #2
 8010c16:	bfcc      	ite	gt
 8010c18:	2500      	movgt	r5, #0
 8010c1a:	2501      	movle	r5, #1
 8010c1c:	2b03      	cmp	r3, #3
 8010c1e:	f200 8085 	bhi.w	8010d2c <_dtoa_r+0x30c>
 8010c22:	e8df f003 	tbb	[pc, r3]
 8010c26:	3b2e      	.short	0x3b2e
 8010c28:	5839      	.short	0x5839
 8010c2a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010c2e:	441d      	add	r5, r3
 8010c30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010c34:	2b20      	cmp	r3, #32
 8010c36:	bfc1      	itttt	gt
 8010c38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010c3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8010c40:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010c44:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010c48:	bfd6      	itet	le
 8010c4a:	f1c3 0320 	rsble	r3, r3, #32
 8010c4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8010c52:	fa06 f003 	lslle.w	r0, r6, r3
 8010c56:	f7ef fc65 	bl	8000524 <__aeabi_ui2d>
 8010c5a:	2201      	movs	r2, #1
 8010c5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010c60:	3d01      	subs	r5, #1
 8010c62:	920e      	str	r2, [sp, #56]	; 0x38
 8010c64:	e76f      	b.n	8010b46 <_dtoa_r+0x126>
 8010c66:	2301      	movs	r3, #1
 8010c68:	e7b3      	b.n	8010bd2 <_dtoa_r+0x1b2>
 8010c6a:	900c      	str	r0, [sp, #48]	; 0x30
 8010c6c:	e7b2      	b.n	8010bd4 <_dtoa_r+0x1b4>
 8010c6e:	9b05      	ldr	r3, [sp, #20]
 8010c70:	eba3 030b 	sub.w	r3, r3, fp
 8010c74:	9305      	str	r3, [sp, #20]
 8010c76:	f1cb 0300 	rsb	r3, fp, #0
 8010c7a:	9308      	str	r3, [sp, #32]
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c80:	e7bf      	b.n	8010c02 <_dtoa_r+0x1e2>
 8010c82:	2300      	movs	r3, #0
 8010c84:	9309      	str	r3, [sp, #36]	; 0x24
 8010c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	dc52      	bgt.n	8010d32 <_dtoa_r+0x312>
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	9301      	str	r3, [sp, #4]
 8010c90:	9304      	str	r3, [sp, #16]
 8010c92:	461a      	mov	r2, r3
 8010c94:	920a      	str	r2, [sp, #40]	; 0x28
 8010c96:	e00b      	b.n	8010cb0 <_dtoa_r+0x290>
 8010c98:	2301      	movs	r3, #1
 8010c9a:	e7f3      	b.n	8010c84 <_dtoa_r+0x264>
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8010ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ca2:	445b      	add	r3, fp
 8010ca4:	9301      	str	r3, [sp, #4]
 8010ca6:	3301      	adds	r3, #1
 8010ca8:	2b01      	cmp	r3, #1
 8010caa:	9304      	str	r3, [sp, #16]
 8010cac:	bfb8      	it	lt
 8010cae:	2301      	movlt	r3, #1
 8010cb0:	69e0      	ldr	r0, [r4, #28]
 8010cb2:	2100      	movs	r1, #0
 8010cb4:	2204      	movs	r2, #4
 8010cb6:	f102 0614 	add.w	r6, r2, #20
 8010cba:	429e      	cmp	r6, r3
 8010cbc:	d93d      	bls.n	8010d3a <_dtoa_r+0x31a>
 8010cbe:	6041      	str	r1, [r0, #4]
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f000 fd9f 	bl	8011804 <_Balloc>
 8010cc6:	9000      	str	r0, [sp, #0]
 8010cc8:	2800      	cmp	r0, #0
 8010cca:	d139      	bne.n	8010d40 <_dtoa_r+0x320>
 8010ccc:	4b16      	ldr	r3, [pc, #88]	; (8010d28 <_dtoa_r+0x308>)
 8010cce:	4602      	mov	r2, r0
 8010cd0:	f240 11af 	movw	r1, #431	; 0x1af
 8010cd4:	e6bd      	b.n	8010a52 <_dtoa_r+0x32>
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	e7e1      	b.n	8010c9e <_dtoa_r+0x27e>
 8010cda:	2501      	movs	r5, #1
 8010cdc:	2300      	movs	r3, #0
 8010cde:	9307      	str	r3, [sp, #28]
 8010ce0:	9509      	str	r5, [sp, #36]	; 0x24
 8010ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ce6:	9301      	str	r3, [sp, #4]
 8010ce8:	9304      	str	r3, [sp, #16]
 8010cea:	2200      	movs	r2, #0
 8010cec:	2312      	movs	r3, #18
 8010cee:	e7d1      	b.n	8010c94 <_dtoa_r+0x274>
 8010cf0:	636f4361 	.word	0x636f4361
 8010cf4:	3fd287a7 	.word	0x3fd287a7
 8010cf8:	8b60c8b3 	.word	0x8b60c8b3
 8010cfc:	3fc68a28 	.word	0x3fc68a28
 8010d00:	509f79fb 	.word	0x509f79fb
 8010d04:	3fd34413 	.word	0x3fd34413
 8010d08:	0801341a 	.word	0x0801341a
 8010d0c:	08013431 	.word	0x08013431
 8010d10:	7ff00000 	.word	0x7ff00000
 8010d14:	08013416 	.word	0x08013416
 8010d18:	0801340d 	.word	0x0801340d
 8010d1c:	080133ea 	.word	0x080133ea
 8010d20:	3ff80000 	.word	0x3ff80000
 8010d24:	08013520 	.word	0x08013520
 8010d28:	08013489 	.word	0x08013489
 8010d2c:	2301      	movs	r3, #1
 8010d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8010d30:	e7d7      	b.n	8010ce2 <_dtoa_r+0x2c2>
 8010d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d34:	9301      	str	r3, [sp, #4]
 8010d36:	9304      	str	r3, [sp, #16]
 8010d38:	e7ba      	b.n	8010cb0 <_dtoa_r+0x290>
 8010d3a:	3101      	adds	r1, #1
 8010d3c:	0052      	lsls	r2, r2, #1
 8010d3e:	e7ba      	b.n	8010cb6 <_dtoa_r+0x296>
 8010d40:	69e3      	ldr	r3, [r4, #28]
 8010d42:	9a00      	ldr	r2, [sp, #0]
 8010d44:	601a      	str	r2, [r3, #0]
 8010d46:	9b04      	ldr	r3, [sp, #16]
 8010d48:	2b0e      	cmp	r3, #14
 8010d4a:	f200 80a8 	bhi.w	8010e9e <_dtoa_r+0x47e>
 8010d4e:	2d00      	cmp	r5, #0
 8010d50:	f000 80a5 	beq.w	8010e9e <_dtoa_r+0x47e>
 8010d54:	f1bb 0f00 	cmp.w	fp, #0
 8010d58:	dd38      	ble.n	8010dcc <_dtoa_r+0x3ac>
 8010d5a:	4bc0      	ldr	r3, [pc, #768]	; (801105c <_dtoa_r+0x63c>)
 8010d5c:	f00b 020f 	and.w	r2, fp, #15
 8010d60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d64:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010d68:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010d6c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010d70:	d019      	beq.n	8010da6 <_dtoa_r+0x386>
 8010d72:	4bbb      	ldr	r3, [pc, #748]	; (8011060 <_dtoa_r+0x640>)
 8010d74:	ec51 0b18 	vmov	r0, r1, d8
 8010d78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010d7c:	f7ef fd76 	bl	800086c <__aeabi_ddiv>
 8010d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d84:	f008 080f 	and.w	r8, r8, #15
 8010d88:	2503      	movs	r5, #3
 8010d8a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8011060 <_dtoa_r+0x640>
 8010d8e:	f1b8 0f00 	cmp.w	r8, #0
 8010d92:	d10a      	bne.n	8010daa <_dtoa_r+0x38a>
 8010d94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d98:	4632      	mov	r2, r6
 8010d9a:	463b      	mov	r3, r7
 8010d9c:	f7ef fd66 	bl	800086c <__aeabi_ddiv>
 8010da0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010da4:	e02b      	b.n	8010dfe <_dtoa_r+0x3de>
 8010da6:	2502      	movs	r5, #2
 8010da8:	e7ef      	b.n	8010d8a <_dtoa_r+0x36a>
 8010daa:	f018 0f01 	tst.w	r8, #1
 8010dae:	d008      	beq.n	8010dc2 <_dtoa_r+0x3a2>
 8010db0:	4630      	mov	r0, r6
 8010db2:	4639      	mov	r1, r7
 8010db4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010db8:	f7ef fc2e 	bl	8000618 <__aeabi_dmul>
 8010dbc:	3501      	adds	r5, #1
 8010dbe:	4606      	mov	r6, r0
 8010dc0:	460f      	mov	r7, r1
 8010dc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010dc6:	f109 0908 	add.w	r9, r9, #8
 8010dca:	e7e0      	b.n	8010d8e <_dtoa_r+0x36e>
 8010dcc:	f000 809f 	beq.w	8010f0e <_dtoa_r+0x4ee>
 8010dd0:	f1cb 0600 	rsb	r6, fp, #0
 8010dd4:	4ba1      	ldr	r3, [pc, #644]	; (801105c <_dtoa_r+0x63c>)
 8010dd6:	4fa2      	ldr	r7, [pc, #648]	; (8011060 <_dtoa_r+0x640>)
 8010dd8:	f006 020f 	and.w	r2, r6, #15
 8010ddc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de4:	ec51 0b18 	vmov	r0, r1, d8
 8010de8:	f7ef fc16 	bl	8000618 <__aeabi_dmul>
 8010dec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010df0:	1136      	asrs	r6, r6, #4
 8010df2:	2300      	movs	r3, #0
 8010df4:	2502      	movs	r5, #2
 8010df6:	2e00      	cmp	r6, #0
 8010df8:	d17e      	bne.n	8010ef8 <_dtoa_r+0x4d8>
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d1d0      	bne.n	8010da0 <_dtoa_r+0x380>
 8010dfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e00:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	f000 8084 	beq.w	8010f12 <_dtoa_r+0x4f2>
 8010e0a:	4b96      	ldr	r3, [pc, #600]	; (8011064 <_dtoa_r+0x644>)
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	4640      	mov	r0, r8
 8010e10:	4649      	mov	r1, r9
 8010e12:	f7ef fe73 	bl	8000afc <__aeabi_dcmplt>
 8010e16:	2800      	cmp	r0, #0
 8010e18:	d07b      	beq.n	8010f12 <_dtoa_r+0x4f2>
 8010e1a:	9b04      	ldr	r3, [sp, #16]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d078      	beq.n	8010f12 <_dtoa_r+0x4f2>
 8010e20:	9b01      	ldr	r3, [sp, #4]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	dd39      	ble.n	8010e9a <_dtoa_r+0x47a>
 8010e26:	4b90      	ldr	r3, [pc, #576]	; (8011068 <_dtoa_r+0x648>)
 8010e28:	2200      	movs	r2, #0
 8010e2a:	4640      	mov	r0, r8
 8010e2c:	4649      	mov	r1, r9
 8010e2e:	f7ef fbf3 	bl	8000618 <__aeabi_dmul>
 8010e32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e36:	9e01      	ldr	r6, [sp, #4]
 8010e38:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8010e3c:	3501      	adds	r5, #1
 8010e3e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010e42:	4628      	mov	r0, r5
 8010e44:	f7ef fb7e 	bl	8000544 <__aeabi_i2d>
 8010e48:	4642      	mov	r2, r8
 8010e4a:	464b      	mov	r3, r9
 8010e4c:	f7ef fbe4 	bl	8000618 <__aeabi_dmul>
 8010e50:	4b86      	ldr	r3, [pc, #536]	; (801106c <_dtoa_r+0x64c>)
 8010e52:	2200      	movs	r2, #0
 8010e54:	f7ef fa2a 	bl	80002ac <__adddf3>
 8010e58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e60:	9303      	str	r3, [sp, #12]
 8010e62:	2e00      	cmp	r6, #0
 8010e64:	d158      	bne.n	8010f18 <_dtoa_r+0x4f8>
 8010e66:	4b82      	ldr	r3, [pc, #520]	; (8011070 <_dtoa_r+0x650>)
 8010e68:	2200      	movs	r2, #0
 8010e6a:	4640      	mov	r0, r8
 8010e6c:	4649      	mov	r1, r9
 8010e6e:	f7ef fa1b 	bl	80002a8 <__aeabi_dsub>
 8010e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010e76:	4680      	mov	r8, r0
 8010e78:	4689      	mov	r9, r1
 8010e7a:	f7ef fe5d 	bl	8000b38 <__aeabi_dcmpgt>
 8010e7e:	2800      	cmp	r0, #0
 8010e80:	f040 8296 	bne.w	80113b0 <_dtoa_r+0x990>
 8010e84:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010e88:	4640      	mov	r0, r8
 8010e8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010e8e:	4649      	mov	r1, r9
 8010e90:	f7ef fe34 	bl	8000afc <__aeabi_dcmplt>
 8010e94:	2800      	cmp	r0, #0
 8010e96:	f040 8289 	bne.w	80113ac <_dtoa_r+0x98c>
 8010e9a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010e9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	f2c0 814e 	blt.w	8011142 <_dtoa_r+0x722>
 8010ea6:	f1bb 0f0e 	cmp.w	fp, #14
 8010eaa:	f300 814a 	bgt.w	8011142 <_dtoa_r+0x722>
 8010eae:	4b6b      	ldr	r3, [pc, #428]	; (801105c <_dtoa_r+0x63c>)
 8010eb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010eb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	f280 80dc 	bge.w	8011078 <_dtoa_r+0x658>
 8010ec0:	9b04      	ldr	r3, [sp, #16]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	f300 80d8 	bgt.w	8011078 <_dtoa_r+0x658>
 8010ec8:	f040 826f 	bne.w	80113aa <_dtoa_r+0x98a>
 8010ecc:	4b68      	ldr	r3, [pc, #416]	; (8011070 <_dtoa_r+0x650>)
 8010ece:	2200      	movs	r2, #0
 8010ed0:	4640      	mov	r0, r8
 8010ed2:	4649      	mov	r1, r9
 8010ed4:	f7ef fba0 	bl	8000618 <__aeabi_dmul>
 8010ed8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010edc:	f7ef fe22 	bl	8000b24 <__aeabi_dcmpge>
 8010ee0:	9e04      	ldr	r6, [sp, #16]
 8010ee2:	4637      	mov	r7, r6
 8010ee4:	2800      	cmp	r0, #0
 8010ee6:	f040 8245 	bne.w	8011374 <_dtoa_r+0x954>
 8010eea:	9d00      	ldr	r5, [sp, #0]
 8010eec:	2331      	movs	r3, #49	; 0x31
 8010eee:	f805 3b01 	strb.w	r3, [r5], #1
 8010ef2:	f10b 0b01 	add.w	fp, fp, #1
 8010ef6:	e241      	b.n	801137c <_dtoa_r+0x95c>
 8010ef8:	07f2      	lsls	r2, r6, #31
 8010efa:	d505      	bpl.n	8010f08 <_dtoa_r+0x4e8>
 8010efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010f00:	f7ef fb8a 	bl	8000618 <__aeabi_dmul>
 8010f04:	3501      	adds	r5, #1
 8010f06:	2301      	movs	r3, #1
 8010f08:	1076      	asrs	r6, r6, #1
 8010f0a:	3708      	adds	r7, #8
 8010f0c:	e773      	b.n	8010df6 <_dtoa_r+0x3d6>
 8010f0e:	2502      	movs	r5, #2
 8010f10:	e775      	b.n	8010dfe <_dtoa_r+0x3de>
 8010f12:	9e04      	ldr	r6, [sp, #16]
 8010f14:	465f      	mov	r7, fp
 8010f16:	e792      	b.n	8010e3e <_dtoa_r+0x41e>
 8010f18:	9900      	ldr	r1, [sp, #0]
 8010f1a:	4b50      	ldr	r3, [pc, #320]	; (801105c <_dtoa_r+0x63c>)
 8010f1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010f20:	4431      	add	r1, r6
 8010f22:	9102      	str	r1, [sp, #8]
 8010f24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f26:	eeb0 9a47 	vmov.f32	s18, s14
 8010f2a:	eef0 9a67 	vmov.f32	s19, s15
 8010f2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010f32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010f36:	2900      	cmp	r1, #0
 8010f38:	d044      	beq.n	8010fc4 <_dtoa_r+0x5a4>
 8010f3a:	494e      	ldr	r1, [pc, #312]	; (8011074 <_dtoa_r+0x654>)
 8010f3c:	2000      	movs	r0, #0
 8010f3e:	f7ef fc95 	bl	800086c <__aeabi_ddiv>
 8010f42:	ec53 2b19 	vmov	r2, r3, d9
 8010f46:	f7ef f9af 	bl	80002a8 <__aeabi_dsub>
 8010f4a:	9d00      	ldr	r5, [sp, #0]
 8010f4c:	ec41 0b19 	vmov	d9, r0, r1
 8010f50:	4649      	mov	r1, r9
 8010f52:	4640      	mov	r0, r8
 8010f54:	f7ef fe10 	bl	8000b78 <__aeabi_d2iz>
 8010f58:	4606      	mov	r6, r0
 8010f5a:	f7ef faf3 	bl	8000544 <__aeabi_i2d>
 8010f5e:	4602      	mov	r2, r0
 8010f60:	460b      	mov	r3, r1
 8010f62:	4640      	mov	r0, r8
 8010f64:	4649      	mov	r1, r9
 8010f66:	f7ef f99f 	bl	80002a8 <__aeabi_dsub>
 8010f6a:	3630      	adds	r6, #48	; 0x30
 8010f6c:	f805 6b01 	strb.w	r6, [r5], #1
 8010f70:	ec53 2b19 	vmov	r2, r3, d9
 8010f74:	4680      	mov	r8, r0
 8010f76:	4689      	mov	r9, r1
 8010f78:	f7ef fdc0 	bl	8000afc <__aeabi_dcmplt>
 8010f7c:	2800      	cmp	r0, #0
 8010f7e:	d164      	bne.n	801104a <_dtoa_r+0x62a>
 8010f80:	4642      	mov	r2, r8
 8010f82:	464b      	mov	r3, r9
 8010f84:	4937      	ldr	r1, [pc, #220]	; (8011064 <_dtoa_r+0x644>)
 8010f86:	2000      	movs	r0, #0
 8010f88:	f7ef f98e 	bl	80002a8 <__aeabi_dsub>
 8010f8c:	ec53 2b19 	vmov	r2, r3, d9
 8010f90:	f7ef fdb4 	bl	8000afc <__aeabi_dcmplt>
 8010f94:	2800      	cmp	r0, #0
 8010f96:	f040 80b6 	bne.w	8011106 <_dtoa_r+0x6e6>
 8010f9a:	9b02      	ldr	r3, [sp, #8]
 8010f9c:	429d      	cmp	r5, r3
 8010f9e:	f43f af7c 	beq.w	8010e9a <_dtoa_r+0x47a>
 8010fa2:	4b31      	ldr	r3, [pc, #196]	; (8011068 <_dtoa_r+0x648>)
 8010fa4:	ec51 0b19 	vmov	r0, r1, d9
 8010fa8:	2200      	movs	r2, #0
 8010faa:	f7ef fb35 	bl	8000618 <__aeabi_dmul>
 8010fae:	4b2e      	ldr	r3, [pc, #184]	; (8011068 <_dtoa_r+0x648>)
 8010fb0:	ec41 0b19 	vmov	d9, r0, r1
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	4640      	mov	r0, r8
 8010fb8:	4649      	mov	r1, r9
 8010fba:	f7ef fb2d 	bl	8000618 <__aeabi_dmul>
 8010fbe:	4680      	mov	r8, r0
 8010fc0:	4689      	mov	r9, r1
 8010fc2:	e7c5      	b.n	8010f50 <_dtoa_r+0x530>
 8010fc4:	ec51 0b17 	vmov	r0, r1, d7
 8010fc8:	f7ef fb26 	bl	8000618 <__aeabi_dmul>
 8010fcc:	9b02      	ldr	r3, [sp, #8]
 8010fce:	9d00      	ldr	r5, [sp, #0]
 8010fd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8010fd2:	ec41 0b19 	vmov	d9, r0, r1
 8010fd6:	4649      	mov	r1, r9
 8010fd8:	4640      	mov	r0, r8
 8010fda:	f7ef fdcd 	bl	8000b78 <__aeabi_d2iz>
 8010fde:	4606      	mov	r6, r0
 8010fe0:	f7ef fab0 	bl	8000544 <__aeabi_i2d>
 8010fe4:	3630      	adds	r6, #48	; 0x30
 8010fe6:	4602      	mov	r2, r0
 8010fe8:	460b      	mov	r3, r1
 8010fea:	4640      	mov	r0, r8
 8010fec:	4649      	mov	r1, r9
 8010fee:	f7ef f95b 	bl	80002a8 <__aeabi_dsub>
 8010ff2:	f805 6b01 	strb.w	r6, [r5], #1
 8010ff6:	9b02      	ldr	r3, [sp, #8]
 8010ff8:	429d      	cmp	r5, r3
 8010ffa:	4680      	mov	r8, r0
 8010ffc:	4689      	mov	r9, r1
 8010ffe:	f04f 0200 	mov.w	r2, #0
 8011002:	d124      	bne.n	801104e <_dtoa_r+0x62e>
 8011004:	4b1b      	ldr	r3, [pc, #108]	; (8011074 <_dtoa_r+0x654>)
 8011006:	ec51 0b19 	vmov	r0, r1, d9
 801100a:	f7ef f94f 	bl	80002ac <__adddf3>
 801100e:	4602      	mov	r2, r0
 8011010:	460b      	mov	r3, r1
 8011012:	4640      	mov	r0, r8
 8011014:	4649      	mov	r1, r9
 8011016:	f7ef fd8f 	bl	8000b38 <__aeabi_dcmpgt>
 801101a:	2800      	cmp	r0, #0
 801101c:	d173      	bne.n	8011106 <_dtoa_r+0x6e6>
 801101e:	ec53 2b19 	vmov	r2, r3, d9
 8011022:	4914      	ldr	r1, [pc, #80]	; (8011074 <_dtoa_r+0x654>)
 8011024:	2000      	movs	r0, #0
 8011026:	f7ef f93f 	bl	80002a8 <__aeabi_dsub>
 801102a:	4602      	mov	r2, r0
 801102c:	460b      	mov	r3, r1
 801102e:	4640      	mov	r0, r8
 8011030:	4649      	mov	r1, r9
 8011032:	f7ef fd63 	bl	8000afc <__aeabi_dcmplt>
 8011036:	2800      	cmp	r0, #0
 8011038:	f43f af2f 	beq.w	8010e9a <_dtoa_r+0x47a>
 801103c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801103e:	1e6b      	subs	r3, r5, #1
 8011040:	930f      	str	r3, [sp, #60]	; 0x3c
 8011042:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011046:	2b30      	cmp	r3, #48	; 0x30
 8011048:	d0f8      	beq.n	801103c <_dtoa_r+0x61c>
 801104a:	46bb      	mov	fp, r7
 801104c:	e04a      	b.n	80110e4 <_dtoa_r+0x6c4>
 801104e:	4b06      	ldr	r3, [pc, #24]	; (8011068 <_dtoa_r+0x648>)
 8011050:	f7ef fae2 	bl	8000618 <__aeabi_dmul>
 8011054:	4680      	mov	r8, r0
 8011056:	4689      	mov	r9, r1
 8011058:	e7bd      	b.n	8010fd6 <_dtoa_r+0x5b6>
 801105a:	bf00      	nop
 801105c:	08013520 	.word	0x08013520
 8011060:	080134f8 	.word	0x080134f8
 8011064:	3ff00000 	.word	0x3ff00000
 8011068:	40240000 	.word	0x40240000
 801106c:	401c0000 	.word	0x401c0000
 8011070:	40140000 	.word	0x40140000
 8011074:	3fe00000 	.word	0x3fe00000
 8011078:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801107c:	9d00      	ldr	r5, [sp, #0]
 801107e:	4642      	mov	r2, r8
 8011080:	464b      	mov	r3, r9
 8011082:	4630      	mov	r0, r6
 8011084:	4639      	mov	r1, r7
 8011086:	f7ef fbf1 	bl	800086c <__aeabi_ddiv>
 801108a:	f7ef fd75 	bl	8000b78 <__aeabi_d2iz>
 801108e:	9001      	str	r0, [sp, #4]
 8011090:	f7ef fa58 	bl	8000544 <__aeabi_i2d>
 8011094:	4642      	mov	r2, r8
 8011096:	464b      	mov	r3, r9
 8011098:	f7ef fabe 	bl	8000618 <__aeabi_dmul>
 801109c:	4602      	mov	r2, r0
 801109e:	460b      	mov	r3, r1
 80110a0:	4630      	mov	r0, r6
 80110a2:	4639      	mov	r1, r7
 80110a4:	f7ef f900 	bl	80002a8 <__aeabi_dsub>
 80110a8:	9e01      	ldr	r6, [sp, #4]
 80110aa:	9f04      	ldr	r7, [sp, #16]
 80110ac:	3630      	adds	r6, #48	; 0x30
 80110ae:	f805 6b01 	strb.w	r6, [r5], #1
 80110b2:	9e00      	ldr	r6, [sp, #0]
 80110b4:	1bae      	subs	r6, r5, r6
 80110b6:	42b7      	cmp	r7, r6
 80110b8:	4602      	mov	r2, r0
 80110ba:	460b      	mov	r3, r1
 80110bc:	d134      	bne.n	8011128 <_dtoa_r+0x708>
 80110be:	f7ef f8f5 	bl	80002ac <__adddf3>
 80110c2:	4642      	mov	r2, r8
 80110c4:	464b      	mov	r3, r9
 80110c6:	4606      	mov	r6, r0
 80110c8:	460f      	mov	r7, r1
 80110ca:	f7ef fd35 	bl	8000b38 <__aeabi_dcmpgt>
 80110ce:	b9c8      	cbnz	r0, 8011104 <_dtoa_r+0x6e4>
 80110d0:	4642      	mov	r2, r8
 80110d2:	464b      	mov	r3, r9
 80110d4:	4630      	mov	r0, r6
 80110d6:	4639      	mov	r1, r7
 80110d8:	f7ef fd06 	bl	8000ae8 <__aeabi_dcmpeq>
 80110dc:	b110      	cbz	r0, 80110e4 <_dtoa_r+0x6c4>
 80110de:	9b01      	ldr	r3, [sp, #4]
 80110e0:	07db      	lsls	r3, r3, #31
 80110e2:	d40f      	bmi.n	8011104 <_dtoa_r+0x6e4>
 80110e4:	4651      	mov	r1, sl
 80110e6:	4620      	mov	r0, r4
 80110e8:	f000 fbcc 	bl	8011884 <_Bfree>
 80110ec:	2300      	movs	r3, #0
 80110ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110f0:	702b      	strb	r3, [r5, #0]
 80110f2:	f10b 0301 	add.w	r3, fp, #1
 80110f6:	6013      	str	r3, [r2, #0]
 80110f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	f43f ace2 	beq.w	8010ac4 <_dtoa_r+0xa4>
 8011100:	601d      	str	r5, [r3, #0]
 8011102:	e4df      	b.n	8010ac4 <_dtoa_r+0xa4>
 8011104:	465f      	mov	r7, fp
 8011106:	462b      	mov	r3, r5
 8011108:	461d      	mov	r5, r3
 801110a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801110e:	2a39      	cmp	r2, #57	; 0x39
 8011110:	d106      	bne.n	8011120 <_dtoa_r+0x700>
 8011112:	9a00      	ldr	r2, [sp, #0]
 8011114:	429a      	cmp	r2, r3
 8011116:	d1f7      	bne.n	8011108 <_dtoa_r+0x6e8>
 8011118:	9900      	ldr	r1, [sp, #0]
 801111a:	2230      	movs	r2, #48	; 0x30
 801111c:	3701      	adds	r7, #1
 801111e:	700a      	strb	r2, [r1, #0]
 8011120:	781a      	ldrb	r2, [r3, #0]
 8011122:	3201      	adds	r2, #1
 8011124:	701a      	strb	r2, [r3, #0]
 8011126:	e790      	b.n	801104a <_dtoa_r+0x62a>
 8011128:	4ba3      	ldr	r3, [pc, #652]	; (80113b8 <_dtoa_r+0x998>)
 801112a:	2200      	movs	r2, #0
 801112c:	f7ef fa74 	bl	8000618 <__aeabi_dmul>
 8011130:	2200      	movs	r2, #0
 8011132:	2300      	movs	r3, #0
 8011134:	4606      	mov	r6, r0
 8011136:	460f      	mov	r7, r1
 8011138:	f7ef fcd6 	bl	8000ae8 <__aeabi_dcmpeq>
 801113c:	2800      	cmp	r0, #0
 801113e:	d09e      	beq.n	801107e <_dtoa_r+0x65e>
 8011140:	e7d0      	b.n	80110e4 <_dtoa_r+0x6c4>
 8011142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011144:	2a00      	cmp	r2, #0
 8011146:	f000 80ca 	beq.w	80112de <_dtoa_r+0x8be>
 801114a:	9a07      	ldr	r2, [sp, #28]
 801114c:	2a01      	cmp	r2, #1
 801114e:	f300 80ad 	bgt.w	80112ac <_dtoa_r+0x88c>
 8011152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011154:	2a00      	cmp	r2, #0
 8011156:	f000 80a5 	beq.w	80112a4 <_dtoa_r+0x884>
 801115a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801115e:	9e08      	ldr	r6, [sp, #32]
 8011160:	9d05      	ldr	r5, [sp, #20]
 8011162:	9a05      	ldr	r2, [sp, #20]
 8011164:	441a      	add	r2, r3
 8011166:	9205      	str	r2, [sp, #20]
 8011168:	9a06      	ldr	r2, [sp, #24]
 801116a:	2101      	movs	r1, #1
 801116c:	441a      	add	r2, r3
 801116e:	4620      	mov	r0, r4
 8011170:	9206      	str	r2, [sp, #24]
 8011172:	f000 fc3d 	bl	80119f0 <__i2b>
 8011176:	4607      	mov	r7, r0
 8011178:	b165      	cbz	r5, 8011194 <_dtoa_r+0x774>
 801117a:	9b06      	ldr	r3, [sp, #24]
 801117c:	2b00      	cmp	r3, #0
 801117e:	dd09      	ble.n	8011194 <_dtoa_r+0x774>
 8011180:	42ab      	cmp	r3, r5
 8011182:	9a05      	ldr	r2, [sp, #20]
 8011184:	bfa8      	it	ge
 8011186:	462b      	movge	r3, r5
 8011188:	1ad2      	subs	r2, r2, r3
 801118a:	9205      	str	r2, [sp, #20]
 801118c:	9a06      	ldr	r2, [sp, #24]
 801118e:	1aed      	subs	r5, r5, r3
 8011190:	1ad3      	subs	r3, r2, r3
 8011192:	9306      	str	r3, [sp, #24]
 8011194:	9b08      	ldr	r3, [sp, #32]
 8011196:	b1f3      	cbz	r3, 80111d6 <_dtoa_r+0x7b6>
 8011198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801119a:	2b00      	cmp	r3, #0
 801119c:	f000 80a3 	beq.w	80112e6 <_dtoa_r+0x8c6>
 80111a0:	2e00      	cmp	r6, #0
 80111a2:	dd10      	ble.n	80111c6 <_dtoa_r+0x7a6>
 80111a4:	4639      	mov	r1, r7
 80111a6:	4632      	mov	r2, r6
 80111a8:	4620      	mov	r0, r4
 80111aa:	f000 fce1 	bl	8011b70 <__pow5mult>
 80111ae:	4652      	mov	r2, sl
 80111b0:	4601      	mov	r1, r0
 80111b2:	4607      	mov	r7, r0
 80111b4:	4620      	mov	r0, r4
 80111b6:	f000 fc31 	bl	8011a1c <__multiply>
 80111ba:	4651      	mov	r1, sl
 80111bc:	4680      	mov	r8, r0
 80111be:	4620      	mov	r0, r4
 80111c0:	f000 fb60 	bl	8011884 <_Bfree>
 80111c4:	46c2      	mov	sl, r8
 80111c6:	9b08      	ldr	r3, [sp, #32]
 80111c8:	1b9a      	subs	r2, r3, r6
 80111ca:	d004      	beq.n	80111d6 <_dtoa_r+0x7b6>
 80111cc:	4651      	mov	r1, sl
 80111ce:	4620      	mov	r0, r4
 80111d0:	f000 fcce 	bl	8011b70 <__pow5mult>
 80111d4:	4682      	mov	sl, r0
 80111d6:	2101      	movs	r1, #1
 80111d8:	4620      	mov	r0, r4
 80111da:	f000 fc09 	bl	80119f0 <__i2b>
 80111de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	4606      	mov	r6, r0
 80111e4:	f340 8081 	ble.w	80112ea <_dtoa_r+0x8ca>
 80111e8:	461a      	mov	r2, r3
 80111ea:	4601      	mov	r1, r0
 80111ec:	4620      	mov	r0, r4
 80111ee:	f000 fcbf 	bl	8011b70 <__pow5mult>
 80111f2:	9b07      	ldr	r3, [sp, #28]
 80111f4:	2b01      	cmp	r3, #1
 80111f6:	4606      	mov	r6, r0
 80111f8:	dd7a      	ble.n	80112f0 <_dtoa_r+0x8d0>
 80111fa:	f04f 0800 	mov.w	r8, #0
 80111fe:	6933      	ldr	r3, [r6, #16]
 8011200:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011204:	6918      	ldr	r0, [r3, #16]
 8011206:	f000 fba5 	bl	8011954 <__hi0bits>
 801120a:	f1c0 0020 	rsb	r0, r0, #32
 801120e:	9b06      	ldr	r3, [sp, #24]
 8011210:	4418      	add	r0, r3
 8011212:	f010 001f 	ands.w	r0, r0, #31
 8011216:	f000 8094 	beq.w	8011342 <_dtoa_r+0x922>
 801121a:	f1c0 0320 	rsb	r3, r0, #32
 801121e:	2b04      	cmp	r3, #4
 8011220:	f340 8085 	ble.w	801132e <_dtoa_r+0x90e>
 8011224:	9b05      	ldr	r3, [sp, #20]
 8011226:	f1c0 001c 	rsb	r0, r0, #28
 801122a:	4403      	add	r3, r0
 801122c:	9305      	str	r3, [sp, #20]
 801122e:	9b06      	ldr	r3, [sp, #24]
 8011230:	4403      	add	r3, r0
 8011232:	4405      	add	r5, r0
 8011234:	9306      	str	r3, [sp, #24]
 8011236:	9b05      	ldr	r3, [sp, #20]
 8011238:	2b00      	cmp	r3, #0
 801123a:	dd05      	ble.n	8011248 <_dtoa_r+0x828>
 801123c:	4651      	mov	r1, sl
 801123e:	461a      	mov	r2, r3
 8011240:	4620      	mov	r0, r4
 8011242:	f000 fcef 	bl	8011c24 <__lshift>
 8011246:	4682      	mov	sl, r0
 8011248:	9b06      	ldr	r3, [sp, #24]
 801124a:	2b00      	cmp	r3, #0
 801124c:	dd05      	ble.n	801125a <_dtoa_r+0x83a>
 801124e:	4631      	mov	r1, r6
 8011250:	461a      	mov	r2, r3
 8011252:	4620      	mov	r0, r4
 8011254:	f000 fce6 	bl	8011c24 <__lshift>
 8011258:	4606      	mov	r6, r0
 801125a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801125c:	2b00      	cmp	r3, #0
 801125e:	d072      	beq.n	8011346 <_dtoa_r+0x926>
 8011260:	4631      	mov	r1, r6
 8011262:	4650      	mov	r0, sl
 8011264:	f000 fd4a 	bl	8011cfc <__mcmp>
 8011268:	2800      	cmp	r0, #0
 801126a:	da6c      	bge.n	8011346 <_dtoa_r+0x926>
 801126c:	2300      	movs	r3, #0
 801126e:	4651      	mov	r1, sl
 8011270:	220a      	movs	r2, #10
 8011272:	4620      	mov	r0, r4
 8011274:	f000 fb28 	bl	80118c8 <__multadd>
 8011278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801127a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801127e:	4682      	mov	sl, r0
 8011280:	2b00      	cmp	r3, #0
 8011282:	f000 81b0 	beq.w	80115e6 <_dtoa_r+0xbc6>
 8011286:	2300      	movs	r3, #0
 8011288:	4639      	mov	r1, r7
 801128a:	220a      	movs	r2, #10
 801128c:	4620      	mov	r0, r4
 801128e:	f000 fb1b 	bl	80118c8 <__multadd>
 8011292:	9b01      	ldr	r3, [sp, #4]
 8011294:	2b00      	cmp	r3, #0
 8011296:	4607      	mov	r7, r0
 8011298:	f300 8096 	bgt.w	80113c8 <_dtoa_r+0x9a8>
 801129c:	9b07      	ldr	r3, [sp, #28]
 801129e:	2b02      	cmp	r3, #2
 80112a0:	dc59      	bgt.n	8011356 <_dtoa_r+0x936>
 80112a2:	e091      	b.n	80113c8 <_dtoa_r+0x9a8>
 80112a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80112a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80112aa:	e758      	b.n	801115e <_dtoa_r+0x73e>
 80112ac:	9b04      	ldr	r3, [sp, #16]
 80112ae:	1e5e      	subs	r6, r3, #1
 80112b0:	9b08      	ldr	r3, [sp, #32]
 80112b2:	42b3      	cmp	r3, r6
 80112b4:	bfbf      	itttt	lt
 80112b6:	9b08      	ldrlt	r3, [sp, #32]
 80112b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80112ba:	9608      	strlt	r6, [sp, #32]
 80112bc:	1af3      	sublt	r3, r6, r3
 80112be:	bfb4      	ite	lt
 80112c0:	18d2      	addlt	r2, r2, r3
 80112c2:	1b9e      	subge	r6, r3, r6
 80112c4:	9b04      	ldr	r3, [sp, #16]
 80112c6:	bfbc      	itt	lt
 80112c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80112ca:	2600      	movlt	r6, #0
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	bfb7      	itett	lt
 80112d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80112d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80112d8:	1a9d      	sublt	r5, r3, r2
 80112da:	2300      	movlt	r3, #0
 80112dc:	e741      	b.n	8011162 <_dtoa_r+0x742>
 80112de:	9e08      	ldr	r6, [sp, #32]
 80112e0:	9d05      	ldr	r5, [sp, #20]
 80112e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80112e4:	e748      	b.n	8011178 <_dtoa_r+0x758>
 80112e6:	9a08      	ldr	r2, [sp, #32]
 80112e8:	e770      	b.n	80111cc <_dtoa_r+0x7ac>
 80112ea:	9b07      	ldr	r3, [sp, #28]
 80112ec:	2b01      	cmp	r3, #1
 80112ee:	dc19      	bgt.n	8011324 <_dtoa_r+0x904>
 80112f0:	9b02      	ldr	r3, [sp, #8]
 80112f2:	b9bb      	cbnz	r3, 8011324 <_dtoa_r+0x904>
 80112f4:	9b03      	ldr	r3, [sp, #12]
 80112f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80112fa:	b99b      	cbnz	r3, 8011324 <_dtoa_r+0x904>
 80112fc:	9b03      	ldr	r3, [sp, #12]
 80112fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011302:	0d1b      	lsrs	r3, r3, #20
 8011304:	051b      	lsls	r3, r3, #20
 8011306:	b183      	cbz	r3, 801132a <_dtoa_r+0x90a>
 8011308:	9b05      	ldr	r3, [sp, #20]
 801130a:	3301      	adds	r3, #1
 801130c:	9305      	str	r3, [sp, #20]
 801130e:	9b06      	ldr	r3, [sp, #24]
 8011310:	3301      	adds	r3, #1
 8011312:	9306      	str	r3, [sp, #24]
 8011314:	f04f 0801 	mov.w	r8, #1
 8011318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801131a:	2b00      	cmp	r3, #0
 801131c:	f47f af6f 	bne.w	80111fe <_dtoa_r+0x7de>
 8011320:	2001      	movs	r0, #1
 8011322:	e774      	b.n	801120e <_dtoa_r+0x7ee>
 8011324:	f04f 0800 	mov.w	r8, #0
 8011328:	e7f6      	b.n	8011318 <_dtoa_r+0x8f8>
 801132a:	4698      	mov	r8, r3
 801132c:	e7f4      	b.n	8011318 <_dtoa_r+0x8f8>
 801132e:	d082      	beq.n	8011236 <_dtoa_r+0x816>
 8011330:	9a05      	ldr	r2, [sp, #20]
 8011332:	331c      	adds	r3, #28
 8011334:	441a      	add	r2, r3
 8011336:	9205      	str	r2, [sp, #20]
 8011338:	9a06      	ldr	r2, [sp, #24]
 801133a:	441a      	add	r2, r3
 801133c:	441d      	add	r5, r3
 801133e:	9206      	str	r2, [sp, #24]
 8011340:	e779      	b.n	8011236 <_dtoa_r+0x816>
 8011342:	4603      	mov	r3, r0
 8011344:	e7f4      	b.n	8011330 <_dtoa_r+0x910>
 8011346:	9b04      	ldr	r3, [sp, #16]
 8011348:	2b00      	cmp	r3, #0
 801134a:	dc37      	bgt.n	80113bc <_dtoa_r+0x99c>
 801134c:	9b07      	ldr	r3, [sp, #28]
 801134e:	2b02      	cmp	r3, #2
 8011350:	dd34      	ble.n	80113bc <_dtoa_r+0x99c>
 8011352:	9b04      	ldr	r3, [sp, #16]
 8011354:	9301      	str	r3, [sp, #4]
 8011356:	9b01      	ldr	r3, [sp, #4]
 8011358:	b963      	cbnz	r3, 8011374 <_dtoa_r+0x954>
 801135a:	4631      	mov	r1, r6
 801135c:	2205      	movs	r2, #5
 801135e:	4620      	mov	r0, r4
 8011360:	f000 fab2 	bl	80118c8 <__multadd>
 8011364:	4601      	mov	r1, r0
 8011366:	4606      	mov	r6, r0
 8011368:	4650      	mov	r0, sl
 801136a:	f000 fcc7 	bl	8011cfc <__mcmp>
 801136e:	2800      	cmp	r0, #0
 8011370:	f73f adbb 	bgt.w	8010eea <_dtoa_r+0x4ca>
 8011374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011376:	9d00      	ldr	r5, [sp, #0]
 8011378:	ea6f 0b03 	mvn.w	fp, r3
 801137c:	f04f 0800 	mov.w	r8, #0
 8011380:	4631      	mov	r1, r6
 8011382:	4620      	mov	r0, r4
 8011384:	f000 fa7e 	bl	8011884 <_Bfree>
 8011388:	2f00      	cmp	r7, #0
 801138a:	f43f aeab 	beq.w	80110e4 <_dtoa_r+0x6c4>
 801138e:	f1b8 0f00 	cmp.w	r8, #0
 8011392:	d005      	beq.n	80113a0 <_dtoa_r+0x980>
 8011394:	45b8      	cmp	r8, r7
 8011396:	d003      	beq.n	80113a0 <_dtoa_r+0x980>
 8011398:	4641      	mov	r1, r8
 801139a:	4620      	mov	r0, r4
 801139c:	f000 fa72 	bl	8011884 <_Bfree>
 80113a0:	4639      	mov	r1, r7
 80113a2:	4620      	mov	r0, r4
 80113a4:	f000 fa6e 	bl	8011884 <_Bfree>
 80113a8:	e69c      	b.n	80110e4 <_dtoa_r+0x6c4>
 80113aa:	2600      	movs	r6, #0
 80113ac:	4637      	mov	r7, r6
 80113ae:	e7e1      	b.n	8011374 <_dtoa_r+0x954>
 80113b0:	46bb      	mov	fp, r7
 80113b2:	4637      	mov	r7, r6
 80113b4:	e599      	b.n	8010eea <_dtoa_r+0x4ca>
 80113b6:	bf00      	nop
 80113b8:	40240000 	.word	0x40240000
 80113bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113be:	2b00      	cmp	r3, #0
 80113c0:	f000 80c8 	beq.w	8011554 <_dtoa_r+0xb34>
 80113c4:	9b04      	ldr	r3, [sp, #16]
 80113c6:	9301      	str	r3, [sp, #4]
 80113c8:	2d00      	cmp	r5, #0
 80113ca:	dd05      	ble.n	80113d8 <_dtoa_r+0x9b8>
 80113cc:	4639      	mov	r1, r7
 80113ce:	462a      	mov	r2, r5
 80113d0:	4620      	mov	r0, r4
 80113d2:	f000 fc27 	bl	8011c24 <__lshift>
 80113d6:	4607      	mov	r7, r0
 80113d8:	f1b8 0f00 	cmp.w	r8, #0
 80113dc:	d05b      	beq.n	8011496 <_dtoa_r+0xa76>
 80113de:	6879      	ldr	r1, [r7, #4]
 80113e0:	4620      	mov	r0, r4
 80113e2:	f000 fa0f 	bl	8011804 <_Balloc>
 80113e6:	4605      	mov	r5, r0
 80113e8:	b928      	cbnz	r0, 80113f6 <_dtoa_r+0x9d6>
 80113ea:	4b83      	ldr	r3, [pc, #524]	; (80115f8 <_dtoa_r+0xbd8>)
 80113ec:	4602      	mov	r2, r0
 80113ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 80113f2:	f7ff bb2e 	b.w	8010a52 <_dtoa_r+0x32>
 80113f6:	693a      	ldr	r2, [r7, #16]
 80113f8:	3202      	adds	r2, #2
 80113fa:	0092      	lsls	r2, r2, #2
 80113fc:	f107 010c 	add.w	r1, r7, #12
 8011400:	300c      	adds	r0, #12
 8011402:	f7ff fa76 	bl	80108f2 <memcpy>
 8011406:	2201      	movs	r2, #1
 8011408:	4629      	mov	r1, r5
 801140a:	4620      	mov	r0, r4
 801140c:	f000 fc0a 	bl	8011c24 <__lshift>
 8011410:	9b00      	ldr	r3, [sp, #0]
 8011412:	3301      	adds	r3, #1
 8011414:	9304      	str	r3, [sp, #16]
 8011416:	e9dd 2300 	ldrd	r2, r3, [sp]
 801141a:	4413      	add	r3, r2
 801141c:	9308      	str	r3, [sp, #32]
 801141e:	9b02      	ldr	r3, [sp, #8]
 8011420:	f003 0301 	and.w	r3, r3, #1
 8011424:	46b8      	mov	r8, r7
 8011426:	9306      	str	r3, [sp, #24]
 8011428:	4607      	mov	r7, r0
 801142a:	9b04      	ldr	r3, [sp, #16]
 801142c:	4631      	mov	r1, r6
 801142e:	3b01      	subs	r3, #1
 8011430:	4650      	mov	r0, sl
 8011432:	9301      	str	r3, [sp, #4]
 8011434:	f7ff fa6b 	bl	801090e <quorem>
 8011438:	4641      	mov	r1, r8
 801143a:	9002      	str	r0, [sp, #8]
 801143c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011440:	4650      	mov	r0, sl
 8011442:	f000 fc5b 	bl	8011cfc <__mcmp>
 8011446:	463a      	mov	r2, r7
 8011448:	9005      	str	r0, [sp, #20]
 801144a:	4631      	mov	r1, r6
 801144c:	4620      	mov	r0, r4
 801144e:	f000 fc71 	bl	8011d34 <__mdiff>
 8011452:	68c2      	ldr	r2, [r0, #12]
 8011454:	4605      	mov	r5, r0
 8011456:	bb02      	cbnz	r2, 801149a <_dtoa_r+0xa7a>
 8011458:	4601      	mov	r1, r0
 801145a:	4650      	mov	r0, sl
 801145c:	f000 fc4e 	bl	8011cfc <__mcmp>
 8011460:	4602      	mov	r2, r0
 8011462:	4629      	mov	r1, r5
 8011464:	4620      	mov	r0, r4
 8011466:	9209      	str	r2, [sp, #36]	; 0x24
 8011468:	f000 fa0c 	bl	8011884 <_Bfree>
 801146c:	9b07      	ldr	r3, [sp, #28]
 801146e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011470:	9d04      	ldr	r5, [sp, #16]
 8011472:	ea43 0102 	orr.w	r1, r3, r2
 8011476:	9b06      	ldr	r3, [sp, #24]
 8011478:	4319      	orrs	r1, r3
 801147a:	d110      	bne.n	801149e <_dtoa_r+0xa7e>
 801147c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011480:	d029      	beq.n	80114d6 <_dtoa_r+0xab6>
 8011482:	9b05      	ldr	r3, [sp, #20]
 8011484:	2b00      	cmp	r3, #0
 8011486:	dd02      	ble.n	801148e <_dtoa_r+0xa6e>
 8011488:	9b02      	ldr	r3, [sp, #8]
 801148a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801148e:	9b01      	ldr	r3, [sp, #4]
 8011490:	f883 9000 	strb.w	r9, [r3]
 8011494:	e774      	b.n	8011380 <_dtoa_r+0x960>
 8011496:	4638      	mov	r0, r7
 8011498:	e7ba      	b.n	8011410 <_dtoa_r+0x9f0>
 801149a:	2201      	movs	r2, #1
 801149c:	e7e1      	b.n	8011462 <_dtoa_r+0xa42>
 801149e:	9b05      	ldr	r3, [sp, #20]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	db04      	blt.n	80114ae <_dtoa_r+0xa8e>
 80114a4:	9907      	ldr	r1, [sp, #28]
 80114a6:	430b      	orrs	r3, r1
 80114a8:	9906      	ldr	r1, [sp, #24]
 80114aa:	430b      	orrs	r3, r1
 80114ac:	d120      	bne.n	80114f0 <_dtoa_r+0xad0>
 80114ae:	2a00      	cmp	r2, #0
 80114b0:	dded      	ble.n	801148e <_dtoa_r+0xa6e>
 80114b2:	4651      	mov	r1, sl
 80114b4:	2201      	movs	r2, #1
 80114b6:	4620      	mov	r0, r4
 80114b8:	f000 fbb4 	bl	8011c24 <__lshift>
 80114bc:	4631      	mov	r1, r6
 80114be:	4682      	mov	sl, r0
 80114c0:	f000 fc1c 	bl	8011cfc <__mcmp>
 80114c4:	2800      	cmp	r0, #0
 80114c6:	dc03      	bgt.n	80114d0 <_dtoa_r+0xab0>
 80114c8:	d1e1      	bne.n	801148e <_dtoa_r+0xa6e>
 80114ca:	f019 0f01 	tst.w	r9, #1
 80114ce:	d0de      	beq.n	801148e <_dtoa_r+0xa6e>
 80114d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80114d4:	d1d8      	bne.n	8011488 <_dtoa_r+0xa68>
 80114d6:	9a01      	ldr	r2, [sp, #4]
 80114d8:	2339      	movs	r3, #57	; 0x39
 80114da:	7013      	strb	r3, [r2, #0]
 80114dc:	462b      	mov	r3, r5
 80114de:	461d      	mov	r5, r3
 80114e0:	3b01      	subs	r3, #1
 80114e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80114e6:	2a39      	cmp	r2, #57	; 0x39
 80114e8:	d06c      	beq.n	80115c4 <_dtoa_r+0xba4>
 80114ea:	3201      	adds	r2, #1
 80114ec:	701a      	strb	r2, [r3, #0]
 80114ee:	e747      	b.n	8011380 <_dtoa_r+0x960>
 80114f0:	2a00      	cmp	r2, #0
 80114f2:	dd07      	ble.n	8011504 <_dtoa_r+0xae4>
 80114f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80114f8:	d0ed      	beq.n	80114d6 <_dtoa_r+0xab6>
 80114fa:	9a01      	ldr	r2, [sp, #4]
 80114fc:	f109 0301 	add.w	r3, r9, #1
 8011500:	7013      	strb	r3, [r2, #0]
 8011502:	e73d      	b.n	8011380 <_dtoa_r+0x960>
 8011504:	9b04      	ldr	r3, [sp, #16]
 8011506:	9a08      	ldr	r2, [sp, #32]
 8011508:	f803 9c01 	strb.w	r9, [r3, #-1]
 801150c:	4293      	cmp	r3, r2
 801150e:	d043      	beq.n	8011598 <_dtoa_r+0xb78>
 8011510:	4651      	mov	r1, sl
 8011512:	2300      	movs	r3, #0
 8011514:	220a      	movs	r2, #10
 8011516:	4620      	mov	r0, r4
 8011518:	f000 f9d6 	bl	80118c8 <__multadd>
 801151c:	45b8      	cmp	r8, r7
 801151e:	4682      	mov	sl, r0
 8011520:	f04f 0300 	mov.w	r3, #0
 8011524:	f04f 020a 	mov.w	r2, #10
 8011528:	4641      	mov	r1, r8
 801152a:	4620      	mov	r0, r4
 801152c:	d107      	bne.n	801153e <_dtoa_r+0xb1e>
 801152e:	f000 f9cb 	bl	80118c8 <__multadd>
 8011532:	4680      	mov	r8, r0
 8011534:	4607      	mov	r7, r0
 8011536:	9b04      	ldr	r3, [sp, #16]
 8011538:	3301      	adds	r3, #1
 801153a:	9304      	str	r3, [sp, #16]
 801153c:	e775      	b.n	801142a <_dtoa_r+0xa0a>
 801153e:	f000 f9c3 	bl	80118c8 <__multadd>
 8011542:	4639      	mov	r1, r7
 8011544:	4680      	mov	r8, r0
 8011546:	2300      	movs	r3, #0
 8011548:	220a      	movs	r2, #10
 801154a:	4620      	mov	r0, r4
 801154c:	f000 f9bc 	bl	80118c8 <__multadd>
 8011550:	4607      	mov	r7, r0
 8011552:	e7f0      	b.n	8011536 <_dtoa_r+0xb16>
 8011554:	9b04      	ldr	r3, [sp, #16]
 8011556:	9301      	str	r3, [sp, #4]
 8011558:	9d00      	ldr	r5, [sp, #0]
 801155a:	4631      	mov	r1, r6
 801155c:	4650      	mov	r0, sl
 801155e:	f7ff f9d6 	bl	801090e <quorem>
 8011562:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011566:	9b00      	ldr	r3, [sp, #0]
 8011568:	f805 9b01 	strb.w	r9, [r5], #1
 801156c:	1aea      	subs	r2, r5, r3
 801156e:	9b01      	ldr	r3, [sp, #4]
 8011570:	4293      	cmp	r3, r2
 8011572:	dd07      	ble.n	8011584 <_dtoa_r+0xb64>
 8011574:	4651      	mov	r1, sl
 8011576:	2300      	movs	r3, #0
 8011578:	220a      	movs	r2, #10
 801157a:	4620      	mov	r0, r4
 801157c:	f000 f9a4 	bl	80118c8 <__multadd>
 8011580:	4682      	mov	sl, r0
 8011582:	e7ea      	b.n	801155a <_dtoa_r+0xb3a>
 8011584:	9b01      	ldr	r3, [sp, #4]
 8011586:	2b00      	cmp	r3, #0
 8011588:	bfc8      	it	gt
 801158a:	461d      	movgt	r5, r3
 801158c:	9b00      	ldr	r3, [sp, #0]
 801158e:	bfd8      	it	le
 8011590:	2501      	movle	r5, #1
 8011592:	441d      	add	r5, r3
 8011594:	f04f 0800 	mov.w	r8, #0
 8011598:	4651      	mov	r1, sl
 801159a:	2201      	movs	r2, #1
 801159c:	4620      	mov	r0, r4
 801159e:	f000 fb41 	bl	8011c24 <__lshift>
 80115a2:	4631      	mov	r1, r6
 80115a4:	4682      	mov	sl, r0
 80115a6:	f000 fba9 	bl	8011cfc <__mcmp>
 80115aa:	2800      	cmp	r0, #0
 80115ac:	dc96      	bgt.n	80114dc <_dtoa_r+0xabc>
 80115ae:	d102      	bne.n	80115b6 <_dtoa_r+0xb96>
 80115b0:	f019 0f01 	tst.w	r9, #1
 80115b4:	d192      	bne.n	80114dc <_dtoa_r+0xabc>
 80115b6:	462b      	mov	r3, r5
 80115b8:	461d      	mov	r5, r3
 80115ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80115be:	2a30      	cmp	r2, #48	; 0x30
 80115c0:	d0fa      	beq.n	80115b8 <_dtoa_r+0xb98>
 80115c2:	e6dd      	b.n	8011380 <_dtoa_r+0x960>
 80115c4:	9a00      	ldr	r2, [sp, #0]
 80115c6:	429a      	cmp	r2, r3
 80115c8:	d189      	bne.n	80114de <_dtoa_r+0xabe>
 80115ca:	f10b 0b01 	add.w	fp, fp, #1
 80115ce:	2331      	movs	r3, #49	; 0x31
 80115d0:	e796      	b.n	8011500 <_dtoa_r+0xae0>
 80115d2:	4b0a      	ldr	r3, [pc, #40]	; (80115fc <_dtoa_r+0xbdc>)
 80115d4:	f7ff ba99 	b.w	8010b0a <_dtoa_r+0xea>
 80115d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80115da:	2b00      	cmp	r3, #0
 80115dc:	f47f aa6d 	bne.w	8010aba <_dtoa_r+0x9a>
 80115e0:	4b07      	ldr	r3, [pc, #28]	; (8011600 <_dtoa_r+0xbe0>)
 80115e2:	f7ff ba92 	b.w	8010b0a <_dtoa_r+0xea>
 80115e6:	9b01      	ldr	r3, [sp, #4]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	dcb5      	bgt.n	8011558 <_dtoa_r+0xb38>
 80115ec:	9b07      	ldr	r3, [sp, #28]
 80115ee:	2b02      	cmp	r3, #2
 80115f0:	f73f aeb1 	bgt.w	8011356 <_dtoa_r+0x936>
 80115f4:	e7b0      	b.n	8011558 <_dtoa_r+0xb38>
 80115f6:	bf00      	nop
 80115f8:	08013489 	.word	0x08013489
 80115fc:	080133e9 	.word	0x080133e9
 8011600:	0801340d 	.word	0x0801340d

08011604 <_free_r>:
 8011604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011606:	2900      	cmp	r1, #0
 8011608:	d044      	beq.n	8011694 <_free_r+0x90>
 801160a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801160e:	9001      	str	r0, [sp, #4]
 8011610:	2b00      	cmp	r3, #0
 8011612:	f1a1 0404 	sub.w	r4, r1, #4
 8011616:	bfb8      	it	lt
 8011618:	18e4      	addlt	r4, r4, r3
 801161a:	f000 f8e7 	bl	80117ec <__malloc_lock>
 801161e:	4a1e      	ldr	r2, [pc, #120]	; (8011698 <_free_r+0x94>)
 8011620:	9801      	ldr	r0, [sp, #4]
 8011622:	6813      	ldr	r3, [r2, #0]
 8011624:	b933      	cbnz	r3, 8011634 <_free_r+0x30>
 8011626:	6063      	str	r3, [r4, #4]
 8011628:	6014      	str	r4, [r2, #0]
 801162a:	b003      	add	sp, #12
 801162c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011630:	f000 b8e2 	b.w	80117f8 <__malloc_unlock>
 8011634:	42a3      	cmp	r3, r4
 8011636:	d908      	bls.n	801164a <_free_r+0x46>
 8011638:	6825      	ldr	r5, [r4, #0]
 801163a:	1961      	adds	r1, r4, r5
 801163c:	428b      	cmp	r3, r1
 801163e:	bf01      	itttt	eq
 8011640:	6819      	ldreq	r1, [r3, #0]
 8011642:	685b      	ldreq	r3, [r3, #4]
 8011644:	1949      	addeq	r1, r1, r5
 8011646:	6021      	streq	r1, [r4, #0]
 8011648:	e7ed      	b.n	8011626 <_free_r+0x22>
 801164a:	461a      	mov	r2, r3
 801164c:	685b      	ldr	r3, [r3, #4]
 801164e:	b10b      	cbz	r3, 8011654 <_free_r+0x50>
 8011650:	42a3      	cmp	r3, r4
 8011652:	d9fa      	bls.n	801164a <_free_r+0x46>
 8011654:	6811      	ldr	r1, [r2, #0]
 8011656:	1855      	adds	r5, r2, r1
 8011658:	42a5      	cmp	r5, r4
 801165a:	d10b      	bne.n	8011674 <_free_r+0x70>
 801165c:	6824      	ldr	r4, [r4, #0]
 801165e:	4421      	add	r1, r4
 8011660:	1854      	adds	r4, r2, r1
 8011662:	42a3      	cmp	r3, r4
 8011664:	6011      	str	r1, [r2, #0]
 8011666:	d1e0      	bne.n	801162a <_free_r+0x26>
 8011668:	681c      	ldr	r4, [r3, #0]
 801166a:	685b      	ldr	r3, [r3, #4]
 801166c:	6053      	str	r3, [r2, #4]
 801166e:	440c      	add	r4, r1
 8011670:	6014      	str	r4, [r2, #0]
 8011672:	e7da      	b.n	801162a <_free_r+0x26>
 8011674:	d902      	bls.n	801167c <_free_r+0x78>
 8011676:	230c      	movs	r3, #12
 8011678:	6003      	str	r3, [r0, #0]
 801167a:	e7d6      	b.n	801162a <_free_r+0x26>
 801167c:	6825      	ldr	r5, [r4, #0]
 801167e:	1961      	adds	r1, r4, r5
 8011680:	428b      	cmp	r3, r1
 8011682:	bf04      	itt	eq
 8011684:	6819      	ldreq	r1, [r3, #0]
 8011686:	685b      	ldreq	r3, [r3, #4]
 8011688:	6063      	str	r3, [r4, #4]
 801168a:	bf04      	itt	eq
 801168c:	1949      	addeq	r1, r1, r5
 801168e:	6021      	streq	r1, [r4, #0]
 8011690:	6054      	str	r4, [r2, #4]
 8011692:	e7ca      	b.n	801162a <_free_r+0x26>
 8011694:	b003      	add	sp, #12
 8011696:	bd30      	pop	{r4, r5, pc}
 8011698:	200090d0 	.word	0x200090d0

0801169c <malloc>:
 801169c:	4b02      	ldr	r3, [pc, #8]	; (80116a8 <malloc+0xc>)
 801169e:	4601      	mov	r1, r0
 80116a0:	6818      	ldr	r0, [r3, #0]
 80116a2:	f000 b823 	b.w	80116ec <_malloc_r>
 80116a6:	bf00      	nop
 80116a8:	20000238 	.word	0x20000238

080116ac <sbrk_aligned>:
 80116ac:	b570      	push	{r4, r5, r6, lr}
 80116ae:	4e0e      	ldr	r6, [pc, #56]	; (80116e8 <sbrk_aligned+0x3c>)
 80116b0:	460c      	mov	r4, r1
 80116b2:	6831      	ldr	r1, [r6, #0]
 80116b4:	4605      	mov	r5, r0
 80116b6:	b911      	cbnz	r1, 80116be <sbrk_aligned+0x12>
 80116b8:	f000 fe1c 	bl	80122f4 <_sbrk_r>
 80116bc:	6030      	str	r0, [r6, #0]
 80116be:	4621      	mov	r1, r4
 80116c0:	4628      	mov	r0, r5
 80116c2:	f000 fe17 	bl	80122f4 <_sbrk_r>
 80116c6:	1c43      	adds	r3, r0, #1
 80116c8:	d00a      	beq.n	80116e0 <sbrk_aligned+0x34>
 80116ca:	1cc4      	adds	r4, r0, #3
 80116cc:	f024 0403 	bic.w	r4, r4, #3
 80116d0:	42a0      	cmp	r0, r4
 80116d2:	d007      	beq.n	80116e4 <sbrk_aligned+0x38>
 80116d4:	1a21      	subs	r1, r4, r0
 80116d6:	4628      	mov	r0, r5
 80116d8:	f000 fe0c 	bl	80122f4 <_sbrk_r>
 80116dc:	3001      	adds	r0, #1
 80116de:	d101      	bne.n	80116e4 <sbrk_aligned+0x38>
 80116e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80116e4:	4620      	mov	r0, r4
 80116e6:	bd70      	pop	{r4, r5, r6, pc}
 80116e8:	200090d4 	.word	0x200090d4

080116ec <_malloc_r>:
 80116ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116f0:	1ccd      	adds	r5, r1, #3
 80116f2:	f025 0503 	bic.w	r5, r5, #3
 80116f6:	3508      	adds	r5, #8
 80116f8:	2d0c      	cmp	r5, #12
 80116fa:	bf38      	it	cc
 80116fc:	250c      	movcc	r5, #12
 80116fe:	2d00      	cmp	r5, #0
 8011700:	4607      	mov	r7, r0
 8011702:	db01      	blt.n	8011708 <_malloc_r+0x1c>
 8011704:	42a9      	cmp	r1, r5
 8011706:	d905      	bls.n	8011714 <_malloc_r+0x28>
 8011708:	230c      	movs	r3, #12
 801170a:	603b      	str	r3, [r7, #0]
 801170c:	2600      	movs	r6, #0
 801170e:	4630      	mov	r0, r6
 8011710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011714:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80117e8 <_malloc_r+0xfc>
 8011718:	f000 f868 	bl	80117ec <__malloc_lock>
 801171c:	f8d8 3000 	ldr.w	r3, [r8]
 8011720:	461c      	mov	r4, r3
 8011722:	bb5c      	cbnz	r4, 801177c <_malloc_r+0x90>
 8011724:	4629      	mov	r1, r5
 8011726:	4638      	mov	r0, r7
 8011728:	f7ff ffc0 	bl	80116ac <sbrk_aligned>
 801172c:	1c43      	adds	r3, r0, #1
 801172e:	4604      	mov	r4, r0
 8011730:	d155      	bne.n	80117de <_malloc_r+0xf2>
 8011732:	f8d8 4000 	ldr.w	r4, [r8]
 8011736:	4626      	mov	r6, r4
 8011738:	2e00      	cmp	r6, #0
 801173a:	d145      	bne.n	80117c8 <_malloc_r+0xdc>
 801173c:	2c00      	cmp	r4, #0
 801173e:	d048      	beq.n	80117d2 <_malloc_r+0xe6>
 8011740:	6823      	ldr	r3, [r4, #0]
 8011742:	4631      	mov	r1, r6
 8011744:	4638      	mov	r0, r7
 8011746:	eb04 0903 	add.w	r9, r4, r3
 801174a:	f000 fdd3 	bl	80122f4 <_sbrk_r>
 801174e:	4581      	cmp	r9, r0
 8011750:	d13f      	bne.n	80117d2 <_malloc_r+0xe6>
 8011752:	6821      	ldr	r1, [r4, #0]
 8011754:	1a6d      	subs	r5, r5, r1
 8011756:	4629      	mov	r1, r5
 8011758:	4638      	mov	r0, r7
 801175a:	f7ff ffa7 	bl	80116ac <sbrk_aligned>
 801175e:	3001      	adds	r0, #1
 8011760:	d037      	beq.n	80117d2 <_malloc_r+0xe6>
 8011762:	6823      	ldr	r3, [r4, #0]
 8011764:	442b      	add	r3, r5
 8011766:	6023      	str	r3, [r4, #0]
 8011768:	f8d8 3000 	ldr.w	r3, [r8]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d038      	beq.n	80117e2 <_malloc_r+0xf6>
 8011770:	685a      	ldr	r2, [r3, #4]
 8011772:	42a2      	cmp	r2, r4
 8011774:	d12b      	bne.n	80117ce <_malloc_r+0xe2>
 8011776:	2200      	movs	r2, #0
 8011778:	605a      	str	r2, [r3, #4]
 801177a:	e00f      	b.n	801179c <_malloc_r+0xb0>
 801177c:	6822      	ldr	r2, [r4, #0]
 801177e:	1b52      	subs	r2, r2, r5
 8011780:	d41f      	bmi.n	80117c2 <_malloc_r+0xd6>
 8011782:	2a0b      	cmp	r2, #11
 8011784:	d917      	bls.n	80117b6 <_malloc_r+0xca>
 8011786:	1961      	adds	r1, r4, r5
 8011788:	42a3      	cmp	r3, r4
 801178a:	6025      	str	r5, [r4, #0]
 801178c:	bf18      	it	ne
 801178e:	6059      	strne	r1, [r3, #4]
 8011790:	6863      	ldr	r3, [r4, #4]
 8011792:	bf08      	it	eq
 8011794:	f8c8 1000 	streq.w	r1, [r8]
 8011798:	5162      	str	r2, [r4, r5]
 801179a:	604b      	str	r3, [r1, #4]
 801179c:	4638      	mov	r0, r7
 801179e:	f104 060b 	add.w	r6, r4, #11
 80117a2:	f000 f829 	bl	80117f8 <__malloc_unlock>
 80117a6:	f026 0607 	bic.w	r6, r6, #7
 80117aa:	1d23      	adds	r3, r4, #4
 80117ac:	1af2      	subs	r2, r6, r3
 80117ae:	d0ae      	beq.n	801170e <_malloc_r+0x22>
 80117b0:	1b9b      	subs	r3, r3, r6
 80117b2:	50a3      	str	r3, [r4, r2]
 80117b4:	e7ab      	b.n	801170e <_malloc_r+0x22>
 80117b6:	42a3      	cmp	r3, r4
 80117b8:	6862      	ldr	r2, [r4, #4]
 80117ba:	d1dd      	bne.n	8011778 <_malloc_r+0x8c>
 80117bc:	f8c8 2000 	str.w	r2, [r8]
 80117c0:	e7ec      	b.n	801179c <_malloc_r+0xb0>
 80117c2:	4623      	mov	r3, r4
 80117c4:	6864      	ldr	r4, [r4, #4]
 80117c6:	e7ac      	b.n	8011722 <_malloc_r+0x36>
 80117c8:	4634      	mov	r4, r6
 80117ca:	6876      	ldr	r6, [r6, #4]
 80117cc:	e7b4      	b.n	8011738 <_malloc_r+0x4c>
 80117ce:	4613      	mov	r3, r2
 80117d0:	e7cc      	b.n	801176c <_malloc_r+0x80>
 80117d2:	230c      	movs	r3, #12
 80117d4:	603b      	str	r3, [r7, #0]
 80117d6:	4638      	mov	r0, r7
 80117d8:	f000 f80e 	bl	80117f8 <__malloc_unlock>
 80117dc:	e797      	b.n	801170e <_malloc_r+0x22>
 80117de:	6025      	str	r5, [r4, #0]
 80117e0:	e7dc      	b.n	801179c <_malloc_r+0xb0>
 80117e2:	605b      	str	r3, [r3, #4]
 80117e4:	deff      	udf	#255	; 0xff
 80117e6:	bf00      	nop
 80117e8:	200090d0 	.word	0x200090d0

080117ec <__malloc_lock>:
 80117ec:	4801      	ldr	r0, [pc, #4]	; (80117f4 <__malloc_lock+0x8>)
 80117ee:	f7ff b87e 	b.w	80108ee <__retarget_lock_acquire_recursive>
 80117f2:	bf00      	nop
 80117f4:	200090cc 	.word	0x200090cc

080117f8 <__malloc_unlock>:
 80117f8:	4801      	ldr	r0, [pc, #4]	; (8011800 <__malloc_unlock+0x8>)
 80117fa:	f7ff b879 	b.w	80108f0 <__retarget_lock_release_recursive>
 80117fe:	bf00      	nop
 8011800:	200090cc 	.word	0x200090cc

08011804 <_Balloc>:
 8011804:	b570      	push	{r4, r5, r6, lr}
 8011806:	69c6      	ldr	r6, [r0, #28]
 8011808:	4604      	mov	r4, r0
 801180a:	460d      	mov	r5, r1
 801180c:	b976      	cbnz	r6, 801182c <_Balloc+0x28>
 801180e:	2010      	movs	r0, #16
 8011810:	f7ff ff44 	bl	801169c <malloc>
 8011814:	4602      	mov	r2, r0
 8011816:	61e0      	str	r0, [r4, #28]
 8011818:	b920      	cbnz	r0, 8011824 <_Balloc+0x20>
 801181a:	4b18      	ldr	r3, [pc, #96]	; (801187c <_Balloc+0x78>)
 801181c:	4818      	ldr	r0, [pc, #96]	; (8011880 <_Balloc+0x7c>)
 801181e:	216b      	movs	r1, #107	; 0x6b
 8011820:	f000 fd78 	bl	8012314 <__assert_func>
 8011824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011828:	6006      	str	r6, [r0, #0]
 801182a:	60c6      	str	r6, [r0, #12]
 801182c:	69e6      	ldr	r6, [r4, #28]
 801182e:	68f3      	ldr	r3, [r6, #12]
 8011830:	b183      	cbz	r3, 8011854 <_Balloc+0x50>
 8011832:	69e3      	ldr	r3, [r4, #28]
 8011834:	68db      	ldr	r3, [r3, #12]
 8011836:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801183a:	b9b8      	cbnz	r0, 801186c <_Balloc+0x68>
 801183c:	2101      	movs	r1, #1
 801183e:	fa01 f605 	lsl.w	r6, r1, r5
 8011842:	1d72      	adds	r2, r6, #5
 8011844:	0092      	lsls	r2, r2, #2
 8011846:	4620      	mov	r0, r4
 8011848:	f000 fd82 	bl	8012350 <_calloc_r>
 801184c:	b160      	cbz	r0, 8011868 <_Balloc+0x64>
 801184e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011852:	e00e      	b.n	8011872 <_Balloc+0x6e>
 8011854:	2221      	movs	r2, #33	; 0x21
 8011856:	2104      	movs	r1, #4
 8011858:	4620      	mov	r0, r4
 801185a:	f000 fd79 	bl	8012350 <_calloc_r>
 801185e:	69e3      	ldr	r3, [r4, #28]
 8011860:	60f0      	str	r0, [r6, #12]
 8011862:	68db      	ldr	r3, [r3, #12]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d1e4      	bne.n	8011832 <_Balloc+0x2e>
 8011868:	2000      	movs	r0, #0
 801186a:	bd70      	pop	{r4, r5, r6, pc}
 801186c:	6802      	ldr	r2, [r0, #0]
 801186e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011872:	2300      	movs	r3, #0
 8011874:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011878:	e7f7      	b.n	801186a <_Balloc+0x66>
 801187a:	bf00      	nop
 801187c:	0801341a 	.word	0x0801341a
 8011880:	0801349a 	.word	0x0801349a

08011884 <_Bfree>:
 8011884:	b570      	push	{r4, r5, r6, lr}
 8011886:	69c6      	ldr	r6, [r0, #28]
 8011888:	4605      	mov	r5, r0
 801188a:	460c      	mov	r4, r1
 801188c:	b976      	cbnz	r6, 80118ac <_Bfree+0x28>
 801188e:	2010      	movs	r0, #16
 8011890:	f7ff ff04 	bl	801169c <malloc>
 8011894:	4602      	mov	r2, r0
 8011896:	61e8      	str	r0, [r5, #28]
 8011898:	b920      	cbnz	r0, 80118a4 <_Bfree+0x20>
 801189a:	4b09      	ldr	r3, [pc, #36]	; (80118c0 <_Bfree+0x3c>)
 801189c:	4809      	ldr	r0, [pc, #36]	; (80118c4 <_Bfree+0x40>)
 801189e:	218f      	movs	r1, #143	; 0x8f
 80118a0:	f000 fd38 	bl	8012314 <__assert_func>
 80118a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80118a8:	6006      	str	r6, [r0, #0]
 80118aa:	60c6      	str	r6, [r0, #12]
 80118ac:	b13c      	cbz	r4, 80118be <_Bfree+0x3a>
 80118ae:	69eb      	ldr	r3, [r5, #28]
 80118b0:	6862      	ldr	r2, [r4, #4]
 80118b2:	68db      	ldr	r3, [r3, #12]
 80118b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80118b8:	6021      	str	r1, [r4, #0]
 80118ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80118be:	bd70      	pop	{r4, r5, r6, pc}
 80118c0:	0801341a 	.word	0x0801341a
 80118c4:	0801349a 	.word	0x0801349a

080118c8 <__multadd>:
 80118c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118cc:	690d      	ldr	r5, [r1, #16]
 80118ce:	4607      	mov	r7, r0
 80118d0:	460c      	mov	r4, r1
 80118d2:	461e      	mov	r6, r3
 80118d4:	f101 0c14 	add.w	ip, r1, #20
 80118d8:	2000      	movs	r0, #0
 80118da:	f8dc 3000 	ldr.w	r3, [ip]
 80118de:	b299      	uxth	r1, r3
 80118e0:	fb02 6101 	mla	r1, r2, r1, r6
 80118e4:	0c1e      	lsrs	r6, r3, #16
 80118e6:	0c0b      	lsrs	r3, r1, #16
 80118e8:	fb02 3306 	mla	r3, r2, r6, r3
 80118ec:	b289      	uxth	r1, r1
 80118ee:	3001      	adds	r0, #1
 80118f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80118f4:	4285      	cmp	r5, r0
 80118f6:	f84c 1b04 	str.w	r1, [ip], #4
 80118fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80118fe:	dcec      	bgt.n	80118da <__multadd+0x12>
 8011900:	b30e      	cbz	r6, 8011946 <__multadd+0x7e>
 8011902:	68a3      	ldr	r3, [r4, #8]
 8011904:	42ab      	cmp	r3, r5
 8011906:	dc19      	bgt.n	801193c <__multadd+0x74>
 8011908:	6861      	ldr	r1, [r4, #4]
 801190a:	4638      	mov	r0, r7
 801190c:	3101      	adds	r1, #1
 801190e:	f7ff ff79 	bl	8011804 <_Balloc>
 8011912:	4680      	mov	r8, r0
 8011914:	b928      	cbnz	r0, 8011922 <__multadd+0x5a>
 8011916:	4602      	mov	r2, r0
 8011918:	4b0c      	ldr	r3, [pc, #48]	; (801194c <__multadd+0x84>)
 801191a:	480d      	ldr	r0, [pc, #52]	; (8011950 <__multadd+0x88>)
 801191c:	21ba      	movs	r1, #186	; 0xba
 801191e:	f000 fcf9 	bl	8012314 <__assert_func>
 8011922:	6922      	ldr	r2, [r4, #16]
 8011924:	3202      	adds	r2, #2
 8011926:	f104 010c 	add.w	r1, r4, #12
 801192a:	0092      	lsls	r2, r2, #2
 801192c:	300c      	adds	r0, #12
 801192e:	f7fe ffe0 	bl	80108f2 <memcpy>
 8011932:	4621      	mov	r1, r4
 8011934:	4638      	mov	r0, r7
 8011936:	f7ff ffa5 	bl	8011884 <_Bfree>
 801193a:	4644      	mov	r4, r8
 801193c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011940:	3501      	adds	r5, #1
 8011942:	615e      	str	r6, [r3, #20]
 8011944:	6125      	str	r5, [r4, #16]
 8011946:	4620      	mov	r0, r4
 8011948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801194c:	08013489 	.word	0x08013489
 8011950:	0801349a 	.word	0x0801349a

08011954 <__hi0bits>:
 8011954:	0c03      	lsrs	r3, r0, #16
 8011956:	041b      	lsls	r3, r3, #16
 8011958:	b9d3      	cbnz	r3, 8011990 <__hi0bits+0x3c>
 801195a:	0400      	lsls	r0, r0, #16
 801195c:	2310      	movs	r3, #16
 801195e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011962:	bf04      	itt	eq
 8011964:	0200      	lsleq	r0, r0, #8
 8011966:	3308      	addeq	r3, #8
 8011968:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801196c:	bf04      	itt	eq
 801196e:	0100      	lsleq	r0, r0, #4
 8011970:	3304      	addeq	r3, #4
 8011972:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011976:	bf04      	itt	eq
 8011978:	0080      	lsleq	r0, r0, #2
 801197a:	3302      	addeq	r3, #2
 801197c:	2800      	cmp	r0, #0
 801197e:	db05      	blt.n	801198c <__hi0bits+0x38>
 8011980:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011984:	f103 0301 	add.w	r3, r3, #1
 8011988:	bf08      	it	eq
 801198a:	2320      	moveq	r3, #32
 801198c:	4618      	mov	r0, r3
 801198e:	4770      	bx	lr
 8011990:	2300      	movs	r3, #0
 8011992:	e7e4      	b.n	801195e <__hi0bits+0xa>

08011994 <__lo0bits>:
 8011994:	6803      	ldr	r3, [r0, #0]
 8011996:	f013 0207 	ands.w	r2, r3, #7
 801199a:	d00c      	beq.n	80119b6 <__lo0bits+0x22>
 801199c:	07d9      	lsls	r1, r3, #31
 801199e:	d422      	bmi.n	80119e6 <__lo0bits+0x52>
 80119a0:	079a      	lsls	r2, r3, #30
 80119a2:	bf49      	itett	mi
 80119a4:	085b      	lsrmi	r3, r3, #1
 80119a6:	089b      	lsrpl	r3, r3, #2
 80119a8:	6003      	strmi	r3, [r0, #0]
 80119aa:	2201      	movmi	r2, #1
 80119ac:	bf5c      	itt	pl
 80119ae:	6003      	strpl	r3, [r0, #0]
 80119b0:	2202      	movpl	r2, #2
 80119b2:	4610      	mov	r0, r2
 80119b4:	4770      	bx	lr
 80119b6:	b299      	uxth	r1, r3
 80119b8:	b909      	cbnz	r1, 80119be <__lo0bits+0x2a>
 80119ba:	0c1b      	lsrs	r3, r3, #16
 80119bc:	2210      	movs	r2, #16
 80119be:	b2d9      	uxtb	r1, r3
 80119c0:	b909      	cbnz	r1, 80119c6 <__lo0bits+0x32>
 80119c2:	3208      	adds	r2, #8
 80119c4:	0a1b      	lsrs	r3, r3, #8
 80119c6:	0719      	lsls	r1, r3, #28
 80119c8:	bf04      	itt	eq
 80119ca:	091b      	lsreq	r3, r3, #4
 80119cc:	3204      	addeq	r2, #4
 80119ce:	0799      	lsls	r1, r3, #30
 80119d0:	bf04      	itt	eq
 80119d2:	089b      	lsreq	r3, r3, #2
 80119d4:	3202      	addeq	r2, #2
 80119d6:	07d9      	lsls	r1, r3, #31
 80119d8:	d403      	bmi.n	80119e2 <__lo0bits+0x4e>
 80119da:	085b      	lsrs	r3, r3, #1
 80119dc:	f102 0201 	add.w	r2, r2, #1
 80119e0:	d003      	beq.n	80119ea <__lo0bits+0x56>
 80119e2:	6003      	str	r3, [r0, #0]
 80119e4:	e7e5      	b.n	80119b2 <__lo0bits+0x1e>
 80119e6:	2200      	movs	r2, #0
 80119e8:	e7e3      	b.n	80119b2 <__lo0bits+0x1e>
 80119ea:	2220      	movs	r2, #32
 80119ec:	e7e1      	b.n	80119b2 <__lo0bits+0x1e>
	...

080119f0 <__i2b>:
 80119f0:	b510      	push	{r4, lr}
 80119f2:	460c      	mov	r4, r1
 80119f4:	2101      	movs	r1, #1
 80119f6:	f7ff ff05 	bl	8011804 <_Balloc>
 80119fa:	4602      	mov	r2, r0
 80119fc:	b928      	cbnz	r0, 8011a0a <__i2b+0x1a>
 80119fe:	4b05      	ldr	r3, [pc, #20]	; (8011a14 <__i2b+0x24>)
 8011a00:	4805      	ldr	r0, [pc, #20]	; (8011a18 <__i2b+0x28>)
 8011a02:	f240 1145 	movw	r1, #325	; 0x145
 8011a06:	f000 fc85 	bl	8012314 <__assert_func>
 8011a0a:	2301      	movs	r3, #1
 8011a0c:	6144      	str	r4, [r0, #20]
 8011a0e:	6103      	str	r3, [r0, #16]
 8011a10:	bd10      	pop	{r4, pc}
 8011a12:	bf00      	nop
 8011a14:	08013489 	.word	0x08013489
 8011a18:	0801349a 	.word	0x0801349a

08011a1c <__multiply>:
 8011a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a20:	4691      	mov	r9, r2
 8011a22:	690a      	ldr	r2, [r1, #16]
 8011a24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011a28:	429a      	cmp	r2, r3
 8011a2a:	bfb8      	it	lt
 8011a2c:	460b      	movlt	r3, r1
 8011a2e:	460c      	mov	r4, r1
 8011a30:	bfbc      	itt	lt
 8011a32:	464c      	movlt	r4, r9
 8011a34:	4699      	movlt	r9, r3
 8011a36:	6927      	ldr	r7, [r4, #16]
 8011a38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011a3c:	68a3      	ldr	r3, [r4, #8]
 8011a3e:	6861      	ldr	r1, [r4, #4]
 8011a40:	eb07 060a 	add.w	r6, r7, sl
 8011a44:	42b3      	cmp	r3, r6
 8011a46:	b085      	sub	sp, #20
 8011a48:	bfb8      	it	lt
 8011a4a:	3101      	addlt	r1, #1
 8011a4c:	f7ff feda 	bl	8011804 <_Balloc>
 8011a50:	b930      	cbnz	r0, 8011a60 <__multiply+0x44>
 8011a52:	4602      	mov	r2, r0
 8011a54:	4b44      	ldr	r3, [pc, #272]	; (8011b68 <__multiply+0x14c>)
 8011a56:	4845      	ldr	r0, [pc, #276]	; (8011b6c <__multiply+0x150>)
 8011a58:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011a5c:	f000 fc5a 	bl	8012314 <__assert_func>
 8011a60:	f100 0514 	add.w	r5, r0, #20
 8011a64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011a68:	462b      	mov	r3, r5
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	4543      	cmp	r3, r8
 8011a6e:	d321      	bcc.n	8011ab4 <__multiply+0x98>
 8011a70:	f104 0314 	add.w	r3, r4, #20
 8011a74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011a78:	f109 0314 	add.w	r3, r9, #20
 8011a7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011a80:	9202      	str	r2, [sp, #8]
 8011a82:	1b3a      	subs	r2, r7, r4
 8011a84:	3a15      	subs	r2, #21
 8011a86:	f022 0203 	bic.w	r2, r2, #3
 8011a8a:	3204      	adds	r2, #4
 8011a8c:	f104 0115 	add.w	r1, r4, #21
 8011a90:	428f      	cmp	r7, r1
 8011a92:	bf38      	it	cc
 8011a94:	2204      	movcc	r2, #4
 8011a96:	9201      	str	r2, [sp, #4]
 8011a98:	9a02      	ldr	r2, [sp, #8]
 8011a9a:	9303      	str	r3, [sp, #12]
 8011a9c:	429a      	cmp	r2, r3
 8011a9e:	d80c      	bhi.n	8011aba <__multiply+0x9e>
 8011aa0:	2e00      	cmp	r6, #0
 8011aa2:	dd03      	ble.n	8011aac <__multiply+0x90>
 8011aa4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d05b      	beq.n	8011b64 <__multiply+0x148>
 8011aac:	6106      	str	r6, [r0, #16]
 8011aae:	b005      	add	sp, #20
 8011ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ab4:	f843 2b04 	str.w	r2, [r3], #4
 8011ab8:	e7d8      	b.n	8011a6c <__multiply+0x50>
 8011aba:	f8b3 a000 	ldrh.w	sl, [r3]
 8011abe:	f1ba 0f00 	cmp.w	sl, #0
 8011ac2:	d024      	beq.n	8011b0e <__multiply+0xf2>
 8011ac4:	f104 0e14 	add.w	lr, r4, #20
 8011ac8:	46a9      	mov	r9, r5
 8011aca:	f04f 0c00 	mov.w	ip, #0
 8011ace:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011ad2:	f8d9 1000 	ldr.w	r1, [r9]
 8011ad6:	fa1f fb82 	uxth.w	fp, r2
 8011ada:	b289      	uxth	r1, r1
 8011adc:	fb0a 110b 	mla	r1, sl, fp, r1
 8011ae0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011ae4:	f8d9 2000 	ldr.w	r2, [r9]
 8011ae8:	4461      	add	r1, ip
 8011aea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011aee:	fb0a c20b 	mla	r2, sl, fp, ip
 8011af2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011af6:	b289      	uxth	r1, r1
 8011af8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011afc:	4577      	cmp	r7, lr
 8011afe:	f849 1b04 	str.w	r1, [r9], #4
 8011b02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011b06:	d8e2      	bhi.n	8011ace <__multiply+0xb2>
 8011b08:	9a01      	ldr	r2, [sp, #4]
 8011b0a:	f845 c002 	str.w	ip, [r5, r2]
 8011b0e:	9a03      	ldr	r2, [sp, #12]
 8011b10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011b14:	3304      	adds	r3, #4
 8011b16:	f1b9 0f00 	cmp.w	r9, #0
 8011b1a:	d021      	beq.n	8011b60 <__multiply+0x144>
 8011b1c:	6829      	ldr	r1, [r5, #0]
 8011b1e:	f104 0c14 	add.w	ip, r4, #20
 8011b22:	46ae      	mov	lr, r5
 8011b24:	f04f 0a00 	mov.w	sl, #0
 8011b28:	f8bc b000 	ldrh.w	fp, [ip]
 8011b2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011b30:	fb09 220b 	mla	r2, r9, fp, r2
 8011b34:	4452      	add	r2, sl
 8011b36:	b289      	uxth	r1, r1
 8011b38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011b3c:	f84e 1b04 	str.w	r1, [lr], #4
 8011b40:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011b44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011b48:	f8be 1000 	ldrh.w	r1, [lr]
 8011b4c:	fb09 110a 	mla	r1, r9, sl, r1
 8011b50:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011b54:	4567      	cmp	r7, ip
 8011b56:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011b5a:	d8e5      	bhi.n	8011b28 <__multiply+0x10c>
 8011b5c:	9a01      	ldr	r2, [sp, #4]
 8011b5e:	50a9      	str	r1, [r5, r2]
 8011b60:	3504      	adds	r5, #4
 8011b62:	e799      	b.n	8011a98 <__multiply+0x7c>
 8011b64:	3e01      	subs	r6, #1
 8011b66:	e79b      	b.n	8011aa0 <__multiply+0x84>
 8011b68:	08013489 	.word	0x08013489
 8011b6c:	0801349a 	.word	0x0801349a

08011b70 <__pow5mult>:
 8011b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b74:	4615      	mov	r5, r2
 8011b76:	f012 0203 	ands.w	r2, r2, #3
 8011b7a:	4606      	mov	r6, r0
 8011b7c:	460f      	mov	r7, r1
 8011b7e:	d007      	beq.n	8011b90 <__pow5mult+0x20>
 8011b80:	4c25      	ldr	r4, [pc, #148]	; (8011c18 <__pow5mult+0xa8>)
 8011b82:	3a01      	subs	r2, #1
 8011b84:	2300      	movs	r3, #0
 8011b86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011b8a:	f7ff fe9d 	bl	80118c8 <__multadd>
 8011b8e:	4607      	mov	r7, r0
 8011b90:	10ad      	asrs	r5, r5, #2
 8011b92:	d03d      	beq.n	8011c10 <__pow5mult+0xa0>
 8011b94:	69f4      	ldr	r4, [r6, #28]
 8011b96:	b97c      	cbnz	r4, 8011bb8 <__pow5mult+0x48>
 8011b98:	2010      	movs	r0, #16
 8011b9a:	f7ff fd7f 	bl	801169c <malloc>
 8011b9e:	4602      	mov	r2, r0
 8011ba0:	61f0      	str	r0, [r6, #28]
 8011ba2:	b928      	cbnz	r0, 8011bb0 <__pow5mult+0x40>
 8011ba4:	4b1d      	ldr	r3, [pc, #116]	; (8011c1c <__pow5mult+0xac>)
 8011ba6:	481e      	ldr	r0, [pc, #120]	; (8011c20 <__pow5mult+0xb0>)
 8011ba8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011bac:	f000 fbb2 	bl	8012314 <__assert_func>
 8011bb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011bb4:	6004      	str	r4, [r0, #0]
 8011bb6:	60c4      	str	r4, [r0, #12]
 8011bb8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011bbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011bc0:	b94c      	cbnz	r4, 8011bd6 <__pow5mult+0x66>
 8011bc2:	f240 2171 	movw	r1, #625	; 0x271
 8011bc6:	4630      	mov	r0, r6
 8011bc8:	f7ff ff12 	bl	80119f0 <__i2b>
 8011bcc:	2300      	movs	r3, #0
 8011bce:	f8c8 0008 	str.w	r0, [r8, #8]
 8011bd2:	4604      	mov	r4, r0
 8011bd4:	6003      	str	r3, [r0, #0]
 8011bd6:	f04f 0900 	mov.w	r9, #0
 8011bda:	07eb      	lsls	r3, r5, #31
 8011bdc:	d50a      	bpl.n	8011bf4 <__pow5mult+0x84>
 8011bde:	4639      	mov	r1, r7
 8011be0:	4622      	mov	r2, r4
 8011be2:	4630      	mov	r0, r6
 8011be4:	f7ff ff1a 	bl	8011a1c <__multiply>
 8011be8:	4639      	mov	r1, r7
 8011bea:	4680      	mov	r8, r0
 8011bec:	4630      	mov	r0, r6
 8011bee:	f7ff fe49 	bl	8011884 <_Bfree>
 8011bf2:	4647      	mov	r7, r8
 8011bf4:	106d      	asrs	r5, r5, #1
 8011bf6:	d00b      	beq.n	8011c10 <__pow5mult+0xa0>
 8011bf8:	6820      	ldr	r0, [r4, #0]
 8011bfa:	b938      	cbnz	r0, 8011c0c <__pow5mult+0x9c>
 8011bfc:	4622      	mov	r2, r4
 8011bfe:	4621      	mov	r1, r4
 8011c00:	4630      	mov	r0, r6
 8011c02:	f7ff ff0b 	bl	8011a1c <__multiply>
 8011c06:	6020      	str	r0, [r4, #0]
 8011c08:	f8c0 9000 	str.w	r9, [r0]
 8011c0c:	4604      	mov	r4, r0
 8011c0e:	e7e4      	b.n	8011bda <__pow5mult+0x6a>
 8011c10:	4638      	mov	r0, r7
 8011c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c16:	bf00      	nop
 8011c18:	080135e8 	.word	0x080135e8
 8011c1c:	0801341a 	.word	0x0801341a
 8011c20:	0801349a 	.word	0x0801349a

08011c24 <__lshift>:
 8011c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c28:	460c      	mov	r4, r1
 8011c2a:	6849      	ldr	r1, [r1, #4]
 8011c2c:	6923      	ldr	r3, [r4, #16]
 8011c2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011c32:	68a3      	ldr	r3, [r4, #8]
 8011c34:	4607      	mov	r7, r0
 8011c36:	4691      	mov	r9, r2
 8011c38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011c3c:	f108 0601 	add.w	r6, r8, #1
 8011c40:	42b3      	cmp	r3, r6
 8011c42:	db0b      	blt.n	8011c5c <__lshift+0x38>
 8011c44:	4638      	mov	r0, r7
 8011c46:	f7ff fddd 	bl	8011804 <_Balloc>
 8011c4a:	4605      	mov	r5, r0
 8011c4c:	b948      	cbnz	r0, 8011c62 <__lshift+0x3e>
 8011c4e:	4602      	mov	r2, r0
 8011c50:	4b28      	ldr	r3, [pc, #160]	; (8011cf4 <__lshift+0xd0>)
 8011c52:	4829      	ldr	r0, [pc, #164]	; (8011cf8 <__lshift+0xd4>)
 8011c54:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011c58:	f000 fb5c 	bl	8012314 <__assert_func>
 8011c5c:	3101      	adds	r1, #1
 8011c5e:	005b      	lsls	r3, r3, #1
 8011c60:	e7ee      	b.n	8011c40 <__lshift+0x1c>
 8011c62:	2300      	movs	r3, #0
 8011c64:	f100 0114 	add.w	r1, r0, #20
 8011c68:	f100 0210 	add.w	r2, r0, #16
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	4553      	cmp	r3, sl
 8011c70:	db33      	blt.n	8011cda <__lshift+0xb6>
 8011c72:	6920      	ldr	r0, [r4, #16]
 8011c74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011c78:	f104 0314 	add.w	r3, r4, #20
 8011c7c:	f019 091f 	ands.w	r9, r9, #31
 8011c80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011c84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011c88:	d02b      	beq.n	8011ce2 <__lshift+0xbe>
 8011c8a:	f1c9 0e20 	rsb	lr, r9, #32
 8011c8e:	468a      	mov	sl, r1
 8011c90:	2200      	movs	r2, #0
 8011c92:	6818      	ldr	r0, [r3, #0]
 8011c94:	fa00 f009 	lsl.w	r0, r0, r9
 8011c98:	4310      	orrs	r0, r2
 8011c9a:	f84a 0b04 	str.w	r0, [sl], #4
 8011c9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ca2:	459c      	cmp	ip, r3
 8011ca4:	fa22 f20e 	lsr.w	r2, r2, lr
 8011ca8:	d8f3      	bhi.n	8011c92 <__lshift+0x6e>
 8011caa:	ebac 0304 	sub.w	r3, ip, r4
 8011cae:	3b15      	subs	r3, #21
 8011cb0:	f023 0303 	bic.w	r3, r3, #3
 8011cb4:	3304      	adds	r3, #4
 8011cb6:	f104 0015 	add.w	r0, r4, #21
 8011cba:	4584      	cmp	ip, r0
 8011cbc:	bf38      	it	cc
 8011cbe:	2304      	movcc	r3, #4
 8011cc0:	50ca      	str	r2, [r1, r3]
 8011cc2:	b10a      	cbz	r2, 8011cc8 <__lshift+0xa4>
 8011cc4:	f108 0602 	add.w	r6, r8, #2
 8011cc8:	3e01      	subs	r6, #1
 8011cca:	4638      	mov	r0, r7
 8011ccc:	612e      	str	r6, [r5, #16]
 8011cce:	4621      	mov	r1, r4
 8011cd0:	f7ff fdd8 	bl	8011884 <_Bfree>
 8011cd4:	4628      	mov	r0, r5
 8011cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cda:	f842 0f04 	str.w	r0, [r2, #4]!
 8011cde:	3301      	adds	r3, #1
 8011ce0:	e7c5      	b.n	8011c6e <__lshift+0x4a>
 8011ce2:	3904      	subs	r1, #4
 8011ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ce8:	f841 2f04 	str.w	r2, [r1, #4]!
 8011cec:	459c      	cmp	ip, r3
 8011cee:	d8f9      	bhi.n	8011ce4 <__lshift+0xc0>
 8011cf0:	e7ea      	b.n	8011cc8 <__lshift+0xa4>
 8011cf2:	bf00      	nop
 8011cf4:	08013489 	.word	0x08013489
 8011cf8:	0801349a 	.word	0x0801349a

08011cfc <__mcmp>:
 8011cfc:	b530      	push	{r4, r5, lr}
 8011cfe:	6902      	ldr	r2, [r0, #16]
 8011d00:	690c      	ldr	r4, [r1, #16]
 8011d02:	1b12      	subs	r2, r2, r4
 8011d04:	d10e      	bne.n	8011d24 <__mcmp+0x28>
 8011d06:	f100 0314 	add.w	r3, r0, #20
 8011d0a:	3114      	adds	r1, #20
 8011d0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011d10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011d14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011d18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011d1c:	42a5      	cmp	r5, r4
 8011d1e:	d003      	beq.n	8011d28 <__mcmp+0x2c>
 8011d20:	d305      	bcc.n	8011d2e <__mcmp+0x32>
 8011d22:	2201      	movs	r2, #1
 8011d24:	4610      	mov	r0, r2
 8011d26:	bd30      	pop	{r4, r5, pc}
 8011d28:	4283      	cmp	r3, r0
 8011d2a:	d3f3      	bcc.n	8011d14 <__mcmp+0x18>
 8011d2c:	e7fa      	b.n	8011d24 <__mcmp+0x28>
 8011d2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011d32:	e7f7      	b.n	8011d24 <__mcmp+0x28>

08011d34 <__mdiff>:
 8011d34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d38:	460c      	mov	r4, r1
 8011d3a:	4606      	mov	r6, r0
 8011d3c:	4611      	mov	r1, r2
 8011d3e:	4620      	mov	r0, r4
 8011d40:	4690      	mov	r8, r2
 8011d42:	f7ff ffdb 	bl	8011cfc <__mcmp>
 8011d46:	1e05      	subs	r5, r0, #0
 8011d48:	d110      	bne.n	8011d6c <__mdiff+0x38>
 8011d4a:	4629      	mov	r1, r5
 8011d4c:	4630      	mov	r0, r6
 8011d4e:	f7ff fd59 	bl	8011804 <_Balloc>
 8011d52:	b930      	cbnz	r0, 8011d62 <__mdiff+0x2e>
 8011d54:	4b3a      	ldr	r3, [pc, #232]	; (8011e40 <__mdiff+0x10c>)
 8011d56:	4602      	mov	r2, r0
 8011d58:	f240 2137 	movw	r1, #567	; 0x237
 8011d5c:	4839      	ldr	r0, [pc, #228]	; (8011e44 <__mdiff+0x110>)
 8011d5e:	f000 fad9 	bl	8012314 <__assert_func>
 8011d62:	2301      	movs	r3, #1
 8011d64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011d68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d6c:	bfa4      	itt	ge
 8011d6e:	4643      	movge	r3, r8
 8011d70:	46a0      	movge	r8, r4
 8011d72:	4630      	mov	r0, r6
 8011d74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011d78:	bfa6      	itte	ge
 8011d7a:	461c      	movge	r4, r3
 8011d7c:	2500      	movge	r5, #0
 8011d7e:	2501      	movlt	r5, #1
 8011d80:	f7ff fd40 	bl	8011804 <_Balloc>
 8011d84:	b920      	cbnz	r0, 8011d90 <__mdiff+0x5c>
 8011d86:	4b2e      	ldr	r3, [pc, #184]	; (8011e40 <__mdiff+0x10c>)
 8011d88:	4602      	mov	r2, r0
 8011d8a:	f240 2145 	movw	r1, #581	; 0x245
 8011d8e:	e7e5      	b.n	8011d5c <__mdiff+0x28>
 8011d90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011d94:	6926      	ldr	r6, [r4, #16]
 8011d96:	60c5      	str	r5, [r0, #12]
 8011d98:	f104 0914 	add.w	r9, r4, #20
 8011d9c:	f108 0514 	add.w	r5, r8, #20
 8011da0:	f100 0e14 	add.w	lr, r0, #20
 8011da4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011da8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011dac:	f108 0210 	add.w	r2, r8, #16
 8011db0:	46f2      	mov	sl, lr
 8011db2:	2100      	movs	r1, #0
 8011db4:	f859 3b04 	ldr.w	r3, [r9], #4
 8011db8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011dbc:	fa11 f88b 	uxtah	r8, r1, fp
 8011dc0:	b299      	uxth	r1, r3
 8011dc2:	0c1b      	lsrs	r3, r3, #16
 8011dc4:	eba8 0801 	sub.w	r8, r8, r1
 8011dc8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011dcc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011dd0:	fa1f f888 	uxth.w	r8, r8
 8011dd4:	1419      	asrs	r1, r3, #16
 8011dd6:	454e      	cmp	r6, r9
 8011dd8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011ddc:	f84a 3b04 	str.w	r3, [sl], #4
 8011de0:	d8e8      	bhi.n	8011db4 <__mdiff+0x80>
 8011de2:	1b33      	subs	r3, r6, r4
 8011de4:	3b15      	subs	r3, #21
 8011de6:	f023 0303 	bic.w	r3, r3, #3
 8011dea:	3304      	adds	r3, #4
 8011dec:	3415      	adds	r4, #21
 8011dee:	42a6      	cmp	r6, r4
 8011df0:	bf38      	it	cc
 8011df2:	2304      	movcc	r3, #4
 8011df4:	441d      	add	r5, r3
 8011df6:	4473      	add	r3, lr
 8011df8:	469e      	mov	lr, r3
 8011dfa:	462e      	mov	r6, r5
 8011dfc:	4566      	cmp	r6, ip
 8011dfe:	d30e      	bcc.n	8011e1e <__mdiff+0xea>
 8011e00:	f10c 0203 	add.w	r2, ip, #3
 8011e04:	1b52      	subs	r2, r2, r5
 8011e06:	f022 0203 	bic.w	r2, r2, #3
 8011e0a:	3d03      	subs	r5, #3
 8011e0c:	45ac      	cmp	ip, r5
 8011e0e:	bf38      	it	cc
 8011e10:	2200      	movcc	r2, #0
 8011e12:	4413      	add	r3, r2
 8011e14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011e18:	b17a      	cbz	r2, 8011e3a <__mdiff+0x106>
 8011e1a:	6107      	str	r7, [r0, #16]
 8011e1c:	e7a4      	b.n	8011d68 <__mdiff+0x34>
 8011e1e:	f856 8b04 	ldr.w	r8, [r6], #4
 8011e22:	fa11 f288 	uxtah	r2, r1, r8
 8011e26:	1414      	asrs	r4, r2, #16
 8011e28:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011e2c:	b292      	uxth	r2, r2
 8011e2e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011e32:	f84e 2b04 	str.w	r2, [lr], #4
 8011e36:	1421      	asrs	r1, r4, #16
 8011e38:	e7e0      	b.n	8011dfc <__mdiff+0xc8>
 8011e3a:	3f01      	subs	r7, #1
 8011e3c:	e7ea      	b.n	8011e14 <__mdiff+0xe0>
 8011e3e:	bf00      	nop
 8011e40:	08013489 	.word	0x08013489
 8011e44:	0801349a 	.word	0x0801349a

08011e48 <__d2b>:
 8011e48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011e4c:	460f      	mov	r7, r1
 8011e4e:	2101      	movs	r1, #1
 8011e50:	ec59 8b10 	vmov	r8, r9, d0
 8011e54:	4616      	mov	r6, r2
 8011e56:	f7ff fcd5 	bl	8011804 <_Balloc>
 8011e5a:	4604      	mov	r4, r0
 8011e5c:	b930      	cbnz	r0, 8011e6c <__d2b+0x24>
 8011e5e:	4602      	mov	r2, r0
 8011e60:	4b24      	ldr	r3, [pc, #144]	; (8011ef4 <__d2b+0xac>)
 8011e62:	4825      	ldr	r0, [pc, #148]	; (8011ef8 <__d2b+0xb0>)
 8011e64:	f240 310f 	movw	r1, #783	; 0x30f
 8011e68:	f000 fa54 	bl	8012314 <__assert_func>
 8011e6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011e70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011e74:	bb2d      	cbnz	r5, 8011ec2 <__d2b+0x7a>
 8011e76:	9301      	str	r3, [sp, #4]
 8011e78:	f1b8 0300 	subs.w	r3, r8, #0
 8011e7c:	d026      	beq.n	8011ecc <__d2b+0x84>
 8011e7e:	4668      	mov	r0, sp
 8011e80:	9300      	str	r3, [sp, #0]
 8011e82:	f7ff fd87 	bl	8011994 <__lo0bits>
 8011e86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011e8a:	b1e8      	cbz	r0, 8011ec8 <__d2b+0x80>
 8011e8c:	f1c0 0320 	rsb	r3, r0, #32
 8011e90:	fa02 f303 	lsl.w	r3, r2, r3
 8011e94:	430b      	orrs	r3, r1
 8011e96:	40c2      	lsrs	r2, r0
 8011e98:	6163      	str	r3, [r4, #20]
 8011e9a:	9201      	str	r2, [sp, #4]
 8011e9c:	9b01      	ldr	r3, [sp, #4]
 8011e9e:	61a3      	str	r3, [r4, #24]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	bf14      	ite	ne
 8011ea4:	2202      	movne	r2, #2
 8011ea6:	2201      	moveq	r2, #1
 8011ea8:	6122      	str	r2, [r4, #16]
 8011eaa:	b1bd      	cbz	r5, 8011edc <__d2b+0x94>
 8011eac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011eb0:	4405      	add	r5, r0
 8011eb2:	603d      	str	r5, [r7, #0]
 8011eb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011eb8:	6030      	str	r0, [r6, #0]
 8011eba:	4620      	mov	r0, r4
 8011ebc:	b003      	add	sp, #12
 8011ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011ec6:	e7d6      	b.n	8011e76 <__d2b+0x2e>
 8011ec8:	6161      	str	r1, [r4, #20]
 8011eca:	e7e7      	b.n	8011e9c <__d2b+0x54>
 8011ecc:	a801      	add	r0, sp, #4
 8011ece:	f7ff fd61 	bl	8011994 <__lo0bits>
 8011ed2:	9b01      	ldr	r3, [sp, #4]
 8011ed4:	6163      	str	r3, [r4, #20]
 8011ed6:	3020      	adds	r0, #32
 8011ed8:	2201      	movs	r2, #1
 8011eda:	e7e5      	b.n	8011ea8 <__d2b+0x60>
 8011edc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011ee0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011ee4:	6038      	str	r0, [r7, #0]
 8011ee6:	6918      	ldr	r0, [r3, #16]
 8011ee8:	f7ff fd34 	bl	8011954 <__hi0bits>
 8011eec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011ef0:	e7e2      	b.n	8011eb8 <__d2b+0x70>
 8011ef2:	bf00      	nop
 8011ef4:	08013489 	.word	0x08013489
 8011ef8:	0801349a 	.word	0x0801349a

08011efc <__sfputc_r>:
 8011efc:	6893      	ldr	r3, [r2, #8]
 8011efe:	3b01      	subs	r3, #1
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	b410      	push	{r4}
 8011f04:	6093      	str	r3, [r2, #8]
 8011f06:	da08      	bge.n	8011f1a <__sfputc_r+0x1e>
 8011f08:	6994      	ldr	r4, [r2, #24]
 8011f0a:	42a3      	cmp	r3, r4
 8011f0c:	db01      	blt.n	8011f12 <__sfputc_r+0x16>
 8011f0e:	290a      	cmp	r1, #10
 8011f10:	d103      	bne.n	8011f1a <__sfputc_r+0x1e>
 8011f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f16:	f7fe bb6e 	b.w	80105f6 <__swbuf_r>
 8011f1a:	6813      	ldr	r3, [r2, #0]
 8011f1c:	1c58      	adds	r0, r3, #1
 8011f1e:	6010      	str	r0, [r2, #0]
 8011f20:	7019      	strb	r1, [r3, #0]
 8011f22:	4608      	mov	r0, r1
 8011f24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f28:	4770      	bx	lr

08011f2a <__sfputs_r>:
 8011f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f2c:	4606      	mov	r6, r0
 8011f2e:	460f      	mov	r7, r1
 8011f30:	4614      	mov	r4, r2
 8011f32:	18d5      	adds	r5, r2, r3
 8011f34:	42ac      	cmp	r4, r5
 8011f36:	d101      	bne.n	8011f3c <__sfputs_r+0x12>
 8011f38:	2000      	movs	r0, #0
 8011f3a:	e007      	b.n	8011f4c <__sfputs_r+0x22>
 8011f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f40:	463a      	mov	r2, r7
 8011f42:	4630      	mov	r0, r6
 8011f44:	f7ff ffda 	bl	8011efc <__sfputc_r>
 8011f48:	1c43      	adds	r3, r0, #1
 8011f4a:	d1f3      	bne.n	8011f34 <__sfputs_r+0xa>
 8011f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f50 <_vfiprintf_r>:
 8011f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f54:	460d      	mov	r5, r1
 8011f56:	b09d      	sub	sp, #116	; 0x74
 8011f58:	4614      	mov	r4, r2
 8011f5a:	4698      	mov	r8, r3
 8011f5c:	4606      	mov	r6, r0
 8011f5e:	b118      	cbz	r0, 8011f68 <_vfiprintf_r+0x18>
 8011f60:	6a03      	ldr	r3, [r0, #32]
 8011f62:	b90b      	cbnz	r3, 8011f68 <_vfiprintf_r+0x18>
 8011f64:	f7fe fab4 	bl	80104d0 <__sinit>
 8011f68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f6a:	07d9      	lsls	r1, r3, #31
 8011f6c:	d405      	bmi.n	8011f7a <_vfiprintf_r+0x2a>
 8011f6e:	89ab      	ldrh	r3, [r5, #12]
 8011f70:	059a      	lsls	r2, r3, #22
 8011f72:	d402      	bmi.n	8011f7a <_vfiprintf_r+0x2a>
 8011f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f76:	f7fe fcba 	bl	80108ee <__retarget_lock_acquire_recursive>
 8011f7a:	89ab      	ldrh	r3, [r5, #12]
 8011f7c:	071b      	lsls	r3, r3, #28
 8011f7e:	d501      	bpl.n	8011f84 <_vfiprintf_r+0x34>
 8011f80:	692b      	ldr	r3, [r5, #16]
 8011f82:	b99b      	cbnz	r3, 8011fac <_vfiprintf_r+0x5c>
 8011f84:	4629      	mov	r1, r5
 8011f86:	4630      	mov	r0, r6
 8011f88:	f7fe fb72 	bl	8010670 <__swsetup_r>
 8011f8c:	b170      	cbz	r0, 8011fac <_vfiprintf_r+0x5c>
 8011f8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f90:	07dc      	lsls	r4, r3, #31
 8011f92:	d504      	bpl.n	8011f9e <_vfiprintf_r+0x4e>
 8011f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f98:	b01d      	add	sp, #116	; 0x74
 8011f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f9e:	89ab      	ldrh	r3, [r5, #12]
 8011fa0:	0598      	lsls	r0, r3, #22
 8011fa2:	d4f7      	bmi.n	8011f94 <_vfiprintf_r+0x44>
 8011fa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011fa6:	f7fe fca3 	bl	80108f0 <__retarget_lock_release_recursive>
 8011faa:	e7f3      	b.n	8011f94 <_vfiprintf_r+0x44>
 8011fac:	2300      	movs	r3, #0
 8011fae:	9309      	str	r3, [sp, #36]	; 0x24
 8011fb0:	2320      	movs	r3, #32
 8011fb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8011fba:	2330      	movs	r3, #48	; 0x30
 8011fbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012170 <_vfiprintf_r+0x220>
 8011fc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011fc4:	f04f 0901 	mov.w	r9, #1
 8011fc8:	4623      	mov	r3, r4
 8011fca:	469a      	mov	sl, r3
 8011fcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fd0:	b10a      	cbz	r2, 8011fd6 <_vfiprintf_r+0x86>
 8011fd2:	2a25      	cmp	r2, #37	; 0x25
 8011fd4:	d1f9      	bne.n	8011fca <_vfiprintf_r+0x7a>
 8011fd6:	ebba 0b04 	subs.w	fp, sl, r4
 8011fda:	d00b      	beq.n	8011ff4 <_vfiprintf_r+0xa4>
 8011fdc:	465b      	mov	r3, fp
 8011fde:	4622      	mov	r2, r4
 8011fe0:	4629      	mov	r1, r5
 8011fe2:	4630      	mov	r0, r6
 8011fe4:	f7ff ffa1 	bl	8011f2a <__sfputs_r>
 8011fe8:	3001      	adds	r0, #1
 8011fea:	f000 80a9 	beq.w	8012140 <_vfiprintf_r+0x1f0>
 8011fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ff0:	445a      	add	r2, fp
 8011ff2:	9209      	str	r2, [sp, #36]	; 0x24
 8011ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	f000 80a1 	beq.w	8012140 <_vfiprintf_r+0x1f0>
 8011ffe:	2300      	movs	r3, #0
 8012000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012008:	f10a 0a01 	add.w	sl, sl, #1
 801200c:	9304      	str	r3, [sp, #16]
 801200e:	9307      	str	r3, [sp, #28]
 8012010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012014:	931a      	str	r3, [sp, #104]	; 0x68
 8012016:	4654      	mov	r4, sl
 8012018:	2205      	movs	r2, #5
 801201a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801201e:	4854      	ldr	r0, [pc, #336]	; (8012170 <_vfiprintf_r+0x220>)
 8012020:	f7ee f8e6 	bl	80001f0 <memchr>
 8012024:	9a04      	ldr	r2, [sp, #16]
 8012026:	b9d8      	cbnz	r0, 8012060 <_vfiprintf_r+0x110>
 8012028:	06d1      	lsls	r1, r2, #27
 801202a:	bf44      	itt	mi
 801202c:	2320      	movmi	r3, #32
 801202e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012032:	0713      	lsls	r3, r2, #28
 8012034:	bf44      	itt	mi
 8012036:	232b      	movmi	r3, #43	; 0x2b
 8012038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801203c:	f89a 3000 	ldrb.w	r3, [sl]
 8012040:	2b2a      	cmp	r3, #42	; 0x2a
 8012042:	d015      	beq.n	8012070 <_vfiprintf_r+0x120>
 8012044:	9a07      	ldr	r2, [sp, #28]
 8012046:	4654      	mov	r4, sl
 8012048:	2000      	movs	r0, #0
 801204a:	f04f 0c0a 	mov.w	ip, #10
 801204e:	4621      	mov	r1, r4
 8012050:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012054:	3b30      	subs	r3, #48	; 0x30
 8012056:	2b09      	cmp	r3, #9
 8012058:	d94d      	bls.n	80120f6 <_vfiprintf_r+0x1a6>
 801205a:	b1b0      	cbz	r0, 801208a <_vfiprintf_r+0x13a>
 801205c:	9207      	str	r2, [sp, #28]
 801205e:	e014      	b.n	801208a <_vfiprintf_r+0x13a>
 8012060:	eba0 0308 	sub.w	r3, r0, r8
 8012064:	fa09 f303 	lsl.w	r3, r9, r3
 8012068:	4313      	orrs	r3, r2
 801206a:	9304      	str	r3, [sp, #16]
 801206c:	46a2      	mov	sl, r4
 801206e:	e7d2      	b.n	8012016 <_vfiprintf_r+0xc6>
 8012070:	9b03      	ldr	r3, [sp, #12]
 8012072:	1d19      	adds	r1, r3, #4
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	9103      	str	r1, [sp, #12]
 8012078:	2b00      	cmp	r3, #0
 801207a:	bfbb      	ittet	lt
 801207c:	425b      	neglt	r3, r3
 801207e:	f042 0202 	orrlt.w	r2, r2, #2
 8012082:	9307      	strge	r3, [sp, #28]
 8012084:	9307      	strlt	r3, [sp, #28]
 8012086:	bfb8      	it	lt
 8012088:	9204      	strlt	r2, [sp, #16]
 801208a:	7823      	ldrb	r3, [r4, #0]
 801208c:	2b2e      	cmp	r3, #46	; 0x2e
 801208e:	d10c      	bne.n	80120aa <_vfiprintf_r+0x15a>
 8012090:	7863      	ldrb	r3, [r4, #1]
 8012092:	2b2a      	cmp	r3, #42	; 0x2a
 8012094:	d134      	bne.n	8012100 <_vfiprintf_r+0x1b0>
 8012096:	9b03      	ldr	r3, [sp, #12]
 8012098:	1d1a      	adds	r2, r3, #4
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	9203      	str	r2, [sp, #12]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	bfb8      	it	lt
 80120a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80120a6:	3402      	adds	r4, #2
 80120a8:	9305      	str	r3, [sp, #20]
 80120aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012180 <_vfiprintf_r+0x230>
 80120ae:	7821      	ldrb	r1, [r4, #0]
 80120b0:	2203      	movs	r2, #3
 80120b2:	4650      	mov	r0, sl
 80120b4:	f7ee f89c 	bl	80001f0 <memchr>
 80120b8:	b138      	cbz	r0, 80120ca <_vfiprintf_r+0x17a>
 80120ba:	9b04      	ldr	r3, [sp, #16]
 80120bc:	eba0 000a 	sub.w	r0, r0, sl
 80120c0:	2240      	movs	r2, #64	; 0x40
 80120c2:	4082      	lsls	r2, r0
 80120c4:	4313      	orrs	r3, r2
 80120c6:	3401      	adds	r4, #1
 80120c8:	9304      	str	r3, [sp, #16]
 80120ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120ce:	4829      	ldr	r0, [pc, #164]	; (8012174 <_vfiprintf_r+0x224>)
 80120d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120d4:	2206      	movs	r2, #6
 80120d6:	f7ee f88b 	bl	80001f0 <memchr>
 80120da:	2800      	cmp	r0, #0
 80120dc:	d03f      	beq.n	801215e <_vfiprintf_r+0x20e>
 80120de:	4b26      	ldr	r3, [pc, #152]	; (8012178 <_vfiprintf_r+0x228>)
 80120e0:	bb1b      	cbnz	r3, 801212a <_vfiprintf_r+0x1da>
 80120e2:	9b03      	ldr	r3, [sp, #12]
 80120e4:	3307      	adds	r3, #7
 80120e6:	f023 0307 	bic.w	r3, r3, #7
 80120ea:	3308      	adds	r3, #8
 80120ec:	9303      	str	r3, [sp, #12]
 80120ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120f0:	443b      	add	r3, r7
 80120f2:	9309      	str	r3, [sp, #36]	; 0x24
 80120f4:	e768      	b.n	8011fc8 <_vfiprintf_r+0x78>
 80120f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80120fa:	460c      	mov	r4, r1
 80120fc:	2001      	movs	r0, #1
 80120fe:	e7a6      	b.n	801204e <_vfiprintf_r+0xfe>
 8012100:	2300      	movs	r3, #0
 8012102:	3401      	adds	r4, #1
 8012104:	9305      	str	r3, [sp, #20]
 8012106:	4619      	mov	r1, r3
 8012108:	f04f 0c0a 	mov.w	ip, #10
 801210c:	4620      	mov	r0, r4
 801210e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012112:	3a30      	subs	r2, #48	; 0x30
 8012114:	2a09      	cmp	r2, #9
 8012116:	d903      	bls.n	8012120 <_vfiprintf_r+0x1d0>
 8012118:	2b00      	cmp	r3, #0
 801211a:	d0c6      	beq.n	80120aa <_vfiprintf_r+0x15a>
 801211c:	9105      	str	r1, [sp, #20]
 801211e:	e7c4      	b.n	80120aa <_vfiprintf_r+0x15a>
 8012120:	fb0c 2101 	mla	r1, ip, r1, r2
 8012124:	4604      	mov	r4, r0
 8012126:	2301      	movs	r3, #1
 8012128:	e7f0      	b.n	801210c <_vfiprintf_r+0x1bc>
 801212a:	ab03      	add	r3, sp, #12
 801212c:	9300      	str	r3, [sp, #0]
 801212e:	462a      	mov	r2, r5
 8012130:	4b12      	ldr	r3, [pc, #72]	; (801217c <_vfiprintf_r+0x22c>)
 8012132:	a904      	add	r1, sp, #16
 8012134:	4630      	mov	r0, r6
 8012136:	f7fd fcb7 	bl	800faa8 <_printf_float>
 801213a:	4607      	mov	r7, r0
 801213c:	1c78      	adds	r0, r7, #1
 801213e:	d1d6      	bne.n	80120ee <_vfiprintf_r+0x19e>
 8012140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012142:	07d9      	lsls	r1, r3, #31
 8012144:	d405      	bmi.n	8012152 <_vfiprintf_r+0x202>
 8012146:	89ab      	ldrh	r3, [r5, #12]
 8012148:	059a      	lsls	r2, r3, #22
 801214a:	d402      	bmi.n	8012152 <_vfiprintf_r+0x202>
 801214c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801214e:	f7fe fbcf 	bl	80108f0 <__retarget_lock_release_recursive>
 8012152:	89ab      	ldrh	r3, [r5, #12]
 8012154:	065b      	lsls	r3, r3, #25
 8012156:	f53f af1d 	bmi.w	8011f94 <_vfiprintf_r+0x44>
 801215a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801215c:	e71c      	b.n	8011f98 <_vfiprintf_r+0x48>
 801215e:	ab03      	add	r3, sp, #12
 8012160:	9300      	str	r3, [sp, #0]
 8012162:	462a      	mov	r2, r5
 8012164:	4b05      	ldr	r3, [pc, #20]	; (801217c <_vfiprintf_r+0x22c>)
 8012166:	a904      	add	r1, sp, #16
 8012168:	4630      	mov	r0, r6
 801216a:	f7fd ff41 	bl	800fff0 <_printf_i>
 801216e:	e7e4      	b.n	801213a <_vfiprintf_r+0x1ea>
 8012170:	080135f4 	.word	0x080135f4
 8012174:	080135fe 	.word	0x080135fe
 8012178:	0800faa9 	.word	0x0800faa9
 801217c:	08011f2b 	.word	0x08011f2b
 8012180:	080135fa 	.word	0x080135fa

08012184 <__swhatbuf_r>:
 8012184:	b570      	push	{r4, r5, r6, lr}
 8012186:	460c      	mov	r4, r1
 8012188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801218c:	2900      	cmp	r1, #0
 801218e:	b096      	sub	sp, #88	; 0x58
 8012190:	4615      	mov	r5, r2
 8012192:	461e      	mov	r6, r3
 8012194:	da0d      	bge.n	80121b2 <__swhatbuf_r+0x2e>
 8012196:	89a3      	ldrh	r3, [r4, #12]
 8012198:	f013 0f80 	tst.w	r3, #128	; 0x80
 801219c:	f04f 0100 	mov.w	r1, #0
 80121a0:	bf0c      	ite	eq
 80121a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80121a6:	2340      	movne	r3, #64	; 0x40
 80121a8:	2000      	movs	r0, #0
 80121aa:	6031      	str	r1, [r6, #0]
 80121ac:	602b      	str	r3, [r5, #0]
 80121ae:	b016      	add	sp, #88	; 0x58
 80121b0:	bd70      	pop	{r4, r5, r6, pc}
 80121b2:	466a      	mov	r2, sp
 80121b4:	f000 f87c 	bl	80122b0 <_fstat_r>
 80121b8:	2800      	cmp	r0, #0
 80121ba:	dbec      	blt.n	8012196 <__swhatbuf_r+0x12>
 80121bc:	9901      	ldr	r1, [sp, #4]
 80121be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80121c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80121c6:	4259      	negs	r1, r3
 80121c8:	4159      	adcs	r1, r3
 80121ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80121ce:	e7eb      	b.n	80121a8 <__swhatbuf_r+0x24>

080121d0 <__smakebuf_r>:
 80121d0:	898b      	ldrh	r3, [r1, #12]
 80121d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80121d4:	079d      	lsls	r5, r3, #30
 80121d6:	4606      	mov	r6, r0
 80121d8:	460c      	mov	r4, r1
 80121da:	d507      	bpl.n	80121ec <__smakebuf_r+0x1c>
 80121dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80121e0:	6023      	str	r3, [r4, #0]
 80121e2:	6123      	str	r3, [r4, #16]
 80121e4:	2301      	movs	r3, #1
 80121e6:	6163      	str	r3, [r4, #20]
 80121e8:	b002      	add	sp, #8
 80121ea:	bd70      	pop	{r4, r5, r6, pc}
 80121ec:	ab01      	add	r3, sp, #4
 80121ee:	466a      	mov	r2, sp
 80121f0:	f7ff ffc8 	bl	8012184 <__swhatbuf_r>
 80121f4:	9900      	ldr	r1, [sp, #0]
 80121f6:	4605      	mov	r5, r0
 80121f8:	4630      	mov	r0, r6
 80121fa:	f7ff fa77 	bl	80116ec <_malloc_r>
 80121fe:	b948      	cbnz	r0, 8012214 <__smakebuf_r+0x44>
 8012200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012204:	059a      	lsls	r2, r3, #22
 8012206:	d4ef      	bmi.n	80121e8 <__smakebuf_r+0x18>
 8012208:	f023 0303 	bic.w	r3, r3, #3
 801220c:	f043 0302 	orr.w	r3, r3, #2
 8012210:	81a3      	strh	r3, [r4, #12]
 8012212:	e7e3      	b.n	80121dc <__smakebuf_r+0xc>
 8012214:	89a3      	ldrh	r3, [r4, #12]
 8012216:	6020      	str	r0, [r4, #0]
 8012218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801221c:	81a3      	strh	r3, [r4, #12]
 801221e:	9b00      	ldr	r3, [sp, #0]
 8012220:	6163      	str	r3, [r4, #20]
 8012222:	9b01      	ldr	r3, [sp, #4]
 8012224:	6120      	str	r0, [r4, #16]
 8012226:	b15b      	cbz	r3, 8012240 <__smakebuf_r+0x70>
 8012228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801222c:	4630      	mov	r0, r6
 801222e:	f000 f851 	bl	80122d4 <_isatty_r>
 8012232:	b128      	cbz	r0, 8012240 <__smakebuf_r+0x70>
 8012234:	89a3      	ldrh	r3, [r4, #12]
 8012236:	f023 0303 	bic.w	r3, r3, #3
 801223a:	f043 0301 	orr.w	r3, r3, #1
 801223e:	81a3      	strh	r3, [r4, #12]
 8012240:	89a3      	ldrh	r3, [r4, #12]
 8012242:	431d      	orrs	r5, r3
 8012244:	81a5      	strh	r5, [r4, #12]
 8012246:	e7cf      	b.n	80121e8 <__smakebuf_r+0x18>

08012248 <_putc_r>:
 8012248:	b570      	push	{r4, r5, r6, lr}
 801224a:	460d      	mov	r5, r1
 801224c:	4614      	mov	r4, r2
 801224e:	4606      	mov	r6, r0
 8012250:	b118      	cbz	r0, 801225a <_putc_r+0x12>
 8012252:	6a03      	ldr	r3, [r0, #32]
 8012254:	b90b      	cbnz	r3, 801225a <_putc_r+0x12>
 8012256:	f7fe f93b 	bl	80104d0 <__sinit>
 801225a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801225c:	07d8      	lsls	r0, r3, #31
 801225e:	d405      	bmi.n	801226c <_putc_r+0x24>
 8012260:	89a3      	ldrh	r3, [r4, #12]
 8012262:	0599      	lsls	r1, r3, #22
 8012264:	d402      	bmi.n	801226c <_putc_r+0x24>
 8012266:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012268:	f7fe fb41 	bl	80108ee <__retarget_lock_acquire_recursive>
 801226c:	68a3      	ldr	r3, [r4, #8]
 801226e:	3b01      	subs	r3, #1
 8012270:	2b00      	cmp	r3, #0
 8012272:	60a3      	str	r3, [r4, #8]
 8012274:	da05      	bge.n	8012282 <_putc_r+0x3a>
 8012276:	69a2      	ldr	r2, [r4, #24]
 8012278:	4293      	cmp	r3, r2
 801227a:	db12      	blt.n	80122a2 <_putc_r+0x5a>
 801227c:	b2eb      	uxtb	r3, r5
 801227e:	2b0a      	cmp	r3, #10
 8012280:	d00f      	beq.n	80122a2 <_putc_r+0x5a>
 8012282:	6823      	ldr	r3, [r4, #0]
 8012284:	1c5a      	adds	r2, r3, #1
 8012286:	6022      	str	r2, [r4, #0]
 8012288:	701d      	strb	r5, [r3, #0]
 801228a:	b2ed      	uxtb	r5, r5
 801228c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801228e:	07da      	lsls	r2, r3, #31
 8012290:	d405      	bmi.n	801229e <_putc_r+0x56>
 8012292:	89a3      	ldrh	r3, [r4, #12]
 8012294:	059b      	lsls	r3, r3, #22
 8012296:	d402      	bmi.n	801229e <_putc_r+0x56>
 8012298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801229a:	f7fe fb29 	bl	80108f0 <__retarget_lock_release_recursive>
 801229e:	4628      	mov	r0, r5
 80122a0:	bd70      	pop	{r4, r5, r6, pc}
 80122a2:	4629      	mov	r1, r5
 80122a4:	4622      	mov	r2, r4
 80122a6:	4630      	mov	r0, r6
 80122a8:	f7fe f9a5 	bl	80105f6 <__swbuf_r>
 80122ac:	4605      	mov	r5, r0
 80122ae:	e7ed      	b.n	801228c <_putc_r+0x44>

080122b0 <_fstat_r>:
 80122b0:	b538      	push	{r3, r4, r5, lr}
 80122b2:	4d07      	ldr	r5, [pc, #28]	; (80122d0 <_fstat_r+0x20>)
 80122b4:	2300      	movs	r3, #0
 80122b6:	4604      	mov	r4, r0
 80122b8:	4608      	mov	r0, r1
 80122ba:	4611      	mov	r1, r2
 80122bc:	602b      	str	r3, [r5, #0]
 80122be:	f7f1 fcca 	bl	8003c56 <_fstat>
 80122c2:	1c43      	adds	r3, r0, #1
 80122c4:	d102      	bne.n	80122cc <_fstat_r+0x1c>
 80122c6:	682b      	ldr	r3, [r5, #0]
 80122c8:	b103      	cbz	r3, 80122cc <_fstat_r+0x1c>
 80122ca:	6023      	str	r3, [r4, #0]
 80122cc:	bd38      	pop	{r3, r4, r5, pc}
 80122ce:	bf00      	nop
 80122d0:	200090c8 	.word	0x200090c8

080122d4 <_isatty_r>:
 80122d4:	b538      	push	{r3, r4, r5, lr}
 80122d6:	4d06      	ldr	r5, [pc, #24]	; (80122f0 <_isatty_r+0x1c>)
 80122d8:	2300      	movs	r3, #0
 80122da:	4604      	mov	r4, r0
 80122dc:	4608      	mov	r0, r1
 80122de:	602b      	str	r3, [r5, #0]
 80122e0:	f7f1 fcc9 	bl	8003c76 <_isatty>
 80122e4:	1c43      	adds	r3, r0, #1
 80122e6:	d102      	bne.n	80122ee <_isatty_r+0x1a>
 80122e8:	682b      	ldr	r3, [r5, #0]
 80122ea:	b103      	cbz	r3, 80122ee <_isatty_r+0x1a>
 80122ec:	6023      	str	r3, [r4, #0]
 80122ee:	bd38      	pop	{r3, r4, r5, pc}
 80122f0:	200090c8 	.word	0x200090c8

080122f4 <_sbrk_r>:
 80122f4:	b538      	push	{r3, r4, r5, lr}
 80122f6:	4d06      	ldr	r5, [pc, #24]	; (8012310 <_sbrk_r+0x1c>)
 80122f8:	2300      	movs	r3, #0
 80122fa:	4604      	mov	r4, r0
 80122fc:	4608      	mov	r0, r1
 80122fe:	602b      	str	r3, [r5, #0]
 8012300:	f7f1 fcd2 	bl	8003ca8 <_sbrk>
 8012304:	1c43      	adds	r3, r0, #1
 8012306:	d102      	bne.n	801230e <_sbrk_r+0x1a>
 8012308:	682b      	ldr	r3, [r5, #0]
 801230a:	b103      	cbz	r3, 801230e <_sbrk_r+0x1a>
 801230c:	6023      	str	r3, [r4, #0]
 801230e:	bd38      	pop	{r3, r4, r5, pc}
 8012310:	200090c8 	.word	0x200090c8

08012314 <__assert_func>:
 8012314:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012316:	4614      	mov	r4, r2
 8012318:	461a      	mov	r2, r3
 801231a:	4b09      	ldr	r3, [pc, #36]	; (8012340 <__assert_func+0x2c>)
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	4605      	mov	r5, r0
 8012320:	68d8      	ldr	r0, [r3, #12]
 8012322:	b14c      	cbz	r4, 8012338 <__assert_func+0x24>
 8012324:	4b07      	ldr	r3, [pc, #28]	; (8012344 <__assert_func+0x30>)
 8012326:	9100      	str	r1, [sp, #0]
 8012328:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801232c:	4906      	ldr	r1, [pc, #24]	; (8012348 <__assert_func+0x34>)
 801232e:	462b      	mov	r3, r5
 8012330:	f000 f844 	bl	80123bc <fiprintf>
 8012334:	f000 f854 	bl	80123e0 <abort>
 8012338:	4b04      	ldr	r3, [pc, #16]	; (801234c <__assert_func+0x38>)
 801233a:	461c      	mov	r4, r3
 801233c:	e7f3      	b.n	8012326 <__assert_func+0x12>
 801233e:	bf00      	nop
 8012340:	20000238 	.word	0x20000238
 8012344:	0801360f 	.word	0x0801360f
 8012348:	0801361c 	.word	0x0801361c
 801234c:	0801364a 	.word	0x0801364a

08012350 <_calloc_r>:
 8012350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012352:	fba1 2402 	umull	r2, r4, r1, r2
 8012356:	b94c      	cbnz	r4, 801236c <_calloc_r+0x1c>
 8012358:	4611      	mov	r1, r2
 801235a:	9201      	str	r2, [sp, #4]
 801235c:	f7ff f9c6 	bl	80116ec <_malloc_r>
 8012360:	9a01      	ldr	r2, [sp, #4]
 8012362:	4605      	mov	r5, r0
 8012364:	b930      	cbnz	r0, 8012374 <_calloc_r+0x24>
 8012366:	4628      	mov	r0, r5
 8012368:	b003      	add	sp, #12
 801236a:	bd30      	pop	{r4, r5, pc}
 801236c:	220c      	movs	r2, #12
 801236e:	6002      	str	r2, [r0, #0]
 8012370:	2500      	movs	r5, #0
 8012372:	e7f8      	b.n	8012366 <_calloc_r+0x16>
 8012374:	4621      	mov	r1, r4
 8012376:	f7fe f9d3 	bl	8010720 <memset>
 801237a:	e7f4      	b.n	8012366 <_calloc_r+0x16>

0801237c <__ascii_mbtowc>:
 801237c:	b082      	sub	sp, #8
 801237e:	b901      	cbnz	r1, 8012382 <__ascii_mbtowc+0x6>
 8012380:	a901      	add	r1, sp, #4
 8012382:	b142      	cbz	r2, 8012396 <__ascii_mbtowc+0x1a>
 8012384:	b14b      	cbz	r3, 801239a <__ascii_mbtowc+0x1e>
 8012386:	7813      	ldrb	r3, [r2, #0]
 8012388:	600b      	str	r3, [r1, #0]
 801238a:	7812      	ldrb	r2, [r2, #0]
 801238c:	1e10      	subs	r0, r2, #0
 801238e:	bf18      	it	ne
 8012390:	2001      	movne	r0, #1
 8012392:	b002      	add	sp, #8
 8012394:	4770      	bx	lr
 8012396:	4610      	mov	r0, r2
 8012398:	e7fb      	b.n	8012392 <__ascii_mbtowc+0x16>
 801239a:	f06f 0001 	mvn.w	r0, #1
 801239e:	e7f8      	b.n	8012392 <__ascii_mbtowc+0x16>

080123a0 <__ascii_wctomb>:
 80123a0:	b149      	cbz	r1, 80123b6 <__ascii_wctomb+0x16>
 80123a2:	2aff      	cmp	r2, #255	; 0xff
 80123a4:	bf85      	ittet	hi
 80123a6:	238a      	movhi	r3, #138	; 0x8a
 80123a8:	6003      	strhi	r3, [r0, #0]
 80123aa:	700a      	strbls	r2, [r1, #0]
 80123ac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80123b0:	bf98      	it	ls
 80123b2:	2001      	movls	r0, #1
 80123b4:	4770      	bx	lr
 80123b6:	4608      	mov	r0, r1
 80123b8:	4770      	bx	lr
	...

080123bc <fiprintf>:
 80123bc:	b40e      	push	{r1, r2, r3}
 80123be:	b503      	push	{r0, r1, lr}
 80123c0:	4601      	mov	r1, r0
 80123c2:	ab03      	add	r3, sp, #12
 80123c4:	4805      	ldr	r0, [pc, #20]	; (80123dc <fiprintf+0x20>)
 80123c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80123ca:	6800      	ldr	r0, [r0, #0]
 80123cc:	9301      	str	r3, [sp, #4]
 80123ce:	f7ff fdbf 	bl	8011f50 <_vfiprintf_r>
 80123d2:	b002      	add	sp, #8
 80123d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80123d8:	b003      	add	sp, #12
 80123da:	4770      	bx	lr
 80123dc:	20000238 	.word	0x20000238

080123e0 <abort>:
 80123e0:	b508      	push	{r3, lr}
 80123e2:	2006      	movs	r0, #6
 80123e4:	f000 f82c 	bl	8012440 <raise>
 80123e8:	2001      	movs	r0, #1
 80123ea:	f7f1 fbe5 	bl	8003bb8 <_exit>

080123ee <_raise_r>:
 80123ee:	291f      	cmp	r1, #31
 80123f0:	b538      	push	{r3, r4, r5, lr}
 80123f2:	4604      	mov	r4, r0
 80123f4:	460d      	mov	r5, r1
 80123f6:	d904      	bls.n	8012402 <_raise_r+0x14>
 80123f8:	2316      	movs	r3, #22
 80123fa:	6003      	str	r3, [r0, #0]
 80123fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012400:	bd38      	pop	{r3, r4, r5, pc}
 8012402:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012404:	b112      	cbz	r2, 801240c <_raise_r+0x1e>
 8012406:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801240a:	b94b      	cbnz	r3, 8012420 <_raise_r+0x32>
 801240c:	4620      	mov	r0, r4
 801240e:	f000 f831 	bl	8012474 <_getpid_r>
 8012412:	462a      	mov	r2, r5
 8012414:	4601      	mov	r1, r0
 8012416:	4620      	mov	r0, r4
 8012418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801241c:	f000 b818 	b.w	8012450 <_kill_r>
 8012420:	2b01      	cmp	r3, #1
 8012422:	d00a      	beq.n	801243a <_raise_r+0x4c>
 8012424:	1c59      	adds	r1, r3, #1
 8012426:	d103      	bne.n	8012430 <_raise_r+0x42>
 8012428:	2316      	movs	r3, #22
 801242a:	6003      	str	r3, [r0, #0]
 801242c:	2001      	movs	r0, #1
 801242e:	e7e7      	b.n	8012400 <_raise_r+0x12>
 8012430:	2400      	movs	r4, #0
 8012432:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012436:	4628      	mov	r0, r5
 8012438:	4798      	blx	r3
 801243a:	2000      	movs	r0, #0
 801243c:	e7e0      	b.n	8012400 <_raise_r+0x12>
	...

08012440 <raise>:
 8012440:	4b02      	ldr	r3, [pc, #8]	; (801244c <raise+0xc>)
 8012442:	4601      	mov	r1, r0
 8012444:	6818      	ldr	r0, [r3, #0]
 8012446:	f7ff bfd2 	b.w	80123ee <_raise_r>
 801244a:	bf00      	nop
 801244c:	20000238 	.word	0x20000238

08012450 <_kill_r>:
 8012450:	b538      	push	{r3, r4, r5, lr}
 8012452:	4d07      	ldr	r5, [pc, #28]	; (8012470 <_kill_r+0x20>)
 8012454:	2300      	movs	r3, #0
 8012456:	4604      	mov	r4, r0
 8012458:	4608      	mov	r0, r1
 801245a:	4611      	mov	r1, r2
 801245c:	602b      	str	r3, [r5, #0]
 801245e:	f7f1 fb9b 	bl	8003b98 <_kill>
 8012462:	1c43      	adds	r3, r0, #1
 8012464:	d102      	bne.n	801246c <_kill_r+0x1c>
 8012466:	682b      	ldr	r3, [r5, #0]
 8012468:	b103      	cbz	r3, 801246c <_kill_r+0x1c>
 801246a:	6023      	str	r3, [r4, #0]
 801246c:	bd38      	pop	{r3, r4, r5, pc}
 801246e:	bf00      	nop
 8012470:	200090c8 	.word	0x200090c8

08012474 <_getpid_r>:
 8012474:	f7f1 bb88 	b.w	8003b88 <_getpid>

08012478 <_init>:
 8012478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801247a:	bf00      	nop
 801247c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801247e:	bc08      	pop	{r3}
 8012480:	469e      	mov	lr, r3
 8012482:	4770      	bx	lr

08012484 <_fini>:
 8012484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012486:	bf00      	nop
 8012488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801248a:	bc08      	pop	{r3}
 801248c:	469e      	mov	lr, r3
 801248e:	4770      	bx	lr
