
STM32F405_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000295e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000517c  08029778  08029778  00039778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e8f4  0802e8f4  00046288  2**0
                  CONTENTS
  4 .ARM          00000008  0802e8f4  0802e8f4  0003e8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e8fc  0802e8fc  00046288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e8fc  0802e8fc  0003e8fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802e900  0802e900  0003e900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000011a8  20000000  0802e904  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmbss       000050b8  200011a8  0802faac  000411a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .nzds         00000028  20006260  08034b64  00046260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ccmram       00000000  10000000  10000000  00046288  2**0
                  CONTENTS
 12 .bss          0000cc4c  20006288  20006288  00046288  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  20012ed4  20012ed4  00046288  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00046288  2**0
                  CONTENTS, READONLY
 15 .comment      000000b8  00000000  00000000  000462b8  2**0
                  CONTENTS, READONLY
 16 .debug_info   00064b52  00000000  00000000  00046370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000136d8  00000000  00000000  000aaec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000042c0  00000000  00000000  000be5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00003181  00000000  00000000  000c2860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00020dee  00000000  00000000  000c59e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0006dcd1  00000000  00000000  000e67cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001022b5  00000000  00000000  001544a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00011c40  00000000  00000000  00256758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  00268398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    000015c0  00000000  00000000  002683f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_ranges 00000060  00000000  00000000  002699b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20006288 	.word	0x20006288
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08027400 	.word	0x08027400

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000628c 	.word	0x2000628c
 80001cc:	08027400 	.word	0x08027400

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <peerLocalizationInit>:
#include "task.h"
#include "peer_localization.h"


void peerLocalizationInit()
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  // All other_positions[in].id will be set to zero due to static initialization.
  // If we ever switch to dynamic allocation, we need to set them to zero explicitly.
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <peerLocalizationTellPosition>:

// array of other's position
static peerLocalizationOtherPosition_t other_positions[PEER_LOCALIZATION_MAX_NEIGHBORS];

bool peerLocalizationTellPosition(int cfid, positionMeasurement_t const *pos)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  for (uint8_t i = 0; i < PEER_LOCALIZATION_MAX_NEIGHBORS; ++i) {
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	e052      	b.n	800102a <peerLocalizationTellPosition+0xb6>
    if (other_positions[i].id == 0 || other_positions[i].id == cfid) {
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	492d      	ldr	r1, [pc, #180]	; (800103c <peerLocalizationTellPosition+0xc8>)
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00b      	beq.n	8000fb0 <peerLocalizationTellPosition+0x3c>
 8000f98:	7bfa      	ldrb	r2, [r7, #15]
 8000f9a:	4928      	ldr	r1, [pc, #160]	; (800103c <peerLocalizationTellPosition+0xc8>)
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d139      	bne.n	8001024 <peerLocalizationTellPosition+0xb0>
      other_positions[i].id = cfid;
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	b2d8      	uxtb	r0, r3
 8000fb6:	4921      	ldr	r1, [pc, #132]	; (800103c <peerLocalizationTellPosition+0xc8>)
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	701a      	strb	r2, [r3, #0]
      other_positions[i].pos.x = pos->x;
 8000fc6:	7bfa      	ldrb	r2, [r7, #15]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	6819      	ldr	r1, [r3, #0]
 8000fcc:	481b      	ldr	r0, [pc, #108]	; (800103c <peerLocalizationTellPosition+0xc8>)
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4403      	add	r3, r0
 8000fd8:	3308      	adds	r3, #8
 8000fda:	6019      	str	r1, [r3, #0]
      other_positions[i].pos.y = pos->y;
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	6859      	ldr	r1, [r3, #4]
 8000fe2:	4816      	ldr	r0, [pc, #88]	; (800103c <peerLocalizationTellPosition+0xc8>)
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4403      	add	r3, r0
 8000fee:	330c      	adds	r3, #12
 8000ff0:	6019      	str	r1, [r3, #0]
      other_positions[i].pos.z = pos->z;
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	6899      	ldr	r1, [r3, #8]
 8000ff8:	4810      	ldr	r0, [pc, #64]	; (800103c <peerLocalizationTellPosition+0xc8>)
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4403      	add	r3, r0
 8001004:	3310      	adds	r3, #16
 8001006:	6019      	str	r1, [r3, #0]
      other_positions[i].pos.timestamp = xTaskGetTickCount();
 8001008:	7bfc      	ldrb	r4, [r7, #15]
 800100a:	f01e fe29 	bl	801fc60 <xTaskGetTickCount>
 800100e:	4602      	mov	r2, r0
 8001010:	490a      	ldr	r1, [pc, #40]	; (800103c <peerLocalizationTellPosition+0xc8>)
 8001012:	4623      	mov	r3, r4
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4423      	add	r3, r4
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	3304      	adds	r3, #4
 800101e:	601a      	str	r2, [r3, #0]
      return true;
 8001020:	2301      	movs	r3, #1
 8001022:	e006      	b.n	8001032 <peerLocalizationTellPosition+0xbe>
  for (uint8_t i = 0; i < PEER_LOCALIZATION_MAX_NEIGHBORS; ++i) {
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	3301      	adds	r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	2b09      	cmp	r3, #9
 800102e:	d9a9      	bls.n	8000f84 <peerLocalizationTellPosition+0x10>
    }
  }
  return false;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	bf00      	nop
 800103c:	200062a4 	.word	0x200062a4

08001040 <appchannelInit>:
bool appchannelHasOverflowOccured() {
    return appchannelHasOverflowOccurred();
}

void appchannelInit()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  sendMutex = xSemaphoreCreateMutex();
 8001044:	2001      	movs	r0, #1
 8001046:	f01d fc68 	bl	801e91a <xQueueCreateMutex>
 800104a:	4603      	mov	r3, r0
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <appchannelInit+0x2c>)
 800104e:	6013      	str	r3, [r2, #0]

  rxQueue = xQueueCreate(10, sizeof(CRTPPacket));
 8001050:	2200      	movs	r2, #0
 8001052:	2120      	movs	r1, #32
 8001054:	200a      	movs	r0, #10
 8001056:	f01d fbe9 	bl	801e82c <xQueueGenericCreate>
 800105a:	4603      	mov	r3, r0
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <appchannelInit+0x30>)
 800105e:	6013      	str	r3, [r2, #0]

  overflow = false;
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <appchannelInit+0x34>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000636c 	.word	0x2000636c
 8001070:	20006370 	.word	0x20006370
 8001074:	20006374 	.word	0x20006374

08001078 <appchannelIncomingPacket>:

void appchannelIncomingPacket(CRTPPacket *p)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  int res = xQueueSend(rxQueue, p, 0);
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <appchannelIncomingPacket+0x2c>)
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	2300      	movs	r3, #0
 8001086:	2200      	movs	r2, #0
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	f01d fc79 	bl	801e980 <xQueueGenericSend>
 800108e:	60f8      	str	r0, [r7, #12]

  if (res != pdTRUE) {
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d002      	beq.n	800109c <appchannelIncomingPacket+0x24>
    overflow = true;
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <appchannelIncomingPacket+0x30>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
  }
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20006370 	.word	0x20006370
 80010a8:	20006374 	.word	0x20006374

080010ac <appInit>:

static void appTask(void *param);


void __attribute__((weak)) appInit()
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af04      	add	r7, sp, #16
  if (isInit) {
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <appInit+0x38>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d111      	bne.n	80010de <appInit+0x32>
    return;
  }

  STATIC_MEM_TASK_CREATE(appTask, appTask, APP_TASK_NAME, NULL, CONFIG_APP_PRIORITY);
 80010ba:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80010be:	461a      	mov	r2, r3
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <appInit+0x3c>)
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <appInit+0x40>)
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	2300      	movs	r3, #0
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2300      	movs	r3, #0
 80010ce:	4908      	ldr	r1, [pc, #32]	; (80010f0 <appInit+0x44>)
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <appInit+0x48>)
 80010d2:	f01e fa4f 	bl	801f574 <xTaskCreateStatic>
  isInit = true;
 80010d6:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <appInit+0x38>)
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e000      	b.n	80010e0 <appInit+0x34>
    return;
 80010de:	bf00      	nop
}
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20006375 	.word	0x20006375
 80010e8:	200011a8 	.word	0x200011a8
 80010ec:	20006378 	.word	0x20006378
 80010f0:	08029778 	.word	0x08029778
 80010f4:	080010f9 	.word	0x080010f9

080010f8 <appTask>:

static void appTask(void *param)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 8001100:	f004 fc94 	bl	8005a2c <systemWaitStart>

  appMain();
 8001104:	f000 f806 	bl	8001114 <appMain>

  while(1) {
    vTaskDelay(portMAX_DELAY);
 8001108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800110c:	f01e fbea 	bl	801f8e4 <vTaskDelay>
 8001110:	e7fa      	b.n	8001108 <appTask+0x10>
	...

08001114 <appMain>:
    int myNum;
    std::string myString;
};
*/
void appMain()
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  DEBUG_PRINT("Waiting for activation ...\n");
 8001118:	4906      	ldr	r1, [pc, #24]	; (8001134 <appMain+0x20>)
 800111a:	2000      	movs	r0, #0
 800111c:	f00f fcba 	bl	8010a94 <SEGGER_RTT_printf>
  /* make sure that the assertion is not simple enough to be optimized away
   * by the compiler */
//  assert(cl->myNum + cl->myString.size() == 0);

  while(1) {
    vTaskDelay(M2T(2000));
 8001120:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001124:	f01e fbde 	bl	801f8e4 <vTaskDelay>
    DEBUG_PRINT("Hello World!\n");
 8001128:	4903      	ldr	r1, [pc, #12]	; (8001138 <appMain+0x24>)
 800112a:	2000      	movs	r0, #0
 800112c:	f00f fcb2 	bl	8010a94 <SEGGER_RTT_printf>
    vTaskDelay(M2T(2000));
 8001130:	e7f6      	b.n	8001120 <appMain+0xc>
 8001132:	bf00      	nop
 8001134:	0802977c 	.word	0x0802977c
 8001138:	08029798 	.word	0x08029798

0800113c <commInit>:
#include "crtp_localization_service.h"

static bool isInit;

void commInit(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  if (isInit)
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <commInit+0x64>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d128      	bne.n	800119a <commInit+0x5e>
    return;

  uartslkInit();
 8001148:	f004 fd8c 	bl	8005c64 <uartslkInit>
  radiolinkInit();
 800114c:	f002 fe2a 	bl	8003da4 <radiolinkInit>

  if (usbTest())
 8001150:	f004 ffba 	bl	80060c8 <usbTest>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d006      	beq.n	8001168 <commInit+0x2c>
    crtpSetLink(usblinkGetLink());
 800115a:	f005 f891 	bl	8006280 <usblinkGetLink>
 800115e:	4603      	mov	r3, r0
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f9f3 	bl	800154c <crtpSetLink>
 8001166:	e00a      	b.n	800117e <commInit+0x42>
  else if(radiolinkTest())
 8001168:	f002 fe72 	bl	8003e50 <radiolinkTest>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <commInit+0x42>
    crtpSetLink(radiolinkGetLink());
 8001172:	f002 ff6f 	bl	8004054 <radiolinkGetLink>
 8001176:	4603      	mov	r3, r0
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f9e7 	bl	800154c <crtpSetLink>

  crtpserviceInit();
 800117e:	f002 fca3 	bl	8003ac8 <crtpserviceInit>
  platformserviceInit();
 8001182:	f002 fd15 	bl	8003bb0 <platformserviceInit>
  logInit();
 8001186:	f00f ff3f 	bl	8011008 <logInit>
  paramInit();
 800118a:	f012 fb71 	bl	8013870 <paramInit>
  locSrvInit();
 800118e:	f002 f9b7 	bl	8003500 <locSrvInit>


  isInit = true;
 8001192:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <commInit+0x64>)
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e000      	b.n	800119c <commInit+0x60>
    return;
 800119a:	bf00      	nop
}
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20006828 	.word	0x20006828

080011a4 <crtpInit>:

STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpTxTask, CRTP_TX_TASK_STACKSIZE);
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpRxTask, CRTP_RX_TASK_STACKSIZE);

void crtpInit(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af04      	add	r7, sp, #16
  if(isInit)
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <crtpInit+0x70>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d12d      	bne.n	800120e <crtpInit+0x6a>
    return;

  txQueue = xQueueCreate(CRTP_TX_QUEUE_SIZE, sizeof(CRTPPacket));
 80011b2:	2200      	movs	r2, #0
 80011b4:	2120      	movs	r1, #32
 80011b6:	2078      	movs	r0, #120	; 0x78
 80011b8:	f01d fb38 	bl	801e82c <xQueueGenericCreate>
 80011bc:	4603      	mov	r3, r0
 80011be:	4a16      	ldr	r2, [pc, #88]	; (8001218 <crtpInit+0x74>)
 80011c0:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(txQueue);
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <crtpInit+0x74>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a15      	ldr	r2, [pc, #84]	; (800121c <crtpInit+0x78>)
 80011c8:	4915      	ldr	r1, [pc, #84]	; (8001220 <crtpInit+0x7c>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	f012 fc64 	bl	8013a98 <qmRegisterQueue>

  STATIC_MEM_TASK_CREATE(crtpTxTask, crtpTxTask, CRTP_TX_TASK_NAME, NULL, CRTP_TX_TASK_PRI);
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <crtpInit+0x80>)
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <crtpInit+0x84>)
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	2302      	movs	r3, #2
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2300      	movs	r3, #0
 80011e2:	4912      	ldr	r1, [pc, #72]	; (800122c <crtpInit+0x88>)
 80011e4:	4812      	ldr	r0, [pc, #72]	; (8001230 <crtpInit+0x8c>)
 80011e6:	f01e f9c5 	bl	801f574 <xTaskCreateStatic>
  STATIC_MEM_TASK_CREATE(crtpRxTask, crtpRxTask, CRTP_RX_TASK_NAME, NULL, CRTP_RX_TASK_PRI);
 80011ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <crtpInit+0x90>)
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	4b10      	ldr	r3, [pc, #64]	; (8001238 <crtpInit+0x94>)
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	2302      	movs	r3, #2
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2300      	movs	r3, #0
 80011fe:	490f      	ldr	r1, [pc, #60]	; (800123c <crtpInit+0x98>)
 8001200:	480f      	ldr	r0, [pc, #60]	; (8001240 <crtpInit+0x9c>)
 8001202:	f01e f9b7 	bl	801f574 <xTaskCreateStatic>

  isInit = true;
 8001206:	4b03      	ldr	r3, [pc, #12]	; (8001214 <crtpInit+0x70>)
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	e000      	b.n	8001210 <crtpInit+0x6c>
    return;
 800120e:	bf00      	nop
}
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20006829 	.word	0x20006829
 8001218:	20006840 	.word	0x20006840
 800121c:	080297a8 	.word	0x080297a8
 8001220:	080297b0 	.word	0x080297b0
 8001224:	20001460 	.word	0x20001460
 8001228:	20001260 	.word	0x20001260
 800122c:	080297cc 	.word	0x080297cc
 8001230:	08001305 	.word	0x08001305
 8001234:	20001918 	.word	0x20001918
 8001238:	20001518 	.word	0x20001518
 800123c:	080297d4 	.word	0x080297d4
 8001240:	08001375 	.word	0x08001375

08001244 <crtpInitTaskQueue>:
{
  return isInit;
}

void crtpInitTaskQueue(CRTPPort portId)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  ASSERT(queues[portId] == NULL);
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	4a10      	ldr	r2, [pc, #64]	; (8001294 <crtpInitTaskQueue+0x50>)
 8001252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d004      	beq.n	8001264 <crtpInitTaskQueue+0x20>
 800125a:	226b      	movs	r2, #107	; 0x6b
 800125c:	490e      	ldr	r1, [pc, #56]	; (8001298 <crtpInitTaskQueue+0x54>)
 800125e:	480f      	ldr	r0, [pc, #60]	; (800129c <crtpInitTaskQueue+0x58>)
 8001260:	f00f fcdc 	bl	8010c1c <assertFail>

  queues[portId] = xQueueCreate(CRTP_RX_QUEUE_SIZE, sizeof(CRTPPacket));
 8001264:	79fc      	ldrb	r4, [r7, #7]
 8001266:	2200      	movs	r2, #0
 8001268:	2120      	movs	r1, #32
 800126a:	2010      	movs	r0, #16
 800126c:	f01d fade 	bl	801e82c <xQueueGenericCreate>
 8001270:	4603      	mov	r3, r0
 8001272:	4a08      	ldr	r2, [pc, #32]	; (8001294 <crtpInitTaskQueue+0x50>)
 8001274:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  DEBUG_QUEUE_MONITOR_REGISTER(queues[portId]);
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	4a06      	ldr	r2, [pc, #24]	; (8001294 <crtpInitTaskQueue+0x50>)
 800127c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <crtpInitTaskQueue+0x5c>)
 8001282:	4905      	ldr	r1, [pc, #20]	; (8001298 <crtpInitTaskQueue+0x54>)
 8001284:	4618      	mov	r0, r3
 8001286:	f012 fc07 	bl	8013a98 <qmRegisterQueue>
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bd90      	pop	{r4, r7, pc}
 8001292:	bf00      	nop
 8001294:	20006844 	.word	0x20006844
 8001298:	080297b0 	.word	0x080297b0
 800129c:	080297dc 	.word	0x080297dc
 80012a0:	080297f4 	.word	0x080297f4

080012a4 <crtpReceivePacketBlock>:

  return xQueueReceive(queues[portId], p, 0);
}

int crtpReceivePacketBlock(CRTPPort portId, CRTPPacket *p)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  ASSERT(queues[portId]);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <crtpReceivePacketBlock+0x50>)
 80012b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d104      	bne.n	80012c6 <crtpReceivePacketBlock+0x22>
 80012bc:	227b      	movs	r2, #123	; 0x7b
 80012be:	490e      	ldr	r1, [pc, #56]	; (80012f8 <crtpReceivePacketBlock+0x54>)
 80012c0:	480e      	ldr	r0, [pc, #56]	; (80012fc <crtpReceivePacketBlock+0x58>)
 80012c2:	f00f fcab 	bl	8010c1c <assertFail>
  ASSERT(p);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d104      	bne.n	80012d6 <crtpReceivePacketBlock+0x32>
 80012cc:	227c      	movs	r2, #124	; 0x7c
 80012ce:	490a      	ldr	r1, [pc, #40]	; (80012f8 <crtpReceivePacketBlock+0x54>)
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <crtpReceivePacketBlock+0x5c>)
 80012d2:	f00f fca3 	bl	8010c1c <assertFail>

  return xQueueReceive(queues[portId], p, portMAX_DELAY);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <crtpReceivePacketBlock+0x50>)
 80012da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012e2:	6839      	ldr	r1, [r7, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f01d fced 	bl	801ecc4 <xQueueReceive>
 80012ea:	4603      	mov	r3, r0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20006844 	.word	0x20006844
 80012f8:	080297b0 	.word	0x080297b0
 80012fc:	080297f4 	.word	0x080297f4
 8001300:	08029804 	.word	0x08029804

08001304 <crtpTxTask>:
{
  return (CRTP_TX_QUEUE_SIZE - uxQueueMessagesWaiting(txQueue));
}

void crtpTxTask(void *param)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  CRTPPacket p;

  while (true)
  {
    if (link != &nopLink)
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <crtpTxTask+0x60>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a15      	ldr	r2, [pc, #84]	; (8001368 <crtpTxTask+0x64>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d021      	beq.n	800135a <crtpTxTask+0x56>
    {
      if (xQueueReceive(txQueue, &p, portMAX_DELAY) == pdTRUE)
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <crtpTxTask+0x68>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f107 0108 	add.w	r1, r7, #8
 800131e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001322:	4618      	mov	r0, r3
 8001324:	f01d fcce 	bl	801ecc4 <xQueueReceive>
 8001328:	4603      	mov	r3, r0
 800132a:	2b01      	cmp	r3, #1
 800132c:	d1ee      	bne.n	800130c <crtpTxTask+0x8>
      {
        // Keep testing, if the link changes to USB it will go though
        while (link->sendPacket(&p) == false)
 800132e:	e002      	b.n	8001336 <crtpTxTask+0x32>
        {
          // Relaxation time
          vTaskDelay((10));
 8001330:	200a      	movs	r0, #10
 8001332:	f01e fad7 	bl	801f8e4 <vTaskDelay>
        while (link->sendPacket(&p) == false)
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <crtpTxTask+0x60>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f107 0208 	add.w	r2, r7, #8
 8001340:	4610      	mov	r0, r2
 8001342:	4798      	blx	r3
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f2      	beq.n	8001330 <crtpTxTask+0x2c>
        }
        stats.txCount++;
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <crtpTxTask+0x6c>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	3301      	adds	r3, #1
 8001350:	4a07      	ldr	r2, [pc, #28]	; (8001370 <crtpTxTask+0x6c>)
 8001352:	6053      	str	r3, [r2, #4]
        updateStats();
 8001354:	f000 f936 	bl	80015c4 <updateStats>
 8001358:	e7d8      	b.n	800130c <crtpTxTask+0x8>
      }
    }
    else
    {
      vTaskDelay((10));
 800135a:	200a      	movs	r0, #10
 800135c:	f01e fac2 	bl	801f8e4 <vTaskDelay>
    if (link != &nopLink)
 8001360:	e7d4      	b.n	800130c <crtpTxTask+0x8>
 8001362:	bf00      	nop
 8001364:	20000014 	.word	0x20000014
 8001368:	20000000 	.word	0x20000000
 800136c:	20006840 	.word	0x20006840
 8001370:	2000682c 	.word	0x2000682c

08001374 <crtpRxTask>:
    }
  }
}

void crtpRxTask(void *param)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  CRTPPacket p;

  while (true)
  {
    if (link != &nopLink)
 800137c:	4b24      	ldr	r3, [pc, #144]	; (8001410 <crtpRxTask+0x9c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a24      	ldr	r2, [pc, #144]	; (8001414 <crtpRxTask+0xa0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d040      	beq.n	8001408 <crtpRxTask+0x94>
    {
      if (!link->receivePacket(&p))
 8001386:	4b22      	ldr	r3, [pc, #136]	; (8001410 <crtpRxTask+0x9c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f107 0208 	add.w	r2, r7, #8
 8001390:	4610      	mov	r0, r2
 8001392:	4798      	blx	r3
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <crtpRxTask+0x8>
      {
        if (queues[p.port])
 800139a:	7a7b      	ldrb	r3, [r7, #9]
 800139c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <crtpRxTask+0xa4>)
 80013a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00e      	beq.n	80013cc <crtpRxTask+0x58>
        {
          // Block, since we should never drop a packet
          xQueueSend(queues[p.port], &p, portMAX_DELAY);
 80013ae:	7a7b      	ldrb	r3, [r7, #9]
 80013b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <crtpRxTask+0xa4>)
 80013ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80013be:	f107 0108 	add.w	r1, r7, #8
 80013c2:	2300      	movs	r3, #0
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013c8:	f01d fada 	bl	801e980 <xQueueGenericSend>
        }

        if (callbacks[p.port])
 80013cc:	7a7b      	ldrb	r3, [r7, #9]
 80013ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <crtpRxTask+0xa8>)
 80013d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00b      	beq.n	80013f8 <crtpRxTask+0x84>
        {
          callbacks[p.port](&p);
 80013e0:	7a7b      	ldrb	r3, [r7, #9]
 80013e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <crtpRxTask+0xa8>)
 80013ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f0:	f107 0208 	add.w	r2, r7, #8
 80013f4:	4610      	mov	r0, r2
 80013f6:	4798      	blx	r3
        }

        stats.rxCount++;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <crtpRxTask+0xac>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <crtpRxTask+0xac>)
 8001400:	6013      	str	r3, [r2, #0]
        updateStats();
 8001402:	f000 f8df 	bl	80015c4 <updateStats>
 8001406:	e7b9      	b.n	800137c <crtpRxTask+0x8>
      }
    }
    else
    {
      vTaskDelay((10));
 8001408:	200a      	movs	r0, #10
 800140a:	f01e fa6b 	bl	801f8e4 <vTaskDelay>
    if (link != &nopLink)
 800140e:	e7b5      	b.n	800137c <crtpRxTask+0x8>
 8001410:	20000014 	.word	0x20000014
 8001414:	20000000 	.word	0x20000000
 8001418:	20006844 	.word	0x20006844
 800141c:	20006884 	.word	0x20006884
 8001420:	2000682c 	.word	0x2000682c

08001424 <crtpRegisterPortCB>:
    }
  }
}

void crtpRegisterPortCB(int port, CrtpCallback cb)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  if (port>CRTP_NBR_OF_PORTS)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b10      	cmp	r3, #16
 8001432:	dc05      	bgt.n	8001440 <crtpRegisterPortCB+0x1c>
    return;

  callbacks[port] = cb;
 8001434:	4905      	ldr	r1, [pc, #20]	; (800144c <crtpRegisterPortCB+0x28>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800143e:	e000      	b.n	8001442 <crtpRegisterPortCB+0x1e>
    return;
 8001440:	bf00      	nop
}
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	20006884 	.word	0x20006884

08001450 <crtpSendPacket>:

int crtpSendPacket(CRTPPacket *p)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  ASSERT(p);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d104      	bne.n	8001468 <crtpSendPacket+0x18>
 800145e:	22d4      	movs	r2, #212	; 0xd4
 8001460:	490c      	ldr	r1, [pc, #48]	; (8001494 <crtpSendPacket+0x44>)
 8001462:	480d      	ldr	r0, [pc, #52]	; (8001498 <crtpSendPacket+0x48>)
 8001464:	f00f fbda 	bl	8010c1c <assertFail>
  ASSERT(p->size <= CRTP_MAX_DATA_SIZE);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b1e      	cmp	r3, #30
 800146e:	d904      	bls.n	800147a <crtpSendPacket+0x2a>
 8001470:	22d5      	movs	r2, #213	; 0xd5
 8001472:	4908      	ldr	r1, [pc, #32]	; (8001494 <crtpSendPacket+0x44>)
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <crtpSendPacket+0x4c>)
 8001476:	f00f fbd1 	bl	8010c1c <assertFail>

  return xQueueSend(txQueue, p, 0);
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <crtpSendPacket+0x50>)
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	2300      	movs	r3, #0
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f01d fa7c 	bl	801e980 <xQueueGenericSend>
 8001488:	4603      	mov	r3, r0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	080297b0 	.word	0x080297b0
 8001498:	08029804 	.word	0x08029804
 800149c:	08029808 	.word	0x08029808
 80014a0:	20006840 	.word	0x20006840

080014a4 <crtpSendPacketBlock>:

int crtpSendPacketBlock(CRTPPacket *p)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  ASSERT(p);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d104      	bne.n	80014bc <crtpSendPacketBlock+0x18>
 80014b2:	22dc      	movs	r2, #220	; 0xdc
 80014b4:	490c      	ldr	r1, [pc, #48]	; (80014e8 <crtpSendPacketBlock+0x44>)
 80014b6:	480d      	ldr	r0, [pc, #52]	; (80014ec <crtpSendPacketBlock+0x48>)
 80014b8:	f00f fbb0 	bl	8010c1c <assertFail>
  ASSERT(p->size <= CRTP_MAX_DATA_SIZE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b1e      	cmp	r3, #30
 80014c2:	d904      	bls.n	80014ce <crtpSendPacketBlock+0x2a>
 80014c4:	22dd      	movs	r2, #221	; 0xdd
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <crtpSendPacketBlock+0x44>)
 80014c8:	4809      	ldr	r0, [pc, #36]	; (80014f0 <crtpSendPacketBlock+0x4c>)
 80014ca:	f00f fba7 	bl	8010c1c <assertFail>

  return xQueueSend(txQueue, p, portMAX_DELAY);
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <crtpSendPacketBlock+0x50>)
 80014d0:	6818      	ldr	r0, [r3, #0]
 80014d2:	2300      	movs	r3, #0
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	f01d fa51 	bl	801e980 <xQueueGenericSend>
 80014de:	4603      	mov	r3, r0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	080297b0 	.word	0x080297b0
 80014ec:	08029804 	.word	0x08029804
 80014f0:	08029808 	.word	0x08029808
 80014f4:	20006840 	.word	0x20006840

080014f8 <crtpReset>:

int crtpReset(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  xQueueReset(txQueue);
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <crtpReset+0x28>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f01d f8be 	bl	801e684 <xQueueGenericReset>
  if (link->reset) {
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <crtpReset+0x2c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <crtpReset+0x22>
    link->reset();
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <crtpReset+0x2c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	4798      	blx	r3
  }

  return 0;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20006840 	.word	0x20006840
 8001524:	20000014 	.word	0x20000014

08001528 <crtpIsConnected>:

bool crtpIsConnected(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  if (link->isConnected)
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <crtpIsConnected+0x20>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d005      	beq.n	8001542 <crtpIsConnected+0x1a>
    return link->isConnected();
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <crtpIsConnected+0x20>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	4798      	blx	r3
 800153e:	4603      	mov	r3, r0
 8001540:	e000      	b.n	8001544 <crtpIsConnected+0x1c>
  return true;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000014 	.word	0x20000014

0800154c <crtpSetLink>:

void crtpSetLink(struct crtpLinkOperations * lk)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if(link)
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <crtpSetLink+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d004      	beq.n	8001566 <crtpSetLink+0x1a>
    link->setEnable(false);
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <crtpSetLink+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2000      	movs	r0, #0
 8001564:	4798      	blx	r3

  if (lk)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <crtpSetLink+0x28>
    link = lk;
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <crtpSetLink+0x40>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e002      	b.n	800157a <crtpSetLink+0x2e>
  else
    link = &nopLink;
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <crtpSetLink+0x40>)
 8001576:	4a06      	ldr	r2, [pc, #24]	; (8001590 <crtpSetLink+0x44>)
 8001578:	601a      	str	r2, [r3, #0]

  link->setEnable(true);
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <crtpSetLink+0x40>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2001      	movs	r0, #1
 8001582:	4798      	blx	r3
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000014 	.word	0x20000014
 8001590:	20000000 	.word	0x20000000

08001594 <nopFunc>:

static int nopFunc(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ENETDOWN;
 8001598:	2373      	movs	r3, #115	; 0x73
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <clearStats>:

static void clearStats()
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  stats.rxCount = 0;
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <clearStats+0x1c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
  stats.txCount = 0;
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <clearStats+0x1c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	605a      	str	r2, [r3, #4]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	2000682c 	.word	0x2000682c

080015c4 <updateStats>:

static void updateStats()
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
  uint32_t now = xTaskGetTickCount();
 80015ca:	f01e fb49 	bl	801fc60 <xTaskGetTickCount>
 80015ce:	6078      	str	r0, [r7, #4]
  if (now > stats.nextStatisticsTime) {
 80015d0:	4b23      	ldr	r3, [pc, #140]	; (8001660 <updateStats+0x9c>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d93d      	bls.n	8001656 <updateStats+0x92>
    float interval = now - stats.previousStatisticsTime;
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <updateStats+0x9c>)
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ea:	edc7 7a00 	vstr	s15, [r7]
    stats.rxRate = (uint16_t)(1000.0f * stats.rxCount / interval);
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <updateStats+0x9c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	ee07 3a90 	vmov	s15, r3
 80015f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015fa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001664 <updateStats+0xa0>
 80015fe:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001602:	ed97 7a00 	vldr	s14, [r7]
 8001606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800160a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800160e:	ee17 3a90 	vmov	r3, s15
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <updateStats+0x9c>)
 8001616:	811a      	strh	r2, [r3, #8]
    stats.txRate = (uint16_t)(1000.0f * stats.txCount / interval);
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <updateStats+0x9c>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	ee07 3a90 	vmov	s15, r3
 8001620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001624:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001664 <updateStats+0xa0>
 8001628:	ee67 6a87 	vmul.f32	s13, s15, s14
 800162c:	ed97 7a00 	vldr	s14, [r7]
 8001630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001638:	ee17 3a90 	vmov	r3, s15
 800163c:	b29a      	uxth	r2, r3
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <updateStats+0x9c>)
 8001640:	815a      	strh	r2, [r3, #10]

    clearStats();
 8001642:	f7ff ffaf 	bl	80015a4 <clearStats>
    stats.previousStatisticsTime = now;
 8001646:	4a06      	ldr	r2, [pc, #24]	; (8001660 <updateStats+0x9c>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6113      	str	r3, [r2, #16]
    stats.nextStatisticsTime = now + STATS_INTERVAL;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001652:	4a03      	ldr	r2, [pc, #12]	; (8001660 <updateStats+0x9c>)
 8001654:	60d3      	str	r3, [r2, #12]
  }
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2000682c 	.word	0x2000682c
 8001664:	447a0000 	.word	0x447a0000

08001668 <crtpCommanderInit>:
static bool isInit;

static void commanderCrtpCB(CRTPPacket* pk);

void crtpCommanderInit(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  if(isInit) {
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <crtpCommanderInit+0x2c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10d      	bne.n	8001690 <crtpCommanderInit+0x28>
    return;
  }

  crtpInit();
 8001674:	f7ff fd96 	bl	80011a4 <crtpInit>
  crtpRegisterPortCB(CRTP_PORT_SETPOINT, commanderCrtpCB);
 8001678:	4907      	ldr	r1, [pc, #28]	; (8001698 <crtpCommanderInit+0x30>)
 800167a:	2003      	movs	r0, #3
 800167c:	f7ff fed2 	bl	8001424 <crtpRegisterPortCB>
  crtpRegisterPortCB(CRTP_PORT_SETPOINT_GENERIC, commanderCrtpCB);
 8001680:	4905      	ldr	r1, [pc, #20]	; (8001698 <crtpCommanderInit+0x30>)
 8001682:	2007      	movs	r0, #7
 8001684:	f7ff fece 	bl	8001424 <crtpRegisterPortCB>
  isInit = true;
 8001688:	4b02      	ldr	r3, [pc, #8]	; (8001694 <crtpCommanderInit+0x2c>)
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
 800168e:	e000      	b.n	8001692 <crtpCommanderInit+0x2a>
    return;
 8001690:	bf00      	nop
}
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200068c4 	.word	0x200068c4
 8001698:	080016cd 	.word	0x080016cd

0800169c <notifySetpointsStopDecoder>:
 */
struct notifySetpointsStopPacket {
  uint32_t remainValidMillisecs;
} __attribute__((packed));
void notifySetpointsStopDecoder(const void *data, size_t datalen)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  ASSERT(datalen == sizeof(struct notifySetpointsStopPacket));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d004      	beq.n	80016b6 <notifySetpointsStopDecoder+0x1a>
 80016ac:	2263      	movs	r2, #99	; 0x63
 80016ae:	4905      	ldr	r1, [pc, #20]	; (80016c4 <notifySetpointsStopDecoder+0x28>)
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <notifySetpointsStopDecoder+0x2c>)
 80016b2:	f00f fab3 	bl	8010c1c <assertFail>
  // Note: The remainValidMillisecs argument is an artifact of the old
  // pull-based high-level commander architecture, and is no longer needed.
  commanderRelaxPriority();
 80016b6:	f004 ff05 	bl	80064c4 <commanderRelaxPriority>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	08029828 	.word	0x08029828
 80016c8:	0802984c 	.word	0x0802984c

080016cc <commanderCrtpCB>:
  [metaNotifySetpointsStop] = notifySetpointsStopDecoder,
};

/* Decoder switch */
static void commanderCrtpCB(CRTPPacket* pk)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  static setpoint_t setpoint;

  if(pk->port == CRTP_PORT_SETPOINT && pk->channel == 0) {
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	785b      	ldrb	r3, [r3, #1]
 80016d8:	f023 030f 	bic.w	r3, r3, #15
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b30      	cmp	r3, #48	; 0x30
 80016e0:	d10f      	bne.n	8001702 <commanderCrtpCB+0x36>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	785b      	ldrb	r3, [r3, #1]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d108      	bne.n	8001702 <commanderCrtpCB+0x36>
    crtpCommanderRpytDecodeSetpoint(&setpoint, pk);
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	481d      	ldr	r0, [pc, #116]	; (8001768 <commanderCrtpCB+0x9c>)
 80016f4:	f001 fce0 	bl	80030b8 <crtpCommanderRpytDecodeSetpoint>
    commanderSetSetpoint(&setpoint, COMMANDER_PRIORITY_CRTP);
 80016f8:	2102      	movs	r1, #2
 80016fa:	481b      	ldr	r0, [pc, #108]	; (8001768 <commanderCrtpCB+0x9c>)
 80016fc:	f004 fea4 	bl	8006448 <commanderSetSetpoint>
 8001700:	e02d      	b.n	800175e <commanderCrtpCB+0x92>
  } else if (pk->port == CRTP_PORT_SETPOINT_GENERIC) {
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	785b      	ldrb	r3, [r3, #1]
 8001706:	f023 030f 	bic.w	r3, r3, #15
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b70      	cmp	r3, #112	; 0x70
 800170e:	d126      	bne.n	800175e <commanderCrtpCB+0x92>
    switch (pk->channel) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	785b      	ldrb	r3, [r3, #1]
 8001714:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d002      	beq.n	8001724 <commanderCrtpCB+0x58>
 800171e:	2b01      	cmp	r3, #1
 8001720:	d009      	beq.n	8001736 <commanderCrtpCB+0x6a>
        }
      }
      break;
    default:
      /* Do nothing */
      break;
 8001722:	e01c      	b.n	800175e <commanderCrtpCB+0x92>
      crtpCommanderGenericDecodeSetpoint(&setpoint, pk);
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4810      	ldr	r0, [pc, #64]	; (8001768 <commanderCrtpCB+0x9c>)
 8001728:	f000 fc0c 	bl	8001f44 <crtpCommanderGenericDecodeSetpoint>
      commanderSetSetpoint(&setpoint, COMMANDER_PRIORITY_CRTP);
 800172c:	2102      	movs	r1, #2
 800172e:	480e      	ldr	r0, [pc, #56]	; (8001768 <commanderCrtpCB+0x9c>)
 8001730:	f004 fe8a 	bl	8006448 <commanderSetSetpoint>
      break;
 8001734:	e013      	b.n	800175e <commanderCrtpCB+0x92>
        uint8_t metaCmd = pk->data[0];
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	789b      	ldrb	r3, [r3, #2]
 800173a:	73fb      	strb	r3, [r7, #15]
        if (metaCmd < nMetaCommands && (metaCommandDecoders[metaCmd] != NULL)) {
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10c      	bne.n	800175c <commanderCrtpCB+0x90>
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <commanderCrtpCB+0xa0>)
 8001744:	2b00      	cmp	r3, #0
 8001746:	d009      	beq.n	800175c <commanderCrtpCB+0x90>
          metaCommandDecoders[metaCmd](pk->data + 1, pk->size - 1);
 8001748:	4c08      	ldr	r4, [pc, #32]	; (800176c <commanderCrtpCB+0xa0>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3302      	adds	r3, #2
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	3b01      	subs	r3, #1
 8001756:	4619      	mov	r1, r3
 8001758:	4610      	mov	r0, r2
 800175a:	47a0      	blx	r4
      break;
 800175c:	bf00      	nop
    }
  }
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bd90      	pop	{r4, r7, pc}
 8001766:	bf00      	nop
 8001768:	200068c8 	.word	0x200068c8
 800176c:	0800169d 	.word	0x0800169d

08001770 <quatdecompress>:

	return comp;
}

static inline void quatdecompress(uint32_t comp, float q[4])
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
	unsigned const mask = (1 << 9) - 1;
 800177a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800177e:	617b      	str	r3, [r7, #20]

	int const i_largest = comp >> 30;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	0f9b      	lsrs	r3, r3, #30
 8001784:	613b      	str	r3, [r7, #16]
	float sum_squares = 0;
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
	for (int i = 3; i >= 0; --i) {
 800178c:	2303      	movs	r3, #3
 800178e:	61bb      	str	r3, [r7, #24]
 8001790:	e04d      	b.n	800182e <quatdecompress+0xbe>
		if (i != i_largest) {
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	429a      	cmp	r2, r3
 8001798:	d046      	beq.n	8001828 <quatdecompress+0xb8>
			unsigned mag = comp & mask;
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	4013      	ands	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
			unsigned negbit = (comp >> 9) & 0x1;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	0a5b      	lsrs	r3, r3, #9
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
			comp = comp >> 10;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	0a9b      	lsrs	r3, r3, #10
 80017b0:	607b      	str	r3, [r7, #4]
			q[i] = ((float)M_SQRT1_2) * ((float)mag) / mask;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017bc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001860 <quatdecompress+0xf0>
 80017c0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	4413      	add	r3, r2
 80017d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017da:	edc3 7a00 	vstr	s15, [r3]
			if (negbit == 1) {
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d10d      	bne.n	8001800 <quatdecompress+0x90>
				q[i] = -q[i];
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	edd3 7a00 	vldr	s15, [r3]
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	eef1 7a67 	vneg.f32	s15, s15
 80017fc:	edc3 7a00 	vstr	s15, [r3]
			}
			sum_squares += q[i] * q[i];
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	4413      	add	r3, r2
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	4413      	add	r3, r2
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001824:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 3; i >= 0; --i) {
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	3b01      	subs	r3, #1
 800182c:	61bb      	str	r3, [r7, #24]
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	daae      	bge.n	8001792 <quatdecompress+0x22>
		}
	}
	q[i_largest] = sqrtf(1.0f - sum_squares);
 8001834:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001838:	edd7 7a07 	vldr	s15, [r7, #28]
 800183c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	18d4      	adds	r4, r2, r3
 8001848:	eeb0 0a67 	vmov.f32	s0, s15
 800184c:	f024 f806 	bl	802585c <sqrtf>
 8001850:	eef0 7a40 	vmov.f32	s15, s0
 8001854:	edc4 7a00 	vstr	s15, [r4]
}
 8001858:	bf00      	nop
 800185a:	3724      	adds	r7, #36	; 0x24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	3f3504f3 	.word	0x3f3504f3

08001864 <stopDecoder>:

/* stopDecoder
 * Keeps setpoint to 0: stops the motors and fall
 */
static void stopDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	460b      	mov	r3, r1
 8001872:	72fb      	strb	r3, [r7, #11]
  return;
 8001874:	bf00      	nop
}
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <velocityDecoder>:
  float vy;        // ...
  float vz;        // ...
  float yawrate;  // deg/s
} __attribute__((packed));
static void velocityDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	460b      	mov	r3, r1
 800188e:	72fb      	strb	r3, [r7, #11]
  const struct velocityPacket_s *values = data;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	617b      	str	r3, [r7, #20]

  ASSERT(datalen == sizeof(struct velocityPacket_s));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2b10      	cmp	r3, #16
 8001898:	d004      	beq.n	80018a4 <velocityDecoder+0x24>
 800189a:	2266      	movs	r2, #102	; 0x66
 800189c:	4916      	ldr	r1, [pc, #88]	; (80018f8 <velocityDecoder+0x78>)
 800189e:	4817      	ldr	r0, [pc, #92]	; (80018fc <velocityDecoder+0x7c>)
 80018a0:	f00f f9bc 	bl	8010c1c <assertFail>

  setpoint->mode.x = modeVelocity;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  setpoint->mode.y = modeVelocity;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  setpoint->mode.z = modeVelocity;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

  setpoint->velocity.x = values->vx;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	64d3      	str	r3, [r2, #76]	; 0x4c
  setpoint->velocity.y = values->vy;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	6513      	str	r3, [r2, #80]	; 0x50
  setpoint->velocity.z = values->vz;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	6553      	str	r3, [r2, #84]	; 0x54

  setpoint->mode.yaw = modeVelocity;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2202      	movs	r2, #2
 80018d8:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  setpoint->attitudeRate.yaw = -values->yawrate;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	ee07 3a90 	vmov	s15, r3
 80018e4:	eef1 7a67 	vneg.f32	s15, s15
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	08029880 	.word	0x08029880
 80018fc:	080298ac 	.word	0x080298ac

08001900 <zDistanceDecoder>:
  float pitch;           // ...
  float yawrate;         // deg/s
  float zDistance;        // m in the world frame of reference
} __attribute__((packed));
static void zDistanceDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	460b      	mov	r3, r1
 800190e:	72fb      	strb	r3, [r7, #11]
  const struct zDistancePacket_s *values = data;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	617b      	str	r3, [r7, #20]


  ASSERT(datalen == sizeof(struct zDistancePacket_s));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	2b10      	cmp	r3, #16
 8001918:	d004      	beq.n	8001924 <zDistanceDecoder+0x24>
 800191a:	2283      	movs	r2, #131	; 0x83
 800191c:	4916      	ldr	r1, [pc, #88]	; (8001978 <zDistanceDecoder+0x78>)
 800191e:	4817      	ldr	r0, [pc, #92]	; (800197c <zDistanceDecoder+0x7c>)
 8001920:	f00f f97c 	bl	8010c1c <assertFail>

  setpoint->mode.z = modeAbs;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

  setpoint->position.z = values->zDistance;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	6453      	str	r3, [r2, #68]	; 0x44


  setpoint->mode.yaw = modeVelocity;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  setpoint->attitudeRate.yaw = -values->yawrate;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef1 7a67 	vneg.f32	s15, s15
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	edc3 7a08 	vstr	s15, [r3, #32]


  setpoint->mode.roll = modeAbs;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  setpoint->mode.pitch = modeAbs;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

  setpoint->attitude.roll = values->roll;
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	6093      	str	r3, [r2, #8]
  setpoint->attitude.pitch = values->pitch;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	60d3      	str	r3, [r2, #12]
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	08029880 	.word	0x08029880
 800197c:	080298d8 	.word	0x080298d8

08001980 <getChannelUnitMultiplier>:
  uint16_t channelThrust;
  uint16_t channelAux[MAX_AUX_RC_CHANNELS];
} __attribute__((packed));

static inline float getChannelUnitMultiplier(uint16_t channelValue, uint16_t channelMidpoint, uint16_t channelRange)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
 800198a:	460b      	mov	r3, r1
 800198c:	80bb      	strh	r3, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	807b      	strh	r3, [r7, #2]
  // Compute a float from -1 to 1 based on the RC channel value, midpoint, and total range magnitude
  return ((float)channelValue - (float)channelMidpoint) / (float)channelRange;
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	ee07 3a90 	vmov	s15, r3
 8001998:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800199c:	88bb      	ldrh	r3, [r7, #4]
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019b8:	eef0 7a66 	vmov.f32	s15, s13
}
 80019bc:	eeb0 0a67 	vmov.f32	s0, s15
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <cppmEmuDecoder>:
{
  return s_CppmEmuYawMaxRateDps;
}

static void cppmEmuDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	460b      	mov	r3, r1
 80019da:	72fb      	strb	r3, [r7, #11]
  bool isSelfLevelEnabled = true;
 80019dc:	2301      	movs	r3, #1
 80019de:	75fb      	strb	r3, [r7, #23]

  ASSERT(datalen >= 9); // minimum 9 bytes expected - 1byte header + four 2byte channels
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d804      	bhi.n	80019f0 <cppmEmuDecoder+0x24>
 80019e6:	22dd      	movs	r2, #221	; 0xdd
 80019e8:	4975      	ldr	r1, [pc, #468]	; (8001bc0 <cppmEmuDecoder+0x1f4>)
 80019ea:	4876      	ldr	r0, [pc, #472]	; (8001bc4 <cppmEmuDecoder+0x1f8>)
 80019ec:	f00f f916 	bl	8010c1c <assertFail>
  const struct cppmEmuPacket_s *values = data;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	613b      	str	r3, [r7, #16]
  ASSERT(datalen == 9 + (2*values->hdr.numAuxChannels)); // Total size is 9 + number of active aux channels
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	3309      	adds	r3, #9
 8001a02:	461a      	mov	r2, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d004      	beq.n	8001a14 <cppmEmuDecoder+0x48>
 8001a0a:	22df      	movs	r2, #223	; 0xdf
 8001a0c:	496c      	ldr	r1, [pc, #432]	; (8001bc0 <cppmEmuDecoder+0x1f4>)
 8001a0e:	486e      	ldr	r0, [pc, #440]	; (8001bc8 <cppmEmuDecoder+0x1fc>)
 8001a10:	f00f f904 	bl	8010c1c <assertFail>

  // Aux channel 0 is reserved for enabling/disabling self-leveling
  // If it's in use, check and see if it's set and enable self-leveling.
  // If aux channel 0 is not in use, default to self-leveling enabled.
  isSelfLevelEnabled = !(values->hdr.numAuxChannels >= 1 && values->channelAux[0] < 1500);
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d007      	beq.n	8001a32 <cppmEmuDecoder+0x66>
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	f240 52db 	movw	r2, #1499	; 0x5db
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <cppmEmuDecoder+0x6a>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <cppmEmuDecoder+0x6c>
 8001a36:	2300      	movs	r3, #0
 8001a38:	75fb      	strb	r3, [r7, #23]
 8001a3a:	7dfb      	ldrb	r3, [r7, #23]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	75fb      	strb	r3, [r7, #23]

  // Set the modes

  // Position is disabled
  setpoint->mode.x = modeDisable;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  setpoint->mode.y = modeDisable;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  setpoint->mode.z = modeDisable;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

  // Yaw is always velocity
  setpoint->mode.yaw = modeVelocity;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  // Roll/Pitch mode is either velocity or abs based on isSelfLevelEnabled
  setpoint->mode.roll = isSelfLevelEnabled ? modeAbs : modeVelocity;
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <cppmEmuDecoder+0xa0>
 8001a68:	2201      	movs	r2, #1
 8001a6a:	e000      	b.n	8001a6e <cppmEmuDecoder+0xa2>
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  setpoint->mode.pitch = isSelfLevelEnabled ? modeAbs : modeVelocity;
 8001a74:	7dfb      	ldrb	r3, [r7, #23]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <cppmEmuDecoder+0xb2>
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	e000      	b.n	8001a80 <cppmEmuDecoder+0xb4>
 8001a7e:	2202      	movs	r2, #2
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

  // Rescale the CPPM values into angles to build the setpoint packet
  if(isSelfLevelEnabled)
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d02e      	beq.n	8001aea <cppmEmuDecoder+0x11e>
  {
    setpoint->attitude.roll = -1 * getChannelUnitMultiplier(values->channelRoll, 1500, 500) * s_CppmEmuRollMaxAngleDeg; // roll inverted
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001a98:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff6f 	bl	8001980 <getChannelUnitMultiplier>
 8001aa2:	eef0 7a40 	vmov.f32	s15, s0
 8001aa6:	eeb1 7a67 	vneg.f32	s14, s15
 8001aaa:	4b48      	ldr	r3, [pc, #288]	; (8001bcc <cppmEmuDecoder+0x200>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	edc3 7a02 	vstr	s15, [r3, #8]
    setpoint->attitude.pitch = -1 * getChannelUnitMultiplier(values->channelPitch, 1500, 500) * s_CppmEmuPitchMaxAngleDeg; // pitch inverted
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ac6:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff ff58 	bl	8001980 <getChannelUnitMultiplier>
 8001ad0:	eef0 7a40 	vmov.f32	s15, s0
 8001ad4:	eeb1 7a67 	vneg.f32	s14, s15
 8001ad8:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <cppmEmuDecoder+0x204>)
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	edc3 7a03 	vstr	s15, [r3, #12]
 8001ae8:	e02d      	b.n	8001b46 <cppmEmuDecoder+0x17a>
  }
  else
  {
    setpoint->attitudeRate.roll = -1 * getChannelUnitMultiplier(values->channelRoll, 1500, 500) * s_CppmEmuRollMaxRateDps; // roll inverted
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001af6:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff40 	bl	8001980 <getChannelUnitMultiplier>
 8001b00:	eef0 7a40 	vmov.f32	s15, s0
 8001b04:	eeb1 7a67 	vneg.f32	s14, s15
 8001b08:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <cppmEmuDecoder+0x208>)
 8001b0a:	edd3 7a00 	vldr	s15, [r3]
 8001b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	edc3 7a06 	vstr	s15, [r3, #24]
    setpoint->attitudeRate.pitch = -1 * getChannelUnitMultiplier(values->channelPitch, 1500, 500) * s_CppmEmuPitchMaxRateDps; // pitch inverted
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b24:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff29 	bl	8001980 <getChannelUnitMultiplier>
 8001b2e:	eef0 7a40 	vmov.f32	s15, s0
 8001b32:	eeb1 7a67 	vneg.f32	s14, s15
 8001b36:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <cppmEmuDecoder+0x20c>)
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	edc3 7a07 	vstr	s15, [r3, #28]
  }

  setpoint->attitudeRate.yaw = -1 * getChannelUnitMultiplier(values->channelYaw, 1500, 500) * s_CppmEmuYawMaxRateDps; // yaw inverted
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b52:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff12 	bl	8001980 <getChannelUnitMultiplier>
 8001b5c:	eef0 7a40 	vmov.f32	s15, s0
 8001b60:	eeb1 7a67 	vneg.f32	s14, s15
 8001b64:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <cppmEmuDecoder+0x210>)
 8001b66:	edd3 7a00 	vldr	s15, [r3]
 8001b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	edc3 7a08 	vstr	s15, [r3, #32]
  setpoint->thrust = getChannelUnitMultiplier(values->channelThrust, 1000, 1000) * (float)UINT16_MAX; // Thrust is positive only - uses the full 1000-2000 range
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fefb 	bl	8001980 <getChannelUnitMultiplier>
 8001b8a:	eef0 7a40 	vmov.f32	s15, s0
 8001b8e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001be0 <cppmEmuDecoder+0x214>
 8001b92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

  // Make sure thrust isn't negative
  if(setpoint->thrust < 0)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001ba2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001baa:	d400      	bmi.n	8001bae <cppmEmuDecoder+0x1e2>
  {
    setpoint->thrust = 0;
  }
}
 8001bac:	e003      	b.n	8001bb6 <cppmEmuDecoder+0x1ea>
    setpoint->thrust = 0;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	08029880 	.word	0x08029880
 8001bc4:	08029904 	.word	0x08029904
 8001bc8:	08029914 	.word	0x08029914
 8001bcc:	20000020 	.word	0x20000020
 8001bd0:	20000024 	.word	0x20000024
 8001bd4:	20000018 	.word	0x20000018
 8001bd8:	2000001c 	.word	0x2000001c
 8001bdc:	20000028 	.word	0x20000028
 8001be0:	477fff00 	.word	0x477fff00

08001be4 <altHoldDecoder>:
  float pitch;           // ...
  float yawrate;         // deg/s
  float zVelocity;       // m/s in the world frame of reference
} __attribute__((packed));
static void altHoldDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	72fb      	strb	r3, [r7, #11]
  const struct altHoldPacket_s *values = data;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	617b      	str	r3, [r7, #20]

  ASSERT(datalen == sizeof(struct altHoldPacket_s));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	2b10      	cmp	r3, #16
 8001bfc:	d005      	beq.n	8001c0a <altHoldDecoder+0x26>
 8001bfe:	f240 1217 	movw	r2, #279	; 0x117
 8001c02:	4916      	ldr	r1, [pc, #88]	; (8001c5c <altHoldDecoder+0x78>)
 8001c04:	4816      	ldr	r0, [pc, #88]	; (8001c60 <altHoldDecoder+0x7c>)
 8001c06:	f00f f809 	bl	8010c1c <assertFail>


  setpoint->mode.z = modeVelocity;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

  setpoint->velocity.z = values->zVelocity;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	6553      	str	r3, [r2, #84]	; 0x54


  setpoint->mode.yaw = modeVelocity;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  setpoint->attitudeRate.yaw = -values->yawrate;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eef1 7a67 	vneg.f32	s15, s15
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	edc3 7a08 	vstr	s15, [r3, #32]


  setpoint->mode.roll = modeAbs;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  setpoint->mode.pitch = modeAbs;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

  setpoint->attitude.roll = values->roll;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	6093      	str	r3, [r2, #8]
  setpoint->attitude.pitch = values->pitch;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	60d3      	str	r3, [r2, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	08029880 	.word	0x08029880
 8001c60:	08029944 	.word	0x08029944

08001c64 <hoverDecoder>:
  float vy;           // ...
  float yawrate;      // deg/s
  float zDistance;    // m in the world frame of reference
} __attribute__((packed));
static void hoverDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	460b      	mov	r3, r1
 8001c72:	72fb      	strb	r3, [r7, #11]
  const struct hoverPacket_s *values = data;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	617b      	str	r3, [r7, #20]

  ASSERT(datalen == sizeof(struct hoverPacket_s));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2b10      	cmp	r3, #16
 8001c7c:	d005      	beq.n	8001c8a <hoverDecoder+0x26>
 8001c7e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001c82:	4918      	ldr	r1, [pc, #96]	; (8001ce4 <hoverDecoder+0x80>)
 8001c84:	4818      	ldr	r0, [pc, #96]	; (8001ce8 <hoverDecoder+0x84>)
 8001c86:	f00e ffc9 	bl	8010c1c <assertFail>

  setpoint->mode.z = modeAbs;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
  setpoint->position.z = values->zDistance;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44


  setpoint->mode.yaw = modeVelocity;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  setpoint->attitudeRate.yaw = -values->yawrate;
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	ee07 3a90 	vmov	s15, r3
 8001caa:	eef1 7a67 	vneg.f32	s15, s15
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	edc3 7a08 	vstr	s15, [r3, #32]


  setpoint->mode.x = modeVelocity;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  setpoint->mode.y = modeVelocity;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  setpoint->velocity.x = values->vx;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	64d3      	str	r3, [r2, #76]	; 0x4c
  setpoint->velocity.y = values->vy;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	6513      	str	r3, [r2, #80]	; 0x50

  setpoint->velocity_body = true;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 8001cdc:	bf00      	nop
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	08029880 	.word	0x08029880
 8001ce8:	08029970 	.word	0x08029970

08001cec <fullStateDecoder>:
  int16_t rateRoll;  // angular velocity - milliradians / sec
  int16_t ratePitch; //  (NOTE: limits to about 5 full circles per sec.
  int16_t rateYaw;   //   may not be enough for extremely aggressive flight.)
} __attribute__((packed));
static void fullStateDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	72fb      	strb	r3, [r7, #11]
  const struct fullStatePacket_s *values = data;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	617b      	str	r3, [r7, #20]

  ASSERT(datalen == sizeof(struct fullStatePacket_s));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2b1c      	cmp	r3, #28
 8001d04:	d005      	beq.n	8001d12 <fullStateDecoder+0x26>
 8001d06:	f240 125d 	movw	r2, #349	; 0x15d
 8001d0a:	4972      	ldr	r1, [pc, #456]	; (8001ed4 <fullStateDecoder+0x1e8>)
 8001d0c:	4872      	ldr	r0, [pc, #456]	; (8001ed8 <fullStateDecoder+0x1ec>)
 8001d0e:	f00e ff85 	bl	8010c1c <assertFail>
  setpoint->mode.x = modeAbs; \
  setpoint->position.x = values->x / 1000.0f; \
  setpoint->velocity.x = (values->v ## x) / 1000.0f; \
  setpoint->acceleration.x = (values->a ## x) / 1000.0f; \

  UNPACK(x)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d20:	b21b      	sxth	r3, r3
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d2a:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001edc <fullStateDecoder+0x1f0>
 8001d2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d3e:	b21b      	sxth	r3, r3
 8001d40:	ee07 3a90 	vmov	s15, r3
 8001d44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d48:	eddf 6a64 	vldr	s13, [pc, #400]	; 8001edc <fullStateDecoder+0x1f0>
 8001d4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d5c:	b21b      	sxth	r3, r3
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d66:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001edc <fullStateDecoder+0x1f0>
 8001d6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
  UNPACK(y)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d82:	b21b      	sxth	r3, r3
 8001d84:	ee07 3a90 	vmov	s15, r3
 8001d88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d8c:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001edc <fullStateDecoder+0x1f0>
 8001d90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001da0:	b21b      	sxth	r3, r3
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001daa:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8001edc <fullStateDecoder+0x1f0>
 8001dae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001dbe:	b21b      	sxth	r3, r3
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc8:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001edc <fullStateDecoder+0x1f0>
 8001dcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
  UNPACK(z)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001de4:	b21b      	sxth	r3, r3
 8001de6:	ee07 3a90 	vmov	s15, r3
 8001dea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dee:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001edc <fullStateDecoder+0x1f0>
 8001df2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e02:	b21b      	sxth	r3, r3
 8001e04:	ee07 3a90 	vmov	s15, r3
 8001e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e0c:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001edc <fullStateDecoder+0x1f0>
 8001e10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e2a:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001edc <fullStateDecoder+0x1f0>
 8001e2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
  #undef UNPACK

  float const millirad2deg = 180.0f / ((float)M_PI * 1000.0f);
 8001e38:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <fullStateDecoder+0x1f4>)
 8001e3a:	613b      	str	r3, [r7, #16]
  setpoint->attitudeRate.roll = millirad2deg * values->rateRoll;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001e42:	b21b      	sxth	r3, r3
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	edc3 7a06 	vstr	s15, [r3, #24]
  setpoint->attitudeRate.pitch = millirad2deg * values->ratePitch;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	edc3 7a07 	vstr	s15, [r3, #28]
  setpoint->attitudeRate.yaw = millirad2deg * values->rateYaw;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001e7e:	b21b      	sxth	r3, r3
 8001e80:	ee07 3a90 	vmov	s15, r3
 8001e84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	edc3 7a08 	vstr	s15, [r3, #32]

  quatdecompress(values->quat, (float *)&setpoint->attitudeQuaternion.q0);
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	3324      	adds	r3, #36	; 0x24
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	f7ff fc63 	bl	8001770 <quatdecompress>
  setpoint->mode.quat = modeAbs;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
  setpoint->mode.roll = modeDisable;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  setpoint->mode.pitch = modeDisable;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  setpoint->mode.yaw = modeDisable;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	08029880 	.word	0x08029880
 8001ed8:	08029998 	.word	0x08029998
 8001edc:	447a0000 	.word	0x447a0000
 8001ee0:	3d6aaefa 	.word	0x3d6aaefa

08001ee4 <positionDecoder>:
   float y;
   float z;
   float yaw;   // Orientation in degree
 } __attribute__((packed));
static void positionDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	72fb      	strb	r3, [r7, #11]
  const struct positionPacket_s *values = data;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	617b      	str	r3, [r7, #20]

  setpoint->mode.x = modeAbs;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  setpoint->mode.y = modeAbs;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  setpoint->mode.z = modeAbs;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

  setpoint->position.x = values->x;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	63d3      	str	r3, [r2, #60]	; 0x3c
  setpoint->position.y = values->y;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	6413      	str	r3, [r2, #64]	; 0x40
  setpoint->position.z = values->z;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	6453      	str	r3, [r2, #68]	; 0x44


  setpoint->mode.yaw = modeAbs;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  setpoint->attitude.yaw = values->yaw;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	6113      	str	r3, [r2, #16]
}
 8001f38:	bf00      	nop
 8001f3a:	371c      	adds	r7, #28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <crtpCommanderGenericDecodeSetpoint>:
  [positionType]      = positionDecoder,
};

/* Decoder switch */
void crtpCommanderGenericDecodeSetpoint(setpoint_t *setpoint, CRTPPacket *pk)
{
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  static int nTypes = -1;

  ASSERT(pk->size > 0);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d105      	bne.n	8001f62 <crtpCommanderGenericDecodeSetpoint+0x1e>
 8001f56:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 8001f5a:	4917      	ldr	r1, [pc, #92]	; (8001fb8 <crtpCommanderGenericDecodeSetpoint+0x74>)
 8001f5c:	4817      	ldr	r0, [pc, #92]	; (8001fbc <crtpCommanderGenericDecodeSetpoint+0x78>)
 8001f5e:	f00e fe5d 	bl	8010c1c <assertFail>

  if (nTypes<0) {
 8001f62:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <crtpCommanderGenericDecodeSetpoint+0x7c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	da02      	bge.n	8001f70 <crtpCommanderGenericDecodeSetpoint+0x2c>
    nTypes = sizeof(packetDecoders)/sizeof(packetDecoders[0]);
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <crtpCommanderGenericDecodeSetpoint+0x7c>)
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	601a      	str	r2, [r3, #0]
  }

  uint8_t type = pk->data[0];
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	789b      	ldrb	r3, [r3, #2]
 8001f74:	73fb      	strb	r3, [r7, #15]

  memset(setpoint, 0, sizeof(setpoint_t));
 8001f76:	2270      	movs	r2, #112	; 0x70
 8001f78:	2100      	movs	r1, #0
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f021 fcc8 	bl	8023910 <memset>

  if (type<nTypes && (packetDecoders[type] != NULL)) {
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <crtpCommanderGenericDecodeSetpoint+0x7c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	da12      	bge.n	8001fb0 <crtpCommanderGenericDecodeSetpoint+0x6c>
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <crtpCommanderGenericDecodeSetpoint+0x80>)
 8001f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00c      	beq.n	8001fb0 <crtpCommanderGenericDecodeSetpoint+0x6c>
    packetDecoders[type](setpoint, type, ((char*)pk->data)+1, pk->size-1);
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <crtpCommanderGenericDecodeSetpoint+0x80>)
 8001f9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	7bf9      	ldrb	r1, [r7, #15]
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	47a0      	blx	r4
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd90      	pop	{r4, r7, pc}
 8001fb8:	08029880 	.word	0x08029880
 8001fbc:	080299c4 	.word	0x080299c4
 8001fc0:	2000002c 	.word	0x2000002c
 8001fc4:	0802d7b0 	.word	0x0802d7b0

08001fc8 <radians>:


// ----------------------------- scalars --------------------------------

static inline float fsqr(float x) { return x * x; }
static inline float radians(float degrees) { return (M_PI_F / 180.0f) * degrees; }
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	ed87 0a01 	vstr	s0, [r7, #4]
 8001fd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fd6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001fec <radians+0x24>
 8001fda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fde:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	3c8efa35 	.word	0x3c8efa35

08001ff0 <mkvec>:
//
// constructors
//

// construct a vector from 3 floats.
static inline struct vec mkvec(float x, float y, float z) {
 8001ff0:	b480      	push	{r7}
 8001ff2:	b08f      	sub	sp, #60	; 0x3c
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	ed87 0a07 	vstr	s0, [r7, #28]
 8001ffa:	edc7 0a06 	vstr	s1, [r7, #24]
 8001ffe:	ed87 1a05 	vstr	s2, [r7, #20]
	struct vec v;
	v.x = x; v.y = y; v.z = z;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	623b      	str	r3, [r7, #32]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
	return v;
 800200e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002012:	f107 0220 	add.w	r2, r7, #32
 8002016:	ca07      	ldmia	r2, {r0, r1, r2}
 8002018:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800201c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800201e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002022:	ee06 1a90 	vmov	s13, r1
 8002026:	ee07 2a10 	vmov	s14, r2
 800202a:	ee07 3a90 	vmov	s15, r3
}
 800202e:	eeb0 0a66 	vmov.f32	s0, s13
 8002032:	eef0 0a47 	vmov.f32	s1, s14
 8002036:	eeb0 1a67 	vmov.f32	s2, s15
 800203a:	373c      	adds	r7, #60	; 0x3c
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <vrepeat>:
// construct a vector with the same value repeated for x, y, and z.
static inline struct vec vrepeat(float x) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	ed87 0a05 	vstr	s0, [r7, #20]
	return mkvec(x, x, x);
 800204e:	ed97 1a05 	vldr	s2, [r7, #20]
 8002052:	edd7 0a05 	vldr	s1, [r7, #20]
 8002056:	ed97 0a05 	vldr	s0, [r7, #20]
 800205a:	f7ff ffc9 	bl	8001ff0 <mkvec>
 800205e:	eef0 6a40 	vmov.f32	s13, s0
 8002062:	eeb0 7a60 	vmov.f32	s14, s1
 8002066:	eef0 7a41 	vmov.f32	s15, s2
 800206a:	edc7 6a07 	vstr	s13, [r7, #28]
 800206e:	ed87 7a08 	vstr	s14, [r7, #32]
 8002072:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8002076:	69f9      	ldr	r1, [r7, #28]
 8002078:	6a3a      	ldr	r2, [r7, #32]
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	ee06 1a90 	vmov	s13, r1
 8002080:	ee07 2a10 	vmov	s14, r2
 8002084:	ee07 3a90 	vmov	s15, r3
}
 8002088:	eeb0 0a66 	vmov.f32	s0, s13
 800208c:	eef0 0a47 	vmov.f32	s1, s14
 8002090:	eeb0 1a67 	vmov.f32	s2, s15
 8002094:	3728      	adds	r7, #40	; 0x28
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <vzero>:
// construct a zero-vector.
static inline struct vec vzero(void) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
	return vrepeat(0.0f);
 80020a2:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80020e8 <vzero+0x4c>
 80020a6:	f7ff ffcd 	bl	8002044 <vrepeat>
 80020aa:	eef0 6a40 	vmov.f32	s13, s0
 80020ae:	eeb0 7a60 	vmov.f32	s14, s1
 80020b2:	eef0 7a41 	vmov.f32	s15, s2
 80020b6:	edc7 6a05 	vstr	s13, [r7, #20]
 80020ba:	ed87 7a06 	vstr	s14, [r7, #24]
 80020be:	edc7 7a07 	vstr	s15, [r7, #28]
 80020c2:	6979      	ldr	r1, [r7, #20]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	ee06 1a90 	vmov	s13, r1
 80020cc:	ee07 2a10 	vmov	s14, r2
 80020d0:	ee07 3a90 	vmov	s15, r3
}
 80020d4:	eeb0 0a66 	vmov.f32	s0, s13
 80020d8:	eef0 0a47 	vmov.f32	s1, s14
 80020dc:	eeb0 1a67 	vmov.f32	s2, s15
 80020e0:	3720      	adds	r7, #32
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	00000000 	.word	0x00000000

080020ec <handleMemGetSize>:
// safe default settings for takeoff and landing velocity
static float defaultTakeoffVelocity = 0.5f;
static float defaultLandingVelocity = 0.5f;

// Trajectory memory handling from the memory module
static uint32_t handleMemGetSize(void) { return crtpCommanderHighLevelTrajectoryMemSize(); }
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	f000 ff35 	bl	8002f5e <crtpCommanderHighLevelTrajectoryMemSize>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4618      	mov	r0, r3
 80020f8:	bd80      	pop	{r7, pc}

080020fa <state2vec>:
static int start_trajectory(const struct data_start_trajectory* data);
static int define_trajectory(const struct data_define_trajectory* data);

// Helper functions
static struct vec state2vec(struct vec3_s v)
{
 80020fa:	b590      	push	{r4, r7, lr}
 80020fc:	b08d      	sub	sp, #52	; 0x34
 80020fe:	af00      	add	r7, sp, #0
 8002100:	f107 0410 	add.w	r4, r7, #16
 8002104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return mkvec(v.x, v.y, v.z);
 8002108:	edd7 7a05 	vldr	s15, [r7, #20]
 800210c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002110:	edd7 6a07 	vldr	s13, [r7, #28]
 8002114:	eeb0 1a66 	vmov.f32	s2, s13
 8002118:	eef0 0a47 	vmov.f32	s1, s14
 800211c:	eeb0 0a67 	vmov.f32	s0, s15
 8002120:	f7ff ff66 	bl	8001ff0 <mkvec>
 8002124:	eef0 6a40 	vmov.f32	s13, s0
 8002128:	eeb0 7a60 	vmov.f32	s14, s1
 800212c:	eef0 7a41 	vmov.f32	s15, s2
 8002130:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8002134:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8002138:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800213c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800213e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002142:	ee06 1a90 	vmov	s13, r1
 8002146:	ee07 2a10 	vmov	s14, r2
 800214a:	ee07 3a90 	vmov	s15, r3
}
 800214e:	eeb0 0a66 	vmov.f32	s0, s13
 8002152:	eef0 0a47 	vmov.f32	s1, s14
 8002156:	eeb0 1a67 	vmov.f32	s2, s15
 800215a:	3734      	adds	r7, #52	; 0x34
 800215c:	46bd      	mov	sp, r7
 800215e:	bd90      	pop	{r4, r7, pc}

08002160 <isInGroup>:

bool isInGroup(uint8_t g) {
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
  return g == ALL_GROUPS || (g & group_mask) != 0;
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <isInGroup+0x1e>
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <isInGroup+0x38>)
 8002172:	781a      	ldrb	r2, [r3, #0]
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	4013      	ands	r3, r2
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <isInGroup+0x22>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <isInGroup+0x24>
 8002182:	2300      	movs	r3, #0
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	b2db      	uxtb	r3, r3
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20007a28 	.word	0x20007a28

0800219c <crtpCommanderHighLevelInit>:

void crtpCommanderHighLevelInit(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af04      	add	r7, sp, #16
  if (isInit) {
 80021a2:	4b25      	ldr	r3, [pc, #148]	; (8002238 <crtpCommanderHighLevelInit+0x9c>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d143      	bne.n	8002232 <crtpCommanderHighLevelInit+0x96>
    return;
  }

  memoryRegisterHandler(&memDef);
 80021aa:	4824      	ldr	r0, [pc, #144]	; (800223c <crtpCommanderHighLevelInit+0xa0>)
 80021ac:	f002 ff6a 	bl	8005084 <memoryRegisterHandler>
  plan_init(&planner);
 80021b0:	4823      	ldr	r0, [pc, #140]	; (8002240 <crtpCommanderHighLevelInit+0xa4>)
 80021b2:	f00a ff33 	bl	800d01c <plan_init>

  //Start the trajectory task
  STATIC_MEM_TASK_CREATE(crtpCommanderHighLevelTask, crtpCommanderHighLevelTask, CMD_HIGH_LEVEL_TASK_NAME, NULL, CMD_HIGH_LEVEL_TASK_PRI);
 80021b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ba:	461a      	mov	r2, r3
 80021bc:	4b21      	ldr	r3, [pc, #132]	; (8002244 <crtpCommanderHighLevelInit+0xa8>)
 80021be:	9302      	str	r3, [sp, #8]
 80021c0:	4b21      	ldr	r3, [pc, #132]	; (8002248 <crtpCommanderHighLevelInit+0xac>)
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	2302      	movs	r3, #2
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2300      	movs	r3, #0
 80021ca:	4920      	ldr	r1, [pc, #128]	; (800224c <crtpCommanderHighLevelInit+0xb0>)
 80021cc:	4820      	ldr	r0, [pc, #128]	; (8002250 <crtpCommanderHighLevelInit+0xb4>)
 80021ce:	f01d f9d1 	bl	801f574 <xTaskCreateStatic>

  lockTraj = xSemaphoreCreateMutexStatic(&lockTrajBuffer);
 80021d2:	4920      	ldr	r1, [pc, #128]	; (8002254 <crtpCommanderHighLevelInit+0xb8>)
 80021d4:	2001      	movs	r0, #1
 80021d6:	f01c fbb8 	bl	801e94a <xQueueCreateMutexStatic>
 80021da:	4603      	mov	r3, r0
 80021dc:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <crtpCommanderHighLevelInit+0xbc>)
 80021de:	6013      	str	r3, [r2, #0]

  pos = vzero();
 80021e0:	f7ff ff5c 	bl	800209c <vzero>
 80021e4:	eef0 6a40 	vmov.f32	s13, s0
 80021e8:	eeb0 7a60 	vmov.f32	s14, s1
 80021ec:	eef0 7a41 	vmov.f32	s15, s2
 80021f0:	4b1a      	ldr	r3, [pc, #104]	; (800225c <crtpCommanderHighLevelInit+0xc0>)
 80021f2:	edc3 6a00 	vstr	s13, [r3]
 80021f6:	ed83 7a01 	vstr	s14, [r3, #4]
 80021fa:	edc3 7a02 	vstr	s15, [r3, #8]
  vel = vzero();
 80021fe:	f7ff ff4d 	bl	800209c <vzero>
 8002202:	eef0 6a40 	vmov.f32	s13, s0
 8002206:	eeb0 7a60 	vmov.f32	s14, s1
 800220a:	eef0 7a41 	vmov.f32	s15, s2
 800220e:	4b14      	ldr	r3, [pc, #80]	; (8002260 <crtpCommanderHighLevelInit+0xc4>)
 8002210:	edc3 6a00 	vstr	s13, [r3]
 8002214:	ed83 7a01 	vstr	s14, [r3, #4]
 8002218:	edc3 7a02 	vstr	s15, [r3, #8]
  yaw = 0;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <crtpCommanderHighLevelInit+0xc8>)
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

  isBlocked = false;
 8002224:	4b10      	ldr	r3, [pc, #64]	; (8002268 <crtpCommanderHighLevelInit+0xcc>)
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]

  isInit = true;
 800222a:	4b03      	ldr	r3, [pc, #12]	; (8002238 <crtpCommanderHighLevelInit+0x9c>)
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	e000      	b.n	8002234 <crtpCommanderHighLevelInit+0x98>
    return;
 8002232:	bf00      	nop
}
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	2000797e 	.word	0x2000797e
 800223c:	0802d7d0 	.word	0x0802d7d0
 8002240:	20007980 	.word	0x20007980
 8002244:	200019d0 	.word	0x200019d0
 8002248:	20007b60 	.word	0x20007b60
 800224c:	08029a1c 	.word	0x08029a1c
 8002250:	080023d1 	.word	0x080023d1
 8002254:	20007b10 	.word	0x20007b10
 8002258:	20007b0c 	.word	0x20007b0c
 800225c:	20007a2c 	.word	0x20007a2c
 8002260:	20007a38 	.word	0x20007a38
 8002264:	20007a44 	.word	0x20007a44
 8002268:	20007a29 	.word	0x20007a29

0800226c <crtpCommanderHighLevelTellState>:
{
  return plan_is_stopped(&planner);
}

void crtpCommanderHighLevelTellState(const state_t *state)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002274:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <crtpCommanderHighLevelTellState+0x8c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800227c:	4618      	mov	r0, r3
 800227e:	f01c fe01 	bl	801ee84 <xQueueSemaphoreTake>
  pos = state2vec(state->position);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3320      	adds	r3, #32
 8002286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002288:	f7ff ff37 	bl	80020fa <state2vec>
 800228c:	eef0 6a40 	vmov.f32	s13, s0
 8002290:	eeb0 7a60 	vmov.f32	s14, s1
 8002294:	eef0 7a41 	vmov.f32	s15, s2
 8002298:	4b18      	ldr	r3, [pc, #96]	; (80022fc <crtpCommanderHighLevelTellState+0x90>)
 800229a:	edc3 6a00 	vstr	s13, [r3]
 800229e:	ed83 7a01 	vstr	s14, [r3, #4]
 80022a2:	edc3 7a02 	vstr	s15, [r3, #8]
  vel = state2vec(state->velocity);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3330      	adds	r3, #48	; 0x30
 80022aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022ac:	f7ff ff25 	bl	80020fa <state2vec>
 80022b0:	eef0 6a40 	vmov.f32	s13, s0
 80022b4:	eeb0 7a60 	vmov.f32	s14, s1
 80022b8:	eef0 7a41 	vmov.f32	s15, s2
 80022bc:	4b10      	ldr	r3, [pc, #64]	; (8002300 <crtpCommanderHighLevelTellState+0x94>)
 80022be:	edc3 6a00 	vstr	s13, [r3]
 80022c2:	ed83 7a01 	vstr	s14, [r3, #4]
 80022c6:	edc3 7a02 	vstr	s15, [r3, #8]
  yaw = radians(state->attitude.yaw);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80022d0:	eeb0 0a67 	vmov.f32	s0, s15
 80022d4:	f7ff fe78 	bl	8001fc8 <radians>
 80022d8:	eef0 7a40 	vmov.f32	s15, s0
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <crtpCommanderHighLevelTellState+0x98>)
 80022de:	edc3 7a00 	vstr	s15, [r3]
  xSemaphoreGive(lockTraj);
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <crtpCommanderHighLevelTellState+0x8c>)
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	2300      	movs	r3, #0
 80022e8:	2200      	movs	r2, #0
 80022ea:	2100      	movs	r1, #0
 80022ec:	f01c fb48 	bl	801e980 <xQueueGenericSend>
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20007b0c 	.word	0x20007b0c
 80022fc:	20007a2c 	.word	0x20007a2c
 8002300:	20007a38 	.word	0x20007a38
 8002304:	20007a44 	.word	0x20007a44

08002308 <handleCommand>:
    return false;
  }
}

static int handleCommand(const enum TrajectoryCommand_e command, const uint8_t* data)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]

  switch(command)
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	2b0a      	cmp	r3, #10
 800231c:	d84f      	bhi.n	80023be <handleCommand+0xb6>
 800231e:	a201      	add	r2, pc, #4	; (adr r2, 8002324 <handleCommand+0x1c>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	08002351 	.word	0x08002351
 8002328:	0800235b 	.word	0x0800235b
 800232c:	08002365 	.word	0x08002365
 8002330:	08002397 	.word	0x08002397
 8002334:	080023a1 	.word	0x080023a1
 8002338:	080023ab 	.word	0x080023ab
 800233c:	080023b5 	.word	0x080023b5
 8002340:	0800236f 	.word	0x0800236f
 8002344:	08002379 	.word	0x08002379
 8002348:	08002383 	.word	0x08002383
 800234c:	0800238d 	.word	0x0800238d
  {
    case COMMAND_SET_GROUP_MASK:
      ret = set_group_mask((const struct data_set_group_mask*)data);
 8002350:	6838      	ldr	r0, [r7, #0]
 8002352:	f000 f85f 	bl	8002414 <set_group_mask>
 8002356:	60f8      	str	r0, [r7, #12]
      break;
 8002358:	e034      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_TAKEOFF:
      ret = takeoff((const struct data_takeoff*)data);
 800235a:	6838      	ldr	r0, [r7, #0]
 800235c:	f000 f86c 	bl	8002438 <takeoff>
 8002360:	60f8      	str	r0, [r7, #12]
      break;
 8002362:	e02f      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_LAND:
      ret = land((const struct data_land*)data);
 8002364:	6838      	ldr	r0, [r7, #0]
 8002366:	f000 fa03 	bl	8002770 <land>
 800236a:	60f8      	str	r0, [r7, #12]
      break;
 800236c:	e02a      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_TAKEOFF_2:
      ret = takeoff2((const struct data_takeoff_2*)data);
 800236e:	6838      	ldr	r0, [r7, #0]
 8002370:	f000 f8d6 	bl	8002520 <takeoff2>
 8002374:	60f8      	str	r0, [r7, #12]
      break;
 8002376:	e025      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_LAND_2:
      ret = land2((const struct data_land_2*)data);
 8002378:	6838      	ldr	r0, [r7, #0]
 800237a:	f000 fa6d 	bl	8002858 <land2>
 800237e:	60f8      	str	r0, [r7, #12]
      break;
 8002380:	e020      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_TAKEOFF_WITH_VELOCITY:
      ret = takeoff_with_velocity((const struct data_takeoff_with_velocity*)data);
 8002382:	6838      	ldr	r0, [r7, #0]
 8002384:	f000 f94c 	bl	8002620 <takeoff_with_velocity>
 8002388:	60f8      	str	r0, [r7, #12]
      break;
 800238a:	e01b      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_LAND_WITH_VELOCITY:
      ret = land_with_velocity((const struct data_land_with_velocity*)data);
 800238c:	6838      	ldr	r0, [r7, #0]
 800238e:	f000 fae3 	bl	8002958 <land_with_velocity>
 8002392:	60f8      	str	r0, [r7, #12]
      break;
 8002394:	e016      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_STOP:
      ret = stop((const struct data_stop*)data);
 8002396:	6838      	ldr	r0, [r7, #0]
 8002398:	f000 fb86 	bl	8002aa8 <stop>
 800239c:	60f8      	str	r0, [r7, #12]
      break;
 800239e:	e011      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_GO_TO:
      ret = go_to((const struct data_go_to*)data);
 80023a0:	6838      	ldr	r0, [r7, #0]
 80023a2:	f000 fba9 	bl	8002af8 <go_to>
 80023a6:	60f8      	str	r0, [r7, #12]
      break;
 80023a8:	e00c      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_START_TRAJECTORY:
      ret = start_trajectory((const struct data_start_trajectory*)data);
 80023aa:	6838      	ldr	r0, [r7, #0]
 80023ac:	f000 fc80 	bl	8002cb0 <start_trajectory>
 80023b0:	60f8      	str	r0, [r7, #12]
      break;
 80023b2:	e007      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_DEFINE_TRAJECTORY:
      ret = define_trajectory((const struct data_define_trajectory*)data);
 80023b4:	6838      	ldr	r0, [r7, #0]
 80023b6:	f000 fd7b 	bl	8002eb0 <define_trajectory>
 80023ba:	60f8      	str	r0, [r7, #12]
      break;
 80023bc:	e002      	b.n	80023c4 <handleCommand+0xbc>
    default:
      ret = ENOEXEC;
 80023be:	2308      	movs	r3, #8
 80023c0:	60fb      	str	r3, [r7, #12]
      break;
 80023c2:	bf00      	nop
  }

  return ret;
 80023c4:	68fb      	ldr	r3, [r7, #12]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop

080023d0 <crtpCommanderHighLevelTask>:

void crtpCommanderHighLevelTask(void * prm)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08c      	sub	sp, #48	; 0x30
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  CRTPPacket p;
  crtpInitTaskQueue(CRTP_PORT_SETPOINT_HL);
 80023d8:	2008      	movs	r0, #8
 80023da:	f7fe ff33 	bl	8001244 <crtpInitTaskQueue>

  while(1) {
    crtpReceivePacketBlock(CRTP_PORT_SETPOINT_HL, &p);
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	4619      	mov	r1, r3
 80023e4:	2008      	movs	r0, #8
 80023e6:	f7fe ff5d 	bl	80012a4 <crtpReceivePacketBlock>

    int ret = handleCommand(p.data[0], &p.data[1]);
 80023ea:	7bba      	ldrb	r2, [r7, #14]
 80023ec:	f107 030c 	add.w	r3, r7, #12
 80023f0:	3303      	adds	r3, #3
 80023f2:	4619      	mov	r1, r3
 80023f4:	4610      	mov	r0, r2
 80023f6:	f7ff ff87 	bl	8002308 <handleCommand>
 80023fa:	62f8      	str	r0, [r7, #44]	; 0x2c

    //answer
    p.data[3] = ret;
 80023fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	747b      	strb	r3, [r7, #17]
    p.size = 4;
 8002402:	2304      	movs	r3, #4
 8002404:	733b      	strb	r3, [r7, #12]
    crtpSendPacketBlock(&p);
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff f84a 	bl	80014a4 <crtpSendPacketBlock>
  while(1) {
 8002410:	e7e5      	b.n	80023de <crtpCommanderHighLevelTask+0xe>
	...

08002414 <set_group_mask>:
  }
}

int set_group_mask(const struct data_set_group_mask* data)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  group_mask = data->groupMask;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	781a      	ldrb	r2, [r3, #0]
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <set_group_mask+0x20>)
 8002422:	701a      	strb	r2, [r3, #0]

  return 0;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20007a28 	.word	0x20007a28

08002438 <takeoff>:

// Deprecated (removed after August 2023)
int takeoff(const struct data_takeoff* data)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002440:	4b31      	ldr	r3, [pc, #196]	; (8002508 <takeoff+0xd0>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <takeoff+0x14>
    return EBUSY;
 8002448:	2310      	movs	r3, #16
 800244a:	e055      	b.n	80024f8 <takeoff+0xc0>
  }

  int result = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
  if (isInGroup(data->groupMask)) {
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fe83 	bl	8002160 <isInGroup>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d04a      	beq.n	80024f6 <takeoff+0xbe>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002460:	4b2a      	ldr	r3, [pc, #168]	; (800250c <takeoff+0xd4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002468:	4618      	mov	r0, r3
 800246a:	f01c fd0b 	bl	801ee84 <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 800246e:	f011 fd95 	bl	8013f9c <usecTimestamp>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f7fe f897 	bl	80005ac <__aeabi_ul2d>
 800247e:	a320      	add	r3, pc, #128	; (adr r3, 8002500 <takeoff+0xc8>)
 8002480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002484:	f7fe f9f2 	bl	800086c <__aeabi_ddiv>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	f7fe fb9a 	bl	8000bc8 <__aeabi_d2f>
 8002494:	4603      	mov	r3, r0
 8002496:	60bb      	str	r3, [r7, #8]
    result = plan_takeoff(&planner, pos, yaw, data->height, 0.0f, data->duration, t);
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <takeoff+0xd8>)
 800249a:	ed93 6a00 	vldr	s12, [r3]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80024a4:	4613      	mov	r3, r2
 80024a6:	461a      	mov	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f8d3 1005 	ldr.w	r1, [r3, #5]
 80024ae:	460b      	mov	r3, r1
 80024b0:	4619      	mov	r1, r3
 80024b2:	4b18      	ldr	r3, [pc, #96]	; (8002514 <takeoff+0xdc>)
 80024b4:	edd3 6a00 	vldr	s13, [r3]
 80024b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80024bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80024c0:	edd7 3a02 	vldr	s7, [r7, #8]
 80024c4:	ee03 1a10 	vmov	s6, r1
 80024c8:	eddf 2a13 	vldr	s5, [pc, #76]	; 8002518 <takeoff+0xe0>
 80024cc:	ee02 2a10 	vmov	s4, r2
 80024d0:	eef0 1a46 	vmov.f32	s3, s12
 80024d4:	eeb0 0a66 	vmov.f32	s0, s13
 80024d8:	eef0 0a47 	vmov.f32	s1, s14
 80024dc:	eeb0 1a67 	vmov.f32	s2, s15
 80024e0:	480e      	ldr	r0, [pc, #56]	; (800251c <takeoff+0xe4>)
 80024e2:	f00a fe75 	bl	800d1d0 <plan_takeoff>
 80024e6:	60f8      	str	r0, [r7, #12]
    xSemaphoreGive(lockTraj);
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <takeoff+0xd4>)
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	2300      	movs	r3, #0
 80024ee:	2200      	movs	r2, #0
 80024f0:	2100      	movs	r1, #0
 80024f2:	f01c fa45 	bl	801e980 <xQueueGenericSend>
  }
  return result;
 80024f6:	68fb      	ldr	r3, [r7, #12]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	00000000 	.word	0x00000000
 8002504:	412e8480 	.word	0x412e8480
 8002508:	20007a29 	.word	0x20007a29
 800250c:	20007b0c 	.word	0x20007b0c
 8002510:	20007a44 	.word	0x20007a44
 8002514:	20007a2c 	.word	0x20007a2c
 8002518:	00000000 	.word	0x00000000
 800251c:	20007980 	.word	0x20007980

08002520 <takeoff2>:

int takeoff2(const struct data_takeoff_2* data)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002528:	4b37      	ldr	r3, [pc, #220]	; (8002608 <takeoff2+0xe8>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <takeoff2+0x14>
    return EBUSY;
 8002530:	2310      	movs	r3, #16
 8002532:	e060      	b.n	80025f6 <takeoff2+0xd6>
  }

  int result = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
  if (isInGroup(data->groupMask)) {
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fe0f 	bl	8002160 <isInGroup>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d055      	beq.n	80025f4 <takeoff2+0xd4>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002548:	4b30      	ldr	r3, [pc, #192]	; (800260c <takeoff2+0xec>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002550:	4618      	mov	r0, r3
 8002552:	f01c fc97 	bl	801ee84 <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 8002556:	f011 fd21 	bl	8013f9c <usecTimestamp>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4610      	mov	r0, r2
 8002560:	4619      	mov	r1, r3
 8002562:	f7fe f823 	bl	80005ac <__aeabi_ul2d>
 8002566:	a326      	add	r3, pc, #152	; (adr r3, 8002600 <takeoff2+0xe0>)
 8002568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256c:	f7fe f97e 	bl	800086c <__aeabi_ddiv>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	f7fe fb26 	bl	8000bc8 <__aeabi_d2f>
 800257c:	4603      	mov	r3, r0
 800257e:	60fb      	str	r3, [r7, #12]

    float hover_yaw = data->yaw;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8002586:	613b      	str	r3, [r7, #16]
    if (data->useCurrentYaw) {
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	7a5b      	ldrb	r3, [r3, #9]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <takeoff2+0x76>
      hover_yaw = yaw;
 8002590:	4b1f      	ldr	r3, [pc, #124]	; (8002610 <takeoff2+0xf0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	613b      	str	r3, [r7, #16]
    }

    result = plan_takeoff(&planner, pos, yaw, data->height, hover_yaw, data->duration, t);
 8002596:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <takeoff2+0xf0>)
 8002598:	ed93 6a00 	vldr	s12, [r3]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80025a2:	4613      	mov	r3, r2
 80025a4:	461a      	mov	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8d3 100a 	ldr.w	r1, [r3, #10]
 80025ac:	460b      	mov	r3, r1
 80025ae:	4619      	mov	r1, r3
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <takeoff2+0xf4>)
 80025b2:	edd3 6a00 	vldr	s13, [r3]
 80025b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80025ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80025be:	edd7 3a03 	vldr	s7, [r7, #12]
 80025c2:	ee03 1a10 	vmov	s6, r1
 80025c6:	edd7 2a04 	vldr	s5, [r7, #16]
 80025ca:	ee02 2a10 	vmov	s4, r2
 80025ce:	eef0 1a46 	vmov.f32	s3, s12
 80025d2:	eeb0 0a66 	vmov.f32	s0, s13
 80025d6:	eef0 0a47 	vmov.f32	s1, s14
 80025da:	eeb0 1a67 	vmov.f32	s2, s15
 80025de:	480e      	ldr	r0, [pc, #56]	; (8002618 <takeoff2+0xf8>)
 80025e0:	f00a fdf6 	bl	800d1d0 <plan_takeoff>
 80025e4:	6178      	str	r0, [r7, #20]
    xSemaphoreGive(lockTraj);
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <takeoff2+0xec>)
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	2300      	movs	r3, #0
 80025ec:	2200      	movs	r2, #0
 80025ee:	2100      	movs	r1, #0
 80025f0:	f01c f9c6 	bl	801e980 <xQueueGenericSend>
  }
  return result;
 80025f4:	697b      	ldr	r3, [r7, #20]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	00000000 	.word	0x00000000
 8002604:	412e8480 	.word	0x412e8480
 8002608:	20007a29 	.word	0x20007a29
 800260c:	20007b0c 	.word	0x20007b0c
 8002610:	20007a44 	.word	0x20007a44
 8002614:	20007a2c 	.word	0x20007a2c
 8002618:	20007980 	.word	0x20007980
 800261c:	00000000 	.word	0x00000000

08002620 <takeoff_with_velocity>:

int takeoff_with_velocity(const struct data_takeoff_with_velocity* data)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002628:	4b4b      	ldr	r3, [pc, #300]	; (8002758 <takeoff_with_velocity+0x138>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <takeoff_with_velocity+0x14>
    return EBUSY;
 8002630:	2310      	movs	r3, #16
 8002632:	e087      	b.n	8002744 <takeoff_with_velocity+0x124>
  }

  int result = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
  if (isInGroup(data->groupMask)) {
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fd8f 	bl	8002160 <isInGroup>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d07c      	beq.n	8002742 <takeoff_with_velocity+0x122>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002648:	4b44      	ldr	r3, [pc, #272]	; (800275c <takeoff_with_velocity+0x13c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002650:	4618      	mov	r0, r3
 8002652:	f01c fc17 	bl	801ee84 <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 8002656:	f011 fca1 	bl	8013f9c <usecTimestamp>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	f7fd ffa3 	bl	80005ac <__aeabi_ul2d>
 8002666:	a33a      	add	r3, pc, #232	; (adr r3, 8002750 <takeoff_with_velocity+0x130>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fe f8fe 	bl	800086c <__aeabi_ddiv>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe faa6 	bl	8000bc8 <__aeabi_d2f>
 800267c:	4603      	mov	r3, r0
 800267e:	613b      	str	r3, [r7, #16]

    float hover_yaw = data->yaw;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002686:	61bb      	str	r3, [r7, #24]
    if (data->useCurrentYaw) {
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7a9b      	ldrb	r3, [r3, #10]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <takeoff_with_velocity+0x76>
      hover_yaw = yaw;
 8002690:	4b33      	ldr	r3, [pc, #204]	; (8002760 <takeoff_with_velocity+0x140>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	61bb      	str	r3, [r7, #24]
    }

    float height = data->height;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800269c:	617b      	str	r3, [r7, #20]
    if (data->heightIsRelative) {
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	795b      	ldrb	r3, [r3, #5]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d008      	beq.n	80026b8 <takeoff_with_velocity+0x98>
      height += pos.z;
 80026a6:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <takeoff_with_velocity+0x144>)
 80026a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80026ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80026b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b4:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    float velocity = data->velocity > 0 ? data->velocity : defaultTakeoffVelocity;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8d3 300b 	ldr.w	r3, [r3, #11]
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ca:	dd03      	ble.n	80026d4 <takeoff_with_velocity+0xb4>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8d3 300b 	ldr.w	r3, [r3, #11]
 80026d2:	e001      	b.n	80026d8 <takeoff_with_velocity+0xb8>
 80026d4:	4b24      	ldr	r3, [pc, #144]	; (8002768 <takeoff_with_velocity+0x148>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
    float duration = fabsf(height - pos.z) / velocity;
 80026da:	4b22      	ldr	r3, [pc, #136]	; (8002764 <takeoff_with_velocity+0x144>)
 80026dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80026e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80026e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e8:	eef0 6ae7 	vabs.f32	s13, s15
 80026ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80026f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026f4:	edc7 7a02 	vstr	s15, [r7, #8]
    result = plan_takeoff(&planner, pos, yaw, height, hover_yaw, duration, t);
 80026f8:	4b19      	ldr	r3, [pc, #100]	; (8002760 <takeoff_with_velocity+0x140>)
 80026fa:	ed93 6a00 	vldr	s12, [r3]
 80026fe:	4b19      	ldr	r3, [pc, #100]	; (8002764 <takeoff_with_velocity+0x144>)
 8002700:	edd3 6a00 	vldr	s13, [r3]
 8002704:	ed93 7a01 	vldr	s14, [r3, #4]
 8002708:	edd3 7a02 	vldr	s15, [r3, #8]
 800270c:	edd7 3a04 	vldr	s7, [r7, #16]
 8002710:	ed97 3a02 	vldr	s6, [r7, #8]
 8002714:	edd7 2a06 	vldr	s5, [r7, #24]
 8002718:	ed97 2a05 	vldr	s4, [r7, #20]
 800271c:	eef0 1a46 	vmov.f32	s3, s12
 8002720:	eeb0 0a66 	vmov.f32	s0, s13
 8002724:	eef0 0a47 	vmov.f32	s1, s14
 8002728:	eeb0 1a67 	vmov.f32	s2, s15
 800272c:	480f      	ldr	r0, [pc, #60]	; (800276c <takeoff_with_velocity+0x14c>)
 800272e:	f00a fd4f 	bl	800d1d0 <plan_takeoff>
 8002732:	61f8      	str	r0, [r7, #28]
    xSemaphoreGive(lockTraj);
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <takeoff_with_velocity+0x13c>)
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	2300      	movs	r3, #0
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	f01c f91f 	bl	801e980 <xQueueGenericSend>
  }
  return result;
 8002742:	69fb      	ldr	r3, [r7, #28]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3720      	adds	r7, #32
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	f3af 8000 	nop.w
 8002750:	00000000 	.word	0x00000000
 8002754:	412e8480 	.word	0x412e8480
 8002758:	20007a29 	.word	0x20007a29
 800275c:	20007b0c 	.word	0x20007b0c
 8002760:	20007a44 	.word	0x20007a44
 8002764:	20007a2c 	.word	0x20007a2c
 8002768:	20000030 	.word	0x20000030
 800276c:	20007980 	.word	0x20007980

08002770 <land>:

// Deprecated (removed after August 2023)
int land(const struct data_land* data)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002778:	4b31      	ldr	r3, [pc, #196]	; (8002840 <land+0xd0>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <land+0x14>
    return EBUSY;
 8002780:	2310      	movs	r3, #16
 8002782:	e055      	b.n	8002830 <land+0xc0>
  }

  int result = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
  if (isInGroup(data->groupMask)) {
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fce7 	bl	8002160 <isInGroup>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d04a      	beq.n	800282e <land+0xbe>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002798:	4b2a      	ldr	r3, [pc, #168]	; (8002844 <land+0xd4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027a0:	4618      	mov	r0, r3
 80027a2:	f01c fb6f 	bl	801ee84 <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 80027a6:	f011 fbf9 	bl	8013f9c <usecTimestamp>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	f7fd fefb 	bl	80005ac <__aeabi_ul2d>
 80027b6:	a320      	add	r3, pc, #128	; (adr r3, 8002838 <land+0xc8>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	f7fe f856 	bl	800086c <__aeabi_ddiv>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	f7fe f9fe 	bl	8000bc8 <__aeabi_d2f>
 80027cc:	4603      	mov	r3, r0
 80027ce:	60bb      	str	r3, [r7, #8]
    result = plan_land(&planner, pos, yaw, data->height, 0.0f, data->duration, t);
 80027d0:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <land+0xd8>)
 80027d2:	ed93 6a00 	vldr	s12, [r3]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80027dc:	4613      	mov	r3, r2
 80027de:	461a      	mov	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8d3 1005 	ldr.w	r1, [r3, #5]
 80027e6:	460b      	mov	r3, r1
 80027e8:	4619      	mov	r1, r3
 80027ea:	4b18      	ldr	r3, [pc, #96]	; (800284c <land+0xdc>)
 80027ec:	edd3 6a00 	vldr	s13, [r3]
 80027f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80027f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80027f8:	edd7 3a02 	vldr	s7, [r7, #8]
 80027fc:	ee03 1a10 	vmov	s6, r1
 8002800:	eddf 2a13 	vldr	s5, [pc, #76]	; 8002850 <land+0xe0>
 8002804:	ee02 2a10 	vmov	s4, r2
 8002808:	eef0 1a46 	vmov.f32	s3, s12
 800280c:	eeb0 0a66 	vmov.f32	s0, s13
 8002810:	eef0 0a47 	vmov.f32	s1, s14
 8002814:	eeb0 1a67 	vmov.f32	s2, s15
 8002818:	480e      	ldr	r0, [pc, #56]	; (8002854 <land+0xe4>)
 800281a:	f00a fd26 	bl	800d26a <plan_land>
 800281e:	60f8      	str	r0, [r7, #12]
    xSemaphoreGive(lockTraj);
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <land+0xd4>)
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	2300      	movs	r3, #0
 8002826:	2200      	movs	r2, #0
 8002828:	2100      	movs	r1, #0
 800282a:	f01c f8a9 	bl	801e980 <xQueueGenericSend>
  }
  return result;
 800282e:	68fb      	ldr	r3, [r7, #12]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	00000000 	.word	0x00000000
 800283c:	412e8480 	.word	0x412e8480
 8002840:	20007a29 	.word	0x20007a29
 8002844:	20007b0c 	.word	0x20007b0c
 8002848:	20007a44 	.word	0x20007a44
 800284c:	20007a2c 	.word	0x20007a2c
 8002850:	00000000 	.word	0x00000000
 8002854:	20007980 	.word	0x20007980

08002858 <land2>:

int land2(const struct data_land_2* data)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002860:	4b37      	ldr	r3, [pc, #220]	; (8002940 <land2+0xe8>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <land2+0x14>
    return EBUSY;
 8002868:	2310      	movs	r3, #16
 800286a:	e060      	b.n	800292e <land2+0xd6>
  }

  int result = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
  if (isInGroup(data->groupMask)) {
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fc73 	bl	8002160 <isInGroup>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d055      	beq.n	800292c <land2+0xd4>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002880:	4b30      	ldr	r3, [pc, #192]	; (8002944 <land2+0xec>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002888:	4618      	mov	r0, r3
 800288a:	f01c fafb 	bl	801ee84 <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 800288e:	f011 fb85 	bl	8013f9c <usecTimestamp>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f7fd fe87 	bl	80005ac <__aeabi_ul2d>
 800289e:	a326      	add	r3, pc, #152	; (adr r3, 8002938 <land2+0xe0>)
 80028a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a4:	f7fd ffe2 	bl	800086c <__aeabi_ddiv>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	f7fe f98a 	bl	8000bc8 <__aeabi_d2f>
 80028b4:	4603      	mov	r3, r0
 80028b6:	60fb      	str	r3, [r7, #12]

    float hover_yaw = data->yaw;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80028be:	613b      	str	r3, [r7, #16]
    if (data->useCurrentYaw) {
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	7a5b      	ldrb	r3, [r3, #9]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <land2+0x76>
      hover_yaw = yaw;
 80028c8:	4b1f      	ldr	r3, [pc, #124]	; (8002948 <land2+0xf0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	613b      	str	r3, [r7, #16]
    }

    result = plan_land(&planner, pos, yaw, data->height, hover_yaw, data->duration, t);
 80028ce:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <land2+0xf0>)
 80028d0:	ed93 6a00 	vldr	s12, [r3]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80028da:	4613      	mov	r3, r2
 80028dc:	461a      	mov	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8d3 100a 	ldr.w	r1, [r3, #10]
 80028e4:	460b      	mov	r3, r1
 80028e6:	4619      	mov	r1, r3
 80028e8:	4b18      	ldr	r3, [pc, #96]	; (800294c <land2+0xf4>)
 80028ea:	edd3 6a00 	vldr	s13, [r3]
 80028ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80028f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80028f6:	edd7 3a03 	vldr	s7, [r7, #12]
 80028fa:	ee03 1a10 	vmov	s6, r1
 80028fe:	edd7 2a04 	vldr	s5, [r7, #16]
 8002902:	ee02 2a10 	vmov	s4, r2
 8002906:	eef0 1a46 	vmov.f32	s3, s12
 800290a:	eeb0 0a66 	vmov.f32	s0, s13
 800290e:	eef0 0a47 	vmov.f32	s1, s14
 8002912:	eeb0 1a67 	vmov.f32	s2, s15
 8002916:	480e      	ldr	r0, [pc, #56]	; (8002950 <land2+0xf8>)
 8002918:	f00a fca7 	bl	800d26a <plan_land>
 800291c:	6178      	str	r0, [r7, #20]
    xSemaphoreGive(lockTraj);
 800291e:	4b09      	ldr	r3, [pc, #36]	; (8002944 <land2+0xec>)
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	2300      	movs	r3, #0
 8002924:	2200      	movs	r2, #0
 8002926:	2100      	movs	r1, #0
 8002928:	f01c f82a 	bl	801e980 <xQueueGenericSend>
  }
  return result;
 800292c:	697b      	ldr	r3, [r7, #20]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	00000000 	.word	0x00000000
 800293c:	412e8480 	.word	0x412e8480
 8002940:	20007a29 	.word	0x20007a29
 8002944:	20007b0c 	.word	0x20007b0c
 8002948:	20007a44 	.word	0x20007a44
 800294c:	20007a2c 	.word	0x20007a2c
 8002950:	20007980 	.word	0x20007980
 8002954:	00000000 	.word	0x00000000

08002958 <land_with_velocity>:

int land_with_velocity(const struct data_land_with_velocity* data)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002960:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <land_with_velocity+0x138>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <land_with_velocity+0x14>
    return EBUSY;
 8002968:	2310      	movs	r3, #16
 800296a:	e087      	b.n	8002a7c <land_with_velocity+0x124>
  }

  int result = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
  if (isInGroup(data->groupMask)) {
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fbf3 	bl	8002160 <isInGroup>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d07c      	beq.n	8002a7a <land_with_velocity+0x122>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002980:	4b44      	ldr	r3, [pc, #272]	; (8002a94 <land_with_velocity+0x13c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002988:	4618      	mov	r0, r3
 800298a:	f01c fa7b 	bl	801ee84 <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 800298e:	f011 fb05 	bl	8013f9c <usecTimestamp>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	f7fd fe07 	bl	80005ac <__aeabi_ul2d>
 800299e:	a33a      	add	r3, pc, #232	; (adr r3, 8002a88 <land_with_velocity+0x130>)
 80029a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a4:	f7fd ff62 	bl	800086c <__aeabi_ddiv>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	f7fe f90a 	bl	8000bc8 <__aeabi_d2f>
 80029b4:	4603      	mov	r3, r0
 80029b6:	613b      	str	r3, [r7, #16]

    float hover_yaw = data->yaw;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80029be:	61bb      	str	r3, [r7, #24]
    if (data->useCurrentYaw) {
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7a9b      	ldrb	r3, [r3, #10]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <land_with_velocity+0x76>
      hover_yaw = yaw;
 80029c8:	4b33      	ldr	r3, [pc, #204]	; (8002a98 <land_with_velocity+0x140>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	61bb      	str	r3, [r7, #24]
    }

    float height = data->height;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80029d4:	617b      	str	r3, [r7, #20]
    if (data->heightIsRelative) {
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	795b      	ldrb	r3, [r3, #5]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d008      	beq.n	80029f0 <land_with_velocity+0x98>
      height = pos.z - height;
 80029de:	4b2f      	ldr	r3, [pc, #188]	; (8002a9c <land_with_velocity+0x144>)
 80029e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80029e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80029e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ec:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    float velocity = data->velocity > 0 ? data->velocity : defaultLandingVelocity;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f8d3 300b 	ldr.w	r3, [r3, #11]
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a02:	dd03      	ble.n	8002a0c <land_with_velocity+0xb4>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8002a0a:	e001      	b.n	8002a10 <land_with_velocity+0xb8>
 8002a0c:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <land_with_velocity+0x148>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60fb      	str	r3, [r7, #12]
    float duration = fabsf(height - pos.z) / velocity;
 8002a12:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <land_with_velocity+0x144>)
 8002a14:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a18:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a20:	eef0 6ae7 	vabs.f32	s13, s15
 8002a24:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a2c:	edc7 7a02 	vstr	s15, [r7, #8]
    result = plan_land(&planner, pos, yaw, height, hover_yaw, duration, t);
 8002a30:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <land_with_velocity+0x140>)
 8002a32:	ed93 6a00 	vldr	s12, [r3]
 8002a36:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <land_with_velocity+0x144>)
 8002a38:	edd3 6a00 	vldr	s13, [r3]
 8002a3c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a40:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a44:	edd7 3a04 	vldr	s7, [r7, #16]
 8002a48:	ed97 3a02 	vldr	s6, [r7, #8]
 8002a4c:	edd7 2a06 	vldr	s5, [r7, #24]
 8002a50:	ed97 2a05 	vldr	s4, [r7, #20]
 8002a54:	eef0 1a46 	vmov.f32	s3, s12
 8002a58:	eeb0 0a66 	vmov.f32	s0, s13
 8002a5c:	eef0 0a47 	vmov.f32	s1, s14
 8002a60:	eeb0 1a67 	vmov.f32	s2, s15
 8002a64:	480f      	ldr	r0, [pc, #60]	; (8002aa4 <land_with_velocity+0x14c>)
 8002a66:	f00a fc00 	bl	800d26a <plan_land>
 8002a6a:	61f8      	str	r0, [r7, #28]
    xSemaphoreGive(lockTraj);
 8002a6c:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <land_with_velocity+0x13c>)
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	2300      	movs	r3, #0
 8002a72:	2200      	movs	r2, #0
 8002a74:	2100      	movs	r1, #0
 8002a76:	f01b ff83 	bl	801e980 <xQueueGenericSend>
  }
  return result;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3720      	adds	r7, #32
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	f3af 8000 	nop.w
 8002a88:	00000000 	.word	0x00000000
 8002a8c:	412e8480 	.word	0x412e8480
 8002a90:	20007a29 	.word	0x20007a29
 8002a94:	20007b0c 	.word	0x20007b0c
 8002a98:	20007a44 	.word	0x20007a44
 8002a9c:	20007a2c 	.word	0x20007a2c
 8002aa0:	20000034 	.word	0x20000034
 8002aa4:	20007980 	.word	0x20007980

08002aa8 <stop>:

int stop(const struct data_stop* data)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  int result = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]
  if (isInGroup(data->groupMask)) {
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fb51 	bl	8002160 <isInGroup>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d010      	beq.n	8002ae6 <stop+0x3e>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <stop+0x48>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002acc:	4618      	mov	r0, r3
 8002ace:	f01c f9d9 	bl	801ee84 <xQueueSemaphoreTake>
    plan_stop(&planner);
 8002ad2:	4808      	ldr	r0, [pc, #32]	; (8002af4 <stop+0x4c>)
 8002ad4:	f00a fac0 	bl	800d058 <plan_stop>
    xSemaphoreGive(lockTraj);
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <stop+0x48>)
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	2300      	movs	r3, #0
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	f01b ff4d 	bl	801e980 <xQueueGenericSend>
  }
  return result;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20007b0c 	.word	0x20007b0c
 8002af4:	20007980 	.word	0x20007980

08002af8 <go_to>:

int go_to(const struct data_go_to* data)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
    // pos, vel, yaw will be filled before using
    .acc = {0.0f, 0.0f, 0.0f},
    .omega = {0.0f, 0.0f, 0.0f},
  };

  if (isBlocked) {
 8002b00:	4b63      	ldr	r3, [pc, #396]	; (8002c90 <go_to+0x198>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <go_to+0x14>
    return EBUSY;
 8002b08:	2310      	movs	r3, #16
 8002b0a:	e0b7      	b.n	8002c7c <go_to+0x184>
  }

  int result = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
  if (isInGroup(data->groupMask)) {
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fb23 	bl	8002160 <isInGroup>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80ac 	beq.w	8002c7a <go_to+0x182>
    struct vec hover_pos = mkvec(data->x, data->y, data->z);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8002b32:	460b      	mov	r3, r1
 8002b34:	4619      	mov	r1, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8002b3c:	ee01 3a10 	vmov	s2, r3
 8002b40:	ee00 1a90 	vmov	s1, r1
 8002b44:	ee00 2a10 	vmov	s0, r2
 8002b48:	f7ff fa52 	bl	8001ff0 <mkvec>
 8002b4c:	eef0 6a40 	vmov.f32	s13, s0
 8002b50:	eeb0 7a60 	vmov.f32	s14, s1
 8002b54:	eef0 7a41 	vmov.f32	s15, s2
 8002b58:	edc7 6a03 	vstr	s13, [r7, #12]
 8002b5c:	ed87 7a04 	vstr	s14, [r7, #16]
 8002b60:	edc7 7a05 	vstr	s15, [r7, #20]
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002b64:	4b4b      	ldr	r3, [pc, #300]	; (8002c94 <go_to+0x19c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f01c f989 	bl	801ee84 <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 8002b72:	f011 fa13 	bl	8013f9c <usecTimestamp>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f7fd fd15 	bl	80005ac <__aeabi_ul2d>
 8002b82:	a341      	add	r3, pc, #260	; (adr r3, 8002c88 <go_to+0x190>)
 8002b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b88:	f7fd fe70 	bl	800086c <__aeabi_ddiv>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	f7fe f818 	bl	8000bc8 <__aeabi_d2f>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	61bb      	str	r3, [r7, #24]
    if (plan_is_disabled(&planner) || plan_is_stopped(&planner)) {
 8002b9c:	483e      	ldr	r0, [pc, #248]	; (8002c98 <go_to+0x1a0>)
 8002b9e:	f00a fa9d 	bl	800d0dc <plan_is_disabled>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d105      	bne.n	8002bb4 <go_to+0xbc>
 8002ba8:	483b      	ldr	r0, [pc, #236]	; (8002c98 <go_to+0x1a0>)
 8002baa:	f00a fa86 	bl	800d0ba <plan_is_stopped>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d035      	beq.n	8002c20 <go_to+0x128>
      ev.pos = pos;
 8002bb4:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <go_to+0x1a4>)
 8002bb6:	4a3a      	ldr	r2, [pc, #232]	; (8002ca0 <go_to+0x1a8>)
 8002bb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      ev.vel = vel;
 8002bbe:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <go_to+0x1a4>)
 8002bc0:	4a38      	ldr	r2, [pc, #224]	; (8002ca4 <go_to+0x1ac>)
 8002bc2:	330c      	adds	r3, #12
 8002bc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      ev.yaw = yaw;
 8002bca:	4b37      	ldr	r3, [pc, #220]	; (8002ca8 <go_to+0x1b0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a33      	ldr	r2, [pc, #204]	; (8002c9c <go_to+0x1a4>)
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
      result = plan_go_to_from(&planner, &ev, data->relative, hover_pos, data->yaw, data->duration, t);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	785b      	ldrb	r3, [r3, #1]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	bf14      	ite	ne
 8002bda:	2301      	movne	r3, #1
 8002bdc:	2300      	moveq	r3, #0
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f8d3 100e 	ldr.w	r1, [r3, #14]
 8002be6:	460b      	mov	r3, r1
 8002be8:	4619      	mov	r1, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8002bf0:	edd7 6a03 	vldr	s13, [r7, #12]
 8002bf4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bf8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bfc:	edd7 2a06 	vldr	s5, [r7, #24]
 8002c00:	ee02 3a10 	vmov	s4, r3
 8002c04:	ee01 1a90 	vmov	s3, r1
 8002c08:	eeb0 0a66 	vmov.f32	s0, s13
 8002c0c:	eef0 0a47 	vmov.f32	s1, s14
 8002c10:	eeb0 1a67 	vmov.f32	s2, s15
 8002c14:	4921      	ldr	r1, [pc, #132]	; (8002c9c <go_to+0x1a4>)
 8002c16:	4820      	ldr	r0, [pc, #128]	; (8002c98 <go_to+0x1a0>)
 8002c18:	f00a fb74 	bl	800d304 <plan_go_to_from>
 8002c1c:	61f8      	str	r0, [r7, #28]
 8002c1e:	e025      	b.n	8002c6c <go_to+0x174>
    }
    else {
      result = plan_go_to(&planner, data->relative, hover_pos, data->yaw, data->duration, t);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	785b      	ldrb	r3, [r3, #1]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf14      	ite	ne
 8002c28:	2301      	movne	r3, #1
 8002c2a:	2300      	moveq	r3, #0
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f8d3 100e 	ldr.w	r1, [r3, #14]
 8002c34:	460b      	mov	r3, r1
 8002c36:	4619      	mov	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8002c3e:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c42:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c46:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c4a:	edd7 2a06 	vldr	s5, [r7, #24]
 8002c4e:	ee02 3a10 	vmov	s4, r3
 8002c52:	ee01 1a90 	vmov	s3, r1
 8002c56:	eeb0 0a66 	vmov.f32	s0, s13
 8002c5a:	eef0 0a47 	vmov.f32	s1, s14
 8002c5e:	eeb0 1a67 	vmov.f32	s2, s15
 8002c62:	4611      	mov	r1, r2
 8002c64:	480c      	ldr	r0, [pc, #48]	; (8002c98 <go_to+0x1a0>)
 8002c66:	f00a fc29 	bl	800d4bc <plan_go_to>
 8002c6a:	61f8      	str	r0, [r7, #28]
    }
    xSemaphoreGive(lockTraj);
 8002c6c:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <go_to+0x19c>)
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	2300      	movs	r3, #0
 8002c72:	2200      	movs	r2, #0
 8002c74:	2100      	movs	r1, #0
 8002c76:	f01b fe83 	bl	801e980 <xQueueGenericSend>
  }
  return result;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3720      	adds	r7, #32
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	f3af 8000 	nop.w
 8002c88:	00000000 	.word	0x00000000
 8002c8c:	412e8480 	.word	0x412e8480
 8002c90:	20007a29 	.word	0x20007a29
 8002c94:	20007b0c 	.word	0x20007b0c
 8002c98:	20007980 	.word	0x20007980
 8002c9c:	20007f60 	.word	0x20007f60
 8002ca0:	20007a2c 	.word	0x20007a2c
 8002ca4:	20007a38 	.word	0x20007a38
 8002ca8:	20007a44 	.word	0x20007a44
 8002cac:	00000000 	.word	0x00000000

08002cb0 <start_trajectory>:

int start_trajectory(const struct data_start_trajectory* data)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002cb8:	4b75      	ldr	r3, [pc, #468]	; (8002e90 <start_trajectory+0x1e0>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <start_trajectory+0x14>
    return EBUSY;
 8002cc0:	2310      	movs	r3, #16
 8002cc2:	e0da      	b.n	8002e7a <start_trajectory+0x1ca>
  }

  int result = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
  if (isInGroup(data->groupMask)) {
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fa47 	bl	8002160 <isInGroup>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80cf 	beq.w	8002e78 <start_trajectory+0x1c8>
    if (data->trajectoryId < NUM_TRAJECTORY_DEFINITIONS) {
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	78db      	ldrb	r3, [r3, #3]
 8002cde:	2b09      	cmp	r3, #9
 8002ce0:	f200 80ca 	bhi.w	8002e78 <start_trajectory+0x1c8>
      struct trajectoryDescription* trajDesc = &trajectory_descriptions[data->trajectoryId];
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	78db      	ldrb	r3, [r3, #3]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	4a68      	ldr	r2, [pc, #416]	; (8002e94 <start_trajectory+0x1e4>)
 8002cf2:	4413      	add	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
      if (   trajDesc->trajectoryLocation == TRAJECTORY_LOCATION_MEM
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d15a      	bne.n	8002db4 <start_trajectory+0x104>
          && trajDesc->trajectoryType == CRTP_CHL_TRAJECTORY_TYPE_POLY4D) {
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	785b      	ldrb	r3, [r3, #1]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d156      	bne.n	8002db4 <start_trajectory+0x104>
        xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002d06:	4b64      	ldr	r3, [pc, #400]	; (8002e98 <start_trajectory+0x1e8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f01c f8b8 	bl	801ee84 <xQueueSemaphoreTake>
        float t = usecTimestamp() / 1e6;
 8002d14:	f011 f942 	bl	8013f9c <usecTimestamp>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f7fd fc44 	bl	80005ac <__aeabi_ul2d>
 8002d24:	a358      	add	r3, pc, #352	; (adr r3, 8002e88 <start_trajectory+0x1d8>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	f7fd fd9f 	bl	800086c <__aeabi_ddiv>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	f7fd ff47 	bl	8000bc8 <__aeabi_d2f>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	60fb      	str	r3, [r7, #12]
        trajectory.t_begin = t;
 8002d3e:	4a57      	ldr	r2, [pc, #348]	; (8002e9c <start_trajectory+0x1ec>)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6013      	str	r3, [r2, #0]
        trajectory.timescale = data->timescale;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4a54      	ldr	r2, [pc, #336]	; (8002e9c <start_trajectory+0x1ec>)
 8002d4a:	6053      	str	r3, [r2, #4]
        trajectory.n_pieces = trajDesc->trajectoryIdentifier.mem.n_pieces;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	799a      	ldrb	r2, [r3, #6]
 8002d50:	4b52      	ldr	r3, [pc, #328]	; (8002e9c <start_trajectory+0x1ec>)
 8002d52:	751a      	strb	r2, [r3, #20]
        trajectory.pieces = (struct poly4d*)&trajectories_memory[trajDesc->trajectoryIdentifier.mem.offset];
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002d5a:	4a51      	ldr	r2, [pc, #324]	; (8002ea0 <start_trajectory+0x1f0>)
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4a4f      	ldr	r2, [pc, #316]	; (8002e9c <start_trajectory+0x1ec>)
 8002d60:	6193      	str	r3, [r2, #24]
        result = plan_start_trajectory(&planner, &trajectory, data->reversed, data->relative, pos);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	789b      	ldrb	r3, [r3, #2]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	bf14      	ite	ne
 8002d6a:	2301      	movne	r3, #1
 8002d6c:	2300      	moveq	r3, #0
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	785b      	ldrb	r3, [r3, #1]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf14      	ite	ne
 8002d78:	2301      	movne	r3, #1
 8002d7a:	2300      	moveq	r3, #0
 8002d7c:	b2d9      	uxtb	r1, r3
 8002d7e:	4b49      	ldr	r3, [pc, #292]	; (8002ea4 <start_trajectory+0x1f4>)
 8002d80:	edd3 6a00 	vldr	s13, [r3]
 8002d84:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d88:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d8c:	eeb0 0a66 	vmov.f32	s0, s13
 8002d90:	eef0 0a47 	vmov.f32	s1, s14
 8002d94:	eeb0 1a67 	vmov.f32	s2, s15
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4940      	ldr	r1, [pc, #256]	; (8002e9c <start_trajectory+0x1ec>)
 8002d9c:	4842      	ldr	r0, [pc, #264]	; (8002ea8 <start_trajectory+0x1f8>)
 8002d9e:	f00a fbcb 	bl	800d538 <plan_start_trajectory>
 8002da2:	6178      	str	r0, [r7, #20]
        xSemaphoreGive(lockTraj);
 8002da4:	4b3c      	ldr	r3, [pc, #240]	; (8002e98 <start_trajectory+0x1e8>)
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	2300      	movs	r3, #0
 8002daa:	2200      	movs	r2, #0
 8002dac:	2100      	movs	r1, #0
 8002dae:	f01b fde7 	bl	801e980 <xQueueGenericSend>
          && trajDesc->trajectoryType == CRTP_CHL_TRAJECTORY_TYPE_POLY4D) {
 8002db2:	e061      	b.n	8002e78 <start_trajectory+0x1c8>
      } else if (trajDesc->trajectoryLocation == TRAJECTORY_LOCATION_MEM
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d15d      	bne.n	8002e78 <start_trajectory+0x1c8>
          && trajDesc->trajectoryType == CRTP_CHL_TRAJECTORY_TYPE_POLY4D_COMPRESSED) {
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	785b      	ldrb	r3, [r3, #1]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d159      	bne.n	8002e78 <start_trajectory+0x1c8>

        if (data->timescale != 1 || data->reversed) {
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002dcc:	ee07 3a10 	vmov	s14, r3
 8002dd0:	eeb4 7a67 	vcmp.f32	s14, s15
 8002dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd8:	d103      	bne.n	8002de2 <start_trajectory+0x132>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	789b      	ldrb	r3, [r3, #2]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <start_trajectory+0x138>
          result = ENOEXEC;
 8002de2:	2308      	movs	r3, #8
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	e047      	b.n	8002e78 <start_trajectory+0x1c8>
        } else {
          xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002de8:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <start_trajectory+0x1e8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002df0:	4618      	mov	r0, r3
 8002df2:	f01c f847 	bl	801ee84 <xQueueSemaphoreTake>
          float t = usecTimestamp() / 1e6;
 8002df6:	f011 f8d1 	bl	8013f9c <usecTimestamp>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4610      	mov	r0, r2
 8002e00:	4619      	mov	r1, r3
 8002e02:	f7fd fbd3 	bl	80005ac <__aeabi_ul2d>
 8002e06:	a320      	add	r3, pc, #128	; (adr r3, 8002e88 <start_trajectory+0x1d8>)
 8002e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0c:	f7fd fd2e 	bl	800086c <__aeabi_ddiv>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4610      	mov	r0, r2
 8002e16:	4619      	mov	r1, r3
 8002e18:	f7fd fed6 	bl	8000bc8 <__aeabi_d2f>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	60bb      	str	r3, [r7, #8]
          piecewise_compressed_load(
            &compressed_trajectory,
            &trajectories_memory[trajDesc->trajectoryIdentifier.mem.offset]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002e26:	4a1e      	ldr	r2, [pc, #120]	; (8002ea0 <start_trajectory+0x1f0>)
 8002e28:	4413      	add	r3, r2
          piecewise_compressed_load(
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	481f      	ldr	r0, [pc, #124]	; (8002eac <start_trajectory+0x1fc>)
 8002e2e:	f00c fd07 	bl	800f840 <piecewise_compressed_load>
          );
          compressed_trajectory.t_begin = t;
 8002e32:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <start_trajectory+0x1fc>)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	6013      	str	r3, [r2, #0]
          result = plan_start_compressed_trajectory(&planner, &compressed_trajectory, data->relative, pos);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	785b      	ldrb	r3, [r3, #1]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf14      	ite	ne
 8002e40:	2301      	movne	r3, #1
 8002e42:	2300      	moveq	r3, #0
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <start_trajectory+0x1f4>)
 8002e48:	edd3 6a00 	vldr	s13, [r3]
 8002e4c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e50:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e54:	eeb0 0a66 	vmov.f32	s0, s13
 8002e58:	eef0 0a47 	vmov.f32	s1, s14
 8002e5c:	eeb0 1a67 	vmov.f32	s2, s15
 8002e60:	4912      	ldr	r1, [pc, #72]	; (8002eac <start_trajectory+0x1fc>)
 8002e62:	4811      	ldr	r0, [pc, #68]	; (8002ea8 <start_trajectory+0x1f8>)
 8002e64:	f00a fc08 	bl	800d678 <plan_start_compressed_trajectory>
 8002e68:	6178      	str	r0, [r7, #20]
          xSemaphoreGive(lockTraj);
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <start_trajectory+0x1e8>)
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	2200      	movs	r2, #0
 8002e72:	2100      	movs	r1, #0
 8002e74:	f01b fd84 	bl	801e980 <xQueueGenericSend>
        }
      }
    }
  }
  return result;
 8002e78:	697b      	ldr	r3, [r7, #20]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	f3af 8000 	nop.w
 8002e88:	00000000 	.word	0x00000000
 8002e8c:	412e8480 	.word	0x412e8480
 8002e90:	20007a29 	.word	0x20007a29
 8002e94:	20007938 	.word	0x20007938
 8002e98:	20007b0c 	.word	0x20007b0c
 8002e9c:	20007a48 	.word	0x20007a48
 8002ea0:	20006938 	.word	0x20006938
 8002ea4:	20007a2c 	.word	0x20007a2c
 8002ea8:	20007980 	.word	0x20007980
 8002eac:	20007a64 	.word	0x20007a64

08002eb0 <define_trajectory>:

int define_trajectory(const struct data_define_trajectory* data)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  if (data->trajectoryId >= NUM_TRAJECTORY_DEFINITIONS) {
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b09      	cmp	r3, #9
 8002ebe:	d901      	bls.n	8002ec4 <define_trajectory+0x14>
    return ENOEXEC;
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	e010      	b.n	8002ee6 <define_trajectory+0x36>
  }
  trajectory_descriptions[data->trajectoryId] = data->description;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <define_trajectory+0x44>)
 8002ecc:	460b      	mov	r3, r1
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	1a5b      	subs	r3, r3, r1
 8002ed2:	441a      	add	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	6819      	ldr	r1, [r3, #0]
 8002eda:	6011      	str	r1, [r2, #0]
 8002edc:	8899      	ldrh	r1, [r3, #4]
 8002ede:	799b      	ldrb	r3, [r3, #6]
 8002ee0:	8091      	strh	r1, [r2, #4]
 8002ee2:	7193      	strb	r3, [r2, #6]
  return 0;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20007938 	.word	0x20007938

08002ef8 <handleMemRead>:

static bool handleMemRead(const uint32_t memAddr, const uint8_t readLen, uint8_t* buffer) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	460b      	mov	r3, r1
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	72fb      	strb	r3, [r7, #11]
  return crtpCommanderHighLevelReadTrajectory(memAddr, readLen, buffer);
 8002f06:	7afb      	ldrb	r3, [r7, #11]
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f84f 	bl	8002fb0 <crtpCommanderHighLevelReadTrajectory>
 8002f12:	4603      	mov	r3, r0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <handleMemWrite>:

static bool handleMemWrite(const uint32_t memAddr, const uint8_t writeLen, const uint8_t* buffer) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	460b      	mov	r3, r1
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	72fb      	strb	r3, [r7, #11]
  return crtpCommanderHighLevelWriteTrajectory(memAddr, writeLen, buffer);
 8002f2a:	7afb      	ldrb	r3, [r7, #11]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 f81d 	bl	8002f70 <crtpCommanderHighLevelWriteTrajectory>
 8002f36:	4603      	mov	r3, r0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <crtpCommanderHighLevelStop>:

  return handleCommand(COMMAND_LAND_2, (const uint8_t*)&data);
}

int crtpCommanderHighLevelStop()
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
  struct data_stop data =
 8002f46:	2300      	movs	r3, #0
 8002f48:	713b      	strb	r3, [r7, #4]
  {
    .groupMask = ALL_GROUPS,
  };

  return handleCommand(COMMAND_STOP, (const uint8_t*)&data);
 8002f4a:	1d3b      	adds	r3, r7, #4
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	2003      	movs	r0, #3
 8002f50:	f7ff f9da 	bl	8002308 <handleCommand>
 8002f54:	4603      	mov	r3, r0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <crtpCommanderHighLevelTrajectoryMemSize>:

  return handleCommand(COMMAND_DEFINE_TRAJECTORY, (const uint8_t*)&data);
}

uint32_t crtpCommanderHighLevelTrajectoryMemSize()
{
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0
  return sizeof(trajectories_memory);
 8002f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <crtpCommanderHighLevelWriteTrajectory>:

bool crtpCommanderHighLevelWriteTrajectory(const uint32_t offset, const uint32_t length, const uint8_t* data)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  bool result = false;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	75fb      	strb	r3, [r7, #23]

  if ((offset + length) <= sizeof(trajectories_memory)) {
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4413      	add	r3, r2
 8002f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8a:	d809      	bhi.n	8002fa0 <crtpCommanderHighLevelWriteTrajectory+0x30>
    memcpy(&(trajectories_memory[offset]), data, length);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a07      	ldr	r2, [pc, #28]	; (8002fac <crtpCommanderHighLevelWriteTrajectory+0x3c>)
 8002f90:	4413      	add	r3, r2
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f020 fdbf 	bl	8023b1a <memcpy>
    result = true;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20006938 	.word	0x20006938

08002fb0 <crtpCommanderHighLevelReadTrajectory>:

bool crtpCommanderHighLevelReadTrajectory(const uint32_t offset, const uint32_t length, uint8_t* destination)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  bool result = false;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	75fb      	strb	r3, [r7, #23]

  if (offset + length <= sizeof(trajectories_memory) && memcpy(destination, &(trajectories_memory[offset]), length)) {
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fca:	d80c      	bhi.n	8002fe6 <crtpCommanderHighLevelReadTrajectory+0x36>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4a08      	ldr	r2, [pc, #32]	; (8002ff0 <crtpCommanderHighLevelReadTrajectory+0x40>)
 8002fd0:	4413      	add	r3, r2
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f020 fd9f 	bl	8023b1a <memcpy>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <crtpCommanderHighLevelReadTrajectory+0x36>
    result = true;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20006938 	.word	0x20006938

08002ff4 <rotateYaw>:
 * Rotate Yaw so that the Crazyflie will change what is considered front.
 *
 * @param yawRad Amount of radians to rotate yaw.
 */
static void rotateYaw(setpoint_t *setpoint, float yawRad)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	ed87 0a00 	vstr	s0, [r7]
  float cosy = cosf(yawRad);
 8003000:	ed97 0a00 	vldr	s0, [r7]
 8003004:	f022 fc48 	bl	8025898 <cosf>
 8003008:	ed87 0a05 	vstr	s0, [r7, #20]
  float siny = sinf(yawRad);
 800300c:	ed97 0a00 	vldr	s0, [r7]
 8003010:	f022 fc8e 	bl	8025930 <sinf>
 8003014:	ed87 0a04 	vstr	s0, [r7, #16]
  float originalRoll = setpoint->attitude.roll;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	60fb      	str	r3, [r7, #12]
  float originalPitch = setpoint->attitude.pitch;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	60bb      	str	r3, [r7, #8]

  setpoint->attitude.roll = originalRoll * cosy - originalPitch * siny;
 8003024:	ed97 7a03 	vldr	s14, [r7, #12]
 8003028:	edd7 7a05 	vldr	s15, [r7, #20]
 800302c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003030:	edd7 6a02 	vldr	s13, [r7, #8]
 8003034:	edd7 7a04 	vldr	s15, [r7, #16]
 8003038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800303c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	edc3 7a02 	vstr	s15, [r3, #8]
  setpoint->attitude.pitch = originalPitch * cosy + originalRoll * siny;
 8003046:	ed97 7a02 	vldr	s14, [r7, #8]
 800304a:	edd7 7a05 	vldr	s15, [r7, #20]
 800304e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003052:	edd7 6a03 	vldr	s13, [r7, #12]
 8003056:	edd7 7a04 	vldr	s15, [r7, #16]
 800305a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800305e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8003068:	bf00      	nop
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <yawModeUpdate>:

/**
 * Update Yaw according to current setting
 */
static void yawModeUpdate(setpoint_t *setpoint)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  switch (yawMode)
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <yawModeUpdate+0x38>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <yawModeUpdate+0x16>
 8003080:	2b01      	cmp	r3, #1
 8003082:	d006      	beq.n	8003092 <yawModeUpdate+0x22>
      rotateYaw(setpoint, 45 * M_PI / 180);
      break;
    case XMODE: // Fall through
    default:
      // Default in x-mode. Do nothing
      break;
 8003084:	e00b      	b.n	800309e <yawModeUpdate+0x2e>
      ASSERT(false);
 8003086:	226c      	movs	r2, #108	; 0x6c
 8003088:	4908      	ldr	r1, [pc, #32]	; (80030ac <yawModeUpdate+0x3c>)
 800308a:	4809      	ldr	r0, [pc, #36]	; (80030b0 <yawModeUpdate+0x40>)
 800308c:	f00d fdc6 	bl	8010c1c <assertFail>
      break;
 8003090:	e005      	b.n	800309e <yawModeUpdate+0x2e>
      rotateYaw(setpoint, 45 * M_PI / 180);
 8003092:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80030b4 <yawModeUpdate+0x44>
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff ffac 	bl	8002ff4 <rotateYaw>
      break;
 800309c:	bf00      	nop
  }
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	2000003a 	.word	0x2000003a
 80030ac:	08029a60 	.word	0x08029a60
 80030b0:	08029a88 	.word	0x08029a88
 80030b4:	3f490fdb 	.word	0x3f490fdb

080030b8 <crtpCommanderRpytDecodeSetpoint>:

void crtpCommanderRpytDecodeSetpoint(setpoint_t *setpoint, CRTPPacket *pk)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  struct CommanderCrtpLegacyValues *values = (struct CommanderCrtpLegacyValues*)pk->data;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	3302      	adds	r3, #2
 80030c6:	60fb      	str	r3, [r7, #12]

  if (commanderGetActivePriority() == COMMANDER_PRIORITY_DISABLE) {
 80030c8:	f003 fa14 	bl	80064f4 <commanderGetActivePriority>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d102      	bne.n	80030d8 <crtpCommanderRpytDecodeSetpoint+0x20>
    thrustLocked = true;
 80030d2:	4bab      	ldr	r3, [pc, #684]	; (8003380 <crtpCommanderRpytDecodeSetpoint+0x2c8>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	701a      	strb	r2, [r3, #0]
  }
  if (values->thrust == 0) {
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	899b      	ldrh	r3, [r3, #12]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d102      	bne.n	80030e8 <crtpCommanderRpytDecodeSetpoint+0x30>
    thrustLocked = false;
 80030e2:	4ba7      	ldr	r3, [pc, #668]	; (8003380 <crtpCommanderRpytDecodeSetpoint+0x2c8>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
  }

  // Thrust
  uint16_t rawThrust = values->thrust;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	7b1a      	ldrb	r2, [r3, #12]
 80030ec:	7b5b      	ldrb	r3, [r3, #13]
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	4313      	orrs	r3, r2
 80030f2:	817b      	strh	r3, [r7, #10]

  if (thrustLocked || (rawThrust < MIN_THRUST)) {
 80030f4:	4ba2      	ldr	r3, [pc, #648]	; (8003380 <crtpCommanderRpytDecodeSetpoint+0x2c8>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d103      	bne.n	8003104 <crtpCommanderRpytDecodeSetpoint+0x4c>
 80030fc:	897b      	ldrh	r3, [r7, #10]
 80030fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003102:	d204      	bcs.n	800310e <crtpCommanderRpytDecodeSetpoint+0x56>
    setpoint->thrust = 0;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	635a      	str	r2, [r3, #52]	; 0x34
 800310c:	e00f      	b.n	800312e <crtpCommanderRpytDecodeSetpoint+0x76>
  } else {
    setpoint->thrust = fminf(rawThrust, MAX_THRUST);
 800310e:	897b      	ldrh	r3, [r7, #10]
 8003110:	ee07 3a90 	vmov	s15, r3
 8003114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003118:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8003384 <crtpCommanderRpytDecodeSetpoint+0x2cc>
 800311c:	eeb0 0a67 	vmov.f32	s0, s15
 8003120:	f022 fca7 	bl	8025a72 <fminf>
 8003124:	eef0 7a40 	vmov.f32	s15, s0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  }

  if (altHoldMode) {
 800312e:	4b96      	ldr	r3, [pc, #600]	; (8003388 <crtpCommanderRpytDecodeSetpoint+0x2d0>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d026      	beq.n	8003184 <crtpCommanderRpytDecodeSetpoint+0xcc>
    if (!modeSet) {             //Reset filter and PID values on first initiation of assist mode to prevent sudden reactions.
 8003136:	4b95      	ldr	r3, [pc, #596]	; (800338c <crtpCommanderRpytDecodeSetpoint+0x2d4>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	f083 0301 	eor.w	r3, r3, #1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d006      	beq.n	8003152 <crtpCommanderRpytDecodeSetpoint+0x9a>
      modeSet = true;
 8003144:	4b91      	ldr	r3, [pc, #580]	; (800338c <crtpCommanderRpytDecodeSetpoint+0x2d4>)
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
      positionControllerResetAllPID();
 800314a:	f00a fb13 	bl	800d774 <positionControllerResetAllPID>
      positionControllerResetAllfilters();
 800314e:	f00a fb33 	bl	800d7b8 <positionControllerResetAllfilters>
    }
    setpoint->thrust = 0;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	635a      	str	r2, [r3, #52]	; 0x34
    setpoint->mode.z = modeVelocity;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

    setpoint->velocity.z = ((float) rawThrust - 32767.f) / 32767.f;
 8003162:	897b      	ldrh	r3, [r7, #10]
 8003164:	ee07 3a90 	vmov	s15, r3
 8003168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8003390 <crtpCommanderRpytDecodeSetpoint+0x2d8>
 8003170:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003174:	eddf 6a86 	vldr	s13, [pc, #536]	; 8003390 <crtpCommanderRpytDecodeSetpoint+0x2d8>
 8003178:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
 8003182:	e006      	b.n	8003192 <crtpCommanderRpytDecodeSetpoint+0xda>
  } else {
    setpoint->mode.z = modeDisable;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    modeSet = false;
 800318c:	4b7f      	ldr	r3, [pc, #508]	; (800338c <crtpCommanderRpytDecodeSetpoint+0x2d4>)
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
  }

  // roll/pitch
  if (posHoldMode) {
 8003192:	4b80      	ldr	r3, [pc, #512]	; (8003394 <crtpCommanderRpytDecodeSetpoint+0x2dc>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d02e      	beq.n	80031f8 <crtpCommanderRpytDecodeSetpoint+0x140>
    setpoint->mode.x = modeVelocity;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    setpoint->mode.y = modeVelocity;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2202      	movs	r2, #2
 80031a6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    setpoint->mode.roll = modeDisable;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    setpoint->mode.pitch = modeDisable;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

    setpoint->velocity.x = values->pitch/30.0f;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    setpoint->velocity.y = values->roll/30.0f;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80031d8:	ee07 3a90 	vmov	s15, r3
 80031dc:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    setpoint->attitude.roll  = 0;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	609a      	str	r2, [r3, #8]
    setpoint->attitude.pitch = 0;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	e096      	b.n	8003326 <crtpCommanderRpytDecodeSetpoint+0x26e>
  } else if (posSetMode && values->thrust != 0) {
 80031f8:	4b67      	ldr	r3, [pc, #412]	; (8003398 <crtpCommanderRpytDecodeSetpoint+0x2e0>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d048      	beq.n	8003292 <crtpCommanderRpytDecodeSetpoint+0x1da>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	899b      	ldrh	r3, [r3, #12]
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d043      	beq.n	8003292 <crtpCommanderRpytDecodeSetpoint+0x1da>
    setpoint->mode.x = modeAbs;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    setpoint->mode.y = modeAbs;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    setpoint->mode.z = modeAbs;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    setpoint->mode.roll = modeDisable;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    setpoint->mode.pitch = modeDisable;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    setpoint->mode.yaw = modeAbs;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

    setpoint->position.x = -values->pitch;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eef1 7a67 	vneg.f32	s15, s15
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    setpoint->position.y = values->roll;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6413      	str	r3, [r2, #64]	; 0x40
    setpoint->position.z = values->thrust/1000.0f;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	899b      	ldrh	r3, [r3, #12]
 8003258:	b29b      	uxth	r3, r3
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003262:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800339c <crtpCommanderRpytDecodeSetpoint+0x2e4>
 8003266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

    setpoint->attitude.roll  = 0;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
    setpoint->attitude.pitch = 0;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	60da      	str	r2, [r3, #12]
    setpoint->attitude.yaw = values->yaw;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6113      	str	r3, [r2, #16]
    setpoint->thrust = 0;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	635a      	str	r2, [r3, #52]	; 0x34
 8003290:	e049      	b.n	8003326 <crtpCommanderRpytDecodeSetpoint+0x26e>
  } else {
    setpoint->mode.x = modeDisable;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    setpoint->mode.y = modeDisable;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    if (stabilizationModeRoll == RATE) {
 80032a2:	4b3f      	ldr	r3, [pc, #252]	; (80033a0 <crtpCommanderRpytDecodeSetpoint+0x2e8>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10c      	bne.n	80032c4 <crtpCommanderRpytDecodeSetpoint+0x20c>
      setpoint->mode.roll = modeVelocity;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2202      	movs	r2, #2
 80032ae:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      setpoint->attitudeRate.roll = values->roll;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6193      	str	r3, [r2, #24]
      setpoint->attitude.roll = 0;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]
 80032c2:	e00b      	b.n	80032dc <crtpCommanderRpytDecodeSetpoint+0x224>
    } else {
      setpoint->mode.roll = modeAbs;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      setpoint->attitudeRate.roll = 0;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]
      setpoint->attitude.roll = values->roll;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6093      	str	r3, [r2, #8]
    }

    if (stabilizationModePitch == RATE) {
 80032dc:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <crtpCommanderRpytDecodeSetpoint+0x2ec>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10c      	bne.n	80032fe <crtpCommanderRpytDecodeSetpoint+0x246>
      setpoint->mode.pitch = modeVelocity;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
      setpoint->attitudeRate.pitch = values->pitch;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	61d3      	str	r3, [r2, #28]
      setpoint->attitude.pitch = 0;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	60da      	str	r2, [r3, #12]
 80032fc:	e00b      	b.n	8003316 <crtpCommanderRpytDecodeSetpoint+0x25e>
    } else {
      setpoint->mode.pitch = modeAbs;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
      setpoint->attitudeRate.pitch = 0;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	61da      	str	r2, [r3, #28]
      setpoint->attitude.pitch = values->pitch;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	60d3      	str	r3, [r2, #12]
    }

    setpoint->velocity.x = 0;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	64da      	str	r2, [r3, #76]	; 0x4c
    setpoint->velocity.y = 0;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	651a      	str	r2, [r3, #80]	; 0x50
  }

  // Yaw
  if (!posSetMode) {
 8003326:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <crtpCommanderRpytDecodeSetpoint+0x2e0>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	f083 0301 	eor.w	r3, r3, #1
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d020      	beq.n	8003376 <crtpCommanderRpytDecodeSetpoint+0x2be>
    if (stabilizationModeYaw == RATE) {
 8003334:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <crtpCommanderRpytDecodeSetpoint+0x2f0>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d110      	bne.n	800335e <crtpCommanderRpytDecodeSetpoint+0x2a6>
      // legacy rate input is inverted
      setpoint->attitudeRate.yaw = -values->yaw;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	ee07 3a90 	vmov	s15, r3
 8003344:	eef1 7a67 	vneg.f32	s15, s15
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	edc3 7a08 	vstr	s15, [r3, #32]
      yawModeUpdate(setpoint);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff fe8e 	bl	8003070 <yawModeUpdate>

      setpoint->mode.yaw = modeVelocity;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
      setpoint->mode.yaw = modeAbs;
      setpoint->attitudeRate.yaw = 0;
      setpoint->attitude.yaw = values->yaw;
    }
  }
}
 800335c:	e00b      	b.n	8003376 <crtpCommanderRpytDecodeSetpoint+0x2be>
      setpoint->mode.yaw = modeAbs;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
      setpoint->attitudeRate.yaw = 0;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	621a      	str	r2, [r3, #32]
      setpoint->attitude.yaw = values->yaw;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6113      	str	r3, [r2, #16]
}
 8003376:	bf00      	nop
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	2000003b 	.word	0x2000003b
 8003384:	476a6000 	.word	0x476a6000
 8003388:	20007f95 	.word	0x20007f95
 800338c:	20007f98 	.word	0x20007f98
 8003390:	46fffe00 	.word	0x46fffe00
 8003394:	20007f96 	.word	0x20007f96
 8003398:	20007f97 	.word	0x20007f97
 800339c:	447a0000 	.word	0x447a0000
 80033a0:	20000038 	.word	0x20000038
 80033a4:	20000039 	.word	0x20000039
 80033a8:	20007f94 	.word	0x20007f94

080033ac <estimatorEnqueuePosition>:
  m.data.tdoa = *tdoa;
  estimatorEnqueue(&m);
}

static inline void estimatorEnqueuePosition(const positionMeasurement_t *position)
{
 80033ac:	b5b0      	push	{r4, r5, r7, lr}
 80033ae:	b08e      	sub	sp, #56	; 0x38
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  measurement_t m;
  m.type = MeasurementTypePosition;
 80033b4:	2301      	movs	r3, #1
 80033b6:	723b      	strb	r3, [r7, #8]
  m.data.position = *position;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f107 040c 	add.w	r4, r7, #12
 80033be:	461d      	mov	r5, r3
 80033c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033c4:	682b      	ldr	r3, [r5, #0]
 80033c6:	6023      	str	r3, [r4, #0]
  estimatorEnqueue(&m);
 80033c8:	f107 0308 	add.w	r3, r7, #8
 80033cc:	4618      	mov	r0, r3
 80033ce:	f003 f8af 	bl	8006530 <estimatorEnqueue>
}
 80033d2:	bf00      	nop
 80033d4:	3738      	adds	r7, #56	; 0x38
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bdb0      	pop	{r4, r5, r7, pc}

080033da <estimatorEnqueuePose>:

static inline void estimatorEnqueuePose(const poseMeasurement_t *pose)
{
 80033da:	b5b0      	push	{r4, r5, r7, lr}
 80033dc:	b08e      	sub	sp, #56	; 0x38
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  measurement_t m;
  m.type = MeasurementTypePose;
 80033e2:	2302      	movs	r3, #2
 80033e4:	723b      	strb	r3, [r7, #8]
  m.data.pose = *pose;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f107 040c 	add.w	r4, r7, #12
 80033ec:	461d      	mov	r5, r3
 80033ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033f6:	682b      	ldr	r3, [r5, #0]
 80033f8:	6023      	str	r3, [r4, #0]
  estimatorEnqueue(&m);
 80033fa:	f107 0308 	add.w	r3, r7, #8
 80033fe:	4618      	mov	r0, r3
 8003400:	f003 f896 	bl	8006530 <estimatorEnqueue>
}
 8003404:	bf00      	nop
 8003406:	3738      	adds	r7, #56	; 0x38
 8003408:	46bd      	mov	sp, r7
 800340a:	bdb0      	pop	{r4, r5, r7, pc}

0800340c <quatdecompress>:
{
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b089      	sub	sp, #36	; 0x24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
	unsigned const mask = (1 << 9) - 1;
 8003416:	f240 13ff 	movw	r3, #511	; 0x1ff
 800341a:	617b      	str	r3, [r7, #20]
	int const i_largest = comp >> 30;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	0f9b      	lsrs	r3, r3, #30
 8003420:	613b      	str	r3, [r7, #16]
	float sum_squares = 0;
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	61fb      	str	r3, [r7, #28]
	for (int i = 3; i >= 0; --i) {
 8003428:	2303      	movs	r3, #3
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	e04d      	b.n	80034ca <quatdecompress+0xbe>
		if (i != i_largest) {
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	429a      	cmp	r2, r3
 8003434:	d046      	beq.n	80034c4 <quatdecompress+0xb8>
			unsigned mag = comp & mask;
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	4013      	ands	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]
			unsigned negbit = (comp >> 9) & 0x1;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	0a5b      	lsrs	r3, r3, #9
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	60bb      	str	r3, [r7, #8]
			comp = comp >> 10;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	0a9b      	lsrs	r3, r3, #10
 800344c:	607b      	str	r3, [r7, #4]
			q[i] = ((float)M_SQRT1_2) * ((float)mag) / mask;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	ee07 3a90 	vmov	s15, r3
 8003454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003458:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80034fc <quatdecompress+0xf0>
 800345c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	ee07 3a90 	vmov	s15, r3
 8003466:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	4413      	add	r3, r2
 8003472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003476:	edc3 7a00 	vstr	s15, [r3]
			if (negbit == 1) {
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d10d      	bne.n	800349c <quatdecompress+0x90>
				q[i] = -q[i];
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	4413      	add	r3, r2
 8003488:	edd3 7a00 	vldr	s15, [r3]
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	4413      	add	r3, r2
 8003494:	eef1 7a67 	vneg.f32	s15, s15
 8003498:	edc3 7a00 	vstr	s15, [r3]
			sum_squares += q[i] * q[i];
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	4413      	add	r3, r2
 80034a4:	ed93 7a00 	vldr	s14, [r3]
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	4413      	add	r3, r2
 80034b0:	edd3 7a00 	vldr	s15, [r3]
 80034b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80034bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c0:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 3; i >= 0; --i) {
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	daae      	bge.n	800342e <quatdecompress+0x22>
	q[i_largest] = sqrtf(1.0f - sum_squares);
 80034d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80034d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	18d4      	adds	r4, r2, r3
 80034e4:	eeb0 0a67 	vmov.f32	s0, s15
 80034e8:	f022 f9b8 	bl	802585c <sqrtf>
 80034ec:	eef0 7a40 	vmov.f32	s15, s0
 80034f0:	edc4 7a00 	vstr	s15, [r4]
}
 80034f4:	bf00      	nop
 80034f6:	3724      	adds	r7, #36	; 0x24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd90      	pop	{r4, r7, pc}
 80034fc:	3f3504f3 	.word	0x3f3504f3

08003500 <locSrvInit>:

static bool isEmergencyStopRequested = false;
static uint32_t emergencyStopWatchdogNotificationTick = 0;

void locSrvInit()
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
  if (isInit) {
 8003506:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <locSrvInit+0x38>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d110      	bne.n	8003530 <locSrvInit+0x30>
    return;
  }

  //  uint64_t address = configblockGetRadioAddress();
  uint64_t address = RADIO_CHANNEL_ADDRESS;
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	e9c7 2300 	strd	r2, r3, [r7]
  my_id = address & 0xFF;
 800351a:	783a      	ldrb	r2, [r7, #0]
 800351c:	4b07      	ldr	r3, [pc, #28]	; (800353c <locSrvInit+0x3c>)
 800351e:	701a      	strb	r2, [r3, #0]

  crtpRegisterPortCB(CRTP_PORT_LOCALIZATION, locSrvCrtpCB);
 8003520:	4907      	ldr	r1, [pc, #28]	; (8003540 <locSrvInit+0x40>)
 8003522:	2006      	movs	r0, #6
 8003524:	f7fd ff7e 	bl	8001424 <crtpRegisterPortCB>
  isInit = true;
 8003528:	4b03      	ldr	r3, [pc, #12]	; (8003538 <locSrvInit+0x38>)
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
 800352e:	e000      	b.n	8003532 <locSrvInit+0x32>
    return;
 8003530:	bf00      	nop
}
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20007fd6 	.word	0x20007fd6
 800353c:	20007fd7 	.word	0x20007fd7
 8003540:	08003545 	.word	0x08003545

08003544 <locSrvCrtpCB>:

static void locSrvCrtpCB(CRTPPacket* pk)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  switch (pk->channel)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	785b      	ldrb	r3, [r3, #1]
 8003550:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d00e      	beq.n	8003578 <locSrvCrtpCB+0x34>
 800355a:	2b02      	cmp	r3, #2
 800355c:	dc10      	bgt.n	8003580 <locSrvCrtpCB+0x3c>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <locSrvCrtpCB+0x24>
 8003562:	2b01      	cmp	r3, #1
 8003564:	d004      	beq.n	8003570 <locSrvCrtpCB+0x2c>
      break;
    case EXT_POSITION_PACKED:
      extPositionPackedHandler(pk);
      break;
    default:
      break;
 8003566:	e00b      	b.n	8003580 <locSrvCrtpCB+0x3c>
      extPositionHandler(pk);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f827 	bl	80035bc <extPositionHandler>
      break;
 800356e:	e008      	b.n	8003582 <locSrvCrtpCB+0x3e>
      genericLocHandle(pk);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f9e1 	bl	8003938 <genericLocHandle>
      break;
 8003576:	e004      	b.n	8003582 <locSrvCrtpCB+0x3e>
      extPositionPackedHandler(pk);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 fa27 	bl	80039cc <extPositionPackedHandler>
      break;
 800357e:	e000      	b.n	8003582 <locSrvCrtpCB+0x3e>
      break;
 8003580:	bf00      	nop
  }
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <updateLogFromExtPos>:

static void updateLogFromExtPos()
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  ext_pose.x = ext_pos.x;
 8003590:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <updateLogFromExtPos+0x28>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a08      	ldr	r2, [pc, #32]	; (80035b8 <updateLogFromExtPos+0x2c>)
 8003596:	6013      	str	r3, [r2, #0]
  ext_pose.y = ext_pos.y;
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <updateLogFromExtPos+0x28>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4a06      	ldr	r2, [pc, #24]	; (80035b8 <updateLogFromExtPos+0x2c>)
 800359e:	6053      	str	r3, [r2, #4]
  ext_pose.z = ext_pos.z;
 80035a0:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <updateLogFromExtPos+0x28>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <updateLogFromExtPos+0x2c>)
 80035a6:	6093      	str	r3, [r2, #8]
}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	20007f9c 	.word	0x20007f9c
 80035b8:	20007fb0 	.word	0x20007fb0

080035bc <extPositionHandler>:

static void extPositionHandler(CRTPPacket* pk) {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  const struct CrtpExtPosition* data = (const struct CrtpExtPosition*)pk->data;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3302      	adds	r3, #2
 80035c8:	60fb      	str	r3, [r7, #12]

  ext_pos.x = data->x;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a10      	ldr	r2, [pc, #64]	; (8003610 <extPositionHandler+0x54>)
 80035d0:	6013      	str	r3, [r2, #0]
  ext_pos.y = data->y;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4a0e      	ldr	r2, [pc, #56]	; (8003610 <extPositionHandler+0x54>)
 80035d8:	6053      	str	r3, [r2, #4]
  ext_pos.z = data->z;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	4a0c      	ldr	r2, [pc, #48]	; (8003610 <extPositionHandler+0x54>)
 80035e0:	6093      	str	r3, [r2, #8]
  ext_pos.stdDev = extPosStdDev;
 80035e2:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <extPositionHandler+0x58>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <extPositionHandler+0x54>)
 80035e8:	60d3      	str	r3, [r2, #12]
  ext_pos.source = MeasurementSourceLocationService;
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <extPositionHandler+0x54>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	741a      	strb	r2, [r3, #16]
  updateLogFromExtPos();
 80035f0:	f7ff ffcc 	bl	800358c <updateLogFromExtPos>

  estimatorEnqueuePosition(&ext_pos);
 80035f4:	4806      	ldr	r0, [pc, #24]	; (8003610 <extPositionHandler+0x54>)
 80035f6:	f7ff fed9 	bl	80033ac <estimatorEnqueuePosition>
  tickOfLastPacket = xTaskGetTickCount();
 80035fa:	f01c fb31 	bl	801fc60 <xTaskGetTickCount>
 80035fe:	4603      	mov	r3, r0
 8003600:	b29a      	uxth	r2, r3
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <extPositionHandler+0x5c>)
 8003604:	801a      	strh	r2, [r3, #0]
}
 8003606:	bf00      	nop
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20007f9c 	.word	0x20007f9c
 8003614:	2000003c 	.word	0x2000003c
 8003618:	20007fd8 	.word	0x20007fd8

0800361c <extPoseHandler>:

static void extPoseHandler(const CRTPPacket* pk) {
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  const struct CrtpExtPose* data = (const struct CrtpExtPose*)&pk->data[1];
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3303      	adds	r3, #3
 8003628:	60fb      	str	r3, [r7, #12]

  ext_pose.x = data->x;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a17      	ldr	r2, [pc, #92]	; (800368c <extPoseHandler+0x70>)
 8003630:	6013      	str	r3, [r2, #0]
  ext_pose.y = data->y;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	4a15      	ldr	r2, [pc, #84]	; (800368c <extPoseHandler+0x70>)
 8003638:	6053      	str	r3, [r2, #4]
  ext_pose.z = data->z;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	4a13      	ldr	r2, [pc, #76]	; (800368c <extPoseHandler+0x70>)
 8003640:	6093      	str	r3, [r2, #8]
  ext_pose.quat.x = data->qx;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4a11      	ldr	r2, [pc, #68]	; (800368c <extPoseHandler+0x70>)
 8003648:	60d3      	str	r3, [r2, #12]
  ext_pose.quat.y = data->qy;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	4a0f      	ldr	r2, [pc, #60]	; (800368c <extPoseHandler+0x70>)
 8003650:	6113      	str	r3, [r2, #16]
  ext_pose.quat.z = data->qz;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	4a0d      	ldr	r2, [pc, #52]	; (800368c <extPoseHandler+0x70>)
 8003658:	6153      	str	r3, [r2, #20]
  ext_pose.quat.w = data->qw;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	4a0b      	ldr	r2, [pc, #44]	; (800368c <extPoseHandler+0x70>)
 8003660:	6193      	str	r3, [r2, #24]
  ext_pose.stdDevPos = extPosStdDev;
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <extPoseHandler+0x74>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a09      	ldr	r2, [pc, #36]	; (800368c <extPoseHandler+0x70>)
 8003668:	61d3      	str	r3, [r2, #28]
  ext_pose.stdDevQuat = extQuatStdDev;
 800366a:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <extPoseHandler+0x78>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a07      	ldr	r2, [pc, #28]	; (800368c <extPoseHandler+0x70>)
 8003670:	6213      	str	r3, [r2, #32]

  estimatorEnqueuePose(&ext_pose);
 8003672:	4806      	ldr	r0, [pc, #24]	; (800368c <extPoseHandler+0x70>)
 8003674:	f7ff feb1 	bl	80033da <estimatorEnqueuePose>
  tickOfLastPacket = xTaskGetTickCount();
 8003678:	f01c faf2 	bl	801fc60 <xTaskGetTickCount>
 800367c:	4603      	mov	r3, r0
 800367e:	b29a      	uxth	r2, r3
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <extPoseHandler+0x7c>)
 8003682:	801a      	strh	r2, [r3, #0]
}
 8003684:	bf00      	nop
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20007fb0 	.word	0x20007fb0
 8003690:	2000003c 	.word	0x2000003c
 8003694:	20000040 	.word	0x20000040
 8003698:	20007fd8 	.word	0x20007fd8

0800369c <extPosePackedHandler>:

static void extPosePackedHandler(const CRTPPacket* pk) {
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint8_t numItems = (pk->size - 1) / sizeof(extPosePackedItem);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	461a      	mov	r2, r3
 80036ac:	4b51      	ldr	r3, [pc, #324]	; (80037f4 <extPosePackedHandler+0x158>)
 80036ae:	fba3 2302 	umull	r2, r3, r3, r2
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	73bb      	strb	r3, [r7, #14]
  for (uint8_t i = 0; i < numItems; ++i) {
 80036b6:	2300      	movs	r3, #0
 80036b8:	73fb      	strb	r3, [r7, #15]
 80036ba:	e090      	b.n	80037de <extPosePackedHandler+0x142>
    const extPosePackedItem* item = (const extPosePackedItem*)&pk->data[1 + i * sizeof(extPosePackedItem)];
 80036bc:	7bfa      	ldrb	r2, [r7, #15]
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	4413      	add	r3, r2
 80036c8:	3301      	adds	r3, #1
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	3302      	adds	r3, #2
 80036d0:	60bb      	str	r3, [r7, #8]
    if (item->id == my_id) {
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	781a      	ldrb	r2, [r3, #0]
 80036d6:	4b48      	ldr	r3, [pc, #288]	; (80037f8 <extPosePackedHandler+0x15c>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d145      	bne.n	800376a <extPosePackedHandler+0xce>
      ext_pose.x = item->x / 1000.0f;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 80036e4:	b21b      	sxth	r3, r3
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036ee:	eddf 6a43 	vldr	s13, [pc, #268]	; 80037fc <extPosePackedHandler+0x160>
 80036f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036f6:	4b42      	ldr	r3, [pc, #264]	; (8003800 <extPosePackedHandler+0x164>)
 80036f8:	edc3 7a00 	vstr	s15, [r3]
      ext_pose.y = item->y / 1000.0f;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8003702:	b21b      	sxth	r3, r3
 8003704:	ee07 3a90 	vmov	s15, r3
 8003708:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800370c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80037fc <extPosePackedHandler+0x160>
 8003710:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003714:	4b3a      	ldr	r3, [pc, #232]	; (8003800 <extPosePackedHandler+0x164>)
 8003716:	edc3 7a01 	vstr	s15, [r3, #4]
      ext_pose.z = item->z / 1000.0f;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8003720:	b21b      	sxth	r3, r3
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800372a:	eddf 6a34 	vldr	s13, [pc, #208]	; 80037fc <extPosePackedHandler+0x160>
 800372e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003732:	4b33      	ldr	r3, [pc, #204]	; (8003800 <extPosePackedHandler+0x164>)
 8003734:	edc3 7a02 	vstr	s15, [r3, #8]
      quatdecompress(item->quat, (float *)&ext_pose.quat.q0);
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f8d3 3007 	ldr.w	r3, [r3, #7]
 800373e:	4931      	ldr	r1, [pc, #196]	; (8003804 <extPosePackedHandler+0x168>)
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fe63 	bl	800340c <quatdecompress>
      ext_pose.stdDevPos = extPosStdDev;
 8003746:	4b30      	ldr	r3, [pc, #192]	; (8003808 <extPosePackedHandler+0x16c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a2d      	ldr	r2, [pc, #180]	; (8003800 <extPosePackedHandler+0x164>)
 800374c:	61d3      	str	r3, [r2, #28]
      ext_pose.stdDevQuat = extQuatStdDev;
 800374e:	4b2f      	ldr	r3, [pc, #188]	; (800380c <extPosePackedHandler+0x170>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a2b      	ldr	r2, [pc, #172]	; (8003800 <extPosePackedHandler+0x164>)
 8003754:	6213      	str	r3, [r2, #32]
      estimatorEnqueuePose(&ext_pose);
 8003756:	482a      	ldr	r0, [pc, #168]	; (8003800 <extPosePackedHandler+0x164>)
 8003758:	f7ff fe3f 	bl	80033da <estimatorEnqueuePose>
      tickOfLastPacket = xTaskGetTickCount();
 800375c:	f01c fa80 	bl	801fc60 <xTaskGetTickCount>
 8003760:	4603      	mov	r3, r0
 8003762:	b29a      	uxth	r2, r3
 8003764:	4b2a      	ldr	r3, [pc, #168]	; (8003810 <extPosePackedHandler+0x174>)
 8003766:	801a      	strh	r2, [r3, #0]
 8003768:	e036      	b.n	80037d8 <extPosePackedHandler+0x13c>
    } else {
      ext_pos.x = item->x / 1000.0f;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8003770:	b21b      	sxth	r3, r3
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800377a:	eddf 6a20 	vldr	s13, [pc, #128]	; 80037fc <extPosePackedHandler+0x160>
 800377e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <extPosePackedHandler+0x178>)
 8003784:	edc3 7a00 	vstr	s15, [r3]
      ext_pos.y = item->y / 1000.0f;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800378e:	b21b      	sxth	r3, r3
 8003790:	ee07 3a90 	vmov	s15, r3
 8003794:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003798:	eddf 6a18 	vldr	s13, [pc, #96]	; 80037fc <extPosePackedHandler+0x160>
 800379c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037a0:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <extPosePackedHandler+0x178>)
 80037a2:	edc3 7a01 	vstr	s15, [r3, #4]
      ext_pos.z = item->z / 1000.0f;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 80037ac:	b21b      	sxth	r3, r3
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037b6:	eddf 6a11 	vldr	s13, [pc, #68]	; 80037fc <extPosePackedHandler+0x160>
 80037ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <extPosePackedHandler+0x178>)
 80037c0:	edc3 7a02 	vstr	s15, [r3, #8]
      ext_pos.stdDev = extPosStdDev;
 80037c4:	4b10      	ldr	r3, [pc, #64]	; (8003808 <extPosePackedHandler+0x16c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a12      	ldr	r2, [pc, #72]	; (8003814 <extPosePackedHandler+0x178>)
 80037ca:	60d3      	str	r3, [r2, #12]
      peerLocalizationTellPosition(item->id, &ext_pos);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	4910      	ldr	r1, [pc, #64]	; (8003814 <extPosePackedHandler+0x178>)
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fd fbce 	bl	8000f74 <peerLocalizationTellPosition>
  for (uint8_t i = 0; i < numItems; ++i) {
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	3301      	adds	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
 80037de:	7bfa      	ldrb	r2, [r7, #15]
 80037e0:	7bbb      	ldrb	r3, [r7, #14]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	f4ff af6a 	bcc.w	80036bc <extPosePackedHandler+0x20>
    }
  }
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	ba2e8ba3 	.word	0xba2e8ba3
 80037f8:	20007fd7 	.word	0x20007fd7
 80037fc:	447a0000 	.word	0x447a0000
 8003800:	20007fb0 	.word	0x20007fb0
 8003804:	20007fbc 	.word	0x20007fbc
 8003808:	2000003c 	.word	0x2000003c
 800380c:	20000040 	.word	0x20000040
 8003810:	20007fd8 	.word	0x20007fd8
 8003814:	20007f9c 	.word	0x20007f9c

08003818 <lpsShortLppPacketHandler>:

static void lpsShortLppPacketHandler(CRTPPacket* pk) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  bool success = false;
 8003820:	2300      	movs	r3, #0
 8003822:	73fb      	strb	r3, [r7, #15]
  if (pk->size >= 2) {
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d918      	bls.n	800385e <lpsShortLppPacketHandler+0x46>
#ifdef CONFIG_DECK_LOCO
//    bool success = lpsSendLppShort(pk->data[1], &pk->data[2], pk->size-2);
#else
    bool success = false;
#endif
    pk->port = CRTP_PORT_LOCALIZATION;
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	7853      	ldrb	r3, [r2, #1]
 8003830:	2106      	movs	r1, #6
 8003832:	f361 1307 	bfi	r3, r1, #4, #4
 8003836:	7053      	strb	r3, [r2, #1]
    pk->channel = GENERIC_TYPE;
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	7853      	ldrb	r3, [r2, #1]
 800383c:	2101      	movs	r1, #1
 800383e:	f361 0301 	bfi	r3, r1, #0, #2
 8003842:	7053      	strb	r3, [r2, #1]
    pk->size = 3;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2203      	movs	r2, #3
 8003848:	701a      	strb	r2, [r3, #0]
    pk->data[0] = LPS_SHORT_LPP_PACKET;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2202      	movs	r2, #2
 800384e:	709a      	strb	r2, [r3, #2]
    pk->data[2] = success?1:0;
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	461a      	mov	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	711a      	strb	r2, [r3, #4]
    // This is best effort, i.e. the blocking version is not needed
    crtpSendPacket(pk);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7fd fdf9 	bl	8001450 <crtpSendPacket>
  }
}
 800385e:	bf00      	nop
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <lhPersistDataWorker>:
    uint16_t calibrationDataBsField;
  } __attribute__((packed));
  uint32_t combinedField;
} __attribute__((packed)) LhPersistArgs_t;

static void lhPersistDataWorker(void* arg) {
 8003866:	b580      	push	{r7, lr}
 8003868:	b08e      	sub	sp, #56	; 0x38
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_DECK_LIGHTHOUSE
  LhPersistArgs_t* args = (LhPersistArgs_t*) &arg;
 800386e:	1d3b      	adds	r3, r7, #4
 8003870:	633b      	str	r3, [r7, #48]	; 0x30

  bool result = true;
 8003872:	2301      	movs	r3, #1
 8003874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  for (int baseStation = 0; baseStation < CONFIG_DECK_LIGHTHOUSE_MAX_N_BS; baseStation++) {
 8003878:	2300      	movs	r3, #0
 800387a:	637b      	str	r3, [r7, #52]	; 0x34
 800387c:	e01f      	b.n	80038be <lhPersistDataWorker+0x58>
    uint16_t mask = 1 << baseStation;
 800387e:	2201      	movs	r2, #1
 8003880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	85bb      	strh	r3, [r7, #44]	; 0x2c
    bool storeGeo = (args->geoDataBsField & mask) != 0;
 8003888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	b29a      	uxth	r2, r3
 800388e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003890:	4013      	ands	r3, r2
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf14      	ite	ne
 8003898:	2301      	movne	r3, #1
 800389a:	2300      	moveq	r3, #0
 800389c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    bool storeCalibration = (args->calibrationDataBsField & mask) != 0;
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	885b      	ldrh	r3, [r3, #2]
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80038a8:	4013      	ands	r3, r2
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  for (int baseStation = 0; baseStation < CONFIG_DECK_LIGHTHOUSE_MAX_N_BS; baseStation++) {
 80038b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ba:	3301      	adds	r3, #1
 80038bc:	637b      	str	r3, [r7, #52]	; 0x34
 80038be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	dddc      	ble.n	800387e <lhPersistDataWorker+0x18>

  }
#else
  bool result = false;
#endif
  CRTPPacket response = {
 80038c4:	f107 0308 	add.w	r3, r7, #8
 80038c8:	2220      	movs	r2, #32
 80038ca:	2100      	movs	r1, #0
 80038cc:	4618      	mov	r0, r3
 80038ce:	f020 f81f 	bl	8023910 <memset>
 80038d2:	2302      	movs	r3, #2
 80038d4:	723b      	strb	r3, [r7, #8]
 80038d6:	7a7b      	ldrb	r3, [r7, #9]
 80038d8:	2201      	movs	r2, #1
 80038da:	f362 0301 	bfi	r3, r2, #0, #2
 80038de:	727b      	strb	r3, [r7, #9]
 80038e0:	7a7b      	ldrb	r3, [r7, #9]
 80038e2:	2206      	movs	r2, #6
 80038e4:	f362 1307 	bfi	r3, r2, #4, #4
 80038e8:	727b      	strb	r3, [r7, #9]
 80038ea:	230b      	movs	r3, #11
 80038ec:	72bb      	strb	r3, [r7, #10]
 80038ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038f2:	72fb      	strb	r3, [r7, #11]
    .channel = GENERIC_TYPE,
    .size = 2,
    .data = {LH_PERSIST_DATA, result}
  };

  crtpSendPacketBlock(&response);
 80038f4:	f107 0308 	add.w	r3, r7, #8
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fd fdd3 	bl	80014a4 <crtpSendPacketBlock>
}
 80038fe:	bf00      	nop
 8003900:	3738      	adds	r7, #56	; 0x38
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <lhPersistDataHandler>:

static void lhPersistDataHandler(CRTPPacket* pk) {
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  if (pk->size >= (1 + sizeof(LhPersistArgs_t))) {
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b04      	cmp	r3, #4
 8003916:	d908      	bls.n	800392a <lhPersistDataHandler+0x22>
    LhPersistArgs_t* args = (LhPersistArgs_t*) &pk->data[1];
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3303      	adds	r3, #3
 800391c:	60fb      	str	r3, [r7, #12]
    workerSchedule(lhPersistDataWorker, (void*)args->combinedField);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4619      	mov	r1, r3
 8003924:	4803      	ldr	r0, [pc, #12]	; (8003934 <lhPersistDataHandler+0x2c>)
 8003926:	f010 fbd9 	bl	80140dc <workerSchedule>
  }
}
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	08003867 	.word	0x08003867

08003938 <genericLocHandle>:

static void genericLocHandle(CRTPPacket* pk)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  const uint8_t type = pk->data[0];
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	789b      	ldrb	r3, [r3, #2]
 8003944:	73fb      	strb	r3, [r7, #15]
  if (pk->size < 1) return;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d034      	beq.n	80039b8 <genericLocHandle+0x80>

  switch (type) {
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	3b02      	subs	r3, #2
 8003952:	2b09      	cmp	r3, #9
 8003954:	d832      	bhi.n	80039bc <genericLocHandle+0x84>
 8003956:	a201      	add	r2, pc, #4	; (adr r2, 800395c <genericLocHandle+0x24>)
 8003958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395c:	08003985 	.word	0x08003985
 8003960:	0800398d 	.word	0x0800398d
 8003964:	08003995 	.word	0x08003995
 8003968:	080039bd 	.word	0x080039bd
 800396c:	080039bd 	.word	0x080039bd
 8003970:	080039bd 	.word	0x080039bd
 8003974:	080039a1 	.word	0x080039a1
 8003978:	080039a9 	.word	0x080039a9
 800397c:	080039bd 	.word	0x080039bd
 8003980:	080039b1 	.word	0x080039b1
    case LPS_SHORT_LPP_PACKET:
      lpsShortLppPacketHandler(pk);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff ff47 	bl	8003818 <lpsShortLppPacketHandler>
      break;
 800398a:	e018      	b.n	80039be <genericLocHandle+0x86>
    case EMERGENCY_STOP:
      isEmergencyStopRequested = true;
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <genericLocHandle+0x8c>)
 800398e:	2201      	movs	r2, #1
 8003990:	701a      	strb	r2, [r3, #0]
      break;
 8003992:	e014      	b.n	80039be <genericLocHandle+0x86>
    case EMERGENCY_STOP_WATCHDOG:
      emergencyStopWatchdogNotificationTick = xTaskGetTickCount();
 8003994:	f01c f964 	bl	801fc60 <xTaskGetTickCount>
 8003998:	4603      	mov	r3, r0
 800399a:	4a0b      	ldr	r2, [pc, #44]	; (80039c8 <genericLocHandle+0x90>)
 800399c:	6013      	str	r3, [r2, #0]
      break;
 800399e:	e00e      	b.n	80039be <genericLocHandle+0x86>
    case EXT_POSE:
      extPoseHandler(pk);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff fe3b 	bl	800361c <extPoseHandler>
      break;
 80039a6:	e00a      	b.n	80039be <genericLocHandle+0x86>
    case EXT_POSE_PACKED:
      extPosePackedHandler(pk);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff fe77 	bl	800369c <extPosePackedHandler>
      break;
 80039ae:	e006      	b.n	80039be <genericLocHandle+0x86>
    case LH_PERSIST_DATA:
      lhPersistDataHandler(pk);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff ffa9 	bl	8003908 <lhPersistDataHandler>
      break;
 80039b6:	e002      	b.n	80039be <genericLocHandle+0x86>
  if (pk->size < 1) return;
 80039b8:	bf00      	nop
 80039ba:	e000      	b.n	80039be <genericLocHandle+0x86>
    default:
      // Nothing here
      break;
 80039bc:	bf00      	nop
  }
}
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20007fda 	.word	0x20007fda
 80039c8:	20007fdc 	.word	0x20007fdc

080039cc <extPositionPackedHandler>:

static void extPositionPackedHandler(CRTPPacket* pk)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint8_t numItems = pk->size / sizeof(extPositionPackedItem);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	781a      	ldrb	r2, [r3, #0]
 80039d8:	4b35      	ldr	r3, [pc, #212]	; (8003ab0 <extPositionPackedHandler+0xe4>)
 80039da:	fba3 1302 	umull	r1, r3, r3, r2
 80039de:	1ad2      	subs	r2, r2, r3
 80039e0:	0852      	lsrs	r2, r2, #1
 80039e2:	4413      	add	r3, r2
 80039e4:	089b      	lsrs	r3, r3, #2
 80039e6:	73bb      	strb	r3, [r7, #14]
  for (uint8_t i = 0; i < numItems; ++i) {
 80039e8:	2300      	movs	r3, #0
 80039ea:	73fb      	strb	r3, [r7, #15]
 80039ec:	e056      	b.n	8003a9c <extPositionPackedHandler+0xd0>
    const extPositionPackedItem* item = (const extPositionPackedItem*)&pk->data[i * sizeof(extPositionPackedItem)];
 80039ee:	7bfa      	ldrb	r2, [r7, #15]
 80039f0:	4613      	mov	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	4413      	add	r3, r2
 80039fa:	3302      	adds	r3, #2
 80039fc:	60bb      	str	r3, [r7, #8]
    ext_pos.x = item->x / 1000.0f;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8003a04:	b21b      	sxth	r3, r3
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a0e:	eddf 6a29 	vldr	s13, [pc, #164]	; 8003ab4 <extPositionPackedHandler+0xe8>
 8003a12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a16:	4b28      	ldr	r3, [pc, #160]	; (8003ab8 <extPositionPackedHandler+0xec>)
 8003a18:	edc3 7a00 	vstr	s15, [r3]
    ext_pos.y = item->y / 1000.0f;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8003a22:	b21b      	sxth	r3, r3
 8003a24:	ee07 3a90 	vmov	s15, r3
 8003a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a2c:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003ab4 <extPositionPackedHandler+0xe8>
 8003a30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a34:	4b20      	ldr	r3, [pc, #128]	; (8003ab8 <extPositionPackedHandler+0xec>)
 8003a36:	edc3 7a01 	vstr	s15, [r3, #4]
    ext_pos.z = item->z / 1000.0f;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8003a40:	b21b      	sxth	r3, r3
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a4a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003ab4 <extPositionPackedHandler+0xe8>
 8003a4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a52:	4b19      	ldr	r3, [pc, #100]	; (8003ab8 <extPositionPackedHandler+0xec>)
 8003a54:	edc3 7a02 	vstr	s15, [r3, #8]
    ext_pos.stdDev = extPosStdDev;
 8003a58:	4b18      	ldr	r3, [pc, #96]	; (8003abc <extPositionPackedHandler+0xf0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a16      	ldr	r2, [pc, #88]	; (8003ab8 <extPositionPackedHandler+0xec>)
 8003a5e:	60d3      	str	r3, [r2, #12]
    ext_pos.source = MeasurementSourceLocationService;
 8003a60:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <extPositionPackedHandler+0xec>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	741a      	strb	r2, [r3, #16]
    if (item->id == my_id) {
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	781a      	ldrb	r2, [r3, #0]
 8003a6a:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <extPositionPackedHandler+0xf4>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d10b      	bne.n	8003a8a <extPositionPackedHandler+0xbe>
      updateLogFromExtPos();
 8003a72:	f7ff fd8b 	bl	800358c <updateLogFromExtPos>
      estimatorEnqueuePosition(&ext_pos);
 8003a76:	4810      	ldr	r0, [pc, #64]	; (8003ab8 <extPositionPackedHandler+0xec>)
 8003a78:	f7ff fc98 	bl	80033ac <estimatorEnqueuePosition>
      tickOfLastPacket = xTaskGetTickCount();
 8003a7c:	f01c f8f0 	bl	801fc60 <xTaskGetTickCount>
 8003a80:	4603      	mov	r3, r0
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <extPositionPackedHandler+0xf8>)
 8003a86:	801a      	strh	r2, [r3, #0]
 8003a88:	e005      	b.n	8003a96 <extPositionPackedHandler+0xca>
    }
    else {
      peerLocalizationTellPosition(item->id, &ext_pos);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	490a      	ldr	r1, [pc, #40]	; (8003ab8 <extPositionPackedHandler+0xec>)
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fd fa6f 	bl	8000f74 <peerLocalizationTellPosition>
  for (uint8_t i = 0; i < numItems; ++i) {
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
 8003a9c:	7bfa      	ldrb	r2, [r7, #15]
 8003a9e:	7bbb      	ldrb	r3, [r7, #14]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d3a4      	bcc.n	80039ee <extPositionPackedHandler+0x22>
    }
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	24924925 	.word	0x24924925
 8003ab4:	447a0000 	.word	0x447a0000
 8003ab8:	20007f9c 	.word	0x20007f9c
 8003abc:	2000003c 	.word	0x2000003c
 8003ac0:	20007fd7 	.word	0x20007fd7
 8003ac4:	20007fd8 	.word	0x20007fd8

08003ac8 <crtpserviceInit>:
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpSrvTask, CRTP_SRV_TASK_STACKSIZE);

static void crtpSrvTask(void*);

void crtpserviceInit(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af04      	add	r7, sp, #16
  if (isInit)
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <crtpserviceInit+0x38>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d110      	bne.n	8003af8 <crtpserviceInit+0x30>
    return;

  //Start the task
  STATIC_MEM_TASK_CREATE(crtpSrvTask, crtpSrvTask, CRTP_SRV_TASK_NAME, NULL, CRTP_SRV_TASK_PRI);
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <crtpserviceInit+0x3c>)
 8003adc:	9302      	str	r3, [sp, #8]
 8003ade:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <crtpserviceInit+0x40>)
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	4908      	ldr	r1, [pc, #32]	; (8003b0c <crtpserviceInit+0x44>)
 8003aea:	4809      	ldr	r0, [pc, #36]	; (8003b10 <crtpserviceInit+0x48>)
 8003aec:	f01b fd42 	bl	801f574 <xTaskCreateStatic>

  isInit = true;
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <crtpserviceInit+0x38>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	e000      	b.n	8003afa <crtpserviceInit+0x32>
    return;
 8003af8:	bf00      	nop
}
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20007fe0 	.word	0x20007fe0
 8003b04:	20001c88 	.word	0x20001c88
 8003b08:	20001a88 	.word	0x20001a88
 8003b0c:	08029c08 	.word	0x08029c08
 8003b10:	08003b15 	.word	0x08003b15

08003b14 <crtpSrvTask>:
{
  return isInit;
}

static void crtpSrvTask(void* prm)
{
 8003b14:	b5b0      	push	{r4, r5, r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  static CRTPPacket p;

  crtpInitTaskQueue(CRTP_PORT_LINK);
 8003b1c:	200f      	movs	r0, #15
 8003b1e:	f7fd fb91 	bl	8001244 <crtpInitTaskQueue>

  while(1) {
    crtpReceivePacketBlock(CRTP_PORT_LINK, &p);
 8003b22:	491f      	ldr	r1, [pc, #124]	; (8003ba0 <crtpSrvTask+0x8c>)
 8003b24:	200f      	movs	r0, #15
 8003b26:	f7fd fbbd 	bl	80012a4 <crtpReceivePacketBlock>

    switch (p.channel)
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <crtpSrvTask+0x8c>)
 8003b2c:	785b      	ldrb	r3, [r3, #1]
 8003b2e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d02f      	beq.n	8003b98 <crtpSrvTask+0x84>
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	dc2f      	bgt.n	8003b9c <crtpSrvTask+0x88>
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <crtpSrvTask+0x32>
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d00d      	beq.n	8003b60 <crtpSrvTask+0x4c>
        break;
      case linkSink:
        /* Ignore packet */
        break;
      default:
        break;
 8003b44:	e02a      	b.n	8003b9c <crtpSrvTask+0x88>
        if (echoDelay > 0) {
 8003b46:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <crtpSrvTask+0x90>)
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d004      	beq.n	8003b58 <crtpSrvTask+0x44>
          vTaskDelay(M2T(echoDelay));
 8003b4e:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <crtpSrvTask+0x90>)
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f01b fec6 	bl	801f8e4 <vTaskDelay>
        crtpSendPacketBlock(&p);
 8003b58:	4811      	ldr	r0, [pc, #68]	; (8003ba0 <crtpSrvTask+0x8c>)
 8003b5a:	f7fd fca3 	bl	80014a4 <crtpSendPacketBlock>
        break;
 8003b5e:	e01e      	b.n	8003b9e <crtpSrvTask+0x8a>
        p.size = CRTP_MAX_DATA_SIZE;
 8003b60:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <crtpSrvTask+0x8c>)
 8003b62:	221e      	movs	r2, #30
 8003b64:	701a      	strb	r2, [r3, #0]
        bzero(p.data, CRTP_MAX_DATA_SIZE);
 8003b66:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <crtpSrvTask+0x94>)
 8003b68:	4618      	mov	r0, r3
 8003b6a:	231e      	movs	r3, #30
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2100      	movs	r1, #0
 8003b70:	f01f fece 	bl	8023910 <memset>
        strcpy((char*)p.data, "Bitcraze Crazyflie");
 8003b74:	4a0c      	ldr	r2, [pc, #48]	; (8003ba8 <crtpSrvTask+0x94>)
 8003b76:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <crtpSrvTask+0x98>)
 8003b78:	4615      	mov	r5, r2
 8003b7a:	461c      	mov	r4, r3
 8003b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b7e:	6028      	str	r0, [r5, #0]
 8003b80:	6069      	str	r1, [r5, #4]
 8003b82:	60aa      	str	r2, [r5, #8]
 8003b84:	60eb      	str	r3, [r5, #12]
 8003b86:	8823      	ldrh	r3, [r4, #0]
 8003b88:	78a2      	ldrb	r2, [r4, #2]
 8003b8a:	822b      	strh	r3, [r5, #16]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	74ab      	strb	r3, [r5, #18]
        crtpSendPacketBlock(&p);
 8003b90:	4803      	ldr	r0, [pc, #12]	; (8003ba0 <crtpSrvTask+0x8c>)
 8003b92:	f7fd fc87 	bl	80014a4 <crtpSendPacketBlock>
        break;
 8003b96:	e002      	b.n	8003b9e <crtpSrvTask+0x8a>
        break;
 8003b98:	bf00      	nop
 8003b9a:	e7c2      	b.n	8003b22 <crtpSrvTask+0xe>
        break;
 8003b9c:	bf00      	nop
    crtpReceivePacketBlock(CRTP_PORT_LINK, &p);
 8003b9e:	e7c0      	b.n	8003b22 <crtpSrvTask+0xe>
 8003ba0:	20007fe4 	.word	0x20007fe4
 8003ba4:	20007fe2 	.word	0x20007fe2
 8003ba8:	20007fe6 	.word	0x20007fe6
 8003bac:	08029c14 	.word	0x08029c14

08003bb0 <platformserviceInit>:
static void platformSrvTask(void*);
static void platformCommandProcess(CRTPPacket *p);
static void versionCommandProcess(CRTPPacket *p);

void platformserviceInit(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af04      	add	r7, sp, #16
  if (isInit)
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	; (8003bec <platformserviceInit+0x3c>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d112      	bne.n	8003be4 <platformserviceInit+0x34>
    return;

  appchannelInit();
 8003bbe:	f7fd fa3f 	bl	8001040 <appchannelInit>

  //Start the task
  STATIC_MEM_TASK_CREATE(platformSrvTask, platformSrvTask, PLATFORM_SRV_TASK_NAME, NULL, PLATFORM_SRV_TASK_PRI);
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <platformserviceInit+0x40>)
 8003bc8:	9302      	str	r3, [sp, #8]
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <platformserviceInit+0x44>)
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	4908      	ldr	r1, [pc, #32]	; (8003bf8 <platformserviceInit+0x48>)
 8003bd6:	4809      	ldr	r0, [pc, #36]	; (8003bfc <platformserviceInit+0x4c>)
 8003bd8:	f01b fccc 	bl	801f574 <xTaskCreateStatic>

  isInit = true;
 8003bdc:	4b03      	ldr	r3, [pc, #12]	; (8003bec <platformserviceInit+0x3c>)
 8003bde:	2201      	movs	r2, #1
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	e000      	b.n	8003be6 <platformserviceInit+0x36>
    return;
 8003be4:	bf00      	nop
}
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20008004 	.word	0x20008004
 8003bf0:	20001f40 	.word	0x20001f40
 8003bf4:	20001d40 	.word	0x20001d40
 8003bf8:	08029c4c 	.word	0x08029c4c
 8003bfc:	08003c01 	.word	0x08003c01

08003c00 <platformSrvTask>:
{
  return isInit;
}

static void platformSrvTask(void* prm)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  static CRTPPacket p;

  crtpInitTaskQueue(CRTP_PORT_PLATFORM);
 8003c08:	200d      	movs	r0, #13
 8003c0a:	f7fd fb1b 	bl	8001244 <crtpInitTaskQueue>

  while(1) {
    crtpReceivePacketBlock(CRTP_PORT_PLATFORM, &p);
 8003c0e:	4911      	ldr	r1, [pc, #68]	; (8003c54 <platformSrvTask+0x54>)
 8003c10:	200d      	movs	r0, #13
 8003c12:	f7fd fb47 	bl	80012a4 <crtpReceivePacketBlock>

    switch (p.channel)
 8003c16:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <platformSrvTask+0x54>)
 8003c18:	785b      	ldrb	r3, [r3, #1]
 8003c1a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d011      	beq.n	8003c48 <platformSrvTask+0x48>
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	dc13      	bgt.n	8003c50 <platformSrvTask+0x50>
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <platformSrvTask+0x32>
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d007      	beq.n	8003c40 <platformSrvTask+0x40>
        break;
      case appChannel:
        appchannelIncomingPacket(&p);
        break;
      default:
        break;
 8003c30:	e00e      	b.n	8003c50 <platformSrvTask+0x50>
        platformCommandProcess(&p);
 8003c32:	4808      	ldr	r0, [pc, #32]	; (8003c54 <platformSrvTask+0x54>)
 8003c34:	f000 f810 	bl	8003c58 <platformCommandProcess>
        crtpSendPacketBlock(&p);
 8003c38:	4806      	ldr	r0, [pc, #24]	; (8003c54 <platformSrvTask+0x54>)
 8003c3a:	f7fd fc33 	bl	80014a4 <crtpSendPacketBlock>
        break;
 8003c3e:	e008      	b.n	8003c52 <platformSrvTask+0x52>
        versionCommandProcess(&p);
 8003c40:	4804      	ldr	r0, [pc, #16]	; (8003c54 <platformSrvTask+0x54>)
 8003c42:	f000 f839 	bl	8003cb8 <versionCommandProcess>
        break;
 8003c46:	e004      	b.n	8003c52 <platformSrvTask+0x52>
        appchannelIncomingPacket(&p);
 8003c48:	4802      	ldr	r0, [pc, #8]	; (8003c54 <platformSrvTask+0x54>)
 8003c4a:	f7fd fa15 	bl	8001078 <appchannelIncomingPacket>
        break;
 8003c4e:	e000      	b.n	8003c52 <platformSrvTask+0x52>
        break;
 8003c50:	bf00      	nop
    crtpReceivePacketBlock(CRTP_PORT_PLATFORM, &p);
 8003c52:	e7dc      	b.n	8003c0e <platformSrvTask+0xe>
 8003c54:	20008008 	.word	0x20008008

08003c58 <platformCommandProcess>:
    }
  }
}

static void platformCommandProcess(CRTPPacket *p)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint8_t command = p->data[0];
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	789b      	ldrb	r3, [r3, #2]
 8003c64:	75fb      	strb	r3, [r7, #23]
  uint8_t *data = &p->data[1];
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3303      	adds	r3, #3
 8003c6a:	613b      	str	r3, [r7, #16]

  switch (command) {
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <platformCommandProcess+0x20>
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d00e      	beq.n	8003c94 <platformCommandProcess+0x3c>
//      data[1] = supervisorIsArmed();
      p->size = 2;
      break;
    }
    default:
      break;
 8003c76:	e018      	b.n	8003caa <platformCommandProcess+0x52>
      slp.type = SYSLINK_RADIO_CONTWAVE;
 8003c78:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <platformCommandProcess+0x5c>)
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	701a      	strb	r2, [r3, #0]
      slp.length = 1;
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <platformCommandProcess+0x5c>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	705a      	strb	r2, [r3, #1]
      slp.data[0] = data[0];
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <platformCommandProcess+0x5c>)
 8003c8a:	709a      	strb	r2, [r3, #2]
      syslinkSendPacket(&slp);
 8003c8c:	4809      	ldr	r0, [pc, #36]	; (8003cb4 <platformCommandProcess+0x5c>)
 8003c8e:	f000 faad 	bl	80041ec <syslinkSendPacket>
      break;
 8003c92:	e00a      	b.n	8003caa <platformCommandProcess+0x52>
      const bool doArm = data[0];
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf14      	ite	ne
 8003c9c:	2301      	movne	r3, #1
 8003c9e:	2300      	moveq	r3, #0
 8003ca0:	73fb      	strb	r3, [r7, #15]
      p->size = 2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	701a      	strb	r2, [r3, #0]
      break;
 8003ca8:	bf00      	nop
  }
}
 8003caa:	bf00      	nop
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20008028 	.word	0x20008028

08003cb8 <versionCommandProcess>:
  p->channel = appChannel;
  return crtpSendPacketBlock(p);
}

static void versionCommandProcess(CRTPPacket *p)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  switch (p->data[0]) {
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	789b      	ldrb	r3, [r3, #2]
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d032      	beq.n	8003d2e <versionCommandProcess+0x76>
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	dc4f      	bgt.n	8003d6c <versionCommandProcess+0xb4>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <versionCommandProcess+0x1e>
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d00b      	beq.n	8003cec <versionCommandProcess+0x34>
      p->size = (strlen(name)>CRTP_MAX_DATA_SIZE-1)?CRTP_MAX_DATA_SIZE:strlen(name)+1;
      crtpSendPacketBlock(p);
      }
      break;
    default:
      break;
 8003cd4:	e04a      	b.n	8003d6c <versionCommandProcess+0xb4>
      *(int*)&p->data[1] = CRTP_PROTOCOL_VERSION;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3303      	adds	r3, #3
 8003cda:	2207      	movs	r2, #7
 8003cdc:	601a      	str	r2, [r3, #0]
      p->size = 5;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2205      	movs	r2, #5
 8003ce2:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7fd fbdd 	bl	80014a4 <crtpSendPacketBlock>
      break;
 8003cea:	e040      	b.n	8003d6e <versionCommandProcess+0xb6>
      strncpy((char*)&p->data[1], V_STAG, CRTP_MAX_DATA_SIZE-1);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3303      	adds	r3, #3
 8003cf0:	4a21      	ldr	r2, [pc, #132]	; (8003d78 <versionCommandProcess+0xc0>)
 8003cf2:	6811      	ldr	r1, [r2, #0]
 8003cf4:	221d      	movs	r2, #29
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f01f fe2e 	bl	8023958 <strncpy>
      p->size = (strlen(V_STAG)>CRTP_MAX_DATA_SIZE-1)?CRTP_MAX_DATA_SIZE:strlen(V_STAG)+1;
 8003cfc:	4b1e      	ldr	r3, [pc, #120]	; (8003d78 <versionCommandProcess+0xc0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fc fac5 	bl	8000290 <strlen>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b1d      	cmp	r3, #29
 8003d0a:	d809      	bhi.n	8003d20 <versionCommandProcess+0x68>
 8003d0c:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <versionCommandProcess+0xc0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fc fabd 	bl	8000290 <strlen>
 8003d16:	4603      	mov	r3, r0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	e000      	b.n	8003d22 <versionCommandProcess+0x6a>
 8003d20:	221e      	movs	r2, #30
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fd fbbc 	bl	80014a4 <crtpSendPacketBlock>
      break;
 8003d2c:	e01f      	b.n	8003d6e <versionCommandProcess+0xb6>
      const char* name = platformConfigGetDeviceTypeName();
 8003d2e:	f00c f811 	bl	800fd54 <platformConfigGetDeviceTypeName>
 8003d32:	60f8      	str	r0, [r7, #12]
      strncpy((char*)&p->data[1], name, CRTP_MAX_DATA_SIZE-1);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3303      	adds	r3, #3
 8003d38:	221d      	movs	r2, #29
 8003d3a:	68f9      	ldr	r1, [r7, #12]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f01f fe0b 	bl	8023958 <strncpy>
      p->size = (strlen(name)>CRTP_MAX_DATA_SIZE-1)?CRTP_MAX_DATA_SIZE:strlen(name)+1;
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f7fc faa4 	bl	8000290 <strlen>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b1d      	cmp	r3, #29
 8003d4c:	d807      	bhi.n	8003d5e <versionCommandProcess+0xa6>
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f7fc fa9e 	bl	8000290 <strlen>
 8003d54:	4603      	mov	r3, r0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	e000      	b.n	8003d60 <versionCommandProcess+0xa8>
 8003d5e:	221e      	movs	r2, #30
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7fd fb9d 	bl	80014a4 <crtpSendPacketBlock>
      break;
 8003d6a:	e000      	b.n	8003d6e <versionCommandProcess+0xb6>
      break;
 8003d6c:	bf00      	nop
  }
}
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20000edc 	.word	0x20000edc

08003d7c <radiolinkIsConnected>:
static bool isConnected;
static uint32_t lastPacketTick;

static volatile P2PCallback p2p_callback;

static bool radiolinkIsConnected(void) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  return (xTaskGetTickCount() - lastPacketTick) < M2T(RADIO_ACTIVITY_TIMEOUT_MS);
 8003d80:	f01b ff6e 	bl	801fc60 <xTaskGetTickCount>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <radiolinkIsConnected+0x24>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d90:	4293      	cmp	r3, r2
 8003d92:	bf94      	ite	ls
 8003d94:	2301      	movls	r3, #1
 8003d96:	2300      	movhi	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20008078 	.word	0x20008078

08003da4 <radiolinkInit>:
  .receivePacket     = radiolinkReceiveCRTPPacket,
  .isConnected       = radiolinkIsConnected
};

void radiolinkInit(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af02      	add	r7, sp, #8
  if (isInit)
 8003daa:	4b1f      	ldr	r3, [pc, #124]	; (8003e28 <radiolinkInit+0x84>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d136      	bne.n	8003e20 <radiolinkInit+0x7c>
    return;

  txQueue = STATIC_MEM_QUEUE_CREATE(txQueue);
 8003db2:	2301      	movs	r3, #1
 8003db4:	4618      	mov	r0, r3
 8003db6:	2342      	movs	r3, #66	; 0x42
 8003db8:	4619      	mov	r1, r3
 8003dba:	2300      	movs	r3, #0
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	4b1b      	ldr	r3, [pc, #108]	; (8003e2c <radiolinkInit+0x88>)
 8003dc0:	4a1b      	ldr	r2, [pc, #108]	; (8003e30 <radiolinkInit+0x8c>)
 8003dc2:	f01a fcc7 	bl	801e754 <xQueueGenericCreateStatic>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4a1a      	ldr	r2, [pc, #104]	; (8003e34 <radiolinkInit+0x90>)
 8003dca:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(txQueue);
 8003dcc:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <radiolinkInit+0x90>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <radiolinkInit+0x94>)
 8003dd2:	491a      	ldr	r1, [pc, #104]	; (8003e3c <radiolinkInit+0x98>)
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f00f fe5f 	bl	8013a98 <qmRegisterQueue>
  crtpPacketDelivery = STATIC_MEM_QUEUE_CREATE(crtpPacketDelivery);
 8003dda:	2305      	movs	r3, #5
 8003ddc:	4618      	mov	r0, r3
 8003dde:	2320      	movs	r3, #32
 8003de0:	4619      	mov	r1, r3
 8003de2:	2300      	movs	r3, #0
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <radiolinkInit+0x9c>)
 8003de8:	4a16      	ldr	r2, [pc, #88]	; (8003e44 <radiolinkInit+0xa0>)
 8003dea:	f01a fcb3 	bl	801e754 <xQueueGenericCreateStatic>
 8003dee:	4603      	mov	r3, r0
 8003df0:	4a15      	ldr	r2, [pc, #84]	; (8003e48 <radiolinkInit+0xa4>)
 8003df2:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(crtpPacketDelivery);
 8003df4:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <radiolinkInit+0xa4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <radiolinkInit+0xa8>)
 8003dfa:	4910      	ldr	r1, [pc, #64]	; (8003e3c <radiolinkInit+0x98>)
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f00f fe4b 	bl	8013a98 <qmRegisterQueue>

  ASSERT(crtpPacketDelivery);
 8003e02:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <radiolinkInit+0xa4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d104      	bne.n	8003e14 <radiolinkInit+0x70>
 8003e0a:	225f      	movs	r2, #95	; 0x5f
 8003e0c:	490b      	ldr	r1, [pc, #44]	; (8003e3c <radiolinkInit+0x98>)
 8003e0e:	480f      	ldr	r0, [pc, #60]	; (8003e4c <radiolinkInit+0xa8>)
 8003e10:	f00c ff04 	bl	8010c1c <assertFail>

  syslinkInit();
 8003e14:	f000 f982 	bl	800411c <syslinkInit>

//  radiolinkSetChannel(configblockGetRadioChannel());
//  radiolinkSetDatarate(configblockGetRadioSpeed());
//  radiolinkSetAddress(configblockGetRadioAddress());

  isInit = true;
 8003e18:	4b03      	ldr	r3, [pc, #12]	; (8003e28 <radiolinkInit+0x84>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	e000      	b.n	8003e22 <radiolinkInit+0x7e>
    return;
 8003e20:	bf00      	nop
}
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20008074 	.word	0x20008074
 8003e2c:	2000203c 	.word	0x2000203c
 8003e30:	20001ff8 	.word	0x20001ff8
 8003e34:	2000806c 	.word	0x2000806c
 8003e38:	08029c5c 	.word	0x08029c5c
 8003e3c:	08029c64 	.word	0x08029c64
 8003e40:	2000212c 	.word	0x2000212c
 8003e44:	2000208c 	.word	0x2000208c
 8003e48:	20008070 	.word	0x20008070
 8003e4c:	08029c84 	.word	0x08029c84

08003e50 <radiolinkTest>:

bool radiolinkTest(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  return syslinkTest();
 8003e54:	f000 f9be 	bl	80041d4 <syslinkTest>
 8003e58:	4603      	mov	r3, r0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <radiolinkSyslinkDispatch>:
  syslinkSendPacket(&slp);
}


void radiolinkSyslinkDispatch(SyslinkPacket *slp)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b092      	sub	sp, #72	; 0x48
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  static SyslinkPacket txPacket;

  if (slp->type == SYSLINK_RADIO_RAW || slp->type == SYSLINK_RADIO_RAW_BROADCAST) {
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <radiolinkSyslinkDispatch+0x18>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b06      	cmp	r3, #6
 8003e76:	d104      	bne.n	8003e82 <radiolinkSyslinkDispatch+0x22>
    lastPacketTick = xTaskGetTickCount();
 8003e78:	f01b fef2 	bl	801fc60 <xTaskGetTickCount>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	4a41      	ldr	r2, [pc, #260]	; (8003f84 <radiolinkSyslinkDispatch+0x124>)
 8003e80:	6013      	str	r3, [r2, #0]
  }

  if (slp->type == SYSLINK_RADIO_RAW)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d129      	bne.n	8003ede <radiolinkSyslinkDispatch+0x7e>
  {
    slp->length--; // Decrease to get CRTP size.
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	705a      	strb	r2, [r3, #1]
    // Assert that we are not dropping any packets
    ASSERT(xQueueSend(crtpPacketDelivery, &slp->length, 0) == pdPASS);
 8003e96:	4b3c      	ldr	r3, [pc, #240]	; (8003f88 <radiolinkSyslinkDispatch+0x128>)
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	1c59      	adds	r1, r3, #1
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f01a fd6d 	bl	801e980 <xQueueGenericSend>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d004      	beq.n	8003eb6 <radiolinkSyslinkDispatch+0x56>
 8003eac:	22a4      	movs	r2, #164	; 0xa4
 8003eae:	4937      	ldr	r1, [pc, #220]	; (8003f8c <radiolinkSyslinkDispatch+0x12c>)
 8003eb0:	4837      	ldr	r0, [pc, #220]	; (8003f90 <radiolinkSyslinkDispatch+0x130>)
 8003eb2:	f00c feb3 	bl	8010c1c <assertFail>
    ledseqRun(&seq_linkUp);
 8003eb6:	4837      	ldr	r0, [pc, #220]	; (8003f94 <radiolinkSyslinkDispatch+0x134>)
 8003eb8:	f000 ff32 	bl	8004d20 <ledseqRun>
    // If a radio packet is received, one can be sent
    if (xQueueReceive(txQueue, &txPacket, 0) == pdTRUE)
 8003ebc:	4b36      	ldr	r3, [pc, #216]	; (8003f98 <radiolinkSyslinkDispatch+0x138>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	4936      	ldr	r1, [pc, #216]	; (8003f9c <radiolinkSyslinkDispatch+0x13c>)
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f01a fefd 	bl	801ecc4 <xQueueReceive>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d14f      	bne.n	8003f70 <radiolinkSyslinkDispatch+0x110>
    {
      ledseqRun(&seq_linkDown);
 8003ed0:	4833      	ldr	r0, [pc, #204]	; (8003fa0 <radiolinkSyslinkDispatch+0x140>)
 8003ed2:	f000 ff25 	bl	8004d20 <ledseqRun>
      syslinkSendPacket(&txPacket);
 8003ed6:	4831      	ldr	r0, [pc, #196]	; (8003f9c <radiolinkSyslinkDispatch+0x13c>)
 8003ed8:	f000 f988 	bl	80041ec <syslinkSendPacket>
 8003edc:	e048      	b.n	8003f70 <radiolinkSyslinkDispatch+0x110>
    }
  } else if (slp->type == SYSLINK_RADIO_RAW_BROADCAST)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b06      	cmp	r3, #6
 8003ee4:	d111      	bne.n	8003f0a <radiolinkSyslinkDispatch+0xaa>
  {
    slp->length--; // Decrease to get CRTP size.
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	785b      	ldrb	r3, [r3, #1]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	705a      	strb	r2, [r3, #1]
    // broadcasts are best effort, so no need to handle the case where the queue is full
    xQueueSend(crtpPacketDelivery, &slp->length, 0);
 8003ef2:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <radiolinkSyslinkDispatch+0x128>)
 8003ef4:	6818      	ldr	r0, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	1c59      	adds	r1, r3, #1
 8003efa:	2300      	movs	r3, #0
 8003efc:	2200      	movs	r2, #0
 8003efe:	f01a fd3f 	bl	801e980 <xQueueGenericSend>
    ledseqRun(&seq_linkUp);
 8003f02:	4824      	ldr	r0, [pc, #144]	; (8003f94 <radiolinkSyslinkDispatch+0x134>)
 8003f04:	f000 ff0c 	bl	8004d20 <ledseqRun>
 8003f08:	e032      	b.n	8003f70 <radiolinkSyslinkDispatch+0x110>
    // no ack for broadcasts
  } else if (slp->type == SYSLINK_RADIO_RSSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d105      	bne.n	8003f1e <radiolinkSyslinkDispatch+0xbe>
  {
    //Extract RSSI sample sent from radio
    memcpy(&rssi, slp->data, sizeof(uint8_t)); //rssi will not change on disconnect
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3302      	adds	r3, #2
 8003f16:	781a      	ldrb	r2, [r3, #0]
 8003f18:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <radiolinkSyslinkDispatch+0x144>)
 8003f1a:	701a      	strb	r2, [r3, #0]
 8003f1c:	e028      	b.n	8003f70 <radiolinkSyslinkDispatch+0x110>
  } else if (slp->type == SYSLINK_RADIO_P2P_BROADCAST)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b0a      	cmp	r3, #10
 8003f24:	d124      	bne.n	8003f70 <radiolinkSyslinkDispatch+0x110>
  {
    ledseqRun(&seq_linkUp);
 8003f26:	481b      	ldr	r0, [pc, #108]	; (8003f94 <radiolinkSyslinkDispatch+0x134>)
 8003f28:	f000 fefa 	bl	8004d20 <ledseqRun>
    P2PPacket p2pp;
    p2pp.port=slp->data[0];
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	789b      	ldrb	r3, [r3, #2]
 8003f30:	72bb      	strb	r3, [r7, #10]
    p2pp.rssi = slp->data[1];
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	78db      	ldrb	r3, [r3, #3]
 8003f36:	727b      	strb	r3, [r7, #9]

    const uint8_t p2pDataLength = slp->length - 2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	785b      	ldrb	r3, [r3, #1]
 8003f3c:	3b02      	subs	r3, #2
 8003f3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    memcpy(&p2pp.data[0], &slp->data[2], p2pDataLength);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	1d19      	adds	r1, r3, #4
 8003f46:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003f4a:	f107 0308 	add.w	r3, r7, #8
 8003f4e:	3303      	adds	r3, #3
 8003f50:	4618      	mov	r0, r3
 8003f52:	f01f fde2 	bl	8023b1a <memcpy>
    p2pp.size = p2pDataLength;
 8003f56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f5a:	723b      	strb	r3, [r7, #8]

    if (p2p_callback) {
 8003f5c:	4b12      	ldr	r3, [pc, #72]	; (8003fa8 <radiolinkSyslinkDispatch+0x148>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <radiolinkSyslinkDispatch+0x110>
        p2p_callback(&p2pp);
 8003f64:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <radiolinkSyslinkDispatch+0x148>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f107 0208 	add.w	r2, r7, #8
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4798      	blx	r3
    }
  }

  isConnected = radiolinkIsConnected();
 8003f70:	f7ff ff04 	bl	8003d7c <radiolinkIsConnected>
 8003f74:	4603      	mov	r3, r0
 8003f76:	461a      	mov	r2, r3
 8003f78:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <radiolinkSyslinkDispatch+0x14c>)
 8003f7a:	701a      	strb	r2, [r3, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	3748      	adds	r7, #72	; 0x48
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20008078 	.word	0x20008078
 8003f88:	20008070 	.word	0x20008070
 8003f8c:	08029c64 	.word	0x08029c64
 8003f90:	08029c98 	.word	0x08029c98
 8003f94:	20000198 	.word	0x20000198
 8003f98:	2000806c 	.word	0x2000806c
 8003f9c:	20008080 	.word	0x20008080
 8003fa0:	200001a8 	.word	0x200001a8
 8003fa4:	20008075 	.word	0x20008075
 8003fa8:	2000807c 	.word	0x2000807c
 8003fac:	20008076 	.word	0x20008076

08003fb0 <radiolinkReceiveCRTPPacket>:

static int radiolinkReceiveCRTPPacket(CRTPPacket *p)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  if (xQueueReceive(crtpPacketDelivery, p, M2T(100)) == pdTRUE)
 8003fb8:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <radiolinkReceiveCRTPPacket+0x2c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2264      	movs	r2, #100	; 0x64
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f01a fe7f 	bl	801ecc4 <xQueueReceive>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <radiolinkReceiveCRTPPacket+0x20>
  {
    return 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e001      	b.n	8003fd4 <radiolinkReceiveCRTPPacket+0x24>
  }

  return -1;
 8003fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	20008070 	.word	0x20008070

08003fe0 <radiolinkSendCRTPPacket>:
{
    p2p_callback = cb;
}

static int radiolinkSendCRTPPacket(CRTPPacket *p)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  static SyslinkPacket slp;

  ASSERT(p->size <= CRTP_MAX_DATA_SIZE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b1e      	cmp	r3, #30
 8003fee:	d904      	bls.n	8003ffa <radiolinkSendCRTPPacket+0x1a>
 8003ff0:	22dd      	movs	r2, #221	; 0xdd
 8003ff2:	4913      	ldr	r1, [pc, #76]	; (8004040 <radiolinkSendCRTPPacket+0x60>)
 8003ff4:	4813      	ldr	r0, [pc, #76]	; (8004044 <radiolinkSendCRTPPacket+0x64>)
 8003ff6:	f00c fe11 	bl	8010c1c <assertFail>

  slp.type = SYSLINK_RADIO_RAW;
 8003ffa:	4b13      	ldr	r3, [pc, #76]	; (8004048 <radiolinkSendCRTPPacket+0x68>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
  slp.length = p->size + 1;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	3301      	adds	r3, #1
 8004006:	b2da      	uxtb	r2, r3
 8004008:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <radiolinkSendCRTPPacket+0x68>)
 800400a:	705a      	strb	r2, [r3, #1]
  memcpy(slp.data, &p->header, p->size + 1);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	1c59      	adds	r1, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	3301      	adds	r3, #1
 8004016:	461a      	mov	r2, r3
 8004018:	480c      	ldr	r0, [pc, #48]	; (800404c <radiolinkSendCRTPPacket+0x6c>)
 800401a:	f01f fd7e 	bl	8023b1a <memcpy>

  if (xQueueSend(txQueue, &slp, M2T(100)) == pdTRUE)
 800401e:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <radiolinkSendCRTPPacket+0x70>)
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	2300      	movs	r3, #0
 8004024:	2264      	movs	r2, #100	; 0x64
 8004026:	4908      	ldr	r1, [pc, #32]	; (8004048 <radiolinkSendCRTPPacket+0x68>)
 8004028:	f01a fcaa 	bl	801e980 <xQueueGenericSend>
 800402c:	4603      	mov	r3, r0
 800402e:	2b01      	cmp	r3, #1
 8004030:	d101      	bne.n	8004036 <radiolinkSendCRTPPacket+0x56>
  {
    return true;
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <radiolinkSendCRTPPacket+0x58>
  }

  return false;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	08029c64 	.word	0x08029c64
 8004044:	08029cd4 	.word	0x08029cd4
 8004048:	200080c4 	.word	0x200080c4
 800404c:	200080c6 	.word	0x200080c6
 8004050:	2000806c 	.word	0x2000806c

08004054 <radiolinkGetLink>:
  return true;
}


struct crtpLinkOperations * radiolinkGetLink()
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return &radiolinkOp;
 8004058:	4b02      	ldr	r3, [pc, #8]	; (8004064 <radiolinkGetLink+0x10>)
}
 800405a:	4618      	mov	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	20000044 	.word	0x20000044

08004068 <radiolinkSetEnable>:

static int radiolinkSetEnable(bool enable)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	71fb      	strb	r3, [r7, #7]
  return 0;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <syslinkTask>:
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(syslinkTask, SYSLINK_TASK_STACKSIZE);

/* Syslink task, handles communication between nrf and stm and dispatch messages
 */
static void syslinkTask(void *param)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b094      	sub	sp, #80	; 0x50
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  SyslinkPacket slp;
  while(1)
  {
    uartslkGetPacketBlocking(&slp);
 8004088:	f107 030c 	add.w	r3, r7, #12
 800408c:	4618      	mov	r0, r3
 800408e:	f001 fe91 	bl	8005db4 <uartslkGetPacketBlocking>
    syslinkRouteIncommingPacket(&slp);
 8004092:	f107 030c 	add.w	r3, r7, #12
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f802 	bl	80040a0 <syslinkRouteIncommingPacket>
    uartslkGetPacketBlocking(&slp);
 800409c:	e7f4      	b.n	8004088 <syslinkTask+0x8>
	...

080040a0 <syslinkRouteIncommingPacket>:
  }
}

static void syslinkRouteIncommingPacket(SyslinkPacket *slp)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint8_t groupType;

  groupType = slp->type & SYSLINK_GROUP_MASK;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	f023 030f 	bic.w	r3, r3, #15
 80040b0:	73fb      	strb	r3, [r7, #15]

  switch (groupType)
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	2bf0      	cmp	r3, #240	; 0xf0
 80040b6:	d01e      	beq.n	80040f6 <syslinkRouteIncommingPacket+0x56>
 80040b8:	2bf0      	cmp	r3, #240	; 0xf0
 80040ba:	dc20      	bgt.n	80040fe <syslinkRouteIncommingPacket+0x5e>
 80040bc:	2b30      	cmp	r3, #48	; 0x30
 80040be:	d016      	beq.n	80040ee <syslinkRouteIncommingPacket+0x4e>
 80040c0:	2b30      	cmp	r3, #48	; 0x30
 80040c2:	dc1c      	bgt.n	80040fe <syslinkRouteIncommingPacket+0x5e>
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d00e      	beq.n	80040e6 <syslinkRouteIncommingPacket+0x46>
 80040c8:	2b20      	cmp	r3, #32
 80040ca:	dc18      	bgt.n	80040fe <syslinkRouteIncommingPacket+0x5e>
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <syslinkRouteIncommingPacket+0x36>
 80040d0:	2b10      	cmp	r3, #16
 80040d2:	d004      	beq.n	80040de <syslinkRouteIncommingPacket+0x3e>
 80040d4:	e013      	b.n	80040fe <syslinkRouteIncommingPacket+0x5e>
  {
    case SYSLINK_RADIO_GROUP:
      radiolinkSyslinkDispatch(slp);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff fec2 	bl	8003e60 <radiolinkSyslinkDispatch>
      break;
 80040dc:	e017      	b.n	800410e <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_PM_GROUP:
      pmSyslinkUpdate(slp);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f001 f92a 	bl	8005338 <pmSyslinkUpdate>
      break;
 80040e4:	e013      	b.n	800410e <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_OW_GROUP:
      owSyslinkReceive(slp);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f001 f81c 	bl	8005124 <owSyslinkReceive>
      break;
 80040ec:	e00f      	b.n	800410e <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_SYS_GROUP:
      systemSyslinkReceive(slp);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f001 fd84 	bl	8005bfc <systemSyslinkReceive>
      break;
 80040f4:	e00b      	b.n	800410e <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_DEBUG_GROUP:
      debugSyslinkReceive(slp);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f90c 	bl	8004314 <debugSyslinkReceive>
      break;
 80040fc:	e007      	b.n	800410e <syslinkRouteIncommingPacket+0x6e>
    default:
      DEBUG_PRINT("Unknown packet:%X.\n", slp->type);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	4904      	ldr	r1, [pc, #16]	; (8004118 <syslinkRouteIncommingPacket+0x78>)
 8004106:	2000      	movs	r0, #0
 8004108:	f00c fcc4 	bl	8010a94 <SEGGER_RTT_printf>
      break;
 800410c:	bf00      	nop
  }
}
 800410e:	bf00      	nop
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	08029d3c 	.word	0x08029d3c

0800411c <syslinkInit>:
/*
 * Public functions
 */

void syslinkInit()
{
 800411c:	b590      	push	{r4, r7, lr}
 800411e:	b085      	sub	sp, #20
 8004120:	af04      	add	r7, sp, #16
  if(isInit) {
 8004122:	4b23      	ldr	r3, [pc, #140]	; (80041b0 <syslinkInit+0x94>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d13d      	bne.n	80041a6 <syslinkInit+0x8a>
    return;
  }

  vSemaphoreCreateBinary(syslinkAccess);
 800412a:	2203      	movs	r2, #3
 800412c:	2100      	movs	r1, #0
 800412e:	2001      	movs	r0, #1
 8004130:	f01a fb7c 	bl	801e82c <xQueueGenericCreate>
 8004134:	4603      	mov	r3, r0
 8004136:	4a1f      	ldr	r2, [pc, #124]	; (80041b4 <syslinkInit+0x98>)
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	4b1e      	ldr	r3, [pc, #120]	; (80041b4 <syslinkInit+0x98>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d006      	beq.n	8004150 <syslinkInit+0x34>
 8004142:	4b1c      	ldr	r3, [pc, #112]	; (80041b4 <syslinkInit+0x98>)
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	2300      	movs	r3, #0
 8004148:	2200      	movs	r2, #0
 800414a:	2100      	movs	r1, #0
 800414c:	f01a fc18 	bl	801e980 <xQueueGenericSend>

  STATIC_MEM_TASK_CREATE(syslinkTask, syslinkTask, SYSLINK_TASK_NAME, NULL, SYSLINK_TASK_PRI);
 8004150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004154:	461a      	mov	r2, r3
 8004156:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <syslinkInit+0x9c>)
 8004158:	9302      	str	r3, [sp, #8]
 800415a:	4b18      	ldr	r3, [pc, #96]	; (80041bc <syslinkInit+0xa0>)
 800415c:	9301      	str	r3, [sp, #4]
 800415e:	2303      	movs	r3, #3
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	2300      	movs	r3, #0
 8004164:	4916      	ldr	r1, [pc, #88]	; (80041c0 <syslinkInit+0xa4>)
 8004166:	4817      	ldr	r0, [pc, #92]	; (80041c4 <syslinkInit+0xa8>)
 8004168:	f01b fa04 	bl	801f574 <xTaskCreateStatic>

  debugTimer = xTimerCreate( "syslinkTimer", M2T(1000), pdTRUE, NULL, debugHandler );
 800416c:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <syslinkInit+0xac>)
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	2300      	movs	r3, #0
 8004172:	2201      	movs	r2, #1
 8004174:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004178:	4814      	ldr	r0, [pc, #80]	; (80041cc <syslinkInit+0xb0>)
 800417a:	f01c fd41 	bl	8020c00 <xTimerCreate>
 800417e:	4603      	mov	r3, r0
 8004180:	4a13      	ldr	r2, [pc, #76]	; (80041d0 <syslinkInit+0xb4>)
 8004182:	6013      	str	r3, [r2, #0]
  xTimerStart(debugTimer, M2T(1000));
 8004184:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <syslinkInit+0xb4>)
 8004186:	681c      	ldr	r4, [r3, #0]
 8004188:	f01b fd6a 	bl	801fc60 <xTaskGetTickCount>
 800418c:	4602      	mov	r2, r0
 800418e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	2300      	movs	r3, #0
 8004196:	2101      	movs	r1, #1
 8004198:	4620      	mov	r0, r4
 800419a:	f01c fdc7 	bl	8020d2c <xTimerGenericCommand>

  isInit = true;
 800419e:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <syslinkInit+0x94>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
 80041a4:	e000      	b.n	80041a8 <syslinkInit+0x8c>
    return;
 80041a6:	bf00      	nop
}
 80041a8:	3704      	adds	r7, #4
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd90      	pop	{r4, r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20008106 	.word	0x20008106
 80041b4:	20008158 	.word	0x20008158
 80041b8:	2000257c 	.word	0x2000257c
 80041bc:	2000217c 	.word	0x2000217c
 80041c0:	08029d50 	.word	0x08029d50
 80041c4:	08004081 	.word	0x08004081
 80041c8:	080042cd 	.word	0x080042cd
 80041cc:	08029d58 	.word	0x08029d58
 80041d0:	20008150 	.word	0x20008150

080041d4 <syslinkTest>:

bool syslinkTest()
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  return isInit;
 80041d8:	4b03      	ldr	r3, [pc, #12]	; (80041e8 <syslinkTest+0x14>)
 80041da:	781b      	ldrb	r3, [r3, #0]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	20008106 	.word	0x20008106

080041ec <syslinkSendPacket>:
  return isInit;
}


int syslinkSendPacket(SyslinkPacket *slp)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  int i = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
  int dataSize;
  uint8_t cksum[2] = {0};
 80041f8:	2300      	movs	r3, #0
 80041fa:	81bb      	strh	r3, [r7, #12]

  xSemaphoreTake(syslinkAccess, portMAX_DELAY);
 80041fc:	4b2e      	ldr	r3, [pc, #184]	; (80042b8 <syslinkSendPacket+0xcc>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004204:	4618      	mov	r0, r3
 8004206:	f01a fe3d 	bl	801ee84 <xQueueSemaphoreTake>

  ASSERT(slp->length <= SYSLINK_MTU);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	785b      	ldrb	r3, [r3, #1]
 800420e:	2b40      	cmp	r3, #64	; 0x40
 8004210:	d904      	bls.n	800421c <syslinkSendPacket+0x30>
 8004212:	2291      	movs	r2, #145	; 0x91
 8004214:	4929      	ldr	r1, [pc, #164]	; (80042bc <syslinkSendPacket+0xd0>)
 8004216:	482a      	ldr	r0, [pc, #168]	; (80042c0 <syslinkSendPacket+0xd4>)
 8004218:	f00c fd00 	bl	8010c1c <assertFail>

  sendBuffer[0] = SYSLINK_START_BYTE1;
 800421c:	4b29      	ldr	r3, [pc, #164]	; (80042c4 <syslinkSendPacket+0xd8>)
 800421e:	22bc      	movs	r2, #188	; 0xbc
 8004220:	701a      	strb	r2, [r3, #0]
  sendBuffer[1] = SYSLINK_START_BYTE2;
 8004222:	4b28      	ldr	r3, [pc, #160]	; (80042c4 <syslinkSendPacket+0xd8>)
 8004224:	22cf      	movs	r2, #207	; 0xcf
 8004226:	705a      	strb	r2, [r3, #1]
  sendBuffer[2] = slp->type;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	781a      	ldrb	r2, [r3, #0]
 800422c:	4b25      	ldr	r3, [pc, #148]	; (80042c4 <syslinkSendPacket+0xd8>)
 800422e:	709a      	strb	r2, [r3, #2]
  sendBuffer[3] = slp->length;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	785a      	ldrb	r2, [r3, #1]
 8004234:	4b23      	ldr	r3, [pc, #140]	; (80042c4 <syslinkSendPacket+0xd8>)
 8004236:	70da      	strb	r2, [r3, #3]

  memcpy(&sendBuffer[4], slp->data, slp->length);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	1c99      	adds	r1, r3, #2
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	785b      	ldrb	r3, [r3, #1]
 8004240:	461a      	mov	r2, r3
 8004242:	4821      	ldr	r0, [pc, #132]	; (80042c8 <syslinkSendPacket+0xdc>)
 8004244:	f01f fc69 	bl	8023b1a <memcpy>
  dataSize = slp->length + 6;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	785b      	ldrb	r3, [r3, #1]
 800424c:	3306      	adds	r3, #6
 800424e:	613b      	str	r3, [r7, #16]
  // Calculate checksum delux
  for (i = 2; i < dataSize - 2; i++)
 8004250:	2302      	movs	r3, #2
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	e00f      	b.n	8004276 <syslinkSendPacket+0x8a>
  {
    cksum[0] += sendBuffer[i];
 8004256:	7b3a      	ldrb	r2, [r7, #12]
 8004258:	491a      	ldr	r1, [pc, #104]	; (80042c4 <syslinkSendPacket+0xd8>)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	440b      	add	r3, r1
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	4413      	add	r3, r2
 8004262:	b2db      	uxtb	r3, r3
 8004264:	733b      	strb	r3, [r7, #12]
    cksum[1] += cksum[0];
 8004266:	7b7a      	ldrb	r2, [r7, #13]
 8004268:	7b3b      	ldrb	r3, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	b2db      	uxtb	r3, r3
 800426e:	737b      	strb	r3, [r7, #13]
  for (i = 2; i < dataSize - 2; i++)
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	3301      	adds	r3, #1
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	3b02      	subs	r3, #2
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	429a      	cmp	r2, r3
 800427e:	dbea      	blt.n	8004256 <syslinkSendPacket+0x6a>
  }
  sendBuffer[dataSize-2] = cksum[0];
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	3b02      	subs	r3, #2
 8004284:	7b39      	ldrb	r1, [r7, #12]
 8004286:	4a0f      	ldr	r2, [pc, #60]	; (80042c4 <syslinkSendPacket+0xd8>)
 8004288:	54d1      	strb	r1, [r2, r3]
  sendBuffer[dataSize-1] = cksum[1];
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	3b01      	subs	r3, #1
 800428e:	7b79      	ldrb	r1, [r7, #13]
 8004290:	4a0c      	ldr	r2, [pc, #48]	; (80042c4 <syslinkSendPacket+0xd8>)
 8004292:	54d1      	strb	r1, [r2, r3]

  uartslkSendDataDmaBlocking(dataSize, sendBuffer);
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	490b      	ldr	r1, [pc, #44]	; (80042c4 <syslinkSendPacket+0xd8>)
 8004298:	4618      	mov	r0, r3
 800429a:	f001 fd9d 	bl	8005dd8 <uartslkSendDataDmaBlocking>

  xSemaphoreGive(syslinkAccess);
 800429e:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <syslinkSendPacket+0xcc>)
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	2300      	movs	r3, #0
 80042a4:	2200      	movs	r2, #0
 80042a6:	2100      	movs	r1, #0
 80042a8:	f01a fb6a 	bl	801e980 <xQueueGenericSend>

  return 0;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20008158 	.word	0x20008158
 80042bc:	08029d68 	.word	0x08029d68
 80042c0:	08029d84 	.word	0x08029d84
 80042c4:	20008108 	.word	0x20008108
 80042c8:	2000810c 	.word	0x2000810c

080042cc <debugHandler>:

static void debugHandler(xTimerHandle timer) {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  static SyslinkPacket txPacket;

  if (triggerDebugProbe) {
 80042d4:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <debugHandler+0x3c>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d011      	beq.n	8004300 <debugHandler+0x34>
    triggerDebugProbe = 0;
 80042dc:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <debugHandler+0x3c>)
 80042de:	2200      	movs	r2, #0
 80042e0:	701a      	strb	r2, [r3, #0]

    uartSyslinkDumpDebugProbe();
 80042e2:	f001 fdd7 	bl	8005e94 <uartSyslinkDumpDebugProbe>
    DEBUG_PRINT("Syslink NRF debug probe initialized\n");
 80042e6:	4909      	ldr	r1, [pc, #36]	; (800430c <debugHandler+0x40>)
 80042e8:	2000      	movs	r0, #0
 80042ea:	f00c fbd3 	bl	8010a94 <SEGGER_RTT_printf>

    txPacket.type = SYSLINK_DEBUG_PROBE;
 80042ee:	4b08      	ldr	r3, [pc, #32]	; (8004310 <debugHandler+0x44>)
 80042f0:	22f0      	movs	r2, #240	; 0xf0
 80042f2:	701a      	strb	r2, [r3, #0]
    txPacket.length = 0;
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <debugHandler+0x44>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	705a      	strb	r2, [r3, #1]
    syslinkSendPacket(&txPacket);
 80042fa:	4805      	ldr	r0, [pc, #20]	; (8004310 <debugHandler+0x44>)
 80042fc:	f7ff ff76 	bl	80041ec <syslinkSendPacket>
  }
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	20008154 	.word	0x20008154
 800430c:	08029da0 	.word	0x08029da0
 8004310:	2000815c 	.word	0x2000815c

08004314 <debugSyslinkReceive>:

static void debugSyslinkReceive(SyslinkPacket *slp) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  if (slp->type == SYSLINK_DEBUG_PROBE) {
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2bf0      	cmp	r3, #240	; 0xf0
 8004322:	d137      	bne.n	8004394 <debugSyslinkReceive+0x80>
    DEBUG_PRINT("NRF Address received: %d\n", slp->data[0]);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	789b      	ldrb	r3, [r3, #2]
 8004328:	461a      	mov	r2, r3
 800432a:	491c      	ldr	r1, [pc, #112]	; (800439c <debugSyslinkReceive+0x88>)
 800432c:	2000      	movs	r0, #0
 800432e:	f00c fbb1 	bl	8010a94 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF Chan received: %d\n", slp->data[1]);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	78db      	ldrb	r3, [r3, #3]
 8004336:	461a      	mov	r2, r3
 8004338:	4919      	ldr	r1, [pc, #100]	; (80043a0 <debugSyslinkReceive+0x8c>)
 800433a:	2000      	movs	r0, #0
 800433c:	f00c fbaa 	bl	8010a94 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF Rate received: %d\n", slp->data[2]);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	791b      	ldrb	r3, [r3, #4]
 8004344:	461a      	mov	r2, r3
 8004346:	4917      	ldr	r1, [pc, #92]	; (80043a4 <debugSyslinkReceive+0x90>)
 8004348:	2000      	movs	r0, #0
 800434a:	f00c fba3 	bl	8010a94 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF Dropped: %d\n", slp->data[3]);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	795b      	ldrb	r3, [r3, #5]
 8004352:	461a      	mov	r2, r3
 8004354:	4914      	ldr	r1, [pc, #80]	; (80043a8 <debugSyslinkReceive+0x94>)
 8004356:	2000      	movs	r0, #0
 8004358:	f00c fb9c 	bl	8010a94 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart error code: %d\n", slp->data[4]);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	799b      	ldrb	r3, [r3, #6]
 8004360:	461a      	mov	r2, r3
 8004362:	4912      	ldr	r1, [pc, #72]	; (80043ac <debugSyslinkReceive+0x98>)
 8004364:	2000      	movs	r0, #0
 8004366:	f00c fb95 	bl	8010a94 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart error count: %d\n", slp->data[5]);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	79db      	ldrb	r3, [r3, #7]
 800436e:	461a      	mov	r2, r3
 8004370:	490f      	ldr	r1, [pc, #60]	; (80043b0 <debugSyslinkReceive+0x9c>)
 8004372:	2000      	movs	r0, #0
 8004374:	f00c fb8e 	bl	8010a94 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart checksum 1 fail count: %d\n", slp->data[6]);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	7a1b      	ldrb	r3, [r3, #8]
 800437c:	461a      	mov	r2, r3
 800437e:	490d      	ldr	r1, [pc, #52]	; (80043b4 <debugSyslinkReceive+0xa0>)
 8004380:	2000      	movs	r0, #0
 8004382:	f00c fb87 	bl	8010a94 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart checksum 2 fail count: %d\n", slp->data[7]);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	7a5b      	ldrb	r3, [r3, #9]
 800438a:	461a      	mov	r2, r3
 800438c:	490a      	ldr	r1, [pc, #40]	; (80043b8 <debugSyslinkReceive+0xa4>)
 800438e:	2000      	movs	r0, #0
 8004390:	f00c fb80 	bl	8010a94 <SEGGER_RTT_printf>
  }
}
 8004394:	bf00      	nop
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	08029dc8 	.word	0x08029dc8
 80043a0:	08029de4 	.word	0x08029de4
 80043a4:	08029dfc 	.word	0x08029dfc
 80043a8:	08029e14 	.word	0x08029e14
 80043ac:	08029e28 	.word	0x08029e28
 80043b0:	08029e44 	.word	0x08029e44
 80043b4:	08029e60 	.word	0x08029e60
 80043b8:	08029e84 	.word	0x08029e84

080043bc <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	601a      	str	r2, [r3, #0]
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f023 0210 	bic.w	r2, r3, #16
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	605a      	str	r2, [r3, #4]
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b02      	cmp	r3, #2
 800443a:	d101      	bne.n	8004440 <LL_SPI_IsActiveFlag_TXE+0x18>
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	330c      	adds	r3, #12
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	b2db      	uxtb	r3, r3
}
 800445e:	4618      	mov	r0, r3
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800446a:	b480      	push	{r7}
 800446c:	b085      	sub	sp, #20
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	460b      	mov	r3, r1
 8004474:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	330c      	adds	r3, #12
 800447a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8004482:	bf00      	nop
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
	...

08004490 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004498:	4b08      	ldr	r3, [pc, #32]	; (80044bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800449a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800449c:	4907      	ldr	r1, [pc, #28]	; (80044bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80044a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4013      	ands	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80044ae:	68fb      	ldr	r3, [r7, #12]
}
 80044b0:	bf00      	nop
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	40023800 	.word	0x40023800

080044c0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80044c8:	4b08      	ldr	r3, [pc, #32]	; (80044ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80044ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044cc:	4907      	ldr	r1, [pc, #28]	; (80044ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80044d4:	4b05      	ldr	r3, [pc, #20]	; (80044ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80044d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4013      	ands	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80044de:	68fb      	ldr	r3, [r7, #12]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	40023800 	.word	0x40023800

080044f0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	619a      	str	r2, [r3, #24]
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	041a      	lsls	r2, r3, #16
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	619a      	str	r2, [r3, #24]
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
	...

0800452c <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b090      	sub	sp, #64	; 0x40
 8004530:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004532:	f107 0318 	add.w	r3, r7, #24
 8004536:	2228      	movs	r2, #40	; 0x28
 8004538:	2100      	movs	r1, #0
 800453a:	4618      	mov	r0, r3
 800453c:	f01f f9e8 	bl	8023910 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004540:	463b      	mov	r3, r7
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	605a      	str	r2, [r3, #4]
 8004548:	609a      	str	r2, [r3, #8]
 800454a:	60da      	str	r2, [r3, #12]
 800454c:	611a      	str	r2, [r3, #16]
 800454e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8004550:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004554:	f7ff ffb4 	bl	80044c0 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004558:	2001      	movs	r0, #1
 800455a:	f7ff ff99 	bl	8004490 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800455e:	2004      	movs	r0, #4
 8004560:	f7ff ff96 	bl	8004490 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8004564:	23e0      	movs	r3, #224	; 0xe0
 8004566:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004568:	2302      	movs	r3, #2
 800456a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800456c:	2303      	movs	r3, #3
 800456e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004574:	2300      	movs	r3, #0
 8004576:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004578:	2305      	movs	r3, #5
 800457a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800457c:	463b      	mov	r3, r7
 800457e:	4619      	mov	r1, r3
 8004580:	4825      	ldr	r0, [pc, #148]	; (8004618 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8004582:	f016 fb84 	bl	801ac8e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004586:	2300      	movs	r3, #0
 8004588:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800458a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800458e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004590:	2300      	movs	r3, #0
 8004592:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8004594:	2302      	movs	r3, #2
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004598:	2301      	movs	r3, #1
 800459a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800459c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80045a2:	2310      	movs	r3, #16
 80045a4:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80045a6:	2300      	movs	r3, #0
 80045a8:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80045aa:	2300      	movs	r3, #0
 80045ac:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80045ae:	230a      	movs	r3, #10
 80045b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 80045b2:	f107 0318 	add.w	r3, r7, #24
 80045b6:	4619      	mov	r1, r3
 80045b8:	4818      	ldr	r0, [pc, #96]	; (800461c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80045ba:	f016 fc0c 	bl	801add6 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80045be:	2100      	movs	r1, #0
 80045c0:	4816      	ldr	r0, [pc, #88]	; (800461c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80045c2:	f7ff ff0b 	bl	80043dc <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80045c6:	2110      	movs	r1, #16
 80045c8:	4813      	ldr	r0, [pc, #76]	; (8004618 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80045ca:	f7ff ff9f 	bl	800450c <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80045ce:	2310      	movs	r3, #16
 80045d0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80045d2:	2301      	movs	r3, #1
 80045d4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80045d6:	2303      	movs	r3, #3
 80045d8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 80045e2:	463b      	mov	r3, r7
 80045e4:	4619      	mov	r1, r3
 80045e6:	480c      	ldr	r0, [pc, #48]	; (8004618 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80045e8:	f016 fb51 	bl	801ac8e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80045ec:	2310      	movs	r3, #16
 80045ee:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80045f0:	2300      	movs	r3, #0
 80045f2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80045f4:	2301      	movs	r3, #1
 80045f6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 80045f8:	463b      	mov	r3, r7
 80045fa:	4619      	mov	r1, r3
 80045fc:	4808      	ldr	r0, [pc, #32]	; (8004620 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80045fe:	f016 fb46 	bl	801ac8e <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8004602:	4806      	ldr	r0, [pc, #24]	; (800461c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8004604:	f7ff feda 	bl	80043bc <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8004608:	2110      	movs	r1, #16
 800460a:	4803      	ldr	r0, [pc, #12]	; (8004618 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800460c:	f7ff ff70 	bl	80044f0 <LL_GPIO_SetOutputPin>
}
 8004610:	bf00      	nop
 8004612:	3740      	adds	r7, #64	; 0x40
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40020000 	.word	0x40020000
 800461c:	40013000 	.word	0x40013000
 8004620:	40020800 	.word	0x40020800

08004624 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 800462e:	bf00      	nop
 8004630:	480c      	ldr	r0, [pc, #48]	; (8004664 <SPI1_SendByte+0x40>)
 8004632:	f7ff fef9 	bl	8004428 <LL_SPI_IsActiveFlag_TXE>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f9      	beq.n	8004630 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	4619      	mov	r1, r3
 8004640:	4808      	ldr	r0, [pc, #32]	; (8004664 <SPI1_SendByte+0x40>)
 8004642:	f7ff ff12 	bl	800446a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8004646:	bf00      	nop
 8004648:	4806      	ldr	r0, [pc, #24]	; (8004664 <SPI1_SendByte+0x40>)
 800464a:	f7ff feda 	bl	8004402 <LL_SPI_IsActiveFlag_RXNE>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0f9      	beq.n	8004648 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8004654:	4803      	ldr	r0, [pc, #12]	; (8004664 <SPI1_SendByte+0x40>)
 8004656:	f7ff fefa 	bl	800444e <LL_SPI_ReceiveData8>
 800465a:	4603      	mov	r3, r0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40013000 	.word	0x40013000

08004668 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8004672:	2110      	movs	r1, #16
 8004674:	480b      	ldr	r0, [pc, #44]	; (80046a4 <ICM20602_Readbyte+0x3c>)
 8004676:	f7ff ff49 	bl	800450c <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004680:	b2db      	uxtb	r3, r3
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff ffce 	bl	8004624 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8004688:	2000      	movs	r0, #0
 800468a:	f7ff ffcb 	bl	8004624 <SPI1_SendByte>
 800468e:	4603      	mov	r3, r0
 8004690:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8004692:	2110      	movs	r1, #16
 8004694:	4803      	ldr	r0, [pc, #12]	; (80046a4 <ICM20602_Readbyte+0x3c>)
 8004696:	f7ff ff2b 	bl	80044f0 <LL_GPIO_SetOutputPin>
	
	return val;
 800469a:	7bfb      	ldrb	r3, [r7, #15]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40020000 	.word	0x40020000

080046a8 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	460a      	mov	r2, r1
 80046b2:	71fb      	strb	r3, [r7, #7]
 80046b4:	4613      	mov	r3, r2
 80046b6:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80046b8:	2110      	movs	r1, #16
 80046ba:	480b      	ldr	r0, [pc, #44]	; (80046e8 <ICM20602_Writebyte+0x40>)
 80046bc:	f7ff ff26 	bl	800450c <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff ffab 	bl	8004624 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80046ce:	79bb      	ldrb	r3, [r7, #6]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ffa7 	bl	8004624 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80046d6:	2110      	movs	r1, #16
 80046d8:	4803      	ldr	r0, [pc, #12]	; (80046e8 <ICM20602_Writebyte+0x40>)
 80046da:	f7ff ff09 	bl	80044f0 <LL_GPIO_SetOutputPin>
}
 80046de:	bf00      	nop
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40020000 	.word	0x40020000

080046ec <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80046f6:	f107 0308 	add.w	r3, r7, #8
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8004700:	463b      	mov	r3, r7
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8004708:	f7ff ff10 	bl	800452c <ICM20602_GPIO_SPI_Initialization>
	
	DEBUG_PRINT("Checking ICM20602...");
 800470c:	4934      	ldr	r1, [pc, #208]	; (80047e0 <ICM20602_Initialization+0xf4>)
 800470e:	2000      	movs	r0, #0
 8004710:	f00c f9c0 	bl	8010a94 <SEGGER_RTT_printf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8004714:	2075      	movs	r0, #117	; 0x75
 8004716:	f7ff ffa7 	bl	8004668 <ICM20602_Readbyte>
 800471a:	4603      	mov	r3, r0
 800471c:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	2b12      	cmp	r3, #18
 8004722:	d106      	bne.n	8004732 <ICM20602_Initialization+0x46>
	{
		DEBUG_PRINT("\r\nICM20602 who_am_i = 0x%02x.................Pass\n", who_am_i);
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	461a      	mov	r2, r3
 8004728:	492e      	ldr	r1, [pc, #184]	; (80047e4 <ICM20602_Initialization+0xf8>)
 800472a:	2000      	movs	r0, #0
 800472c:	f00c f9b2 	bl	8010a94 <SEGGER_RTT_printf>
 8004730:	e012      	b.n	8004758 <ICM20602_Initialization+0x6c>
	}
	// recheck
	else if(who_am_i != 0x12)
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	2b12      	cmp	r3, #18
 8004736:	d00f      	beq.n	8004758 <ICM20602_Initialization+0x6c>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8004738:	2075      	movs	r0, #117	; 0x75
 800473a:	f7ff ff95 	bl	8004668 <ICM20602_Readbyte>
 800473e:	4603      	mov	r3, r0
 8004740:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	2b12      	cmp	r3, #18
 8004746:	d007      	beq.n	8004758 <ICM20602_Initialization+0x6c>
			DEBUG_PRINT( "ICM20602 is not found: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8004748:	7bfa      	ldrb	r2, [r7, #15]
 800474a:	2312      	movs	r3, #18
 800474c:	4926      	ldr	r1, [pc, #152]	; (80047e8 <ICM20602_Initialization+0xfc>)
 800474e:	2000      	movs	r0, #0
 8004750:	f00c f9a0 	bl	8010a94 <SEGGER_RTT_printf>
			return 1; //ERROR
 8004754:	2301      	movs	r3, #1
 8004756:	e03f      	b.n	80047d8 <ICM20602_Initialization+0xec>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8004758:	2180      	movs	r1, #128	; 0x80
 800475a:	206b      	movs	r0, #107	; 0x6b
 800475c:	f7ff ffa4 	bl	80046a8 <ICM20602_Writebyte>
	delay_us(5000000);
 8004760:	4822      	ldr	r0, [pc, #136]	; (80047ec <ICM20602_Initialization+0x100>)
 8004762:	f010 f96b 	bl	8014a3c <delay_us>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8004766:	2101      	movs	r1, #1
 8004768:	206b      	movs	r0, #107	; 0x6b
 800476a:	f7ff ff9d 	bl	80046a8 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	delay_us(5000000);
 800476e:	481f      	ldr	r0, [pc, #124]	; (80047ec <ICM20602_Initialization+0x100>)
 8004770:	f010 f964 	bl	8014a3c <delay_us>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 8004774:	2100      	movs	r1, #0
 8004776:	206c      	movs	r0, #108	; 0x6c
 8004778:	f7ff ff96 	bl	80046a8 <ICM20602_Writebyte>
	delay_us(5000000);
 800477c:	481b      	ldr	r0, [pc, #108]	; (80047ec <ICM20602_Initialization+0x100>)
 800477e:	f010 f95d 	bl	8014a3c <delay_us>

	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8004782:	2100      	movs	r1, #0
 8004784:	2019      	movs	r0, #25
 8004786:	f7ff ff8f 	bl	80046a8 <ICM20602_Writebyte>
	delay_us(5000000);
 800478a:	4818      	ldr	r0, [pc, #96]	; (80047ec <ICM20602_Initialization+0x100>)
 800478c:	f010 f956 	bl	8014a3c <delay_us>
	
	// Gyro DLPF Config
//	ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8004790:	2105      	movs	r1, #5
 8004792:	201a      	movs	r0, #26
 8004794:	f7ff ff88 	bl	80046a8 <ICM20602_Writebyte>
	delay_us(5000000);
 8004798:	4814      	ldr	r0, [pc, #80]	; (80047ec <ICM20602_Initialization+0x100>)
 800479a:	f010 f94f 	bl	8014a3c <delay_us>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 800479e:	2118      	movs	r1, #24
 80047a0:	201b      	movs	r0, #27
 80047a2:	f7ff ff81 	bl	80046a8 <ICM20602_Writebyte>
	delay_us(5000000);
 80047a6:	4811      	ldr	r0, [pc, #68]	; (80047ec <ICM20602_Initialization+0x100>)
 80047a8:	f010 f948 	bl	8014a3c <delay_us>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80047ac:	2118      	movs	r1, #24
 80047ae:	201c      	movs	r0, #28
 80047b0:	f7ff ff7a 	bl	80046a8 <ICM20602_Writebyte>
	delay_us(5000000);
 80047b4:	480d      	ldr	r0, [pc, #52]	; (80047ec <ICM20602_Initialization+0x100>)
 80047b6:	f010 f941 	bl	8014a3c <delay_us>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80047ba:	2103      	movs	r1, #3
 80047bc:	201d      	movs	r0, #29
 80047be:	f7ff ff73 	bl	80046a8 <ICM20602_Writebyte>
	delay_us(5000000);
 80047c2:	480a      	ldr	r0, [pc, #40]	; (80047ec <ICM20602_Initialization+0x100>)
 80047c4:	f010 f93a 	bl	8014a3c <delay_us>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80047c8:	2101      	movs	r1, #1
 80047ca:	2038      	movs	r0, #56	; 0x38
 80047cc:	f7ff ff6c 	bl	80046a8 <ICM20602_Writebyte>
	delay_us(5000000);
 80047d0:	4806      	ldr	r0, [pc, #24]	; (80047ec <ICM20602_Initialization+0x100>)
 80047d2:	f010 f933 	bl	8014a3c <delay_us>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	08029ec8 	.word	0x08029ec8
 80047e4:	08029ee0 	.word	0x08029ee0
 80047e8:	08029f14 	.word	0x08029f14
 80047ec:	004c4b40 	.word	0x004c4b40

080047f0 <branch_to_bootloader>:
 * Based from the micropython machine_bootloader function.
 * 
 * @param r0 The register to utilize
 * @param bl_addr The bootloader address to jump to
 */
static void branch_to_bootloader(uint32_t r0, uint32_t bl_addr){
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
    __asm volatile (
 80047fa:	680a      	ldr	r2, [r1, #0]
 80047fc:	f382 8808 	msr	MSP, r2
 8004800:	684a      	ldr	r2, [r1, #4]
 8004802:	4710      	bx	r2
        "msr msp, r2\n"         // get stack pointer
        "ldr r2, [r1, #4]\n"    // get address of destination
        "bx r2\n"               // branch to bootloader
        );
    //unreachable code
    while(1);
 8004804:	e7fe      	b.n	8004804 <branch_to_bootloader+0x14>
	...

08004808 <check_enter_bootloader>:
}

void check_enter_bootloader(){
 8004808:	b5b0      	push	{r4, r5, r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
    uint64_t bl_state = *BL_STATE_PTR;
 800480e:	491d      	ldr	r1, [pc, #116]	; (8004884 <check_enter_bootloader+0x7c>)
 8004810:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004814:	e9c7 0100 	strd	r0, r1, [r7]
    //set to invalid for next boot
    *BL_STATE_PTR = BL_STATE_INVALID;
 8004818:	4c1a      	ldr	r4, [pc, #104]	; (8004884 <check_enter_bootloader+0x7c>)
 800481a:	f04f 0000 	mov.w	r0, #0
 800481e:	f04f 0100 	mov.w	r1, #0
 8004822:	e9c4 0100 	strd	r0, r1, [r4]

    if(BL_STATE_GET_KEY(bl_state) == BL_STATE_KEY && (RCC->CSR & RCC_CSR_SFTRSTF)){
 8004826:	e9d7 4500 	ldrd	r4, r5, [r7]
 800482a:	f04f 0000 	mov.w	r0, #0
 800482e:	f04f 0100 	mov.w	r1, #0
 8004832:	0028      	movs	r0, r5
 8004834:	2100      	movs	r1, #0
 8004836:	f3c0 020b 	ubfx	r2, r0, #0, #12
 800483a:	2300      	movs	r3, #0
 800483c:	4912      	ldr	r1, [pc, #72]	; (8004888 <check_enter_bootloader+0x80>)
 800483e:	4411      	add	r1, r2
 8004840:	430b      	orrs	r3, r1
 8004842:	d11a      	bne.n	800487a <check_enter_bootloader+0x72>
 8004844:	4b11      	ldr	r3, [pc, #68]	; (800488c <check_enter_bootloader+0x84>)
 8004846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d014      	beq.n	800487a <check_enter_bootloader+0x72>

        //remap memory to system flash
//        SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SystemFlash);
    		//위 함수를 아래 함수로 대체
        assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap_SystemFlash));
        SYSCFG->MEMRMP = SYSCFG_MemoryRemap_SystemFlash;
 8004850:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <check_enter_bootloader+0x88>)
 8004852:	2201      	movs	r2, #1
 8004854:	601a      	str	r2, [r3, #0]

        branch_to_bootloader(BL_STATE_GET_REG(bl_state), BL_STATE_GET_ADDR(bl_state));
 8004856:	683c      	ldr	r4, [r7, #0]
 8004858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	000a      	movs	r2, r1
 8004866:	2300      	movs	r3, #0
 8004868:	4613      	mov	r3, r2
 800486a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800486e:	f023 030f 	bic.w	r3, r3, #15
 8004872:	4619      	mov	r1, r3
 8004874:	4620      	mov	r0, r4
 8004876:	f7ff ffbb 	bl	80047f0 <branch_to_bootloader>
    }
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bdb0      	pop	{r4, r5, r7, pc}
 8004882:	bf00      	nop
 8004884:	2001c000 	.word	0x2001c000
 8004888:	fffffa5b 	.word	0xfffffa5b
 800488c:	40023800 	.word	0x40023800
 8004890:	40013800 	.word	0x40013800

08004894 <buzzerInit>:




void buzzerInit()
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
	 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004898:	2100      	movs	r1, #0
 800489a:	4804      	ldr	r0, [pc, #16]	; (80048ac <buzzerInit+0x18>)
 800489c:	f014 f8b8 	bl	8018a10 <HAL_TIM_PWM_Start>
	 TIM3->PSC= 0;
 80048a0:	4b03      	ldr	r3, [pc, #12]	; (80048b0 <buzzerInit+0x1c>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048a6:	bf00      	nop
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	2000cf70 	.word	0x2000cf70
 80048b0:	40000400 	.word	0x40000400

080048b4 <buzzerOff>:
{
  return true;
}

void buzzerOff()
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  TIM3->PSC= 0;
 80048b8:	4b04      	ldr	r3, [pc, #16]	; (80048cc <buzzerOff+0x18>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80048be:	2100      	movs	r1, #0
 80048c0:	4803      	ldr	r0, [pc, #12]	; (80048d0 <buzzerOff+0x1c>)
 80048c2:	f014 f96d 	bl	8018ba0 <HAL_TIM_PWM_Stop>
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40000400 	.word	0x40000400
 80048d0:	2000cf70 	.word	0x2000cf70

080048d4 <ledRestoreSavedState>:
static uint8_t ledControlBitmask;
static uint8_t ledLastState[LED_NUM];
ledSwitch_t ledSwitchState;

static void ledRestoreSavedState(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
  for (int i = 0; i < LED_NUM; i++)
 80048da:	2300      	movs	r3, #0
 80048dc:	607b      	str	r3, [r7, #4]
 80048de:	e011      	b.n	8004904 <ledRestoreSavedState+0x30>
  {
    ledSet(i, ledLastState[i]);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	490b      	ldr	r1, [pc, #44]	; (8004914 <ledRestoreSavedState+0x40>)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	440b      	add	r3, r1
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	bf14      	ite	ne
 80048f0:	2301      	movne	r3, #1
 80048f2:	2300      	moveq	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	4619      	mov	r1, r3
 80048f8:	4610      	mov	r0, r2
 80048fa:	f000 f917 	bl	8004b2c <ledSet>
  for (int i = 0; i < LED_NUM; i++)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3301      	adds	r3, #1
 8004902:	607b      	str	r3, [r7, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b05      	cmp	r3, #5
 8004908:	ddea      	ble.n	80048e0 <ledRestoreSavedState+0xc>
  }
}
 800490a:	bf00      	nop
 800490c:	bf00      	nop
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	200081a0 	.word	0x200081a0

08004918 <ledSetForce>:

static void ledSetForce(led_t led, bool value)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	460a      	mov	r2, r1
 8004922:	71fb      	strb	r3, [r7, #7]
 8004924:	4613      	mov	r3, r2
 8004926:	71bb      	strb	r3, [r7, #6]
  if (led > LED_NUM)
 8004928:	79fb      	ldrb	r3, [r7, #7]
 800492a:	2b06      	cmp	r3, #6
 800492c:	d832      	bhi.n	8004994 <ledSetForce+0x7c>
  {
    return;
  }

  if (led_polarity[led] == LED_POL_NEG)
 800492e:	79fb      	ldrb	r3, [r7, #7]
 8004930:	4a1a      	ldr	r2, [pc, #104]	; (800499c <ledSetForce+0x84>)
 8004932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d10d      	bne.n	8004956 <ledSetForce+0x3e>
  {
    value = !value;
 800493a:	79bb      	ldrb	r3, [r7, #6]
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf14      	ite	ne
 8004940:	2301      	movne	r3, #1
 8004942:	2300      	moveq	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	f083 0301 	eor.w	r3, r3, #1
 800494a:	b2db      	uxtb	r3, r3
 800494c:	71bb      	strb	r3, [r7, #6]
 800494e:	79bb      	ldrb	r3, [r7, #6]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	71bb      	strb	r3, [r7, #6]
    syslinkSendPacket(&slp);
  }
  else
  {
  */
    if (value)
 8004956:	79bb      	ldrb	r3, [r7, #6]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00d      	beq.n	8004978 <ledSetForce+0x60>
    {
      HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_SET);
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	4a10      	ldr	r2, [pc, #64]	; (80049a0 <ledSetForce+0x88>)
 8004960:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	4a0f      	ldr	r2, [pc, #60]	; (80049a4 <ledSetForce+0x8c>)
 8004968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800496c:	b29b      	uxth	r3, r3
 800496e:	2201      	movs	r2, #1
 8004970:	4619      	mov	r1, r3
 8004972:	f012 f803 	bl	801697c <HAL_GPIO_WritePin>
 8004976:	e00e      	b.n	8004996 <ledSetForce+0x7e>
    }
    else
    {
        HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_RESET);
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	4a09      	ldr	r2, [pc, #36]	; (80049a0 <ledSetForce+0x88>)
 800497c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004980:	79fb      	ldrb	r3, [r7, #7]
 8004982:	4a08      	ldr	r2, [pc, #32]	; (80049a4 <ledSetForce+0x8c>)
 8004984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004988:	b29b      	uxth	r3, r3
 800498a:	2200      	movs	r2, #0
 800498c:	4619      	mov	r1, r3
 800498e:	f011 fff5 	bl	801697c <HAL_GPIO_WritePin>
 8004992:	e000      	b.n	8004996 <ledSetForce+0x7e>
    return;
 8004994:	bf00      	nop
    }

//  }

}
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000088 	.word	0x20000088
 80049a0:	20000058 	.word	0x20000058
 80049a4:	20000070 	.word	0x20000070

080049a8 <ledSetSwitch>:

static void ledSetSwitch(ledSwitch_t ledSwitch)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	71fb      	strb	r3, [r7, #7]
  if (ledSwitchState != ledSwitch)
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <ledSetSwitch+0x38>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	79fa      	ldrb	r2, [r7, #7]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d00c      	beq.n	80049d6 <ledSetSwitch+0x2e>
  {
    ledSwitchState = ledSwitch;
 80049bc:	4a08      	ldr	r2, [pc, #32]	; (80049e0 <ledSetSwitch+0x38>)
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	7013      	strb	r3, [r2, #0]
    switch (ledSwitch)
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <ledSetSwitch+0x26>
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d003      	beq.n	80049d4 <ledSetSwitch+0x2c>
        ledRestoreSavedState();
        break;
      case LED_PARAM_BITMASK:
        break;
      default:
        break;
 80049cc:	e003      	b.n	80049d6 <ledSetSwitch+0x2e>
        ledRestoreSavedState();
 80049ce:	f7ff ff81 	bl	80048d4 <ledRestoreSavedState>
        break;
 80049d2:	e000      	b.n	80049d6 <ledSetSwitch+0x2e>
        break;
 80049d4:	bf00      	nop
    }
  }
}
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	200081a6 	.word	0x200081a6

080049e4 <ledBitmaskParamCallback>:

static void ledBitmaskParamCallback(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0

  if (ledControlBitmask & (1 << LED_ENABLE_BITMASK_BIT))
 80049ea:	4b16      	ldr	r3, [pc, #88]	; (8004a44 <ledBitmaskParamCallback+0x60>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	b25b      	sxtb	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	da1f      	bge.n	8004a34 <ledBitmaskParamCallback+0x50>
  {
    ledSetSwitch(LED_PARAM_BITMASK);
 80049f4:	2001      	movs	r0, #1
 80049f6:	f7ff ffd7 	bl	80049a8 <ledSetSwitch>
    for (int i = 0; i < LED_NUM; i++)
 80049fa:	2300      	movs	r3, #0
 80049fc:	607b      	str	r3, [r7, #4]
 80049fe:	e015      	b.n	8004a2c <ledBitmaskParamCallback+0x48>
    {
      ledSetForce(i, ledControlBitmask & (1<<i));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	4b0f      	ldr	r3, [pc, #60]	; (8004a44 <ledBitmaskParamCallback+0x60>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a12:	4003      	ands	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bf14      	ite	ne
 8004a18:	2301      	movne	r3, #1
 8004a1a:	2300      	moveq	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4610      	mov	r0, r2
 8004a22:	f7ff ff79 	bl	8004918 <ledSetForce>
    for (int i = 0; i < LED_NUM; i++)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	607b      	str	r3, [r7, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b05      	cmp	r3, #5
 8004a30:	dde6      	ble.n	8004a00 <ledBitmaskParamCallback+0x1c>
  }
  else
  {
    ledSetSwitch(LED_LEDSEQ);
  }
}
 8004a32:	e002      	b.n	8004a3a <ledBitmaskParamCallback+0x56>
    ledSetSwitch(LED_LEDSEQ);
 8004a34:	2000      	movs	r0, #0
 8004a36:	f7ff ffb7 	bl	80049a8 <ledSetSwitch>
}
 8004a3a:	bf00      	nop
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	2000819f 	.word	0x2000819f

08004a48 <ledInit>:

void ledInit(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af00      	add	r7, sp, #0
  int i;

  if(isInit)
 8004a4e:	4b32      	ldr	r3, [pc, #200]	; (8004b18 <ledInit+0xd0>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d15b      	bne.n	8004b0e <ledInit+0xc6>
    return;

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a56:	f107 0308 	add.w	r3, r7, #8
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	605a      	str	r2, [r3, #4]
 8004a60:	609a      	str	r2, [r3, #8]
 8004a62:	60da      	str	r2, [r3, #12]
 8004a64:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a66:	2300      	movs	r3, #0
 8004a68:	607b      	str	r3, [r7, #4]
 8004a6a:	4b2c      	ldr	r3, [pc, #176]	; (8004b1c <ledInit+0xd4>)
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	4a2b      	ldr	r2, [pc, #172]	; (8004b1c <ledInit+0xd4>)
 8004a70:	f043 0304 	orr.w	r3, r3, #4
 8004a74:	6313      	str	r3, [r2, #48]	; 0x30
 8004a76:	4b29      	ldr	r3, [pc, #164]	; (8004b1c <ledInit+0xd4>)
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	607b      	str	r3, [r7, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a82:	2300      	movs	r3, #0
 8004a84:	603b      	str	r3, [r7, #0]
 8004a86:	4b25      	ldr	r3, [pc, #148]	; (8004b1c <ledInit+0xd4>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	4a24      	ldr	r2, [pc, #144]	; (8004b1c <ledInit+0xd4>)
 8004a8c:	f043 0302 	orr.w	r3, r3, #2
 8004a90:	6313      	str	r3, [r2, #48]	; 0x30
 8004a92:	4b22      	ldr	r3, [pc, #136]	; (8004b1c <ledInit+0xd4>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	683b      	ldr	r3, [r7, #0]

  for (i = 0; i < LED_NUM; i++)
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61fb      	str	r3, [r7, #28]
 8004aa2:	e02a      	b.n	8004afa <ledInit+0xb2>
  {
    //Initialize the LED pins as an output
	HAL_GPIO_WritePin(led_port[i], led_pin[i], GPIO_PIN_RESET);
 8004aa4:	4a1e      	ldr	r2, [pc, #120]	; (8004b20 <ledInit+0xd8>)
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004aac:	4a1d      	ldr	r2, [pc, #116]	; (8004b24 <ledInit+0xdc>)
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	4619      	mov	r1, r3
 8004aba:	f011 ff5f 	bl	801697c <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = led_pin[i];
 8004abe:	4a19      	ldr	r2, [pc, #100]	; (8004b24 <ledInit+0xdc>)
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004acc:	2301      	movs	r3, #1
 8004ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(led_port[i], &GPIO_InitStruct);
 8004ad4:	4a12      	ldr	r2, [pc, #72]	; (8004b20 <ledInit+0xd8>)
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004adc:	f107 0208 	add.w	r2, r7, #8
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f011 fdae 	bl	8016644 <HAL_GPIO_Init>
    //Turn off the LED:s
    ledSet(i, 0);
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2100      	movs	r1, #0
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f81c 	bl	8004b2c <ledSet>
  for (i = 0; i < LED_NUM; i++)
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	3301      	adds	r3, #1
 8004af8:	61fb      	str	r3, [r7, #28]
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	2b05      	cmp	r3, #5
 8004afe:	ddd1      	ble.n	8004aa4 <ledInit+0x5c>
  }

  ledSwitchState = LED_LEDSEQ;
 8004b00:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <ledInit+0xe0>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
  isInit = true;
 8004b06:	4b04      	ldr	r3, [pc, #16]	; (8004b18 <ledInit+0xd0>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	701a      	strb	r2, [r3, #0]
 8004b0c:	e000      	b.n	8004b10 <ledInit+0xc8>
    return;
 8004b0e:	bf00      	nop
}
 8004b10:	3720      	adds	r7, #32
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	2000819e 	.word	0x2000819e
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	20000058 	.word	0x20000058
 8004b24:	20000070 	.word	0x20000070
 8004b28:	200081a6 	.word	0x200081a6

08004b2c <ledSet>:
    //Turn on the LED:s
    ledSet(i, 1);
  }
}
void ledSet(led_t led, bool value)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	4603      	mov	r3, r0
 8004b34:	460a      	mov	r2, r1
 8004b36:	71fb      	strb	r3, [r7, #7]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	71bb      	strb	r3, [r7, #6]
  ASSERT(led < LED_NUM);
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	2b05      	cmp	r3, #5
 8004b40:	d904      	bls.n	8004b4c <ledSet+0x20>
 8004b42:	22e4      	movs	r2, #228	; 0xe4
 8004b44:	490a      	ldr	r1, [pc, #40]	; (8004b70 <ledSet+0x44>)
 8004b46:	480b      	ldr	r0, [pc, #44]	; (8004b74 <ledSet+0x48>)
 8004b48:	f00c f868 	bl	8010c1c <assertFail>
  if (ledSwitchState == LED_LEDSEQ)
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <ledSet+0x4c>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d105      	bne.n	8004b60 <ledSet+0x34>
  {
    ledSetForce(led, value);
 8004b54:	79ba      	ldrb	r2, [r7, #6]
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	4611      	mov	r1, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff fedc 	bl	8004918 <ledSetForce>
  }

  ledLastState[led] = value;
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	79b9      	ldrb	r1, [r7, #6]
 8004b64:	4a05      	ldr	r2, [pc, #20]	; (8004b7c <ledSet+0x50>)
 8004b66:	54d1      	strb	r1, [r2, r3]
}
 8004b68:	bf00      	nop
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	08029f44 	.word	0x08029f44
 8004b74:	08029f60 	.word	0x08029f60
 8004b78:	200081a6 	.word	0x200081a6
 8004b7c:	200081a0 	.word	0x200081a0

08004b80 <ledShowFaultPattern>:

void ledShowFaultPattern(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  ledSet(LED_GREEN_L, 0);
 8004b84:	2100      	movs	r1, #0
 8004b86:	2001      	movs	r0, #1
 8004b88:	f7ff ffd0 	bl	8004b2c <ledSet>
  ledSet(LED_GREEN_R, 0);
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	2003      	movs	r0, #3
 8004b90:	f7ff ffcc 	bl	8004b2c <ledSet>
  ledSet(LED_RED_L, 1);
 8004b94:	2101      	movs	r1, #1
 8004b96:	2002      	movs	r0, #2
 8004b98:	f7ff ffc8 	bl	8004b2c <ledSet>
  ledSet(LED_RED_R, 1);
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	2004      	movs	r0, #4
 8004ba0:	f7ff ffc4 	bl	8004b2c <ledSet>
  ledSet(LED_BLUE_L, 0);
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f7ff ffc0 	bl	8004b2c <ledSet>
}
 8004bac:	bf00      	nop
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <ledseqInit>:
static bool isInit = false;
static bool ledseqEnabled = false;

static void lesdeqCmdTask(void* param);

void ledseqInit() {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af02      	add	r7, sp, #8
  if(isInit) {
 8004bb6:	4b37      	ldr	r3, [pc, #220]	; (8004c94 <ledseqInit+0xe4>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d165      	bne.n	8004c8a <ledseqInit+0xda>
    return;
  }

  ledInit();
 8004bbe:	f7ff ff43 	bl	8004a48 <ledInit>

  /* Led sequence priority */
  ledseqRegisterSequence(&seq_testPassed);
 8004bc2:	4835      	ldr	r0, [pc, #212]	; (8004c98 <ledseqInit+0xe8>)
 8004bc4:	f000 f9f8 	bl	8004fb8 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_testFailed);
 8004bc8:	4834      	ldr	r0, [pc, #208]	; (8004c9c <ledseqInit+0xec>)
 8004bca:	f000 f9f5 	bl	8004fb8 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_lowbat);
 8004bce:	4834      	ldr	r0, [pc, #208]	; (8004ca0 <ledseqInit+0xf0>)
 8004bd0:	f000 f9f2 	bl	8004fb8 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_charged);
 8004bd4:	4833      	ldr	r0, [pc, #204]	; (8004ca4 <ledseqInit+0xf4>)
 8004bd6:	f000 f9ef 	bl	8004fb8 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_charging);
 8004bda:	4833      	ldr	r0, [pc, #204]	; (8004ca8 <ledseqInit+0xf8>)
 8004bdc:	f000 f9ec 	bl	8004fb8 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_calibrated);
 8004be0:	4832      	ldr	r0, [pc, #200]	; (8004cac <ledseqInit+0xfc>)
 8004be2:	f000 f9e9 	bl	8004fb8 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_alive);
 8004be6:	4832      	ldr	r0, [pc, #200]	; (8004cb0 <ledseqInit+0x100>)
 8004be8:	f000 f9e6 	bl	8004fb8 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_linkUp);
 8004bec:	4831      	ldr	r0, [pc, #196]	; (8004cb4 <ledseqInit+0x104>)
 8004bee:	f000 f9e3 	bl	8004fb8 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_linkDown);
 8004bf2:	4831      	ldr	r0, [pc, #196]	; (8004cb8 <ledseqInit+0x108>)
 8004bf4:	f000 f9e0 	bl	8004fb8 <ledseqRegisterSequence>

  //Initialise the sequences state
  for(int i=0; i<LED_NUM; i++) {
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	607b      	str	r3, [r7, #4]
 8004bfc:	e007      	b.n	8004c0e <ledseqInit+0x5e>
    activeSeq[i] = 0;
 8004bfe:	4a2f      	ldr	r2, [pc, #188]	; (8004cbc <ledseqInit+0x10c>)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2100      	movs	r1, #0
 8004c04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i=0; i<LED_NUM; i++) {
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	607b      	str	r3, [r7, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b05      	cmp	r3, #5
 8004c12:	ddf4      	ble.n	8004bfe <ledseqInit+0x4e>
  }

  //Init the soft timers that runs the led sequences for each leds
  for(int i=0; i<LED_NUM; i++) {
 8004c14:	2300      	movs	r3, #0
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	e018      	b.n	8004c4c <ledseqInit+0x9c>
    timer[i] = xTimerCreateStatic("ledseqTimer", (1000), pdFALSE, (void*)i, runLedseq, &timerBuffer[i]);
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	212c      	movs	r1, #44	; 0x2c
 8004c20:	fb01 f303 	mul.w	r3, r1, r3
 8004c24:	4926      	ldr	r1, [pc, #152]	; (8004cc0 <ledseqInit+0x110>)
 8004c26:	440b      	add	r3, r1
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	4b26      	ldr	r3, [pc, #152]	; (8004cc4 <ledseqInit+0x114>)
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	2200      	movs	r2, #0
 8004c32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c36:	4824      	ldr	r0, [pc, #144]	; (8004cc8 <ledseqInit+0x118>)
 8004c38:	f01c f804 	bl	8020c44 <xTimerCreateStatic>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	4923      	ldr	r1, [pc, #140]	; (8004ccc <ledseqInit+0x11c>)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<LED_NUM; i++) {
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	603b      	str	r3, [r7, #0]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	dde3      	ble.n	8004c1a <ledseqInit+0x6a>
  }

  ledseqMutex = xSemaphoreCreateMutex();
 8004c52:	2001      	movs	r0, #1
 8004c54:	f019 fe61 	bl	801e91a <xQueueCreateMutex>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	4a1d      	ldr	r2, [pc, #116]	; (8004cd0 <ledseqInit+0x120>)
 8004c5c:	6013      	str	r3, [r2, #0]

  ledseqCmdQueue = xQueueCreate(10, sizeof(struct ledseqCmd_s));
 8004c5e:	2200      	movs	r2, #0
 8004c60:	2108      	movs	r1, #8
 8004c62:	200a      	movs	r0, #10
 8004c64:	f019 fde2 	bl	801e82c <xQueueGenericCreate>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	4a1a      	ldr	r2, [pc, #104]	; (8004cd4 <ledseqInit+0x124>)
 8004c6c:	6013      	str	r3, [r2, #0]
  xTaskCreate(lesdeqCmdTask, LEDSEQCMD_TASK_NAME, LEDSEQCMD_TASK_STACKSIZE, NULL, LEDSEQCMD_TASK_PRI, NULL);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	2301      	movs	r3, #1
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	2300      	movs	r3, #0
 8004c78:	2280      	movs	r2, #128	; 0x80
 8004c7a:	4917      	ldr	r1, [pc, #92]	; (8004cd8 <ledseqInit+0x128>)
 8004c7c:	4817      	ldr	r0, [pc, #92]	; (8004cdc <ledseqInit+0x12c>)
 8004c7e:	f01a fccf 	bl	801f620 <xTaskCreate>

  isInit = true;
 8004c82:	4b04      	ldr	r3, [pc, #16]	; (8004c94 <ledseqInit+0xe4>)
 8004c84:	2201      	movs	r2, #1
 8004c86:	701a      	strb	r2, [r3, #0]
 8004c88:	e000      	b.n	8004c8c <ledseqInit+0xdc>
    return;
 8004c8a:	bf00      	nop
}
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	200081b4 	.word	0x200081b4
 8004c98:	20000278 	.word	0x20000278
 8004c9c:	20000288 	.word	0x20000288
 8004ca0:	200000b0 	.word	0x200000b0
 8004ca4:	200001c8 	.word	0x200001c8
 8004ca8:	200001f0 	.word	0x200001f0
 8004cac:	20000148 	.word	0x20000148
 8004cb0:	20000170 	.word	0x20000170
 8004cb4:	20000198 	.word	0x20000198
 8004cb8:	200001a8 	.word	0x200001a8
 8004cbc:	20002634 	.word	0x20002634
 8004cc0:	20002664 	.word	0x20002664
 8004cc4:	08004ea1 	.word	0x08004ea1
 8004cc8:	08029f88 	.word	0x08029f88
 8004ccc:	2000264c 	.word	0x2000264c
 8004cd0:	200081ac 	.word	0x200081ac
 8004cd4:	200081b0 	.word	0x200081b0
 8004cd8:	08029f94 	.word	0x08029f94
 8004cdc:	08004ce1 	.word	0x08004ce1

08004ce0 <lesdeqCmdTask>:

static void lesdeqCmdTask(void* param) {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  while(1) {
    xQueueReceive(ledseqCmdQueue, &command, portMAX_DELAY);
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <lesdeqCmdTask+0x3c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f107 0108 	add.w	r1, r7, #8
 8004cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f019 ffe5 	bl	801ecc4 <xQueueReceive>

    switch(command.command) {
 8004cfa:	7a3b      	ldrb	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <lesdeqCmdTask+0x26>
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d005      	beq.n	8004d10 <lesdeqCmdTask+0x30>
 8004d04:	e009      	b.n	8004d1a <lesdeqCmdTask+0x3a>
      case run:
        ledseqRunBlocking(command.sequence);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 f825 	bl	8004d58 <ledseqRunBlocking>
        break;
 8004d0e:	e004      	b.n	8004d1a <lesdeqCmdTask+0x3a>
      case stop:
        ledseqStopBlocking(command.sequence);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 f898 	bl	8004e48 <ledseqStopBlocking>
        break;
 8004d18:	bf00      	nop
    xQueueReceive(ledseqCmdQueue, &command, portMAX_DELAY);
 8004d1a:	e7e5      	b.n	8004ce8 <lesdeqCmdTask+0x8>
 8004d1c:	200081b0 	.word	0x200081b0

08004d20 <ledseqRun>:

void ledseqEnable(bool enable) {
  ledseqEnabled = enable;
}

bool ledseqRun(ledseqContext_t *context) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  command.command = run;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	723b      	strb	r3, [r7, #8]
  command.sequence = context;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(ledseqCmdQueue, &command, 0) == pdPASS) {
 8004d30:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <ledseqRun+0x34>)
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	f107 0108 	add.w	r1, r7, #8
 8004d38:	2300      	movs	r3, #0
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f019 fe20 	bl	801e980 <xQueueGenericSend>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <ledseqRun+0x2a>
    return true;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <ledseqRun+0x2c>
  }
  return false;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	200081b0 	.word	0x200081b0

08004d58 <ledseqRunBlocking>:

void ledseqRunBlocking(ledseqContext_t *context) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  const led_t led = context->led;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	7b1b      	ldrb	r3, [r3, #12]
 8004d64:	73fb      	strb	r3, [r7, #15]

  xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 8004d66:	4b13      	ldr	r3, [pc, #76]	; (8004db4 <ledseqRunBlocking+0x5c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f01a f888 	bl	801ee84 <xQueueSemaphoreTake>
  context->state = 0;  //Reset the seq. to its first step
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	609a      	str	r2, [r3, #8]
  updateActive(led);
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 f94f 	bl	8005020 <updateActive>
  xSemaphoreGive(ledseqMutex);
 8004d82:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <ledseqRunBlocking+0x5c>)
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	2300      	movs	r3, #0
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	f019 fdf8 	bl	801e980 <xQueueGenericSend>

  // Run the first step if the new seq is the active sequence
  if(activeSeq[led] == context) {
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	4a09      	ldr	r2, [pc, #36]	; (8004db8 <ledseqRunBlocking+0x60>)
 8004d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d106      	bne.n	8004dac <ledseqRunBlocking+0x54>
    runLedseq(timer[led]);
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
 8004da0:	4a06      	ldr	r2, [pc, #24]	; (8004dbc <ledseqRunBlocking+0x64>)
 8004da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 f87a 	bl	8004ea0 <runLedseq>
  }
}
 8004dac:	bf00      	nop
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	200081ac 	.word	0x200081ac
 8004db8:	20002634 	.word	0x20002634
 8004dbc:	2000264c 	.word	0x2000264c

08004dc0 <ledseqSetChargeLevel>:

void ledseqSetChargeLevel(const float chargeLevel) {
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	ed87 0a01 	vstr	s0, [r7, #4]
  int onTime = LEDSEQ_CHARGE_CYCLE_TIME_500MA * chargeLevel;
 8004dca:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dce:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004e08 <ledseqSetChargeLevel+0x48>
 8004dd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dda:	ee17 3a90 	vmov	r3, s15
 8004dde:	60fb      	str	r3, [r7, #12]
  int offTime = LEDSEQ_CHARGE_CYCLE_TIME_500MA - onTime;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8004de6:	60bb      	str	r3, [r7, #8]

  seq_charging.sequence[0].action = onTime;
 8004de8:	4b08      	ldr	r3, [pc, #32]	; (8004e0c <ledseqSetChargeLevel+0x4c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	605a      	str	r2, [r3, #4]
  seq_charging.sequence[1].action = offTime;
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <ledseqSetChargeLevel+0x4c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3308      	adds	r3, #8
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	605a      	str	r2, [r3, #4]
}
 8004dfa:	bf00      	nop
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	447a0000 	.word	0x447a0000
 8004e0c:	200001f0 	.word	0x200001f0

08004e10 <ledseqStop>:

bool ledseqStop(ledseqContext_t *context) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  command.command = stop;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	723b      	strb	r3, [r7, #8]
  command.sequence = context;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(ledseqCmdQueue, &command, 0) == pdPASS) {
 8004e20:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <ledseqStop+0x34>)
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	f107 0108 	add.w	r1, r7, #8
 8004e28:	2300      	movs	r3, #0
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f019 fda8 	bl	801e980 <xQueueGenericSend>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <ledseqStop+0x2a>
    return true;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <ledseqStop+0x2c>
  }
  return false;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	200081b0 	.word	0x200081b0

08004e48 <ledseqStopBlocking>:

void ledseqStopBlocking(ledseqContext_t *context) {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  const led_t led = context->led;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	7b1b      	ldrb	r3, [r3, #12]
 8004e54:	73fb      	strb	r3, [r7, #15]

  xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 8004e56:	4b10      	ldr	r3, [pc, #64]	; (8004e98 <ledseqStopBlocking+0x50>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f01a f810 	bl	801ee84 <xQueueSemaphoreTake>
  context->state = LEDSEQ_STOP;  //Stop the seq.
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e6a:	609a      	str	r2, [r3, #8]
  updateActive(led);
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 f8d6 	bl	8005020 <updateActive>
  xSemaphoreGive(ledseqMutex);
 8004e74:	4b08      	ldr	r3, [pc, #32]	; (8004e98 <ledseqStopBlocking+0x50>)
 8004e76:	6818      	ldr	r0, [r3, #0]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	f019 fd7f 	bl	801e980 <xQueueGenericSend>

  //Run the next active sequence (if any...)
  runLedseq(timer[led]);
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
 8004e84:	4a05      	ldr	r2, [pc, #20]	; (8004e9c <ledseqStopBlocking+0x54>)
 8004e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 f808 	bl	8004ea0 <runLedseq>
}
 8004e90:	bf00      	nop
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	200081ac 	.word	0x200081ac
 8004e9c:	2000264c 	.word	0x2000264c

08004ea0 <runLedseq>:

/* Center of the led sequence machine. This function is executed by the FreeRTOS
 * timers and runs the sequences
 */
static void runLedseq( xTimerHandle xTimer ) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b088      	sub	sp, #32
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	6078      	str	r0, [r7, #4]
  if (!ledseqEnabled) {
 8004ea8:	4b40      	ldr	r3, [pc, #256]	; (8004fac <runLedseq+0x10c>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	f083 0301 	eor.w	r3, r3, #1
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d171      	bne.n	8004f9a <runLedseq+0xfa>
    return;
  }

  led_t led = (led_t)pvTimerGetTimerID(xTimer);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f01c fa38 	bl	802132c <pvTimerGetTimerID>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	75bb      	strb	r3, [r7, #22]
  ledseqContext_t* context = activeSeq[led];
 8004ec0:	7dbb      	ldrb	r3, [r7, #22]
 8004ec2:	4a3b      	ldr	r2, [pc, #236]	; (8004fb0 <runLedseq+0x110>)
 8004ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ec8:	613b      	str	r3, [r7, #16]
  if (NO_CONTEXT == context) {
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d066      	beq.n	8004f9e <runLedseq+0xfe>
    return;
  }

  bool leave = false;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	75fb      	strb	r3, [r7, #23]
  while(!leave) {
 8004ed4:	e05a      	b.n	8004f8c <runLedseq+0xec>
    if (context->state == LEDSEQ_STOP) {
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ede:	d060      	beq.n	8004fa2 <runLedseq+0x102>
      return;
    }

    const ledseqStep_t* step = &context->sequence[context->state];
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	4413      	add	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]

    xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 8004eee:	4b31      	ldr	r3, [pc, #196]	; (8004fb4 <runLedseq+0x114>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f019 ffc4 	bl	801ee84 <xQueueSemaphoreTake>
    context->state++;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	609a      	str	r2, [r3, #8]
    led_t led = context->led;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	7b1b      	ldrb	r3, [r3, #12]
 8004f0a:	72fb      	strb	r3, [r7, #11]

    switch(step->action) {
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f113 0f02 	cmn.w	r3, #2
 8004f14:	d003      	beq.n	8004f1e <runLedseq+0x7e>
 8004f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f1a:	d004      	beq.n	8004f26 <runLedseq+0x86>
 8004f1c:	e00c      	b.n	8004f38 <runLedseq+0x98>
      case LEDSEQ_LOOP:
        context->state = 0;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2200      	movs	r2, #0
 8004f22:	609a      	str	r2, [r3, #8]
        break;
 8004f24:	e02b      	b.n	8004f7e <runLedseq+0xde>
      case LEDSEQ_STOP:
        context->state = LEDSEQ_STOP;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f2c:	609a      	str	r2, [r3, #8]
        updateActive(led);
 8004f2e:	7afb      	ldrb	r3, [r7, #11]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 f875 	bl	8005020 <updateActive>
        break;
 8004f36:	e022      	b.n	8004f7e <runLedseq+0xde>
      default:  //The step is a LED action and a time
        ledSet(led, step->value);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	781a      	ldrb	r2, [r3, #0]
 8004f3c:	7afb      	ldrb	r3, [r7, #11]
 8004f3e:	4611      	mov	r1, r2
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff fdf3 	bl	8004b2c <ledSet>
        if (step->action == 0) {
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d016      	beq.n	8004f7c <runLedseq+0xdc>
          break;
        }
        xTimerChangePeriod(xTimer, (step->action), 0);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	461a      	mov	r2, r3
 8004f54:	2300      	movs	r3, #0
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	2104      	movs	r1, #4
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f01b fee5 	bl	8020d2c <xTimerGenericCommand>
        xTimerStart(xTimer, 0);
 8004f62:	f01a fe7d 	bl	801fc60 <xTaskGetTickCount>
 8004f66:	4602      	mov	r2, r0
 8004f68:	2300      	movs	r3, #0
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	2101      	movs	r1, #1
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f01b fedb 	bl	8020d2c <xTimerGenericCommand>
        leave = true;
 8004f76:	2301      	movs	r3, #1
 8004f78:	75fb      	strb	r3, [r7, #23]
        break;
 8004f7a:	e000      	b.n	8004f7e <runLedseq+0xde>
          break;
 8004f7c:	bf00      	nop
    }
    xSemaphoreGive(ledseqMutex);
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <runLedseq+0x114>)
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	2300      	movs	r3, #0
 8004f84:	2200      	movs	r2, #0
 8004f86:	2100      	movs	r1, #0
 8004f88:	f019 fcfa 	bl	801e980 <xQueueGenericSend>
  while(!leave) {
 8004f8c:	7dfb      	ldrb	r3, [r7, #23]
 8004f8e:	f083 0301 	eor.w	r3, r3, #1
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d19e      	bne.n	8004ed6 <runLedseq+0x36>
 8004f98:	e004      	b.n	8004fa4 <runLedseq+0x104>
    return;
 8004f9a:	bf00      	nop
 8004f9c:	e002      	b.n	8004fa4 <runLedseq+0x104>
    return;
 8004f9e:	bf00      	nop
 8004fa0:	e000      	b.n	8004fa4 <runLedseq+0x104>
      return;
 8004fa2:	bf00      	nop
  }
}
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	200081b5 	.word	0x200081b5
 8004fb0:	20002634 	.word	0x20002634
 8004fb4:	200081ac 	.word	0x200081ac

08004fb8 <ledseqRegisterSequence>:

void ledseqRegisterSequence(ledseqContext_t* context) {
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  context->state = LEDSEQ_STOP;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fc6:	609a      	str	r2, [r3, #8]
  context->nextContext = NO_CONTEXT;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	605a      	str	r2, [r3, #4]

  if (sequences == NO_CONTEXT) {
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <ledseqRegisterSequence+0x64>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d103      	bne.n	8004fde <ledseqRegisterSequence+0x26>
    sequences = context;
 8004fd6:	4a11      	ldr	r2, [pc, #68]	; (800501c <ledseqRegisterSequence+0x64>)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	e019      	b.n	8005012 <ledseqRegisterSequence+0x5a>
  } else {
    ledseqContext_t* last = sequences;
 8004fde:	4b0f      	ldr	r3, [pc, #60]	; (800501c <ledseqRegisterSequence+0x64>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60fb      	str	r3, [r7, #12]
    if (last == context) {
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d00f      	beq.n	800500c <ledseqRegisterSequence+0x54>
      // Skip if already registered
      return;
    }

    while (last->nextContext != NO_CONTEXT) {
 8004fec:	e006      	b.n	8004ffc <ledseqRegisterSequence+0x44>
      last = last->nextContext;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	60fb      	str	r3, [r7, #12]
      if (last == context) {
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d009      	beq.n	8005010 <ledseqRegisterSequence+0x58>
    while (last->nextContext != NO_CONTEXT) {
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1f4      	bne.n	8004fee <ledseqRegisterSequence+0x36>
        // Skip if already registered
        return;
      }
    }

    last->nextContext = context;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	605a      	str	r2, [r3, #4]
 800500a:	e002      	b.n	8005012 <ledseqRegisterSequence+0x5a>
      return;
 800500c:	bf00      	nop
 800500e:	e000      	b.n	8005012 <ledseqRegisterSequence+0x5a>
        return;
 8005010:	bf00      	nop
  }
}
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	200081a8 	.word	0x200081a8

08005020 <updateActive>:

// Utility functions

static void updateActive(led_t led) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	4603      	mov	r3, r0
 8005028:	71fb      	strb	r3, [r7, #7]
  activeSeq[led] = NO_CONTEXT;
 800502a:	79fb      	ldrb	r3, [r7, #7]
 800502c:	4a13      	ldr	r2, [pc, #76]	; (800507c <updateActive+0x5c>)
 800502e:	2100      	movs	r1, #0
 8005030:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  ledSet(led, false);
 8005034:	79fb      	ldrb	r3, [r7, #7]
 8005036:	2100      	movs	r1, #0
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff fd77 	bl	8004b2c <ledSet>

  for (ledseqContext_t* sequence = sequences; sequence != 0; sequence = sequence->nextContext) {
 800503e:	4b10      	ldr	r3, [pc, #64]	; (8005080 <updateActive+0x60>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	e012      	b.n	800506c <updateActive+0x4c>
    if (sequence->led == led && sequence->state != LEDSEQ_STOP) {
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	7b1b      	ldrb	r3, [r3, #12]
 800504a:	79fa      	ldrb	r2, [r7, #7]
 800504c:	429a      	cmp	r2, r3
 800504e:	d10a      	bne.n	8005066 <updateActive+0x46>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005058:	d005      	beq.n	8005066 <updateActive+0x46>
      activeSeq[led] = sequence;
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	4907      	ldr	r1, [pc, #28]	; (800507c <updateActive+0x5c>)
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      break;
 8005064:	e006      	b.n	8005074 <updateActive+0x54>
  for (ledseqContext_t* sequence = sequences; sequence != 0; sequence = sequence->nextContext) {
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1e9      	bne.n	8005046 <updateActive+0x26>
    }
  }
}
 8005072:	bf00      	nop
 8005074:	bf00      	nop
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	20002634 	.word	0x20002634
 8005080:	200081a8 	.word	0x200081a8

08005084 <memoryRegisterHandler>:
  nrOfHandlers = 0;
  owMemHandler = 0;
}
#endif

void memoryRegisterHandler(const MemoryHandlerDef_t* handlerDef){
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < nrOfHandlers; i++) {
 800508c:	2300      	movs	r3, #0
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	e010      	b.n	80050b4 <memoryRegisterHandler+0x30>
    ASSERT(handlerDef->type != handlers[i]->type);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	781a      	ldrb	r2, [r3, #0]
 8005096:	491c      	ldr	r1, [pc, #112]	; (8005108 <memoryRegisterHandler+0x84>)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d104      	bne.n	80050ae <memoryRegisterHandler+0x2a>
 80050a4:	225f      	movs	r2, #95	; 0x5f
 80050a6:	4919      	ldr	r1, [pc, #100]	; (800510c <memoryRegisterHandler+0x88>)
 80050a8:	4819      	ldr	r0, [pc, #100]	; (8005110 <memoryRegisterHandler+0x8c>)
 80050aa:	f00b fdb7 	bl	8010c1c <assertFail>
  for (int i = 0; i < nrOfHandlers; i++) {
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	3301      	adds	r3, #1
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	4b17      	ldr	r3, [pc, #92]	; (8005114 <memoryRegisterHandler+0x90>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4293      	cmp	r3, r2
 80050be:	dbe8      	blt.n	8005092 <memoryRegisterHandler+0xe>
  }
  ASSERT(nrOfHandlers < MAX_NR_HANDLERS);
 80050c0:	4b14      	ldr	r3, [pc, #80]	; (8005114 <memoryRegisterHandler+0x90>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b13      	cmp	r3, #19
 80050c6:	d904      	bls.n	80050d2 <memoryRegisterHandler+0x4e>
 80050c8:	2261      	movs	r2, #97	; 0x61
 80050ca:	4910      	ldr	r1, [pc, #64]	; (800510c <memoryRegisterHandler+0x88>)
 80050cc:	4812      	ldr	r0, [pc, #72]	; (8005118 <memoryRegisterHandler+0x94>)
 80050ce:	f00b fda5 	bl	8010c1c <assertFail>
  ASSERT(registrationEnabled);
 80050d2:	4b12      	ldr	r3, [pc, #72]	; (800511c <memoryRegisterHandler+0x98>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d104      	bne.n	80050e4 <memoryRegisterHandler+0x60>
 80050da:	2262      	movs	r2, #98	; 0x62
 80050dc:	490b      	ldr	r1, [pc, #44]	; (800510c <memoryRegisterHandler+0x88>)
 80050de:	4810      	ldr	r0, [pc, #64]	; (8005120 <memoryRegisterHandler+0x9c>)
 80050e0:	f00b fd9c 	bl	8010c1c <assertFail>
  handlers[nrOfHandlers] = handlerDef;
 80050e4:	4b0b      	ldr	r3, [pc, #44]	; (8005114 <memoryRegisterHandler+0x90>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	4619      	mov	r1, r3
 80050ea:	4a07      	ldr	r2, [pc, #28]	; (8005108 <memoryRegisterHandler+0x84>)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  nrOfHandlers++;
 80050f2:	4b08      	ldr	r3, [pc, #32]	; (8005114 <memoryRegisterHandler+0x90>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	3301      	adds	r3, #1
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	4b06      	ldr	r3, [pc, #24]	; (8005114 <memoryRegisterHandler+0x90>)
 80050fc:	701a      	strb	r2, [r3, #0]
}
 80050fe:	bf00      	nop
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	200081c0 	.word	0x200081c0
 800510c:	08029fa0 	.word	0x08029fa0
 8005110:	08029fbc 	.word	0x08029fbc
 8005114:	20008210 	.word	0x20008210
 8005118:	08029fe4 	.word	0x08029fe4
 800511c:	20000298 	.word	0x20000298
 8005120:	0802a004 	.word	0x0802a004

08005124 <owSyslinkReceive>:
{
  return owCommonTest();
}

void owSyslinkReceive(SyslinkPacket *slp)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <pmInit>:
};

STATIC_MEM_TASK_ALLOC(pmTask, PM_TASK_STACKSIZE);

void pmInit(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af04      	add	r7, sp, #16
  if(isInit) {
 800513e:	4b16      	ldr	r3, [pc, #88]	; (8005198 <pmInit+0x60>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d125      	bne.n	8005192 <pmInit+0x5a>
    return;
  }

  HAL_ADC_Start_DMA(&hadc1, &adc1Val, 1);	// Current measurement
 8005146:	2201      	movs	r2, #1
 8005148:	4914      	ldr	r1, [pc, #80]	; (800519c <pmInit+0x64>)
 800514a:	4815      	ldr	r0, [pc, #84]	; (80051a0 <pmInit+0x68>)
 800514c:	f010 f98a 	bl	8015464 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, &adc2Val, 1);	// Voltage measurement
 8005150:	2201      	movs	r2, #1
 8005152:	4914      	ldr	r1, [pc, #80]	; (80051a4 <pmInit+0x6c>)
 8005154:	4814      	ldr	r0, [pc, #80]	; (80051a8 <pmInit+0x70>)
 8005156:	f010 f985 	bl	8015464 <HAL_ADC_Start_DMA>

  STATIC_MEM_TASK_CREATE(pmTask, pmTask, PM_TASK_NAME, NULL, PM_TASK_PRI);
 800515a:	2380      	movs	r3, #128	; 0x80
 800515c:	461a      	mov	r2, r3
 800515e:	4b13      	ldr	r3, [pc, #76]	; (80051ac <pmInit+0x74>)
 8005160:	9302      	str	r3, [sp, #8]
 8005162:	4b13      	ldr	r3, [pc, #76]	; (80051b0 <pmInit+0x78>)
 8005164:	9301      	str	r3, [sp, #4]
 8005166:	2300      	movs	r3, #0
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	2300      	movs	r3, #0
 800516c:	4911      	ldr	r1, [pc, #68]	; (80051b4 <pmInit+0x7c>)
 800516e:	4812      	ldr	r0, [pc, #72]	; (80051b8 <pmInit+0x80>)
 8005170:	f01a fa00 	bl	801f574 <xTaskCreateStatic>

  isInit = true;
 8005174:	4b08      	ldr	r3, [pc, #32]	; (8005198 <pmInit+0x60>)
 8005176:	2201      	movs	r2, #1
 8005178:	701a      	strb	r2, [r3, #0]

  pmSyslinkInfo.vBat = 3.7f;
 800517a:	4b10      	ldr	r3, [pc, #64]	; (80051bc <pmInit+0x84>)
 800517c:	4a10      	ldr	r2, [pc, #64]	; (80051c0 <pmInit+0x88>)
 800517e:	f8c3 2001 	str.w	r2, [r3, #1]
  pmSetBatteryVoltage(pmSyslinkInfo.vBat); //TODO remove
 8005182:	4b0e      	ldr	r3, [pc, #56]	; (80051bc <pmInit+0x84>)
 8005184:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8005188:	ee00 3a10 	vmov	s0, r3
 800518c:	f000 f81a 	bl	80051c4 <pmSetBatteryVoltage>
 8005190:	e000      	b.n	8005194 <pmInit+0x5c>
    return;
 8005192:	bf00      	nop
}
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20008240 	.word	0x20008240
 800519c:	20008250 	.word	0x20008250
 80051a0:	2000ce20 	.word	0x2000ce20
 80051a4:	20008252 	.word	0x20008252
 80051a8:	2000ce68 	.word	0x2000ce68
 80051ac:	2000276c 	.word	0x2000276c
 80051b0:	20008254 	.word	0x20008254
 80051b4:	0802a0b4 	.word	0x0802a0b4
 80051b8:	08005505 	.word	0x08005505
 80051bc:	20008244 	.word	0x20008244
 80051c0:	406ccccd 	.word	0x406ccccd

080051c4 <pmSetBatteryVoltage>:

/**
 * Sets the battery voltage and its min and max values
 */
static void pmSetBatteryVoltage(float voltage)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	ed87 0a01 	vstr	s0, [r7, #4]
  batteryVoltage = voltage;
 80051ce:	4a18      	ldr	r2, [pc, #96]	; (8005230 <pmSetBatteryVoltage+0x6c>)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6013      	str	r3, [r2, #0]
  batteryVoltageMV = (uint16_t)(voltage * 1000);
 80051d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80051d8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005234 <pmSetBatteryVoltage+0x70>
 80051dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051e4:	ee17 3a90 	vmov	r3, s15
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	4b13      	ldr	r3, [pc, #76]	; (8005238 <pmSetBatteryVoltage+0x74>)
 80051ec:	801a      	strh	r2, [r3, #0]
  if (batteryVoltageMax < voltage)
 80051ee:	4b13      	ldr	r3, [pc, #76]	; (800523c <pmSetBatteryVoltage+0x78>)
 80051f0:	edd3 7a00 	vldr	s15, [r3]
 80051f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80051f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005200:	dd02      	ble.n	8005208 <pmSetBatteryVoltage+0x44>
  {
    batteryVoltageMax = voltage;
 8005202:	4a0e      	ldr	r2, [pc, #56]	; (800523c <pmSetBatteryVoltage+0x78>)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6013      	str	r3, [r2, #0]
  }
  if (batteryVoltageMin > voltage)
 8005208:	4b0d      	ldr	r3, [pc, #52]	; (8005240 <pmSetBatteryVoltage+0x7c>)
 800520a:	edd3 7a00 	vldr	s15, [r3]
 800520e:	ed97 7a01 	vldr	s14, [r7, #4]
 8005212:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521a:	d400      	bmi.n	800521e <pmSetBatteryVoltage+0x5a>
  {
    batteryVoltageMin = voltage;
  }
}
 800521c:	e002      	b.n	8005224 <pmSetBatteryVoltage+0x60>
    batteryVoltageMin = voltage;
 800521e:	4a08      	ldr	r2, [pc, #32]	; (8005240 <pmSetBatteryVoltage+0x7c>)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6013      	str	r3, [r2, #0]
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	20008214 	.word	0x20008214
 8005234:	447a0000 	.word	0x447a0000
 8005238:	20008218 	.word	0x20008218
 800523c:	2000821c 	.word	0x2000821c
 8005240:	2000029c 	.word	0x2000029c

08005244 <pmSystemShutdown>:

/**
 * Shutdown system
 */
static void pmSystemShutdown(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
#ifdef CONFIG_PM_AUTO_SHUTDOWN
  systemRequestShutdown();
#endif
}
 8005248:	bf00      	nop
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
	...

08005254 <pmBatteryChargeFromVoltage>:
/**
 * Returns a number from 0 to 9 where 0 is completely discharged
 * and 9 is 90% charged.
 */
static int32_t pmBatteryChargeFromVoltage(float voltage)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	ed87 0a01 	vstr	s0, [r7, #4]
  int charge = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]

  if (voltage < LiPoTypicalChargeCurve[0])
 8005262:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005266:	edd7 7a01 	vldr	s15, [r7, #4]
 800526a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800526e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005272:	d501      	bpl.n	8005278 <pmBatteryChargeFromVoltage+0x24>
  {
    return 0;
 8005274:	2300      	movs	r3, #0
 8005276:	e01c      	b.n	80052b2 <pmBatteryChargeFromVoltage+0x5e>
  }
  if (voltage > LiPoTypicalChargeCurve[9])
 8005278:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80052c0 <pmBatteryChargeFromVoltage+0x6c>
 800527c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005288:	dd01      	ble.n	800528e <pmBatteryChargeFromVoltage+0x3a>
  {
    return 9;
 800528a:	2309      	movs	r3, #9
 800528c:	e011      	b.n	80052b2 <pmBatteryChargeFromVoltage+0x5e>
  }
  while (voltage >  LiPoTypicalChargeCurve[charge])
 800528e:	e002      	b.n	8005296 <pmBatteryChargeFromVoltage+0x42>
  {
    charge++;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3301      	adds	r3, #1
 8005294:	60fb      	str	r3, [r7, #12]
  while (voltage >  LiPoTypicalChargeCurve[charge])
 8005296:	4a0b      	ldr	r2, [pc, #44]	; (80052c4 <pmBatteryChargeFromVoltage+0x70>)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	edd3 7a00 	vldr	s15, [r3]
 80052a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80052a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ae:	dcef      	bgt.n	8005290 <pmBatteryChargeFromVoltage+0x3c>
  }

  return charge;
 80052b0:	68fb      	ldr	r3, [r7, #12]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40833333 	.word	0x40833333
 80052c4:	0802d7e0 	.word	0x0802d7e0

080052c8 <pmGetBatteryVoltage>:


float pmGetBatteryVoltage(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  return batteryVoltage;
 80052cc:	4b04      	ldr	r3, [pc, #16]	; (80052e0 <pmGetBatteryVoltage+0x18>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	ee07 3a90 	vmov	s15, r3
}
 80052d4:	eeb0 0a67 	vmov.f32	s0, s15
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	20008214 	.word	0x20008214

080052e4 <pmGracefulShutdown>:
/*
 * Iterate through all registered shutdown callbacks and call them one after
 * the other, when all is done, send the ACK back to nrf to allow power off.
 */
static void pmGracefulShutdown()
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b094      	sub	sp, #80	; 0x50
 80052e8:	af00      	add	r7, sp, #0
  for (int i = 0; i < graceful_shutdown_callbacks_index; i++) {
 80052ea:	2300      	movs	r3, #0
 80052ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052ee:	e009      	b.n	8005304 <pmGracefulShutdown+0x20>
    graceful_shutdown_callback_t callback = graceful_shutdown_callbacks[i];
 80052f0:	4a0f      	ldr	r2, [pc, #60]	; (8005330 <pmGracefulShutdown+0x4c>)
 80052f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f8:	64bb      	str	r3, [r7, #72]	; 0x48

    callback();
 80052fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052fc:	4798      	blx	r3
  for (int i = 0; i < graceful_shutdown_callbacks_index; i++) {
 80052fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005300:	3301      	adds	r3, #1
 8005302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005304:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <pmGracefulShutdown+0x50>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800530a:	429a      	cmp	r2, r3
 800530c:	dbf0      	blt.n	80052f0 <pmGracefulShutdown+0xc>
  }

  SyslinkPacket slp = {
 800530e:	1d3b      	adds	r3, r7, #4
 8005310:	2242      	movs	r2, #66	; 0x42
 8005312:	2100      	movs	r1, #0
 8005314:	4618      	mov	r0, r3
 8005316:	f01e fafb 	bl	8023910 <memset>
 800531a:	2316      	movs	r3, #22
 800531c:	713b      	strb	r3, [r7, #4]
    .type = SYSLINK_PM_SHUTDOWN_ACK,
  };

  syslinkSendPacket(&slp);
 800531e:	1d3b      	adds	r3, r7, #4
 8005320:	4618      	mov	r0, r3
 8005322:	f7fe ff63 	bl	80041ec <syslinkSendPacket>
}
 8005326:	bf00      	nop
 8005328:	3750      	adds	r7, #80	; 0x50
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20008458 	.word	0x20008458
 8005334:	20008454 	.word	0x20008454

08005338 <pmSyslinkUpdate>:

  syslinkSendPacket(&slp);
}
*/
void pmSyslinkUpdate(SyslinkPacket *slp)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  if (slp->type == SYSLINK_PM_BATTERY_STATE) {
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b13      	cmp	r3, #19
 8005346:	d11b      	bne.n	8005380 <pmSyslinkUpdate+0x48>
    // First byte of the packet contains some PM flags such as USB power, charging etc.
    memcpy(&pmSyslinkInfo, &slp->data[0], sizeof(pmSyslinkInfo));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	1c9a      	adds	r2, r3, #2
 800534c:	4b12      	ldr	r3, [pc, #72]	; (8005398 <pmSyslinkUpdate+0x60>)
 800534e:	6810      	ldr	r0, [r2, #0]
 8005350:	6851      	ldr	r1, [r2, #4]
 8005352:	c303      	stmia	r3!, {r0, r1}
 8005354:	7a12      	ldrb	r2, [r2, #8]
 8005356:	701a      	strb	r2, [r3, #0]

    // If using voltage measurements from external battery, we'll set the
    // voltage to this instead of the one sent from syslink.
    if (isExtBatVoltDeckPinSet) {
 8005358:	4b10      	ldr	r3, [pc, #64]	; (800539c <pmSyslinkUpdate+0x64>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d007      	beq.n	8005370 <pmSyslinkUpdate+0x38>
      pmSetBatteryVoltage(extBatteryVoltage);
 8005360:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <pmSyslinkUpdate+0x68>)
 8005362:	edd3 7a00 	vldr	s15, [r3]
 8005366:	eeb0 0a67 	vmov.f32	s0, s15
 800536a:	f7ff ff2b 	bl	80051c4 <pmSetBatteryVoltage>
    temp = pmSyslinkInfo.temp;
#endif
  } else if (slp->type == SYSLINK_PM_SHUTDOWN_REQUEST) {
    workerSchedule(pmGracefulShutdown, NULL);
  }
}
 800536e:	e00f      	b.n	8005390 <pmSyslinkUpdate+0x58>
      pmSetBatteryVoltage(pmSyslinkInfo.vBat);
 8005370:	4b09      	ldr	r3, [pc, #36]	; (8005398 <pmSyslinkUpdate+0x60>)
 8005372:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8005376:	ee00 3a10 	vmov	s0, r3
 800537a:	f7ff ff23 	bl	80051c4 <pmSetBatteryVoltage>
}
 800537e:	e007      	b.n	8005390 <pmSyslinkUpdate+0x58>
  } else if (slp->type == SYSLINK_PM_SHUTDOWN_REQUEST) {
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b15      	cmp	r3, #21
 8005386:	d103      	bne.n	8005390 <pmSyslinkUpdate+0x58>
    workerSchedule(pmGracefulShutdown, NULL);
 8005388:	2100      	movs	r1, #0
 800538a:	4806      	ldr	r0, [pc, #24]	; (80053a4 <pmSyslinkUpdate+0x6c>)
 800538c:	f00e fea6 	bl	80140dc <workerSchedule>
}
 8005390:	bf00      	nop
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20008244 	.word	0x20008244
 800539c:	20008226 	.word	0x20008226
 80053a0:	20008220 	.word	0x20008220
 80053a4:	080052e5 	.word	0x080052e5

080053a8 <pmSetChargeState>:

void pmSetChargeState(PMChargeStates chgState)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	71fb      	strb	r3, [r7, #7]
  // TODO: Send syslink package with charge state
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <pmUpdateState>:

PMStates pmUpdateState()
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
  bool usbPluggedIn = pmSyslinkInfo.usbPluggedIn;
 80053c6:	4b24      	ldr	r3, [pc, #144]	; (8005458 <pmUpdateState+0x98>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	bf14      	ite	ne
 80053d4:	2301      	movne	r3, #1
 80053d6:	2300      	moveq	r3, #0
 80053d8:	71bb      	strb	r3, [r7, #6]
  bool isCharging = pmSyslinkInfo.isCharging;
 80053da:	4b1f      	ldr	r3, [pc, #124]	; (8005458 <pmUpdateState+0x98>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	bf14      	ite	ne
 80053e8:	2301      	movne	r3, #1
 80053ea:	2300      	moveq	r3, #0
 80053ec:	717b      	strb	r3, [r7, #5]
  PMStates nextState;

  uint32_t batteryLowTime = xTaskGetTickCount() - batteryLowTimeStamp;
 80053ee:	f01a fc37 	bl	801fc60 <xTaskGetTickCount>
 80053f2:	4602      	mov	r2, r0
 80053f4:	4b19      	ldr	r3, [pc, #100]	; (800545c <pmUpdateState+0x9c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	603b      	str	r3, [r7, #0]

  if (ignoreChargedState)
 80053fc:	4b18      	ldr	r3, [pc, #96]	; (8005460 <pmUpdateState+0xa0>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <pmUpdateState+0x4a>
  {
    // For some scenarios we might not care about the charging/charged state.
    nextState = battery;
 8005404:	2300      	movs	r3, #0
 8005406:	71fb      	strb	r3, [r7, #7]
 8005408:	e016      	b.n	8005438 <pmUpdateState+0x78>
  }
  else if (usbPluggedIn && !isCharging)
 800540a:	79bb      	ldrb	r3, [r7, #6]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d008      	beq.n	8005422 <pmUpdateState+0x62>
 8005410:	797b      	ldrb	r3, [r7, #5]
 8005412:	f083 0301 	eor.w	r3, r3, #1
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <pmUpdateState+0x62>
  {
    nextState = charged;
 800541c:	2302      	movs	r3, #2
 800541e:	71fb      	strb	r3, [r7, #7]
 8005420:	e00a      	b.n	8005438 <pmUpdateState+0x78>
  }
  else if (usbPluggedIn && isCharging)
 8005422:	79bb      	ldrb	r3, [r7, #6]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d005      	beq.n	8005434 <pmUpdateState+0x74>
 8005428:	797b      	ldrb	r3, [r7, #5]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <pmUpdateState+0x74>
  {
    nextState = charging;
 800542e:	2301      	movs	r3, #1
 8005430:	71fb      	strb	r3, [r7, #7]
 8005432:	e001      	b.n	8005438 <pmUpdateState+0x78>
  }
  else
  {
    nextState = battery;
 8005434:	2300      	movs	r3, #0
 8005436:	71fb      	strb	r3, [r7, #7]
  }

  if (nextState == battery && batteryLowTime > PM_BAT_LOW_TIMEOUT)
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <pmUpdateState+0x8c>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	f241 3288 	movw	r2, #5000	; 0x1388
 8005444:	4293      	cmp	r3, r2
 8005446:	d901      	bls.n	800544c <pmUpdateState+0x8c>
  {
    // This is to avoid setting state to lowPower when we're plugged in to USB.
    nextState = lowPower;
 8005448:	2303      	movs	r3, #3
 800544a:	71fb      	strb	r3, [r7, #7]
  }

  return nextState;
 800544c:	79fb      	ldrb	r3, [r7, #7]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20008244 	.word	0x20008244
 800545c:	20008238 	.word	0x20008238
 8005460:	2000824e 	.word	0x2000824e

08005464 <pmMeasureExtBatteryCurrent>:
  extBatCurrAmpPerVolt = ampPerVolt;
}
*/

float pmMeasureExtBatteryCurrent(void)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
  float current;

  if (isExtBatCurrDeckPinSet)
 800546a:	4b0f      	ldr	r3, [pc, #60]	; (80054a8 <pmMeasureExtBatteryCurrent+0x44>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00d      	beq.n	800548e <pmMeasureExtBatteryCurrent+0x2a>
  {
    current = adc1Val * extBatCurrAmpPerVolt;
 8005472:	4b0e      	ldr	r3, [pc, #56]	; (80054ac <pmMeasureExtBatteryCurrent+0x48>)
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800547e:	4b0c      	ldr	r3, [pc, #48]	; (80054b0 <pmMeasureExtBatteryCurrent+0x4c>)
 8005480:	edd3 7a00 	vldr	s15, [r3]
 8005484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005488:	edc7 7a01 	vstr	s15, [r7, #4]
 800548c:	e002      	b.n	8005494 <pmMeasureExtBatteryCurrent+0x30>
  }
  else
  {
    current = 0.0;
 800548e:	f04f 0300 	mov.w	r3, #0
 8005492:	607b      	str	r3, [r7, #4]
  }

  return current;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	ee07 3a90 	vmov	s15, r3
}
 800549a:	eeb0 0a67 	vmov.f32	s0, s15
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	20008230 	.word	0x20008230
 80054ac:	20008250 	.word	0x20008250
 80054b0:	20008234 	.word	0x20008234

080054b4 <pmMeasureExtBatteryVoltage>:
  extBatVoltMultiplier = multiplier;
}
*/

float pmMeasureExtBatteryVoltage(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
  float voltage;

  if (isExtBatVoltDeckPinSet)
 80054ba:	4b0f      	ldr	r3, [pc, #60]	; (80054f8 <pmMeasureExtBatteryVoltage+0x44>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00d      	beq.n	80054de <pmMeasureExtBatteryVoltage+0x2a>
  {
    voltage =  adc2Val * extBatVoltMultiplier;
 80054c2:	4b0e      	ldr	r3, [pc, #56]	; (80054fc <pmMeasureExtBatteryVoltage+0x48>)
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	ee07 3a90 	vmov	s15, r3
 80054ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054ce:	4b0c      	ldr	r3, [pc, #48]	; (8005500 <pmMeasureExtBatteryVoltage+0x4c>)
 80054d0:	edd3 7a00 	vldr	s15, [r3]
 80054d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80054dc:	e002      	b.n	80054e4 <pmMeasureExtBatteryVoltage+0x30>
  }
  else
  {
    voltage = 0.0;
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	607b      	str	r3, [r7, #4]
  }

  return voltage;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	ee07 3a90 	vmov	s15, r3
}
 80054ea:	eeb0 0a67 	vmov.f32	s0, s15
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	20008226 	.word	0x20008226
 80054fc:	20008252 	.word	0x20008252
 8005500:	20008228 	.word	0x20008228

08005504 <pmTask>:
bool pmIsDischarging(void) {
  return (pmState == lowPower) || (pmState == battery);
}
*/
void pmTask(void *param)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  PMStates pmStateOld = battery;
 800550c:	2300      	movs	r3, #0
 800550e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickCount;

  vTaskSetApplicationTaskTag(0, (void*)TASK_PM_ID_NBR);
 8005510:	2105      	movs	r1, #5
 8005512:	2000      	movs	r0, #0
 8005514:	f01a fd02 	bl	801ff1c <vTaskSetApplicationTaskTag>

  tickCount = xTaskGetTickCount();
 8005518:	f01a fba2 	bl	801fc60 <xTaskGetTickCount>
 800551c:	6138      	str	r0, [r7, #16]
  batteryLowTimeStamp = tickCount;
 800551e:	4a6f      	ldr	r2, [pc, #444]	; (80056dc <pmTask+0x1d8>)
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	6013      	str	r3, [r2, #0]
  batteryCriticalLowTimeStamp = tickCount;
 8005524:	4a6e      	ldr	r2, [pc, #440]	; (80056e0 <pmTask+0x1dc>)
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	6013      	str	r3, [r2, #0]

  pmSetChargeState(charge500mA);
 800552a:	2001      	movs	r0, #1
 800552c:	f7ff ff3c 	bl	80053a8 <pmSetChargeState>
  systemWaitStart();
 8005530:	f000 fa7c 	bl	8005a2c <systemWaitStart>
  // after system startup to avoid syslink queue overflow.
//  pmEnableBatteryStatusAutoupdate();

  while(1)
  {
    vTaskDelay(100);
 8005534:	2064      	movs	r0, #100	; 0x64
 8005536:	f01a f9d5 	bl	801f8e4 <vTaskDelay>
    tickCount = xTaskGetTickCount();
 800553a:	f01a fb91 	bl	801fc60 <xTaskGetTickCount>
 800553e:	6138      	str	r0, [r7, #16]

    extBatteryVoltage = pmMeasureExtBatteryVoltage();
 8005540:	f7ff ffb8 	bl	80054b4 <pmMeasureExtBatteryVoltage>
 8005544:	eef0 7a40 	vmov.f32	s15, s0
 8005548:	4b66      	ldr	r3, [pc, #408]	; (80056e4 <pmTask+0x1e0>)
 800554a:	edc3 7a00 	vstr	s15, [r3]
    extBatteryVoltageMV = (uint16_t)(extBatteryVoltage * 1000);
 800554e:	4b65      	ldr	r3, [pc, #404]	; (80056e4 <pmTask+0x1e0>)
 8005550:	edd3 7a00 	vldr	s15, [r3]
 8005554:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80056e8 <pmTask+0x1e4>
 8005558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800555c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005560:	ee17 3a90 	vmov	r3, s15
 8005564:	b29a      	uxth	r2, r3
 8005566:	4b61      	ldr	r3, [pc, #388]	; (80056ec <pmTask+0x1e8>)
 8005568:	801a      	strh	r2, [r3, #0]
    extBatteryCurrent = pmMeasureExtBatteryCurrent();
 800556a:	f7ff ff7b 	bl	8005464 <pmMeasureExtBatteryCurrent>
 800556e:	eef0 7a40 	vmov.f32	s15, s0
 8005572:	4b5f      	ldr	r3, [pc, #380]	; (80056f0 <pmTask+0x1ec>)
 8005574:	edc3 7a00 	vstr	s15, [r3]
    batteryLevel = pmBatteryChargeFromVoltage(pmGetBatteryVoltage()) * 10;
 8005578:	f7ff fea6 	bl	80052c8 <pmGetBatteryVoltage>
 800557c:	eef0 7a40 	vmov.f32	s15, s0
 8005580:	eeb0 0a67 	vmov.f32	s0, s15
 8005584:	f7ff fe66 	bl	8005254 <pmBatteryChargeFromVoltage>
 8005588:	4603      	mov	r3, r0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	0092      	lsls	r2, r2, #2
 8005590:	4413      	add	r3, r2
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	b2da      	uxtb	r2, r3
 8005596:	4b57      	ldr	r3, [pc, #348]	; (80056f4 <pmTask+0x1f0>)
 8005598:	701a      	strb	r2, [r3, #0]

    if (pmGetBatteryVoltage() > batteryLowVoltage)
 800559a:	f7ff fe95 	bl	80052c8 <pmGetBatteryVoltage>
 800559e:	eeb0 7a40 	vmov.f32	s14, s0
 80055a2:	4b55      	ldr	r3, [pc, #340]	; (80056f8 <pmTask+0x1f4>)
 80055a4:	edd3 7a00 	vldr	s15, [r3]
 80055a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b0:	dd02      	ble.n	80055b8 <pmTask+0xb4>
    {
      batteryLowTimeStamp = tickCount;
 80055b2:	4a4a      	ldr	r2, [pc, #296]	; (80056dc <pmTask+0x1d8>)
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	6013      	str	r3, [r2, #0]
    }
    if (pmGetBatteryVoltage() > batteryCriticalLowVoltage)
 80055b8:	f7ff fe86 	bl	80052c8 <pmGetBatteryVoltage>
 80055bc:	eeb0 7a40 	vmov.f32	s14, s0
 80055c0:	4b4e      	ldr	r3, [pc, #312]	; (80056fc <pmTask+0x1f8>)
 80055c2:	edd3 7a00 	vldr	s15, [r3]
 80055c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ce:	dd02      	ble.n	80055d6 <pmTask+0xd2>
    {
      batteryCriticalLowTimeStamp = tickCount;
 80055d0:	4a43      	ldr	r2, [pc, #268]	; (80056e0 <pmTask+0x1dc>)
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	6013      	str	r3, [r2, #0]
    }

    pmState = pmUpdateState();
 80055d6:	f7ff fef3 	bl	80053c0 <pmUpdateState>
 80055da:	4603      	mov	r3, r0
 80055dc:	461a      	mov	r2, r3
 80055de:	4b48      	ldr	r3, [pc, #288]	; (8005700 <pmTask+0x1fc>)
 80055e0:	701a      	strb	r2, [r3, #0]

    if (pmState != pmStateOld)
 80055e2:	4b47      	ldr	r3, [pc, #284]	; (8005700 <pmTask+0x1fc>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	7dfa      	ldrb	r2, [r7, #23]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d03b      	beq.n	8005664 <pmTask+0x160>
    {
      // Actions on state change
      switch (pmState)
 80055ec:	4b44      	ldr	r3, [pc, #272]	; (8005700 <pmTask+0x1fc>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d833      	bhi.n	800565c <pmTask+0x158>
 80055f4:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <pmTask+0xf8>)
 80055f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fa:	bf00      	nop
 80055fc:	08005649 	.word	0x08005649
 8005600:	08005621 	.word	0x08005621
 8005604:	0800560d 	.word	0x0800560d
 8005608:	0800563b 	.word	0x0800563b
      {
        case charged:
          ledseqStop(&seq_charging);
 800560c:	483d      	ldr	r0, [pc, #244]	; (8005704 <pmTask+0x200>)
 800560e:	f7ff fbff 	bl	8004e10 <ledseqStop>
          ledseqRunBlocking(&seq_charged);
 8005612:	483d      	ldr	r0, [pc, #244]	; (8005708 <pmTask+0x204>)
 8005614:	f7ff fba0 	bl	8004d58 <ledseqRunBlocking>
          soundSetEffect(SND_BAT_FULL);
 8005618:	2004      	movs	r0, #4
 800561a:	f000 f879 	bl	8005710 <soundSetEffect>
          break;
 800561e:	e01e      	b.n	800565e <pmTask+0x15a>
        case charging:
          ledseqStop(&seq_lowbat);
 8005620:	483a      	ldr	r0, [pc, #232]	; (800570c <pmTask+0x208>)
 8005622:	f7ff fbf5 	bl	8004e10 <ledseqStop>
          ledseqStop(&seq_charged);
 8005626:	4838      	ldr	r0, [pc, #224]	; (8005708 <pmTask+0x204>)
 8005628:	f7ff fbf2 	bl	8004e10 <ledseqStop>
          ledseqRunBlocking(&seq_charging);
 800562c:	4835      	ldr	r0, [pc, #212]	; (8005704 <pmTask+0x200>)
 800562e:	f7ff fb93 	bl	8004d58 <ledseqRunBlocking>
          soundSetEffect(SND_USB_CONN);
 8005632:	2003      	movs	r0, #3
 8005634:	f000 f86c 	bl	8005710 <soundSetEffect>
          break;
 8005638:	e011      	b.n	800565e <pmTask+0x15a>
        case lowPower:
          ledseqRunBlocking(&seq_lowbat);
 800563a:	4834      	ldr	r0, [pc, #208]	; (800570c <pmTask+0x208>)
 800563c:	f7ff fb8c 	bl	8004d58 <ledseqRunBlocking>
          soundSetEffect(SND_BAT_LOW);
 8005640:	2005      	movs	r0, #5
 8005642:	f000 f865 	bl	8005710 <soundSetEffect>
          break;
 8005646:	e00a      	b.n	800565e <pmTask+0x15a>
        case battery:
          ledseqRunBlocking(&seq_charging);
 8005648:	482e      	ldr	r0, [pc, #184]	; (8005704 <pmTask+0x200>)
 800564a:	f7ff fb85 	bl	8004d58 <ledseqRunBlocking>
          ledseqRun(&seq_charged);
 800564e:	482e      	ldr	r0, [pc, #184]	; (8005708 <pmTask+0x204>)
 8005650:	f7ff fb66 	bl	8004d20 <ledseqRun>
          soundSetEffect(SND_USB_DISC);
 8005654:	2002      	movs	r0, #2
 8005656:	f000 f85b 	bl	8005710 <soundSetEffect>
          break;
 800565a:	e000      	b.n	800565e <pmTask+0x15a>
        default:
          break;
 800565c:	bf00      	nop
      }
      pmStateOld = pmState;
 800565e:	4b28      	ldr	r3, [pc, #160]	; (8005700 <pmTask+0x1fc>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	75fb      	strb	r3, [r7, #23]
    }
    // Actions during state
    switch (pmState)
 8005664:	4b26      	ldr	r3, [pc, #152]	; (8005700 <pmTask+0x1fc>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b03      	cmp	r3, #3
 800566a:	d832      	bhi.n	80056d2 <pmTask+0x1ce>
 800566c:	a201      	add	r2, pc, #4	; (adr r2, 8005674 <pmTask+0x170>)
 800566e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005672:	bf00      	nop
 8005674:	080056cd 	.word	0x080056cd
 8005678:	08005685 	.word	0x08005685
 800567c:	080056d3 	.word	0x080056d3
 8005680:	080056b3 	.word	0x080056b3
      case charged:
        break;
      case charging:
        {
          // Charge level between 0.0 and 1.0
          float chargeLevel = pmBatteryChargeFromVoltage(pmGetBatteryVoltage()) / 10.0f;
 8005684:	f7ff fe20 	bl	80052c8 <pmGetBatteryVoltage>
 8005688:	eef0 7a40 	vmov.f32	s15, s0
 800568c:	eeb0 0a67 	vmov.f32	s0, s15
 8005690:	f7ff fde0 	bl	8005254 <pmBatteryChargeFromVoltage>
 8005694:	ee07 0a90 	vmov	s15, r0
 8005698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800569c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80056a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056a4:	edc7 7a02 	vstr	s15, [r7, #8]
          ledseqSetChargeLevel(chargeLevel);
 80056a8:	ed97 0a02 	vldr	s0, [r7, #8]
 80056ac:	f7ff fb88 	bl	8004dc0 <ledseqSetChargeLevel>
        }
        break;
 80056b0:	e012      	b.n	80056d8 <pmTask+0x1d4>
      case lowPower:
        {
          uint32_t batteryCriticalLowTime;

          batteryCriticalLowTime = tickCount - batteryCriticalLowTimeStamp;
 80056b2:	4b0b      	ldr	r3, [pc, #44]	; (80056e0 <pmTask+0x1dc>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	60fb      	str	r3, [r7, #12]
          if (batteryCriticalLowTime > PM_BAT_CRITICAL_LOW_TIMEOUT)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d907      	bls.n	80056d6 <pmTask+0x1d2>
          {
            pmSystemShutdown();
 80056c6:	f7ff fdbd 	bl	8005244 <pmSystemShutdown>
          }
        }
        break;
 80056ca:	e004      	b.n	80056d6 <pmTask+0x1d2>
      case battery:
        {
//          if ((commanderGetInactivityTime() > PM_SYSTEM_SHUTDOWN_TIMEOUT))
          {
            pmSystemShutdown();
 80056cc:	f7ff fdba 	bl	8005244 <pmSystemShutdown>
          }
        }
        break;
 80056d0:	e002      	b.n	80056d8 <pmTask+0x1d4>
      default:
        break;
 80056d2:	bf00      	nop
 80056d4:	e72e      	b.n	8005534 <pmTask+0x30>
        break;
 80056d6:	bf00      	nop
    vTaskDelay(100);
 80056d8:	e72c      	b.n	8005534 <pmTask+0x30>
 80056da:	bf00      	nop
 80056dc:	20008238 	.word	0x20008238
 80056e0:	2000823c 	.word	0x2000823c
 80056e4:	20008220 	.word	0x20008220
 80056e8:	447a0000 	.word	0x447a0000
 80056ec:	20008224 	.word	0x20008224
 80056f0:	2000822c 	.word	0x2000822c
 80056f4:	2000824d 	.word	0x2000824d
 80056f8:	200002a4 	.word	0x200002a4
 80056fc:	200002a0 	.word	0x200002a0
 8005700:	20008241 	.word	0x20008241
 8005704:	200001f0 	.word	0x200001f0
 8005708:	200001c8 	.word	0x200001c8
 800570c:	200000b0 	.word	0x200000b0

08005710 <soundSetEffect>:
{
  return isInit;
}

void soundSetEffect(uint32_t effect)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  sys_effect = effect;
 8005718:	4a04      	ldr	r2, [pc, #16]	; (800572c <soundSetEffect+0x1c>)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6013      	str	r3, [r2, #0]
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	20008474 	.word	0x20008474

08005730 <storageStore>:

  return pass;
}

bool storageStore(const char* key, const void* buffer, size_t length)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  if (!isInit) {
 800573c:	4b0e      	ldr	r3, [pc, #56]	; (8005778 <storageStore+0x48>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	f083 0301 	eor.w	r3, r3, #1
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <storageStore+0x1e>
    return false;
 800574a:	2300      	movs	r3, #0
 800574c:	e010      	b.n	8005770 <storageStore+0x40>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 800574e:	4b0b      	ldr	r3, [pc, #44]	; (800577c <storageStore+0x4c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005756:	4618      	mov	r0, r3
 8005758:	f019 fb94 	bl	801ee84 <xQueueSemaphoreTake>

//  bool result = kveStore(&kve, key, buffer, length);

  bool result = true;
 800575c:	2301      	movs	r3, #1
 800575e:	75fb      	strb	r3, [r7, #23]

  xSemaphoreGive(storageMutex);
 8005760:	4b06      	ldr	r3, [pc, #24]	; (800577c <storageStore+0x4c>)
 8005762:	6818      	ldr	r0, [r3, #0]
 8005764:	2300      	movs	r3, #0
 8005766:	2200      	movs	r2, #0
 8005768:	2100      	movs	r1, #0
 800576a:	f019 f909 	bl	801e980 <xQueueGenericSend>

  return result;
 800576e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	20008480 	.word	0x20008480
 800577c:	2000847c 	.word	0x2000847c

08005780 <storageForeach>:


bool storageForeach(const char *prefix, storageFunc_t func)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
   if (!isInit) {
 800578a:	4b0f      	ldr	r3, [pc, #60]	; (80057c8 <storageForeach+0x48>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	f083 0301 	eor.w	r3, r3, #1
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <storageForeach+0x1c>
    return 0;
 8005798:	2300      	movs	r3, #0
 800579a:	e010      	b.n	80057be <storageForeach+0x3e>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 800579c:	4b0b      	ldr	r3, [pc, #44]	; (80057cc <storageForeach+0x4c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80057a4:	4618      	mov	r0, r3
 80057a6:	f019 fb6d 	bl	801ee84 <xQueueSemaphoreTake>

//  bool success = kveForeach(&kve, prefix, func);

  bool success = true;
 80057aa:	2301      	movs	r3, #1
 80057ac:	73fb      	strb	r3, [r7, #15]

  xSemaphoreGive(storageMutex);
 80057ae:	4b07      	ldr	r3, [pc, #28]	; (80057cc <storageForeach+0x4c>)
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	2300      	movs	r3, #0
 80057b4:	2200      	movs	r2, #0
 80057b6:	2100      	movs	r1, #0
 80057b8:	f019 f8e2 	bl	801e980 <xQueueGenericSend>

  return success;
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20008480 	.word	0x20008480
 80057cc:	2000847c 	.word	0x2000847c

080057d0 <storageFetch>:

size_t storageFetch(const char *key, void* buffer, size_t length)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  if (!isInit) {
 80057dc:	4b0e      	ldr	r3, [pc, #56]	; (8005818 <storageFetch+0x48>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	f083 0301 	eor.w	r3, r3, #1
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <storageFetch+0x1e>
    return 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	e010      	b.n	8005810 <storageFetch+0x40>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 80057ee:	4b0b      	ldr	r3, [pc, #44]	; (800581c <storageFetch+0x4c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80057f6:	4618      	mov	r0, r3
 80057f8:	f019 fb44 	bl	801ee84 <xQueueSemaphoreTake>

//  size_t result = kveFetch(&kve, key, buffer, length);


  size_t result = 0;
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]

  xSemaphoreGive(storageMutex);
 8005800:	4b06      	ldr	r3, [pc, #24]	; (800581c <storageFetch+0x4c>)
 8005802:	6818      	ldr	r0, [r3, #0]
 8005804:	2300      	movs	r3, #0
 8005806:	2200      	movs	r2, #0
 8005808:	2100      	movs	r1, #0
 800580a:	f019 f8b9 	bl	801e980 <xQueueGenericSend>

  return result;
 800580e:	697b      	ldr	r3, [r7, #20]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	20008480 	.word	0x20008480
 800581c:	2000847c 	.word	0x2000847c

08005820 <storageDelete>:

bool storageDelete(const char* key)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  if (!isInit) {
 8005828:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <storageDelete+0x44>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	f083 0301 	eor.w	r3, r3, #1
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <storageDelete+0x1a>
    return false;
 8005836:	2300      	movs	r3, #0
 8005838:	e010      	b.n	800585c <storageDelete+0x3c>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 800583a:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <storageDelete+0x48>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005842:	4618      	mov	r0, r3
 8005844:	f019 fb1e 	bl	801ee84 <xQueueSemaphoreTake>

//  bool result = kveDelete(&kve, key);

  bool result = true;
 8005848:	2301      	movs	r3, #1
 800584a:	73fb      	strb	r3, [r7, #15]

  xSemaphoreGive(storageMutex);
 800584c:	4b06      	ldr	r3, [pc, #24]	; (8005868 <storageDelete+0x48>)
 800584e:	6818      	ldr	r0, [r3, #0]
 8005850:	2300      	movs	r3, #0
 8005852:	2200      	movs	r2, #0
 8005854:	2100      	movs	r1, #0
 8005856:	f019 f893 	bl	801e980 <xQueueGenericSend>

  return result;
 800585a:	7bfb      	ldrb	r3, [r7, #15]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20008480 	.word	0x20008480
 8005868:	2000847c 	.word	0x2000847c

0800586c <storageReformat>:

bool storageReformat() {
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
  DEBUG_PRINT("Reformatting storage ...\n");
 8005872:	4917      	ldr	r1, [pc, #92]	; (80058d0 <storageReformat+0x64>)
 8005874:	2000      	movs	r0, #0
 8005876:	f00b f90d 	bl	8010a94 <SEGGER_RTT_printf>

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 800587a:	4b16      	ldr	r3, [pc, #88]	; (80058d4 <storageReformat+0x68>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005882:	4618      	mov	r0, r3
 8005884:	f019 fafe 	bl	801ee84 <xQueueSemaphoreTake>

//  kveFormat(&kve);
//  bool pass = kveCheck(&kve);

  bool pass = true;
 8005888:	2301      	movs	r3, #1
 800588a:	71fb      	strb	r3, [r7, #7]

  xSemaphoreGive(storageMutex);
 800588c:	4b11      	ldr	r3, [pc, #68]	; (80058d4 <storageReformat+0x68>)
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	2300      	movs	r3, #0
 8005892:	2200      	movs	r2, #0
 8005894:	2100      	movs	r1, #0
 8005896:	f019 f873 	bl	801e980 <xQueueGenericSend>

  DEBUG_PRINT("Storage check %s.\n", pass?"[OK]":"[FAIL]");
 800589a:	79fb      	ldrb	r3, [r7, #7]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <storageReformat+0x38>
 80058a0:	4b0d      	ldr	r3, [pc, #52]	; (80058d8 <storageReformat+0x6c>)
 80058a2:	e000      	b.n	80058a6 <storageReformat+0x3a>
 80058a4:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <storageReformat+0x70>)
 80058a6:	461a      	mov	r2, r3
 80058a8:	490d      	ldr	r1, [pc, #52]	; (80058e0 <storageReformat+0x74>)
 80058aa:	2000      	movs	r0, #0
 80058ac:	f00b f8f2 	bl	8010a94 <SEGGER_RTT_printf>

  if (pass == false) {
 80058b0:	79fb      	ldrb	r3, [r7, #7]
 80058b2:	f083 0301 	eor.w	r3, r3, #1
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <storageReformat+0x58>
    DEBUG_PRINT("Error: Cannot format storage!\n");
 80058bc:	4909      	ldr	r1, [pc, #36]	; (80058e4 <storageReformat+0x78>)
 80058be:	2000      	movs	r0, #0
 80058c0:	f00b f8e8 	bl	8010a94 <SEGGER_RTT_printf>
  }

  return pass;
 80058c4:	79fb      	ldrb	r3, [r7, #7]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	0802a258 	.word	0x0802a258
 80058d4:	2000847c 	.word	0x2000847c
 80058d8:	0802a234 	.word	0x0802a234
 80058dc:	0802a23c 	.word	0x0802a23c
 80058e0:	0802a244 	.word	0x0802a244
 80058e4:	0802a274 	.word	0x0802a274

080058e8 <storagePrintStats>:

void storagePrintStats()
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  DEBUG_PRINT("Efficiency: Data: %d Bytes (%d%%), Keys: %d Bytes (%d%%), Metadata: %d Bytes (%d%%)\n",
    stats.dataSize, (stats.dataSize*100)/stats.totalSize,
    stats.keySize, (stats.keySize*100)/stats.totalSize,
    stats.metadataSize, (stats.metadataSize*100)/stats.totalSize);
    */
}
 80058ec:	bf00      	nop
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
	...

080058f8 <printStats>:

static bool storageStats;

static void printStats(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  if (storageStats) {
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <printStats+0x1c>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <printStats+0x16>
    storagePrintStats();
 8005904:	f7ff fff0 	bl	80058e8 <storagePrintStats>

    storageStats = false;
 8005908:	4b02      	ldr	r3, [pc, #8]	; (8005914 <printStats+0x1c>)
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
  }
}
 800590e:	bf00      	nop
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20008481 	.word	0x20008481

08005918 <doReformat>:

static bool reformatValue;

static void doReformat(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
  if (reformatValue) {
 800591c:	4b03      	ldr	r3, [pc, #12]	; (800592c <doReformat+0x14>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <doReformat+0x10>
    storageReformat();
 8005924:	f7ff ffa2 	bl	800586c <storageReformat>
  }
}
 8005928:	bf00      	nop
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20008482 	.word	0x20008482

08005930 <systemLaunch>:
/* Private functions */
static void systemTask(void *arg);

/* Public functions */
void systemLaunch(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 8005936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800593a:	461a      	mov	r2, r3
 800593c:	4b08      	ldr	r3, [pc, #32]	; (8005960 <systemLaunch+0x30>)
 800593e:	9302      	str	r3, [sp, #8]
 8005940:	4b08      	ldr	r3, [pc, #32]	; (8005964 <systemLaunch+0x34>)
 8005942:	9301      	str	r3, [sp, #4]
 8005944:	2302      	movs	r3, #2
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	2300      	movs	r3, #0
 800594a:	4907      	ldr	r1, [pc, #28]	; (8005968 <systemLaunch+0x38>)
 800594c:	4807      	ldr	r0, [pc, #28]	; (800596c <systemLaunch+0x3c>)
 800594e:	f019 fe11 	bl	801f574 <xTaskCreateStatic>
  DEBUG_PRINT("[TASK] systemTask is running!\n");
 8005952:	4907      	ldr	r1, [pc, #28]	; (8005970 <systemLaunch+0x40>)
 8005954:	2000      	movs	r0, #0
 8005956:	f00b f89d 	bl	8010a94 <SEGGER_RTT_printf>

}
 800595a:	bf00      	nop
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	20002824 	.word	0x20002824
 8005964:	2000849c 	.word	0x2000849c
 8005968:	0802a2c8 	.word	0x0802a2c8
 800596c:	08005975 	.word	0x08005975
 8005970:	0802a2d0 	.word	0x0802a2d0

08005974 <systemTask>:


/* Private functions implementation */

void systemTask(void *arg)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  bool pass = true;
 800597c:	2301      	movs	r3, #1
 800597e:	75fb      	strb	r3, [r7, #23]


  uint32_t ld = SysTick->LOAD;
 8005980:	4b21      	ldr	r3, [pc, #132]	; (8005a08 <systemTask+0x94>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	613b      	str	r3, [r7, #16]
  time1 = DWT->CYCCNT;
 8005986:	4b21      	ldr	r3, [pc, #132]	; (8005a0c <systemTask+0x98>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	4a21      	ldr	r2, [pc, #132]	; (8005a10 <systemTask+0x9c>)
 800598c:	6013      	str	r3, [r2, #0]
  delay_us(1000);	// 1ms
 800598e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005992:	f00f f853 	bl	8014a3c <delay_us>
  time2 = DWT->CYCCNT;
 8005996:	4b1d      	ldr	r3, [pc, #116]	; (8005a0c <systemTask+0x98>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	4a1e      	ldr	r2, [pc, #120]	; (8005a14 <systemTask+0xa0>)
 800599c:	6013      	str	r3, [r2, #0]
  DEBUG_PRINT("delay = %d(us)\n",(uint32_t)(time2-time1)/CLOCK_PER_USEC);
 800599e:	4b1d      	ldr	r3, [pc, #116]	; (8005a14 <systemTask+0xa0>)
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	4b1b      	ldr	r3, [pc, #108]	; (8005a10 <systemTask+0x9c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	4a1b      	ldr	r2, [pc, #108]	; (8005a18 <systemTask+0xa4>)
 80059aa:	fba2 2303 	umull	r2, r3, r2, r3
 80059ae:	091b      	lsrs	r3, r3, #4
 80059b0:	461a      	mov	r2, r3
 80059b2:	491a      	ldr	r1, [pc, #104]	; (8005a1c <systemTask+0xa8>)
 80059b4:	2000      	movs	r0, #0
 80059b6:	f00b f86d 	bl	8010a94 <SEGGER_RTT_printf>


  ledInit();
 80059ba:	f7ff f845 	bl	8004a48 <ledInit>
  ledSet(CHG_LED, SET);
 80059be:	2101      	movs	r1, #1
 80059c0:	2000      	movs	r0, #0
 80059c2:	f7ff f8b3 	bl	8004b2c <ledSet>


#ifdef CONFIG_DEBUG_QUEUE_MONITOR
  queueMonitorInit();
 80059c6:	f00e f81f 	bl	8013a08 <queueMonitorInit>

  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
#endif

  ICM20602_Initialization();	// 여기서 일정 시간 지연이 있어야 STM32 VCP 포트가 활성화됨 원인파악중
 80059ca:	f7fe fe8f 	bl	80046ec <ICM20602_Initialization>

  passthroughInit();	// Create passthrough task
 80059ce:	f000 fc61 	bl	8006294 <passthroughInit>

  systemInit();
 80059d2:	f000 f84d 	bl	8005a70 <systemInit>
  DEBUG_PRINT("System drivers are Initialized!\n");
 80059d6:	4912      	ldr	r1, [pc, #72]	; (8005a20 <systemTask+0xac>)
 80059d8:	2000      	movs	r0, #0
 80059da:	f00b f85b 	bl	8010a94 <SEGGER_RTT_printf>



  commInit();
 80059de:	f7fb fbad 	bl	800113c <commInit>
  DEBUG_PRINT("System communications are Initialized!\n");
 80059e2:	4910      	ldr	r1, [pc, #64]	; (8005a24 <systemTask+0xb0>)
 80059e4:	2000      	movs	r0, #0
 80059e6:	f00b f855 	bl	8010a94 <SEGGER_RTT_printf>

  commanderInit();
 80059ea:	f000 fcc7 	bl	800637c <commanderInit>
  DEBUG_PRINT("System commander are Initialized!\n");
 80059ee:	490e      	ldr	r1, [pc, #56]	; (8005a28 <systemTask+0xb4>)
 80059f0:	2000      	movs	r0, #0
 80059f2:	f00b f84f 	bl	8010a94 <SEGGER_RTT_printf>


  StateEstimatorType estimator = StateEstimatorTypeAutoSelect;
 80059f6:	2300      	movs	r3, #0
 80059f8:	73fb      	strb	r3, [r7, #15]

  #ifdef CONFIG_ESTIMATOR_KALMAN_ENABLE
  estimatorKalmanTaskInit();
 80059fa:	f000 feab 	bl	8006754 <estimatorKalmanTaskInit>
    vTaskDelay(portMAX_DELAY);


    */

}
 80059fe:	bf00      	nop
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	e000e010 	.word	0xe000e010
 8005a0c:	e0001000 	.word	0xe0001000
 8005a10:	20008494 	.word	0x20008494
 8005a14:	20008498 	.word	0x20008498
 8005a18:	38e38e39 	.word	0x38e38e39
 8005a1c:	0802a2f0 	.word	0x0802a2f0
 8005a20:	0802a300 	.word	0x0802a300
 8005a24:	0802a324 	.word	0x0802a324
 8005a28:	0802a34c 	.word	0x0802a34c

08005a2c <systemWaitStart>:



void systemWaitStart(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
  //This permits to guarantee that the system task is initialized before other
  //tasks waits for the start event.
  while(!isInit)
 8005a30:	e002      	b.n	8005a38 <systemWaitStart+0xc>
    vTaskDelay(2);
 8005a32:	2002      	movs	r0, #2
 8005a34:	f019 ff56 	bl	801f8e4 <vTaskDelay>
  while(!isInit)
 8005a38:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <systemWaitStart+0x3c>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	f083 0301 	eor.w	r3, r3, #1
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1f5      	bne.n	8005a32 <systemWaitStart+0x6>

  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 8005a46:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <systemWaitStart+0x40>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f019 fa18 	bl	801ee84 <xQueueSemaphoreTake>
  xSemaphoreGive(canStartMutex);
 8005a54:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <systemWaitStart+0x40>)
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	f018 ff8f 	bl	801e980 <xQueueGenericSend>
}
 8005a62:	bf00      	nop
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20008483 	.word	0x20008483
 8005a6c:	2000889c 	.word	0x2000889c

08005a70 <systemInit>:



// This must be the first module to be initialized!
void systemInit(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af02      	add	r7, sp, #8
  if(isInit)
 8005a76:	4b46      	ldr	r3, [pc, #280]	; (8005b90 <systemInit+0x120>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f040 8085 	bne.w	8005b8a <systemInit+0x11a>
    return;

  canStartMutex = xSemaphoreCreateMutexStatic(&canStartMutexBuffer);
 8005a80:	4944      	ldr	r1, [pc, #272]	; (8005b94 <systemInit+0x124>)
 8005a82:	2001      	movs	r0, #1
 8005a84:	f018 ff61 	bl	801e94a <xQueueCreateMutexStatic>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	4a43      	ldr	r2, [pc, #268]	; (8005b98 <systemInit+0x128>)
 8005a8c:	6013      	str	r3, [r2, #0]
  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 8005a8e:	4b42      	ldr	r3, [pc, #264]	; (8005b98 <systemInit+0x128>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a96:	4618      	mov	r0, r3
 8005a98:	f019 f9f4 	bl	801ee84 <xQueueSemaphoreTake>

  usblinkInit();
 8005a9c:	f000 fbaa 	bl	80061f4 <usblinkInit>
  DEBUG_PRINT("[TASK] usblinkTask is running!\n");
 8005aa0:	493e      	ldr	r1, [pc, #248]	; (8005b9c <systemInit+0x12c>)
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	f00a fff6 	bl	8010a94 <SEGGER_RTT_printf>

  sysLoadInit();
 8005aa8:	f00e f924 	bl	8013cf4 <sysLoadInit>
  DEBUG_PRINT("sysLoadMonitorTimer is Initialized\n");
 8005aac:	493c      	ldr	r1, [pc, #240]	; (8005ba0 <systemInit+0x130>)
 8005aae:	2000      	movs	r0, #0
 8005ab0:	f00a fff0 	bl	8010a94 <SEGGER_RTT_printf>
//  cpxlinkInit();
#endif

  /* Initialized here so that DEBUG_PRINT (buffered) can be used early */
//  debugInit();
  crtpInit();
 8005ab4:	f7fb fb76 	bl	80011a4 <crtpInit>
  DEBUG_PRINT("[TASK] crtpTxTask is running!\n");
 8005ab8:	493a      	ldr	r1, [pc, #232]	; (8005ba4 <systemInit+0x134>)
 8005aba:	2000      	movs	r0, #0
 8005abc:	f00a ffea 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("[TASK] crtpRxTask is running!\n");
 8005ac0:	4939      	ldr	r1, [pc, #228]	; (8005ba8 <systemInit+0x138>)
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	f00a ffe6 	bl	8010a94 <SEGGER_RTT_printf>

  consoleInit();
 8005ac8:	f00b f8ee 	bl	8010ca8 <consoleInit>

  DEBUG_PRINT("%s is up and running!\n", platformConfigGetDeviceTypeName());
 8005acc:	f00a f942 	bl	800fd54 <platformConfigGetDeviceTypeName>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	4935      	ldr	r1, [pc, #212]	; (8005bac <systemInit+0x13c>)
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	f00a ffdc 	bl	8010a94 <SEGGER_RTT_printf>

  if (V_PRODUCTION_RELEASE) {
 8005adc:	4b34      	ldr	r3, [pc, #208]	; (8005bb0 <systemInit+0x140>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d007      	beq.n	8005af4 <systemInit+0x84>
    DEBUG_PRINT("Production release %s\n", V_STAG);
 8005ae4:	4b33      	ldr	r3, [pc, #204]	; (8005bb4 <systemInit+0x144>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	4933      	ldr	r1, [pc, #204]	; (8005bb8 <systemInit+0x148>)
 8005aec:	2000      	movs	r0, #0
 8005aee:	f00a ffd1 	bl	8010a94 <SEGGER_RTT_printf>
 8005af2:	e014      	b.n	8005b1e <systemInit+0xae>
  } else {
    DEBUG_PRINT("Build %s:%s (%s) %s\n", V_SLOCAL_REVISION,
 8005af4:	4b31      	ldr	r3, [pc, #196]	; (8005bbc <systemInit+0x14c>)
 8005af6:	6819      	ldr	r1, [r3, #0]
 8005af8:	4b31      	ldr	r3, [pc, #196]	; (8005bc0 <systemInit+0x150>)
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	4b2d      	ldr	r3, [pc, #180]	; (8005bb4 <systemInit+0x144>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a30      	ldr	r2, [pc, #192]	; (8005bc4 <systemInit+0x154>)
 8005b02:	7812      	ldrb	r2, [r2, #0]
 8005b04:	2a00      	cmp	r2, #0
 8005b06:	d001      	beq.n	8005b0c <systemInit+0x9c>
 8005b08:	4a2f      	ldr	r2, [pc, #188]	; (8005bc8 <systemInit+0x158>)
 8005b0a:	e000      	b.n	8005b0e <systemInit+0x9e>
 8005b0c:	4a2f      	ldr	r2, [pc, #188]	; (8005bcc <systemInit+0x15c>)
 8005b0e:	9201      	str	r2, [sp, #4]
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	4603      	mov	r3, r0
 8005b14:	460a      	mov	r2, r1
 8005b16:	492e      	ldr	r1, [pc, #184]	; (8005bd0 <systemInit+0x160>)
 8005b18:	2000      	movs	r0, #0
 8005b1a:	f00a ffbb 	bl	8010a94 <SEGGER_RTT_printf>
                V_SREVISION, V_STAG, (V_MODIFIED)?"MODIFIED":"CLEAN");
  }
  DEBUG_PRINT("I am 0x%08X%08X%08X and I have %dKB of flash!\n",
 8005b1e:	4b2d      	ldr	r3, [pc, #180]	; (8005bd4 <systemInit+0x164>)
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4b2d      	ldr	r3, [pc, #180]	; (8005bd8 <systemInit+0x168>)
 8005b24:	6819      	ldr	r1, [r3, #0]
 8005b26:	4b2d      	ldr	r3, [pc, #180]	; (8005bdc <systemInit+0x16c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	482d      	ldr	r0, [pc, #180]	; (8005be0 <systemInit+0x170>)
 8005b2c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8005b30:	9001      	str	r0, [sp, #4]
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	460b      	mov	r3, r1
 8005b36:	492b      	ldr	r1, [pc, #172]	; (8005be4 <systemInit+0x174>)
 8005b38:	2000      	movs	r0, #0
 8005b3a:	f00a ffab 	bl	8010a94 <SEGGER_RTT_printf>
              *((int*)(MCU_ID_ADDRESS+8)), *((int*)(MCU_ID_ADDRESS+4)),
              *((int*)(MCU_ID_ADDRESS+0)), *((short*)(MCU_FLASH_SIZE_ADDRESS)));

//  configblockInit();			// 현재 디바이스에 EEPROM이 존재하지 않음
//  storageInit();
  workerInit();
 8005b3e:	f00e faa3 	bl	8014088 <workerInit>
  ledseqInit();
 8005b42:	f7ff f835 	bl	8004bb0 <ledseqInit>
  DEBUG_PRINT("[TASK] lesdeqCmdTask is running!\n");
 8005b46:	4928      	ldr	r1, [pc, #160]	; (8005be8 <systemInit+0x178>)
 8005b48:	2000      	movs	r0, #0
 8005b4a:	f00a ffa3 	bl	8010a94 <SEGGER_RTT_printf>


  pmInit();
 8005b4e:	f7ff faf3 	bl	8005138 <pmInit>
  DEBUG_PRINT("[TASK] pmTask is running!\n");
 8005b52:	4926      	ldr	r1, [pc, #152]	; (8005bec <systemInit+0x17c>)
 8005b54:	2000      	movs	r0, #0
 8005b56:	f00a ff9d 	bl	8010a94 <SEGGER_RTT_printf>

  buzzerInit();
 8005b5a:	f7fe fe9b 	bl	8004894 <buzzerInit>
  buzzerOn(3000);
  HAL_Delay(2);
  buzzerOn(2000);
  HAL_Delay(2);
  */
  buzzerOff();
 8005b5e:	f7fe fea9 	bl	80048b4 <buzzerOff>

  peerLocalizationInit();
 8005b62:	f7fb f9ff 	bl	8000f64 <peerLocalizationInit>
  DEBUG_PRINT("peerLocalization is Initialized!\n");
 8005b66:	4922      	ldr	r1, [pc, #136]	; (8005bf0 <systemInit+0x180>)
 8005b68:	2000      	movs	r0, #0
 8005b6a:	f00a ff93 	bl	8010a94 <SEGGER_RTT_printf>


#ifdef CONFIG_APP_ENABLE
  DEBUG_PRINT("-------------- Start User application -----------------\n");
 8005b6e:	4921      	ldr	r1, [pc, #132]	; (8005bf4 <systemInit+0x184>)
 8005b70:	2000      	movs	r0, #0
 8005b72:	f00a ff8f 	bl	8010a94 <SEGGER_RTT_printf>
  appInit();
 8005b76:	f7fb fa99 	bl	80010ac <appInit>
  DEBUG_PRINT("[TASK] appTask is running!\n");
 8005b7a:	491f      	ldr	r1, [pc, #124]	; (8005bf8 <systemInit+0x188>)
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	f00a ff89 	bl	8010a94 <SEGGER_RTT_printf>
#endif

  isInit = true;
 8005b82:	4b03      	ldr	r3, [pc, #12]	; (8005b90 <systemInit+0x120>)
 8005b84:	2201      	movs	r2, #1
 8005b86:	701a      	strb	r2, [r3, #0]
 8005b88:	e000      	b.n	8005b8c <systemInit+0x11c>
    return;
 8005b8a:	bf00      	nop
}
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20008483 	.word	0x20008483
 8005b94:	200088a0 	.word	0x200088a0
 8005b98:	2000889c 	.word	0x2000889c
 8005b9c:	0802a370 	.word	0x0802a370
 8005ba0:	0802a390 	.word	0x0802a390
 8005ba4:	0802a3b4 	.word	0x0802a3b4
 8005ba8:	0802a3d4 	.word	0x0802a3d4
 8005bac:	0802a3f4 	.word	0x0802a3f4
 8005bb0:	0802d929 	.word	0x0802d929
 8005bb4:	20000edc 	.word	0x20000edc
 8005bb8:	0802a40c 	.word	0x0802a40c
 8005bbc:	20000ed4 	.word	0x20000ed4
 8005bc0:	20000ed8 	.word	0x20000ed8
 8005bc4:	0802d928 	.word	0x0802d928
 8005bc8:	0802a424 	.word	0x0802a424
 8005bcc:	0802a430 	.word	0x0802a430
 8005bd0:	0802a438 	.word	0x0802a438
 8005bd4:	1fff7a18 	.word	0x1fff7a18
 8005bd8:	1fff7a14 	.word	0x1fff7a14
 8005bdc:	1fff7a10 	.word	0x1fff7a10
 8005be0:	1fff7a22 	.word	0x1fff7a22
 8005be4:	0802a450 	.word	0x0802a450
 8005be8:	0802a480 	.word	0x0802a480
 8005bec:	0802a4a4 	.word	0x0802a4a4
 8005bf0:	0802a4c0 	.word	0x0802a4c0
 8005bf4:	0802a4e4 	.word	0x0802a4e4
 8005bf8:	0802a520 	.word	0x0802a520

08005bfc <systemSyslinkReceive>:

void systemSyslinkReceive(SyslinkPacket *slp)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  if (slp->type == SYSLINK_SYS_NRF_VERSION)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b30      	cmp	r3, #48	; 0x30
 8005c0a:	d114      	bne.n	8005c36 <systemSyslinkReceive+0x3a>
  {
    size_t len = slp->length - 1;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	60fb      	str	r3, [r7, #12]

    if (sizeof(nrf_version) - 1 <=  len) {
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b0e      	cmp	r3, #14
 8005c18:	d901      	bls.n	8005c1e <systemSyslinkReceive+0x22>
      len = sizeof(nrf_version) - 1;
 8005c1a:	230f      	movs	r3, #15
 8005c1c:	60fb      	str	r3, [r7, #12]
    }
    memcpy(&nrf_version, &slp->data[0], len );
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3302      	adds	r3, #2
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4619      	mov	r1, r3
 8005c26:	4806      	ldr	r0, [pc, #24]	; (8005c40 <systemSyslinkReceive+0x44>)
 8005c28:	f01d ff77 	bl	8023b1a <memcpy>
    DEBUG_PRINT("NRF51 version: %s\n", nrf_version);
 8005c2c:	4a04      	ldr	r2, [pc, #16]	; (8005c40 <systemSyslinkReceive+0x44>)
 8005c2e:	4905      	ldr	r1, [pc, #20]	; (8005c44 <systemSyslinkReceive+0x48>)
 8005c30:	2000      	movs	r0, #0
 8005c32:	f00a ff2f 	bl	8010a94 <SEGGER_RTT_printf>
  }
}
 8005c36:	bf00      	nop
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20008484 	.word	0x20008484
 8005c44:	0802a53c 	.word	0x0802a53c

08005c48 <uartslkDmaInit>:
/**
  * Configures the UART DMA. Mainly used for FreeRTOS trace
  * data transfer.
  */
void uartslkDmaInit(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0

#ifdef CONFIG_SYSLINK_DMA

	HAL_UART_MspInit(&huart6);
 8005c4c:	4803      	ldr	r0, [pc, #12]	; (8005c5c <uartslkDmaInit+0x14>)
 8005c4e:	f00f f8af 	bl	8014db0 <HAL_UART_MspInit>

#endif

isUartDmaInitialized = true;
 8005c52:	4b03      	ldr	r3, [pc, #12]	; (8005c60 <uartslkDmaInit+0x18>)
 8005c54:	2201      	movs	r2, #1
 8005c56:	701a      	strb	r2, [r3, #0]

}
 8005c58:	bf00      	nop
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	2000d000 	.word	0x2000d000
 8005c60:	200089e0 	.word	0x200089e0

08005c64 <uartslkInit>:

void uartslkInit(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b088      	sub	sp, #32
 8005c68:	af02      	add	r7, sp, #8
  // initialize the FreeRTOS structures first, to prevent null pointers in interrupts
  waitUntilSendDone = xSemaphoreCreateBinaryStatic(&waitUntilSendDoneBuffer); // initialized as blocking
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	4b42      	ldr	r3, [pc, #264]	; (8005d78 <uartslkInit+0x114>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	2100      	movs	r1, #0
 8005c74:	2001      	movs	r0, #1
 8005c76:	f018 fd6d 	bl	801e754 <xQueueGenericCreateStatic>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	4a3f      	ldr	r2, [pc, #252]	; (8005d7c <uartslkInit+0x118>)
 8005c7e:	6013      	str	r3, [r2, #0]
  uartBusy = xSemaphoreCreateBinaryStatic(&uartBusyBuffer); // initialized as blocking
 8005c80:	2303      	movs	r3, #3
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	4b3e      	ldr	r3, [pc, #248]	; (8005d80 <uartslkInit+0x11c>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	2100      	movs	r1, #0
 8005c8a:	2001      	movs	r0, #1
 8005c8c:	f018 fd62 	bl	801e754 <xQueueGenericCreateStatic>
 8005c90:	4603      	mov	r3, r0
 8005c92:	4a3c      	ldr	r2, [pc, #240]	; (8005d84 <uartslkInit+0x120>)
 8005c94:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(uartBusy); // but we give it because the uart isn't busy at initialization
 8005c96:	4b3b      	ldr	r3, [pc, #236]	; (8005d84 <uartslkInit+0x120>)
 8005c98:	6818      	ldr	r0, [r3, #0]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	f018 fe6e 	bl	801e980 <xQueueGenericSend>

  syslinkPacketDelivery = STATIC_MEM_QUEUE_CREATE(syslinkPacketDelivery);
 8005ca4:	2308      	movs	r3, #8
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	2342      	movs	r3, #66	; 0x42
 8005caa:	4619      	mov	r1, r3
 8005cac:	2300      	movs	r3, #0
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	4b35      	ldr	r3, [pc, #212]	; (8005d88 <uartslkInit+0x124>)
 8005cb2:	4a36      	ldr	r2, [pc, #216]	; (8005d8c <uartslkInit+0x128>)
 8005cb4:	f018 fd4e 	bl	801e754 <xQueueGenericCreateStatic>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	4a35      	ldr	r2, [pc, #212]	; (8005d90 <uartslkInit+0x12c>)
 8005cbc:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(syslinkPacketDelivery);
 8005cbe:	4b34      	ldr	r3, [pc, #208]	; (8005d90 <uartslkInit+0x12c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a34      	ldr	r2, [pc, #208]	; (8005d94 <uartslkInit+0x130>)
 8005cc4:	4934      	ldr	r1, [pc, #208]	; (8005d98 <uartslkInit+0x134>)
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f00d fee6 	bl	8013a98 <qmRegisterQueue>


  GPIO_InitTypeDef GPIO_InitStruct;
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ccc:	2300      	movs	r3, #0
 8005cce:	603b      	str	r3, [r7, #0]
 8005cd0:	4b32      	ldr	r3, [pc, #200]	; (8005d9c <uartslkInit+0x138>)
 8005cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd4:	4a31      	ldr	r2, [pc, #196]	; (8005d9c <uartslkInit+0x138>)
 8005cd6:	f043 0304 	orr.w	r3, r3, #4
 8005cda:	6313      	str	r3, [r2, #48]	; 0x30
 8005cdc:	4b2f      	ldr	r3, [pc, #188]	; (8005d9c <uartslkInit+0x138>)
 8005cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	603b      	str	r3, [r7, #0]
 8005ce6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2140      	movs	r1, #64	; 0x40
 8005cec:	482c      	ldr	r0, [pc, #176]	; (8005da0 <uartslkInit+0x13c>)
 8005cee:	f010 fe45 	bl	801697c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2180      	movs	r1, #128	; 0x80
 8005cf6:	482a      	ldr	r0, [pc, #168]	; (8005da0 <uartslkInit+0x13c>)
 8005cf8:	f010 fe40 	bl	801697c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_6;
 8005cfc:	23c0      	movs	r3, #192	; 0xc0
 8005cfe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d00:	2302      	movs	r3, #2
 8005d02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d04:	2301      	movs	r3, #1
 8005d06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d0c:	1d3b      	adds	r3, r7, #4
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4823      	ldr	r0, [pc, #140]	; (8005da0 <uartslkInit+0x13c>)
 8005d12:	f010 fc97 	bl	8016644 <HAL_GPIO_Init>
  huart6.Init.BaudRate = 2000000;
  huart6.Init.Mode = UART_MODE_TX;

#else

  huart6.Instance = USART6;
 8005d16:	4b23      	ldr	r3, [pc, #140]	; (8005da4 <uartslkInit+0x140>)
 8005d18:	4a23      	ldr	r2, [pc, #140]	; (8005da8 <uartslkInit+0x144>)
 8005d1a:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 1000000;
 8005d1c:	4b21      	ldr	r3, [pc, #132]	; (8005da4 <uartslkInit+0x140>)
 8005d1e:	4a23      	ldr	r2, [pc, #140]	; (8005dac <uartslkInit+0x148>)
 8005d20:	605a      	str	r2, [r3, #4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005d22:	4b20      	ldr	r3, [pc, #128]	; (8005da4 <uartslkInit+0x140>)
 8005d24:	220c      	movs	r2, #12
 8005d26:	615a      	str	r2, [r3, #20]

#endif

  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005d28:	4b1e      	ldr	r3, [pc, #120]	; (8005da4 <uartslkInit+0x140>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005d2e:	4b1d      	ldr	r3, [pc, #116]	; (8005da4 <uartslkInit+0x140>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005d34:	4b1b      	ldr	r3, [pc, #108]	; (8005da4 <uartslkInit+0x140>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	611a      	str	r2, [r3, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d3a:	4b1a      	ldr	r3, [pc, #104]	; (8005da4 <uartslkInit+0x140>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d40:	4b18      	ldr	r3, [pc, #96]	; (8005da4 <uartslkInit+0x140>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	61da      	str	r2, [r3, #28]


  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005d46:	4817      	ldr	r0, [pc, #92]	; (8005da4 <uartslkInit+0x140>)
 8005d48:	f013 fdf2 	bl	8019930 <HAL_UART_Init>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <uartslkInit+0xf2>
  {
    Error_Handler();
 8005d52:	f00e fe9f 	bl	8014a94 <Error_Handler>
  }


  uartslkDmaInit();
 8005d56:	f7ff ff77 	bl	8005c48 <uartslkDmaInit>

  // Setting up TXEN pin (NRF flow control)
  // 향후 외부핀 PA4 연결 필요

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8005d5a:	4b12      	ldr	r3, [pc, #72]	; (8005da4 <uartslkInit+0x140>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	4b10      	ldr	r3, [pc, #64]	; (8005da4 <uartslkInit+0x140>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f042 0220 	orr.w	r2, r2, #32
 8005d68:	60da      	str	r2, [r3, #12]

  isInit = true;
 8005d6a:	4b11      	ldr	r3, [pc, #68]	; (8005db0 <uartslkInit+0x14c>)
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	701a      	strb	r2, [r3, #0]
}
 8005d70:	bf00      	nop
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	200088f8 	.word	0x200088f8
 8005d7c:	200088f4 	.word	0x200088f4
 8005d80:	2000894c 	.word	0x2000894c
 8005d84:	20008948 	.word	0x20008948
 8005d88:	20002aec 	.word	0x20002aec
 8005d8c:	200028dc 	.word	0x200028dc
 8005d90:	2000899c 	.word	0x2000899c
 8005d94:	0802a550 	.word	0x0802a550
 8005d98:	0802a568 	.word	0x0802a568
 8005d9c:	40023800 	.word	0x40023800
 8005da0:	40020800 	.word	0x40020800
 8005da4:	2000d000 	.word	0x2000d000
 8005da8:	40011400 	.word	0x40011400
 8005dac:	000f4240 	.word	0x000f4240
 8005db0:	200088f0 	.word	0x200088f0

08005db4 <uartslkGetPacketBlocking>:
{
  syslinkPacketDeliveryReadyToReceive = true;
}

void uartslkGetPacketBlocking(SyslinkPacket* packet)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  xQueueReceive(syslinkPacketDelivery, packet, portMAX_DELAY);
 8005dbc:	4b05      	ldr	r3, [pc, #20]	; (8005dd4 <uartslkGetPacketBlocking+0x20>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dc4:	6879      	ldr	r1, [r7, #4]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f018 ff7c 	bl	801ecc4 <xQueueReceive>
}
 8005dcc:	bf00      	nop
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	2000899c 	.word	0x2000899c

08005dd8 <uartslkSendDataDmaBlocking>:

    return (unsigned char)ch;
}

void uartslkSendDataDmaBlocking(uint32_t size, uint8_t* data)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  if (dmaNrfFlowControlBufferFull) {
 8005de2:	4b22      	ldr	r3, [pc, #136]	; (8005e6c <uartslkSendDataDmaBlocking+0x94>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d004      	beq.n	8005df4 <uartslkSendDataDmaBlocking+0x1c>
    dmaSendWhileNrfBufferFull++;
 8005dea:	4b21      	ldr	r3, [pc, #132]	; (8005e70 <uartslkSendDataDmaBlocking+0x98>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3301      	adds	r3, #1
 8005df0:	4a1f      	ldr	r2, [pc, #124]	; (8005e70 <uartslkSendDataDmaBlocking+0x98>)
 8005df2:	6013      	str	r3, [r2, #0]
  }

  if (isUartDmaInitialized)
 8005df4:	4b1f      	ldr	r3, [pc, #124]	; (8005e74 <uartslkSendDataDmaBlocking+0x9c>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d032      	beq.n	8005e62 <uartslkSendDataDmaBlocking+0x8a>
  {
    xSemaphoreTake(uartBusy, portMAX_DELAY);
 8005dfc:	4b1e      	ldr	r3, [pc, #120]	; (8005e78 <uartslkSendDataDmaBlocking+0xa0>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005e04:	4618      	mov	r0, r3
 8005e06:	f019 f83d 	bl	801ee84 <xQueueSemaphoreTake>
    // Wait for DMA to be free
    while(HAL_DMA_GetState(&hdma_usart6_tx) != HAL_DMA_STATE_READY);
 8005e0a:	bf00      	nop
 8005e0c:	481b      	ldr	r0, [pc, #108]	; (8005e7c <uartslkSendDataDmaBlocking+0xa4>)
 8005e0e:	f010 fb2b 	bl	8016468 <HAL_DMA_GetState>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d1f9      	bne.n	8005e0c <uartslkSendDataDmaBlocking+0x34>

    //Copy data in DMA buffer
    memcpy(dmaTXBuffer, data, size);
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6839      	ldr	r1, [r7, #0]
 8005e1c:	4818      	ldr	r0, [pc, #96]	; (8005e80 <uartslkSendDataDmaBlocking+0xa8>)
 8005e1e:	f01d fe7c 	bl	8023b1a <memcpy>
    initialDMACount = (uint16_t)size;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	4b17      	ldr	r3, [pc, #92]	; (8005e84 <uartslkSendDataDmaBlocking+0xac>)
 8005e28:	801a      	strh	r2, [r3, #0]

    if(HAL_UART_Transmit_DMA(&huart6, dmaTXBuffer, size)!=HAL_OK){
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	461a      	mov	r2, r3
 8005e30:	4913      	ldr	r1, [pc, #76]	; (8005e80 <uartslkSendDataDmaBlocking+0xa8>)
 8005e32:	4815      	ldr	r0, [pc, #84]	; (8005e88 <uartslkSendDataDmaBlocking+0xb0>)
 8005e34:	f013 fdcc 	bl	80199d0 <HAL_UART_Transmit_DMA>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <uartslkSendDataDmaBlocking+0x6e>
    	DEBUG_PRINT("DMA transfer failed\n");
 8005e3e:	4913      	ldr	r1, [pc, #76]	; (8005e8c <uartslkSendDataDmaBlocking+0xb4>)
 8005e40:	2000      	movs	r0, #0
 8005e42:	f00a fe27 	bl	8010a94 <SEGGER_RTT_printf>
    }
    xSemaphoreTake(waitUntilSendDone, portMAX_DELAY);
 8005e46:	4b12      	ldr	r3, [pc, #72]	; (8005e90 <uartslkSendDataDmaBlocking+0xb8>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f019 f818 	bl	801ee84 <xQueueSemaphoreTake>
    xSemaphoreGive(uartBusy);
 8005e54:	4b08      	ldr	r3, [pc, #32]	; (8005e78 <uartslkSendDataDmaBlocking+0xa0>)
 8005e56:	6818      	ldr	r0, [r3, #0]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	f018 fd8f 	bl	801e980 <xQueueGenericSend>

  }
}
 8005e62:	bf00      	nop
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	200089f4 	.word	0x200089f4
 8005e70:	200089f8 	.word	0x200089f8
 8005e74:	200089e0 	.word	0x200089e0
 8005e78:	20008948 	.word	0x20008948
 8005e7c:	2000d048 	.word	0x2000d048
 8005e80:	200089a0 	.word	0x200089a0
 8005e84:	200089e2 	.word	0x200089e2
 8005e88:	2000d000 	.word	0x2000d000
 8005e8c:	0802a58c 	.word	0x0802a58c
 8005e90:	200088f4 	.word	0x200088f4

08005e94 <uartSyslinkDumpDebugProbe>:
#endif

*/


void uartSyslinkDumpDebugProbe() {
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
  DEBUG_PRINT("STM dmaPausedCounter: %ld\n",dmaPausedCounter);
 8005e98:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <uartSyslinkDumpDebugProbe+0x50>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4912      	ldr	r1, [pc, #72]	; (8005ee8 <uartSyslinkDumpDebugProbe+0x54>)
 8005ea0:	2000      	movs	r0, #0
 8005ea2:	f00a fdf7 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaTxStreamPausedCounter: %ld\n", dmaTxStreamPausedCounter);
 8005ea6:	4b11      	ldr	r3, [pc, #68]	; (8005eec <uartSyslinkDumpDebugProbe+0x58>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	4910      	ldr	r1, [pc, #64]	; (8005ef0 <uartSyslinkDumpDebugProbe+0x5c>)
 8005eae:	2000      	movs	r0, #0
 8005eb0:	f00a fdf0 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaResumedCounter: %ld\n", dmaResumedCounter);
 8005eb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <uartSyslinkDumpDebugProbe+0x60>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	490f      	ldr	r1, [pc, #60]	; (8005ef8 <uartSyslinkDumpDebugProbe+0x64>)
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	f00a fde9 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaTxStreamResumedCounter: %ld\n", dmaTxStreamResumedCounter);
 8005ec2:	4b0e      	ldr	r3, [pc, #56]	; (8005efc <uartSyslinkDumpDebugProbe+0x68>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	490d      	ldr	r1, [pc, #52]	; (8005f00 <uartSyslinkDumpDebugProbe+0x6c>)
 8005eca:	2000      	movs	r0, #0
 8005ecc:	f00a fde2 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaSendWhileNrfBufferFull: %ld\n", dmaSendWhileNrfBufferFull);
 8005ed0:	4b0c      	ldr	r3, [pc, #48]	; (8005f04 <uartSyslinkDumpDebugProbe+0x70>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	490c      	ldr	r1, [pc, #48]	; (8005f08 <uartSyslinkDumpDebugProbe+0x74>)
 8005ed8:	2000      	movs	r0, #0
 8005eda:	f00a fddb 	bl	8010a94 <SEGGER_RTT_printf>
}
 8005ede:	bf00      	nop
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	200089e4 	.word	0x200089e4
 8005ee8:	0802a5a4 	.word	0x0802a5a4
 8005eec:	200089e8 	.word	0x200089e8
 8005ef0:	0802a5c0 	.word	0x0802a5c0
 8005ef4:	200089ec 	.word	0x200089ec
 8005ef8:	0802a5e4 	.word	0x0802a5e4
 8005efc:	200089f0 	.word	0x200089f0
 8005f00:	0802a600 	.word	0x0802a600
 8005f04:	200089f8 	.word	0x200089f8
 8005f08:	0802a624 	.word	0x0802a624

08005f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	4603      	mov	r3, r0
 8005f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	db0b      	blt.n	8005f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f1e:	79fb      	ldrb	r3, [r7, #7]
 8005f20:	f003 021f 	and.w	r2, r3, #31
 8005f24:	4907      	ldr	r1, [pc, #28]	; (8005f44 <__NVIC_EnableIRQ+0x38>)
 8005f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f2a:	095b      	lsrs	r3, r3, #5
 8005f2c:	2001      	movs	r0, #1
 8005f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8005f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	e000e100 	.word	0xe000e100

08005f48 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	4603      	mov	r3, r0
 8005f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	db12      	blt.n	8005f80 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f5a:	79fb      	ldrb	r3, [r7, #7]
 8005f5c:	f003 021f 	and.w	r2, r3, #31
 8005f60:	490a      	ldr	r1, [pc, #40]	; (8005f8c <__NVIC_DisableIRQ+0x44>)
 8005f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	2001      	movs	r0, #1
 8005f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f6e:	3320      	adds	r3, #32
 8005f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005f74:	f3bf 8f4f 	dsb	sy
}
 8005f78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f7a:	f3bf 8f6f 	isb	sy
}
 8005f7e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	e000e100 	.word	0xe000e100

08005f90 <usbGetDataBlocking>:
};
*/


bool usbGetDataBlocking(USBPacket *in)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  while (xQueueReceive(usbDataRx, in, portMAX_DELAY) != pdTRUE); // Don't return until we get some data on the USB
 8005f98:	bf00      	nop
 8005f9a:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <usbGetDataBlocking+0x50>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f018 fe8d 	bl	801ecc4 <xQueueReceive>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d1f4      	bne.n	8005f9a <usbGetDataBlocking+0xa>

  // Disabling USB interrupt to make sure we can check and re-enable the endpoint
  // if it is not currently accepting data (ie. can happen if the RX queue was full)
  NVIC_DisableIRQ(OTG_FS_IRQn);
 8005fb0:	2043      	movs	r0, #67	; 0x43
 8005fb2:	f7ff ffc9 	bl	8005f48 <__NVIC_DisableIRQ>
  if (rxStopped) {
 8005fb6:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <usbGetDataBlocking+0x54>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d008      	beq.n	8005fd0 <usbGetDataBlocking+0x40>
	  USBD_LL_PrepareReceive(&hUsbDeviceFS, CF_OUT_EP, (uint8_t*)(inPacket.data), USB_RX_TX_PACKET_SIZE);
 8005fbe:	2340      	movs	r3, #64	; 0x40
 8005fc0:	4a09      	ldr	r2, [pc, #36]	; (8005fe8 <usbGetDataBlocking+0x58>)
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	4809      	ldr	r0, [pc, #36]	; (8005fec <usbGetDataBlocking+0x5c>)
 8005fc6:	f01c fa6b 	bl	80224a0 <USBD_LL_PrepareReceive>
    rxStopped = false;
 8005fca:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <usbGetDataBlocking+0x54>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	701a      	strb	r2, [r3, #0]
  }
  NVIC_EnableIRQ(OTG_FS_IRQn);
 8005fd0:	2043      	movs	r0, #67	; 0x43
 8005fd2:	f7ff ff9b 	bl	8005f0c <__NVIC_EnableIRQ>

  return true;
 8005fd6:	2301      	movs	r3, #1
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20008a00 	.word	0x20008a00
 8005fe4:	200002ba 	.word	0x200002ba
 8005fe8:	20008a09 	.word	0x20008a09
 8005fec:	200111a8 	.word	0x200111a8

08005ff0 <usbSendData>:


static USBPacket outStage;

bool usbSendData(uint32_t size, uint8_t* data)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  outStage.size = size;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	4b0c      	ldr	r3, [pc, #48]	; (8006030 <usbSendData+0x40>)
 8006000:	701a      	strb	r2, [r3, #0]
  memcpy(outStage.data, data, size);
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	6839      	ldr	r1, [r7, #0]
 8006006:	480b      	ldr	r0, [pc, #44]	; (8006034 <usbSendData+0x44>)
 8006008:	f01d fd87 	bl	8023b1a <memcpy>
  // Dont' block when sending
  return (xQueueSend(usbDataTx, &outStage, M2T(100)) == pdTRUE);
 800600c:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <usbSendData+0x48>)
 800600e:	6818      	ldr	r0, [r3, #0]
 8006010:	2300      	movs	r3, #0
 8006012:	2264      	movs	r2, #100	; 0x64
 8006014:	4906      	ldr	r1, [pc, #24]	; (8006030 <usbSendData+0x40>)
 8006016:	f018 fcb3 	bl	801e980 <xQueueGenericSend>
 800601a:	4603      	mov	r3, r0
 800601c:	2b01      	cmp	r3, #1
 800601e:	bf0c      	ite	eq
 8006020:	2301      	moveq	r3, #1
 8006022:	2300      	movne	r3, #0
 8006024:	b2db      	uxtb	r3, r3
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	20008a4c 	.word	0x20008a4c
 8006034:	20008a4d 	.word	0x20008a4d
 8006038:	20008a04 	.word	0x20008a04

0800603c <usbInit>:


void usbInit(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af02      	add	r7, sp, #8

//  MX_USB_DEVICE_Init();		// HAL 드라이버에서 생성됨
  usbDataRx = STATIC_MEM_QUEUE_CREATE(usbDataRx);
 8006042:	2305      	movs	r3, #5
 8006044:	4618      	mov	r0, r3
 8006046:	2341      	movs	r3, #65	; 0x41
 8006048:	4619      	mov	r1, r3
 800604a:	2300      	movs	r3, #0
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	4b14      	ldr	r3, [pc, #80]	; (80060a0 <usbInit+0x64>)
 8006050:	4a14      	ldr	r2, [pc, #80]	; (80060a4 <usbInit+0x68>)
 8006052:	f018 fb7f 	bl	801e754 <xQueueGenericCreateStatic>
 8006056:	4603      	mov	r3, r0
 8006058:	4a13      	ldr	r2, [pc, #76]	; (80060a8 <usbInit+0x6c>)
 800605a:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataRx);
 800605c:	4b12      	ldr	r3, [pc, #72]	; (80060a8 <usbInit+0x6c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a12      	ldr	r2, [pc, #72]	; (80060ac <usbInit+0x70>)
 8006062:	4913      	ldr	r1, [pc, #76]	; (80060b0 <usbInit+0x74>)
 8006064:	4618      	mov	r0, r3
 8006066:	f00d fd17 	bl	8013a98 <qmRegisterQueue>
  usbDataTx = STATIC_MEM_QUEUE_CREATE(usbDataTx);
 800606a:	2301      	movs	r3, #1
 800606c:	4618      	mov	r0, r3
 800606e:	2341      	movs	r3, #65	; 0x41
 8006070:	4619      	mov	r1, r3
 8006072:	2300      	movs	r3, #0
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	4b0f      	ldr	r3, [pc, #60]	; (80060b4 <usbInit+0x78>)
 8006078:	4a0f      	ldr	r2, [pc, #60]	; (80060b8 <usbInit+0x7c>)
 800607a:	f018 fb6b 	bl	801e754 <xQueueGenericCreateStatic>
 800607e:	4603      	mov	r3, r0
 8006080:	4a0e      	ldr	r2, [pc, #56]	; (80060bc <usbInit+0x80>)
 8006082:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataTx);
 8006084:	4b0d      	ldr	r3, [pc, #52]	; (80060bc <usbInit+0x80>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a0d      	ldr	r2, [pc, #52]	; (80060c0 <usbInit+0x84>)
 800608a:	4909      	ldr	r1, [pc, #36]	; (80060b0 <usbInit+0x74>)
 800608c:	4618      	mov	r0, r3
 800608e:	f00d fd03 	bl	8013a98 <qmRegisterQueue>

  isInit = true;
 8006092:	4b0c      	ldr	r3, [pc, #48]	; (80060c4 <usbInit+0x88>)
 8006094:	2201      	movs	r2, #1
 8006096:	701a      	strb	r2, [r3, #0]
}
 8006098:	bf00      	nop
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20002c84 	.word	0x20002c84
 80060a4:	20002b3c 	.word	0x20002b3c
 80060a8:	20008a00 	.word	0x20008a00
 80060ac:	0802a648 	.word	0x0802a648
 80060b0:	0802a654 	.word	0x0802a654
 80060b4:	20002d18 	.word	0x20002d18
 80060b8:	20002cd4 	.word	0x20002cd4
 80060bc:	20008a04 	.word	0x20008a04
 80060c0:	0802a670 	.word	0x0802a670
 80060c4:	200089fc 	.word	0x200089fc

080060c8 <usbTest>:

bool usbTest(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  return isInit;
 80060cc:	4b03      	ldr	r3, [pc, #12]	; (80060dc <usbTest+0x14>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	200089fc 	.word	0x200089fc

080060e0 <usblinkTask>:
 * and so much other cool things that I don't have time for it ...)
 */
static USBPacket usbIn;
static CRTPPacket p;
static void usblinkTask(void *param)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  while(1)
  {
    // Fetch a USB packet off the queue
    usbGetDataBlocking(&usbIn);
 80060e8:	480c      	ldr	r0, [pc, #48]	; (800611c <usblinkTask+0x3c>)
 80060ea:	f7ff ff51 	bl	8005f90 <usbGetDataBlocking>
    p.size = usbIn.size - 1;
 80060ee:	4b0b      	ldr	r3, [pc, #44]	; (800611c <usblinkTask+0x3c>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	4b0a      	ldr	r3, [pc, #40]	; (8006120 <usblinkTask+0x40>)
 80060f8:	701a      	strb	r2, [r3, #0]
    memcpy(&p.raw, usbIn.data, usbIn.size);
 80060fa:	4b08      	ldr	r3, [pc, #32]	; (800611c <usblinkTask+0x3c>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	4908      	ldr	r1, [pc, #32]	; (8006124 <usblinkTask+0x44>)
 8006102:	4809      	ldr	r0, [pc, #36]	; (8006128 <usblinkTask+0x48>)
 8006104:	f01d fd09 	bl	8023b1a <memcpy>
    // This queuing will copy a CRTP packet size from usbIn
    xQueueSend(crtpPacketDelivery, &p, portMAX_DELAY);
 8006108:	4b08      	ldr	r3, [pc, #32]	; (800612c <usblinkTask+0x4c>)
 800610a:	6818      	ldr	r0, [r3, #0]
 800610c:	2300      	movs	r3, #0
 800610e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006112:	4903      	ldr	r1, [pc, #12]	; (8006120 <usblinkTask+0x40>)
 8006114:	f018 fc34 	bl	801e980 <xQueueGenericSend>
    usbGetDataBlocking(&usbIn);
 8006118:	e7e6      	b.n	80060e8 <usblinkTask+0x8>
 800611a:	bf00      	nop
 800611c:	20008cd4 	.word	0x20008cd4
 8006120:	20008d18 	.word	0x20008d18
 8006124:	20008cd5 	.word	0x20008cd5
 8006128:	20008d19 	.word	0x20008d19
 800612c:	20008a90 	.word	0x20008a90

08006130 <usblinkReceivePacket>:

}


static int usblinkReceivePacket(CRTPPacket *p)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  if (xQueueReceive(crtpPacketDelivery, p, M2T(100)) == pdTRUE)
 8006138:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <usblinkReceivePacket+0x34>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2264      	movs	r2, #100	; 0x64
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	4618      	mov	r0, r3
 8006142:	f018 fdbf 	bl	801ecc4 <xQueueReceive>
 8006146:	4603      	mov	r3, r0
 8006148:	2b01      	cmp	r3, #1
 800614a:	d104      	bne.n	8006156 <usblinkReceivePacket+0x26>
  {
    ledseqRun(&seq_linkUp);
 800614c:	4806      	ldr	r0, [pc, #24]	; (8006168 <usblinkReceivePacket+0x38>)
 800614e:	f7fe fde7 	bl	8004d20 <ledseqRun>
    return 0;
 8006152:	2300      	movs	r3, #0
 8006154:	e001      	b.n	800615a <usblinkReceivePacket+0x2a>
  }

  return -1;
 8006156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20008a90 	.word	0x20008a90
 8006168:	20000198 	.word	0x20000198

0800616c <usblinkSendPacket>:

static int usblinkSendPacket(CRTPPacket *p)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  int dataSize;

  ASSERT(p->size < SYSLINK_MTU);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b3f      	cmp	r3, #63	; 0x3f
 800617a:	d904      	bls.n	8006186 <usblinkSendPacket+0x1a>
 800617c:	2267      	movs	r2, #103	; 0x67
 800617e:	4912      	ldr	r1, [pc, #72]	; (80061c8 <usblinkSendPacket+0x5c>)
 8006180:	4812      	ldr	r0, [pc, #72]	; (80061cc <usblinkSendPacket+0x60>)
 8006182:	f00a fd4b 	bl	8010c1c <assertFail>

  sendBuffer[0] = p->header;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	785a      	ldrb	r2, [r3, #1]
 800618a:	4b11      	ldr	r3, [pc, #68]	; (80061d0 <usblinkSendPacket+0x64>)
 800618c:	701a      	strb	r2, [r3, #0]

  if (p->size <= CRTP_MAX_DATA_SIZE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b1e      	cmp	r3, #30
 8006194:	d807      	bhi.n	80061a6 <usblinkSendPacket+0x3a>
  {
    memcpy(&sendBuffer[1], p->data, p->size);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	1c99      	adds	r1, r3, #2
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	480c      	ldr	r0, [pc, #48]	; (80061d4 <usblinkSendPacket+0x68>)
 80061a2:	f01d fcba 	bl	8023b1a <memcpy>
  }
  dataSize = p->size + 1;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	3301      	adds	r3, #1
 80061ac:	60fb      	str	r3, [r7, #12]


  ledseqRun(&seq_linkDown);
 80061ae:	480a      	ldr	r0, [pc, #40]	; (80061d8 <usblinkSendPacket+0x6c>)
 80061b0:	f7fe fdb6 	bl	8004d20 <ledseqRun>

  return usbSendData(dataSize, sendBuffer);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4906      	ldr	r1, [pc, #24]	; (80061d0 <usblinkSendPacket+0x64>)
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7ff ff19 	bl	8005ff0 <usbSendData>
 80061be:	4603      	mov	r3, r0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	0802a67c 	.word	0x0802a67c
 80061cc:	0802a69c 	.word	0x0802a69c
 80061d0:	20008a94 	.word	0x20008a94
 80061d4:	20008a95 	.word	0x20008a95
 80061d8:	200001a8 	.word	0x200001a8

080061dc <usblinkSetEnable>:



static int usblinkSetEnable(bool enable)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	4603      	mov	r3, r0
 80061e4:	71fb      	strb	r3, [r7, #7]
  return 0;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <usblinkInit>:


void usblinkInit()
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af04      	add	r7, sp, #16
  if(isInit)
 80061fa:	4b17      	ldr	r3, [pc, #92]	; (8006258 <usblinkInit+0x64>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d126      	bne.n	8006250 <usblinkInit+0x5c>
    return;

  // Initialize the USB peripheral
  usbInit();
 8006202:	f7ff ff1b 	bl	800603c <usbInit>

  crtpPacketDelivery = STATIC_MEM_QUEUE_CREATE(crtpPacketDelivery);
 8006206:	2310      	movs	r3, #16
 8006208:	4618      	mov	r0, r3
 800620a:	2320      	movs	r3, #32
 800620c:	4619      	mov	r1, r3
 800620e:	2300      	movs	r3, #0
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	4b12      	ldr	r3, [pc, #72]	; (800625c <usblinkInit+0x68>)
 8006214:	4a12      	ldr	r2, [pc, #72]	; (8006260 <usblinkInit+0x6c>)
 8006216:	f018 fa9d 	bl	801e754 <xQueueGenericCreateStatic>
 800621a:	4603      	mov	r3, r0
 800621c:	4a11      	ldr	r2, [pc, #68]	; (8006264 <usblinkInit+0x70>)
 800621e:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(crtpPacketDelivery);
 8006220:	4b10      	ldr	r3, [pc, #64]	; (8006264 <usblinkInit+0x70>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a10      	ldr	r2, [pc, #64]	; (8006268 <usblinkInit+0x74>)
 8006226:	4911      	ldr	r1, [pc, #68]	; (800626c <usblinkInit+0x78>)
 8006228:	4618      	mov	r0, r3
 800622a:	f00d fc35 	bl	8013a98 <qmRegisterQueue>

  STATIC_MEM_TASK_CREATE(usblinkTask, usblinkTask, USBLINK_TASK_NAME, NULL, USBLINK_TASK_PRI);
 800622e:	2380      	movs	r3, #128	; 0x80
 8006230:	461a      	mov	r2, r3
 8006232:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <usblinkInit+0x7c>)
 8006234:	9302      	str	r3, [sp, #8]
 8006236:	4b0f      	ldr	r3, [pc, #60]	; (8006274 <usblinkInit+0x80>)
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	2303      	movs	r3, #3
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	2300      	movs	r3, #0
 8006240:	490d      	ldr	r1, [pc, #52]	; (8006278 <usblinkInit+0x84>)
 8006242:	480e      	ldr	r0, [pc, #56]	; (800627c <usblinkInit+0x88>)
 8006244:	f019 f996 	bl	801f574 <xTaskCreateStatic>

  isInit = true;
 8006248:	4b03      	ldr	r3, [pc, #12]	; (8006258 <usblinkInit+0x64>)
 800624a:	2201      	movs	r2, #1
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	e000      	b.n	8006252 <usblinkInit+0x5e>
    return;
 8006250:	bf00      	nop
}
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20008a8d 	.word	0x20008a8d
 800625c:	20002f68 	.word	0x20002f68
 8006260:	20002d68 	.word	0x20002d68
 8006264:	20008a90 	.word	0x20008a90
 8006268:	0802a6b4 	.word	0x0802a6b4
 800626c:	0802a67c 	.word	0x0802a67c
 8006270:	20002fb8 	.word	0x20002fb8
 8006274:	20008ad4 	.word	0x20008ad4
 8006278:	0802a6c8 	.word	0x0802a6c8
 800627c:	080060e1 	.word	0x080060e1

08006280 <usblinkGetLink>:
{
  return isInit;
}

struct crtpLinkOperations * usblinkGetLink()
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  return &usblinkOp;
 8006284:	4b02      	ldr	r3, [pc, #8]	; (8006290 <usblinkGetLink+0x10>)
}
 8006286:	4618      	mov	r0, r3
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	200002bc 	.word	0x200002bc

08006294 <passthroughInit>:
static void blHeliConfigHandshake();

void passthroughTask(void *param);

void passthroughInit()
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af04      	add	r7, sp, #16
  if(isInit)
 800629a:	4b21      	ldr	r3, [pc, #132]	; (8006320 <passthroughInit+0x8c>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d13b      	bne.n	800631a <passthroughInit+0x86>
    return;

  ptRxQueue = STATIC_MEM_QUEUE_CREATE(ptRxQueue);
 80062a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062a6:	4618      	mov	r0, r3
 80062a8:	2301      	movs	r3, #1
 80062aa:	4619      	mov	r1, r3
 80062ac:	2300      	movs	r3, #0
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	4b1c      	ldr	r3, [pc, #112]	; (8006324 <passthroughInit+0x90>)
 80062b2:	4a1d      	ldr	r2, [pc, #116]	; (8006328 <passthroughInit+0x94>)
 80062b4:	f018 fa4e 	bl	801e754 <xQueueGenericCreateStatic>
 80062b8:	4603      	mov	r3, r0
 80062ba:	4a1c      	ldr	r2, [pc, #112]	; (800632c <passthroughInit+0x98>)
 80062bc:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 80062be:	4b1b      	ldr	r3, [pc, #108]	; (800632c <passthroughInit+0x98>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1b      	ldr	r2, [pc, #108]	; (8006330 <passthroughInit+0x9c>)
 80062c4:	491b      	ldr	r1, [pc, #108]	; (8006334 <passthroughInit+0xa0>)
 80062c6:	4618      	mov	r0, r3
 80062c8:	f00d fbe6 	bl	8013a98 <qmRegisterQueue>
  ptTxQueue = STATIC_MEM_QUEUE_CREATE(ptTxQueue);
 80062cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062d0:	4618      	mov	r0, r3
 80062d2:	2301      	movs	r3, #1
 80062d4:	4619      	mov	r1, r3
 80062d6:	2300      	movs	r3, #0
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	4b17      	ldr	r3, [pc, #92]	; (8006338 <passthroughInit+0xa4>)
 80062dc:	4a17      	ldr	r2, [pc, #92]	; (800633c <passthroughInit+0xa8>)
 80062de:	f018 fa39 	bl	801e754 <xQueueGenericCreateStatic>
 80062e2:	4603      	mov	r3, r0
 80062e4:	4a16      	ldr	r2, [pc, #88]	; (8006340 <passthroughInit+0xac>)
 80062e6:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 80062e8:	4b10      	ldr	r3, [pc, #64]	; (800632c <passthroughInit+0x98>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a10      	ldr	r2, [pc, #64]	; (8006330 <passthroughInit+0x9c>)
 80062ee:	4911      	ldr	r1, [pc, #68]	; (8006334 <passthroughInit+0xa0>)
 80062f0:	4618      	mov	r0, r3
 80062f2:	f00d fbd1 	bl	8013a98 <qmRegisterQueue>

  passthroughTaskHandle = STATIC_MEM_TASK_CREATE(passthroughTask, passthroughTask, PASSTHROUGH_TASK_NAME, NULL, PASSTHROUGH_TASK_PRI);
 80062f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062fa:	461a      	mov	r2, r3
 80062fc:	4b11      	ldr	r3, [pc, #68]	; (8006344 <passthroughInit+0xb0>)
 80062fe:	9302      	str	r3, [sp, #8]
 8006300:	4b11      	ldr	r3, [pc, #68]	; (8006348 <passthroughInit+0xb4>)
 8006302:	9301      	str	r3, [sp, #4]
 8006304:	2305      	movs	r3, #5
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	2300      	movs	r3, #0
 800630a:	4910      	ldr	r1, [pc, #64]	; (800634c <passthroughInit+0xb8>)
 800630c:	4810      	ldr	r0, [pc, #64]	; (8006350 <passthroughInit+0xbc>)
 800630e:	f019 f931 	bl	801f574 <xTaskCreateStatic>
 8006312:	4603      	mov	r3, r0
 8006314:	4a0f      	ldr	r2, [pc, #60]	; (8006354 <passthroughInit+0xc0>)
 8006316:	6013      	str	r3, [r2, #0]
 8006318:	e000      	b.n	800631c <passthroughInit+0x88>
    return;
 800631a:	bf00      	nop
}
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	2000913c 	.word	0x2000913c
 8006324:	20003328 	.word	0x20003328
 8006328:	20003128 	.word	0x20003128
 800632c:	20009140 	.word	0x20009140
 8006330:	0802a6d0 	.word	0x0802a6d0
 8006334:	0802a6dc 	.word	0x0802a6dc
 8006338:	20003578 	.word	0x20003578
 800633c:	20003378 	.word	0x20003378
 8006340:	20009144 	.word	0x20009144
 8006344:	20003070 	.word	0x20003070
 8006348:	20008d3c 	.word	0x20008d3c
 800634c:	0802a708 	.word	0x0802a708
 8006350:	08006359 	.word	0x08006359
 8006354:	20008d38 	.word	0x20008d38

08006358 <passthroughTask>:
  BaseType_t xHigherPriorityTaskWoken;
  return xQueueReceiveFromISR(ptTxQueue, receiveChPtr, &xHigherPriorityTaskWoken);
}

void passthroughTask(void *param)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 8006360:	f7ff fb64 	bl	8005a2c <systemWaitStart>

  while (true)
  {
    // Wait for interface to be activated, typically when ACM or COM port control message is sent
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8006364:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006368:	2001      	movs	r0, #1
 800636a:	f01a fb2b 	bl	80209c4 <ulTaskNotifyTake>
//    paramVarId_t motorPowerSetEnableParam;
//    motorPowerSetEnableParam = paramGetVarId("motorPowerSet", "enable");
//    paramSetInt(motorPowerSetEnableParam, 0);

    // Clear any notifications that was queued during 4way process.
    ulTaskNotifyValueClear(NULL, 0xFFFFFFFF);
 800636e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006372:	2000      	movs	r0, #0
 8006374:	f01a fb72 	bl	8020a5c <ulTaskNotifyValueClear>
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8006378:	e7f4      	b.n	8006364 <passthroughTask+0xc>
	...

0800637c <commanderInit>:
static xQueueHandle priorityQueue;
STATIC_MEM_QUEUE_ALLOC(priorityQueue, 1, sizeof(int));

/* Public functions */
void commanderInit(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af02      	add	r7, sp, #8
  setpointQueue = STATIC_MEM_QUEUE_CREATE(setpointQueue);
 8006382:	2301      	movs	r3, #1
 8006384:	4618      	mov	r0, r3
 8006386:	2370      	movs	r3, #112	; 0x70
 8006388:	4619      	mov	r1, r3
 800638a:	2300      	movs	r3, #0
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	4b21      	ldr	r3, [pc, #132]	; (8006414 <commanderInit+0x98>)
 8006390:	4a21      	ldr	r2, [pc, #132]	; (8006418 <commanderInit+0x9c>)
 8006392:	f018 f9df 	bl	801e754 <xQueueGenericCreateStatic>
 8006396:	4603      	mov	r3, r0
 8006398:	4a20      	ldr	r2, [pc, #128]	; (800641c <commanderInit+0xa0>)
 800639a:	6013      	str	r3, [r2, #0]
  ASSERT(setpointQueue);
 800639c:	4b1f      	ldr	r3, [pc, #124]	; (800641c <commanderInit+0xa0>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d104      	bne.n	80063ae <commanderInit+0x32>
 80063a4:	223c      	movs	r2, #60	; 0x3c
 80063a6:	491e      	ldr	r1, [pc, #120]	; (8006420 <commanderInit+0xa4>)
 80063a8:	481e      	ldr	r0, [pc, #120]	; (8006424 <commanderInit+0xa8>)
 80063aa:	f00a fc37 	bl	8010c1c <assertFail>
  xQueueSend(setpointQueue, &nullSetpoint, 0);
 80063ae:	4b1b      	ldr	r3, [pc, #108]	; (800641c <commanderInit+0xa0>)
 80063b0:	6818      	ldr	r0, [r3, #0]
 80063b2:	2300      	movs	r3, #0
 80063b4:	2200      	movs	r2, #0
 80063b6:	491c      	ldr	r1, [pc, #112]	; (8006428 <commanderInit+0xac>)
 80063b8:	f018 fae2 	bl	801e980 <xQueueGenericSend>

  priorityQueue = STATIC_MEM_QUEUE_CREATE(priorityQueue);
 80063bc:	2301      	movs	r3, #1
 80063be:	4618      	mov	r0, r3
 80063c0:	2304      	movs	r3, #4
 80063c2:	4619      	mov	r1, r3
 80063c4:	2300      	movs	r3, #0
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	4b18      	ldr	r3, [pc, #96]	; (800642c <commanderInit+0xb0>)
 80063ca:	4a19      	ldr	r2, [pc, #100]	; (8006430 <commanderInit+0xb4>)
 80063cc:	f018 f9c2 	bl	801e754 <xQueueGenericCreateStatic>
 80063d0:	4603      	mov	r3, r0
 80063d2:	4a18      	ldr	r2, [pc, #96]	; (8006434 <commanderInit+0xb8>)
 80063d4:	6013      	str	r3, [r2, #0]
  ASSERT(priorityQueue);
 80063d6:	4b17      	ldr	r3, [pc, #92]	; (8006434 <commanderInit+0xb8>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d104      	bne.n	80063e8 <commanderInit+0x6c>
 80063de:	2240      	movs	r2, #64	; 0x40
 80063e0:	490f      	ldr	r1, [pc, #60]	; (8006420 <commanderInit+0xa4>)
 80063e2:	4815      	ldr	r0, [pc, #84]	; (8006438 <commanderInit+0xbc>)
 80063e4:	f00a fc1a 	bl	8010c1c <assertFail>
  xQueueSend(priorityQueue, &priorityDisable, 0);
 80063e8:	4b12      	ldr	r3, [pc, #72]	; (8006434 <commanderInit+0xb8>)
 80063ea:	6818      	ldr	r0, [r3, #0]
 80063ec:	2300      	movs	r3, #0
 80063ee:	2200      	movs	r2, #0
 80063f0:	4912      	ldr	r1, [pc, #72]	; (800643c <commanderInit+0xc0>)
 80063f2:	f018 fac5 	bl	801e980 <xQueueGenericSend>

  crtpCommanderInit();
 80063f6:	f7fb f937 	bl	8001668 <crtpCommanderInit>
  crtpCommanderHighLevelInit();
 80063fa:	f7fb fecf 	bl	800219c <crtpCommanderHighLevelInit>
  lastUpdate = xTaskGetTickCount();
 80063fe:	f019 fc2f 	bl	801fc60 <xTaskGetTickCount>
 8006402:	4603      	mov	r3, r0
 8006404:	4a0e      	ldr	r2, [pc, #56]	; (8006440 <commanderInit+0xc4>)
 8006406:	6013      	str	r3, [r2, #0]

  isInit = true;
 8006408:	4b0e      	ldr	r3, [pc, #56]	; (8006444 <commanderInit+0xc8>)
 800640a:	2201      	movs	r2, #1
 800640c:	701a      	strb	r2, [r3, #0]
}
 800640e:	bf00      	nop
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	20003638 	.word	0x20003638
 8006418:	200035c8 	.word	0x200035c8
 800641c:	200091ac 	.word	0x200091ac
 8006420:	0802a994 	.word	0x0802a994
 8006424:	0802a9b8 	.word	0x0802a9b8
 8006428:	0802d808 	.word	0x0802d808
 800642c:	2000368c 	.word	0x2000368c
 8006430:	20003688 	.word	0x20003688
 8006434:	200091b0 	.word	0x200091b0
 8006438:	0802a9c8 	.word	0x0802a9c8
 800643c:	0802d878 	.word	0x0802d878
 8006440:	200091a4 	.word	0x200091a4
 8006444:	20009150 	.word	0x20009150

08006448 <commanderSetSetpoint>:

void commanderSetSetpoint(setpoint_t *setpoint, int priority)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  int currentPriority;

  const BaseType_t peekResult = xQueuePeek(priorityQueue, &currentPriority, 0);
 8006452:	4b18      	ldr	r3, [pc, #96]	; (80064b4 <commanderSetSetpoint+0x6c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f107 0108 	add.w	r1, r7, #8
 800645a:	2200      	movs	r2, #0
 800645c:	4618      	mov	r0, r3
 800645e:	f018 fe1b 	bl	801f098 <xQueuePeek>
 8006462:	60f8      	str	r0, [r7, #12]
  ASSERT(peekResult == pdTRUE);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d004      	beq.n	8006474 <commanderSetSetpoint+0x2c>
 800646a:	224f      	movs	r2, #79	; 0x4f
 800646c:	4912      	ldr	r1, [pc, #72]	; (80064b8 <commanderSetSetpoint+0x70>)
 800646e:	4813      	ldr	r0, [pc, #76]	; (80064bc <commanderSetSetpoint+0x74>)
 8006470:	f00a fbd4 	bl	8010c1c <assertFail>

  if (priority >= currentPriority) {
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	429a      	cmp	r2, r3
 800647a:	db17      	blt.n	80064ac <commanderSetSetpoint+0x64>
    setpoint->timestamp = xTaskGetTickCount();
 800647c:	f019 fbf0 	bl	801fc60 <xTaskGetTickCount>
 8006480:	4602      	mov	r2, r0
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	601a      	str	r2, [r3, #0]
    // This is a potential race but without effect on functionality
    xQueueOverwrite(setpointQueue, setpoint);
 8006486:	4b0e      	ldr	r3, [pc, #56]	; (80064c0 <commanderSetSetpoint+0x78>)
 8006488:	6818      	ldr	r0, [r3, #0]
 800648a:	2302      	movs	r3, #2
 800648c:	2200      	movs	r2, #0
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	f018 fa76 	bl	801e980 <xQueueGenericSend>
    xQueueOverwrite(priorityQueue, &priority);
 8006494:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <commanderSetSetpoint+0x6c>)
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	4639      	mov	r1, r7
 800649a:	2302      	movs	r3, #2
 800649c:	2200      	movs	r2, #0
 800649e:	f018 fa6f 	bl	801e980 <xQueueGenericSend>
    if (priority > COMMANDER_PRIORITY_HIGHLEVEL) {
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	dd01      	ble.n	80064ac <commanderSetSetpoint+0x64>
      // Stop the high-level planner so it will forget its current state
      crtpCommanderHighLevelStop();
 80064a8:	f7fc fd4a 	bl	8002f40 <crtpCommanderHighLevelStop>
    }
  }
}
 80064ac:	bf00      	nop
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	200091b0 	.word	0x200091b0
 80064b8:	0802a994 	.word	0x0802a994
 80064bc:	0802a9d8 	.word	0x0802a9d8
 80064c0:	200091ac 	.word	0x200091ac

080064c4 <commanderRelaxPriority>:

void commanderRelaxPriority()
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
  crtpCommanderHighLevelTellState(&lastState);
 80064ca:	4808      	ldr	r0, [pc, #32]	; (80064ec <commanderRelaxPriority+0x28>)
 80064cc:	f7fb fece 	bl	800226c <crtpCommanderHighLevelTellState>
  int priority = COMMANDER_PRIORITY_LOWEST;
 80064d0:	2301      	movs	r3, #1
 80064d2:	607b      	str	r3, [r7, #4]
  xQueueOverwrite(priorityQueue, &priority);
 80064d4:	4b06      	ldr	r3, [pc, #24]	; (80064f0 <commanderRelaxPriority+0x2c>)
 80064d6:	6818      	ldr	r0, [r3, #0]
 80064d8:	1d39      	adds	r1, r7, #4
 80064da:	2302      	movs	r3, #2
 80064dc:	2200      	movs	r2, #0
 80064de:	f018 fa4f 	bl	801e980 <xQueueGenericSend>
}
 80064e2:	bf00      	nop
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	20009154 	.word	0x20009154
 80064f0:	200091b0 	.word	0x200091b0

080064f4 <commanderGetActivePriority>:
{
  return xTaskGetTickCount() - lastUpdate;
}

int commanderGetActivePriority(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
  int priority;

  const BaseType_t peekResult = xQueuePeek(priorityQueue, &priority, 0);
 80064fa:	4b0a      	ldr	r3, [pc, #40]	; (8006524 <commanderGetActivePriority+0x30>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4639      	mov	r1, r7
 8006500:	2200      	movs	r2, #0
 8006502:	4618      	mov	r0, r3
 8006504:	f018 fdc8 	bl	801f098 <xQueuePeek>
 8006508:	6078      	str	r0, [r7, #4]
  ASSERT(peekResult == pdTRUE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d004      	beq.n	800651a <commanderGetActivePriority+0x26>
 8006510:	227e      	movs	r2, #126	; 0x7e
 8006512:	4905      	ldr	r1, [pc, #20]	; (8006528 <commanderGetActivePriority+0x34>)
 8006514:	4805      	ldr	r0, [pc, #20]	; (800652c <commanderGetActivePriority+0x38>)
 8006516:	f00a fb81 	bl	8010c1c <assertFail>

  return priority;
 800651a:	683b      	ldr	r3, [r7, #0]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	200091b0 	.word	0x200091b0
 8006528:	0802a994 	.word	0x0802a994
 800652c:	0802a9d8 	.word	0x0802a9d8

08006530 <estimatorEnqueue>:
const char* stateEstimatorGetName() {
  return estimatorFunctions[currentEstimator].name;
}


void estimatorEnqueue(const measurement_t *measurement) {
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  if (!measurementsQueue) {
 8006538:	4b64      	ldr	r3, [pc, #400]	; (80066cc <estimatorEnqueue+0x19c>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 80bf 	beq.w	80066c0 <estimatorEnqueue+0x190>
    return;
  }

  portBASE_TYPE result;
  bool isInInterrupt = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 8006542:	4b63      	ldr	r3, [pc, #396]	; (80066d0 <estimatorEnqueue+0x1a0>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800654a:	2b00      	cmp	r3, #0
 800654c:	bf14      	ite	ne
 800654e:	2301      	movne	r3, #1
 8006550:	2300      	moveq	r3, #0
 8006552:	74fb      	strb	r3, [r7, #19]
  if (isInInterrupt) {
 8006554:	7cfb      	ldrb	r3, [r7, #19]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d016      	beq.n	8006588 <estimatorEnqueue+0x58>
    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
    result = xQueueSendFromISR(measurementsQueue, measurement, &xHigherPriorityTaskWoken);
 800655e:	4b5b      	ldr	r3, [pc, #364]	; (80066cc <estimatorEnqueue+0x19c>)
 8006560:	6818      	ldr	r0, [r3, #0]
 8006562:	f107 020c 	add.w	r2, r7, #12
 8006566:	2300      	movs	r3, #0
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	f018 fb17 	bl	801eb9c <xQueueGenericSendFromISR>
 800656e:	6178      	str	r0, [r7, #20]
    if (xHigherPriorityTaskWoken == pdTRUE) {
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d110      	bne.n	8006598 <estimatorEnqueue+0x68>
      portYIELD();
 8006576:	4b57      	ldr	r3, [pc, #348]	; (80066d4 <estimatorEnqueue+0x1a4>)
 8006578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	e007      	b.n	8006598 <estimatorEnqueue+0x68>
    }
  } else {
    result = xQueueSend(measurementsQueue, measurement, 0);
 8006588:	4b50      	ldr	r3, [pc, #320]	; (80066cc <estimatorEnqueue+0x19c>)
 800658a:	6818      	ldr	r0, [r3, #0]
 800658c:	2300      	movs	r3, #0
 800658e:	2200      	movs	r2, #0
 8006590:	6879      	ldr	r1, [r7, #4]
 8006592:	f018 f9f5 	bl	801e980 <xQueueGenericSend>
 8006596:	6178      	str	r0, [r7, #20]
  }

  if (result == pdTRUE) {
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d105      	bne.n	80065aa <estimatorEnqueue+0x7a>
    STATS_CNT_RATE_EVENT(&measurementAppendedCounter);
 800659e:	4b4e      	ldr	r3, [pc, #312]	; (80066d8 <estimatorEnqueue+0x1a8>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	3301      	adds	r3, #1
 80065a4:	4a4c      	ldr	r2, [pc, #304]	; (80066d8 <estimatorEnqueue+0x1a8>)
 80065a6:	6093      	str	r3, [r2, #8]
 80065a8:	e004      	b.n	80065b4 <estimatorEnqueue+0x84>
  } else {
    STATS_CNT_RATE_EVENT(&measurementNotAppendedCounter);
 80065aa:	4b4c      	ldr	r3, [pc, #304]	; (80066dc <estimatorEnqueue+0x1ac>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	3301      	adds	r3, #1
 80065b0:	4a4a      	ldr	r2, [pc, #296]	; (80066dc <estimatorEnqueue+0x1ac>)
 80065b2:	6093      	str	r3, [r2, #8]
  }

  // events
  switch (measurement->type) {
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b0b      	cmp	r3, #11
 80065ba:	f200 8083 	bhi.w	80066c4 <estimatorEnqueue+0x194>
 80065be:	a201      	add	r2, pc, #4	; (adr r2, 80065c4 <estimatorEnqueue+0x94>)
 80065c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c4:	080065f5 	.word	0x080065f5
 80065c8:	0800661b 	.word	0x0800661b
 80065cc:	0800662b 	.word	0x0800662b
 80065d0:	08006633 	.word	0x08006633
 80065d4:	0800664d 	.word	0x0800664d
 80065d8:	08006655 	.word	0x08006655
 80065dc:	0800665d 	.word	0x0800665d
 80065e0:	08006665 	.word	0x08006665
 80065e4:	08006675 	.word	0x08006675
 80065e8:	080066a9 	.word	0x080066a9
 80065ec:	080066b1 	.word	0x080066b1
 80065f0:	080066b9 	.word	0x080066b9
    case MeasurementTypeTDOA:
      eventTrigger_estTDOA_payload.idA = measurement->data.tdoa.anchorIds[0];
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80065fa:	4b39      	ldr	r3, [pc, #228]	; (80066e0 <estimatorEnqueue+0x1b0>)
 80065fc:	701a      	strb	r2, [r3, #0]
      eventTrigger_estTDOA_payload.idB = measurement->data.tdoa.anchorIds[1];
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8006604:	4b36      	ldr	r3, [pc, #216]	; (80066e0 <estimatorEnqueue+0x1b0>)
 8006606:	705a      	strb	r2, [r3, #1]
      eventTrigger_estTDOA_payload.distanceDiff = measurement->data.tdoa.distanceDiff;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800660c:	4b34      	ldr	r3, [pc, #208]	; (80066e0 <estimatorEnqueue+0x1b0>)
 800660e:	f8c3 2002 	str.w	r2, [r3, #2]
      eventTrigger(&eventTrigger_estTDOA);
 8006612:	4834      	ldr	r0, [pc, #208]	; (80066e4 <estimatorEnqueue+0x1b4>)
 8006614:	f00a fcd8 	bl	8010fc8 <eventTrigger>
      break;
 8006618:	e055      	b.n	80066c6 <estimatorEnqueue+0x196>
    case MeasurementTypePosition:
      // for additional data, see locSrv.{x,y,z} and lighthouse.{x,y,z}
      eventTrigger_estPosition_payload.source = measurement->data.position.source;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	7d1a      	ldrb	r2, [r3, #20]
 800661e:	4b32      	ldr	r3, [pc, #200]	; (80066e8 <estimatorEnqueue+0x1b8>)
 8006620:	701a      	strb	r2, [r3, #0]
      eventTrigger(&eventTrigger_estPosition);
 8006622:	4832      	ldr	r0, [pc, #200]	; (80066ec <estimatorEnqueue+0x1bc>)
 8006624:	f00a fcd0 	bl	8010fc8 <eventTrigger>
      break;
 8006628:	e04d      	b.n	80066c6 <estimatorEnqueue+0x196>
    case MeasurementTypePose:
      // no payload needed, see locSrv.{x,y,z,qx,qy,qz,qw}
      eventTrigger(&eventTrigger_estPose);
 800662a:	4831      	ldr	r0, [pc, #196]	; (80066f0 <estimatorEnqueue+0x1c0>)
 800662c:	f00a fccc 	bl	8010fc8 <eventTrigger>
      break;
 8006630:	e049      	b.n	80066c6 <estimatorEnqueue+0x196>
    case MeasurementTypeDistance:
      eventTrigger_estDistance_payload.id = measurement->data.distance.anchorId;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	7c1a      	ldrb	r2, [r3, #16]
 8006636:	4b2f      	ldr	r3, [pc, #188]	; (80066f4 <estimatorEnqueue+0x1c4>)
 8006638:	701a      	strb	r2, [r3, #0]
      eventTrigger_estDistance_payload.distance = measurement->data.distance.distance;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	695a      	ldr	r2, [r3, #20]
 800663e:	4b2d      	ldr	r3, [pc, #180]	; (80066f4 <estimatorEnqueue+0x1c4>)
 8006640:	f8c3 2001 	str.w	r2, [r3, #1]
      eventTrigger(&eventTrigger_estDistance);
 8006644:	482c      	ldr	r0, [pc, #176]	; (80066f8 <estimatorEnqueue+0x1c8>)
 8006646:	f00a fcbf 	bl	8010fc8 <eventTrigger>
      break;
 800664a:	e03c      	b.n	80066c6 <estimatorEnqueue+0x196>
    case MeasurementTypeTOF:
      // no payload needed, see range.zrange
      eventTrigger(&eventTrigger_estTOF);
 800664c:	482b      	ldr	r0, [pc, #172]	; (80066fc <estimatorEnqueue+0x1cc>)
 800664e:	f00a fcbb 	bl	8010fc8 <eventTrigger>
      break;
 8006652:	e038      	b.n	80066c6 <estimatorEnqueue+0x196>
    case MeasurementTypeAbsoluteHeight:
      // no payload needed, see CONFIG_DECK_LOCO_2D_POSITION
      eventTrigger(&eventTrigger_estAbsoluteHeight);
 8006654:	482a      	ldr	r0, [pc, #168]	; (8006700 <estimatorEnqueue+0x1d0>)
 8006656:	f00a fcb7 	bl	8010fc8 <eventTrigger>
      break;
 800665a:	e034      	b.n	80066c6 <estimatorEnqueue+0x196>
    case MeasurementTypeFlow:
      // no payload needed, see motion.{deltaX,deltaY}
      eventTrigger(&eventTrigger_estFlow);
 800665c:	4829      	ldr	r0, [pc, #164]	; (8006704 <estimatorEnqueue+0x1d4>)
 800665e:	f00a fcb3 	bl	8010fc8 <eventTrigger>
      break;
 8006662:	e030      	b.n	80066c6 <estimatorEnqueue+0x196>
    case MeasurementTypeYawError:
      eventTrigger_estYawError_payload.yawError = measurement->data.yawError.yawError;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	4a27      	ldr	r2, [pc, #156]	; (8006708 <estimatorEnqueue+0x1d8>)
 800666a:	6013      	str	r3, [r2, #0]
      eventTrigger(&eventTrigger_estYawError);
 800666c:	4827      	ldr	r0, [pc, #156]	; (800670c <estimatorEnqueue+0x1dc>)
 800666e:	f00a fcab 	bl	8010fc8 <eventTrigger>
      break;
 8006672:	e028      	b.n	80066c6 <estimatorEnqueue+0x196>
    case MeasurementTypeSweepAngle:
      eventTrigger_estSweepAngle_payload.sensorId = measurement->data.sweepAngle.sensorId;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	7e1a      	ldrb	r2, [r3, #24]
 8006678:	4b25      	ldr	r3, [pc, #148]	; (8006710 <estimatorEnqueue+0x1e0>)
 800667a:	701a      	strb	r2, [r3, #0]
      eventTrigger_estSweepAngle_payload.baseStationId = measurement->data.sweepAngle.baseStationId;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	7e5a      	ldrb	r2, [r3, #25]
 8006680:	4b23      	ldr	r3, [pc, #140]	; (8006710 <estimatorEnqueue+0x1e0>)
 8006682:	705a      	strb	r2, [r3, #1]
      eventTrigger_estSweepAngle_payload.sweepId = measurement->data.sweepAngle.sweepId;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	7e9a      	ldrb	r2, [r3, #26]
 8006688:	4b21      	ldr	r3, [pc, #132]	; (8006710 <estimatorEnqueue+0x1e0>)
 800668a:	709a      	strb	r2, [r3, #2]
      eventTrigger_estSweepAngle_payload.t = measurement->data.sweepAngle.t;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	69da      	ldr	r2, [r3, #28]
 8006690:	4b1f      	ldr	r3, [pc, #124]	; (8006710 <estimatorEnqueue+0x1e0>)
 8006692:	f8c3 2003 	str.w	r2, [r3, #3]
      eventTrigger_estSweepAngle_payload.sweepAngle = measurement->data.sweepAngle.measuredSweepAngle;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1a      	ldr	r2, [r3, #32]
 800669a:	4b1d      	ldr	r3, [pc, #116]	; (8006710 <estimatorEnqueue+0x1e0>)
 800669c:	f8c3 2007 	str.w	r2, [r3, #7]
      eventTrigger(&eventTrigger_estSweepAngle);
 80066a0:	481c      	ldr	r0, [pc, #112]	; (8006714 <estimatorEnqueue+0x1e4>)
 80066a2:	f00a fc91 	bl	8010fc8 <eventTrigger>
      break;
 80066a6:	e00e      	b.n	80066c6 <estimatorEnqueue+0x196>
    case MeasurementTypeGyroscope:
      // no payload needed, see gyro.{x,y,z}
      eventTrigger(&eventTrigger_estGyroscope);
 80066a8:	481b      	ldr	r0, [pc, #108]	; (8006718 <estimatorEnqueue+0x1e8>)
 80066aa:	f00a fc8d 	bl	8010fc8 <eventTrigger>
      break;
 80066ae:	e00a      	b.n	80066c6 <estimatorEnqueue+0x196>
    case MeasurementTypeAcceleration:
      // no payload needed, see acc.{x,y,z}
      eventTrigger(&eventTrigger_estAcceleration);
 80066b0:	481a      	ldr	r0, [pc, #104]	; (800671c <estimatorEnqueue+0x1ec>)
 80066b2:	f00a fc89 	bl	8010fc8 <eventTrigger>
      break;
 80066b6:	e006      	b.n	80066c6 <estimatorEnqueue+0x196>
    case MeasurementTypeBarometer:
      // no payload needed, see baro.asl
      eventTrigger(&eventTrigger_estBarometer);
 80066b8:	4819      	ldr	r0, [pc, #100]	; (8006720 <estimatorEnqueue+0x1f0>)
 80066ba:	f00a fc85 	bl	8010fc8 <eventTrigger>
      break;
 80066be:	e002      	b.n	80066c6 <estimatorEnqueue+0x196>
    return;
 80066c0:	bf00      	nop
 80066c2:	e000      	b.n	80066c6 <estimatorEnqueue+0x196>
    default:
      break;
 80066c4:	bf00      	nop
  }
}
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	20009214 	.word	0x20009214
 80066d0:	e000ed00 	.word	0xe000ed00
 80066d4:	e000ed04 	.word	0xe000ed04
 80066d8:	20000724 	.word	0x20000724
 80066dc:	20000740 	.word	0x20000740
 80066e0:	20009218 	.word	0x20009218
 80066e4:	08029688 	.word	0x08029688
 80066e8:	20009220 	.word	0x20009220
 80066ec:	0802969c 	.word	0x0802969c
 80066f0:	080296b0 	.word	0x080296b0
 80066f4:	20009224 	.word	0x20009224
 80066f8:	080296c4 	.word	0x080296c4
 80066fc:	080296d8 	.word	0x080296d8
 8006700:	080296ec 	.word	0x080296ec
 8006704:	08029700 	.word	0x08029700
 8006708:	2000922c 	.word	0x2000922c
 800670c:	08029714 	.word	0x08029714
 8006710:	20009230 	.word	0x20009230
 8006714:	08029728 	.word	0x08029728
 8006718:	0802973c 	.word	0x0802973c
 800671c:	08029750 	.word	0x08029750
 8006720:	08029764 	.word	0x08029764

08006724 <estimatorDequeue>:

bool estimatorDequeue(measurement_t *measurement) {
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  return pdTRUE == xQueueReceive(measurementsQueue, measurement, 0);
 800672c:	4b08      	ldr	r3, [pc, #32]	; (8006750 <estimatorDequeue+0x2c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2200      	movs	r2, #0
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	4618      	mov	r0, r3
 8006736:	f018 fac5 	bl	801ecc4 <xQueueReceive>
 800673a:	4603      	mov	r3, r0
 800673c:	2b01      	cmp	r3, #1
 800673e:	bf0c      	ite	eq
 8006740:	2301      	moveq	r3, #1
 8006742:	2300      	movne	r3, #0
 8006744:	b2db      	uxtb	r3, r3
}
 8006746:	4618      	mov	r0, r3
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	20009214 	.word	0x20009214

08006754 <estimatorKalmanTaskInit>:
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(kalmanTask, KALMAN_TASK_STACKSIZE);

// --------------------------------------------------

// Called one time during system startup
void estimatorKalmanTaskInit() {
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af04      	add	r7, sp, #16
  kalmanCoreDefaultParams(&coreParams);
 800675a:	4817      	ldr	r0, [pc, #92]	; (80067b8 <estimatorKalmanTaskInit+0x64>)
 800675c:	f000 fb7c 	bl	8006e58 <kalmanCoreDefaultParams>

  // Created in the 'empty' state, meaning the semaphore must first be given, that is it will block in the task
  // until released by the stabilizer loop
  runTaskSemaphore = xSemaphoreCreateBinary();
 8006760:	2203      	movs	r2, #3
 8006762:	2100      	movs	r1, #0
 8006764:	2001      	movs	r0, #1
 8006766:	f018 f861 	bl	801e82c <xQueueGenericCreate>
 800676a:	4603      	mov	r3, r0
 800676c:	4a13      	ldr	r2, [pc, #76]	; (80067bc <estimatorKalmanTaskInit+0x68>)
 800676e:	6013      	str	r3, [r2, #0]
  ASSERT(runTaskSemaphore);
 8006770:	4b12      	ldr	r3, [pc, #72]	; (80067bc <estimatorKalmanTaskInit+0x68>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d104      	bne.n	8006782 <estimatorKalmanTaskInit+0x2e>
 8006778:	22c4      	movs	r2, #196	; 0xc4
 800677a:	4911      	ldr	r1, [pc, #68]	; (80067c0 <estimatorKalmanTaskInit+0x6c>)
 800677c:	4811      	ldr	r0, [pc, #68]	; (80067c4 <estimatorKalmanTaskInit+0x70>)
 800677e:	f00a fa4d 	bl	8010c1c <assertFail>

  dataMutex = xSemaphoreCreateMutexStatic(&dataMutexBuffer);
 8006782:	4911      	ldr	r1, [pc, #68]	; (80067c8 <estimatorKalmanTaskInit+0x74>)
 8006784:	2001      	movs	r0, #1
 8006786:	f018 f8e0 	bl	801e94a <xQueueCreateMutexStatic>
 800678a:	4603      	mov	r3, r0
 800678c:	4a0f      	ldr	r2, [pc, #60]	; (80067cc <estimatorKalmanTaskInit+0x78>)
 800678e:	6013      	str	r3, [r2, #0]

  STATIC_MEM_TASK_CREATE(kalmanTask, kalmanTask, KALMAN_TASK_NAME, NULL, KALMAN_TASK_PRI);
 8006790:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006794:	461a      	mov	r2, r3
 8006796:	4b0e      	ldr	r3, [pc, #56]	; (80067d0 <estimatorKalmanTaskInit+0x7c>)
 8006798:	9302      	str	r3, [sp, #8]
 800679a:	4b0e      	ldr	r3, [pc, #56]	; (80067d4 <estimatorKalmanTaskInit+0x80>)
 800679c:	9301      	str	r3, [sp, #4]
 800679e:	2302      	movs	r3, #2
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	2300      	movs	r3, #0
 80067a4:	490c      	ldr	r1, [pc, #48]	; (80067d8 <estimatorKalmanTaskInit+0x84>)
 80067a6:	480d      	ldr	r0, [pc, #52]	; (80067dc <estimatorKalmanTaskInit+0x88>)
 80067a8:	f018 fee4 	bl	801f574 <xTaskCreateStatic>

  isInit = true;
 80067ac:	4b0c      	ldr	r3, [pc, #48]	; (80067e0 <estimatorKalmanTaskInit+0x8c>)
 80067ae:	2201      	movs	r2, #1
 80067b0:	701a      	strb	r2, [r3, #0]
}
 80067b2:	bf00      	nop
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	20009308 	.word	0x20009308
 80067bc:	2000923c 	.word	0x2000923c
 80067c0:	0802affc 	.word	0x0802affc
 80067c4:	0802b028 	.word	0x0802b028
 80067c8:	20009244 	.word	0x20009244
 80067cc:	20009240 	.word	0x20009240
 80067d0:	20003ea0 	.word	0x20003ea0
 80067d4:	200038a0 	.word	0x200038a0
 80067d8:	0802b03c 	.word	0x0802b03c
 80067dc:	080067e5 	.word	0x080067e5
 80067e0:	20009296 	.word	0x20009296

080067e4 <kalmanTask>:

bool estimatorKalmanTaskTest() {
  return isInit;
}

static void kalmanTask(void* parameters) {
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af02      	add	r7, sp, #8
 80067ea:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 80067ec:	f7ff f91e 	bl	8005a2c <systemWaitStart>

  uint32_t nowMs = T2M(xTaskGetTickCount());
 80067f0:	f019 fa36 	bl	801fc60 <xTaskGetTickCount>
 80067f4:	6138      	str	r0, [r7, #16]
  uint32_t nextPredictionMs = nowMs;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	617b      	str	r3, [r7, #20]

  rateSupervisorInit(&rateSupervisorContext, nowMs, ONE_SECOND, PREDICT_RATE - 1, PREDICT_RATE + 1, 1);
 80067fa:	2301      	movs	r3, #1
 80067fc:	9301      	str	r3, [sp, #4]
 80067fe:	2365      	movs	r3, #101	; 0x65
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	2363      	movs	r3, #99	; 0x63
 8006804:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006808:	6939      	ldr	r1, [r7, #16]
 800680a:	4848      	ldr	r0, [pc, #288]	; (800692c <kalmanTask+0x148>)
 800680c:	f009 f985 	bl	800fb1a <rateSupervisorInit>

  while (true) {
    xSemaphoreTake(runTaskSemaphore, portMAX_DELAY);
 8006810:	4b47      	ldr	r3, [pc, #284]	; (8006930 <kalmanTask+0x14c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006818:	4618      	mov	r0, r3
 800681a:	f018 fb33 	bl	801ee84 <xQueueSemaphoreTake>
    nowMs = T2M(xTaskGetTickCount()); // would be nice if this had a precision higher than 1ms...
 800681e:	f019 fa1f 	bl	801fc60 <xTaskGetTickCount>
 8006822:	6138      	str	r0, [r7, #16]

    if (resetEstimation) {
 8006824:	4b43      	ldr	r3, [pc, #268]	; (8006934 <kalmanTask+0x150>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d004      	beq.n	8006836 <kalmanTask+0x52>
      estimatorKalmanInit();
 800682c:	f000 f97e 	bl	8006b2c <estimatorKalmanInit>
      resetEstimation = false;
 8006830:	4b40      	ldr	r3, [pc, #256]	; (8006934 <kalmanTask+0x150>)
 8006832:	2200      	movs	r2, #0
 8006834:	701a      	strb	r2, [r3, #0]
    }

    bool quadIsFlying = supervisorIsFlying();
 8006836:	f009 f9e1 	bl	800fbfc <supervisorIsFlying>
 800683a:	4603      	mov	r3, r0
 800683c:	73fb      	strb	r3, [r7, #15]
  #ifdef KALMAN_DECOUPLE_XY
    kalmanCoreDecoupleXY(&coreData);
  #endif

    // Run the system dynamics to predict the state forward.
    if (nowMs >= nextPredictionMs) {
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	429a      	cmp	r2, r3
 8006844:	d329      	bcc.n	800689a <kalmanTask+0xb6>
      axis3fSubSamplerFinalize(&accSubSampler);
 8006846:	483c      	ldr	r0, [pc, #240]	; (8006938 <kalmanTask+0x154>)
 8006848:	f00a f97f 	bl	8010b4a <axis3fSubSamplerFinalize>
      axis3fSubSamplerFinalize(&gyroSubSampler);
 800684c:	483b      	ldr	r0, [pc, #236]	; (800693c <kalmanTask+0x158>)
 800684e:	f00a f97c 	bl	8010b4a <axis3fSubSamplerFinalize>

      kalmanCorePredict(&coreData, &accSubSampler.subSample, &gyroSubSampler.subSample, nowMs, quadIsFlying);
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	4a39      	ldr	r2, [pc, #228]	; (8006940 <kalmanTask+0x15c>)
 800685a:	493a      	ldr	r1, [pc, #232]	; (8006944 <kalmanTask+0x160>)
 800685c:	483a      	ldr	r0, [pc, #232]	; (8006948 <kalmanTask+0x164>)
 800685e:	f001 ffcb 	bl	80087f8 <kalmanCorePredict>
      nextPredictionMs = nowMs + PREDICTION_UPDATE_INTERVAL_MS;
 8006862:	220a      	movs	r2, #10
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	4413      	add	r3, r2
 8006868:	617b      	str	r3, [r7, #20]

      STATS_CNT_RATE_EVENT(&predictionCounter);
 800686a:	4b38      	ldr	r3, [pc, #224]	; (800694c <kalmanTask+0x168>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	3301      	adds	r3, #1
 8006870:	4a36      	ldr	r2, [pc, #216]	; (800694c <kalmanTask+0x168>)
 8006872:	6093      	str	r3, [r2, #8]

      if (!rateSupervisorValidate(&rateSupervisorContext, nowMs)) {
 8006874:	6939      	ldr	r1, [r7, #16]
 8006876:	482d      	ldr	r0, [pc, #180]	; (800692c <kalmanTask+0x148>)
 8006878:	f009 f973 	bl	800fb62 <rateSupervisorValidate>
 800687c:	4603      	mov	r3, r0
 800687e:	f083 0301 	eor.w	r3, r3, #1
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d008      	beq.n	800689a <kalmanTask+0xb6>
        DEBUG_PRINT("WARNING: Kalman prediction rate off (%lu)\n", rateSupervisorLatestCount(&rateSupervisorContext));
 8006888:	4828      	ldr	r0, [pc, #160]	; (800692c <kalmanTask+0x148>)
 800688a:	f009 f9aa 	bl	800fbe2 <rateSupervisorLatestCount>
 800688e:	4603      	mov	r3, r0
 8006890:	461a      	mov	r2, r3
 8006892:	492f      	ldr	r1, [pc, #188]	; (8006950 <kalmanTask+0x16c>)
 8006894:	2000      	movs	r0, #0
 8006896:	f00a f8fd 	bl	8010a94 <SEGGER_RTT_printf>
      }
    }

    // Add process noise every loop, rather than every prediction
    kalmanCoreAddProcessNoise(&coreData, &coreParams, nowMs);
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	492d      	ldr	r1, [pc, #180]	; (8006954 <kalmanTask+0x170>)
 800689e:	482a      	ldr	r0, [pc, #168]	; (8006948 <kalmanTask+0x164>)
 80068a0:	f002 f9cc 	bl	8008c3c <kalmanCoreAddProcessNoise>

    updateQueuedMeasurements(nowMs, quadIsFlying);
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	4619      	mov	r1, r3
 80068a8:	6938      	ldr	r0, [r7, #16]
 80068aa:	f000 f863 	bl	8006974 <updateQueuedMeasurements>

    if (kalmanCoreFinalize(&coreData))
 80068ae:	4826      	ldr	r0, [pc, #152]	; (8006948 <kalmanTask+0x164>)
 80068b0:	f002 f9f2 	bl	8008c98 <kalmanCoreFinalize>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d004      	beq.n	80068c4 <kalmanTask+0xe0>
    {
      STATS_CNT_RATE_EVENT(&finalizeCounter);
 80068ba:	4b27      	ldr	r3, [pc, #156]	; (8006958 <kalmanTask+0x174>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	3301      	adds	r3, #1
 80068c0:	4a25      	ldr	r2, [pc, #148]	; (8006958 <kalmanTask+0x174>)
 80068c2:	6093      	str	r3, [r2, #8]
    }

    if (! kalmanSupervisorIsStateWithinBounds(&coreData)) {
 80068c4:	4820      	ldr	r0, [pc, #128]	; (8006948 <kalmanTask+0x164>)
 80068c6:	f003 f82f 	bl	8009928 <kalmanSupervisorIsStateWithinBounds>
 80068ca:	4603      	mov	r3, r0
 80068cc:	f083 0301 	eor.w	r3, r3, #1
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d010      	beq.n	80068f8 <kalmanTask+0x114>
      resetEstimation = true;
 80068d6:	4b17      	ldr	r3, [pc, #92]	; (8006934 <kalmanTask+0x150>)
 80068d8:	2201      	movs	r2, #1
 80068da:	701a      	strb	r2, [r3, #0]

      if (nowMs > warningBlockTimeMs) {
 80068dc:	4b1f      	ldr	r3, [pc, #124]	; (800695c <kalmanTask+0x178>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d908      	bls.n	80068f8 <kalmanTask+0x114>
        warningBlockTimeMs = nowMs + WARNING_HOLD_BACK_TIME_MS;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80068ec:	4a1b      	ldr	r2, [pc, #108]	; (800695c <kalmanTask+0x178>)
 80068ee:	6013      	str	r3, [r2, #0]
        DEBUG_PRINT("State out of bounds, resetting\n");
 80068f0:	491b      	ldr	r1, [pc, #108]	; (8006960 <kalmanTask+0x17c>)
 80068f2:	2000      	movs	r0, #0
 80068f4:	f00a f8ce 	bl	8010a94 <SEGGER_RTT_printf>

    /**
     * Finally, the internal state is externalized.
     * This is done every round, since the external state includes some sensor data
     */
    xSemaphoreTake(dataMutex, portMAX_DELAY);
 80068f8:	4b1a      	ldr	r3, [pc, #104]	; (8006964 <kalmanTask+0x180>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006900:	4618      	mov	r0, r3
 8006902:	f018 fabf 	bl	801ee84 <xQueueSemaphoreTake>
    kalmanCoreExternalizeState(&coreData, &taskEstimatorState, &accLatest);
 8006906:	4a18      	ldr	r2, [pc, #96]	; (8006968 <kalmanTask+0x184>)
 8006908:	4918      	ldr	r1, [pc, #96]	; (800696c <kalmanTask+0x188>)
 800690a:	480f      	ldr	r0, [pc, #60]	; (8006948 <kalmanTask+0x164>)
 800690c:	f002 fe4a 	bl	80095a4 <kalmanCoreExternalizeState>
    xSemaphoreGive(dataMutex);
 8006910:	4b14      	ldr	r3, [pc, #80]	; (8006964 <kalmanTask+0x180>)
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	2300      	movs	r3, #0
 8006916:	2200      	movs	r2, #0
 8006918:	2100      	movs	r1, #0
 800691a:	f018 f831 	bl	801e980 <xQueueGenericSend>

    STATS_CNT_RATE_EVENT(&updateCounter);
 800691e:	4b14      	ldr	r3, [pc, #80]	; (8006970 <kalmanTask+0x18c>)
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	3301      	adds	r3, #1
 8006924:	4a12      	ldr	r2, [pc, #72]	; (8006970 <kalmanTask+0x18c>)
 8006926:	6093      	str	r3, [r2, #8]
  while (true) {
 8006928:	e772      	b.n	8006810 <kalmanTask+0x2c>
 800692a:	bf00      	nop
 800692c:	2000939c 	.word	0x2000939c
 8006930:	2000923c 	.word	0x2000923c
 8006934:	20009304 	.word	0x20009304
 8006938:	20009298 	.word	0x20009298
 800693c:	200092b8 	.word	0x200092b8
 8006940:	200092cc 	.word	0x200092cc
 8006944:	200092ac 	.word	0x200092ac
 8006948:	200036dc 	.word	0x200036dc
 800694c:	20000778 	.word	0x20000778
 8006950:	0802b044 	.word	0x0802b044
 8006954:	20009308 	.word	0x20009308
 8006958:	20000794 	.word	0x20000794
 800695c:	200093b8 	.word	0x200093b8
 8006960:	0802b070 	.word	0x0802b070
 8006964:	20009240 	.word	0x20009240
 8006968:	200092d8 	.word	0x200092d8
 800696c:	2000934c 	.word	0x2000934c
 8006970:	2000075c 	.word	0x2000075c

08006974 <updateQueuedMeasurements>:
  xSemaphoreGive(dataMutex);

  xSemaphoreGive(runTaskSemaphore);
}

static void updateQueuedMeasurements(const uint32_t nowMs, const bool quadIsFlying) {
 8006974:	b590      	push	{r4, r7, lr}
 8006976:	b08f      	sub	sp, #60	; 0x3c
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	70fb      	strb	r3, [r7, #3]
   * we therefore consume all measurements since the last loop, rather than accumulating
   */

  // Pull the latest sensors values of interest; discard the rest
  measurement_t m;
  while (estimatorDequeue(&m)) {
 8006980:	e0b1      	b.n	8006ae6 <updateQueuedMeasurements+0x172>
    switch (m.type) {
 8006982:	7a3b      	ldrb	r3, [r7, #8]
 8006984:	2b0b      	cmp	r3, #11
 8006986:	f200 80ad 	bhi.w	8006ae4 <updateQueuedMeasurements+0x170>
 800698a:	a201      	add	r2, pc, #4	; (adr r2, 8006990 <updateQueuedMeasurements+0x1c>)
 800698c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006990:	080069c1 	.word	0x080069c1
 8006994:	080069ed 	.word	0x080069ed
 8006998:	080069fd 	.word	0x080069fd
 800699c:	08006a0d 	.word	0x08006a0d
 80069a0:	08006a35 	.word	0x08006a35
 80069a4:	08006a45 	.word	0x08006a45
 80069a8:	08006a55 	.word	0x08006a55
 80069ac:	08006a67 	.word	0x08006a67
 80069b0:	08006a77 	.word	0x08006a77
 80069b4:	08006a89 	.word	0x08006a89
 80069b8:	08006aa9 	.word	0x08006aa9
 80069bc:	08006ac9 	.word	0x08006ac9
      case MeasurementTypeTDOA:
        if(robustTdoa){
 80069c0:	4b50      	ldr	r3, [pc, #320]	; (8006b04 <updateQueuedMeasurements+0x190>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d008      	beq.n	80069da <updateQueuedMeasurements+0x66>
          // robust KF update with TDOA measurements
          kalmanCoreRobustUpdateWithTdoa(&coreData, &m.data.tdoa, &outlierFilterTdoaState);
 80069c8:	f107 0308 	add.w	r3, r7, #8
 80069cc:	3304      	adds	r3, #4
 80069ce:	4a4e      	ldr	r2, [pc, #312]	; (8006b08 <updateQueuedMeasurements+0x194>)
 80069d0:	4619      	mov	r1, r3
 80069d2:	484e      	ldr	r0, [pc, #312]	; (8006b0c <updateQueuedMeasurements+0x198>)
 80069d4:	f005 f8f8 	bl	800bbc8 <kalmanCoreRobustUpdateWithTdoa>
 80069d8:	e085      	b.n	8006ae6 <updateQueuedMeasurements+0x172>
        }else{
          // standard KF update
          kalmanCoreUpdateWithTdoa(&coreData, &m.data.tdoa, nowMs, &outlierFilterTdoaState);
 80069da:	f107 0308 	add.w	r3, r7, #8
 80069de:	1d19      	adds	r1, r3, #4
 80069e0:	4b49      	ldr	r3, [pc, #292]	; (8006b08 <updateQueuedMeasurements+0x194>)
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	4849      	ldr	r0, [pc, #292]	; (8006b0c <updateQueuedMeasurements+0x198>)
 80069e6:	f004 fe1b 	bl	800b620 <kalmanCoreUpdateWithTdoa>
        }
        break;
 80069ea:	e07c      	b.n	8006ae6 <updateQueuedMeasurements+0x172>
      case MeasurementTypePosition:
        kalmanCoreUpdateWithPosition(&coreData, &m.data.position);
 80069ec:	f107 0308 	add.w	r3, r7, #8
 80069f0:	3304      	adds	r3, #4
 80069f2:	4619      	mov	r1, r3
 80069f4:	4845      	ldr	r0, [pc, #276]	; (8006b0c <updateQueuedMeasurements+0x198>)
 80069f6:	f004 fb97 	bl	800b128 <kalmanCoreUpdateWithPosition>
        break;
 80069fa:	e074      	b.n	8006ae6 <updateQueuedMeasurements+0x172>
      case MeasurementTypePose:
        kalmanCoreUpdateWithPose(&coreData, &m.data.pose);
 80069fc:	f107 0308 	add.w	r3, r7, #8
 8006a00:	3304      	adds	r3, #4
 8006a02:	4619      	mov	r1, r3
 8006a04:	4841      	ldr	r0, [pc, #260]	; (8006b0c <updateQueuedMeasurements+0x198>)
 8006a06:	f004 fa17 	bl	800ae38 <kalmanCoreUpdateWithPose>
        break;
 8006a0a:	e06c      	b.n	8006ae6 <updateQueuedMeasurements+0x172>
      case MeasurementTypeDistance:
        if(robustTwr){
 8006a0c:	4b40      	ldr	r3, [pc, #256]	; (8006b10 <updateQueuedMeasurements+0x19c>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d007      	beq.n	8006a24 <updateQueuedMeasurements+0xb0>
            // robust KF update with UWB TWR measurements
            kalmanCoreRobustUpdateWithDistance(&coreData, &m.data.distance);
 8006a14:	f107 0308 	add.w	r3, r7, #8
 8006a18:	3304      	adds	r3, #4
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	483b      	ldr	r0, [pc, #236]	; (8006b0c <updateQueuedMeasurements+0x198>)
 8006a1e:	f003 faeb 	bl	8009ff8 <kalmanCoreRobustUpdateWithDistance>
 8006a22:	e060      	b.n	8006ae6 <updateQueuedMeasurements+0x172>
        }else{
            // standard KF update
            kalmanCoreUpdateWithDistance(&coreData, &m.data.distance);
 8006a24:	f107 0308 	add.w	r3, r7, #8
 8006a28:	3304      	adds	r3, #4
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4837      	ldr	r0, [pc, #220]	; (8006b0c <updateQueuedMeasurements+0x198>)
 8006a2e:	f003 f855 	bl	8009adc <kalmanCoreUpdateWithDistance>
        }
        break;
 8006a32:	e058      	b.n	8006ae6 <updateQueuedMeasurements+0x172>
      case MeasurementTypeTOF:
        kalmanCoreUpdateWithTof(&coreData, &m.data.tof);
 8006a34:	f107 0308 	add.w	r3, r7, #8
 8006a38:	3304      	adds	r3, #4
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	4833      	ldr	r0, [pc, #204]	; (8006b0c <updateQueuedMeasurements+0x198>)
 8006a3e:	f005 fd4b 	bl	800c4d8 <kalmanCoreUpdateWithTof>
        break;
 8006a42:	e050      	b.n	8006ae6 <updateQueuedMeasurements+0x172>
      case MeasurementTypeAbsoluteHeight:
        kalmanCoreUpdateWithAbsoluteHeight(&coreData, &m.data.height);
 8006a44:	f107 0308 	add.w	r3, r7, #8
 8006a48:	3304      	adds	r3, #4
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	482f      	ldr	r0, [pc, #188]	; (8006b0c <updateQueuedMeasurements+0x198>)
 8006a4e:	f002 ffd9 	bl	8009a04 <kalmanCoreUpdateWithAbsoluteHeight>
        break;
 8006a52:	e048      	b.n	8006ae6 <updateQueuedMeasurements+0x172>
      case MeasurementTypeFlow:
        kalmanCoreUpdateWithFlow(&coreData, &m.data.flow, &gyroLatest);
 8006a54:	f107 0308 	add.w	r3, r7, #8
 8006a58:	3304      	adds	r3, #4
 8006a5a:	4a2e      	ldr	r2, [pc, #184]	; (8006b14 <updateQueuedMeasurements+0x1a0>)
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	482b      	ldr	r0, [pc, #172]	; (8006b0c <updateQueuedMeasurements+0x198>)
 8006a60:	f003 fe7e 	bl	800a760 <kalmanCoreUpdateWithFlow>
        break;
 8006a64:	e03f      	b.n	8006ae6 <updateQueuedMeasurements+0x172>
      case MeasurementTypeYawError:
        kalmanCoreUpdateWithYawError(&coreData, &m.data.yawError);
 8006a66:	f107 0308 	add.w	r3, r7, #8
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4827      	ldr	r0, [pc, #156]	; (8006b0c <updateQueuedMeasurements+0x198>)
 8006a70:	f005 fdb8 	bl	800c5e4 <kalmanCoreUpdateWithYawError>
        break;
 8006a74:	e037      	b.n	8006ae6 <updateQueuedMeasurements+0x172>
      case MeasurementTypeSweepAngle:
        kalmanCoreUpdateWithSweepAngles(&coreData, &m.data.sweepAngle, nowMs, &sweepOutlierFilterState);
 8006a76:	f107 0308 	add.w	r3, r7, #8
 8006a7a:	1d19      	adds	r1, r3, #4
 8006a7c:	4b26      	ldr	r3, [pc, #152]	; (8006b18 <updateQueuedMeasurements+0x1a4>)
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	4822      	ldr	r0, [pc, #136]	; (8006b0c <updateQueuedMeasurements+0x198>)
 8006a82:	f004 fc13 	bl	800b2ac <kalmanCoreUpdateWithSweepAngles>
        break;
 8006a86:	e02e      	b.n	8006ae6 <updateQueuedMeasurements+0x172>
      case MeasurementTypeGyroscope:
        axis3fSubSamplerAccumulate(&gyroSubSampler, &m.data.gyroscope.gyro);
 8006a88:	f107 0308 	add.w	r3, r7, #8
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4822      	ldr	r0, [pc, #136]	; (8006b1c <updateQueuedMeasurements+0x1a8>)
 8006a92:	f00a f829 	bl	8010ae8 <axis3fSubSamplerAccumulate>
        gyroLatest = m.data.gyroscope.gyro;
 8006a96:	4b1f      	ldr	r3, [pc, #124]	; (8006b14 <updateQueuedMeasurements+0x1a0>)
 8006a98:	461c      	mov	r4, r3
 8006a9a:	f107 030c 	add.w	r3, r7, #12
 8006a9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006aa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        break;
 8006aa6:	e01e      	b.n	8006ae6 <updateQueuedMeasurements+0x172>
      case MeasurementTypeAcceleration:
        axis3fSubSamplerAccumulate(&accSubSampler, &m.data.acceleration.acc);
 8006aa8:	f107 0308 	add.w	r3, r7, #8
 8006aac:	3304      	adds	r3, #4
 8006aae:	4619      	mov	r1, r3
 8006ab0:	481b      	ldr	r0, [pc, #108]	; (8006b20 <updateQueuedMeasurements+0x1ac>)
 8006ab2:	f00a f819 	bl	8010ae8 <axis3fSubSamplerAccumulate>
        accLatest = m.data.acceleration.acc;
 8006ab6:	4b1b      	ldr	r3, [pc, #108]	; (8006b24 <updateQueuedMeasurements+0x1b0>)
 8006ab8:	461c      	mov	r4, r3
 8006aba:	f107 030c 	add.w	r3, r7, #12
 8006abe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ac2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        break;
 8006ac6:	e00e      	b.n	8006ae6 <updateQueuedMeasurements+0x172>
      case MeasurementTypeBarometer:
        if (useBaroUpdate) {
 8006ac8:	2300      	movs	r3, #0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00b      	beq.n	8006ae6 <updateQueuedMeasurements+0x172>
          kalmanCoreUpdateWithBaro(&coreData, &coreParams, m.data.barometer.baro.asl, quadIsFlying);
 8006ace:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ad2:	78fb      	ldrb	r3, [r7, #3]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8006ada:	4913      	ldr	r1, [pc, #76]	; (8006b28 <updateQueuedMeasurements+0x1b4>)
 8006adc:	480b      	ldr	r0, [pc, #44]	; (8006b0c <updateQueuedMeasurements+0x198>)
 8006ade:	f000 ff13 	bl	8007908 <kalmanCoreUpdateWithBaro>
        }
        break;
 8006ae2:	e000      	b.n	8006ae6 <updateQueuedMeasurements+0x172>
      default:
        break;
 8006ae4:	bf00      	nop
  while (estimatorDequeue(&m)) {
 8006ae6:	f107 0308 	add.w	r3, r7, #8
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7ff fe1a 	bl	8006724 <estimatorDequeue>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f47f af45 	bne.w	8006982 <updateQueuedMeasurements+0xe>
    }
  }
}
 8006af8:	bf00      	nop
 8006afa:	bf00      	nop
 8006afc:	373c      	adds	r7, #60	; 0x3c
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd90      	pop	{r4, r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20009295 	.word	0x20009295
 8006b08:	200092f0 	.word	0x200092f0
 8006b0c:	200036dc 	.word	0x200036dc
 8006b10:	20009294 	.word	0x20009294
 8006b14:	200092e4 	.word	0x200092e4
 8006b18:	200092fc 	.word	0x200092fc
 8006b1c:	200092b8 	.word	0x200092b8
 8006b20:	20009298 	.word	0x20009298
 8006b24:	200092d8 	.word	0x200092d8
 8006b28:	20009308 	.word	0x20009308

08006b2c <estimatorKalmanInit>:

// Called when this estimator is activated
void estimatorKalmanInit(void)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
  axis3fSubSamplerInit(&accSubSampler, GRAVITY_MAGNITUDE);
 8006b32:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8006b6c <estimatorKalmanInit+0x40>
 8006b36:	480e      	ldr	r0, [pc, #56]	; (8006b70 <estimatorKalmanInit+0x44>)
 8006b38:	f009 ffc4 	bl	8010ac4 <axis3fSubSamplerInit>
  axis3fSubSamplerInit(&gyroSubSampler, DEG_TO_RAD);
 8006b3c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8006b74 <estimatorKalmanInit+0x48>
 8006b40:	480d      	ldr	r0, [pc, #52]	; (8006b78 <estimatorKalmanInit+0x4c>)
 8006b42:	f009 ffbf 	bl	8010ac4 <axis3fSubSamplerInit>

  outlierFilterTdoaReset(&outlierFilterTdoaState);
 8006b46:	480d      	ldr	r0, [pc, #52]	; (8006b7c <estimatorKalmanInit+0x50>)
 8006b48:	f005 fdf0 	bl	800c72c <outlierFilterTdoaReset>
  outlierFilterLighthouseReset(&sweepOutlierFilterState, 0);
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	480c      	ldr	r0, [pc, #48]	; (8006b80 <estimatorKalmanInit+0x54>)
 8006b50:	f005 fd77 	bl	800c642 <outlierFilterLighthouseReset>

  uint32_t nowMs = T2M(xTaskGetTickCount());
 8006b54:	f019 f884 	bl	801fc60 <xTaskGetTickCount>
 8006b58:	6078      	str	r0, [r7, #4]
  kalmanCoreInit(&coreData, &coreParams, nowMs);
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	4909      	ldr	r1, [pc, #36]	; (8006b84 <estimatorKalmanInit+0x58>)
 8006b5e:	480a      	ldr	r0, [pc, #40]	; (8006b88 <estimatorKalmanInit+0x5c>)
 8006b60:	f000 f9c8 	bl	8006ef4 <kalmanCoreInit>
}
 8006b64:	bf00      	nop
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	411cf5c3 	.word	0x411cf5c3
 8006b70:	20009298 	.word	0x20009298
 8006b74:	3c8efa35 	.word	0x3c8efa35
 8006b78:	200092b8 	.word	0x200092b8
 8006b7c:	200092f0 	.word	0x200092f0
 8006b80:	200092fc 	.word	0x200092fc
 8006b84:	20009308 	.word	0x20009308
 8006b88:	200036dc 	.word	0x200036dc

08006b8c <lpf2pInit>:

/**
 * 2-Pole low pass filter
 */
void lpf2pInit(lpf2pData* lpfData, float sample_freq, float cutoff_freq)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	ed87 0a02 	vstr	s0, [r7, #8]
 8006b98:	edc7 0a01 	vstr	s1, [r7, #4]
  if (lpfData == NULL || cutoff_freq <= 0.0f) {
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00e      	beq.n	8006bc0 <lpf2pInit+0x34>
 8006ba2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006ba6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bae:	d907      	bls.n	8006bc0 <lpf2pInit+0x34>
    return;
  }

  lpf2pSetCutoffFreq(lpfData, sample_freq, cutoff_freq);
 8006bb0:	edd7 0a01 	vldr	s1, [r7, #4]
 8006bb4:	ed97 0a02 	vldr	s0, [r7, #8]
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f805 	bl	8006bc8 <lpf2pSetCutoffFreq>
 8006bbe:	e000      	b.n	8006bc2 <lpf2pInit+0x36>
    return;
 8006bc0:	bf00      	nop
}
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <lpf2pSetCutoffFreq>:

void lpf2pSetCutoffFreq(lpf2pData* lpfData, float sample_freq, float cutoff_freq)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8006bd4:	edc7 0a01 	vstr	s1, [r7, #4]
  float fr = sample_freq/cutoff_freq;
 8006bd8:	edd7 6a02 	vldr	s13, [r7, #8]
 8006bdc:	ed97 7a01 	vldr	s14, [r7, #4]
 8006be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006be4:	edc7 7a07 	vstr	s15, [r7, #28]
  float ohm = tanf(M_PI_F/fr);
 8006be8:	eddf 6a34 	vldr	s13, [pc, #208]	; 8006cbc <lpf2pSetCutoffFreq+0xf4>
 8006bec:	edd7 7a07 	vldr	s15, [r7, #28]
 8006bf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf4:	eeb0 0a47 	vmov.f32	s0, s14
 8006bf8:	f01e fee0 	bl	80259bc <tanf>
 8006bfc:	ed87 0a06 	vstr	s0, [r7, #24]
  float c = 1.0f+2.0f*cosf(M_PI_F/4.0f)*ohm+ohm*ohm;
 8006c00:	edd7 7a06 	vldr	s15, [r7, #24]
 8006c04:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8006cc0 <lpf2pSetCutoffFreq+0xf8>
 8006c08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c14:	edd7 7a06 	vldr	s15, [r7, #24]
 8006c18:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c20:	edc7 7a05 	vstr	s15, [r7, #20]
  lpfData->b0 = ohm*ohm/c;
 8006c24:	edd7 7a06 	vldr	s15, [r7, #24]
 8006c28:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8006c2c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006c30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	edc3 7a02 	vstr	s15, [r3, #8]
  lpfData->b1 = 2.0f*lpfData->b0;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006c40:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	edc3 7a03 	vstr	s15, [r3, #12]
  lpfData->b2 = lpfData->b0;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	689a      	ldr	r2, [r3, #8]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	611a      	str	r2, [r3, #16]
  lpfData->a1 = 2.0f*(ohm*ohm-1.0f)/c;
 8006c52:	edd7 7a06 	vldr	s15, [r7, #24]
 8006c56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006c5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c62:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006c66:	ed97 7a05 	vldr	s14, [r7, #20]
 8006c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	edc3 7a00 	vstr	s15, [r3]
  lpfData->a2 = (1.0f-2.0f*cosf(M_PI_F/4.0f)*ohm+ohm*ohm)/c;
 8006c74:	edd7 7a06 	vldr	s15, [r7, #24]
 8006c78:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006cc0 <lpf2pSetCutoffFreq+0xf8>
 8006c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006c88:	edd7 7a06 	vldr	s15, [r7, #24]
 8006c8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006c90:	ee77 6a27 	vadd.f32	s13, s14, s15
 8006c94:	ed97 7a05 	vldr	s14, [r7, #20]
 8006c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	edc3 7a01 	vstr	s15, [r3, #4]
  lpfData->delay_element_1 = 0.0f;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f04f 0200 	mov.w	r2, #0
 8006ca8:	615a      	str	r2, [r3, #20]
  lpfData->delay_element_2 = 0.0f;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	619a      	str	r2, [r3, #24]
}
 8006cb2:	bf00      	nop
 8006cb4:	3720      	adds	r7, #32
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	40490fdb 	.word	0x40490fdb
 8006cc0:	3fb504f3 	.word	0x3fb504f3

08006cc4 <assert_aligned_4_bytes>:
    __typeof__(b) _b = (b); \
    _a > _b ? _a : _b;      \
  })

// Matrix data must be aligned on 4 byte bundaries
static inline void assert_aligned_4_bytes(const arm_matrix_instance_f32* matrix) {
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  const uint32_t address = (uint32_t)matrix->pData;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	60fb      	str	r3, [r7, #12]
  ASSERT((address & 0x3) == 0);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f003 0303 	and.w	r3, r3, #3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d004      	beq.n	8006ce6 <assert_aligned_4_bytes+0x22>
 8006cdc:	223c      	movs	r2, #60	; 0x3c
 8006cde:	4904      	ldr	r1, [pc, #16]	; (8006cf0 <assert_aligned_4_bytes+0x2c>)
 8006ce0:	4804      	ldr	r0, [pc, #16]	; (8006cf4 <assert_aligned_4_bytes+0x30>)
 8006ce2:	f009 ff9b 	bl	8010c1c <assertFail>
}
 8006ce6:	bf00      	nop
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	0802b604 	.word	0x0802b604
 8006cf4:	0802b650 	.word	0x0802b650

08006cf8 <mat_trans>:

static inline void mat_trans(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff ffde 	bl	8006cc4 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 8006d08:	6838      	ldr	r0, [r7, #0]
 8006d0a:	f7ff ffdb 	bl	8006cc4 <assert_aligned_4_bytes>

  arm_status result = arm_mat_trans_f32(pSrc, pDst);
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f01b fc3d 	bl	8022590 <arm_mat_trans_f32>
 8006d16:	4603      	mov	r3, r0
 8006d18:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 8006d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d004      	beq.n	8006d2c <mat_trans+0x34>
 8006d22:	2244      	movs	r2, #68	; 0x44
 8006d24:	4903      	ldr	r1, [pc, #12]	; (8006d34 <mat_trans+0x3c>)
 8006d26:	4804      	ldr	r0, [pc, #16]	; (8006d38 <mat_trans+0x40>)
 8006d28:	f009 ff78 	bl	8010c1c <assertFail>
}
 8006d2c:	bf00      	nop
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	0802b604 	.word	0x0802b604
 8006d38:	0802b668 	.word	0x0802b668

08006d3c <mat_mult>:

  arm_status result = arm_mat_inverse_f32(pSrc, pDst);
  ASSERT(ARM_MATH_SUCCESS == result);
}

static inline void mat_mult(const arm_matrix_instance_f32 * pSrcA, const arm_matrix_instance_f32 * pSrcB, arm_matrix_instance_f32 * pDst) {
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
  assert_aligned_4_bytes(pSrcA);
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f7ff ffbb 	bl	8006cc4 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pSrcB);
 8006d4e:	68b8      	ldr	r0, [r7, #8]
 8006d50:	f7ff ffb8 	bl	8006cc4 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7ff ffb5 	bl	8006cc4 <assert_aligned_4_bytes>

  arm_status result = arm_mat_mult_f32(pSrcA, pSrcB, pDst);
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	68b9      	ldr	r1, [r7, #8]
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f01b fcc4 	bl	80226ec <arm_mat_mult_f32>
 8006d64:	4603      	mov	r3, r0
 8006d66:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 8006d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d004      	beq.n	8006d7a <mat_mult+0x3e>
 8006d70:	2255      	movs	r2, #85	; 0x55
 8006d72:	4904      	ldr	r1, [pc, #16]	; (8006d84 <mat_mult+0x48>)
 8006d74:	4804      	ldr	r0, [pc, #16]	; (8006d88 <mat_mult+0x4c>)
 8006d76:	f009 ff51 	bl	8010c1c <assertFail>
}
 8006d7a:	bf00      	nop
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	0802b604 	.word	0x0802b604
 8006d88:	0802b668 	.word	0x0802b668

08006d8c <arm_sqrt>:

static inline float arm_sqrt(float32_t in) {
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 8006d96:	f04f 0300 	mov.w	r3, #0
 8006d9a:	60bb      	str	r3, [r7, #8]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	613b      	str	r3, [r7, #16]
 8006da0:	f107 0308 	add.w	r3, r7, #8
 8006da4:	60fb      	str	r3, [r7, #12]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8006da6:	edd7 7a04 	vldr	s15, [r7, #16]
 8006daa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db2:	db0a      	blt.n	8006dca <arm_sqrt+0x3e>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8006db4:	ed97 0a04 	vldr	s0, [r7, #16]
 8006db8:	f01e fd50 	bl	802585c <sqrtf>
 8006dbc:	eef0 7a40 	vmov.f32	s15, s0
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	e005      	b.n	8006dd6 <arm_sqrt+0x4a>
    }
    else
    {
      *pOut = 0.0f;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f04f 0200 	mov.w	r2, #0
 8006dd0:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8006dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  arm_status result = arm_sqrt_f32(in, &pOut);
 8006dd6:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 8006dd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d004      	beq.n	8006dea <arm_sqrt+0x5e>
 8006de0:	225b      	movs	r2, #91	; 0x5b
 8006de2:	4906      	ldr	r1, [pc, #24]	; (8006dfc <arm_sqrt+0x70>)
 8006de4:	4806      	ldr	r0, [pc, #24]	; (8006e00 <arm_sqrt+0x74>)
 8006de6:	f009 ff19 	bl	8010c1c <assertFail>
  return pOut;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	ee07 3a90 	vmov	s15, r3
}
 8006df0:	eeb0 0a67 	vmov.f32	s0, s15
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	0802b604 	.word	0x0802b604
 8006e00:	0802b668 	.word	0x0802b668

08006e04 <mat_scale>:
  }

  return a;
}

static inline void mat_scale(const arm_matrix_instance_f32 * pSrcA, float32_t scale, arm_matrix_instance_f32 * pDst) {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8006e10:	6079      	str	r1, [r7, #4]
  arm_status result = arm_mat_scale_f32(pSrcA, scale, pDst);
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	ed97 0a02 	vldr	s0, [r7, #8]
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f01b fc15 	bl	8022648 <arm_mat_scale_f32>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 8006e22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d004      	beq.n	8006e34 <mat_scale+0x30>
 8006e2a:	2275      	movs	r2, #117	; 0x75
 8006e2c:	4903      	ldr	r1, [pc, #12]	; (8006e3c <mat_scale+0x38>)
 8006e2e:	4804      	ldr	r0, [pc, #16]	; (8006e40 <mat_scale+0x3c>)
 8006e30:	f009 fef4 	bl	8010c1c <assertFail>
}
 8006e34:	bf00      	nop
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	0802b604 	.word	0x0802b604
 8006e40:	0802b668 	.word	0x0802b668

08006e44 <assertStateNotNaN>:
    }
  }
}
#else
static void assertStateNotNaN(const kalmanCoreData_t* this)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  return;
 8006e4c:	bf00      	nop
}
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <kalmanCoreDefaultParams>:

// Small number epsilon, to prevent dividing by zero
#define EPS (1e-6f)

void kalmanCoreDefaultParams(kalmanCoreParams_t* params)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  // Initial variances, uncertain of position, but know we're stationary and roughly flat
  params->stdDevInitialPosition_xy = 100;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a21      	ldr	r2, [pc, #132]	; (8006ee8 <kalmanCoreDefaultParams+0x90>)
 8006e64:	601a      	str	r2, [r3, #0]
  params->stdDevInitialPosition_z = 1;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006e6c:	605a      	str	r2, [r3, #4]
  params->stdDevInitialVelocity = 0.01;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a1e      	ldr	r2, [pc, #120]	; (8006eec <kalmanCoreDefaultParams+0x94>)
 8006e72:	609a      	str	r2, [r3, #8]
  params->stdDevInitialAttitude_rollpitch = 0.01;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a1d      	ldr	r2, [pc, #116]	; (8006eec <kalmanCoreDefaultParams+0x94>)
 8006e78:	60da      	str	r2, [r3, #12]
  params->stdDevInitialAttitude_yaw = 0.01;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a1b      	ldr	r2, [pc, #108]	; (8006eec <kalmanCoreDefaultParams+0x94>)
 8006e7e:	611a      	str	r2, [r3, #16]

  params->procNoiseAcc_xy = 0.5f;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8006e86:	615a      	str	r2, [r3, #20]
  params->procNoiseAcc_z = 1.0f;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006e8e:	619a      	str	r2, [r3, #24]
  params->procNoiseVel = 0;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f04f 0200 	mov.w	r2, #0
 8006e96:	61da      	str	r2, [r3, #28]
  params->procNoisePos = 0;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f04f 0200 	mov.w	r2, #0
 8006e9e:	621a      	str	r2, [r3, #32]
  params->procNoiseAtt = 0;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f04f 0200 	mov.w	r2, #0
 8006ea6:	625a      	str	r2, [r3, #36]	; 0x24
  params->measNoiseBaro = 2.0f;           // meters
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006eae:	629a      	str	r2, [r3, #40]	; 0x28
  params->measNoiseGyro_rollpitch = 0.1f; // radians per second
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a0f      	ldr	r2, [pc, #60]	; (8006ef0 <kalmanCoreDefaultParams+0x98>)
 8006eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  params->measNoiseGyro_yaw = 0.1f;       // radians per second
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a0d      	ldr	r2, [pc, #52]	; (8006ef0 <kalmanCoreDefaultParams+0x98>)
 8006eba:	631a      	str	r2, [r3, #48]	; 0x30

  params->initialX = 0.0;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f04f 0200 	mov.w	r2, #0
 8006ec2:	635a      	str	r2, [r3, #52]	; 0x34
  params->initialY = 0.0;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f04f 0200 	mov.w	r2, #0
 8006eca:	639a      	str	r2, [r3, #56]	; 0x38
  params->initialZ = 0.0;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f04f 0200 	mov.w	r2, #0
 8006ed2:	63da      	str	r2, [r3, #60]	; 0x3c
  // Initial yaw of the Crazyflie in radians.
  // 0 --- facing positive X
  // PI / 2 --- facing positive Y
  // PI --- facing negative X
  // 3 * PI / 2 --- facing negative Y
  params->initialYaw = 0.0;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f04f 0200 	mov.w	r2, #0
 8006eda:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	42c80000 	.word	0x42c80000
 8006eec:	3c23d70a 	.word	0x3c23d70a
 8006ef0:	3dcccccd 	.word	0x3dcccccd

08006ef4 <kalmanCoreInit>:

void kalmanCoreInit(kalmanCoreData_t *this, const kalmanCoreParams_t *params, const uint32_t nowMs)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08a      	sub	sp, #40	; 0x28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  // Reset all data to 0 (like upon system reset)
  memset(this, 0, sizeof(kalmanCoreData_t));
 8006f00:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8006f04:	2100      	movs	r1, #0
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f01c fd02 	bl	8023910 <memset>

  this->S[KC_STATE_X] = params->initialX;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	601a      	str	r2, [r3, #0]
  this->S[KC_STATE_Y] = params->initialY;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	605a      	str	r2, [r3, #4]
  this->S[KC_STATE_Z] = params->initialZ;
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	609a      	str	r2, [r3, #8]
//  this->S[KC_STATE_D0] = 0;
//  this->S[KC_STATE_D1] = 0;
//  this->S[KC_STATE_D2] = 0;

  // reset the attitude quaternion
  this->initialQuaternion[0] = arm_cos_f32(params->initialYaw / 2);
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006f2a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006f2e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006f32:	eeb0 0a47 	vmov.f32	s0, s14
 8006f36:	f01b fdc5 	bl	8022ac4 <arm_cos_f32>
 8006f3a:	eef0 7a40 	vmov.f32	s15, s0
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	edc3 7a6a 	vstr	s15, [r3, #424]	; 0x1a8
  this->initialQuaternion[1] = 0.0;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f04f 0200 	mov.w	r2, #0
 8006f4a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  this->initialQuaternion[2] = 0.0;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f04f 0200 	mov.w	r2, #0
 8006f54:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  this->initialQuaternion[3] = arm_sin_f32(params->initialYaw / 2);
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006f5e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006f62:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006f66:	eeb0 0a47 	vmov.f32	s0, s14
 8006f6a:	f01b fd65 	bl	8022a38 <arm_sin_f32>
 8006f6e:	eef0 7a40 	vmov.f32	s15, s0
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
  for (int i = 0; i < 4; i++) { this->q[i] = this->initialQuaternion[i]; }
 8006f78:	2300      	movs	r3, #0
 8006f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f7c:	e00f      	b.n	8006f9e <kalmanCoreInit+0xaa>
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	336a      	adds	r3, #106	; 0x6a
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	68f9      	ldr	r1, [r7, #12]
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	3308      	adds	r3, #8
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	440b      	add	r3, r1
 8006f94:	3304      	adds	r3, #4
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	ddec      	ble.n	8006f7e <kalmanCoreInit+0x8a>

  // then set the initial rotation matrix to the identity. This only affects
  // the first prediction step, since in the finalization, after shifting
  // attitude errors into the attitude state, the rotation matrix is updated.
  for(int i=0; i<3; i++) { for(int j=0; j<3; j++) { this->R[i][j] = i==j ? 1 : 0; }}
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	623b      	str	r3, [r7, #32]
 8006fa8:	e020      	b.n	8006fec <kalmanCoreInit+0xf8>
 8006faa:	2300      	movs	r3, #0
 8006fac:	61fb      	str	r3, [r7, #28]
 8006fae:	e017      	b.n	8006fe0 <kalmanCoreInit+0xec>
 8006fb0:	6a3a      	ldr	r2, [r7, #32]
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d102      	bne.n	8006fbe <kalmanCoreInit+0xca>
 8006fb8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006fbc:	e001      	b.n	8006fc2 <kalmanCoreInit+0xce>
 8006fbe:	f04f 0100 	mov.w	r1, #0
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	6a3a      	ldr	r2, [r7, #32]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	4413      	add	r3, r2
 8006fcc:	69fa      	ldr	r2, [r7, #28]
 8006fce:	4413      	add	r3, r2
 8006fd0:	330c      	adds	r3, #12
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4403      	add	r3, r0
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	6019      	str	r1, [r3, #0]
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	61fb      	str	r3, [r7, #28]
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	dde4      	ble.n	8006fb0 <kalmanCoreInit+0xbc>
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	623b      	str	r3, [r7, #32]
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	dddb      	ble.n	8006faa <kalmanCoreInit+0xb6>

  for (int i=0; i< KC_STATE_DIM; i++) {
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	61bb      	str	r3, [r7, #24]
 8006ff6:	e018      	b.n	800702a <kalmanCoreInit+0x136>
    for (int j=0; j < KC_STATE_DIM; j++) {
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	e00f      	b.n	800701e <kalmanCoreInit+0x12a>
      this->P[i][j] = 0; // set covariances to zero (diagonals will be changed from zero in the next section)
 8006ffe:	68f9      	ldr	r1, [r7, #12]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	4613      	mov	r3, r2
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	4413      	add	r3, r2
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	4413      	add	r3, r2
 800700c:	3316      	adds	r3, #22
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	440b      	add	r3, r1
 8007012:	f04f 0200 	mov.w	r2, #0
 8007016:	601a      	str	r2, [r3, #0]
    for (int j=0; j < KC_STATE_DIM; j++) {
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	3301      	adds	r3, #1
 800701c:	617b      	str	r3, [r7, #20]
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2b08      	cmp	r3, #8
 8007022:	ddec      	ble.n	8006ffe <kalmanCoreInit+0x10a>
  for (int i=0; i< KC_STATE_DIM; i++) {
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	3301      	adds	r3, #1
 8007028:	61bb      	str	r3, [r7, #24]
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2b08      	cmp	r3, #8
 800702e:	dde3      	ble.n	8006ff8 <kalmanCoreInit+0x104>
    }
  }

  // initialize state variances
  this->P[KC_STATE_X][KC_STATE_X]  = powf(params->stdDevInitialPosition_xy, 2);
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	edd3 7a00 	vldr	s15, [r3]
 8007036:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800703a:	eeb0 0a67 	vmov.f32	s0, s15
 800703e:	f01e fbb5 	bl	80257ac <powf>
 8007042:	eef0 7a40 	vmov.f32	s15, s0
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
  this->P[KC_STATE_Y][KC_STATE_Y]  = powf(params->stdDevInitialPosition_xy, 2);
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	edd3 7a00 	vldr	s15, [r3]
 8007052:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8007056:	eeb0 0a67 	vmov.f32	s0, s15
 800705a:	f01e fba7 	bl	80257ac <powf>
 800705e:	eef0 7a40 	vmov.f32	s15, s0
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
  this->P[KC_STATE_Z][KC_STATE_Z]  = powf(params->stdDevInitialPosition_z, 2);
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	edd3 7a01 	vldr	s15, [r3, #4]
 800706e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8007072:	eeb0 0a67 	vmov.f32	s0, s15
 8007076:	f01e fb99 	bl	80257ac <powf>
 800707a:	eef0 7a40 	vmov.f32	s15, s0
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

  this->P[KC_STATE_PX][KC_STATE_PX] = powf(params->stdDevInitialVelocity, 2);
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	edd3 7a02 	vldr	s15, [r3, #8]
 800708a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800708e:	eeb0 0a67 	vmov.f32	s0, s15
 8007092:	f01e fb8b 	bl	80257ac <powf>
 8007096:	eef0 7a40 	vmov.f32	s15, s0
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
  this->P[KC_STATE_PY][KC_STATE_PY] = powf(params->stdDevInitialVelocity, 2);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80070a6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80070aa:	eeb0 0a67 	vmov.f32	s0, s15
 80070ae:	f01e fb7d 	bl	80257ac <powf>
 80070b2:	eef0 7a40 	vmov.f32	s15, s0
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
  this->P[KC_STATE_PZ][KC_STATE_PZ] = powf(params->stdDevInitialVelocity, 2);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	edd3 7a02 	vldr	s15, [r3, #8]
 80070c2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80070c6:	eeb0 0a67 	vmov.f32	s0, s15
 80070ca:	f01e fb6f 	bl	80257ac <powf>
 80070ce:	eef0 7a40 	vmov.f32	s15, s0
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120

  this->P[KC_STATE_D0][KC_STATE_D0] = powf(params->stdDevInitialAttitude_rollpitch, 2);
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	edd3 7a03 	vldr	s15, [r3, #12]
 80070de:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80070e2:	eeb0 0a67 	vmov.f32	s0, s15
 80070e6:	f01e fb61 	bl	80257ac <powf>
 80070ea:	eef0 7a40 	vmov.f32	s15, s0
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
  this->P[KC_STATE_D1][KC_STATE_D1] = powf(params->stdDevInitialAttitude_rollpitch, 2);
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80070fa:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80070fe:	eeb0 0a67 	vmov.f32	s0, s15
 8007102:	f01e fb53 	bl	80257ac <powf>
 8007106:	eef0 7a40 	vmov.f32	s15, s0
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	edc3 7a5c 	vstr	s15, [r3, #368]	; 0x170
  this->P[KC_STATE_D2][KC_STATE_D2] = powf(params->stdDevInitialAttitude_yaw, 2);
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	edd3 7a04 	vldr	s15, [r3, #16]
 8007116:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800711a:	eeb0 0a67 	vmov.f32	s0, s15
 800711e:	f01e fb45 	bl	80257ac <powf>
 8007122:	eef0 7a40 	vmov.f32	s15, s0
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	edc3 7a66 	vstr	s15, [r3, #408]	; 0x198

  this->Pm.numRows = KC_STATE_DIM;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2209      	movs	r2, #9
 8007130:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
  this->Pm.numCols = KC_STATE_DIM;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2209      	movs	r2, #9
 8007138:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e
  this->Pm.pData = (float*)this->P;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

  this->baroReferenceHeight = 0.0;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f04f 0200 	mov.w	r2, #0
 800714e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

  this->isUpdated = false;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
  this->lastPredictionMs = nowMs;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
  this->lastProcessNoiseUpdateMs = nowMs;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
}
 800716a:	bf00      	nop
 800716c:	3728      	adds	r7, #40	; 0x28
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <kalmanCoreScalarUpdate>:

void kalmanCoreScalarUpdate(kalmanCoreData_t* this, arm_matrix_instance_f32 *Hm, float error, float stdMeasNoise)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b08e      	sub	sp, #56	; 0x38
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	ed87 0a01 	vstr	s0, [r7, #4]
 8007182:	edc7 0a00 	vstr	s1, [r7]
  static arm_matrix_instance_f32 HTm = {KC_STATE_DIM, 1, HTd};

  NO_DMA_CCM_SAFE_ZERO_INIT __attribute__((aligned(4))) static float PHTd[KC_STATE_DIM * 1];
  static arm_matrix_instance_f32 PHTm = {KC_STATE_DIM, 1, PHTd};

  ASSERT(Hm->numRows == 1);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d004      	beq.n	8007198 <kalmanCoreScalarUpdate+0x24>
 800718e:	22ea      	movs	r2, #234	; 0xea
 8007190:	49b2      	ldr	r1, [pc, #712]	; (800745c <kalmanCoreScalarUpdate+0x2e8>)
 8007192:	48b3      	ldr	r0, [pc, #716]	; (8007460 <kalmanCoreScalarUpdate+0x2ec>)
 8007194:	f009 fd42 	bl	8010c1c <assertFail>
  ASSERT(Hm->numCols == KC_STATE_DIM);
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	885b      	ldrh	r3, [r3, #2]
 800719c:	2b09      	cmp	r3, #9
 800719e:	d004      	beq.n	80071aa <kalmanCoreScalarUpdate+0x36>
 80071a0:	22eb      	movs	r2, #235	; 0xeb
 80071a2:	49ae      	ldr	r1, [pc, #696]	; (800745c <kalmanCoreScalarUpdate+0x2e8>)
 80071a4:	48af      	ldr	r0, [pc, #700]	; (8007464 <kalmanCoreScalarUpdate+0x2f0>)
 80071a6:	f009 fd39 	bl	8010c1c <assertFail>

  // ====== INNOVATION COVARIANCE ======

  mat_trans(Hm, &HTm);
 80071aa:	49af      	ldr	r1, [pc, #700]	; (8007468 <kalmanCoreScalarUpdate+0x2f4>)
 80071ac:	68b8      	ldr	r0, [r7, #8]
 80071ae:	f7ff fda3 	bl	8006cf8 <mat_trans>
  mat_mult(&this->Pm, &HTm, &PHTm); // PH'
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80071b8:	4aac      	ldr	r2, [pc, #688]	; (800746c <kalmanCoreScalarUpdate+0x2f8>)
 80071ba:	49ab      	ldr	r1, [pc, #684]	; (8007468 <kalmanCoreScalarUpdate+0x2f4>)
 80071bc:	4618      	mov	r0, r3
 80071be:	f7ff fdbd 	bl	8006d3c <mat_mult>
  float R = stdMeasNoise*stdMeasNoise;
 80071c2:	edd7 7a00 	vldr	s15, [r7]
 80071c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80071ca:	edc7 7a07 	vstr	s15, [r7, #28]
  float HPHR = R; // HPH' + R
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	637b      	str	r3, [r7, #52]	; 0x34
  for (int i=0; i<KC_STATE_DIM; i++) { // Add the element of HPH' to the above
 80071d2:	2300      	movs	r3, #0
 80071d4:	633b      	str	r3, [r7, #48]	; 0x30
 80071d6:	e017      	b.n	8007208 <kalmanCoreScalarUpdate+0x94>
    HPHR += Hm->pData[i]*PHTd[i]; // this obviously only works if the update is scalar (as in this function)
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	ed93 7a00 	vldr	s14, [r3]
 80071e6:	4aa2      	ldr	r2, [pc, #648]	; (8007470 <kalmanCoreScalarUpdate+0x2fc>)
 80071e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	edd3 7a00 	vldr	s15, [r3]
 80071f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80071fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071fe:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  for (int i=0; i<KC_STATE_DIM; i++) { // Add the element of HPH' to the above
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	3301      	adds	r3, #1
 8007206:	633b      	str	r3, [r7, #48]	; 0x30
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	2b08      	cmp	r3, #8
 800720c:	dde4      	ble.n	80071d8 <kalmanCoreScalarUpdate+0x64>
  }
  ASSERT(!isnan(HPHR));
 800720e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8007212:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007216:	eeb4 7a67 	vcmp.f32	s14, s15
 800721a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800721e:	d704      	bvc.n	800722a <kalmanCoreScalarUpdate+0xb6>
 8007220:	22f6      	movs	r2, #246	; 0xf6
 8007222:	498e      	ldr	r1, [pc, #568]	; (800745c <kalmanCoreScalarUpdate+0x2e8>)
 8007224:	4893      	ldr	r0, [pc, #588]	; (8007474 <kalmanCoreScalarUpdate+0x300>)
 8007226:	f009 fcf9 	bl	8010c1c <assertFail>

  // ====== MEASUREMENT UPDATE ======
  // Calculate the Kalman gain and perform the state update
  for (int i=0; i<KC_STATE_DIM; i++) {
 800722a:	2300      	movs	r3, #0
 800722c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800722e:	e02a      	b.n	8007286 <kalmanCoreScalarUpdate+0x112>
    K[i] = PHTd[i]/HPHR; // kalman gain = (PH' (HPH' + R )^-1)
 8007230:	4a8f      	ldr	r2, [pc, #572]	; (8007470 <kalmanCoreScalarUpdate+0x2fc>)
 8007232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	edd3 6a00 	vldr	s13, [r3]
 800723c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8007240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007244:	4a8c      	ldr	r2, [pc, #560]	; (8007478 <kalmanCoreScalarUpdate+0x304>)
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	edc3 7a00 	vstr	s15, [r3]
    this->S[i] = this->S[i] + K[i] * error; // state update
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	ed93 7a00 	vldr	s14, [r3]
 800725c:	4a86      	ldr	r2, [pc, #536]	; (8007478 <kalmanCoreScalarUpdate+0x304>)
 800725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	edd3 6a00 	vldr	s13, [r3]
 8007268:	edd7 7a01 	vldr	s15, [r7, #4]
 800726c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	edc3 7a00 	vstr	s15, [r3]
  for (int i=0; i<KC_STATE_DIM; i++) {
 8007280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007282:	3301      	adds	r3, #1
 8007284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	2b08      	cmp	r3, #8
 800728a:	ddd1      	ble.n	8007230 <kalmanCoreScalarUpdate+0xbc>
  }
  assertStateNotNaN(this);
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f7ff fdd9 	bl	8006e44 <assertStateNotNaN>

  // ====== COVARIANCE UPDATE ======
  mat_mult(&Km, Hm, &tmpNN1m); // KH
 8007292:	4a7a      	ldr	r2, [pc, #488]	; (800747c <kalmanCoreScalarUpdate+0x308>)
 8007294:	68b9      	ldr	r1, [r7, #8]
 8007296:	487a      	ldr	r0, [pc, #488]	; (8007480 <kalmanCoreScalarUpdate+0x30c>)
 8007298:	f7ff fd50 	bl	8006d3c <mat_mult>
  for (int i=0; i<KC_STATE_DIM; i++) { tmpNN1d[KC_STATE_DIM*i+i] -= 1; } // KH - I
 800729c:	2300      	movs	r3, #0
 800729e:	62bb      	str	r3, [r7, #40]	; 0x28
 80072a0:	e01a      	b.n	80072d8 <kalmanCoreScalarUpdate+0x164>
 80072a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072a4:	4613      	mov	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	4a75      	ldr	r2, [pc, #468]	; (8007484 <kalmanCoreScalarUpdate+0x310>)
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	edd3 7a00 	vldr	s15, [r3]
 80072b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072b8:	4613      	mov	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80072c8:	4a6e      	ldr	r2, [pc, #440]	; (8007484 <kalmanCoreScalarUpdate+0x310>)
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	edc3 7a00 	vstr	s15, [r3]
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	3301      	adds	r3, #1
 80072d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	2b08      	cmp	r3, #8
 80072dc:	dde1      	ble.n	80072a2 <kalmanCoreScalarUpdate+0x12e>
  mat_trans(&tmpNN1m, &tmpNN2m); // (KH - I)'
 80072de:	496a      	ldr	r1, [pc, #424]	; (8007488 <kalmanCoreScalarUpdate+0x314>)
 80072e0:	4866      	ldr	r0, [pc, #408]	; (800747c <kalmanCoreScalarUpdate+0x308>)
 80072e2:	f7ff fd09 	bl	8006cf8 <mat_trans>
  mat_mult(&tmpNN1m, &this->Pm, &tmpNN3m); // (KH - I)*P
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80072ec:	4a67      	ldr	r2, [pc, #412]	; (800748c <kalmanCoreScalarUpdate+0x318>)
 80072ee:	4619      	mov	r1, r3
 80072f0:	4862      	ldr	r0, [pc, #392]	; (800747c <kalmanCoreScalarUpdate+0x308>)
 80072f2:	f7ff fd23 	bl	8006d3c <mat_mult>
  mat_mult(&tmpNN3m, &tmpNN2m, &this->Pm); // (KH - I)*P*(KH - I)'
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80072fc:	461a      	mov	r2, r3
 80072fe:	4962      	ldr	r1, [pc, #392]	; (8007488 <kalmanCoreScalarUpdate+0x314>)
 8007300:	4862      	ldr	r0, [pc, #392]	; (800748c <kalmanCoreScalarUpdate+0x318>)
 8007302:	f7ff fd1b 	bl	8006d3c <mat_mult>
  assertStateNotNaN(this);
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f7ff fd9c 	bl	8006e44 <assertStateNotNaN>
  // add the measurement variance and ensure boundedness and symmetry
  // TODO: Why would it hit these bounds? Needs to be investigated.
  for (int i=0; i<KC_STATE_DIM; i++) {
 800730c:	2300      	movs	r3, #0
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
 8007310:	e0f2      	b.n	80074f8 <kalmanCoreScalarUpdate+0x384>
    for (int j=i; j<KC_STATE_DIM; j++) {
 8007312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007314:	623b      	str	r3, [r7, #32]
 8007316:	e0e8      	b.n	80074ea <kalmanCoreScalarUpdate+0x376>
      float v = K[i] * R * K[j];
 8007318:	4a57      	ldr	r2, [pc, #348]	; (8007478 <kalmanCoreScalarUpdate+0x304>)
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	ed93 7a00 	vldr	s14, [r3]
 8007324:	edd7 7a07 	vldr	s15, [r7, #28]
 8007328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800732c:	4a52      	ldr	r2, [pc, #328]	; (8007478 <kalmanCoreScalarUpdate+0x304>)
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	edd3 7a00 	vldr	s15, [r3]
 8007338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800733c:	edc7 7a06 	vstr	s15, [r7, #24]
      float p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i] + v; // add measurement noise
 8007340:	68f9      	ldr	r1, [r7, #12]
 8007342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007344:	4613      	mov	r3, r2
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	4413      	add	r3, r2
 800734a:	6a3a      	ldr	r2, [r7, #32]
 800734c:	4413      	add	r3, r2
 800734e:	3316      	adds	r3, #22
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	440b      	add	r3, r1
 8007354:	edd3 7a00 	vldr	s15, [r3]
 8007358:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800735c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007360:	68f9      	ldr	r1, [r7, #12]
 8007362:	6a3a      	ldr	r2, [r7, #32]
 8007364:	4613      	mov	r3, r2
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	4413      	add	r3, r2
 800736a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800736c:	4413      	add	r3, r2
 800736e:	3316      	adds	r3, #22
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	edd3 7a00 	vldr	s15, [r3]
 8007378:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800737c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007384:	ed97 7a06 	vldr	s14, [r7, #24]
 8007388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800738c:	edc7 7a05 	vstr	s15, [r7, #20]
      if (isnan(p) || p > MAX_COVARIANCE) {
 8007390:	ed97 7a05 	vldr	s14, [r7, #20]
 8007394:	edd7 7a05 	vldr	s15, [r7, #20]
 8007398:	eeb4 7a67 	vcmp.f32	s14, s15
 800739c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a0:	d608      	bvs.n	80073b4 <kalmanCoreScalarUpdate+0x240>
 80073a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80073a6:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8007490 <kalmanCoreScalarUpdate+0x31c>
 80073aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b2:	dd22      	ble.n	80073fa <kalmanCoreScalarUpdate+0x286>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 80073b4:	68f9      	ldr	r1, [r7, #12]
 80073b6:	6a3a      	ldr	r2, [r7, #32]
 80073b8:	4613      	mov	r3, r2
 80073ba:	00db      	lsls	r3, r3, #3
 80073bc:	4413      	add	r3, r2
 80073be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c0:	4413      	add	r3, r2
 80073c2:	3316      	adds	r3, #22
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	440b      	add	r3, r1
 80073c8:	4a32      	ldr	r2, [pc, #200]	; (8007494 <kalmanCoreScalarUpdate+0x320>)
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	68f9      	ldr	r1, [r7, #12]
 80073ce:	6a3a      	ldr	r2, [r7, #32]
 80073d0:	4613      	mov	r3, r2
 80073d2:	00db      	lsls	r3, r3, #3
 80073d4:	4413      	add	r3, r2
 80073d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073d8:	4413      	add	r3, r2
 80073da:	3316      	adds	r3, #22
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	440b      	add	r3, r1
 80073e0:	6819      	ldr	r1, [r3, #0]
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e6:	4613      	mov	r3, r2
 80073e8:	00db      	lsls	r3, r3, #3
 80073ea:	4413      	add	r3, r2
 80073ec:	6a3a      	ldr	r2, [r7, #32]
 80073ee:	4413      	add	r3, r2
 80073f0:	3316      	adds	r3, #22
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4403      	add	r3, r0
 80073f6:	6019      	str	r1, [r3, #0]
 80073f8:	e074      	b.n	80074e4 <kalmanCoreScalarUpdate+0x370>
      } else if ( i==j && p < MIN_COVARIANCE ) {
 80073fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d14e      	bne.n	80074a0 <kalmanCoreScalarUpdate+0x32c>
 8007402:	edd7 7a05 	vldr	s15, [r7, #20]
 8007406:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8007498 <kalmanCoreScalarUpdate+0x324>
 800740a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800740e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007412:	d545      	bpl.n	80074a0 <kalmanCoreScalarUpdate+0x32c>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 8007414:	68f9      	ldr	r1, [r7, #12]
 8007416:	6a3a      	ldr	r2, [r7, #32]
 8007418:	4613      	mov	r3, r2
 800741a:	00db      	lsls	r3, r3, #3
 800741c:	4413      	add	r3, r2
 800741e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007420:	4413      	add	r3, r2
 8007422:	3316      	adds	r3, #22
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	440b      	add	r3, r1
 8007428:	4a1c      	ldr	r2, [pc, #112]	; (800749c <kalmanCoreScalarUpdate+0x328>)
 800742a:	601a      	str	r2, [r3, #0]
 800742c:	68f9      	ldr	r1, [r7, #12]
 800742e:	6a3a      	ldr	r2, [r7, #32]
 8007430:	4613      	mov	r3, r2
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	4413      	add	r3, r2
 8007436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007438:	4413      	add	r3, r2
 800743a:	3316      	adds	r3, #22
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	440b      	add	r3, r1
 8007440:	6819      	ldr	r1, [r3, #0]
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007446:	4613      	mov	r3, r2
 8007448:	00db      	lsls	r3, r3, #3
 800744a:	4413      	add	r3, r2
 800744c:	6a3a      	ldr	r2, [r7, #32]
 800744e:	4413      	add	r3, r2
 8007450:	3316      	adds	r3, #22
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4403      	add	r3, r0
 8007456:	6019      	str	r1, [r3, #0]
 8007458:	e044      	b.n	80074e4 <kalmanCoreScalarUpdate+0x370>
 800745a:	bf00      	nop
 800745c:	0802b684 	.word	0x0802b684
 8007460:	0802b6a8 	.word	0x0802b6a8
 8007464:	0802b6bc 	.word	0x0802b6bc
 8007468:	20000898 	.word	0x20000898
 800746c:	200008a0 	.word	0x200008a0
 8007470:	2000436c 	.word	0x2000436c
 8007474:	0802b6d8 	.word	0x0802b6d8
 8007478:	20003f58 	.word	0x20003f58
 800747c:	200008b0 	.word	0x200008b0
 8007480:	200008a8 	.word	0x200008a8
 8007484:	20003f7c 	.word	0x20003f7c
 8007488:	200008b8 	.word	0x200008b8
 800748c:	200008c0 	.word	0x200008c0
 8007490:	42c80000 	.word	0x42c80000
 8007494:	42c80000 	.word	0x42c80000
 8007498:	358637bd 	.word	0x358637bd
 800749c:	358637bd 	.word	0x358637bd
      } else {
        this->P[i][j] = this->P[j][i] = p;
 80074a0:	68f9      	ldr	r1, [r7, #12]
 80074a2:	6a3a      	ldr	r2, [r7, #32]
 80074a4:	4613      	mov	r3, r2
 80074a6:	00db      	lsls	r3, r3, #3
 80074a8:	4413      	add	r3, r2
 80074aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ac:	4413      	add	r3, r2
 80074ae:	3316      	adds	r3, #22
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	440b      	add	r3, r1
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	68f9      	ldr	r1, [r7, #12]
 80074ba:	6a3a      	ldr	r2, [r7, #32]
 80074bc:	4613      	mov	r3, r2
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	4413      	add	r3, r2
 80074c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c4:	4413      	add	r3, r2
 80074c6:	3316      	adds	r3, #22
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	440b      	add	r3, r1
 80074cc:	6819      	ldr	r1, [r3, #0]
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074d2:	4613      	mov	r3, r2
 80074d4:	00db      	lsls	r3, r3, #3
 80074d6:	4413      	add	r3, r2
 80074d8:	6a3a      	ldr	r2, [r7, #32]
 80074da:	4413      	add	r3, r2
 80074dc:	3316      	adds	r3, #22
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4403      	add	r3, r0
 80074e2:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	3301      	adds	r3, #1
 80074e8:	623b      	str	r3, [r7, #32]
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	f77f af13 	ble.w	8007318 <kalmanCoreScalarUpdate+0x1a4>
  for (int i=0; i<KC_STATE_DIM; i++) {
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	3301      	adds	r3, #1
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	2b08      	cmp	r3, #8
 80074fc:	f77f af09 	ble.w	8007312 <kalmanCoreScalarUpdate+0x19e>
      }
    }
  }

  assertStateNotNaN(this);
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f7ff fc9f 	bl	8006e44 <assertStateNotNaN>

  this->isUpdated = true;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
}
 800750e:	bf00      	nop
 8007510:	3738      	adds	r7, #56	; 0x38
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop

08007518 <kalmanCoreUpdateWithPKE>:

void kalmanCoreUpdateWithPKE(kalmanCoreData_t* this, arm_matrix_instance_f32 *Hm, arm_matrix_instance_f32 *Km, arm_matrix_instance_f32 *P_w_m, float error)
{
 8007518:	b590      	push	{r4, r7, lr}
 800751a:	b0df      	sub	sp, #380	; 0x17c
 800751c:	af00      	add	r7, sp, #0
 800751e:	f507 74bc 	add.w	r4, r7, #376	; 0x178
 8007522:	f5a4 74b2 	sub.w	r4, r4, #356	; 0x164
 8007526:	6020      	str	r0, [r4, #0]
 8007528:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 800752c:	f5a0 70b4 	sub.w	r0, r0, #360	; 0x168
 8007530:	6001      	str	r1, [r0, #0]
 8007532:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8007536:	f5a1 71b6 	sub.w	r1, r1, #364	; 0x16c
 800753a:	600a      	str	r2, [r1, #0]
 800753c:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8007540:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800754a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800754e:	ed83 0a00 	vstr	s0, [r3]
    // kalman filter update with weighted covariance matrix P_w_m, kalman gain Km, and innovation error
    // Temporary matrices for the covariance updates
    static float tmpNN1d[KC_STATE_DIM][KC_STATE_DIM];
    static arm_matrix_instance_f32 tmpNN1m = {KC_STATE_DIM, KC_STATE_DIM, (float *)tmpNN1d};
    for (int i=0; i<KC_STATE_DIM; i++){
 8007552:	2300      	movs	r3, #0
 8007554:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8007558:	e030      	b.n	80075bc <kalmanCoreUpdateWithPKE+0xa4>
        this->S[i] = this->S[i] + Km->pData[i] * error;
 800755a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800755e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	ed93 7a00 	vldr	s14, [r3]
 8007570:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007574:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	edd3 6a00 	vldr	s13, [r3]
 8007588:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800758c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007590:	edd3 7a00 	vldr	s15, [r3]
 8007594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800759c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80075a0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	edc3 7a00 	vstr	s15, [r3]
    for (int i=0; i<KC_STATE_DIM; i++){
 80075b2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80075b6:	3301      	adds	r3, #1
 80075b8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80075bc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80075c0:	2b08      	cmp	r3, #8
 80075c2:	ddca      	ble.n	800755a <kalmanCoreUpdateWithPKE+0x42>
    }
    // ====== COVARIANCE UPDATE ====== //
    mat_mult(Km, Hm, &tmpNN1m);                 // KH,  the Kalman Gain and H are the updated Kalman Gain and H
 80075c4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80075c8:	f5a3 71b4 	sub.w	r1, r3, #360	; 0x168
 80075cc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80075d0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80075d4:	4ac6      	ldr	r2, [pc, #792]	; (80078f0 <kalmanCoreUpdateWithPKE+0x3d8>)
 80075d6:	6809      	ldr	r1, [r1, #0]
 80075d8:	6818      	ldr	r0, [r3, #0]
 80075da:	f7ff fbaf 	bl	8006d3c <mat_mult>
    mat_scale(&tmpNN1m, -1.0f, &tmpNN1m);       //  I-KH
 80075de:	49c4      	ldr	r1, [pc, #784]	; (80078f0 <kalmanCoreUpdateWithPKE+0x3d8>)
 80075e0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80075e4:	48c2      	ldr	r0, [pc, #776]	; (80078f0 <kalmanCoreUpdateWithPKE+0x3d8>)
 80075e6:	f7ff fc0d 	bl	8006e04 <mat_scale>
    for (int i=0; i<KC_STATE_DIM; i++) { tmpNN1d[i][i] = 1.0f + tmpNN1d[i][i]; }
 80075ea:	2300      	movs	r3, #0
 80075ec:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80075f0:	e01c      	b.n	800762c <kalmanCoreUpdateWithPKE+0x114>
 80075f2:	49c0      	ldr	r1, [pc, #768]	; (80078f4 <kalmanCoreUpdateWithPKE+0x3dc>)
 80075f4:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80075f8:	4613      	mov	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	440b      	add	r3, r1
 8007602:	edd3 7a00 	vldr	s15, [r3]
 8007606:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800760a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800760e:	49b9      	ldr	r1, [pc, #740]	; (80078f4 <kalmanCoreUpdateWithPKE+0x3dc>)
 8007610:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8007614:	4613      	mov	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	00db      	lsls	r3, r3, #3
 800761c:	440b      	add	r3, r1
 800761e:	edc3 7a00 	vstr	s15, [r3]
 8007622:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8007626:	3301      	adds	r3, #1
 8007628:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800762c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8007630:	2b08      	cmp	r3, #8
 8007632:	ddde      	ble.n	80075f2 <kalmanCoreUpdateWithPKE+0xda>
    float Ppo[KC_STATE_DIM][KC_STATE_DIM]={0};
 8007634:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007638:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800763c:	4618      	mov	r0, r3
 800763e:	f44f 73a2 	mov.w	r3, #324	; 0x144
 8007642:	461a      	mov	r2, r3
 8007644:	2100      	movs	r1, #0
 8007646:	f01c f963 	bl	8023910 <memset>
    arm_matrix_instance_f32 Ppom = {KC_STATE_DIM, KC_STATE_DIM, (float *)Ppo};
 800764a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800764e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007652:	2209      	movs	r2, #9
 8007654:	801a      	strh	r2, [r3, #0]
 8007656:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800765a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800765e:	2209      	movs	r2, #9
 8007660:	805a      	strh	r2, [r3, #2]
 8007662:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007666:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800766a:	f107 0220 	add.w	r2, r7, #32
 800766e:	605a      	str	r2, [r3, #4]
    mat_mult(&tmpNN1m, P_w_m, &Ppom);          // Pm = (I-KH)*P_w_m
 8007670:	f107 0218 	add.w	r2, r7, #24
 8007674:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007678:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800767c:	6819      	ldr	r1, [r3, #0]
 800767e:	489c      	ldr	r0, [pc, #624]	; (80078f0 <kalmanCoreUpdateWithPKE+0x3d8>)
 8007680:	f7ff fb5c 	bl	8006d3c <mat_mult>
    memcpy(this->P, Ppo, sizeof(this->P));
 8007684:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007688:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3358      	adds	r3, #88	; 0x58
 8007690:	f107 0120 	add.w	r1, r7, #32
 8007694:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8007698:	4618      	mov	r0, r3
 800769a:	f01c fa3e 	bl	8023b1a <memcpy>

    assertStateNotNaN(this);
 800769e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80076a2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	f7ff fbcc 	bl	8006e44 <assertStateNotNaN>

    for (int i=0; i<KC_STATE_DIM; i++) {
 80076ac:	2300      	movs	r3, #0
 80076ae:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80076b2:	e103      	b.n	80078bc <kalmanCoreUpdateWithPKE+0x3a4>
        for (int j=i; j<KC_STATE_DIM; j++) {
 80076b4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80076b8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80076bc:	e0f4      	b.n	80078a8 <kalmanCoreUpdateWithPKE+0x390>
        float p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 80076be:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80076c2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80076c6:	6819      	ldr	r1, [r3, #0]
 80076c8:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80076cc:	4613      	mov	r3, r2
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	4413      	add	r3, r2
 80076d2:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80076d6:	4413      	add	r3, r2
 80076d8:	3316      	adds	r3, #22
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	440b      	add	r3, r1
 80076de:	edd3 7a00 	vldr	s15, [r3]
 80076e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80076e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80076ea:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80076ee:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80076f2:	6819      	ldr	r1, [r3, #0]
 80076f4:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80076f8:	4613      	mov	r3, r2
 80076fa:	00db      	lsls	r3, r3, #3
 80076fc:	4413      	add	r3, r2
 80076fe:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8007702:	4413      	add	r3, r2
 8007704:	3316      	adds	r3, #22
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	440b      	add	r3, r1
 800770a:	edd3 7a00 	vldr	s15, [r3]
 800770e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007712:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800771a:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
        if (isnan(p) || p > MAX_COVARIANCE) {
 800771e:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
 8007722:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 8007726:	eeb4 7a67 	vcmp.f32	s14, s15
 800772a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800772e:	d608      	bvs.n	8007742 <kalmanCoreUpdateWithPKE+0x22a>
 8007730:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 8007734:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80078f8 <kalmanCoreUpdateWithPKE+0x3e0>
 8007738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800773c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007740:	dd34      	ble.n	80077ac <kalmanCoreUpdateWithPKE+0x294>
            this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 8007742:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007746:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800774a:	6819      	ldr	r1, [r3, #0]
 800774c:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8007750:	4613      	mov	r3, r2
 8007752:	00db      	lsls	r3, r3, #3
 8007754:	4413      	add	r3, r2
 8007756:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800775a:	4413      	add	r3, r2
 800775c:	3316      	adds	r3, #22
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	440b      	add	r3, r1
 8007762:	4a66      	ldr	r2, [pc, #408]	; (80078fc <kalmanCoreUpdateWithPKE+0x3e4>)
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800776a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800776e:	6819      	ldr	r1, [r3, #0]
 8007770:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8007774:	4613      	mov	r3, r2
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	4413      	add	r3, r2
 800777a:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800777e:	4413      	add	r3, r2
 8007780:	3316      	adds	r3, #22
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	440b      	add	r3, r1
 8007786:	6819      	ldr	r1, [r3, #0]
 8007788:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800778c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007790:	6818      	ldr	r0, [r3, #0]
 8007792:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8007796:	4613      	mov	r3, r2
 8007798:	00db      	lsls	r3, r3, #3
 800779a:	4413      	add	r3, r2
 800779c:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80077a0:	4413      	add	r3, r2
 80077a2:	3316      	adds	r3, #22
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4403      	add	r3, r0
 80077a8:	6019      	str	r1, [r3, #0]
 80077aa:	e078      	b.n	800789e <kalmanCoreUpdateWithPKE+0x386>
        } else if ( i==j && p < MIN_COVARIANCE ) {
 80077ac:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80077b0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d13d      	bne.n	8007834 <kalmanCoreUpdateWithPKE+0x31c>
 80077b8:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 80077bc:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8007900 <kalmanCoreUpdateWithPKE+0x3e8>
 80077c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c8:	d534      	bpl.n	8007834 <kalmanCoreUpdateWithPKE+0x31c>
            this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 80077ca:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80077ce:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80077d2:	6819      	ldr	r1, [r3, #0]
 80077d4:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80077d8:	4613      	mov	r3, r2
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	4413      	add	r3, r2
 80077de:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80077e2:	4413      	add	r3, r2
 80077e4:	3316      	adds	r3, #22
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	440b      	add	r3, r1
 80077ea:	4a46      	ldr	r2, [pc, #280]	; (8007904 <kalmanCoreUpdateWithPKE+0x3ec>)
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80077f2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80077f6:	6819      	ldr	r1, [r3, #0]
 80077f8:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80077fc:	4613      	mov	r3, r2
 80077fe:	00db      	lsls	r3, r3, #3
 8007800:	4413      	add	r3, r2
 8007802:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8007806:	4413      	add	r3, r2
 8007808:	3316      	adds	r3, #22
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	440b      	add	r3, r1
 800780e:	6819      	ldr	r1, [r3, #0]
 8007810:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007814:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007818:	6818      	ldr	r0, [r3, #0]
 800781a:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800781e:	4613      	mov	r3, r2
 8007820:	00db      	lsls	r3, r3, #3
 8007822:	4413      	add	r3, r2
 8007824:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8007828:	4413      	add	r3, r2
 800782a:	3316      	adds	r3, #22
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4403      	add	r3, r0
 8007830:	6019      	str	r1, [r3, #0]
 8007832:	e034      	b.n	800789e <kalmanCoreUpdateWithPKE+0x386>
        } else {
            this->P[i][j] = this->P[j][i] = p;
 8007834:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007838:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800783c:	6819      	ldr	r1, [r3, #0]
 800783e:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8007842:	4613      	mov	r3, r2
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	4413      	add	r3, r2
 8007848:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800784c:	4413      	add	r3, r2
 800784e:	3316      	adds	r3, #22
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	440b      	add	r3, r1
 8007854:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800785e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007862:	6819      	ldr	r1, [r3, #0]
 8007864:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8007868:	4613      	mov	r3, r2
 800786a:	00db      	lsls	r3, r3, #3
 800786c:	4413      	add	r3, r2
 800786e:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8007872:	4413      	add	r3, r2
 8007874:	3316      	adds	r3, #22
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	440b      	add	r3, r1
 800787a:	6819      	ldr	r1, [r3, #0]
 800787c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007880:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007884:	6818      	ldr	r0, [r3, #0]
 8007886:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800788a:	4613      	mov	r3, r2
 800788c:	00db      	lsls	r3, r3, #3
 800788e:	4413      	add	r3, r2
 8007890:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8007894:	4413      	add	r3, r2
 8007896:	3316      	adds	r3, #22
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4403      	add	r3, r0
 800789c:	6019      	str	r1, [r3, #0]
        for (int j=i; j<KC_STATE_DIM; j++) {
 800789e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80078a2:	3301      	adds	r3, #1
 80078a4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80078a8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	f77f af06 	ble.w	80076be <kalmanCoreUpdateWithPKE+0x1a6>
    for (int i=0; i<KC_STATE_DIM; i++) {
 80078b2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80078b6:	3301      	adds	r3, #1
 80078b8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80078bc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	f77f aef7 	ble.w	80076b4 <kalmanCoreUpdateWithPKE+0x19c>
            }
        }
    }
    assertStateNotNaN(this);
 80078c6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80078ca:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80078ce:	6818      	ldr	r0, [r3, #0]
 80078d0:	f7ff fab8 	bl	8006e44 <assertStateNotNaN>

    this->isUpdated = true;
 80078d4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80078d8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
}
 80078e4:	bf00      	nop
 80078e6:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd90      	pop	{r4, r7, pc}
 80078ee:	bf00      	nop
 80078f0:	200008c8 	.word	0x200008c8
 80078f4:	20009494 	.word	0x20009494
 80078f8:	42c80000 	.word	0x42c80000
 80078fc:	42c80000 	.word	0x42c80000
 8007900:	358637bd 	.word	0x358637bd
 8007904:	358637bd 	.word	0x358637bd

08007908 <kalmanCoreUpdateWithBaro>:

void kalmanCoreUpdateWithBaro(kalmanCoreData_t *this, const kalmanCoreParams_t *params, float baroAsl, bool quadIsFlying)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b090      	sub	sp, #64	; 0x40
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	ed87 0a01 	vstr	s0, [r7, #4]
 8007916:	4613      	mov	r3, r2
 8007918:	70fb      	strb	r3, [r7, #3]
  float h[KC_STATE_DIM] = {0};
 800791a:	f107 0318 	add.w	r3, r7, #24
 800791e:	2224      	movs	r2, #36	; 0x24
 8007920:	2100      	movs	r1, #0
 8007922:	4618      	mov	r0, r3
 8007924:	f01b fff4 	bl	8023910 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8007928:	2301      	movs	r3, #1
 800792a:	823b      	strh	r3, [r7, #16]
 800792c:	2309      	movs	r3, #9
 800792e:	827b      	strh	r3, [r7, #18]
 8007930:	f107 0318 	add.w	r3, r7, #24
 8007934:	617b      	str	r3, [r7, #20]

  h[KC_STATE_Z] = 1;
 8007936:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800793a:	623b      	str	r3, [r7, #32]

  if (!quadIsFlying || this->baroReferenceHeight < 1) {
 800793c:	78fb      	ldrb	r3, [r7, #3]
 800793e:	f083 0301 	eor.w	r3, r3, #1
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b00      	cmp	r3, #0
 8007946:	d109      	bne.n	800795c <kalmanCoreUpdateWithBaro+0x54>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 800794e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007952:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800795a:	d503      	bpl.n	8007964 <kalmanCoreUpdateWithBaro+0x5c>
    //TODO: maybe we could track the zero height as a state. Would be especially useful if UWB anchors had barometers.
    this->baroReferenceHeight = baroAsl;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
  }

  float meas = (baroAsl - this->baroReferenceHeight);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 800796a:	ed97 7a01 	vldr	s14, [r7, #4]
 800796e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007972:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  kalmanCoreScalarUpdate(this, &H, meas - this->S[KC_STATE_Z], params->measNoiseBaro);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	edd3 7a02 	vldr	s15, [r3, #8]
 800797c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8007980:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800798a:	f107 0310 	add.w	r3, r7, #16
 800798e:	eef0 0a47 	vmov.f32	s1, s14
 8007992:	eeb0 0a67 	vmov.f32	s0, s15
 8007996:	4619      	mov	r1, r3
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f7ff fbeb 	bl	8007174 <kalmanCoreScalarUpdate>
}
 800799e:	bf00      	nop
 80079a0:	3740      	adds	r7, #64	; 0x40
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <predictDt>:

static void predictDt(kalmanCoreData_t* this, Axis3f *acc, Axis3f *gyro, float dt, bool quadIsFlying)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b0a2      	sub	sp, #136	; 0x88
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6178      	str	r0, [r7, #20]
 80079b0:	6139      	str	r1, [r7, #16]
 80079b2:	60fa      	str	r2, [r7, #12]
 80079b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80079b8:	71fb      	strb	r3, [r7, #7]
  static __attribute__((aligned(4))) arm_matrix_instance_f32 tmpNN1m = { KC_STATE_DIM, KC_STATE_DIM, tmpNN1d};

  NO_DMA_CCM_SAFE_ZERO_INIT static float tmpNN2d[KC_STATE_DIM * KC_STATE_DIM];
  static __attribute__((aligned(4))) arm_matrix_instance_f32 tmpNN2m = { KC_STATE_DIM, KC_STATE_DIM, tmpNN2d};

  float dt2 = dt*dt;
 80079ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80079be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80079c2:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

  // ====== DYNAMICS LINEARIZATION ======
  // Initialize as the identity
  A[KC_STATE_X][KC_STATE_X] = 1;
 80079c6:	4bd2      	ldr	r3, [pc, #840]	; (8007d10 <predictDt+0x368>)
 80079c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80079cc:	601a      	str	r2, [r3, #0]
  A[KC_STATE_Y][KC_STATE_Y] = 1;
 80079ce:	4bd0      	ldr	r3, [pc, #832]	; (8007d10 <predictDt+0x368>)
 80079d0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80079d4:	629a      	str	r2, [r3, #40]	; 0x28
  A[KC_STATE_Z][KC_STATE_Z] = 1;
 80079d6:	4bce      	ldr	r3, [pc, #824]	; (8007d10 <predictDt+0x368>)
 80079d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80079dc:	651a      	str	r2, [r3, #80]	; 0x50

  A[KC_STATE_PX][KC_STATE_PX] = 1;
 80079de:	4bcc      	ldr	r3, [pc, #816]	; (8007d10 <predictDt+0x368>)
 80079e0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80079e4:	679a      	str	r2, [r3, #120]	; 0x78
  A[KC_STATE_PY][KC_STATE_PY] = 1;
 80079e6:	4bca      	ldr	r3, [pc, #808]	; (8007d10 <predictDt+0x368>)
 80079e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80079ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  A[KC_STATE_PZ][KC_STATE_PZ] = 1;
 80079f0:	4bc7      	ldr	r3, [pc, #796]	; (8007d10 <predictDt+0x368>)
 80079f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80079f6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  A[KC_STATE_D0][KC_STATE_D0] = 1;
 80079fa:	4bc5      	ldr	r3, [pc, #788]	; (8007d10 <predictDt+0x368>)
 80079fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007a00:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  A[KC_STATE_D1][KC_STATE_D1] = 1;
 8007a04:	4bc2      	ldr	r3, [pc, #776]	; (8007d10 <predictDt+0x368>)
 8007a06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007a0a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  A[KC_STATE_D2][KC_STATE_D2] = 1;
 8007a0e:	4bc0      	ldr	r3, [pc, #768]	; (8007d10 <predictDt+0x368>)
 8007a10:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007a14:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

  // position from body-frame velocity
  A[KC_STATE_X][KC_STATE_PX] = this->R[0][0]*dt;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8007a1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a26:	4bba      	ldr	r3, [pc, #744]	; (8007d10 <predictDt+0x368>)
 8007a28:	edc3 7a03 	vstr	s15, [r3, #12]
  A[KC_STATE_Y][KC_STATE_PX] = this->R[1][0]*dt;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8007a32:	edd7 7a02 	vldr	s15, [r7, #8]
 8007a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a3a:	4bb5      	ldr	r3, [pc, #724]	; (8007d10 <predictDt+0x368>)
 8007a3c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  A[KC_STATE_Z][KC_STATE_PX] = this->R[2][0]*dt;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8007a46:	edd7 7a02 	vldr	s15, [r7, #8]
 8007a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a4e:	4bb0      	ldr	r3, [pc, #704]	; (8007d10 <predictDt+0x368>)
 8007a50:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  A[KC_STATE_X][KC_STATE_PY] = this->R[0][1]*dt;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8007a5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8007a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a62:	4bab      	ldr	r3, [pc, #684]	; (8007d10 <predictDt+0x368>)
 8007a64:	edc3 7a04 	vstr	s15, [r3, #16]
  A[KC_STATE_Y][KC_STATE_PY] = this->R[1][1]*dt;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8007a6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a76:	4ba6      	ldr	r3, [pc, #664]	; (8007d10 <predictDt+0x368>)
 8007a78:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  A[KC_STATE_Z][KC_STATE_PY] = this->R[2][1]*dt;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8007a82:	edd7 7a02 	vldr	s15, [r7, #8]
 8007a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a8a:	4ba1      	ldr	r3, [pc, #644]	; (8007d10 <predictDt+0x368>)
 8007a8c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  A[KC_STATE_X][KC_STATE_PZ] = this->R[0][2]*dt;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8007a96:	edd7 7a02 	vldr	s15, [r7, #8]
 8007a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a9e:	4b9c      	ldr	r3, [pc, #624]	; (8007d10 <predictDt+0x368>)
 8007aa0:	edc3 7a05 	vstr	s15, [r3, #20]
  A[KC_STATE_Y][KC_STATE_PZ] = this->R[1][2]*dt;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8007aaa:	edd7 7a02 	vldr	s15, [r7, #8]
 8007aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ab2:	4b97      	ldr	r3, [pc, #604]	; (8007d10 <predictDt+0x368>)
 8007ab4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  A[KC_STATE_Z][KC_STATE_PZ] = this->R[2][2]*dt;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8007abe:	edd7 7a02 	vldr	s15, [r7, #8]
 8007ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ac6:	4b92      	ldr	r3, [pc, #584]	; (8007d10 <predictDt+0x368>)
 8007ac8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

  // position from attitude error
  A[KC_STATE_X][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[0][2] - this->S[KC_STATE_PZ]*this->R[0][1])*dt;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	ed93 7a04 	vldr	s14, [r3, #16]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8007ad8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	edd3 6a05 	vldr	s13, [r3, #20]
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007ae8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007aec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007af0:	edd7 7a02 	vldr	s15, [r7, #8]
 8007af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007af8:	4b85      	ldr	r3, [pc, #532]	; (8007d10 <predictDt+0x368>)
 8007afa:	edc3 7a06 	vstr	s15, [r3, #24]
  A[KC_STATE_Y][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[1][2] - this->S[KC_STATE_PZ]*this->R[1][1])*dt;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	ed93 7a04 	vldr	s14, [r3, #16]
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8007b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	edd3 6a05 	vldr	s13, [r3, #20]
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007b1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007b22:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b2a:	4b79      	ldr	r3, [pc, #484]	; (8007d10 <predictDt+0x368>)
 8007b2c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  A[KC_STATE_Z][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[2][2] - this->S[KC_STATE_PZ]*this->R[2][1])*dt;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	ed93 7a04 	vldr	s14, [r3, #16]
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	edd3 6a05 	vldr	s13, [r3, #20]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007b54:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b5c:	4b6c      	ldr	r3, [pc, #432]	; (8007d10 <predictDt+0x368>)
 8007b5e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

  A[KC_STATE_X][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[0][2] + this->S[KC_STATE_PZ]*this->R[0][0])*dt;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	edd3 7a03 	vldr	s15, [r3, #12]
 8007b68:	eeb1 7a67 	vneg.f32	s14, s15
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8007b72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	edd3 6a05 	vldr	s13, [r3, #20]
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b92:	4b5f      	ldr	r3, [pc, #380]	; (8007d10 <predictDt+0x368>)
 8007b94:	edc3 7a07 	vstr	s15, [r3, #28]
  A[KC_STATE_Y][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[1][2] + this->S[KC_STATE_PZ]*this->R[1][0])*dt;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8007b9e:	eeb1 7a67 	vneg.f32	s14, s15
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8007ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	edd3 6a05 	vldr	s13, [r3, #20]
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8007bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007bbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007bc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8007bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bc8:	4b51      	ldr	r3, [pc, #324]	; (8007d10 <predictDt+0x368>)
 8007bca:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  A[KC_STATE_Z][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[2][2] + this->S[KC_STATE_PZ]*this->R[2][0])*dt;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8007bd4:	eeb1 7a67 	vneg.f32	s14, s15
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007bde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	edd3 6a05 	vldr	s13, [r3, #20]
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8007bee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007bf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007bf6:	edd7 7a02 	vldr	s15, [r7, #8]
 8007bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bfe:	4b44      	ldr	r3, [pc, #272]	; (8007d10 <predictDt+0x368>)
 8007c00:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

  A[KC_STATE_X][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[0][1] - this->S[KC_STATE_PY]*this->R[0][0])*dt;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	ed93 7a03 	vldr	s14, [r3, #12]
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007c10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	edd3 6a04 	vldr	s13, [r3, #16]
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007c28:	edd7 7a02 	vldr	s15, [r7, #8]
 8007c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c30:	4b37      	ldr	r3, [pc, #220]	; (8007d10 <predictDt+0x368>)
 8007c32:	edc3 7a08 	vstr	s15, [r3, #32]
  A[KC_STATE_Y][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[1][1] - this->S[KC_STATE_PY]*this->R[1][0])*dt;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	ed93 7a03 	vldr	s14, [r3, #12]
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007c42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	edd3 6a04 	vldr	s13, [r3, #16]
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8007c52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007c5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8007c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c62:	4b2b      	ldr	r3, [pc, #172]	; (8007d10 <predictDt+0x368>)
 8007c64:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
  A[KC_STATE_Z][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[2][1] - this->S[KC_STATE_PY]*this->R[2][0])*dt;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	ed93 7a03 	vldr	s14, [r3, #12]
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	edd3 6a04 	vldr	s13, [r3, #16]
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8007c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007c8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c94:	4b1e      	ldr	r3, [pc, #120]	; (8007d10 <predictDt+0x368>)
 8007c96:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

  // body-frame velocity from body-frame velocity
  A[KC_STATE_PX][KC_STATE_PX] = 1; //drag negligible
 8007c9a:	4b1d      	ldr	r3, [pc, #116]	; (8007d10 <predictDt+0x368>)
 8007c9c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007ca0:	679a      	str	r2, [r3, #120]	; 0x78
  A[KC_STATE_PY][KC_STATE_PX] =-gyro->z*dt;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	edd3 7a02 	vldr	s15, [r3, #8]
 8007ca8:	eeb1 7a67 	vneg.f32	s14, s15
 8007cac:	edd7 7a02 	vldr	s15, [r7, #8]
 8007cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb4:	4b16      	ldr	r3, [pc, #88]	; (8007d10 <predictDt+0x368>)
 8007cb6:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
  A[KC_STATE_PZ][KC_STATE_PX] = gyro->y*dt;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	ed93 7a01 	vldr	s14, [r3, #4]
 8007cc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8007cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cc8:	4b11      	ldr	r3, [pc, #68]	; (8007d10 <predictDt+0x368>)
 8007cca:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0

  A[KC_STATE_PX][KC_STATE_PY] = gyro->z*dt;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	ed93 7a02 	vldr	s14, [r3, #8]
 8007cd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8007cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cdc:	4b0c      	ldr	r3, [pc, #48]	; (8007d10 <predictDt+0x368>)
 8007cde:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
  A[KC_STATE_PY][KC_STATE_PY] = 1; //drag negligible
 8007ce2:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <predictDt+0x368>)
 8007ce4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007ce8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  A[KC_STATE_PZ][KC_STATE_PY] =-gyro->x*dt;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	edd3 7a00 	vldr	s15, [r3]
 8007cf2:	eeb1 7a67 	vneg.f32	s14, s15
 8007cf6:	edd7 7a02 	vldr	s15, [r7, #8]
 8007cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cfe:	4b04      	ldr	r3, [pc, #16]	; (8007d10 <predictDt+0x368>)
 8007d00:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

  A[KC_STATE_PX][KC_STATE_PZ] =-gyro->y*dt;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	edd3 7a01 	vldr	s15, [r3, #4]
 8007d0a:	eeb1 7a67 	vneg.f32	s14, s15
 8007d0e:	e001      	b.n	8007d14 <predictDt+0x36c>
 8007d10:	20004390 	.word	0x20004390
 8007d14:	edd7 7a02 	vldr	s15, [r7, #8]
 8007d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1c:	4bb2      	ldr	r3, [pc, #712]	; (8007fe8 <predictDt+0x640>)
 8007d1e:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
  A[KC_STATE_PY][KC_STATE_PZ] = gyro->x*dt;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	ed93 7a00 	vldr	s14, [r3]
 8007d28:	edd7 7a02 	vldr	s15, [r7, #8]
 8007d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d30:	4bad      	ldr	r3, [pc, #692]	; (8007fe8 <predictDt+0x640>)
 8007d32:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
  A[KC_STATE_PZ][KC_STATE_PZ] = 1; //drag negligible
 8007d36:	4bac      	ldr	r3, [pc, #688]	; (8007fe8 <predictDt+0x640>)
 8007d38:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007d3c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  // body-frame velocity from attitude error
  A[KC_STATE_PX][KC_STATE_D0] =  0;
 8007d40:	4ba9      	ldr	r3, [pc, #676]	; (8007fe8 <predictDt+0x640>)
 8007d42:	f04f 0200 	mov.w	r2, #0
 8007d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  A[KC_STATE_PY][KC_STATE_D0] = -GRAVITY_MAGNITUDE*this->R[2][2]*dt;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007d50:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8007fec <predictDt+0x644>
 8007d54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007d58:	edd7 7a02 	vldr	s15, [r7, #8]
 8007d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d60:	4ba1      	ldr	r3, [pc, #644]	; (8007fe8 <predictDt+0x640>)
 8007d62:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
  A[KC_STATE_PZ][KC_STATE_D0] =  GRAVITY_MAGNITUDE*this->R[2][1]*dt;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007d6c:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8007ffc <predictDt+0x654>
 8007d70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007d74:	edd7 7a02 	vldr	s15, [r7, #8]
 8007d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d7c:	4b9a      	ldr	r3, [pc, #616]	; (8007fe8 <predictDt+0x640>)
 8007d7e:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc

  A[KC_STATE_PX][KC_STATE_D1] =  GRAVITY_MAGNITUDE*this->R[2][2]*dt;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007d88:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8007ffc <predictDt+0x654>
 8007d8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007d90:	edd7 7a02 	vldr	s15, [r7, #8]
 8007d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d98:	4b93      	ldr	r3, [pc, #588]	; (8007fe8 <predictDt+0x640>)
 8007d9a:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
  A[KC_STATE_PY][KC_STATE_D1] =  0;
 8007d9e:	4b92      	ldr	r3, [pc, #584]	; (8007fe8 <predictDt+0x640>)
 8007da0:	f04f 0200 	mov.w	r2, #0
 8007da4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  A[KC_STATE_PZ][KC_STATE_D1] = -GRAVITY_MAGNITUDE*this->R[2][0]*dt;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8007dae:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8007fec <predictDt+0x644>
 8007db2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007db6:	edd7 7a02 	vldr	s15, [r7, #8]
 8007dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dbe:	4b8a      	ldr	r3, [pc, #552]	; (8007fe8 <predictDt+0x640>)
 8007dc0:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

  A[KC_STATE_PX][KC_STATE_D2] = -GRAVITY_MAGNITUDE*this->R[2][1]*dt;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007dca:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8007fec <predictDt+0x644>
 8007dce:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007dd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8007dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dda:	4b83      	ldr	r3, [pc, #524]	; (8007fe8 <predictDt+0x640>)
 8007ddc:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
  A[KC_STATE_PY][KC_STATE_D2] =  GRAVITY_MAGNITUDE*this->R[2][0]*dt;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8007de6:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8007ffc <predictDt+0x654>
 8007dea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007dee:	edd7 7a02 	vldr	s15, [r7, #8]
 8007df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007df6:	4b7c      	ldr	r3, [pc, #496]	; (8007fe8 <predictDt+0x640>)
 8007df8:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
  A[KC_STATE_PZ][KC_STATE_D2] =  0;
 8007dfc:	4b7a      	ldr	r3, [pc, #488]	; (8007fe8 <predictDt+0x640>)
 8007dfe:	f04f 0200 	mov.w	r2, #0
 8007e02:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
   * d = [0,0,0] at the beginning of each prediction step and that gyro.x is constant over the sampling period
   *
   * As derived in "Covariance Correction Step for Kalman Filtering with an Attitude"
   * http://arc.aiaa.org/doi/abs/10.2514/1.G000848
   */
  float d0 = gyro->x*dt/2;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	ed93 7a00 	vldr	s14, [r3]
 8007e0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007e10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007e18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007e1c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
  float d1 = gyro->y*dt/2;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	ed93 7a01 	vldr	s14, [r3, #4]
 8007e26:	edd7 7a02 	vldr	s15, [r7, #8]
 8007e2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e2e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007e32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007e36:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
  float d2 = gyro->z*dt/2;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	ed93 7a02 	vldr	s14, [r3, #8]
 8007e40:	edd7 7a02 	vldr	s15, [r7, #8]
 8007e44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e48:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007e4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007e50:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

  A[KC_STATE_D0][KC_STATE_D0] =  1 - d1*d1/2 - d2*d2/2;
 8007e54:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8007e58:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007e5c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007e60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007e64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007e6c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8007e70:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8007e74:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8007e78:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e80:	4b59      	ldr	r3, [pc, #356]	; (8007fe8 <predictDt+0x640>)
 8007e82:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
  A[KC_STATE_D0][KC_STATE_D1] =  d2 + d0*d1/2;
 8007e86:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8007e8a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8007e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e92:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007e96:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007e9a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8007e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ea2:	4b51      	ldr	r3, [pc, #324]	; (8007fe8 <predictDt+0x640>)
 8007ea4:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
  A[KC_STATE_D0][KC_STATE_D2] = -d1 + d0*d2/2;
 8007ea8:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8007eac:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8007eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007eb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007ebc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8007ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ec4:	4b48      	ldr	r3, [pc, #288]	; (8007fe8 <predictDt+0x640>)
 8007ec6:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8

  A[KC_STATE_D1][KC_STATE_D0] = -d2 + d0*d1/2;
 8007eca:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8007ece:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8007ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007eda:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007ede:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8007ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ee6:	4b40      	ldr	r3, [pc, #256]	; (8007fe8 <predictDt+0x640>)
 8007ee8:	edc3 7a45 	vstr	s15, [r3, #276]	; 0x114
  A[KC_STATE_D1][KC_STATE_D1] =  1 - d0*d0/2 - d2*d2/2;
 8007eec:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8007ef0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007ef4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007ef8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007efc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007f04:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8007f08:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8007f0c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8007f10:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007f14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f18:	4b33      	ldr	r3, [pc, #204]	; (8007fe8 <predictDt+0x640>)
 8007f1a:	edc3 7a46 	vstr	s15, [r3, #280]	; 0x118
  A[KC_STATE_D1][KC_STATE_D2] =  d0 + d1*d2/2;
 8007f1e:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8007f22:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8007f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f2a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007f2e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007f32:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8007f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f3a:	4b2b      	ldr	r3, [pc, #172]	; (8007fe8 <predictDt+0x640>)
 8007f3c:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c

  A[KC_STATE_D2][KC_STATE_D0] =  d1 + d0*d2/2;
 8007f40:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8007f44:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8007f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f4c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007f50:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007f54:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8007f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f5c:	4b22      	ldr	r3, [pc, #136]	; (8007fe8 <predictDt+0x640>)
 8007f5e:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
  A[KC_STATE_D2][KC_STATE_D1] = -d0 + d1*d2/2;
 8007f62:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8007f66:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8007f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f6e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007f72:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007f76:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8007f7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f7e:	4b1a      	ldr	r3, [pc, #104]	; (8007fe8 <predictDt+0x640>)
 8007f80:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
  A[KC_STATE_D2][KC_STATE_D2] = 1 - d0*d0/2 - d1*d1/2;
 8007f84:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8007f88:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007f8c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007f90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007f94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007f9c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8007fa0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8007fa4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8007fa8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fb0:	4b0d      	ldr	r3, [pc, #52]	; (8007fe8 <predictDt+0x640>)
 8007fb2:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140


  // ====== COVARIANCE UPDATE ======
  mat_mult(&Am, &this->Pm, &tmpNN1m); // A P
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007fbc:	4a0c      	ldr	r2, [pc, #48]	; (8007ff0 <predictDt+0x648>)
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	480c      	ldr	r0, [pc, #48]	; (8007ff4 <predictDt+0x64c>)
 8007fc2:	f7fe febb 	bl	8006d3c <mat_mult>
  mat_trans(&Am, &tmpNN2m); // A'
 8007fc6:	490c      	ldr	r1, [pc, #48]	; (8007ff8 <predictDt+0x650>)
 8007fc8:	480a      	ldr	r0, [pc, #40]	; (8007ff4 <predictDt+0x64c>)
 8007fca:	f7fe fe95 	bl	8006cf8 <mat_trans>
  mat_mult(&tmpNN1m, &tmpNN2m, &this->Pm); // A P A'
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	4908      	ldr	r1, [pc, #32]	; (8007ff8 <predictDt+0x650>)
 8007fd8:	4805      	ldr	r0, [pc, #20]	; (8007ff0 <predictDt+0x648>)
 8007fda:	f7fe feaf 	bl	8006d3c <mat_mult>

  float dx, dy, dz;
  float tmpSPX, tmpSPY, tmpSPZ;
  float zacc;

  if (quadIsFlying) // only acceleration in z direction
 8007fde:	79fb      	ldrb	r3, [r7, #7]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 8125 	beq.w	8008230 <predictDt+0x888>
 8007fe6:	e00b      	b.n	8008000 <predictDt+0x658>
 8007fe8:	20004390 	.word	0x20004390
 8007fec:	c11cf5c3 	.word	0xc11cf5c3
 8007ff0:	200008d8 	.word	0x200008d8
 8007ff4:	200008d0 	.word	0x200008d0
 8007ff8:	200008e0 	.word	0x200008e0
 8007ffc:	411cf5c3 	.word	0x411cf5c3
  {
    // Use accelerometer and not commanded thrust, as this has proper physical units
    zacc = acc->z;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	64fb      	str	r3, [r7, #76]	; 0x4c

    // position updates in the body frame (will be rotated to inertial frame)
    dx = this->S[KC_STATE_PX] * dt;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	edd3 7a03 	vldr	s15, [r3, #12]
 800800c:	ed97 7a02 	vldr	s14, [r7, #8]
 8008010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008014:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    dy = this->S[KC_STATE_PY] * dt;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	edd3 7a04 	vldr	s15, [r3, #16]
 800801e:	ed97 7a02 	vldr	s14, [r7, #8]
 8008022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008026:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    dz = this->S[KC_STATE_PZ] * dt + zacc * dt2 / 2.0f; // thrust can only be produced in the body's Z direction
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	ed93 7a05 	vldr	s14, [r3, #20]
 8008030:	edd7 7a02 	vldr	s15, [r7, #8]
 8008034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008038:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800803c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8008040:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008044:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8008048:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800804c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008050:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

    // position update
    this->S[KC_STATE_X] += this->R[0][0] * dx + this->R[0][1] * dy + this->R[0][2] * dz;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	ed93 7a00 	vldr	s14, [r3]
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8008060:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8008064:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800806e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8008072:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008076:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8008080:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8008084:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008088:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800808c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	edc3 7a00 	vstr	s15, [r3]
    this->S[KC_STATE_Y] += this->R[1][0] * dx + this->R[1][1] * dy + this->R[1][2] * dz;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	ed93 7a01 	vldr	s14, [r3, #4]
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80080a2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80080a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	ed93 6a11 	vldr	s12, [r3, #68]	; 0x44
 80080b0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80080b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80080b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 80080c2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80080c6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80080ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	edc3 7a01 	vstr	s15, [r3, #4]
    this->S[KC_STATE_Z] += this->R[2][0] * dx + this->R[2][1] * dy + this->R[2][2] * dz - GRAVITY_MAGNITUDE * dt2 / 2.0f;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	ed93 7a02 	vldr	s14, [r3, #8]
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 80080e4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80080e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 80080f2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80080f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80080fa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8008104:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8008108:	ee66 7a27 	vmul.f32	s15, s12, s15
 800810c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008110:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8008114:	ed1f 6a47 	vldr	s12, [pc, #-284]	; 8007ffc <predictDt+0x654>
 8008118:	ee27 6a86 	vmul.f32	s12, s15, s12
 800811c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8008120:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008124:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	edc3 7a02 	vstr	s15, [r3, #8]

    // keep previous time step's state for the update
    tmpSPX = this->S[KC_STATE_PX];
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	65bb      	str	r3, [r7, #88]	; 0x58
    tmpSPY = this->S[KC_STATE_PY];
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	657b      	str	r3, [r7, #84]	; 0x54
    tmpSPZ = this->S[KC_STATE_PZ];
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	653b      	str	r3, [r7, #80]	; 0x50

    // body-velocity update: accelerometers - gyros cross velocity - gravity in body frame
    this->S[KC_STATE_PX] += dt * (gyro->z * tmpSPY - gyro->y * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][0]);
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	ed93 7a03 	vldr	s14, [r3, #12]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	edd3 6a02 	vldr	s13, [r3, #8]
 8008150:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008154:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	ed93 6a01 	vldr	s12, [r3, #4]
 800815e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008162:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008166:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008170:	ed1f 6a5e 	vldr	s12, [pc, #-376]	; 8007ffc <predictDt+0x654>
 8008174:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008178:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800817c:	edd7 7a02 	vldr	s15, [r7, #8]
 8008180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	edc3 7a03 	vstr	s15, [r3, #12]
    this->S[KC_STATE_PY] += dt * (-gyro->z * tmpSPX + gyro->x * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][1]);
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	ed93 7a04 	vldr	s14, [r3, #16]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	edd3 7a02 	vldr	s15, [r3, #8]
 800819a:	eef1 6a67 	vneg.f32	s13, s15
 800819e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80081a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	ed93 6a00 	vldr	s12, [r3]
 80081ac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80081b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80081b4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80081be:	ed1f 6a71 	vldr	s12, [pc, #-452]	; 8007ffc <predictDt+0x654>
 80081c2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80081c6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80081ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80081ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80081d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	edc3 7a04 	vstr	s15, [r3, #16]
    this->S[KC_STATE_PZ] += dt * (zacc + gyro->y * tmpSPX - gyro->x * tmpSPY - GRAVITY_MAGNITUDE * this->R[2][2]);
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	ed93 7a05 	vldr	s14, [r3, #20]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80081e8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80081ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80081f0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80081f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	ed93 6a00 	vldr	s12, [r3]
 80081fe:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008202:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008206:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008210:	ed1f 6a86 	vldr	s12, [pc, #-536]	; 8007ffc <predictDt+0x654>
 8008214:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008218:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800821c:	edd7 7a02 	vldr	s15, [r7, #8]
 8008220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	edc3 7a05 	vstr	s15, [r3, #20]
 800822e:	e137      	b.n	80084a0 <predictDt+0xaf8>
  }
  else // Acceleration can be in any direction, as measured by the accelerometer. This occurs, eg. in freefall or while being carried.
  {
    // position updates in the body frame (will be rotated to inertial frame)
    dx = this->S[KC_STATE_PX] * dt + acc->x * dt2 / 2.0f;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	ed93 7a03 	vldr	s14, [r3, #12]
 8008236:	edd7 7a02 	vldr	s15, [r7, #8]
 800823a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	edd3 6a00 	vldr	s13, [r3]
 8008244:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8008248:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800824c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8008250:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8008254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008258:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    dy = this->S[KC_STATE_PY] * dt + acc->y * dt2 / 2.0f;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	ed93 7a04 	vldr	s14, [r3, #16]
 8008262:	edd7 7a02 	vldr	s15, [r7, #8]
 8008266:	ee27 7a27 	vmul.f32	s14, s14, s15
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	edd3 6a01 	vldr	s13, [r3, #4]
 8008270:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8008274:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008278:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800827c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8008280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008284:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    dz = this->S[KC_STATE_PZ] * dt + acc->z * dt2 / 2.0f; // thrust can only be produced in the body's Z direction
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	ed93 7a05 	vldr	s14, [r3, #20]
 800828e:	edd7 7a02 	vldr	s15, [r7, #8]
 8008292:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	edd3 6a02 	vldr	s13, [r3, #8]
 800829c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80082a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80082a4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80082a8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80082ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082b0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

    // position update
    this->S[KC_STATE_X] += this->R[0][0] * dx + this->R[0][1] * dy + this->R[0][2] * dz;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	ed93 7a00 	vldr	s14, [r3]
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80082c0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80082c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 80082ce:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80082d2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80082d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 80082e0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80082e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80082e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	edc3 7a00 	vstr	s15, [r3]
    this->S[KC_STATE_Y] += this->R[1][0] * dx + this->R[1][1] * dy + this->R[1][2] * dz;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8008302:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8008306:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	ed93 6a11 	vldr	s12, [r3, #68]	; 0x44
 8008310:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8008314:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008318:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8008322:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8008326:	ee66 7a27 	vmul.f32	s15, s12, s15
 800832a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800832e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	edc3 7a01 	vstr	s15, [r3, #4]
    this->S[KC_STATE_Z] += this->R[2][0] * dx + this->R[2][1] * dy + this->R[2][2] * dz - GRAVITY_MAGNITUDE * dt2 / 2.0f;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	ed93 7a02 	vldr	s14, [r3, #8]
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8008344:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8008348:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 8008352:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8008356:	ee66 7a27 	vmul.f32	s15, s12, s15
 800835a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8008364:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8008368:	ee66 7a27 	vmul.f32	s15, s12, s15
 800836c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008370:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8008374:	ed9f 6ae1 	vldr	s12, [pc, #900]	; 80086fc <predictDt+0xd54>
 8008378:	ee27 6a86 	vmul.f32	s12, s15, s12
 800837c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8008380:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008384:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	edc3 7a02 	vstr	s15, [r3, #8]

    // keep previous time step's state for the update
    tmpSPX = this->S[KC_STATE_PX];
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	65bb      	str	r3, [r7, #88]	; 0x58
    tmpSPY = this->S[KC_STATE_PY];
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	657b      	str	r3, [r7, #84]	; 0x54
    tmpSPZ = this->S[KC_STATE_PZ];
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	653b      	str	r3, [r7, #80]	; 0x50

    // body-velocity update: accelerometers - gyros cross velocity - gravity in body frame
    this->S[KC_STATE_PX] += dt * (acc->x + gyro->z * tmpSPY - gyro->y * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][0]);
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	ed93 7a03 	vldr	s14, [r3, #12]
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	edd3 6a00 	vldr	s13, [r3]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	ed93 6a02 	vldr	s12, [r3, #8]
 80083b6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80083ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 80083be:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	ed93 6a01 	vldr	s12, [r3, #4]
 80083c8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80083cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80083d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80083da:	ed9f 6ac8 	vldr	s12, [pc, #800]	; 80086fc <predictDt+0xd54>
 80083de:	ee67 7a86 	vmul.f32	s15, s15, s12
 80083e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80083e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80083ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	edc3 7a03 	vstr	s15, [r3, #12]
    this->S[KC_STATE_PY] += dt * (acc->y - gyro->z * tmpSPX + gyro->x * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][1]);
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	ed93 7a04 	vldr	s14, [r3, #16]
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	edd3 6a01 	vldr	s13, [r3, #4]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	ed93 6a02 	vldr	s12, [r3, #8]
 800840a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800840e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008412:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	ed93 6a00 	vldr	s12, [r3]
 800841c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008420:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008424:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800842e:	ed9f 6ab3 	vldr	s12, [pc, #716]	; 80086fc <predictDt+0xd54>
 8008432:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008436:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800843a:	edd7 7a02 	vldr	s15, [r7, #8]
 800843e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	edc3 7a04 	vstr	s15, [r3, #16]
    this->S[KC_STATE_PZ] += dt * (acc->z + gyro->y * tmpSPX - gyro->x * tmpSPY - GRAVITY_MAGNITUDE * this->R[2][2]);
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	ed93 7a05 	vldr	s14, [r3, #20]
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	edd3 6a02 	vldr	s13, [r3, #8]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	ed93 6a01 	vldr	s12, [r3, #4]
 800845e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008462:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008466:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	ed93 6a00 	vldr	s12, [r3]
 8008470:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008474:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008478:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008482:	ed9f 6a9e 	vldr	s12, [pc, #632]	; 80086fc <predictDt+0xd54>
 8008486:	ee67 7a86 	vmul.f32	s15, s15, s12
 800848a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800848e:	edd7 7a02 	vldr	s15, [r7, #8]
 8008492:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	edc3 7a05 	vstr	s15, [r3, #20]
  }

  // attitude update (rotate by gyroscope), we do this in quaternions
  // this is the gyroscope angular velocity integrated over the sample period
  float dtwx = dt*gyro->x;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	edd3 7a00 	vldr	s15, [r3]
 80084a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80084aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ae:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float dtwy = dt*gyro->y;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80084b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80084bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084c0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  float dtwz = dt*gyro->z;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80084ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80084ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084d2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  // compute the quaternion values in [w,x,y,z] order
  float angle = arm_sqrt(dtwx*dtwx + dtwy*dtwy + dtwz*dtwz) + EPS;
 80084d6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80084da:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80084de:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80084e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80084e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80084ea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80084ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80084f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084f6:	eeb0 0a67 	vmov.f32	s0, s15
 80084fa:	f7fe fc47 	bl	8006d8c <arm_sqrt>
 80084fe:	eef0 7a40 	vmov.f32	s15, s0
 8008502:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8008708 <predictDt+0xd60>
 8008506:	ee77 7a87 	vadd.f32	s15, s15, s14
 800850a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  float ca = arm_cos_f32(angle/2.0f);
 800850e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008512:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008516:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800851a:	eeb0 0a47 	vmov.f32	s0, s14
 800851e:	f01a fad1 	bl	8022ac4 <arm_cos_f32>
 8008522:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
  float sa = arm_sin_f32(angle/2.0f);
 8008526:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800852a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800852e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008532:	eeb0 0a47 	vmov.f32	s0, s14
 8008536:	f01a fa7f 	bl	8022a38 <arm_sin_f32>
 800853a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  float dq[4] = {ca , sa*dtwx/angle , sa*dtwy/angle , sa*dtwz/angle};
 800853e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008540:	61fb      	str	r3, [r7, #28]
 8008542:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008546:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800854a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800854e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008556:	edc7 7a08 	vstr	s15, [r7, #32]
 800855a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800855e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008562:	ee67 6a27 	vmul.f32	s13, s14, s15
 8008566:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800856a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800856e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8008572:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008576:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800857a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800857e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008586:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  float tmpq1;
  float tmpq2;
  float tmpq3;

  // rotate the quad's attitude by the delta quaternion vector computed above
  tmpq0 = dq[0]*this->q[0] - dq[1]*this->q[1] - dq[2]*this->q[2] - dq[3]*this->q[3];
 800858a:	ed97 7a07 	vldr	s14, [r7, #28]
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008594:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008598:	edd7 6a08 	vldr	s13, [r7, #32]
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80085a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80085aa:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80085b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80085bc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80085c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085ce:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
  tmpq1 = dq[1]*this->q[0] + dq[0]*this->q[1] + dq[3]*this->q[2] - dq[2]*this->q[3];
 80085d2:	ed97 7a08 	vldr	s14, [r7, #32]
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80085dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80085e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80085ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80085f2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80085fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008600:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008604:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800860e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008616:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
  tmpq2 = dq[2]*this->q[0] - dq[3]*this->q[1] + dq[0]*this->q[2] + dq[1]*this->q[3];
 800861a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008628:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008636:	ee37 7a67 	vsub.f32	s14, s14, s15
 800863a:	edd7 6a07 	vldr	s13, [r7, #28]
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008648:	ee37 7a27 	vadd.f32	s14, s14, s15
 800864c:	edd7 6a08 	vldr	s13, [r7, #32]
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800865a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800865e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
  tmpq3 = dq[3]*this->q[0] + dq[2]*this->q[1] - dq[1]*this->q[2] + dq[0]*this->q[3];
 8008662:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800866c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008670:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800867a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800867e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008682:	edd7 6a08 	vldr	s13, [r7, #32]
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800868c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008690:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008694:	edd7 6a07 	vldr	s13, [r7, #28]
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800869e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086a6:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

  if (! quadIsFlying) {
 80086aa:	79fb      	ldrb	r3, [r7, #7]
 80086ac:	f083 0301 	eor.w	r3, r3, #1
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d04e      	beq.n	8008754 <predictDt+0xdac>
    float keep = 1.0f - ROLLPITCH_ZERO_REVERSION;
 80086b6:	4b12      	ldr	r3, [pc, #72]	; (8008700 <predictDt+0xd58>)
 80086b8:	633b      	str	r3, [r7, #48]	; 0x30

    tmpq0 = keep * tmpq0 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[0];
 80086ba:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80086be:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80086c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	edd3 7a6a 	vldr	s15, [r3, #424]	; 0x1a8
 80086cc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8008704 <predictDt+0xd5c>
 80086d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80086d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086d8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    tmpq1 = keep * tmpq1 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[1];
 80086dc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80086e0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80086e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	edd3 7a6b 	vldr	s15, [r3, #428]	; 0x1ac
 80086ee:	eddf 6a05 	vldr	s13, [pc, #20]	; 8008704 <predictDt+0xd5c>
 80086f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80086f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086fa:	e007      	b.n	800870c <predictDt+0xd64>
 80086fc:	411cf5c3 	.word	0x411cf5c3
 8008700:	3f7fbe77 	.word	0x3f7fbe77
 8008704:	3a83126f 	.word	0x3a83126f
 8008708:	358637bd 	.word	0x358637bd
 800870c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    tmpq2 = keep * tmpq2 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[2];
 8008710:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008714:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8008718:	ee27 7a27 	vmul.f32	s14, s14, s15
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 8008722:	ed5f 6a08 	vldr	s13, [pc, #-32]	; 8008704 <predictDt+0xd5c>
 8008726:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800872a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800872e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    tmpq3 = keep * tmpq3 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[3];
 8008732:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008736:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800873a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 8008744:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 8008704 <predictDt+0xd5c>
 8008748:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800874c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008750:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
  }

  // normalize and store the result
  float norm = arm_sqrt(tmpq0*tmpq0 + tmpq1*tmpq1 + tmpq2*tmpq2 + tmpq3*tmpq3) + EPS;
 8008754:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8008758:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800875c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8008760:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008764:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008768:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800876c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008770:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008774:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8008778:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800877c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008780:	eeb0 0a67 	vmov.f32	s0, s15
 8008784:	f7fe fb02 	bl	8006d8c <arm_sqrt>
 8008788:	eef0 7a40 	vmov.f32	s15, s0
 800878c:	ed1f 7a22 	vldr	s14, [pc, #-136]	; 8008708 <predictDt+0xd60>
 8008790:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008794:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  this->q[0] = tmpq0/norm; this->q[1] = tmpq1/norm; this->q[2] = tmpq2/norm; this->q[3] = tmpq3/norm;
 8008798:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 800879c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80087a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 80087aa:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 80087ae:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80087b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 80087bc:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80087c0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80087c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 80087ce:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80087d2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80087d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  assertStateNotNaN(this);
 80087e0:	6978      	ldr	r0, [r7, #20]
 80087e2:	f7fe fb2f 	bl	8006e44 <assertStateNotNaN>

  this->isUpdated = true;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
}
 80087ee:	bf00      	nop
 80087f0:	3788      	adds	r7, #136	; 0x88
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop

080087f8 <kalmanCorePredict>:

void kalmanCorePredict(kalmanCoreData_t* this, Axis3f *acc, Axis3f *gyro, const uint32_t nowMs, bool quadIsFlying) {
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
 8008804:	603b      	str	r3, [r7, #0]
  float dt = (nowMs - this->lastPredictionMs) / 1000.0f;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	ee07 3a90 	vmov	s15, r3
 8008814:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008818:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8008848 <kalmanCorePredict+0x50>
 800881c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008820:	edc7 7a05 	vstr	s15, [r7, #20]
  predictDt(this, acc, gyro, dt, quadIsFlying);
 8008824:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008828:	ed97 0a05 	vldr	s0, [r7, #20]
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	68b9      	ldr	r1, [r7, #8]
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f7ff f8b9 	bl	80079a8 <predictDt>
  this->lastPredictionMs = nowMs;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
}
 800883e:	bf00      	nop
 8008840:	3718      	adds	r7, #24
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	447a0000 	.word	0x447a0000

0800884c <addProcessNoiseDt>:


static void addProcessNoiseDt(kalmanCoreData_t *this, const kalmanCoreParams_t *params, float dt)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b088      	sub	sp, #32
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	ed87 0a01 	vstr	s0, [r7, #4]
  this->P[KC_STATE_X][KC_STATE_X] += powf(params->procNoiseAcc_xy*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	ed93 7a05 	vldr	s14, [r3, #20]
 8008860:	edd7 7a01 	vldr	s15, [r7, #4]
 8008864:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008868:	edd7 7a01 	vldr	s15, [r7, #4]
 800886c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	edd3 6a07 	vldr	s13, [r3, #28]
 8008876:	edd7 7a01 	vldr	s15, [r7, #4]
 800887a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800887e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	edd3 7a08 	vldr	s15, [r3, #32]
 8008888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800888c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8008890:	eeb0 0a67 	vmov.f32	s0, s15
 8008894:	f01c ff8a 	bl	80257ac <powf>
 8008898:	eeb0 7a40 	vmov.f32	s14, s0
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80088a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
  this->P[KC_STATE_Y][KC_STATE_Y] += powf(params->procNoiseAcc_xy*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	ed93 7a05 	vldr	s14, [r3, #20]
 80088b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80088b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80088ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80088be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	edd3 6a07 	vldr	s13, [r3, #28]
 80088c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80088cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80088da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088de:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80088e2:	eeb0 0a67 	vmov.f32	s0, s15
 80088e6:	f01c ff61 	bl	80257ac <powf>
 80088ea:	eeb0 7a40 	vmov.f32	s14, s0
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80088f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
  this->P[KC_STATE_Z][KC_STATE_Z] += powf(params->procNoiseAcc_z*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	ed93 7a06 	vldr	s14, [r3, #24]
 8008904:	edd7 7a01 	vldr	s15, [r7, #4]
 8008908:	ee27 7a27 	vmul.f32	s14, s14, s15
 800890c:	edd7 7a01 	vldr	s15, [r7, #4]
 8008910:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	edd3 6a07 	vldr	s13, [r3, #28]
 800891a:	edd7 7a01 	vldr	s15, [r7, #4]
 800891e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008922:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	edd3 7a08 	vldr	s15, [r3, #32]
 800892c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008930:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8008934:	eeb0 0a67 	vmov.f32	s0, s15
 8008938:	f01c ff38 	bl	80257ac <powf>
 800893c:	eeb0 7a40 	vmov.f32	s14, s0
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8008946:	ee77 7a27 	vadd.f32	s15, s14, s15
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

  this->P[KC_STATE_PX][KC_STATE_PX] += powf(params->procNoiseAcc_xy*dt + params->procNoiseVel, 2); // add process noise on velocity
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	ed93 7a05 	vldr	s14, [r3, #20]
 8008956:	edd7 7a01 	vldr	s15, [r7, #4]
 800895a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	edd3 7a07 	vldr	s15, [r3, #28]
 8008964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008968:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800896c:	eeb0 0a67 	vmov.f32	s0, s15
 8008970:	f01c ff1c 	bl	80257ac <powf>
 8008974:	eeb0 7a40 	vmov.f32	s14, s0
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 800897e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
  this->P[KC_STATE_PY][KC_STATE_PY] += powf(params->procNoiseAcc_xy*dt + params->procNoiseVel, 2); // add process noise on velocity
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	ed93 7a05 	vldr	s14, [r3, #20]
 800898e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008992:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	edd3 7a07 	vldr	s15, [r3, #28]
 800899c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089a0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80089a4:	eeb0 0a67 	vmov.f32	s0, s15
 80089a8:	f01c ff00 	bl	80257ac <powf>
 80089ac:	eeb0 7a40 	vmov.f32	s14, s0
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 80089b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
  this->P[KC_STATE_PZ][KC_STATE_PZ] += powf(params->procNoiseAcc_z*dt + params->procNoiseVel, 2); // add process noise on velocity
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	ed93 7a06 	vldr	s14, [r3, #24]
 80089c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80089ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	edd3 7a07 	vldr	s15, [r3, #28]
 80089d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089d8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80089dc:	eeb0 0a67 	vmov.f32	s0, s15
 80089e0:	f01c fee4 	bl	80257ac <powf>
 80089e4:	eeb0 7a40 	vmov.f32	s14, s0
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
 80089ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120

  this->P[KC_STATE_D0][KC_STATE_D0] += powf(params->measNoiseGyro_rollpitch * dt + params->procNoiseAtt, 2);
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80089fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8008a02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a10:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8008a14:	eeb0 0a67 	vmov.f32	s0, s15
 8008a18:	f01c fec8 	bl	80257ac <powf>
 8008a1c:	eeb0 7a40 	vmov.f32	s14, s0
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8008a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
  this->P[KC_STATE_D1][KC_STATE_D1] += powf(params->measNoiseGyro_rollpitch * dt + params->procNoiseAtt, 2);
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8008a36:	edd7 7a01 	vldr	s15, [r7, #4]
 8008a3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a48:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8008a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8008a50:	f01c feac 	bl	80257ac <powf>
 8008a54:	eeb0 7a40 	vmov.f32	s14, s0
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	edd3 7a5c 	vldr	s15, [r3, #368]	; 0x170
 8008a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	edc3 7a5c 	vstr	s15, [r3, #368]	; 0x170
  this->P[KC_STATE_D2][KC_STATE_D2] += powf(params->measNoiseGyro_yaw * dt + params->procNoiseAtt, 2);
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8008a6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008a72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a80:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8008a84:	eeb0 0a67 	vmov.f32	s0, s15
 8008a88:	f01c fe90 	bl	80257ac <powf>
 8008a8c:	eeb0 7a40 	vmov.f32	s14, s0
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	edd3 7a66 	vldr	s15, [r3, #408]	; 0x198
 8008a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	edc3 7a66 	vstr	s15, [r3, #408]	; 0x198

  for (int i=0; i<KC_STATE_DIM; i++) {
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	61fb      	str	r3, [r7, #28]
 8008aa4:	e0b7      	b.n	8008c16 <addProcessNoiseDt+0x3ca>
    for (int j=i; j<KC_STATE_DIM; j++) {
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	61bb      	str	r3, [r7, #24]
 8008aaa:	e0ad      	b.n	8008c08 <addProcessNoiseDt+0x3bc>
      float p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 8008aac:	68f9      	ldr	r1, [r7, #12]
 8008aae:	69fa      	ldr	r2, [r7, #28]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	00db      	lsls	r3, r3, #3
 8008ab4:	4413      	add	r3, r2
 8008ab6:	69ba      	ldr	r2, [r7, #24]
 8008ab8:	4413      	add	r3, r2
 8008aba:	3316      	adds	r3, #22
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	440b      	add	r3, r1
 8008ac0:	edd3 7a00 	vldr	s15, [r3]
 8008ac4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008ac8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008acc:	68f9      	ldr	r1, [r7, #12]
 8008ace:	69ba      	ldr	r2, [r7, #24]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	4413      	add	r3, r2
 8008ad6:	69fa      	ldr	r2, [r7, #28]
 8008ad8:	4413      	add	r3, r2
 8008ada:	3316      	adds	r3, #22
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	440b      	add	r3, r1
 8008ae0:	edd3 7a00 	vldr	s15, [r3]
 8008ae4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008ae8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008af0:	edc7 7a05 	vstr	s15, [r7, #20]
      if (isnan(p) || p > MAX_COVARIANCE) {
 8008af4:	ed97 7a05 	vldr	s14, [r7, #20]
 8008af8:	edd7 7a05 	vldr	s15, [r7, #20]
 8008afc:	eeb4 7a67 	vcmp.f32	s14, s15
 8008b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b04:	d608      	bvs.n	8008b18 <addProcessNoiseDt+0x2cc>
 8008b06:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b0a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8008c2c <addProcessNoiseDt+0x3e0>
 8008b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b16:	dd22      	ble.n	8008b5e <addProcessNoiseDt+0x312>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 8008b18:	68f9      	ldr	r1, [r7, #12]
 8008b1a:	69ba      	ldr	r2, [r7, #24]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	00db      	lsls	r3, r3, #3
 8008b20:	4413      	add	r3, r2
 8008b22:	69fa      	ldr	r2, [r7, #28]
 8008b24:	4413      	add	r3, r2
 8008b26:	3316      	adds	r3, #22
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	440b      	add	r3, r1
 8008b2c:	4a40      	ldr	r2, [pc, #256]	; (8008c30 <addProcessNoiseDt+0x3e4>)
 8008b2e:	601a      	str	r2, [r3, #0]
 8008b30:	68f9      	ldr	r1, [r7, #12]
 8008b32:	69ba      	ldr	r2, [r7, #24]
 8008b34:	4613      	mov	r3, r2
 8008b36:	00db      	lsls	r3, r3, #3
 8008b38:	4413      	add	r3, r2
 8008b3a:	69fa      	ldr	r2, [r7, #28]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	3316      	adds	r3, #22
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	440b      	add	r3, r1
 8008b44:	6819      	ldr	r1, [r3, #0]
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	69fa      	ldr	r2, [r7, #28]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	00db      	lsls	r3, r3, #3
 8008b4e:	4413      	add	r3, r2
 8008b50:	69ba      	ldr	r2, [r7, #24]
 8008b52:	4413      	add	r3, r2
 8008b54:	3316      	adds	r3, #22
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4403      	add	r3, r0
 8008b5a:	6019      	str	r1, [r3, #0]
 8008b5c:	e051      	b.n	8008c02 <addProcessNoiseDt+0x3b6>
      } else if ( i==j && p < MIN_COVARIANCE ) {
 8008b5e:	69fa      	ldr	r2, [r7, #28]
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d12b      	bne.n	8008bbe <addProcessNoiseDt+0x372>
 8008b66:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b6a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008c34 <addProcessNoiseDt+0x3e8>
 8008b6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b76:	d522      	bpl.n	8008bbe <addProcessNoiseDt+0x372>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 8008b78:	68f9      	ldr	r1, [r7, #12]
 8008b7a:	69ba      	ldr	r2, [r7, #24]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	00db      	lsls	r3, r3, #3
 8008b80:	4413      	add	r3, r2
 8008b82:	69fa      	ldr	r2, [r7, #28]
 8008b84:	4413      	add	r3, r2
 8008b86:	3316      	adds	r3, #22
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	440b      	add	r3, r1
 8008b8c:	4a2a      	ldr	r2, [pc, #168]	; (8008c38 <addProcessNoiseDt+0x3ec>)
 8008b8e:	601a      	str	r2, [r3, #0]
 8008b90:	68f9      	ldr	r1, [r7, #12]
 8008b92:	69ba      	ldr	r2, [r7, #24]
 8008b94:	4613      	mov	r3, r2
 8008b96:	00db      	lsls	r3, r3, #3
 8008b98:	4413      	add	r3, r2
 8008b9a:	69fa      	ldr	r2, [r7, #28]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	3316      	adds	r3, #22
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	440b      	add	r3, r1
 8008ba4:	6819      	ldr	r1, [r3, #0]
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	69fa      	ldr	r2, [r7, #28]
 8008baa:	4613      	mov	r3, r2
 8008bac:	00db      	lsls	r3, r3, #3
 8008bae:	4413      	add	r3, r2
 8008bb0:	69ba      	ldr	r2, [r7, #24]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	3316      	adds	r3, #22
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4403      	add	r3, r0
 8008bba:	6019      	str	r1, [r3, #0]
 8008bbc:	e021      	b.n	8008c02 <addProcessNoiseDt+0x3b6>
      } else {
        this->P[i][j] = this->P[j][i] = p;
 8008bbe:	68f9      	ldr	r1, [r7, #12]
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	00db      	lsls	r3, r3, #3
 8008bc6:	4413      	add	r3, r2
 8008bc8:	69fa      	ldr	r2, [r7, #28]
 8008bca:	4413      	add	r3, r2
 8008bcc:	3316      	adds	r3, #22
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	440b      	add	r3, r1
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	601a      	str	r2, [r3, #0]
 8008bd6:	68f9      	ldr	r1, [r7, #12]
 8008bd8:	69ba      	ldr	r2, [r7, #24]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	00db      	lsls	r3, r3, #3
 8008bde:	4413      	add	r3, r2
 8008be0:	69fa      	ldr	r2, [r7, #28]
 8008be2:	4413      	add	r3, r2
 8008be4:	3316      	adds	r3, #22
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	440b      	add	r3, r1
 8008bea:	6819      	ldr	r1, [r3, #0]
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	69fa      	ldr	r2, [r7, #28]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	4413      	add	r3, r2
 8008bf6:	69ba      	ldr	r2, [r7, #24]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	3316      	adds	r3, #22
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4403      	add	r3, r0
 8008c00:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	3301      	adds	r3, #1
 8008c06:	61bb      	str	r3, [r7, #24]
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	2b08      	cmp	r3, #8
 8008c0c:	f77f af4e 	ble.w	8008aac <addProcessNoiseDt+0x260>
  for (int i=0; i<KC_STATE_DIM; i++) {
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	3301      	adds	r3, #1
 8008c14:	61fb      	str	r3, [r7, #28]
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	2b08      	cmp	r3, #8
 8008c1a:	f77f af44 	ble.w	8008aa6 <addProcessNoiseDt+0x25a>
      }
    }
  }

  assertStateNotNaN(this);
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f7fe f910 	bl	8006e44 <assertStateNotNaN>
}
 8008c24:	bf00      	nop
 8008c26:	3720      	adds	r7, #32
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	42c80000 	.word	0x42c80000
 8008c30:	42c80000 	.word	0x42c80000
 8008c34:	358637bd 	.word	0x358637bd
 8008c38:	358637bd 	.word	0x358637bd

08008c3c <kalmanCoreAddProcessNoise>:

void kalmanCoreAddProcessNoise(kalmanCoreData_t *this, const kalmanCoreParams_t *params, const uint32_t nowMs) {
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
  float dt = (nowMs - this->lastProcessNoiseUpdateMs) / 1000.0f;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	ee07 3a90 	vmov	s15, r3
 8008c56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c5a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8008c94 <kalmanCoreAddProcessNoise+0x58>
 8008c5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c62:	edc7 7a05 	vstr	s15, [r7, #20]
  if (dt > 0.0f) {
 8008c66:	edd7 7a05 	vldr	s15, [r7, #20]
 8008c6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c72:	dc00      	bgt.n	8008c76 <kalmanCoreAddProcessNoise+0x3a>
    addProcessNoiseDt(this, params, dt);
    this->lastProcessNoiseUpdateMs = nowMs;
  }
}
 8008c74:	e009      	b.n	8008c8a <kalmanCoreAddProcessNoise+0x4e>
    addProcessNoiseDt(this, params, dt);
 8008c76:	ed97 0a05 	vldr	s0, [r7, #20]
 8008c7a:	68b9      	ldr	r1, [r7, #8]
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f7ff fde5 	bl	800884c <addProcessNoiseDt>
    this->lastProcessNoiseUpdateMs = nowMs;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
}
 8008c8a:	bf00      	nop
 8008c8c:	3718      	adds	r7, #24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	447a0000 	.word	0x447a0000

08008c98 <kalmanCoreFinalize>:

bool kalmanCoreFinalize(kalmanCoreData_t* this)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b098      	sub	sp, #96	; 0x60
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  // Only finalize if data is updated
  if (! this->isUpdated) {
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8008ca6:	f083 0301 	eor.w	r3, r3, #1
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d002      	beq.n	8008cb6 <kalmanCoreFinalize+0x1e>
    return false;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f000 bc6d 	b.w	8009590 <kalmanCoreFinalize+0x8f8>

  NO_DMA_CCM_SAFE_ZERO_INIT static float tmpNN2d[KC_STATE_DIM * KC_STATE_DIM];
  static arm_matrix_instance_f32 tmpNN2m = {KC_STATE_DIM, KC_STATE_DIM, tmpNN2d};

  // Incorporate the attitude error (Kalman filter state) with the attitude
  float v0 = this->S[KC_STATE_D0];
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	657b      	str	r3, [r7, #84]	; 0x54
  float v1 = this->S[KC_STATE_D1];
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	69db      	ldr	r3, [r3, #28]
 8008cc0:	653b      	str	r3, [r7, #80]	; 0x50
  float v2 = this->S[KC_STATE_D2];
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	64fb      	str	r3, [r7, #76]	; 0x4c

  // Move attitude error into attitude if any of the angle errors are large enough
  if ((fabsf(v0) > 0.1e-3f || fabsf(v1) > 0.1e-3f || fabsf(v2) > 0.1e-3f) && (fabsf(v0) < 10 && fabsf(v1) < 10 && fabsf(v2) < 10))
 8008cc8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008ccc:	eef0 7ae7 	vabs.f32	s15, s15
 8008cd0:	ed9f 7ae9 	vldr	s14, [pc, #932]	; 8009078 <kalmanCoreFinalize+0x3e0>
 8008cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cdc:	dc16      	bgt.n	8008d0c <kalmanCoreFinalize+0x74>
 8008cde:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008ce2:	eef0 7ae7 	vabs.f32	s15, s15
 8008ce6:	ed9f 7ae4 	vldr	s14, [pc, #912]	; 8009078 <kalmanCoreFinalize+0x3e0>
 8008cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cf2:	dc0b      	bgt.n	8008d0c <kalmanCoreFinalize+0x74>
 8008cf4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8008cf8:	eef0 7ae7 	vabs.f32	s15, s15
 8008cfc:	ed9f 7ade 	vldr	s14, [pc, #888]	; 8009078 <kalmanCoreFinalize+0x3e0>
 8008d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d08:	f340 825e 	ble.w	80091c8 <kalmanCoreFinalize+0x530>
 8008d0c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008d10:	eef0 7ae7 	vabs.f32	s15, s15
 8008d14:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008d18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d20:	f140 8252 	bpl.w	80091c8 <kalmanCoreFinalize+0x530>
 8008d24:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008d28:	eef0 7ae7 	vabs.f32	s15, s15
 8008d2c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d38:	f140 8246 	bpl.w	80091c8 <kalmanCoreFinalize+0x530>
 8008d3c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8008d40:	eef0 7ae7 	vabs.f32	s15, s15
 8008d44:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d50:	f140 823a 	bpl.w	80091c8 <kalmanCoreFinalize+0x530>
  {
    float angle = arm_sqrt(v0*v0 + v1*v1 + v2*v2) + EPS;
 8008d54:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008d58:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008d5c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008d60:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008d64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008d68:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8008d6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d74:	eeb0 0a67 	vmov.f32	s0, s15
 8008d78:	f7fe f808 	bl	8006d8c <arm_sqrt>
 8008d7c:	eef0 7a40 	vmov.f32	s15, s0
 8008d80:	ed9f 7abe 	vldr	s14, [pc, #760]	; 800907c <kalmanCoreFinalize+0x3e4>
 8008d84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d88:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    float ca = arm_cos_f32(angle / 2.0f);
 8008d8c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8008d90:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008d94:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008d98:	eeb0 0a47 	vmov.f32	s0, s14
 8008d9c:	f019 fe92 	bl	8022ac4 <arm_cos_f32>
 8008da0:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
    float sa = arm_sin_f32(angle / 2.0f);
 8008da4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8008da8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008dac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008db0:	eeb0 0a47 	vmov.f32	s0, s14
 8008db4:	f019 fe40 	bl	8022a38 <arm_sin_f32>
 8008db8:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
    float dq[4] = {ca, sa * v0 / angle, sa * v1 / angle, sa * v2 / angle};
 8008dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dbe:	60fb      	str	r3, [r7, #12]
 8008dc0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008dc4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008dc8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8008dcc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dd4:	edc7 7a04 	vstr	s15, [r7, #16]
 8008dd8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008ddc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008de0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8008de4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dec:	edc7 7a05 	vstr	s15, [r7, #20]
 8008df0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008df4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8008df8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8008dfc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e04:	edc7 7a06 	vstr	s15, [r7, #24]

    // rotate the quad's attitude by the delta quaternion vector computed above
    float tmpq0 = dq[0] * this->q[0] - dq[1] * this->q[1] - dq[2] * this->q[2] - dq[3] * this->q[3];
 8008e08:	ed97 7a03 	vldr	s14, [r7, #12]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008e12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e16:	edd7 6a04 	vldr	s13, [r7, #16]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008e20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008e28:	edd7 6a05 	vldr	s13, [r7, #20]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008e32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008e3a:	edd7 6a06 	vldr	s13, [r7, #24]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e4c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    float tmpq1 = dq[1] * this->q[0] + dq[0] * this->q[1] + dq[3] * this->q[2] - dq[2] * this->q[3];
 8008e50:	ed97 7a04 	vldr	s14, [r7, #16]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008e5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e5e:	edd7 6a03 	vldr	s13, [r7, #12]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008e68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e70:	edd7 6a06 	vldr	s13, [r7, #24]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e82:	edd7 6a05 	vldr	s13, [r7, #20]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008e8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e94:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    float tmpq2 = dq[2] * this->q[0] - dq[3] * this->q[1] + dq[0] * this->q[2] + dq[1] * this->q[3];
 8008e98:	ed97 7a05 	vldr	s14, [r7, #20]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008ea2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ea6:	edd7 6a06 	vldr	s13, [r7, #24]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008eb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008eb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008eb8:	edd7 6a03 	vldr	s13, [r7, #12]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008ec2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ec6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008eca:	edd7 6a04 	vldr	s13, [r7, #16]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008ed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008edc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float tmpq3 = dq[3] * this->q[0] + dq[2] * this->q[1] - dq[1] * this->q[2] + dq[0] * this->q[3];
 8008ee0:	ed97 7a06 	vldr	s14, [r7, #24]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008eea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008eee:	edd7 6a05 	vldr	s13, [r7, #20]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008ef8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008efc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008f00:	edd7 6a04 	vldr	s13, [r7, #16]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008f12:	edd7 6a03 	vldr	s13, [r7, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008f1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f24:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // normalize and store the result
    float norm = arm_sqrt(tmpq0 * tmpq0 + tmpq1 * tmpq1 + tmpq2 * tmpq2 + tmpq3 * tmpq3) + EPS;
 8008f28:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008f2c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008f30:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008f34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008f3c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008f40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008f48:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008f4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f54:	eeb0 0a67 	vmov.f32	s0, s15
 8008f58:	f7fd ff18 	bl	8006d8c <arm_sqrt>
 8008f5c:	eef0 7a40 	vmov.f32	s15, s0
 8008f60:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800907c <kalmanCoreFinalize+0x3e4>
 8008f64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f68:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    this->q[0] = tmpq0 / norm;
 8008f6c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8008f70:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    this->q[1] = tmpq1 / norm;
 8008f7e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8008f82:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    this->q[2] = tmpq2 / norm;
 8008f90:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8008f94:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    this->q[3] = tmpq3 / norm;
 8008fa2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008fa6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
     *
     * As derived in "Covariance Correction Step for Kalman Filtering with an Attitude"
     * http://arc.aiaa.org/doi/abs/10.2514/1.G000848
     */

    float d0 = v0/2; // the attitude error vector (v0,v1,v2) is small,
 8008fb4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008fb8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008fbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008fc0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float d1 = v1/2; // so we use a first order approximation to d0 = tan(|v0|/2)*v0/|v0|
 8008fc4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008fc8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008fcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008fd0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float d2 = v2/2;
 8008fd4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008fd8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008fdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008fe0:	edc7 7a08 	vstr	s15, [r7, #32]

    A[KC_STATE_X][KC_STATE_X] = 1;
 8008fe4:	4b26      	ldr	r3, [pc, #152]	; (8009080 <kalmanCoreFinalize+0x3e8>)
 8008fe6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008fea:	601a      	str	r2, [r3, #0]
    A[KC_STATE_Y][KC_STATE_Y] = 1;
 8008fec:	4b24      	ldr	r3, [pc, #144]	; (8009080 <kalmanCoreFinalize+0x3e8>)
 8008fee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008ff2:	629a      	str	r2, [r3, #40]	; 0x28
    A[KC_STATE_Z][KC_STATE_Z] = 1;
 8008ff4:	4b22      	ldr	r3, [pc, #136]	; (8009080 <kalmanCoreFinalize+0x3e8>)
 8008ff6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008ffa:	651a      	str	r2, [r3, #80]	; 0x50

    A[KC_STATE_PX][KC_STATE_PX] = 1;
 8008ffc:	4b20      	ldr	r3, [pc, #128]	; (8009080 <kalmanCoreFinalize+0x3e8>)
 8008ffe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009002:	679a      	str	r2, [r3, #120]	; 0x78
    A[KC_STATE_PY][KC_STATE_PY] = 1;
 8009004:	4b1e      	ldr	r3, [pc, #120]	; (8009080 <kalmanCoreFinalize+0x3e8>)
 8009006:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800900a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    A[KC_STATE_PZ][KC_STATE_PZ] = 1;
 800900e:	4b1c      	ldr	r3, [pc, #112]	; (8009080 <kalmanCoreFinalize+0x3e8>)
 8009010:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009014:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    A[KC_STATE_D0][KC_STATE_D0] =  1 - d1*d1/2 - d2*d2/2;
 8009018:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800901c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009020:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009024:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009028:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800902c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009030:	edd7 7a08 	vldr	s15, [r7, #32]
 8009034:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8009038:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800903c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009044:	4b0e      	ldr	r3, [pc, #56]	; (8009080 <kalmanCoreFinalize+0x3e8>)
 8009046:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    A[KC_STATE_D0][KC_STATE_D1] =  d2 + d0*d1/2;
 800904a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800904e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009056:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800905a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800905e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009066:	4b06      	ldr	r3, [pc, #24]	; (8009080 <kalmanCoreFinalize+0x3e8>)
 8009068:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
    A[KC_STATE_D0][KC_STATE_D2] = -d1 + d0*d2/2;
 800906c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009070:	edd7 7a08 	vldr	s15, [r7, #32]
 8009074:	e006      	b.n	8009084 <kalmanCoreFinalize+0x3ec>
 8009076:	bf00      	nop
 8009078:	38d1b717 	.word	0x38d1b717
 800907c:	358637bd 	.word	0x358637bd
 8009080:	2000475c 	.word	0x2000475c
 8009084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009088:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800908c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009090:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009098:	4b46      	ldr	r3, [pc, #280]	; (80091b4 <kalmanCoreFinalize+0x51c>)
 800909a:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8

    A[KC_STATE_D1][KC_STATE_D0] = -d2 + d0*d1/2;
 800909e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80090a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80090a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090aa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80090ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80090b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80090b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090ba:	4b3e      	ldr	r3, [pc, #248]	; (80091b4 <kalmanCoreFinalize+0x51c>)
 80090bc:	edc3 7a45 	vstr	s15, [r3, #276]	; 0x114
    A[KC_STATE_D1][KC_STATE_D1] =  1 - d0*d0/2 - d2*d2/2;
 80090c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80090c4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80090c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80090cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80090d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80090d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80090dc:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80090e0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80090e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80090e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090ec:	4b31      	ldr	r3, [pc, #196]	; (80091b4 <kalmanCoreFinalize+0x51c>)
 80090ee:	edc3 7a46 	vstr	s15, [r3, #280]	; 0x118
    A[KC_STATE_D1][KC_STATE_D2] =  d0 + d1*d2/2;
 80090f2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80090f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80090fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090fe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009102:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009106:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800910a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800910e:	4b29      	ldr	r3, [pc, #164]	; (80091b4 <kalmanCoreFinalize+0x51c>)
 8009110:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c

    A[KC_STATE_D2][KC_STATE_D0] =  d1 + d0*d2/2;
 8009114:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009118:	edd7 7a08 	vldr	s15, [r7, #32]
 800911c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009120:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009124:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009128:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800912c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009130:	4b20      	ldr	r3, [pc, #128]	; (80091b4 <kalmanCoreFinalize+0x51c>)
 8009132:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
    A[KC_STATE_D2][KC_STATE_D1] = -d0 + d1*d2/2;
 8009136:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800913a:	edd7 7a08 	vldr	s15, [r7, #32]
 800913e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009142:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009146:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800914a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800914e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009152:	4b18      	ldr	r3, [pc, #96]	; (80091b4 <kalmanCoreFinalize+0x51c>)
 8009154:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
    A[KC_STATE_D2][KC_STATE_D2] = 1 - d0*d0/2 - d1*d1/2;
 8009158:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800915c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009160:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009164:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009168:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800916c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009170:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009174:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8009178:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800917c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009184:	4b0b      	ldr	r3, [pc, #44]	; (80091b4 <kalmanCoreFinalize+0x51c>)
 8009186:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140

    mat_trans(&Am, &tmpNN1m); // A'
 800918a:	490b      	ldr	r1, [pc, #44]	; (80091b8 <kalmanCoreFinalize+0x520>)
 800918c:	480b      	ldr	r0, [pc, #44]	; (80091bc <kalmanCoreFinalize+0x524>)
 800918e:	f7fd fdb3 	bl	8006cf8 <mat_trans>
    mat_mult(&Am, &this->Pm, &tmpNN2m); // AP
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8009198:	4a09      	ldr	r2, [pc, #36]	; (80091c0 <kalmanCoreFinalize+0x528>)
 800919a:	4619      	mov	r1, r3
 800919c:	4807      	ldr	r0, [pc, #28]	; (80091bc <kalmanCoreFinalize+0x524>)
 800919e:	f7fd fdcd 	bl	8006d3c <mat_mult>
    mat_mult(&tmpNN2m, &tmpNN1m, &this->Pm); //APA'
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80091a8:	461a      	mov	r2, r3
 80091aa:	4903      	ldr	r1, [pc, #12]	; (80091b8 <kalmanCoreFinalize+0x520>)
 80091ac:	4804      	ldr	r0, [pc, #16]	; (80091c0 <kalmanCoreFinalize+0x528>)
 80091ae:	f7fd fdc5 	bl	8006d3c <mat_mult>
 80091b2:	e009      	b.n	80091c8 <kalmanCoreFinalize+0x530>
 80091b4:	2000475c 	.word	0x2000475c
 80091b8:	200008f0 	.word	0x200008f0
 80091bc:	200008e8 	.word	0x200008e8
 80091c0:	200008f8 	.word	0x200008f8
 80091c4:	42c80000 	.word	0x42c80000
  }

  // convert the new attitude to a rotation matrix, such that we can rotate body-frame velocity and acc
  this->R[0][0] = this->q[0] * this->q[0] + this->q[1] * this->q[1] - this->q[2] * this->q[2] - this->q[3] * this->q[3];
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80091d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80091e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80091e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80091f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80091fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800920c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  this->R[0][1] = 2 * this->q[1] * this->q[2] - 2 * this->q[0] * this->q[3];
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8009220:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800922a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009234:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800923e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009242:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  this->R[0][2] = 2 * this->q[1] * this->q[3] + 2 * this->q[0] * this->q[2];
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8009252:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800925c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009266:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

  this->R[1][0] = 2 * this->q[1] * this->q[2] + 2 * this->q[0] * this->q[3];
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8009284:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800928e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009298:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80092a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  this->R[1][1] = this->q[0] * this->q[0] - this->q[1] * this->q[1] + this->q[2] * this->q[2] - this->q[3] * this->q[3];
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80092bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80092cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80092e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80092f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
  this->R[1][2] = 2 * this->q[2] * this->q[3] - 2 * this->q[0] * this->q[1];
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009308:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009312:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800931c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8009326:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800932a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

  this->R[2][0] = 2 * this->q[1] * this->q[3] - 2 * this->q[0] * this->q[2];
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800933a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009344:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800934e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800935c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
  this->R[2][1] = 2 * this->q[2] * this->q[3] + 2 * this->q[0] * this->q[1];
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800936c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009376:	ee27 7a27 	vmul.f32	s14, s14, s15
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009380:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800938a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800938e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
  this->R[2][2] = this->q[0] * this->q[0] - this->q[1] * this->q[1] - this->q[2] * this->q[2] + this->q[3] * this->q[3];
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80093a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80093b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80093b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80093c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80093cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80093dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80093e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  // reset the attitude error
  this->S[KC_STATE_D0] = 0;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f04f 0200 	mov.w	r2, #0
 80093f0:	619a      	str	r2, [r3, #24]
  this->S[KC_STATE_D1] = 0;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f04f 0200 	mov.w	r2, #0
 80093f8:	61da      	str	r2, [r3, #28]
  this->S[KC_STATE_D2] = 0;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f04f 0200 	mov.w	r2, #0
 8009400:	621a      	str	r2, [r3, #32]

  // enforce symmetry of the covariance matrix, and ensure the values stay bounded
  for (int i=0; i<KC_STATE_DIM; i++) {
 8009402:	2300      	movs	r3, #0
 8009404:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009406:	e0b7      	b.n	8009578 <kalmanCoreFinalize+0x8e0>
    for (int j=i; j<KC_STATE_DIM; j++) {
 8009408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800940a:	65bb      	str	r3, [r7, #88]	; 0x58
 800940c:	e0ad      	b.n	800956a <kalmanCoreFinalize+0x8d2>
      float p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 800940e:	6879      	ldr	r1, [r7, #4]
 8009410:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009412:	4613      	mov	r3, r2
 8009414:	00db      	lsls	r3, r3, #3
 8009416:	4413      	add	r3, r2
 8009418:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800941a:	4413      	add	r3, r2
 800941c:	3316      	adds	r3, #22
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	440b      	add	r3, r1
 8009422:	edd3 7a00 	vldr	s15, [r3]
 8009426:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800942a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800942e:	6879      	ldr	r1, [r7, #4]
 8009430:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009432:	4613      	mov	r3, r2
 8009434:	00db      	lsls	r3, r3, #3
 8009436:	4413      	add	r3, r2
 8009438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800943a:	4413      	add	r3, r2
 800943c:	3316      	adds	r3, #22
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	440b      	add	r3, r1
 8009442:	edd3 7a00 	vldr	s15, [r3]
 8009446:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800944a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800944e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009452:	edc7 7a07 	vstr	s15, [r7, #28]
      if (isnan(p) || p > MAX_COVARIANCE) {
 8009456:	ed97 7a07 	vldr	s14, [r7, #28]
 800945a:	edd7 7a07 	vldr	s15, [r7, #28]
 800945e:	eeb4 7a67 	vcmp.f32	s14, s15
 8009462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009466:	d608      	bvs.n	800947a <kalmanCoreFinalize+0x7e2>
 8009468:	edd7 7a07 	vldr	s15, [r7, #28]
 800946c:	ed1f 7aab 	vldr	s14, [pc, #-684]	; 80091c4 <kalmanCoreFinalize+0x52c>
 8009470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009478:	dd22      	ble.n	80094c0 <kalmanCoreFinalize+0x828>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800947e:	4613      	mov	r3, r2
 8009480:	00db      	lsls	r3, r3, #3
 8009482:	4413      	add	r3, r2
 8009484:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009486:	4413      	add	r3, r2
 8009488:	3316      	adds	r3, #22
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	440b      	add	r3, r1
 800948e:	4a42      	ldr	r2, [pc, #264]	; (8009598 <kalmanCoreFinalize+0x900>)
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	6879      	ldr	r1, [r7, #4]
 8009494:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009496:	4613      	mov	r3, r2
 8009498:	00db      	lsls	r3, r3, #3
 800949a:	4413      	add	r3, r2
 800949c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800949e:	4413      	add	r3, r2
 80094a0:	3316      	adds	r3, #22
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	440b      	add	r3, r1
 80094a6:	6819      	ldr	r1, [r3, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80094ac:	4613      	mov	r3, r2
 80094ae:	00db      	lsls	r3, r3, #3
 80094b0:	4413      	add	r3, r2
 80094b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094b4:	4413      	add	r3, r2
 80094b6:	3316      	adds	r3, #22
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4403      	add	r3, r0
 80094bc:	6019      	str	r1, [r3, #0]
 80094be:	e051      	b.n	8009564 <kalmanCoreFinalize+0x8cc>
      } else if ( i==j && p < MIN_COVARIANCE ) {
 80094c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80094c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d12b      	bne.n	8009520 <kalmanCoreFinalize+0x888>
 80094c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80094cc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800959c <kalmanCoreFinalize+0x904>
 80094d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094d8:	d522      	bpl.n	8009520 <kalmanCoreFinalize+0x888>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 80094da:	6879      	ldr	r1, [r7, #4]
 80094dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094de:	4613      	mov	r3, r2
 80094e0:	00db      	lsls	r3, r3, #3
 80094e2:	4413      	add	r3, r2
 80094e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80094e6:	4413      	add	r3, r2
 80094e8:	3316      	adds	r3, #22
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	440b      	add	r3, r1
 80094ee:	4a2c      	ldr	r2, [pc, #176]	; (80095a0 <kalmanCoreFinalize+0x908>)
 80094f0:	601a      	str	r2, [r3, #0]
 80094f2:	6879      	ldr	r1, [r7, #4]
 80094f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094f6:	4613      	mov	r3, r2
 80094f8:	00db      	lsls	r3, r3, #3
 80094fa:	4413      	add	r3, r2
 80094fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80094fe:	4413      	add	r3, r2
 8009500:	3316      	adds	r3, #22
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	440b      	add	r3, r1
 8009506:	6819      	ldr	r1, [r3, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800950c:	4613      	mov	r3, r2
 800950e:	00db      	lsls	r3, r3, #3
 8009510:	4413      	add	r3, r2
 8009512:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009514:	4413      	add	r3, r2
 8009516:	3316      	adds	r3, #22
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4403      	add	r3, r0
 800951c:	6019      	str	r1, [r3, #0]
 800951e:	e021      	b.n	8009564 <kalmanCoreFinalize+0x8cc>
      } else {
        this->P[i][j] = this->P[j][i] = p;
 8009520:	6879      	ldr	r1, [r7, #4]
 8009522:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009524:	4613      	mov	r3, r2
 8009526:	00db      	lsls	r3, r3, #3
 8009528:	4413      	add	r3, r2
 800952a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800952c:	4413      	add	r3, r2
 800952e:	3316      	adds	r3, #22
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	440b      	add	r3, r1
 8009534:	69fa      	ldr	r2, [r7, #28]
 8009536:	601a      	str	r2, [r3, #0]
 8009538:	6879      	ldr	r1, [r7, #4]
 800953a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800953c:	4613      	mov	r3, r2
 800953e:	00db      	lsls	r3, r3, #3
 8009540:	4413      	add	r3, r2
 8009542:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009544:	4413      	add	r3, r2
 8009546:	3316      	adds	r3, #22
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	440b      	add	r3, r1
 800954c:	6819      	ldr	r1, [r3, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009552:	4613      	mov	r3, r2
 8009554:	00db      	lsls	r3, r3, #3
 8009556:	4413      	add	r3, r2
 8009558:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800955a:	4413      	add	r3, r2
 800955c:	3316      	adds	r3, #22
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4403      	add	r3, r0
 8009562:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 8009564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009566:	3301      	adds	r3, #1
 8009568:	65bb      	str	r3, [r7, #88]	; 0x58
 800956a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800956c:	2b08      	cmp	r3, #8
 800956e:	f77f af4e 	ble.w	800940e <kalmanCoreFinalize+0x776>
  for (int i=0; i<KC_STATE_DIM; i++) {
 8009572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009574:	3301      	adds	r3, #1
 8009576:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800957a:	2b08      	cmp	r3, #8
 800957c:	f77f af44 	ble.w	8009408 <kalmanCoreFinalize+0x770>
      }
    }
  }

  assertStateNotNaN(this);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7fd fc5f 	bl	8006e44 <assertStateNotNaN>

  this->isUpdated = false;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
  return true;
 800958e:	2301      	movs	r3, #1
}
 8009590:	4618      	mov	r0, r3
 8009592:	3760      	adds	r7, #96	; 0x60
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	42c80000 	.word	0x42c80000
 800959c:	358637bd 	.word	0x358637bd
 80095a0:	358637bd 	.word	0x358637bd

080095a4 <kalmanCoreExternalizeState>:

void kalmanCoreExternalizeState(const kalmanCoreData_t* this, state_t *state, const Axis3f *acc)
{
 80095a4:	b590      	push	{r4, r7, lr}
 80095a6:	b09d      	sub	sp, #116	; 0x74
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
  // position state is already in world frame
  state->position = (point_t){
      .x = this->S[KC_STATE_X],
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681c      	ldr	r4, [r3, #0]
      .y = this->S[KC_STATE_Y],
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6858      	ldr	r0, [r3, #4]
      .z = this->S[KC_STATE_Z]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6899      	ldr	r1, [r3, #8]
  state->position = (point_t){
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	3320      	adds	r3, #32
 80095c0:	2200      	movs	r2, #0
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	605a      	str	r2, [r3, #4]
 80095c6:	609a      	str	r2, [r3, #8]
 80095c8:	60da      	str	r2, [r3, #12]
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	625c      	str	r4, [r3, #36]	; 0x24
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	6298      	str	r0, [r3, #40]	; 0x28
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	62d9      	str	r1, [r3, #44]	; 0x2c
  };

  // velocity is in body frame and needs to be rotated to world frame
  state->velocity = (velocity_t){
      .x = this->R[0][0]*this->S[KC_STATE_PX] + this->R[0][1]*this->S[KC_STATE_PY] + this->R[0][2]*this->S[KC_STATE_PZ],
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	edd3 7a03 	vldr	s15, [r3, #12]
 80095e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80095f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80095f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	edd3 7a05 	vldr	s15, [r3, #20]
 8009606:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800960a:	ee77 6a27 	vadd.f32	s13, s14, s15
      .y = this->R[1][0]*this->S[KC_STATE_PX] + this->R[1][1]*this->S[KC_STATE_PY] + this->R[1][2]*this->S[KC_STATE_PZ],
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	edd3 7a03 	vldr	s15, [r3, #12]
 800961a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	ed93 6a11 	vldr	s12, [r3, #68]	; 0x44
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	edd3 7a04 	vldr	s15, [r3, #16]
 800962a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800962e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	edd3 7a05 	vldr	s15, [r3, #20]
 800963e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009642:	ee37 7a27 	vadd.f32	s14, s14, s15
      .z = this->R[2][0]*this->S[KC_STATE_PX] + this->R[2][1]*this->S[KC_STATE_PY] + this->R[2][2]*this->S[KC_STATE_PZ]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009652:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	edd3 5a14 	vldr	s11, [r3, #80]	; 0x50
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	edd3 7a04 	vldr	s15, [r3, #16]
 8009662:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8009666:	ee36 6a27 	vadd.f32	s12, s12, s15
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	edd3 5a15 	vldr	s11, [r3, #84]	; 0x54
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	edd3 7a05 	vldr	s15, [r3, #20]
 8009676:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800967a:	ee76 7a27 	vadd.f32	s15, s12, s15
  state->velocity = (velocity_t){
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	3330      	adds	r3, #48	; 0x30
 8009682:	2200      	movs	r2, #0
 8009684:	601a      	str	r2, [r3, #0]
 8009686:	605a      	str	r2, [r3, #4]
 8009688:	609a      	str	r2, [r3, #8]
 800968a:	60da      	str	r2, [r3, #12]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	edc3 6a0d 	vstr	s13, [r3, #52]	; 0x34
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

  // Accelerometer measurements are in the body frame and need to be rotated to world frame.
  // Furthermore, the legacy code requires acc.z to be acceleration without gravity.
  // Finally, note that these accelerations are in Gs, and not in m/s^2, hence - 1 for removing gravity
  state->acc = (acc_t){
      .x = this->R[0][0]*acc->x + this->R[0][1]*acc->y + this->R[0][2]*acc->z,
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	edd3 7a00 	vldr	s15, [r3]
 80096aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80096ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80096ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096d2:	ee77 6a27 	vadd.f32	s13, s14, s15
      .y = this->R[1][0]*acc->x + this->R[1][1]*acc->y + this->R[1][2]*acc->z,
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	edd3 7a00 	vldr	s15, [r3]
 80096e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	ed93 6a11 	vldr	s12, [r3, #68]	; 0x44
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80096f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80096f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	edd3 7a02 	vldr	s15, [r3, #8]
 8009706:	ee66 7a27 	vmul.f32	s15, s12, s15
 800970a:	ee37 7a27 	vadd.f32	s14, s14, s15
      .z = this->R[2][0]*acc->x + this->R[2][1]*acc->y + this->R[2][2]*acc->z - 1
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	edd3 7a00 	vldr	s15, [r3]
 800971a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	edd3 5a14 	vldr	s11, [r3, #80]	; 0x50
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	edd3 7a01 	vldr	s15, [r3, #4]
 800972a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800972e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	edd3 5a15 	vldr	s11, [r3, #84]	; 0x54
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	edd3 7a02 	vldr	s15, [r3, #8]
 800973e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8009742:	ee76 7a27 	vadd.f32	s15, s12, s15
 8009746:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800974a:	ee77 7ac6 	vsub.f32	s15, s15, s12
  state->acc = (acc_t){
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	3340      	adds	r3, #64	; 0x40
 8009752:	2200      	movs	r2, #0
 8009754:	601a      	str	r2, [r3, #0]
 8009756:	605a      	str	r2, [r3, #4]
 8009758:	609a      	str	r2, [r3, #8]
 800975a:	60da      	str	r2, [r3, #12]
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	edc3 6a11 	vstr	s13, [r3, #68]	; 0x44
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
  };

  // convert the new attitude into Euler YPR
  float yaw = atan2f(2*(this->q[1]*this->q[2]+this->q[0]*this->q[3]) , this->q[0]*this->q[0] + this->q[1]*this->q[1] - this->q[2]*this->q[2] - this->q[3]*this->q[3]);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800977a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800978a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800978e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009792:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80097a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80097b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80097b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80097c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80097ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80097da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80097de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097e2:	eef0 0a67 	vmov.f32	s1, s15
 80097e6:	eeb0 0a46 	vmov.f32	s0, s12
 80097ea:	f01b ffbd 	bl	8025768 <atan2f>
 80097ee:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
  float pitch = asinf(-2*(this->q[1]*this->q[3] - this->q[0]*this->q[2]));
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80097fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800980e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009816:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800981a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800981e:	eeb0 0a67 	vmov.f32	s0, s15
 8009822:	f01b ff75 	bl	8025710 <asinf>
 8009826:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
  float roll = atan2f(2*(this->q[2]*this->q[3]+this->q[0]*this->q[1]) , this->q[0]*this->q[0] - this->q[1]*this->q[1] - this->q[2]*this->q[2] + this->q[3]*this->q[3]);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8009846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800984a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800984e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800985e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800986e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009872:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009882:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009886:	ee37 7a67 	vsub.f32	s14, s14, s15
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800989a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800989e:	eef0 0a67 	vmov.f32	s1, s15
 80098a2:	eeb0 0a46 	vmov.f32	s0, s12
 80098a6:	f01b ff5f 	bl	8025768 <atan2f>
 80098aa:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64

  // Save attitude, adjusted for the legacy CF2 body coordinate system
  state->attitude = (attitude_t){
      .roll = roll*RAD_TO_DEG,
 80098ae:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80098b2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8009924 <kalmanCoreExternalizeState+0x380>
 80098b6:	ee67 6a87 	vmul.f32	s13, s15, s14
      .pitch = -pitch*RAD_TO_DEG,
 80098ba:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80098be:	eef1 7a67 	vneg.f32	s15, s15
 80098c2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8009924 <kalmanCoreExternalizeState+0x380>
 80098c6:	ee27 7a87 	vmul.f32	s14, s15, s14
      .yaw = yaw*RAD_TO_DEG
 80098ca:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80098ce:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8009924 <kalmanCoreExternalizeState+0x380>
 80098d2:	ee67 7a86 	vmul.f32	s15, s15, s12
  state->attitude = (attitude_t){
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	461a      	mov	r2, r3
 80098da:	2300      	movs	r3, #0
 80098dc:	6013      	str	r3, [r2, #0]
 80098de:	6053      	str	r3, [r2, #4]
 80098e0:	6093      	str	r3, [r2, #8]
 80098e2:	60d3      	str	r3, [r2, #12]
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	edc3 6a01 	vstr	s13, [r3, #4]
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	ed83 7a02 	vstr	s14, [r3, #8]
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	edc3 7a03 	vstr	s15, [r3, #12]

  // Save quaternion, hopefully one day this could be used in a better controller.
  // Note that this is not adjusted for the legacy coordinate system
  state->attitudeQuaternion = (quaternion_t){
      .w = this->q[0],
      .x = this->q[1],
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      .y = this->q[2],
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
      .z = this->q[3]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6b19      	ldr	r1, [r3, #48]	; 0x30
      .w = this->q[0],
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  state->attitudeQuaternion = (quaternion_t){
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	611c      	str	r4, [r3, #16]
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	6158      	str	r0, [r3, #20]
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	6199      	str	r1, [r3, #24]
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	61da      	str	r2, [r3, #28]
  };

  assertStateNotNaN(this);
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f7fd fa94 	bl	8006e44 <assertStateNotNaN>
}
 800991c:	bf00      	nop
 800991e:	3774      	adds	r7, #116	; 0x74
 8009920:	46bd      	mov	sp, r7
 8009922:	bd90      	pop	{r4, r7, pc}
 8009924:	42652ee0 	.word	0x42652ee0

08009928 <kalmanSupervisorIsStateWithinBounds>:

// The bounds on states, these shouldn't be hit...
float maxPosition = 100; //meters
float maxVelocity = 10; //meters per second

bool kalmanSupervisorIsStateWithinBounds(const kalmanCoreData_t* this) {
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < 3; i++) {
 8009930:	2300      	movs	r3, #0
 8009932:	60fb      	str	r3, [r7, #12]
 8009934:	e058      	b.n	80099e8 <kalmanSupervisorIsStateWithinBounds+0xc0>
    if (maxPosition > 0.0f) {
 8009936:	4b31      	ldr	r3, [pc, #196]	; (80099fc <kalmanSupervisorIsStateWithinBounds+0xd4>)
 8009938:	edd3 7a00 	vldr	s15, [r3]
 800993c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009944:	dd21      	ble.n	800998a <kalmanSupervisorIsStateWithinBounds+0x62>
      if (this->S[KC_STATE_X + i] > maxPosition) {
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	4413      	add	r3, r2
 800994e:	ed93 7a00 	vldr	s14, [r3]
 8009952:	4b2a      	ldr	r3, [pc, #168]	; (80099fc <kalmanSupervisorIsStateWithinBounds+0xd4>)
 8009954:	edd3 7a00 	vldr	s15, [r3]
 8009958:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800995c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009960:	dd01      	ble.n	8009966 <kalmanSupervisorIsStateWithinBounds+0x3e>
        return false;
 8009962:	2300      	movs	r3, #0
 8009964:	e044      	b.n	80099f0 <kalmanSupervisorIsStateWithinBounds+0xc8>
      } else if (this->S[KC_STATE_X + i] < -maxPosition) {
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4413      	add	r3, r2
 800996e:	ed93 7a00 	vldr	s14, [r3]
 8009972:	4b22      	ldr	r3, [pc, #136]	; (80099fc <kalmanSupervisorIsStateWithinBounds+0xd4>)
 8009974:	edd3 7a00 	vldr	s15, [r3]
 8009978:	eef1 7a67 	vneg.f32	s15, s15
 800997c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009984:	d501      	bpl.n	800998a <kalmanSupervisorIsStateWithinBounds+0x62>
        return false;
 8009986:	2300      	movs	r3, #0
 8009988:	e032      	b.n	80099f0 <kalmanSupervisorIsStateWithinBounds+0xc8>
      }
    }

    if (maxVelocity > 0.0f) {
 800998a:	4b1d      	ldr	r3, [pc, #116]	; (8009a00 <kalmanSupervisorIsStateWithinBounds+0xd8>)
 800998c:	edd3 7a00 	vldr	s15, [r3]
 8009990:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009998:	dd23      	ble.n	80099e2 <kalmanSupervisorIsStateWithinBounds+0xba>
      if (this->S[KC_STATE_PX + i] > maxVelocity) {
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3303      	adds	r3, #3
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4413      	add	r3, r2
 80099a4:	ed93 7a00 	vldr	s14, [r3]
 80099a8:	4b15      	ldr	r3, [pc, #84]	; (8009a00 <kalmanSupervisorIsStateWithinBounds+0xd8>)
 80099aa:	edd3 7a00 	vldr	s15, [r3]
 80099ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099b6:	dd01      	ble.n	80099bc <kalmanSupervisorIsStateWithinBounds+0x94>
        return false;
 80099b8:	2300      	movs	r3, #0
 80099ba:	e019      	b.n	80099f0 <kalmanSupervisorIsStateWithinBounds+0xc8>
      } else if (this->S[KC_STATE_PX + i] < -maxVelocity) {
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	3303      	adds	r3, #3
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	4413      	add	r3, r2
 80099c6:	ed93 7a00 	vldr	s14, [r3]
 80099ca:	4b0d      	ldr	r3, [pc, #52]	; (8009a00 <kalmanSupervisorIsStateWithinBounds+0xd8>)
 80099cc:	edd3 7a00 	vldr	s15, [r3]
 80099d0:	eef1 7a67 	vneg.f32	s15, s15
 80099d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099dc:	d501      	bpl.n	80099e2 <kalmanSupervisorIsStateWithinBounds+0xba>
        return false;
 80099de:	2300      	movs	r3, #0
 80099e0:	e006      	b.n	80099f0 <kalmanSupervisorIsStateWithinBounds+0xc8>
  for (int i = 0; i < 3; i++) {
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	3301      	adds	r3, #1
 80099e6:	60fb      	str	r3, [r7, #12]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	dda3      	ble.n	8009936 <kalmanSupervisorIsStateWithinBounds+0xe>
      }
    }
  }

  return true;
 80099ee:	2301      	movs	r3, #1
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3714      	adds	r7, #20
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr
 80099fc:	20000900 	.word	0x20000900
 8009a00:	20000904 	.word	0x20000904

08009a04 <kalmanCoreUpdateWithAbsoluteHeight>:
 */

#include "mm_absolute_height.h"

// Measurement model where the measurement is the absolute height
void kalmanCoreUpdateWithAbsoluteHeight(kalmanCoreData_t* this, heightMeasurement_t* height) {
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b08e      	sub	sp, #56	; 0x38
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  float h[KC_STATE_DIM] = {0};
 8009a0e:	f107 0314 	add.w	r3, r7, #20
 8009a12:	2224      	movs	r2, #36	; 0x24
 8009a14:	2100      	movs	r1, #0
 8009a16:	4618      	mov	r0, r3
 8009a18:	f019 ff7a 	bl	8023910 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	81bb      	strh	r3, [r7, #12]
 8009a20:	2309      	movs	r3, #9
 8009a22:	81fb      	strh	r3, [r7, #14]
 8009a24:	f107 0314 	add.w	r3, r7, #20
 8009a28:	613b      	str	r3, [r7, #16]
  h[KC_STATE_Z] = 1;
 8009a2a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8009a2e:	61fb      	str	r3, [r7, #28]
  kalmanCoreScalarUpdate(this, &H, height->height - this->S[KC_STATE_Z], height->stdDev);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	ed93 7a01 	vldr	s14, [r3, #4]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	edd3 7a02 	vldr	s15, [r3, #8]
 8009a3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	ed93 7a02 	vldr	s14, [r3, #8]
 8009a46:	f107 030c 	add.w	r3, r7, #12
 8009a4a:	eef0 0a47 	vmov.f32	s1, s14
 8009a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8009a52:	4619      	mov	r1, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f7fd fb8d 	bl	8007174 <kalmanCoreScalarUpdate>
}
 8009a5a:	bf00      	nop
 8009a5c:	3738      	adds	r7, #56	; 0x38
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
	...

08009a64 <arm_sqrt>:
static inline float arm_sqrt(float32_t in) {
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b086      	sub	sp, #24
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 8009a6e:	f04f 0300 	mov.w	r3, #0
 8009a72:	60bb      	str	r3, [r7, #8]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	613b      	str	r3, [r7, #16]
 8009a78:	f107 0308 	add.w	r3, r7, #8
 8009a7c:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 8009a7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009a82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a8a:	db0a      	blt.n	8009aa2 <arm_sqrt+0x3e>
      *pOut = __builtin_sqrtf(in);
 8009a8c:	ed97 0a04 	vldr	s0, [r7, #16]
 8009a90:	f01b fee4 	bl	802585c <sqrtf>
 8009a94:	eef0 7a40 	vmov.f32	s15, s0
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	e005      	b.n	8009aae <arm_sqrt+0x4a>
      *pOut = 0.0f;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f04f 0200 	mov.w	r2, #0
 8009aa8:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8009aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  arm_status result = arm_sqrt_f32(in, &pOut);
 8009aae:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 8009ab0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d004      	beq.n	8009ac2 <arm_sqrt+0x5e>
 8009ab8:	225b      	movs	r2, #91	; 0x5b
 8009aba:	4906      	ldr	r1, [pc, #24]	; (8009ad4 <arm_sqrt+0x70>)
 8009abc:	4806      	ldr	r0, [pc, #24]	; (8009ad8 <arm_sqrt+0x74>)
 8009abe:	f007 f8ad 	bl	8010c1c <assertFail>
  return pOut;
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	ee07 3a90 	vmov	s15, r3
}
 8009ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8009acc:	3718      	adds	r7, #24
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	0802b70c 	.word	0x0802b70c
 8009ad8:	0802b758 	.word	0x0802b758

08009adc <kalmanCoreUpdateWithDistance>:
 */

#include "mm_distance.h"

// Measurement model where the measurement is the distance to a known point in space
void kalmanCoreUpdateWithDistance(kalmanCoreData_t* this, distanceMeasurement_t* d) {
 8009adc:	b580      	push	{r7, lr}
 8009ade:	ed2d 8b02 	vpush	{d8}
 8009ae2:	b092      	sub	sp, #72	; 0x48
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  // a measurement of distance to point (x, y, z)
  float h[KC_STATE_DIM] = {0};
 8009aea:	f107 0310 	add.w	r3, r7, #16
 8009aee:	2224      	movs	r2, #36	; 0x24
 8009af0:	2100      	movs	r1, #0
 8009af2:	4618      	mov	r0, r3
 8009af4:	f019 ff0c 	bl	8023910 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8009af8:	2301      	movs	r3, #1
 8009afa:	813b      	strh	r3, [r7, #8]
 8009afc:	2309      	movs	r3, #9
 8009afe:	817b      	strh	r3, [r7, #10]
 8009b00:	f107 0310 	add.w	r3, r7, #16
 8009b04:	60fb      	str	r3, [r7, #12]

  float dx = this->S[KC_STATE_X] - d->x;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	ed93 7a00 	vldr	s14, [r3]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	edd3 7a00 	vldr	s15, [r3]
 8009b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b16:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  float dy = this->S[KC_STATE_Y] - d->y;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	ed93 7a01 	vldr	s14, [r3, #4]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	edd3 7a01 	vldr	s15, [r3, #4]
 8009b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b2a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  float dz = this->S[KC_STATE_Z] - d->z;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	ed93 7a02 	vldr	s14, [r3, #8]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	edd3 7a02 	vldr	s15, [r3, #8]
 8009b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b3e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

  float measuredDistance = d->distance;
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	63bb      	str	r3, [r7, #56]	; 0x38

  float predictedDistance = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 8009b48:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8009b4c:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8009b50:	f01b fe2c 	bl	80257ac <powf>
 8009b54:	eeb0 8a40 	vmov.f32	s16, s0
 8009b58:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8009b5c:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8009b60:	f01b fe24 	bl	80257ac <powf>
 8009b64:	eef0 7a40 	vmov.f32	s15, s0
 8009b68:	ee38 8a27 	vadd.f32	s16, s16, s15
 8009b6c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8009b70:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8009b74:	f01b fe1a 	bl	80257ac <powf>
 8009b78:	eef0 7a40 	vmov.f32	s15, s0
 8009b7c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8009b80:	eeb0 0a67 	vmov.f32	s0, s15
 8009b84:	f7ff ff6e 	bl	8009a64 <arm_sqrt>
 8009b88:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  if (predictedDistance != 0.0f) {
 8009b8c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009b90:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b98:	d018      	beq.n	8009bcc <kalmanCoreUpdateWithDistance+0xf0>
    // The measurement is: z = sqrt(dx^2 + dy^2 + dz^2). The derivative dz/dX gives h.
    h[KC_STATE_X] = dx/predictedDistance;
 8009b9a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8009b9e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ba6:	edc7 7a04 	vstr	s15, [r7, #16]
    h[KC_STATE_Y] = dy/predictedDistance;
 8009baa:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8009bae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bb6:	edc7 7a05 	vstr	s15, [r7, #20]
    h[KC_STATE_Z] = dz/predictedDistance;
 8009bba:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8009bbe:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bc6:	edc7 7a06 	vstr	s15, [r7, #24]
 8009bca:	e008      	b.n	8009bde <kalmanCoreUpdateWithDistance+0x102>
  } else {
    // Avoid divide by zero
    h[KC_STATE_X] = 1.0f;
 8009bcc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8009bd0:	613b      	str	r3, [r7, #16]
    h[KC_STATE_Y] = 0.0f;
 8009bd2:	f04f 0300 	mov.w	r3, #0
 8009bd6:	617b      	str	r3, [r7, #20]
    h[KC_STATE_Z] = 0.0f;
 8009bd8:	f04f 0300 	mov.w	r3, #0
 8009bdc:	61bb      	str	r3, [r7, #24]
  }

  kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, d->stdDev);
 8009bde:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009be2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	ed93 7a05 	vldr	s14, [r3, #20]
 8009bf0:	f107 0308 	add.w	r3, r7, #8
 8009bf4:	eef0 0a47 	vmov.f32	s1, s14
 8009bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7fd fab8 	bl	8007174 <kalmanCoreScalarUpdate>
}
 8009c04:	bf00      	nop
 8009c06:	3748      	adds	r7, #72	; 0x48
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	ecbd 8b02 	vpop	{d8}
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <assert_aligned_4_bytes>:
static inline void assert_aligned_4_bytes(const arm_matrix_instance_f32* matrix) {
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  const uint32_t address = (uint32_t)matrix->pData;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	60fb      	str	r3, [r7, #12]
  ASSERT((address & 0x3) == 0);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f003 0303 	and.w	r3, r3, #3
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d004      	beq.n	8009c32 <assert_aligned_4_bytes+0x22>
 8009c28:	223c      	movs	r2, #60	; 0x3c
 8009c2a:	4904      	ldr	r1, [pc, #16]	; (8009c3c <assert_aligned_4_bytes+0x2c>)
 8009c2c:	4804      	ldr	r0, [pc, #16]	; (8009c40 <assert_aligned_4_bytes+0x30>)
 8009c2e:	f006 fff5 	bl	8010c1c <assertFail>
}
 8009c32:	bf00      	nop
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	0802b774 	.word	0x0802b774
 8009c40:	0802b7c0 	.word	0x0802b7c0

08009c44 <mat_trans>:
static inline void mat_trans(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7ff ffde 	bl	8009c10 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 8009c54:	6838      	ldr	r0, [r7, #0]
 8009c56:	f7ff ffdb 	bl	8009c10 <assert_aligned_4_bytes>
  arm_status result = arm_mat_trans_f32(pSrc, pDst);
 8009c5a:	6839      	ldr	r1, [r7, #0]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f018 fc97 	bl	8022590 <arm_mat_trans_f32>
 8009c62:	4603      	mov	r3, r0
 8009c64:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 8009c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d004      	beq.n	8009c78 <mat_trans+0x34>
 8009c6e:	2244      	movs	r2, #68	; 0x44
 8009c70:	4903      	ldr	r1, [pc, #12]	; (8009c80 <mat_trans+0x3c>)
 8009c72:	4804      	ldr	r0, [pc, #16]	; (8009c84 <mat_trans+0x40>)
 8009c74:	f006 ffd2 	bl	8010c1c <assertFail>
}
 8009c78:	bf00      	nop
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	0802b774 	.word	0x0802b774
 8009c84:	0802b7d8 	.word	0x0802b7d8

08009c88 <mat_inv>:
static inline void mat_inv(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7ff ffbc 	bl	8009c10 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 8009c98:	6838      	ldr	r0, [r7, #0]
 8009c9a:	f7ff ffb9 	bl	8009c10 <assert_aligned_4_bytes>
  arm_status result = arm_mat_inverse_f32(pSrc, pDst);
 8009c9e:	6839      	ldr	r1, [r7, #0]
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f018 fdc3 	bl	802282c <arm_mat_inverse_f32>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 8009caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d004      	beq.n	8009cbc <mat_inv+0x34>
 8009cb2:	224c      	movs	r2, #76	; 0x4c
 8009cb4:	4903      	ldr	r1, [pc, #12]	; (8009cc4 <mat_inv+0x3c>)
 8009cb6:	4804      	ldr	r0, [pc, #16]	; (8009cc8 <mat_inv+0x40>)
 8009cb8:	f006 ffb0 	bl	8010c1c <assertFail>
}
 8009cbc:	bf00      	nop
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	0802b774 	.word	0x0802b774
 8009cc8:	0802b7d8 	.word	0x0802b7d8

08009ccc <mat_mult>:
static inline void mat_mult(const arm_matrix_instance_f32 * pSrcA, const arm_matrix_instance_f32 * pSrcB, arm_matrix_instance_f32 * pDst) {
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b086      	sub	sp, #24
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
  assert_aligned_4_bytes(pSrcA);
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f7ff ff99 	bl	8009c10 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pSrcB);
 8009cde:	68b8      	ldr	r0, [r7, #8]
 8009ce0:	f7ff ff96 	bl	8009c10 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f7ff ff93 	bl	8009c10 <assert_aligned_4_bytes>
  arm_status result = arm_mat_mult_f32(pSrcA, pSrcB, pDst);
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	68b9      	ldr	r1, [r7, #8]
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f018 fcfc 	bl	80226ec <arm_mat_mult_f32>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 8009cf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d004      	beq.n	8009d0a <mat_mult+0x3e>
 8009d00:	2255      	movs	r2, #85	; 0x55
 8009d02:	4904      	ldr	r1, [pc, #16]	; (8009d14 <mat_mult+0x48>)
 8009d04:	4804      	ldr	r0, [pc, #16]	; (8009d18 <mat_mult+0x4c>)
 8009d06:	f006 ff89 	bl	8010c1c <assertFail>
}
 8009d0a:	bf00      	nop
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	0802b774 	.word	0x0802b774
 8009d18:	0802b7d8 	.word	0x0802b7d8

08009d1c <arm_sqrt>:
static inline float arm_sqrt(float32_t in) {
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 8009d26:	f04f 0300 	mov.w	r3, #0
 8009d2a:	60bb      	str	r3, [r7, #8]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	613b      	str	r3, [r7, #16]
 8009d30:	f107 0308 	add.w	r3, r7, #8
 8009d34:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 8009d36:	edd7 7a04 	vldr	s15, [r7, #16]
 8009d3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d42:	db0a      	blt.n	8009d5a <arm_sqrt+0x3e>
      *pOut = __builtin_sqrtf(in);
 8009d44:	ed97 0a04 	vldr	s0, [r7, #16]
 8009d48:	f01b fd88 	bl	802585c <sqrtf>
 8009d4c:	eef0 7a40 	vmov.f32	s15, s0
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8009d56:	2300      	movs	r3, #0
 8009d58:	e005      	b.n	8009d66 <arm_sqrt+0x4a>
      *pOut = 0.0f;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f04f 0200 	mov.w	r2, #0
 8009d60:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8009d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  arm_status result = arm_sqrt_f32(in, &pOut);
 8009d66:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 8009d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d004      	beq.n	8009d7a <arm_sqrt+0x5e>
 8009d70:	225b      	movs	r2, #91	; 0x5b
 8009d72:	4906      	ldr	r1, [pc, #24]	; (8009d8c <arm_sqrt+0x70>)
 8009d74:	4806      	ldr	r0, [pc, #24]	; (8009d90 <arm_sqrt+0x74>)
 8009d76:	f006 ff51 	bl	8010c1c <assertFail>
  return pOut;
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	ee07 3a90 	vmov	s15, r3
}
 8009d80:	eeb0 0a67 	vmov.f32	s0, s15
 8009d84:	3718      	adds	r7, #24
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	0802b774 	.word	0x0802b774
 8009d90:	0802b7d8 	.word	0x0802b7d8

08009d94 <Cholesky_Decomposition>:
#define UPPER_BOUND (100)
#define LOWER_BOUND (-100)

// Cholesky Decomposition for a nxn psd matrix (from scratch)
// Reference: https://www.geeksforgeeks.org/cholesky-decomposition-matrix-decomposition/
static void Cholesky_Decomposition(int n, float matrix[n][n],  float lower[n][n]){
 8009d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d98:	b08d      	sub	sp, #52	; 0x34
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	60f8      	str	r0, [r7, #12]
 8009d9e:	60b9      	str	r1, [r7, #8]
 8009da0:	607a      	str	r2, [r7, #4]
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	603a      	str	r2, [r7, #0]
 8009da6:	1e53      	subs	r3, r2, #1
 8009da8:	61bb      	str	r3, [r7, #24]
 8009daa:	2300      	movs	r3, #0
 8009dac:	4690      	mov	r8, r2
 8009dae:	4699      	mov	r9, r3
 8009db0:	f04f 0200 	mov.w	r2, #0
 8009db4:	f04f 0300 	mov.w	r3, #0
 8009db8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8009dbc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8009dc0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8009dc4:	68fe      	ldr	r6, [r7, #12]
 8009dc6:	1e73      	subs	r3, r6, #1
 8009dc8:	617b      	str	r3, [r7, #20]
 8009dca:	4632      	mov	r2, r6
 8009dcc:	2300      	movs	r3, #0
 8009dce:	4614      	mov	r4, r2
 8009dd0:	461d      	mov	r5, r3
 8009dd2:	f04f 0200 	mov.w	r2, #0
 8009dd6:	f04f 0300 	mov.w	r3, #0
 8009dda:	016b      	lsls	r3, r5, #5
 8009ddc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8009de0:	0162      	lsls	r2, r4, #5
    // Decomposing a matrix into Lower Triangular 
    for (int i = 0; i < n; i++) { 
 8009de2:	2300      	movs	r3, #0
 8009de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009de6:	e0af      	b.n	8009f48 <Cholesky_Decomposition+0x1b4>
        for (int j = 0; j <= i; j++) { 
 8009de8:	2300      	movs	r3, #0
 8009dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dec:	e0a4      	b.n	8009f38 <Cholesky_Decomposition+0x1a4>
            float sum = 0.0; 
 8009dee:	f04f 0300 	mov.w	r3, #0
 8009df2:	627b      	str	r3, [r7, #36]	; 0x24
            if (j == i) // summation for diagnols 
 8009df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d146      	bne.n	8009e8a <Cholesky_Decomposition+0xf6>
            { 
                for (int k = 0; k < j; k++) 
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	623b      	str	r3, [r7, #32]
 8009e00:	e01c      	b.n	8009e3c <Cholesky_Decomposition+0xa8>
                    sum += powf(lower[j][k], 2); 
 8009e02:	4632      	mov	r2, r6
 8009e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e06:	fb02 f303 	mul.w	r3, r2, r3
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	441a      	add	r2, r3
 8009e10:	6a3b      	ldr	r3, [r7, #32]
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4413      	add	r3, r2
 8009e16:	edd3 7a00 	vldr	s15, [r3]
 8009e1a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8009e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8009e22:	f01b fcc3 	bl	80257ac <powf>
 8009e26:	eeb0 7a40 	vmov.f32	s14, s0
 8009e2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009e2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e32:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                for (int k = 0; k < j; k++) 
 8009e36:	6a3b      	ldr	r3, [r7, #32]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	623b      	str	r3, [r7, #32]
 8009e3c:	6a3a      	ldr	r2, [r7, #32]
 8009e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e40:	429a      	cmp	r2, r3
 8009e42:	dbde      	blt.n	8009e02 <Cholesky_Decomposition+0x6e>
                lower[j][j] = sqrtf(matrix[j][j] - sum); 
 8009e44:	683a      	ldr	r2, [r7, #0]
 8009e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e48:	fb02 f303 	mul.w	r3, r2, r3
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	441a      	add	r2, r3
 8009e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	4413      	add	r3, r2
 8009e58:	ed93 7a00 	vldr	s14, [r3]
 8009e5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e64:	4632      	mov	r2, r6
 8009e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e68:	fb02 f303 	mul.w	r3, r2, r3
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	18d4      	adds	r4, r2, r3
 8009e72:	eeb0 0a67 	vmov.f32	s0, s15
 8009e76:	f01b fcf1 	bl	802585c <sqrtf>
 8009e7a:	eef0 7a40 	vmov.f32	s15, s0
 8009e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4423      	add	r3, r4
 8009e84:	edc3 7a00 	vstr	s15, [r3]
 8009e88:	e053      	b.n	8009f32 <Cholesky_Decomposition+0x19e>
            } else { 
                for (int k = 0; k < j; k++) 
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	61fb      	str	r3, [r7, #28]
 8009e8e:	e022      	b.n	8009ed6 <Cholesky_Decomposition+0x142>
                    sum += (lower[i][k] * lower[j][k]); 
 8009e90:	4632      	mov	r2, r6
 8009e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e94:	fb02 f303 	mul.w	r3, r2, r3
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	441a      	add	r2, r3
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	ed93 7a00 	vldr	s14, [r3]
 8009ea8:	4632      	mov	r2, r6
 8009eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eac:	fb02 f303 	mul.w	r3, r2, r3
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	441a      	add	r2, r3
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	4413      	add	r3, r2
 8009ebc:	edd3 7a00 	vldr	s15, [r3]
 8009ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ec4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ecc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                for (int k = 0; k < j; k++) 
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	61fb      	str	r3, [r7, #28]
 8009ed6:	69fa      	ldr	r2, [r7, #28]
 8009ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eda:	429a      	cmp	r2, r3
 8009edc:	dbd8      	blt.n	8009e90 <Cholesky_Decomposition+0xfc>
                lower[i][j] = (matrix[i][j] - sum) / lower[j][j]; 
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee2:	fb02 f303 	mul.w	r3, r2, r3
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	441a      	add	r2, r3
 8009eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4413      	add	r3, r2
 8009ef2:	ed93 7a00 	vldr	s14, [r3]
 8009ef6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009efa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009efe:	4632      	mov	r2, r6
 8009f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f02:	fb02 f303 	mul.w	r3, r2, r3
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	441a      	add	r2, r3
 8009f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4413      	add	r3, r2
 8009f12:	ed93 7a00 	vldr	s14, [r3]
 8009f16:	4632      	mov	r2, r6
 8009f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1a:	fb02 f303 	mul.w	r3, r2, r3
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	441a      	add	r2, r3
 8009f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j <= i; j++) { 
 8009f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f34:	3301      	adds	r3, #1
 8009f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	f77f af56 	ble.w	8009dee <Cholesky_Decomposition+0x5a>
    for (int i = 0; i < n; i++) { 
 8009f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f44:	3301      	adds	r3, #1
 8009f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	f6ff af4b 	blt.w	8009de8 <Cholesky_Decomposition+0x54>
            } 
        } 
    }
} 
 8009f52:	bf00      	nop
 8009f54:	bf00      	nop
 8009f56:	3734      	adds	r7, #52	; 0x34
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009f5e <GM_UWB>:
 * For a given measurement error e, decreasing the sigma of the GM weight function will set a
 * smaller weight to this error e. Then, the variance of this measurement will increase, indicating 
 * a large measurement uncertainty. 
 * Intuitively, a small sigma means you trust the measurements more.
*/
static void GM_UWB(float e, float * GM_e){
 8009f5e:	b480      	push	{r7}
 8009f60:	b085      	sub	sp, #20
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	ed87 0a01 	vstr	s0, [r7, #4]
 8009f68:	6038      	str	r0, [r7, #0]
    float sigma = 1.5;                        
 8009f6a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009f6e:	60fb      	str	r3, [r7, #12]
    float GM_dn = sigma + e*e;
 8009f70:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009f78:	ed97 7a03 	vldr	s14, [r7, #12]
 8009f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f80:	edc7 7a02 	vstr	s15, [r7, #8]
    *GM_e = (sigma * sigma)/(GM_dn * GM_dn);
 8009f84:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f88:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8009f8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009f90:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	edc3 7a00 	vstr	s15, [r3]
}
 8009f9e:	bf00      	nop
 8009fa0:	3714      	adds	r7, #20
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <GM_state>:

static void GM_state(float e, float * GM_e){
 8009faa:	b480      	push	{r7}
 8009fac:	b085      	sub	sp, #20
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	ed87 0a01 	vstr	s0, [r7, #4]
 8009fb4:	6038      	str	r0, [r7, #0]
    float sigma = 2.0;                       
 8009fb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009fba:	60fb      	str	r3, [r7, #12]
    float GM_dn = sigma + e*e;
 8009fbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8009fc0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009fc4:	ed97 7a03 	vldr	s14, [r7, #12]
 8009fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fcc:	edc7 7a02 	vstr	s15, [r7, #8]
    *GM_e = (sigma * sigma)/(GM_dn * GM_dn);
 8009fd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8009fd4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8009fd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8009fdc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	edc3 7a00 	vstr	s15, [r3]
}
 8009fea:	bf00      	nop
 8009fec:	3714      	adds	r7, #20
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
	...

08009ff8 <kalmanCoreRobustUpdateWithDistance>:

// robsut update function
void kalmanCoreRobustUpdateWithDistance(kalmanCoreData_t* this, distanceMeasurement_t *d)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	ed2d 8b02 	vpush	{d8}
 8009ffe:	b0f8      	sub	sp, #480	; 0x1e0
 800a000:	af00      	add	r7, sp, #0
 800a002:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a006:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a00a:	6018      	str	r0, [r3, #0]
 800a00c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a010:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a014:	6019      	str	r1, [r3, #0]
    float dx = this->S[KC_STATE_X] - d->x;
 800a016:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a01a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	ed93 7a00 	vldr	s14, [r3]
 800a024:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a028:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	edd3 7a00 	vldr	s15, [r3]
 800a032:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a036:	edc7 7a6c 	vstr	s15, [r7, #432]	; 0x1b0
    float dy = this->S[KC_STATE_Y] - d->y;
 800a03a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a03e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	ed93 7a01 	vldr	s14, [r3, #4]
 800a048:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a04c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	edd3 7a01 	vldr	s15, [r3, #4]
 800a056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a05a:	edc7 7a6b 	vstr	s15, [r7, #428]	; 0x1ac
    float dz = this->S[KC_STATE_Z] - d->z;
 800a05e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a062:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	ed93 7a02 	vldr	s14, [r3, #8]
 800a06c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a070:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	edd3 7a02 	vldr	s15, [r3, #8]
 800a07a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a07e:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
    float measuredDistance = d->distance;
 800a082:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a086:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

    float predictedDistance = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 800a092:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800a096:	ed97 0a6c 	vldr	s0, [r7, #432]	; 0x1b0
 800a09a:	f01b fb87 	bl	80257ac <powf>
 800a09e:	eeb0 8a40 	vmov.f32	s16, s0
 800a0a2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800a0a6:	ed97 0a6b 	vldr	s0, [r7, #428]	; 0x1ac
 800a0aa:	f01b fb7f 	bl	80257ac <powf>
 800a0ae:	eef0 7a40 	vmov.f32	s15, s0
 800a0b2:	ee38 8a27 	vadd.f32	s16, s16, s15
 800a0b6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800a0ba:	ed97 0a6a 	vldr	s0, [r7, #424]	; 0x1a8
 800a0be:	f01b fb75 	bl	80257ac <powf>
 800a0c2:	eef0 7a40 	vmov.f32	s15, s0
 800a0c6:	ee78 7a27 	vadd.f32	s15, s16, s15
 800a0ca:	eeb0 0a67 	vmov.f32	s0, s15
 800a0ce:	f7ff fe25 	bl	8009d1c <arm_sqrt>
 800a0d2:	ed87 0a68 	vstr	s0, [r7, #416]	; 0x1a0
    // innovation term based on x_check
    float error_check = measuredDistance - predictedDistance;    // innovation term based on prior state
 800a0d6:	ed97 7a69 	vldr	s14, [r7, #420]	; 0x1a4
 800a0da:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 800a0de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0e2:	edc7 7a67 	vstr	s15, [r7, #412]	; 0x19c
    static float P_chol[KC_STATE_DIM][KC_STATE_DIM]; 
    static arm_matrix_instance_f32 Pc_m = {KC_STATE_DIM, KC_STATE_DIM, (float *)P_chol};
    static float Pc_tran[KC_STATE_DIM][KC_STATE_DIM];        
    static arm_matrix_instance_f32 Pc_tran_m = {KC_STATE_DIM, KC_STATE_DIM, (float *)Pc_tran};

    float h[KC_STATE_DIM] = {0};
 800a0e6:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800a0ea:	2224      	movs	r2, #36	; 0x24
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f019 fc0e 	bl	8023910 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};    
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	f8a7 3154 	strh.w	r3, [r7, #340]	; 0x154
 800a0fa:	2309      	movs	r3, #9
 800a0fc:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
 800a100:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800a104:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    // x_err comes from the KF update is the state of error state Kalman filter, set to be zero initially
    static float x_err[KC_STATE_DIM] = {0.0};          
    static arm_matrix_instance_f32 x_errm = {KC_STATE_DIM, 1, x_err};
    static float X_state[KC_STATE_DIM] = {0.0};
    float P_iter[KC_STATE_DIM][KC_STATE_DIM];
    memcpy(P_iter, this->P, sizeof(P_iter));
 800a108:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a10c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800a116:	f107 0310 	add.w	r3, r7, #16
 800a11a:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800a11e:	4618      	mov	r0, r3
 800a120:	f019 fcfb 	bl	8023b1a <memcpy>

    float R_iter = d->stdDev * d->stdDev;                     // measurement covariance
 800a124:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a128:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	ed93 7a05 	vldr	s14, [r3, #20]
 800a132:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a136:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	edd3 7a05 	vldr	s15, [r3, #20]
 800a140:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a144:	edc7 7a77 	vstr	s15, [r7, #476]	; 0x1dc
    memcpy(X_state, this->S, sizeof(X_state));
 800a148:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a14c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2224      	movs	r2, #36	; 0x24
 800a154:	4619      	mov	r1, r3
 800a156:	48cf      	ldr	r0, [pc, #828]	; (800a494 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 800a158:	f019 fcdf 	bl	8023b1a <memcpy>

    // ---------------------- Start iteration ----------------------- //
    for (int iter = 0; iter < MAX_ITER; iter++){
 800a15c:	2300      	movs	r3, #0
 800a15e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800a162:	e2c3      	b.n	800a6ec <kalmanCoreRobustUpdateWithDistance+0x6f4>
        // cholesky decomposition for the prior covariance matrix 
        Cholesky_Decomposition(KC_STATE_DIM, P_iter, P_chol);          // P_chol is a lower triangular matrix
 800a164:	f107 0310 	add.w	r3, r7, #16
 800a168:	4acb      	ldr	r2, [pc, #812]	; (800a498 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800a16a:	4619      	mov	r1, r3
 800a16c:	2009      	movs	r0, #9
 800a16e:	f7ff fe11 	bl	8009d94 <Cholesky_Decomposition>
        mat_trans(&Pc_m, &Pc_tran_m);
 800a172:	49ca      	ldr	r1, [pc, #808]	; (800a49c <kalmanCoreRobustUpdateWithDistance+0x4a4>)
 800a174:	48ca      	ldr	r0, [pc, #808]	; (800a4a0 <kalmanCoreRobustUpdateWithDistance+0x4a8>)
 800a176:	f7ff fd65 	bl	8009c44 <mat_trans>

        // decomposition for measurement covariance (scalar case)
        float R_chol = sqrtf(R_iter);       
 800a17a:	ed97 0a77 	vldr	s0, [r7, #476]	; 0x1dc
 800a17e:	f01b fb6d 	bl	802585c <sqrtf>
 800a182:	ed87 0a66 	vstr	s0, [r7, #408]	; 0x198
        // construct H matrix
        // X_state updates in each iteration
        float x_iter = X_state[KC_STATE_X],  y_iter = X_state[KC_STATE_Y], z_iter = X_state[KC_STATE_Z];   
 800a186:	4bc3      	ldr	r3, [pc, #780]	; (800a494 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800a18e:	4bc1      	ldr	r3, [pc, #772]	; (800a494 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800a196:	4bbf      	ldr	r3, [pc, #764]	; (800a494 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        dx = x_iter - d->x;  dy = y_iter - d->y;   dz = z_iter - d->z;
 800a19e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a1a2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	edd3 7a00 	vldr	s15, [r3]
 800a1ac:	ed97 7a65 	vldr	s14, [r7, #404]	; 0x194
 800a1b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1b4:	edc7 7a6c 	vstr	s15, [r7, #432]	; 0x1b0
 800a1b8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a1bc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	edd3 7a01 	vldr	s15, [r3, #4]
 800a1c6:	ed97 7a64 	vldr	s14, [r7, #400]	; 0x190
 800a1ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1ce:	edc7 7a6b 	vstr	s15, [r7, #428]	; 0x1ac
 800a1d2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a1d6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	edd3 7a02 	vldr	s15, [r3, #8]
 800a1e0:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 800a1e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1e8:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8

        float predicted_iter = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 800a1ec:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800a1f0:	ed97 0a6c 	vldr	s0, [r7, #432]	; 0x1b0
 800a1f4:	f01b fada 	bl	80257ac <powf>
 800a1f8:	eeb0 8a40 	vmov.f32	s16, s0
 800a1fc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800a200:	ed97 0a6b 	vldr	s0, [r7, #428]	; 0x1ac
 800a204:	f01b fad2 	bl	80257ac <powf>
 800a208:	eef0 7a40 	vmov.f32	s15, s0
 800a20c:	ee38 8a27 	vadd.f32	s16, s16, s15
 800a210:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800a214:	ed97 0a6a 	vldr	s0, [r7, #424]	; 0x1a8
 800a218:	f01b fac8 	bl	80257ac <powf>
 800a21c:	eef0 7a40 	vmov.f32	s15, s0
 800a220:	ee78 7a27 	vadd.f32	s15, s16, s15
 800a224:	eeb0 0a67 	vmov.f32	s0, s15
 800a228:	f7ff fd78 	bl	8009d1c <arm_sqrt>
 800a22c:	ed87 0a62 	vstr	s0, [r7, #392]	; 0x188
        // innovation term based on x_check
        float error_iter = measuredDistance - predicted_iter; 
 800a230:	ed97 7a69 	vldr	s14, [r7, #420]	; 0x1a4
 800a234:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 800a238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a23c:	edc7 7a61 	vstr	s15, [r7, #388]	; 0x184

        float e_y = error_iter;
 800a240:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800a244:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

        if (predicted_iter != 0.0f) {
 800a248:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 800a24c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a254:	d018      	beq.n	800a288 <kalmanCoreRobustUpdateWithDistance+0x290>
            // The measurement is: z = sqrt(dx^2 + dy^2 + dz^2). The derivative dz/dX gives h.
            h[KC_STATE_X] = dx/predicted_iter;
 800a256:	edd7 6a6c 	vldr	s13, [r7, #432]	; 0x1b0
 800a25a:	ed97 7a62 	vldr	s14, [r7, #392]	; 0x188
 800a25e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a262:	edc7 7a57 	vstr	s15, [r7, #348]	; 0x15c
            h[KC_STATE_Y] = dy/predicted_iter;
 800a266:	edd7 6a6b 	vldr	s13, [r7, #428]	; 0x1ac
 800a26a:	ed97 7a62 	vldr	s14, [r7, #392]	; 0x188
 800a26e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a272:	edc7 7a58 	vstr	s15, [r7, #352]	; 0x160
            h[KC_STATE_Z] = dz/predicted_iter;
 800a276:	edd7 6a6a 	vldr	s13, [r7, #424]	; 0x1a8
 800a27a:	ed97 7a62 	vldr	s14, [r7, #392]	; 0x188
 800a27e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a282:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
 800a286:	e00b      	b.n	800a2a0 <kalmanCoreRobustUpdateWithDistance+0x2a8>

        } else {
            // Avoid divide by zero
            h[KC_STATE_X] = 1.0f;
 800a288:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a28c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
            h[KC_STATE_Y] = 0.0f;
 800a290:	f04f 0300 	mov.w	r3, #0
 800a294:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
            h[KC_STATE_Z] = 0.0f;
 800a298:	f04f 0300 	mov.w	r3, #0
 800a29c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
        }
        // check the measurement noise
        if (fabsf(R_chol - 0.0f) < 0.0001f){
 800a2a0:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 800a2a4:	eef0 7ae7 	vabs.f32	s15, s15
 800a2a8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800a4a4 <kalmanCoreRobustUpdateWithDistance+0x4ac>
 800a2ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2b4:	d508      	bpl.n	800a2c8 <kalmanCoreRobustUpdateWithDistance+0x2d0>
            e_y = error_iter / 0.0001f;
 800a2b6:	ed97 7a61 	vldr	s14, [r7, #388]	; 0x184
 800a2ba:	eddf 6a7a 	vldr	s13, [pc, #488]	; 800a4a4 <kalmanCoreRobustUpdateWithDistance+0x4ac>
 800a2be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a2c2:	edc7 7a75 	vstr	s15, [r7, #468]	; 0x1d4
 800a2c6:	e007      	b.n	800a2d8 <kalmanCoreRobustUpdateWithDistance+0x2e0>
        }
        else{ 
            e_y = error_iter / R_chol;
 800a2c8:	edd7 6a61 	vldr	s13, [r7, #388]	; 0x184
 800a2cc:	ed97 7a66 	vldr	s14, [r7, #408]	; 0x198
 800a2d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2d4:	edc7 7a75 	vstr	s15, [r7, #468]	; 0x1d4
        }
        // Make sure P_chol, lower trangular matrix, is numerically stable              
        for (int col=0; col<KC_STATE_DIM; col++) {
 800a2d8:	2300      	movs	r3, #0
 800a2da:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800a2de:	e095      	b.n	800a40c <kalmanCoreRobustUpdateWithDistance+0x414>
            for (int row=col; row<KC_STATE_DIM; row++) {
 800a2e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800a2e4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800a2e8:	e086      	b.n	800a3f8 <kalmanCoreRobustUpdateWithDistance+0x400>
                if (isnan(P_chol[row][col]) || P_chol[row][col] > UPPER_BOUND) {
 800a2ea:	496b      	ldr	r1, [pc, #428]	; (800a498 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800a2ec:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	00db      	lsls	r3, r3, #3
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800a2fa:	4413      	add	r3, r2
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	440b      	add	r3, r1
 800a300:	edd3 7a00 	vldr	s15, [r3]
 800a304:	eef4 7a67 	vcmp.f32	s15, s15
 800a308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a30c:	d613      	bvs.n	800a336 <kalmanCoreRobustUpdateWithDistance+0x33e>
 800a30e:	4962      	ldr	r1, [pc, #392]	; (800a498 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800a310:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800a314:	4613      	mov	r3, r2
 800a316:	00db      	lsls	r3, r3, #3
 800a318:	4413      	add	r3, r2
 800a31a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800a31e:	4413      	add	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	440b      	add	r3, r1
 800a324:	edd3 7a00 	vldr	s15, [r3]
 800a328:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800a4a8 <kalmanCoreRobustUpdateWithDistance+0x4b0>
 800a32c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a334:	dd0d      	ble.n	800a352 <kalmanCoreRobustUpdateWithDistance+0x35a>
                    P_chol[row][col] = UPPER_BOUND;
 800a336:	4958      	ldr	r1, [pc, #352]	; (800a498 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800a338:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800a33c:	4613      	mov	r3, r2
 800a33e:	00db      	lsls	r3, r3, #3
 800a340:	4413      	add	r3, r2
 800a342:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800a346:	4413      	add	r3, r2
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	440b      	add	r3, r1
 800a34c:	4a57      	ldr	r2, [pc, #348]	; (800a4ac <kalmanCoreRobustUpdateWithDistance+0x4b4>)
 800a34e:	601a      	str	r2, [r3, #0]
 800a350:	e04d      	b.n	800a3ee <kalmanCoreRobustUpdateWithDistance+0x3f6>
                } else if(row!=col && P_chol[row][col] < LOWER_BOUND){
 800a352:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800a356:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d021      	beq.n	800a3a2 <kalmanCoreRobustUpdateWithDistance+0x3aa>
 800a35e:	494e      	ldr	r1, [pc, #312]	; (800a498 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800a360:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800a364:	4613      	mov	r3, r2
 800a366:	00db      	lsls	r3, r3, #3
 800a368:	4413      	add	r3, r2
 800a36a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800a36e:	4413      	add	r3, r2
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	440b      	add	r3, r1
 800a374:	edd3 7a00 	vldr	s15, [r3]
 800a378:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800a4b0 <kalmanCoreRobustUpdateWithDistance+0x4b8>
 800a37c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a384:	d50d      	bpl.n	800a3a2 <kalmanCoreRobustUpdateWithDistance+0x3aa>
                    P_chol[row][col] = LOWER_BOUND;
 800a386:	4944      	ldr	r1, [pc, #272]	; (800a498 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800a388:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800a38c:	4613      	mov	r3, r2
 800a38e:	00db      	lsls	r3, r3, #3
 800a390:	4413      	add	r3, r2
 800a392:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800a396:	4413      	add	r3, r2
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	440b      	add	r3, r1
 800a39c:	4a45      	ldr	r2, [pc, #276]	; (800a4b4 <kalmanCoreRobustUpdateWithDistance+0x4bc>)
 800a39e:	601a      	str	r2, [r3, #0]
 800a3a0:	e025      	b.n	800a3ee <kalmanCoreRobustUpdateWithDistance+0x3f6>
                } else if(row==col && P_chol[row][col]<0.0f){
 800a3a2:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800a3a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d11f      	bne.n	800a3ee <kalmanCoreRobustUpdateWithDistance+0x3f6>
 800a3ae:	493a      	ldr	r1, [pc, #232]	; (800a498 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800a3b0:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	00db      	lsls	r3, r3, #3
 800a3b8:	4413      	add	r3, r2
 800a3ba:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800a3be:	4413      	add	r3, r2
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	440b      	add	r3, r1
 800a3c4:	edd3 7a00 	vldr	s15, [r3]
 800a3c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3d0:	d50d      	bpl.n	800a3ee <kalmanCoreRobustUpdateWithDistance+0x3f6>
                    P_chol[row][col] = 0.0f;
 800a3d2:	4931      	ldr	r1, [pc, #196]	; (800a498 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800a3d4:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800a3d8:	4613      	mov	r3, r2
 800a3da:	00db      	lsls	r3, r3, #3
 800a3dc:	4413      	add	r3, r2
 800a3de:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800a3e2:	4413      	add	r3, r2
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	440b      	add	r3, r1
 800a3e8:	f04f 0200 	mov.w	r2, #0
 800a3ec:	601a      	str	r2, [r3, #0]
            for (int row=col; row<KC_STATE_DIM; row++) {
 800a3ee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800a3f8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800a3fc:	2b08      	cmp	r3, #8
 800a3fe:	f77f af74 	ble.w	800a2ea <kalmanCoreRobustUpdateWithDistance+0x2f2>
        for (int col=0; col<KC_STATE_DIM; col++) {
 800a402:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800a406:	3301      	adds	r3, #1
 800a408:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800a40c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800a410:	2b08      	cmp	r3, #8
 800a412:	f77f af65 	ble.w	800a2e0 <kalmanCoreRobustUpdateWithDistance+0x2e8>
                } 
            }
        }
        // Matrix inversion is numerically sensitive.
        // Add small values on the diagonal of P_chol to avoid numerical problems.
        float dummy_value = 1e-9f;
 800a416:	4b28      	ldr	r3, [pc, #160]	; (800a4b8 <kalmanCoreRobustUpdateWithDistance+0x4c0>)
 800a418:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        for (int k=0; k<KC_STATE_DIM; k++){
 800a41c:	2300      	movs	r3, #0
 800a41e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800a422:	e01c      	b.n	800a45e <kalmanCoreRobustUpdateWithDistance+0x466>
            P_chol[k][k] = P_chol[k][k] + dummy_value;
 800a424:	491c      	ldr	r1, [pc, #112]	; (800a498 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800a426:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 800a42a:	4613      	mov	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4413      	add	r3, r2
 800a430:	00db      	lsls	r3, r3, #3
 800a432:	440b      	add	r3, r1
 800a434:	ed93 7a00 	vldr	s14, [r3]
 800a438:	edd7 7a60 	vldr	s15, [r7, #384]	; 0x180
 800a43c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a440:	4915      	ldr	r1, [pc, #84]	; (800a498 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800a442:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 800a446:	4613      	mov	r3, r2
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	4413      	add	r3, r2
 800a44c:	00db      	lsls	r3, r3, #3
 800a44e:	440b      	add	r3, r1
 800a450:	edc3 7a00 	vstr	s15, [r3]
        for (int k=0; k<KC_STATE_DIM; k++){
 800a454:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a458:	3301      	adds	r3, #1
 800a45a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800a45e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a462:	2b08      	cmp	r3, #8
 800a464:	ddde      	ble.n	800a424 <kalmanCoreRobustUpdateWithDistance+0x42c>
        }
        // keep P_chol
        memcpy(tmp1, P_chol, sizeof(tmp1));
 800a466:	4a15      	ldr	r2, [pc, #84]	; (800a4bc <kalmanCoreRobustUpdateWithDistance+0x4c4>)
 800a468:	4b0b      	ldr	r3, [pc, #44]	; (800a498 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800a46a:	4610      	mov	r0, r2
 800a46c:	4619      	mov	r1, r3
 800a46e:	f44f 73a2 	mov.w	r3, #324	; 0x144
 800a472:	461a      	mov	r2, r3
 800a474:	f019 fb51 	bl	8023b1a <memcpy>
        mat_inv(&tmp1m, &Pc_inv_m);                            // Pc_inv_m = inv(Pc_m) = inv(P_chol)
 800a478:	4911      	ldr	r1, [pc, #68]	; (800a4c0 <kalmanCoreRobustUpdateWithDistance+0x4c8>)
 800a47a:	4812      	ldr	r0, [pc, #72]	; (800a4c4 <kalmanCoreRobustUpdateWithDistance+0x4cc>)
 800a47c:	f7ff fc04 	bl	8009c88 <mat_inv>
        mat_mult(&Pc_inv_m, &x_errm, &e_x_m);                  // e_x_m = Pc_inv_m.dot(x_errm) 
 800a480:	4a11      	ldr	r2, [pc, #68]	; (800a4c8 <kalmanCoreRobustUpdateWithDistance+0x4d0>)
 800a482:	4912      	ldr	r1, [pc, #72]	; (800a4cc <kalmanCoreRobustUpdateWithDistance+0x4d4>)
 800a484:	480e      	ldr	r0, [pc, #56]	; (800a4c0 <kalmanCoreRobustUpdateWithDistance+0x4c8>)
 800a486:	f7ff fc21 	bl	8009ccc <mat_mult>

        // compute w_x, w_y --> weighting matrix
        // Since w_x is diagnal matrix, directly compute the inverse
        for (int state_k = 0; state_k < KC_STATE_DIM; state_k++){
 800a48a:	2300      	movs	r3, #0
 800a48c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800a490:	e04f      	b.n	800a532 <kalmanCoreRobustUpdateWithDistance+0x53a>
 800a492:	bf00      	nop
 800a494:	200095d8 	.word	0x200095d8
 800a498:	200095fc 	.word	0x200095fc
 800a49c:	20000910 	.word	0x20000910
 800a4a0:	20000908 	.word	0x20000908
 800a4a4:	38d1b717 	.word	0x38d1b717
 800a4a8:	42c80000 	.word	0x42c80000
 800a4ac:	42c80000 	.word	0x42c80000
 800a4b0:	c2c80000 	.word	0xc2c80000
 800a4b4:	c2c80000 	.word	0xc2c80000
 800a4b8:	3089705f 	.word	0x3089705f
 800a4bc:	20009740 	.word	0x20009740
 800a4c0:	20000920 	.word	0x20000920
 800a4c4:	20000918 	.word	0x20000918
 800a4c8:	20000930 	.word	0x20000930
 800a4cc:	20000928 	.word	0x20000928
            GM_state(e_x[state_k], &wx_inv[state_k][state_k]);
 800a4d0:	4a93      	ldr	r2, [pc, #588]	; (800a720 <kalmanCoreRobustUpdateWithDistance+0x728>)
 800a4d2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4413      	add	r3, r2
 800a4da:	edd3 7a00 	vldr	s15, [r3]
 800a4de:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	4413      	add	r3, r2
 800a4e8:	00db      	lsls	r3, r3, #3
 800a4ea:	4a8e      	ldr	r2, [pc, #568]	; (800a724 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 800a4ec:	4413      	add	r3, r2
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	eeb0 0a67 	vmov.f32	s0, s15
 800a4f4:	f7ff fd59 	bl	8009faa <GM_state>
            wx_inv[state_k][state_k] = (float)1.0 / wx_inv[state_k][state_k];
 800a4f8:	498a      	ldr	r1, [pc, #552]	; (800a724 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 800a4fa:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800a4fe:	4613      	mov	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	00db      	lsls	r3, r3, #3
 800a506:	440b      	add	r3, r1
 800a508:	ed93 7a00 	vldr	s14, [r3]
 800a50c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a514:	4983      	ldr	r1, [pc, #524]	; (800a724 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 800a516:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800a51a:	4613      	mov	r3, r2
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	4413      	add	r3, r2
 800a520:	00db      	lsls	r3, r3, #3
 800a522:	440b      	add	r3, r1
 800a524:	edc3 7a00 	vstr	s15, [r3]
        for (int state_k = 0; state_k < KC_STATE_DIM; state_k++){
 800a528:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800a52c:	3301      	adds	r3, #1
 800a52e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800a532:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800a536:	2b08      	cmp	r3, #8
 800a538:	ddca      	ble.n	800a4d0 <kalmanCoreRobustUpdateWithDistance+0x4d8>
        }

        // rescale covariance matrix P 
        mat_mult(&Pc_m, &wx_invm, &Pc_w_invm);           // Pc_w_invm = P_chol.dot(linalg.inv(w_x))
 800a53a:	4a7b      	ldr	r2, [pc, #492]	; (800a728 <kalmanCoreRobustUpdateWithDistance+0x730>)
 800a53c:	497b      	ldr	r1, [pc, #492]	; (800a72c <kalmanCoreRobustUpdateWithDistance+0x734>)
 800a53e:	487c      	ldr	r0, [pc, #496]	; (800a730 <kalmanCoreRobustUpdateWithDistance+0x738>)
 800a540:	f7ff fbc4 	bl	8009ccc <mat_mult>
        mat_mult(&Pc_w_invm, &Pc_tran_m, &P_w_m);        // P_w_m = Pc_w_invm.dot(Pc_tran_m) = P_chol.dot(linalg.inv(w_x)).dot(P_chol.T)
 800a544:	4a7b      	ldr	r2, [pc, #492]	; (800a734 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 800a546:	497c      	ldr	r1, [pc, #496]	; (800a738 <kalmanCoreRobustUpdateWithDistance+0x740>)
 800a548:	4877      	ldr	r0, [pc, #476]	; (800a728 <kalmanCoreRobustUpdateWithDistance+0x730>)
 800a54a:	f7ff fbbf 	bl	8009ccc <mat_mult>

        // rescale R matrix                 
        float w_y=0.0;      float R_w = 0.0f;
 800a54e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a552:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800a556:	f04f 0200 	mov.w	r2, #0
 800a55a:	601a      	str	r2, [r3, #0]
 800a55c:	f04f 0300 	mov.w	r3, #0
 800a560:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
        GM_UWB(e_y, &w_y);                              // compute the weighted measurement error: w_y
 800a564:	f107 030c 	add.w	r3, r7, #12
 800a568:	4618      	mov	r0, r3
 800a56a:	ed97 0a75 	vldr	s0, [r7, #468]	; 0x1d4
 800a56e:	f7ff fcf6 	bl	8009f5e <GM_UWB>
        if (fabsf(w_y - 0.0f) < 0.0001f){
 800a572:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a576:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800a57a:	edd3 7a00 	vldr	s15, [r3]
 800a57e:	eef0 7ae7 	vabs.f32	s15, s15
 800a582:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800a73c <kalmanCoreRobustUpdateWithDistance+0x744>
 800a586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a58e:	d50a      	bpl.n	800a5a6 <kalmanCoreRobustUpdateWithDistance+0x5ae>
            R_w = (R_chol * R_chol) / 0.0001f;
 800a590:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 800a594:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a598:	eddf 6a68 	vldr	s13, [pc, #416]	; 800a73c <kalmanCoreRobustUpdateWithDistance+0x744>
 800a59c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a5a0:	edc7 7a70 	vstr	s15, [r7, #448]	; 0x1c0
 800a5a4:	e00d      	b.n	800a5c2 <kalmanCoreRobustUpdateWithDistance+0x5ca>
        }
        else{
            R_w = (R_chol * R_chol) / w_y;
 800a5a6:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 800a5aa:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800a5ae:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a5b2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800a5b6:	ed93 7a00 	vldr	s14, [r3]
 800a5ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5be:	edc7 7a70 	vstr	s15, [r7, #448]	; 0x1c0
        }
        // ====== INNOVATION COVARIANCE ====== //

        mat_trans(&H, &HTm);
 800a5c2:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a5c6:	495e      	ldr	r1, [pc, #376]	; (800a740 <kalmanCoreRobustUpdateWithDistance+0x748>)
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7ff fb3b 	bl	8009c44 <mat_trans>
        mat_mult(&P_w_m, &HTm, &PHTm);        // PHTm = P_w.dot(H.T). The P is the updated P_w 
 800a5ce:	4a5d      	ldr	r2, [pc, #372]	; (800a744 <kalmanCoreRobustUpdateWithDistance+0x74c>)
 800a5d0:	495b      	ldr	r1, [pc, #364]	; (800a740 <kalmanCoreRobustUpdateWithDistance+0x748>)
 800a5d2:	4858      	ldr	r0, [pc, #352]	; (800a734 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 800a5d4:	f7ff fb7a 	bl	8009ccc <mat_mult>

        float HPHR = R_w;                     // HPH' + R.            The R is the updated R_w 
 800a5d8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800a5dc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
        for (int i=0; i<KC_STATE_DIM; i++) {  // Add the element of HPH' to the above
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800a5e6:	e01c      	b.n	800a622 <kalmanCoreRobustUpdateWithDistance+0x62a>
            HPHR += h[i]*PHTd[i];             // this only works if the update is scalar (as in this function)
 800a5e8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800a5f2:	443b      	add	r3, r7
 800a5f4:	3b84      	subs	r3, #132	; 0x84
 800a5f6:	ed93 7a00 	vldr	s14, [r3]
 800a5fa:	4a53      	ldr	r2, [pc, #332]	; (800a748 <kalmanCoreRobustUpdateWithDistance+0x750>)
 800a5fc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	4413      	add	r3, r2
 800a604:	edd3 7a00 	vldr	s15, [r3]
 800a608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a60c:	ed97 7a6f 	vldr	s14, [r7, #444]	; 0x1bc
 800a610:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a614:	edc7 7a6f 	vstr	s15, [r7, #444]	; 0x1bc
        for (int i=0; i<KC_STATE_DIM; i++) {  // Add the element of HPH' to the above
 800a618:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800a61c:	3301      	adds	r3, #1
 800a61e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800a622:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800a626:	2b08      	cmp	r3, #8
 800a628:	ddde      	ble.n	800a5e8 <kalmanCoreRobustUpdateWithDistance+0x5f0>
        }
        // ====== MEASUREMENT UPDATE ======
        // Calculate the Kalman gain and perform the state update
        for (int i=0; i<KC_STATE_DIM; i++) {
 800a62a:	2300      	movs	r3, #0
 800a62c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800a630:	e043      	b.n	800a6ba <kalmanCoreRobustUpdateWithDistance+0x6c2>
            Kw[i] = PHTd[i]/HPHR;                     // rescaled kalman gain = (PH' (HPH' + R )^-1) with the updated P_w and R_w
 800a632:	4a45      	ldr	r2, [pc, #276]	; (800a748 <kalmanCoreRobustUpdateWithDistance+0x750>)
 800a634:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	4413      	add	r3, r2
 800a63c:	edd3 6a00 	vldr	s13, [r3]
 800a640:	ed97 7a6f 	vldr	s14, [r7, #444]	; 0x1bc
 800a644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a648:	4a40      	ldr	r2, [pc, #256]	; (800a74c <kalmanCoreRobustUpdateWithDistance+0x754>)
 800a64a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	4413      	add	r3, r2
 800a652:	edc3 7a00 	vstr	s15, [r3]
            //[Note]: The error_check here is the innovation term based on x_check, which doesn't change during iterations.
            x_err[i] = Kw[i] * error_check;           // error state for next iteration
 800a656:	4a3d      	ldr	r2, [pc, #244]	; (800a74c <kalmanCoreRobustUpdateWithDistance+0x754>)
 800a658:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	4413      	add	r3, r2
 800a660:	ed93 7a00 	vldr	s14, [r3]
 800a664:	edd7 7a67 	vldr	s15, [r7, #412]	; 0x19c
 800a668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a66c:	4a38      	ldr	r2, [pc, #224]	; (800a750 <kalmanCoreRobustUpdateWithDistance+0x758>)
 800a66e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	4413      	add	r3, r2
 800a676:	edc3 7a00 	vstr	s15, [r3]
            X_state[i] = this->S[i] + x_err[i];       // convert to nominal state
 800a67a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a67e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4413      	add	r3, r2
 800a68c:	ed93 7a00 	vldr	s14, [r3]
 800a690:	4a2f      	ldr	r2, [pc, #188]	; (800a750 <kalmanCoreRobustUpdateWithDistance+0x758>)
 800a692:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	4413      	add	r3, r2
 800a69a:	edd3 7a00 	vldr	s15, [r3]
 800a69e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6a2:	4a2c      	ldr	r2, [pc, #176]	; (800a754 <kalmanCoreRobustUpdateWithDistance+0x75c>)
 800a6a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	edc3 7a00 	vstr	s15, [r3]
        for (int i=0; i<KC_STATE_DIM; i++) {
 800a6b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800a6ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800a6be:	2b08      	cmp	r3, #8
 800a6c0:	ddb7      	ble.n	800a632 <kalmanCoreRobustUpdateWithDistance+0x63a>
        }
        // update P_iter matrix and R matrix for next iteration
        memcpy(P_iter, P_w, sizeof(P_iter));
 800a6c2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a6c6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a6ca:	4a23      	ldr	r2, [pc, #140]	; (800a758 <kalmanCoreRobustUpdateWithDistance+0x760>)
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	f44f 73a2 	mov.w	r3, #324	; 0x144
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	f019 fa20 	bl	8023b1a <memcpy>
        R_iter = R_w;
 800a6da:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800a6de:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    for (int iter = 0; iter < MAX_ITER; iter++){
 800a6e2:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800a6ec:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	f77f ad37 	ble.w	800a164 <kalmanCoreRobustUpdateWithDistance+0x16c>
    }


    // After n iterations, we obtain the rescaled (1) P = P_iter, (2) R = R_iter, (3) Kw.
    // Call the kalman update function with weighted P, weighted K, h, and error_check
    kalmanCoreUpdateWithPKE(this, &H, &Kwm, &P_w_m, error_check);
 800a6f6:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 800a6fa:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a6fe:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 800a702:	ed97 0a67 	vldr	s0, [r7, #412]	; 0x19c
 800a706:	4b0b      	ldr	r3, [pc, #44]	; (800a734 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 800a708:	4a14      	ldr	r2, [pc, #80]	; (800a75c <kalmanCoreRobustUpdateWithDistance+0x764>)
 800a70a:	6800      	ldr	r0, [r0, #0]
 800a70c:	f7fc ff04 	bl	8007518 <kalmanCoreUpdateWithPKE>

 800a710:	bf00      	nop
 800a712:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 800a716:	46bd      	mov	sp, r7
 800a718:	ecbd 8b02 	vpop	{d8}
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	20009884 	.word	0x20009884
 800a724:	200098a8 	.word	0x200098a8
 800a728:	20000940 	.word	0x20000940
 800a72c:	20000938 	.word	0x20000938
 800a730:	20000908 	.word	0x20000908
 800a734:	20000948 	.word	0x20000948
 800a738:	20000910 	.word	0x20000910
 800a73c:	38d1b717 	.word	0x38d1b717
 800a740:	20000950 	.word	0x20000950
 800a744:	20000958 	.word	0x20000958
 800a748:	200099ec 	.word	0x200099ec
 800a74c:	20009a10 	.word	0x20009a10
 800a750:	20009a34 	.word	0x20009a34
 800a754:	200095d8 	.word	0x200095d8
 800a758:	20009a58 	.word	0x20009a58
 800a75c:	20000960 	.word	0x20000960

0800a760 <kalmanCoreUpdateWithFlow>:
static float predictedNY;
static float measuredNX;
static float measuredNY;

void kalmanCoreUpdateWithFlow(kalmanCoreData_t* this, const flowMeasurement_t *flow, const Axis3f *gyro)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b0a2      	sub	sp, #136	; 0x88
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
  // Inclusion of flow measurements in the EKF done by two scalar updates

  // ~~~ Camera constants ~~~
  // The angle of aperture is guessed from the raw data register and thankfully look to be symmetric
  float Npix = 35.0;                      // [pixels] (same in x and y)
 800a76c:	4ba2      	ldr	r3, [pc, #648]	; (800a9f8 <kalmanCoreUpdateWithFlow+0x298>)
 800a76e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  //float thetapix = DEG_TO_RAD * 4.0f;     // [rad]    (same in x and y)
  float thetapix = 0.71674f;// 2*sin(42/2); 42degree is the agnle of aperture, here we computed the corresponding ground length
 800a772:	4ba2      	ldr	r3, [pc, #648]	; (800a9fc <kalmanCoreUpdateWithFlow+0x29c>)
 800a774:	67fb      	str	r3, [r7, #124]	; 0x7c
  //~~~ Body rates ~~~
  // TODO check if this is feasible or if some filtering has to be done
  float omegax_b = gyro->x * DEG_TO_RAD;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	edd3 7a00 	vldr	s15, [r3]
 800a77c:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 800aa00 <kalmanCoreUpdateWithFlow+0x2a0>
 800a780:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a784:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
  float omegay_b = gyro->y * DEG_TO_RAD;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	edd3 7a01 	vldr	s15, [r3, #4]
 800a78e:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800aa00 <kalmanCoreUpdateWithFlow+0x2a0>
 800a792:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a796:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
  // Modification 1
  //dx_g = R[0][0] * S[KC_STATE_PX] + R[0][1] * S[KC_STATE_PY] + R[0][2] * S[KC_STATE_PZ];
  //dy_g = R[1][0] * S[KC_STATE_PX] + R[1][1] * S[KC_STATE_PY] + R[1][2] * S[KC_STATE_PZ];


  float dx_g = this->S[KC_STATE_PX];
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	673b      	str	r3, [r7, #112]	; 0x70
  float dy_g = this->S[KC_STATE_PY];
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  float z_g = 0.0;
 800a7a6:	f04f 0300 	mov.w	r3, #0
 800a7aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  // Saturate elevation in prediction and correction to avoid singularities
  if ( this->S[KC_STATE_Z] < 0.1f ) {
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	edd3 7a02 	vldr	s15, [r3, #8]
 800a7b4:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800aa04 <kalmanCoreUpdateWithFlow+0x2a4>
 800a7b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7c0:	d503      	bpl.n	800a7ca <kalmanCoreUpdateWithFlow+0x6a>
      z_g = 0.1;
 800a7c2:	4b91      	ldr	r3, [pc, #580]	; (800aa08 <kalmanCoreUpdateWithFlow+0x2a8>)
 800a7c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a7c8:	e003      	b.n	800a7d2 <kalmanCoreUpdateWithFlow+0x72>
  } else {
      z_g = this->S[KC_STATE_Z];
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  }

  // ~~~ X velocity prediction and update ~~~
  // predicts the number of accumulated pixels in the x-direction
  float hx[KC_STATE_DIM] = {0};
 800a7d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a7d6:	2224      	movs	r2, #36	; 0x24
 800a7d8:	2100      	movs	r1, #0
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f019 f898 	bl	8023910 <memset>
  arm_matrix_instance_f32 Hx = {1, KC_STATE_DIM, hx};
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a7e6:	2309      	movs	r3, #9
 800a7e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a7ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a7f0:	647b      	str	r3, [r7, #68]	; 0x44
  predictedNX = (flow->dt * Npix / thetapix ) * ((dx_g * this->R[2][2] / z_g) - omegay_b);
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	ed93 7a05 	vldr	s14, [r3, #20]
 800a7f8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a7fc:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a800:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800a804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800a80e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a812:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800a816:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a81a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800a81e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a822:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a82a:	4b78      	ldr	r3, [pc, #480]	; (800aa0c <kalmanCoreUpdateWithFlow+0x2ac>)
 800a82c:	edc3 7a00 	vstr	s15, [r3]
  measuredNX = flow->dpixelx*FLOW_RESOLUTION;
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	edd3 7a01 	vldr	s15, [r3, #4]
 800a836:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800aa04 <kalmanCoreUpdateWithFlow+0x2a4>
 800a83a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a83e:	4b74      	ldr	r3, [pc, #464]	; (800aa10 <kalmanCoreUpdateWithFlow+0x2b0>)
 800a840:	edc3 7a00 	vstr	s15, [r3]

  // derive measurement equation with respect to dx (and z?)
  hx[KC_STATE_Z] = (Npix * flow->dt / thetapix) * ((this->R[2][2] * dx_g) / (-z_g * z_g));
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	ed93 7a05 	vldr	s14, [r3, #20]
 800a84a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a84e:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a852:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800a856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800a860:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a864:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800a868:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a86c:	eef1 6a67 	vneg.f32	s13, s15
 800a870:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a874:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a878:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a87c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a880:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
  hx[KC_STATE_PX] = (Npix * flow->dt / thetapix) * (this->R[2][2] / z_g);
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	ed93 7a05 	vldr	s14, [r3, #20]
 800a88a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a88e:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a892:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800a896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 800a8a0:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 800a8a4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a8a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ac:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

  //First update
  kalmanCoreScalarUpdate(this, &Hx, (measuredNX-predictedNX), flow->stdDevX*FLOW_RESOLUTION);
 800a8b0:	4b57      	ldr	r3, [pc, #348]	; (800aa10 <kalmanCoreUpdateWithFlow+0x2b0>)
 800a8b2:	ed93 7a00 	vldr	s14, [r3]
 800a8b6:	4b55      	ldr	r3, [pc, #340]	; (800aa0c <kalmanCoreUpdateWithFlow+0x2ac>)
 800a8b8:	edd3 7a00 	vldr	s15, [r3]
 800a8bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	edd3 7a03 	vldr	s15, [r3, #12]
 800a8c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800aa04 <kalmanCoreUpdateWithFlow+0x2a4>
 800a8ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a8ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a8d2:	eef0 0a67 	vmov.f32	s1, s15
 800a8d6:	eeb0 0a47 	vmov.f32	s0, s14
 800a8da:	4619      	mov	r1, r3
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f7fc fc49 	bl	8007174 <kalmanCoreScalarUpdate>

  // ~~~ Y velocity prediction and update ~~~
  float hy[KC_STATE_DIM] = {0};
 800a8e2:	f107 031c 	add.w	r3, r7, #28
 800a8e6:	2224      	movs	r2, #36	; 0x24
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f019 f810 	bl	8023910 <memset>
  arm_matrix_instance_f32 Hy = {1, KC_STATE_DIM, hy};
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	82bb      	strh	r3, [r7, #20]
 800a8f4:	2309      	movs	r3, #9
 800a8f6:	82fb      	strh	r3, [r7, #22]
 800a8f8:	f107 031c 	add.w	r3, r7, #28
 800a8fc:	61bb      	str	r3, [r7, #24]
  predictedNY = (flow->dt * Npix / thetapix ) * ((dy_g * this->R[2][2] / z_g) + omegax_b);
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	ed93 7a05 	vldr	s14, [r3, #20]
 800a904:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a908:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a90c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800a910:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800a91a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800a91e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800a922:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a926:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800a92a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800a92e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a932:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a936:	4b37      	ldr	r3, [pc, #220]	; (800aa14 <kalmanCoreUpdateWithFlow+0x2b4>)
 800a938:	edc3 7a00 	vstr	s15, [r3]
  measuredNY = flow->dpixely*FLOW_RESOLUTION;
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	edd3 7a02 	vldr	s15, [r3, #8]
 800a942:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800aa04 <kalmanCoreUpdateWithFlow+0x2a4>
 800a946:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a94a:	4b33      	ldr	r3, [pc, #204]	; (800aa18 <kalmanCoreUpdateWithFlow+0x2b8>)
 800a94c:	edc3 7a00 	vstr	s15, [r3]

  // derive measurement equation with respect to dy (and z?)
  hy[KC_STATE_Z] = (Npix * flow->dt / thetapix) * ((this->R[2][2] * dy_g) / (-z_g * z_g));
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	ed93 7a05 	vldr	s14, [r3, #20]
 800a956:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a95a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a95e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800a962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800a96c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800a970:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800a974:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a978:	eef1 6a67 	vneg.f32	s13, s15
 800a97c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a980:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a984:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a98c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  hy[KC_STATE_PY] = (Npix * flow->dt / thetapix) * (this->R[2][2] / z_g);
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	ed93 7a05 	vldr	s14, [r3, #20]
 800a996:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a99a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a99e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800a9a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 800a9ac:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 800a9b0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a9b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9b8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

  // Second update
  kalmanCoreScalarUpdate(this, &Hy, (measuredNY-predictedNY), flow->stdDevY*FLOW_RESOLUTION);
 800a9bc:	4b16      	ldr	r3, [pc, #88]	; (800aa18 <kalmanCoreUpdateWithFlow+0x2b8>)
 800a9be:	ed93 7a00 	vldr	s14, [r3]
 800a9c2:	4b14      	ldr	r3, [pc, #80]	; (800aa14 <kalmanCoreUpdateWithFlow+0x2b4>)
 800a9c4:	edd3 7a00 	vldr	s15, [r3]
 800a9c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	edd3 7a04 	vldr	s15, [r3, #16]
 800a9d2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800aa04 <kalmanCoreUpdateWithFlow+0x2a4>
 800a9d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a9da:	f107 0314 	add.w	r3, r7, #20
 800a9de:	eef0 0a67 	vmov.f32	s1, s15
 800a9e2:	eeb0 0a47 	vmov.f32	s0, s14
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f7fc fbc3 	bl	8007174 <kalmanCoreScalarUpdate>
}
 800a9ee:	bf00      	nop
 800a9f0:	3788      	adds	r7, #136	; 0x88
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	420c0000 	.word	0x420c0000
 800a9fc:	3f377c46 	.word	0x3f377c46
 800aa00:	3c8efa35 	.word	0x3c8efa35
 800aa04:	3dcccccd 	.word	0x3dcccccd
 800aa08:	3dcccccd 	.word	0x3dcccccd
 800aa0c:	20009f8c 	.word	0x20009f8c
 800aa10:	20009f94 	.word	0x20009f94
 800aa14:	20009f90 	.word	0x20009f90
 800aa18:	20009f98 	.word	0x20009f98

0800aa1c <mkvec>:
static inline struct vec mkvec(float x, float y, float z) {
 800aa1c:	b480      	push	{r7}
 800aa1e:	b08f      	sub	sp, #60	; 0x3c
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	ed87 0a07 	vstr	s0, [r7, #28]
 800aa26:	edc7 0a06 	vstr	s1, [r7, #24]
 800aa2a:	ed87 1a05 	vstr	s2, [r7, #20]
	v.x = x; v.y = y; v.z = z;
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	623b      	str	r3, [r7, #32]
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	627b      	str	r3, [r7, #36]	; 0x24
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	62bb      	str	r3, [r7, #40]	; 0x28
	return v;
 800aa3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa3e:	f107 0220 	add.w	r2, r7, #32
 800aa42:	ca07      	ldmia	r2, {r0, r1, r2}
 800aa44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800aa48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa4e:	ee06 1a90 	vmov	s13, r1
 800aa52:	ee07 2a10 	vmov	s14, r2
 800aa56:	ee07 3a90 	vmov	s15, r3
}
 800aa5a:	eeb0 0a66 	vmov.f32	s0, s13
 800aa5e:	eef0 0a47 	vmov.f32	s1, s14
 800aa62:	eeb0 1a67 	vmov.f32	s2, s15
 800aa66:	373c      	adds	r7, #60	; 0x3c
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <vscl>:
//
// operators
//

// multiply a vector by a scalar.
static inline struct vec vscl(float s, struct vec v) {
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b08c      	sub	sp, #48	; 0x30
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	ed87 0a07 	vstr	s0, [r7, #28]
 800aa7a:	eef0 6a60 	vmov.f32	s13, s1
 800aa7e:	eeb0 7a41 	vmov.f32	s14, s2
 800aa82:	eef0 7a61 	vmov.f32	s15, s3
 800aa86:	edc7 6a04 	vstr	s13, [r7, #16]
 800aa8a:	ed87 7a05 	vstr	s14, [r7, #20]
 800aa8e:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(s * v.x , s * v.y, s * v.z);
 800aa92:	ed97 7a04 	vldr	s14, [r7, #16]
 800aa96:	edd7 7a07 	vldr	s15, [r7, #28]
 800aa9a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800aa9e:	ed97 7a05 	vldr	s14, [r7, #20]
 800aaa2:	edd7 7a07 	vldr	s15, [r7, #28]
 800aaa6:	ee27 6a27 	vmul.f32	s12, s14, s15
 800aaaa:	ed97 7a06 	vldr	s14, [r7, #24]
 800aaae:	edd7 7a07 	vldr	s15, [r7, #28]
 800aab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aab6:	eeb0 1a67 	vmov.f32	s2, s15
 800aaba:	eef0 0a46 	vmov.f32	s1, s12
 800aabe:	eeb0 0a66 	vmov.f32	s0, s13
 800aac2:	f7ff ffab 	bl	800aa1c <mkvec>
 800aac6:	eef0 6a40 	vmov.f32	s13, s0
 800aaca:	eeb0 7a60 	vmov.f32	s14, s1
 800aace:	eef0 7a41 	vmov.f32	s15, s2
 800aad2:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800aad6:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800aada:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800aade:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae4:	ee06 1a90 	vmov	s13, r1
 800aae8:	ee07 2a10 	vmov	s14, r2
 800aaec:	ee07 3a90 	vmov	s15, r3
}
 800aaf0:	eeb0 0a66 	vmov.f32	s0, s13
 800aaf4:	eef0 0a47 	vmov.f32	s1, s14
 800aaf8:	eeb0 1a67 	vmov.f32	s2, s15
 800aafc:	3730      	adds	r7, #48	; 0x30
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <mkquat>:
//
// constructors
//

// construct a quaternion from its x, y, z, w elements.
static inline struct quat mkquat(float x, float y, float z, float w) {
 800ab02:	b490      	push	{r4, r7}
 800ab04:	b090      	sub	sp, #64	; 0x40
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	ed87 0a07 	vstr	s0, [r7, #28]
 800ab0c:	edc7 0a06 	vstr	s1, [r7, #24]
 800ab10:	ed87 1a05 	vstr	s2, [r7, #20]
 800ab14:	edc7 1a04 	vstr	s3, [r7, #16]
	struct quat q;
	q.x = x; q.y = y; q.z = z; q.w = w;
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	623b      	str	r3, [r7, #32]
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	627b      	str	r3, [r7, #36]	; 0x24
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	62fb      	str	r3, [r7, #44]	; 0x2c
	return q;
 800ab28:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800ab2c:	f107 0320 	add.w	r3, r7, #32
 800ab30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ab32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ab36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ab3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab3e:	ee06 0a10 	vmov	s12, r0
 800ab42:	ee06 1a90 	vmov	s13, r1
 800ab46:	ee07 2a10 	vmov	s14, r2
 800ab4a:	ee07 3a90 	vmov	s15, r3
}
 800ab4e:	eeb0 0a46 	vmov.f32	s0, s12
 800ab52:	eef0 0a66 	vmov.f32	s1, s13
 800ab56:	eeb0 1a47 	vmov.f32	s2, s14
 800ab5a:	eef0 1a67 	vmov.f32	s3, s15
 800ab5e:	3740      	adds	r7, #64	; 0x40
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bc90      	pop	{r4, r7}
 800ab64:	4770      	bx	lr

0800ab66 <quatimagpart>:
		angle -= 2.0f * M_PI_F;
	}
	return angle;
}
// vector containing the imaginary part of the quaternion, i.e. (x, y, z)
static inline struct vec quatimagpart(struct quat q) {
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b08c      	sub	sp, #48	; 0x30
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	eeb0 6a40 	vmov.f32	s12, s0
 800ab70:	eef0 6a60 	vmov.f32	s13, s1
 800ab74:	eeb0 7a41 	vmov.f32	s14, s2
 800ab78:	eef0 7a61 	vmov.f32	s15, s3
 800ab7c:	ed87 6a04 	vstr	s12, [r7, #16]
 800ab80:	edc7 6a05 	vstr	s13, [r7, #20]
 800ab84:	ed87 7a06 	vstr	s14, [r7, #24]
 800ab88:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkvec(q.x, q.y, q.z);
 800ab8c:	edd7 7a04 	vldr	s15, [r7, #16]
 800ab90:	ed97 7a05 	vldr	s14, [r7, #20]
 800ab94:	edd7 6a06 	vldr	s13, [r7, #24]
 800ab98:	eeb0 1a66 	vmov.f32	s2, s13
 800ab9c:	eef0 0a47 	vmov.f32	s1, s14
 800aba0:	eeb0 0a67 	vmov.f32	s0, s15
 800aba4:	f7ff ff3a 	bl	800aa1c <mkvec>
 800aba8:	eef0 6a40 	vmov.f32	s13, s0
 800abac:	eeb0 7a60 	vmov.f32	s14, s1
 800abb0:	eef0 7a41 	vmov.f32	s15, s2
 800abb4:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800abb8:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800abbc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800abc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800abc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc6:	ee06 1a90 	vmov	s13, r1
 800abca:	ee07 2a10 	vmov	s14, r2
 800abce:	ee07 3a90 	vmov	s15, r3
}
 800abd2:	eeb0 0a66 	vmov.f32	s0, s13
 800abd6:	eef0 0a47 	vmov.f32	s1, s14
 800abda:	eeb0 1a67 	vmov.f32	s2, s15
 800abde:	3730      	adds	r7, #48	; 0x30
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <qqmul>:
		vscl(2.0f * q.w, vcross(qv, v))
	);
}
// multiply (compose) two quaternions
// such that qvrot(qqmul(q, p), v) == qvrot(q, qvrot(p, v)).
static inline struct quat qqmul(struct quat q, struct quat p) {
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b094      	sub	sp, #80	; 0x50
 800abe8:	af00      	add	r7, sp, #0
 800abea:	eeb0 4a40 	vmov.f32	s8, s0
 800abee:	eef0 4a60 	vmov.f32	s9, s1
 800abf2:	eeb0 5a41 	vmov.f32	s10, s2
 800abf6:	eef0 5a61 	vmov.f32	s11, s3
 800abfa:	eeb0 6a42 	vmov.f32	s12, s4
 800abfe:	eef0 6a62 	vmov.f32	s13, s5
 800ac02:	eeb0 7a43 	vmov.f32	s14, s6
 800ac06:	eef0 7a63 	vmov.f32	s15, s7
 800ac0a:	ed87 4a08 	vstr	s8, [r7, #32]
 800ac0e:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800ac12:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800ac16:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 800ac1a:	ed87 6a04 	vstr	s12, [r7, #16]
 800ac1e:	edc7 6a05 	vstr	s13, [r7, #20]
 800ac22:	ed87 7a06 	vstr	s14, [r7, #24]
 800ac26:	edc7 7a07 	vstr	s15, [r7, #28]
	float x =  q.w*p.x + q.z*p.y - q.y*p.z + q.x*p.w;
 800ac2a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800ac2e:	edd7 7a04 	vldr	s15, [r7, #16]
 800ac32:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac36:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ac3a:	edd7 7a05 	vldr	s15, [r7, #20]
 800ac3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac42:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ac46:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ac4a:	edd7 7a06 	vldr	s15, [r7, #24]
 800ac4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac52:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ac56:	edd7 6a08 	vldr	s13, [r7, #32]
 800ac5a:	edd7 7a07 	vldr	s15, [r7, #28]
 800ac5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac62:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac66:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float y = -q.z*p.x + q.w*p.y + q.x*p.z + q.y*p.w;
 800ac6a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac6e:	eeb1 7a67 	vneg.f32	s14, s15
 800ac72:	edd7 7a04 	vldr	s15, [r7, #16]
 800ac76:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac7a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ac7e:	edd7 7a05 	vldr	s15, [r7, #20]
 800ac82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac86:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ac8a:	edd7 6a08 	vldr	s13, [r7, #32]
 800ac8e:	edd7 7a06 	vldr	s15, [r7, #24]
 800ac92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac96:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ac9a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ac9e:	edd7 7a07 	vldr	s15, [r7, #28]
 800aca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acaa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	float z =  q.y*p.x - q.x*p.y + q.w*p.z + q.z*p.w;
 800acae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800acb2:	edd7 7a04 	vldr	s15, [r7, #16]
 800acb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acba:	edd7 6a08 	vldr	s13, [r7, #32]
 800acbe:	edd7 7a05 	vldr	s15, [r7, #20]
 800acc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800acc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800acca:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800acce:	edd7 7a06 	vldr	s15, [r7, #24]
 800acd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800acd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800acda:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800acde:	edd7 7a07 	vldr	s15, [r7, #28]
 800ace2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ace6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acea:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float w = -q.x*p.x - q.y*p.y - q.z*p.z + q.w*p.w;
 800acee:	edd7 7a08 	vldr	s15, [r7, #32]
 800acf2:	eeb1 7a67 	vneg.f32	s14, s15
 800acf6:	edd7 7a04 	vldr	s15, [r7, #16]
 800acfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acfe:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ad02:	edd7 7a05 	vldr	s15, [r7, #20]
 800ad06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ad0e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ad12:	edd7 7a06 	vldr	s15, [r7, #24]
 800ad16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ad1e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ad22:	edd7 7a07 	vldr	s15, [r7, #28]
 800ad26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad2e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	return mkquat(x, y, z, w);
 800ad32:	edd7 1a10 	vldr	s3, [r7, #64]	; 0x40
 800ad36:	ed97 1a11 	vldr	s2, [r7, #68]	; 0x44
 800ad3a:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 800ad3e:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 800ad42:	f7ff fede 	bl	800ab02 <mkquat>
 800ad46:	eeb0 6a40 	vmov.f32	s12, s0
 800ad4a:	eef0 6a60 	vmov.f32	s13, s1
 800ad4e:	eeb0 7a41 	vmov.f32	s14, s2
 800ad52:	eef0 7a61 	vmov.f32	s15, s3
 800ad56:	ed87 6a0c 	vstr	s12, [r7, #48]	; 0x30
 800ad5a:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800ad5e:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800ad62:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800ad66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ad6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad6e:	ee06 0a10 	vmov	s12, r0
 800ad72:	ee06 1a90 	vmov	s13, r1
 800ad76:	ee07 2a10 	vmov	s14, r2
 800ad7a:	ee07 3a90 	vmov	s15, r3
}
 800ad7e:	eeb0 0a46 	vmov.f32	s0, s12
 800ad82:	eef0 0a66 	vmov.f32	s1, s13
 800ad86:	eeb0 1a47 	vmov.f32	s2, s14
 800ad8a:	eef0 1a67 	vmov.f32	s3, s15
 800ad8e:	3750      	adds	r7, #80	; 0x50
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <qinv>:
// invert a quaternion.
static inline struct quat qinv(struct quat q) {
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b08c      	sub	sp, #48	; 0x30
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	eeb0 6a40 	vmov.f32	s12, s0
 800ad9e:	eef0 6a60 	vmov.f32	s13, s1
 800ada2:	eeb0 7a41 	vmov.f32	s14, s2
 800ada6:	eef0 7a61 	vmov.f32	s15, s3
 800adaa:	ed87 6a04 	vstr	s12, [r7, #16]
 800adae:	edc7 6a05 	vstr	s13, [r7, #20]
 800adb2:	ed87 7a06 	vstr	s14, [r7, #24]
 800adb6:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkquat(-q.x, -q.y, -q.z, q.w);
 800adba:	edd7 7a04 	vldr	s15, [r7, #16]
 800adbe:	eeb1 7a67 	vneg.f32	s14, s15
 800adc2:	edd7 7a05 	vldr	s15, [r7, #20]
 800adc6:	eef1 6a67 	vneg.f32	s13, s15
 800adca:	edd7 7a06 	vldr	s15, [r7, #24]
 800adce:	eef1 7a67 	vneg.f32	s15, s15
 800add2:	ed97 6a07 	vldr	s12, [r7, #28]
 800add6:	eef0 1a46 	vmov.f32	s3, s12
 800adda:	eeb0 1a67 	vmov.f32	s2, s15
 800adde:	eef0 0a66 	vmov.f32	s1, s13
 800ade2:	eeb0 0a47 	vmov.f32	s0, s14
 800ade6:	f7ff fe8c 	bl	800ab02 <mkquat>
 800adea:	eeb0 6a40 	vmov.f32	s12, s0
 800adee:	eef0 6a60 	vmov.f32	s13, s1
 800adf2:	eeb0 7a41 	vmov.f32	s14, s2
 800adf6:	eef0 7a61 	vmov.f32	s15, s3
 800adfa:	ed87 6a08 	vstr	s12, [r7, #32]
 800adfe:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800ae02:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800ae06:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800ae0a:	6a38      	ldr	r0, [r7, #32]
 800ae0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae12:	ee06 0a10 	vmov	s12, r0
 800ae16:	ee06 1a90 	vmov	s13, r1
 800ae1a:	ee07 2a10 	vmov	s14, r2
 800ae1e:	ee07 3a90 	vmov	s15, r3
}
 800ae22:	eeb0 0a46 	vmov.f32	s0, s12
 800ae26:	eef0 0a66 	vmov.f32	s1, s13
 800ae2a:	eeb0 1a47 	vmov.f32	s2, s14
 800ae2e:	eef0 1a67 	vmov.f32	s3, s15
 800ae32:	3730      	adds	r7, #48	; 0x30
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <kalmanCoreUpdateWithPose>:

#include "mm_pose.h"
#include "math3d.h"

void kalmanCoreUpdateWithPose(kalmanCoreData_t* this, poseMeasurement_t *pose)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	ed2d 8b02 	vpush	{d8}
 800ae3e:	b0a6      	sub	sp, #152	; 0x98
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  // a direct measurement of states x, y, and z, and orientation
  // do a scalar update for each state, since this should be faster than updating all together
  for (int i=0; i<3; i++) {
 800ae46:	2300      	movs	r3, #0
 800ae48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ae4c:	e038      	b.n	800aec0 <kalmanCoreUpdateWithPose+0x88>
    float h[KC_STATE_DIM] = {0};
 800ae4e:	f107 0308 	add.w	r3, r7, #8
 800ae52:	2224      	movs	r2, #36	; 0x24
 800ae54:	2100      	movs	r1, #0
 800ae56:	4618      	mov	r0, r3
 800ae58:	f018 fd5a 	bl	8023910 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	86bb      	strh	r3, [r7, #52]	; 0x34
 800ae60:	2309      	movs	r3, #9
 800ae62:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ae64:	f107 0308 	add.w	r3, r7, #8
 800ae68:	63bb      	str	r3, [r7, #56]	; 0x38
    h[KC_STATE_X+i] = 1;
 800ae6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	3398      	adds	r3, #152	; 0x98
 800ae72:	443b      	add	r3, r7
 800ae74:	3b90      	subs	r3, #144	; 0x90
 800ae76:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ae7a:	601a      	str	r2, [r3, #0]
    kalmanCoreScalarUpdate(this, &H, pose->pos[i] - this->S[KC_STATE_X+i], pose->stdDevPos);
 800ae7c:	683a      	ldr	r2, [r7, #0]
 800ae7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	4413      	add	r3, r2
 800ae86:	ed93 7a00 	vldr	s14, [r3]
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	edd3 7a00 	vldr	s15, [r3]
 800ae98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	ed93 7a07 	vldr	s14, [r3, #28]
 800aea2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aea6:	eef0 0a47 	vmov.f32	s1, s14
 800aeaa:	eeb0 0a67 	vmov.f32	s0, s15
 800aeae:	4619      	mov	r1, r3
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f7fc f95f 	bl	8007174 <kalmanCoreScalarUpdate>
  for (int i=0; i<3; i++) {
 800aeb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aeba:	3301      	adds	r3, #1
 800aebc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aec0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	ddc2      	ble.n	800ae4e <kalmanCoreUpdateWithPose+0x16>
  }

  // compute orientation error
  struct quat const q_ekf = mkquat(this->q[1], this->q[2], this->q[3], this->q[0]);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 800aee0:	eef0 1a46 	vmov.f32	s3, s12
 800aee4:	eeb0 1a66 	vmov.f32	s2, s13
 800aee8:	eef0 0a47 	vmov.f32	s1, s14
 800aeec:	eeb0 0a67 	vmov.f32	s0, s15
 800aef0:	f7ff fe07 	bl	800ab02 <mkquat>
 800aef4:	eeb0 6a40 	vmov.f32	s12, s0
 800aef8:	eef0 6a60 	vmov.f32	s13, s1
 800aefc:	eeb0 7a41 	vmov.f32	s14, s2
 800af00:	eef0 7a61 	vmov.f32	s15, s3
 800af04:	ed87 6a1a 	vstr	s12, [r7, #104]	; 0x68
 800af08:	edc7 6a1b 	vstr	s13, [r7, #108]	; 0x6c
 800af0c:	ed87 7a1c 	vstr	s14, [r7, #112]	; 0x70
 800af10:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
  struct quat const q_measured = mkquat(pose->quat.x, pose->quat.y, pose->quat.z, pose->quat.w);
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	edd3 7a03 	vldr	s15, [r3, #12]
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	ed93 7a04 	vldr	s14, [r3, #16]
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	edd3 6a05 	vldr	s13, [r3, #20]
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	ed93 6a06 	vldr	s12, [r3, #24]
 800af2c:	eef0 1a46 	vmov.f32	s3, s12
 800af30:	eeb0 1a66 	vmov.f32	s2, s13
 800af34:	eef0 0a47 	vmov.f32	s1, s14
 800af38:	eeb0 0a67 	vmov.f32	s0, s15
 800af3c:	f7ff fde1 	bl	800ab02 <mkquat>
 800af40:	eeb0 6a40 	vmov.f32	s12, s0
 800af44:	eef0 6a60 	vmov.f32	s13, s1
 800af48:	eeb0 7a41 	vmov.f32	s14, s2
 800af4c:	eef0 7a61 	vmov.f32	s15, s3
 800af50:	ed87 6a16 	vstr	s12, [r7, #88]	; 0x58
 800af54:	edc7 6a17 	vstr	s13, [r7, #92]	; 0x5c
 800af58:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 800af5c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  struct quat const q_residual = qqmul(qinv(q_ekf), q_measured);
 800af60:	ed97 6a1a 	vldr	s12, [r7, #104]	; 0x68
 800af64:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800af68:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800af6c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800af70:	eeb0 0a46 	vmov.f32	s0, s12
 800af74:	eef0 0a66 	vmov.f32	s1, s13
 800af78:	eeb0 1a47 	vmov.f32	s2, s14
 800af7c:	eef0 1a67 	vmov.f32	s3, s15
 800af80:	f7ff ff08 	bl	800ad94 <qinv>
 800af84:	eeb0 6a40 	vmov.f32	s12, s0
 800af88:	eef0 6a60 	vmov.f32	s13, s1
 800af8c:	eeb0 7a41 	vmov.f32	s14, s2
 800af90:	eef0 7a61 	vmov.f32	s15, s3
 800af94:	ed87 6a1e 	vstr	s12, [r7, #120]	; 0x78
 800af98:	edc7 6a1f 	vstr	s13, [r7, #124]	; 0x7c
 800af9c:	ed87 7a20 	vstr	s14, [r7, #128]	; 0x80
 800afa0:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 800afa4:	ed97 4a16 	vldr	s8, [r7, #88]	; 0x58
 800afa8:	edd7 4a17 	vldr	s9, [r7, #92]	; 0x5c
 800afac:	ed97 5a18 	vldr	s10, [r7, #96]	; 0x60
 800afb0:	edd7 5a19 	vldr	s11, [r7, #100]	; 0x64
 800afb4:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 800afb8:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 800afbc:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800afc0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800afc4:	eeb0 2a44 	vmov.f32	s4, s8
 800afc8:	eef0 2a64 	vmov.f32	s5, s9
 800afcc:	eeb0 3a45 	vmov.f32	s6, s10
 800afd0:	eef0 3a65 	vmov.f32	s7, s11
 800afd4:	eeb0 0a46 	vmov.f32	s0, s12
 800afd8:	eef0 0a66 	vmov.f32	s1, s13
 800afdc:	eeb0 1a47 	vmov.f32	s2, s14
 800afe0:	eef0 1a67 	vmov.f32	s3, s15
 800afe4:	f7ff fdfe 	bl	800abe4 <qqmul>
 800afe8:	eeb0 6a40 	vmov.f32	s12, s0
 800afec:	eef0 6a60 	vmov.f32	s13, s1
 800aff0:	eeb0 7a41 	vmov.f32	s14, s2
 800aff4:	eef0 7a61 	vmov.f32	s15, s3
 800aff8:	ed87 6a12 	vstr	s12, [r7, #72]	; 0x48
 800affc:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 800b000:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 800b004:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
  // small angle approximation, see eq. 141 in http://mars.cs.umn.edu/tr/reports/Trawny05b.pdf
  struct vec const err_quat = vscl(2.0f / q_residual.w, quatimagpart(q_residual));
 800b008:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800b00c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b010:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800b014:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 800b018:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800b01c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b020:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800b024:	eeb0 0a46 	vmov.f32	s0, s12
 800b028:	eef0 0a66 	vmov.f32	s1, s13
 800b02c:	eeb0 1a47 	vmov.f32	s2, s14
 800b030:	eef0 1a67 	vmov.f32	s3, s15
 800b034:	f7ff fd97 	bl	800ab66 <quatimagpart>
 800b038:	eef0 6a40 	vmov.f32	s13, s0
 800b03c:	eeb0 7a60 	vmov.f32	s14, s1
 800b040:	eef0 7a41 	vmov.f32	s15, s2
 800b044:	edc7 6a22 	vstr	s13, [r7, #136]	; 0x88
 800b048:	ed87 7a23 	vstr	s14, [r7, #140]	; 0x8c
 800b04c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
 800b050:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800b054:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800b058:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b05c:	eef0 0a66 	vmov.f32	s1, s13
 800b060:	eeb0 1a47 	vmov.f32	s2, s14
 800b064:	eef0 1a67 	vmov.f32	s3, s15
 800b068:	eeb0 0a48 	vmov.f32	s0, s16
 800b06c:	f7ff fd00 	bl	800aa70 <vscl>
 800b070:	eef0 6a40 	vmov.f32	s13, s0
 800b074:	eeb0 7a60 	vmov.f32	s14, s1
 800b078:	eef0 7a41 	vmov.f32	s15, s2
 800b07c:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 800b080:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 800b084:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

  // do a scalar update for each state
  {
    float h[KC_STATE_DIM] = {0};
 800b088:	f107 0308 	add.w	r3, r7, #8
 800b08c:	2224      	movs	r2, #36	; 0x24
 800b08e:	2100      	movs	r1, #0
 800b090:	4618      	mov	r0, r3
 800b092:	f018 fc3d 	bl	8023910 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800b096:	2301      	movs	r3, #1
 800b098:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b09a:	2309      	movs	r3, #9
 800b09c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b09e:	f107 0308 	add.w	r3, r7, #8
 800b0a2:	633b      	str	r3, [r7, #48]	; 0x30
    h[KC_STATE_D0] = 1;
 800b0a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b0a8:	623b      	str	r3, [r7, #32]
    kalmanCoreScalarUpdate(this, &H, err_quat.x, pose->stdDevQuat);
 800b0aa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	ed93 7a08 	vldr	s14, [r3, #32]
 800b0b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b0b8:	eef0 0a47 	vmov.f32	s1, s14
 800b0bc:	eeb0 0a67 	vmov.f32	s0, s15
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7fc f856 	bl	8007174 <kalmanCoreScalarUpdate>
    h[KC_STATE_D0] = 0;
 800b0c8:	f04f 0300 	mov.w	r3, #0
 800b0cc:	623b      	str	r3, [r7, #32]

    h[KC_STATE_D1] = 1;
 800b0ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b0d2:	627b      	str	r3, [r7, #36]	; 0x24
    kalmanCoreScalarUpdate(this, &H, err_quat.y, pose->stdDevQuat);
 800b0d4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	ed93 7a08 	vldr	s14, [r3, #32]
 800b0de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b0e2:	eef0 0a47 	vmov.f32	s1, s14
 800b0e6:	eeb0 0a67 	vmov.f32	s0, s15
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f7fc f841 	bl	8007174 <kalmanCoreScalarUpdate>
    h[KC_STATE_D1] = 0;
 800b0f2:	f04f 0300 	mov.w	r3, #0
 800b0f6:	627b      	str	r3, [r7, #36]	; 0x24

    h[KC_STATE_D2] = 1;
 800b0f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b0fc:	62bb      	str	r3, [r7, #40]	; 0x28
    kalmanCoreScalarUpdate(this, &H, err_quat.z, pose->stdDevQuat);
 800b0fe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	ed93 7a08 	vldr	s14, [r3, #32]
 800b108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b10c:	eef0 0a47 	vmov.f32	s1, s14
 800b110:	eeb0 0a67 	vmov.f32	s0, s15
 800b114:	4619      	mov	r1, r3
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7fc f82c 	bl	8007174 <kalmanCoreScalarUpdate>
  }
}
 800b11c:	bf00      	nop
 800b11e:	3798      	adds	r7, #152	; 0x98
 800b120:	46bd      	mov	sp, r7
 800b122:	ecbd 8b02 	vpop	{d8}
 800b126:	bd80      	pop	{r7, pc}

0800b128 <kalmanCoreUpdateWithPosition>:
 */

#include "mm_position.h"

void kalmanCoreUpdateWithPosition(kalmanCoreData_t* this, positionMeasurement_t *xyz)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b08e      	sub	sp, #56	; 0x38
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  // a direct measurement of states x, y, and z
  // do a scalar update for each state, since this should be faster than updating all together
  for (int i=0; i<3; i++) {
 800b132:	2300      	movs	r3, #0
 800b134:	637b      	str	r3, [r7, #52]	; 0x34
 800b136:	e033      	b.n	800b1a0 <kalmanCoreUpdateWithPosition+0x78>
    float h[KC_STATE_DIM] = {0};
 800b138:	f107 0308 	add.w	r3, r7, #8
 800b13c:	2224      	movs	r2, #36	; 0x24
 800b13e:	2100      	movs	r1, #0
 800b140:	4618      	mov	r0, r3
 800b142:	f018 fbe5 	bl	8023910 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800b146:	2301      	movs	r3, #1
 800b148:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b14a:	2309      	movs	r3, #9
 800b14c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b14e:	f107 0308 	add.w	r3, r7, #8
 800b152:	633b      	str	r3, [r7, #48]	; 0x30
    h[KC_STATE_X+i] = 1;
 800b154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	3338      	adds	r3, #56	; 0x38
 800b15a:	443b      	add	r3, r7
 800b15c:	3b30      	subs	r3, #48	; 0x30
 800b15e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b162:	601a      	str	r2, [r3, #0]
    kalmanCoreScalarUpdate(this, &H, xyz->pos[i] - this->S[KC_STATE_X+i], xyz->stdDev);
 800b164:	683a      	ldr	r2, [r7, #0]
 800b166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	4413      	add	r3, r2
 800b16c:	ed93 7a00 	vldr	s14, [r3]
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	4413      	add	r3, r2
 800b178:	edd3 7a00 	vldr	s15, [r3]
 800b17c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	ed93 7a03 	vldr	s14, [r3, #12]
 800b186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b18a:	eef0 0a47 	vmov.f32	s1, s14
 800b18e:	eeb0 0a67 	vmov.f32	s0, s15
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7fb ffed 	bl	8007174 <kalmanCoreScalarUpdate>
  for (int i=0; i<3; i++) {
 800b19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b19c:	3301      	adds	r3, #1
 800b19e:	637b      	str	r3, [r7, #52]	; 0x34
 800b1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	ddc8      	ble.n	800b138 <kalmanCoreUpdateWithPosition+0x10>
  }
}
 800b1a6:	bf00      	nop
 800b1a8:	bf00      	nop
 800b1aa:	3738      	adds	r7, #56	; 0x38
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <assert_aligned_4_bytes>:
static inline void assert_aligned_4_bytes(const arm_matrix_instance_f32* matrix) {
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  const uint32_t address = (uint32_t)matrix->pData;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	60fb      	str	r3, [r7, #12]
  ASSERT((address & 0x3) == 0);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f003 0303 	and.w	r3, r3, #3
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d004      	beq.n	800b1d2 <assert_aligned_4_bytes+0x22>
 800b1c8:	223c      	movs	r2, #60	; 0x3c
 800b1ca:	4904      	ldr	r1, [pc, #16]	; (800b1dc <assert_aligned_4_bytes+0x2c>)
 800b1cc:	4804      	ldr	r0, [pc, #16]	; (800b1e0 <assert_aligned_4_bytes+0x30>)
 800b1ce:	f005 fd25 	bl	8010c1c <assertFail>
}
 800b1d2:	bf00      	nop
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	0802b834 	.word	0x0802b834
 800b1e0:	0802b880 	.word	0x0802b880

0800b1e4 <mat_mult>:
static inline void mat_mult(const arm_matrix_instance_f32 * pSrcA, const arm_matrix_instance_f32 * pSrcB, arm_matrix_instance_f32 * pDst) {
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
  assert_aligned_4_bytes(pSrcA);
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f7ff ffdd 	bl	800b1b0 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pSrcB);
 800b1f6:	68b8      	ldr	r0, [r7, #8]
 800b1f8:	f7ff ffda 	bl	800b1b0 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f7ff ffd7 	bl	800b1b0 <assert_aligned_4_bytes>
  arm_status result = arm_mat_mult_f32(pSrcA, pSrcB, pDst);
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	68b9      	ldr	r1, [r7, #8]
 800b206:	68f8      	ldr	r0, [r7, #12]
 800b208:	f017 fa70 	bl	80226ec <arm_mat_mult_f32>
 800b20c:	4603      	mov	r3, r0
 800b20e:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800b210:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d004      	beq.n	800b222 <mat_mult+0x3e>
 800b218:	2255      	movs	r2, #85	; 0x55
 800b21a:	4904      	ldr	r1, [pc, #16]	; (800b22c <mat_mult+0x48>)
 800b21c:	4804      	ldr	r0, [pc, #16]	; (800b230 <mat_mult+0x4c>)
 800b21e:	f005 fcfd 	bl	8010c1c <assertFail>
}
 800b222:	bf00      	nop
 800b224:	3718      	adds	r7, #24
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	0802b834 	.word	0x0802b834
 800b230:	0802b898 	.word	0x0802b898

0800b234 <arm_sqrt>:
static inline float arm_sqrt(float32_t in) {
 800b234:	b580      	push	{r7, lr}
 800b236:	b086      	sub	sp, #24
 800b238:	af00      	add	r7, sp, #0
 800b23a:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 800b23e:	f04f 0300 	mov.w	r3, #0
 800b242:	60bb      	str	r3, [r7, #8]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	613b      	str	r3, [r7, #16]
 800b248:	f107 0308 	add.w	r3, r7, #8
 800b24c:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 800b24e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b252:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b25a:	db0a      	blt.n	800b272 <arm_sqrt+0x3e>
      *pOut = __builtin_sqrtf(in);
 800b25c:	ed97 0a04 	vldr	s0, [r7, #16]
 800b260:	f01a fafc 	bl	802585c <sqrtf>
 800b264:	eef0 7a40 	vmov.f32	s15, s0
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800b26e:	2300      	movs	r3, #0
 800b270:	e005      	b.n	800b27e <arm_sqrt+0x4a>
      *pOut = 0.0f;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f04f 0200 	mov.w	r2, #0
 800b278:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800b27a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  arm_status result = arm_sqrt_f32(in, &pOut);
 800b27e:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800b280:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d004      	beq.n	800b292 <arm_sqrt+0x5e>
 800b288:	225b      	movs	r2, #91	; 0x5b
 800b28a:	4906      	ldr	r1, [pc, #24]	; (800b2a4 <arm_sqrt+0x70>)
 800b28c:	4806      	ldr	r0, [pc, #24]	; (800b2a8 <arm_sqrt+0x74>)
 800b28e:	f005 fcc5 	bl	8010c1c <assertFail>
  return pOut;
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	ee07 3a90 	vmov	s15, r3
}
 800b298:	eeb0 0a67 	vmov.f32	s0, s15
 800b29c:	3718      	adds	r7, #24
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	0802b834 	.word	0x0802b834
 800b2a8:	0802b898 	.word	0x0802b898

0800b2ac <kalmanCoreUpdateWithSweepAngles>:
 */

#include "mm_sweep_angles.h"


void kalmanCoreUpdateWithSweepAngles(kalmanCoreData_t *this, sweepAngleMeasurement_t *sweepInfo, const uint32_t nowMs, OutlierFilterLhState_t* sweepOutlierFilterState) {
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b0c2      	sub	sp, #264	; 0x108
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b2b8:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800b2bc:	6001      	str	r1, [r0, #0]
 800b2be:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800b2c2:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 800b2c6:	600a      	str	r2, [r1, #0]
 800b2c8:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800b2cc:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800b2d0:	6013      	str	r3, [r2, #0]
  // Rotate the sensor position from CF reference frame to global reference frame,
  // using the CF roatation matrix
  vec3d s;
  arm_matrix_instance_f32 Rcf_ = {3, 3, (float32_t *)this->R};
 800b2d2:	2303      	movs	r3, #3
 800b2d4:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800b2d8:	2303      	movs	r3, #3
 800b2da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	3334      	adds	r3, #52	; 0x34
 800b2e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  arm_matrix_instance_f32 scf_ = {3, 1, (float32_t *)*sweepInfo->sensorPos};
 800b2e6:	2303      	movs	r3, #3
 800b2e8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800b2f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2f6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  arm_matrix_instance_f32 s_ = {3, 1, s};
 800b302:	2303      	movs	r3, #3
 800b304:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 800b308:	2301      	movs	r3, #1
 800b30a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800b30e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800b312:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  mat_mult(&Rcf_, &scf_, &s_);
 800b316:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800b31a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800b31e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800b322:	4618      	mov	r0, r3
 800b324:	f7ff ff5e 	bl	800b1e4 <mat_mult>

  // Get the current state values of the position of the crazyflie (global reference frame) and add the relative sensor pos
  vec3d pcf = {this->S[KC_STATE_X] + s[0], this->S[KC_STATE_Y] + s[1], this->S[KC_STATE_Z] + s[2]};
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	ed93 7a00 	vldr	s14, [r3]
 800b32e:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800b332:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b336:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	ed93 7a01 	vldr	s14, [r3, #4]
 800b340:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 800b344:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b348:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	ed93 7a02 	vldr	s14, [r3, #8]
 800b352:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800b356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b35a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

  // Calculate the difference between the rotor and the sensor on the CF (global reference frame)
  const vec3d* pr = sweepInfo->rotorPos;
 800b35e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b362:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  vec3d stmp = {pcf[0] - (*pr)[0], pcf[1] - (*pr)[1], pcf[2] - (*pr)[2]};
 800b36e:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800b372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b376:	edd3 7a00 	vldr	s15, [r3]
 800b37a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b37e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 800b382:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800b386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b38a:	edd3 7a01 	vldr	s15, [r3, #4]
 800b38e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b392:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
 800b396:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800b39a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b39e:	edd3 7a02 	vldr	s15, [r3, #8]
 800b3a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3a6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
  arm_matrix_instance_f32 stmp_ = {3, 1, stmp};
 800b3aa:	2303      	movs	r3, #3
 800b3ac:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800b3b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800b3ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  // Rotate the difference in position to the rotor reference frame,
  // using the rotor inverse rotation matrix
  vec3d sr;
  arm_matrix_instance_f32 Rr_inv_ = {3, 3, (float32_t *)(*sweepInfo->rotorRotInv)};
 800b3be:	2303      	movs	r3, #3
 800b3c0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800b3ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3ce:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  arm_matrix_instance_f32 sr_ = {3, 1, sr};
 800b3d8:	2303      	movs	r3, #3
 800b3da:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800b3de:	2301      	movs	r3, #1
 800b3e0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800b3e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b3e8:	677b      	str	r3, [r7, #116]	; 0x74
  mat_mult(&Rr_inv_, &stmp_, &sr_);
 800b3ea:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b3ee:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800b3f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7ff fef4 	bl	800b1e4 <mat_mult>

  // The following computations are in the rotor refernece frame
  const float x = sr[0];
 800b3fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b400:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  const float y = sr[1];
 800b404:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b408:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  const float z = sr[2];
 800b40c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b410:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  const float t = sweepInfo->t;
 800b414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b418:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	699b      	ldr	r3, [r3, #24]
 800b420:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  const float tan_t = tanf(t);
 800b424:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 800b428:	f01a fac8 	bl	80259bc <tanf>
 800b42c:	ed87 0a3c 	vstr	s0, [r7, #240]	; 0xf0

  const float r2 = x * x + y * y;
 800b430:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 800b434:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b438:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800b43c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b440:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b444:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec
  const float r = arm_sqrt(r2);
 800b448:	ed97 0a3b 	vldr	s0, [r7, #236]	; 0xec
 800b44c:	f7ff fef2 	bl	800b234 <arm_sqrt>
 800b450:	ed87 0a3a 	vstr	s0, [r7, #232]	; 0xe8

  const float predictedSweepAngle = sweepInfo->calibrationMeasurementModel(x, y, z, t, sweepInfo->calib);
 800b454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b458:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b460:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800b464:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800b468:	6812      	ldr	r2, [r2, #0]
 800b46a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b46c:	4610      	mov	r0, r2
 800b46e:	edd7 1a3d 	vldr	s3, [r7, #244]	; 0xf4
 800b472:	ed97 1a3e 	vldr	s2, [r7, #248]	; 0xf8
 800b476:	edd7 0a3f 	vldr	s1, [r7, #252]	; 0xfc
 800b47a:	ed97 0a40 	vldr	s0, [r7, #256]	; 0x100
 800b47e:	4798      	blx	r3
 800b480:	ed87 0a39 	vstr	s0, [r7, #228]	; 0xe4
  const float measuredSweepAngle = sweepInfo->measuredSweepAngle;
 800b484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b488:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	69db      	ldr	r3, [r3, #28]
 800b490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  const float error = measuredSweepAngle - predictedSweepAngle;
 800b494:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 800b498:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800b49c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4a0:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc

  if (outlierFilterLighthouseValidateSweep(sweepOutlierFilterState, r, error, nowMs)) {
 800b4a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a8:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 800b4ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4b4:	6811      	ldr	r1, [r2, #0]
 800b4b6:	edd7 0a37 	vldr	s1, [r7, #220]	; 0xdc
 800b4ba:	ed97 0a3a 	vldr	s0, [r7, #232]	; 0xe8
 800b4be:	6818      	ldr	r0, [r3, #0]
 800b4c0:	f001 f8d2 	bl	800c668 <outlierFilterLighthouseValidateSweep>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	f000 80a2 	beq.w	800b610 <kalmanCoreUpdateWithSweepAngles+0x364>
    // Calculate H vector (in the rotor reference frame)
    const float z_tan_t = z * tan_t;
 800b4cc:	ed97 7a3e 	vldr	s14, [r7, #248]	; 0xf8
 800b4d0:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 800b4d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4d8:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
    const float qNum = r2 - z_tan_t * z_tan_t;
 800b4dc:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 800b4e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b4e4:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 800b4e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4ec:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
    // Avoid singularity
    if (qNum > 0.0001f) {
 800b4f0:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800b4f4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b61c <kalmanCoreUpdateWithSweepAngles+0x370>
 800b4f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b500:	dc00      	bgt.n	800b504 <kalmanCoreUpdateWithSweepAngles+0x258>

      arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
      kalmanCoreScalarUpdate(this, &H, error, sweepInfo->stdDev);
    }
  }
}
 800b502:	e085      	b.n	800b610 <kalmanCoreUpdateWithSweepAngles+0x364>
      const float q = tan_t / arm_sqrt(qNum);
 800b504:	ed97 0a35 	vldr	s0, [r7, #212]	; 0xd4
 800b508:	f7ff fe94 	bl	800b234 <arm_sqrt>
 800b50c:	eef0 6a40 	vmov.f32	s13, s0
 800b510:	ed97 7a3c 	vldr	s14, [r7, #240]	; 0xf0
 800b514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b518:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
      vec3d gr = {(-y - x * z * q) / r2, (x - y * z * q) / r2 , q};
 800b51c:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800b520:	eeb1 7a67 	vneg.f32	s14, s15
 800b524:	edd7 6a40 	vldr	s13, [r7, #256]	; 0x100
 800b528:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 800b52c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b530:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800b534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b538:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b53c:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 800b540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b544:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
 800b548:	ed97 7a3f 	vldr	s14, [r7, #252]	; 0xfc
 800b54c:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 800b550:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b554:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800b558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b55c:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 800b560:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b564:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 800b568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b56c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 800b570:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b574:	66fb      	str	r3, [r7, #108]	; 0x6c
      arm_matrix_instance_f32 gr_ = {3, 1, gr};
 800b576:	2303      	movs	r3, #3
 800b578:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800b57c:	2301      	movs	r3, #1
 800b57e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800b582:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b586:	657b      	str	r3, [r7, #84]	; 0x54
      arm_matrix_instance_f32 Rr_ = {3, 3, (float32_t *)(*sweepInfo->rotorRot)};
 800b588:	2303      	movs	r3, #3
 800b58a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b58e:	2303      	movs	r3, #3
 800b590:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b598:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	64fb      	str	r3, [r7, #76]	; 0x4c
      arm_matrix_instance_f32 g_ = {3, 1, g};
 800b5a2:	2303      	movs	r3, #3
 800b5a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b5ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b5b2:	647b      	str	r3, [r7, #68]	; 0x44
      mat_mult(&Rr_, &gr_, &g_);
 800b5b4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b5b8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800b5bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7ff fe0f 	bl	800b1e4 <mat_mult>
      float h[KC_STATE_DIM] = {0};
 800b5c6:	f107 0314 	add.w	r3, r7, #20
 800b5ca:	2224      	movs	r2, #36	; 0x24
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f018 f99e 	bl	8023910 <memset>
      h[KC_STATE_X] = g[0];
 800b5d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5d6:	617b      	str	r3, [r7, #20]
      h[KC_STATE_Y] = g[1];
 800b5d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5da:	61bb      	str	r3, [r7, #24]
      h[KC_STATE_Z] = g[2];
 800b5dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5de:	61fb      	str	r3, [r7, #28]
      arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	873b      	strh	r3, [r7, #56]	; 0x38
 800b5e4:	2309      	movs	r3, #9
 800b5e6:	877b      	strh	r3, [r7, #58]	; 0x3a
 800b5e8:	f107 0314 	add.w	r3, r7, #20
 800b5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
      kalmanCoreScalarUpdate(this, &H, error, sweepInfo->stdDev);
 800b5ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	edd3 7a08 	vldr	s15, [r3, #32]
 800b5fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b600:	eef0 0a67 	vmov.f32	s1, s15
 800b604:	ed97 0a37 	vldr	s0, [r7, #220]	; 0xdc
 800b608:	4619      	mov	r1, r3
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f7fb fdb2 	bl	8007174 <kalmanCoreScalarUpdate>
}
 800b610:	bf00      	nop
 800b612:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	38d1b717 	.word	0x38d1b717

0800b620 <kalmanCoreUpdateWithTdoa>:
#if CONFIG_ESTIMATOR_KALMAN_TDOA_OUTLIERFILTER_FALLBACK
#include "outlierFilterTdoaSteps.h"
#endif

void kalmanCoreUpdateWithTdoa(kalmanCoreData_t* this, tdoaMeasurement_t *tdoa, const uint32_t nowMs, OutlierFilterTdoaState_t* outlierFilterState)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	ed2d 8b02 	vpush	{d8}
 800b626:	b0a4      	sub	sp, #144	; 0x90
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
 800b630:	603b      	str	r3, [r7, #0]
  /**
   * Measurement equation:
   * dR = dT + d1 - d0
   */

  float measurement = tdoa->distanceDiff;
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b636:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  // predict based on current state
  float x = this->S[KC_STATE_X];
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  float y = this->S[KC_STATE_Y];
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  float z = this->S[KC_STATE_Z];
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	689b      	ldr	r3, [r3, #8]
 800b64e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  float x1 = tdoa->anchorPositions[1].x, y1 = tdoa->anchorPositions[1].y, z1 = tdoa->anchorPositions[1].z;
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	695b      	ldr	r3, [r3, #20]
 800b656:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	699b      	ldr	r3, [r3, #24]
 800b65c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	69db      	ldr	r3, [r3, #28]
 800b662:	677b      	str	r3, [r7, #116]	; 0x74
  float x0 = tdoa->anchorPositions[0].x, y0 = tdoa->anchorPositions[0].y, z0 = tdoa->anchorPositions[0].z;
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	673b      	str	r3, [r7, #112]	; 0x70
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	66bb      	str	r3, [r7, #104]	; 0x68

  float dx1 = x - x1;
 800b676:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800b67a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800b67e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b682:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  float dy1 = y - y1;
 800b686:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800b68a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800b68e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b692:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
  float dz1 = z - z1;
 800b696:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b69a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800b69e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6a2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

  float dy0 = y - y0;
 800b6a6:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800b6aa:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800b6ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6b2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
  float dx0 = x - x0;
 800b6b6:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800b6ba:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800b6be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6c2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
  float dz0 = z - z0;
 800b6c6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b6ca:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800b6ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6d2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

  float d1 = sqrtf(powf(dx1, 2) + powf(dy1, 2) + powf(dz1, 2));
 800b6d6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800b6da:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 800b6de:	f01a f865 	bl	80257ac <powf>
 800b6e2:	eeb0 8a40 	vmov.f32	s16, s0
 800b6e6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800b6ea:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 800b6ee:	f01a f85d 	bl	80257ac <powf>
 800b6f2:	eef0 7a40 	vmov.f32	s15, s0
 800b6f6:	ee38 8a27 	vadd.f32	s16, s16, s15
 800b6fa:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800b6fe:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 800b702:	f01a f853 	bl	80257ac <powf>
 800b706:	eef0 7a40 	vmov.f32	s15, s0
 800b70a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800b70e:	eeb0 0a67 	vmov.f32	s0, s15
 800b712:	f01a f8a3 	bl	802585c <sqrtf>
 800b716:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
  float d0 = sqrtf(powf(dx0, 2) + powf(dy0, 2) + powf(dz0, 2));
 800b71a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800b71e:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 800b722:	f01a f843 	bl	80257ac <powf>
 800b726:	eeb0 8a40 	vmov.f32	s16, s0
 800b72a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800b72e:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 800b732:	f01a f83b 	bl	80257ac <powf>
 800b736:	eef0 7a40 	vmov.f32	s15, s0
 800b73a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800b73e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800b742:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 800b746:	f01a f831 	bl	80257ac <powf>
 800b74a:	eef0 7a40 	vmov.f32	s15, s0
 800b74e:	ee78 7a27 	vadd.f32	s15, s16, s15
 800b752:	eeb0 0a67 	vmov.f32	s0, s15
 800b756:	f01a f881 	bl	802585c <sqrtf>
 800b75a:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

  float predicted = d1 - d0;
 800b75e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b762:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800b766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b76a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  float error = measurement - predicted;
 800b76e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800b772:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b77a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  float h[KC_STATE_DIM] = {0};
 800b77e:	f107 0318 	add.w	r3, r7, #24
 800b782:	2224      	movs	r2, #36	; 0x24
 800b784:	2100      	movs	r1, #0
 800b786:	4618      	mov	r0, r3
 800b788:	f018 f8c2 	bl	8023910 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800b78c:	2301      	movs	r3, #1
 800b78e:	823b      	strh	r3, [r7, #16]
 800b790:	2309      	movs	r3, #9
 800b792:	827b      	strh	r3, [r7, #18]
 800b794:	f107 0318 	add.w	r3, r7, #24
 800b798:	617b      	str	r3, [r7, #20]

  if ((d0 != 0.0f) && (d1 != 0.0f)) {
 800b79a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800b79e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a6:	d051      	beq.n	800b84c <kalmanCoreUpdateWithTdoa+0x22c>
 800b7a8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b7ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b4:	d04a      	beq.n	800b84c <kalmanCoreUpdateWithTdoa+0x22c>
    h[KC_STATE_X] = (dx1 / d1 - dx0 / d0);
 800b7b6:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800b7ba:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b7be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7c2:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800b7c6:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800b7ca:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b7ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7d2:	edc7 7a06 	vstr	s15, [r7, #24]
    h[KC_STATE_Y] = (dy1 / d1 - dy0 / d0);
 800b7d6:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800b7da:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b7de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7e2:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800b7e6:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800b7ea:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b7ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7f2:	edc7 7a07 	vstr	s15, [r7, #28]
    h[KC_STATE_Z] = (dz1 / d1 - dz0 / d0);
 800b7f6:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800b7fa:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b7fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b802:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 800b806:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800b80a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b80e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b812:	edc7 7a08 	vstr	s15, [r7, #32]
      .z = this->S[KC_STATE_Z],
    };

    bool sampleIsGood = outlierFilterTdoaValidateSteps(tdoa, error, &jacobian, &estimatedPosition);
    #else
    bool sampleIsGood = outlierFilterTdoaValidateIntegrator(outlierFilterState, tdoa, error, nowMs);
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 800b81c:	68b9      	ldr	r1, [r7, #8]
 800b81e:	6838      	ldr	r0, [r7, #0]
 800b820:	f000 ff98 	bl	800c754 <outlierFilterTdoaValidateIntegrator>
 800b824:	4603      	mov	r3, r0
 800b826:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    #endif

    if (sampleIsGood) {
 800b82a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00c      	beq.n	800b84c <kalmanCoreUpdateWithTdoa+0x22c>
      kalmanCoreScalarUpdate(this, &H, error, tdoa->stdDev);
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800b838:	f107 0310 	add.w	r3, r7, #16
 800b83c:	eef0 0a67 	vmov.f32	s1, s15
 800b840:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 800b844:	4619      	mov	r1, r3
 800b846:	68f8      	ldr	r0, [r7, #12]
 800b848:	f7fb fc94 	bl	8007174 <kalmanCoreScalarUpdate>
    }
  }
}
 800b84c:	bf00      	nop
 800b84e:	3790      	adds	r7, #144	; 0x90
 800b850:	46bd      	mov	sp, r7
 800b852:	ecbd 8b02 	vpop	{d8}
 800b856:	bd80      	pop	{r7, pc}

0800b858 <assert_aligned_4_bytes>:
static inline void assert_aligned_4_bytes(const arm_matrix_instance_f32* matrix) {
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  const uint32_t address = (uint32_t)matrix->pData;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	60fb      	str	r3, [r7, #12]
  ASSERT((address & 0x3) == 0);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f003 0303 	and.w	r3, r3, #3
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d004      	beq.n	800b87a <assert_aligned_4_bytes+0x22>
 800b870:	223c      	movs	r2, #60	; 0x3c
 800b872:	4904      	ldr	r1, [pc, #16]	; (800b884 <assert_aligned_4_bytes+0x2c>)
 800b874:	4804      	ldr	r0, [pc, #16]	; (800b888 <assert_aligned_4_bytes+0x30>)
 800b876:	f005 f9d1 	bl	8010c1c <assertFail>
}
 800b87a:	bf00      	nop
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	0802b8b4 	.word	0x0802b8b4
 800b888:	0802b900 	.word	0x0802b900

0800b88c <mat_trans>:
static inline void mat_trans(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f7ff ffde 	bl	800b858 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800b89c:	6838      	ldr	r0, [r7, #0]
 800b89e:	f7ff ffdb 	bl	800b858 <assert_aligned_4_bytes>
  arm_status result = arm_mat_trans_f32(pSrc, pDst);
 800b8a2:	6839      	ldr	r1, [r7, #0]
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f016 fe73 	bl	8022590 <arm_mat_trans_f32>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 800b8ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d004      	beq.n	800b8c0 <mat_trans+0x34>
 800b8b6:	2244      	movs	r2, #68	; 0x44
 800b8b8:	4903      	ldr	r1, [pc, #12]	; (800b8c8 <mat_trans+0x3c>)
 800b8ba:	4804      	ldr	r0, [pc, #16]	; (800b8cc <mat_trans+0x40>)
 800b8bc:	f005 f9ae 	bl	8010c1c <assertFail>
}
 800b8c0:	bf00      	nop
 800b8c2:	3710      	adds	r7, #16
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	0802b8b4 	.word	0x0802b8b4
 800b8cc:	0802b918 	.word	0x0802b918

0800b8d0 <mat_inv>:
static inline void mat_inv(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff ffbc 	bl	800b858 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800b8e0:	6838      	ldr	r0, [r7, #0]
 800b8e2:	f7ff ffb9 	bl	800b858 <assert_aligned_4_bytes>
  arm_status result = arm_mat_inverse_f32(pSrc, pDst);
 800b8e6:	6839      	ldr	r1, [r7, #0]
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f016 ff9f 	bl	802282c <arm_mat_inverse_f32>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 800b8f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d004      	beq.n	800b904 <mat_inv+0x34>
 800b8fa:	224c      	movs	r2, #76	; 0x4c
 800b8fc:	4903      	ldr	r1, [pc, #12]	; (800b90c <mat_inv+0x3c>)
 800b8fe:	4804      	ldr	r0, [pc, #16]	; (800b910 <mat_inv+0x40>)
 800b900:	f005 f98c 	bl	8010c1c <assertFail>
}
 800b904:	bf00      	nop
 800b906:	3710      	adds	r7, #16
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	0802b8b4 	.word	0x0802b8b4
 800b910:	0802b918 	.word	0x0802b918

0800b914 <mat_mult>:
static inline void mat_mult(const arm_matrix_instance_f32 * pSrcA, const arm_matrix_instance_f32 * pSrcB, arm_matrix_instance_f32 * pDst) {
 800b914:	b580      	push	{r7, lr}
 800b916:	b086      	sub	sp, #24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
  assert_aligned_4_bytes(pSrcA);
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f7ff ff99 	bl	800b858 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pSrcB);
 800b926:	68b8      	ldr	r0, [r7, #8]
 800b928:	f7ff ff96 	bl	800b858 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f7ff ff93 	bl	800b858 <assert_aligned_4_bytes>
  arm_status result = arm_mat_mult_f32(pSrcA, pSrcB, pDst);
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	68b9      	ldr	r1, [r7, #8]
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f016 fed8 	bl	80226ec <arm_mat_mult_f32>
 800b93c:	4603      	mov	r3, r0
 800b93e:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800b940:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d004      	beq.n	800b952 <mat_mult+0x3e>
 800b948:	2255      	movs	r2, #85	; 0x55
 800b94a:	4904      	ldr	r1, [pc, #16]	; (800b95c <mat_mult+0x48>)
 800b94c:	4804      	ldr	r0, [pc, #16]	; (800b960 <mat_mult+0x4c>)
 800b94e:	f005 f965 	bl	8010c1c <assertFail>
}
 800b952:	bf00      	nop
 800b954:	3718      	adds	r7, #24
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	0802b8b4 	.word	0x0802b8b4
 800b960:	0802b918 	.word	0x0802b918

0800b964 <Cholesky_Decomposition>:
#define UPPER_BOUND (100)
#define LOWER_BOUND (-100)

// Cholesky Decomposition for a nxn psd matrix (from scratch)
// Reference: https://www.geeksforgeeks.org/cholesky-decomposition-matrix-decomposition/
static void Cholesky_Decomposition(int n, float matrix[n][n],  float lower[n][n]){
 800b964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b968:	b08d      	sub	sp, #52	; 0x34
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	60f8      	str	r0, [r7, #12]
 800b96e:	60b9      	str	r1, [r7, #8]
 800b970:	607a      	str	r2, [r7, #4]
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	603a      	str	r2, [r7, #0]
 800b976:	1e53      	subs	r3, r2, #1
 800b978:	61bb      	str	r3, [r7, #24]
 800b97a:	2300      	movs	r3, #0
 800b97c:	4690      	mov	r8, r2
 800b97e:	4699      	mov	r9, r3
 800b980:	f04f 0200 	mov.w	r2, #0
 800b984:	f04f 0300 	mov.w	r3, #0
 800b988:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800b98c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800b990:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800b994:	68fe      	ldr	r6, [r7, #12]
 800b996:	1e73      	subs	r3, r6, #1
 800b998:	617b      	str	r3, [r7, #20]
 800b99a:	4632      	mov	r2, r6
 800b99c:	2300      	movs	r3, #0
 800b99e:	4614      	mov	r4, r2
 800b9a0:	461d      	mov	r5, r3
 800b9a2:	f04f 0200 	mov.w	r2, #0
 800b9a6:	f04f 0300 	mov.w	r3, #0
 800b9aa:	016b      	lsls	r3, r5, #5
 800b9ac:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800b9b0:	0162      	lsls	r2, r4, #5
    // Decomposing a matrix into Lower Triangular
    for (int i = 0; i < n; i++) {
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9b6:	e0af      	b.n	800bb18 <Cholesky_Decomposition+0x1b4>
        for (int j = 0; j <= i; j++) {
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9bc:	e0a4      	b.n	800bb08 <Cholesky_Decomposition+0x1a4>
            float sum = 0.0;
 800b9be:	f04f 0300 	mov.w	r3, #0
 800b9c2:	627b      	str	r3, [r7, #36]	; 0x24
            if (j == i) // summation for diagnols
 800b9c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d146      	bne.n	800ba5a <Cholesky_Decomposition+0xf6>
            {
                for (int k = 0; k < j; k++)
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	623b      	str	r3, [r7, #32]
 800b9d0:	e01c      	b.n	800ba0c <Cholesky_Decomposition+0xa8>
                    sum += powf(lower[j][k], 2);
 800b9d2:	4632      	mov	r2, r6
 800b9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d6:	fb02 f303 	mul.w	r3, r2, r3
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	441a      	add	r2, r3
 800b9e0:	6a3b      	ldr	r3, [r7, #32]
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	4413      	add	r3, r2
 800b9e6:	edd3 7a00 	vldr	s15, [r3]
 800b9ea:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800b9ee:	eeb0 0a67 	vmov.f32	s0, s15
 800b9f2:	f019 fedb 	bl	80257ac <powf>
 800b9f6:	eeb0 7a40 	vmov.f32	s14, s0
 800b9fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b9fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba02:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                for (int k = 0; k < j; k++)
 800ba06:	6a3b      	ldr	r3, [r7, #32]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	623b      	str	r3, [r7, #32]
 800ba0c:	6a3a      	ldr	r2, [r7, #32]
 800ba0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba10:	429a      	cmp	r2, r3
 800ba12:	dbde      	blt.n	800b9d2 <Cholesky_Decomposition+0x6e>
                lower[j][j] = sqrtf(matrix[j][j] - sum);
 800ba14:	683a      	ldr	r2, [r7, #0]
 800ba16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba18:	fb02 f303 	mul.w	r3, r2, r3
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	68ba      	ldr	r2, [r7, #8]
 800ba20:	441a      	add	r2, r3
 800ba22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	4413      	add	r3, r2
 800ba28:	ed93 7a00 	vldr	s14, [r3]
 800ba2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ba30:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba34:	4632      	mov	r2, r6
 800ba36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba38:	fb02 f303 	mul.w	r3, r2, r3
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	18d4      	adds	r4, r2, r3
 800ba42:	eeb0 0a67 	vmov.f32	s0, s15
 800ba46:	f019 ff09 	bl	802585c <sqrtf>
 800ba4a:	eef0 7a40 	vmov.f32	s15, s0
 800ba4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	4423      	add	r3, r4
 800ba54:	edc3 7a00 	vstr	s15, [r3]
 800ba58:	e053      	b.n	800bb02 <Cholesky_Decomposition+0x19e>
            } else {
                for (int k = 0; k < j; k++)
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	61fb      	str	r3, [r7, #28]
 800ba5e:	e022      	b.n	800baa6 <Cholesky_Decomposition+0x142>
                    sum += (lower[i][k] * lower[j][k]);
 800ba60:	4632      	mov	r2, r6
 800ba62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba64:	fb02 f303 	mul.w	r3, r2, r3
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	441a      	add	r2, r3
 800ba6e:	69fb      	ldr	r3, [r7, #28]
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	4413      	add	r3, r2
 800ba74:	ed93 7a00 	vldr	s14, [r3]
 800ba78:	4632      	mov	r2, r6
 800ba7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7c:	fb02 f303 	mul.w	r3, r2, r3
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	441a      	add	r2, r3
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	4413      	add	r3, r2
 800ba8c:	edd3 7a00 	vldr	s15, [r3]
 800ba90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba94:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ba98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba9c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                for (int k = 0; k < j; k++)
 800baa0:	69fb      	ldr	r3, [r7, #28]
 800baa2:	3301      	adds	r3, #1
 800baa4:	61fb      	str	r3, [r7, #28]
 800baa6:	69fa      	ldr	r2, [r7, #28]
 800baa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baaa:	429a      	cmp	r2, r3
 800baac:	dbd8      	blt.n	800ba60 <Cholesky_Decomposition+0xfc>
                lower[i][j] = (matrix[i][j] - sum) / lower[j][j];
 800baae:	683a      	ldr	r2, [r7, #0]
 800bab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab2:	fb02 f303 	mul.w	r3, r2, r3
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	68ba      	ldr	r2, [r7, #8]
 800baba:	441a      	add	r2, r3
 800babc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	4413      	add	r3, r2
 800bac2:	ed93 7a00 	vldr	s14, [r3]
 800bac6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800baca:	ee77 6a67 	vsub.f32	s13, s14, s15
 800bace:	4632      	mov	r2, r6
 800bad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad2:	fb02 f303 	mul.w	r3, r2, r3
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	441a      	add	r2, r3
 800badc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	4413      	add	r3, r2
 800bae2:	ed93 7a00 	vldr	s14, [r3]
 800bae6:	4632      	mov	r2, r6
 800bae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baea:	fb02 f303 	mul.w	r3, r2, r3
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	441a      	add	r2, r3
 800baf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	4413      	add	r3, r2
 800bafe:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j <= i; j++) {
 800bb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb04:	3301      	adds	r3, #1
 800bb06:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	f77f af56 	ble.w	800b9be <Cholesky_Decomposition+0x5a>
    for (int i = 0; i < n; i++) {
 800bb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb14:	3301      	adds	r3, #1
 800bb16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	f6ff af4b 	blt.w	800b9b8 <Cholesky_Decomposition+0x54>
            }
        }
    }
}
 800bb22:	bf00      	nop
 800bb24:	bf00      	nop
 800bb26:	3734      	adds	r7, #52	; 0x34
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bb2e <GM_UWB>:
 * For a given measurement error e, decreasing the sigma of the GM weight function will set a
 * smaller weight to this error e. Then, the variance of this measurement will increase, indicating
 * a large measurement uncertainty.
 * Intuitively, a small sigma means you trust the measurements more.
*/
static void GM_UWB(float e, float * GM_e){
 800bb2e:	b480      	push	{r7}
 800bb30:	b085      	sub	sp, #20
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	ed87 0a01 	vstr	s0, [r7, #4]
 800bb38:	6038      	str	r0, [r7, #0]
    float sigma = 2.0;
 800bb3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb3e:	60fb      	str	r3, [r7, #12]
    float GM_dn = sigma + e*e;
 800bb40:	edd7 7a01 	vldr	s15, [r7, #4]
 800bb44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bb48:	ed97 7a03 	vldr	s14, [r7, #12]
 800bb4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb50:	edc7 7a02 	vstr	s15, [r7, #8]
    *GM_e = (sigma * sigma)/(GM_dn * GM_dn);
 800bb54:	edd7 7a03 	vldr	s15, [r7, #12]
 800bb58:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800bb5c:	edd7 7a02 	vldr	s15, [r7, #8]
 800bb60:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800bb64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	edc3 7a00 	vstr	s15, [r3]
}
 800bb6e:	bf00      	nop
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr

0800bb7a <GM_state>:

static void GM_state(float e, float * GM_e){
 800bb7a:	b480      	push	{r7}
 800bb7c:	b085      	sub	sp, #20
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	ed87 0a01 	vstr	s0, [r7, #4]
 800bb84:	6038      	str	r0, [r7, #0]
    float sigma = 1.5;
 800bb86:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bb8a:	60fb      	str	r3, [r7, #12]
    float GM_dn = sigma + e*e;
 800bb8c:	edd7 7a01 	vldr	s15, [r7, #4]
 800bb90:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bb94:	ed97 7a03 	vldr	s14, [r7, #12]
 800bb98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb9c:	edc7 7a02 	vstr	s15, [r7, #8]
    *GM_e = (sigma * sigma)/(GM_dn * GM_dn);
 800bba0:	edd7 7a03 	vldr	s15, [r7, #12]
 800bba4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800bba8:	edd7 7a02 	vldr	s15, [r7, #8]
 800bbac:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800bbb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	edc3 7a00 	vstr	s15, [r3]
}
 800bbba:	bf00      	nop
 800bbbc:	3714      	adds	r7, #20
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr
	...

0800bbc8 <kalmanCoreRobustUpdateWithTdoa>:

// robsut update function
void kalmanCoreRobustUpdateWithTdoa(kalmanCoreData_t* this, tdoaMeasurement_t *tdoa, OutlierFilterTdoaState_t* outlierFilterState)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	ed2d 8b02 	vpush	{d8}
 800bbce:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800bbd8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800bbdc:	6018      	str	r0, [r3, #0]
 800bbde:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800bbe2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800bbe6:	6019      	str	r1, [r3, #0]
 800bbe8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800bbec:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800bbf0:	601a      	str	r2, [r3, #0]
    // Measurement equation:
    // d_ij = d_j - d_i
	float measurement = 0.0f;
 800bbf2:	f04f 0300 	mov.w	r3, #0
 800bbf6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    float x = this->S[KC_STATE_X];
 800bbfa:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800bbfe:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    float y = this->S[KC_STATE_Y];
 800bc0a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800bc0e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
    float z = this->S[KC_STATE_Z];
 800bc1a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800bc1e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4

    float x1 = tdoa->anchorPositions[1].x, y1 = tdoa->anchorPositions[1].y, z1 = tdoa->anchorPositions[1].z;
 800bc2a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800bc2e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	695b      	ldr	r3, [r3, #20]
 800bc36:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800bc3a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800bc3e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	699b      	ldr	r3, [r3, #24]
 800bc46:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800bc4a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800bc4e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	69db      	ldr	r3, [r3, #28]
 800bc56:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    float x0 = tdoa->anchorPositions[0].x, y0 = tdoa->anchorPositions[0].y, z0 = tdoa->anchorPositions[0].z;
 800bc5a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800bc5e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800bc6a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800bc6e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800bc7a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800bc7e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

    float dx1 = x - x1;   float  dy1 = y - y1;   float dz1 = z - z1;
 800bc8a:	ed97 7a7b 	vldr	s14, [r7, #492]	; 0x1ec
 800bc8e:	edd7 7a78 	vldr	s15, [r7, #480]	; 0x1e0
 800bc92:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc96:	edc7 7a72 	vstr	s15, [r7, #456]	; 0x1c8
 800bc9a:	ed97 7a7a 	vldr	s14, [r7, #488]	; 0x1e8
 800bc9e:	edd7 7a77 	vldr	s15, [r7, #476]	; 0x1dc
 800bca2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bca6:	edc7 7a71 	vstr	s15, [r7, #452]	; 0x1c4
 800bcaa:	ed97 7a79 	vldr	s14, [r7, #484]	; 0x1e4
 800bcae:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 800bcb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcb6:	edc7 7a70 	vstr	s15, [r7, #448]	; 0x1c0
    float dx0 = x - x0;   float  dy0 = y - y0;   float dz0 = z - z0;
 800bcba:	ed97 7a7b 	vldr	s14, [r7, #492]	; 0x1ec
 800bcbe:	edd7 7a75 	vldr	s15, [r7, #468]	; 0x1d4
 800bcc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcc6:	edc7 7a6f 	vstr	s15, [r7, #444]	; 0x1bc
 800bcca:	ed97 7a7a 	vldr	s14, [r7, #488]	; 0x1e8
 800bcce:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 800bcd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcd6:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8
 800bcda:	ed97 7a79 	vldr	s14, [r7, #484]	; 0x1e4
 800bcde:	edd7 7a73 	vldr	s15, [r7, #460]	; 0x1cc
 800bce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bce6:	edc7 7a6d 	vstr	s15, [r7, #436]	; 0x1b4

    float d1 = sqrtf(powf(dx1, 2) + powf(dy1, 2) + powf(dz1, 2));
 800bcea:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800bcee:	ed97 0a72 	vldr	s0, [r7, #456]	; 0x1c8
 800bcf2:	f019 fd5b 	bl	80257ac <powf>
 800bcf6:	eeb0 8a40 	vmov.f32	s16, s0
 800bcfa:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800bcfe:	ed97 0a71 	vldr	s0, [r7, #452]	; 0x1c4
 800bd02:	f019 fd53 	bl	80257ac <powf>
 800bd06:	eef0 7a40 	vmov.f32	s15, s0
 800bd0a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800bd0e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800bd12:	ed97 0a70 	vldr	s0, [r7, #448]	; 0x1c0
 800bd16:	f019 fd49 	bl	80257ac <powf>
 800bd1a:	eef0 7a40 	vmov.f32	s15, s0
 800bd1e:	ee78 7a27 	vadd.f32	s15, s16, s15
 800bd22:	eeb0 0a67 	vmov.f32	s0, s15
 800bd26:	f019 fd99 	bl	802585c <sqrtf>
 800bd2a:	ed87 0a6c 	vstr	s0, [r7, #432]	; 0x1b0
    float d0 = sqrtf(powf(dx0, 2) + powf(dy0, 2) + powf(dz0, 2));
 800bd2e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800bd32:	ed97 0a6f 	vldr	s0, [r7, #444]	; 0x1bc
 800bd36:	f019 fd39 	bl	80257ac <powf>
 800bd3a:	eeb0 8a40 	vmov.f32	s16, s0
 800bd3e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800bd42:	ed97 0a6e 	vldr	s0, [r7, #440]	; 0x1b8
 800bd46:	f019 fd31 	bl	80257ac <powf>
 800bd4a:	eef0 7a40 	vmov.f32	s15, s0
 800bd4e:	ee38 8a27 	vadd.f32	s16, s16, s15
 800bd52:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800bd56:	ed97 0a6d 	vldr	s0, [r7, #436]	; 0x1b4
 800bd5a:	f019 fd27 	bl	80257ac <powf>
 800bd5e:	eef0 7a40 	vmov.f32	s15, s0
 800bd62:	ee78 7a27 	vadd.f32	s15, s16, s15
 800bd66:	eeb0 0a67 	vmov.f32	s0, s15
 800bd6a:	f019 fd77 	bl	802585c <sqrtf>
 800bd6e:	ed87 0a6b 	vstr	s0, [r7, #428]	; 0x1ac
    // if measurements make sense
    if ((d0 != 0.0f) && (d1 != 0.0f)) {
 800bd72:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 800bd76:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd7e:	f000 8376 	beq.w	800c46e <kalmanCoreRobustUpdateWithTdoa+0x8a6>
 800bd82:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 800bd86:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bd8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd8e:	f000 836e 	beq.w	800c46e <kalmanCoreRobustUpdateWithTdoa+0x8a6>
        float predicted = d1 - d0;
 800bd92:	ed97 7a6c 	vldr	s14, [r7, #432]	; 0x1b0
 800bd96:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 800bd9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd9e:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
        measurement = tdoa->distanceDiff;
 800bda2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800bda6:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0

        // innovation term based on prior x
        float error_check = measurement - predicted;    // innovation term based on prior state
 800bdb2:	ed97 7a7c 	vldr	s14, [r7, #496]	; 0x1f0
 800bdb6:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 800bdba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdbe:	edc7 7a69 	vstr	s15, [r7, #420]	; 0x1a4
        static float P_chol[KC_STATE_DIM][KC_STATE_DIM];
        static arm_matrix_instance_f32 Pc_m = {KC_STATE_DIM, KC_STATE_DIM, (float *)P_chol};
        static float Pc_tran[KC_STATE_DIM][KC_STATE_DIM];
        static arm_matrix_instance_f32 Pc_tran_m = {KC_STATE_DIM, KC_STATE_DIM, (float *)Pc_tran};

        float h[KC_STATE_DIM] = {0};
 800bdc2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800bdc6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800bdca:	4618      	mov	r0, r3
 800bdcc:	2324      	movs	r3, #36	; 0x24
 800bdce:	461a      	mov	r2, r3
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	f017 fd9d 	bl	8023910 <memset>
        arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	f8a7 3180 	strh.w	r3, [r7, #384]	; 0x180
 800bddc:	2309      	movs	r3, #9
 800bdde:	f8a7 3182 	strh.w	r3, [r7, #386]	; 0x182
 800bde2:	f107 0314 	add.w	r3, r7, #20
 800bde6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
        // x_err comes from the KF update is the state of error state Kalman filter, set to be zero initially
        static float x_err[KC_STATE_DIM] = {0.0};
        static arm_matrix_instance_f32 x_errm = {KC_STATE_DIM, 1, x_err};
        static float X_state[KC_STATE_DIM] = {0.0};
        float P_iter[KC_STATE_DIM][KC_STATE_DIM];
        memcpy(P_iter, this->P, sizeof(P_iter));                 // init P_iter as P_prior
 800bdea:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800bdee:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800bdf8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bdfc:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800be00:	4618      	mov	r0, r3
 800be02:	f017 fe8a 	bl	8023b1a <memcpy>

        float R_iter = tdoa->stdDev * tdoa->stdDev;                    // measurement covariance
 800be06:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800be0a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800be14:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800be18:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800be22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be26:	edc7 7a87 	vstr	s15, [r7, #540]	; 0x21c
        memcpy(X_state, this->S, sizeof(X_state));                     // copy Xpr to X_State and then update in each iterations
 800be2a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800be2e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	2224      	movs	r2, #36	; 0x24
 800be36:	4619      	mov	r1, r3
 800be38:	48dc      	ldr	r0, [pc, #880]	; (800c1ac <kalmanCoreRobustUpdateWithTdoa+0x5e4>)
 800be3a:	f017 fe6e 	bl	8023b1a <memcpy>

        // ---------------------- Start iteration ----------------------- //
        for (int iter = 0; iter < MAX_ITER; iter++){
 800be3e:	2300      	movs	r3, #0
 800be40:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800be44:	e301      	b.n	800c44a <kalmanCoreRobustUpdateWithTdoa+0x882>
            // cholesky decomposition for the prior covariance matrix
            Cholesky_Decomposition(KC_STATE_DIM, P_iter, P_chol);      // P_chol is a lower triangular matrix
 800be46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800be4a:	4ad9      	ldr	r2, [pc, #868]	; (800c1b0 <kalmanCoreRobustUpdateWithTdoa+0x5e8>)
 800be4c:	4619      	mov	r1, r3
 800be4e:	2009      	movs	r0, #9
 800be50:	f7ff fd88 	bl	800b964 <Cholesky_Decomposition>
            mat_trans(&Pc_m, &Pc_tran_m);
 800be54:	49d7      	ldr	r1, [pc, #860]	; (800c1b4 <kalmanCoreRobustUpdateWithTdoa+0x5ec>)
 800be56:	48d8      	ldr	r0, [pc, #864]	; (800c1b8 <kalmanCoreRobustUpdateWithTdoa+0x5f0>)
 800be58:	f7ff fd18 	bl	800b88c <mat_trans>

            // decomposition for measurement covariance (scalar case)
            float R_chol = sqrtf(R_iter);
 800be5c:	ed97 0a87 	vldr	s0, [r7, #540]	; 0x21c
 800be60:	f019 fcfc 	bl	802585c <sqrtf>
 800be64:	ed87 0a68 	vstr	s0, [r7, #416]	; 0x1a0
            // construct H matrix
            // X_state updates in each iteration
            float x_iter = X_state[KC_STATE_X],  y_iter = X_state[KC_STATE_Y], z_iter = X_state[KC_STATE_Z];
 800be68:	4bd0      	ldr	r3, [pc, #832]	; (800c1ac <kalmanCoreRobustUpdateWithTdoa+0x5e4>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800be70:	4bce      	ldr	r3, [pc, #824]	; (800c1ac <kalmanCoreRobustUpdateWithTdoa+0x5e4>)
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800be78:	4bcc      	ldr	r3, [pc, #816]	; (800c1ac <kalmanCoreRobustUpdateWithTdoa+0x5e4>)
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

            dx1 = x_iter - x1;  dy1 = y_iter - y1;   dz1 = z_iter - z1;
 800be80:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 800be84:	edd7 7a78 	vldr	s15, [r7, #480]	; 0x1e0
 800be88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be8c:	edc7 7a72 	vstr	s15, [r7, #456]	; 0x1c8
 800be90:	ed97 7a66 	vldr	s14, [r7, #408]	; 0x198
 800be94:	edd7 7a77 	vldr	s15, [r7, #476]	; 0x1dc
 800be98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be9c:	edc7 7a71 	vstr	s15, [r7, #452]	; 0x1c4
 800bea0:	ed97 7a65 	vldr	s14, [r7, #404]	; 0x194
 800bea4:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 800bea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800beac:	edc7 7a70 	vstr	s15, [r7, #448]	; 0x1c0
            dx0 = x_iter - x0;  dy0 = y_iter - y0;   dz0 = z_iter - z0;
 800beb0:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 800beb4:	edd7 7a75 	vldr	s15, [r7, #468]	; 0x1d4
 800beb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bebc:	edc7 7a6f 	vstr	s15, [r7, #444]	; 0x1bc
 800bec0:	ed97 7a66 	vldr	s14, [r7, #408]	; 0x198
 800bec4:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 800bec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800becc:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8
 800bed0:	ed97 7a65 	vldr	s14, [r7, #404]	; 0x194
 800bed4:	edd7 7a73 	vldr	s15, [r7, #460]	; 0x1cc
 800bed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bedc:	edc7 7a6d 	vstr	s15, [r7, #436]	; 0x1b4

            d1 = sqrtf(powf(dx1, 2) + powf(dy1, 2) + powf(dz1, 2));
 800bee0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800bee4:	ed97 0a72 	vldr	s0, [r7, #456]	; 0x1c8
 800bee8:	f019 fc60 	bl	80257ac <powf>
 800beec:	eeb0 8a40 	vmov.f32	s16, s0
 800bef0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800bef4:	ed97 0a71 	vldr	s0, [r7, #452]	; 0x1c4
 800bef8:	f019 fc58 	bl	80257ac <powf>
 800befc:	eef0 7a40 	vmov.f32	s15, s0
 800bf00:	ee38 8a27 	vadd.f32	s16, s16, s15
 800bf04:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800bf08:	ed97 0a70 	vldr	s0, [r7, #448]	; 0x1c0
 800bf0c:	f019 fc4e 	bl	80257ac <powf>
 800bf10:	eef0 7a40 	vmov.f32	s15, s0
 800bf14:	ee78 7a27 	vadd.f32	s15, s16, s15
 800bf18:	eeb0 0a67 	vmov.f32	s0, s15
 800bf1c:	f019 fc9e 	bl	802585c <sqrtf>
 800bf20:	ed87 0a6c 	vstr	s0, [r7, #432]	; 0x1b0
            d0 = sqrtf(powf(dx0, 2) + powf(dy0, 2) + powf(dz0, 2));
 800bf24:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800bf28:	ed97 0a6f 	vldr	s0, [r7, #444]	; 0x1bc
 800bf2c:	f019 fc3e 	bl	80257ac <powf>
 800bf30:	eeb0 8a40 	vmov.f32	s16, s0
 800bf34:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800bf38:	ed97 0a6e 	vldr	s0, [r7, #440]	; 0x1b8
 800bf3c:	f019 fc36 	bl	80257ac <powf>
 800bf40:	eef0 7a40 	vmov.f32	s15, s0
 800bf44:	ee38 8a27 	vadd.f32	s16, s16, s15
 800bf48:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800bf4c:	ed97 0a6d 	vldr	s0, [r7, #436]	; 0x1b4
 800bf50:	f019 fc2c 	bl	80257ac <powf>
 800bf54:	eef0 7a40 	vmov.f32	s15, s0
 800bf58:	ee78 7a27 	vadd.f32	s15, s16, s15
 800bf5c:	eeb0 0a67 	vmov.f32	s0, s15
 800bf60:	f019 fc7c 	bl	802585c <sqrtf>
 800bf64:	ed87 0a6b 	vstr	s0, [r7, #428]	; 0x1ac

            float predicted_iter = d1 - d0;                           // predicted measurements in each iteration based on X_state
 800bf68:	ed97 7a6c 	vldr	s14, [r7, #432]	; 0x1b0
 800bf6c:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 800bf70:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf74:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
            float error_iter = measurement - predicted_iter;          // innovation term based on iterated X_state
 800bf78:	ed97 7a7c 	vldr	s14, [r7, #496]	; 0x1f0
 800bf7c:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 800bf80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf84:	edc7 7a63 	vstr	s15, [r7, #396]	; 0x18c
            float e_y = error_iter;
 800bf88:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800bf8c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
            if ((d0 != 0.0f) && (d1 != 0.0f)){
 800bf90:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 800bf94:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bf98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf9c:	f000 8250 	beq.w	800c440 <kalmanCoreRobustUpdateWithTdoa+0x878>
 800bfa0:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 800bfa4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bfa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfac:	f000 8248 	beq.w	800c440 <kalmanCoreRobustUpdateWithTdoa+0x878>
                // measurement Jacobian changes in each iteration w.r.t linearization point [x_iter, y_iter, z_iter]
                h[KC_STATE_X] = (dx1 / d1 - dx0 / d0);
 800bfb0:	edd7 6a72 	vldr	s13, [r7, #456]	; 0x1c8
 800bfb4:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 800bfb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfbc:	ed97 6a6f 	vldr	s12, [r7, #444]	; 0x1bc
 800bfc0:	edd7 6a6b 	vldr	s13, [r7, #428]	; 0x1ac
 800bfc4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800bfc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bfcc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800bfd0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800bfd4:	edc3 7a00 	vstr	s15, [r3]
                h[KC_STATE_Y] = (dy1 / d1 - dy0 / d0);
 800bfd8:	edd7 6a71 	vldr	s13, [r7, #452]	; 0x1c4
 800bfdc:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 800bfe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfe4:	ed97 6a6e 	vldr	s12, [r7, #440]	; 0x1b8
 800bfe8:	edd7 6a6b 	vldr	s13, [r7, #428]	; 0x1ac
 800bfec:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800bff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bff4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800bff8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800bffc:	edc3 7a01 	vstr	s15, [r3, #4]
                h[KC_STATE_Z] = (dz1 / d1 - dz0 / d0);
 800c000:	edd7 6a70 	vldr	s13, [r7, #448]	; 0x1c0
 800c004:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 800c008:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c00c:	ed97 6a6d 	vldr	s12, [r7, #436]	; 0x1b4
 800c010:	edd7 6a6b 	vldr	s13, [r7, #428]	; 0x1ac
 800c014:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800c018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c01c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c020:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800c024:	edc3 7a02 	vstr	s15, [r3, #8]

                if (fabsf(R_chol - 0.0f) < 0.0001f){
 800c028:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 800c02c:	eef0 7ae7 	vabs.f32	s15, s15
 800c030:	ed9f 7a62 	vldr	s14, [pc, #392]	; 800c1bc <kalmanCoreRobustUpdateWithTdoa+0x5f4>
 800c034:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c03c:	d508      	bpl.n	800c050 <kalmanCoreRobustUpdateWithTdoa+0x488>
                    e_y = error_iter / 0.0001f;
 800c03e:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 800c042:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c1bc <kalmanCoreRobustUpdateWithTdoa+0x5f4>
 800c046:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c04a:	edc7 7a85 	vstr	s15, [r7, #532]	; 0x214
 800c04e:	e007      	b.n	800c060 <kalmanCoreRobustUpdateWithTdoa+0x498>
                }
                else{
                    e_y = error_iter / R_chol;
 800c050:	edd7 6a63 	vldr	s13, [r7, #396]	; 0x18c
 800c054:	ed97 7a68 	vldr	s14, [r7, #416]	; 0x1a0
 800c058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c05c:	edc7 7a85 	vstr	s15, [r7, #532]	; 0x214
                }
                // Make sure P_chol, lower trangular matrix, is numerically stable
                for (int col=0; col<KC_STATE_DIM; col++) {
 800c060:	2300      	movs	r3, #0
 800c062:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800c066:	e095      	b.n	800c194 <kalmanCoreRobustUpdateWithTdoa+0x5cc>
                    for (int row=col; row<KC_STATE_DIM; row++) {
 800c068:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c06c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800c070:	e086      	b.n	800c180 <kalmanCoreRobustUpdateWithTdoa+0x5b8>
                        if (isnan(P_chol[row][col]) || P_chol[row][col] > UPPER_BOUND) {
 800c072:	494f      	ldr	r1, [pc, #316]	; (800c1b0 <kalmanCoreRobustUpdateWithTdoa+0x5e8>)
 800c074:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800c078:	4613      	mov	r3, r2
 800c07a:	00db      	lsls	r3, r3, #3
 800c07c:	4413      	add	r3, r2
 800c07e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800c082:	4413      	add	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	440b      	add	r3, r1
 800c088:	edd3 7a00 	vldr	s15, [r3]
 800c08c:	eef4 7a67 	vcmp.f32	s15, s15
 800c090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c094:	d613      	bvs.n	800c0be <kalmanCoreRobustUpdateWithTdoa+0x4f6>
 800c096:	4946      	ldr	r1, [pc, #280]	; (800c1b0 <kalmanCoreRobustUpdateWithTdoa+0x5e8>)
 800c098:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800c09c:	4613      	mov	r3, r2
 800c09e:	00db      	lsls	r3, r3, #3
 800c0a0:	4413      	add	r3, r2
 800c0a2:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800c0a6:	4413      	add	r3, r2
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	440b      	add	r3, r1
 800c0ac:	edd3 7a00 	vldr	s15, [r3]
 800c0b0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800c1c0 <kalmanCoreRobustUpdateWithTdoa+0x5f8>
 800c0b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0bc:	dd0d      	ble.n	800c0da <kalmanCoreRobustUpdateWithTdoa+0x512>
                            P_chol[row][col] = UPPER_BOUND;
 800c0be:	493c      	ldr	r1, [pc, #240]	; (800c1b0 <kalmanCoreRobustUpdateWithTdoa+0x5e8>)
 800c0c0:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	00db      	lsls	r3, r3, #3
 800c0c8:	4413      	add	r3, r2
 800c0ca:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800c0ce:	4413      	add	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	440b      	add	r3, r1
 800c0d4:	4a3b      	ldr	r2, [pc, #236]	; (800c1c4 <kalmanCoreRobustUpdateWithTdoa+0x5fc>)
 800c0d6:	601a      	str	r2, [r3, #0]
 800c0d8:	e04d      	b.n	800c176 <kalmanCoreRobustUpdateWithTdoa+0x5ae>
                        } else if(row!=col && P_chol[row][col] < LOWER_BOUND){
 800c0da:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800c0de:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d021      	beq.n	800c12a <kalmanCoreRobustUpdateWithTdoa+0x562>
 800c0e6:	4932      	ldr	r1, [pc, #200]	; (800c1b0 <kalmanCoreRobustUpdateWithTdoa+0x5e8>)
 800c0e8:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800c0ec:	4613      	mov	r3, r2
 800c0ee:	00db      	lsls	r3, r3, #3
 800c0f0:	4413      	add	r3, r2
 800c0f2:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800c0f6:	4413      	add	r3, r2
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	440b      	add	r3, r1
 800c0fc:	edd3 7a00 	vldr	s15, [r3]
 800c100:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800c1c8 <kalmanCoreRobustUpdateWithTdoa+0x600>
 800c104:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c10c:	d50d      	bpl.n	800c12a <kalmanCoreRobustUpdateWithTdoa+0x562>
                            P_chol[row][col] = LOWER_BOUND;
 800c10e:	4928      	ldr	r1, [pc, #160]	; (800c1b0 <kalmanCoreRobustUpdateWithTdoa+0x5e8>)
 800c110:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800c114:	4613      	mov	r3, r2
 800c116:	00db      	lsls	r3, r3, #3
 800c118:	4413      	add	r3, r2
 800c11a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800c11e:	4413      	add	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	440b      	add	r3, r1
 800c124:	4a29      	ldr	r2, [pc, #164]	; (800c1cc <kalmanCoreRobustUpdateWithTdoa+0x604>)
 800c126:	601a      	str	r2, [r3, #0]
 800c128:	e025      	b.n	800c176 <kalmanCoreRobustUpdateWithTdoa+0x5ae>
                        } else if(row==col && P_chol[row][col]<0.0f){
 800c12a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800c12e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c132:	429a      	cmp	r2, r3
 800c134:	d11f      	bne.n	800c176 <kalmanCoreRobustUpdateWithTdoa+0x5ae>
 800c136:	491e      	ldr	r1, [pc, #120]	; (800c1b0 <kalmanCoreRobustUpdateWithTdoa+0x5e8>)
 800c138:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800c13c:	4613      	mov	r3, r2
 800c13e:	00db      	lsls	r3, r3, #3
 800c140:	4413      	add	r3, r2
 800c142:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800c146:	4413      	add	r3, r2
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	440b      	add	r3, r1
 800c14c:	edd3 7a00 	vldr	s15, [r3]
 800c150:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c158:	d50d      	bpl.n	800c176 <kalmanCoreRobustUpdateWithTdoa+0x5ae>
                            P_chol[row][col] = 0.0f;
 800c15a:	4915      	ldr	r1, [pc, #84]	; (800c1b0 <kalmanCoreRobustUpdateWithTdoa+0x5e8>)
 800c15c:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800c160:	4613      	mov	r3, r2
 800c162:	00db      	lsls	r3, r3, #3
 800c164:	4413      	add	r3, r2
 800c166:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800c16a:	4413      	add	r3, r2
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	440b      	add	r3, r1
 800c170:	f04f 0200 	mov.w	r2, #0
 800c174:	601a      	str	r2, [r3, #0]
                    for (int row=col; row<KC_STATE_DIM; row++) {
 800c176:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800c17a:	3301      	adds	r3, #1
 800c17c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800c180:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800c184:	2b08      	cmp	r3, #8
 800c186:	f77f af74 	ble.w	800c072 <kalmanCoreRobustUpdateWithTdoa+0x4aa>
                for (int col=0; col<KC_STATE_DIM; col++) {
 800c18a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c18e:	3301      	adds	r3, #1
 800c190:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800c194:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c198:	2b08      	cmp	r3, #8
 800c19a:	f77f af65 	ble.w	800c068 <kalmanCoreRobustUpdateWithTdoa+0x4a0>
                        }
                    }
                }
                // Matrix inversion is numerically sensitive.
                // Add small values on the diagonal of P_chol to avoid numerical problems.
                float dummy_value = 1e-9f;
 800c19e:	4b0c      	ldr	r3, [pc, #48]	; (800c1d0 <kalmanCoreRobustUpdateWithTdoa+0x608>)
 800c1a0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
                for (int k=0; k<KC_STATE_DIM; k++){
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 800c1aa:	e030      	b.n	800c20e <kalmanCoreRobustUpdateWithTdoa+0x646>
 800c1ac:	20009f9c 	.word	0x20009f9c
 800c1b0:	20009fc0 	.word	0x20009fc0
 800c1b4:	20000970 	.word	0x20000970
 800c1b8:	20000968 	.word	0x20000968
 800c1bc:	38d1b717 	.word	0x38d1b717
 800c1c0:	42c80000 	.word	0x42c80000
 800c1c4:	42c80000 	.word	0x42c80000
 800c1c8:	c2c80000 	.word	0xc2c80000
 800c1cc:	c2c80000 	.word	0xc2c80000
 800c1d0:	3089705f 	.word	0x3089705f
                    P_chol[k][k] = P_chol[k][k] + dummy_value;
 800c1d4:	49a9      	ldr	r1, [pc, #676]	; (800c47c <kalmanCoreRobustUpdateWithTdoa+0x8b4>)
 800c1d6:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800c1da:	4613      	mov	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	4413      	add	r3, r2
 800c1e0:	00db      	lsls	r3, r3, #3
 800c1e2:	440b      	add	r3, r1
 800c1e4:	ed93 7a00 	vldr	s14, [r3]
 800c1e8:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 800c1ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1f0:	49a2      	ldr	r1, [pc, #648]	; (800c47c <kalmanCoreRobustUpdateWithTdoa+0x8b4>)
 800c1f2:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	4413      	add	r3, r2
 800c1fc:	00db      	lsls	r3, r3, #3
 800c1fe:	440b      	add	r3, r1
 800c200:	edc3 7a00 	vstr	s15, [r3]
                for (int k=0; k<KC_STATE_DIM; k++){
 800c204:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800c208:	3301      	adds	r3, #1
 800c20a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 800c20e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800c212:	2b08      	cmp	r3, #8
 800c214:	ddde      	ble.n	800c1d4 <kalmanCoreRobustUpdateWithTdoa+0x60c>
                }
                // keep P_chol
                memcpy(tmp1, P_chol, sizeof(tmp1));
 800c216:	4a9a      	ldr	r2, [pc, #616]	; (800c480 <kalmanCoreRobustUpdateWithTdoa+0x8b8>)
 800c218:	4b98      	ldr	r3, [pc, #608]	; (800c47c <kalmanCoreRobustUpdateWithTdoa+0x8b4>)
 800c21a:	4610      	mov	r0, r2
 800c21c:	4619      	mov	r1, r3
 800c21e:	f44f 73a2 	mov.w	r3, #324	; 0x144
 800c222:	461a      	mov	r2, r3
 800c224:	f017 fc79 	bl	8023b1a <memcpy>
                mat_inv(&tmp1m, &Pc_inv_m);                            // Pc_inv_m = inv(Pc_m) = inv(P_chol)
 800c228:	4996      	ldr	r1, [pc, #600]	; (800c484 <kalmanCoreRobustUpdateWithTdoa+0x8bc>)
 800c22a:	4897      	ldr	r0, [pc, #604]	; (800c488 <kalmanCoreRobustUpdateWithTdoa+0x8c0>)
 800c22c:	f7ff fb50 	bl	800b8d0 <mat_inv>
                mat_mult(&Pc_inv_m, &x_errm, &e_x_m);                  // e_x_m = Pc_inv_m.dot(x_errm)
 800c230:	4a96      	ldr	r2, [pc, #600]	; (800c48c <kalmanCoreRobustUpdateWithTdoa+0x8c4>)
 800c232:	4997      	ldr	r1, [pc, #604]	; (800c490 <kalmanCoreRobustUpdateWithTdoa+0x8c8>)
 800c234:	4893      	ldr	r0, [pc, #588]	; (800c484 <kalmanCoreRobustUpdateWithTdoa+0x8bc>)
 800c236:	f7ff fb6d 	bl	800b914 <mat_mult>
                // compute w_x, w_y --> weighting matrix
                // Since w_x is diagnal matrix, compute the inverse directly
                for (int state_k = 0; state_k < KC_STATE_DIM; state_k++){
 800c23a:	2300      	movs	r3, #0
 800c23c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800c240:	e030      	b.n	800c2a4 <kalmanCoreRobustUpdateWithTdoa+0x6dc>
                    GM_state(e_x[state_k], &wx_inv[state_k][state_k]);
 800c242:	4a94      	ldr	r2, [pc, #592]	; (800c494 <kalmanCoreRobustUpdateWithTdoa+0x8cc>)
 800c244:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	4413      	add	r3, r2
 800c24c:	edd3 7a00 	vldr	s15, [r3]
 800c250:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 800c254:	4613      	mov	r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	4413      	add	r3, r2
 800c25a:	00db      	lsls	r3, r3, #3
 800c25c:	4a8e      	ldr	r2, [pc, #568]	; (800c498 <kalmanCoreRobustUpdateWithTdoa+0x8d0>)
 800c25e:	4413      	add	r3, r2
 800c260:	4618      	mov	r0, r3
 800c262:	eeb0 0a67 	vmov.f32	s0, s15
 800c266:	f7ff fc88 	bl	800bb7a <GM_state>
                    wx_inv[state_k][state_k] = (float)1.0 / wx_inv[state_k][state_k];
 800c26a:	498b      	ldr	r1, [pc, #556]	; (800c498 <kalmanCoreRobustUpdateWithTdoa+0x8d0>)
 800c26c:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 800c270:	4613      	mov	r3, r2
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	4413      	add	r3, r2
 800c276:	00db      	lsls	r3, r3, #3
 800c278:	440b      	add	r3, r1
 800c27a:	ed93 7a00 	vldr	s14, [r3]
 800c27e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c286:	4984      	ldr	r1, [pc, #528]	; (800c498 <kalmanCoreRobustUpdateWithTdoa+0x8d0>)
 800c288:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 800c28c:	4613      	mov	r3, r2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	4413      	add	r3, r2
 800c292:	00db      	lsls	r3, r3, #3
 800c294:	440b      	add	r3, r1
 800c296:	edc3 7a00 	vstr	s15, [r3]
                for (int state_k = 0; state_k < KC_STATE_DIM; state_k++){
 800c29a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c29e:	3301      	adds	r3, #1
 800c2a0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800c2a4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c2a8:	2b08      	cmp	r3, #8
 800c2aa:	ddca      	ble.n	800c242 <kalmanCoreRobustUpdateWithTdoa+0x67a>
                }
                // rescale covariance matrix P
                mat_mult(&Pc_m, &wx_invm, &Pc_w_invm);                // Pc_w_invm = P_chol.dot(linalg.inv(w_x))
 800c2ac:	4a7b      	ldr	r2, [pc, #492]	; (800c49c <kalmanCoreRobustUpdateWithTdoa+0x8d4>)
 800c2ae:	497c      	ldr	r1, [pc, #496]	; (800c4a0 <kalmanCoreRobustUpdateWithTdoa+0x8d8>)
 800c2b0:	487c      	ldr	r0, [pc, #496]	; (800c4a4 <kalmanCoreRobustUpdateWithTdoa+0x8dc>)
 800c2b2:	f7ff fb2f 	bl	800b914 <mat_mult>
                mat_mult(&Pc_w_invm, &Pc_tran_m, &P_w_m);             // P_w_m = Pc_w_invm.dot(Pc_tran_m) = P_chol.dot(linalg.inv(w_x)).dot(P_chol.T)
 800c2b6:	4a7c      	ldr	r2, [pc, #496]	; (800c4a8 <kalmanCoreRobustUpdateWithTdoa+0x8e0>)
 800c2b8:	497c      	ldr	r1, [pc, #496]	; (800c4ac <kalmanCoreRobustUpdateWithTdoa+0x8e4>)
 800c2ba:	4878      	ldr	r0, [pc, #480]	; (800c49c <kalmanCoreRobustUpdateWithTdoa+0x8d4>)
 800c2bc:	f7ff fb2a 	bl	800b914 <mat_mult>
                // rescale R matrix
                float w_y=0.0;      float R_w = 0.0f;
 800c2c0:	f04f 0300 	mov.w	r3, #0
 800c2c4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800c2c8:	f04f 0300 	mov.w	r3, #0
 800c2cc:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
                GM_UWB(e_y, &w_y);                                    // compute the weighted measurement error: w_y
 800c2d0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	ed97 0a85 	vldr	s0, [r7, #532]	; 0x214
 800c2da:	f7ff fc28 	bl	800bb2e <GM_UWB>
                if (fabsf(w_y - 0.0f) < 0.0001f){
 800c2de:	edd7 7a5f 	vldr	s15, [r7, #380]	; 0x17c
 800c2e2:	eef0 7ae7 	vabs.f32	s15, s15
 800c2e6:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800c4b0 <kalmanCoreRobustUpdateWithTdoa+0x8e8>
 800c2ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2f2:	d50a      	bpl.n	800c30a <kalmanCoreRobustUpdateWithTdoa+0x742>
                    R_w = (R_chol * R_chol) / 0.0001f;
 800c2f4:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 800c2f8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800c2fc:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800c4b0 <kalmanCoreRobustUpdateWithTdoa+0x8e8>
 800c300:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c304:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200
 800c308:	e009      	b.n	800c31e <kalmanCoreRobustUpdateWithTdoa+0x756>
                }else{
                    R_w = (R_chol * R_chol) / w_y;
 800c30a:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 800c30e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800c312:	ed97 7a5f 	vldr	s14, [r7, #380]	; 0x17c
 800c316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c31a:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200
                }
                // ====== INNOVATION COVARIANCE ====== //
                mat_trans(&H, &HTm);
 800c31e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800c322:	4964      	ldr	r1, [pc, #400]	; (800c4b4 <kalmanCoreRobustUpdateWithTdoa+0x8ec>)
 800c324:	4618      	mov	r0, r3
 800c326:	f7ff fab1 	bl	800b88c <mat_trans>
                mat_mult(&P_w_m, &HTm, &PHTm);                        // PHTm = P_w.dot(H.T). The P is the updated P_w
 800c32a:	4a63      	ldr	r2, [pc, #396]	; (800c4b8 <kalmanCoreRobustUpdateWithTdoa+0x8f0>)
 800c32c:	4961      	ldr	r1, [pc, #388]	; (800c4b4 <kalmanCoreRobustUpdateWithTdoa+0x8ec>)
 800c32e:	485e      	ldr	r0, [pc, #376]	; (800c4a8 <kalmanCoreRobustUpdateWithTdoa+0x8e0>)
 800c330:	f7ff faf0 	bl	800b914 <mat_mult>

                float HPHR = R_w;                                     // HPH' + R.            The R is the updated R_w
 800c334:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800c338:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
                for (int i=0; i<KC_STATE_DIM; i++) {                  // Add the element of HPH' to the above
 800c33c:	2300      	movs	r3, #0
 800c33e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800c342:	e01d      	b.n	800c380 <kalmanCoreRobustUpdateWithTdoa+0x7b8>
                    HPHR += h[i]*PHTd[i];                             // this only works if the update is scalar (as in this function)
 800c344:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c348:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 800c34c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	4413      	add	r3, r2
 800c354:	ed93 7a00 	vldr	s14, [r3]
 800c358:	4a58      	ldr	r2, [pc, #352]	; (800c4bc <kalmanCoreRobustUpdateWithTdoa+0x8f4>)
 800c35a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	4413      	add	r3, r2
 800c362:	edd3 7a00 	vldr	s15, [r3]
 800c366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c36a:	ed97 7a7f 	vldr	s14, [r7, #508]	; 0x1fc
 800c36e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c372:	edc7 7a7f 	vstr	s15, [r7, #508]	; 0x1fc
                for (int i=0; i<KC_STATE_DIM; i++) {                  // Add the element of HPH' to the above
 800c376:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c37a:	3301      	adds	r3, #1
 800c37c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800c380:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c384:	2b08      	cmp	r3, #8
 800c386:	dddd      	ble.n	800c344 <kalmanCoreRobustUpdateWithTdoa+0x77c>
                }
                // ====== MEASUREMENT UPDATE ======
                // Calculate the Kalman gain and perform the state update
                for (int i=0; i<KC_STATE_DIM; i++) {
 800c388:	2300      	movs	r3, #0
 800c38a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800c38e:	e043      	b.n	800c418 <kalmanCoreRobustUpdateWithTdoa+0x850>
                    Kw[i] = PHTd[i]/HPHR;                             // rescaled kalman gain = (PH' (HPH' + R )^-1) with the updated P_w and R_w
 800c390:	4a4a      	ldr	r2, [pc, #296]	; (800c4bc <kalmanCoreRobustUpdateWithTdoa+0x8f4>)
 800c392:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c396:	009b      	lsls	r3, r3, #2
 800c398:	4413      	add	r3, r2
 800c39a:	edd3 6a00 	vldr	s13, [r3]
 800c39e:	ed97 7a7f 	vldr	s14, [r7, #508]	; 0x1fc
 800c3a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3a6:	4a46      	ldr	r2, [pc, #280]	; (800c4c0 <kalmanCoreRobustUpdateWithTdoa+0x8f8>)
 800c3a8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c3ac:	009b      	lsls	r3, r3, #2
 800c3ae:	4413      	add	r3, r2
 800c3b0:	edc3 7a00 	vstr	s15, [r3]
                    //[Note]: The error_check here is the innovation term based on prior state, which doesn't change during iterations.
                    x_err[i] = Kw[i] * error_check;                   // error state for next iteration
 800c3b4:	4a42      	ldr	r2, [pc, #264]	; (800c4c0 <kalmanCoreRobustUpdateWithTdoa+0x8f8>)
 800c3b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	4413      	add	r3, r2
 800c3be:	ed93 7a00 	vldr	s14, [r3]
 800c3c2:	edd7 7a69 	vldr	s15, [r7, #420]	; 0x1a4
 800c3c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ca:	4a3e      	ldr	r2, [pc, #248]	; (800c4c4 <kalmanCoreRobustUpdateWithTdoa+0x8fc>)
 800c3cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	4413      	add	r3, r2
 800c3d4:	edc3 7a00 	vstr	s15, [r3]
                    X_state[i] = this->S[i] + x_err[i];               // convert to nominal state
 800c3d8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c3dc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	4413      	add	r3, r2
 800c3ea:	ed93 7a00 	vldr	s14, [r3]
 800c3ee:	4a35      	ldr	r2, [pc, #212]	; (800c4c4 <kalmanCoreRobustUpdateWithTdoa+0x8fc>)
 800c3f0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	4413      	add	r3, r2
 800c3f8:	edd3 7a00 	vldr	s15, [r3]
 800c3fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c400:	4a31      	ldr	r2, [pc, #196]	; (800c4c8 <kalmanCoreRobustUpdateWithTdoa+0x900>)
 800c402:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	4413      	add	r3, r2
 800c40a:	edc3 7a00 	vstr	s15, [r3]
                for (int i=0; i<KC_STATE_DIM; i++) {
 800c40e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c412:	3301      	adds	r3, #1
 800c414:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800c418:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c41c:	2b08      	cmp	r3, #8
 800c41e:	ddb7      	ble.n	800c390 <kalmanCoreRobustUpdateWithTdoa+0x7c8>
                }
                // update P_iter matrix and R matrix for next iteration
                memcpy(P_iter, P_w, sizeof(P_iter));
 800c420:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c424:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800c428:	4a28      	ldr	r2, [pc, #160]	; (800c4cc <kalmanCoreRobustUpdateWithTdoa+0x904>)
 800c42a:	4618      	mov	r0, r3
 800c42c:	4611      	mov	r1, r2
 800c42e:	f44f 73a2 	mov.w	r3, #324	; 0x144
 800c432:	461a      	mov	r2, r3
 800c434:	f017 fb71 	bl	8023b1a <memcpy>
                R_iter = R_w;
 800c438:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800c43c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
        for (int iter = 0; iter < MAX_ITER; iter++){
 800c440:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c444:	3301      	adds	r3, #1
 800c446:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800c44a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c44e:	2b01      	cmp	r3, #1
 800c450:	f77f acf9 	ble.w	800be46 <kalmanCoreRobustUpdateWithTdoa+0x27e>
            }
        }
        // After n iterations, we obtain the rescaled (1) P = P_iter, (2) R = R_iter, (3) Kw.
        // Call the kalman update function with weighted P, weighted K, h, and error_check
        kalmanCoreUpdateWithPKE(this, &H, &Kwm, &P_w_m, error_check);
 800c454:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 800c458:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c45c:	f5a3 7005 	sub.w	r0, r3, #532	; 0x214
 800c460:	ed97 0a69 	vldr	s0, [r7, #420]	; 0x1a4
 800c464:	4b10      	ldr	r3, [pc, #64]	; (800c4a8 <kalmanCoreRobustUpdateWithTdoa+0x8e0>)
 800c466:	4a1a      	ldr	r2, [pc, #104]	; (800c4d0 <kalmanCoreRobustUpdateWithTdoa+0x908>)
 800c468:	6800      	ldr	r0, [r0, #0]
 800c46a:	f7fb f855 	bl	8007518 <kalmanCoreUpdateWithPKE>

    }
}
 800c46e:	bf00      	nop
 800c470:	f507 7708 	add.w	r7, r7, #544	; 0x220
 800c474:	46bd      	mov	sp, r7
 800c476:	ecbd 8b02 	vpop	{d8}
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	20009fc0 	.word	0x20009fc0
 800c480:	2000a104 	.word	0x2000a104
 800c484:	20000980 	.word	0x20000980
 800c488:	20000978 	.word	0x20000978
 800c48c:	20000990 	.word	0x20000990
 800c490:	20000988 	.word	0x20000988
 800c494:	2000a248 	.word	0x2000a248
 800c498:	2000a26c 	.word	0x2000a26c
 800c49c:	200009a0 	.word	0x200009a0
 800c4a0:	20000998 	.word	0x20000998
 800c4a4:	20000968 	.word	0x20000968
 800c4a8:	200009a8 	.word	0x200009a8
 800c4ac:	20000970 	.word	0x20000970
 800c4b0:	38d1b717 	.word	0x38d1b717
 800c4b4:	200009b0 	.word	0x200009b0
 800c4b8:	200009b8 	.word	0x200009b8
 800c4bc:	2000a3b0 	.word	0x2000a3b0
 800c4c0:	2000a3d4 	.word	0x2000a3d4
 800c4c4:	2000a3f8 	.word	0x2000a3f8
 800c4c8:	20009f9c 	.word	0x20009f9c
 800c4cc:	2000a41c 	.word	0x2000a41c
 800c4d0:	200009c0 	.word	0x200009c0
 800c4d4:	00000000 	.word	0x00000000

0800c4d8 <kalmanCoreUpdateWithTof>:
 */

#include "mm_tof.h"

void kalmanCoreUpdateWithTof(kalmanCoreData_t* this, tofMeasurement_t *tof)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	ed2d 8b02 	vpush	{d8}
 800c4de:	b090      	sub	sp, #64	; 0x40
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  // Updates the filter with a measured distance in the zb direction using the
  float h[KC_STATE_DIM] = {0};
 800c4e6:	f107 0310 	add.w	r3, r7, #16
 800c4ea:	2224      	movs	r2, #36	; 0x24
 800c4ec:	2100      	movs	r1, #0
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f017 fa0e 	bl	8023910 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	813b      	strh	r3, [r7, #8]
 800c4f8:	2309      	movs	r3, #9
 800c4fa:	817b      	strh	r3, [r7, #10]
 800c4fc:	f107 0310 	add.w	r3, r7, #16
 800c500:	60fb      	str	r3, [r7, #12]

  // Only update the filter if the measurement is reliable (\hat{h} -> infty when R[2][2] -> 0)
  if (fabs(this->R[2][2]) > 0.1 && this->R[2][2] > 0){
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800c508:	eef0 7ae7 	vabs.f32	s15, s15
 800c50c:	ee17 0a90 	vmov	r0, s15
 800c510:	f7f4 f82a 	bl	8000568 <__aeabi_f2d>
 800c514:	a331      	add	r3, pc, #196	; (adr r3, 800c5dc <kalmanCoreUpdateWithTof+0x104>)
 800c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51a:	f7f4 fb0d 	bl	8000b38 <__aeabi_dcmpgt>
 800c51e:	4603      	mov	r3, r0
 800c520:	2b00      	cmp	r3, #0
 800c522:	d100      	bne.n	800c526 <kalmanCoreUpdateWithTof+0x4e>
    h[KC_STATE_Z] = 1 / cosf(angle); // This just acts like a gain for the sensor model. Further updates are done in the scalar update function below

    // Scalar update
    kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, tof->stdDev);
  }
}
 800c524:	e050      	b.n	800c5c8 <kalmanCoreUpdateWithTof+0xf0>
  if (fabs(this->R[2][2]) > 0.1 && this->R[2][2] > 0){
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800c52c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c534:	dc00      	bgt.n	800c538 <kalmanCoreUpdateWithTof+0x60>
}
 800c536:	e047      	b.n	800c5c8 <kalmanCoreUpdateWithTof+0xf0>
    float angle = fabsf(acosf(this->R[2][2])) - DEG_TO_RAD * (15.0f / 2.0f);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800c53e:	eeb0 0a67 	vmov.f32	s0, s15
 800c542:	f019 f8b9 	bl	80256b8 <acosf>
 800c546:	eef0 7a40 	vmov.f32	s15, s0
 800c54a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800c5d8 <kalmanCoreUpdateWithTof+0x100>
 800c54e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c552:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    if (angle < 0.0f) {
 800c556:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c55a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c55e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c562:	d502      	bpl.n	800c56a <kalmanCoreUpdateWithTof+0x92>
      angle = 0.0f;
 800c564:	f04f 0300 	mov.w	r3, #0
 800c568:	63fb      	str	r3, [r7, #60]	; 0x3c
    float predictedDistance = this->S[KC_STATE_Z] / cosf(angle);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	ed93 8a02 	vldr	s16, [r3, #8]
 800c570:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800c574:	f019 f990 	bl	8025898 <cosf>
 800c578:	eeb0 7a40 	vmov.f32	s14, s0
 800c57c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800c580:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    float measuredDistance = tof->distance; // [m]
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	637b      	str	r3, [r7, #52]	; 0x34
    h[KC_STATE_Z] = 1 / cosf(angle); // This just acts like a gain for the sensor model. Further updates are done in the scalar update function below
 800c58a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800c58e:	f019 f983 	bl	8025898 <cosf>
 800c592:	eeb0 7a40 	vmov.f32	s14, s0
 800c596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c59a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c59e:	edc7 7a06 	vstr	s15, [r7, #24]
    kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, tof->stdDev);
 800c5a2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c5a6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c5aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	ed93 7a02 	vldr	s14, [r3, #8]
 800c5b4:	f107 0308 	add.w	r3, r7, #8
 800c5b8:	eef0 0a47 	vmov.f32	s1, s14
 800c5bc:	eeb0 0a67 	vmov.f32	s0, s15
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f7fa fdd6 	bl	8007174 <kalmanCoreScalarUpdate>
}
 800c5c8:	bf00      	nop
 800c5ca:	3740      	adds	r7, #64	; 0x40
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	ecbd 8b02 	vpop	{d8}
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	f3af 8000 	nop.w
 800c5d8:	3e060a92 	.word	0x3e060a92
 800c5dc:	9999999a 	.word	0x9999999a
 800c5e0:	3fb99999 	.word	0x3fb99999

0800c5e4 <kalmanCoreUpdateWithYawError>:
 */

#include "mm_yaw_error.h"

void kalmanCoreUpdateWithYawError(kalmanCoreData_t *this, yawErrorMeasurement_t *error)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b08e      	sub	sp, #56	; 0x38
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
    float h[KC_STATE_DIM] = {0};
 800c5ee:	f107 0314 	add.w	r3, r7, #20
 800c5f2:	2224      	movs	r2, #36	; 0x24
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f017 f98a 	bl	8023910 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	81bb      	strh	r3, [r7, #12]
 800c600:	2309      	movs	r3, #9
 800c602:	81fb      	strh	r3, [r7, #14]
 800c604:	f107 0314 	add.w	r3, r7, #20
 800c608:	613b      	str	r3, [r7, #16]

    h[KC_STATE_D2] = 1;
 800c60a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c60e:	637b      	str	r3, [r7, #52]	; 0x34
    kalmanCoreScalarUpdate(this, &H, this->S[KC_STATE_D2] - error->yawError, error->stdDev);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	ed93 7a08 	vldr	s14, [r3, #32]
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	edd3 7a01 	vldr	s15, [r3, #4]
 800c61c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	ed93 7a02 	vldr	s14, [r3, #8]
 800c626:	f107 030c 	add.w	r3, r7, #12
 800c62a:	eef0 0a47 	vmov.f32	s1, s14
 800c62e:	eeb0 0a67 	vmov.f32	s0, s15
 800c632:	4619      	mov	r1, r3
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7fa fd9d 	bl	8007174 <kalmanCoreScalarUpdate>
}
 800c63a:	bf00      	nop
 800c63c:	3738      	adds	r7, #56	; 0x38
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <outlierFilterLighthouseReset>:
static const int32_t lhMaxWindowTimeMs = 5 * LH_MS_PER_FRAME;
static const int32_t lhBadSampleWindowChangeMs = -LH_MS_PER_FRAME;
static const int32_t lhGoodSampleWindowChangeMs = LH_MS_PER_FRAME / 2;
static const float lhMaxError = 0.05f;

void outlierFilterLighthouseReset(OutlierFilterLhState_t* this, const uint32_t nowMs) {
 800c642:	b480      	push	{r7}
 800c644:	b083      	sub	sp, #12
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
 800c64a:	6039      	str	r1, [r7, #0]
  this->openingTimeMs = nowMs;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	683a      	ldr	r2, [r7, #0]
 800c650:	601a      	str	r2, [r3, #0]
  this->openingWindowMs = lhMinWindowTimeMs;
 800c652:	f06f 020f 	mvn.w	r2, #15
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	605a      	str	r2, [r3, #4]
}
 800c65a:	bf00      	nop
 800c65c:	370c      	adds	r7, #12
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr
	...

0800c668 <outlierFilterLighthouseValidateSweep>:


bool outlierFilterLighthouseValidateSweep(OutlierFilterLhState_t* this, const float distanceToBs, const float angleError, const uint32_t nowMs) {
 800c668:	b480      	push	{r7}
 800c66a:	b089      	sub	sp, #36	; 0x24
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	ed87 0a02 	vstr	s0, [r7, #8]
 800c674:	edc7 0a01 	vstr	s1, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
  // float error = distanceToBs * tan(angleError);
  // We use an approximattion
  float error = distanceToBs * angleError;
 800c67a:	ed97 7a02 	vldr	s14, [r7, #8]
 800c67e:	edd7 7a01 	vldr	s15, [r7, #4]
 800c682:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c686:	edc7 7a06 	vstr	s15, [r7, #24]

  bool isGoodSample = (fabsf(error) < lhMaxError);
 800c68a:	edd7 7a06 	vldr	s15, [r7, #24]
 800c68e:	eef0 7ae7 	vabs.f32	s15, s15
 800c692:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800c728 <outlierFilterLighthouseValidateSweep+0xc0>
 800c696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c69e:	bf4c      	ite	mi
 800c6a0:	2301      	movmi	r3, #1
 800c6a2:	2300      	movpl	r3, #0
 800c6a4:	75fb      	strb	r3, [r7, #23]
  if (isGoodSample) {
 800c6a6:	7dfb      	ldrb	r3, [r7, #23]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d00e      	beq.n	800c6ca <outlierFilterLighthouseValidateSweep+0x62>
    this->openingWindowMs += lhGoodSampleWindowChangeMs;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	2204      	movs	r2, #4
 800c6b2:	441a      	add	r2, r3
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	605a      	str	r2, [r3, #4]
    if (this->openingWindowMs > lhMaxWindowTimeMs) {
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	2228      	movs	r2, #40	; 0x28
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	dd14      	ble.n	800c6ec <outlierFilterLighthouseValidateSweep+0x84>
      this->openingWindowMs = lhMaxWindowTimeMs;
 800c6c2:	2228      	movs	r2, #40	; 0x28
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	605a      	str	r2, [r3, #4]
 800c6c8:	e010      	b.n	800c6ec <outlierFilterLighthouseValidateSweep+0x84>
    }
  } else {
    this->openingWindowMs += lhBadSampleWindowChangeMs;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	f06f 0207 	mvn.w	r2, #7
 800c6d2:	441a      	add	r2, r3
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	605a      	str	r2, [r3, #4]
    if (this->openingWindowMs < lhMinWindowTimeMs) {
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	f06f 020f 	mvn.w	r2, #15
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	da03      	bge.n	800c6ec <outlierFilterLighthouseValidateSweep+0x84>
      this->openingWindowMs = lhMinWindowTimeMs;
 800c6e4:	f06f 020f 	mvn.w	r2, #15
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	605a      	str	r2, [r3, #4]
    }
  }

  bool result = true;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	77fb      	strb	r3, [r7, #31]
  bool isFilterClosed = (nowMs < this->openingTimeMs);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	683a      	ldr	r2, [r7, #0]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	bf34      	ite	cc
 800c6fa:	2301      	movcc	r3, #1
 800c6fc:	2300      	movcs	r3, #0
 800c6fe:	75bb      	strb	r3, [r7, #22]
  if (isFilterClosed) {
 800c700:	7dbb      	ldrb	r3, [r7, #22]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d001      	beq.n	800c70a <outlierFilterLighthouseValidateSweep+0xa2>
    result = isGoodSample;
 800c706:	7dfb      	ldrb	r3, [r7, #23]
 800c708:	77fb      	strb	r3, [r7, #31]
  }

  this->openingTimeMs = nowMs + this->openingWindowMs;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	461a      	mov	r2, r3
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	441a      	add	r2, r3
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	601a      	str	r2, [r3, #0]

  return result;
 800c718:	7ffb      	ldrb	r3, [r7, #31]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3724      	adds	r7, #36	; 0x24
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop
 800c728:	3d4ccccd 	.word	0x3d4ccccd

0800c72c <outlierFilterTdoaReset>:

// The level when the filter closes again
static const float INTEGRATOR_RESUME_ACTION_LEVEL = INTEGRATOR_SIZE * 0.9f;


void outlierFilterTdoaReset(OutlierFilterTdoaState_t* this) {
 800c72c:	b480      	push	{r7}
 800c72e:	b083      	sub	sp, #12
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  this->integrator = 0.0f;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f04f 0200 	mov.w	r2, #0
 800c73a:	601a      	str	r2, [r3, #0]
  this->isFilterOpen = true;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2201      	movs	r2, #1
 800c740:	721a      	strb	r2, [r3, #8]
  this->latestUpdateMs = 0;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	605a      	str	r2, [r3, #4]
}
 800c748:	bf00      	nop
 800c74a:	370c      	adds	r7, #12
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr

0800c754 <outlierFilterTdoaValidateIntegrator>:

bool outlierFilterTdoaValidateIntegrator(OutlierFilterTdoaState_t* this, const tdoaMeasurement_t* tdoa, const float error, const uint32_t nowMs) {
 800c754:	b580      	push	{r7, lr}
 800c756:	b088      	sub	sp, #32
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	ed87 0a01 	vstr	s0, [r7, #4]
 800c762:	603a      	str	r2, [r7, #0]
  // The accepted error when the filter is closed
  const float acceptedDistance = tdoa->stdDev * 2.5f;
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800c76a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800c76e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c772:	edc7 7a06 	vstr	s15, [r7, #24]

  // The level used to determine if a sample is added or removed from the integrator
  const float integratorTriggerDistance = tdoa->stdDev * 2.0f;
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800c77c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c780:	edc7 7a05 	vstr	s15, [r7, #20]


  bool sampleIsGood = false;
 800c784:	2300      	movs	r3, #0
 800c786:	77fb      	strb	r3, [r7, #31]

  // Discard samples that are physically impossible, most likely measurement error
  if (isDistanceDiffSmallerThanDistanceBetweenAnchors(tdoa)) {
 800c788:	68b8      	ldr	r0, [r7, #8]
 800c78a:	f000 f8ef 	bl	800c96c <isDistanceDiffSmallerThanDistanceBetweenAnchors>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	f000 8093 	beq.w	800c8bc <outlierFilterTdoaValidateIntegrator+0x168>
    uint32_t dtMs = nowMs - this->latestUpdateMs;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	683a      	ldr	r2, [r7, #0]
 800c79c:	1ad3      	subs	r3, r2, r3
 800c79e:	613b      	str	r3, [r7, #16]
    // Limit dt to minimize the impact on the integrator if we have not received samples for a long time (or at start up)
    dtMs = fminf(dtMs, INTEGRATOR_SIZE / 10.0f);
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	ee07 3a90 	vmov	s15, r3
 800c7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7aa:	ed9f 6a47 	vldr	s12, [pc, #284]	; 800c8c8 <outlierFilterTdoaValidateIntegrator+0x174>
 800c7ae:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800c7b2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800c7b6:	eef0 0a47 	vmov.f32	s1, s14
 800c7ba:	eeb0 0a67 	vmov.f32	s0, s15
 800c7be:	f019 f958 	bl	8025a72 <fminf>
 800c7c2:	eef0 7a40 	vmov.f32	s15, s0
 800c7c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7ca:	ee17 3a90 	vmov	r3, s15
 800c7ce:	613b      	str	r3, [r7, #16]

    if (fabsf(error) < integratorTriggerDistance) {
 800c7d0:	edd7 7a01 	vldr	s15, [r7, #4]
 800c7d4:	eef0 7ae7 	vabs.f32	s15, s15
 800c7d8:	ed97 7a05 	vldr	s14, [r7, #20]
 800c7dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7e4:	dd1d      	ble.n	800c822 <outlierFilterTdoaValidateIntegrator+0xce>
      this->integrator += dtMs;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	ed93 7a00 	vldr	s14, [r3]
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	ee07 3a90 	vmov	s15, r3
 800c7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	edc3 7a00 	vstr	s15, [r3]
      this->integrator = fminf(this->integrator, INTEGRATOR_SIZE);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	edd3 7a00 	vldr	s15, [r3]
 800c806:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800c8c8 <outlierFilterTdoaValidateIntegrator+0x174>
 800c80a:	eef0 0a47 	vmov.f32	s1, s14
 800c80e:	eeb0 0a67 	vmov.f32	s0, s15
 800c812:	f019 f92e 	bl	8025a72 <fminf>
 800c816:	eef0 7a40 	vmov.f32	s15, s0
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	edc3 7a00 	vstr	s15, [r3]
 800c820:	e01a      	b.n	800c858 <outlierFilterTdoaValidateIntegrator+0x104>
    } else {
      this->integrator -= dtMs;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	ed93 7a00 	vldr	s14, [r3]
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	ee07 3a90 	vmov	s15, r3
 800c82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c832:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	edc3 7a00 	vstr	s15, [r3]
      this->integrator = fmaxf(this->integrator, 0.0f);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	edd3 7a00 	vldr	s15, [r3]
 800c842:	eddf 0a22 	vldr	s1, [pc, #136]	; 800c8cc <outlierFilterTdoaValidateIntegrator+0x178>
 800c846:	eeb0 0a67 	vmov.f32	s0, s15
 800c84a:	f019 f8f7 	bl	8025a3c <fmaxf>
 800c84e:	eef0 7a40 	vmov.f32	s15, s0
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	edc3 7a00 	vstr	s15, [r3]
    }

    if (this->isFilterOpen) {
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	7a1b      	ldrb	r3, [r3, #8]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00f      	beq.n	800c880 <outlierFilterTdoaValidateIntegrator+0x12c>
      // The filter is open, let all samples through
      sampleIsGood = true;
 800c860:	2301      	movs	r3, #1
 800c862:	77fb      	strb	r3, [r7, #31]

      if (this->integrator > INTEGRATOR_RESUME_ACTION_LEVEL) {
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	edd3 7a00 	vldr	s15, [r3]
 800c86a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800c8d0 <outlierFilterTdoaValidateIntegrator+0x17c>
 800c86e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c876:	dd1e      	ble.n	800c8b6 <outlierFilterTdoaValidateIntegrator+0x162>
        // We have recovered and converged, close the filter again
        this->isFilterOpen = false;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2200      	movs	r2, #0
 800c87c:	721a      	strb	r2, [r3, #8]
 800c87e:	e01a      	b.n	800c8b6 <outlierFilterTdoaValidateIntegrator+0x162>
      }
    } else {
      // The filter is closed, let samples with a small error through
      sampleIsGood = (fabsf(error) < acceptedDistance);
 800c880:	edd7 7a01 	vldr	s15, [r7, #4]
 800c884:	eef0 7ae7 	vabs.f32	s15, s15
 800c888:	ed97 7a06 	vldr	s14, [r7, #24]
 800c88c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c894:	bfcc      	ite	gt
 800c896:	2301      	movgt	r3, #1
 800c898:	2300      	movle	r3, #0
 800c89a:	77fb      	strb	r3, [r7, #31]

      if (this->integrator < INTEGRATOR_FORCE_OPEN_LEVEL) {
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	edd3 7a00 	vldr	s15, [r3]
 800c8a2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800c8a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8ae:	d502      	bpl.n	800c8b6 <outlierFilterTdoaValidateIntegrator+0x162>
        // We have got lots of outliers lately, the kalman filter may have diverged. Open up to try to recover
        this->isFilterOpen = true;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	721a      	strb	r2, [r3, #8]
      }
    }

    this->latestUpdateMs = nowMs;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	683a      	ldr	r2, [r7, #0]
 800c8ba:	605a      	str	r2, [r3, #4]
  }

  return sampleIsGood;
 800c8bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3720      	adds	r7, #32
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	43960000 	.word	0x43960000
 800c8cc:	00000000 	.word	0x00000000
 800c8d0:	43870000 	.word	0x43870000

0800c8d4 <sq>:

static float sq(float a) {return a * a;}
 800c8d4:	b480      	push	{r7}
 800c8d6:	b083      	sub	sp, #12
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	ed87 0a01 	vstr	s0, [r7, #4]
 800c8de:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c8e6:	eeb0 0a67 	vmov.f32	s0, s15
 800c8ea:	370c      	adds	r7, #12
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <distanceSq>:

static float distanceSq(const point_t* a, const point_t* b) {
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	ed2d 8b02 	vpush	{d8}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
  return sq(a->x - b->x) + sq(a->y - b->y) + sq(a->z - b->z);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	ed93 7a01 	vldr	s14, [r3, #4]
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	edd3 7a01 	vldr	s15, [r3, #4]
 800c90e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c912:	eeb0 0a67 	vmov.f32	s0, s15
 800c916:	f7ff ffdd 	bl	800c8d4 <sq>
 800c91a:	eeb0 8a40 	vmov.f32	s16, s0
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	ed93 7a02 	vldr	s14, [r3, #8]
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	edd3 7a02 	vldr	s15, [r3, #8]
 800c92a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c92e:	eeb0 0a67 	vmov.f32	s0, s15
 800c932:	f7ff ffcf 	bl	800c8d4 <sq>
 800c936:	eef0 7a40 	vmov.f32	s15, s0
 800c93a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	ed93 7a03 	vldr	s14, [r3, #12]
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	edd3 7a03 	vldr	s15, [r3, #12]
 800c94a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c94e:	eeb0 0a67 	vmov.f32	s0, s15
 800c952:	f7ff ffbf 	bl	800c8d4 <sq>
 800c956:	eef0 7a40 	vmov.f32	s15, s0
 800c95a:	ee78 7a27 	vadd.f32	s15, s16, s15
}
 800c95e:	eeb0 0a67 	vmov.f32	s0, s15
 800c962:	3708      	adds	r7, #8
 800c964:	46bd      	mov	sp, r7
 800c966:	ecbd 8b02 	vpop	{d8}
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <isDistanceDiffSmallerThanDistanceBetweenAnchors>:

static bool isDistanceDiffSmallerThanDistanceBetweenAnchors(const tdoaMeasurement_t* tdoa) {
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  float anchorDistanceSq = distanceSq(&tdoa->anchorPositions[0], &tdoa->anchorPositions[1]);
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	3310      	adds	r3, #16
 800c97a:	4619      	mov	r1, r3
 800c97c:	4610      	mov	r0, r2
 800c97e:	f7ff ffb9 	bl	800c8f4 <distanceSq>
 800c982:	ed87 0a03 	vstr	s0, [r7, #12]
  float distanceDiffSq = sq(tdoa->distanceDiff);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c98c:	eeb0 0a67 	vmov.f32	s0, s15
 800c990:	f7ff ffa0 	bl	800c8d4 <sq>
 800c994:	ed87 0a02 	vstr	s0, [r7, #8]
  return (distanceDiffSq < anchorDistanceSq);
 800c998:	ed97 7a02 	vldr	s14, [r7, #8]
 800c99c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c9a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c9a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a8:	bf4c      	ite	mi
 800c9aa:	2301      	movmi	r3, #1
 800c9ac:	2300      	movpl	r3, #0
 800c9ae:	b2db      	uxtb	r3, r3
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3710      	adds	r7, #16
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <normalize_radians>:
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b084      	sub	sp, #16
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	ed87 0a01 	vstr	s0, [r7, #4]
	float signed_pi = copysignf(M_PI_F, radians);
 800c9c2:	edd7 0a01 	vldr	s1, [r7, #4]
 800c9c6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800ca0c <normalize_radians+0x54>
 800c9ca:	f017 f8b4 	bl	8023b36 <copysignf>
 800c9ce:	ed87 0a03 	vstr	s0, [r7, #12]
	radians = fmodf(radians + signed_pi, 2 * M_PI_F) - signed_pi;
 800c9d2:	ed97 7a01 	vldr	s14, [r7, #4]
 800c9d6:	edd7 7a03 	vldr	s15, [r7, #12]
 800c9da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9de:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800ca10 <normalize_radians+0x58>
 800c9e2:	eeb0 0a67 	vmov.f32	s0, s15
 800c9e6:	f018 fec1 	bl	802576c <fmodf>
 800c9ea:	eeb0 7a40 	vmov.f32	s14, s0
 800c9ee:	edd7 7a03 	vldr	s15, [r7, #12]
 800c9f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9f6:	edc7 7a01 	vstr	s15, [r7, #4]
	return radians;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	ee07 3a90 	vmov	s15, r3
}
 800ca00:	eeb0 0a67 	vmov.f32	s0, s15
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	bf00      	nop
 800ca0c:	40490fdb 	.word	0x40490fdb
 800ca10:	40c90fdb 	.word	0x40c90fdb

0800ca14 <fmodf_floored>:
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	ed87 0a01 	vstr	s0, [r7, #4]
 800ca1e:	edc7 0a00 	vstr	s1, [r7]
	return x - floorf(x / n) * n;
 800ca22:	ed97 7a01 	vldr	s14, [r7, #4]
 800ca26:	edd7 7a00 	vldr	s15, [r7]
 800ca2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ca2e:	eeb0 0a66 	vmov.f32	s0, s13
 800ca32:	f019 f859 	bl	8025ae8 <floorf>
 800ca36:	eeb0 7a40 	vmov.f32	s14, s0
 800ca3a:	edd7 7a00 	vldr	s15, [r7]
 800ca3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca42:	ed97 7a01 	vldr	s14, [r7, #4]
 800ca46:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800ca4a:	eeb0 0a67 	vmov.f32	s0, s15
 800ca4e:	3708      	adds	r7, #8
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <shortest_signed_angle_radians>:
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b084      	sub	sp, #16
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	ed87 0a01 	vstr	s0, [r7, #4]
 800ca5e:	edc7 0a00 	vstr	s1, [r7]
	float diff = goal - start;
 800ca62:	ed97 7a00 	vldr	s14, [r7]
 800ca66:	edd7 7a01 	vldr	s15, [r7, #4]
 800ca6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca6e:	edc7 7a03 	vstr	s15, [r7, #12]
	float signed_diff = fmodf_floored(diff + M_PI_F, 2 * M_PI_F) - M_PI_F;
 800ca72:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca76:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800caac <shortest_signed_angle_radians+0x58>
 800ca7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca7e:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800cab0 <shortest_signed_angle_radians+0x5c>
 800ca82:	eeb0 0a67 	vmov.f32	s0, s15
 800ca86:	f7ff ffc5 	bl	800ca14 <fmodf_floored>
 800ca8a:	eef0 7a40 	vmov.f32	s15, s0
 800ca8e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800caac <shortest_signed_angle_radians+0x58>
 800ca92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca96:	edc7 7a02 	vstr	s15, [r7, #8]
	return signed_diff;
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	ee07 3a90 	vmov	s15, r3
}
 800caa0:	eeb0 0a67 	vmov.f32	s0, s15
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	40490fdb 	.word	0x40490fdb
 800cab0:	40c90fdb 	.word	0x40c90fdb

0800cab4 <mkvec>:
static inline struct vec mkvec(float x, float y, float z) {
 800cab4:	b480      	push	{r7}
 800cab6:	b08f      	sub	sp, #60	; 0x3c
 800cab8:	af00      	add	r7, sp, #0
 800caba:	ed87 0a07 	vstr	s0, [r7, #28]
 800cabe:	edc7 0a06 	vstr	s1, [r7, #24]
 800cac2:	ed87 1a05 	vstr	s2, [r7, #20]
	v.x = x; v.y = y; v.z = z;
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	623b      	str	r3, [r7, #32]
 800caca:	69bb      	ldr	r3, [r7, #24]
 800cacc:	627b      	str	r3, [r7, #36]	; 0x24
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	62bb      	str	r3, [r7, #40]	; 0x28
	return v;
 800cad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cad6:	f107 0220 	add.w	r2, r7, #32
 800cada:	ca07      	ldmia	r2, {r0, r1, r2}
 800cadc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cae0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cae6:	ee06 1a90 	vmov	s13, r1
 800caea:	ee07 2a10 	vmov	s14, r2
 800caee:	ee07 3a90 	vmov	s15, r3
}
 800caf2:	eeb0 0a66 	vmov.f32	s0, s13
 800caf6:	eef0 0a47 	vmov.f32	s1, s14
 800cafa:	eeb0 1a67 	vmov.f32	s2, s15
 800cafe:	373c      	adds	r7, #60	; 0x3c
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <vrepeat>:
static inline struct vec vrepeat(float x) {
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b08a      	sub	sp, #40	; 0x28
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	ed87 0a05 	vstr	s0, [r7, #20]
	return mkvec(x, x, x);
 800cb12:	ed97 1a05 	vldr	s2, [r7, #20]
 800cb16:	edd7 0a05 	vldr	s1, [r7, #20]
 800cb1a:	ed97 0a05 	vldr	s0, [r7, #20]
 800cb1e:	f7ff ffc9 	bl	800cab4 <mkvec>
 800cb22:	eef0 6a40 	vmov.f32	s13, s0
 800cb26:	eeb0 7a60 	vmov.f32	s14, s1
 800cb2a:	eef0 7a41 	vmov.f32	s15, s2
 800cb2e:	edc7 6a07 	vstr	s13, [r7, #28]
 800cb32:	ed87 7a08 	vstr	s14, [r7, #32]
 800cb36:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800cb3a:	69f9      	ldr	r1, [r7, #28]
 800cb3c:	6a3a      	ldr	r2, [r7, #32]
 800cb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb40:	ee06 1a90 	vmov	s13, r1
 800cb44:	ee07 2a10 	vmov	s14, r2
 800cb48:	ee07 3a90 	vmov	s15, r3
}
 800cb4c:	eeb0 0a66 	vmov.f32	s0, s13
 800cb50:	eef0 0a47 	vmov.f32	s1, s14
 800cb54:	eeb0 1a67 	vmov.f32	s2, s15
 800cb58:	3728      	adds	r7, #40	; 0x28
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
	...

0800cb60 <vzero>:
static inline struct vec vzero(void) {
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b088      	sub	sp, #32
 800cb64:	af00      	add	r7, sp, #0
	return vrepeat(0.0f);
 800cb66:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800cbac <vzero+0x4c>
 800cb6a:	f7ff ffcd 	bl	800cb08 <vrepeat>
 800cb6e:	eef0 6a40 	vmov.f32	s13, s0
 800cb72:	eeb0 7a60 	vmov.f32	s14, s1
 800cb76:	eef0 7a41 	vmov.f32	s15, s2
 800cb7a:	edc7 6a05 	vstr	s13, [r7, #20]
 800cb7e:	ed87 7a06 	vstr	s14, [r7, #24]
 800cb82:	edc7 7a07 	vstr	s15, [r7, #28]
 800cb86:	6979      	ldr	r1, [r7, #20]
 800cb88:	69ba      	ldr	r2, [r7, #24]
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	ee06 1a90 	vmov	s13, r1
 800cb90:	ee07 2a10 	vmov	s14, r2
 800cb94:	ee07 3a90 	vmov	s15, r3
}
 800cb98:	eeb0 0a66 	vmov.f32	s0, s13
 800cb9c:	eef0 0a47 	vmov.f32	s1, s14
 800cba0:	eeb0 1a67 	vmov.f32	s2, s15
 800cba4:	3720      	adds	r7, #32
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	00000000 	.word	0x00000000

0800cbb0 <vneg>:
static inline struct vec vneg(struct vec v) {
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b08c      	sub	sp, #48	; 0x30
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	eef0 6a40 	vmov.f32	s13, s0
 800cbba:	eeb0 7a60 	vmov.f32	s14, s1
 800cbbe:	eef0 7a41 	vmov.f32	s15, s2
 800cbc2:	edc7 6a05 	vstr	s13, [r7, #20]
 800cbc6:	ed87 7a06 	vstr	s14, [r7, #24]
 800cbca:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkvec(-v.x, -v.y, -v.z);
 800cbce:	edd7 7a05 	vldr	s15, [r7, #20]
 800cbd2:	eeb1 7a67 	vneg.f32	s14, s15
 800cbd6:	edd7 7a06 	vldr	s15, [r7, #24]
 800cbda:	eef1 6a67 	vneg.f32	s13, s15
 800cbde:	edd7 7a07 	vldr	s15, [r7, #28]
 800cbe2:	eef1 7a67 	vneg.f32	s15, s15
 800cbe6:	eeb0 1a67 	vmov.f32	s2, s15
 800cbea:	eef0 0a66 	vmov.f32	s1, s13
 800cbee:	eeb0 0a47 	vmov.f32	s0, s14
 800cbf2:	f7ff ff5f 	bl	800cab4 <mkvec>
 800cbf6:	eef0 6a40 	vmov.f32	s13, s0
 800cbfa:	eeb0 7a60 	vmov.f32	s14, s1
 800cbfe:	eef0 7a41 	vmov.f32	s15, s2
 800cc02:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800cc06:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800cc0a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800cc0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc14:	ee06 1a90 	vmov	s13, r1
 800cc18:	ee07 2a10 	vmov	s14, r2
 800cc1c:	ee07 3a90 	vmov	s15, r3
}
 800cc20:	eeb0 0a66 	vmov.f32	s0, s13
 800cc24:	eef0 0a47 	vmov.f32	s1, s14
 800cc28:	eeb0 1a67 	vmov.f32	s2, s15
 800cc2c:	3730      	adds	r7, #48	; 0x30
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}

0800cc32 <vadd>:
static inline struct vec vadd(struct vec a, struct vec b) {
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b08e      	sub	sp, #56	; 0x38
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	eeb0 5a40 	vmov.f32	s10, s0
 800cc3c:	eef0 5a60 	vmov.f32	s11, s1
 800cc40:	eeb0 6a41 	vmov.f32	s12, s2
 800cc44:	eef0 6a61 	vmov.f32	s13, s3
 800cc48:	eeb0 7a42 	vmov.f32	s14, s4
 800cc4c:	eef0 7a62 	vmov.f32	s15, s5
 800cc50:	ed87 5a07 	vstr	s10, [r7, #28]
 800cc54:	edc7 5a08 	vstr	s11, [r7, #32]
 800cc58:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800cc5c:	edc7 6a04 	vstr	s13, [r7, #16]
 800cc60:	ed87 7a05 	vstr	s14, [r7, #20]
 800cc64:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(a.x + b.x, a.y + b.y, a.z + b.z);
 800cc68:	ed97 7a07 	vldr	s14, [r7, #28]
 800cc6c:	edd7 7a04 	vldr	s15, [r7, #16]
 800cc70:	ee77 6a27 	vadd.f32	s13, s14, s15
 800cc74:	ed97 7a08 	vldr	s14, [r7, #32]
 800cc78:	edd7 7a05 	vldr	s15, [r7, #20]
 800cc7c:	ee37 6a27 	vadd.f32	s12, s14, s15
 800cc80:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800cc84:	edd7 7a06 	vldr	s15, [r7, #24]
 800cc88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc8c:	eeb0 1a67 	vmov.f32	s2, s15
 800cc90:	eef0 0a46 	vmov.f32	s1, s12
 800cc94:	eeb0 0a66 	vmov.f32	s0, s13
 800cc98:	f7ff ff0c 	bl	800cab4 <mkvec>
 800cc9c:	eef0 6a40 	vmov.f32	s13, s0
 800cca0:	eeb0 7a60 	vmov.f32	s14, s1
 800cca4:	eef0 7a41 	vmov.f32	s15, s2
 800cca8:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 800ccac:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800ccb0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800ccb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ccb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccba:	ee06 1a90 	vmov	s13, r1
 800ccbe:	ee07 2a10 	vmov	s14, r2
 800ccc2:	ee07 3a90 	vmov	s15, r3
}
 800ccc6:	eeb0 0a66 	vmov.f32	s0, s13
 800ccca:	eef0 0a47 	vmov.f32	s1, s14
 800ccce:	eeb0 1a67 	vmov.f32	s2, s15
 800ccd2:	3738      	adds	r7, #56	; 0x38
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <vsub>:
static inline struct vec vsub(struct vec a, struct vec b) {
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b090      	sub	sp, #64	; 0x40
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	eeb0 5a40 	vmov.f32	s10, s0
 800cce2:	eef0 5a60 	vmov.f32	s11, s1
 800cce6:	eeb0 6a41 	vmov.f32	s12, s2
 800ccea:	eef0 6a61 	vmov.f32	s13, s3
 800ccee:	eeb0 7a42 	vmov.f32	s14, s4
 800ccf2:	eef0 7a62 	vmov.f32	s15, s5
 800ccf6:	ed87 5a07 	vstr	s10, [r7, #28]
 800ccfa:	edc7 5a08 	vstr	s11, [r7, #32]
 800ccfe:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800cd02:	edc7 6a04 	vstr	s13, [r7, #16]
 800cd06:	ed87 7a05 	vstr	s14, [r7, #20]
 800cd0a:	edc7 7a06 	vstr	s15, [r7, #24]
	return vadd(a, vneg(b));
 800cd0e:	edd7 6a04 	vldr	s13, [r7, #16]
 800cd12:	ed97 7a05 	vldr	s14, [r7, #20]
 800cd16:	edd7 7a06 	vldr	s15, [r7, #24]
 800cd1a:	eeb0 0a66 	vmov.f32	s0, s13
 800cd1e:	eef0 0a47 	vmov.f32	s1, s14
 800cd22:	eeb0 1a67 	vmov.f32	s2, s15
 800cd26:	f7ff ff43 	bl	800cbb0 <vneg>
 800cd2a:	eef0 6a40 	vmov.f32	s13, s0
 800cd2e:	eeb0 7a60 	vmov.f32	s14, s1
 800cd32:	eef0 7a41 	vmov.f32	s15, s2
 800cd36:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800cd3a:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800cd3e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800cd42:	ed97 5a0d 	vldr	s10, [r7, #52]	; 0x34
 800cd46:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 800cd4a:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 800cd4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd52:	ed97 7a08 	vldr	s14, [r7, #32]
 800cd56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800cd5a:	eef0 1a45 	vmov.f32	s3, s10
 800cd5e:	eeb0 2a65 	vmov.f32	s4, s11
 800cd62:	eef0 2a46 	vmov.f32	s5, s12
 800cd66:	eeb0 0a66 	vmov.f32	s0, s13
 800cd6a:	eef0 0a47 	vmov.f32	s1, s14
 800cd6e:	eeb0 1a67 	vmov.f32	s2, s15
 800cd72:	f7ff ff5e 	bl	800cc32 <vadd>
 800cd76:	eef0 6a40 	vmov.f32	s13, s0
 800cd7a:	eeb0 7a60 	vmov.f32	s14, s1
 800cd7e:	eef0 7a41 	vmov.f32	s15, s2
 800cd82:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800cd86:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800cd8a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800cd8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd94:	ee06 1a90 	vmov	s13, r1
 800cd98:	ee07 2a10 	vmov	s14, r2
 800cd9c:	ee07 3a90 	vmov	s15, r3
}
 800cda0:	eeb0 0a66 	vmov.f32	s0, s13
 800cda4:	eef0 0a47 	vmov.f32	s1, s14
 800cda8:	eeb0 1a67 	vmov.f32	s2, s15
 800cdac:	3740      	adds	r7, #64	; 0x40
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <piecewise_duration>:
	unsigned char n_pieces;
	struct poly4d* pieces;
};

static inline float piecewise_duration(struct piecewise_traj const *pp)
{
 800cdb2:	b480      	push	{r7}
 800cdb4:	b085      	sub	sp, #20
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
	float total_dur = 0;
 800cdba:	f04f 0300 	mov.w	r3, #0
 800cdbe:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < pp->n_pieces; ++i) {
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	60bb      	str	r3, [r7, #8]
 800cdc4:	e012      	b.n	800cdec <piecewise_duration+0x3a>
		total_dur += pp->pieces[i].duration;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6999      	ldr	r1, [r3, #24]
 800cdca:	68ba      	ldr	r2, [r7, #8]
 800cdcc:	4613      	mov	r3, r2
 800cdce:	015b      	lsls	r3, r3, #5
 800cdd0:	4413      	add	r3, r2
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	440b      	add	r3, r1
 800cdd6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800cdda:	ed97 7a03 	vldr	s14, [r7, #12]
 800cdde:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cde2:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < pp->n_pieces; ++i) {
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	3301      	adds	r3, #1
 800cdea:	60bb      	str	r3, [r7, #8]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	7d1b      	ldrb	r3, [r3, #20]
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	dbe6      	blt.n	800cdc6 <piecewise_duration+0x14>
	}
	return total_dur * pp->timescale;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	ed93 7a01 	vldr	s14, [r3, #4]
 800cdfe:	edd7 7a03 	vldr	s15, [r7, #12]
 800ce02:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800ce06:	eeb0 0a67 	vmov.f32	s0, s15
 800ce0a:	3714      	adds	r7, #20
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <piecewise_is_finished>:
struct traj_eval piecewise_eval_reversed(
	struct piecewise_traj const *traj, float t);


static inline bool piecewise_is_finished(struct piecewise_traj const *traj, float t)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	ed2d 8b02 	vpush	{d8}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	ed87 0a00 	vstr	s0, [r7]
	return (t - traj->t_begin) >= piecewise_duration(traj);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	edd3 7a00 	vldr	s15, [r3]
 800ce2a:	ed97 7a00 	vldr	s14, [r7]
 800ce2e:	ee37 8a67 	vsub.f32	s16, s14, s15
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f7ff ffbd 	bl	800cdb2 <piecewise_duration>
 800ce38:	eef0 7a40 	vmov.f32	s15, s0
 800ce3c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ce40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce44:	bfac      	ite	ge
 800ce46:	2301      	movge	r3, #1
 800ce48:	2300      	movlt	r3, #0
 800ce4a:	b2db      	uxtb	r3, r3
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3708      	adds	r7, #8
 800ce50:	46bd      	mov	sp, r7
 800ce52:	ecbd 8b02 	vpop	{d8}
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <piecewise_compressed_duration>:
	} current_piece;
};

// Returns the total duration of a compressed trajectory. The total duration
// is pre-calculated and cached in the trajectory itself.
static float piecewise_compressed_duration(struct piecewise_traj_compressed const *traj) {
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
	return traj->duration;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	ee07 3a90 	vmov	s15, r3
}
 800ce68:	eeb0 0a67 	vmov.f32	s0, s15
 800ce6c:	370c      	adds	r7, #12
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr

0800ce76 <piecewise_compressed_is_finished>:

// Returns whether we have finished flying the trajectory
static inline bool piecewise_compressed_is_finished(
	struct piecewise_traj_compressed const *traj, float t)
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	ed2d 8b02 	vpush	{d8}
 800ce7c:	b082      	sub	sp, #8
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
 800ce82:	ed87 0a00 	vstr	s0, [r7]
	return (t - traj->t_begin) >= piecewise_compressed_duration(traj);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	edd3 7a00 	vldr	s15, [r3]
 800ce8c:	ed97 7a00 	vldr	s14, [r7]
 800ce90:	ee37 8a67 	vsub.f32	s16, s14, s15
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f7ff ffdf 	bl	800ce58 <piecewise_compressed_duration>
 800ce9a:	eef0 7a40 	vmov.f32	s15, s0
 800ce9e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cea6:	bfac      	ite	ge
 800cea8:	2301      	movge	r3, #1
 800ceaa:	2300      	movlt	r3, #0
 800ceac:	b2db      	uxtb	r3, r3
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3708      	adds	r7, #8
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	ecbd 8b02 	vpop	{d8}
 800ceb8:	bd80      	pop	{r7, pc}
	...

0800cebc <plan_takeoff_or_landing>:
#include "planner.h"

static struct traj_eval plan_eval(struct planner *p, float t);

static void plan_takeoff_or_landing(struct planner *p, struct vec curr_pos, float curr_yaw, float hover_height, float hover_yaw, float duration)
{
 800cebc:	b5b0      	push	{r4, r5, r7, lr}
 800cebe:	b0a0      	sub	sp, #128	; 0x80
 800cec0:	af08      	add	r7, sp, #32
 800cec2:	61f8      	str	r0, [r7, #28]
 800cec4:	eef0 6a40 	vmov.f32	s13, s0
 800cec8:	eeb0 7a60 	vmov.f32	s14, s1
 800cecc:	eef0 7a41 	vmov.f32	s15, s2
 800ced0:	edc7 1a03 	vstr	s3, [r7, #12]
 800ced4:	ed87 2a02 	vstr	s4, [r7, #8]
 800ced8:	edc7 2a01 	vstr	s5, [r7, #4]
 800cedc:	ed87 3a00 	vstr	s6, [r7]
 800cee0:	edc7 6a04 	vstr	s13, [r7, #16]
 800cee4:	ed87 7a05 	vstr	s14, [r7, #20]
 800cee8:	edc7 7a06 	vstr	s15, [r7, #24]
	struct vec hover_pos = curr_pos;
 800ceec:	f107 0320 	add.w	r3, r7, #32
 800cef0:	f107 0210 	add.w	r2, r7, #16
 800cef4:	ca07      	ldmia	r2, {r0, r1, r2}
 800cef6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hover_pos.z = hover_height;
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	62bb      	str	r3, [r7, #40]	; 0x28

	// compute the shortest possible rotation towards 0
	hover_yaw = normalize_radians(hover_yaw);
 800cefe:	ed97 0a01 	vldr	s0, [r7, #4]
 800cf02:	f7ff fd59 	bl	800c9b8 <normalize_radians>
 800cf06:	ed87 0a01 	vstr	s0, [r7, #4]
	curr_yaw = normalize_radians(curr_yaw);
 800cf0a:	ed97 0a03 	vldr	s0, [r7, #12]
 800cf0e:	f7ff fd53 	bl	800c9b8 <normalize_radians>
 800cf12:	ed87 0a03 	vstr	s0, [r7, #12]
	float goal_yaw = curr_yaw + shortest_signed_angle_radians(curr_yaw, hover_yaw);
 800cf16:	edd7 0a01 	vldr	s1, [r7, #4]
 800cf1a:	ed97 0a03 	vldr	s0, [r7, #12]
 800cf1e:	f7ff fd99 	bl	800ca54 <shortest_signed_angle_radians>
 800cf22:	eeb0 7a40 	vmov.f32	s14, s0
 800cf26:	edd7 7a03 	vldr	s15, [r7, #12]
 800cf2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cf2e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	piecewise_plan_7th_order_no_jerk(&p->planned_trajectory, duration,
 800cf32:	69fb      	ldr	r3, [r7, #28]
 800cf34:	f103 0508 	add.w	r5, r3, #8
 800cf38:	f7ff fe12 	bl	800cb60 <vzero>
 800cf3c:	eef0 6a40 	vmov.f32	s13, s0
 800cf40:	eeb0 7a60 	vmov.f32	s14, s1
 800cf44:	eef0 7a41 	vmov.f32	s15, s2
 800cf48:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 800cf4c:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800cf50:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800cf54:	f7ff fe04 	bl	800cb60 <vzero>
 800cf58:	eef0 6a40 	vmov.f32	s13, s0
 800cf5c:	eeb0 7a60 	vmov.f32	s14, s1
 800cf60:	eef0 7a41 	vmov.f32	s15, s2
 800cf64:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 800cf68:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 800cf6c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800cf70:	f7ff fdf6 	bl	800cb60 <vzero>
 800cf74:	eef0 6a40 	vmov.f32	s13, s0
 800cf78:	eeb0 7a60 	vmov.f32	s14, s1
 800cf7c:	eef0 7a41 	vmov.f32	s15, s2
 800cf80:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 800cf84:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800cf88:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 800cf8c:	f7ff fde8 	bl	800cb60 <vzero>
 800cf90:	eef0 6a40 	vmov.f32	s13, s0
 800cf94:	eeb0 7a60 	vmov.f32	s14, s1
 800cf98:	eef0 7a41 	vmov.f32	s15, s2
 800cf9c:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 800cfa0:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 800cfa4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 800cfa8:	ed97 6a08 	vldr	s12, [r7, #32]
 800cfac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800cfb0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cfb4:	edd7 4a0e 	vldr	s9, [r7, #56]	; 0x38
 800cfb8:	ed97 5a0f 	vldr	s10, [r7, #60]	; 0x3c
 800cfbc:	edd7 5a10 	vldr	s11, [r7, #64]	; 0x40
 800cfc0:	edd7 2a0b 	vldr	s5, [r7, #44]	; 0x2c
 800cfc4:	ed97 3a0c 	vldr	s6, [r7, #48]	; 0x30
 800cfc8:	edd7 3a0d 	vldr	s7, [r7, #52]	; 0x34
 800cfcc:	edd7 0a04 	vldr	s1, [r7, #16]
 800cfd0:	ed97 1a05 	vldr	s2, [r7, #20]
 800cfd4:	edd7 1a06 	vldr	s3, [r7, #24]
 800cfd8:	ac04      	add	r4, sp, #16
 800cfda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800cfde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cfe2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cfe6:	f04f 0300 	mov.w	r3, #0
 800cfea:	9303      	str	r3, [sp, #12]
 800cfec:	466c      	mov	r4, sp
 800cfee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cff2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cff6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cffa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800cffe:	ed9f 4a06 	vldr	s8, [pc, #24]	; 800d018 <plan_takeoff_or_landing+0x15c>
 800d002:	ed97 2a03 	vldr	s4, [r7, #12]
 800d006:	ed97 0a00 	vldr	s0, [r7]
 800d00a:	4628      	mov	r0, r5
 800d00c:	f002 f8b0 	bl	800f170 <piecewise_plan_7th_order_no_jerk>
		curr_pos,  curr_yaw,  vzero(), 0, vzero(),
		hover_pos, goal_yaw, vzero(), 0, vzero());
}
 800d010:	bf00      	nop
 800d012:	3760      	adds	r7, #96	; 0x60
 800d014:	46bd      	mov	sp, r7
 800d016:	bdb0      	pop	{r4, r5, r7, pc}
 800d018:	00000000 	.word	0x00000000

0800d01c <plan_init>:
// ----------------- //
// public functions. //
// ----------------- //

void plan_init(struct planner *p)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b083      	sub	sp, #12
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
	p->state = TRAJECTORY_STATE_IDLE;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2200      	movs	r2, #0
 800d028:	701a      	strb	r2, [r3, #0]
	p->type = TRAJECTORY_TYPE_PIECEWISE;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2200      	movs	r2, #0
 800d02e:	705a      	strb	r2, [r3, #1]
	p->reversed = false;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2200      	movs	r2, #0
 800d034:	709a      	strb	r2, [r3, #2]
	p->trajectory = NULL;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2200      	movs	r2, #0
 800d03a:	605a      	str	r2, [r3, #4]
	p->compressed_trajectory = NULL;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	605a      	str	r2, [r3, #4]
	p->planned_trajectory.pieces = p->pieces;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	621a      	str	r2, [r3, #32]
}
 800d04c:	bf00      	nop
 800d04e:	370c      	adds	r7, #12
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <plan_stop>:

void plan_stop(struct planner *p)
{
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
	p->state = TRAJECTORY_STATE_IDLE;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	701a      	strb	r2, [r3, #0]
}
 800d066:	bf00      	nop
 800d068:	370c      	adds	r7, #12
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr

0800d072 <plan_is_finished>:

bool plan_is_finished(struct planner *p, float t)
{
 800d072:	b580      	push	{r7, lr}
 800d074:	b082      	sub	sp, #8
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
 800d07a:	ed87 0a00 	vstr	s0, [r7]
	switch (p->type) {
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	785b      	ldrb	r3, [r3, #1]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d002      	beq.n	800d08c <plan_is_finished+0x1a>
 800d086:	2b01      	cmp	r3, #1
 800d088:	d009      	beq.n	800d09e <plan_is_finished+0x2c>
 800d08a:	e011      	b.n	800d0b0 <plan_is_finished+0x3e>
		case TRAJECTORY_TYPE_PIECEWISE:
			return piecewise_is_finished(p->trajectory, t);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	ed97 0a00 	vldr	s0, [r7]
 800d094:	4618      	mov	r0, r3
 800d096:	f7ff febd 	bl	800ce14 <piecewise_is_finished>
 800d09a:	4603      	mov	r3, r0
 800d09c:	e009      	b.n	800d0b2 <plan_is_finished+0x40>

		case TRAJECTORY_TYPE_PIECEWISE_COMPRESSED:
		  return piecewise_compressed_is_finished(p->compressed_trajectory, t);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	ed97 0a00 	vldr	s0, [r7]
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7ff fee5 	bl	800ce76 <piecewise_compressed_is_finished>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	e000      	b.n	800d0b2 <plan_is_finished+0x40>

		default:
		  return 1;
 800d0b0:	2301      	movs	r3, #1
	}
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3708      	adds	r7, #8
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <plan_is_stopped>:

bool plan_is_stopped(struct planner *p)
{
 800d0ba:	b480      	push	{r7}
 800d0bc:	b083      	sub	sp, #12
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
	return p->state == TRAJECTORY_STATE_IDLE;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	bf0c      	ite	eq
 800d0ca:	2301      	moveq	r3, #1
 800d0cc:	2300      	movne	r3, #0
 800d0ce:	b2db      	uxtb	r3, r3
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	370c      	adds	r7, #12
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <plan_is_disabled>:
{
	p->state = TRAJECTORY_STATE_DISABLED;
}

bool plan_is_disabled(struct planner *p)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
	return p->state == TRAJECTORY_STATE_DISABLED;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	2b04      	cmp	r3, #4
 800d0ea:	bf0c      	ite	eq
 800d0ec:	2301      	moveq	r3, #1
 800d0ee:	2300      	movne	r3, #0
 800d0f0:	b2db      	uxtb	r3, r3
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	370c      	adds	r7, #12
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr

0800d0fe <plan_current_goal>:

struct traj_eval plan_current_goal(struct planner *p, float t)
{
 800d0fe:	b580      	push	{r7, lr}
 800d100:	b084      	sub	sp, #16
 800d102:	af00      	add	r7, sp, #0
 800d104:	60f8      	str	r0, [r7, #12]
 800d106:	60b9      	str	r1, [r7, #8]
 800d108:	ed87 0a01 	vstr	s0, [r7, #4]
	switch (p->state) {
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	2b01      	cmp	r3, #1
 800d112:	d00c      	beq.n	800d12e <plan_current_goal+0x30>
 800d114:	2b03      	cmp	r3, #3
 800d116:	d112      	bne.n	800d13e <plan_current_goal+0x40>
		case TRAJECTORY_STATE_LANDING:
			if (plan_is_finished(p, t)) {
 800d118:	ed97 0a01 	vldr	s0, [r7, #4]
 800d11c:	68b8      	ldr	r0, [r7, #8]
 800d11e:	f7ff ffa8 	bl	800d072 <plan_is_finished>
 800d122:	4603      	mov	r3, r0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d002      	beq.n	800d12e <plan_current_goal+0x30>
				p->state = TRAJECTORY_STATE_IDLE;
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	2200      	movs	r2, #0
 800d12c:	701a      	strb	r2, [r3, #0]
			}
			// intentional fall-thru
		case TRAJECTORY_STATE_FLYING:
			return plan_eval(p, t);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	ed97 0a01 	vldr	s0, [r7, #4]
 800d134:	68b9      	ldr	r1, [r7, #8]
 800d136:	4618      	mov	r0, r3
 800d138:	f000 f809 	bl	800d14e <plan_eval>
 800d13c:	e003      	b.n	800d146 <plan_current_goal+0x48>

		default:
			return traj_eval_invalid();
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	4618      	mov	r0, r3
 800d142:	f001 fbfd 	bl	800e940 <traj_eval_invalid>
	}
}
 800d146:	68f8      	ldr	r0, [r7, #12]
 800d148:	3710      	adds	r7, #16
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <plan_eval>:

struct traj_eval plan_eval(struct planner *p, float t)
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b084      	sub	sp, #16
 800d152:	af00      	add	r7, sp, #0
 800d154:	60f8      	str	r0, [r7, #12]
 800d156:	60b9      	str	r1, [r7, #8]
 800d158:	ed87 0a01 	vstr	s0, [r7, #4]
	switch (p->type) {
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	785b      	ldrb	r3, [r3, #1]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d002      	beq.n	800d16a <plan_eval+0x1c>
 800d164:	2b01      	cmp	r3, #1
 800d166:	d018      	beq.n	800d19a <plan_eval+0x4c>
 800d168:	e02a      	b.n	800d1c0 <plan_eval+0x72>
		case TRAJECTORY_TYPE_PIECEWISE:
			if (p->reversed) {
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	789b      	ldrb	r3, [r3, #2]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d009      	beq.n	800d186 <plan_eval+0x38>
				return piecewise_eval_reversed(p->trajectory, t);
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	685a      	ldr	r2, [r3, #4]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	ed97 0a01 	vldr	s0, [r7, #4]
 800d17c:	4611      	mov	r1, r2
 800d17e:	4618      	mov	r0, r3
 800d180:	f001 fefa 	bl	800ef78 <piecewise_eval_reversed>
 800d184:	e020      	b.n	800d1c8 <plan_eval+0x7a>
			}
			else {
				return piecewise_eval(p->trajectory, t);
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	685a      	ldr	r2, [r3, #4]
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	ed97 0a01 	vldr	s0, [r7, #4]
 800d190:	4611      	mov	r1, r2
 800d192:	4618      	mov	r0, r3
 800d194:	f001 fe06 	bl	800eda4 <piecewise_eval>
 800d198:	e016      	b.n	800d1c8 <plan_eval+0x7a>
			}
			break;

		case TRAJECTORY_TYPE_PIECEWISE_COMPRESSED:
			if (p->reversed) {
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	789b      	ldrb	r3, [r3, #2]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d004      	beq.n	800d1ac <plan_eval+0x5e>
				/* not supported */
				return traj_eval_invalid();
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f001 fbcb 	bl	800e940 <traj_eval_invalid>
 800d1aa:	e00d      	b.n	800d1c8 <plan_eval+0x7a>
			}
			else {
				return piecewise_compressed_eval(p->compressed_trajectory, t);
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	685a      	ldr	r2, [r3, #4]
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	ed97 0a01 	vldr	s0, [r7, #4]
 800d1b6:	4611      	mov	r1, r2
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f002 face 	bl	800f75a <piecewise_compressed_eval>
 800d1be:	e003      	b.n	800d1c8 <plan_eval+0x7a>
			}
			break;

		default:
			return traj_eval_invalid();
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f001 fbbc 	bl	800e940 <traj_eval_invalid>
	}
}
 800d1c8:	68f8      	ldr	r0, [r7, #12]
 800d1ca:	3710      	adds	r7, #16
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <plan_takeoff>:

int plan_takeoff(struct planner *p, struct vec curr_pos, float curr_yaw, float hover_height, float hover_yaw, float duration, float t)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b08a      	sub	sp, #40	; 0x28
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6278      	str	r0, [r7, #36]	; 0x24
 800d1d8:	eef0 6a40 	vmov.f32	s13, s0
 800d1dc:	eeb0 7a60 	vmov.f32	s14, s1
 800d1e0:	eef0 7a41 	vmov.f32	s15, s2
 800d1e4:	edc7 1a05 	vstr	s3, [r7, #20]
 800d1e8:	ed87 2a04 	vstr	s4, [r7, #16]
 800d1ec:	edc7 2a03 	vstr	s5, [r7, #12]
 800d1f0:	ed87 3a02 	vstr	s6, [r7, #8]
 800d1f4:	edc7 3a01 	vstr	s7, [r7, #4]
 800d1f8:	edc7 6a06 	vstr	s13, [r7, #24]
 800d1fc:	ed87 7a07 	vstr	s14, [r7, #28]
 800d200:	edc7 7a08 	vstr	s15, [r7, #32]
	if (p->state != TRAJECTORY_STATE_IDLE) {
 800d204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d001      	beq.n	800d210 <plan_takeoff+0x40>
		return 1;
 800d20c:	2301      	movs	r3, #1
 800d20e:	e028      	b.n	800d262 <plan_takeoff+0x92>
	}

	plan_takeoff_or_landing(p, curr_pos, curr_yaw, hover_height, hover_yaw, duration);
 800d210:	edd7 6a06 	vldr	s13, [r7, #24]
 800d214:	ed97 7a07 	vldr	s14, [r7, #28]
 800d218:	edd7 7a08 	vldr	s15, [r7, #32]
 800d21c:	ed97 3a02 	vldr	s6, [r7, #8]
 800d220:	edd7 2a03 	vldr	s5, [r7, #12]
 800d224:	ed97 2a04 	vldr	s4, [r7, #16]
 800d228:	edd7 1a05 	vldr	s3, [r7, #20]
 800d22c:	eeb0 0a66 	vmov.f32	s0, s13
 800d230:	eef0 0a47 	vmov.f32	s1, s14
 800d234:	eeb0 1a67 	vmov.f32	s2, s15
 800d238:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d23a:	f7ff fe3f 	bl	800cebc <plan_takeoff_or_landing>
	p->reversed = false;
 800d23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d240:	2200      	movs	r2, #0
 800d242:	709a      	strb	r2, [r3, #2]
	p->state = TRAJECTORY_STATE_FLYING;
 800d244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d246:	2201      	movs	r2, #1
 800d248:	701a      	strb	r2, [r3, #0]
	p->type = TRAJECTORY_TYPE_PIECEWISE;
 800d24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24c:	2200      	movs	r2, #0
 800d24e:	705a      	strb	r2, [r3, #1]
	p->planned_trajectory.t_begin = t;
 800d250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d252:	687a      	ldr	r2, [r7, #4]
 800d254:	609a      	str	r2, [r3, #8]
	p->trajectory = &p->planned_trajectory;
 800d256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d258:	f103 0208 	add.w	r2, r3, #8
 800d25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25e:	605a      	str	r2, [r3, #4]
	return 0;
 800d260:	2300      	movs	r3, #0
}
 800d262:	4618      	mov	r0, r3
 800d264:	3728      	adds	r7, #40	; 0x28
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}

0800d26a <plan_land>:

int plan_land(struct planner *p, struct vec curr_pos, float curr_yaw, float hover_height, float hover_yaw, float duration, float t)
{
 800d26a:	b580      	push	{r7, lr}
 800d26c:	b08a      	sub	sp, #40	; 0x28
 800d26e:	af00      	add	r7, sp, #0
 800d270:	6278      	str	r0, [r7, #36]	; 0x24
 800d272:	eef0 6a40 	vmov.f32	s13, s0
 800d276:	eeb0 7a60 	vmov.f32	s14, s1
 800d27a:	eef0 7a41 	vmov.f32	s15, s2
 800d27e:	edc7 1a05 	vstr	s3, [r7, #20]
 800d282:	ed87 2a04 	vstr	s4, [r7, #16]
 800d286:	edc7 2a03 	vstr	s5, [r7, #12]
 800d28a:	ed87 3a02 	vstr	s6, [r7, #8]
 800d28e:	edc7 3a01 	vstr	s7, [r7, #4]
 800d292:	edc7 6a06 	vstr	s13, [r7, #24]
 800d296:	ed87 7a07 	vstr	s14, [r7, #28]
 800d29a:	edc7 7a08 	vstr	s15, [r7, #32]
	if (p->state == TRAJECTORY_STATE_LANDING) {
 800d29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	2b03      	cmp	r3, #3
 800d2a4:	d101      	bne.n	800d2aa <plan_land+0x40>
		return 1;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e028      	b.n	800d2fc <plan_land+0x92>
	}

	plan_takeoff_or_landing(p, curr_pos, curr_yaw, hover_height, hover_yaw, duration);
 800d2aa:	edd7 6a06 	vldr	s13, [r7, #24]
 800d2ae:	ed97 7a07 	vldr	s14, [r7, #28]
 800d2b2:	edd7 7a08 	vldr	s15, [r7, #32]
 800d2b6:	ed97 3a02 	vldr	s6, [r7, #8]
 800d2ba:	edd7 2a03 	vldr	s5, [r7, #12]
 800d2be:	ed97 2a04 	vldr	s4, [r7, #16]
 800d2c2:	edd7 1a05 	vldr	s3, [r7, #20]
 800d2c6:	eeb0 0a66 	vmov.f32	s0, s13
 800d2ca:	eef0 0a47 	vmov.f32	s1, s14
 800d2ce:	eeb0 1a67 	vmov.f32	s2, s15
 800d2d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2d4:	f7ff fdf2 	bl	800cebc <plan_takeoff_or_landing>
	p->reversed = false;
 800d2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2da:	2200      	movs	r2, #0
 800d2dc:	709a      	strb	r2, [r3, #2]
	p->state = TRAJECTORY_STATE_LANDING;
 800d2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e0:	2203      	movs	r2, #3
 800d2e2:	701a      	strb	r2, [r3, #0]
	p->type = TRAJECTORY_TYPE_PIECEWISE;
 800d2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	705a      	strb	r2, [r3, #1]
	p->planned_trajectory.t_begin = t;
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	609a      	str	r2, [r3, #8]
	p->trajectory = &p->planned_trajectory;
 800d2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f2:	f103 0208 	add.w	r2, r3, #8
 800d2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f8:	605a      	str	r2, [r3, #4]
	return 0;
 800d2fa:	2300      	movs	r3, #0
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3728      	adds	r7, #40	; 0x28
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <plan_go_to_from>:

int plan_go_to_from(struct planner *p, const struct traj_eval *curr_eval, bool relative, struct vec hover_pos, float hover_yaw, float duration, float t)
{
 800d304:	b5b0      	push	{r4, r5, r7, lr}
 800d306:	ed2d 8b02 	vpush	{d8}
 800d30a:	b09a      	sub	sp, #104	; 0x68
 800d30c:	af08      	add	r7, sp, #32
 800d30e:	6278      	str	r0, [r7, #36]	; 0x24
 800d310:	6239      	str	r1, [r7, #32]
 800d312:	4613      	mov	r3, r2
 800d314:	eef0 6a40 	vmov.f32	s13, s0
 800d318:	eeb0 7a60 	vmov.f32	s14, s1
 800d31c:	eef0 7a41 	vmov.f32	s15, s2
 800d320:	edc7 1a03 	vstr	s3, [r7, #12]
 800d324:	ed87 2a02 	vstr	s4, [r7, #8]
 800d328:	edc7 2a01 	vstr	s5, [r7, #4]
 800d32c:	77fb      	strb	r3, [r7, #31]
 800d32e:	edc7 6a04 	vstr	s13, [r7, #16]
 800d332:	ed87 7a05 	vstr	s14, [r7, #20]
 800d336:	edc7 7a06 	vstr	s15, [r7, #24]
	if (relative) {
 800d33a:	7ffb      	ldrb	r3, [r7, #31]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d02f      	beq.n	800d3a0 <plan_go_to_from+0x9c>
		hover_pos = vadd(hover_pos, curr_eval->pos);
 800d340:	6a3b      	ldr	r3, [r7, #32]
 800d342:	ed93 5a00 	vldr	s10, [r3]
 800d346:	edd3 5a01 	vldr	s11, [r3, #4]
 800d34a:	ed93 6a02 	vldr	s12, [r3, #8]
 800d34e:	edd7 6a04 	vldr	s13, [r7, #16]
 800d352:	ed97 7a05 	vldr	s14, [r7, #20]
 800d356:	edd7 7a06 	vldr	s15, [r7, #24]
 800d35a:	eef0 1a45 	vmov.f32	s3, s10
 800d35e:	eeb0 2a65 	vmov.f32	s4, s11
 800d362:	eef0 2a46 	vmov.f32	s5, s12
 800d366:	eeb0 0a66 	vmov.f32	s0, s13
 800d36a:	eef0 0a47 	vmov.f32	s1, s14
 800d36e:	eeb0 1a67 	vmov.f32	s2, s15
 800d372:	f7ff fc5e 	bl	800cc32 <vadd>
 800d376:	eef0 6a40 	vmov.f32	s13, s0
 800d37a:	eeb0 7a60 	vmov.f32	s14, s1
 800d37e:	eef0 7a41 	vmov.f32	s15, s2
 800d382:	edc7 6a04 	vstr	s13, [r7, #16]
 800d386:	ed87 7a05 	vstr	s14, [r7, #20]
 800d38a:	edc7 7a06 	vstr	s15, [r7, #24]
		hover_yaw += curr_eval->yaw;
 800d38e:	6a3b      	ldr	r3, [r7, #32]
 800d390:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800d394:	ed97 7a03 	vldr	s14, [r7, #12]
 800d398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d39c:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	// compute the shortest possible rotation towards 0
	float curr_yaw = normalize_radians(curr_eval->yaw);
 800d3a0:	6a3b      	ldr	r3, [r7, #32]
 800d3a2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800d3a6:	eeb0 0a67 	vmov.f32	s0, s15
 800d3aa:	f7ff fb05 	bl	800c9b8 <normalize_radians>
 800d3ae:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
	hover_yaw = normalize_radians(hover_yaw);
 800d3b2:	ed97 0a03 	vldr	s0, [r7, #12]
 800d3b6:	f7ff faff 	bl	800c9b8 <normalize_radians>
 800d3ba:	ed87 0a03 	vstr	s0, [r7, #12]
	float goal_yaw = curr_yaw + shortest_signed_angle_radians(curr_yaw, hover_yaw);
 800d3be:	edd7 0a03 	vldr	s1, [r7, #12]
 800d3c2:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 800d3c6:	f7ff fb45 	bl	800ca54 <shortest_signed_angle_radians>
 800d3ca:	eeb0 7a40 	vmov.f32	s14, s0
 800d3ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d3d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d3d6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	piecewise_plan_7th_order_no_jerk(&p->planned_trajectory, duration,
 800d3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3dc:	f103 0508 	add.w	r5, r3, #8
		curr_eval->pos, curr_yaw, curr_eval->vel, curr_eval->omega.z, curr_eval->acc,
 800d3e0:	6a3b      	ldr	r3, [r7, #32]
 800d3e2:	ed93 8a0b 	vldr	s16, [r3, #44]	; 0x2c
	piecewise_plan_7th_order_no_jerk(&p->planned_trajectory, duration,
 800d3e6:	f7ff fbbb 	bl	800cb60 <vzero>
 800d3ea:	eef0 6a40 	vmov.f32	s13, s0
 800d3ee:	eeb0 7a60 	vmov.f32	s14, s1
 800d3f2:	eef0 7a41 	vmov.f32	s15, s2
 800d3f6:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800d3fa:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800d3fe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800d402:	f7ff fbad 	bl	800cb60 <vzero>
 800d406:	eef0 6a40 	vmov.f32	s13, s0
 800d40a:	eeb0 7a60 	vmov.f32	s14, s1
 800d40e:	eef0 7a41 	vmov.f32	s15, s2
 800d412:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800d416:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800d41a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800d41e:	ed97 6a04 	vldr	s12, [r7, #16]
 800d422:	edd7 6a05 	vldr	s13, [r7, #20]
 800d426:	ed97 7a06 	vldr	s14, [r7, #24]
 800d42a:	6a3b      	ldr	r3, [r7, #32]
 800d42c:	edd3 4a06 	vldr	s9, [r3, #24]
 800d430:	ed93 5a07 	vldr	s10, [r3, #28]
 800d434:	edd3 5a08 	vldr	s11, [r3, #32]
 800d438:	6a3b      	ldr	r3, [r7, #32]
 800d43a:	edd3 2a03 	vldr	s5, [r3, #12]
 800d43e:	ed93 3a04 	vldr	s6, [r3, #16]
 800d442:	edd3 3a05 	vldr	s7, [r3, #20]
 800d446:	6a3b      	ldr	r3, [r7, #32]
 800d448:	edd3 0a00 	vldr	s1, [r3]
 800d44c:	ed93 1a01 	vldr	s2, [r3, #4]
 800d450:	edd3 1a02 	vldr	s3, [r3, #8]
 800d454:	ac04      	add	r4, sp, #16
 800d456:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d45a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d45e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d462:	f04f 0300 	mov.w	r3, #0
 800d466:	9303      	str	r3, [sp, #12]
 800d468:	466c      	mov	r4, sp
 800d46a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d46e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d472:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d476:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800d47a:	eeb0 4a48 	vmov.f32	s8, s16
 800d47e:	ed97 2a11 	vldr	s4, [r7, #68]	; 0x44
 800d482:	ed97 0a02 	vldr	s0, [r7, #8]
 800d486:	4628      	mov	r0, r5
 800d488:	f001 fe72 	bl	800f170 <piecewise_plan_7th_order_no_jerk>
		hover_pos,      goal_yaw,      vzero(),        0,                  vzero());

	p->reversed = false;
 800d48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48e:	2200      	movs	r2, #0
 800d490:	709a      	strb	r2, [r3, #2]
	p->state = TRAJECTORY_STATE_FLYING;
 800d492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d494:	2201      	movs	r2, #1
 800d496:	701a      	strb	r2, [r3, #0]
	p->type = TRAJECTORY_TYPE_PIECEWISE;
 800d498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49a:	2200      	movs	r2, #0
 800d49c:	705a      	strb	r2, [r3, #1]
	p->planned_trajectory.t_begin = t;
 800d49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a0:	687a      	ldr	r2, [r7, #4]
 800d4a2:	609a      	str	r2, [r3, #8]
	p->trajectory = &p->planned_trajectory;
 800d4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a6:	f103 0208 	add.w	r2, r3, #8
 800d4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ac:	605a      	str	r2, [r3, #4]
	return 0;
 800d4ae:	2300      	movs	r3, #0
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3748      	adds	r7, #72	; 0x48
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	ecbd 8b02 	vpop	{d8}
 800d4ba:	bdb0      	pop	{r4, r5, r7, pc}

0800d4bc <plan_go_to>:

int plan_go_to(struct planner *p, bool relative, struct vec hover_pos, float hover_yaw, float duration, float t)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b096      	sub	sp, #88	; 0x58
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	61f8      	str	r0, [r7, #28]
 800d4c4:	460b      	mov	r3, r1
 800d4c6:	eef0 6a40 	vmov.f32	s13, s0
 800d4ca:	eeb0 7a60 	vmov.f32	s14, s1
 800d4ce:	eef0 7a41 	vmov.f32	s15, s2
 800d4d2:	edc7 1a02 	vstr	s3, [r7, #8]
 800d4d6:	ed87 2a01 	vstr	s4, [r7, #4]
 800d4da:	edc7 2a00 	vstr	s5, [r7]
 800d4de:	76fb      	strb	r3, [r7, #27]
 800d4e0:	edc7 6a03 	vstr	s13, [r7, #12]
 800d4e4:	ed87 7a04 	vstr	s14, [r7, #16]
 800d4e8:	edc7 7a05 	vstr	s15, [r7, #20]
	struct traj_eval setpoint = plan_current_goal(p, t);
 800d4ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d4f0:	ed97 0a00 	vldr	s0, [r7]
 800d4f4:	69f9      	ldr	r1, [r7, #28]
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7ff fe01 	bl	800d0fe <plan_current_goal>
	return plan_go_to_from(p, &setpoint, relative, hover_pos, hover_yaw, duration, t);
 800d4fc:	edd7 6a03 	vldr	s13, [r7, #12]
 800d500:	ed97 7a04 	vldr	s14, [r7, #16]
 800d504:	edd7 7a05 	vldr	s15, [r7, #20]
 800d508:	7efa      	ldrb	r2, [r7, #27]
 800d50a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d50e:	edd7 2a00 	vldr	s5, [r7]
 800d512:	ed97 2a01 	vldr	s4, [r7, #4]
 800d516:	edd7 1a02 	vldr	s3, [r7, #8]
 800d51a:	eeb0 0a66 	vmov.f32	s0, s13
 800d51e:	eef0 0a47 	vmov.f32	s1, s14
 800d522:	eeb0 1a67 	vmov.f32	s2, s15
 800d526:	4619      	mov	r1, r3
 800d528:	69f8      	ldr	r0, [r7, #28]
 800d52a:	f7ff feeb 	bl	800d304 <plan_go_to_from>
 800d52e:	4603      	mov	r3, r0
}
 800d530:	4618      	mov	r0, r3
 800d532:	3758      	adds	r7, #88	; 0x58
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <plan_start_trajectory>:

int plan_start_trajectory(struct planner *p, struct piecewise_traj* trajectory, bool reversed, bool relative, struct vec start_from)
{
 800d538:	b5b0      	push	{r4, r5, r7, lr}
 800d53a:	b0a4      	sub	sp, #144	; 0x90
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d540:	64b9      	str	r1, [r7, #72]	; 0x48
 800d542:	4611      	mov	r1, r2
 800d544:	461a      	mov	r2, r3
 800d546:	eef0 6a40 	vmov.f32	s13, s0
 800d54a:	eeb0 7a60 	vmov.f32	s14, s1
 800d54e:	eef0 7a41 	vmov.f32	s15, s2
 800d552:	460b      	mov	r3, r1
 800d554:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d558:	4613      	mov	r3, r2
 800d55a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800d55e:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 800d562:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 800d566:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	p->reversed = reversed;
 800d56a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d56c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800d570:	709a      	strb	r2, [r3, #2]
	p->state = TRAJECTORY_STATE_FLYING;
 800d572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d574:	2201      	movs	r2, #1
 800d576:	701a      	strb	r2, [r3, #0]
	p->type = TRAJECTORY_TYPE_PIECEWISE;
 800d578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d57a:	2200      	movs	r2, #0
 800d57c:	705a      	strb	r2, [r3, #1]
	p->trajectory = trajectory;
 800d57e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d582:	605a      	str	r2, [r3, #4]

	if (relative) {
 800d584:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d061      	beq.n	800d650 <plan_start_trajectory+0x118>
		struct traj_eval traj_init;
		trajectory->shift = vzero();
 800d58c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800d58e:	f7ff fae7 	bl	800cb60 <vzero>
 800d592:	eef0 6a40 	vmov.f32	s13, s0
 800d596:	eeb0 7a60 	vmov.f32	s14, s1
 800d59a:	eef0 7a41 	vmov.f32	s15, s2
 800d59e:	edc4 6a02 	vstr	s13, [r4, #8]
 800d5a2:	ed84 7a03 	vstr	s14, [r4, #12]
 800d5a6:	edc4 7a04 	vstr	s15, [r4, #16]
		if (reversed) {
 800d5aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d00b      	beq.n	800d5ca <plan_start_trajectory+0x92>
			traj_init = piecewise_eval_reversed(trajectory, trajectory->t_begin);
 800d5b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5b4:	edd3 7a00 	vldr	s15, [r3]
 800d5b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d5bc:	eeb0 0a67 	vmov.f32	s0, s15
 800d5c0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f001 fcd8 	bl	800ef78 <piecewise_eval_reversed>
 800d5c8:	e014      	b.n	800d5f4 <plan_start_trajectory+0xbc>
		}
		else {
			traj_init = piecewise_eval(trajectory, trajectory->t_begin);
 800d5ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5cc:	edd3 7a00 	vldr	s15, [r3]
 800d5d0:	463b      	mov	r3, r7
 800d5d2:	eeb0 0a67 	vmov.f32	s0, s15
 800d5d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f001 fbe3 	bl	800eda4 <piecewise_eval>
 800d5de:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800d5e2:	463d      	mov	r5, r7
 800d5e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5f0:	682b      	ldr	r3, [r5, #0]
 800d5f2:	6023      	str	r3, [r4, #0]
		}
		struct vec shift_pos = vsub(start_from, traj_init.pos);
 800d5f4:	ed97 5a14 	vldr	s10, [r7, #80]	; 0x50
 800d5f8:	edd7 5a15 	vldr	s11, [r7, #84]	; 0x54
 800d5fc:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800d600:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d604:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800d608:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800d60c:	eef0 1a45 	vmov.f32	s3, s10
 800d610:	eeb0 2a65 	vmov.f32	s4, s11
 800d614:	eef0 2a46 	vmov.f32	s5, s12
 800d618:	eeb0 0a66 	vmov.f32	s0, s13
 800d61c:	eef0 0a47 	vmov.f32	s1, s14
 800d620:	eeb0 1a67 	vmov.f32	s2, s15
 800d624:	f7ff fb58 	bl	800ccd8 <vsub>
 800d628:	eef0 6a40 	vmov.f32	s13, s0
 800d62c:	eeb0 7a60 	vmov.f32	s14, s1
 800d630:	eef0 7a41 	vmov.f32	s15, s2
 800d634:	edc7 6a21 	vstr	s13, [r7, #132]	; 0x84
 800d638:	ed87 7a22 	vstr	s14, [r7, #136]	; 0x88
 800d63c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		trajectory->shift = shift_pos;
 800d640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d642:	3308      	adds	r3, #8
 800d644:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800d648:	ca07      	ldmia	r2, {r0, r1, r2}
 800d64a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d64e:	e00e      	b.n	800d66e <plan_start_trajectory+0x136>
	}
	else {
		trajectory->shift = vzero();
 800d650:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800d652:	f7ff fa85 	bl	800cb60 <vzero>
 800d656:	eef0 6a40 	vmov.f32	s13, s0
 800d65a:	eeb0 7a60 	vmov.f32	s14, s1
 800d65e:	eef0 7a41 	vmov.f32	s15, s2
 800d662:	edc4 6a02 	vstr	s13, [r4, #8]
 800d666:	ed84 7a03 	vstr	s14, [r4, #12]
 800d66a:	edc4 7a04 	vstr	s15, [r4, #16]
	}

	return 0;
 800d66e:	2300      	movs	r3, #0
}
 800d670:	4618      	mov	r0, r3
 800d672:	3790      	adds	r7, #144	; 0x90
 800d674:	46bd      	mov	sp, r7
 800d676:	bdb0      	pop	{r4, r5, r7, pc}

0800d678 <plan_start_compressed_trajectory>:

int plan_start_compressed_trajectory( struct planner *p, struct piecewise_traj_compressed* trajectory, bool relative, struct vec start_from)
{
 800d678:	b590      	push	{r4, r7, lr}
 800d67a:	b097      	sub	sp, #92	; 0x5c
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6178      	str	r0, [r7, #20]
 800d680:	6139      	str	r1, [r7, #16]
 800d682:	4613      	mov	r3, r2
 800d684:	eef0 6a40 	vmov.f32	s13, s0
 800d688:	eeb0 7a60 	vmov.f32	s14, s1
 800d68c:	eef0 7a41 	vmov.f32	s15, s2
 800d690:	73fb      	strb	r3, [r7, #15]
 800d692:	edc7 6a00 	vstr	s13, [r7]
 800d696:	ed87 7a01 	vstr	s14, [r7, #4]
 800d69a:	edc7 7a02 	vstr	s15, [r7, #8]
	p->reversed = 0;
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	709a      	strb	r2, [r3, #2]
	p->state = TRAJECTORY_STATE_FLYING;
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	701a      	strb	r2, [r3, #0]
	p->type = TRAJECTORY_TYPE_PIECEWISE_COMPRESSED;
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	705a      	strb	r2, [r3, #1]
	p->compressed_trajectory = trajectory;
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	693a      	ldr	r2, [r7, #16]
 800d6b4:	605a      	str	r2, [r3, #4]

	if (relative) {
 800d6b6:	7bfb      	ldrb	r3, [r7, #15]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d047      	beq.n	800d74c <plan_start_compressed_trajectory+0xd4>
		trajectory->shift = vzero();
 800d6bc:	693c      	ldr	r4, [r7, #16]
 800d6be:	f7ff fa4f 	bl	800cb60 <vzero>
 800d6c2:	eef0 6a40 	vmov.f32	s13, s0
 800d6c6:	eeb0 7a60 	vmov.f32	s14, s1
 800d6ca:	eef0 7a41 	vmov.f32	s15, s2
 800d6ce:	edc4 6a03 	vstr	s13, [r4, #12]
 800d6d2:	ed84 7a04 	vstr	s14, [r4, #16]
 800d6d6:	edc4 7a05 	vstr	s15, [r4, #20]
		struct traj_eval traj_init = piecewise_compressed_eval(
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	edd3 7a00 	vldr	s15, [r3]
 800d6e0:	f107 0318 	add.w	r3, r7, #24
 800d6e4:	eeb0 0a67 	vmov.f32	s0, s15
 800d6e8:	6939      	ldr	r1, [r7, #16]
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f002 f835 	bl	800f75a <piecewise_compressed_eval>
			trajectory, trajectory->t_begin
		);
		struct vec shift_pos = vsub(start_from, traj_init.pos);
 800d6f0:	ed97 5a06 	vldr	s10, [r7, #24]
 800d6f4:	edd7 5a07 	vldr	s11, [r7, #28]
 800d6f8:	ed97 6a08 	vldr	s12, [r7, #32]
 800d6fc:	edd7 6a00 	vldr	s13, [r7]
 800d700:	ed97 7a01 	vldr	s14, [r7, #4]
 800d704:	edd7 7a02 	vldr	s15, [r7, #8]
 800d708:	eef0 1a45 	vmov.f32	s3, s10
 800d70c:	eeb0 2a65 	vmov.f32	s4, s11
 800d710:	eef0 2a46 	vmov.f32	s5, s12
 800d714:	eeb0 0a66 	vmov.f32	s0, s13
 800d718:	eef0 0a47 	vmov.f32	s1, s14
 800d71c:	eeb0 1a67 	vmov.f32	s2, s15
 800d720:	f7ff fada 	bl	800ccd8 <vsub>
 800d724:	eef0 6a40 	vmov.f32	s13, s0
 800d728:	eeb0 7a60 	vmov.f32	s14, s1
 800d72c:	eef0 7a41 	vmov.f32	s15, s2
 800d730:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 800d734:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 800d738:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		trajectory->shift = shift_pos;
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	330c      	adds	r3, #12
 800d740:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800d744:	ca07      	ldmia	r2, {r0, r1, r2}
 800d746:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d74a:	e00e      	b.n	800d76a <plan_start_compressed_trajectory+0xf2>
	} else {
		trajectory->shift = vzero();
 800d74c:	693c      	ldr	r4, [r7, #16]
 800d74e:	f7ff fa07 	bl	800cb60 <vzero>
 800d752:	eef0 6a40 	vmov.f32	s13, s0
 800d756:	eeb0 7a60 	vmov.f32	s14, s1
 800d75a:	eef0 7a41 	vmov.f32	s15, s2
 800d75e:	edc4 6a03 	vstr	s13, [r4, #12]
 800d762:	ed84 7a04 	vstr	s14, [r4, #16]
 800d766:	edc4 7a05 	vstr	s15, [r4, #20]
	}

	return 0;
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	375c      	adds	r7, #92	; 0x5c
 800d770:	46bd      	mov	sp, r7
 800d772:	bd90      	pop	{r4, r7, pc}

0800d774 <positionControllerResetAllPID>:
    // saturate
  *thrust = constrain(*thrust, 0, UINT16_MAX);
}

void positionControllerResetAllPID()
{
 800d774:	b580      	push	{r7, lr}
 800d776:	af00      	add	r7, sp, #0
  pidReset(&this.pidX.pid);
 800d778:	4809      	ldr	r0, [pc, #36]	; (800d7a0 <positionControllerResetAllPID+0x2c>)
 800d77a:	f006 f90b 	bl	8013994 <pidReset>
  pidReset(&this.pidY.pid);
 800d77e:	4809      	ldr	r0, [pc, #36]	; (800d7a4 <positionControllerResetAllPID+0x30>)
 800d780:	f006 f908 	bl	8013994 <pidReset>
  pidReset(&this.pidZ.pid);
 800d784:	4808      	ldr	r0, [pc, #32]	; (800d7a8 <positionControllerResetAllPID+0x34>)
 800d786:	f006 f905 	bl	8013994 <pidReset>
  pidReset(&this.pidVX.pid);
 800d78a:	4808      	ldr	r0, [pc, #32]	; (800d7ac <positionControllerResetAllPID+0x38>)
 800d78c:	f006 f902 	bl	8013994 <pidReset>
  pidReset(&this.pidVY.pid);
 800d790:	4807      	ldr	r0, [pc, #28]	; (800d7b0 <positionControllerResetAllPID+0x3c>)
 800d792:	f006 f8ff 	bl	8013994 <pidReset>
  pidReset(&this.pidVZ.pid);
 800d796:	4807      	ldr	r0, [pc, #28]	; (800d7b4 <positionControllerResetAllPID+0x40>)
 800d798:	f006 f8fc 	bl	8013994 <pidReset>
}
 800d79c:	bf00      	nop
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	20000cf4 	.word	0x20000cf4
 800d7a4:	20000d60 	.word	0x20000d60
 800d7a8:	20000dcc 	.word	0x20000dcc
 800d7ac:	20000bb0 	.word	0x20000bb0
 800d7b0:	20000c1c 	.word	0x20000c1c
 800d7b4:	20000c88 	.word	0x20000c88

0800d7b8 <positionControllerResetAllfilters>:

void positionControllerResetAllfilters() {
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	af00      	add	r7, sp, #0
  filterReset(&this.pidX.pid, POSITION_RATE, posFiltCutoff, posFiltEnable);
 800d7bc:	4b27      	ldr	r3, [pc, #156]	; (800d85c <positionControllerResetAllfilters+0xa4>)
 800d7be:	edd3 7a00 	vldr	s15, [r3]
 800d7c2:	4b27      	ldr	r3, [pc, #156]	; (800d860 <positionControllerResetAllfilters+0xa8>)
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	eef0 0a67 	vmov.f32	s1, s15
 800d7cc:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800d864 <positionControllerResetAllfilters+0xac>
 800d7d0:	4825      	ldr	r0, [pc, #148]	; (800d868 <positionControllerResetAllfilters+0xb0>)
 800d7d2:	f006 f8f9 	bl	80139c8 <filterReset>
  filterReset(&this.pidY.pid, POSITION_RATE, posFiltCutoff, posFiltEnable);
 800d7d6:	4b21      	ldr	r3, [pc, #132]	; (800d85c <positionControllerResetAllfilters+0xa4>)
 800d7d8:	edd3 7a00 	vldr	s15, [r3]
 800d7dc:	4b20      	ldr	r3, [pc, #128]	; (800d860 <positionControllerResetAllfilters+0xa8>)
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	eef0 0a67 	vmov.f32	s1, s15
 800d7e6:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800d864 <positionControllerResetAllfilters+0xac>
 800d7ea:	4820      	ldr	r0, [pc, #128]	; (800d86c <positionControllerResetAllfilters+0xb4>)
 800d7ec:	f006 f8ec 	bl	80139c8 <filterReset>
  filterReset(&this.pidZ.pid, POSITION_RATE, posZFiltCutoff, posZFiltEnable);
 800d7f0:	4b1f      	ldr	r3, [pc, #124]	; (800d870 <positionControllerResetAllfilters+0xb8>)
 800d7f2:	edd3 7a00 	vldr	s15, [r3]
 800d7f6:	4b1f      	ldr	r3, [pc, #124]	; (800d874 <positionControllerResetAllfilters+0xbc>)
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	eef0 0a67 	vmov.f32	s1, s15
 800d800:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800d864 <positionControllerResetAllfilters+0xac>
 800d804:	481c      	ldr	r0, [pc, #112]	; (800d878 <positionControllerResetAllfilters+0xc0>)
 800d806:	f006 f8df 	bl	80139c8 <filterReset>
  filterReset(&this.pidVX.pid, POSITION_RATE, velFiltCutoff, velFiltEnable);
 800d80a:	4b1c      	ldr	r3, [pc, #112]	; (800d87c <positionControllerResetAllfilters+0xc4>)
 800d80c:	edd3 7a00 	vldr	s15, [r3]
 800d810:	4b1b      	ldr	r3, [pc, #108]	; (800d880 <positionControllerResetAllfilters+0xc8>)
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	4619      	mov	r1, r3
 800d816:	eef0 0a67 	vmov.f32	s1, s15
 800d81a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800d864 <positionControllerResetAllfilters+0xac>
 800d81e:	4819      	ldr	r0, [pc, #100]	; (800d884 <positionControllerResetAllfilters+0xcc>)
 800d820:	f006 f8d2 	bl	80139c8 <filterReset>
  filterReset(&this.pidVY.pid, POSITION_RATE, velFiltCutoff, velFiltEnable);
 800d824:	4b15      	ldr	r3, [pc, #84]	; (800d87c <positionControllerResetAllfilters+0xc4>)
 800d826:	edd3 7a00 	vldr	s15, [r3]
 800d82a:	4b15      	ldr	r3, [pc, #84]	; (800d880 <positionControllerResetAllfilters+0xc8>)
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	4619      	mov	r1, r3
 800d830:	eef0 0a67 	vmov.f32	s1, s15
 800d834:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800d864 <positionControllerResetAllfilters+0xac>
 800d838:	4813      	ldr	r0, [pc, #76]	; (800d888 <positionControllerResetAllfilters+0xd0>)
 800d83a:	f006 f8c5 	bl	80139c8 <filterReset>
  filterReset(&this.pidVZ.pid, POSITION_RATE, velZFiltCutoff, velZFiltEnable);
 800d83e:	4b13      	ldr	r3, [pc, #76]	; (800d88c <positionControllerResetAllfilters+0xd4>)
 800d840:	edd3 7a00 	vldr	s15, [r3]
 800d844:	4b12      	ldr	r3, [pc, #72]	; (800d890 <positionControllerResetAllfilters+0xd8>)
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	4619      	mov	r1, r3
 800d84a:	eef0 0a67 	vmov.f32	s1, s15
 800d84e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800d864 <positionControllerResetAllfilters+0xac>
 800d852:	4810      	ldr	r0, [pc, #64]	; (800d894 <positionControllerResetAllfilters+0xdc>)
 800d854:	f006 f8b8 	bl	80139c8 <filterReset>
}
 800d858:	bf00      	nop
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	20000b9c 	.word	0x20000b9c
 800d860:	20000b98 	.word	0x20000b98
 800d864:	42c80000 	.word	0x42c80000
 800d868:	20000cf4 	.word	0x20000cf4
 800d86c:	20000d60 	.word	0x20000d60
 800d870:	20000ba8 	.word	0x20000ba8
 800d874:	20000ba4 	.word	0x20000ba4
 800d878:	20000dcc 	.word	0x20000dcc
 800d87c:	20000ba0 	.word	0x20000ba0
 800d880:	20000b99 	.word	0x20000b99
 800d884:	20000bb0 	.word	0x20000bb0
 800d888:	20000c1c 	.word	0x20000c1c
 800d88c:	20000bac 	.word	0x20000bac
 800d890:	20000ba5 	.word	0x20000ba5
 800d894:	20000c88 	.word	0x20000c88

0800d898 <mkvec>:
static inline struct vec mkvec(float x, float y, float z) {
 800d898:	b480      	push	{r7}
 800d89a:	b08f      	sub	sp, #60	; 0x3c
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	ed87 0a07 	vstr	s0, [r7, #28]
 800d8a2:	edc7 0a06 	vstr	s1, [r7, #24]
 800d8a6:	ed87 1a05 	vstr	s2, [r7, #20]
	v.x = x; v.y = y; v.z = z;
 800d8aa:	69fb      	ldr	r3, [r7, #28]
 800d8ac:	623b      	str	r3, [r7, #32]
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	627b      	str	r3, [r7, #36]	; 0x24
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	62bb      	str	r3, [r7, #40]	; 0x28
	return v;
 800d8b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d8ba:	f107 0220 	add.w	r2, r7, #32
 800d8be:	ca07      	ldmia	r2, {r0, r1, r2}
 800d8c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d8c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8ca:	ee06 1a90 	vmov	s13, r1
 800d8ce:	ee07 2a10 	vmov	s14, r2
 800d8d2:	ee07 3a90 	vmov	s15, r3
}
 800d8d6:	eeb0 0a66 	vmov.f32	s0, s13
 800d8da:	eef0 0a47 	vmov.f32	s1, s14
 800d8de:	eeb0 1a67 	vmov.f32	s2, s15
 800d8e2:	373c      	adds	r7, #60	; 0x3c
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <vrepeat>:
static inline struct vec vrepeat(float x) {
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b08a      	sub	sp, #40	; 0x28
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	ed87 0a05 	vstr	s0, [r7, #20]
	return mkvec(x, x, x);
 800d8f6:	ed97 1a05 	vldr	s2, [r7, #20]
 800d8fa:	edd7 0a05 	vldr	s1, [r7, #20]
 800d8fe:	ed97 0a05 	vldr	s0, [r7, #20]
 800d902:	f7ff ffc9 	bl	800d898 <mkvec>
 800d906:	eef0 6a40 	vmov.f32	s13, s0
 800d90a:	eeb0 7a60 	vmov.f32	s14, s1
 800d90e:	eef0 7a41 	vmov.f32	s15, s2
 800d912:	edc7 6a07 	vstr	s13, [r7, #28]
 800d916:	ed87 7a08 	vstr	s14, [r7, #32]
 800d91a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800d91e:	69f9      	ldr	r1, [r7, #28]
 800d920:	6a3a      	ldr	r2, [r7, #32]
 800d922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d924:	ee06 1a90 	vmov	s13, r1
 800d928:	ee07 2a10 	vmov	s14, r2
 800d92c:	ee07 3a90 	vmov	s15, r3
}
 800d930:	eeb0 0a66 	vmov.f32	s0, s13
 800d934:	eef0 0a47 	vmov.f32	s1, s14
 800d938:	eeb0 1a67 	vmov.f32	s2, s15
 800d93c:	3728      	adds	r7, #40	; 0x28
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
	...

0800d944 <vzero>:
static inline struct vec vzero(void) {
 800d944:	b580      	push	{r7, lr}
 800d946:	b088      	sub	sp, #32
 800d948:	af00      	add	r7, sp, #0
	return vrepeat(0.0f);
 800d94a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800d990 <vzero+0x4c>
 800d94e:	f7ff ffcd 	bl	800d8ec <vrepeat>
 800d952:	eef0 6a40 	vmov.f32	s13, s0
 800d956:	eeb0 7a60 	vmov.f32	s14, s1
 800d95a:	eef0 7a41 	vmov.f32	s15, s2
 800d95e:	edc7 6a05 	vstr	s13, [r7, #20]
 800d962:	ed87 7a06 	vstr	s14, [r7, #24]
 800d966:	edc7 7a07 	vstr	s15, [r7, #28]
 800d96a:	6979      	ldr	r1, [r7, #20]
 800d96c:	69ba      	ldr	r2, [r7, #24]
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	ee06 1a90 	vmov	s13, r1
 800d974:	ee07 2a10 	vmov	s14, r2
 800d978:	ee07 3a90 	vmov	s15, r3
}
 800d97c:	eeb0 0a66 	vmov.f32	s0, s13
 800d980:	eef0 0a47 	vmov.f32	s1, s14
 800d984:	eeb0 1a67 	vmov.f32	s2, s15
 800d988:	3720      	adds	r7, #32
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	00000000 	.word	0x00000000

0800d994 <vscl>:
static inline struct vec vscl(float s, struct vec v) {
 800d994:	b580      	push	{r7, lr}
 800d996:	b08c      	sub	sp, #48	; 0x30
 800d998:	af00      	add	r7, sp, #0
 800d99a:	ed87 0a07 	vstr	s0, [r7, #28]
 800d99e:	eef0 6a60 	vmov.f32	s13, s1
 800d9a2:	eeb0 7a41 	vmov.f32	s14, s2
 800d9a6:	eef0 7a61 	vmov.f32	s15, s3
 800d9aa:	edc7 6a04 	vstr	s13, [r7, #16]
 800d9ae:	ed87 7a05 	vstr	s14, [r7, #20]
 800d9b2:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(s * v.x , s * v.y, s * v.z);
 800d9b6:	ed97 7a04 	vldr	s14, [r7, #16]
 800d9ba:	edd7 7a07 	vldr	s15, [r7, #28]
 800d9be:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d9c2:	ed97 7a05 	vldr	s14, [r7, #20]
 800d9c6:	edd7 7a07 	vldr	s15, [r7, #28]
 800d9ca:	ee27 6a27 	vmul.f32	s12, s14, s15
 800d9ce:	ed97 7a06 	vldr	s14, [r7, #24]
 800d9d2:	edd7 7a07 	vldr	s15, [r7, #28]
 800d9d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9da:	eeb0 1a67 	vmov.f32	s2, s15
 800d9de:	eef0 0a46 	vmov.f32	s1, s12
 800d9e2:	eeb0 0a66 	vmov.f32	s0, s13
 800d9e6:	f7ff ff57 	bl	800d898 <mkvec>
 800d9ea:	eef0 6a40 	vmov.f32	s13, s0
 800d9ee:	eeb0 7a60 	vmov.f32	s14, s1
 800d9f2:	eef0 7a41 	vmov.f32	s15, s2
 800d9f6:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800d9fa:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800d9fe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800da02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da08:	ee06 1a90 	vmov	s13, r1
 800da0c:	ee07 2a10 	vmov	s14, r2
 800da10:	ee07 3a90 	vmov	s15, r3
}
 800da14:	eeb0 0a66 	vmov.f32	s0, s13
 800da18:	eef0 0a47 	vmov.f32	s1, s14
 800da1c:	eeb0 1a67 	vmov.f32	s2, s15
 800da20:	3730      	adds	r7, #48	; 0x30
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}

0800da26 <vneg>:
static inline struct vec vneg(struct vec v) {
 800da26:	b580      	push	{r7, lr}
 800da28:	b08c      	sub	sp, #48	; 0x30
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	eef0 6a40 	vmov.f32	s13, s0
 800da30:	eeb0 7a60 	vmov.f32	s14, s1
 800da34:	eef0 7a41 	vmov.f32	s15, s2
 800da38:	edc7 6a05 	vstr	s13, [r7, #20]
 800da3c:	ed87 7a06 	vstr	s14, [r7, #24]
 800da40:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkvec(-v.x, -v.y, -v.z);
 800da44:	edd7 7a05 	vldr	s15, [r7, #20]
 800da48:	eeb1 7a67 	vneg.f32	s14, s15
 800da4c:	edd7 7a06 	vldr	s15, [r7, #24]
 800da50:	eef1 6a67 	vneg.f32	s13, s15
 800da54:	edd7 7a07 	vldr	s15, [r7, #28]
 800da58:	eef1 7a67 	vneg.f32	s15, s15
 800da5c:	eeb0 1a67 	vmov.f32	s2, s15
 800da60:	eef0 0a66 	vmov.f32	s1, s13
 800da64:	eeb0 0a47 	vmov.f32	s0, s14
 800da68:	f7ff ff16 	bl	800d898 <mkvec>
 800da6c:	eef0 6a40 	vmov.f32	s13, s0
 800da70:	eeb0 7a60 	vmov.f32	s14, s1
 800da74:	eef0 7a41 	vmov.f32	s15, s2
 800da78:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800da7c:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800da80:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800da84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da8a:	ee06 1a90 	vmov	s13, r1
 800da8e:	ee07 2a10 	vmov	s14, r2
 800da92:	ee07 3a90 	vmov	s15, r3
}
 800da96:	eeb0 0a66 	vmov.f32	s0, s13
 800da9a:	eef0 0a47 	vmov.f32	s1, s14
 800da9e:	eeb0 1a67 	vmov.f32	s2, s15
 800daa2:	3730      	adds	r7, #48	; 0x30
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <vdiv>:
static inline struct vec vdiv(struct vec v, float s) {
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b08c      	sub	sp, #48	; 0x30
 800daac:	af00      	add	r7, sp, #0
 800daae:	eef0 6a40 	vmov.f32	s13, s0
 800dab2:	eeb0 7a60 	vmov.f32	s14, s1
 800dab6:	eef0 7a41 	vmov.f32	s15, s2
 800daba:	edc7 1a04 	vstr	s3, [r7, #16]
 800dabe:	edc7 6a05 	vstr	s13, [r7, #20]
 800dac2:	ed87 7a06 	vstr	s14, [r7, #24]
 800dac6:	edc7 7a07 	vstr	s15, [r7, #28]
	return vscl(1.0f/s, v);
 800daca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dace:	edd7 7a04 	vldr	s15, [r7, #16]
 800dad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dad6:	ed97 6a05 	vldr	s12, [r7, #20]
 800dada:	edd7 6a06 	vldr	s13, [r7, #24]
 800dade:	edd7 7a07 	vldr	s15, [r7, #28]
 800dae2:	eef0 0a46 	vmov.f32	s1, s12
 800dae6:	eeb0 1a66 	vmov.f32	s2, s13
 800daea:	eef0 1a67 	vmov.f32	s3, s15
 800daee:	eeb0 0a47 	vmov.f32	s0, s14
 800daf2:	f7ff ff4f 	bl	800d994 <vscl>
 800daf6:	eef0 6a40 	vmov.f32	s13, s0
 800dafa:	eeb0 7a60 	vmov.f32	s14, s1
 800dafe:	eef0 7a41 	vmov.f32	s15, s2
 800db02:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800db06:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800db0a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800db0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800db10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db14:	ee06 1a90 	vmov	s13, r1
 800db18:	ee07 2a10 	vmov	s14, r2
 800db1c:	ee07 3a90 	vmov	s15, r3
}
 800db20:	eeb0 0a66 	vmov.f32	s0, s13
 800db24:	eef0 0a47 	vmov.f32	s1, s14
 800db28:	eeb0 1a67 	vmov.f32	s2, s15
 800db2c:	3730      	adds	r7, #48	; 0x30
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}

0800db32 <vadd>:
static inline struct vec vadd(struct vec a, struct vec b) {
 800db32:	b580      	push	{r7, lr}
 800db34:	b08e      	sub	sp, #56	; 0x38
 800db36:	af00      	add	r7, sp, #0
 800db38:	eeb0 5a40 	vmov.f32	s10, s0
 800db3c:	eef0 5a60 	vmov.f32	s11, s1
 800db40:	eeb0 6a41 	vmov.f32	s12, s2
 800db44:	eef0 6a61 	vmov.f32	s13, s3
 800db48:	eeb0 7a42 	vmov.f32	s14, s4
 800db4c:	eef0 7a62 	vmov.f32	s15, s5
 800db50:	ed87 5a07 	vstr	s10, [r7, #28]
 800db54:	edc7 5a08 	vstr	s11, [r7, #32]
 800db58:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800db5c:	edc7 6a04 	vstr	s13, [r7, #16]
 800db60:	ed87 7a05 	vstr	s14, [r7, #20]
 800db64:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(a.x + b.x, a.y + b.y, a.z + b.z);
 800db68:	ed97 7a07 	vldr	s14, [r7, #28]
 800db6c:	edd7 7a04 	vldr	s15, [r7, #16]
 800db70:	ee77 6a27 	vadd.f32	s13, s14, s15
 800db74:	ed97 7a08 	vldr	s14, [r7, #32]
 800db78:	edd7 7a05 	vldr	s15, [r7, #20]
 800db7c:	ee37 6a27 	vadd.f32	s12, s14, s15
 800db80:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800db84:	edd7 7a06 	vldr	s15, [r7, #24]
 800db88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db8c:	eeb0 1a67 	vmov.f32	s2, s15
 800db90:	eef0 0a46 	vmov.f32	s1, s12
 800db94:	eeb0 0a66 	vmov.f32	s0, s13
 800db98:	f7ff fe7e 	bl	800d898 <mkvec>
 800db9c:	eef0 6a40 	vmov.f32	s13, s0
 800dba0:	eeb0 7a60 	vmov.f32	s14, s1
 800dba4:	eef0 7a41 	vmov.f32	s15, s2
 800dba8:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 800dbac:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800dbb0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800dbb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbba:	ee06 1a90 	vmov	s13, r1
 800dbbe:	ee07 2a10 	vmov	s14, r2
 800dbc2:	ee07 3a90 	vmov	s15, r3
}
 800dbc6:	eeb0 0a66 	vmov.f32	s0, s13
 800dbca:	eef0 0a47 	vmov.f32	s1, s14
 800dbce:	eeb0 1a67 	vmov.f32	s2, s15
 800dbd2:	3738      	adds	r7, #56	; 0x38
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <vsub>:
static inline struct vec vsub(struct vec a, struct vec b) {
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b090      	sub	sp, #64	; 0x40
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	eeb0 5a40 	vmov.f32	s10, s0
 800dbe2:	eef0 5a60 	vmov.f32	s11, s1
 800dbe6:	eeb0 6a41 	vmov.f32	s12, s2
 800dbea:	eef0 6a61 	vmov.f32	s13, s3
 800dbee:	eeb0 7a42 	vmov.f32	s14, s4
 800dbf2:	eef0 7a62 	vmov.f32	s15, s5
 800dbf6:	ed87 5a07 	vstr	s10, [r7, #28]
 800dbfa:	edc7 5a08 	vstr	s11, [r7, #32]
 800dbfe:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800dc02:	edc7 6a04 	vstr	s13, [r7, #16]
 800dc06:	ed87 7a05 	vstr	s14, [r7, #20]
 800dc0a:	edc7 7a06 	vstr	s15, [r7, #24]
	return vadd(a, vneg(b));
 800dc0e:	edd7 6a04 	vldr	s13, [r7, #16]
 800dc12:	ed97 7a05 	vldr	s14, [r7, #20]
 800dc16:	edd7 7a06 	vldr	s15, [r7, #24]
 800dc1a:	eeb0 0a66 	vmov.f32	s0, s13
 800dc1e:	eef0 0a47 	vmov.f32	s1, s14
 800dc22:	eeb0 1a67 	vmov.f32	s2, s15
 800dc26:	f7ff fefe 	bl	800da26 <vneg>
 800dc2a:	eef0 6a40 	vmov.f32	s13, s0
 800dc2e:	eeb0 7a60 	vmov.f32	s14, s1
 800dc32:	eef0 7a41 	vmov.f32	s15, s2
 800dc36:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800dc3a:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800dc3e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800dc42:	ed97 5a0d 	vldr	s10, [r7, #52]	; 0x34
 800dc46:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 800dc4a:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 800dc4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc52:	ed97 7a08 	vldr	s14, [r7, #32]
 800dc56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800dc5a:	eef0 1a45 	vmov.f32	s3, s10
 800dc5e:	eeb0 2a65 	vmov.f32	s4, s11
 800dc62:	eef0 2a46 	vmov.f32	s5, s12
 800dc66:	eeb0 0a66 	vmov.f32	s0, s13
 800dc6a:	eef0 0a47 	vmov.f32	s1, s14
 800dc6e:	eeb0 1a67 	vmov.f32	s2, s15
 800dc72:	f7ff ff5e 	bl	800db32 <vadd>
 800dc76:	eef0 6a40 	vmov.f32	s13, s0
 800dc7a:	eeb0 7a60 	vmov.f32	s14, s1
 800dc7e:	eef0 7a41 	vmov.f32	s15, s2
 800dc82:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800dc86:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800dc8a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800dc8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc94:	ee06 1a90 	vmov	s13, r1
 800dc98:	ee07 2a10 	vmov	s14, r2
 800dc9c:	ee07 3a90 	vmov	s15, r3
}
 800dca0:	eeb0 0a66 	vmov.f32	s0, s13
 800dca4:	eef0 0a47 	vmov.f32	s1, s14
 800dca8:	eeb0 1a67 	vmov.f32	s2, s15
 800dcac:	3740      	adds	r7, #64	; 0x40
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <vdot>:
static inline float vdot(struct vec a, struct vec b) {
 800dcb2:	b480      	push	{r7}
 800dcb4:	b087      	sub	sp, #28
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	eeb0 5a40 	vmov.f32	s10, s0
 800dcbc:	eef0 5a60 	vmov.f32	s11, s1
 800dcc0:	eeb0 6a41 	vmov.f32	s12, s2
 800dcc4:	eef0 6a61 	vmov.f32	s13, s3
 800dcc8:	eeb0 7a42 	vmov.f32	s14, s4
 800dccc:	eef0 7a62 	vmov.f32	s15, s5
 800dcd0:	ed87 5a03 	vstr	s10, [r7, #12]
 800dcd4:	edc7 5a04 	vstr	s11, [r7, #16]
 800dcd8:	ed87 6a05 	vstr	s12, [r7, #20]
 800dcdc:	edc7 6a00 	vstr	s13, [r7]
 800dce0:	ed87 7a01 	vstr	s14, [r7, #4]
 800dce4:	edc7 7a02 	vstr	s15, [r7, #8]
	return a.x * b.x + a.y * b.y + a.z * b.z;
 800dce8:	ed97 7a03 	vldr	s14, [r7, #12]
 800dcec:	edd7 7a00 	vldr	s15, [r7]
 800dcf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dcf4:	edd7 6a04 	vldr	s13, [r7, #16]
 800dcf8:	edd7 7a01 	vldr	s15, [r7, #4]
 800dcfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dd00:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dd04:	edd7 6a05 	vldr	s13, [r7, #20]
 800dd08:	edd7 7a02 	vldr	s15, [r7, #8]
 800dd0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dd10:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800dd14:	eeb0 0a67 	vmov.f32	s0, s15
 800dd18:	371c      	adds	r7, #28
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr

0800dd22 <vmag2>:
static inline float vmag2(struct vec v) {
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b084      	sub	sp, #16
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	eef0 6a40 	vmov.f32	s13, s0
 800dd2c:	eeb0 7a60 	vmov.f32	s14, s1
 800dd30:	eef0 7a41 	vmov.f32	s15, s2
 800dd34:	edc7 6a01 	vstr	s13, [r7, #4]
 800dd38:	ed87 7a02 	vstr	s14, [r7, #8]
 800dd3c:	edc7 7a03 	vstr	s15, [r7, #12]
	return vdot(v, v);
 800dd40:	ed97 5a01 	vldr	s10, [r7, #4]
 800dd44:	edd7 5a02 	vldr	s11, [r7, #8]
 800dd48:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd4c:	edd7 6a01 	vldr	s13, [r7, #4]
 800dd50:	ed97 7a02 	vldr	s14, [r7, #8]
 800dd54:	edd7 7a03 	vldr	s15, [r7, #12]
 800dd58:	eef0 1a45 	vmov.f32	s3, s10
 800dd5c:	eeb0 2a65 	vmov.f32	s4, s11
 800dd60:	eef0 2a46 	vmov.f32	s5, s12
 800dd64:	eeb0 0a66 	vmov.f32	s0, s13
 800dd68:	eef0 0a47 	vmov.f32	s1, s14
 800dd6c:	eeb0 1a67 	vmov.f32	s2, s15
 800dd70:	f7ff ff9f 	bl	800dcb2 <vdot>
 800dd74:	eef0 7a40 	vmov.f32	s15, s0
}
 800dd78:	eeb0 0a67 	vmov.f32	s0, s15
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}

0800dd82 <vmag>:
static inline float vmag(struct vec v) {
 800dd82:	b580      	push	{r7, lr}
 800dd84:	b084      	sub	sp, #16
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	eef0 6a40 	vmov.f32	s13, s0
 800dd8c:	eeb0 7a60 	vmov.f32	s14, s1
 800dd90:	eef0 7a41 	vmov.f32	s15, s2
 800dd94:	edc7 6a01 	vstr	s13, [r7, #4]
 800dd98:	ed87 7a02 	vstr	s14, [r7, #8]
 800dd9c:	edc7 7a03 	vstr	s15, [r7, #12]
	return sqrtf(vmag2(v));
 800dda0:	edd7 6a01 	vldr	s13, [r7, #4]
 800dda4:	ed97 7a02 	vldr	s14, [r7, #8]
 800dda8:	edd7 7a03 	vldr	s15, [r7, #12]
 800ddac:	eeb0 0a66 	vmov.f32	s0, s13
 800ddb0:	eef0 0a47 	vmov.f32	s1, s14
 800ddb4:	eeb0 1a67 	vmov.f32	s2, s15
 800ddb8:	f7ff ffb3 	bl	800dd22 <vmag2>
 800ddbc:	eef0 7a40 	vmov.f32	s15, s0
 800ddc0:	eeb0 0a67 	vmov.f32	s0, s15
 800ddc4:	f017 fd4a 	bl	802585c <sqrtf>
 800ddc8:	eef0 7a40 	vmov.f32	s15, s0
}
 800ddcc:	eeb0 0a67 	vmov.f32	s0, s15
 800ddd0:	3710      	adds	r7, #16
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}

0800ddd6 <vnormalize>:
static inline struct vec vnormalize(struct vec v) {
 800ddd6:	b580      	push	{r7, lr}
 800ddd8:	b08c      	sub	sp, #48	; 0x30
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	eef0 6a40 	vmov.f32	s13, s0
 800dde0:	eeb0 7a60 	vmov.f32	s14, s1
 800dde4:	eef0 7a41 	vmov.f32	s15, s2
 800dde8:	edc7 6a05 	vstr	s13, [r7, #20]
 800ddec:	ed87 7a06 	vstr	s14, [r7, #24]
 800ddf0:	edc7 7a07 	vstr	s15, [r7, #28]
	return vdiv(v, vmag(v));
 800ddf4:	edd7 6a05 	vldr	s13, [r7, #20]
 800ddf8:	ed97 7a06 	vldr	s14, [r7, #24]
 800ddfc:	edd7 7a07 	vldr	s15, [r7, #28]
 800de00:	eeb0 0a66 	vmov.f32	s0, s13
 800de04:	eef0 0a47 	vmov.f32	s1, s14
 800de08:	eeb0 1a67 	vmov.f32	s2, s15
 800de0c:	f7ff ffb9 	bl	800dd82 <vmag>
 800de10:	eeb0 6a40 	vmov.f32	s12, s0
 800de14:	edd7 6a05 	vldr	s13, [r7, #20]
 800de18:	ed97 7a06 	vldr	s14, [r7, #24]
 800de1c:	edd7 7a07 	vldr	s15, [r7, #28]
 800de20:	eef0 1a46 	vmov.f32	s3, s12
 800de24:	eeb0 0a66 	vmov.f32	s0, s13
 800de28:	eef0 0a47 	vmov.f32	s1, s14
 800de2c:	eeb0 1a67 	vmov.f32	s2, s15
 800de30:	f7ff fe3a 	bl	800daa8 <vdiv>
 800de34:	eef0 6a40 	vmov.f32	s13, s0
 800de38:	eeb0 7a60 	vmov.f32	s14, s1
 800de3c:	eef0 7a41 	vmov.f32	s15, s2
 800de40:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800de44:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800de48:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800de4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800de4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de52:	ee06 1a90 	vmov	s13, r1
 800de56:	ee07 2a10 	vmov	s14, r2
 800de5a:	ee07 3a90 	vmov	s15, r3
}
 800de5e:	eeb0 0a66 	vmov.f32	s0, s13
 800de62:	eef0 0a47 	vmov.f32	s1, s14
 800de66:	eeb0 1a67 	vmov.f32	s2, s15
 800de6a:	3730      	adds	r7, #48	; 0x30
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <vcross>:
static inline struct vec vcross(struct vec a, struct vec b) {
 800de70:	b580      	push	{r7, lr}
 800de72:	b08e      	sub	sp, #56	; 0x38
 800de74:	af00      	add	r7, sp, #0
 800de76:	eeb0 5a40 	vmov.f32	s10, s0
 800de7a:	eef0 5a60 	vmov.f32	s11, s1
 800de7e:	eeb0 6a41 	vmov.f32	s12, s2
 800de82:	eef0 6a61 	vmov.f32	s13, s3
 800de86:	eeb0 7a42 	vmov.f32	s14, s4
 800de8a:	eef0 7a62 	vmov.f32	s15, s5
 800de8e:	ed87 5a07 	vstr	s10, [r7, #28]
 800de92:	edc7 5a08 	vstr	s11, [r7, #32]
 800de96:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800de9a:	edc7 6a04 	vstr	s13, [r7, #16]
 800de9e:	ed87 7a05 	vstr	s14, [r7, #20]
 800dea2:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(a.y*b.z - a.z*b.y, a.z*b.x - a.x*b.z, a.x*b.y - a.y*b.x);
 800dea6:	ed97 7a08 	vldr	s14, [r7, #32]
 800deaa:	edd7 7a06 	vldr	s15, [r7, #24]
 800deae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800deb2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800deb6:	edd7 7a05 	vldr	s15, [r7, #20]
 800deba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800debe:	ee37 6a67 	vsub.f32	s12, s14, s15
 800dec2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800dec6:	edd7 7a04 	vldr	s15, [r7, #16]
 800deca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dece:	edd7 6a07 	vldr	s13, [r7, #28]
 800ded2:	edd7 7a06 	vldr	s15, [r7, #24]
 800ded6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800deda:	ee77 5a67 	vsub.f32	s11, s14, s15
 800dede:	ed97 7a07 	vldr	s14, [r7, #28]
 800dee2:	edd7 7a05 	vldr	s15, [r7, #20]
 800dee6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800deea:	edd7 6a08 	vldr	s13, [r7, #32]
 800deee:	edd7 7a04 	vldr	s15, [r7, #16]
 800def2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800def6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800defa:	eeb0 1a67 	vmov.f32	s2, s15
 800defe:	eef0 0a65 	vmov.f32	s1, s11
 800df02:	eeb0 0a46 	vmov.f32	s0, s12
 800df06:	f7ff fcc7 	bl	800d898 <mkvec>
 800df0a:	eef0 6a40 	vmov.f32	s13, s0
 800df0e:	eeb0 7a60 	vmov.f32	s14, s1
 800df12:	eef0 7a41 	vmov.f32	s15, s2
 800df16:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 800df1a:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800df1e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800df22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df28:	ee06 1a90 	vmov	s13, r1
 800df2c:	ee07 2a10 	vmov	s14, r2
 800df30:	ee07 3a90 	vmov	s15, r3
}
 800df34:	eeb0 0a66 	vmov.f32	s0, s13
 800df38:	eef0 0a47 	vmov.f32	s1, s14
 800df3c:	eeb0 1a67 	vmov.f32	s2, s15
 800df40:	3738      	adds	r7, #56	; 0x38
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}

0800df46 <vprojectunit>:
static inline struct vec vprojectunit(struct vec a, struct vec b_unit) {
 800df46:	b580      	push	{r7, lr}
 800df48:	b08e      	sub	sp, #56	; 0x38
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	eeb0 5a40 	vmov.f32	s10, s0
 800df50:	eef0 5a60 	vmov.f32	s11, s1
 800df54:	eeb0 6a41 	vmov.f32	s12, s2
 800df58:	eef0 6a61 	vmov.f32	s13, s3
 800df5c:	eeb0 7a42 	vmov.f32	s14, s4
 800df60:	eef0 7a62 	vmov.f32	s15, s5
 800df64:	ed87 5a07 	vstr	s10, [r7, #28]
 800df68:	edc7 5a08 	vstr	s11, [r7, #32]
 800df6c:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800df70:	edc7 6a04 	vstr	s13, [r7, #16]
 800df74:	ed87 7a05 	vstr	s14, [r7, #20]
 800df78:	edc7 7a06 	vstr	s15, [r7, #24]
	return vscl(vdot(a, b_unit), b_unit);
 800df7c:	ed97 5a04 	vldr	s10, [r7, #16]
 800df80:	edd7 5a05 	vldr	s11, [r7, #20]
 800df84:	ed97 6a06 	vldr	s12, [r7, #24]
 800df88:	edd7 6a07 	vldr	s13, [r7, #28]
 800df8c:	ed97 7a08 	vldr	s14, [r7, #32]
 800df90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800df94:	eef0 1a45 	vmov.f32	s3, s10
 800df98:	eeb0 2a65 	vmov.f32	s4, s11
 800df9c:	eef0 2a46 	vmov.f32	s5, s12
 800dfa0:	eeb0 0a66 	vmov.f32	s0, s13
 800dfa4:	eef0 0a47 	vmov.f32	s1, s14
 800dfa8:	eeb0 1a67 	vmov.f32	s2, s15
 800dfac:	f7ff fe81 	bl	800dcb2 <vdot>
 800dfb0:	eeb0 6a40 	vmov.f32	s12, s0
 800dfb4:	edd7 6a04 	vldr	s13, [r7, #16]
 800dfb8:	ed97 7a05 	vldr	s14, [r7, #20]
 800dfbc:	edd7 7a06 	vldr	s15, [r7, #24]
 800dfc0:	eef0 0a66 	vmov.f32	s1, s13
 800dfc4:	eeb0 1a47 	vmov.f32	s2, s14
 800dfc8:	eef0 1a67 	vmov.f32	s3, s15
 800dfcc:	eeb0 0a46 	vmov.f32	s0, s12
 800dfd0:	f7ff fce0 	bl	800d994 <vscl>
 800dfd4:	eef0 6a40 	vmov.f32	s13, s0
 800dfd8:	eeb0 7a60 	vmov.f32	s14, s1
 800dfdc:	eef0 7a41 	vmov.f32	s15, s2
 800dfe0:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 800dfe4:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800dfe8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800dfec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dfee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dff2:	ee06 1a90 	vmov	s13, r1
 800dff6:	ee07 2a10 	vmov	s14, r2
 800dffa:	ee07 3a90 	vmov	s15, r3
}
 800dffe:	eeb0 0a66 	vmov.f32	s0, s13
 800e002:	eef0 0a47 	vmov.f32	s1, s14
 800e006:	eeb0 1a67 	vmov.f32	s2, s15
 800e00a:	3738      	adds	r7, #56	; 0x38
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <vorthunit>:
static inline struct vec vorthunit(struct vec a, struct vec b_unit) {
 800e010:	b580      	push	{r7, lr}
 800e012:	b090      	sub	sp, #64	; 0x40
 800e014:	af00      	add	r7, sp, #0
 800e016:	eeb0 5a40 	vmov.f32	s10, s0
 800e01a:	eef0 5a60 	vmov.f32	s11, s1
 800e01e:	eeb0 6a41 	vmov.f32	s12, s2
 800e022:	eef0 6a61 	vmov.f32	s13, s3
 800e026:	eeb0 7a42 	vmov.f32	s14, s4
 800e02a:	eef0 7a62 	vmov.f32	s15, s5
 800e02e:	ed87 5a07 	vstr	s10, [r7, #28]
 800e032:	edc7 5a08 	vstr	s11, [r7, #32]
 800e036:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800e03a:	edc7 6a04 	vstr	s13, [r7, #16]
 800e03e:	ed87 7a05 	vstr	s14, [r7, #20]
 800e042:	edc7 7a06 	vstr	s15, [r7, #24]
	return vsub(a, vprojectunit(a, b_unit));
 800e046:	ed97 5a04 	vldr	s10, [r7, #16]
 800e04a:	edd7 5a05 	vldr	s11, [r7, #20]
 800e04e:	ed97 6a06 	vldr	s12, [r7, #24]
 800e052:	edd7 6a07 	vldr	s13, [r7, #28]
 800e056:	ed97 7a08 	vldr	s14, [r7, #32]
 800e05a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e05e:	eef0 1a45 	vmov.f32	s3, s10
 800e062:	eeb0 2a65 	vmov.f32	s4, s11
 800e066:	eef0 2a46 	vmov.f32	s5, s12
 800e06a:	eeb0 0a66 	vmov.f32	s0, s13
 800e06e:	eef0 0a47 	vmov.f32	s1, s14
 800e072:	eeb0 1a67 	vmov.f32	s2, s15
 800e076:	f7ff ff66 	bl	800df46 <vprojectunit>
 800e07a:	eef0 6a40 	vmov.f32	s13, s0
 800e07e:	eeb0 7a60 	vmov.f32	s14, s1
 800e082:	eef0 7a41 	vmov.f32	s15, s2
 800e086:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800e08a:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800e08e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800e092:	ed97 5a0d 	vldr	s10, [r7, #52]	; 0x34
 800e096:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 800e09a:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 800e09e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e0a2:	ed97 7a08 	vldr	s14, [r7, #32]
 800e0a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e0aa:	eef0 1a45 	vmov.f32	s3, s10
 800e0ae:	eeb0 2a65 	vmov.f32	s4, s11
 800e0b2:	eef0 2a46 	vmov.f32	s5, s12
 800e0b6:	eeb0 0a66 	vmov.f32	s0, s13
 800e0ba:	eef0 0a47 	vmov.f32	s1, s14
 800e0be:	eeb0 1a67 	vmov.f32	s2, s15
 800e0c2:	f7ff fd89 	bl	800dbd8 <vsub>
 800e0c6:	eef0 6a40 	vmov.f32	s13, s0
 800e0ca:	eeb0 7a60 	vmov.f32	s14, s1
 800e0ce:	eef0 7a41 	vmov.f32	s15, s2
 800e0d2:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800e0d6:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800e0da:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800e0de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e0e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e4:	ee06 1a90 	vmov	s13, r1
 800e0e8:	ee07 2a10 	vmov	s14, r2
 800e0ec:	ee07 3a90 	vmov	s15, r3
}
 800e0f0:	eeb0 0a66 	vmov.f32	s0, s13
 800e0f4:	eef0 0a47 	vmov.f32	s1, s14
 800e0f8:	eeb0 1a67 	vmov.f32	s2, s15
 800e0fc:	3740      	adds	r7, #64	; 0x40
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}

0800e102 <polylinear>:
static struct poly4d poly4d_tmp;

// polynomials are stored with ascending degree

void polylinear(float p[PP_SIZE], float duration, float x0, float x1)
{
 800e102:	b480      	push	{r7}
 800e104:	b087      	sub	sp, #28
 800e106:	af00      	add	r7, sp, #0
 800e108:	60f8      	str	r0, [r7, #12]
 800e10a:	ed87 0a02 	vstr	s0, [r7, #8]
 800e10e:	edc7 0a01 	vstr	s1, [r7, #4]
 800e112:	ed87 1a00 	vstr	s2, [r7]
	p[0] = x0;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	687a      	ldr	r2, [r7, #4]
 800e11a:	601a      	str	r2, [r3, #0]
	p[1] = (x1 - x0) / duration;
 800e11c:	ed97 7a00 	vldr	s14, [r7]
 800e120:	edd7 7a01 	vldr	s15, [r7, #4]
 800e124:	ee77 6a67 	vsub.f32	s13, s14, s15
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	3304      	adds	r3, #4
 800e12c:	ed97 7a02 	vldr	s14, [r7, #8]
 800e130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e134:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 2; i < PP_SIZE; ++i) {
 800e138:	2302      	movs	r3, #2
 800e13a:	617b      	str	r3, [r7, #20]
 800e13c:	e009      	b.n	800e152 <polylinear+0x50>
		p[i] = 0;
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	68fa      	ldr	r2, [r7, #12]
 800e144:	4413      	add	r3, r2
 800e146:	f04f 0200 	mov.w	r2, #0
 800e14a:	601a      	str	r2, [r3, #0]
	for (int i = 2; i < PP_SIZE; ++i) {
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	3301      	adds	r3, #1
 800e150:	617b      	str	r3, [r7, #20]
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	2b07      	cmp	r3, #7
 800e156:	ddf2      	ble.n	800e13e <polylinear+0x3c>
	}
}
 800e158:	bf00      	nop
 800e15a:	bf00      	nop
 800e15c:	371c      	adds	r7, #28
 800e15e:	46bd      	mov	sp, r7
 800e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e164:	4770      	bx	lr
	...

0800e168 <polybezier>:

// precalculated factorials that we will need
static const int facs[PP_SIZE] = { 1, 1, 2, 6, 24, 120, 720, 5040 };

void polybezier(float p[PP_SIZE], float duration, float* x, int dim) {
 800e168:	b580      	push	{r7, lr}
 800e16a:	b08a      	sub	sp, #40	; 0x28
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	ed87 0a02 	vstr	s0, [r7, #8]
 800e174:	6079      	str	r1, [r7, #4]
 800e176:	603a      	str	r2, [r7, #0]
	int i, j, n, sign;
	float coeff;

	if (dim <= 0) {
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	f340 8094 	ble.w	800e2a8 <polybezier+0x140>
		/* nothing to do */
	} else if (dim == 1) {
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	2b01      	cmp	r3, #1
 800e184:	d104      	bne.n	800e190 <polybezier+0x28>
		p[0] = x[0];
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	601a      	str	r2, [r3, #0]
			}
			p[j] = coeff * facs[n] / facs[n-j];
		}
		polystretchtime(p, duration);
	}
}
 800e18e:	e08b      	b.n	800e2a8 <polybezier+0x140>
	} else if (dim == 2) {
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	2b02      	cmp	r3, #2
 800e194:	d110      	bne.n	800e1b8 <polybezier+0x50>
		polylinear(p, duration, x[0], x[1]);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	edd3 7a00 	vldr	s15, [r3]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	3304      	adds	r3, #4
 800e1a0:	ed93 7a00 	vldr	s14, [r3]
 800e1a4:	eeb0 1a47 	vmov.f32	s2, s14
 800e1a8:	eef0 0a67 	vmov.f32	s1, s15
 800e1ac:	ed97 0a02 	vldr	s0, [r7, #8]
 800e1b0:	68f8      	ldr	r0, [r7, #12]
 800e1b2:	f7ff ffa6 	bl	800e102 <polylinear>
}
 800e1b6:	e077      	b.n	800e2a8 <polybezier+0x140>
		n = ((dim < PP_SIZE) ? dim : PP_SIZE) - 1;
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	2b08      	cmp	r3, #8
 800e1bc:	bfa8      	it	ge
 800e1be:	2308      	movge	r3, #8
 800e1c0:	3b01      	subs	r3, #1
 800e1c2:	617b      	str	r3, [r7, #20]
		sign = 1;
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	61fb      	str	r3, [r7, #28]
		for (j = 0; j <= n; j++) {
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	623b      	str	r3, [r7, #32]
 800e1cc:	e063      	b.n	800e296 <polybezier+0x12e>
			coeff = 0;
 800e1ce:	f04f 0300 	mov.w	r3, #0
 800e1d2:	61bb      	str	r3, [r7, #24]
			sign = (j % 2) ? -1 : 1;
 800e1d4:	6a3b      	ldr	r3, [r7, #32]
 800e1d6:	f003 0301 	and.w	r3, r3, #1
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d002      	beq.n	800e1e4 <polybezier+0x7c>
 800e1de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e1e2:	e000      	b.n	800e1e6 <polybezier+0x7e>
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	61fb      	str	r3, [r7, #28]
			for (i = 0; i <= j; i++, sign *= -1) {
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	627b      	str	r3, [r7, #36]	; 0x24
 800e1ec:	e02e      	b.n	800e24c <polybezier+0xe4>
				coeff += sign * x[i] / facs[i] / facs[j-i];
 800e1ee:	69fb      	ldr	r3, [r7, #28]
 800e1f0:	ee07 3a90 	vmov	s15, r3
 800e1f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fa:	009b      	lsls	r3, r3, #2
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	4413      	add	r3, r2
 800e200:	edd3 7a00 	vldr	s15, [r3]
 800e204:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e208:	4a29      	ldr	r2, [pc, #164]	; (800e2b0 <polybezier+0x148>)
 800e20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e210:	ee07 3a90 	vmov	s15, r3
 800e214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e218:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e21c:	6a3a      	ldr	r2, [r7, #32]
 800e21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e220:	1ad3      	subs	r3, r2, r3
 800e222:	4a23      	ldr	r2, [pc, #140]	; (800e2b0 <polybezier+0x148>)
 800e224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e228:	ee07 3a90 	vmov	s15, r3
 800e22c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e234:	ed97 7a06 	vldr	s14, [r7, #24]
 800e238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e23c:	edc7 7a06 	vstr	s15, [r7, #24]
			for (i = 0; i <= j; i++, sign *= -1) {
 800e240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e242:	3301      	adds	r3, #1
 800e244:	627b      	str	r3, [r7, #36]	; 0x24
 800e246:	69fb      	ldr	r3, [r7, #28]
 800e248:	425b      	negs	r3, r3
 800e24a:	61fb      	str	r3, [r7, #28]
 800e24c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e24e:	6a3b      	ldr	r3, [r7, #32]
 800e250:	429a      	cmp	r2, r3
 800e252:	ddcc      	ble.n	800e1ee <polybezier+0x86>
			p[j] = coeff * facs[n] / facs[n-j];
 800e254:	4a16      	ldr	r2, [pc, #88]	; (800e2b0 <polybezier+0x148>)
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e25c:	ee07 3a90 	vmov	s15, r3
 800e260:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e264:	edd7 7a06 	vldr	s15, [r7, #24]
 800e268:	ee67 6a27 	vmul.f32	s13, s14, s15
 800e26c:	697a      	ldr	r2, [r7, #20]
 800e26e:	6a3b      	ldr	r3, [r7, #32]
 800e270:	1ad3      	subs	r3, r2, r3
 800e272:	4a0f      	ldr	r2, [pc, #60]	; (800e2b0 <polybezier+0x148>)
 800e274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e278:	ee07 3a90 	vmov	s15, r3
 800e27c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e280:	6a3b      	ldr	r3, [r7, #32]
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	68fa      	ldr	r2, [r7, #12]
 800e286:	4413      	add	r3, r2
 800e288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e28c:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j <= n; j++) {
 800e290:	6a3b      	ldr	r3, [r7, #32]
 800e292:	3301      	adds	r3, #1
 800e294:	623b      	str	r3, [r7, #32]
 800e296:	6a3a      	ldr	r2, [r7, #32]
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	429a      	cmp	r2, r3
 800e29c:	dd97      	ble.n	800e1ce <polybezier+0x66>
		polystretchtime(p, duration);
 800e29e:	ed97 0a02 	vldr	s0, [r7, #8]
 800e2a2:	68f8      	ldr	r0, [r7, #12]
 800e2a4:	f000 f806 	bl	800e2b4 <polystretchtime>
}
 800e2a8:	bf00      	nop
 800e2aa:	3728      	adds	r7, #40	; 0x28
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	0802d8dc 	.word	0x0802d8dc

0800e2b4 <polystretchtime>:
	}
}

// e.g. if s==2 the new polynomial will be stretched to take 2x longer
void polystretchtime(float p[PP_SIZE], float s)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b087      	sub	sp, #28
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	ed87 0a00 	vstr	s0, [r7]
	float recip = 1.0f / s;
 800e2c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e2c4:	ed97 7a00 	vldr	s14, [r7]
 800e2c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e2cc:	edc7 7a03 	vstr	s15, [r7, #12]
	float scale = recip;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	617b      	str	r3, [r7, #20]
	for (int i = 1; i < PP_SIZE; ++i) {
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	613b      	str	r3, [r7, #16]
 800e2d8:	e01a      	b.n	800e310 <polystretchtime+0x5c>
		p[i] *= scale;
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	009b      	lsls	r3, r3, #2
 800e2de:	687a      	ldr	r2, [r7, #4]
 800e2e0:	4413      	add	r3, r2
 800e2e2:	ed93 7a00 	vldr	s14, [r3]
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	687a      	ldr	r2, [r7, #4]
 800e2ec:	4413      	add	r3, r2
 800e2ee:	edd7 7a05 	vldr	s15, [r7, #20]
 800e2f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2f6:	edc3 7a00 	vstr	s15, [r3]
		scale *= recip;
 800e2fa:	ed97 7a05 	vldr	s14, [r7, #20]
 800e2fe:	edd7 7a03 	vldr	s15, [r7, #12]
 800e302:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e306:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 1; i < PP_SIZE; ++i) {
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	3301      	adds	r3, #1
 800e30e:	613b      	str	r3, [r7, #16]
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	2b07      	cmp	r3, #7
 800e314:	dde1      	ble.n	800e2da <polystretchtime+0x26>
	}
}
 800e316:	bf00      	nop
 800e318:	bf00      	nop
 800e31a:	371c      	adds	r7, #28
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr

0800e324 <polyreflect>:

void polyreflect(float p[PP_SIZE])
{
 800e324:	b480      	push	{r7}
 800e326:	b085      	sub	sp, #20
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
	for (int i = 1; i < PP_SIZE; i += 2) {
 800e32c:	2301      	movs	r3, #1
 800e32e:	60fb      	str	r3, [r7, #12]
 800e330:	e010      	b.n	800e354 <polyreflect+0x30>
		p[i] = -p[i];
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	4413      	add	r3, r2
 800e33a:	edd3 7a00 	vldr	s15, [r3]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	009b      	lsls	r3, r3, #2
 800e342:	687a      	ldr	r2, [r7, #4]
 800e344:	4413      	add	r3, r2
 800e346:	eef1 7a67 	vneg.f32	s15, s15
 800e34a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 1; i < PP_SIZE; i += 2) {
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	3302      	adds	r3, #2
 800e352:	60fb      	str	r3, [r7, #12]
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2b07      	cmp	r3, #7
 800e358:	ddeb      	ble.n	800e332 <polyreflect+0xe>
	}
}
 800e35a:	bf00      	nop
 800e35c:	bf00      	nop
 800e35e:	3714      	adds	r7, #20
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr

0800e368 <polyval>:

// evaluate a polynomial using horner's rule.
float polyval(float const p[PP_SIZE], float t)
{
 800e368:	b480      	push	{r7}
 800e36a:	b085      	sub	sp, #20
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	ed87 0a00 	vstr	s0, [r7]
	float x = 0.0;
 800e374:	f04f 0300 	mov.w	r3, #0
 800e378:	60fb      	str	r3, [r7, #12]
	for (int i = PP_DEGREE; i >= 0; --i) {
 800e37a:	2307      	movs	r3, #7
 800e37c:	60bb      	str	r3, [r7, #8]
 800e37e:	e012      	b.n	800e3a6 <polyval+0x3e>
		x = x * t + p[i];
 800e380:	ed97 7a03 	vldr	s14, [r7, #12]
 800e384:	edd7 7a00 	vldr	s15, [r7]
 800e388:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	009b      	lsls	r3, r3, #2
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	4413      	add	r3, r2
 800e394:	edd3 7a00 	vldr	s15, [r3]
 800e398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e39c:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = PP_DEGREE; i >= 0; --i) {
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	3b01      	subs	r3, #1
 800e3a4:	60bb      	str	r3, [r7, #8]
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	dae9      	bge.n	800e380 <polyval+0x18>
	}
	return x;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	ee07 3a90 	vmov	s15, r3
}
 800e3b2:	eeb0 0a67 	vmov.f32	s0, s15
 800e3b6:	3714      	adds	r7, #20
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <polyder>:

// compute derivative of a polynomial in place
void polyder(float p[PP_SIZE])
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b085      	sub	sp, #20
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
	for (int i = 1; i <= PP_DEGREE; ++i) {
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	60fb      	str	r3, [r7, #12]
 800e3cc:	e018      	b.n	800e400 <polyder+0x40>
		p[i-1] = i * p[i];
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	ee07 3a90 	vmov	s15, r3
 800e3d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	687a      	ldr	r2, [r7, #4]
 800e3de:	4413      	add	r3, r2
 800e3e0:	edd3 7a00 	vldr	s15, [r3]
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e3ea:	3b01      	subs	r3, #1
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3f6:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 1; i <= PP_DEGREE; ++i) {
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	60fb      	str	r3, [r7, #12]
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	2b07      	cmp	r3, #7
 800e404:	dde3      	ble.n	800e3ce <polyder+0xe>
	}
	p[PP_DEGREE] = 0;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	331c      	adds	r3, #28
 800e40a:	f04f 0200 	mov.w	r2, #0
 800e40e:	601a      	str	r2, [r3, #0]
}
 800e410:	bf00      	nop
 800e412:	3714      	adds	r7, #20
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr

0800e41c <poly7_nojerk>:
}

static void poly7_nojerk(float poly[PP_SIZE], float T,
	float x0, float dx0, float ddx0,
	float xf, float dxf, float ddxf)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b091      	sub	sp, #68	; 0x44
 800e420:	af00      	add	r7, sp, #0
 800e422:	61f8      	str	r0, [r7, #28]
 800e424:	ed87 0a06 	vstr	s0, [r7, #24]
 800e428:	edc7 0a05 	vstr	s1, [r7, #20]
 800e42c:	ed87 1a04 	vstr	s2, [r7, #16]
 800e430:	edc7 1a03 	vstr	s3, [r7, #12]
 800e434:	ed87 2a02 	vstr	s4, [r7, #8]
 800e438:	edc7 2a01 	vstr	s5, [r7, #4]
 800e43c:	ed87 3a00 	vstr	s6, [r7]
	if (T <= 0.0f) {
 800e440:	edd7 7a06 	vldr	s15, [r7, #24]
 800e444:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e44c:	d821      	bhi.n	800e492 <poly7_nojerk+0x76>
		poly[0] = xf;
 800e44e:	69fb      	ldr	r3, [r7, #28]
 800e450:	68ba      	ldr	r2, [r7, #8]
 800e452:	601a      	str	r2, [r3, #0]
		poly[1] = dxf;
 800e454:	69fb      	ldr	r3, [r7, #28]
 800e456:	3304      	adds	r3, #4
 800e458:	687a      	ldr	r2, [r7, #4]
 800e45a:	601a      	str	r2, [r3, #0]
		poly[2] = ddxf/2;
 800e45c:	69fb      	ldr	r3, [r7, #28]
 800e45e:	3308      	adds	r3, #8
 800e460:	ed97 7a00 	vldr	s14, [r7]
 800e464:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e468:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e46c:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 3; i < PP_SIZE; ++i) {
 800e470:	2303      	movs	r3, #3
 800e472:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e474:	e009      	b.n	800e48a <poly7_nojerk+0x6e>
			poly[i] = 0;
 800e476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e478:	009b      	lsls	r3, r3, #2
 800e47a:	69fa      	ldr	r2, [r7, #28]
 800e47c:	4413      	add	r3, r2
 800e47e:	f04f 0200 	mov.w	r2, #0
 800e482:	601a      	str	r2, [r3, #0]
		for (int i = 3; i < PP_SIZE; ++i) {
 800e484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e486:	3301      	adds	r3, #1
 800e488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e48c:	2b07      	cmp	r3, #7
 800e48e:	ddf2      	ble.n	800e476 <poly7_nojerk+0x5a>
		poly[7] = (2*(10*x0 - 10*xf + 5*T*dx0 + 5*T*dxf + T2*ddx0 - T2*ddxf))/T7;
		for (int i = 8; i < PP_SIZE; ++i) {
			poly[i] = 0;
		}
	}
}
 800e490:	e16b      	b.n	800e76a <poly7_nojerk+0x34e>
		float T2 = T * T;
 800e492:	edd7 7a06 	vldr	s15, [r7, #24]
 800e496:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e49a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		float T3 = T2 * T;
 800e49e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e4a2:	edd7 7a06 	vldr	s15, [r7, #24]
 800e4a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4aa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		float T4 = T3 * T;
 800e4ae:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e4b2:	edd7 7a06 	vldr	s15, [r7, #24]
 800e4b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4ba:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		float T5 = T4 * T;
 800e4be:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800e4c2:	edd7 7a06 	vldr	s15, [r7, #24]
 800e4c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4ca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		float T6 = T5 * T;
 800e4ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e4d2:	edd7 7a06 	vldr	s15, [r7, #24]
 800e4d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4da:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float T7 = T6 * T;
 800e4de:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800e4e2:	edd7 7a06 	vldr	s15, [r7, #24]
 800e4e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4ea:	edc7 7a08 	vstr	s15, [r7, #32]
		poly[0] = x0;
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	697a      	ldr	r2, [r7, #20]
 800e4f2:	601a      	str	r2, [r3, #0]
		poly[1] = dx0;
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	3304      	adds	r3, #4
 800e4f8:	693a      	ldr	r2, [r7, #16]
 800e4fa:	601a      	str	r2, [r3, #0]
		poly[2] = ddx0/2;
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	3308      	adds	r3, #8
 800e500:	ed97 7a03 	vldr	s14, [r7, #12]
 800e504:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e508:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e50c:	edc3 7a00 	vstr	s15, [r3]
		poly[3] = 0;
 800e510:	69fb      	ldr	r3, [r7, #28]
 800e512:	330c      	adds	r3, #12
 800e514:	f04f 0200 	mov.w	r2, #0
 800e518:	601a      	str	r2, [r3, #0]
		poly[4] = -(5*(14*x0 - 14*xf + 8*T*dx0 + 6*T*dxf + 2*T2*ddx0 - T2*ddxf))/(2*T4);
 800e51a:	edd7 7a05 	vldr	s15, [r7, #20]
 800e51e:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800e522:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e526:	edd7 7a02 	vldr	s15, [r7, #8]
 800e52a:	eef2 6a0c 	vmov.f32	s13, #44	; 0x41600000  14.0
 800e52e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e532:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e536:	edd7 7a06 	vldr	s15, [r7, #24]
 800e53a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800e53e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e542:	edd7 7a04 	vldr	s15, [r7, #16]
 800e546:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e54a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e54e:	edd7 7a06 	vldr	s15, [r7, #24]
 800e552:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800e556:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e55a:	edd7 7a01 	vldr	s15, [r7, #4]
 800e55e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e562:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e566:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e56a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e56e:	edd7 7a03 	vldr	s15, [r7, #12]
 800e572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e576:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e57a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800e57e:	edd7 7a00 	vldr	s15, [r7]
 800e582:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e58a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800e58e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e592:	eef1 6a67 	vneg.f32	s13, s15
 800e596:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e59a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e59e:	69fb      	ldr	r3, [r7, #28]
 800e5a0:	3310      	adds	r3, #16
 800e5a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5a6:	edc3 7a00 	vstr	s15, [r3]
		poly[5] = (84*x0 - 84*xf + 45*T*dx0 + 39*T*dxf + 10*T2*ddx0 - 7*T2*ddxf)/T5;
 800e5aa:	edd7 7a05 	vldr	s15, [r7, #20]
 800e5ae:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800e778 <poly7_nojerk+0x35c>
 800e5b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e5b6:	edd7 7a02 	vldr	s15, [r7, #8]
 800e5ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e778 <poly7_nojerk+0x35c>
 800e5be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e5c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e5c6:	edd7 7a06 	vldr	s15, [r7, #24]
 800e5ca:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800e77c <poly7_nojerk+0x360>
 800e5ce:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e5d2:	edd7 7a04 	vldr	s15, [r7, #16]
 800e5d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5da:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e5de:	edd7 7a06 	vldr	s15, [r7, #24]
 800e5e2:	eddf 6a67 	vldr	s13, [pc, #412]	; 800e780 <poly7_nojerk+0x364>
 800e5e6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e5ea:	edd7 7a01 	vldr	s15, [r7, #4]
 800e5ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e5f6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e5fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e5fe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e602:	edd7 7a03 	vldr	s15, [r7, #12]
 800e606:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e60a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e60e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e612:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 800e616:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e61a:	edd7 7a00 	vldr	s15, [r7]
 800e61e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e622:	ee77 6a67 	vsub.f32	s13, s14, s15
 800e626:	69fb      	ldr	r3, [r7, #28]
 800e628:	3314      	adds	r3, #20
 800e62a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e62e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e632:	edc3 7a00 	vstr	s15, [r3]
		poly[6] = -(140*x0 - 140*xf + 72*T*dx0 + 68*T*dxf + 15*T2*ddx0 - 13*T2*ddxf)/(2*T6);
 800e636:	edd7 7a05 	vldr	s15, [r7, #20]
 800e63a:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800e784 <poly7_nojerk+0x368>
 800e63e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e642:	edd7 7a02 	vldr	s15, [r7, #8]
 800e646:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e784 <poly7_nojerk+0x368>
 800e64a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e64e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e652:	edd7 7a06 	vldr	s15, [r7, #24]
 800e656:	eddf 6a4c 	vldr	s13, [pc, #304]	; 800e788 <poly7_nojerk+0x36c>
 800e65a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e65e:	edd7 7a04 	vldr	s15, [r7, #16]
 800e662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e666:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e66a:	edd7 7a06 	vldr	s15, [r7, #24]
 800e66e:	eddf 6a47 	vldr	s13, [pc, #284]	; 800e78c <poly7_nojerk+0x370>
 800e672:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e676:	edd7 7a01 	vldr	s15, [r7, #4]
 800e67a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e67e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e682:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e686:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 800e68a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e68e:	edd7 7a03 	vldr	s15, [r7, #12]
 800e692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e696:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e69a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e69e:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 800e6a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e6a6:	edd7 7a00 	vldr	s15, [r7]
 800e6aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e6b2:	eef1 6a67 	vneg.f32	s13, s15
 800e6b6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e6ba:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e6be:	69fb      	ldr	r3, [r7, #28]
 800e6c0:	3318      	adds	r3, #24
 800e6c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e6c6:	edc3 7a00 	vstr	s15, [r3]
		poly[7] = (2*(10*x0 - 10*xf + 5*T*dx0 + 5*T*dxf + T2*ddx0 - T2*ddxf))/T7;
 800e6ca:	edd7 7a05 	vldr	s15, [r7, #20]
 800e6ce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e6d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e6d6:	edd7 7a02 	vldr	s15, [r7, #8]
 800e6da:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e6de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e6e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e6e6:	edd7 7a06 	vldr	s15, [r7, #24]
 800e6ea:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800e6ee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e6f2:	edd7 7a04 	vldr	s15, [r7, #16]
 800e6f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e6fe:	edd7 7a06 	vldr	s15, [r7, #24]
 800e702:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800e706:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e70a:	edd7 7a01 	vldr	s15, [r7, #4]
 800e70e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e712:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e716:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800e71a:	edd7 7a03 	vldr	s15, [r7, #12]
 800e71e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e722:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e726:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800e72a:	edd7 7a00 	vldr	s15, [r7]
 800e72e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e732:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e736:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e73a:	69fb      	ldr	r3, [r7, #28]
 800e73c:	331c      	adds	r3, #28
 800e73e:	ed97 7a08 	vldr	s14, [r7, #32]
 800e742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e746:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 8; i < PP_SIZE; ++i) {
 800e74a:	2308      	movs	r3, #8
 800e74c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e74e:	e009      	b.n	800e764 <poly7_nojerk+0x348>
			poly[i] = 0;
 800e750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	69fa      	ldr	r2, [r7, #28]
 800e756:	4413      	add	r3, r2
 800e758:	f04f 0200 	mov.w	r2, #0
 800e75c:	601a      	str	r2, [r3, #0]
		for (int i = 8; i < PP_SIZE; ++i) {
 800e75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e760:	3301      	adds	r3, #1
 800e762:	63bb      	str	r3, [r7, #56]	; 0x38
 800e764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e766:	2b07      	cmp	r3, #7
 800e768:	ddf2      	ble.n	800e750 <poly7_nojerk+0x334>
}
 800e76a:	bf00      	nop
 800e76c:	3744      	adds	r7, #68	; 0x44
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr
 800e776:	bf00      	nop
 800e778:	42a80000 	.word	0x42a80000
 800e77c:	42340000 	.word	0x42340000
 800e780:	421c0000 	.word	0x421c0000
 800e784:	430c0000 	.word	0x430c0000
 800e788:	42900000 	.word	0x42900000
 800e78c:	42880000 	.word	0x42880000

0800e790 <poly4d_shift>:
	polyscale(p->p[2], z);
	polyscale(p->p[3], yaw);
}

void poly4d_shift(struct poly4d *p, float x, float y, float z, float yaw)
{
 800e790:	b480      	push	{r7}
 800e792:	b087      	sub	sp, #28
 800e794:	af00      	add	r7, sp, #0
 800e796:	6178      	str	r0, [r7, #20]
 800e798:	ed87 0a04 	vstr	s0, [r7, #16]
 800e79c:	edc7 0a03 	vstr	s1, [r7, #12]
 800e7a0:	ed87 1a02 	vstr	s2, [r7, #8]
 800e7a4:	edc7 1a01 	vstr	s3, [r7, #4]
	p->p[0][0] += x;
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	ed93 7a00 	vldr	s14, [r3]
 800e7ae:	edd7 7a04 	vldr	s15, [r7, #16]
 800e7b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	edc3 7a00 	vstr	s15, [r3]
	p->p[1][0] += y;
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	ed93 7a08 	vldr	s14, [r3, #32]
 800e7c2:	edd7 7a03 	vldr	s15, [r7, #12]
 800e7c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	edc3 7a08 	vstr	s15, [r3, #32]
	p->p[2][0] += z;
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800e7d6:	edd7 7a02 	vldr	s15, [r7, #8]
 800e7da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	p->p[3][0] += yaw;
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800e7ea:	edd7 7a01 	vldr	s15, [r7, #4]
 800e7ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
}
 800e7f8:	bf00      	nop
 800e7fa:	371c      	adds	r7, #28
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr

0800e804 <poly4d_stretchtime>:

void poly4d_stretchtime(struct poly4d *p, float s)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b084      	sub	sp, #16
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	ed87 0a00 	vstr	s0, [r7]
	for (int i = 0; i < 4; ++i) {
 800e810:	2300      	movs	r3, #0
 800e812:	60fb      	str	r3, [r7, #12]
 800e814:	e00b      	b.n	800e82e <poly4d_stretchtime+0x2a>
		polystretchtime(p->p[i], s);
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	015b      	lsls	r3, r3, #5
 800e81a:	687a      	ldr	r2, [r7, #4]
 800e81c:	4413      	add	r3, r2
 800e81e:	ed97 0a00 	vldr	s0, [r7]
 800e822:	4618      	mov	r0, r3
 800e824:	f7ff fd46 	bl	800e2b4 <polystretchtime>
	for (int i = 0; i < 4; ++i) {
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	3301      	adds	r3, #1
 800e82c:	60fb      	str	r3, [r7, #12]
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	2b03      	cmp	r3, #3
 800e832:	ddf0      	ble.n	800e816 <poly4d_stretchtime+0x12>
	}
	p->duration *= s;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800e83a:	edd7 7a00 	vldr	s15, [r7]
 800e83e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
}
 800e848:	bf00      	nop
 800e84a:	3710      	adds	r7, #16
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <polyder4d>:

void polyder4d(struct poly4d *p)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b084      	sub	sp, #16
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; ++i) {
 800e858:	2300      	movs	r3, #0
 800e85a:	60fb      	str	r3, [r7, #12]
 800e85c:	e009      	b.n	800e872 <polyder4d+0x22>
		polyder(p->p[i]);
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	015b      	lsls	r3, r3, #5
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	4413      	add	r3, r2
 800e866:	4618      	mov	r0, r3
 800e868:	f7ff fdaa 	bl	800e3c0 <polyder>
	for (int i = 0; i < 4; ++i) {
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	3301      	adds	r3, #1
 800e870:	60fb      	str	r3, [r7, #12]
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	2b03      	cmp	r3, #3
 800e876:	ddf2      	ble.n	800e85e <polyder4d+0xe>
	}
}
 800e878:	bf00      	nop
 800e87a:	bf00      	nop
 800e87c:	3710      	adds	r7, #16
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}

0800e882 <polyval_xyz>:

static struct vec polyval_xyz(struct poly4d const *p, float t)
{
 800e882:	b580      	push	{r7, lr}
 800e884:	ed2d 8b02 	vpush	{d8}
 800e888:	b08a      	sub	sp, #40	; 0x28
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	6178      	str	r0, [r7, #20]
 800e88e:	ed87 0a04 	vstr	s0, [r7, #16]
	return mkvec(polyval(p->p[0], t), polyval(p->p[1], t), polyval(p->p[2], t));
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	ed97 0a04 	vldr	s0, [r7, #16]
 800e898:	4618      	mov	r0, r3
 800e89a:	f7ff fd65 	bl	800e368 <polyval>
 800e89e:	eeb0 8a40 	vmov.f32	s16, s0
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	3320      	adds	r3, #32
 800e8a6:	ed97 0a04 	vldr	s0, [r7, #16]
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7ff fd5c 	bl	800e368 <polyval>
 800e8b0:	eef0 8a40 	vmov.f32	s17, s0
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	3340      	adds	r3, #64	; 0x40
 800e8b8:	ed97 0a04 	vldr	s0, [r7, #16]
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7ff fd53 	bl	800e368 <polyval>
 800e8c2:	eef0 7a40 	vmov.f32	s15, s0
 800e8c6:	eeb0 1a67 	vmov.f32	s2, s15
 800e8ca:	eef0 0a68 	vmov.f32	s1, s17
 800e8ce:	eeb0 0a48 	vmov.f32	s0, s16
 800e8d2:	f7fe ffe1 	bl	800d898 <mkvec>
 800e8d6:	eef0 6a40 	vmov.f32	s13, s0
 800e8da:	eeb0 7a60 	vmov.f32	s14, s1
 800e8de:	eef0 7a41 	vmov.f32	s15, s2
 800e8e2:	edc7 6a07 	vstr	s13, [r7, #28]
 800e8e6:	ed87 7a08 	vstr	s14, [r7, #32]
 800e8ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800e8ee:	69f9      	ldr	r1, [r7, #28]
 800e8f0:	6a3a      	ldr	r2, [r7, #32]
 800e8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f4:	ee06 1a90 	vmov	s13, r1
 800e8f8:	ee07 2a10 	vmov	s14, r2
 800e8fc:	ee07 3a90 	vmov	s15, r3
}
 800e900:	eeb0 0a66 	vmov.f32	s0, s13
 800e904:	eef0 0a47 	vmov.f32	s1, s14
 800e908:	eeb0 1a67 	vmov.f32	s2, s15
 800e90c:	3728      	adds	r7, #40	; 0x28
 800e90e:	46bd      	mov	sp, r7
 800e910:	ecbd 8b02 	vpop	{d8}
 800e914:	bd80      	pop	{r7, pc}

0800e916 <polyval_yaw>:

static float polyval_yaw(struct poly4d const *p, float t)
{
 800e916:	b580      	push	{r7, lr}
 800e918:	b082      	sub	sp, #8
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
 800e91e:	ed87 0a00 	vstr	s0, [r7]
	return polyval(p->p[3], t);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	3360      	adds	r3, #96	; 0x60
 800e926:	ed97 0a00 	vldr	s0, [r7]
 800e92a:	4618      	mov	r0, r3
 800e92c:	f7ff fd1c 	bl	800e368 <polyval>
 800e930:	eef0 7a40 	vmov.f32	s15, s0
}
 800e934:	eeb0 0a67 	vmov.f32	s0, s15
 800e938:	3708      	adds	r7, #8
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
	...

0800e940 <traj_eval_invalid>:
	};
	return ev;
}

struct traj_eval traj_eval_invalid()
{
 800e940:	b5b0      	push	{r4, r5, r7, lr}
 800e942:	b090      	sub	sp, #64	; 0x40
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
	struct traj_eval ev;
	ev.pos = vrepeat(NAN);
 800e948:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800e988 <traj_eval_invalid+0x48>
 800e94c:	f7fe ffce 	bl	800d8ec <vrepeat>
 800e950:	eef0 6a40 	vmov.f32	s13, s0
 800e954:	eeb0 7a60 	vmov.f32	s14, s1
 800e958:	eef0 7a41 	vmov.f32	s15, s2
 800e95c:	edc7 6a03 	vstr	s13, [r7, #12]
 800e960:	ed87 7a04 	vstr	s14, [r7, #16]
 800e964:	edc7 7a05 	vstr	s15, [r7, #20]
	return ev;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	461d      	mov	r5, r3
 800e96c:	f107 040c 	add.w	r4, r7, #12
 800e970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e97a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e97c:	6823      	ldr	r3, [r4, #0]
 800e97e:	602b      	str	r3, [r5, #0]
}
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	3740      	adds	r7, #64	; 0x40
 800e984:	46bd      	mov	sp, r7
 800e986:	bdb0      	pop	{r4, r5, r7, pc}
 800e988:	7fc00000 	.word	0x7fc00000

0800e98c <poly4d_eval>:
{
	return !visnan(ev->pos);
}

struct traj_eval poly4d_eval(struct poly4d const *p, float t)
{
 800e98c:	b5b0      	push	{r4, r5, r7, lr}
 800e98e:	ed2d 8b02 	vpush	{d8}
 800e992:	b0b2      	sub	sp, #200	; 0xc8
 800e994:	af00      	add	r7, sp, #0
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	60b9      	str	r1, [r7, #8]
 800e99a:	ed87 0a01 	vstr	s0, [r7, #4]
	// flat variables
	struct traj_eval out;
	out.pos = polyval_xyz(p, t);
 800e99e:	ed97 0a01 	vldr	s0, [r7, #4]
 800e9a2:	68b8      	ldr	r0, [r7, #8]
 800e9a4:	f7ff ff6d 	bl	800e882 <polyval_xyz>
 800e9a8:	eef0 6a40 	vmov.f32	s13, s0
 800e9ac:	eeb0 7a60 	vmov.f32	s14, s1
 800e9b0:	eef0 7a41 	vmov.f32	s15, s2
 800e9b4:	edc7 6a1d 	vstr	s13, [r7, #116]	; 0x74
 800e9b8:	ed87 7a1e 	vstr	s14, [r7, #120]	; 0x78
 800e9bc:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	out.yaw = polyval_yaw(p, t);
 800e9c0:	ed97 0a01 	vldr	s0, [r7, #4]
 800e9c4:	68b8      	ldr	r0, [r7, #8]
 800e9c6:	f7ff ffa6 	bl	800e916 <polyval_yaw>
 800e9ca:	eef0 7a40 	vmov.f32	s15, s0
 800e9ce:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

	// 1st derivative
	struct poly4d* deriv = &poly4d_tmp;
 800e9d2:	4bf1      	ldr	r3, [pc, #964]	; (800ed98 <poly4d_eval+0x40c>)
 800e9d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	*deriv = *p;
 800e9d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	4610      	mov	r0, r2
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	2384      	movs	r3, #132	; 0x84
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	f015 f898 	bl	8023b1a <memcpy>
	polyder4d(deriv);
 800e9ea:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800e9ee:	f7ff ff2f 	bl	800e850 <polyder4d>
	out.vel = polyval_xyz(deriv, t);
 800e9f2:	ed97 0a01 	vldr	s0, [r7, #4]
 800e9f6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800e9fa:	f7ff ff42 	bl	800e882 <polyval_xyz>
 800e9fe:	eef0 6a40 	vmov.f32	s13, s0
 800ea02:	eeb0 7a60 	vmov.f32	s14, s1
 800ea06:	eef0 7a41 	vmov.f32	s15, s2
 800ea0a:	edc7 6a20 	vstr	s13, [r7, #128]	; 0x80
 800ea0e:	ed87 7a21 	vstr	s14, [r7, #132]	; 0x84
 800ea12:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float dyaw = polyval_yaw(deriv, t);
 800ea16:	ed97 0a01 	vldr	s0, [r7, #4]
 800ea1a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800ea1e:	f7ff ff7a 	bl	800e916 <polyval_yaw>
 800ea22:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0

	// 2nd derivative
	polyder4d(deriv);
 800ea26:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800ea2a:	f7ff ff11 	bl	800e850 <polyder4d>
	out.acc = polyval_xyz(deriv, t);
 800ea2e:	ed97 0a01 	vldr	s0, [r7, #4]
 800ea32:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800ea36:	f7ff ff24 	bl	800e882 <polyval_xyz>
 800ea3a:	eef0 6a40 	vmov.f32	s13, s0
 800ea3e:	eeb0 7a60 	vmov.f32	s14, s1
 800ea42:	eef0 7a41 	vmov.f32	s15, s2
 800ea46:	edc7 6a23 	vstr	s13, [r7, #140]	; 0x8c
 800ea4a:	ed87 7a24 	vstr	s14, [r7, #144]	; 0x90
 800ea4e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94

	// 3rd derivative
	polyder4d(deriv);
 800ea52:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800ea56:	f7ff fefb 	bl	800e850 <polyder4d>
	struct vec jerk = polyval_xyz(deriv, t);
 800ea5a:	ed97 0a01 	vldr	s0, [r7, #4]
 800ea5e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800ea62:	f7ff ff0e 	bl	800e882 <polyval_xyz>
 800ea66:	eef0 6a40 	vmov.f32	s13, s0
 800ea6a:	eeb0 7a60 	vmov.f32	s14, s1
 800ea6e:	eef0 7a41 	vmov.f32	s15, s2
 800ea72:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 800ea76:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 800ea7a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	struct vec thrust = vadd(out.acc, mkvec(0, 0, GRAV));
 800ea7e:	ed9f 1ac7 	vldr	s2, [pc, #796]	; 800ed9c <poly4d_eval+0x410>
 800ea82:	eddf 0ac7 	vldr	s1, [pc, #796]	; 800eda0 <poly4d_eval+0x414>
 800ea86:	ed9f 0ac6 	vldr	s0, [pc, #792]	; 800eda0 <poly4d_eval+0x414>
 800ea8a:	f7fe ff05 	bl	800d898 <mkvec>
 800ea8e:	eef0 6a40 	vmov.f32	s13, s0
 800ea92:	eeb0 7a60 	vmov.f32	s14, s1
 800ea96:	eef0 7a41 	vmov.f32	s15, s2
 800ea9a:	edc7 6a2a 	vstr	s13, [r7, #168]	; 0xa8
 800ea9e:	ed87 7a2b 	vstr	s14, [r7, #172]	; 0xac
 800eaa2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
 800eaa6:	ed97 5a2a 	vldr	s10, [r7, #168]	; 0xa8
 800eaaa:	edd7 5a2b 	vldr	s11, [r7, #172]	; 0xac
 800eaae:	ed97 6a2c 	vldr	s12, [r7, #176]	; 0xb0
 800eab2:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800eab6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800eaba:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800eabe:	eef0 1a45 	vmov.f32	s3, s10
 800eac2:	eeb0 2a65 	vmov.f32	s4, s11
 800eac6:	eef0 2a46 	vmov.f32	s5, s12
 800eaca:	eeb0 0a66 	vmov.f32	s0, s13
 800eace:	eef0 0a47 	vmov.f32	s1, s14
 800ead2:	eeb0 1a67 	vmov.f32	s2, s15
 800ead6:	f7ff f82c 	bl	800db32 <vadd>
 800eada:	eef0 6a40 	vmov.f32	s13, s0
 800eade:	eeb0 7a60 	vmov.f32	s14, s1
 800eae2:	eef0 7a41 	vmov.f32	s15, s2
 800eae6:	edc7 6a17 	vstr	s13, [r7, #92]	; 0x5c
 800eaea:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 800eaee:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	// float thrust_mag = mass * vmag(thrust);

	struct vec z_body = vnormalize(thrust);
 800eaf2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800eaf6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800eafa:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800eafe:	eeb0 0a66 	vmov.f32	s0, s13
 800eb02:	eef0 0a47 	vmov.f32	s1, s14
 800eb06:	eeb0 1a67 	vmov.f32	s2, s15
 800eb0a:	f7ff f964 	bl	800ddd6 <vnormalize>
 800eb0e:	eef0 6a40 	vmov.f32	s13, s0
 800eb12:	eeb0 7a60 	vmov.f32	s14, s1
 800eb16:	eef0 7a41 	vmov.f32	s15, s2
 800eb1a:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 800eb1e:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 800eb22:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	struct vec x_world = mkvec(cosf(out.yaw), sinf(out.yaw), 0);
 800eb26:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800eb2a:	eeb0 0a67 	vmov.f32	s0, s15
 800eb2e:	f016 feb3 	bl	8025898 <cosf>
 800eb32:	eeb0 8a40 	vmov.f32	s16, s0
 800eb36:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800eb3a:	eeb0 0a67 	vmov.f32	s0, s15
 800eb3e:	f016 fef7 	bl	8025930 <sinf>
 800eb42:	eef0 7a40 	vmov.f32	s15, s0
 800eb46:	ed9f 1a96 	vldr	s2, [pc, #600]	; 800eda0 <poly4d_eval+0x414>
 800eb4a:	eef0 0a67 	vmov.f32	s1, s15
 800eb4e:	eeb0 0a48 	vmov.f32	s0, s16
 800eb52:	f7fe fea1 	bl	800d898 <mkvec>
 800eb56:	eef0 6a40 	vmov.f32	s13, s0
 800eb5a:	eeb0 7a60 	vmov.f32	s14, s1
 800eb5e:	eef0 7a41 	vmov.f32	s15, s2
 800eb62:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 800eb66:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800eb6a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	struct vec y_body = vnormalize(vcross(z_body, x_world));
 800eb6e:	ed97 5a11 	vldr	s10, [r7, #68]	; 0x44
 800eb72:	edd7 5a12 	vldr	s11, [r7, #72]	; 0x48
 800eb76:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 800eb7a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800eb7e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800eb82:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800eb86:	eef0 1a45 	vmov.f32	s3, s10
 800eb8a:	eeb0 2a65 	vmov.f32	s4, s11
 800eb8e:	eef0 2a46 	vmov.f32	s5, s12
 800eb92:	eeb0 0a66 	vmov.f32	s0, s13
 800eb96:	eef0 0a47 	vmov.f32	s1, s14
 800eb9a:	eeb0 1a67 	vmov.f32	s2, s15
 800eb9e:	f7ff f967 	bl	800de70 <vcross>
 800eba2:	eef0 6a40 	vmov.f32	s13, s0
 800eba6:	eeb0 7a60 	vmov.f32	s14, s1
 800ebaa:	eef0 7a41 	vmov.f32	s15, s2
 800ebae:	edc7 6a2d 	vstr	s13, [r7, #180]	; 0xb4
 800ebb2:	ed87 7a2e 	vstr	s14, [r7, #184]	; 0xb8
 800ebb6:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
 800ebba:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 800ebbe:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800ebc2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800ebc6:	eeb0 0a66 	vmov.f32	s0, s13
 800ebca:	eef0 0a47 	vmov.f32	s1, s14
 800ebce:	eeb0 1a67 	vmov.f32	s2, s15
 800ebd2:	f7ff f900 	bl	800ddd6 <vnormalize>
 800ebd6:	eef0 6a40 	vmov.f32	s13, s0
 800ebda:	eeb0 7a60 	vmov.f32	s14, s1
 800ebde:	eef0 7a41 	vmov.f32	s15, s2
 800ebe2:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 800ebe6:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 800ebea:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	struct vec x_body = vcross(y_body, z_body);
 800ebee:	ed97 5a14 	vldr	s10, [r7, #80]	; 0x50
 800ebf2:	edd7 5a15 	vldr	s11, [r7, #84]	; 0x54
 800ebf6:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800ebfa:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ebfe:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800ec02:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800ec06:	eef0 1a45 	vmov.f32	s3, s10
 800ec0a:	eeb0 2a65 	vmov.f32	s4, s11
 800ec0e:	eef0 2a46 	vmov.f32	s5, s12
 800ec12:	eeb0 0a66 	vmov.f32	s0, s13
 800ec16:	eef0 0a47 	vmov.f32	s1, s14
 800ec1a:	eeb0 1a67 	vmov.f32	s2, s15
 800ec1e:	f7ff f927 	bl	800de70 <vcross>
 800ec22:	eef0 6a40 	vmov.f32	s13, s0
 800ec26:	eeb0 7a60 	vmov.f32	s14, s1
 800ec2a:	eef0 7a41 	vmov.f32	s15, s2
 800ec2e:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 800ec32:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800ec36:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	struct vec jerk_orth_zbody = vorthunit(jerk, z_body);
 800ec3a:	ed97 5a14 	vldr	s10, [r7, #80]	; 0x50
 800ec3e:	edd7 5a15 	vldr	s11, [r7, #84]	; 0x54
 800ec42:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800ec46:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800ec4a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800ec4e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800ec52:	eef0 1a45 	vmov.f32	s3, s10
 800ec56:	eeb0 2a65 	vmov.f32	s4, s11
 800ec5a:	eef0 2a46 	vmov.f32	s5, s12
 800ec5e:	eeb0 0a66 	vmov.f32	s0, s13
 800ec62:	eef0 0a47 	vmov.f32	s1, s14
 800ec66:	eeb0 1a67 	vmov.f32	s2, s15
 800ec6a:	f7ff f9d1 	bl	800e010 <vorthunit>
 800ec6e:	eef0 6a40 	vmov.f32	s13, s0
 800ec72:	eeb0 7a60 	vmov.f32	s14, s1
 800ec76:	eef0 7a41 	vmov.f32	s15, s2
 800ec7a:	edc7 6a08 	vstr	s13, [r7, #32]
 800ec7e:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800ec82:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	struct vec h_w = vscl(1.0f / vmag(thrust), jerk_orth_zbody);
 800ec86:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800ec8a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800ec8e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800ec92:	eeb0 0a66 	vmov.f32	s0, s13
 800ec96:	eef0 0a47 	vmov.f32	s1, s14
 800ec9a:	eeb0 1a67 	vmov.f32	s2, s15
 800ec9e:	f7ff f870 	bl	800dd82 <vmag>
 800eca2:	eeb0 7a40 	vmov.f32	s14, s0
 800eca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ecaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ecae:	ed97 6a08 	vldr	s12, [r7, #32]
 800ecb2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ecb6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ecba:	eef0 0a46 	vmov.f32	s1, s12
 800ecbe:	eeb0 1a66 	vmov.f32	s2, s13
 800ecc2:	eef0 1a47 	vmov.f32	s3, s14
 800ecc6:	eeb0 0a67 	vmov.f32	s0, s15
 800ecca:	f7fe fe63 	bl	800d994 <vscl>
 800ecce:	eef0 6a40 	vmov.f32	s13, s0
 800ecd2:	eeb0 7a60 	vmov.f32	s14, s1
 800ecd6:	eef0 7a41 	vmov.f32	s15, s2
 800ecda:	edc7 6a05 	vstr	s13, [r7, #20]
 800ecde:	ed87 7a06 	vstr	s14, [r7, #24]
 800ece2:	edc7 7a07 	vstr	s15, [r7, #28]

	out.omega.x = -vdot(h_w, y_body);
 800ece6:	ed97 5a0e 	vldr	s10, [r7, #56]	; 0x38
 800ecea:	edd7 5a0f 	vldr	s11, [r7, #60]	; 0x3c
 800ecee:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 800ecf2:	edd7 6a05 	vldr	s13, [r7, #20]
 800ecf6:	ed97 7a06 	vldr	s14, [r7, #24]
 800ecfa:	edd7 7a07 	vldr	s15, [r7, #28]
 800ecfe:	eef0 1a45 	vmov.f32	s3, s10
 800ed02:	eeb0 2a65 	vmov.f32	s4, s11
 800ed06:	eef0 2a46 	vmov.f32	s5, s12
 800ed0a:	eeb0 0a66 	vmov.f32	s0, s13
 800ed0e:	eef0 0a47 	vmov.f32	s1, s14
 800ed12:	eeb0 1a67 	vmov.f32	s2, s15
 800ed16:	f7fe ffcc 	bl	800dcb2 <vdot>
 800ed1a:	eef0 7a40 	vmov.f32	s15, s0
 800ed1e:	eef1 7a67 	vneg.f32	s15, s15
 800ed22:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	out.omega.y = vdot(h_w, x_body);
 800ed26:	ed97 5a0b 	vldr	s10, [r7, #44]	; 0x2c
 800ed2a:	edd7 5a0c 	vldr	s11, [r7, #48]	; 0x30
 800ed2e:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 800ed32:	edd7 6a05 	vldr	s13, [r7, #20]
 800ed36:	ed97 7a06 	vldr	s14, [r7, #24]
 800ed3a:	edd7 7a07 	vldr	s15, [r7, #28]
 800ed3e:	eef0 1a45 	vmov.f32	s3, s10
 800ed42:	eeb0 2a65 	vmov.f32	s4, s11
 800ed46:	eef0 2a46 	vmov.f32	s5, s12
 800ed4a:	eeb0 0a66 	vmov.f32	s0, s13
 800ed4e:	eef0 0a47 	vmov.f32	s1, s14
 800ed52:	eeb0 1a67 	vmov.f32	s2, s15
 800ed56:	f7fe ffac 	bl	800dcb2 <vdot>
 800ed5a:	eef0 7a40 	vmov.f32	s15, s0
 800ed5e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	out.omega.z = z_body.z * dyaw;
 800ed62:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800ed66:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800ed6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed6e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0

	return out;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	461d      	mov	r5, r3
 800ed76:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800ed7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed86:	6823      	ldr	r3, [r4, #0]
 800ed88:	602b      	str	r3, [r5, #0]
}
 800ed8a:	68f8      	ldr	r0, [r7, #12]
 800ed8c:	37c8      	adds	r7, #200	; 0xc8
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	ecbd 8b02 	vpop	{d8}
 800ed94:	bdb0      	pop	{r4, r5, r7, pc}
 800ed96:	bf00      	nop
 800ed98:	2000a984 	.word	0x2000a984
 800ed9c:	411cf5c3 	.word	0x411cf5c3
 800eda0:	00000000 	.word	0x00000000

0800eda4 <piecewise_eval>:
//

// piecewise eval
struct traj_eval piecewise_eval(
  struct piecewise_traj const *traj, float t)
{
 800eda4:	b5b0      	push	{r4, r5, r7, lr}
 800eda6:	b094      	sub	sp, #80	; 0x50
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	ed87 0a01 	vstr	s0, [r7, #4]
	int cursor = 0;
 800edb2:	2300      	movs	r3, #0
 800edb4:	64fb      	str	r3, [r7, #76]	; 0x4c
	t = t - traj->t_begin;
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	edd3 7a00 	vldr	s15, [r3]
 800edbc:	ed97 7a01 	vldr	s14, [r7, #4]
 800edc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800edc4:	edc7 7a01 	vstr	s15, [r7, #4]
	while (cursor < traj->n_pieces) {
 800edc8:	e054      	b.n	800ee74 <piecewise_eval+0xd0>
		struct poly4d const *piece = &(traj->pieces[cursor]);
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	6999      	ldr	r1, [r3, #24]
 800edce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800edd0:	4613      	mov	r3, r2
 800edd2:	015b      	lsls	r3, r3, #5
 800edd4:	4413      	add	r3, r2
 800edd6:	009b      	lsls	r3, r3, #2
 800edd8:	440b      	add	r3, r1
 800edda:	647b      	str	r3, [r7, #68]	; 0x44
		if (t <= piece->duration * traj->timescale) {
 800eddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edde:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	edd3 7a01 	vldr	s15, [r3, #4]
 800ede8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edec:	ed97 7a01 	vldr	s14, [r7, #4]
 800edf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800edf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edf8:	d82b      	bhi.n	800ee52 <piecewise_eval+0xae>
			poly4d_tmp = *piece;
 800edfa:	4a5d      	ldr	r2, [pc, #372]	; (800ef70 <piecewise_eval+0x1cc>)
 800edfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edfe:	4610      	mov	r0, r2
 800ee00:	4619      	mov	r1, r3
 800ee02:	2384      	movs	r3, #132	; 0x84
 800ee04:	461a      	mov	r2, r3
 800ee06:	f014 fe88 	bl	8023b1a <memcpy>
			poly4d_shift(&poly4d_tmp, traj->shift.x, traj->shift.y, traj->shift.z, 0);
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	edd3 7a02 	vldr	s15, [r3, #8]
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	ed93 7a03 	vldr	s14, [r3, #12]
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	edd3 6a04 	vldr	s13, [r3, #16]
 800ee1c:	eddf 1a55 	vldr	s3, [pc, #340]	; 800ef74 <piecewise_eval+0x1d0>
 800ee20:	eeb0 1a66 	vmov.f32	s2, s13
 800ee24:	eef0 0a47 	vmov.f32	s1, s14
 800ee28:	eeb0 0a67 	vmov.f32	s0, s15
 800ee2c:	4850      	ldr	r0, [pc, #320]	; (800ef70 <piecewise_eval+0x1cc>)
 800ee2e:	f7ff fcaf 	bl	800e790 <poly4d_shift>
			poly4d_stretchtime(&poly4d_tmp, traj->timescale);
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	edd3 7a01 	vldr	s15, [r3, #4]
 800ee38:	eeb0 0a67 	vmov.f32	s0, s15
 800ee3c:	484c      	ldr	r0, [pc, #304]	; (800ef70 <piecewise_eval+0x1cc>)
 800ee3e:	f7ff fce1 	bl	800e804 <poly4d_stretchtime>
			return poly4d_eval(&poly4d_tmp, t);
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	ed97 0a01 	vldr	s0, [r7, #4]
 800ee48:	4949      	ldr	r1, [pc, #292]	; (800ef70 <piecewise_eval+0x1cc>)
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f7ff fd9e 	bl	800e98c <poly4d_eval>
 800ee50:	e08a      	b.n	800ef68 <piecewise_eval+0x1c4>
		}
		t -= piece->duration * traj->timescale;
 800ee52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee54:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	edd3 7a01 	vldr	s15, [r3, #4]
 800ee5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee62:	ed97 7a01 	vldr	s14, [r7, #4]
 800ee66:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee6a:	edc7 7a01 	vstr	s15, [r7, #4]
		++cursor;
 800ee6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee70:	3301      	adds	r3, #1
 800ee72:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (cursor < traj->n_pieces) {
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	7d1b      	ldrb	r3, [r3, #20]
 800ee78:	461a      	mov	r2, r3
 800ee7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	dba4      	blt.n	800edca <piecewise_eval+0x26>
	}
	// if we get here, the trajectory has ended
	struct poly4d const *end_piece = &(traj->pieces[traj->n_pieces - 1]);
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	699a      	ldr	r2, [r3, #24]
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	7d1b      	ldrb	r3, [r3, #20]
 800ee88:	4619      	mov	r1, r3
 800ee8a:	460b      	mov	r3, r1
 800ee8c:	015b      	lsls	r3, r3, #5
 800ee8e:	440b      	add	r3, r1
 800ee90:	009b      	lsls	r3, r3, #2
 800ee92:	3b84      	subs	r3, #132	; 0x84
 800ee94:	4413      	add	r3, r2
 800ee96:	64bb      	str	r3, [r7, #72]	; 0x48
	struct traj_eval ev = poly4d_eval(end_piece, end_piece->duration);
 800ee98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee9a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800ee9e:	f107 0310 	add.w	r3, r7, #16
 800eea2:	eeb0 0a67 	vmov.f32	s0, s15
 800eea6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7ff fd6f 	bl	800e98c <poly4d_eval>
	ev.pos = vadd(ev.pos, traj->shift);
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	ed93 5a02 	vldr	s10, [r3, #8]
 800eeb4:	edd3 5a03 	vldr	s11, [r3, #12]
 800eeb8:	ed93 6a04 	vldr	s12, [r3, #16]
 800eebc:	edd7 6a04 	vldr	s13, [r7, #16]
 800eec0:	ed97 7a05 	vldr	s14, [r7, #20]
 800eec4:	edd7 7a06 	vldr	s15, [r7, #24]
 800eec8:	eef0 1a45 	vmov.f32	s3, s10
 800eecc:	eeb0 2a65 	vmov.f32	s4, s11
 800eed0:	eef0 2a46 	vmov.f32	s5, s12
 800eed4:	eeb0 0a66 	vmov.f32	s0, s13
 800eed8:	eef0 0a47 	vmov.f32	s1, s14
 800eedc:	eeb0 1a67 	vmov.f32	s2, s15
 800eee0:	f7fe fe27 	bl	800db32 <vadd>
 800eee4:	eef0 6a40 	vmov.f32	s13, s0
 800eee8:	eeb0 7a60 	vmov.f32	s14, s1
 800eeec:	eef0 7a41 	vmov.f32	s15, s2
 800eef0:	edc7 6a04 	vstr	s13, [r7, #16]
 800eef4:	ed87 7a05 	vstr	s14, [r7, #20]
 800eef8:	edc7 7a06 	vstr	s15, [r7, #24]
	ev.vel = vzero();
 800eefc:	f7fe fd22 	bl	800d944 <vzero>
 800ef00:	eef0 6a40 	vmov.f32	s13, s0
 800ef04:	eeb0 7a60 	vmov.f32	s14, s1
 800ef08:	eef0 7a41 	vmov.f32	s15, s2
 800ef0c:	edc7 6a07 	vstr	s13, [r7, #28]
 800ef10:	ed87 7a08 	vstr	s14, [r7, #32]
 800ef14:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	ev.acc = vzero();
 800ef18:	f7fe fd14 	bl	800d944 <vzero>
 800ef1c:	eef0 6a40 	vmov.f32	s13, s0
 800ef20:	eeb0 7a60 	vmov.f32	s14, s1
 800ef24:	eef0 7a41 	vmov.f32	s15, s2
 800ef28:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800ef2c:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800ef30:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	ev.omega = vzero();
 800ef34:	f7fe fd06 	bl	800d944 <vzero>
 800ef38:	eef0 6a40 	vmov.f32	s13, s0
 800ef3c:	eeb0 7a60 	vmov.f32	s14, s1
 800ef40:	eef0 7a41 	vmov.f32	s15, s2
 800ef44:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800ef48:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800ef4c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	return ev;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	461d      	mov	r5, r3
 800ef54:	f107 0410 	add.w	r4, r7, #16
 800ef58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ef5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ef60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ef64:	6823      	ldr	r3, [r4, #0]
 800ef66:	602b      	str	r3, [r5, #0]
}
 800ef68:	68f8      	ldr	r0, [r7, #12]
 800ef6a:	3750      	adds	r7, #80	; 0x50
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bdb0      	pop	{r4, r5, r7, pc}
 800ef70:	2000a984 	.word	0x2000a984
 800ef74:	00000000 	.word	0x00000000

0800ef78 <piecewise_eval_reversed>:

struct traj_eval piecewise_eval_reversed(
  struct piecewise_traj const *traj, float t)
{
 800ef78:	b5b0      	push	{r4, r5, r7, lr}
 800ef7a:	b096      	sub	sp, #88	; 0x58
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	ed87 0a01 	vstr	s0, [r7, #4]
	int cursor = traj->n_pieces - 1;
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	7d1b      	ldrb	r3, [r3, #20]
 800ef8a:	3b01      	subs	r3, #1
 800ef8c:	657b      	str	r3, [r7, #84]	; 0x54
	t = t - traj->t_begin;
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	edd3 7a00 	vldr	s15, [r3]
 800ef94:	ed97 7a01 	vldr	s14, [r7, #4]
 800ef98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef9c:	edc7 7a01 	vstr	s15, [r7, #4]
	while (cursor >= 0) {
 800efa0:	e072      	b.n	800f088 <piecewise_eval_reversed+0x110>
		struct poly4d const *piece = &(traj->pieces[cursor]);
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	6999      	ldr	r1, [r3, #24]
 800efa6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800efa8:	4613      	mov	r3, r2
 800efaa:	015b      	lsls	r3, r3, #5
 800efac:	4413      	add	r3, r2
 800efae:	009b      	lsls	r3, r3, #2
 800efb0:	440b      	add	r3, r1
 800efb2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (t <= piece->duration * traj->timescale) {
 800efb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efb6:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	edd3 7a01 	vldr	s15, [r3, #4]
 800efc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efc4:	ed97 7a01 	vldr	s14, [r7, #4]
 800efc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800efcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efd0:	d849      	bhi.n	800f066 <piecewise_eval_reversed+0xee>
			poly4d_tmp = *piece;
 800efd2:	4a65      	ldr	r2, [pc, #404]	; (800f168 <piecewise_eval_reversed+0x1f0>)
 800efd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efd6:	4610      	mov	r0, r2
 800efd8:	4619      	mov	r1, r3
 800efda:	2384      	movs	r3, #132	; 0x84
 800efdc:	461a      	mov	r2, r3
 800efde:	f014 fd9c 	bl	8023b1a <memcpy>
			poly4d_shift(&poly4d_tmp, traj->shift.x, traj->shift.y, traj->shift.z, 0);
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	edd3 7a02 	vldr	s15, [r3, #8]
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	ed93 7a03 	vldr	s14, [r3, #12]
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	edd3 6a04 	vldr	s13, [r3, #16]
 800eff4:	eddf 1a5d 	vldr	s3, [pc, #372]	; 800f16c <piecewise_eval_reversed+0x1f4>
 800eff8:	eeb0 1a66 	vmov.f32	s2, s13
 800effc:	eef0 0a47 	vmov.f32	s1, s14
 800f000:	eeb0 0a67 	vmov.f32	s0, s15
 800f004:	4858      	ldr	r0, [pc, #352]	; (800f168 <piecewise_eval_reversed+0x1f0>)
 800f006:	f7ff fbc3 	bl	800e790 <poly4d_shift>
			poly4d_stretchtime(&poly4d_tmp, traj->timescale);
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	edd3 7a01 	vldr	s15, [r3, #4]
 800f010:	eeb0 0a67 	vmov.f32	s0, s15
 800f014:	4854      	ldr	r0, [pc, #336]	; (800f168 <piecewise_eval_reversed+0x1f0>)
 800f016:	f7ff fbf5 	bl	800e804 <poly4d_stretchtime>
			for (int i = 0; i < 4; ++i) {
 800f01a:	2300      	movs	r3, #0
 800f01c:	653b      	str	r3, [r7, #80]	; 0x50
 800f01e:	e009      	b.n	800f034 <piecewise_eval_reversed+0xbc>
				polyreflect(poly4d_tmp.p[i]);
 800f020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f022:	015b      	lsls	r3, r3, #5
 800f024:	4a50      	ldr	r2, [pc, #320]	; (800f168 <piecewise_eval_reversed+0x1f0>)
 800f026:	4413      	add	r3, r2
 800f028:	4618      	mov	r0, r3
 800f02a:	f7ff f97b 	bl	800e324 <polyreflect>
			for (int i = 0; i < 4; ++i) {
 800f02e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f030:	3301      	adds	r3, #1
 800f032:	653b      	str	r3, [r7, #80]	; 0x50
 800f034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f036:	2b03      	cmp	r3, #3
 800f038:	ddf2      	ble.n	800f020 <piecewise_eval_reversed+0xa8>
			}
			t = t - piece->duration * traj->timescale;
 800f03a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f03c:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	edd3 7a01 	vldr	s15, [r3, #4]
 800f046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f04a:	ed97 7a01 	vldr	s14, [r7, #4]
 800f04e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f052:	edc7 7a01 	vstr	s15, [r7, #4]
			return poly4d_eval(&poly4d_tmp, t);
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	ed97 0a01 	vldr	s0, [r7, #4]
 800f05c:	4942      	ldr	r1, [pc, #264]	; (800f168 <piecewise_eval_reversed+0x1f0>)
 800f05e:	4618      	mov	r0, r3
 800f060:	f7ff fc94 	bl	800e98c <poly4d_eval>
 800f064:	e07b      	b.n	800f15e <piecewise_eval_reversed+0x1e6>
		}
		t -= piece->duration * traj->timescale;
 800f066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f068:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	edd3 7a01 	vldr	s15, [r3, #4]
 800f072:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f076:	ed97 7a01 	vldr	s14, [r7, #4]
 800f07a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f07e:	edc7 7a01 	vstr	s15, [r7, #4]
		--cursor;
 800f082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f084:	3b01      	subs	r3, #1
 800f086:	657b      	str	r3, [r7, #84]	; 0x54
	while (cursor >= 0) {
 800f088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	da89      	bge.n	800efa2 <piecewise_eval_reversed+0x2a>
	}
	// if we get here, the trajectory has ended
	struct poly4d const *end_piece = &(traj->pieces[0]);
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	699b      	ldr	r3, [r3, #24]
 800f092:	64fb      	str	r3, [r7, #76]	; 0x4c
	struct traj_eval ev = poly4d_eval(end_piece, 0.0f);
 800f094:	f107 0314 	add.w	r3, r7, #20
 800f098:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800f16c <piecewise_eval_reversed+0x1f4>
 800f09c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7ff fc74 	bl	800e98c <poly4d_eval>
	ev.pos = vadd(ev.pos, traj->shift);
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	ed93 5a02 	vldr	s10, [r3, #8]
 800f0aa:	edd3 5a03 	vldr	s11, [r3, #12]
 800f0ae:	ed93 6a04 	vldr	s12, [r3, #16]
 800f0b2:	edd7 6a05 	vldr	s13, [r7, #20]
 800f0b6:	ed97 7a06 	vldr	s14, [r7, #24]
 800f0ba:	edd7 7a07 	vldr	s15, [r7, #28]
 800f0be:	eef0 1a45 	vmov.f32	s3, s10
 800f0c2:	eeb0 2a65 	vmov.f32	s4, s11
 800f0c6:	eef0 2a46 	vmov.f32	s5, s12
 800f0ca:	eeb0 0a66 	vmov.f32	s0, s13
 800f0ce:	eef0 0a47 	vmov.f32	s1, s14
 800f0d2:	eeb0 1a67 	vmov.f32	s2, s15
 800f0d6:	f7fe fd2c 	bl	800db32 <vadd>
 800f0da:	eef0 6a40 	vmov.f32	s13, s0
 800f0de:	eeb0 7a60 	vmov.f32	s14, s1
 800f0e2:	eef0 7a41 	vmov.f32	s15, s2
 800f0e6:	edc7 6a05 	vstr	s13, [r7, #20]
 800f0ea:	ed87 7a06 	vstr	s14, [r7, #24]
 800f0ee:	edc7 7a07 	vstr	s15, [r7, #28]
	ev.vel = vzero();
 800f0f2:	f7fe fc27 	bl	800d944 <vzero>
 800f0f6:	eef0 6a40 	vmov.f32	s13, s0
 800f0fa:	eeb0 7a60 	vmov.f32	s14, s1
 800f0fe:	eef0 7a41 	vmov.f32	s15, s2
 800f102:	edc7 6a08 	vstr	s13, [r7, #32]
 800f106:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800f10a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	ev.acc = vzero();
 800f10e:	f7fe fc19 	bl	800d944 <vzero>
 800f112:	eef0 6a40 	vmov.f32	s13, s0
 800f116:	eeb0 7a60 	vmov.f32	s14, s1
 800f11a:	eef0 7a41 	vmov.f32	s15, s2
 800f11e:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 800f122:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800f126:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	ev.omega = vzero();
 800f12a:	f7fe fc0b 	bl	800d944 <vzero>
 800f12e:	eef0 6a40 	vmov.f32	s13, s0
 800f132:	eeb0 7a60 	vmov.f32	s14, s1
 800f136:	eef0 7a41 	vmov.f32	s15, s2
 800f13a:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 800f13e:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 800f142:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	return ev;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	461d      	mov	r5, r3
 800f14a:	f107 0414 	add.w	r4, r7, #20
 800f14e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f15a:	6823      	ldr	r3, [r4, #0]
 800f15c:	602b      	str	r3, [r5, #0]
}
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	3758      	adds	r7, #88	; 0x58
 800f162:	46bd      	mov	sp, r7
 800f164:	bdb0      	pop	{r4, r5, r7, pc}
 800f166:	bf00      	nop
 800f168:	2000a984 	.word	0x2000a984
 800f16c:	00000000 	.word	0x00000000

0800f170 <piecewise_plan_7th_order_no_jerk>:

// y, dy == yaw, derivative of yaw
void piecewise_plan_7th_order_no_jerk(struct piecewise_traj *pp, float duration,
	struct vec p0, float y0, struct vec v0, float dy0, struct vec a0,
	struct vec p1, float y1, struct vec v1, float dy1, struct vec a1)
{
 800f170:	b590      	push	{r4, r7, lr}
 800f172:	b095      	sub	sp, #84	; 0x54
 800f174:	af00      	add	r7, sp, #0
 800f176:	6478      	str	r0, [r7, #68]	; 0x44
 800f178:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
 800f17c:	ed87 2a0c 	vstr	s4, [r7, #48]	; 0x30
 800f180:	ed87 4a08 	vstr	s8, [r7, #32]
 800f184:	edc7 7a01 	vstr	s15, [r7, #4]
 800f188:	edc7 0a0d 	vstr	s1, [r7, #52]	; 0x34
 800f18c:	ed87 1a0e 	vstr	s2, [r7, #56]	; 0x38
 800f190:	edc7 1a0f 	vstr	s3, [r7, #60]	; 0x3c
 800f194:	edc7 2a09 	vstr	s5, [r7, #36]	; 0x24
 800f198:	ed87 3a0a 	vstr	s6, [r7, #40]	; 0x28
 800f19c:	edc7 3a0b 	vstr	s7, [r7, #44]	; 0x2c
 800f1a0:	edc7 4a05 	vstr	s9, [r7, #20]
 800f1a4:	ed87 5a06 	vstr	s10, [r7, #24]
 800f1a8:	edc7 5a07 	vstr	s11, [r7, #28]
 800f1ac:	ed87 6a02 	vstr	s12, [r7, #8]
 800f1b0:	edc7 6a03 	vstr	s13, [r7, #12]
 800f1b4:	ed87 7a04 	vstr	s14, [r7, #16]
	struct poly4d *p = &pp->pieces[0];
 800f1b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1ba:	699b      	ldr	r3, [r3, #24]
 800f1bc:	64fb      	str	r3, [r7, #76]	; 0x4c
	p->duration = duration;
 800f1be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f1c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	pp->timescale = 1.0;
 800f1c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f1cc:	605a      	str	r2, [r3, #4]
	pp->shift = vzero();
 800f1ce:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800f1d0:	f7fe fbb8 	bl	800d944 <vzero>
 800f1d4:	eef0 6a40 	vmov.f32	s13, s0
 800f1d8:	eeb0 7a60 	vmov.f32	s14, s1
 800f1dc:	eef0 7a41 	vmov.f32	s15, s2
 800f1e0:	edc4 6a02 	vstr	s13, [r4, #8]
 800f1e4:	ed84 7a03 	vstr	s14, [r4, #12]
 800f1e8:	edc4 7a04 	vstr	s15, [r4, #16]
	pp->n_pieces = 1;
 800f1ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	751a      	strb	r2, [r3, #20]
	poly7_nojerk(p->p[0], duration, p0.x, v0.x, a0.x, p1.x, v1.x, a1.x);
 800f1f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f1f8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800f1fc:	edd7 6a05 	vldr	s13, [r7, #20]
 800f200:	ed97 6a02 	vldr	s12, [r7, #8]
 800f204:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800f208:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 800f20c:	eeb0 3a45 	vmov.f32	s6, s10
 800f210:	eef0 2a65 	vmov.f32	s5, s11
 800f214:	eeb0 2a46 	vmov.f32	s4, s12
 800f218:	eef0 1a66 	vmov.f32	s3, s13
 800f21c:	eeb0 1a47 	vmov.f32	s2, s14
 800f220:	eef0 0a67 	vmov.f32	s1, s15
 800f224:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 800f228:	4618      	mov	r0, r3
 800f22a:	f7ff f8f7 	bl	800e41c <poly7_nojerk>
	poly7_nojerk(p->p[1], duration, p0.y, v0.y, a0.y, p1.y, v1.y, a1.y);
 800f22e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f230:	3320      	adds	r3, #32
 800f232:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f236:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f23a:	edd7 6a06 	vldr	s13, [r7, #24]
 800f23e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f242:	edd7 5a19 	vldr	s11, [r7, #100]	; 0x64
 800f246:	ed97 5a1d 	vldr	s10, [r7, #116]	; 0x74
 800f24a:	eeb0 3a45 	vmov.f32	s6, s10
 800f24e:	eef0 2a65 	vmov.f32	s5, s11
 800f252:	eeb0 2a46 	vmov.f32	s4, s12
 800f256:	eef0 1a66 	vmov.f32	s3, s13
 800f25a:	eeb0 1a47 	vmov.f32	s2, s14
 800f25e:	eef0 0a67 	vmov.f32	s1, s15
 800f262:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 800f266:	4618      	mov	r0, r3
 800f268:	f7ff f8d8 	bl	800e41c <poly7_nojerk>
	poly7_nojerk(p->p[2], duration, p0.z, v0.z, a0.z, p1.z, v1.z, a1.z);
 800f26c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f26e:	3340      	adds	r3, #64	; 0x40
 800f270:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800f274:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f278:	edd7 6a07 	vldr	s13, [r7, #28]
 800f27c:	ed97 6a04 	vldr	s12, [r7, #16]
 800f280:	edd7 5a1a 	vldr	s11, [r7, #104]	; 0x68
 800f284:	ed97 5a1e 	vldr	s10, [r7, #120]	; 0x78
 800f288:	eeb0 3a45 	vmov.f32	s6, s10
 800f28c:	eef0 2a65 	vmov.f32	s5, s11
 800f290:	eeb0 2a46 	vmov.f32	s4, s12
 800f294:	eef0 1a66 	vmov.f32	s3, s13
 800f298:	eeb0 1a47 	vmov.f32	s2, s14
 800f29c:	eef0 0a67 	vmov.f32	s1, s15
 800f2a0:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7ff f8b9 	bl	800e41c <poly7_nojerk>
	poly7_nojerk(p->p[3], duration, y0, dy0, 0, y1, dy1, 0);
 800f2aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2ac:	3360      	adds	r3, #96	; 0x60
 800f2ae:	ed9f 3a0a 	vldr	s6, [pc, #40]	; 800f2d8 <piecewise_plan_7th_order_no_jerk+0x168>
 800f2b2:	edd7 2a1b 	vldr	s5, [r7, #108]	; 0x6c
 800f2b6:	ed97 2a01 	vldr	s4, [r7, #4]
 800f2ba:	eddf 1a07 	vldr	s3, [pc, #28]	; 800f2d8 <piecewise_plan_7th_order_no_jerk+0x168>
 800f2be:	ed97 1a08 	vldr	s2, [r7, #32]
 800f2c2:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 800f2c6:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7ff f8a6 	bl	800e41c <poly7_nojerk>
}
 800f2d0:	bf00      	nop
 800f2d2:	3754      	adds	r7, #84	; 0x54
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd90      	pop	{r4, r7, pc}
 800f2d8:	00000000 	.word	0x00000000

0800f2dc <mkvec>:
static inline struct vec mkvec(float x, float y, float z) {
 800f2dc:	b480      	push	{r7}
 800f2de:	b08f      	sub	sp, #60	; 0x3c
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	ed87 0a07 	vstr	s0, [r7, #28]
 800f2e6:	edc7 0a06 	vstr	s1, [r7, #24]
 800f2ea:	ed87 1a05 	vstr	s2, [r7, #20]
	v.x = x; v.y = y; v.z = z;
 800f2ee:	69fb      	ldr	r3, [r7, #28]
 800f2f0:	623b      	str	r3, [r7, #32]
 800f2f2:	69bb      	ldr	r3, [r7, #24]
 800f2f4:	627b      	str	r3, [r7, #36]	; 0x24
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	62bb      	str	r3, [r7, #40]	; 0x28
	return v;
 800f2fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f2fe:	f107 0220 	add.w	r2, r7, #32
 800f302:	ca07      	ldmia	r2, {r0, r1, r2}
 800f304:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f30a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f30e:	ee06 1a90 	vmov	s13, r1
 800f312:	ee07 2a10 	vmov	s14, r2
 800f316:	ee07 3a90 	vmov	s15, r3
}
 800f31a:	eeb0 0a66 	vmov.f32	s0, s13
 800f31e:	eef0 0a47 	vmov.f32	s1, s14
 800f322:	eeb0 1a67 	vmov.f32	s2, s15
 800f326:	373c      	adds	r7, #60	; 0x3c
 800f328:	46bd      	mov	sp, r7
 800f32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32e:	4770      	bx	lr

0800f330 <vrepeat>:
static inline struct vec vrepeat(float x) {
 800f330:	b580      	push	{r7, lr}
 800f332:	b08a      	sub	sp, #40	; 0x28
 800f334:	af00      	add	r7, sp, #0
 800f336:	ed87 0a05 	vstr	s0, [r7, #20]
	return mkvec(x, x, x);
 800f33a:	ed97 1a05 	vldr	s2, [r7, #20]
 800f33e:	edd7 0a05 	vldr	s1, [r7, #20]
 800f342:	ed97 0a05 	vldr	s0, [r7, #20]
 800f346:	f7ff ffc9 	bl	800f2dc <mkvec>
 800f34a:	eef0 6a40 	vmov.f32	s13, s0
 800f34e:	eeb0 7a60 	vmov.f32	s14, s1
 800f352:	eef0 7a41 	vmov.f32	s15, s2
 800f356:	edc7 6a07 	vstr	s13, [r7, #28]
 800f35a:	ed87 7a08 	vstr	s14, [r7, #32]
 800f35e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800f362:	69f9      	ldr	r1, [r7, #28]
 800f364:	6a3a      	ldr	r2, [r7, #32]
 800f366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f368:	ee06 1a90 	vmov	s13, r1
 800f36c:	ee07 2a10 	vmov	s14, r2
 800f370:	ee07 3a90 	vmov	s15, r3
}
 800f374:	eeb0 0a66 	vmov.f32	s0, s13
 800f378:	eef0 0a47 	vmov.f32	s1, s14
 800f37c:	eeb0 1a67 	vmov.f32	s2, s15
 800f380:	3728      	adds	r7, #40	; 0x28
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
	...

0800f388 <vzero>:
static inline struct vec vzero(void) {
 800f388:	b580      	push	{r7, lr}
 800f38a:	b088      	sub	sp, #32
 800f38c:	af00      	add	r7, sp, #0
	return vrepeat(0.0f);
 800f38e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800f3d4 <vzero+0x4c>
 800f392:	f7ff ffcd 	bl	800f330 <vrepeat>
 800f396:	eef0 6a40 	vmov.f32	s13, s0
 800f39a:	eeb0 7a60 	vmov.f32	s14, s1
 800f39e:	eef0 7a41 	vmov.f32	s15, s2
 800f3a2:	edc7 6a05 	vstr	s13, [r7, #20]
 800f3a6:	ed87 7a06 	vstr	s14, [r7, #24]
 800f3aa:	edc7 7a07 	vstr	s15, [r7, #28]
 800f3ae:	6979      	ldr	r1, [r7, #20]
 800f3b0:	69ba      	ldr	r2, [r7, #24]
 800f3b2:	69fb      	ldr	r3, [r7, #28]
 800f3b4:	ee06 1a90 	vmov	s13, r1
 800f3b8:	ee07 2a10 	vmov	s14, r2
 800f3bc:	ee07 3a90 	vmov	s15, r3
}
 800f3c0:	eeb0 0a66 	vmov.f32	s0, s13
 800f3c4:	eef0 0a47 	vmov.f32	s1, s14
 800f3c8:	eeb0 1a67 	vmov.f32	s2, s15
 800f3cc:	3720      	adds	r7, #32
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}
 800f3d2:	bf00      	nop
 800f3d4:	00000000 	.word	0x00000000

0800f3d8 <vadd>:
static inline struct vec vadd(struct vec a, struct vec b) {
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b08e      	sub	sp, #56	; 0x38
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	eeb0 5a40 	vmov.f32	s10, s0
 800f3e2:	eef0 5a60 	vmov.f32	s11, s1
 800f3e6:	eeb0 6a41 	vmov.f32	s12, s2
 800f3ea:	eef0 6a61 	vmov.f32	s13, s3
 800f3ee:	eeb0 7a42 	vmov.f32	s14, s4
 800f3f2:	eef0 7a62 	vmov.f32	s15, s5
 800f3f6:	ed87 5a07 	vstr	s10, [r7, #28]
 800f3fa:	edc7 5a08 	vstr	s11, [r7, #32]
 800f3fe:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800f402:	edc7 6a04 	vstr	s13, [r7, #16]
 800f406:	ed87 7a05 	vstr	s14, [r7, #20]
 800f40a:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(a.x + b.x, a.y + b.y, a.z + b.z);
 800f40e:	ed97 7a07 	vldr	s14, [r7, #28]
 800f412:	edd7 7a04 	vldr	s15, [r7, #16]
 800f416:	ee77 6a27 	vadd.f32	s13, s14, s15
 800f41a:	ed97 7a08 	vldr	s14, [r7, #32]
 800f41e:	edd7 7a05 	vldr	s15, [r7, #20]
 800f422:	ee37 6a27 	vadd.f32	s12, s14, s15
 800f426:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800f42a:	edd7 7a06 	vldr	s15, [r7, #24]
 800f42e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f432:	eeb0 1a67 	vmov.f32	s2, s15
 800f436:	eef0 0a46 	vmov.f32	s1, s12
 800f43a:	eeb0 0a66 	vmov.f32	s0, s13
 800f43e:	f7ff ff4d 	bl	800f2dc <mkvec>
 800f442:	eef0 6a40 	vmov.f32	s13, s0
 800f446:	eeb0 7a60 	vmov.f32	s14, s1
 800f44a:	eef0 7a41 	vmov.f32	s15, s2
 800f44e:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 800f452:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800f456:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800f45a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f45c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f460:	ee06 1a90 	vmov	s13, r1
 800f464:	ee07 2a10 	vmov	s14, r2
 800f468:	ee07 3a90 	vmov	s15, r3
}
 800f46c:	eeb0 0a66 	vmov.f32	s0, s13
 800f470:	eef0 0a47 	vmov.f32	s1, s14
 800f474:	eeb0 1a67 	vmov.f32	s2, s15
 800f478:	3738      	adds	r7, #56	; 0x38
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
	...

0800f480 <calculate_polynomial_coefficients>:
// points to _after_ the part that has been processed.
static compressed_piece_ptr calculate_polynomial_coefficients(
  float *result, compressed_piece_ptr ptr,
  enum piecewise_traj_storage_type storage_type,
  float initial_condition, float duration, float scale)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b090      	sub	sp, #64	; 0x40
 800f484:	af00      	add	r7, sp, #0
 800f486:	6178      	str	r0, [r7, #20]
 800f488:	6139      	str	r1, [r7, #16]
 800f48a:	4613      	mov	r3, r2
 800f48c:	ed87 0a02 	vstr	s0, [r7, #8]
 800f490:	edc7 0a01 	vstr	s1, [r7, #4]
 800f494:	ed87 1a00 	vstr	s2, [r7]
 800f498:	73fb      	strb	r3, [r7, #15]
  compressed_piece_coordinate value;
  float control_points[PP_SIZE];
  uint8_t i, n;

  n = control_points_by_type[storage_type] + 1;
 800f49a:	7bfb      	ldrb	r3, [r7, #15]
 800f49c:	4a1e      	ldr	r2, [pc, #120]	; (800f518 <calculate_polynomial_coefficients+0x98>)
 800f49e:	5cd3      	ldrb	r3, [r2, r3]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  control_points[0] = initial_condition;
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	61fb      	str	r3, [r7, #28]
  for (i = 1; i < n; i++) {
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f4b0:	e01d      	b.n	800f4ee <calculate_polynomial_coefficients+0x6e>
    ptr = next_coordinate(ptr, &value);
 800f4b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	6938      	ldr	r0, [r7, #16]
 800f4ba:	f000 f870 	bl	800f59e <next_coordinate>
 800f4be:	6138      	str	r0, [r7, #16]
    control_points[i] = value / scale;
 800f4c0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800f4c4:	ee07 3a90 	vmov	s15, r3
 800f4c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f4cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f4d0:	ed97 7a00 	vldr	s14, [r7]
 800f4d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f4d8:	009b      	lsls	r3, r3, #2
 800f4da:	3340      	adds	r3, #64	; 0x40
 800f4dc:	443b      	add	r3, r7
 800f4de:	3b24      	subs	r3, #36	; 0x24
 800f4e0:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < n; i++) {
 800f4e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f4ee:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f4f2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d3db      	bcc.n	800f4b2 <calculate_polynomial_coefficients+0x32>
  }

  polybezier(result, duration, control_points, n);
 800f4fa:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800f4fe:	f107 031c 	add.w	r3, r7, #28
 800f502:	4619      	mov	r1, r3
 800f504:	ed97 0a01 	vldr	s0, [r7, #4]
 800f508:	6978      	ldr	r0, [r7, #20]
 800f50a:	f7fe fe2d 	bl	800e168 <polybezier>

  return ptr;
 800f50e:	693b      	ldr	r3, [r7, #16]
}
 800f510:	4618      	mov	r0, r3
 800f512:	3740      	adds	r7, #64	; 0x40
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}
 800f518:	0802d8fc 	.word	0x0802d8fc

0800f51c <calculate_total_duration>:

// Calculates the total duration of a compressed trajectory, starting at the
// given piece
static float calculate_total_duration(compressed_piece_ptr ptr)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b086      	sub	sp, #24
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
  uint32_t duration_in_msec = 0;
 800f524:	2300      	movs	r3, #0
 800f526:	617b      	str	r3, [r7, #20]
  struct compressed_piece_parsed_header header;

  while (1) {
    ptr = parse_header_of_current_piece(&header, ptr);
 800f528:	f107 0308 	add.w	r3, r7, #8
 800f52c:	6879      	ldr	r1, [r7, #4]
 800f52e:	4618      	mov	r0, r3
 800f530:	f000 f87a 	bl	800f628 <parse_header_of_current_piece>
 800f534:	6078      	str	r0, [r7, #4]
    if (ptr) {
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d005      	beq.n	800f548 <calculate_total_duration+0x2c>
      duration_in_msec += header.duration_in_msec;
 800f53c:	893b      	ldrh	r3, [r7, #8]
 800f53e:	461a      	mov	r2, r3
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	4413      	add	r3, r2
 800f544:	617b      	str	r3, [r7, #20]
 800f546:	e7ef      	b.n	800f528 <calculate_total_duration+0xc>
    } else {
      return duration_in_msec / STORED_DURATION_SCALE;
 800f548:	6978      	ldr	r0, [r7, #20]
 800f54a:	f7f0 ffeb 	bl	8000524 <__aeabi_ui2d>
 800f54e:	f04f 0200 	mov.w	r2, #0
 800f552:	4b08      	ldr	r3, [pc, #32]	; (800f574 <calculate_total_duration+0x58>)
 800f554:	f7f1 f98a 	bl	800086c <__aeabi_ddiv>
 800f558:	4602      	mov	r2, r0
 800f55a:	460b      	mov	r3, r1
 800f55c:	4610      	mov	r0, r2
 800f55e:	4619      	mov	r1, r3
 800f560:	f7f1 fb32 	bl	8000bc8 <__aeabi_d2f>
 800f564:	4603      	mov	r3, r0
 800f566:	ee07 3a90 	vmov	s15, r3
    }
  }
}
 800f56a:	eeb0 0a67 	vmov.f32	s0, s15
 800f56e:	3718      	adds	r7, #24
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	408f4000 	.word	0x408f4000

0800f578 <end_time_of_current_piece>:

// Returns the end time of the current piece being executed
static inline float end_time_of_current_piece(const struct piecewise_traj_compressed *traj) {
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  return start_time_of_current_piece(traj) + traj->current_piece.poly4d.duration;
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 f8c3 	bl	800f70c <start_time_of_current_piece>
 800f586:	eeb0 7a40 	vmov.f32	s14, s0
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 800f590:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800f594:	eeb0 0a67 	vmov.f32	s0, s15
 800f598:	3708      	adds	r7, #8
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}

0800f59e <next_coordinate>:

// Parses the two bytes pointed to by the given pointer as a signed 16-bit
// integer, in little endian order, and returns the pointer advanced by two
// bytes
static compressed_piece_ptr next_coordinate(compressed_piece_ptr ptr, compressed_piece_coordinate* coord) {
 800f59e:	b480      	push	{r7}
 800f5a0:	b083      	sub	sp, #12
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	6078      	str	r0, [r7, #4]
 800f5a6:	6039      	str	r1, [r7, #0]
  *coord = ptr[0] + (ptr[1] << 8);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	781b      	ldrb	r3, [r3, #0]
 800f5ac:	b29a      	uxth	r2, r3
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	021b      	lsls	r3, r3, #8
 800f5b8:	b29b      	uxth	r3, r3
 800f5ba:	4413      	add	r3, r2
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	b21a      	sxth	r2, r3
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	801a      	strh	r2, [r3, #0]
  return ptr + 2;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	3302      	adds	r3, #2
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	370c      	adds	r7, #12
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d2:	4770      	bx	lr

0800f5d4 <next_duration>:

// Parses the two bytes pointed to by the given pointer as an unsigned 16-bit
// integer, in little endian order, and returns the pointer advanced by two
// bytes
static compressed_piece_ptr next_duration(compressed_piece_ptr ptr, uint16_t* coord) {
 800f5d4:	b480      	push	{r7}
 800f5d6:	b083      	sub	sp, #12
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6039      	str	r1, [r7, #0]
  *coord = ptr[0] + (ptr[1] << 8);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	b29a      	uxth	r2, r3
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	3301      	adds	r3, #1
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	b29b      	uxth	r3, r3
 800f5ec:	021b      	lsls	r3, r3, #8
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	4413      	add	r3, r2
 800f5f2:	b29a      	uxth	r2, r3
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	801a      	strh	r2, [r3, #0]
  return ptr + 2;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	3302      	adds	r3, #2
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	370c      	adds	r7, #12
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr

0800f608 <next_piece>:

// Given a pointer that points to the start of a piece inside the data section
// of a compressed trajectory, returns the pointer that points to the next
// piece or zero if this is the last piece
static compressed_piece_ptr next_piece(compressed_piece_ptr ptr)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b086      	sub	sp, #24
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
  struct compressed_piece_parsed_header header;
  return parse_header_of_current_piece(&header, ptr);
 800f610:	f107 030c 	add.w	r3, r7, #12
 800f614:	6879      	ldr	r1, [r7, #4]
 800f616:	4618      	mov	r0, r3
 800f618:	f000 f806 	bl	800f628 <parse_header_of_current_piece>
 800f61c:	4603      	mov	r3, r0
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3718      	adds	r7, #24
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
	...

0800f628 <parse_header_of_current_piece>:
// the duration of the piece as well as the storage types of the XY, Z and
// yaw coordinates. Returns a pointer that points to the next piece or 0 if
// this was the last piece.
static compressed_piece_ptr parse_header_of_current_piece(
  struct compressed_piece_parsed_header* result, compressed_piece_ptr ptr)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b084      	sub	sp, #16
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]
  uint8_t header;
  int length;

  if (!ptr) {
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d116      	bne.n	800f666 <parse_header_of_current_piece+0x3e>
    result->x_type = result->y_type = result->z_type = result->yaw_type = PPTRAJ_STORAGE_CONSTANT;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2200      	movs	r2, #0
 800f63c:	715a      	strb	r2, [r3, #5]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	795a      	ldrb	r2, [r3, #5]
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	711a      	strb	r2, [r3, #4]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	791a      	ldrb	r2, [r3, #4]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	70da      	strb	r2, [r3, #3]
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	78da      	ldrb	r2, [r3, #3]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	709a      	strb	r2, [r3, #2]
    result->body = 0;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2200      	movs	r2, #0
 800f65a:	609a      	str	r2, [r3, #8]
    result->duration_in_msec = 0;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2200      	movs	r2, #0
 800f660:	801a      	strh	r2, [r3, #0]
    return 0;
 800f662:	2300      	movs	r3, #0
 800f664:	e04c      	b.n	800f700 <parse_header_of_current_piece+0xd8>
  }

  header = *ptr;
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	73fb      	strb	r3, [r7, #15]

  result->x_type   = (enum piecewise_traj_storage_type) (header & 0x03);
 800f66c:	7bfb      	ldrb	r3, [r7, #15]
 800f66e:	f003 0303 	and.w	r3, r3, #3
 800f672:	b2da      	uxtb	r2, r3
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	709a      	strb	r2, [r3, #2]
  result->y_type   = (enum piecewise_traj_storage_type) ((header >> 2) & 0x03);
 800f678:	7bfb      	ldrb	r3, [r7, #15]
 800f67a:	089b      	lsrs	r3, r3, #2
 800f67c:	b2db      	uxtb	r3, r3
 800f67e:	f003 0303 	and.w	r3, r3, #3
 800f682:	b2da      	uxtb	r2, r3
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	70da      	strb	r2, [r3, #3]
  result->z_type   = (enum piecewise_traj_storage_type) ((header >> 4) & 0x03);
 800f688:	7bfb      	ldrb	r3, [r7, #15]
 800f68a:	091b      	lsrs	r3, r3, #4
 800f68c:	b2db      	uxtb	r3, r3
 800f68e:	f003 0303 	and.w	r3, r3, #3
 800f692:	b2da      	uxtb	r2, r3
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	711a      	strb	r2, [r3, #4]
  result->yaw_type = (enum piecewise_traj_storage_type) ((header >> 6) & 0x03);
 800f698:	7bfb      	ldrb	r3, [r7, #15]
 800f69a:	099b      	lsrs	r3, r3, #6
 800f69c:	b2da      	uxtb	r2, r3
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	715a      	strb	r2, [r3, #5]
  ptr++;
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	603b      	str	r3, [r7, #0]

  result->body = ptr = next_duration(ptr, &result->duration_in_msec);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	6838      	ldr	r0, [r7, #0]
 800f6ae:	f7ff ff91 	bl	800f5d4 <next_duration>
 800f6b2:	6038      	str	r0, [r7, #0]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	683a      	ldr	r2, [r7, #0]
 800f6b8:	609a      	str	r2, [r3, #8]

  if (result->duration_in_msec > 0) {
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	881b      	ldrh	r3, [r3, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d01d      	beq.n	800f6fe <parse_header_of_current_piece+0xd6>
    length = (
      control_points_by_type[result->x_type] +
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	789b      	ldrb	r3, [r3, #2]
 800f6c6:	461a      	mov	r2, r3
 800f6c8:	4b0f      	ldr	r3, [pc, #60]	; (800f708 <parse_header_of_current_piece+0xe0>)
 800f6ca:	5c9b      	ldrb	r3, [r3, r2]
 800f6cc:	461a      	mov	r2, r3
      control_points_by_type[result->y_type] +
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	78db      	ldrb	r3, [r3, #3]
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	4b0c      	ldr	r3, [pc, #48]	; (800f708 <parse_header_of_current_piece+0xe0>)
 800f6d6:	5c5b      	ldrb	r3, [r3, r1]
      control_points_by_type[result->x_type] +
 800f6d8:	4413      	add	r3, r2
      control_points_by_type[result->z_type] +
 800f6da:	687a      	ldr	r2, [r7, #4]
 800f6dc:	7912      	ldrb	r2, [r2, #4]
 800f6de:	4611      	mov	r1, r2
 800f6e0:	4a09      	ldr	r2, [pc, #36]	; (800f708 <parse_header_of_current_piece+0xe0>)
 800f6e2:	5c52      	ldrb	r2, [r2, r1]
      control_points_by_type[result->y_type] +
 800f6e4:	4413      	add	r3, r2
      control_points_by_type[result->yaw_type]
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	7952      	ldrb	r2, [r2, #5]
 800f6ea:	4611      	mov	r1, r2
 800f6ec:	4a06      	ldr	r2, [pc, #24]	; (800f708 <parse_header_of_current_piece+0xe0>)
 800f6ee:	5c52      	ldrb	r2, [r2, r1]
      control_points_by_type[result->z_type] +
 800f6f0:	4413      	add	r3, r2
    ) * sizeof(compressed_piece_coordinate);
 800f6f2:	005b      	lsls	r3, r3, #1
    length = (
 800f6f4:	60bb      	str	r3, [r7, #8]
    return ptr + length;
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	683a      	ldr	r2, [r7, #0]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	e000      	b.n	800f700 <parse_header_of_current_piece+0xd8>
  } else {
    return 0;
 800f6fe:	2300      	movs	r3, #0
  }
}
 800f700:	4618      	mov	r0, r3
 800f702:	3710      	adds	r7, #16
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}
 800f708:	0802d8fc 	.word	0x0802d8fc

0800f70c <start_time_of_current_piece>:

// Returns the start time of the current piece being executed
static inline float start_time_of_current_piece(const struct piecewise_traj_compressed *traj) {
 800f70c:	b480      	push	{r7}
 800f70e:	b083      	sub	sp, #12
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
  return traj->t_begin + traj->current_piece.t_begin_relative;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	ed93 7a00 	vldr	s14, [r3]
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	edd3 7a08 	vldr	s15, [r3, #32]
 800f720:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800f724:	eeb0 0a67 	vmov.f32	s0, s15
 800f728:	370c      	adds	r7, #12
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr

0800f732 <time_relative_to_start_of_current_piece>:

// Returns the number of seconds elapsed since the start time of the current
// piece being executed
static inline float time_relative_to_start_of_current_piece(const struct piecewise_traj_compressed *traj, float t) {
 800f732:	b580      	push	{r7, lr}
 800f734:	b082      	sub	sp, #8
 800f736:	af00      	add	r7, sp, #0
 800f738:	6078      	str	r0, [r7, #4]
 800f73a:	ed87 0a00 	vstr	s0, [r7]
  return t - start_time_of_current_piece(traj);
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f7ff ffe4 	bl	800f70c <start_time_of_current_piece>
 800f744:	eeb0 7a40 	vmov.f32	s14, s0
 800f748:	edd7 7a00 	vldr	s15, [r7]
 800f74c:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 800f750:	eeb0 0a67 	vmov.f32	s0, s15
 800f754:	3708      	adds	r7, #8
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}

0800f75a <piecewise_compressed_eval>:

/* ************************************************************************ */

struct traj_eval piecewise_compressed_eval(
  struct piecewise_traj_compressed *traj, float t)
{
 800f75a:	b5b0      	push	{r4, r5, r7, lr}
 800f75c:	b092      	sub	sp, #72	; 0x48
 800f75e:	af00      	add	r7, sp, #0
 800f760:	60f8      	str	r0, [r7, #12]
 800f762:	60b9      	str	r1, [r7, #8]
 800f764:	ed87 0a01 	vstr	s0, [r7, #4]
   * piecewise_compressed_update_current_poly4d() to stretch the time of
   * the poly4d. The problem is that the user may set the timescale to
   * a different value while the poly4d is already pre-calculated, and we
   * have no way of detecting it */

  if (t < start_time_of_current_piece(traj)) {
 800f768:	68b8      	ldr	r0, [r7, #8]
 800f76a:	f7ff ffcf 	bl	800f70c <start_time_of_current_piece>
 800f76e:	eeb0 7a40 	vmov.f32	s14, s0
 800f772:	edd7 7a01 	vldr	s15, [r7, #4]
 800f776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f77e:	d502      	bpl.n	800f786 <piecewise_compressed_eval+0x2c>
    piecewise_compressed_rewind(traj);
 800f780:	68b8      	ldr	r0, [r7, #8]
 800f782:	f000 f88d 	bl	800f8a0 <piecewise_compressed_rewind>
  }

  while (traj->current_piece.data && t >= end_time_of_current_piece(traj)) {
 800f786:	e002      	b.n	800f78e <piecewise_compressed_eval+0x34>
    piecewise_compressed_advance_playhead(traj);
 800f788:	68b8      	ldr	r0, [r7, #8]
 800f78a:	f000 f997 	bl	800fabc <piecewise_compressed_advance_playhead>
  while (traj->current_piece.data && t >= end_time_of_current_piece(traj)) {
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	69db      	ldr	r3, [r3, #28]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d00b      	beq.n	800f7ae <piecewise_compressed_eval+0x54>
 800f796:	68b8      	ldr	r0, [r7, #8]
 800f798:	f7ff feee 	bl	800f578 <end_time_of_current_piece>
 800f79c:	eeb0 7a40 	vmov.f32	s14, s0
 800f7a0:	edd7 7a01 	vldr	s15, [r7, #4]
 800f7a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ac:	daec      	bge.n	800f788 <piecewise_compressed_eval+0x2e>
  }

  t = time_relative_to_start_of_current_piece(traj, t);
 800f7ae:	ed97 0a01 	vldr	s0, [r7, #4]
 800f7b2:	68b8      	ldr	r0, [r7, #8]
 800f7b4:	f7ff ffbd 	bl	800f732 <time_relative_to_start_of_current_piece>
 800f7b8:	ed87 0a01 	vstr	s0, [r7, #4]

  eval = poly4d_eval(&traj->current_piece.poly4d, t);
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800f7c2:	f107 0314 	add.w	r3, r7, #20
 800f7c6:	ed97 0a01 	vldr	s0, [r7, #4]
 800f7ca:	4611      	mov	r1, r2
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7ff f8dd 	bl	800e98c <poly4d_eval>
  eval.pos = vadd(eval.pos, traj->shift);
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	ed93 5a03 	vldr	s10, [r3, #12]
 800f7d8:	edd3 5a04 	vldr	s11, [r3, #16]
 800f7dc:	ed93 6a05 	vldr	s12, [r3, #20]
 800f7e0:	edd7 6a05 	vldr	s13, [r7, #20]
 800f7e4:	ed97 7a06 	vldr	s14, [r7, #24]
 800f7e8:	edd7 7a07 	vldr	s15, [r7, #28]
 800f7ec:	eef0 1a45 	vmov.f32	s3, s10
 800f7f0:	eeb0 2a65 	vmov.f32	s4, s11
 800f7f4:	eef0 2a46 	vmov.f32	s5, s12
 800f7f8:	eeb0 0a66 	vmov.f32	s0, s13
 800f7fc:	eef0 0a47 	vmov.f32	s1, s14
 800f800:	eeb0 1a67 	vmov.f32	s2, s15
 800f804:	f7ff fde8 	bl	800f3d8 <vadd>
 800f808:	eef0 6a40 	vmov.f32	s13, s0
 800f80c:	eeb0 7a60 	vmov.f32	s14, s1
 800f810:	eef0 7a41 	vmov.f32	s15, s2
 800f814:	edc7 6a05 	vstr	s13, [r7, #20]
 800f818:	ed87 7a06 	vstr	s14, [r7, #24]
 800f81c:	edc7 7a07 	vstr	s15, [r7, #28]

  return eval;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	461d      	mov	r5, r3
 800f824:	f107 0414 	add.w	r4, r7, #20
 800f828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f82a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f82c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f82e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f834:	6823      	ldr	r3, [r4, #0]
 800f836:	602b      	str	r3, [r5, #0]
}
 800f838:	68f8      	ldr	r0, [r7, #12]
 800f83a:	3748      	adds	r7, #72	; 0x48
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bdb0      	pop	{r4, r5, r7, pc}

0800f840 <piecewise_compressed_load>:

void piecewise_compressed_load(struct piecewise_traj_compressed *traj, const void* data)
{
 800f840:	b590      	push	{r4, r7, lr}
 800f842:	b083      	sub	sp, #12
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	6039      	str	r1, [r7, #0]
  traj->t_begin = 0;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f04f 0200 	mov.w	r2, #0
 800f850:	601a      	str	r2, [r3, #0]
  traj->timescale = 1;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f858:	609a      	str	r2, [r3, #8]

  traj->data = data;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	683a      	ldr	r2, [r7, #0]
 800f85e:	619a      	str	r2, [r3, #24]
  traj->shift = vzero();
 800f860:	687c      	ldr	r4, [r7, #4]
 800f862:	f7ff fd91 	bl	800f388 <vzero>
 800f866:	eef0 6a40 	vmov.f32	s13, s0
 800f86a:	eeb0 7a60 	vmov.f32	s14, s1
 800f86e:	eef0 7a41 	vmov.f32	s15, s2
 800f872:	edc4 6a03 	vstr	s13, [r4, #12]
 800f876:	ed84 7a04 	vstr	s14, [r4, #16]
 800f87a:	edc4 7a05 	vstr	s15, [r4, #20]
  piecewise_compressed_rewind(traj);
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f000 f80e 	bl	800f8a0 <piecewise_compressed_rewind>

  traj->duration = calculate_total_duration(traj->current_piece.data);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	69db      	ldr	r3, [r3, #28]
 800f888:	4618      	mov	r0, r3
 800f88a:	f7ff fe47 	bl	800f51c <calculate_total_duration>
 800f88e:	eef0 7a40 	vmov.f32	s15, s0
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800f898:	bf00      	nop
 800f89a:	370c      	adds	r7, #12
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd90      	pop	{r4, r7, pc}

0800f8a0 <piecewise_compressed_rewind>:

static void piecewise_compressed_rewind(struct piecewise_traj_compressed *traj)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b092      	sub	sp, #72	; 0x48
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  struct traj_eval stopped;
  compressed_piece_coordinate value;
  compressed_piece_ptr ptr;

  /* Parse header that stores the start coordinates */
  bzero(&stopped, sizeof(stopped));
 800f8a8:	f107 0310 	add.w	r3, r7, #16
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	2334      	movs	r3, #52	; 0x34
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	2100      	movs	r1, #0
 800f8b4:	f014 f82c 	bl	8023910 <memset>
  ptr = traj->data;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	699b      	ldr	r3, [r3, #24]
 800f8bc:	647b      	str	r3, [r7, #68]	; 0x44
  ptr = next_coordinate(ptr, &value); stopped.pos.x = value / STORED_DISTANCE_SCALE;
 800f8be:	f107 030e 	add.w	r3, r7, #14
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f8c6:	f7ff fe6a 	bl	800f59e <next_coordinate>
 800f8ca:	6478      	str	r0, [r7, #68]	; 0x44
 800f8cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7f0 fe37 	bl	8000544 <__aeabi_i2d>
 800f8d6:	f04f 0200 	mov.w	r2, #0
 800f8da:	4b35      	ldr	r3, [pc, #212]	; (800f9b0 <piecewise_compressed_rewind+0x110>)
 800f8dc:	f7f0 ffc6 	bl	800086c <__aeabi_ddiv>
 800f8e0:	4602      	mov	r2, r0
 800f8e2:	460b      	mov	r3, r1
 800f8e4:	4610      	mov	r0, r2
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	f7f1 f96e 	bl	8000bc8 <__aeabi_d2f>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	613b      	str	r3, [r7, #16]
  ptr = next_coordinate(ptr, &value); stopped.pos.y = value / STORED_DISTANCE_SCALE;
 800f8f0:	f107 030e 	add.w	r3, r7, #14
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f8f8:	f7ff fe51 	bl	800f59e <next_coordinate>
 800f8fc:	6478      	str	r0, [r7, #68]	; 0x44
 800f8fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f902:	4618      	mov	r0, r3
 800f904:	f7f0 fe1e 	bl	8000544 <__aeabi_i2d>
 800f908:	f04f 0200 	mov.w	r2, #0
 800f90c:	4b28      	ldr	r3, [pc, #160]	; (800f9b0 <piecewise_compressed_rewind+0x110>)
 800f90e:	f7f0 ffad 	bl	800086c <__aeabi_ddiv>
 800f912:	4602      	mov	r2, r0
 800f914:	460b      	mov	r3, r1
 800f916:	4610      	mov	r0, r2
 800f918:	4619      	mov	r1, r3
 800f91a:	f7f1 f955 	bl	8000bc8 <__aeabi_d2f>
 800f91e:	4603      	mov	r3, r0
 800f920:	617b      	str	r3, [r7, #20]
  ptr = next_coordinate(ptr, &value); stopped.pos.z = value / STORED_DISTANCE_SCALE;
 800f922:	f107 030e 	add.w	r3, r7, #14
 800f926:	4619      	mov	r1, r3
 800f928:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f92a:	f7ff fe38 	bl	800f59e <next_coordinate>
 800f92e:	6478      	str	r0, [r7, #68]	; 0x44
 800f930:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f934:	4618      	mov	r0, r3
 800f936:	f7f0 fe05 	bl	8000544 <__aeabi_i2d>
 800f93a:	f04f 0200 	mov.w	r2, #0
 800f93e:	4b1c      	ldr	r3, [pc, #112]	; (800f9b0 <piecewise_compressed_rewind+0x110>)
 800f940:	f7f0 ff94 	bl	800086c <__aeabi_ddiv>
 800f944:	4602      	mov	r2, r0
 800f946:	460b      	mov	r3, r1
 800f948:	4610      	mov	r0, r2
 800f94a:	4619      	mov	r1, r3
 800f94c:	f7f1 f93c 	bl	8000bc8 <__aeabi_d2f>
 800f950:	4603      	mov	r3, r0
 800f952:	61bb      	str	r3, [r7, #24]
  ptr = next_coordinate(ptr, &value); stopped.yaw = value / STORED_ANGLE_SCALE;
 800f954:	f107 030e 	add.w	r3, r7, #14
 800f958:	4619      	mov	r1, r3
 800f95a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f95c:	f7ff fe1f 	bl	800f59e <next_coordinate>
 800f960:	6478      	str	r0, [r7, #68]	; 0x44
 800f962:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f966:	4618      	mov	r0, r3
 800f968:	f7f0 fdec 	bl	8000544 <__aeabi_i2d>
 800f96c:	a30e      	add	r3, pc, #56	; (adr r3, 800f9a8 <piecewise_compressed_rewind+0x108>)
 800f96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f972:	f7f0 ff7b 	bl	800086c <__aeabi_ddiv>
 800f976:	4602      	mov	r2, r0
 800f978:	460b      	mov	r3, r1
 800f97a:	4610      	mov	r0, r2
 800f97c:	4619      	mov	r1, r3
 800f97e:	f7f1 f923 	bl	8000bc8 <__aeabi_d2f>
 800f982:	4603      	mov	r3, r0
 800f984:	643b      	str	r3, [r7, #64]	; 0x40
  traj->current_piece.t_begin_relative = 0;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f04f 0200 	mov.w	r2, #0
 800f98c:	621a      	str	r2, [r3, #32]
  traj->current_piece.data = ptr;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f992:	61da      	str	r2, [r3, #28]

  piecewise_compressed_update_current_poly4d(traj, &stopped);
 800f994:	f107 0310 	add.w	r3, r7, #16
 800f998:	4619      	mov	r1, r3
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f000 f80a 	bl	800f9b4 <piecewise_compressed_update_current_poly4d>
}
 800f9a0:	bf00      	nop
 800f9a2:	3748      	adds	r7, #72	; 0x48
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}
 800f9a8:	9999999a 	.word	0x9999999a
 800f9ac:	3fb99999 	.word	0x3fb99999
 800f9b0:	408f4000 	.word	0x408f4000

0800f9b4 <piecewise_compressed_update_current_poly4d>:

static void piecewise_compressed_update_current_poly4d(
  struct piecewise_traj_compressed *traj, const struct traj_eval *prev_end)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b088      	sub	sp, #32
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	6039      	str	r1, [r7, #0]
  struct poly4d* poly4d = &traj->current_piece.poly4d;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	3324      	adds	r3, #36	; 0x24
 800f9c2:	61fb      	str	r3, [r7, #28]
  compressed_piece_ptr ptr;
  struct compressed_piece_parsed_header header;

  /* First, clear everything in the poly4d */
  bzero(poly4d, sizeof(*poly4d));
 800f9c4:	69fb      	ldr	r3, [r7, #28]
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	2384      	movs	r3, #132	; 0x84
 800f9ca:	461a      	mov	r2, r3
 800f9cc:	2100      	movs	r1, #0
 800f9ce:	f013 ff9f 	bl	8023910 <memset>

  /* Parse the header of the current piece, extract the storage types and the duration */
  ptr = traj->current_piece.data;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	69db      	ldr	r3, [r3, #28]
 800f9d6:	61bb      	str	r3, [r7, #24]
  parse_header_of_current_piece(&header, ptr);
 800f9d8:	f107 030c 	add.w	r3, r7, #12
 800f9dc:	69b9      	ldr	r1, [r7, #24]
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7ff fe22 	bl	800f628 <parse_header_of_current_piece>
  poly4d->duration = header.duration_in_msec / STORED_DURATION_SCALE;
 800f9e4:	89bb      	ldrh	r3, [r7, #12]
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7f0 fdac 	bl	8000544 <__aeabi_i2d>
 800f9ec:	f04f 0200 	mov.w	r2, #0
 800f9f0:	4b2f      	ldr	r3, [pc, #188]	; (800fab0 <piecewise_compressed_update_current_poly4d+0xfc>)
 800f9f2:	f7f0 ff3b 	bl	800086c <__aeabi_ddiv>
 800f9f6:	4602      	mov	r2, r0
 800f9f8:	460b      	mov	r3, r1
 800f9fa:	4610      	mov	r0, r2
 800f9fc:	4619      	mov	r1, r3
 800f9fe:	f7f1 f8e3 	bl	8000bc8 <__aeabi_d2f>
 800fa02:	4602      	mov	r2, r0
 800fa04:	69fb      	ldr	r3, [r7, #28]
 800fa06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process the body */
  ptr = header.body;
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	61bb      	str	r3, [r7, #24]
  ptr = calculate_polynomial_coefficients(
    poly4d->p[0], ptr, header.x_type, prev_end->pos.x, poly4d->duration, STORED_DISTANCE_SCALE);
 800fa0e:	69f8      	ldr	r0, [r7, #28]
  ptr = calculate_polynomial_coefficients(
 800fa10:	7bba      	ldrb	r2, [r7, #14]
    poly4d->p[0], ptr, header.x_type, prev_end->pos.x, poly4d->duration, STORED_DISTANCE_SCALE);
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	edd3 7a00 	vldr	s15, [r3]
  ptr = calculate_polynomial_coefficients(
 800fa18:	69fb      	ldr	r3, [r7, #28]
 800fa1a:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800fa1e:	ed9f 1a25 	vldr	s2, [pc, #148]	; 800fab4 <piecewise_compressed_update_current_poly4d+0x100>
 800fa22:	eef0 0a47 	vmov.f32	s1, s14
 800fa26:	eeb0 0a67 	vmov.f32	s0, s15
 800fa2a:	69b9      	ldr	r1, [r7, #24]
 800fa2c:	f7ff fd28 	bl	800f480 <calculate_polynomial_coefficients>
 800fa30:	61b8      	str	r0, [r7, #24]
  ptr = calculate_polynomial_coefficients(
    poly4d->p[1], ptr, header.y_type, prev_end->pos.y, poly4d->duration, STORED_DISTANCE_SCALE);
 800fa32:	69fb      	ldr	r3, [r7, #28]
 800fa34:	f103 0020 	add.w	r0, r3, #32
  ptr = calculate_polynomial_coefficients(
 800fa38:	7bfa      	ldrb	r2, [r7, #15]
    poly4d->p[1], ptr, header.y_type, prev_end->pos.y, poly4d->duration, STORED_DISTANCE_SCALE);
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	edd3 7a01 	vldr	s15, [r3, #4]
  ptr = calculate_polynomial_coefficients(
 800fa40:	69fb      	ldr	r3, [r7, #28]
 800fa42:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800fa46:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 800fab4 <piecewise_compressed_update_current_poly4d+0x100>
 800fa4a:	eef0 0a47 	vmov.f32	s1, s14
 800fa4e:	eeb0 0a67 	vmov.f32	s0, s15
 800fa52:	69b9      	ldr	r1, [r7, #24]
 800fa54:	f7ff fd14 	bl	800f480 <calculate_polynomial_coefficients>
 800fa58:	61b8      	str	r0, [r7, #24]
  ptr = calculate_polynomial_coefficients(
    poly4d->p[2], ptr, header.z_type, prev_end->pos.z, poly4d->duration, STORED_DISTANCE_SCALE);
 800fa5a:	69fb      	ldr	r3, [r7, #28]
 800fa5c:	f103 0040 	add.w	r0, r3, #64	; 0x40
  ptr = calculate_polynomial_coefficients(
 800fa60:	7c3a      	ldrb	r2, [r7, #16]
    poly4d->p[2], ptr, header.z_type, prev_end->pos.z, poly4d->duration, STORED_DISTANCE_SCALE);
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	edd3 7a02 	vldr	s15, [r3, #8]
  ptr = calculate_polynomial_coefficients(
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800fa6e:	ed9f 1a11 	vldr	s2, [pc, #68]	; 800fab4 <piecewise_compressed_update_current_poly4d+0x100>
 800fa72:	eef0 0a47 	vmov.f32	s1, s14
 800fa76:	eeb0 0a67 	vmov.f32	s0, s15
 800fa7a:	69b9      	ldr	r1, [r7, #24]
 800fa7c:	f7ff fd00 	bl	800f480 <calculate_polynomial_coefficients>
 800fa80:	61b8      	str	r0, [r7, #24]
  calculate_polynomial_coefficients(
    poly4d->p[3], ptr, header.yaw_type, prev_end->yaw, poly4d->duration, STORED_ANGLE_SCALE);
 800fa82:	69fb      	ldr	r3, [r7, #28]
 800fa84:	f103 0060 	add.w	r0, r3, #96	; 0x60
  calculate_polynomial_coefficients(
 800fa88:	7c7a      	ldrb	r2, [r7, #17]
    poly4d->p[3], ptr, header.yaw_type, prev_end->yaw, poly4d->duration, STORED_ANGLE_SCALE);
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
  calculate_polynomial_coefficients(
 800fa90:	69fb      	ldr	r3, [r7, #28]
 800fa92:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800fa96:	ed9f 1a08 	vldr	s2, [pc, #32]	; 800fab8 <piecewise_compressed_update_current_poly4d+0x104>
 800fa9a:	eef0 0a47 	vmov.f32	s1, s14
 800fa9e:	eeb0 0a67 	vmov.f32	s0, s15
 800faa2:	69b9      	ldr	r1, [r7, #24]
 800faa4:	f7ff fcec 	bl	800f480 <calculate_polynomial_coefficients>
}
 800faa8:	bf00      	nop
 800faaa:	3720      	adds	r7, #32
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}
 800fab0:	408f4000 	.word	0x408f4000
 800fab4:	447a0000 	.word	0x447a0000
 800fab8:	3dcccccd 	.word	0x3dcccccd

0800fabc <piecewise_compressed_advance_playhead>:

static void piecewise_compressed_advance_playhead(struct piecewise_traj_compressed *traj)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b090      	sub	sp, #64	; 0x40
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  float duration = traj->current_piece.poly4d.duration;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800faca:	63fb      	str	r3, [r7, #60]	; 0x3c
  struct traj_eval end_of_previous_piece = poly4d_eval(&traj->current_piece.poly4d, duration);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800fad2:	f107 0308 	add.w	r3, r7, #8
 800fad6:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800fada:	4611      	mov	r1, r2
 800fadc:	4618      	mov	r0, r3
 800fade:	f7fe ff55 	bl	800e98c <poly4d_eval>

  traj->current_piece.t_begin_relative += duration;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	ed93 7a08 	vldr	s14, [r3, #32]
 800fae8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800faec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	edc3 7a08 	vstr	s15, [r3, #32]
  traj->current_piece.data = next_piece(traj->current_piece.data);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	69db      	ldr	r3, [r3, #28]
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7ff fd84 	bl	800f608 <next_piece>
 800fb00:	4602      	mov	r2, r0
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	61da      	str	r2, [r3, #28]

  piecewise_compressed_update_current_poly4d(traj, &end_of_previous_piece);
 800fb06:	f107 0308 	add.w	r3, r7, #8
 800fb0a:	4619      	mov	r1, r3
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f7ff ff51 	bl	800f9b4 <piecewise_compressed_update_current_poly4d>
}
 800fb12:	bf00      	nop
 800fb14:	3740      	adds	r7, #64	; 0x40
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}

0800fb1a <rateSupervisorInit>:
 * rateSupervisor.c - functionality to supervise the rate of modules
 */

#include "rateSupervisor.h"

void rateSupervisorInit(rateSupervisor_t* context, const uint32_t osTimeMs, const uint32_t evaluationIntervalMs, const uint32_t minCount, const uint32_t maxCount, const uint8_t skip) {
 800fb1a:	b480      	push	{r7}
 800fb1c:	b085      	sub	sp, #20
 800fb1e:	af00      	add	r7, sp, #0
 800fb20:	60f8      	str	r0, [r7, #12]
 800fb22:	60b9      	str	r1, [r7, #8]
 800fb24:	607a      	str	r2, [r7, #4]
 800fb26:	603b      	str	r3, [r7, #0]
    context->count = 0;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	601a      	str	r2, [r3, #0]
    context->evaluationIntervalMs = evaluationIntervalMs;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	687a      	ldr	r2, [r7, #4]
 800fb32:	611a      	str	r2, [r3, #16]
    context->expectedMin = minCount;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	683a      	ldr	r2, [r7, #0]
 800fb38:	605a      	str	r2, [r3, #4]
    context->expectedMax = maxCount;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	69ba      	ldr	r2, [r7, #24]
 800fb3e:	609a      	str	r2, [r3, #8]
    context->nextEvaluationTimeMs = osTimeMs + evaluationIntervalMs;
 800fb40:	68ba      	ldr	r2, [r7, #8]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	441a      	add	r2, r3
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	60da      	str	r2, [r3, #12]
    context->latestCount = 0;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	615a      	str	r2, [r3, #20]
    context->skip = skip;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	7f3a      	ldrb	r2, [r7, #28]
 800fb54:	761a      	strb	r2, [r3, #24]
}
 800fb56:	bf00      	nop
 800fb58:	3714      	adds	r7, #20
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb60:	4770      	bx	lr

0800fb62 <rateSupervisorValidate>:

bool rateSupervisorValidate(rateSupervisor_t* context, const uint32_t osTimeMs) {
 800fb62:	b480      	push	{r7}
 800fb64:	b085      	sub	sp, #20
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	6078      	str	r0, [r7, #4]
 800fb6a:	6039      	str	r1, [r7, #0]
    bool result = true;
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	73fb      	strb	r3, [r7, #15]

    context->count += 1;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	1c5a      	adds	r2, r3, #1
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	601a      	str	r2, [r3, #0]
    if (osTimeMs > context->nextEvaluationTimeMs) {
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	68db      	ldr	r3, [r3, #12]
 800fb7e:	683a      	ldr	r2, [r7, #0]
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d927      	bls.n	800fbd4 <rateSupervisorValidate+0x72>
        uint32_t actual = context->count;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	60bb      	str	r3, [r7, #8]
        if (actual < context->expectedMin || actual > context->expectedMax) {
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	685b      	ldr	r3, [r3, #4]
 800fb8e:	68ba      	ldr	r2, [r7, #8]
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d304      	bcc.n	800fb9e <rateSupervisorValidate+0x3c>
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	689b      	ldr	r3, [r3, #8]
 800fb98:	68ba      	ldr	r2, [r7, #8]
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d901      	bls.n	800fba2 <rateSupervisorValidate+0x40>
            result = false;
 800fb9e:	2300      	movs	r3, #0
 800fba0:	73fb      	strb	r3, [r7, #15]
        }

        context->latestCount = context->count;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681a      	ldr	r2, [r3, #0]
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	615a      	str	r2, [r3, #20]
        context->count = 0;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2200      	movs	r2, #0
 800fbae:	601a      	str	r2, [r3, #0]
        context->nextEvaluationTimeMs = osTimeMs + context->evaluationIntervalMs;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	691a      	ldr	r2, [r3, #16]
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	441a      	add	r2, r3
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	60da      	str	r2, [r3, #12]

        if (context->skip > 0) {
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	7e1b      	ldrb	r3, [r3, #24]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d007      	beq.n	800fbd4 <rateSupervisorValidate+0x72>
            result = true;
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	73fb      	strb	r3, [r7, #15]
            context->skip -= 1;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	7e1b      	ldrb	r3, [r3, #24]
 800fbcc:	3b01      	subs	r3, #1
 800fbce:	b2da      	uxtb	r2, r3
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	761a      	strb	r2, [r3, #24]
        }
    }

    return result;
 800fbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3714      	adds	r7, #20
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr

0800fbe2 <rateSupervisorLatestCount>:

uint32_t rateSupervisorLatestCount(rateSupervisor_t* context) {
 800fbe2:	b480      	push	{r7}
 800fbe4:	b083      	sub	sp, #12
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	6078      	str	r0, [r7, #4]
    return context->latestCount;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	695b      	ldr	r3, [r3, #20]
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	370c      	adds	r7, #12
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf8:	4770      	bx	lr
	...

0800fbfc <supervisorIsFlying>:

bool supervisorCanFly() {
  return supervisorMem.canFly;
}

bool supervisorIsFlying() {
 800fbfc:	b480      	push	{r7}
 800fbfe:	af00      	add	r7, sp, #0
  return supervisorMem.isFlying;
 800fc00:	4b03      	ldr	r3, [pc, #12]	; (800fc10 <supervisorIsFlying+0x14>)
 800fc02:	785b      	ldrb	r3, [r3, #1]
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	46bd      	mov	sp, r7
 800fc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0c:	4770      	bx	lr
 800fc0e:	bf00      	nop
 800fc10:	2000aa08 	.word	0x2000aa08

0800fc14 <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b084      	sub	sp, #16
 800fc18:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 800fc1e:	1d3b      	adds	r3, r7, #4
 800fc20:	4618      	mov	r0, r3
 800fc22:	f000 f8a3 	bl	800fd6c <platformGetListOfConfigurations>
 800fc26:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	68f8      	ldr	r0, [r7, #12]
 800fc2e:	f000 f855 	bl	800fcdc <platformInitConfiguration>
 800fc32:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d001      	beq.n	800fc3e <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	e000      	b.n	800fc40 <platformInit+0x2c>
  }

//  platformInitHardware();	// NVIC, EXINT 초기화로 대체
  return 0;
 800fc3e:	2300      	movs	r3, #0
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	3710      	adds	r7, #16
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}

0800fc48 <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b086      	sub	sp, #24
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	2b30      	cmp	r3, #48	; 0x30
 800fc58:	d104      	bne.n	800fc64 <platformParseDeviceTypeString+0x1c>
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	781b      	ldrb	r3, [r3, #0]
 800fc60:	2b3b      	cmp	r3, #59	; 0x3b
 800fc62:	d001      	beq.n	800fc68 <platformParseDeviceTypeString+0x20>
    return 1;
 800fc64:	2301      	movs	r3, #1
 800fc66:	e034      	b.n	800fcd2 <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 800fc68:	2302      	movs	r3, #2
 800fc6a:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	3304      	adds	r3, #4
 800fc70:	60fb      	str	r3, [r7, #12]
  int end = 0;
 800fc72:	2300      	movs	r3, #0
 800fc74:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 800fc76:	693b      	ldr	r3, [r7, #16]
 800fc78:	617b      	str	r3, [r7, #20]
 800fc7a:	e00e      	b.n	800fc9a <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	687a      	ldr	r2, [r7, #4]
 800fc80:	4413      	add	r3, r2
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d00c      	beq.n	800fca2 <platformParseDeviceTypeString+0x5a>
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	687a      	ldr	r2, [r7, #4]
 800fc8c:	4413      	add	r3, r2
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	2b3b      	cmp	r3, #59	; 0x3b
 800fc92:	d006      	beq.n	800fca2 <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	3301      	adds	r3, #1
 800fc98:	617b      	str	r3, [r7, #20]
 800fc9a:	697a      	ldr	r2, [r7, #20]
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	ddec      	ble.n	800fc7c <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 800fca2:	697a      	ldr	r2, [r7, #20]
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	429a      	cmp	r2, r3
 800fca8:	dd01      	ble.n	800fcae <platformParseDeviceTypeString+0x66>
    return 1;
 800fcaa:	2301      	movs	r3, #1
 800fcac:	e011      	b.n	800fcd2 <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 800fcae:	697a      	ldr	r2, [r7, #20]
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	1ad3      	subs	r3, r2, r3
 800fcb4:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	687a      	ldr	r2, [r7, #4]
 800fcba:	4413      	add	r3, r2
 800fcbc:	68ba      	ldr	r2, [r7, #8]
 800fcbe:	4619      	mov	r1, r3
 800fcc0:	6838      	ldr	r0, [r7, #0]
 800fcc2:	f013 ff2a 	bl	8023b1a <memcpy>
  deviceType[length] = '\0';
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	683a      	ldr	r2, [r7, #0]
 800fcca:	4413      	add	r3, r2
 800fccc:	2200      	movs	r2, #0
 800fcce:	701a      	strb	r2, [r3, #0]
  return 0;
 800fcd0:	2300      	movs	r3, #0
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3718      	adds	r7, #24
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}
	...

0800fcdc <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b090      	sub	sp, #64	; 0x40
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 800fce6:	f107 0314 	add.w	r3, r7, #20
 800fcea:	4618      	mov	r0, r3
 800fcec:	f000 f85e 	bl	800fdac <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 800fcf0:	f107 020c 	add.w	r2, r7, #12
 800fcf4:	f107 0314 	add.w	r3, r7, #20
 800fcf8:	4611      	mov	r1, r2
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7ff ffa4 	bl	800fc48 <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 800fd00:	2300      	movs	r3, #0
 800fd02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd04:	e01a      	b.n	800fd3c <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 800fd06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fd08:	4613      	mov	r3, r2
 800fd0a:	00db      	lsls	r3, r3, #3
 800fd0c:	4413      	add	r3, r2
 800fd0e:	009b      	lsls	r3, r3, #2
 800fd10:	4413      	add	r3, r2
 800fd12:	687a      	ldr	r2, [r7, #4]
 800fd14:	4413      	add	r3, r2
 800fd16:	63bb      	str	r3, [r7, #56]	; 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 800fd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1a:	f107 020c 	add.w	r2, r7, #12
 800fd1e:	4611      	mov	r1, r2
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7f0 fa55 	bl	80001d0 <strcmp>
 800fd26:	4603      	mov	r3, r0
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d104      	bne.n	800fd36 <platformInitConfiguration+0x5a>
      active_config = config;
 800fd2c:	4a08      	ldr	r2, [pc, #32]	; (800fd50 <platformInitConfiguration+0x74>)
 800fd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd30:	6013      	str	r3, [r2, #0]
      return 0;
 800fd32:	2300      	movs	r3, #0
 800fd34:	e007      	b.n	800fd46 <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 800fd36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd38:	3301      	adds	r3, #1
 800fd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	dbe0      	blt.n	800fd06 <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 800fd44:	2301      	movs	r3, #1
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3740      	adds	r7, #64	; 0x40
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
 800fd4e:	bf00      	nop
 800fd50:	2000aa24 	.word	0x2000aa24

0800fd54 <platformConfigGetDeviceTypeName>:

const char* platformConfigGetDeviceType() {
  return active_config->deviceType;
}

const char* platformConfigGetDeviceTypeName() {
 800fd54:	b480      	push	{r7}
 800fd56:	af00      	add	r7, sp, #0
  return active_config->deviceTypeName;
 800fd58:	4b03      	ldr	r3, [pc, #12]	; (800fd68 <platformConfigGetDeviceTypeName+0x14>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	3305      	adds	r3, #5
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	46bd      	mov	sp, r7
 800fd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd66:	4770      	bx	lr
 800fd68:	2000aa24 	.word	0x2000aa24

0800fd6c <platformGetListOfConfigurations>:
  //  .motorMap = motorMapCF21Brushless,
  },
#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2203      	movs	r2, #3
 800fd78:	601a      	str	r2, [r3, #0]
  return configs;
 800fd7a:	4b03      	ldr	r3, [pc, #12]	; (800fd88 <platformGetListOfConfigurations+0x1c>)
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	370c      	adds	r7, #12
 800fd80:	46bd      	mov	sp, r7
 800fd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd86:	4770      	bx	lr
 800fd88:	20000e5c 	.word	0x20000e5c

0800fd8c <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;CF20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 800fd8c:	b480      	push	{r7}
 800fd8e:	b083      	sub	sp, #12
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800fd9a:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800fd9e:	015b      	lsls	r3, r3, #5
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	370c      	adds	r7, #12
 800fda4:	46bd      	mov	sp, r7
 800fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdaa:	4770      	bx	lr

0800fdac <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b086      	sub	sp, #24
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
  char* block = 0;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 800fdb8:	2300      	movs	r3, #0
 800fdba:	613b      	str	r3, [r7, #16]
 800fdbc:	e00d      	b.n	800fdda <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 800fdbe:	6938      	ldr	r0, [r7, #16]
 800fdc0:	f7ff ffe4 	bl	800fd8c <getAddressOfOtpMemoryBlock>
 800fdc4:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d002      	beq.n	800fdd4 <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	617b      	str	r3, [r7, #20]
      break;
 800fdd2:	e005      	b.n	800fde0 <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 800fdd4:	693b      	ldr	r3, [r7, #16]
 800fdd6:	3301      	adds	r3, #1
 800fdd8:	613b      	str	r3, [r7, #16]
 800fdda:	693b      	ldr	r3, [r7, #16]
 800fddc:	2b0f      	cmp	r3, #15
 800fdde:	ddee      	ble.n	800fdbe <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 800fde0:	697b      	ldr	r3, [r7, #20]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d003      	beq.n	800fdee <platformGetDeviceTypeString+0x42>
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	781b      	ldrb	r3, [r3, #0]
 800fdea:	2bff      	cmp	r3, #255	; 0xff
 800fdec:	d101      	bne.n	800fdf2 <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 800fdee:	4b07      	ldr	r3, [pc, #28]	; (800fe0c <platformGetDeviceTypeString+0x60>)
 800fdf0:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 800fdf2:	2220      	movs	r2, #32
 800fdf4:	6979      	ldr	r1, [r7, #20]
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f013 fdae 	bl	8023958 <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	3320      	adds	r3, #32
 800fe00:	2200      	movs	r2, #0
 800fe02:	701a      	strb	r2, [r3, #0]
}
 800fe04:	bf00      	nop
 800fe06:	3718      	adds	r7, #24
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}
 800fe0c:	0802beb0 	.word	0x0802beb0

0800fe10 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800fe10:	b480      	push	{r7}
 800fe12:	b083      	sub	sp, #12
 800fe14:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800fe16:	4b21      	ldr	r3, [pc, #132]	; (800fe9c <_DoInit+0x8c>)
 800fe18:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2203      	movs	r2, #3
 800fe1e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2203      	movs	r2, #3
 800fe24:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	4a1d      	ldr	r2, [pc, #116]	; (800fea0 <_DoInit+0x90>)
 800fe2a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	4a1d      	ldr	r2, [pc, #116]	; (800fea4 <_DoInit+0x94>)
 800fe30:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fe38:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2200      	movs	r2, #0
 800fe44:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2202      	movs	r2, #2
 800fe4a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	4a14      	ldr	r2, [pc, #80]	; (800fea0 <_DoInit+0x90>)
 800fe50:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	4a14      	ldr	r2, [pc, #80]	; (800fea8 <_DoInit+0x98>)
 800fe56:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2220      	movs	r2, #32
 800fe5c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2200      	movs	r2, #0
 800fe62:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2200      	movs	r2, #0
 800fe68:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2202      	movs	r2, #2
 800fe6e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	3307      	adds	r3, #7
 800fe74:	4a0d      	ldr	r2, [pc, #52]	; (800feac <_DoInit+0x9c>)
 800fe76:	6810      	ldr	r0, [r2, #0]
 800fe78:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	4a0c      	ldr	r2, [pc, #48]	; (800feb0 <_DoInit+0xa0>)
 800fe7e:	6810      	ldr	r0, [r2, #0]
 800fe80:	6018      	str	r0, [r3, #0]
 800fe82:	8891      	ldrh	r1, [r2, #4]
 800fe84:	7992      	ldrb	r2, [r2, #6]
 800fe86:	8099      	strh	r1, [r3, #4]
 800fe88:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2220      	movs	r2, #32
 800fe8e:	719a      	strb	r2, [r3, #6]
}
 800fe90:	bf00      	nop
 800fe92:	370c      	adds	r7, #12
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr
 800fe9c:	2000aa28 	.word	0x2000aa28
 800fea0:	0802beb8 	.word	0x0802beb8
 800fea4:	2000aad0 	.word	0x2000aad0
 800fea8:	2000bad0 	.word	0x2000bad0
 800feac:	0802bec4 	.word	0x0802bec4
 800feb0:	0802bec8 	.word	0x0802bec8

0800feb4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b088      	sub	sp, #32
 800feb8:	af00      	add	r7, sp, #0
 800feba:	60f8      	str	r0, [r7, #12]
 800febc:	60b9      	str	r1, [r7, #8]
 800febe:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800fec0:	2300      	movs	r3, #0
 800fec2:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	68db      	ldr	r3, [r3, #12]
 800fec8:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	691b      	ldr	r3, [r3, #16]
 800fece:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 800fed0:	693a      	ldr	r2, [r7, #16]
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	429a      	cmp	r2, r3
 800fed6:	d905      	bls.n	800fee4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800fed8:	693a      	ldr	r2, [r7, #16]
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	1ad3      	subs	r3, r2, r3
 800fede:	3b01      	subs	r3, #1
 800fee0:	61fb      	str	r3, [r7, #28]
 800fee2:	e007      	b.n	800fef4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	689a      	ldr	r2, [r3, #8]
 800fee8:	6939      	ldr	r1, [r7, #16]
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	1acb      	subs	r3, r1, r3
 800feee:	4413      	add	r3, r2
 800fef0:	3b01      	subs	r3, #1
 800fef2:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	689a      	ldr	r2, [r3, #8]
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	1ad3      	subs	r3, r2, r3
 800fefc:	69fa      	ldr	r2, [r7, #28]
 800fefe:	4293      	cmp	r3, r2
 800ff00:	bf28      	it	cs
 800ff02:	4613      	movcs	r3, r2
 800ff04:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800ff06:	69fa      	ldr	r2, [r7, #28]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	4293      	cmp	r3, r2
 800ff0c:	bf28      	it	cs
 800ff0e:	4613      	movcs	r3, r2
 800ff10:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	685a      	ldr	r2, [r3, #4]
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	4413      	add	r3, r2
 800ff1a:	69fa      	ldr	r2, [r7, #28]
 800ff1c:	68b9      	ldr	r1, [r7, #8]
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f013 fdfb 	bl	8023b1a <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800ff24:	69ba      	ldr	r2, [r7, #24]
 800ff26:	69fb      	ldr	r3, [r7, #28]
 800ff28:	4413      	add	r3, r2
 800ff2a:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 800ff2c:	68ba      	ldr	r2, [r7, #8]
 800ff2e:	69fb      	ldr	r3, [r7, #28]
 800ff30:	4413      	add	r3, r2
 800ff32:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800ff34:	687a      	ldr	r2, [r7, #4]
 800ff36:	69fb      	ldr	r3, [r7, #28]
 800ff38:	1ad3      	subs	r3, r2, r3
 800ff3a:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800ff3c:	697a      	ldr	r2, [r7, #20]
 800ff3e:	69fb      	ldr	r3, [r7, #28]
 800ff40:	4413      	add	r3, r2
 800ff42:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	689b      	ldr	r3, [r3, #8]
 800ff48:	697a      	ldr	r2, [r7, #20]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d101      	bne.n	800ff52 <_WriteBlocking+0x9e>
      WrOff = 0u;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	697a      	ldr	r2, [r7, #20]
 800ff56:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d1b5      	bne.n	800feca <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 800ff5e:	69bb      	ldr	r3, [r7, #24]
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	3720      	adds	r7, #32
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}

0800ff68 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b088      	sub	sp, #32
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	60f8      	str	r0, [r7, #12]
 800ff70:	60b9      	str	r1, [r7, #8]
 800ff72:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	68db      	ldr	r3, [r3, #12]
 800ff78:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	689a      	ldr	r2, [r3, #8]
 800ff7e:	69fb      	ldr	r3, [r7, #28]
 800ff80:	1ad3      	subs	r3, r2, r3
 800ff82:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800ff84:	69ba      	ldr	r2, [r7, #24]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d90e      	bls.n	800ffaa <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	685a      	ldr	r2, [r3, #4]
 800ff90:	69fb      	ldr	r3, [r7, #28]
 800ff92:	4413      	add	r3, r2
 800ff94:	687a      	ldr	r2, [r7, #4]
 800ff96:	68b9      	ldr	r1, [r7, #8]
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f013 fdbe 	bl	8023b1a <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 800ff9e:	69fa      	ldr	r2, [r7, #28]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	441a      	add	r2, r3
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800ffa8:	e01a      	b.n	800ffe0 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 800ffaa:	69bb      	ldr	r3, [r7, #24]
 800ffac:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	685a      	ldr	r2, [r3, #4]
 800ffb2:	69fb      	ldr	r3, [r7, #28]
 800ffb4:	4413      	add	r3, r2
 800ffb6:	697a      	ldr	r2, [r7, #20]
 800ffb8:	68b9      	ldr	r1, [r7, #8]
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f013 fdad 	bl	8023b1a <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800ffc0:	687a      	ldr	r2, [r7, #4]
 800ffc2:	69bb      	ldr	r3, [r7, #24]
 800ffc4:	1ad3      	subs	r3, r2, r3
 800ffc6:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	6858      	ldr	r0, [r3, #4]
 800ffcc:	68ba      	ldr	r2, [r7, #8]
 800ffce:	69bb      	ldr	r3, [r7, #24]
 800ffd0:	4413      	add	r3, r2
 800ffd2:	697a      	ldr	r2, [r7, #20]
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	f013 fda0 	bl	8023b1a <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	697a      	ldr	r2, [r7, #20]
 800ffde:	60da      	str	r2, [r3, #12]
}
 800ffe0:	bf00      	nop
 800ffe2:	3720      	adds	r7, #32
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}

0800ffe8 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800ffe8:	b480      	push	{r7}
 800ffea:	b087      	sub	sp, #28
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	691b      	ldr	r3, [r3, #16]
 800fff4:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	68db      	ldr	r3, [r3, #12]
 800fffa:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800fffc:	693a      	ldr	r2, [r7, #16]
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	429a      	cmp	r2, r3
 8010002:	d808      	bhi.n	8010016 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	689a      	ldr	r2, [r3, #8]
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	1ad2      	subs	r2, r2, r3
 801000c:	693b      	ldr	r3, [r7, #16]
 801000e:	4413      	add	r3, r2
 8010010:	3b01      	subs	r3, #1
 8010012:	617b      	str	r3, [r7, #20]
 8010014:	e004      	b.n	8010020 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8010016:	693a      	ldr	r2, [r7, #16]
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	1ad3      	subs	r3, r2, r3
 801001c:	3b01      	subs	r3, #1
 801001e:	617b      	str	r3, [r7, #20]
  }
  return r;
 8010020:	697b      	ldr	r3, [r7, #20]
}
 8010022:	4618      	mov	r0, r3
 8010024:	371c      	adds	r7, #28
 8010026:	46bd      	mov	sp, r7
 8010028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002c:	4770      	bx	lr
	...

08010030 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8010030:	b580      	push	{r7, lr}
 8010032:	b088      	sub	sp, #32
 8010034:	af00      	add	r7, sp, #0
 8010036:	60f8      	str	r0, [r7, #12]
 8010038:	60b9      	str	r1, [r7, #8]
 801003a:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	1c5a      	adds	r2, r3, #1
 8010044:	4613      	mov	r3, r2
 8010046:	005b      	lsls	r3, r3, #1
 8010048:	4413      	add	r3, r2
 801004a:	00db      	lsls	r3, r3, #3
 801004c:	4a1f      	ldr	r2, [pc, #124]	; (80100cc <SEGGER_RTT_WriteNoLock+0x9c>)
 801004e:	4413      	add	r3, r2
 8010050:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	695b      	ldr	r3, [r3, #20]
 8010056:	2b02      	cmp	r3, #2
 8010058:	d029      	beq.n	80100ae <SEGGER_RTT_WriteNoLock+0x7e>
 801005a:	2b02      	cmp	r3, #2
 801005c:	d82e      	bhi.n	80100bc <SEGGER_RTT_WriteNoLock+0x8c>
 801005e:	2b00      	cmp	r3, #0
 8010060:	d002      	beq.n	8010068 <SEGGER_RTT_WriteNoLock+0x38>
 8010062:	2b01      	cmp	r3, #1
 8010064:	d013      	beq.n	801008e <SEGGER_RTT_WriteNoLock+0x5e>
 8010066:	e029      	b.n	80100bc <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8010068:	6978      	ldr	r0, [r7, #20]
 801006a:	f7ff ffbd 	bl	800ffe8 <_GetAvailWriteSpace>
 801006e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8010070:	693a      	ldr	r2, [r7, #16]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	429a      	cmp	r2, r3
 8010076:	d202      	bcs.n	801007e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8010078:	2300      	movs	r3, #0
 801007a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 801007c:	e021      	b.n	80100c2 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8010082:	687a      	ldr	r2, [r7, #4]
 8010084:	69b9      	ldr	r1, [r7, #24]
 8010086:	6978      	ldr	r0, [r7, #20]
 8010088:	f7ff ff6e 	bl	800ff68 <_WriteNoCheck>
    break;
 801008c:	e019      	b.n	80100c2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 801008e:	6978      	ldr	r0, [r7, #20]
 8010090:	f7ff ffaa 	bl	800ffe8 <_GetAvailWriteSpace>
 8010094:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8010096:	687a      	ldr	r2, [r7, #4]
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	4293      	cmp	r3, r2
 801009c:	bf28      	it	cs
 801009e:	4613      	movcs	r3, r2
 80100a0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80100a2:	69fa      	ldr	r2, [r7, #28]
 80100a4:	69b9      	ldr	r1, [r7, #24]
 80100a6:	6978      	ldr	r0, [r7, #20]
 80100a8:	f7ff ff5e 	bl	800ff68 <_WriteNoCheck>
    break;
 80100ac:	e009      	b.n	80100c2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80100ae:	687a      	ldr	r2, [r7, #4]
 80100b0:	69b9      	ldr	r1, [r7, #24]
 80100b2:	6978      	ldr	r0, [r7, #20]
 80100b4:	f7ff fefe 	bl	800feb4 <_WriteBlocking>
 80100b8:	61f8      	str	r0, [r7, #28]
    break;
 80100ba:	e002      	b.n	80100c2 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80100bc:	2300      	movs	r3, #0
 80100be:	61fb      	str	r3, [r7, #28]
    break;
 80100c0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80100c2:	69fb      	ldr	r3, [r7, #28]
}
 80100c4:	4618      	mov	r0, r3
 80100c6:	3720      	adds	r7, #32
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}
 80100cc:	2000aa28 	.word	0x2000aa28

080100d0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b086      	sub	sp, #24
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	60f8      	str	r0, [r7, #12]
 80100d8:	60b9      	str	r1, [r7, #8]
 80100da:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 80100dc:	4b0d      	ldr	r3, [pc, #52]	; (8010114 <SEGGER_RTT_Write+0x44>)
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d101      	bne.n	80100e8 <SEGGER_RTT_Write+0x18>
 80100e4:	f7ff fe94 	bl	800fe10 <_DoInit>
  SEGGER_RTT_LOCK();
 80100e8:	f3ef 8311 	mrs	r3, BASEPRI
 80100ec:	f04f 0120 	mov.w	r1, #32
 80100f0:	f381 8811 	msr	BASEPRI, r1
 80100f4:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 80100f6:	687a      	ldr	r2, [r7, #4]
 80100f8:	68b9      	ldr	r1, [r7, #8]
 80100fa:	68f8      	ldr	r0, [r7, #12]
 80100fc:	f7ff ff98 	bl	8010030 <SEGGER_RTT_WriteNoLock>
 8010100:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8010108:	693b      	ldr	r3, [r7, #16]
}
 801010a:	4618      	mov	r0, r3
 801010c:	3718      	adds	r7, #24
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
 8010112:	bf00      	nop
 8010114:	2000aa28 	.word	0x2000aa28

08010118 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8010118:	b580      	push	{r7, lr}
 801011a:	b086      	sub	sp, #24
 801011c:	af00      	add	r7, sp, #0
 801011e:	60f8      	str	r0, [r7, #12]
 8010120:	60b9      	str	r1, [r7, #8]
 8010122:	607a      	str	r2, [r7, #4]
 8010124:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8010126:	4b30      	ldr	r3, [pc, #192]	; (80101e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8010128:	781b      	ldrb	r3, [r3, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d101      	bne.n	8010132 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 801012e:	f7ff fe6f 	bl	800fe10 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8010132:	4b2d      	ldr	r3, [pc, #180]	; (80101e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8010134:	691b      	ldr	r3, [r3, #16]
 8010136:	461a      	mov	r2, r3
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	4293      	cmp	r3, r2
 801013c:	d24c      	bcs.n	80101d8 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 801013e:	f3ef 8311 	mrs	r3, BASEPRI
 8010142:	f04f 0120 	mov.w	r1, #32
 8010146:	f381 8811 	msr	BASEPRI, r1
 801014a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d032      	beq.n	80101b8 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8010152:	4925      	ldr	r1, [pc, #148]	; (80101e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	1c5a      	adds	r2, r3, #1
 8010158:	4613      	mov	r3, r2
 801015a:	005b      	lsls	r3, r3, #1
 801015c:	4413      	add	r3, r2
 801015e:	00db      	lsls	r3, r3, #3
 8010160:	440b      	add	r3, r1
 8010162:	68ba      	ldr	r2, [r7, #8]
 8010164:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8010166:	4920      	ldr	r1, [pc, #128]	; (80101e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	1c5a      	adds	r2, r3, #1
 801016c:	4613      	mov	r3, r2
 801016e:	005b      	lsls	r3, r3, #1
 8010170:	4413      	add	r3, r2
 8010172:	00db      	lsls	r3, r3, #3
 8010174:	440b      	add	r3, r1
 8010176:	3304      	adds	r3, #4
 8010178:	687a      	ldr	r2, [r7, #4]
 801017a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 801017c:	491a      	ldr	r1, [pc, #104]	; (80101e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 801017e:	68fa      	ldr	r2, [r7, #12]
 8010180:	4613      	mov	r3, r2
 8010182:	005b      	lsls	r3, r3, #1
 8010184:	4413      	add	r3, r2
 8010186:	00db      	lsls	r3, r3, #3
 8010188:	440b      	add	r3, r1
 801018a:	3320      	adds	r3, #32
 801018c:	683a      	ldr	r2, [r7, #0]
 801018e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8010190:	4915      	ldr	r1, [pc, #84]	; (80101e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8010192:	68fa      	ldr	r2, [r7, #12]
 8010194:	4613      	mov	r3, r2
 8010196:	005b      	lsls	r3, r3, #1
 8010198:	4413      	add	r3, r2
 801019a:	00db      	lsls	r3, r3, #3
 801019c:	440b      	add	r3, r1
 801019e:	3328      	adds	r3, #40	; 0x28
 80101a0:	2200      	movs	r2, #0
 80101a2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 80101a4:	4910      	ldr	r1, [pc, #64]	; (80101e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80101a6:	68fa      	ldr	r2, [r7, #12]
 80101a8:	4613      	mov	r3, r2
 80101aa:	005b      	lsls	r3, r3, #1
 80101ac:	4413      	add	r3, r2
 80101ae:	00db      	lsls	r3, r3, #3
 80101b0:	440b      	add	r3, r1
 80101b2:	3324      	adds	r3, #36	; 0x24
 80101b4:	2200      	movs	r2, #0
 80101b6:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 80101b8:	490b      	ldr	r1, [pc, #44]	; (80101e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80101ba:	68fa      	ldr	r2, [r7, #12]
 80101bc:	4613      	mov	r3, r2
 80101be:	005b      	lsls	r3, r3, #1
 80101c0:	4413      	add	r3, r2
 80101c2:	00db      	lsls	r3, r3, #3
 80101c4:	440b      	add	r3, r1
 80101c6:	332c      	adds	r3, #44	; 0x2c
 80101c8:	6a3a      	ldr	r2, [r7, #32]
 80101ca:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80101cc:	693b      	ldr	r3, [r7, #16]
 80101ce:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80101d2:	2300      	movs	r3, #0
 80101d4:	617b      	str	r3, [r7, #20]
 80101d6:	e002      	b.n	80101de <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80101d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80101dc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80101de:	697b      	ldr	r3, [r7, #20]
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3718      	adds	r7, #24
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	2000aa28 	.word	0x2000aa28

080101ec <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 80101ec:	b580      	push	{r7, lr}
 80101ee:	af00      	add	r7, sp, #0
  _DoInit();
 80101f0:	f7ff fe0e 	bl	800fe10 <_DoInit>
}
 80101f4:	bf00      	nop
 80101f6:	bd80      	pop	{r7, pc}

080101f8 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b084      	sub	sp, #16
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	460b      	mov	r3, r1
 8010202:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	689b      	ldr	r3, [r3, #8]
 8010208:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	1c5a      	adds	r2, r3, #1
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	685b      	ldr	r3, [r3, #4]
 8010212:	429a      	cmp	r2, r3
 8010214:	d80e      	bhi.n	8010234 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681a      	ldr	r2, [r3, #0]
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	4413      	add	r3, r2
 801021e:	78fa      	ldrb	r2, [r7, #3]
 8010220:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	1c5a      	adds	r2, r3, #1
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	68db      	ldr	r3, [r3, #12]
 801022e:	1c5a      	adds	r2, r3, #1
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	689a      	ldr	r2, [r3, #8]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	429a      	cmp	r2, r3
 801023e:	d115      	bne.n	801026c <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	6918      	ldr	r0, [r3, #16]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	6819      	ldr	r1, [r3, #0]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	689b      	ldr	r3, [r3, #8]
 801024c:	461a      	mov	r2, r3
 801024e:	f7ff ff3f 	bl	80100d0 <SEGGER_RTT_Write>
 8010252:	4602      	mov	r2, r0
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	689b      	ldr	r3, [r3, #8]
 8010258:	429a      	cmp	r2, r3
 801025a:	d004      	beq.n	8010266 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010262:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8010264:	e002      	b.n	801026c <_StoreChar+0x74>
      p->Cnt = 0u;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	2200      	movs	r2, #0
 801026a:	609a      	str	r2, [r3, #8]
}
 801026c:	bf00      	nop
 801026e:	3710      	adds	r7, #16
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}

08010274 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8010274:	b580      	push	{r7, lr}
 8010276:	b08a      	sub	sp, #40	; 0x28
 8010278:	af00      	add	r7, sp, #0
 801027a:	60f8      	str	r0, [r7, #12]
 801027c:	60b9      	str	r1, [r7, #8]
 801027e:	607a      	str	r2, [r7, #4]
 8010280:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8010286:	2301      	movs	r3, #1
 8010288:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 801028a:	2301      	movs	r3, #1
 801028c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 801028e:	e007      	b.n	80102a0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8010290:	6a3a      	ldr	r2, [r7, #32]
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	fbb2 f3f3 	udiv	r3, r2, r3
 8010298:	623b      	str	r3, [r7, #32]
    Width++;
 801029a:	69fb      	ldr	r3, [r7, #28]
 801029c:	3301      	adds	r3, #1
 801029e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80102a0:	6a3a      	ldr	r2, [r7, #32]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d2f3      	bcs.n	8010290 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80102a8:	683a      	ldr	r2, [r7, #0]
 80102aa:	69fb      	ldr	r3, [r7, #28]
 80102ac:	429a      	cmp	r2, r3
 80102ae:	d901      	bls.n	80102b4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80102b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102b6:	f003 0301 	and.w	r3, r3, #1
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d125      	bne.n	801030a <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 80102be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d022      	beq.n	801030a <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80102c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102c6:	f003 0302 	and.w	r3, r3, #2
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d005      	beq.n	80102da <_PrintUnsigned+0x66>
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d102      	bne.n	80102da <_PrintUnsigned+0x66>
        c = '0';
 80102d4:	2330      	movs	r3, #48	; 0x30
 80102d6:	76fb      	strb	r3, [r7, #27]
 80102d8:	e001      	b.n	80102de <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80102da:	2320      	movs	r3, #32
 80102dc:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80102de:	e00b      	b.n	80102f8 <_PrintUnsigned+0x84>
        FieldWidth--;
 80102e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102e2:	3b01      	subs	r3, #1
 80102e4:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80102e6:	7efb      	ldrb	r3, [r7, #27]
 80102e8:	4619      	mov	r1, r3
 80102ea:	68f8      	ldr	r0, [r7, #12]
 80102ec:	f7ff ff84 	bl	80101f8 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	db07      	blt.n	8010308 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80102f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d005      	beq.n	801030a <_PrintUnsigned+0x96>
 80102fe:	69fa      	ldr	r2, [r7, #28]
 8010300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010302:	429a      	cmp	r2, r3
 8010304:	d3ec      	bcc.n	80102e0 <_PrintUnsigned+0x6c>
 8010306:	e000      	b.n	801030a <_PrintUnsigned+0x96>
          break;
 8010308:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	68db      	ldr	r3, [r3, #12]
 801030e:	2b00      	cmp	r3, #0
 8010310:	db55      	blt.n	80103be <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	2b01      	cmp	r3, #1
 8010316:	d903      	bls.n	8010320 <_PrintUnsigned+0xac>
        NumDigits--;
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	3b01      	subs	r3, #1
 801031c:	603b      	str	r3, [r7, #0]
 801031e:	e009      	b.n	8010334 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8010320:	68ba      	ldr	r2, [r7, #8]
 8010322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010324:	fbb2 f3f3 	udiv	r3, r2, r3
 8010328:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 801032a:	697a      	ldr	r2, [r7, #20]
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	429a      	cmp	r2, r3
 8010330:	d200      	bcs.n	8010334 <_PrintUnsigned+0xc0>
          break;
 8010332:	e005      	b.n	8010340 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8010334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010336:	687a      	ldr	r2, [r7, #4]
 8010338:	fb02 f303 	mul.w	r3, r2, r3
 801033c:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 801033e:	e7e8      	b.n	8010312 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8010340:	68ba      	ldr	r2, [r7, #8]
 8010342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010344:	fbb2 f3f3 	udiv	r3, r2, r3
 8010348:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801034e:	fb02 f303 	mul.w	r3, r2, r3
 8010352:	68ba      	ldr	r2, [r7, #8]
 8010354:	1ad3      	subs	r3, r2, r3
 8010356:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8010358:	4a1b      	ldr	r2, [pc, #108]	; (80103c8 <_PrintUnsigned+0x154>)
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	4413      	add	r3, r2
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	4619      	mov	r1, r3
 8010362:	68f8      	ldr	r0, [r7, #12]
 8010364:	f7ff ff48 	bl	80101f8 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	68db      	ldr	r3, [r3, #12]
 801036c:	2b00      	cmp	r3, #0
 801036e:	db08      	blt.n	8010382 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8010370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	fbb2 f3f3 	udiv	r3, r2, r3
 8010378:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 801037a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037c:	2b00      	cmp	r3, #0
 801037e:	d1df      	bne.n	8010340 <_PrintUnsigned+0xcc>
 8010380:	e000      	b.n	8010384 <_PrintUnsigned+0x110>
        break;
 8010382:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8010384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010386:	f003 0301 	and.w	r3, r3, #1
 801038a:	2b00      	cmp	r3, #0
 801038c:	d017      	beq.n	80103be <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 801038e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010390:	2b00      	cmp	r3, #0
 8010392:	d014      	beq.n	80103be <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8010394:	e00a      	b.n	80103ac <_PrintUnsigned+0x138>
          FieldWidth--;
 8010396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010398:	3b01      	subs	r3, #1
 801039a:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 801039c:	2120      	movs	r1, #32
 801039e:	68f8      	ldr	r0, [r7, #12]
 80103a0:	f7ff ff2a 	bl	80101f8 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	68db      	ldr	r3, [r3, #12]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	db07      	blt.n	80103bc <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80103ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d005      	beq.n	80103be <_PrintUnsigned+0x14a>
 80103b2:	69fa      	ldr	r2, [r7, #28]
 80103b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d3ed      	bcc.n	8010396 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 80103ba:	e000      	b.n	80103be <_PrintUnsigned+0x14a>
            break;
 80103bc:	bf00      	nop
}
 80103be:	bf00      	nop
 80103c0:	3728      	adds	r7, #40	; 0x28
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
 80103c6:	bf00      	nop
 80103c8:	0802d900 	.word	0x0802d900

080103cc <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b088      	sub	sp, #32
 80103d0:	af02      	add	r7, sp, #8
 80103d2:	60f8      	str	r0, [r7, #12]
 80103d4:	60b9      	str	r1, [r7, #8]
 80103d6:	607a      	str	r2, [r7, #4]
 80103d8:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	bfb8      	it	lt
 80103e0:	425b      	neglt	r3, r3
 80103e2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80103e4:	2301      	movs	r3, #1
 80103e6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80103e8:	e007      	b.n	80103fa <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	693a      	ldr	r2, [r7, #16]
 80103ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80103f2:	613b      	str	r3, [r7, #16]
    Width++;
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	3301      	adds	r3, #1
 80103f8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	693a      	ldr	r2, [r7, #16]
 80103fe:	429a      	cmp	r2, r3
 8010400:	daf3      	bge.n	80103ea <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8010402:	683a      	ldr	r2, [r7, #0]
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	429a      	cmp	r2, r3
 8010408:	d901      	bls.n	801040e <_PrintInt+0x42>
    Width = NumDigits;
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 801040e:	6a3b      	ldr	r3, [r7, #32]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d00a      	beq.n	801042a <_PrintInt+0x5e>
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	2b00      	cmp	r3, #0
 8010418:	db04      	blt.n	8010424 <_PrintInt+0x58>
 801041a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801041c:	f003 0304 	and.w	r3, r3, #4
 8010420:	2b00      	cmp	r3, #0
 8010422:	d002      	beq.n	801042a <_PrintInt+0x5e>
    FieldWidth--;
 8010424:	6a3b      	ldr	r3, [r7, #32]
 8010426:	3b01      	subs	r3, #1
 8010428:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 801042a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042c:	f003 0302 	and.w	r3, r3, #2
 8010430:	2b00      	cmp	r3, #0
 8010432:	d002      	beq.n	801043a <_PrintInt+0x6e>
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d01c      	beq.n	8010474 <_PrintInt+0xa8>
 801043a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043c:	f003 0301 	and.w	r3, r3, #1
 8010440:	2b00      	cmp	r3, #0
 8010442:	d117      	bne.n	8010474 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8010444:	6a3b      	ldr	r3, [r7, #32]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d014      	beq.n	8010474 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 801044a:	e00a      	b.n	8010462 <_PrintInt+0x96>
        FieldWidth--;
 801044c:	6a3b      	ldr	r3, [r7, #32]
 801044e:	3b01      	subs	r3, #1
 8010450:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8010452:	2120      	movs	r1, #32
 8010454:	68f8      	ldr	r0, [r7, #12]
 8010456:	f7ff fecf 	bl	80101f8 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	68db      	ldr	r3, [r3, #12]
 801045e:	2b00      	cmp	r3, #0
 8010460:	db07      	blt.n	8010472 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8010462:	6a3b      	ldr	r3, [r7, #32]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d005      	beq.n	8010474 <_PrintInt+0xa8>
 8010468:	697a      	ldr	r2, [r7, #20]
 801046a:	6a3b      	ldr	r3, [r7, #32]
 801046c:	429a      	cmp	r2, r3
 801046e:	d3ed      	bcc.n	801044c <_PrintInt+0x80>
 8010470:	e000      	b.n	8010474 <_PrintInt+0xa8>
          break;
 8010472:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	68db      	ldr	r3, [r3, #12]
 8010478:	2b00      	cmp	r3, #0
 801047a:	db4a      	blt.n	8010512 <_PrintInt+0x146>
    if (v < 0) {
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	2b00      	cmp	r3, #0
 8010480:	da07      	bge.n	8010492 <_PrintInt+0xc6>
      v = -v;
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	425b      	negs	r3, r3
 8010486:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8010488:	212d      	movs	r1, #45	; 0x2d
 801048a:	68f8      	ldr	r0, [r7, #12]
 801048c:	f7ff feb4 	bl	80101f8 <_StoreChar>
 8010490:	e008      	b.n	80104a4 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8010492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010494:	f003 0304 	and.w	r3, r3, #4
 8010498:	2b00      	cmp	r3, #0
 801049a:	d003      	beq.n	80104a4 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 801049c:	212b      	movs	r1, #43	; 0x2b
 801049e:	68f8      	ldr	r0, [r7, #12]
 80104a0:	f7ff feaa 	bl	80101f8 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	68db      	ldr	r3, [r3, #12]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	db32      	blt.n	8010512 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80104ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ae:	f003 0302 	and.w	r3, r3, #2
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d01f      	beq.n	80104f6 <_PrintInt+0x12a>
 80104b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b8:	f003 0301 	and.w	r3, r3, #1
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d11a      	bne.n	80104f6 <_PrintInt+0x12a>
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d117      	bne.n	80104f6 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 80104c6:	6a3b      	ldr	r3, [r7, #32]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d014      	beq.n	80104f6 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80104cc:	e00a      	b.n	80104e4 <_PrintInt+0x118>
            FieldWidth--;
 80104ce:	6a3b      	ldr	r3, [r7, #32]
 80104d0:	3b01      	subs	r3, #1
 80104d2:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 80104d4:	2130      	movs	r1, #48	; 0x30
 80104d6:	68f8      	ldr	r0, [r7, #12]
 80104d8:	f7ff fe8e 	bl	80101f8 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	68db      	ldr	r3, [r3, #12]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	db07      	blt.n	80104f4 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80104e4:	6a3b      	ldr	r3, [r7, #32]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d005      	beq.n	80104f6 <_PrintInt+0x12a>
 80104ea:	697a      	ldr	r2, [r7, #20]
 80104ec:	6a3b      	ldr	r3, [r7, #32]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d3ed      	bcc.n	80104ce <_PrintInt+0x102>
 80104f2:	e000      	b.n	80104f6 <_PrintInt+0x12a>
              break;
 80104f4:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	68db      	ldr	r3, [r3, #12]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	db09      	blt.n	8010512 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 80104fe:	68b9      	ldr	r1, [r7, #8]
 8010500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010502:	9301      	str	r3, [sp, #4]
 8010504:	6a3b      	ldr	r3, [r7, #32]
 8010506:	9300      	str	r3, [sp, #0]
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	687a      	ldr	r2, [r7, #4]
 801050c:	68f8      	ldr	r0, [r7, #12]
 801050e:	f7ff feb1 	bl	8010274 <_PrintUnsigned>
      }
    }
  }
}
 8010512:	bf00      	nop
 8010514:	3718      	adds	r7, #24
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
	...

0801051c <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 801051c:	b580      	push	{r7, lr}
 801051e:	b0d2      	sub	sp, #328	; 0x148
 8010520:	af02      	add	r7, sp, #8
 8010522:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010526:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801052a:	6018      	str	r0, [r3, #0]
 801052c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010530:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8010534:	6019      	str	r1, [r3, #0]
 8010536:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801053a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801053e:	601a      	str	r2, [r3, #0]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8010540:	f107 0310 	add.w	r3, r7, #16
 8010544:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8010548:	f44f 7380 	mov.w	r3, #256	; 0x100
 801054c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  BufferDesc.Cnt            = 0u;
 8010550:	2300      	movs	r3, #0
 8010552:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  BufferDesc.RTTBufferIndex = BufferIndex;
 8010556:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801055a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  BufferDesc.ReturnValue    = 0;
 8010564:	2300      	movs	r3, #0
 8010566:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

  do {
    c = *sFormat;
 801056a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801056e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	781b      	ldrb	r3, [r3, #0]
 8010576:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    sFormat++;
 801057a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801057e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8010582:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010586:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 801058a:	6812      	ldr	r2, [r2, #0]
 801058c:	3201      	adds	r2, #1
 801058e:	601a      	str	r2, [r3, #0]
    if (c == 0u) {
 8010590:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8010594:	2b00      	cmp	r3, #0
 8010596:	f000 825a 	beq.w	8010a4e <SEGGER_RTT_vprintf+0x532>
      break;
    }
    if (c == '%') {
 801059a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 801059e:	2b25      	cmp	r3, #37	; 0x25
 80105a0:	f040 8247 	bne.w	8010a32 <SEGGER_RTT_vprintf+0x516>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80105a4:	2300      	movs	r3, #0
 80105a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
      v = 1;
 80105aa:	2301      	movs	r3, #1
 80105ac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
      do {
        c = *sFormat;
 80105b0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80105b4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	781b      	ldrb	r3, [r3, #0]
 80105bc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        switch (c) {
 80105c0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80105c4:	3b23      	subs	r3, #35	; 0x23
 80105c6:	2b0d      	cmp	r3, #13
 80105c8:	d866      	bhi.n	8010698 <SEGGER_RTT_vprintf+0x17c>
 80105ca:	a201      	add	r2, pc, #4	; (adr r2, 80105d0 <SEGGER_RTT_vprintf+0xb4>)
 80105cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105d0:	08010675 	.word	0x08010675
 80105d4:	08010699 	.word	0x08010699
 80105d8:	08010699 	.word	0x08010699
 80105dc:	08010699 	.word	0x08010699
 80105e0:	08010699 	.word	0x08010699
 80105e4:	08010699 	.word	0x08010699
 80105e8:	08010699 	.word	0x08010699
 80105ec:	08010699 	.word	0x08010699
 80105f0:	08010651 	.word	0x08010651
 80105f4:	08010699 	.word	0x08010699
 80105f8:	08010609 	.word	0x08010609
 80105fc:	08010699 	.word	0x08010699
 8010600:	08010699 	.word	0x08010699
 8010604:	0801062d 	.word	0x0801062d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8010608:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801060c:	f043 0301 	orr.w	r3, r3, #1
 8010610:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8010614:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010618:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801061c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010620:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8010624:	6812      	ldr	r2, [r2, #0]
 8010626:	3201      	adds	r2, #1
 8010628:	601a      	str	r2, [r3, #0]
 801062a:	e039      	b.n	80106a0 <SEGGER_RTT_vprintf+0x184>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 801062c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010630:	f043 0302 	orr.w	r3, r3, #2
 8010634:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8010638:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801063c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8010640:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010644:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8010648:	6812      	ldr	r2, [r2, #0]
 801064a:	3201      	adds	r2, #1
 801064c:	601a      	str	r2, [r3, #0]
 801064e:	e027      	b.n	80106a0 <SEGGER_RTT_vprintf+0x184>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8010650:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010654:	f043 0304 	orr.w	r3, r3, #4
 8010658:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 801065c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010660:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8010664:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010668:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 801066c:	6812      	ldr	r2, [r2, #0]
 801066e:	3201      	adds	r2, #1
 8010670:	601a      	str	r2, [r3, #0]
 8010672:	e015      	b.n	80106a0 <SEGGER_RTT_vprintf+0x184>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8010674:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010678:	f043 0308 	orr.w	r3, r3, #8
 801067c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8010680:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010684:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8010688:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801068c:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8010690:	6812      	ldr	r2, [r2, #0]
 8010692:	3201      	adds	r2, #1
 8010694:	601a      	str	r2, [r3, #0]
 8010696:	e003      	b.n	80106a0 <SEGGER_RTT_vprintf+0x184>
        default:  v = 0; break;
 8010698:	2300      	movs	r3, #0
 801069a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 801069e:	bf00      	nop
        }
      } while (v);
 80106a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d183      	bne.n	80105b0 <SEGGER_RTT_vprintf+0x94>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80106a8:	2300      	movs	r3, #0
 80106aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      do {
        c = *sFormat;
 80106ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80106b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        if ((c < '0') || (c > '9')) {
 80106be:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80106c2:	2b2f      	cmp	r3, #47	; 0x2f
 80106c4:	d91c      	bls.n	8010700 <SEGGER_RTT_vprintf+0x1e4>
 80106c6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80106ca:	2b39      	cmp	r3, #57	; 0x39
 80106cc:	d818      	bhi.n	8010700 <SEGGER_RTT_vprintf+0x1e4>
          break;
        }
        sFormat++;
 80106ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80106d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80106d6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80106da:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80106de:	6812      	ldr	r2, [r2, #0]
 80106e0:	3201      	adds	r2, #1
 80106e2:	601a      	str	r2, [r3, #0]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 80106e4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80106e8:	4613      	mov	r3, r2
 80106ea:	009b      	lsls	r3, r3, #2
 80106ec:	4413      	add	r3, r2
 80106ee:	005b      	lsls	r3, r3, #1
 80106f0:	461a      	mov	r2, r3
 80106f2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80106f6:	4413      	add	r3, r2
 80106f8:	3b30      	subs	r3, #48	; 0x30
 80106fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        c = *sFormat;
 80106fe:	e7d6      	b.n	80106ae <SEGGER_RTT_vprintf+0x192>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8010700:	2300      	movs	r3, #0
 8010702:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      c = *sFormat;
 8010706:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801070a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	781b      	ldrb	r3, [r3, #0]
 8010712:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
      if (c == '.') {
 8010716:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 801071a:	2b2e      	cmp	r3, #46	; 0x2e
 801071c:	d133      	bne.n	8010786 <SEGGER_RTT_vprintf+0x26a>
        sFormat++;
 801071e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010722:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8010726:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801072a:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 801072e:	6812      	ldr	r2, [r2, #0]
 8010730:	3201      	adds	r2, #1
 8010732:	601a      	str	r2, [r3, #0]
        do {
          c = *sFormat;
 8010734:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010738:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
          if ((c < '0') || (c > '9')) {
 8010744:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8010748:	2b2f      	cmp	r3, #47	; 0x2f
 801074a:	d91c      	bls.n	8010786 <SEGGER_RTT_vprintf+0x26a>
 801074c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8010750:	2b39      	cmp	r3, #57	; 0x39
 8010752:	d818      	bhi.n	8010786 <SEGGER_RTT_vprintf+0x26a>
            break;
          }
          sFormat++;
 8010754:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010758:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801075c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010760:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8010764:	6812      	ldr	r2, [r2, #0]
 8010766:	3201      	adds	r2, #1
 8010768:	601a      	str	r2, [r3, #0]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 801076a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801076e:	4613      	mov	r3, r2
 8010770:	009b      	lsls	r3, r3, #2
 8010772:	4413      	add	r3, r2
 8010774:	005b      	lsls	r3, r3, #1
 8010776:	461a      	mov	r2, r3
 8010778:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 801077c:	4413      	add	r3, r2
 801077e:	3b30      	subs	r3, #48	; 0x30
 8010780:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          c = *sFormat;
 8010784:	e7d6      	b.n	8010734 <SEGGER_RTT_vprintf+0x218>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8010786:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801078a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
      do {
        if ((c == 'l') || (c == 'h')) {
 8010796:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 801079a:	2b6c      	cmp	r3, #108	; 0x6c
 801079c:	d003      	beq.n	80107a6 <SEGGER_RTT_vprintf+0x28a>
 801079e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80107a2:	2b68      	cmp	r3, #104	; 0x68
 80107a4:	d113      	bne.n	80107ce <SEGGER_RTT_vprintf+0x2b2>
          sFormat++;
 80107a6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80107aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80107ae:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80107b2:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80107b6:	6812      	ldr	r2, [r2, #0]
 80107b8:	3201      	adds	r2, #1
 80107ba:	601a      	str	r2, [r3, #0]
          c = *sFormat;
 80107bc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80107c0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	781b      	ldrb	r3, [r3, #0]
 80107c8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        if ((c == 'l') || (c == 'h')) {
 80107cc:	e7e3      	b.n	8010796 <SEGGER_RTT_vprintf+0x27a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80107ce:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80107d2:	2b25      	cmp	r3, #37	; 0x25
 80107d4:	f000 8119 	beq.w	8010a0a <SEGGER_RTT_vprintf+0x4ee>
 80107d8:	2b25      	cmp	r3, #37	; 0x25
 80107da:	f2c0 811d 	blt.w	8010a18 <SEGGER_RTT_vprintf+0x4fc>
 80107de:	2b78      	cmp	r3, #120	; 0x78
 80107e0:	f300 811a 	bgt.w	8010a18 <SEGGER_RTT_vprintf+0x4fc>
 80107e4:	2b58      	cmp	r3, #88	; 0x58
 80107e6:	f2c0 8117 	blt.w	8010a18 <SEGGER_RTT_vprintf+0x4fc>
 80107ea:	3b58      	subs	r3, #88	; 0x58
 80107ec:	2b20      	cmp	r3, #32
 80107ee:	f200 8113 	bhi.w	8010a18 <SEGGER_RTT_vprintf+0x4fc>
 80107f2:	a201      	add	r2, pc, #4	; (adr r2, 80107f8 <SEGGER_RTT_vprintf+0x2dc>)
 80107f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107f8:	08010937 	.word	0x08010937
 80107fc:	08010a19 	.word	0x08010a19
 8010800:	08010a19 	.word	0x08010a19
 8010804:	08010a19 	.word	0x08010a19
 8010808:	08010a19 	.word	0x08010a19
 801080c:	08010a19 	.word	0x08010a19
 8010810:	08010a19 	.word	0x08010a19
 8010814:	08010a19 	.word	0x08010a19
 8010818:	08010a19 	.word	0x08010a19
 801081c:	08010a19 	.word	0x08010a19
 8010820:	08010a19 	.word	0x08010a19
 8010824:	0801087d 	.word	0x0801087d
 8010828:	080108b7 	.word	0x080108b7
 801082c:	08010a19 	.word	0x08010a19
 8010830:	08010a19 	.word	0x08010a19
 8010834:	08010a19 	.word	0x08010a19
 8010838:	08010a19 	.word	0x08010a19
 801083c:	08010a19 	.word	0x08010a19
 8010840:	08010a19 	.word	0x08010a19
 8010844:	08010a19 	.word	0x08010a19
 8010848:	08010a19 	.word	0x08010a19
 801084c:	08010a19 	.word	0x08010a19
 8010850:	08010a19 	.word	0x08010a19
 8010854:	08010a19 	.word	0x08010a19
 8010858:	080109d1 	.word	0x080109d1
 801085c:	08010a19 	.word	0x08010a19
 8010860:	08010a19 	.word	0x08010a19
 8010864:	08010977 	.word	0x08010977
 8010868:	08010a19 	.word	0x08010a19
 801086c:	080108f7 	.word	0x080108f7
 8010870:	08010a19 	.word	0x08010a19
 8010874:	08010a19 	.word	0x08010a19
 8010878:	08010937 	.word	0x08010937
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 801087c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010880:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	1d19      	adds	r1, r3, #4
 801088a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801088e:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8010892:	6812      	ldr	r2, [r2, #0]
 8010894:	6011      	str	r1, [r2, #0]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        c0 = (char)v;
 801089c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80108a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        _StoreChar(&BufferDesc, c0);
 80108a4:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 80108a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80108ac:	4611      	mov	r1, r2
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7ff fca2 	bl	80101f8 <_StoreChar>
        break;
 80108b4:	e0b1      	b.n	8010a1a <SEGGER_RTT_vprintf+0x4fe>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80108b6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80108ba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	1d19      	adds	r1, r3, #4
 80108c4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80108c8:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80108cc:	6812      	ldr	r2, [r2, #0]
 80108ce:	6011      	str	r1, [r2, #0]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80108d6:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80108da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80108de:	9301      	str	r3, [sp, #4]
 80108e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80108e4:	9300      	str	r3, [sp, #0]
 80108e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80108ea:	220a      	movs	r2, #10
 80108ec:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 80108f0:	f7ff fd6c 	bl	80103cc <_PrintInt>
        break;
 80108f4:	e091      	b.n	8010a1a <SEGGER_RTT_vprintf+0x4fe>
      case 'u':
        v = va_arg(*pParamList, int);
 80108f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80108fa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	1d19      	adds	r1, r3, #4
 8010904:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010908:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 801090c:	6812      	ldr	r2, [r2, #0]
 801090e:	6011      	str	r1, [r2, #0]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8010916:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 801091a:	f507 7088 	add.w	r0, r7, #272	; 0x110
 801091e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010922:	9301      	str	r3, [sp, #4]
 8010924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010928:	9300      	str	r3, [sp, #0]
 801092a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801092e:	220a      	movs	r2, #10
 8010930:	f7ff fca0 	bl	8010274 <_PrintUnsigned>
        break;
 8010934:	e071      	b.n	8010a1a <SEGGER_RTT_vprintf+0x4fe>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8010936:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801093a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	1d19      	adds	r1, r3, #4
 8010944:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010948:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 801094c:	6812      	ldr	r2, [r2, #0]
 801094e:	6011      	str	r1, [r2, #0]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8010956:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 801095a:	f507 7088 	add.w	r0, r7, #272	; 0x110
 801095e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010962:	9301      	str	r3, [sp, #4]
 8010964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010968:	9300      	str	r3, [sp, #0]
 801096a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801096e:	2210      	movs	r2, #16
 8010970:	f7ff fc80 	bl	8010274 <_PrintUnsigned>
        break;
 8010974:	e051      	b.n	8010a1a <SEGGER_RTT_vprintf+0x4fe>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8010976:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801097a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	1d19      	adds	r1, r3, #4
 8010984:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010988:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 801098c:	6812      	ldr	r2, [r2, #0]
 801098e:	6011      	str	r1, [r2, #0]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          do {
            c = *s;
 8010996:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801099a:	781b      	ldrb	r3, [r3, #0]
 801099c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
            s++;
 80109a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80109a4:	3301      	adds	r3, #1
 80109a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if (c == '\0') {
 80109aa:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d00c      	beq.n	80109cc <SEGGER_RTT_vprintf+0x4b0>
              break;
            }
           _StoreChar(&BufferDesc, c);
 80109b2:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80109b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80109ba:	4611      	mov	r1, r2
 80109bc:	4618      	mov	r0, r3
 80109be:	f7ff fc1b 	bl	80101f8 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 80109c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	dae5      	bge.n	8010996 <SEGGER_RTT_vprintf+0x47a>
        }
        break;
 80109ca:	e026      	b.n	8010a1a <SEGGER_RTT_vprintf+0x4fe>
              break;
 80109cc:	bf00      	nop
        break;
 80109ce:	e024      	b.n	8010a1a <SEGGER_RTT_vprintf+0x4fe>
      case 'p':
        v = va_arg(*pParamList, int);
 80109d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80109d4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	1d19      	adds	r1, r3, #4
 80109de:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80109e2:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80109e6:	6812      	ldr	r2, [r2, #0]
 80109e8:	6011      	str	r1, [r2, #0]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 80109f0:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 80109f4:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80109f8:	2300      	movs	r3, #0
 80109fa:	9301      	str	r3, [sp, #4]
 80109fc:	2308      	movs	r3, #8
 80109fe:	9300      	str	r3, [sp, #0]
 8010a00:	2308      	movs	r3, #8
 8010a02:	2210      	movs	r2, #16
 8010a04:	f7ff fc36 	bl	8010274 <_PrintUnsigned>
        break;
 8010a08:	e007      	b.n	8010a1a <SEGGER_RTT_vprintf+0x4fe>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8010a0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a0e:	2125      	movs	r1, #37	; 0x25
 8010a10:	4618      	mov	r0, r3
 8010a12:	f7ff fbf1 	bl	80101f8 <_StoreChar>
        break;
 8010a16:	e000      	b.n	8010a1a <SEGGER_RTT_vprintf+0x4fe>
      default:
        break;
 8010a18:	bf00      	nop
      }
      sFormat++;
 8010a1a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010a1e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8010a22:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010a26:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8010a2a:	6812      	ldr	r2, [r2, #0]
 8010a2c:	3201      	adds	r2, #1
 8010a2e:	601a      	str	r2, [r3, #0]
 8010a30:	e007      	b.n	8010a42 <SEGGER_RTT_vprintf+0x526>
    } else {
      _StoreChar(&BufferDesc, c);
 8010a32:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8010a36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a3a:	4611      	mov	r1, r2
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7ff fbdb 	bl	80101f8 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8010a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	f6bf ad8f 	bge.w	801056a <SEGGER_RTT_vprintf+0x4e>
 8010a4c:	e000      	b.n	8010a50 <SEGGER_RTT_vprintf+0x534>
      break;
 8010a4e:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8010a50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	dd15      	ble.n	8010a84 <SEGGER_RTT_vprintf+0x568>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8010a58:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d00a      	beq.n	8010a76 <SEGGER_RTT_vprintf+0x55a>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8010a60:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8010a64:	f107 0110 	add.w	r1, r7, #16
 8010a68:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010a6c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8010a70:	6818      	ldr	r0, [r3, #0]
 8010a72:	f7ff fb2d 	bl	80100d0 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8010a76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010a7a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8010a7e:	4413      	add	r3, r2
 8010a80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  }
  return BufferDesc.ReturnValue;
 8010a84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
}
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}
 8010a92:	bf00      	nop

08010a94 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8010a94:	b40e      	push	{r1, r2, r3}
 8010a96:	b580      	push	{r7, lr}
 8010a98:	b085      	sub	sp, #20
 8010a9a:	af00      	add	r7, sp, #0
 8010a9c:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8010a9e:	f107 0320 	add.w	r3, r7, #32
 8010aa2:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8010aa4:	f107 0308 	add.w	r3, r7, #8
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	69f9      	ldr	r1, [r7, #28]
 8010aac:	6878      	ldr	r0, [r7, #4]
 8010aae:	f7ff fd35 	bl	801051c <SEGGER_RTT_vprintf>
 8010ab2:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3714      	adds	r7, #20
 8010aba:	46bd      	mov	sp, r7
 8010abc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010ac0:	b003      	add	sp, #12
 8010ac2:	4770      	bx	lr

08010ac4 <axis3fSubSamplerInit>:
 */

#include <string.h>
#include "axis3fSubSampler.h"

void axis3fSubSamplerInit(Axis3fSubSampler_t* this, const float conversionFactor) {
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
 8010acc:	ed87 0a00 	vstr	s0, [r7]
  memset(this, 0, sizeof(Axis3fSubSampler_t));
 8010ad0:	2220      	movs	r2, #32
 8010ad2:	2100      	movs	r1, #0
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f012 ff1b 	bl	8023910 <memset>
  this->conversionFactor = conversionFactor;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	683a      	ldr	r2, [r7, #0]
 8010ade:	611a      	str	r2, [r3, #16]
}
 8010ae0:	bf00      	nop
 8010ae2:	3708      	adds	r7, #8
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}

08010ae8 <axis3fSubSamplerAccumulate>:

void axis3fSubSamplerAccumulate(Axis3fSubSampler_t* this, const Axis3f* sample) {
 8010ae8:	b480      	push	{r7}
 8010aea:	b083      	sub	sp, #12
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
 8010af0:	6039      	str	r1, [r7, #0]
  this->sum.x += sample->x;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	ed93 7a00 	vldr	s14, [r3]
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	edd3 7a00 	vldr	s15, [r3]
 8010afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	edc3 7a00 	vstr	s15, [r3]
  this->sum.y += sample->y;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	edd3 7a01 	vldr	s15, [r3, #4]
 8010b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	edc3 7a01 	vstr	s15, [r3, #4]
  this->sum.z += sample->z;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	ed93 7a02 	vldr	s14, [r3, #8]
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	edd3 7a02 	vldr	s15, [r3, #8]
 8010b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	edc3 7a02 	vstr	s15, [r3, #8]

  this->count++;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	68db      	ldr	r3, [r3, #12]
 8010b38:	1c5a      	adds	r2, r3, #1
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	60da      	str	r2, [r3, #12]
}
 8010b3e:	bf00      	nop
 8010b40:	370c      	adds	r7, #12
 8010b42:	46bd      	mov	sp, r7
 8010b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b48:	4770      	bx	lr

08010b4a <axis3fSubSamplerFinalize>:

Axis3f* axis3fSubSamplerFinalize(Axis3fSubSampler_t* this) {
 8010b4a:	b480      	push	{r7}
 8010b4c:	b087      	sub	sp, #28
 8010b4e:	af00      	add	r7, sp, #0
 8010b50:	6078      	str	r0, [r7, #4]
  if (this->count > 0) {
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	68db      	ldr	r3, [r3, #12]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d041      	beq.n	8010bde <axis3fSubSamplerFinalize+0x94>
    this->subSample.x = this->sum.x * this->conversionFactor / this->count;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	ed93 7a00 	vldr	s14, [r3]
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	edd3 7a04 	vldr	s15, [r3, #16]
 8010b66:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	68db      	ldr	r3, [r3, #12]
 8010b6e:	ee07 3a90 	vmov	s15, r3
 8010b72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	edc3 7a05 	vstr	s15, [r3, #20]
    this->subSample.y = this->sum.y * this->conversionFactor / this->count;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	ed93 7a01 	vldr	s14, [r3, #4]
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	edd3 7a04 	vldr	s15, [r3, #16]
 8010b8c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	68db      	ldr	r3, [r3, #12]
 8010b94:	ee07 3a90 	vmov	s15, r3
 8010b98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	edc3 7a06 	vstr	s15, [r3, #24]
    this->subSample.z = this->sum.z * this->conversionFactor / this->count;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	ed93 7a02 	vldr	s14, [r3, #8]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	edd3 7a04 	vldr	s15, [r3, #16]
 8010bb2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	68db      	ldr	r3, [r3, #12]
 8010bba:	ee07 3a90 	vmov	s15, r3
 8010bbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	edc3 7a07 	vstr	s15, [r3, #28]

    // Reset
    this->count = 0;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	60da      	str	r2, [r3, #12]
    this->sum = (Axis3f){.axis={0}};
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	6013      	str	r3, [r2, #0]
 8010bda:	6053      	str	r3, [r2, #4]
 8010bdc:	6093      	str	r3, [r2, #8]
  }

  return &this->subSample;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	3314      	adds	r3, #20
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	371c      	adds	r7, #28
 8010be6:	46bd      	mov	sp, r7
 8010be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bec:	4770      	bx	lr
	...

08010bf0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8010bf4:	f3bf 8f4f 	dsb	sy
}
 8010bf8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8010bfa:	4b06      	ldr	r3, [pc, #24]	; (8010c14 <__NVIC_SystemReset+0x24>)
 8010bfc:	68db      	ldr	r3, [r3, #12]
 8010bfe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8010c02:	4904      	ldr	r1, [pc, #16]	; (8010c14 <__NVIC_SystemReset+0x24>)
 8010c04:	4b04      	ldr	r3, [pc, #16]	; (8010c18 <__NVIC_SystemReset+0x28>)
 8010c06:	4313      	orrs	r3, r2
 8010c08:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8010c0a:	f3bf 8f4f 	dsb	sy
}
 8010c0e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8010c10:	bf00      	nop
 8010c12:	e7fd      	b.n	8010c10 <__NVIC_SystemReset+0x20>
 8010c14:	e000ed00 	.word	0xe000ed00
 8010c18:	05fa0004 	.word	0x05fa0004

08010c1c <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b086      	sub	sp, #24
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	60f8      	str	r0, [r7, #12]
 8010c24:	60b9      	str	r1, [r7, #8]
 8010c26:	607a      	str	r2, [r7, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c2c:	f383 8811 	msr	BASEPRI, r3
 8010c30:	f3bf 8f6f 	isb	sy
 8010c34:	f3bf 8f4f 	dsb	sy
 8010c38:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010c3a:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 8010c3c:	6879      	ldr	r1, [r7, #4]
 8010c3e:	68b8      	ldr	r0, [r7, #8]
 8010c40:	f000 f810 	bl	8010c64 <storeAssertFileData>
//  DEBUG_PRINT("Assert failed %s:%d\n", file, line);
//  motorsStop();
  ledShowFaultPattern();
 8010c44:	f7f3 ff9c 	bl	8004b80 <ledShowFaultPattern>

  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
 8010c48:	4b05      	ldr	r3, [pc, #20]	; (8010c60 <assertFail+0x44>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	f003 0301 	and.w	r3, r3, #1
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d101      	bne.n	8010c58 <assertFail+0x3c>
  {
    // Only reset if debugger is not connected
    NVIC_SystemReset();
 8010c54:	f7ff ffcc 	bl	8010bf0 <__NVIC_SystemReset>
  }
}
 8010c58:	bf00      	nop
 8010c5a:	3718      	adds	r7, #24
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	bd80      	pop	{r7, pc}
 8010c60:	e000edf0 	.word	0xe000edf0

08010c64 <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 8010c64:	b480      	push	{r7}
 8010c66:	b083      	sub	sp, #12
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 8010c6e:	4b0b      	ldr	r3, [pc, #44]	; (8010c9c <storeAssertFileData+0x38>)
 8010c70:	4a0b      	ldr	r2, [pc, #44]	; (8010ca0 <storeAssertFileData+0x3c>)
 8010c72:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 8010c74:	4b09      	ldr	r3, [pc, #36]	; (8010c9c <storeAssertFileData+0x38>)
 8010c76:	2201      	movs	r2, #1
 8010c78:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 8010c7a:	4b08      	ldr	r3, [pc, #32]	; (8010c9c <storeAssertFileData+0x38>)
 8010c7c:	791a      	ldrb	r2, [r3, #4]
 8010c7e:	4b09      	ldr	r3, [pc, #36]	; (8010ca4 <storeAssertFileData+0x40>)
 8010c80:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 8010c82:	4a06      	ldr	r2, [pc, #24]	; (8010c9c <storeAssertFileData+0x38>)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 8010c88:	4a04      	ldr	r2, [pc, #16]	; (8010c9c <storeAssertFileData+0x38>)
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	60d3      	str	r3, [r2, #12]
}
 8010c8e:	bf00      	nop
 8010c90:	370c      	adds	r7, #12
 8010c92:	46bd      	mov	sp, r7
 8010c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c98:	4770      	bx	lr
 8010c9a:	bf00      	nop
 8010c9c:	20006260 	.word	0x20006260
 8010ca0:	2f8a001f 	.word	0x2f8a001f
 8010ca4:	2000baf0 	.word	0x2000baf0

08010ca8 <consoleInit>:

  return true;
}

void consoleInit()
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	af00      	add	r7, sp, #0
  if (isInit)
 8010cac:	4b12      	ldr	r3, [pc, #72]	; (8010cf8 <consoleInit+0x50>)
 8010cae:	781b      	ldrb	r3, [r3, #0]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d11f      	bne.n	8010cf4 <consoleInit+0x4c>
    return;

  messageToPrint.size = 0;
 8010cb4:	4b11      	ldr	r3, [pc, #68]	; (8010cfc <consoleInit+0x54>)
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	701a      	strb	r2, [r3, #0]
  messageToPrint.header = CRTP_HEADER(CRTP_PORT_CONSOLE, 0);
 8010cba:	4b10      	ldr	r3, [pc, #64]	; (8010cfc <consoleInit+0x54>)
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	705a      	strb	r2, [r3, #1]
  vSemaphoreCreateBinary(synch);
 8010cc0:	2203      	movs	r2, #3
 8010cc2:	2100      	movs	r1, #0
 8010cc4:	2001      	movs	r0, #1
 8010cc6:	f00d fdb1 	bl	801e82c <xQueueGenericCreate>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	4a0c      	ldr	r2, [pc, #48]	; (8010d00 <consoleInit+0x58>)
 8010cce:	6013      	str	r3, [r2, #0]
 8010cd0:	4b0b      	ldr	r3, [pc, #44]	; (8010d00 <consoleInit+0x58>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d006      	beq.n	8010ce6 <consoleInit+0x3e>
 8010cd8:	4b09      	ldr	r3, [pc, #36]	; (8010d00 <consoleInit+0x58>)
 8010cda:	6818      	ldr	r0, [r3, #0]
 8010cdc:	2300      	movs	r3, #0
 8010cde:	2200      	movs	r2, #0
 8010ce0:	2100      	movs	r1, #0
 8010ce2:	f00d fe4d 	bl	801e980 <xQueueGenericSend>
  messageSendingIsPending = false;
 8010ce6:	4b07      	ldr	r3, [pc, #28]	; (8010d04 <consoleInit+0x5c>)
 8010ce8:	2200      	movs	r2, #0
 8010cea:	701a      	strb	r2, [r3, #0]

  isInit = true;
 8010cec:	4b02      	ldr	r3, [pc, #8]	; (8010cf8 <consoleInit+0x50>)
 8010cee:	2201      	movs	r2, #1
 8010cf0:	701a      	strb	r2, [r3, #0]
 8010cf2:	e000      	b.n	8010cf6 <consoleInit+0x4e>
    return;
 8010cf4:	bf00      	nop
}
 8010cf6:	bd80      	pop	{r7, pc}
 8010cf8:	2000bb1c 	.word	0x2000bb1c
 8010cfc:	2000baf4 	.word	0x2000baf4
 8010d00:	2000bb18 	.word	0x2000bb18
 8010d04:	2000bb14 	.word	0x2000bb14

08010d08 <crc32ContextInit>:
static bool crcTableInitialized = false;

// *** Public API ***

void crc32ContextInit(crc32Context_t *context)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b082      	sub	sp, #8
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
  // Lazy static ...
  if (crcTableInitialized == false) {
 8010d10:	4b0a      	ldr	r3, [pc, #40]	; (8010d3c <crc32ContextInit+0x34>)
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	f083 0301 	eor.w	r3, r3, #1
 8010d18:	b2db      	uxtb	r3, r3
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d005      	beq.n	8010d2a <crc32ContextInit+0x22>
    // initialize crcTable
    crcTableInit(crcTable);
 8010d1e:	4808      	ldr	r0, [pc, #32]	; (8010d40 <crc32ContextInit+0x38>)
 8010d20:	f000 f8af 	bl	8010e82 <crcTableInit>
    crcTableInitialized = true;
 8010d24:	4b05      	ldr	r3, [pc, #20]	; (8010d3c <crc32ContextInit+0x34>)
 8010d26:	2201      	movs	r2, #1
 8010d28:	701a      	strb	r2, [r3, #0]
  }

  context->remainder = INITIAL_REMAINDER;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010d30:	601a      	str	r2, [r3, #0]
}
 8010d32:	bf00      	nop
 8010d34:	3708      	adds	r7, #8
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bd80      	pop	{r7, pc}
 8010d3a:	bf00      	nop
 8010d3c:	2000bb1d 	.word	0x2000bb1d
 8010d40:	20004b28 	.word	0x20004b28

08010d44 <crc32Update>:

void crc32Update(crc32Context_t *context, const void* data, size_t size)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b084      	sub	sp, #16
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	60f8      	str	r0, [r7, #12]
 8010d4c:	60b9      	str	r1, [r7, #8]
 8010d4e:	607a      	str	r2, [r7, #4]
  context->remainder = crcByByte(data, size, context->remainder, crcTable);
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	681a      	ldr	r2, [r3, #0]
 8010d54:	4b05      	ldr	r3, [pc, #20]	; (8010d6c <crc32Update+0x28>)
 8010d56:	6879      	ldr	r1, [r7, #4]
 8010d58:	68b8      	ldr	r0, [r7, #8]
 8010d5a:	f000 f869 	bl	8010e30 <crcByByte>
 8010d5e:	4602      	mov	r2, r0
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	601a      	str	r2, [r3, #0]
}
 8010d64:	bf00      	nop
 8010d66:	3710      	adds	r7, #16
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}
 8010d6c:	20004b28 	.word	0x20004b28

08010d70 <crc32Out>:

uint32_t crc32Out(const crc32Context_t *context)
{
 8010d70:	b480      	push	{r7}
 8010d72:	b083      	sub	sp, #12
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
  return context->remainder ^ FINAL_XOR_VALUE;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	43db      	mvns	r3, r3
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	370c      	adds	r7, #12
 8010d82:	46bd      	mov	sp, r7
 8010d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d88:	4770      	bx	lr

08010d8a <crc32CalculateBuffer>:

uint32_t crc32CalculateBuffer(const void* buffer, size_t size)
{
 8010d8a:	b580      	push	{r7, lr}
 8010d8c:	b084      	sub	sp, #16
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	6078      	str	r0, [r7, #4]
 8010d92:	6039      	str	r1, [r7, #0]
  crc32Context_t ctx;

  crc32ContextInit(&ctx);
 8010d94:	f107 030c 	add.w	r3, r7, #12
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7ff ffb5 	bl	8010d08 <crc32ContextInit>
  crc32Update(&ctx, buffer, size);
 8010d9e:	f107 030c 	add.w	r3, r7, #12
 8010da2:	683a      	ldr	r2, [r7, #0]
 8010da4:	6879      	ldr	r1, [r7, #4]
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7ff ffcc 	bl	8010d44 <crc32Update>
  return crc32Out(&ctx);
 8010dac:	f107 030c 	add.w	r3, r7, #12
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7ff ffdd 	bl	8010d70 <crc32Out>
 8010db6:	4603      	mov	r3, r0
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	3710      	adds	r7, #16
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}

08010dc0 <crcByBit>:
// *** Core calculation from Bosh ***

/* bit-wise crc calculation */
static uint32_t crcByBit(const uint8_t* message, uint32_t bytesToProcess,
             uint32_t remainder)
{
 8010dc0:	b480      	push	{r7}
 8010dc2:	b087      	sub	sp, #28
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	60f8      	str	r0, [r7, #12]
 8010dc8:	60b9      	str	r1, [r7, #8]
 8010dca:	607a      	str	r2, [r7, #4]
  for (unsigned int byte = 0; byte < bytesToProcess; ++byte)
 8010dcc:	2300      	movs	r3, #0
 8010dce:	617b      	str	r3, [r7, #20]
 8010dd0:	e021      	b.n	8010e16 <crcByBit+0x56>
    {
      remainder ^= *(message+byte);
 8010dd2:	68fa      	ldr	r2, [r7, #12]
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	4413      	add	r3, r2
 8010dd8:	781b      	ldrb	r3, [r3, #0]
 8010dda:	461a      	mov	r2, r3
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	4053      	eors	r3, r2
 8010de0:	607b      	str	r3, [r7, #4]

      for(uint8_t bit = 8; bit > 0; --bit)
 8010de2:	2308      	movs	r3, #8
 8010de4:	74fb      	strb	r3, [r7, #19]
 8010de6:	e010      	b.n	8010e0a <crcByBit+0x4a>
        {
          /* reflect is realized by mirroring algorithm
           * LSB is first to be processed */
          if (remainder & 1)
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f003 0301 	and.w	r3, r3, #1
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d005      	beq.n	8010dfe <crcByBit+0x3e>
            remainder = (remainder >> 1) ^ POLYNOMIAL;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	085a      	lsrs	r2, r3, #1
 8010df6:	4b0d      	ldr	r3, [pc, #52]	; (8010e2c <crcByBit+0x6c>)
 8010df8:	4053      	eors	r3, r2
 8010dfa:	607b      	str	r3, [r7, #4]
 8010dfc:	e002      	b.n	8010e04 <crcByBit+0x44>
          else
            remainder = (remainder >> 1);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	085b      	lsrs	r3, r3, #1
 8010e02:	607b      	str	r3, [r7, #4]
      for(uint8_t bit = 8; bit > 0; --bit)
 8010e04:	7cfb      	ldrb	r3, [r7, #19]
 8010e06:	3b01      	subs	r3, #1
 8010e08:	74fb      	strb	r3, [r7, #19]
 8010e0a:	7cfb      	ldrb	r3, [r7, #19]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d1eb      	bne.n	8010de8 <crcByBit+0x28>
  for (unsigned int byte = 0; byte < bytesToProcess; ++byte)
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	3301      	adds	r3, #1
 8010e14:	617b      	str	r3, [r7, #20]
 8010e16:	697a      	ldr	r2, [r7, #20]
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d3d9      	bcc.n	8010dd2 <crcByBit+0x12>
        }
    }
  return remainder;
 8010e1e:	687b      	ldr	r3, [r7, #4]
}
 8010e20:	4618      	mov	r0, r3
 8010e22:	371c      	adds	r7, #28
 8010e24:	46bd      	mov	sp, r7
 8010e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2a:	4770      	bx	lr
 8010e2c:	edb88320 	.word	0xedb88320

08010e30 <crcByByte>:
/* byte-wise crc calculation, requires an initialized crcTable
 * this is factor 8 faster and should be used if multiple crcs
 * have to be calculated */
static uint32_t crcByByte(const uint8_t* message, uint32_t bytesToProcess,
              uint32_t remainder, uint32_t* crcTable)
{
 8010e30:	b480      	push	{r7}
 8010e32:	b087      	sub	sp, #28
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	60f8      	str	r0, [r7, #12]
 8010e38:	60b9      	str	r1, [r7, #8]
 8010e3a:	607a      	str	r2, [r7, #4]
 8010e3c:	603b      	str	r3, [r7, #0]
  uint8_t data;
  for (int byte = 0; byte < bytesToProcess; ++byte)
 8010e3e:	2300      	movs	r3, #0
 8010e40:	617b      	str	r3, [r7, #20]
 8010e42:	e013      	b.n	8010e6c <crcByByte+0x3c>
    {
      data = (*(message+byte) ^ remainder);
 8010e44:	697b      	ldr	r3, [r7, #20]
 8010e46:	68fa      	ldr	r2, [r7, #12]
 8010e48:	4413      	add	r3, r2
 8010e4a:	781a      	ldrb	r2, [r3, #0]
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	b2db      	uxtb	r3, r3
 8010e50:	4053      	eors	r3, r2
 8010e52:	74fb      	strb	r3, [r7, #19]
      remainder = *(crcTable+data) ^ (remainder >> 8);
 8010e54:	7cfb      	ldrb	r3, [r7, #19]
 8010e56:	009b      	lsls	r3, r3, #2
 8010e58:	683a      	ldr	r2, [r7, #0]
 8010e5a:	4413      	add	r3, r2
 8010e5c:	681a      	ldr	r2, [r3, #0]
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	0a1b      	lsrs	r3, r3, #8
 8010e62:	4053      	eors	r3, r2
 8010e64:	607b      	str	r3, [r7, #4]
  for (int byte = 0; byte < bytesToProcess; ++byte)
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	3301      	adds	r3, #1
 8010e6a:	617b      	str	r3, [r7, #20]
 8010e6c:	697b      	ldr	r3, [r7, #20]
 8010e6e:	68ba      	ldr	r2, [r7, #8]
 8010e70:	429a      	cmp	r2, r3
 8010e72:	d8e7      	bhi.n	8010e44 <crcByByte+0x14>
    }
  return remainder;
 8010e74:	687b      	ldr	r3, [r7, #4]
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	371c      	adds	r7, #28
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e80:	4770      	bx	lr

08010e82 <crcTableInit>:

/* creates a lookup-table which is necessary for the crcByByte function */
static void crcTableInit(uint32_t* crcTable)
{
 8010e82:	b590      	push	{r4, r7, lr}
 8010e84:	b085      	sub	sp, #20
 8010e86:	af00      	add	r7, sp, #0
 8010e88:	6078      	str	r0, [r7, #4]
  uint8_t dividend = ~0;
 8010e8a:	23ff      	movs	r3, #255	; 0xff
 8010e8c:	73fb      	strb	r3, [r7, #15]
  /* fill the table by bit-wise calculations of checksums
   * for each possible dividend */
  do {
      *(crcTable+dividend) = crcByBit(&dividend, 1, 0);
 8010e8e:	7bfb      	ldrb	r3, [r7, #15]
 8010e90:	009b      	lsls	r3, r3, #2
 8010e92:	687a      	ldr	r2, [r7, #4]
 8010e94:	18d4      	adds	r4, r2, r3
 8010e96:	f107 030f 	add.w	r3, r7, #15
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	2101      	movs	r1, #1
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7ff ff8e 	bl	8010dc0 <crcByBit>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	6023      	str	r3, [r4, #0]
  } while(dividend-- > 0);
 8010ea8:	7bfb      	ldrb	r3, [r7, #15]
 8010eaa:	1e5a      	subs	r2, r3, #1
 8010eac:	b2d2      	uxtb	r2, r2
 8010eae:	73fa      	strb	r2, [r7, #15]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d1ec      	bne.n	8010e8e <crcTableInit+0xc>
}
 8010eb4:	bf00      	nop
 8010eb6:	bf00      	nop
 8010eb8:	3714      	adds	r7, #20
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd90      	pop	{r4, r7, pc}

08010ebe <debugInit>:
 */
#include "debug.h"


void debugInit(void)
{
 8010ebe:	b580      	push	{r7, lr}
 8010ec0:	b082      	sub	sp, #8
 8010ec2:	af02      	add	r7, sp, #8
#ifdef DEBUG_PRINT_ON_SEGGER_RTT
  SEGGER_RTT_Init();
 8010ec4:	f7ff f992 	bl	80101ec <SEGGER_RTT_Init>
  SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_TRIM);
 8010ec8:	2301      	movs	r3, #1
 8010eca:	9300      	str	r3, [sp, #0]
 8010ecc:	2300      	movs	r3, #0
 8010ece:	2200      	movs	r2, #0
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	2000      	movs	r0, #0
 8010ed4:	f7ff f920 	bl	8010118 <SEGGER_RTT_ConfigUpBuffer>
#endif
}
 8010ed8:	bf00      	nop
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}
	...

08010ee0 <uartInit>:
    return len;
}
*/


void uartInit(void) {
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b082      	sub	sp, #8
 8010ee4:	af02      	add	r7, sp, #8

#ifdef CONFIG_DEBUG_PRINT_ON_UART
	uartqueue = STATIC_MEM_QUEUE_CREATE(uartqueue);
 8010ee6:	2340      	movs	r3, #64	; 0x40
 8010ee8:	4618      	mov	r0, r3
 8010eea:	2301      	movs	r3, #1
 8010eec:	4619      	mov	r1, r3
 8010eee:	2300      	movs	r3, #0
 8010ef0:	9300      	str	r3, [sp, #0]
 8010ef2:	4b06      	ldr	r3, [pc, #24]	; (8010f0c <uartInit+0x2c>)
 8010ef4:	4a06      	ldr	r2, [pc, #24]	; (8010f10 <uartInit+0x30>)
 8010ef6:	f00d fc2d 	bl	801e754 <xQueueGenericCreateStatic>
 8010efa:	4603      	mov	r3, r0
 8010efc:	4a05      	ldr	r2, [pc, #20]	; (8010f14 <uartInit+0x34>)
 8010efe:	6013      	str	r3, [r2, #0]
	isInit = true;
 8010f00:	4b05      	ldr	r3, [pc, #20]	; (8010f18 <uartInit+0x38>)
 8010f02:	2201      	movs	r2, #1
 8010f04:	701a      	strb	r2, [r3, #0]
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
#endif

}
 8010f06:	bf00      	nop
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}
 8010f0c:	20004f68 	.word	0x20004f68
 8010f10:	20004f28 	.word	0x20004f28
 8010f14:	2000bb20 	.word	0x2000bb20
 8010f18:	2000bbcd 	.word	0x2000bbcd

08010f1c <uartDmaInit>:



void uartDmaInit(void)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b084      	sub	sp, #16
 8010f20:	af02      	add	r7, sp, #8


#ifdef ENABLE_UART_DMA

	  // initialize the FreeRTOS structures first, to prevent null pointers in interrupts
	  waitUntilSendDone = xSemaphoreCreateBinaryStatic(&waitUntilSendDoneBuffer); // initialized as blocking
 8010f22:	2303      	movs	r3, #3
 8010f24:	9300      	str	r3, [sp, #0]
 8010f26:	4b21      	ldr	r3, [pc, #132]	; (8010fac <uartDmaInit+0x90>)
 8010f28:	2200      	movs	r2, #0
 8010f2a:	2100      	movs	r1, #0
 8010f2c:	2001      	movs	r0, #1
 8010f2e:	f00d fc11 	bl	801e754 <xQueueGenericCreateStatic>
 8010f32:	4603      	mov	r3, r0
 8010f34:	4a1e      	ldr	r2, [pc, #120]	; (8010fb0 <uartDmaInit+0x94>)
 8010f36:	6013      	str	r3, [r2, #0]
	  uartBusy = xSemaphoreCreateBinaryStatic(&uartBusyBuffer); // initialized as blocking
 8010f38:	2303      	movs	r3, #3
 8010f3a:	9300      	str	r3, [sp, #0]
 8010f3c:	4b1d      	ldr	r3, [pc, #116]	; (8010fb4 <uartDmaInit+0x98>)
 8010f3e:	2200      	movs	r2, #0
 8010f40:	2100      	movs	r1, #0
 8010f42:	2001      	movs	r0, #1
 8010f44:	f00d fc06 	bl	801e754 <xQueueGenericCreateStatic>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	4a1b      	ldr	r2, [pc, #108]	; (8010fb8 <uartDmaInit+0x9c>)
 8010f4c:	6013      	str	r3, [r2, #0]
	  xSemaphoreGive(uartBusy); // but we give it because the uart isn't busy at initialization
 8010f4e:	4b1a      	ldr	r3, [pc, #104]	; (8010fb8 <uartDmaInit+0x9c>)
 8010f50:	6818      	ldr	r0, [r3, #0]
 8010f52:	2300      	movs	r3, #0
 8010f54:	2200      	movs	r2, #0
 8010f56:	2100      	movs	r1, #0
 8010f58:	f00d fd12 	bl	801e980 <xQueueGenericSend>
	  xSemaphoreGive(waitUntilSendDone);
 8010f5c:	4b14      	ldr	r3, [pc, #80]	; (8010fb0 <uartDmaInit+0x94>)
 8010f5e:	6818      	ldr	r0, [r3, #0]
 8010f60:	2300      	movs	r3, #0
 8010f62:	2200      	movs	r2, #0
 8010f64:	2100      	movs	r1, #0
 8010f66:	f00d fd0b 	bl	801e980 <xQueueGenericSend>

	  __HAL_RCC_DMA2_CLK_ENABLE();
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	607b      	str	r3, [r7, #4]
 8010f6e:	4b13      	ldr	r3, [pc, #76]	; (8010fbc <uartDmaInit+0xa0>)
 8010f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f72:	4a12      	ldr	r2, [pc, #72]	; (8010fbc <uartDmaInit+0xa0>)
 8010f74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010f78:	6313      	str	r3, [r2, #48]	; 0x30
 8010f7a:	4b10      	ldr	r3, [pc, #64]	; (8010fbc <uartDmaInit+0xa0>)
 8010f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010f82:	607b      	str	r3, [r7, #4]
 8010f84:	687b      	ldr	r3, [r7, #4]
	  HAL_DMA_Init(&hdma_usart6_tx);
 8010f86:	480e      	ldr	r0, [pc, #56]	; (8010fc0 <uartDmaInit+0xa4>)
 8010f88:	f004 ff4c 	bl	8015e24 <HAL_DMA_Init>
	  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	2105      	movs	r1, #5
 8010f90:	2045      	movs	r0, #69	; 0x45
 8010f92:	f004 ff10 	bl	8015db6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8010f96:	2045      	movs	r0, #69	; 0x45
 8010f98:	f004 ff29 	bl	8015dee <HAL_NVIC_EnableIRQ>

	  isUartDmaInitialized = true;
 8010f9c:	4b09      	ldr	r3, [pc, #36]	; (8010fc4 <uartDmaInit+0xa8>)
 8010f9e:	2201      	movs	r2, #1
 8010fa0:	701a      	strb	r2, [r3, #0]
#endif


}
 8010fa2:	bf00      	nop
 8010fa4:	3708      	adds	r7, #8
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}
 8010faa:	bf00      	nop
 8010fac:	2000bb7c 	.word	0x2000bb7c
 8010fb0:	2000bb78 	.word	0x2000bb78
 8010fb4:	2000bb28 	.word	0x2000bb28
 8010fb8:	2000bb24 	.word	0x2000bb24
 8010fbc:	40023800 	.word	0x40023800
 8010fc0:	2000d048 	.word	0x2000d048
 8010fc4:	2000bbcc 	.word	0x2000bbcc

08010fc8 <eventTrigger>:
    }
    return 0;
}

void eventTrigger(const eventtrigger *event)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b084      	sub	sp, #16
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < eventtriggerHandler_Count; ++i) {
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	60fb      	str	r3, [r7, #12]
 8010fd4:	e00e      	b.n	8010ff4 <eventTrigger+0x2c>
        if (callbacks[i]) {
 8010fd6:	4a0b      	ldr	r2, [pc, #44]	; (8011004 <eventTrigger+0x3c>)
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d005      	beq.n	8010fee <eventTrigger+0x26>
            callbacks[i](event);
 8010fe2:	4a08      	ldr	r2, [pc, #32]	; (8011004 <eventTrigger+0x3c>)
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	4798      	blx	r3
    for (int i = 0; i < eventtriggerHandler_Count; ++i) {
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	3301      	adds	r3, #1
 8010ff2:	60fb      	str	r3, [r7, #12]
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	dded      	ble.n	8010fd6 <eventTrigger+0xe>
        }
    }
}
 8010ffa:	bf00      	nop
 8010ffc:	bf00      	nop
 8010ffe:	3710      	adds	r7, #16
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}
 8011004:	2000bbd0 	.word	0x2000bbd0

08011008 <logInit>:
static acquisitionType_t acquisitionTypeFromLogType(uint8_t logType);

STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(logTask, LOG_TASK_STACKSIZE);

void logInit(void)
{
 8011008:	b590      	push	{r4, r7, lr}
 801100a:	b08b      	sub	sp, #44	; 0x2c
 801100c:	af04      	add	r7, sp, #16
  int i;
  const char* group = NULL;
 801100e:	2300      	movs	r3, #0
 8011010:	607b      	str	r3, [r7, #4]
  int groupLength = 0;
 8011012:	2300      	movs	r3, #0
 8011014:	613b      	str	r3, [r7, #16]

  if(isInit)
 8011016:	4b80      	ldr	r3, [pc, #512]	; (8011218 <logInit+0x210>)
 8011018:	781b      	ldrb	r3, [r3, #0]
 801101a:	2b00      	cmp	r3, #0
 801101c:	f040 80f7 	bne.w	801120e <logInit+0x206>
    return;

  logs = &_log_start;
 8011020:	4b7e      	ldr	r3, [pc, #504]	; (801121c <logInit+0x214>)
 8011022:	4a7f      	ldr	r2, [pc, #508]	; (8011220 <logInit+0x218>)
 8011024:	601a      	str	r2, [r3, #0]
  logsLen = &_log_stop - &_log_start;
 8011026:	4a7f      	ldr	r2, [pc, #508]	; (8011224 <logInit+0x21c>)
 8011028:	4b7d      	ldr	r3, [pc, #500]	; (8011220 <logInit+0x218>)
 801102a:	1ad3      	subs	r3, r2, r3
 801102c:	109b      	asrs	r3, r3, #2
 801102e:	4a7e      	ldr	r2, [pc, #504]	; (8011228 <logInit+0x220>)
 8011030:	fb02 f303 	mul.w	r3, r2, r3
 8011034:	461a      	mov	r2, r3
 8011036:	4b7d      	ldr	r3, [pc, #500]	; (801122c <logInit+0x224>)
 8011038:	601a      	str	r2, [r3, #0]

  // Calculate a hash of the toc by chaining description of each elements
  // Using the CRTP packet as temporary buffer
  logsCrc = 0;
 801103a:	4b7d      	ldr	r3, [pc, #500]	; (8011230 <logInit+0x228>)
 801103c:	2200      	movs	r2, #0
 801103e:	601a      	str	r2, [r3, #0]
  for (int i=0; i<logsLen; i++)
 8011040:	2300      	movs	r3, #0
 8011042:	60fb      	str	r3, [r7, #12]
 8011044:	e092      	b.n	801116c <logInit+0x164>
  {
    int len = 5;
 8011046:	2305      	movs	r3, #5
 8011048:	60bb      	str	r3, [r7, #8]
 801104a:	4b79      	ldr	r3, [pc, #484]	; (8011230 <logInit+0x228>)
 801104c:	681b      	ldr	r3, [r3, #0]
    memcpy(&p.data[0], &logsCrc, 4);
 801104e:	4a79      	ldr	r2, [pc, #484]	; (8011234 <logInit+0x22c>)
 8011050:	f8c2 3002 	str.w	r3, [r2, #2]
    p.data[4] = logs[i].type;
 8011054:	4b71      	ldr	r3, [pc, #452]	; (801121c <logInit+0x214>)
 8011056:	6819      	ldr	r1, [r3, #0]
 8011058:	68fa      	ldr	r2, [r7, #12]
 801105a:	4613      	mov	r3, r2
 801105c:	005b      	lsls	r3, r3, #1
 801105e:	4413      	add	r3, r2
 8011060:	009b      	lsls	r3, r3, #2
 8011062:	440b      	add	r3, r1
 8011064:	781a      	ldrb	r2, [r3, #0]
 8011066:	4b73      	ldr	r3, [pc, #460]	; (8011234 <logInit+0x22c>)
 8011068:	719a      	strb	r2, [r3, #6]
    if (logs[i].type & LOG_GROUP) {
 801106a:	4b6c      	ldr	r3, [pc, #432]	; (801121c <logInit+0x214>)
 801106c:	6819      	ldr	r1, [r3, #0]
 801106e:	68fa      	ldr	r2, [r7, #12]
 8011070:	4613      	mov	r3, r2
 8011072:	005b      	lsls	r3, r3, #1
 8011074:	4413      	add	r3, r2
 8011076:	009b      	lsls	r3, r3, #2
 8011078:	440b      	add	r3, r1
 801107a:	781b      	ldrb	r3, [r3, #0]
 801107c:	b25b      	sxtb	r3, r3
 801107e:	2b00      	cmp	r3, #0
 8011080:	da1c      	bge.n	80110bc <logInit+0xb4>
      if (logs[i].type & LOG_START) {
 8011082:	4b66      	ldr	r3, [pc, #408]	; (801121c <logInit+0x214>)
 8011084:	6819      	ldr	r1, [r3, #0]
 8011086:	68fa      	ldr	r2, [r7, #12]
 8011088:	4613      	mov	r3, r2
 801108a:	005b      	lsls	r3, r3, #1
 801108c:	4413      	add	r3, r2
 801108e:	009b      	lsls	r3, r3, #2
 8011090:	440b      	add	r3, r1
 8011092:	781b      	ldrb	r3, [r3, #0]
 8011094:	f003 0301 	and.w	r3, r3, #1
 8011098:	2b00      	cmp	r3, #0
 801109a:	d026      	beq.n	80110ea <logInit+0xe2>
        group = logs[i].name;
 801109c:	4b5f      	ldr	r3, [pc, #380]	; (801121c <logInit+0x214>)
 801109e:	6819      	ldr	r1, [r3, #0]
 80110a0:	68fa      	ldr	r2, [r7, #12]
 80110a2:	4613      	mov	r3, r2
 80110a4:	005b      	lsls	r3, r3, #1
 80110a6:	4413      	add	r3, r2
 80110a8:	009b      	lsls	r3, r3, #2
 80110aa:	440b      	add	r3, r1
 80110ac:	685b      	ldr	r3, [r3, #4]
 80110ae:	607b      	str	r3, [r7, #4]
        groupLength = strlen(group);
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f7ef f8ed 	bl	8000290 <strlen>
 80110b6:	4603      	mov	r3, r0
 80110b8:	613b      	str	r3, [r7, #16]
 80110ba:	e016      	b.n	80110ea <logInit+0xe2>
      }
    } else {
      // CMD_GET_ITEM_V2 result's size is: 3 + strlen(logs[i].name) + groupLength + 2
      if (strlen(logs[i].name) + groupLength + 2 > 26) {
 80110bc:	4b57      	ldr	r3, [pc, #348]	; (801121c <logInit+0x214>)
 80110be:	6819      	ldr	r1, [r3, #0]
 80110c0:	68fa      	ldr	r2, [r7, #12]
 80110c2:	4613      	mov	r3, r2
 80110c4:	005b      	lsls	r3, r3, #1
 80110c6:	4413      	add	r3, r2
 80110c8:	009b      	lsls	r3, r3, #2
 80110ca:	440b      	add	r3, r1
 80110cc:	685b      	ldr	r3, [r3, #4]
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7ef f8de 	bl	8000290 <strlen>
 80110d4:	4602      	mov	r2, r0
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	4413      	add	r3, r2
 80110da:	3302      	adds	r3, #2
 80110dc:	2b1a      	cmp	r3, #26
 80110de:	d904      	bls.n	80110ea <logInit+0xe2>
        LOG_ERROR("'%s.%s' too long\n", group, logs[i].name);
        ASSERT_FAILED();
 80110e0:	22d1      	movs	r2, #209	; 0xd1
 80110e2:	4955      	ldr	r1, [pc, #340]	; (8011238 <logInit+0x230>)
 80110e4:	4855      	ldr	r0, [pc, #340]	; (801123c <logInit+0x234>)
 80110e6:	f7ff fd99 	bl	8010c1c <assertFail>
      }
    }
    if (logs[i].name) {
 80110ea:	4b4c      	ldr	r3, [pc, #304]	; (801121c <logInit+0x214>)
 80110ec:	6819      	ldr	r1, [r3, #0]
 80110ee:	68fa      	ldr	r2, [r7, #12]
 80110f0:	4613      	mov	r3, r2
 80110f2:	005b      	lsls	r3, r3, #1
 80110f4:	4413      	add	r3, r2
 80110f6:	009b      	lsls	r3, r3, #2
 80110f8:	440b      	add	r3, r1
 80110fa:	685b      	ldr	r3, [r3, #4]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d02a      	beq.n	8011156 <logInit+0x14e>
      memcpy(&p.data[5], logs[i].name, strlen(logs[i].name));
 8011100:	4b46      	ldr	r3, [pc, #280]	; (801121c <logInit+0x214>)
 8011102:	6819      	ldr	r1, [r3, #0]
 8011104:	68fa      	ldr	r2, [r7, #12]
 8011106:	4613      	mov	r3, r2
 8011108:	005b      	lsls	r3, r3, #1
 801110a:	4413      	add	r3, r2
 801110c:	009b      	lsls	r3, r3, #2
 801110e:	440b      	add	r3, r1
 8011110:	685c      	ldr	r4, [r3, #4]
 8011112:	4b42      	ldr	r3, [pc, #264]	; (801121c <logInit+0x214>)
 8011114:	6819      	ldr	r1, [r3, #0]
 8011116:	68fa      	ldr	r2, [r7, #12]
 8011118:	4613      	mov	r3, r2
 801111a:	005b      	lsls	r3, r3, #1
 801111c:	4413      	add	r3, r2
 801111e:	009b      	lsls	r3, r3, #2
 8011120:	440b      	add	r3, r1
 8011122:	685b      	ldr	r3, [r3, #4]
 8011124:	4618      	mov	r0, r3
 8011126:	f7ef f8b3 	bl	8000290 <strlen>
 801112a:	4603      	mov	r3, r0
 801112c:	461a      	mov	r2, r3
 801112e:	4621      	mov	r1, r4
 8011130:	4843      	ldr	r0, [pc, #268]	; (8011240 <logInit+0x238>)
 8011132:	f012 fcf2 	bl	8023b1a <memcpy>
      len += strlen(logs[i].name);
 8011136:	4b39      	ldr	r3, [pc, #228]	; (801121c <logInit+0x214>)
 8011138:	6819      	ldr	r1, [r3, #0]
 801113a:	68fa      	ldr	r2, [r7, #12]
 801113c:	4613      	mov	r3, r2
 801113e:	005b      	lsls	r3, r3, #1
 8011140:	4413      	add	r3, r2
 8011142:	009b      	lsls	r3, r3, #2
 8011144:	440b      	add	r3, r1
 8011146:	685b      	ldr	r3, [r3, #4]
 8011148:	4618      	mov	r0, r3
 801114a:	f7ef f8a1 	bl	8000290 <strlen>
 801114e:	4602      	mov	r2, r0
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	4413      	add	r3, r2
 8011154:	60bb      	str	r3, [r7, #8]
    }
    logsCrc = crc32CalculateBuffer(p.data, len);
 8011156:	68bb      	ldr	r3, [r7, #8]
 8011158:	4619      	mov	r1, r3
 801115a:	483a      	ldr	r0, [pc, #232]	; (8011244 <logInit+0x23c>)
 801115c:	f7ff fe15 	bl	8010d8a <crc32CalculateBuffer>
 8011160:	4603      	mov	r3, r0
 8011162:	4a33      	ldr	r2, [pc, #204]	; (8011230 <logInit+0x228>)
 8011164:	6013      	str	r3, [r2, #0]
  for (int i=0; i<logsLen; i++)
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	3301      	adds	r3, #1
 801116a:	60fb      	str	r3, [r7, #12]
 801116c:	4b2f      	ldr	r3, [pc, #188]	; (801122c <logInit+0x224>)
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	68fa      	ldr	r2, [r7, #12]
 8011172:	429a      	cmp	r2, r3
 8011174:	f6ff af67 	blt.w	8011046 <logInit+0x3e>
  }

  // Big lock that protects the log datastructures
  logLock = xSemaphoreCreateMutexStatic(&logLockBuffer);
 8011178:	4933      	ldr	r1, [pc, #204]	; (8011248 <logInit+0x240>)
 801117a:	2001      	movs	r0, #1
 801117c:	f00d fbe5 	bl	801e94a <xQueueCreateMutexStatic>
 8011180:	4603      	mov	r3, r0
 8011182:	4a32      	ldr	r2, [pc, #200]	; (801124c <logInit+0x244>)
 8011184:	6013      	str	r3, [r2, #0]

  for (i=0; i<logsLen; i++)
 8011186:	2300      	movs	r3, #0
 8011188:	617b      	str	r3, [r7, #20]
 801118a:	e014      	b.n	80111b6 <logInit+0x1ae>
  {
    if(!(logs[i].type & LOG_GROUP))
 801118c:	4b23      	ldr	r3, [pc, #140]	; (801121c <logInit+0x214>)
 801118e:	6819      	ldr	r1, [r3, #0]
 8011190:	697a      	ldr	r2, [r7, #20]
 8011192:	4613      	mov	r3, r2
 8011194:	005b      	lsls	r3, r3, #1
 8011196:	4413      	add	r3, r2
 8011198:	009b      	lsls	r3, r3, #2
 801119a:	440b      	add	r3, r1
 801119c:	781b      	ldrb	r3, [r3, #0]
 801119e:	b25b      	sxtb	r3, r3
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	db05      	blt.n	80111b0 <logInit+0x1a8>
      logsCount++;
 80111a4:	4b2a      	ldr	r3, [pc, #168]	; (8011250 <logInit+0x248>)
 80111a6:	881b      	ldrh	r3, [r3, #0]
 80111a8:	3301      	adds	r3, #1
 80111aa:	b29a      	uxth	r2, r3
 80111ac:	4b28      	ldr	r3, [pc, #160]	; (8011250 <logInit+0x248>)
 80111ae:	801a      	strh	r2, [r3, #0]
  for (i=0; i<logsLen; i++)
 80111b0:	697b      	ldr	r3, [r7, #20]
 80111b2:	3301      	adds	r3, #1
 80111b4:	617b      	str	r3, [r7, #20]
 80111b6:	4b1d      	ldr	r3, [pc, #116]	; (801122c <logInit+0x224>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	697a      	ldr	r2, [r7, #20]
 80111bc:	429a      	cmp	r2, r3
 80111be:	dbe5      	blt.n	801118c <logInit+0x184>
  }

  //Manually free all log blocks
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 80111c0:	2300      	movs	r3, #0
 80111c2:	617b      	str	r3, [r7, #20]
 80111c4:	e00c      	b.n	80111e0 <logInit+0x1d8>
    logBlocks[i].id = BLOCK_ID_FREE;
 80111c6:	4923      	ldr	r1, [pc, #140]	; (8011254 <logInit+0x24c>)
 80111c8:	697a      	ldr	r2, [r7, #20]
 80111ca:	4613      	mov	r3, r2
 80111cc:	011b      	lsls	r3, r3, #4
 80111ce:	1a9b      	subs	r3, r3, r2
 80111d0:	009b      	lsls	r3, r3, #2
 80111d2:	440b      	add	r3, r1
 80111d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80111d8:	601a      	str	r2, [r3, #0]
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	3301      	adds	r3, #1
 80111de:	617b      	str	r3, [r7, #20]
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	2b0f      	cmp	r3, #15
 80111e4:	ddef      	ble.n	80111c6 <logInit+0x1be>

  //Init data structures and set the log subsystem in a known state
  logReset();
 80111e6:	f001 f9fd 	bl	80125e4 <logReset>

  //Start the log task
  STATIC_MEM_TASK_CREATE(logTask, logTask, LOG_TASK_NAME, NULL, LOG_TASK_PRI);
 80111ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111ee:	461a      	mov	r2, r3
 80111f0:	4b19      	ldr	r3, [pc, #100]	; (8011258 <logInit+0x250>)
 80111f2:	9302      	str	r3, [sp, #8]
 80111f4:	4b19      	ldr	r3, [pc, #100]	; (801125c <logInit+0x254>)
 80111f6:	9301      	str	r3, [sp, #4]
 80111f8:	2301      	movs	r3, #1
 80111fa:	9300      	str	r3, [sp, #0]
 80111fc:	2300      	movs	r3, #0
 80111fe:	4918      	ldr	r1, [pc, #96]	; (8011260 <logInit+0x258>)
 8011200:	4818      	ldr	r0, [pc, #96]	; (8011264 <logInit+0x25c>)
 8011202:	f00e f9b7 	bl	801f574 <xTaskCreateStatic>

  isInit = true;
 8011206:	4b04      	ldr	r3, [pc, #16]	; (8011218 <logInit+0x210>)
 8011208:	2201      	movs	r2, #1
 801120a:	701a      	strb	r2, [r3, #0]
 801120c:	e000      	b.n	8011210 <logInit+0x208>
    return;
 801120e:	bf00      	nop
}
 8011210:	371c      	adds	r7, #28
 8011212:	46bd      	mov	sp, r7
 8011214:	bd90      	pop	{r4, r7, pc}
 8011216:	bf00      	nop
 8011218:	2000bc58 	.word	0x2000bc58
 801121c:	2000bc28 	.word	0x2000bc28
 8011220:	08028890 	.word	0x08028890
 8011224:	08029688 	.word	0x08029688
 8011228:	aaaaaaab 	.word	0xaaaaaaab
 801122c:	2000bc2c 	.word	0x2000bc2c
 8011230:	2000bc30 	.word	0x2000bc30
 8011234:	2000bc38 	.word	0x2000bc38
 8011238:	0802bed0 	.word	0x0802bed0
 801123c:	0802bee8 	.word	0x0802bee8
 8011240:	2000bc3f 	.word	0x2000bc3f
 8011244:	2000bc3a 	.word	0x2000bc3a
 8011248:	2000bbd8 	.word	0x2000bbd8
 801124c:	2000bbd4 	.word	0x2000bbd4
 8011250:	2000bc34 	.word	0x2000bc34
 8011254:	200057b8 	.word	0x200057b8
 8011258:	20005f78 	.word	0x20005f78
 801125c:	20005b78 	.word	0x20005b78
 8011260:	0802beec 	.word	0x0802beec
 8011264:	08011269 	.word	0x08011269

08011268 <logTask>:
{
  return isInit;
}

void logTask(void * prm)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b082      	sub	sp, #8
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
	crtpInitTaskQueue(CRTP_PORT_LOG);
 8011270:	2005      	movs	r0, #5
 8011272:	f7ef ffe7 	bl	8001244 <crtpInitTaskQueue>

	while(1) {
		crtpReceivePacketBlock(CRTP_PORT_LOG, &p);
 8011276:	4914      	ldr	r1, [pc, #80]	; (80112c8 <logTask+0x60>)
 8011278:	2005      	movs	r0, #5
 801127a:	f7f0 f813 	bl	80012a4 <crtpReceivePacketBlock>

		xSemaphoreTake(logLock, portMAX_DELAY);
 801127e:	4b13      	ldr	r3, [pc, #76]	; (80112cc <logTask+0x64>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011286:	4618      	mov	r0, r3
 8011288:	f00d fdfc 	bl	801ee84 <xQueueSemaphoreTake>
		if (p.channel==TOC_CH)
 801128c:	4b0e      	ldr	r3, [pc, #56]	; (80112c8 <logTask+0x60>)
 801128e:	785b      	ldrb	r3, [r3, #1]
 8011290:	f003 0303 	and.w	r3, r3, #3
 8011294:	b2db      	uxtb	r3, r3
 8011296:	2b00      	cmp	r3, #0
 8011298:	d104      	bne.n	80112a4 <logTask+0x3c>
		  logTOCProcess(p.data[0]);
 801129a:	4b0b      	ldr	r3, [pc, #44]	; (80112c8 <logTask+0x60>)
 801129c:	789b      	ldrb	r3, [r3, #2]
 801129e:	4618      	mov	r0, r3
 80112a0:	f000 f816 	bl	80112d0 <logTOCProcess>
		if (p.channel==CONTROL_CH)
 80112a4:	4b08      	ldr	r3, [pc, #32]	; (80112c8 <logTask+0x60>)
 80112a6:	785b      	ldrb	r3, [r3, #1]
 80112a8:	f003 0303 	and.w	r3, r3, #3
 80112ac:	b2db      	uxtb	r3, r3
 80112ae:	2b01      	cmp	r3, #1
 80112b0:	d101      	bne.n	80112b6 <logTask+0x4e>
		  logControlProcess();
 80112b2:	f000 fa13 	bl	80116dc <logControlProcess>
		xSemaphoreGive(logLock);
 80112b6:	4b05      	ldr	r3, [pc, #20]	; (80112cc <logTask+0x64>)
 80112b8:	6818      	ldr	r0, [r3, #0]
 80112ba:	2300      	movs	r3, #0
 80112bc:	2200      	movs	r2, #0
 80112be:	2100      	movs	r1, #0
 80112c0:	f00d fb5e 	bl	801e980 <xQueueGenericSend>
		crtpReceivePacketBlock(CRTP_PORT_LOG, &p);
 80112c4:	e7d7      	b.n	8011276 <logTask+0xe>
 80112c6:	bf00      	nop
 80112c8:	2000bc38 	.word	0x2000bc38
 80112cc:	2000bbd4 	.word	0x2000bbd4

080112d0 <logTOCProcess>:
	}
}

void logTOCProcess(int command)
{
 80112d0:	b5b0      	push	{r4, r5, r7, lr}
 80112d2:	b086      	sub	sp, #24
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
  int ptr = 0;
 80112d8:	2300      	movs	r3, #0
 80112da:	617b      	str	r3, [r7, #20]
  char * group = "plop";
 80112dc:	4ba4      	ldr	r3, [pc, #656]	; (8011570 <logTOCProcess+0x2a0>)
 80112de:	613b      	str	r3, [r7, #16]
  uint16_t n=0;
 80112e0:	2300      	movs	r3, #0
 80112e2:	81fb      	strh	r3, [r7, #14]
  uint16_t logId=0;
 80112e4:	2300      	movs	r3, #0
 80112e6:	81bb      	strh	r3, [r7, #12]

  switch (command)
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2b03      	cmp	r3, #3
 80112ec:	f200 81e3 	bhi.w	80116b6 <logTOCProcess+0x3e6>
 80112f0:	a201      	add	r2, pc, #4	; (adr r2, 80112f8 <logTOCProcess+0x28>)
 80112f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112f6:	bf00      	nop
 80112f8:	08011361 	.word	0x08011361
 80112fc:	08011309 	.word	0x08011309
 8011300:	08011511 	.word	0x08011511
 8011304:	080114cf 	.word	0x080114cf
  {
  case CMD_GET_INFO: //Get info packet about the log implementation
    DEBUG_PRINT("Client uses old logging API!\n");
 8011308:	499a      	ldr	r1, [pc, #616]	; (8011574 <logTOCProcess+0x2a4>)
 801130a:	2000      	movs	r0, #0
 801130c:	f7ff fbc2 	bl	8010a94 <SEGGER_RTT_printf>
    LOG_DEBUG("Packet is TOC_GET_INFO\n");
    ptr = 0;
 8011310:	2300      	movs	r3, #0
 8011312:	617b      	str	r3, [r7, #20]
    group = "";
 8011314:	4b98      	ldr	r3, [pc, #608]	; (8011578 <logTOCProcess+0x2a8>)
 8011316:	613b      	str	r3, [r7, #16]
    p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 8011318:	4b98      	ldr	r3, [pc, #608]	; (801157c <logTOCProcess+0x2ac>)
 801131a:	2250      	movs	r2, #80	; 0x50
 801131c:	705a      	strb	r2, [r3, #1]
    p.size=8;
 801131e:	4b97      	ldr	r3, [pc, #604]	; (801157c <logTOCProcess+0x2ac>)
 8011320:	2208      	movs	r2, #8
 8011322:	701a      	strb	r2, [r3, #0]
    p.data[0]=CMD_GET_INFO;
 8011324:	4b95      	ldr	r3, [pc, #596]	; (801157c <logTOCProcess+0x2ac>)
 8011326:	2201      	movs	r2, #1
 8011328:	709a      	strb	r2, [r3, #2]
    if (logsCount < 255) {
 801132a:	4b95      	ldr	r3, [pc, #596]	; (8011580 <logTOCProcess+0x2b0>)
 801132c:	881b      	ldrh	r3, [r3, #0]
 801132e:	2bfe      	cmp	r3, #254	; 0xfe
 8011330:	d805      	bhi.n	801133e <logTOCProcess+0x6e>
      p.data[1]=logsCount;
 8011332:	4b93      	ldr	r3, [pc, #588]	; (8011580 <logTOCProcess+0x2b0>)
 8011334:	881b      	ldrh	r3, [r3, #0]
 8011336:	b2da      	uxtb	r2, r3
 8011338:	4b90      	ldr	r3, [pc, #576]	; (801157c <logTOCProcess+0x2ac>)
 801133a:	70da      	strb	r2, [r3, #3]
 801133c:	e002      	b.n	8011344 <logTOCProcess+0x74>
    } else {
      p.data[1]=255;
 801133e:	4b8f      	ldr	r3, [pc, #572]	; (801157c <logTOCProcess+0x2ac>)
 8011340:	22ff      	movs	r2, #255	; 0xff
 8011342:	70da      	strb	r2, [r3, #3]
 8011344:	4b8f      	ldr	r3, [pc, #572]	; (8011584 <logTOCProcess+0x2b4>)
 8011346:	681b      	ldr	r3, [r3, #0]
    }
    memcpy(&p.data[2], &logsCrc, 4);
 8011348:	4a8c      	ldr	r2, [pc, #560]	; (801157c <logTOCProcess+0x2ac>)
 801134a:	6053      	str	r3, [r2, #4]
    p.data[6]=LOG_MAX_BLOCKS;
 801134c:	4b8b      	ldr	r3, [pc, #556]	; (801157c <logTOCProcess+0x2ac>)
 801134e:	2210      	movs	r2, #16
 8011350:	721a      	strb	r2, [r3, #8]
    p.data[7]=LOG_MAX_OPS;
 8011352:	4b8a      	ldr	r3, [pc, #552]	; (801157c <logTOCProcess+0x2ac>)
 8011354:	2280      	movs	r2, #128	; 0x80
 8011356:	725a      	strb	r2, [r3, #9]
    crtpSendPacketBlock(&p);
 8011358:	4888      	ldr	r0, [pc, #544]	; (801157c <logTOCProcess+0x2ac>)
 801135a:	f7f0 f8a3 	bl	80014a4 <crtpSendPacketBlock>
    break;
 801135e:	e1aa      	b.n	80116b6 <logTOCProcess+0x3e6>
  case CMD_GET_ITEM:  //Get log variable
    LOG_DEBUG("Packet is TOC_GET_ITEM Id: %d\n", p.data[1]);
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 8011360:	2300      	movs	r3, #0
 8011362:	617b      	str	r3, [r7, #20]
 8011364:	e032      	b.n	80113cc <logTOCProcess+0xfc>
    {
      if (logs[ptr].type & LOG_GROUP)
 8011366:	4b88      	ldr	r3, [pc, #544]	; (8011588 <logTOCProcess+0x2b8>)
 8011368:	6819      	ldr	r1, [r3, #0]
 801136a:	697a      	ldr	r2, [r7, #20]
 801136c:	4613      	mov	r3, r2
 801136e:	005b      	lsls	r3, r3, #1
 8011370:	4413      	add	r3, r2
 8011372:	009b      	lsls	r3, r3, #2
 8011374:	440b      	add	r3, r1
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	b25b      	sxtb	r3, r3
 801137a:	2b00      	cmp	r3, #0
 801137c:	da1a      	bge.n	80113b4 <logTOCProcess+0xe4>
      {
        if (logs[ptr].type & LOG_START)
 801137e:	4b82      	ldr	r3, [pc, #520]	; (8011588 <logTOCProcess+0x2b8>)
 8011380:	6819      	ldr	r1, [r3, #0]
 8011382:	697a      	ldr	r2, [r7, #20]
 8011384:	4613      	mov	r3, r2
 8011386:	005b      	lsls	r3, r3, #1
 8011388:	4413      	add	r3, r2
 801138a:	009b      	lsls	r3, r3, #2
 801138c:	440b      	add	r3, r1
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	f003 0301 	and.w	r3, r3, #1
 8011394:	2b00      	cmp	r3, #0
 8011396:	d00a      	beq.n	80113ae <logTOCProcess+0xde>
          group = logs[ptr].name;
 8011398:	4b7b      	ldr	r3, [pc, #492]	; (8011588 <logTOCProcess+0x2b8>)
 801139a:	6819      	ldr	r1, [r3, #0]
 801139c:	697a      	ldr	r2, [r7, #20]
 801139e:	4613      	mov	r3, r2
 80113a0:	005b      	lsls	r3, r3, #1
 80113a2:	4413      	add	r3, r2
 80113a4:	009b      	lsls	r3, r3, #2
 80113a6:	440b      	add	r3, r1
 80113a8:	685b      	ldr	r3, [r3, #4]
 80113aa:	613b      	str	r3, [r7, #16]
 80113ac:	e00b      	b.n	80113c6 <logTOCProcess+0xf6>
        else
          group = "";
 80113ae:	4b72      	ldr	r3, [pc, #456]	; (8011578 <logTOCProcess+0x2a8>)
 80113b0:	613b      	str	r3, [r7, #16]
 80113b2:	e008      	b.n	80113c6 <logTOCProcess+0xf6>
      }
      else                          //Ptr points a variable
      {
        if (n==p.data[1])
 80113b4:	4b71      	ldr	r3, [pc, #452]	; (801157c <logTOCProcess+0x2ac>)
 80113b6:	78db      	ldrb	r3, [r3, #3]
 80113b8:	b29b      	uxth	r3, r3
 80113ba:	89fa      	ldrh	r2, [r7, #14]
 80113bc:	429a      	cmp	r2, r3
 80113be:	d00b      	beq.n	80113d8 <logTOCProcess+0x108>
          break;
        n++;
 80113c0:	89fb      	ldrh	r3, [r7, #14]
 80113c2:	3301      	adds	r3, #1
 80113c4:	81fb      	strh	r3, [r7, #14]
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	3301      	adds	r3, #1
 80113ca:	617b      	str	r3, [r7, #20]
 80113cc:	4b6f      	ldr	r3, [pc, #444]	; (801158c <logTOCProcess+0x2bc>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	697a      	ldr	r2, [r7, #20]
 80113d2:	429a      	cmp	r2, r3
 80113d4:	dbc7      	blt.n	8011366 <logTOCProcess+0x96>
 80113d6:	e000      	b.n	80113da <logTOCProcess+0x10a>
          break;
 80113d8:	bf00      	nop
      }
    }

    if (ptr<logsLen)
 80113da:	4b6c      	ldr	r3, [pc, #432]	; (801158c <logTOCProcess+0x2bc>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	697a      	ldr	r2, [r7, #20]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	da67      	bge.n	80114b4 <logTOCProcess+0x1e4>
    {
      LOG_DEBUG("    Item is \"%s\":\"%s\"\n", group, logs[ptr].name);
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 80113e4:	4b65      	ldr	r3, [pc, #404]	; (801157c <logTOCProcess+0x2ac>)
 80113e6:	2250      	movs	r2, #80	; 0x50
 80113e8:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM;
 80113ea:	4b64      	ldr	r3, [pc, #400]	; (801157c <logTOCProcess+0x2ac>)
 80113ec:	2200      	movs	r2, #0
 80113ee:	709a      	strb	r2, [r3, #2]
      p.data[1]=n;
 80113f0:	89fb      	ldrh	r3, [r7, #14]
 80113f2:	b2da      	uxtb	r2, r3
 80113f4:	4b61      	ldr	r3, [pc, #388]	; (801157c <logTOCProcess+0x2ac>)
 80113f6:	70da      	strb	r2, [r3, #3]
      p.data[2]=logGetType(ptr);
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	4618      	mov	r0, r3
 80113fe:	f001 f951 	bl	80126a4 <logGetType>
 8011402:	4603      	mov	r3, r0
 8011404:	b2da      	uxtb	r2, r3
 8011406:	4b5d      	ldr	r3, [pc, #372]	; (801157c <logTOCProcess+0x2ac>)
 8011408:	711a      	strb	r2, [r3, #4]
      p.size=3+2+strlen(group)+strlen(logs[ptr].name);
 801140a:	6938      	ldr	r0, [r7, #16]
 801140c:	f7ee ff40 	bl	8000290 <strlen>
 8011410:	4603      	mov	r3, r0
 8011412:	b2dc      	uxtb	r4, r3
 8011414:	4b5c      	ldr	r3, [pc, #368]	; (8011588 <logTOCProcess+0x2b8>)
 8011416:	6819      	ldr	r1, [r3, #0]
 8011418:	697a      	ldr	r2, [r7, #20]
 801141a:	4613      	mov	r3, r2
 801141c:	005b      	lsls	r3, r3, #1
 801141e:	4413      	add	r3, r2
 8011420:	009b      	lsls	r3, r3, #2
 8011422:	440b      	add	r3, r1
 8011424:	685b      	ldr	r3, [r3, #4]
 8011426:	4618      	mov	r0, r3
 8011428:	f7ee ff32 	bl	8000290 <strlen>
 801142c:	4603      	mov	r3, r0
 801142e:	b2db      	uxtb	r3, r3
 8011430:	4423      	add	r3, r4
 8011432:	b2db      	uxtb	r3, r3
 8011434:	3305      	adds	r3, #5
 8011436:	b2da      	uxtb	r2, r3
 8011438:	4b50      	ldr	r3, [pc, #320]	; (801157c <logTOCProcess+0x2ac>)
 801143a:	701a      	strb	r2, [r3, #0]
      ASSERT(p.size <= CRTP_MAX_DATA_SIZE); // Too long! The name of the group or the parameter may be too long.
 801143c:	4b4f      	ldr	r3, [pc, #316]	; (801157c <logTOCProcess+0x2ac>)
 801143e:	781b      	ldrb	r3, [r3, #0]
 8011440:	2b1e      	cmp	r3, #30
 8011442:	d905      	bls.n	8011450 <logTOCProcess+0x180>
 8011444:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8011448:	4951      	ldr	r1, [pc, #324]	; (8011590 <logTOCProcess+0x2c0>)
 801144a:	4852      	ldr	r0, [pc, #328]	; (8011594 <logTOCProcess+0x2c4>)
 801144c:	f7ff fbe6 	bl	8010c1c <assertFail>
      memcpy(p.data+3, group, strlen(group)+1);
 8011450:	4c51      	ldr	r4, [pc, #324]	; (8011598 <logTOCProcess+0x2c8>)
 8011452:	6938      	ldr	r0, [r7, #16]
 8011454:	f7ee ff1c 	bl	8000290 <strlen>
 8011458:	4603      	mov	r3, r0
 801145a:	3301      	adds	r3, #1
 801145c:	461a      	mov	r2, r3
 801145e:	6939      	ldr	r1, [r7, #16]
 8011460:	4620      	mov	r0, r4
 8011462:	f012 fb5a 	bl	8023b1a <memcpy>
      memcpy(p.data+3+strlen(group)+1, logs[ptr].name, strlen(logs[ptr].name)+1);
 8011466:	6938      	ldr	r0, [r7, #16]
 8011468:	f7ee ff12 	bl	8000290 <strlen>
 801146c:	4603      	mov	r3, r0
 801146e:	3304      	adds	r3, #4
 8011470:	4a4a      	ldr	r2, [pc, #296]	; (801159c <logTOCProcess+0x2cc>)
 8011472:	189c      	adds	r4, r3, r2
 8011474:	4b44      	ldr	r3, [pc, #272]	; (8011588 <logTOCProcess+0x2b8>)
 8011476:	6819      	ldr	r1, [r3, #0]
 8011478:	697a      	ldr	r2, [r7, #20]
 801147a:	4613      	mov	r3, r2
 801147c:	005b      	lsls	r3, r3, #1
 801147e:	4413      	add	r3, r2
 8011480:	009b      	lsls	r3, r3, #2
 8011482:	440b      	add	r3, r1
 8011484:	685d      	ldr	r5, [r3, #4]
 8011486:	4b40      	ldr	r3, [pc, #256]	; (8011588 <logTOCProcess+0x2b8>)
 8011488:	6819      	ldr	r1, [r3, #0]
 801148a:	697a      	ldr	r2, [r7, #20]
 801148c:	4613      	mov	r3, r2
 801148e:	005b      	lsls	r3, r3, #1
 8011490:	4413      	add	r3, r2
 8011492:	009b      	lsls	r3, r3, #2
 8011494:	440b      	add	r3, r1
 8011496:	685b      	ldr	r3, [r3, #4]
 8011498:	4618      	mov	r0, r3
 801149a:	f7ee fef9 	bl	8000290 <strlen>
 801149e:	4603      	mov	r3, r0
 80114a0:	3301      	adds	r3, #1
 80114a2:	461a      	mov	r2, r3
 80114a4:	4629      	mov	r1, r5
 80114a6:	4620      	mov	r0, r4
 80114a8:	f012 fb37 	bl	8023b1a <memcpy>
      crtpSendPacketBlock(&p);
 80114ac:	4833      	ldr	r0, [pc, #204]	; (801157c <logTOCProcess+0x2ac>)
 80114ae:	f7ef fff9 	bl	80014a4 <crtpSendPacketBlock>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
      p.data[0]=CMD_GET_ITEM;
      p.size=1;
      crtpSendPacketBlock(&p);
    }
    break;
 80114b2:	e100      	b.n	80116b6 <logTOCProcess+0x3e6>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 80114b4:	4b31      	ldr	r3, [pc, #196]	; (801157c <logTOCProcess+0x2ac>)
 80114b6:	2250      	movs	r2, #80	; 0x50
 80114b8:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM;
 80114ba:	4b30      	ldr	r3, [pc, #192]	; (801157c <logTOCProcess+0x2ac>)
 80114bc:	2200      	movs	r2, #0
 80114be:	709a      	strb	r2, [r3, #2]
      p.size=1;
 80114c0:	4b2e      	ldr	r3, [pc, #184]	; (801157c <logTOCProcess+0x2ac>)
 80114c2:	2201      	movs	r2, #1
 80114c4:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(&p);
 80114c6:	482d      	ldr	r0, [pc, #180]	; (801157c <logTOCProcess+0x2ac>)
 80114c8:	f7ef ffec 	bl	80014a4 <crtpSendPacketBlock>
    break;
 80114cc:	e0f3      	b.n	80116b6 <logTOCProcess+0x3e6>
  case CMD_GET_INFO_V2: //Get info packet about the log implementation
    LOG_DEBUG("Packet is TOC_GET_INFO\n");
    ptr = 0;
 80114ce:	2300      	movs	r3, #0
 80114d0:	617b      	str	r3, [r7, #20]
    group = "";
 80114d2:	4b29      	ldr	r3, [pc, #164]	; (8011578 <logTOCProcess+0x2a8>)
 80114d4:	613b      	str	r3, [r7, #16]
    p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 80114d6:	4b29      	ldr	r3, [pc, #164]	; (801157c <logTOCProcess+0x2ac>)
 80114d8:	2250      	movs	r2, #80	; 0x50
 80114da:	705a      	strb	r2, [r3, #1]
    p.size=9;
 80114dc:	4b27      	ldr	r3, [pc, #156]	; (801157c <logTOCProcess+0x2ac>)
 80114de:	2209      	movs	r2, #9
 80114e0:	701a      	strb	r2, [r3, #0]
    p.data[0]=CMD_GET_INFO_V2;
 80114e2:	4b26      	ldr	r3, [pc, #152]	; (801157c <logTOCProcess+0x2ac>)
 80114e4:	2203      	movs	r2, #3
 80114e6:	709a      	strb	r2, [r3, #2]
 80114e8:	4b25      	ldr	r3, [pc, #148]	; (8011580 <logTOCProcess+0x2b0>)
 80114ea:	881b      	ldrh	r3, [r3, #0]
    memcpy(&p.data[1], &logsCount, 2);
 80114ec:	4a23      	ldr	r2, [pc, #140]	; (801157c <logTOCProcess+0x2ac>)
 80114ee:	f8a2 3003 	strh.w	r3, [r2, #3]
 80114f2:	4b24      	ldr	r3, [pc, #144]	; (8011584 <logTOCProcess+0x2b4>)
 80114f4:	681b      	ldr	r3, [r3, #0]
    memcpy(&p.data[3], &logsCrc, 4);
 80114f6:	4a21      	ldr	r2, [pc, #132]	; (801157c <logTOCProcess+0x2ac>)
 80114f8:	f8c2 3005 	str.w	r3, [r2, #5]
    p.data[7]=LOG_MAX_BLOCKS;
 80114fc:	4b1f      	ldr	r3, [pc, #124]	; (801157c <logTOCProcess+0x2ac>)
 80114fe:	2210      	movs	r2, #16
 8011500:	725a      	strb	r2, [r3, #9]
    p.data[8]=LOG_MAX_OPS;
 8011502:	4b1e      	ldr	r3, [pc, #120]	; (801157c <logTOCProcess+0x2ac>)
 8011504:	2280      	movs	r2, #128	; 0x80
 8011506:	729a      	strb	r2, [r3, #10]
    crtpSendPacketBlock(&p);
 8011508:	481c      	ldr	r0, [pc, #112]	; (801157c <logTOCProcess+0x2ac>)
 801150a:	f7ef ffcb 	bl	80014a4 <crtpSendPacketBlock>
    break;
 801150e:	e0d2      	b.n	80116b6 <logTOCProcess+0x3e6>
 8011510:	4b1a      	ldr	r3, [pc, #104]	; (801157c <logTOCProcess+0x2ac>)
 8011512:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8011516:	b29b      	uxth	r3, r3
  case CMD_GET_ITEM_V2:  //Get log variable
    memcpy(&logId, &p.data[1], 2);
 8011518:	81bb      	strh	r3, [r7, #12]
    LOG_DEBUG("Packet is TOC_GET_ITEM Id: %d\n", logId);
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 801151a:	2300      	movs	r3, #0
 801151c:	617b      	str	r3, [r7, #20]
 801151e:	e049      	b.n	80115b4 <logTOCProcess+0x2e4>
    {
      if (logs[ptr].type & LOG_GROUP)
 8011520:	4b19      	ldr	r3, [pc, #100]	; (8011588 <logTOCProcess+0x2b8>)
 8011522:	6819      	ldr	r1, [r3, #0]
 8011524:	697a      	ldr	r2, [r7, #20]
 8011526:	4613      	mov	r3, r2
 8011528:	005b      	lsls	r3, r3, #1
 801152a:	4413      	add	r3, r2
 801152c:	009b      	lsls	r3, r3, #2
 801152e:	440b      	add	r3, r1
 8011530:	781b      	ldrb	r3, [r3, #0]
 8011532:	b25b      	sxtb	r3, r3
 8011534:	2b00      	cmp	r3, #0
 8011536:	da33      	bge.n	80115a0 <logTOCProcess+0x2d0>
      {
        if (logs[ptr].type & LOG_START)
 8011538:	4b13      	ldr	r3, [pc, #76]	; (8011588 <logTOCProcess+0x2b8>)
 801153a:	6819      	ldr	r1, [r3, #0]
 801153c:	697a      	ldr	r2, [r7, #20]
 801153e:	4613      	mov	r3, r2
 8011540:	005b      	lsls	r3, r3, #1
 8011542:	4413      	add	r3, r2
 8011544:	009b      	lsls	r3, r3, #2
 8011546:	440b      	add	r3, r1
 8011548:	781b      	ldrb	r3, [r3, #0]
 801154a:	f003 0301 	and.w	r3, r3, #1
 801154e:	2b00      	cmp	r3, #0
 8011550:	d00a      	beq.n	8011568 <logTOCProcess+0x298>
          group = logs[ptr].name;
 8011552:	4b0d      	ldr	r3, [pc, #52]	; (8011588 <logTOCProcess+0x2b8>)
 8011554:	6819      	ldr	r1, [r3, #0]
 8011556:	697a      	ldr	r2, [r7, #20]
 8011558:	4613      	mov	r3, r2
 801155a:	005b      	lsls	r3, r3, #1
 801155c:	4413      	add	r3, r2
 801155e:	009b      	lsls	r3, r3, #2
 8011560:	440b      	add	r3, r1
 8011562:	685b      	ldr	r3, [r3, #4]
 8011564:	613b      	str	r3, [r7, #16]
 8011566:	e022      	b.n	80115ae <logTOCProcess+0x2de>
        else
          group = "";
 8011568:	4b03      	ldr	r3, [pc, #12]	; (8011578 <logTOCProcess+0x2a8>)
 801156a:	613b      	str	r3, [r7, #16]
 801156c:	e01f      	b.n	80115ae <logTOCProcess+0x2de>
 801156e:	bf00      	nop
 8011570:	0802bef0 	.word	0x0802bef0
 8011574:	0802bef8 	.word	0x0802bef8
 8011578:	0802bee8 	.word	0x0802bee8
 801157c:	2000bc38 	.word	0x2000bc38
 8011580:	2000bc34 	.word	0x2000bc34
 8011584:	2000bc30 	.word	0x2000bc30
 8011588:	2000bc28 	.word	0x2000bc28
 801158c:	2000bc2c 	.word	0x2000bc2c
 8011590:	0802bed0 	.word	0x0802bed0
 8011594:	0802bf18 	.word	0x0802bf18
 8011598:	2000bc3d 	.word	0x2000bc3d
 801159c:	2000bc3a 	.word	0x2000bc3a
      }
      else                          //Ptr points a variable
      {
        if (n==logId)
 80115a0:	89bb      	ldrh	r3, [r7, #12]
 80115a2:	89fa      	ldrh	r2, [r7, #14]
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d00b      	beq.n	80115c0 <logTOCProcess+0x2f0>
          break;
        n++;
 80115a8:	89fb      	ldrh	r3, [r7, #14]
 80115aa:	3301      	adds	r3, #1
 80115ac:	81fb      	strh	r3, [r7, #14]
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	3301      	adds	r3, #1
 80115b2:	617b      	str	r3, [r7, #20]
 80115b4:	4b42      	ldr	r3, [pc, #264]	; (80116c0 <logTOCProcess+0x3f0>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	697a      	ldr	r2, [r7, #20]
 80115ba:	429a      	cmp	r2, r3
 80115bc:	dbb0      	blt.n	8011520 <logTOCProcess+0x250>
 80115be:	e000      	b.n	80115c2 <logTOCProcess+0x2f2>
          break;
 80115c0:	bf00      	nop
      }
    }

    if (ptr<logsLen)
 80115c2:	4b3f      	ldr	r3, [pc, #252]	; (80116c0 <logTOCProcess+0x3f0>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	697a      	ldr	r2, [r7, #20]
 80115c8:	429a      	cmp	r2, r3
 80115ca:	da67      	bge.n	801169c <logTOCProcess+0x3cc>
    {
      LOG_DEBUG("    Item is \"%s\":\"%s\"\n", group, logs[ptr].name);
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 80115cc:	4b3d      	ldr	r3, [pc, #244]	; (80116c4 <logTOCProcess+0x3f4>)
 80115ce:	2250      	movs	r2, #80	; 0x50
 80115d0:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM_V2;
 80115d2:	4b3c      	ldr	r3, [pc, #240]	; (80116c4 <logTOCProcess+0x3f4>)
 80115d4:	2202      	movs	r2, #2
 80115d6:	709a      	strb	r2, [r3, #2]
 80115d8:	89bb      	ldrh	r3, [r7, #12]
      memcpy(&p.data[1], &logId, 2);
 80115da:	4a3a      	ldr	r2, [pc, #232]	; (80116c4 <logTOCProcess+0x3f4>)
 80115dc:	f8a2 3003 	strh.w	r3, [r2, #3]
      p.data[3]=logGetType(ptr);
 80115e0:	697b      	ldr	r3, [r7, #20]
 80115e2:	b29b      	uxth	r3, r3
 80115e4:	4618      	mov	r0, r3
 80115e6:	f001 f85d 	bl	80126a4 <logGetType>
 80115ea:	4603      	mov	r3, r0
 80115ec:	b2da      	uxtb	r2, r3
 80115ee:	4b35      	ldr	r3, [pc, #212]	; (80116c4 <logTOCProcess+0x3f4>)
 80115f0:	715a      	strb	r2, [r3, #5]
      p.size=4+2+strlen(group)+strlen(logs[ptr].name);
 80115f2:	6938      	ldr	r0, [r7, #16]
 80115f4:	f7ee fe4c 	bl	8000290 <strlen>
 80115f8:	4603      	mov	r3, r0
 80115fa:	b2dc      	uxtb	r4, r3
 80115fc:	4b32      	ldr	r3, [pc, #200]	; (80116c8 <logTOCProcess+0x3f8>)
 80115fe:	6819      	ldr	r1, [r3, #0]
 8011600:	697a      	ldr	r2, [r7, #20]
 8011602:	4613      	mov	r3, r2
 8011604:	005b      	lsls	r3, r3, #1
 8011606:	4413      	add	r3, r2
 8011608:	009b      	lsls	r3, r3, #2
 801160a:	440b      	add	r3, r1
 801160c:	685b      	ldr	r3, [r3, #4]
 801160e:	4618      	mov	r0, r3
 8011610:	f7ee fe3e 	bl	8000290 <strlen>
 8011614:	4603      	mov	r3, r0
 8011616:	b2db      	uxtb	r3, r3
 8011618:	4423      	add	r3, r4
 801161a:	b2db      	uxtb	r3, r3
 801161c:	3306      	adds	r3, #6
 801161e:	b2da      	uxtb	r2, r3
 8011620:	4b28      	ldr	r3, [pc, #160]	; (80116c4 <logTOCProcess+0x3f4>)
 8011622:	701a      	strb	r2, [r3, #0]
      ASSERT(p.size <= CRTP_MAX_DATA_SIZE); // Too long! The name of the group or the parameter may be too long.
 8011624:	4b27      	ldr	r3, [pc, #156]	; (80116c4 <logTOCProcess+0x3f4>)
 8011626:	781b      	ldrb	r3, [r3, #0]
 8011628:	2b1e      	cmp	r3, #30
 801162a:	d905      	bls.n	8011638 <logTOCProcess+0x368>
 801162c:	f240 1271 	movw	r2, #369	; 0x171
 8011630:	4926      	ldr	r1, [pc, #152]	; (80116cc <logTOCProcess+0x3fc>)
 8011632:	4827      	ldr	r0, [pc, #156]	; (80116d0 <logTOCProcess+0x400>)
 8011634:	f7ff faf2 	bl	8010c1c <assertFail>
      memcpy(p.data+4, group, strlen(group)+1);
 8011638:	4c26      	ldr	r4, [pc, #152]	; (80116d4 <logTOCProcess+0x404>)
 801163a:	6938      	ldr	r0, [r7, #16]
 801163c:	f7ee fe28 	bl	8000290 <strlen>
 8011640:	4603      	mov	r3, r0
 8011642:	3301      	adds	r3, #1
 8011644:	461a      	mov	r2, r3
 8011646:	6939      	ldr	r1, [r7, #16]
 8011648:	4620      	mov	r0, r4
 801164a:	f012 fa66 	bl	8023b1a <memcpy>
      memcpy(p.data+4+strlen(group)+1, logs[ptr].name, strlen(logs[ptr].name)+1);
 801164e:	6938      	ldr	r0, [r7, #16]
 8011650:	f7ee fe1e 	bl	8000290 <strlen>
 8011654:	4603      	mov	r3, r0
 8011656:	3305      	adds	r3, #5
 8011658:	4a1f      	ldr	r2, [pc, #124]	; (80116d8 <logTOCProcess+0x408>)
 801165a:	189c      	adds	r4, r3, r2
 801165c:	4b1a      	ldr	r3, [pc, #104]	; (80116c8 <logTOCProcess+0x3f8>)
 801165e:	6819      	ldr	r1, [r3, #0]
 8011660:	697a      	ldr	r2, [r7, #20]
 8011662:	4613      	mov	r3, r2
 8011664:	005b      	lsls	r3, r3, #1
 8011666:	4413      	add	r3, r2
 8011668:	009b      	lsls	r3, r3, #2
 801166a:	440b      	add	r3, r1
 801166c:	685d      	ldr	r5, [r3, #4]
 801166e:	4b16      	ldr	r3, [pc, #88]	; (80116c8 <logTOCProcess+0x3f8>)
 8011670:	6819      	ldr	r1, [r3, #0]
 8011672:	697a      	ldr	r2, [r7, #20]
 8011674:	4613      	mov	r3, r2
 8011676:	005b      	lsls	r3, r3, #1
 8011678:	4413      	add	r3, r2
 801167a:	009b      	lsls	r3, r3, #2
 801167c:	440b      	add	r3, r1
 801167e:	685b      	ldr	r3, [r3, #4]
 8011680:	4618      	mov	r0, r3
 8011682:	f7ee fe05 	bl	8000290 <strlen>
 8011686:	4603      	mov	r3, r0
 8011688:	3301      	adds	r3, #1
 801168a:	461a      	mov	r2, r3
 801168c:	4629      	mov	r1, r5
 801168e:	4620      	mov	r0, r4
 8011690:	f012 fa43 	bl	8023b1a <memcpy>
      crtpSendPacketBlock(&p);
 8011694:	480b      	ldr	r0, [pc, #44]	; (80116c4 <logTOCProcess+0x3f4>)
 8011696:	f7ef ff05 	bl	80014a4 <crtpSendPacketBlock>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
      p.data[0]=CMD_GET_ITEM_V2;
      p.size=1;
      crtpSendPacketBlock(&p);
    }
    break;
 801169a:	e00b      	b.n	80116b4 <logTOCProcess+0x3e4>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 801169c:	4b09      	ldr	r3, [pc, #36]	; (80116c4 <logTOCProcess+0x3f4>)
 801169e:	2250      	movs	r2, #80	; 0x50
 80116a0:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM_V2;
 80116a2:	4b08      	ldr	r3, [pc, #32]	; (80116c4 <logTOCProcess+0x3f4>)
 80116a4:	2202      	movs	r2, #2
 80116a6:	709a      	strb	r2, [r3, #2]
      p.size=1;
 80116a8:	4b06      	ldr	r3, [pc, #24]	; (80116c4 <logTOCProcess+0x3f4>)
 80116aa:	2201      	movs	r2, #1
 80116ac:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(&p);
 80116ae:	4805      	ldr	r0, [pc, #20]	; (80116c4 <logTOCProcess+0x3f4>)
 80116b0:	f7ef fef8 	bl	80014a4 <crtpSendPacketBlock>
    break;
 80116b4:	bf00      	nop
  }
}
 80116b6:	bf00      	nop
 80116b8:	3718      	adds	r7, #24
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bdb0      	pop	{r4, r5, r7, pc}
 80116be:	bf00      	nop
 80116c0:	2000bc2c 	.word	0x2000bc2c
 80116c4:	2000bc38 	.word	0x2000bc38
 80116c8:	2000bc28 	.word	0x2000bc28
 80116cc:	0802bed0 	.word	0x0802bed0
 80116d0:	0802bf18 	.word	0x0802bf18
 80116d4:	2000bc3e 	.word	0x2000bc3e
 80116d8:	2000bc3a 	.word	0x2000bc3a

080116dc <logControlProcess>:

void logControlProcess()
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b082      	sub	sp, #8
 80116e0:	af00      	add	r7, sp, #0
  int ret = ENOEXEC;
 80116e2:	2308      	movs	r3, #8
 80116e4:	607b      	str	r3, [r7, #4]

  switch(p.data[0])
 80116e6:	4b40      	ldr	r3, [pc, #256]	; (80117e8 <logControlProcess+0x10c>)
 80116e8:	789b      	ldrb	r3, [r3, #2]
 80116ea:	2b07      	cmp	r3, #7
 80116ec:	d86e      	bhi.n	80117cc <logControlProcess+0xf0>
 80116ee:	a201      	add	r2, pc, #4	; (adr r2, 80116f4 <logControlProcess+0x18>)
 80116f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116f4:	08011715 	.word	0x08011715
 80116f8:	0801172d 	.word	0x0801172d
 80116fc:	08011747 	.word	0x08011747
 8011700:	08011755 	.word	0x08011755
 8011704:	08011773 	.word	0x08011773
 8011708:	08011781 	.word	0x08011781
 801170c:	0801178b 	.word	0x0801178b
 8011710:	080117ab 	.word	0x080117ab
  {
    case CONTROL_CREATE_BLOCK:
      ret = logCreateBlock( p.data[1],
 8011714:	4b34      	ldr	r3, [pc, #208]	; (80117e8 <logControlProcess+0x10c>)
 8011716:	78db      	ldrb	r3, [r3, #3]
                            (struct ops_setting*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting) );
 8011718:	4a33      	ldr	r2, [pc, #204]	; (80117e8 <logControlProcess+0x10c>)
 801171a:	7812      	ldrb	r2, [r2, #0]
 801171c:	3a02      	subs	r2, #2
 801171e:	0852      	lsrs	r2, r2, #1
      ret = logCreateBlock( p.data[1],
 8011720:	4932      	ldr	r1, [pc, #200]	; (80117ec <logControlProcess+0x110>)
 8011722:	4618      	mov	r0, r3
 8011724:	f000 f866 	bl	80117f4 <logCreateBlock>
 8011728:	6078      	str	r0, [r7, #4]
      break;
 801172a:	e04f      	b.n	80117cc <logControlProcess+0xf0>
    case CONTROL_APPEND_BLOCK:
      ret = logAppendBlock( p.data[1],
 801172c:	4b2e      	ldr	r3, [pc, #184]	; (80117e8 <logControlProcess+0x10c>)
 801172e:	78db      	ldrb	r3, [r3, #3]
 8011730:	4618      	mov	r0, r3
                            (struct ops_setting*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting) );
 8011732:	4b2d      	ldr	r3, [pc, #180]	; (80117e8 <logControlProcess+0x10c>)
 8011734:	781b      	ldrb	r3, [r3, #0]
 8011736:	3b02      	subs	r3, #2
 8011738:	085b      	lsrs	r3, r3, #1
      ret = logAppendBlock( p.data[1],
 801173a:	461a      	mov	r2, r3
 801173c:	492b      	ldr	r1, [pc, #172]	; (80117ec <logControlProcess+0x110>)
 801173e:	f000 f985 	bl	8011a4c <logAppendBlock>
 8011742:	6078      	str	r0, [r7, #4]
      break;
 8011744:	e042      	b.n	80117cc <logControlProcess+0xf0>
    case CONTROL_DELETE_BLOCK:
      ret = logDeleteBlock( p.data[1] );
 8011746:	4b28      	ldr	r3, [pc, #160]	; (80117e8 <logControlProcess+0x10c>)
 8011748:	78db      	ldrb	r3, [r3, #3]
 801174a:	4618      	mov	r0, r3
 801174c:	f000 fb3a 	bl	8011dc4 <logDeleteBlock>
 8011750:	6078      	str	r0, [r7, #4]
      break;
 8011752:	e03b      	b.n	80117cc <logControlProcess+0xf0>
    case CONTROL_START_BLOCK:
      ret = logStartBlock( p.data[1], p.data[2]*10);
 8011754:	4b24      	ldr	r3, [pc, #144]	; (80117e8 <logControlProcess+0x10c>)
 8011756:	78db      	ldrb	r3, [r3, #3]
 8011758:	4618      	mov	r0, r3
 801175a:	4b23      	ldr	r3, [pc, #140]	; (80117e8 <logControlProcess+0x10c>)
 801175c:	791b      	ldrb	r3, [r3, #4]
 801175e:	461a      	mov	r2, r3
 8011760:	4613      	mov	r3, r2
 8011762:	009b      	lsls	r3, r3, #2
 8011764:	4413      	add	r3, r2
 8011766:	005b      	lsls	r3, r3, #1
 8011768:	4619      	mov	r1, r3
 801176a:	f000 fba9 	bl	8011ec0 <logStartBlock>
 801176e:	6078      	str	r0, [r7, #4]
      break;
 8011770:	e02c      	b.n	80117cc <logControlProcess+0xf0>
    case CONTROL_STOP_BLOCK:
      ret = logStopBlock( p.data[1] );
 8011772:	4b1d      	ldr	r3, [pc, #116]	; (80117e8 <logControlProcess+0x10c>)
 8011774:	78db      	ldrb	r3, [r3, #3]
 8011776:	4618      	mov	r0, r3
 8011778:	f000 fbfe 	bl	8011f78 <logStopBlock>
 801177c:	6078      	str	r0, [r7, #4]
      break;
 801177e:	e025      	b.n	80117cc <logControlProcess+0xf0>
    case CONTROL_RESET:
      logReset();
 8011780:	f000 ff30 	bl	80125e4 <logReset>
      ret = 0;
 8011784:	2300      	movs	r3, #0
 8011786:	607b      	str	r3, [r7, #4]
      break;
 8011788:	e020      	b.n	80117cc <logControlProcess+0xf0>
    case CONTROL_CREATE_BLOCK_V2:
      ret = logCreateBlockV2( p.data[1],
 801178a:	4b17      	ldr	r3, [pc, #92]	; (80117e8 <logControlProcess+0x10c>)
 801178c:	78d8      	ldrb	r0, [r3, #3]
                            (struct ops_setting_v2*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting_v2) );
 801178e:	4b16      	ldr	r3, [pc, #88]	; (80117e8 <logControlProcess+0x10c>)
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	3b02      	subs	r3, #2
 8011794:	461a      	mov	r2, r3
 8011796:	4b16      	ldr	r3, [pc, #88]	; (80117f0 <logControlProcess+0x114>)
 8011798:	fba3 2302 	umull	r2, r3, r3, r2
 801179c:	085b      	lsrs	r3, r3, #1
      ret = logCreateBlockV2( p.data[1],
 801179e:	461a      	mov	r2, r3
 80117a0:	4912      	ldr	r1, [pc, #72]	; (80117ec <logControlProcess+0x110>)
 80117a2:	f000 f8bd 	bl	8011920 <logCreateBlockV2>
 80117a6:	6078      	str	r0, [r7, #4]
      break;
 80117a8:	e010      	b.n	80117cc <logControlProcess+0xf0>
    case CONTROL_APPEND_BLOCK_V2:
      ret = logAppendBlockV2( p.data[1],
 80117aa:	4b0f      	ldr	r3, [pc, #60]	; (80117e8 <logControlProcess+0x10c>)
 80117ac:	78db      	ldrb	r3, [r3, #3]
 80117ae:	4618      	mov	r0, r3
                            (struct ops_setting_v2*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting_v2) );
 80117b0:	4b0d      	ldr	r3, [pc, #52]	; (80117e8 <logControlProcess+0x10c>)
 80117b2:	781b      	ldrb	r3, [r3, #0]
 80117b4:	3b02      	subs	r3, #2
 80117b6:	461a      	mov	r2, r3
 80117b8:	4b0d      	ldr	r3, [pc, #52]	; (80117f0 <logControlProcess+0x114>)
 80117ba:	fba3 2302 	umull	r2, r3, r3, r2
 80117be:	085b      	lsrs	r3, r3, #1
      ret = logAppendBlockV2( p.data[1],
 80117c0:	461a      	mov	r2, r3
 80117c2:	490a      	ldr	r1, [pc, #40]	; (80117ec <logControlProcess+0x110>)
 80117c4:	f000 fa16 	bl	8011bf4 <logAppendBlockV2>
 80117c8:	6078      	str	r0, [r7, #4]
      break;
 80117ca:	bf00      	nop
  }

  //Commands answer
  p.data[2] = ret;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	b2da      	uxtb	r2, r3
 80117d0:	4b05      	ldr	r3, [pc, #20]	; (80117e8 <logControlProcess+0x10c>)
 80117d2:	711a      	strb	r2, [r3, #4]
  p.size = 3;
 80117d4:	4b04      	ldr	r3, [pc, #16]	; (80117e8 <logControlProcess+0x10c>)
 80117d6:	2203      	movs	r2, #3
 80117d8:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(&p);
 80117da:	4803      	ldr	r0, [pc, #12]	; (80117e8 <logControlProcess+0x10c>)
 80117dc:	f7ef fe62 	bl	80014a4 <crtpSendPacketBlock>
}
 80117e0:	bf00      	nop
 80117e2:	3708      	adds	r7, #8
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}
 80117e8:	2000bc38 	.word	0x2000bc38
 80117ec:	2000bc3c 	.word	0x2000bc3c
 80117f0:	aaaaaaab 	.word	0xaaaaaaab

080117f4 <logCreateBlock>:

static int logCreateBlock(unsigned char id, struct ops_setting * settings, int len)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b088      	sub	sp, #32
 80117f8:	af02      	add	r7, sp, #8
 80117fa:	4603      	mov	r3, r0
 80117fc:	60b9      	str	r1, [r7, #8]
 80117fe:	607a      	str	r2, [r7, #4]
 8011800:	73fb      	strb	r3, [r7, #15]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8011802:	2300      	movs	r3, #0
 8011804:	617b      	str	r3, [r7, #20]
 8011806:	e00f      	b.n	8011828 <logCreateBlock+0x34>
    if (id == logBlocks[i].id) return EEXIST;
 8011808:	7bf9      	ldrb	r1, [r7, #15]
 801180a:	4842      	ldr	r0, [pc, #264]	; (8011914 <logCreateBlock+0x120>)
 801180c:	697a      	ldr	r2, [r7, #20]
 801180e:	4613      	mov	r3, r2
 8011810:	011b      	lsls	r3, r3, #4
 8011812:	1a9b      	subs	r3, r3, r2
 8011814:	009b      	lsls	r3, r3, #2
 8011816:	4403      	add	r3, r0
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	4299      	cmp	r1, r3
 801181c:	d101      	bne.n	8011822 <logCreateBlock+0x2e>
 801181e:	2311      	movs	r3, #17
 8011820:	e074      	b.n	801190c <logCreateBlock+0x118>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	3301      	adds	r3, #1
 8011826:	617b      	str	r3, [r7, #20]
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	2b0f      	cmp	r3, #15
 801182c:	ddec      	ble.n	8011808 <logCreateBlock+0x14>

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 801182e:	2300      	movs	r3, #0
 8011830:	617b      	str	r3, [r7, #20]
 8011832:	e00d      	b.n	8011850 <logCreateBlock+0x5c>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 8011834:	4937      	ldr	r1, [pc, #220]	; (8011914 <logCreateBlock+0x120>)
 8011836:	697a      	ldr	r2, [r7, #20]
 8011838:	4613      	mov	r3, r2
 801183a:	011b      	lsls	r3, r3, #4
 801183c:	1a9b      	subs	r3, r3, r2
 801183e:	009b      	lsls	r3, r3, #2
 8011840:	440b      	add	r3, r1
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011848:	d006      	beq.n	8011858 <logCreateBlock+0x64>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	3301      	adds	r3, #1
 801184e:	617b      	str	r3, [r7, #20]
 8011850:	697b      	ldr	r3, [r7, #20]
 8011852:	2b0f      	cmp	r3, #15
 8011854:	ddee      	ble.n	8011834 <logCreateBlock+0x40>
 8011856:	e000      	b.n	801185a <logCreateBlock+0x66>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 8011858:	bf00      	nop

  if (i == LOG_MAX_BLOCKS)
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	2b10      	cmp	r3, #16
 801185e:	d101      	bne.n	8011864 <logCreateBlock+0x70>
    return ENOMEM;
 8011860:	230c      	movs	r3, #12
 8011862:	e053      	b.n	801190c <logCreateBlock+0x118>

  logBlocks[i].id = id;
 8011864:	7bf9      	ldrb	r1, [r7, #15]
 8011866:	482b      	ldr	r0, [pc, #172]	; (8011914 <logCreateBlock+0x120>)
 8011868:	697a      	ldr	r2, [r7, #20]
 801186a:	4613      	mov	r3, r2
 801186c:	011b      	lsls	r3, r3, #4
 801186e:	1a9b      	subs	r3, r3, r2
 8011870:	009b      	lsls	r3, r3, #2
 8011872:	4403      	add	r3, r0
 8011874:	6019      	str	r1, [r3, #0]
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
    &logBlocks[i], logBlockTimed, &logBlocks[i].timerBuffer);
 8011876:	697a      	ldr	r2, [r7, #20]
 8011878:	4613      	mov	r3, r2
 801187a:	011b      	lsls	r3, r3, #4
 801187c:	1a9b      	subs	r3, r3, r2
 801187e:	009b      	lsls	r3, r3, #2
 8011880:	4a24      	ldr	r2, [pc, #144]	; (8011914 <logCreateBlock+0x120>)
 8011882:	1899      	adds	r1, r3, r2
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
 8011884:	697a      	ldr	r2, [r7, #20]
 8011886:	4613      	mov	r3, r2
 8011888:	011b      	lsls	r3, r3, #4
 801188a:	1a9b      	subs	r3, r3, r2
 801188c:	009b      	lsls	r3, r3, #2
 801188e:	3308      	adds	r3, #8
 8011890:	4a20      	ldr	r2, [pc, #128]	; (8011914 <logCreateBlock+0x120>)
 8011892:	4413      	add	r3, r2
 8011894:	9301      	str	r3, [sp, #4]
 8011896:	4b20      	ldr	r3, [pc, #128]	; (8011918 <logCreateBlock+0x124>)
 8011898:	9300      	str	r3, [sp, #0]
 801189a:	460b      	mov	r3, r1
 801189c:	2201      	movs	r2, #1
 801189e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80118a2:	481e      	ldr	r0, [pc, #120]	; (801191c <logCreateBlock+0x128>)
 80118a4:	f00f f9ce 	bl	8020c44 <xTimerCreateStatic>
 80118a8:	4601      	mov	r1, r0
 80118aa:	481a      	ldr	r0, [pc, #104]	; (8011914 <logCreateBlock+0x120>)
 80118ac:	697a      	ldr	r2, [r7, #20]
 80118ae:	4613      	mov	r3, r2
 80118b0:	011b      	lsls	r3, r3, #4
 80118b2:	1a9b      	subs	r3, r3, r2
 80118b4:	009b      	lsls	r3, r3, #2
 80118b6:	4403      	add	r3, r0
 80118b8:	3304      	adds	r3, #4
 80118ba:	6019      	str	r1, [r3, #0]
  logBlocks[i].ops = NULL;
 80118bc:	4915      	ldr	r1, [pc, #84]	; (8011914 <logCreateBlock+0x120>)
 80118be:	697a      	ldr	r2, [r7, #20]
 80118c0:	4613      	mov	r3, r2
 80118c2:	011b      	lsls	r3, r3, #4
 80118c4:	1a9b      	subs	r3, r3, r2
 80118c6:	009b      	lsls	r3, r3, #2
 80118c8:	440b      	add	r3, r1
 80118ca:	3338      	adds	r3, #56	; 0x38
 80118cc:	2200      	movs	r2, #0
 80118ce:	601a      	str	r2, [r3, #0]

  if (logBlocks[i].timer == NULL)
 80118d0:	4910      	ldr	r1, [pc, #64]	; (8011914 <logCreateBlock+0x120>)
 80118d2:	697a      	ldr	r2, [r7, #20]
 80118d4:	4613      	mov	r3, r2
 80118d6:	011b      	lsls	r3, r3, #4
 80118d8:	1a9b      	subs	r3, r3, r2
 80118da:	009b      	lsls	r3, r3, #2
 80118dc:	440b      	add	r3, r1
 80118de:	3304      	adds	r3, #4
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d10b      	bne.n	80118fe <logCreateBlock+0x10a>
  {
	logBlocks[i].id = BLOCK_ID_FREE;
 80118e6:	490b      	ldr	r1, [pc, #44]	; (8011914 <logCreateBlock+0x120>)
 80118e8:	697a      	ldr	r2, [r7, #20]
 80118ea:	4613      	mov	r3, r2
 80118ec:	011b      	lsls	r3, r3, #4
 80118ee:	1a9b      	subs	r3, r3, r2
 80118f0:	009b      	lsls	r3, r3, #2
 80118f2:	440b      	add	r3, r1
 80118f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80118f8:	601a      	str	r2, [r3, #0]
	return ENOMEM;
 80118fa:	230c      	movs	r3, #12
 80118fc:	e006      	b.n	801190c <logCreateBlock+0x118>
  }

  LOG_DEBUG("Added block ID %d\n", id);

  return logAppendBlock(id, settings, len);
 80118fe:	7bfb      	ldrb	r3, [r7, #15]
 8011900:	687a      	ldr	r2, [r7, #4]
 8011902:	68b9      	ldr	r1, [r7, #8]
 8011904:	4618      	mov	r0, r3
 8011906:	f000 f8a1 	bl	8011a4c <logAppendBlock>
 801190a:	4603      	mov	r3, r0
}
 801190c:	4618      	mov	r0, r3
 801190e:	3718      	adds	r7, #24
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}
 8011914:	200057b8 	.word	0x200057b8
 8011918:	08011fe9 	.word	0x08011fe9
 801191c:	0802bf38 	.word	0x0802bf38

08011920 <logCreateBlockV2>:

static int logCreateBlockV2(unsigned char id, struct ops_setting_v2 * settings, int len)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b088      	sub	sp, #32
 8011924:	af02      	add	r7, sp, #8
 8011926:	4603      	mov	r3, r0
 8011928:	60b9      	str	r1, [r7, #8]
 801192a:	607a      	str	r2, [r7, #4]
 801192c:	73fb      	strb	r3, [r7, #15]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 801192e:	2300      	movs	r3, #0
 8011930:	617b      	str	r3, [r7, #20]
 8011932:	e00f      	b.n	8011954 <logCreateBlockV2+0x34>
    if (id == logBlocks[i].id) return EEXIST;
 8011934:	7bf9      	ldrb	r1, [r7, #15]
 8011936:	4842      	ldr	r0, [pc, #264]	; (8011a40 <logCreateBlockV2+0x120>)
 8011938:	697a      	ldr	r2, [r7, #20]
 801193a:	4613      	mov	r3, r2
 801193c:	011b      	lsls	r3, r3, #4
 801193e:	1a9b      	subs	r3, r3, r2
 8011940:	009b      	lsls	r3, r3, #2
 8011942:	4403      	add	r3, r0
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	4299      	cmp	r1, r3
 8011948:	d101      	bne.n	801194e <logCreateBlockV2+0x2e>
 801194a:	2311      	movs	r3, #17
 801194c:	e074      	b.n	8011a38 <logCreateBlockV2+0x118>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	3301      	adds	r3, #1
 8011952:	617b      	str	r3, [r7, #20]
 8011954:	697b      	ldr	r3, [r7, #20]
 8011956:	2b0f      	cmp	r3, #15
 8011958:	ddec      	ble.n	8011934 <logCreateBlockV2+0x14>

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 801195a:	2300      	movs	r3, #0
 801195c:	617b      	str	r3, [r7, #20]
 801195e:	e00d      	b.n	801197c <logCreateBlockV2+0x5c>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 8011960:	4937      	ldr	r1, [pc, #220]	; (8011a40 <logCreateBlockV2+0x120>)
 8011962:	697a      	ldr	r2, [r7, #20]
 8011964:	4613      	mov	r3, r2
 8011966:	011b      	lsls	r3, r3, #4
 8011968:	1a9b      	subs	r3, r3, r2
 801196a:	009b      	lsls	r3, r3, #2
 801196c:	440b      	add	r3, r1
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011974:	d006      	beq.n	8011984 <logCreateBlockV2+0x64>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	3301      	adds	r3, #1
 801197a:	617b      	str	r3, [r7, #20]
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	2b0f      	cmp	r3, #15
 8011980:	ddee      	ble.n	8011960 <logCreateBlockV2+0x40>
 8011982:	e000      	b.n	8011986 <logCreateBlockV2+0x66>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 8011984:	bf00      	nop

  if (i == LOG_MAX_BLOCKS)
 8011986:	697b      	ldr	r3, [r7, #20]
 8011988:	2b10      	cmp	r3, #16
 801198a:	d101      	bne.n	8011990 <logCreateBlockV2+0x70>
    return ENOMEM;
 801198c:	230c      	movs	r3, #12
 801198e:	e053      	b.n	8011a38 <logCreateBlockV2+0x118>

  logBlocks[i].id = id;
 8011990:	7bf9      	ldrb	r1, [r7, #15]
 8011992:	482b      	ldr	r0, [pc, #172]	; (8011a40 <logCreateBlockV2+0x120>)
 8011994:	697a      	ldr	r2, [r7, #20]
 8011996:	4613      	mov	r3, r2
 8011998:	011b      	lsls	r3, r3, #4
 801199a:	1a9b      	subs	r3, r3, r2
 801199c:	009b      	lsls	r3, r3, #2
 801199e:	4403      	add	r3, r0
 80119a0:	6019      	str	r1, [r3, #0]
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
    &logBlocks[i], logBlockTimed, &logBlocks[i].timerBuffer);
 80119a2:	697a      	ldr	r2, [r7, #20]
 80119a4:	4613      	mov	r3, r2
 80119a6:	011b      	lsls	r3, r3, #4
 80119a8:	1a9b      	subs	r3, r3, r2
 80119aa:	009b      	lsls	r3, r3, #2
 80119ac:	4a24      	ldr	r2, [pc, #144]	; (8011a40 <logCreateBlockV2+0x120>)
 80119ae:	1899      	adds	r1, r3, r2
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
 80119b0:	697a      	ldr	r2, [r7, #20]
 80119b2:	4613      	mov	r3, r2
 80119b4:	011b      	lsls	r3, r3, #4
 80119b6:	1a9b      	subs	r3, r3, r2
 80119b8:	009b      	lsls	r3, r3, #2
 80119ba:	3308      	adds	r3, #8
 80119bc:	4a20      	ldr	r2, [pc, #128]	; (8011a40 <logCreateBlockV2+0x120>)
 80119be:	4413      	add	r3, r2
 80119c0:	9301      	str	r3, [sp, #4]
 80119c2:	4b20      	ldr	r3, [pc, #128]	; (8011a44 <logCreateBlockV2+0x124>)
 80119c4:	9300      	str	r3, [sp, #0]
 80119c6:	460b      	mov	r3, r1
 80119c8:	2201      	movs	r2, #1
 80119ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80119ce:	481e      	ldr	r0, [pc, #120]	; (8011a48 <logCreateBlockV2+0x128>)
 80119d0:	f00f f938 	bl	8020c44 <xTimerCreateStatic>
 80119d4:	4601      	mov	r1, r0
 80119d6:	481a      	ldr	r0, [pc, #104]	; (8011a40 <logCreateBlockV2+0x120>)
 80119d8:	697a      	ldr	r2, [r7, #20]
 80119da:	4613      	mov	r3, r2
 80119dc:	011b      	lsls	r3, r3, #4
 80119de:	1a9b      	subs	r3, r3, r2
 80119e0:	009b      	lsls	r3, r3, #2
 80119e2:	4403      	add	r3, r0
 80119e4:	3304      	adds	r3, #4
 80119e6:	6019      	str	r1, [r3, #0]
  logBlocks[i].ops = NULL;
 80119e8:	4915      	ldr	r1, [pc, #84]	; (8011a40 <logCreateBlockV2+0x120>)
 80119ea:	697a      	ldr	r2, [r7, #20]
 80119ec:	4613      	mov	r3, r2
 80119ee:	011b      	lsls	r3, r3, #4
 80119f0:	1a9b      	subs	r3, r3, r2
 80119f2:	009b      	lsls	r3, r3, #2
 80119f4:	440b      	add	r3, r1
 80119f6:	3338      	adds	r3, #56	; 0x38
 80119f8:	2200      	movs	r2, #0
 80119fa:	601a      	str	r2, [r3, #0]

  if (logBlocks[i].timer == NULL)
 80119fc:	4910      	ldr	r1, [pc, #64]	; (8011a40 <logCreateBlockV2+0x120>)
 80119fe:	697a      	ldr	r2, [r7, #20]
 8011a00:	4613      	mov	r3, r2
 8011a02:	011b      	lsls	r3, r3, #4
 8011a04:	1a9b      	subs	r3, r3, r2
 8011a06:	009b      	lsls	r3, r3, #2
 8011a08:	440b      	add	r3, r1
 8011a0a:	3304      	adds	r3, #4
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d10b      	bne.n	8011a2a <logCreateBlockV2+0x10a>
  {
  logBlocks[i].id = BLOCK_ID_FREE;
 8011a12:	490b      	ldr	r1, [pc, #44]	; (8011a40 <logCreateBlockV2+0x120>)
 8011a14:	697a      	ldr	r2, [r7, #20]
 8011a16:	4613      	mov	r3, r2
 8011a18:	011b      	lsls	r3, r3, #4
 8011a1a:	1a9b      	subs	r3, r3, r2
 8011a1c:	009b      	lsls	r3, r3, #2
 8011a1e:	440b      	add	r3, r1
 8011a20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a24:	601a      	str	r2, [r3, #0]
  return ENOMEM;
 8011a26:	230c      	movs	r3, #12
 8011a28:	e006      	b.n	8011a38 <logCreateBlockV2+0x118>
  }

  LOG_DEBUG("Added block ID %d\n", id);

  return logAppendBlockV2(id, settings, len);
 8011a2a:	7bfb      	ldrb	r3, [r7, #15]
 8011a2c:	687a      	ldr	r2, [r7, #4]
 8011a2e:	68b9      	ldr	r1, [r7, #8]
 8011a30:	4618      	mov	r0, r3
 8011a32:	f000 f8df 	bl	8011bf4 <logAppendBlockV2>
 8011a36:	4603      	mov	r3, r0
}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	3718      	adds	r7, #24
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}
 8011a40:	200057b8 	.word	0x200057b8
 8011a44:	08011fe9 	.word	0x08011fe9
 8011a48:	0802bf38 	.word	0x0802bf38

08011a4c <logAppendBlock>:
static void opsFree(struct log_ops * ops);
static void blockAppendOps(struct log_block * block, struct log_ops * ops);
static int variableGetIndex(int id);

static int logAppendBlock(int id, struct ops_setting * settings, int len)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b08a      	sub	sp, #40	; 0x28
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	60f8      	str	r0, [r7, #12]
 8011a54:	60b9      	str	r1, [r7, #8]
 8011a56:	607a      	str	r2, [r7, #4]
  int i;
  struct log_block * block;

  LOG_DEBUG("Appending %d variable to block %d\n", len, id);

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8011a58:	2300      	movs	r3, #0
 8011a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8011a5c:	e00d      	b.n	8011a7a <logAppendBlock+0x2e>
    if (logBlocks[i].id == id) break;
 8011a5e:	4962      	ldr	r1, [pc, #392]	; (8011be8 <logAppendBlock+0x19c>)
 8011a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a62:	4613      	mov	r3, r2
 8011a64:	011b      	lsls	r3, r3, #4
 8011a66:	1a9b      	subs	r3, r3, r2
 8011a68:	009b      	lsls	r3, r3, #2
 8011a6a:	440b      	add	r3, r1
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	68fa      	ldr	r2, [r7, #12]
 8011a70:	429a      	cmp	r2, r3
 8011a72:	d006      	beq.n	8011a82 <logAppendBlock+0x36>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8011a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a76:	3301      	adds	r3, #1
 8011a78:	627b      	str	r3, [r7, #36]	; 0x24
 8011a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7c:	2b0f      	cmp	r3, #15
 8011a7e:	ddee      	ble.n	8011a5e <logAppendBlock+0x12>
 8011a80:	e000      	b.n	8011a84 <logAppendBlock+0x38>
    if (logBlocks[i].id == id) break;
 8011a82:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 8011a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a86:	2b0f      	cmp	r3, #15
 8011a88:	dd01      	ble.n	8011a8e <logAppendBlock+0x42>
    LOG_ERROR("Trying to append block id %d that doesn't exist.", id);
    return ENOENT;
 8011a8a:	2302      	movs	r3, #2
 8011a8c:	e0a8      	b.n	8011be0 <logAppendBlock+0x194>
  }

  block = &logBlocks[i];
 8011a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a90:	4613      	mov	r3, r2
 8011a92:	011b      	lsls	r3, r3, #4
 8011a94:	1a9b      	subs	r3, r3, r2
 8011a96:	009b      	lsls	r3, r3, #2
 8011a98:	4a53      	ldr	r2, [pc, #332]	; (8011be8 <logAppendBlock+0x19c>)
 8011a9a:	4413      	add	r3, r2
 8011a9c:	623b      	str	r3, [r7, #32]

  for (i=0; i<len; i++)
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8011aa2:	e097      	b.n	8011bd4 <logAppendBlock+0x188>
  {
    int currentLength = blockCalcLength(block);
 8011aa4:	6a38      	ldr	r0, [r7, #32]
 8011aa6:	f000 fd53 	bl	8012550 <blockCalcLength>
 8011aaa:	61f8      	str	r0, [r7, #28]
    struct log_ops * ops;
    int varId;

    if ((currentLength + typeLength[settings[i].logType & LOG_TYPE_MASK])>LOG_MAX_LEN) {
 8011aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aae:	005b      	lsls	r3, r3, #1
 8011ab0:	68ba      	ldr	r2, [r7, #8]
 8011ab2:	4413      	add	r3, r2
 8011ab4:	781b      	ldrb	r3, [r3, #0]
 8011ab6:	f003 030f 	and.w	r3, r3, #15
 8011aba:	4a4c      	ldr	r2, [pc, #304]	; (8011bec <logAppendBlock+0x1a0>)
 8011abc:	5cd3      	ldrb	r3, [r2, r3]
 8011abe:	461a      	mov	r2, r3
 8011ac0:	69fb      	ldr	r3, [r7, #28]
 8011ac2:	4413      	add	r3, r2
 8011ac4:	2b1a      	cmp	r3, #26
 8011ac6:	dd01      	ble.n	8011acc <logAppendBlock+0x80>
      LOG_ERROR("Trying to append a full block. Block id %d.\n", id);
      return E2BIG;
 8011ac8:	2307      	movs	r3, #7
 8011aca:	e089      	b.n	8011be0 <logAppendBlock+0x194>
    }

    ops = opsMalloc();
 8011acc:	f000 fd0a 	bl	80124e4 <opsMalloc>
 8011ad0:	61b8      	str	r0, [r7, #24]

    if(!ops) {
 8011ad2:	69bb      	ldr	r3, [r7, #24]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d101      	bne.n	8011adc <logAppendBlock+0x90>
      LOG_ERROR("No more ops memory free!\n");
      return ENOMEM;
 8011ad8:	230c      	movs	r3, #12
 8011ada:	e081      	b.n	8011be0 <logAppendBlock+0x194>
    }

    if (settings[i].id != 255)  //TOC variable
 8011adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ade:	005b      	lsls	r3, r3, #1
 8011ae0:	68ba      	ldr	r2, [r7, #8]
 8011ae2:	4413      	add	r3, r2
 8011ae4:	785b      	ldrb	r3, [r3, #1]
 8011ae6:	2bff      	cmp	r3, #255	; 0xff
 8011ae8:	d044      	beq.n	8011b74 <logAppendBlock+0x128>
    {
      varId = variableGetIndex(settings[i].id);
 8011aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aec:	005b      	lsls	r3, r3, #1
 8011aee:	68ba      	ldr	r2, [r7, #8]
 8011af0:	4413      	add	r3, r2
 8011af2:	785b      	ldrb	r3, [r3, #1]
 8011af4:	4618      	mov	r0, r3
 8011af6:	f000 fcbb 	bl	8012470 <variableGetIndex>
 8011afa:	6178      	str	r0, [r7, #20]

      if (varId<0) {
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	da01      	bge.n	8011b06 <logAppendBlock+0xba>
        LOG_ERROR("Trying to add variable Id %d that does not exists.", settings[i].id);
        return ENOENT;
 8011b02:	2302      	movs	r3, #2
 8011b04:	e06c      	b.n	8011be0 <logAppendBlock+0x194>
      }

      ops->variable    = logs[varId].address;
 8011b06:	4b3a      	ldr	r3, [pc, #232]	; (8011bf0 <logAppendBlock+0x1a4>)
 8011b08:	6819      	ldr	r1, [r3, #0]
 8011b0a:	697a      	ldr	r2, [r7, #20]
 8011b0c:	4613      	mov	r3, r2
 8011b0e:	005b      	lsls	r3, r3, #1
 8011b10:	4413      	add	r3, r2
 8011b12:	009b      	lsls	r3, r3, #2
 8011b14:	440b      	add	r3, r1
 8011b16:	689a      	ldr	r2, [r3, #8]
 8011b18:	69bb      	ldr	r3, [r7, #24]
 8011b1a:	609a      	str	r2, [r3, #8]
      ops->storageType = logGetType(varId);
 8011b1c:	697b      	ldr	r3, [r7, #20]
 8011b1e:	b29b      	uxth	r3, r3
 8011b20:	4618      	mov	r0, r3
 8011b22:	f000 fdbf 	bl	80126a4 <logGetType>
 8011b26:	4603      	mov	r3, r0
 8011b28:	f003 030f 	and.w	r3, r3, #15
 8011b2c:	b2d9      	uxtb	r1, r3
 8011b2e:	69ba      	ldr	r2, [r7, #24]
 8011b30:	7913      	ldrb	r3, [r2, #4]
 8011b32:	f361 0303 	bfi	r3, r1, #0, #4
 8011b36:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 8011b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3a:	005b      	lsls	r3, r3, #1
 8011b3c:	68ba      	ldr	r2, [r7, #8]
 8011b3e:	4413      	add	r3, r2
 8011b40:	781b      	ldrb	r3, [r3, #0]
 8011b42:	f003 030f 	and.w	r3, r3, #15
 8011b46:	b2d9      	uxtb	r1, r3
 8011b48:	69ba      	ldr	r2, [r7, #24]
 8011b4a:	7913      	ldrb	r3, [r2, #4]
 8011b4c:	f361 1307 	bfi	r3, r1, #4, #4
 8011b50:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acquisitionTypeFromLogType(logs[varId].type);
 8011b52:	4b27      	ldr	r3, [pc, #156]	; (8011bf0 <logAppendBlock+0x1a4>)
 8011b54:	6819      	ldr	r1, [r3, #0]
 8011b56:	697a      	ldr	r2, [r7, #20]
 8011b58:	4613      	mov	r3, r2
 8011b5a:	005b      	lsls	r3, r3, #1
 8011b5c:	4413      	add	r3, r2
 8011b5e:	009b      	lsls	r3, r3, #2
 8011b60:	440b      	add	r3, r1
 8011b62:	781b      	ldrb	r3, [r3, #0]
 8011b64:	4618      	mov	r0, r3
 8011b66:	f000 fdb5 	bl	80126d4 <acquisitionTypeFromLogType>
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	461a      	mov	r2, r3
 8011b6e:	69bb      	ldr	r3, [r7, #24]
 8011b70:	731a      	strb	r2, [r3, #12]
 8011b72:	e028      	b.n	8011bc6 <logAppendBlock+0x17a>

      LOG_DEBUG("Appended variable %d to block %d\n", settings[i].id, id);
    } else {                     //Memory variable
      //TODO: Check that the address is in ram
      ops->variable    = (void*)(&settings[i]+1);
 8011b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b76:	3301      	adds	r3, #1
 8011b78:	005b      	lsls	r3, r3, #1
 8011b7a:	68ba      	ldr	r2, [r7, #8]
 8011b7c:	441a      	add	r2, r3
 8011b7e:	69bb      	ldr	r3, [r7, #24]
 8011b80:	609a      	str	r2, [r3, #8]
      ops->storageType = (settings[i].logType>>4) & LOG_TYPE_MASK;
 8011b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b84:	005b      	lsls	r3, r3, #1
 8011b86:	68ba      	ldr	r2, [r7, #8]
 8011b88:	4413      	add	r3, r2
 8011b8a:	781b      	ldrb	r3, [r3, #0]
 8011b8c:	091b      	lsrs	r3, r3, #4
 8011b8e:	b2db      	uxtb	r3, r3
 8011b90:	f003 030f 	and.w	r3, r3, #15
 8011b94:	b2d9      	uxtb	r1, r3
 8011b96:	69ba      	ldr	r2, [r7, #24]
 8011b98:	7913      	ldrb	r3, [r2, #4]
 8011b9a:	f361 0303 	bfi	r3, r1, #0, #4
 8011b9e:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 8011ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba2:	005b      	lsls	r3, r3, #1
 8011ba4:	68ba      	ldr	r2, [r7, #8]
 8011ba6:	4413      	add	r3, r2
 8011ba8:	781b      	ldrb	r3, [r3, #0]
 8011baa:	f003 030f 	and.w	r3, r3, #15
 8011bae:	b2d9      	uxtb	r1, r3
 8011bb0:	69ba      	ldr	r2, [r7, #24]
 8011bb2:	7913      	ldrb	r3, [r2, #4]
 8011bb4:	f361 1307 	bfi	r3, r1, #4, #4
 8011bb8:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acqType_memory;
 8011bba:	69bb      	ldr	r3, [r7, #24]
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	731a      	strb	r2, [r3, #12]
      i += 2;
 8011bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc2:	3302      	adds	r3, #2
 8011bc4:	627b      	str	r3, [r7, #36]	; 0x24

      LOG_DEBUG("Appended var addr 0x%x to block %d\n", (int)ops->variable, id);
    }
    blockAppendOps(block, ops);
 8011bc6:	69b9      	ldr	r1, [r7, #24]
 8011bc8:	6a38      	ldr	r0, [r7, #32]
 8011bca:	f000 fce7 	bl	801259c <blockAppendOps>
  for (i=0; i<len; i++)
 8011bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd0:	3301      	adds	r3, #1
 8011bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8011bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	f6ff af63 	blt.w	8011aa4 <logAppendBlock+0x58>

    LOG_DEBUG("   Now lenght %d\n", blockCalcLength(block));
  }

  return 0;
 8011bde:	2300      	movs	r3, #0
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	3728      	adds	r7, #40	; 0x28
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}
 8011be8:	200057b8 	.word	0x200057b8
 8011bec:	0802d910 	.word	0x0802d910
 8011bf0:	2000bc28 	.word	0x2000bc28

08011bf4 <logAppendBlockV2>:

static int logAppendBlockV2(int id, struct ops_setting_v2 * settings, int len)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b08a      	sub	sp, #40	; 0x28
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	60f8      	str	r0, [r7, #12]
 8011bfc:	60b9      	str	r1, [r7, #8]
 8011bfe:	607a      	str	r2, [r7, #4]
  int i;
  struct log_block * block;

  LOG_DEBUG("Appending %d variable to block %d\n", len, id);

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8011c00:	2300      	movs	r3, #0
 8011c02:	627b      	str	r3, [r7, #36]	; 0x24
 8011c04:	e00d      	b.n	8011c22 <logAppendBlockV2+0x2e>
    if (logBlocks[i].id == id) break;
 8011c06:	496c      	ldr	r1, [pc, #432]	; (8011db8 <logAppendBlockV2+0x1c4>)
 8011c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c0a:	4613      	mov	r3, r2
 8011c0c:	011b      	lsls	r3, r3, #4
 8011c0e:	1a9b      	subs	r3, r3, r2
 8011c10:	009b      	lsls	r3, r3, #2
 8011c12:	440b      	add	r3, r1
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	68fa      	ldr	r2, [r7, #12]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d006      	beq.n	8011c2a <logAppendBlockV2+0x36>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8011c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c1e:	3301      	adds	r3, #1
 8011c20:	627b      	str	r3, [r7, #36]	; 0x24
 8011c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c24:	2b0f      	cmp	r3, #15
 8011c26:	ddee      	ble.n	8011c06 <logAppendBlockV2+0x12>
 8011c28:	e000      	b.n	8011c2c <logAppendBlockV2+0x38>
    if (logBlocks[i].id == id) break;
 8011c2a:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 8011c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c2e:	2b0f      	cmp	r3, #15
 8011c30:	dd01      	ble.n	8011c36 <logAppendBlockV2+0x42>
    LOG_ERROR("Trying to append block id %d that doesn't exist.", id);
    return ENOENT;
 8011c32:	2302      	movs	r3, #2
 8011c34:	e0bc      	b.n	8011db0 <logAppendBlockV2+0x1bc>
  }

  block = &logBlocks[i];
 8011c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c38:	4613      	mov	r3, r2
 8011c3a:	011b      	lsls	r3, r3, #4
 8011c3c:	1a9b      	subs	r3, r3, r2
 8011c3e:	009b      	lsls	r3, r3, #2
 8011c40:	4a5d      	ldr	r2, [pc, #372]	; (8011db8 <logAppendBlockV2+0x1c4>)
 8011c42:	4413      	add	r3, r2
 8011c44:	623b      	str	r3, [r7, #32]

  for (i=0; i<len; i++)
 8011c46:	2300      	movs	r3, #0
 8011c48:	627b      	str	r3, [r7, #36]	; 0x24
 8011c4a:	e0ab      	b.n	8011da4 <logAppendBlockV2+0x1b0>
  {
    int currentLength = blockCalcLength(block);
 8011c4c:	6a38      	ldr	r0, [r7, #32]
 8011c4e:	f000 fc7f 	bl	8012550 <blockCalcLength>
 8011c52:	61f8      	str	r0, [r7, #28]
    struct log_ops * ops;
    int varId;

    if ((currentLength + typeLength[settings[i].logType & LOG_TYPE_MASK])>LOG_MAX_LEN) {
 8011c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c56:	4613      	mov	r3, r2
 8011c58:	005b      	lsls	r3, r3, #1
 8011c5a:	4413      	add	r3, r2
 8011c5c:	68ba      	ldr	r2, [r7, #8]
 8011c5e:	4413      	add	r3, r2
 8011c60:	781b      	ldrb	r3, [r3, #0]
 8011c62:	f003 030f 	and.w	r3, r3, #15
 8011c66:	4a55      	ldr	r2, [pc, #340]	; (8011dbc <logAppendBlockV2+0x1c8>)
 8011c68:	5cd3      	ldrb	r3, [r2, r3]
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	69fb      	ldr	r3, [r7, #28]
 8011c6e:	4413      	add	r3, r2
 8011c70:	2b1a      	cmp	r3, #26
 8011c72:	dd01      	ble.n	8011c78 <logAppendBlockV2+0x84>
      LOG_ERROR("Trying to append a full block. Block id %d.\n", id);
      return E2BIG;
 8011c74:	2307      	movs	r3, #7
 8011c76:	e09b      	b.n	8011db0 <logAppendBlockV2+0x1bc>
    }

    ops = opsMalloc();
 8011c78:	f000 fc34 	bl	80124e4 <opsMalloc>
 8011c7c:	61b8      	str	r0, [r7, #24]

    if(!ops) {
 8011c7e:	69bb      	ldr	r3, [r7, #24]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d101      	bne.n	8011c88 <logAppendBlockV2+0x94>
      LOG_ERROR("No more ops memory free!\n");
      return ENOMEM;
 8011c84:	230c      	movs	r3, #12
 8011c86:	e093      	b.n	8011db0 <logAppendBlockV2+0x1bc>
    }

    if (settings[i].id != 0xFFFFul)  //TOC variable
 8011c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c8a:	4613      	mov	r3, r2
 8011c8c:	005b      	lsls	r3, r3, #1
 8011c8e:	4413      	add	r3, r2
 8011c90:	68ba      	ldr	r2, [r7, #8]
 8011c92:	4413      	add	r3, r2
 8011c94:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011c98:	b29b      	uxth	r3, r3
 8011c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c9e:	4293      	cmp	r3, r2
 8011ca0:	d04a      	beq.n	8011d38 <logAppendBlockV2+0x144>
    {
      varId = variableGetIndex(settings[i].id);
 8011ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ca4:	4613      	mov	r3, r2
 8011ca6:	005b      	lsls	r3, r3, #1
 8011ca8:	4413      	add	r3, r2
 8011caa:	68ba      	ldr	r2, [r7, #8]
 8011cac:	4413      	add	r3, r2
 8011cae:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011cb2:	b29b      	uxth	r3, r3
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f000 fbdb 	bl	8012470 <variableGetIndex>
 8011cba:	6178      	str	r0, [r7, #20]

      if (varId<0) {
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	da01      	bge.n	8011cc6 <logAppendBlockV2+0xd2>
        LOG_ERROR("Trying to add variable Id %d that does not exists.", settings[i].id);
        return ENOENT;
 8011cc2:	2302      	movs	r3, #2
 8011cc4:	e074      	b.n	8011db0 <logAppendBlockV2+0x1bc>
      }

      ops->variable    = logs[varId].address;
 8011cc6:	4b3e      	ldr	r3, [pc, #248]	; (8011dc0 <logAppendBlockV2+0x1cc>)
 8011cc8:	6819      	ldr	r1, [r3, #0]
 8011cca:	697a      	ldr	r2, [r7, #20]
 8011ccc:	4613      	mov	r3, r2
 8011cce:	005b      	lsls	r3, r3, #1
 8011cd0:	4413      	add	r3, r2
 8011cd2:	009b      	lsls	r3, r3, #2
 8011cd4:	440b      	add	r3, r1
 8011cd6:	689a      	ldr	r2, [r3, #8]
 8011cd8:	69bb      	ldr	r3, [r7, #24]
 8011cda:	609a      	str	r2, [r3, #8]
      ops->storageType = logGetType(varId);
 8011cdc:	697b      	ldr	r3, [r7, #20]
 8011cde:	b29b      	uxth	r3, r3
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f000 fcdf 	bl	80126a4 <logGetType>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	f003 030f 	and.w	r3, r3, #15
 8011cec:	b2d9      	uxtb	r1, r3
 8011cee:	69ba      	ldr	r2, [r7, #24]
 8011cf0:	7913      	ldrb	r3, [r2, #4]
 8011cf2:	f361 0303 	bfi	r3, r1, #0, #4
 8011cf6:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 8011cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cfa:	4613      	mov	r3, r2
 8011cfc:	005b      	lsls	r3, r3, #1
 8011cfe:	4413      	add	r3, r2
 8011d00:	68ba      	ldr	r2, [r7, #8]
 8011d02:	4413      	add	r3, r2
 8011d04:	781b      	ldrb	r3, [r3, #0]
 8011d06:	f003 030f 	and.w	r3, r3, #15
 8011d0a:	b2d9      	uxtb	r1, r3
 8011d0c:	69ba      	ldr	r2, [r7, #24]
 8011d0e:	7913      	ldrb	r3, [r2, #4]
 8011d10:	f361 1307 	bfi	r3, r1, #4, #4
 8011d14:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acquisitionTypeFromLogType(logs[varId].type);
 8011d16:	4b2a      	ldr	r3, [pc, #168]	; (8011dc0 <logAppendBlockV2+0x1cc>)
 8011d18:	6819      	ldr	r1, [r3, #0]
 8011d1a:	697a      	ldr	r2, [r7, #20]
 8011d1c:	4613      	mov	r3, r2
 8011d1e:	005b      	lsls	r3, r3, #1
 8011d20:	4413      	add	r3, r2
 8011d22:	009b      	lsls	r3, r3, #2
 8011d24:	440b      	add	r3, r1
 8011d26:	781b      	ldrb	r3, [r3, #0]
 8011d28:	4618      	mov	r0, r3
 8011d2a:	f000 fcd3 	bl	80126d4 <acquisitionTypeFromLogType>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	461a      	mov	r2, r3
 8011d32:	69bb      	ldr	r3, [r7, #24]
 8011d34:	731a      	strb	r2, [r3, #12]
 8011d36:	e02e      	b.n	8011d96 <logAppendBlockV2+0x1a2>

      LOG_DEBUG("Appended variable %d to block %d\n", settings[i].id, id);
    } else {                     //Memory variable
      //TODO: Check that the address is in ram
      ops->variable    = (void*)(&settings[i]+1);
 8011d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3a:	1c5a      	adds	r2, r3, #1
 8011d3c:	4613      	mov	r3, r2
 8011d3e:	005b      	lsls	r3, r3, #1
 8011d40:	4413      	add	r3, r2
 8011d42:	68ba      	ldr	r2, [r7, #8]
 8011d44:	441a      	add	r2, r3
 8011d46:	69bb      	ldr	r3, [r7, #24]
 8011d48:	609a      	str	r2, [r3, #8]
      ops->storageType = (settings[i].logType>>4) & LOG_TYPE_MASK;
 8011d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d4c:	4613      	mov	r3, r2
 8011d4e:	005b      	lsls	r3, r3, #1
 8011d50:	4413      	add	r3, r2
 8011d52:	68ba      	ldr	r2, [r7, #8]
 8011d54:	4413      	add	r3, r2
 8011d56:	781b      	ldrb	r3, [r3, #0]
 8011d58:	091b      	lsrs	r3, r3, #4
 8011d5a:	b2db      	uxtb	r3, r3
 8011d5c:	f003 030f 	and.w	r3, r3, #15
 8011d60:	b2d9      	uxtb	r1, r3
 8011d62:	69ba      	ldr	r2, [r7, #24]
 8011d64:	7913      	ldrb	r3, [r2, #4]
 8011d66:	f361 0303 	bfi	r3, r1, #0, #4
 8011d6a:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 8011d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d6e:	4613      	mov	r3, r2
 8011d70:	005b      	lsls	r3, r3, #1
 8011d72:	4413      	add	r3, r2
 8011d74:	68ba      	ldr	r2, [r7, #8]
 8011d76:	4413      	add	r3, r2
 8011d78:	781b      	ldrb	r3, [r3, #0]
 8011d7a:	f003 030f 	and.w	r3, r3, #15
 8011d7e:	b2d9      	uxtb	r1, r3
 8011d80:	69ba      	ldr	r2, [r7, #24]
 8011d82:	7913      	ldrb	r3, [r2, #4]
 8011d84:	f361 1307 	bfi	r3, r1, #4, #4
 8011d88:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acqType_memory;
 8011d8a:	69bb      	ldr	r3, [r7, #24]
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	731a      	strb	r2, [r3, #12]
      i += 2;
 8011d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d92:	3302      	adds	r3, #2
 8011d94:	627b      	str	r3, [r7, #36]	; 0x24

      LOG_DEBUG("Appended var addr 0x%x to block %d\n", (int)ops->variable, id);
    }
    blockAppendOps(block, ops);
 8011d96:	69b9      	ldr	r1, [r7, #24]
 8011d98:	6a38      	ldr	r0, [r7, #32]
 8011d9a:	f000 fbff 	bl	801259c <blockAppendOps>
  for (i=0; i<len; i++)
 8011d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da0:	3301      	adds	r3, #1
 8011da2:	627b      	str	r3, [r7, #36]	; 0x24
 8011da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	429a      	cmp	r2, r3
 8011daa:	f6ff af4f 	blt.w	8011c4c <logAppendBlockV2+0x58>

    LOG_DEBUG("   Now lenght %d\n", blockCalcLength(block));
  }

  return 0;
 8011dae:	2300      	movs	r3, #0
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	3728      	adds	r7, #40	; 0x28
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}
 8011db8:	200057b8 	.word	0x200057b8
 8011dbc:	0802d910 	.word	0x0802d910
 8011dc0:	2000bc28 	.word	0x2000bc28

08011dc4 <logDeleteBlock>:

static int logDeleteBlock(int id)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b088      	sub	sp, #32
 8011dc8:	af02      	add	r7, sp, #8
 8011dca:	6078      	str	r0, [r7, #4]
  int i;
  struct log_ops * ops;
  struct log_ops * opsNext;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8011dcc:	2300      	movs	r3, #0
 8011dce:	617b      	str	r3, [r7, #20]
 8011dd0:	e00d      	b.n	8011dee <logDeleteBlock+0x2a>
    if (logBlocks[i].id == id) break;
 8011dd2:	493a      	ldr	r1, [pc, #232]	; (8011ebc <logDeleteBlock+0xf8>)
 8011dd4:	697a      	ldr	r2, [r7, #20]
 8011dd6:	4613      	mov	r3, r2
 8011dd8:	011b      	lsls	r3, r3, #4
 8011dda:	1a9b      	subs	r3, r3, r2
 8011ddc:	009b      	lsls	r3, r3, #2
 8011dde:	440b      	add	r3, r1
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	687a      	ldr	r2, [r7, #4]
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d006      	beq.n	8011df6 <logDeleteBlock+0x32>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8011de8:	697b      	ldr	r3, [r7, #20]
 8011dea:	3301      	adds	r3, #1
 8011dec:	617b      	str	r3, [r7, #20]
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	2b0f      	cmp	r3, #15
 8011df2:	ddee      	ble.n	8011dd2 <logDeleteBlock+0xe>
 8011df4:	e000      	b.n	8011df8 <logDeleteBlock+0x34>
    if (logBlocks[i].id == id) break;
 8011df6:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 8011df8:	697b      	ldr	r3, [r7, #20]
 8011dfa:	2b0f      	cmp	r3, #15
 8011dfc:	dd01      	ble.n	8011e02 <logDeleteBlock+0x3e>
    LOG_ERROR("trying to delete block id %d that doesn't exist.", id);
    return ENOENT;
 8011dfe:	2302      	movs	r3, #2
 8011e00:	e057      	b.n	8011eb2 <logDeleteBlock+0xee>
  }

  ops = logBlocks[i].ops;
 8011e02:	492e      	ldr	r1, [pc, #184]	; (8011ebc <logDeleteBlock+0xf8>)
 8011e04:	697a      	ldr	r2, [r7, #20]
 8011e06:	4613      	mov	r3, r2
 8011e08:	011b      	lsls	r3, r3, #4
 8011e0a:	1a9b      	subs	r3, r3, r2
 8011e0c:	009b      	lsls	r3, r3, #2
 8011e0e:	440b      	add	r3, r1
 8011e10:	3338      	adds	r3, #56	; 0x38
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	613b      	str	r3, [r7, #16]
  while (ops)
 8011e16:	e007      	b.n	8011e28 <logDeleteBlock+0x64>
  {
    opsNext = ops->next;
 8011e18:	693b      	ldr	r3, [r7, #16]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	60fb      	str	r3, [r7, #12]
    opsFree(ops);
 8011e1e:	6938      	ldr	r0, [r7, #16]
 8011e20:	f000 fb88 	bl	8012534 <opsFree>
    ops = opsNext;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	613b      	str	r3, [r7, #16]
  while (ops)
 8011e28:	693b      	ldr	r3, [r7, #16]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d1f4      	bne.n	8011e18 <logDeleteBlock+0x54>
  }

  if (logBlocks[i].timer != 0) {
 8011e2e:	4923      	ldr	r1, [pc, #140]	; (8011ebc <logDeleteBlock+0xf8>)
 8011e30:	697a      	ldr	r2, [r7, #20]
 8011e32:	4613      	mov	r3, r2
 8011e34:	011b      	lsls	r3, r3, #4
 8011e36:	1a9b      	subs	r3, r3, r2
 8011e38:	009b      	lsls	r3, r3, #2
 8011e3a:	440b      	add	r3, r1
 8011e3c:	3304      	adds	r3, #4
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d02b      	beq.n	8011e9c <logDeleteBlock+0xd8>
    xTimerStop(logBlocks[i].timer, portMAX_DELAY);
 8011e44:	491d      	ldr	r1, [pc, #116]	; (8011ebc <logDeleteBlock+0xf8>)
 8011e46:	697a      	ldr	r2, [r7, #20]
 8011e48:	4613      	mov	r3, r2
 8011e4a:	011b      	lsls	r3, r3, #4
 8011e4c:	1a9b      	subs	r3, r3, r2
 8011e4e:	009b      	lsls	r3, r3, #2
 8011e50:	440b      	add	r3, r1
 8011e52:	3304      	adds	r3, #4
 8011e54:	6818      	ldr	r0, [r3, #0]
 8011e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e5a:	9300      	str	r3, [sp, #0]
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	2200      	movs	r2, #0
 8011e60:	2103      	movs	r1, #3
 8011e62:	f00e ff63 	bl	8020d2c <xTimerGenericCommand>
    xTimerDelete(logBlocks[i].timer, portMAX_DELAY);
 8011e66:	4915      	ldr	r1, [pc, #84]	; (8011ebc <logDeleteBlock+0xf8>)
 8011e68:	697a      	ldr	r2, [r7, #20]
 8011e6a:	4613      	mov	r3, r2
 8011e6c:	011b      	lsls	r3, r3, #4
 8011e6e:	1a9b      	subs	r3, r3, r2
 8011e70:	009b      	lsls	r3, r3, #2
 8011e72:	440b      	add	r3, r1
 8011e74:	3304      	adds	r3, #4
 8011e76:	6818      	ldr	r0, [r3, #0]
 8011e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e7c:	9300      	str	r3, [sp, #0]
 8011e7e:	2300      	movs	r3, #0
 8011e80:	2200      	movs	r2, #0
 8011e82:	2105      	movs	r1, #5
 8011e84:	f00e ff52 	bl	8020d2c <xTimerGenericCommand>
    logBlocks[i].timer = 0;
 8011e88:	490c      	ldr	r1, [pc, #48]	; (8011ebc <logDeleteBlock+0xf8>)
 8011e8a:	697a      	ldr	r2, [r7, #20]
 8011e8c:	4613      	mov	r3, r2
 8011e8e:	011b      	lsls	r3, r3, #4
 8011e90:	1a9b      	subs	r3, r3, r2
 8011e92:	009b      	lsls	r3, r3, #2
 8011e94:	440b      	add	r3, r1
 8011e96:	3304      	adds	r3, #4
 8011e98:	2200      	movs	r2, #0
 8011e9a:	601a      	str	r2, [r3, #0]
  }

  logBlocks[i].id = BLOCK_ID_FREE;
 8011e9c:	4907      	ldr	r1, [pc, #28]	; (8011ebc <logDeleteBlock+0xf8>)
 8011e9e:	697a      	ldr	r2, [r7, #20]
 8011ea0:	4613      	mov	r3, r2
 8011ea2:	011b      	lsls	r3, r3, #4
 8011ea4:	1a9b      	subs	r3, r3, r2
 8011ea6:	009b      	lsls	r3, r3, #2
 8011ea8:	440b      	add	r3, r1
 8011eaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011eae:	601a      	str	r2, [r3, #0]
  return 0;
 8011eb0:	2300      	movs	r3, #0
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3718      	adds	r7, #24
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
 8011eba:	bf00      	nop
 8011ebc:	200057b8 	.word	0x200057b8

08011ec0 <logStartBlock>:

static int logStartBlock(int id, unsigned int period)
{
 8011ec0:	b590      	push	{r4, r7, lr}
 8011ec2:	b087      	sub	sp, #28
 8011ec4:	af02      	add	r7, sp, #8
 8011ec6:	6078      	str	r0, [r7, #4]
 8011ec8:	6039      	str	r1, [r7, #0]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8011eca:	2300      	movs	r3, #0
 8011ecc:	60fb      	str	r3, [r7, #12]
 8011ece:	e00d      	b.n	8011eec <logStartBlock+0x2c>
    if (logBlocks[i].id == id) break;
 8011ed0:	4927      	ldr	r1, [pc, #156]	; (8011f70 <logStartBlock+0xb0>)
 8011ed2:	68fa      	ldr	r2, [r7, #12]
 8011ed4:	4613      	mov	r3, r2
 8011ed6:	011b      	lsls	r3, r3, #4
 8011ed8:	1a9b      	subs	r3, r3, r2
 8011eda:	009b      	lsls	r3, r3, #2
 8011edc:	440b      	add	r3, r1
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	687a      	ldr	r2, [r7, #4]
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d006      	beq.n	8011ef4 <logStartBlock+0x34>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	3301      	adds	r3, #1
 8011eea:	60fb      	str	r3, [r7, #12]
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	2b0f      	cmp	r3, #15
 8011ef0:	ddee      	ble.n	8011ed0 <logStartBlock+0x10>
 8011ef2:	e000      	b.n	8011ef6 <logStartBlock+0x36>
    if (logBlocks[i].id == id) break;
 8011ef4:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	2b0f      	cmp	r3, #15
 8011efa:	dd01      	ble.n	8011f00 <logStartBlock+0x40>
    LOG_ERROR("Trying to start block id %d that doesn't exist.", id);
    return ENOENT;
 8011efc:	2302      	movs	r3, #2
 8011efe:	e032      	b.n	8011f66 <logStartBlock+0xa6>
  }

  LOG_DEBUG("Starting block %d with period %dms\n", id, period);

  if (period>0)
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d023      	beq.n	8011f4e <logStartBlock+0x8e>
  {
    xTimerChangePeriod(logBlocks[i].timer, M2T(period), 100);
 8011f06:	491a      	ldr	r1, [pc, #104]	; (8011f70 <logStartBlock+0xb0>)
 8011f08:	68fa      	ldr	r2, [r7, #12]
 8011f0a:	4613      	mov	r3, r2
 8011f0c:	011b      	lsls	r3, r3, #4
 8011f0e:	1a9b      	subs	r3, r3, r2
 8011f10:	009b      	lsls	r3, r3, #2
 8011f12:	440b      	add	r3, r1
 8011f14:	3304      	adds	r3, #4
 8011f16:	6818      	ldr	r0, [r3, #0]
 8011f18:	2364      	movs	r3, #100	; 0x64
 8011f1a:	9300      	str	r3, [sp, #0]
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	683a      	ldr	r2, [r7, #0]
 8011f20:	2104      	movs	r1, #4
 8011f22:	f00e ff03 	bl	8020d2c <xTimerGenericCommand>
    xTimerStart(logBlocks[i].timer, 100);
 8011f26:	4912      	ldr	r1, [pc, #72]	; (8011f70 <logStartBlock+0xb0>)
 8011f28:	68fa      	ldr	r2, [r7, #12]
 8011f2a:	4613      	mov	r3, r2
 8011f2c:	011b      	lsls	r3, r3, #4
 8011f2e:	1a9b      	subs	r3, r3, r2
 8011f30:	009b      	lsls	r3, r3, #2
 8011f32:	440b      	add	r3, r1
 8011f34:	3304      	adds	r3, #4
 8011f36:	681c      	ldr	r4, [r3, #0]
 8011f38:	f00d fe92 	bl	801fc60 <xTaskGetTickCount>
 8011f3c:	4602      	mov	r2, r0
 8011f3e:	2364      	movs	r3, #100	; 0x64
 8011f40:	9300      	str	r3, [sp, #0]
 8011f42:	2300      	movs	r3, #0
 8011f44:	2101      	movs	r1, #1
 8011f46:	4620      	mov	r0, r4
 8011f48:	f00e fef0 	bl	8020d2c <xTimerGenericCommand>
 8011f4c:	e00a      	b.n	8011f64 <logStartBlock+0xa4>
  } else {
    // single-shoot run
    workerSchedule(logRunBlock, &logBlocks[i]);
 8011f4e:	68fa      	ldr	r2, [r7, #12]
 8011f50:	4613      	mov	r3, r2
 8011f52:	011b      	lsls	r3, r3, #4
 8011f54:	1a9b      	subs	r3, r3, r2
 8011f56:	009b      	lsls	r3, r3, #2
 8011f58:	4a05      	ldr	r2, [pc, #20]	; (8011f70 <logStartBlock+0xb0>)
 8011f5a:	4413      	add	r3, r2
 8011f5c:	4619      	mov	r1, r3
 8011f5e:	4805      	ldr	r0, [pc, #20]	; (8011f74 <logStartBlock+0xb4>)
 8011f60:	f002 f8bc 	bl	80140dc <workerSchedule>
  }

  return 0;
 8011f64:	2300      	movs	r3, #0
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	3714      	adds	r7, #20
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bd90      	pop	{r4, r7, pc}
 8011f6e:	bf00      	nop
 8011f70:	200057b8 	.word	0x200057b8
 8011f74:	0801205d 	.word	0x0801205d

08011f78 <logStopBlock>:

static int logStopBlock(int id)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b086      	sub	sp, #24
 8011f7c:	af02      	add	r7, sp, #8
 8011f7e:	6078      	str	r0, [r7, #4]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8011f80:	2300      	movs	r3, #0
 8011f82:	60fb      	str	r3, [r7, #12]
 8011f84:	e00d      	b.n	8011fa2 <logStopBlock+0x2a>
    if (logBlocks[i].id == id) break;
 8011f86:	4917      	ldr	r1, [pc, #92]	; (8011fe4 <logStopBlock+0x6c>)
 8011f88:	68fa      	ldr	r2, [r7, #12]
 8011f8a:	4613      	mov	r3, r2
 8011f8c:	011b      	lsls	r3, r3, #4
 8011f8e:	1a9b      	subs	r3, r3, r2
 8011f90:	009b      	lsls	r3, r3, #2
 8011f92:	440b      	add	r3, r1
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	687a      	ldr	r2, [r7, #4]
 8011f98:	429a      	cmp	r2, r3
 8011f9a:	d006      	beq.n	8011faa <logStopBlock+0x32>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	3301      	adds	r3, #1
 8011fa0:	60fb      	str	r3, [r7, #12]
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	2b0f      	cmp	r3, #15
 8011fa6:	ddee      	ble.n	8011f86 <logStopBlock+0xe>
 8011fa8:	e000      	b.n	8011fac <logStopBlock+0x34>
    if (logBlocks[i].id == id) break;
 8011faa:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	2b0f      	cmp	r3, #15
 8011fb0:	dd01      	ble.n	8011fb6 <logStopBlock+0x3e>
    LOG_ERROR("Trying to stop block id %d that doesn't exist.\n", id);
    return ENOENT;
 8011fb2:	2302      	movs	r3, #2
 8011fb4:	e011      	b.n	8011fda <logStopBlock+0x62>
  }

  xTimerStop(logBlocks[i].timer, portMAX_DELAY);
 8011fb6:	490b      	ldr	r1, [pc, #44]	; (8011fe4 <logStopBlock+0x6c>)
 8011fb8:	68fa      	ldr	r2, [r7, #12]
 8011fba:	4613      	mov	r3, r2
 8011fbc:	011b      	lsls	r3, r3, #4
 8011fbe:	1a9b      	subs	r3, r3, r2
 8011fc0:	009b      	lsls	r3, r3, #2
 8011fc2:	440b      	add	r3, r1
 8011fc4:	3304      	adds	r3, #4
 8011fc6:	6818      	ldr	r0, [r3, #0]
 8011fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011fcc:	9300      	str	r3, [sp, #0]
 8011fce:	2300      	movs	r3, #0
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	2103      	movs	r1, #3
 8011fd4:	f00e feaa 	bl	8020d2c <xTimerGenericCommand>

  return 0;
 8011fd8:	2300      	movs	r3, #0
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	3710      	adds	r7, #16
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd80      	pop	{r7, pc}
 8011fe2:	bf00      	nop
 8011fe4:	200057b8 	.word	0x200057b8

08011fe8 <logBlockTimed>:

/* This function is called by the timer subsystem */
void logBlockTimed(xTimerHandle timer)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b082      	sub	sp, #8
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  workerSchedule(logRunBlock, pvTimerGetTimerID(timer));
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f00f f99b 	bl	802132c <pvTimerGetTimerID>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	4619      	mov	r1, r3
 8011ffa:	4803      	ldr	r0, [pc, #12]	; (8012008 <logBlockTimed+0x20>)
 8011ffc:	f002 f86e 	bl	80140dc <workerSchedule>
}
 8012000:	bf00      	nop
 8012002:	3708      	adds	r7, #8
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}
 8012008:	0801205d 	.word	0x0801205d

0801200c <appendToPacket>:

/* Appends data to a packet if space is available; returns false on failure. */
static bool appendToPacket(CRTPPacket * pk, const void * data, size_t n) {
 801200c:	b580      	push	{r7, lr}
 801200e:	b084      	sub	sp, #16
 8012010:	af00      	add	r7, sp, #0
 8012012:	60f8      	str	r0, [r7, #12]
 8012014:	60b9      	str	r1, [r7, #8]
 8012016:	607a      	str	r2, [r7, #4]
  if (pk->size <= CRTP_MAX_DATA_SIZE - n)
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	461a      	mov	r2, r3
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f1c3 031e 	rsb	r3, r3, #30
 8012024:	429a      	cmp	r2, r3
 8012026:	d814      	bhi.n	8012052 <appendToPacket+0x46>
  {
    memcpy(&pk->data[pk->size], data, n);
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	781b      	ldrb	r3, [r3, #0]
 801202c:	461a      	mov	r2, r3
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	4413      	add	r3, r2
 8012032:	3302      	adds	r3, #2
 8012034:	687a      	ldr	r2, [r7, #4]
 8012036:	68b9      	ldr	r1, [r7, #8]
 8012038:	4618      	mov	r0, r3
 801203a:	f011 fd6e 	bl	8023b1a <memcpy>
    pk->size += n;
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	781a      	ldrb	r2, [r3, #0]
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	b2db      	uxtb	r3, r3
 8012046:	4413      	add	r3, r2
 8012048:	b2da      	uxtb	r2, r3
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	701a      	strb	r2, [r3, #0]
    return true;
 801204e:	2301      	movs	r3, #1
 8012050:	e000      	b.n	8012054 <appendToPacket+0x48>
  }
  else return false;
 8012052:	2300      	movs	r3, #0
}
 8012054:	4618      	mov	r0, r3
 8012056:	3710      	adds	r7, #16
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}

0801205c <logRunBlock>:

/* This function is usually called by the worker subsystem */
void logRunBlock(void * arg)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b094      	sub	sp, #80	; 0x50
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
  struct log_block *blk = arg;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	64bb      	str	r3, [r7, #72]	; 0x48
  struct log_ops *ops = blk->ops;
 8012068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801206c:	64fb      	str	r3, [r7, #76]	; 0x4c
  static CRTPPacket pk;
  unsigned int timestamp;

  xSemaphoreTake(logLock, portMAX_DELAY);
 801206e:	4b8c      	ldr	r3, [pc, #560]	; (80122a0 <logRunBlock+0x244>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012076:	4618      	mov	r0, r3
 8012078:	f00c ff04 	bl	801ee84 <xQueueSemaphoreTake>

  timestamp = ((long long)xTaskGetTickCount())/portTICK_RATE_MS;
 801207c:	f00d fdf0 	bl	801fc60 <xTaskGetTickCount>
 8012080:	4603      	mov	r3, r0
 8012082:	4a88      	ldr	r2, [pc, #544]	; (80122a4 <logRunBlock+0x248>)
 8012084:	fba2 2303 	umull	r2, r3, r2, r3
 8012088:	099b      	lsrs	r3, r3, #6
 801208a:	647b      	str	r3, [r7, #68]	; 0x44

  pk.header = CRTP_HEADER(CRTP_PORT_LOG, LOG_CH);
 801208c:	4b86      	ldr	r3, [pc, #536]	; (80122a8 <logRunBlock+0x24c>)
 801208e:	2252      	movs	r2, #82	; 0x52
 8012090:	705a      	strb	r2, [r3, #1]
  pk.size = 4;
 8012092:	4b85      	ldr	r3, [pc, #532]	; (80122a8 <logRunBlock+0x24c>)
 8012094:	2204      	movs	r2, #4
 8012096:	701a      	strb	r2, [r3, #0]
  pk.data[0] = blk->id;
 8012098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	b2da      	uxtb	r2, r3
 801209e:	4b82      	ldr	r3, [pc, #520]	; (80122a8 <logRunBlock+0x24c>)
 80120a0:	709a      	strb	r2, [r3, #2]
  pk.data[1] = timestamp&0x0ff;
 80120a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120a4:	b2da      	uxtb	r2, r3
 80120a6:	4b80      	ldr	r3, [pc, #512]	; (80122a8 <logRunBlock+0x24c>)
 80120a8:	70da      	strb	r2, [r3, #3]
  pk.data[2] = (timestamp>>8)&0x0ff;
 80120aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120ac:	0a1b      	lsrs	r3, r3, #8
 80120ae:	b2da      	uxtb	r2, r3
 80120b0:	4b7d      	ldr	r3, [pc, #500]	; (80122a8 <logRunBlock+0x24c>)
 80120b2:	711a      	strb	r2, [r3, #4]
  pk.data[3] = (timestamp>>16)&0x0ff;
 80120b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120b6:	0c1b      	lsrs	r3, r3, #16
 80120b8:	b2da      	uxtb	r2, r3
 80120ba:	4b7b      	ldr	r3, [pc, #492]	; (80122a8 <logRunBlock+0x24c>)
 80120bc:	715a      	strb	r2, [r3, #5]

  while (ops)
 80120be:	e18f      	b.n	80123e0 <logRunBlock+0x384>
  {
    int valuei = 0;
 80120c0:	2300      	movs	r3, #0
 80120c2:	627b      	str	r3, [r7, #36]	; 0x24
    float valuef = 0;
 80120c4:	f04f 0300 	mov.w	r3, #0
 80120c8:	623b      	str	r3, [r7, #32]

    // FPU instructions must run on aligned data.
    // We first copy the data to an (aligned) local variable, before assigning it
    switch(ops->storageType)
 80120ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120cc:	791b      	ldrb	r3, [r3, #4]
 80120ce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80120d2:	b2db      	uxtb	r3, r3
 80120d4:	3b01      	subs	r3, #1
 80120d6:	2b06      	cmp	r3, #6
 80120d8:	f200 8121 	bhi.w	801231e <logRunBlock+0x2c2>
 80120dc:	a201      	add	r2, pc, #4	; (adr r2, 80120e4 <logRunBlock+0x88>)
 80120de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120e2:	bf00      	nop
 80120e4:	08012101 	.word	0x08012101
 80120e8:	0801218b 	.word	0x0801218b
 80120ec:	08012219 	.word	0x08012219
 80120f0:	08012145 	.word	0x08012145
 80120f4:	080121d1 	.word	0x080121d1
 80120f8:	0801225d 	.word	0x0801225d
 80120fc:	080122c9 	.word	0x080122c9
    {
      case LOG_UINT8:
      {
        uint8_t v;
        if (ops->acquisitionType == acqType_function) {
 8012100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012102:	7b1b      	ldrb	r3, [r3, #12]
 8012104:	2b01      	cmp	r3, #1
 8012106:	d116      	bne.n	8012136 <logRunBlock+0xda>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 8012108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801210a:	689b      	ldr	r3, [r3, #8]
 801210c:	62bb      	str	r3, [r7, #40]	; 0x28
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireUInt8);
 801210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d105      	bne.n	8012122 <logRunBlock+0xc6>
 8012116:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 801211a:	4964      	ldr	r1, [pc, #400]	; (80122ac <logRunBlock+0x250>)
 801211c:	4864      	ldr	r0, [pc, #400]	; (80122b0 <logRunBlock+0x254>)
 801211e:	f7fe fd7d 	bl	8010c1c <assertFail>
          v = logByFunction->acquireUInt8(timestamp, logByFunction->data);
 8012122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012128:	6852      	ldr	r2, [r2, #4]
 801212a:	4611      	mov	r1, r2
 801212c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801212e:	4798      	blx	r3
 8012130:	4603      	mov	r3, r0
 8012132:	77fb      	strb	r3, [r7, #31]
 8012134:	e003      	b.n	801213e <logRunBlock+0xe2>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 8012136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012138:	689b      	ldr	r3, [r3, #8]
 801213a:	781b      	ldrb	r3, [r3, #0]
 801213c:	77fb      	strb	r3, [r7, #31]
        }
        valuei = v;
 801213e:	7ffb      	ldrb	r3, [r7, #31]
 8012140:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012142:	e0ec      	b.n	801231e <logRunBlock+0x2c2>
      }
      case LOG_INT8:
      {
        int8_t v;
        if (ops->acquisitionType == acqType_function) {
 8012144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012146:	7b1b      	ldrb	r3, [r3, #12]
 8012148:	2b01      	cmp	r3, #1
 801214a:	d116      	bne.n	801217a <logRunBlock+0x11e>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 801214c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801214e:	689b      	ldr	r3, [r3, #8]
 8012150:	637b      	str	r3, [r7, #52]	; 0x34
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireInt8);
 8012152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d105      	bne.n	8012166 <logRunBlock+0x10a>
 801215a:	f240 3201 	movw	r2, #769	; 0x301
 801215e:	4953      	ldr	r1, [pc, #332]	; (80122ac <logRunBlock+0x250>)
 8012160:	4854      	ldr	r0, [pc, #336]	; (80122b4 <logRunBlock+0x258>)
 8012162:	f7fe fd5b 	bl	8010c1c <assertFail>
          v = logByFunction->acquireInt8(timestamp, logByFunction->data);
 8012166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801216c:	6852      	ldr	r2, [r2, #4]
 801216e:	4611      	mov	r1, r2
 8012170:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012172:	4798      	blx	r3
 8012174:	4603      	mov	r3, r0
 8012176:	77bb      	strb	r3, [r7, #30]
 8012178:	e003      	b.n	8012182 <logRunBlock+0x126>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 801217a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801217c:	689b      	ldr	r3, [r3, #8]
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	77bb      	strb	r3, [r7, #30]
        }
        valuei = v;
 8012182:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8012186:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012188:	e0c9      	b.n	801231e <logRunBlock+0x2c2>
      }
      case LOG_UINT16:
      {
        uint16_t v;
        if (ops->acquisitionType == acqType_function) {
 801218a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801218c:	7b1b      	ldrb	r3, [r3, #12]
 801218e:	2b01      	cmp	r3, #1
 8012190:	d116      	bne.n	80121c0 <logRunBlock+0x164>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 8012192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012194:	689b      	ldr	r3, [r3, #8]
 8012196:	62fb      	str	r3, [r7, #44]	; 0x2c
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireUInt16);
 8012198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d105      	bne.n	80121ac <logRunBlock+0x150>
 80121a0:	f240 320e 	movw	r2, #782	; 0x30e
 80121a4:	4941      	ldr	r1, [pc, #260]	; (80122ac <logRunBlock+0x250>)
 80121a6:	4844      	ldr	r0, [pc, #272]	; (80122b8 <logRunBlock+0x25c>)
 80121a8:	f7fe fd38 	bl	8010c1c <assertFail>
          v = logByFunction->acquireUInt16(timestamp, logByFunction->data);
 80121ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121b2:	6852      	ldr	r2, [r2, #4]
 80121b4:	4611      	mov	r1, r2
 80121b6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80121b8:	4798      	blx	r3
 80121ba:	4603      	mov	r3, r0
 80121bc:	83bb      	strh	r3, [r7, #28]
 80121be:	e004      	b.n	80121ca <logRunBlock+0x16e>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 80121c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121c2:	689b      	ldr	r3, [r3, #8]
 80121c4:	881b      	ldrh	r3, [r3, #0]
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	83bb      	strh	r3, [r7, #28]
        }
        valuei = v;
 80121ca:	8bbb      	ldrh	r3, [r7, #28]
 80121cc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80121ce:	e0a6      	b.n	801231e <logRunBlock+0x2c2>
      }
      case LOG_INT16:
      {
        int16_t v;
        if (ops->acquisitionType == acqType_function) {
 80121d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121d2:	7b1b      	ldrb	r3, [r3, #12]
 80121d4:	2b01      	cmp	r3, #1
 80121d6:	d116      	bne.n	8012206 <logRunBlock+0x1aa>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 80121d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121da:	689b      	ldr	r3, [r3, #8]
 80121dc:	63bb      	str	r3, [r7, #56]	; 0x38
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireInt16);
 80121de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d105      	bne.n	80121f2 <logRunBlock+0x196>
 80121e6:	f240 321b 	movw	r2, #795	; 0x31b
 80121ea:	4930      	ldr	r1, [pc, #192]	; (80122ac <logRunBlock+0x250>)
 80121ec:	4833      	ldr	r0, [pc, #204]	; (80122bc <logRunBlock+0x260>)
 80121ee:	f7fe fd15 	bl	8010c1c <assertFail>
          v = logByFunction->acquireInt16(timestamp, logByFunction->data);
 80121f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80121f8:	6852      	ldr	r2, [r2, #4]
 80121fa:	4611      	mov	r1, r2
 80121fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80121fe:	4798      	blx	r3
 8012200:	4603      	mov	r3, r0
 8012202:	837b      	strh	r3, [r7, #26]
 8012204:	e004      	b.n	8012210 <logRunBlock+0x1b4>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 8012206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012208:	689b      	ldr	r3, [r3, #8]
 801220a:	881b      	ldrh	r3, [r3, #0]
 801220c:	b29b      	uxth	r3, r3
 801220e:	837b      	strh	r3, [r7, #26]
        }
        valuei = v;
 8012210:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8012214:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012216:	e082      	b.n	801231e <logRunBlock+0x2c2>
      }
      case LOG_UINT32:
      {
        uint32_t v;
        if (ops->acquisitionType == acqType_function) {
 8012218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801221a:	7b1b      	ldrb	r3, [r3, #12]
 801221c:	2b01      	cmp	r3, #1
 801221e:	d116      	bne.n	801224e <logRunBlock+0x1f2>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 8012220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012222:	689b      	ldr	r3, [r3, #8]
 8012224:	633b      	str	r3, [r7, #48]	; 0x30
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireUInt32);
 8012226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d105      	bne.n	801223a <logRunBlock+0x1de>
 801222e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8012232:	491e      	ldr	r1, [pc, #120]	; (80122ac <logRunBlock+0x250>)
 8012234:	4822      	ldr	r0, [pc, #136]	; (80122c0 <logRunBlock+0x264>)
 8012236:	f7fe fcf1 	bl	8010c1c <assertFail>
          v = logByFunction->acquireUInt32(timestamp, logByFunction->data);
 801223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012240:	6852      	ldr	r2, [r2, #4]
 8012242:	4611      	mov	r1, r2
 8012244:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012246:	4798      	blx	r3
 8012248:	4603      	mov	r3, r0
 801224a:	617b      	str	r3, [r7, #20]
 801224c:	e003      	b.n	8012256 <logRunBlock+0x1fa>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 801224e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012250:	689b      	ldr	r3, [r3, #8]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	617b      	str	r3, [r7, #20]
        }
        valuei = v;
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801225a:	e060      	b.n	801231e <logRunBlock+0x2c2>
      }
      case LOG_INT32:
      {
        int32_t v;
        if (ops->acquisitionType == acqType_function) {
 801225c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801225e:	7b1b      	ldrb	r3, [r3, #12]
 8012260:	2b01      	cmp	r3, #1
 8012262:	d116      	bne.n	8012292 <logRunBlock+0x236>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 8012264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012266:	689b      	ldr	r3, [r3, #8]
 8012268:	63fb      	str	r3, [r7, #60]	; 0x3c
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireInt32);
 801226a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d105      	bne.n	801227e <logRunBlock+0x222>
 8012272:	f240 3235 	movw	r2, #821	; 0x335
 8012276:	490d      	ldr	r1, [pc, #52]	; (80122ac <logRunBlock+0x250>)
 8012278:	4812      	ldr	r0, [pc, #72]	; (80122c4 <logRunBlock+0x268>)
 801227a:	f7fe fccf 	bl	8010c1c <assertFail>
          v = logByFunction->acquireInt32(timestamp, logByFunction->data);
 801227e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012284:	6852      	ldr	r2, [r2, #4]
 8012286:	4611      	mov	r1, r2
 8012288:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801228a:	4798      	blx	r3
 801228c:	4603      	mov	r3, r0
 801228e:	613b      	str	r3, [r7, #16]
 8012290:	e003      	b.n	801229a <logRunBlock+0x23e>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 8012292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012294:	689b      	ldr	r3, [r3, #8]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	613b      	str	r3, [r7, #16]
        }
        valuei = v;
 801229a:	693b      	ldr	r3, [r7, #16]
 801229c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801229e:	e03e      	b.n	801231e <logRunBlock+0x2c2>
 80122a0:	2000bbd4 	.word	0x2000bbd4
 80122a4:	10624dd3 	.word	0x10624dd3
 80122a8:	2000bc5c 	.word	0x2000bc5c
 80122ac:	0802bed0 	.word	0x0802bed0
 80122b0:	0802bf44 	.word	0x0802bf44
 80122b4:	0802bf60 	.word	0x0802bf60
 80122b8:	0802bf7c 	.word	0x0802bf7c
 80122bc:	0802bf9c 	.word	0x0802bf9c
 80122c0:	0802bfb8 	.word	0x0802bfb8
 80122c4:	0802bfd8 	.word	0x0802bfd8
      }
      case LOG_FLOAT:
      {
        float v;
        if (ops->acquisitionType == acqType_function) {
 80122c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122ca:	7b1b      	ldrb	r3, [r3, #12]
 80122cc:	2b01      	cmp	r3, #1
 80122ce:	d118      	bne.n	8012302 <logRunBlock+0x2a6>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 80122d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122d2:	689b      	ldr	r3, [r3, #8]
 80122d4:	643b      	str	r3, [r7, #64]	; 0x40
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->aquireFloat);
 80122d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d105      	bne.n	80122ea <logRunBlock+0x28e>
 80122de:	f240 3242 	movw	r2, #834	; 0x342
 80122e2:	495c      	ldr	r1, [pc, #368]	; (8012454 <logRunBlock+0x3f8>)
 80122e4:	485c      	ldr	r0, [pc, #368]	; (8012458 <logRunBlock+0x3fc>)
 80122e6:	f7fe fc99 	bl	8010c1c <assertFail>
          v = logByFunction->aquireFloat(timestamp, logByFunction->data);
 80122ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80122f0:	6852      	ldr	r2, [r2, #4]
 80122f2:	4611      	mov	r1, r2
 80122f4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80122f6:	4798      	blx	r3
 80122f8:	eef0 7a40 	vmov.f32	s15, s0
 80122fc:	edc7 7a03 	vstr	s15, [r7, #12]
 8012300:	e003      	b.n	801230a <logRunBlock+0x2ae>
        } else {
          memcpy(&v, ops->variable, sizeof(valuef));
 8012302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012304:	689b      	ldr	r3, [r3, #8]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	60fb      	str	r3, [r7, #12]
        }
        valuei = v;
 801230a:	edd7 7a03 	vldr	s15, [r7, #12]
 801230e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012312:	ee17 3a90 	vmov	r3, s15
 8012316:	627b      	str	r3, [r7, #36]	; 0x24
        valuef = v;
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	623b      	str	r3, [r7, #32]
        break;
 801231c:	bf00      	nop
      }
    }

    if (ops->logType == LOG_FLOAT || ops->logType == LOG_FP16)
 801231e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012320:	791b      	ldrb	r3, [r3, #4]
 8012322:	f023 030f 	bic.w	r3, r3, #15
 8012326:	b2db      	uxtb	r3, r3
 8012328:	2b70      	cmp	r3, #112	; 0x70
 801232a:	d006      	beq.n	801233a <logRunBlock+0x2de>
 801232c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801232e:	791b      	ldrb	r3, [r3, #4]
 8012330:	f023 030f 	bic.w	r3, r3, #15
 8012334:	b2db      	uxtb	r3, r3
 8012336:	2b80      	cmp	r3, #128	; 0x80
 8012338:	d138      	bne.n	80123ac <logRunBlock+0x350>
    {
      if (ops->storageType != LOG_FLOAT)
 801233a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801233c:	791b      	ldrb	r3, [r3, #4]
 801233e:	f003 030f 	and.w	r3, r3, #15
 8012342:	b2db      	uxtb	r3, r3
 8012344:	2b07      	cmp	r3, #7
 8012346:	d006      	beq.n	8012356 <logRunBlock+0x2fa>
      {
        valuef = valuei;
 8012348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234a:	ee07 3a90 	vmov	s15, r3
 801234e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012352:	edc7 7a08 	vstr	s15, [r7, #32]
      }

      // Try to append the next item to the packet.  If we run out of space,
      // drop this and subsequent items.
      if (ops->logType == LOG_FLOAT)
 8012356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012358:	791b      	ldrb	r3, [r3, #4]
 801235a:	f023 030f 	bic.w	r3, r3, #15
 801235e:	b2db      	uxtb	r3, r3
 8012360:	2b70      	cmp	r3, #112	; 0x70
 8012362:	d10d      	bne.n	8012380 <logRunBlock+0x324>
      {
        if (!appendToPacket(&pk, &valuef, 4)) break;
 8012364:	f107 0320 	add.w	r3, r7, #32
 8012368:	2204      	movs	r2, #4
 801236a:	4619      	mov	r1, r3
 801236c:	483b      	ldr	r0, [pc, #236]	; (801245c <logRunBlock+0x400>)
 801236e:	f7ff fe4d 	bl	801200c <appendToPacket>
 8012372:	4603      	mov	r3, r0
 8012374:	f083 0301 	eor.w	r3, r3, #1
 8012378:	b2db      	uxtb	r3, r3
 801237a:	2b00      	cmp	r3, #0
 801237c:	d02c      	beq.n	80123d8 <logRunBlock+0x37c>
 801237e:	e035      	b.n	80123ec <logRunBlock+0x390>
      }
      else
      {
        valuei = single2half(valuef);
 8012380:	edd7 7a08 	vldr	s15, [r7, #32]
 8012384:	eeb0 0a67 	vmov.f32	s0, s15
 8012388:	f000 f9b7 	bl	80126fa <single2half>
 801238c:	4603      	mov	r3, r0
 801238e:	627b      	str	r3, [r7, #36]	; 0x24
        if (!appendToPacket(&pk, &valuei, 2)) break;
 8012390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012394:	2202      	movs	r2, #2
 8012396:	4619      	mov	r1, r3
 8012398:	4830      	ldr	r0, [pc, #192]	; (801245c <logRunBlock+0x400>)
 801239a:	f7ff fe37 	bl	801200c <appendToPacket>
 801239e:	4603      	mov	r3, r0
 80123a0:	f083 0301 	eor.w	r3, r3, #1
 80123a4:	b2db      	uxtb	r3, r3
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d016      	beq.n	80123d8 <logRunBlock+0x37c>
 80123aa:	e01f      	b.n	80123ec <logRunBlock+0x390>
      }
    }
    else  //logType is an integer
    {
      if (!appendToPacket(&pk, &valuei, typeLength[ops->logType])) break;
 80123ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123ae:	791b      	ldrb	r3, [r3, #4]
 80123b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80123b4:	b2db      	uxtb	r3, r3
 80123b6:	461a      	mov	r2, r3
 80123b8:	4b29      	ldr	r3, [pc, #164]	; (8012460 <logRunBlock+0x404>)
 80123ba:	5c9b      	ldrb	r3, [r3, r2]
 80123bc:	461a      	mov	r2, r3
 80123be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80123c2:	4619      	mov	r1, r3
 80123c4:	4825      	ldr	r0, [pc, #148]	; (801245c <logRunBlock+0x400>)
 80123c6:	f7ff fe21 	bl	801200c <appendToPacket>
 80123ca:	4603      	mov	r3, r0
 80123cc:	f083 0301 	eor.w	r3, r3, #1
 80123d0:	b2db      	uxtb	r3, r3
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d109      	bne.n	80123ea <logRunBlock+0x38e>
 80123d6:	e000      	b.n	80123da <logRunBlock+0x37e>
      if (ops->logType == LOG_FLOAT)
 80123d8:	bf00      	nop
    }

    ops = ops->next;
 80123da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (ops)
 80123e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	f47f ae6c 	bne.w	80120c0 <logRunBlock+0x64>
 80123e8:	e000      	b.n	80123ec <logRunBlock+0x390>
      if (!appendToPacket(&pk, &valuei, typeLength[ops->logType])) break;
 80123ea:	bf00      	nop
  }

  xSemaphoreGive(logLock);
 80123ec:	4b1d      	ldr	r3, [pc, #116]	; (8012464 <logRunBlock+0x408>)
 80123ee:	6818      	ldr	r0, [r3, #0]
 80123f0:	2300      	movs	r3, #0
 80123f2:	2200      	movs	r2, #0
 80123f4:	2100      	movs	r1, #0
 80123f6:	f00c fac3 	bl	801e980 <xQueueGenericSend>

  // Check if the connection is still up, oherwise disable
  // all the logging and flush all the CRTP queues.
  if (!crtpIsConnected())
 80123fa:	f7ef f895 	bl	8001528 <crtpIsConnected>
 80123fe:	4603      	mov	r3, r0
 8012400:	f083 0301 	eor.w	r3, r3, #1
 8012404:	b2db      	uxtb	r3, r3
 8012406:	2b00      	cmp	r3, #0
 8012408:	d004      	beq.n	8012414 <logRunBlock+0x3b8>
  {
    logReset();
 801240a:	f000 f8eb 	bl	80125e4 <logReset>
    crtpReset();
 801240e:	f7ef f873 	bl	80014f8 <crtpReset>
        DEBUG_PRINT("WARNING: LOG packets drop detected (%lu packets lost)\n",
                    blk->droppedPackets);
      }
    }
  }
}
 8012412:	e01b      	b.n	801244c <logRunBlock+0x3f0>
    if (!crtpSendPacket(&pk))
 8012414:	4811      	ldr	r0, [pc, #68]	; (801245c <logRunBlock+0x400>)
 8012416:	f7ef f81b 	bl	8001450 <crtpSendPacket>
 801241a:	4603      	mov	r3, r0
 801241c:	2b00      	cmp	r3, #0
 801241e:	d115      	bne.n	801244c <logRunBlock+0x3f0>
      if (blk->droppedPackets++ % 100 == 0)
 8012420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012424:	1c51      	adds	r1, r2, #1
 8012426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012428:	6359      	str	r1, [r3, #52]	; 0x34
 801242a:	4b0f      	ldr	r3, [pc, #60]	; (8012468 <logRunBlock+0x40c>)
 801242c:	fba3 1302 	umull	r1, r3, r3, r2
 8012430:	095b      	lsrs	r3, r3, #5
 8012432:	2164      	movs	r1, #100	; 0x64
 8012434:	fb01 f303 	mul.w	r3, r1, r3
 8012438:	1ad3      	subs	r3, r2, r3
 801243a:	2b00      	cmp	r3, #0
 801243c:	d106      	bne.n	801244c <logRunBlock+0x3f0>
        DEBUG_PRINT("WARNING: LOG packets drop detected (%lu packets lost)\n",
 801243e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012442:	461a      	mov	r2, r3
 8012444:	4909      	ldr	r1, [pc, #36]	; (801246c <logRunBlock+0x410>)
 8012446:	2000      	movs	r0, #0
 8012448:	f7fe fb24 	bl	8010a94 <SEGGER_RTT_printf>
}
 801244c:	bf00      	nop
 801244e:	3750      	adds	r7, #80	; 0x50
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}
 8012454:	0802bed0 	.word	0x0802bed0
 8012458:	0802bff4 	.word	0x0802bff4
 801245c:	2000bc5c 	.word	0x2000bc5c
 8012460:	0802d910 	.word	0x0802d910
 8012464:	2000bbd4 	.word	0x2000bbd4
 8012468:	51eb851f 	.word	0x51eb851f
 801246c:	0802c010 	.word	0x0802c010

08012470 <variableGetIndex>:

static int variableGetIndex(int id)
{
 8012470:	b480      	push	{r7}
 8012472:	b085      	sub	sp, #20
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
  int i;
  int n=0;
 8012478:	2300      	movs	r3, #0
 801247a:	60bb      	str	r3, [r7, #8]

  for (i=0; i<logsLen; i++)
 801247c:	2300      	movs	r3, #0
 801247e:	60fb      	str	r3, [r7, #12]
 8012480:	e015      	b.n	80124ae <variableGetIndex+0x3e>
  {
    if(!(logs[i].type & LOG_GROUP))
 8012482:	4b16      	ldr	r3, [pc, #88]	; (80124dc <variableGetIndex+0x6c>)
 8012484:	6819      	ldr	r1, [r3, #0]
 8012486:	68fa      	ldr	r2, [r7, #12]
 8012488:	4613      	mov	r3, r2
 801248a:	005b      	lsls	r3, r3, #1
 801248c:	4413      	add	r3, r2
 801248e:	009b      	lsls	r3, r3, #2
 8012490:	440b      	add	r3, r1
 8012492:	781b      	ldrb	r3, [r3, #0]
 8012494:	b25b      	sxtb	r3, r3
 8012496:	2b00      	cmp	r3, #0
 8012498:	db06      	blt.n	80124a8 <variableGetIndex+0x38>
    {
      if(n==id)
 801249a:	68ba      	ldr	r2, [r7, #8]
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	429a      	cmp	r2, r3
 80124a0:	d00b      	beq.n	80124ba <variableGetIndex+0x4a>
        break;
      n++;
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	3301      	adds	r3, #1
 80124a6:	60bb      	str	r3, [r7, #8]
  for (i=0; i<logsLen; i++)
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	3301      	adds	r3, #1
 80124ac:	60fb      	str	r3, [r7, #12]
 80124ae:	4b0c      	ldr	r3, [pc, #48]	; (80124e0 <variableGetIndex+0x70>)
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	68fa      	ldr	r2, [r7, #12]
 80124b4:	429a      	cmp	r2, r3
 80124b6:	dbe4      	blt.n	8012482 <variableGetIndex+0x12>
 80124b8:	e000      	b.n	80124bc <variableGetIndex+0x4c>
        break;
 80124ba:	bf00      	nop
    }
  }

  if (i>=logsLen)
 80124bc:	4b08      	ldr	r3, [pc, #32]	; (80124e0 <variableGetIndex+0x70>)
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	68fa      	ldr	r2, [r7, #12]
 80124c2:	429a      	cmp	r2, r3
 80124c4:	db02      	blt.n	80124cc <variableGetIndex+0x5c>
    return -1;
 80124c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124ca:	e000      	b.n	80124ce <variableGetIndex+0x5e>

  return i;
 80124cc:	68fb      	ldr	r3, [r7, #12]
}
 80124ce:	4618      	mov	r0, r3
 80124d0:	3714      	adds	r7, #20
 80124d2:	46bd      	mov	sp, r7
 80124d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d8:	4770      	bx	lr
 80124da:	bf00      	nop
 80124dc:	2000bc28 	.word	0x2000bc28
 80124e0:	2000bc2c 	.word	0x2000bc2c

080124e4 <opsMalloc>:

static struct log_ops * opsMalloc()
{
 80124e4:	b480      	push	{r7}
 80124e6:	b083      	sub	sp, #12
 80124e8:	af00      	add	r7, sp, #0
  int i;

  for (i=0;i<LOG_MAX_OPS; i++)
 80124ea:	2300      	movs	r3, #0
 80124ec:	607b      	str	r3, [r7, #4]
 80124ee:	e00a      	b.n	8012506 <opsMalloc+0x22>
      if (logOps[i].variable == NULL) break;
 80124f0:	4a0f      	ldr	r2, [pc, #60]	; (8012530 <opsMalloc+0x4c>)
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	011b      	lsls	r3, r3, #4
 80124f6:	4413      	add	r3, r2
 80124f8:	3308      	adds	r3, #8
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d006      	beq.n	801250e <opsMalloc+0x2a>
  for (i=0;i<LOG_MAX_OPS; i++)
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	3301      	adds	r3, #1
 8012504:	607b      	str	r3, [r7, #4]
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	2b7f      	cmp	r3, #127	; 0x7f
 801250a:	ddf1      	ble.n	80124f0 <opsMalloc+0xc>
 801250c:	e000      	b.n	8012510 <opsMalloc+0x2c>
      if (logOps[i].variable == NULL) break;
 801250e:	bf00      	nop

  if (i >= LOG_MAX_OPS)
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2b7f      	cmp	r3, #127	; 0x7f
 8012514:	dd01      	ble.n	801251a <opsMalloc+0x36>
      return NULL;
 8012516:	2300      	movs	r3, #0
 8012518:	e003      	b.n	8012522 <opsMalloc+0x3e>

  return &logOps[i];
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	011b      	lsls	r3, r3, #4
 801251e:	4a04      	ldr	r2, [pc, #16]	; (8012530 <opsMalloc+0x4c>)
 8012520:	4413      	add	r3, r2
}
 8012522:	4618      	mov	r0, r3
 8012524:	370c      	adds	r7, #12
 8012526:	46bd      	mov	sp, r7
 8012528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252c:	4770      	bx	lr
 801252e:	bf00      	nop
 8012530:	20004fb8 	.word	0x20004fb8

08012534 <opsFree>:

static void opsFree(struct log_ops * ops)
{
 8012534:	b480      	push	{r7}
 8012536:	b083      	sub	sp, #12
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
  ops->variable = NULL;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	2200      	movs	r2, #0
 8012540:	609a      	str	r2, [r3, #8]
}
 8012542:	bf00      	nop
 8012544:	370c      	adds	r7, #12
 8012546:	46bd      	mov	sp, r7
 8012548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254c:	4770      	bx	lr
	...

08012550 <blockCalcLength>:

static int blockCalcLength(struct log_block * block)
{
 8012550:	b480      	push	{r7}
 8012552:	b085      	sub	sp, #20
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
  struct log_ops * ops;
  int len = 0;
 8012558:	2300      	movs	r3, #0
 801255a:	60bb      	str	r3, [r7, #8]

  for (ops = block->ops; ops; ops = ops->next)
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012560:	60fb      	str	r3, [r7, #12]
 8012562:	e00e      	b.n	8012582 <blockCalcLength+0x32>
    len += typeLength[ops->logType];
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	791b      	ldrb	r3, [r3, #4]
 8012568:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801256c:	b2db      	uxtb	r3, r3
 801256e:	461a      	mov	r2, r3
 8012570:	4b09      	ldr	r3, [pc, #36]	; (8012598 <blockCalcLength+0x48>)
 8012572:	5c9b      	ldrb	r3, [r3, r2]
 8012574:	461a      	mov	r2, r3
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	4413      	add	r3, r2
 801257a:	60bb      	str	r3, [r7, #8]
  for (ops = block->ops; ops; ops = ops->next)
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	60fb      	str	r3, [r7, #12]
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d1ed      	bne.n	8012564 <blockCalcLength+0x14>

  return len;
 8012588:	68bb      	ldr	r3, [r7, #8]
}
 801258a:	4618      	mov	r0, r3
 801258c:	3714      	adds	r7, #20
 801258e:	46bd      	mov	sp, r7
 8012590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012594:	4770      	bx	lr
 8012596:	bf00      	nop
 8012598:	0802d910 	.word	0x0802d910

0801259c <blockAppendOps>:

void blockAppendOps(struct log_block * block, struct log_ops * ops)
{
 801259c:	b480      	push	{r7}
 801259e:	b085      	sub	sp, #20
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	6039      	str	r1, [r7, #0]
  struct log_ops * o;

  ops->next = NULL;
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	2200      	movs	r2, #0
 80125aa:	601a      	str	r2, [r3, #0]

  if (block->ops == NULL)
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d103      	bne.n	80125bc <blockAppendOps+0x20>
    block->ops = ops;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	683a      	ldr	r2, [r7, #0]
 80125b8:	639a      	str	r2, [r3, #56]	; 0x38
  {
    for (o = block->ops; o->next; o = o->next);

    o->next = ops;
  }
}
 80125ba:	e00d      	b.n	80125d8 <blockAppendOps+0x3c>
    for (o = block->ops; o->next; o = o->next);
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125c0:	60fb      	str	r3, [r7, #12]
 80125c2:	e002      	b.n	80125ca <blockAppendOps+0x2e>
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	60fb      	str	r3, [r7, #12]
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d1f8      	bne.n	80125c4 <blockAppendOps+0x28>
    o->next = ops;
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	683a      	ldr	r2, [r7, #0]
 80125d6:	601a      	str	r2, [r3, #0]
}
 80125d8:	bf00      	nop
 80125da:	3714      	adds	r7, #20
 80125dc:	46bd      	mov	sp, r7
 80125de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e2:	4770      	bx	lr

080125e4 <logReset>:

static void logReset(void)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b082      	sub	sp, #8
 80125e8:	af00      	add	r7, sp, #0
  int i;

  if (isInit)
 80125ea:	4b2b      	ldr	r3, [pc, #172]	; (8012698 <logReset+0xb4>)
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d029      	beq.n	8012646 <logReset+0x62>
  {
    //Stop and delete all started log blocks
    for(i=0; i<LOG_MAX_BLOCKS; i++)
 80125f2:	2300      	movs	r3, #0
 80125f4:	607b      	str	r3, [r7, #4]
 80125f6:	e023      	b.n	8012640 <logReset+0x5c>
      if (logBlocks[i].id != -1)
 80125f8:	4928      	ldr	r1, [pc, #160]	; (801269c <logReset+0xb8>)
 80125fa:	687a      	ldr	r2, [r7, #4]
 80125fc:	4613      	mov	r3, r2
 80125fe:	011b      	lsls	r3, r3, #4
 8012600:	1a9b      	subs	r3, r3, r2
 8012602:	009b      	lsls	r3, r3, #2
 8012604:	440b      	add	r3, r1
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801260c:	d015      	beq.n	801263a <logReset+0x56>
      {
        logStopBlock(logBlocks[i].id);
 801260e:	4923      	ldr	r1, [pc, #140]	; (801269c <logReset+0xb8>)
 8012610:	687a      	ldr	r2, [r7, #4]
 8012612:	4613      	mov	r3, r2
 8012614:	011b      	lsls	r3, r3, #4
 8012616:	1a9b      	subs	r3, r3, r2
 8012618:	009b      	lsls	r3, r3, #2
 801261a:	440b      	add	r3, r1
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	4618      	mov	r0, r3
 8012620:	f7ff fcaa 	bl	8011f78 <logStopBlock>
        logDeleteBlock(logBlocks[i].id);
 8012624:	491d      	ldr	r1, [pc, #116]	; (801269c <logReset+0xb8>)
 8012626:	687a      	ldr	r2, [r7, #4]
 8012628:	4613      	mov	r3, r2
 801262a:	011b      	lsls	r3, r3, #4
 801262c:	1a9b      	subs	r3, r3, r2
 801262e:	009b      	lsls	r3, r3, #2
 8012630:	440b      	add	r3, r1
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	4618      	mov	r0, r3
 8012636:	f7ff fbc5 	bl	8011dc4 <logDeleteBlock>
    for(i=0; i<LOG_MAX_BLOCKS; i++)
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	3301      	adds	r3, #1
 801263e:	607b      	str	r3, [r7, #4]
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2b0f      	cmp	r3, #15
 8012644:	ddd8      	ble.n	80125f8 <logReset+0x14>
      }
  }

  //Force free all the log block objects
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 8012646:	2300      	movs	r3, #0
 8012648:	607b      	str	r3, [r7, #4]
 801264a:	e00c      	b.n	8012666 <logReset+0x82>
    logBlocks[i].id = BLOCK_ID_FREE;
 801264c:	4913      	ldr	r1, [pc, #76]	; (801269c <logReset+0xb8>)
 801264e:	687a      	ldr	r2, [r7, #4]
 8012650:	4613      	mov	r3, r2
 8012652:	011b      	lsls	r3, r3, #4
 8012654:	1a9b      	subs	r3, r3, r2
 8012656:	009b      	lsls	r3, r3, #2
 8012658:	440b      	add	r3, r1
 801265a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801265e:	601a      	str	r2, [r3, #0]
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	3301      	adds	r3, #1
 8012664:	607b      	str	r3, [r7, #4]
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2b0f      	cmp	r3, #15
 801266a:	ddef      	ble.n	801264c <logReset+0x68>

  //Force free the log ops
  for (i=0; i<LOG_MAX_OPS; i++)
 801266c:	2300      	movs	r3, #0
 801266e:	607b      	str	r3, [r7, #4]
 8012670:	e009      	b.n	8012686 <logReset+0xa2>
    logOps[i].variable = NULL;
 8012672:	4a0b      	ldr	r2, [pc, #44]	; (80126a0 <logReset+0xbc>)
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	011b      	lsls	r3, r3, #4
 8012678:	4413      	add	r3, r2
 801267a:	3308      	adds	r3, #8
 801267c:	2200      	movs	r2, #0
 801267e:	601a      	str	r2, [r3, #0]
  for (i=0; i<LOG_MAX_OPS; i++)
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	3301      	adds	r3, #1
 8012684:	607b      	str	r3, [r7, #4]
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	2b7f      	cmp	r3, #127	; 0x7f
 801268a:	ddf2      	ble.n	8012672 <logReset+0x8e>
}
 801268c:	bf00      	nop
 801268e:	bf00      	nop
 8012690:	3708      	adds	r7, #8
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}
 8012696:	bf00      	nop
 8012698:	2000bc58 	.word	0x2000bc58
 801269c:	200057b8 	.word	0x200057b8
 80126a0:	20004fb8 	.word	0x20004fb8

080126a4 <logGetType>:

  return invalidVarId;
}

inline int logGetType(logVarId_t varid)
{
 80126a4:	b480      	push	{r7}
 80126a6:	b083      	sub	sp, #12
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	4603      	mov	r3, r0
 80126ac:	80fb      	strh	r3, [r7, #6]
  return logs[varid].type & LOG_TYPE_MASK;
 80126ae:	4b08      	ldr	r3, [pc, #32]	; (80126d0 <logGetType+0x2c>)
 80126b0:	6819      	ldr	r1, [r3, #0]
 80126b2:	88fa      	ldrh	r2, [r7, #6]
 80126b4:	4613      	mov	r3, r2
 80126b6:	005b      	lsls	r3, r3, #1
 80126b8:	4413      	add	r3, r2
 80126ba:	009b      	lsls	r3, r3, #2
 80126bc:	440b      	add	r3, r1
 80126be:	781b      	ldrb	r3, [r3, #0]
 80126c0:	f003 030f 	and.w	r3, r3, #15
}
 80126c4:	4618      	mov	r0, r3
 80126c6:	370c      	adds	r7, #12
 80126c8:	46bd      	mov	sp, r7
 80126ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ce:	4770      	bx	lr
 80126d0:	2000bc28 	.word	0x2000bc28

080126d4 <acquisitionTypeFromLogType>:
unsigned int logGetUint(logVarId_t varid)
{
  return (unsigned int)logGetInt(varid);
}

static acquisitionType_t acquisitionTypeFromLogType(uint8_t logType) {
 80126d4:	b480      	push	{r7}
 80126d6:	b083      	sub	sp, #12
 80126d8:	af00      	add	r7, sp, #0
 80126da:	4603      	mov	r3, r0
 80126dc:	71fb      	strb	r3, [r7, #7]
  if (logType & LOG_BY_FUNCTION) {
 80126de:	79fb      	ldrb	r3, [r7, #7]
 80126e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d001      	beq.n	80126ec <acquisitionTypeFromLogType+0x18>
    return acqType_function;
 80126e8:	2301      	movs	r3, #1
 80126ea:	e000      	b.n	80126ee <acquisitionTypeFromLogType+0x1a>
  }

  return acqType_memory;
 80126ec:	2300      	movs	r3, #0
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	370c      	adds	r7, #12
 80126f2:	46bd      	mov	sp, r7
 80126f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f8:	4770      	bx	lr

080126fa <single2half>:
 *  * Rounding seems to give at least 11 bits precision
 *  * Faster and smaller than the GCC implementation
 */

uint16_t single2half(float number)
{
 80126fa:	b480      	push	{r7}
 80126fc:	b087      	sub	sp, #28
 80126fe:	af00      	add	r7, sp, #0
 8012700:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t num = *((uint32_t*)&number);
 8012704:	1d3b      	adds	r3, r7, #4
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	617b      	str	r3, [r7, #20]
    uint32_t s = num>>31;
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	0fdb      	lsrs	r3, r3, #31
 801270e:	613b      	str	r3, [r7, #16]
    uint32_t e = (num>>23)&0x0FF;
 8012710:	697b      	ldr	r3, [r7, #20]
 8012712:	0ddb      	lsrs	r3, r3, #23
 8012714:	b2db      	uxtb	r3, r3
 8012716:	60fb      	str	r3, [r7, #12]

    if ((e==255) && (num&0x007fffff))
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	2bff      	cmp	r3, #255	; 0xff
 801271c:	d107      	bne.n	801272e <single2half+0x34>
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012724:	2b00      	cmp	r3, #0
 8012726:	d002      	beq.n	801272e <single2half+0x34>
        return 0x7E00; // NaN
 8012728:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 801272c:	e02c      	b.n	8012788 <single2half+0x8e>
    if (e>(127+15))
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	2b8e      	cmp	r3, #142	; 0x8e
 8012732:	d908      	bls.n	8012746 <single2half+0x4c>
        return s?0xFC00:0x7C00;  //+/- inf
 8012734:	693b      	ldr	r3, [r7, #16]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d002      	beq.n	8012740 <single2half+0x46>
 801273a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 801273e:	e023      	b.n	8012788 <single2half+0x8e>
 8012740:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8012744:	e020      	b.n	8012788 <single2half+0x8e>
    if (e<(127-15))
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	2b6f      	cmp	r3, #111	; 0x6f
 801274a:	d801      	bhi.n	8012750 <single2half+0x56>
        return 0; //Do not handle generating subnormalised representation
 801274c:	2300      	movs	r3, #0
 801274e:	e01b      	b.n	8012788 <single2half+0x8e>

    return (s<<15) | ((e-127+15)<<10) | (((num>>13)&0x3FF)+((num>>12)&0x01));
 8012750:	693b      	ldr	r3, [r7, #16]
 8012752:	b29b      	uxth	r3, r3
 8012754:	03db      	lsls	r3, r3, #15
 8012756:	b29a      	uxth	r2, r3
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	b29b      	uxth	r3, r3
 801275c:	3b70      	subs	r3, #112	; 0x70
 801275e:	b29b      	uxth	r3, r3
 8012760:	029b      	lsls	r3, r3, #10
 8012762:	b29b      	uxth	r3, r3
 8012764:	4313      	orrs	r3, r2
 8012766:	b29a      	uxth	r2, r3
 8012768:	697b      	ldr	r3, [r7, #20]
 801276a:	0b5b      	lsrs	r3, r3, #13
 801276c:	b29b      	uxth	r3, r3
 801276e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012772:	b299      	uxth	r1, r3
 8012774:	697b      	ldr	r3, [r7, #20]
 8012776:	0b1b      	lsrs	r3, r3, #12
 8012778:	b29b      	uxth	r3, r3
 801277a:	f003 0301 	and.w	r3, r3, #1
 801277e:	b29b      	uxth	r3, r3
 8012780:	440b      	add	r3, r1
 8012782:	b29b      	uxth	r3, r3
 8012784:	4313      	orrs	r3, r2
 8012786:	b29b      	uxth	r3, r3
}
 8012788:	4618      	mov	r0, r3
 801278a:	371c      	adds	r7, #28
 801278c:	46bd      	mov	sp, r7
 801278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012792:	4770      	bx	lr

08012794 <paramGetDefault>:
extern int _stext;
extern int _etext;
static const uint64_t dummyZero64 = 0;

static void * paramGetDefault(int index)
{
 8012794:	b480      	push	{r7}
 8012796:	b087      	sub	sp, #28
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
  uint32_t valueRelative;
  uint32_t address;
  void *ptrDefaultValue;

  address = (uint32_t)(params[index].address);
 801279c:	4b17      	ldr	r3, [pc, #92]	; (80127fc <paramGetDefault+0x68>)
 801279e:	6819      	ldr	r1, [r3, #0]
 80127a0:	687a      	ldr	r2, [r7, #4]
 80127a2:	4613      	mov	r3, r2
 80127a4:	009b      	lsls	r3, r3, #2
 80127a6:	4413      	add	r3, r2
 80127a8:	009b      	lsls	r3, r3, #2
 80127aa:	440b      	add	r3, r1
 80127ac:	689b      	ldr	r3, [r3, #8]
 80127ae:	613b      	str	r3, [r7, #16]

  // Is variable in data section?
  if (address >= (uint32_t)&_sdata &&
 80127b0:	4a13      	ldr	r2, [pc, #76]	; (8012800 <paramGetDefault+0x6c>)
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	4293      	cmp	r3, r2
 80127b6:	d30c      	bcc.n	80127d2 <paramGetDefault+0x3e>
      address <= (uint32_t)&_edata)
 80127b8:	4a12      	ldr	r2, [pc, #72]	; (8012804 <paramGetDefault+0x70>)
  if (address >= (uint32_t)&_sdata &&
 80127ba:	693b      	ldr	r3, [r7, #16]
 80127bc:	4293      	cmp	r3, r2
 80127be:	d808      	bhi.n	80127d2 <paramGetDefault+0x3e>
  {
    valueRelative =  address - (uint32_t)&_sdata;
 80127c0:	4a0f      	ldr	r2, [pc, #60]	; (8012800 <paramGetDefault+0x6c>)
 80127c2:	693b      	ldr	r3, [r7, #16]
 80127c4:	1a9b      	subs	r3, r3, r2
 80127c6:	60fb      	str	r3, [r7, #12]
    ptrDefaultValue = (void *)((uint32_t)&_sidata + valueRelative);
 80127c8:	4a0f      	ldr	r2, [pc, #60]	; (8012808 <paramGetDefault+0x74>)
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	4413      	add	r3, r2
 80127ce:	617b      	str	r3, [r7, #20]
 80127d0:	e00c      	b.n	80127ec <paramGetDefault+0x58>
  }
  // Is variable in flash section?
  else if (address >= (uint32_t)&_stext &&
 80127d2:	4a0e      	ldr	r2, [pc, #56]	; (801280c <paramGetDefault+0x78>)
 80127d4:	693b      	ldr	r3, [r7, #16]
 80127d6:	4293      	cmp	r3, r2
 80127d8:	d306      	bcc.n	80127e8 <paramGetDefault+0x54>
           address <= (uint32_t)&_etext)
 80127da:	4a0d      	ldr	r2, [pc, #52]	; (8012810 <paramGetDefault+0x7c>)
  else if (address >= (uint32_t)&_stext &&
 80127dc:	693b      	ldr	r3, [r7, #16]
 80127de:	4293      	cmp	r3, r2
 80127e0:	d802      	bhi.n	80127e8 <paramGetDefault+0x54>
  {
    ptrDefaultValue = (void *)(address);
 80127e2:	693b      	ldr	r3, [r7, #16]
 80127e4:	617b      	str	r3, [r7, #20]
 80127e6:	e001      	b.n	80127ec <paramGetDefault+0x58>
  }
  // It is zero
  else
  {
    ptrDefaultValue = (void *)&dummyZero64;
 80127e8:	4b0a      	ldr	r3, [pc, #40]	; (8012814 <paramGetDefault+0x80>)
 80127ea:	617b      	str	r3, [r7, #20]
  }

  return ptrDefaultValue;
 80127ec:	697b      	ldr	r3, [r7, #20]
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	371c      	adds	r7, #28
 80127f2:	46bd      	mov	sp, r7
 80127f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f8:	4770      	bx	lr
 80127fa:	bf00      	nop
 80127fc:	2000bc7c 	.word	0x2000bc7c
 8012800:	20000000 	.word	0x20000000
 8012804:	200011a8 	.word	0x200011a8
 8012808:	0802e904 	.word	0x0802e904
 801280c:	08000190 	.word	0x08000190
 8012810:	08029778 	.word	0x08029778
 8012814:	0802d920 	.word	0x0802d920

08012818 <paramSet>:
 * @param data  The variable data
 *
 * @return number of bytes set
 **/
static int paramSet(uint16_t index, void *data)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b084      	sub	sp, #16
 801281c:	af00      	add	r7, sp, #0
 801281e:	4603      	mov	r3, r0
 8012820:	6039      	str	r1, [r7, #0]
 8012822:	80fb      	strh	r3, [r7, #6]
  int paramLength = 0;
 8012824:	2300      	movs	r3, #0
 8012826:	60fb      	str	r3, [r7, #12]

  switch (params[index].type & PARAM_BYTES_MASK)
 8012828:	4b1b      	ldr	r3, [pc, #108]	; (8012898 <paramSet+0x80>)
 801282a:	6819      	ldr	r1, [r3, #0]
 801282c:	88fa      	ldrh	r2, [r7, #6]
 801282e:	4613      	mov	r3, r2
 8012830:	009b      	lsls	r3, r3, #2
 8012832:	4413      	add	r3, r2
 8012834:	009b      	lsls	r3, r3, #2
 8012836:	440b      	add	r3, r1
 8012838:	781b      	ldrb	r3, [r3, #0]
 801283a:	f003 0303 	and.w	r3, r3, #3
 801283e:	2b03      	cmp	r3, #3
 8012840:	d816      	bhi.n	8012870 <paramSet+0x58>
 8012842:	a201      	add	r2, pc, #4	; (adr r2, 8012848 <paramSet+0x30>)
 8012844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012848:	08012859 	.word	0x08012859
 801284c:	0801285f 	.word	0x0801285f
 8012850:	08012865 	.word	0x08012865
 8012854:	0801286b 	.word	0x0801286b
  {
    case PARAM_1BYTE:
      paramLength = 1;
 8012858:	2301      	movs	r3, #1
 801285a:	60fb      	str	r3, [r7, #12]
      break;
 801285c:	e008      	b.n	8012870 <paramSet+0x58>
    case PARAM_2BYTES:
      paramLength = 2;
 801285e:	2302      	movs	r3, #2
 8012860:	60fb      	str	r3, [r7, #12]
      break;
 8012862:	e005      	b.n	8012870 <paramSet+0x58>
    case PARAM_4BYTES:
      paramLength = 4;
 8012864:	2304      	movs	r3, #4
 8012866:	60fb      	str	r3, [r7, #12]
      break;
 8012868:	e002      	b.n	8012870 <paramSet+0x58>
    case PARAM_8BYTES:
      paramLength = 8;
 801286a:	2308      	movs	r3, #8
 801286c:	60fb      	str	r3, [r7, #12]
      break;
 801286e:	bf00      	nop
  }

 	memcpy(params[index].address, data, paramLength);
 8012870:	4b09      	ldr	r3, [pc, #36]	; (8012898 <paramSet+0x80>)
 8012872:	6819      	ldr	r1, [r3, #0]
 8012874:	88fa      	ldrh	r2, [r7, #6]
 8012876:	4613      	mov	r3, r2
 8012878:	009b      	lsls	r3, r3, #2
 801287a:	4413      	add	r3, r2
 801287c:	009b      	lsls	r3, r3, #2
 801287e:	440b      	add	r3, r1
 8012880:	689b      	ldr	r3, [r3, #8]
 8012882:	68fa      	ldr	r2, [r7, #12]
 8012884:	6839      	ldr	r1, [r7, #0]
 8012886:	4618      	mov	r0, r3
 8012888:	f011 f947 	bl	8023b1a <memcpy>

  return paramLength;
 801288c:	68fb      	ldr	r3, [r7, #12]
}
 801288e:	4618      	mov	r0, r3
 8012890:	3710      	adds	r7, #16
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}
 8012896:	bf00      	nop
 8012898:	2000bc7c 	.word	0x2000bc7c

0801289c <paramGet>:
 * @param data  The variable data
 *
 * @return number of bytes read
 **/
static int paramGet(uint16_t index, void *data)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b084      	sub	sp, #16
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	4603      	mov	r3, r0
 80128a4:	6039      	str	r1, [r7, #0]
 80128a6:	80fb      	strh	r3, [r7, #6]
  int paramLength = 0;
 80128a8:	2300      	movs	r3, #0
 80128aa:	60fb      	str	r3, [r7, #12]

  switch (params[index].type & PARAM_BYTES_MASK)
 80128ac:	4b1b      	ldr	r3, [pc, #108]	; (801291c <paramGet+0x80>)
 80128ae:	6819      	ldr	r1, [r3, #0]
 80128b0:	88fa      	ldrh	r2, [r7, #6]
 80128b2:	4613      	mov	r3, r2
 80128b4:	009b      	lsls	r3, r3, #2
 80128b6:	4413      	add	r3, r2
 80128b8:	009b      	lsls	r3, r3, #2
 80128ba:	440b      	add	r3, r1
 80128bc:	781b      	ldrb	r3, [r3, #0]
 80128be:	f003 0303 	and.w	r3, r3, #3
 80128c2:	2b03      	cmp	r3, #3
 80128c4:	d816      	bhi.n	80128f4 <paramGet+0x58>
 80128c6:	a201      	add	r2, pc, #4	; (adr r2, 80128cc <paramGet+0x30>)
 80128c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128cc:	080128dd 	.word	0x080128dd
 80128d0:	080128e3 	.word	0x080128e3
 80128d4:	080128e9 	.word	0x080128e9
 80128d8:	080128ef 	.word	0x080128ef
  {
    case PARAM_1BYTE:
      paramLength = 1;
 80128dc:	2301      	movs	r3, #1
 80128de:	60fb      	str	r3, [r7, #12]
      break;
 80128e0:	e008      	b.n	80128f4 <paramGet+0x58>
    case PARAM_2BYTES:
      paramLength = 2;
 80128e2:	2302      	movs	r3, #2
 80128e4:	60fb      	str	r3, [r7, #12]
      break;
 80128e6:	e005      	b.n	80128f4 <paramGet+0x58>
    case PARAM_4BYTES:
      paramLength = 4;
 80128e8:	2304      	movs	r3, #4
 80128ea:	60fb      	str	r3, [r7, #12]
      break;
 80128ec:	e002      	b.n	80128f4 <paramGet+0x58>
    case PARAM_8BYTES:
      paramLength = 8;
 80128ee:	2308      	movs	r3, #8
 80128f0:	60fb      	str	r3, [r7, #12]
      break;
 80128f2:	bf00      	nop
  }

 	memcpy(data, params[index].address, paramLength);
 80128f4:	4b09      	ldr	r3, [pc, #36]	; (801291c <paramGet+0x80>)
 80128f6:	6819      	ldr	r1, [r3, #0]
 80128f8:	88fa      	ldrh	r2, [r7, #6]
 80128fa:	4613      	mov	r3, r2
 80128fc:	009b      	lsls	r3, r3, #2
 80128fe:	4413      	add	r3, r2
 8012900:	009b      	lsls	r3, r3, #2
 8012902:	440b      	add	r3, r1
 8012904:	689b      	ldr	r3, [r3, #8]
 8012906:	68fa      	ldr	r2, [r7, #12]
 8012908:	4619      	mov	r1, r3
 801290a:	6838      	ldr	r0, [r7, #0]
 801290c:	f011 f905 	bl	8023b1a <memcpy>

  return paramLength;
 8012910:	68fb      	ldr	r3, [r7, #12]
}
 8012912:	4618      	mov	r0, r3
 8012914:	3710      	adds	r7, #16
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}
 801291a:	bf00      	nop
 801291c:	2000bc7c 	.word	0x2000bc7c

08012920 <paramGetLen>:
 * Get param on [index] length in bytes
 *
 * @return number of bytes
 **/
static int paramGetLen(uint16_t index)
{
 8012920:	b480      	push	{r7}
 8012922:	b085      	sub	sp, #20
 8012924:	af00      	add	r7, sp, #0
 8012926:	4603      	mov	r3, r0
 8012928:	80fb      	strh	r3, [r7, #6]
  int paramLength = 0;
 801292a:	2300      	movs	r3, #0
 801292c:	60fb      	str	r3, [r7, #12]

  switch (params[index].type & PARAM_BYTES_MASK)
 801292e:	4b16      	ldr	r3, [pc, #88]	; (8012988 <paramGetLen+0x68>)
 8012930:	6819      	ldr	r1, [r3, #0]
 8012932:	88fa      	ldrh	r2, [r7, #6]
 8012934:	4613      	mov	r3, r2
 8012936:	009b      	lsls	r3, r3, #2
 8012938:	4413      	add	r3, r2
 801293a:	009b      	lsls	r3, r3, #2
 801293c:	440b      	add	r3, r1
 801293e:	781b      	ldrb	r3, [r3, #0]
 8012940:	f003 0303 	and.w	r3, r3, #3
 8012944:	2b03      	cmp	r3, #3
 8012946:	d817      	bhi.n	8012978 <paramGetLen+0x58>
 8012948:	a201      	add	r2, pc, #4	; (adr r2, 8012950 <paramGetLen+0x30>)
 801294a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801294e:	bf00      	nop
 8012950:	08012961 	.word	0x08012961
 8012954:	08012967 	.word	0x08012967
 8012958:	0801296d 	.word	0x0801296d
 801295c:	08012973 	.word	0x08012973
  {
    case PARAM_1BYTE:
      paramLength = 1;
 8012960:	2301      	movs	r3, #1
 8012962:	60fb      	str	r3, [r7, #12]
      break;
 8012964:	e008      	b.n	8012978 <paramGetLen+0x58>
    case PARAM_2BYTES:
      paramLength = 2;
 8012966:	2302      	movs	r3, #2
 8012968:	60fb      	str	r3, [r7, #12]
      break;
 801296a:	e005      	b.n	8012978 <paramGetLen+0x58>
    case PARAM_4BYTES:
      paramLength = 4;
 801296c:	2304      	movs	r3, #4
 801296e:	60fb      	str	r3, [r7, #12]
      break;
 8012970:	e002      	b.n	8012978 <paramGetLen+0x58>
    case PARAM_8BYTES:
      paramLength = 8;
 8012972:	2308      	movs	r3, #8
 8012974:	60fb      	str	r3, [r7, #12]
      break;
 8012976:	bf00      	nop
  }

  return paramLength;
 8012978:	68fb      	ldr	r3, [r7, #12]
}
 801297a:	4618      	mov	r0, r3
 801297c:	3714      	adds	r7, #20
 801297e:	46bd      	mov	sp, r7
 8012980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012984:	4770      	bx	lr
 8012986:	bf00      	nop
 8012988:	2000bc7c 	.word	0x2000bc7c

0801298c <paramLogicInit>:

void paramLogicInit(void)
{
 801298c:	b590      	push	{r4, r7, lr}
 801298e:	b08f      	sub	sp, #60	; 0x3c
 8012990:	af00      	add	r7, sp, #0
  int i;
  const char* group = NULL;
 8012992:	2300      	movs	r3, #0
 8012994:	627b      	str	r3, [r7, #36]	; 0x24
  int groupLength = 0;
 8012996:	2300      	movs	r3, #0
 8012998:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t buf[30];

#ifndef UNIT_TEST_MODE
  params = &_param_start;
 801299a:	4b66      	ldr	r3, [pc, #408]	; (8012b34 <paramLogicInit+0x1a8>)
 801299c:	4a66      	ldr	r2, [pc, #408]	; (8012b38 <paramLogicInit+0x1ac>)
 801299e:	601a      	str	r2, [r3, #0]
  paramsLen = &_param_stop - &_param_start;
 80129a0:	4a66      	ldr	r2, [pc, #408]	; (8012b3c <paramLogicInit+0x1b0>)
 80129a2:	4b65      	ldr	r3, [pc, #404]	; (8012b38 <paramLogicInit+0x1ac>)
 80129a4:	1ad3      	subs	r3, r2, r3
 80129a6:	109b      	asrs	r3, r3, #2
 80129a8:	4a65      	ldr	r2, [pc, #404]	; (8012b40 <paramLogicInit+0x1b4>)
 80129aa:	fb02 f303 	mul.w	r3, r2, r3
 80129ae:	461a      	mov	r2, r3
 80129b0:	4b64      	ldr	r3, [pc, #400]	; (8012b44 <paramLogicInit+0x1b8>)
 80129b2:	601a      	str	r2, [r3, #0]
#else
  params = _param_start;
  paramsLen = _param_stop - _param_start;
#endif
  // Calculate a hash of the toc by chaining description of each elements
  paramsCrc = 0;
 80129b4:	4b64      	ldr	r3, [pc, #400]	; (8012b48 <paramLogicInit+0x1bc>)
 80129b6:	2200      	movs	r2, #0
 80129b8:	601a      	str	r2, [r3, #0]
  for (int i=0; i<paramsLen; i++)
 80129ba:	2300      	movs	r3, #0
 80129bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80129be:	e091      	b.n	8012ae4 <paramLogicInit+0x158>
  {
    int len = 5;
 80129c0:	2305      	movs	r3, #5
 80129c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80129c4:	4b60      	ldr	r3, [pc, #384]	; (8012b48 <paramLogicInit+0x1bc>)
 80129c6:	681b      	ldr	r3, [r3, #0]
    memcpy(&buf[0], &paramsCrc, 4);
 80129c8:	607b      	str	r3, [r7, #4]
    buf[4] = params[i].type;
 80129ca:	4b5a      	ldr	r3, [pc, #360]	; (8012b34 <paramLogicInit+0x1a8>)
 80129cc:	6819      	ldr	r1, [r3, #0]
 80129ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129d0:	4613      	mov	r3, r2
 80129d2:	009b      	lsls	r3, r3, #2
 80129d4:	4413      	add	r3, r2
 80129d6:	009b      	lsls	r3, r3, #2
 80129d8:	440b      	add	r3, r1
 80129da:	781b      	ldrb	r3, [r3, #0]
 80129dc:	723b      	strb	r3, [r7, #8]
    if (params[i].type & PARAM_GROUP) {
 80129de:	4b55      	ldr	r3, [pc, #340]	; (8012b34 <paramLogicInit+0x1a8>)
 80129e0:	6819      	ldr	r1, [r3, #0]
 80129e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129e4:	4613      	mov	r3, r2
 80129e6:	009b      	lsls	r3, r3, #2
 80129e8:	4413      	add	r3, r2
 80129ea:	009b      	lsls	r3, r3, #2
 80129ec:	440b      	add	r3, r1
 80129ee:	781b      	ldrb	r3, [r3, #0]
 80129f0:	b25b      	sxtb	r3, r3
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	da1c      	bge.n	8012a30 <paramLogicInit+0xa4>
      if (params[i].type & PARAM_START) {
 80129f6:	4b4f      	ldr	r3, [pc, #316]	; (8012b34 <paramLogicInit+0x1a8>)
 80129f8:	6819      	ldr	r1, [r3, #0]
 80129fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129fc:	4613      	mov	r3, r2
 80129fe:	009b      	lsls	r3, r3, #2
 8012a00:	4413      	add	r3, r2
 8012a02:	009b      	lsls	r3, r3, #2
 8012a04:	440b      	add	r3, r1
 8012a06:	781b      	ldrb	r3, [r3, #0]
 8012a08:	f003 0301 	and.w	r3, r3, #1
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d026      	beq.n	8012a5e <paramLogicInit+0xd2>
        group = params[i].name;
 8012a10:	4b48      	ldr	r3, [pc, #288]	; (8012b34 <paramLogicInit+0x1a8>)
 8012a12:	6819      	ldr	r1, [r3, #0]
 8012a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a16:	4613      	mov	r3, r2
 8012a18:	009b      	lsls	r3, r3, #2
 8012a1a:	4413      	add	r3, r2
 8012a1c:	009b      	lsls	r3, r3, #2
 8012a1e:	440b      	add	r3, r1
 8012a20:	685b      	ldr	r3, [r3, #4]
 8012a22:	627b      	str	r3, [r7, #36]	; 0x24
        groupLength = strlen(group);
 8012a24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a26:	f7ed fc33 	bl	8000290 <strlen>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	633b      	str	r3, [r7, #48]	; 0x30
 8012a2e:	e016      	b.n	8012a5e <paramLogicInit+0xd2>
      }
    } else {
      // CMD_GET_ITEM_V2 result's size is: 4 + strlen(params[i].name) + groupLength + 2
      if (strlen(params[i].name) + groupLength + 2 > 26) {
 8012a30:	4b40      	ldr	r3, [pc, #256]	; (8012b34 <paramLogicInit+0x1a8>)
 8012a32:	6819      	ldr	r1, [r3, #0]
 8012a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a36:	4613      	mov	r3, r2
 8012a38:	009b      	lsls	r3, r3, #2
 8012a3a:	4413      	add	r3, r2
 8012a3c:	009b      	lsls	r3, r3, #2
 8012a3e:	440b      	add	r3, r1
 8012a40:	685b      	ldr	r3, [r3, #4]
 8012a42:	4618      	mov	r0, r3
 8012a44:	f7ed fc24 	bl	8000290 <strlen>
 8012a48:	4602      	mov	r2, r0
 8012a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a4c:	4413      	add	r3, r2
 8012a4e:	3302      	adds	r3, #2
 8012a50:	2b1a      	cmp	r3, #26
 8012a52:	d904      	bls.n	8012a5e <paramLogicInit+0xd2>
        PARAM_ERROR("'%s.%s' too long\n", group, params[i].name);
        ASSERT_FAILED();
 8012a54:	22fe      	movs	r2, #254	; 0xfe
 8012a56:	493d      	ldr	r1, [pc, #244]	; (8012b4c <paramLogicInit+0x1c0>)
 8012a58:	483d      	ldr	r0, [pc, #244]	; (8012b50 <paramLogicInit+0x1c4>)
 8012a5a:	f7fe f8df 	bl	8010c1c <assertFail>
      }
    }

    if (params[i].name) {
 8012a5e:	4b35      	ldr	r3, [pc, #212]	; (8012b34 <paramLogicInit+0x1a8>)
 8012a60:	6819      	ldr	r1, [r3, #0]
 8012a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a64:	4613      	mov	r3, r2
 8012a66:	009b      	lsls	r3, r3, #2
 8012a68:	4413      	add	r3, r2
 8012a6a:	009b      	lsls	r3, r3, #2
 8012a6c:	440b      	add	r3, r1
 8012a6e:	685b      	ldr	r3, [r3, #4]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d02b      	beq.n	8012acc <paramLogicInit+0x140>
      memcpy(&buf[5], params[i].name, strlen(params[i].name));
 8012a74:	4b2f      	ldr	r3, [pc, #188]	; (8012b34 <paramLogicInit+0x1a8>)
 8012a76:	6819      	ldr	r1, [r3, #0]
 8012a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a7a:	4613      	mov	r3, r2
 8012a7c:	009b      	lsls	r3, r3, #2
 8012a7e:	4413      	add	r3, r2
 8012a80:	009b      	lsls	r3, r3, #2
 8012a82:	440b      	add	r3, r1
 8012a84:	685c      	ldr	r4, [r3, #4]
 8012a86:	4b2b      	ldr	r3, [pc, #172]	; (8012b34 <paramLogicInit+0x1a8>)
 8012a88:	6819      	ldr	r1, [r3, #0]
 8012a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a8c:	4613      	mov	r3, r2
 8012a8e:	009b      	lsls	r3, r3, #2
 8012a90:	4413      	add	r3, r2
 8012a92:	009b      	lsls	r3, r3, #2
 8012a94:	440b      	add	r3, r1
 8012a96:	685b      	ldr	r3, [r3, #4]
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f7ed fbf9 	bl	8000290 <strlen>
 8012a9e:	4602      	mov	r2, r0
 8012aa0:	1d3b      	adds	r3, r7, #4
 8012aa2:	3305      	adds	r3, #5
 8012aa4:	4621      	mov	r1, r4
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f011 f837 	bl	8023b1a <memcpy>
      len += strlen(params[i].name);
 8012aac:	4b21      	ldr	r3, [pc, #132]	; (8012b34 <paramLogicInit+0x1a8>)
 8012aae:	6819      	ldr	r1, [r3, #0]
 8012ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ab2:	4613      	mov	r3, r2
 8012ab4:	009b      	lsls	r3, r3, #2
 8012ab6:	4413      	add	r3, r2
 8012ab8:	009b      	lsls	r3, r3, #2
 8012aba:	440b      	add	r3, r1
 8012abc:	685b      	ldr	r3, [r3, #4]
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f7ed fbe6 	bl	8000290 <strlen>
 8012ac4:	4602      	mov	r2, r0
 8012ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ac8:	4413      	add	r3, r2
 8012aca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    paramsCrc = crc32CalculateBuffer(buf, len);
 8012acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ace:	1d3b      	adds	r3, r7, #4
 8012ad0:	4611      	mov	r1, r2
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f7fe f959 	bl	8010d8a <crc32CalculateBuffer>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	4a1b      	ldr	r2, [pc, #108]	; (8012b48 <paramLogicInit+0x1bc>)
 8012adc:	6013      	str	r3, [r2, #0]
  for (int i=0; i<paramsLen; i++)
 8012ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae0:	3301      	adds	r3, #1
 8012ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012ae4:	4b17      	ldr	r3, [pc, #92]	; (8012b44 <paramLogicInit+0x1b8>)
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012aea:	429a      	cmp	r2, r3
 8012aec:	f6ff af68 	blt.w	80129c0 <paramLogicInit+0x34>
  }

  for (i=0; i<paramsLen; i++)
 8012af0:	2300      	movs	r3, #0
 8012af2:	637b      	str	r3, [r7, #52]	; 0x34
 8012af4:	e014      	b.n	8012b20 <paramLogicInit+0x194>
  {
    if(!(params[i].type & PARAM_GROUP))
 8012af6:	4b0f      	ldr	r3, [pc, #60]	; (8012b34 <paramLogicInit+0x1a8>)
 8012af8:	6819      	ldr	r1, [r3, #0]
 8012afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012afc:	4613      	mov	r3, r2
 8012afe:	009b      	lsls	r3, r3, #2
 8012b00:	4413      	add	r3, r2
 8012b02:	009b      	lsls	r3, r3, #2
 8012b04:	440b      	add	r3, r1
 8012b06:	781b      	ldrb	r3, [r3, #0]
 8012b08:	b25b      	sxtb	r3, r3
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	db05      	blt.n	8012b1a <paramLogicInit+0x18e>
      paramsCount++;
 8012b0e:	4b11      	ldr	r3, [pc, #68]	; (8012b54 <paramLogicInit+0x1c8>)
 8012b10:	881b      	ldrh	r3, [r3, #0]
 8012b12:	3301      	adds	r3, #1
 8012b14:	b29a      	uxth	r2, r3
 8012b16:	4b0f      	ldr	r3, [pc, #60]	; (8012b54 <paramLogicInit+0x1c8>)
 8012b18:	801a      	strh	r2, [r3, #0]
  for (i=0; i<paramsLen; i++)
 8012b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b1c:	3301      	adds	r3, #1
 8012b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8012b20:	4b08      	ldr	r3, [pc, #32]	; (8012b44 <paramLogicInit+0x1b8>)
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b26:	429a      	cmp	r2, r3
 8012b28:	dbe5      	blt.n	8012af6 <paramLogicInit+0x16a>
  }
}
 8012b2a:	bf00      	nop
 8012b2c:	bf00      	nop
 8012b2e:	373c      	adds	r7, #60	; 0x3c
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd90      	pop	{r4, r7, pc}
 8012b34:	2000bc7c 	.word	0x2000bc7c
 8012b38:	08027418 	.word	0x08027418
 8012b3c:	08028890 	.word	0x08028890
 8012b40:	cccccccd 	.word	0xcccccccd
 8012b44:	2000bc80 	.word	0x2000bc80
 8012b48:	2000bc84 	.word	0x2000bc84
 8012b4c:	0802c060 	.word	0x0802c060
 8012b50:	0802c080 	.word	0x0802c080
 8012b54:	2000bc88 	.word	0x2000bc88

08012b58 <paramTOCProcess>:

void paramTOCProcess(CRTPPacket *p, int command)
{
 8012b58:	b5b0      	push	{r4, r5, r7, lr}
 8012b5a:	b086      	sub	sp, #24
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
 8012b60:	6039      	str	r1, [r7, #0]
  int ptr = 0;
 8012b62:	2300      	movs	r3, #0
 8012b64:	617b      	str	r3, [r7, #20]
  char * group = "";
 8012b66:	4b8e      	ldr	r3, [pc, #568]	; (8012da0 <paramTOCProcess+0x248>)
 8012b68:	613b      	str	r3, [r7, #16]
  uint16_t n=0;
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	81fb      	strh	r3, [r7, #14]
  uint16_t paramId=0;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	81bb      	strh	r3, [r7, #12]

  switch (command)
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	2b03      	cmp	r3, #3
 8012b76:	f200 810e 	bhi.w	8012d96 <paramTOCProcess+0x23e>
 8012b7a:	a201      	add	r2, pc, #4	; (adr r2, 8012b80 <paramTOCProcess+0x28>)
 8012b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b80:	08012bc1 	.word	0x08012bc1
 8012b84:	08012b91 	.word	0x08012b91
 8012b88:	08012c19 	.word	0x08012c19
 8012b8c:	08012be3 	.word	0x08012be3
  {
    case CMD_GET_INFO: //Get info packet about the param implementation (obsolete)
      DEBUG_PRINT("Param API V1 not supported anymore!\n");
 8012b90:	4984      	ldr	r1, [pc, #528]	; (8012da4 <paramTOCProcess+0x24c>)
 8012b92:	2000      	movs	r0, #0
 8012b94:	f7fd ff7e 	bl	8010a94 <SEGGER_RTT_printf>
      ptr = 0;
 8012b98:	2300      	movs	r3, #0
 8012b9a:	617b      	str	r3, [r7, #20]
      group = "";
 8012b9c:	4b80      	ldr	r3, [pc, #512]	; (8012da0 <paramTOCProcess+0x248>)
 8012b9e:	613b      	str	r3, [r7, #16]
      p->header = CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	2220      	movs	r2, #32
 8012ba4:	705a      	strb	r2, [r3, #1]
      p->size = 4;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2204      	movs	r2, #4
 8012baa:	701a      	strb	r2, [r3, #0]
      p->data[0] = CMD_GET_INFO;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2201      	movs	r2, #1
 8012bb0:	709a      	strb	r2, [r3, #2]
      p->data[1] = 0; // Param count
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	70da      	strb	r2, [r3, #3]
      crtpSendPacketBlock(p);
 8012bb8:	6878      	ldr	r0, [r7, #4]
 8012bba:	f7ee fc73 	bl	80014a4 <crtpSendPacketBlock>
      break;
 8012bbe:	e0ea      	b.n	8012d96 <paramTOCProcess+0x23e>
    case CMD_GET_ITEM:  //Get param variable (obsolete)
      DEBUG_PRINT("Param API V1 not supported anymore!\n");
 8012bc0:	4978      	ldr	r1, [pc, #480]	; (8012da4 <paramTOCProcess+0x24c>)
 8012bc2:	2000      	movs	r0, #0
 8012bc4:	f7fd ff66 	bl	8010a94 <SEGGER_RTT_printf>
      p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2220      	movs	r2, #32
 8012bcc:	705a      	strb	r2, [r3, #1]
      p->data[0]=CMD_GET_ITEM;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	709a      	strb	r2, [r3, #2]
      p->size=1;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2201      	movs	r2, #1
 8012bd8:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 8012bda:	6878      	ldr	r0, [r7, #4]
 8012bdc:	f7ee fc62 	bl	80014a4 <crtpSendPacketBlock>
      break;
 8012be0:	e0d9      	b.n	8012d96 <paramTOCProcess+0x23e>
    case CMD_GET_INFO_V2: //Get info packet about the param implementation
      ptr = 0;
 8012be2:	2300      	movs	r3, #0
 8012be4:	617b      	str	r3, [r7, #20]
      group = "";
 8012be6:	4b6e      	ldr	r3, [pc, #440]	; (8012da0 <paramTOCProcess+0x248>)
 8012be8:	613b      	str	r3, [r7, #16]
      p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2220      	movs	r2, #32
 8012bee:	705a      	strb	r2, [r3, #1]
      p->size=7;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	2207      	movs	r2, #7
 8012bf4:	701a      	strb	r2, [r3, #0]
      p->data[0]=CMD_GET_INFO_V2;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	2203      	movs	r2, #3
 8012bfa:	709a      	strb	r2, [r3, #2]
      memcpy(&p->data[1], &paramsCount, 2);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	3303      	adds	r3, #3
 8012c00:	4a69      	ldr	r2, [pc, #420]	; (8012da8 <paramTOCProcess+0x250>)
 8012c02:	8812      	ldrh	r2, [r2, #0]
 8012c04:	801a      	strh	r2, [r3, #0]
      memcpy(&p->data[3], &paramsCrc, 4);
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	3305      	adds	r3, #5
 8012c0a:	4a68      	ldr	r2, [pc, #416]	; (8012dac <paramTOCProcess+0x254>)
 8012c0c:	6812      	ldr	r2, [r2, #0]
 8012c0e:	601a      	str	r2, [r3, #0]
      crtpSendPacketBlock(p);
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f7ee fc47 	bl	80014a4 <crtpSendPacketBlock>
      break;
 8012c16:	e0be      	b.n	8012d96 <paramTOCProcess+0x23e>
    case CMD_GET_ITEM_V2:  //Get param variable
      memcpy(&paramId, &p->data[1], 2);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	3303      	adds	r3, #3
 8012c1c:	881b      	ldrh	r3, [r3, #0]
 8012c1e:	b29b      	uxth	r3, r3
 8012c20:	81bb      	strh	r3, [r7, #12]
      for (ptr=0; ptr<paramsLen; ptr++) //Ptr points a group
 8012c22:	2300      	movs	r3, #0
 8012c24:	617b      	str	r3, [r7, #20]
 8012c26:	e030      	b.n	8012c8a <paramTOCProcess+0x132>
      {
        if (params[ptr].type & PARAM_GROUP)
 8012c28:	4b61      	ldr	r3, [pc, #388]	; (8012db0 <paramTOCProcess+0x258>)
 8012c2a:	6819      	ldr	r1, [r3, #0]
 8012c2c:	697a      	ldr	r2, [r7, #20]
 8012c2e:	4613      	mov	r3, r2
 8012c30:	009b      	lsls	r3, r3, #2
 8012c32:	4413      	add	r3, r2
 8012c34:	009b      	lsls	r3, r3, #2
 8012c36:	440b      	add	r3, r1
 8012c38:	781b      	ldrb	r3, [r3, #0]
 8012c3a:	b25b      	sxtb	r3, r3
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	da1a      	bge.n	8012c76 <paramTOCProcess+0x11e>
        {
          if (params[ptr].type & PARAM_START)
 8012c40:	4b5b      	ldr	r3, [pc, #364]	; (8012db0 <paramTOCProcess+0x258>)
 8012c42:	6819      	ldr	r1, [r3, #0]
 8012c44:	697a      	ldr	r2, [r7, #20]
 8012c46:	4613      	mov	r3, r2
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	4413      	add	r3, r2
 8012c4c:	009b      	lsls	r3, r3, #2
 8012c4e:	440b      	add	r3, r1
 8012c50:	781b      	ldrb	r3, [r3, #0]
 8012c52:	f003 0301 	and.w	r3, r3, #1
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d00a      	beq.n	8012c70 <paramTOCProcess+0x118>
            group = params[ptr].name;
 8012c5a:	4b55      	ldr	r3, [pc, #340]	; (8012db0 <paramTOCProcess+0x258>)
 8012c5c:	6819      	ldr	r1, [r3, #0]
 8012c5e:	697a      	ldr	r2, [r7, #20]
 8012c60:	4613      	mov	r3, r2
 8012c62:	009b      	lsls	r3, r3, #2
 8012c64:	4413      	add	r3, r2
 8012c66:	009b      	lsls	r3, r3, #2
 8012c68:	440b      	add	r3, r1
 8012c6a:	685b      	ldr	r3, [r3, #4]
 8012c6c:	613b      	str	r3, [r7, #16]
 8012c6e:	e009      	b.n	8012c84 <paramTOCProcess+0x12c>
          else
            group = "";
 8012c70:	4b4b      	ldr	r3, [pc, #300]	; (8012da0 <paramTOCProcess+0x248>)
 8012c72:	613b      	str	r3, [r7, #16]
 8012c74:	e006      	b.n	8012c84 <paramTOCProcess+0x12c>
        }
        else                          //Ptr points a variable
        {
          if (n==paramId)
 8012c76:	89bb      	ldrh	r3, [r7, #12]
 8012c78:	89fa      	ldrh	r2, [r7, #14]
 8012c7a:	429a      	cmp	r2, r3
 8012c7c:	d00b      	beq.n	8012c96 <paramTOCProcess+0x13e>
            break;
          n++;
 8012c7e:	89fb      	ldrh	r3, [r7, #14]
 8012c80:	3301      	adds	r3, #1
 8012c82:	81fb      	strh	r3, [r7, #14]
      for (ptr=0; ptr<paramsLen; ptr++) //Ptr points a group
 8012c84:	697b      	ldr	r3, [r7, #20]
 8012c86:	3301      	adds	r3, #1
 8012c88:	617b      	str	r3, [r7, #20]
 8012c8a:	4b4a      	ldr	r3, [pc, #296]	; (8012db4 <paramTOCProcess+0x25c>)
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	697a      	ldr	r2, [r7, #20]
 8012c90:	429a      	cmp	r2, r3
 8012c92:	dbc9      	blt.n	8012c28 <paramTOCProcess+0xd0>
 8012c94:	e000      	b.n	8012c98 <paramTOCProcess+0x140>
            break;
 8012c96:	bf00      	nop
        }
      }

      if (ptr<paramsLen)
 8012c98:	4b46      	ldr	r3, [pc, #280]	; (8012db4 <paramTOCProcess+0x25c>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	697a      	ldr	r2, [r7, #20]
 8012c9e:	429a      	cmp	r2, r3
 8012ca0:	da6c      	bge.n	8012d7c <paramTOCProcess+0x224>
      {
        p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	2220      	movs	r2, #32
 8012ca6:	705a      	strb	r2, [r3, #1]
        p->data[0]=CMD_GET_ITEM_V2;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2202      	movs	r2, #2
 8012cac:	709a      	strb	r2, [r3, #2]
        memcpy(&p->data[1], &paramId, 2);
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	3303      	adds	r3, #3
 8012cb2:	89ba      	ldrh	r2, [r7, #12]
 8012cb4:	801a      	strh	r2, [r3, #0]
        p->data[3] = params[ptr].type;
 8012cb6:	4b3e      	ldr	r3, [pc, #248]	; (8012db0 <paramTOCProcess+0x258>)
 8012cb8:	6819      	ldr	r1, [r3, #0]
 8012cba:	697a      	ldr	r2, [r7, #20]
 8012cbc:	4613      	mov	r3, r2
 8012cbe:	009b      	lsls	r3, r3, #2
 8012cc0:	4413      	add	r3, r2
 8012cc2:	009b      	lsls	r3, r3, #2
 8012cc4:	440b      	add	r3, r1
 8012cc6:	781a      	ldrb	r2, [r3, #0]
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	715a      	strb	r2, [r3, #5]
        p->size = 4 + 2 + strlen(group) + strlen(params[ptr].name);
 8012ccc:	6938      	ldr	r0, [r7, #16]
 8012cce:	f7ed fadf 	bl	8000290 <strlen>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	b2dc      	uxtb	r4, r3
 8012cd6:	4b36      	ldr	r3, [pc, #216]	; (8012db0 <paramTOCProcess+0x258>)
 8012cd8:	6819      	ldr	r1, [r3, #0]
 8012cda:	697a      	ldr	r2, [r7, #20]
 8012cdc:	4613      	mov	r3, r2
 8012cde:	009b      	lsls	r3, r3, #2
 8012ce0:	4413      	add	r3, r2
 8012ce2:	009b      	lsls	r3, r3, #2
 8012ce4:	440b      	add	r3, r1
 8012ce6:	685b      	ldr	r3, [r3, #4]
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f7ed fad1 	bl	8000290 <strlen>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	b2db      	uxtb	r3, r3
 8012cf2:	4423      	add	r3, r4
 8012cf4:	b2db      	uxtb	r3, r3
 8012cf6:	3306      	adds	r3, #6
 8012cf8:	b2da      	uxtb	r2, r3
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	701a      	strb	r2, [r3, #0]
        ASSERT(p->size <= CRTP_MAX_DATA_SIZE); // Too long! The name of the group or the parameter may be too long.
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	781b      	ldrb	r3, [r3, #0]
 8012d02:	2b1e      	cmp	r3, #30
 8012d04:	d905      	bls.n	8012d12 <paramTOCProcess+0x1ba>
 8012d06:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8012d0a:	492b      	ldr	r1, [pc, #172]	; (8012db8 <paramTOCProcess+0x260>)
 8012d0c:	482b      	ldr	r0, [pc, #172]	; (8012dbc <paramTOCProcess+0x264>)
 8012d0e:	f7fd ff85 	bl	8010c1c <assertFail>
        memcpy(p->data+4, group, strlen(group)+1);
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	3302      	adds	r3, #2
 8012d16:	1d1c      	adds	r4, r3, #4
 8012d18:	6938      	ldr	r0, [r7, #16]
 8012d1a:	f7ed fab9 	bl	8000290 <strlen>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	3301      	adds	r3, #1
 8012d22:	461a      	mov	r2, r3
 8012d24:	6939      	ldr	r1, [r7, #16]
 8012d26:	4620      	mov	r0, r4
 8012d28:	f010 fef7 	bl	8023b1a <memcpy>
        memcpy(p->data+4+strlen(group)+1, params[ptr].name, strlen(params[ptr].name)+1);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	1c9c      	adds	r4, r3, #2
 8012d30:	6938      	ldr	r0, [r7, #16]
 8012d32:	f7ed faad 	bl	8000290 <strlen>
 8012d36:	4603      	mov	r3, r0
 8012d38:	3305      	adds	r3, #5
 8012d3a:	441c      	add	r4, r3
 8012d3c:	4b1c      	ldr	r3, [pc, #112]	; (8012db0 <paramTOCProcess+0x258>)
 8012d3e:	6819      	ldr	r1, [r3, #0]
 8012d40:	697a      	ldr	r2, [r7, #20]
 8012d42:	4613      	mov	r3, r2
 8012d44:	009b      	lsls	r3, r3, #2
 8012d46:	4413      	add	r3, r2
 8012d48:	009b      	lsls	r3, r3, #2
 8012d4a:	440b      	add	r3, r1
 8012d4c:	685d      	ldr	r5, [r3, #4]
 8012d4e:	4b18      	ldr	r3, [pc, #96]	; (8012db0 <paramTOCProcess+0x258>)
 8012d50:	6819      	ldr	r1, [r3, #0]
 8012d52:	697a      	ldr	r2, [r7, #20]
 8012d54:	4613      	mov	r3, r2
 8012d56:	009b      	lsls	r3, r3, #2
 8012d58:	4413      	add	r3, r2
 8012d5a:	009b      	lsls	r3, r3, #2
 8012d5c:	440b      	add	r3, r1
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	4618      	mov	r0, r3
 8012d62:	f7ed fa95 	bl	8000290 <strlen>
 8012d66:	4603      	mov	r3, r0
 8012d68:	3301      	adds	r3, #1
 8012d6a:	461a      	mov	r2, r3
 8012d6c:	4629      	mov	r1, r5
 8012d6e:	4620      	mov	r0, r4
 8012d70:	f010 fed3 	bl	8023b1a <memcpy>
        crtpSendPacketBlock(p);
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f7ee fb95 	bl	80014a4 <crtpSendPacketBlock>
        p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
        p->data[0]=CMD_GET_ITEM_V2;
        p->size=1;
        crtpSendPacketBlock(p);
      }
      break;
 8012d7a:	e00b      	b.n	8012d94 <paramTOCProcess+0x23c>
        p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	2220      	movs	r2, #32
 8012d80:	705a      	strb	r2, [r3, #1]
        p->data[0]=CMD_GET_ITEM_V2;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	2202      	movs	r2, #2
 8012d86:	709a      	strb	r2, [r3, #2]
        p->size=1;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	2201      	movs	r2, #1
 8012d8c:	701a      	strb	r2, [r3, #0]
        crtpSendPacketBlock(p);
 8012d8e:	6878      	ldr	r0, [r7, #4]
 8012d90:	f7ee fb88 	bl	80014a4 <crtpSendPacketBlock>
      break;
 8012d94:	bf00      	nop
  }
}
 8012d96:	bf00      	nop
 8012d98:	3718      	adds	r7, #24
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8012d9e:	bf00      	nop
 8012da0:	0802c080 	.word	0x0802c080
 8012da4:	0802c084 	.word	0x0802c084
 8012da8:	2000bc88 	.word	0x2000bc88
 8012dac:	2000bc84 	.word	0x2000bc84
 8012db0:	2000bc7c 	.word	0x2000bc7c
 8012db4:	2000bc80 	.word	0x2000bc80
 8012db8:	0802c060 	.word	0x0802c060
 8012dbc:	0802c0ac 	.word	0x0802c0ac

08012dc0 <paramWriteProcess>:

void paramWriteProcess(CRTPPacket *p)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b086      	sub	sp, #24
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
  uint16_t id;
  memcpy(&id, &p->data[0], 2);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	3302      	adds	r3, #2
 8012dcc:	881b      	ldrh	r3, [r3, #0]
 8012dce:	b29b      	uxth	r3, r3
 8012dd0:	81fb      	strh	r3, [r7, #14]

  void* valptr = &p->data[2];
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	3304      	adds	r3, #4
 8012dd6:	617b      	str	r3, [r7, #20]
  int index;

  index = variableGetIndex(id);
 8012dd8:	89fb      	ldrh	r3, [r7, #14]
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f000 f90e 	bl	8012ffc <variableGetIndex>
 8012de0:	6138      	str	r0, [r7, #16]

  if (index < 0) {
 8012de2:	693b      	ldr	r3, [r7, #16]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	da09      	bge.n	8012dfc <paramWriteProcess+0x3c>
    p->data[2] = ENOENT;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2202      	movs	r2, #2
 8012dec:	711a      	strb	r2, [r3, #4]
    p->size = 3;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2203      	movs	r2, #3
 8012df2:	701a      	strb	r2, [r3, #0]

    crtpSendPacketBlock(p);
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f7ee fb55 	bl	80014a4 <crtpSendPacketBlock>
    return;
 8012dfa:	e01a      	b.n	8012e32 <paramWriteProcess+0x72>
  }

  if (params[index].type & PARAM_RONLY)
 8012dfc:	4b0e      	ldr	r3, [pc, #56]	; (8012e38 <paramWriteProcess+0x78>)
 8012dfe:	6819      	ldr	r1, [r3, #0]
 8012e00:	693a      	ldr	r2, [r7, #16]
 8012e02:	4613      	mov	r3, r2
 8012e04:	009b      	lsls	r3, r3, #2
 8012e06:	4413      	add	r3, r2
 8012e08:	009b      	lsls	r3, r3, #2
 8012e0a:	440b      	add	r3, r1
 8012e0c:	781b      	ldrb	r3, [r3, #0]
 8012e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d10c      	bne.n	8012e30 <paramWriteProcess+0x70>
    return;

  paramSet(index, valptr);
 8012e16:	693b      	ldr	r3, [r7, #16]
 8012e18:	b29b      	uxth	r3, r3
 8012e1a:	6979      	ldr	r1, [r7, #20]
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f7ff fcfb 	bl	8012818 <paramSet>

  crtpSendPacketBlock(p);
 8012e22:	6878      	ldr	r0, [r7, #4]
 8012e24:	f7ee fb3e 	bl	80014a4 <crtpSendPacketBlock>

  paramNotifyChanged(index);
 8012e28:	6938      	ldr	r0, [r7, #16]
 8012e2a:	f000 f807 	bl	8012e3c <paramNotifyChanged>
 8012e2e:	e000      	b.n	8012e32 <paramWriteProcess+0x72>
    return;
 8012e30:	bf00      	nop
}
 8012e32:	3718      	adds	r7, #24
 8012e34:	46bd      	mov	sp, r7
 8012e36:	bd80      	pop	{r7, pc}
 8012e38:	2000bc7c 	.word	0x2000bc7c

08012e3c <paramNotifyChanged>:

static void paramNotifyChanged(int index) {
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b082      	sub	sp, #8
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
  if (params[index].callback) {
 8012e44:	4b0c      	ldr	r3, [pc, #48]	; (8012e78 <paramNotifyChanged+0x3c>)
 8012e46:	6819      	ldr	r1, [r3, #0]
 8012e48:	687a      	ldr	r2, [r7, #4]
 8012e4a:	4613      	mov	r3, r2
 8012e4c:	009b      	lsls	r3, r3, #2
 8012e4e:	4413      	add	r3, r2
 8012e50:	009b      	lsls	r3, r3, #2
 8012e52:	440b      	add	r3, r1
 8012e54:	68db      	ldr	r3, [r3, #12]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d009      	beq.n	8012e6e <paramNotifyChanged+0x32>
    params[index].callback();
 8012e5a:	4b07      	ldr	r3, [pc, #28]	; (8012e78 <paramNotifyChanged+0x3c>)
 8012e5c:	6819      	ldr	r1, [r3, #0]
 8012e5e:	687a      	ldr	r2, [r7, #4]
 8012e60:	4613      	mov	r3, r2
 8012e62:	009b      	lsls	r3, r3, #2
 8012e64:	4413      	add	r3, r2
 8012e66:	009b      	lsls	r3, r3, #2
 8012e68:	440b      	add	r3, r1
 8012e6a:	68db      	ldr	r3, [r3, #12]
 8012e6c:	4798      	blx	r3
  }
}
 8012e6e:	bf00      	nop
 8012e70:	3708      	adds	r7, #8
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd80      	pop	{r7, pc}
 8012e76:	bf00      	nop
 8012e78:	2000bc7c 	.word	0x2000bc7c

08012e7c <paramWriteByNameProcess>:

static char paramWriteByNameProcess(char* group, char* name, int type, void *valptr) {
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b086      	sub	sp, #24
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	60f8      	str	r0, [r7, #12]
 8012e84:	60b9      	str	r1, [r7, #8]
 8012e86:	607a      	str	r2, [r7, #4]
 8012e88:	603b      	str	r3, [r7, #0]
  int index;
  char *pgroup = "";
 8012e8a:	4b40      	ldr	r3, [pc, #256]	; (8012f8c <paramWriteByNameProcess+0x110>)
 8012e8c:	613b      	str	r3, [r7, #16]

  for (index = 0; index < paramsLen; index++) //Ptr points a group
 8012e8e:	2300      	movs	r3, #0
 8012e90:	617b      	str	r3, [r7, #20]
 8012e92:	e040      	b.n	8012f16 <paramWriteByNameProcess+0x9a>
  {
    if (params[index].type & PARAM_GROUP)
 8012e94:	4b3e      	ldr	r3, [pc, #248]	; (8012f90 <paramWriteByNameProcess+0x114>)
 8012e96:	6819      	ldr	r1, [r3, #0]
 8012e98:	697a      	ldr	r2, [r7, #20]
 8012e9a:	4613      	mov	r3, r2
 8012e9c:	009b      	lsls	r3, r3, #2
 8012e9e:	4413      	add	r3, r2
 8012ea0:	009b      	lsls	r3, r3, #2
 8012ea2:	440b      	add	r3, r1
 8012ea4:	781b      	ldrb	r3, [r3, #0]
 8012ea6:	b25b      	sxtb	r3, r3
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	da1a      	bge.n	8012ee2 <paramWriteByNameProcess+0x66>
    {
      if (params[index].type & PARAM_START)
 8012eac:	4b38      	ldr	r3, [pc, #224]	; (8012f90 <paramWriteByNameProcess+0x114>)
 8012eae:	6819      	ldr	r1, [r3, #0]
 8012eb0:	697a      	ldr	r2, [r7, #20]
 8012eb2:	4613      	mov	r3, r2
 8012eb4:	009b      	lsls	r3, r3, #2
 8012eb6:	4413      	add	r3, r2
 8012eb8:	009b      	lsls	r3, r3, #2
 8012eba:	440b      	add	r3, r1
 8012ebc:	781b      	ldrb	r3, [r3, #0]
 8012ebe:	f003 0301 	and.w	r3, r3, #1
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d00a      	beq.n	8012edc <paramWriteByNameProcess+0x60>
        pgroup = params[index].name;
 8012ec6:	4b32      	ldr	r3, [pc, #200]	; (8012f90 <paramWriteByNameProcess+0x114>)
 8012ec8:	6819      	ldr	r1, [r3, #0]
 8012eca:	697a      	ldr	r2, [r7, #20]
 8012ecc:	4613      	mov	r3, r2
 8012ece:	009b      	lsls	r3, r3, #2
 8012ed0:	4413      	add	r3, r2
 8012ed2:	009b      	lsls	r3, r3, #2
 8012ed4:	440b      	add	r3, r1
 8012ed6:	685b      	ldr	r3, [r3, #4]
 8012ed8:	613b      	str	r3, [r7, #16]
 8012eda:	e019      	b.n	8012f10 <paramWriteByNameProcess+0x94>
      else
        pgroup = "";
 8012edc:	4b2b      	ldr	r3, [pc, #172]	; (8012f8c <paramWriteByNameProcess+0x110>)
 8012ede:	613b      	str	r3, [r7, #16]
 8012ee0:	e016      	b.n	8012f10 <paramWriteByNameProcess+0x94>
    }
    else                          //Ptr points a variable
    {
      if (!strcmp(params[index].name, name) && !strcmp(pgroup, group))
 8012ee2:	4b2b      	ldr	r3, [pc, #172]	; (8012f90 <paramWriteByNameProcess+0x114>)
 8012ee4:	6819      	ldr	r1, [r3, #0]
 8012ee6:	697a      	ldr	r2, [r7, #20]
 8012ee8:	4613      	mov	r3, r2
 8012eea:	009b      	lsls	r3, r3, #2
 8012eec:	4413      	add	r3, r2
 8012eee:	009b      	lsls	r3, r3, #2
 8012ef0:	440b      	add	r3, r1
 8012ef2:	685b      	ldr	r3, [r3, #4]
 8012ef4:	68b9      	ldr	r1, [r7, #8]
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7ed f96a 	bl	80001d0 <strcmp>
 8012efc:	4603      	mov	r3, r0
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d106      	bne.n	8012f10 <paramWriteByNameProcess+0x94>
 8012f02:	68f9      	ldr	r1, [r7, #12]
 8012f04:	6938      	ldr	r0, [r7, #16]
 8012f06:	f7ed f963 	bl	80001d0 <strcmp>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d008      	beq.n	8012f22 <paramWriteByNameProcess+0xa6>
  for (index = 0; index < paramsLen; index++) //Ptr points a group
 8012f10:	697b      	ldr	r3, [r7, #20]
 8012f12:	3301      	adds	r3, #1
 8012f14:	617b      	str	r3, [r7, #20]
 8012f16:	4b1f      	ldr	r3, [pc, #124]	; (8012f94 <paramWriteByNameProcess+0x118>)
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	697a      	ldr	r2, [r7, #20]
 8012f1c:	429a      	cmp	r2, r3
 8012f1e:	dbb9      	blt.n	8012e94 <paramWriteByNameProcess+0x18>
 8012f20:	e000      	b.n	8012f24 <paramWriteByNameProcess+0xa8>
        break;
 8012f22:	bf00      	nop
    }
  }

  if (index >= paramsLen) {
 8012f24:	4b1b      	ldr	r3, [pc, #108]	; (8012f94 <paramWriteByNameProcess+0x118>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	697a      	ldr	r2, [r7, #20]
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	db01      	blt.n	8012f32 <paramWriteByNameProcess+0xb6>
    return ENOENT;
 8012f2e:	2302      	movs	r3, #2
 8012f30:	e028      	b.n	8012f84 <paramWriteByNameProcess+0x108>
  }

  if (type != (params[index].type & (~(PARAM_CORE | PARAM_RONLY | PARAM_EXTENDED)))) {
 8012f32:	4b17      	ldr	r3, [pc, #92]	; (8012f90 <paramWriteByNameProcess+0x114>)
 8012f34:	6819      	ldr	r1, [r3, #0]
 8012f36:	697a      	ldr	r2, [r7, #20]
 8012f38:	4613      	mov	r3, r2
 8012f3a:	009b      	lsls	r3, r3, #2
 8012f3c:	4413      	add	r3, r2
 8012f3e:	009b      	lsls	r3, r3, #2
 8012f40:	440b      	add	r3, r1
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012f48:	687a      	ldr	r2, [r7, #4]
 8012f4a:	429a      	cmp	r2, r3
 8012f4c:	d001      	beq.n	8012f52 <paramWriteByNameProcess+0xd6>
    return EINVAL;
 8012f4e:	2316      	movs	r3, #22
 8012f50:	e018      	b.n	8012f84 <paramWriteByNameProcess+0x108>
  }

  if (params[index].type & PARAM_RONLY) {
 8012f52:	4b0f      	ldr	r3, [pc, #60]	; (8012f90 <paramWriteByNameProcess+0x114>)
 8012f54:	6819      	ldr	r1, [r3, #0]
 8012f56:	697a      	ldr	r2, [r7, #20]
 8012f58:	4613      	mov	r3, r2
 8012f5a:	009b      	lsls	r3, r3, #2
 8012f5c:	4413      	add	r3, r2
 8012f5e:	009b      	lsls	r3, r3, #2
 8012f60:	440b      	add	r3, r1
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d001      	beq.n	8012f70 <paramWriteByNameProcess+0xf4>
    return EACCES;
 8012f6c:	230d      	movs	r3, #13
 8012f6e:	e009      	b.n	8012f84 <paramWriteByNameProcess+0x108>
  }

  paramSet(index, valptr);
 8012f70:	697b      	ldr	r3, [r7, #20]
 8012f72:	b29b      	uxth	r3, r3
 8012f74:	6839      	ldr	r1, [r7, #0]
 8012f76:	4618      	mov	r0, r3
 8012f78:	f7ff fc4e 	bl	8012818 <paramSet>

  paramNotifyChanged(index);
 8012f7c:	6978      	ldr	r0, [r7, #20]
 8012f7e:	f7ff ff5d 	bl	8012e3c <paramNotifyChanged>

  return 0;
 8012f82:	2300      	movs	r3, #0
}
 8012f84:	4618      	mov	r0, r3
 8012f86:	3718      	adds	r7, #24
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}
 8012f8c:	0802c080 	.word	0x0802c080
 8012f90:	2000bc7c 	.word	0x2000bc7c
 8012f94:	2000bc80 	.word	0x2000bc80

08012f98 <paramReadProcess>:

void paramReadProcess(CRTPPacket *p)
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b084      	sub	sp, #16
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
  uint16_t id;
  memcpy(&id, &p->data[0], 2);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	3302      	adds	r3, #2
 8012fa4:	881b      	ldrh	r3, [r3, #0]
 8012fa6:	b29b      	uxth	r3, r3
 8012fa8:	817b      	strh	r3, [r7, #10]
  int index = variableGetIndex(id);
 8012faa:	897b      	ldrh	r3, [r7, #10]
 8012fac:	4618      	mov	r0, r3
 8012fae:	f000 f825 	bl	8012ffc <variableGetIndex>
 8012fb2:	60f8      	str	r0, [r7, #12]

  if (index<0) {
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	da09      	bge.n	8012fce <paramReadProcess+0x36>
    p->data[2] = ENOENT;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	2202      	movs	r2, #2
 8012fbe:	711a      	strb	r2, [r3, #4]
    p->size = 3;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2203      	movs	r2, #3
 8012fc4:	701a      	strb	r2, [r3, #0]

    crtpSendPacketBlock(p);
 8012fc6:	6878      	ldr	r0, [r7, #4]
 8012fc8:	f7ee fa6c 	bl	80014a4 <crtpSendPacketBlock>
 8012fcc:	e013      	b.n	8012ff6 <paramReadProcess+0x5e>
    return;
  }
  p->data[2] = 0;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	711a      	strb	r2, [r3, #4]
  p->size = 3 + paramGet(index, &p->data[3]);
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	b29a      	uxth	r2, r3
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	3305      	adds	r3, #5
 8012fdc:	4619      	mov	r1, r3
 8012fde:	4610      	mov	r0, r2
 8012fe0:	f7ff fc5c 	bl	801289c <paramGet>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	b2db      	uxtb	r3, r3
 8012fe8:	3303      	adds	r3, #3
 8012fea:	b2da      	uxtb	r2, r3
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	701a      	strb	r2, [r3, #0]

  crtpSendPacketBlock(p);
 8012ff0:	6878      	ldr	r0, [r7, #4]
 8012ff2:	f7ee fa57 	bl	80014a4 <crtpSendPacketBlock>
}
 8012ff6:	3710      	adds	r7, #16
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	bd80      	pop	{r7, pc}

08012ffc <variableGetIndex>:

static int variableGetIndex(int id)
{
 8012ffc:	b480      	push	{r7}
 8012ffe:	b085      	sub	sp, #20
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
  int i;
  int n = 0;
 8013004:	2300      	movs	r3, #0
 8013006:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < paramsLen; i++)
 8013008:	2300      	movs	r3, #0
 801300a:	60fb      	str	r3, [r7, #12]
 801300c:	e015      	b.n	801303a <variableGetIndex+0x3e>
  {
    if(!(params[i].type & PARAM_GROUP))
 801300e:	4b16      	ldr	r3, [pc, #88]	; (8013068 <variableGetIndex+0x6c>)
 8013010:	6819      	ldr	r1, [r3, #0]
 8013012:	68fa      	ldr	r2, [r7, #12]
 8013014:	4613      	mov	r3, r2
 8013016:	009b      	lsls	r3, r3, #2
 8013018:	4413      	add	r3, r2
 801301a:	009b      	lsls	r3, r3, #2
 801301c:	440b      	add	r3, r1
 801301e:	781b      	ldrb	r3, [r3, #0]
 8013020:	b25b      	sxtb	r3, r3
 8013022:	2b00      	cmp	r3, #0
 8013024:	db06      	blt.n	8013034 <variableGetIndex+0x38>
    {
      if(n == id) {
 8013026:	68ba      	ldr	r2, [r7, #8]
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	429a      	cmp	r2, r3
 801302c:	d00b      	beq.n	8013046 <variableGetIndex+0x4a>
        break;
      }
      n++;
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	3301      	adds	r3, #1
 8013032:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < paramsLen; i++)
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	3301      	adds	r3, #1
 8013038:	60fb      	str	r3, [r7, #12]
 801303a:	4b0c      	ldr	r3, [pc, #48]	; (801306c <variableGetIndex+0x70>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	68fa      	ldr	r2, [r7, #12]
 8013040:	429a      	cmp	r2, r3
 8013042:	dbe4      	blt.n	801300e <variableGetIndex+0x12>
 8013044:	e000      	b.n	8013048 <variableGetIndex+0x4c>
        break;
 8013046:	bf00      	nop
    }
  }

  if (i >= paramsLen)
 8013048:	4b08      	ldr	r3, [pc, #32]	; (801306c <variableGetIndex+0x70>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	68fa      	ldr	r2, [r7, #12]
 801304e:	429a      	cmp	r2, r3
 8013050:	db02      	blt.n	8013058 <variableGetIndex+0x5c>
    return -1;
 8013052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013056:	e000      	b.n	801305a <variableGetIndex+0x5e>

  return i;
 8013058:	68fb      	ldr	r3, [r7, #12]
}
 801305a:	4618      	mov	r0, r3
 801305c:	3714      	adds	r7, #20
 801305e:	46bd      	mov	sp, r7
 8013060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013064:	4770      	bx	lr
 8013066:	bf00      	nop
 8013068:	2000bc7c 	.word	0x2000bc7c
 801306c:	2000bc80 	.word	0x2000bc80

08013070 <paramGetVarIdFromComplete>:

/* Public API to access param TOC from within the copter */
static paramVarId_t invalidVarId = {0xffffu, 0xffffu};

paramVarId_t paramGetVarIdFromComplete(const char* completeName)
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b08e      	sub	sp, #56	; 0x38
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
  char group[32] = { 0, };
 8013078:	2300      	movs	r3, #0
 801307a:	60bb      	str	r3, [r7, #8]
 801307c:	f107 030c 	add.w	r3, r7, #12
 8013080:	2200      	movs	r2, #0
 8013082:	601a      	str	r2, [r3, #0]
 8013084:	605a      	str	r2, [r3, #4]
 8013086:	609a      	str	r2, [r3, #8]
 8013088:	60da      	str	r2, [r3, #12]
 801308a:	611a      	str	r2, [r3, #16]
 801308c:	615a      	str	r2, [r3, #20]
 801308e:	619a      	str	r2, [r3, #24]

  char *dot = strchr(completeName, '.');
 8013090:	212e      	movs	r1, #46	; 0x2e
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	f010 fc53 	bl	802393e <strchr>
 8013098:	6378      	str	r0, [r7, #52]	; 0x34
  if (!dot) {
 801309a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801309c:	2b00      	cmp	r3, #0
 801309e:	d103      	bne.n	80130a8 <paramGetVarIdFromComplete+0x38>
    return invalidVarId;
 80130a0:	4b17      	ldr	r3, [pc, #92]	; (8013100 <paramGetVarIdFromComplete+0x90>)
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80130a6:	e015      	b.n	80130d4 <paramGetVarIdFromComplete+0x64>
  }

  size_t group_len = dot - completeName;
 80130a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	1ad3      	subs	r3, r2, r3
 80130ae:	633b      	str	r3, [r7, #48]	; 0x30
  memcpy(group, completeName, group_len);
 80130b0:	f107 0308 	add.w	r3, r7, #8
 80130b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80130b6:	6879      	ldr	r1, [r7, #4]
 80130b8:	4618      	mov	r0, r3
 80130ba:	f010 fd2e 	bl	8023b1a <memcpy>
  char *name = (char *) (dot + 1);
 80130be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130c0:	3301      	adds	r3, #1
 80130c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  return paramGetVarId(group, name);
 80130c4:	f107 0308 	add.w	r3, r7, #8
 80130c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80130ca:	4618      	mov	r0, r3
 80130cc:	f000 f81a 	bl	8013104 <paramGetVarId>
 80130d0:	4603      	mov	r3, r0
 80130d2:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80130d4:	2300      	movs	r3, #0
 80130d6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80130da:	f362 0307 	bfi	r3, r2, #0, #8
 80130de:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80130e2:	f362 230f 	bfi	r3, r2, #8, #8
 80130e6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80130ea:	f362 4317 	bfi	r3, r2, #16, #8
 80130ee:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80130f2:	f362 631f 	bfi	r3, r2, #24, #8
 80130f6:	4618      	mov	r0, r3
 80130f8:	3738      	adds	r7, #56	; 0x38
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}
 80130fe:	bf00      	nop
 8013100:	20000ecc 	.word	0x20000ecc

08013104 <paramGetVarId>:

paramVarId_t paramGetVarId(const char* group, const char* name)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b086      	sub	sp, #24
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
 801310c:	6039      	str	r1, [r7, #0]
  uint16_t index;
  uint16_t id = 0;
 801310e:	2300      	movs	r3, #0
 8013110:	82bb      	strh	r3, [r7, #20]
  paramVarId_t varId = invalidVarId;
 8013112:	4b35      	ldr	r3, [pc, #212]	; (80131e8 <paramGetVarId+0xe4>)
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	60bb      	str	r3, [r7, #8]
  char * currgroup = "";
 8013118:	4b34      	ldr	r3, [pc, #208]	; (80131ec <paramGetVarId+0xe8>)
 801311a:	613b      	str	r3, [r7, #16]

  for(index = 0; index < paramsLen; index++)
 801311c:	2300      	movs	r3, #0
 801311e:	82fb      	strh	r3, [r7, #22]
 8013120:	e049      	b.n	80131b6 <paramGetVarId+0xb2>
  {
    if (params[index].type & PARAM_GROUP) {
 8013122:	4b33      	ldr	r3, [pc, #204]	; (80131f0 <paramGetVarId+0xec>)
 8013124:	6819      	ldr	r1, [r3, #0]
 8013126:	8afa      	ldrh	r2, [r7, #22]
 8013128:	4613      	mov	r3, r2
 801312a:	009b      	lsls	r3, r3, #2
 801312c:	4413      	add	r3, r2
 801312e:	009b      	lsls	r3, r3, #2
 8013130:	440b      	add	r3, r1
 8013132:	781b      	ldrb	r3, [r3, #0]
 8013134:	b25b      	sxtb	r3, r3
 8013136:	2b00      	cmp	r3, #0
 8013138:	da17      	bge.n	801316a <paramGetVarId+0x66>
      if (params[index].type & PARAM_START) {
 801313a:	4b2d      	ldr	r3, [pc, #180]	; (80131f0 <paramGetVarId+0xec>)
 801313c:	6819      	ldr	r1, [r3, #0]
 801313e:	8afa      	ldrh	r2, [r7, #22]
 8013140:	4613      	mov	r3, r2
 8013142:	009b      	lsls	r3, r3, #2
 8013144:	4413      	add	r3, r2
 8013146:	009b      	lsls	r3, r3, #2
 8013148:	440b      	add	r3, r1
 801314a:	781b      	ldrb	r3, [r3, #0]
 801314c:	f003 0301 	and.w	r3, r3, #1
 8013150:	2b00      	cmp	r3, #0
 8013152:	d00d      	beq.n	8013170 <paramGetVarId+0x6c>
        currgroup = params[index].name;
 8013154:	4b26      	ldr	r3, [pc, #152]	; (80131f0 <paramGetVarId+0xec>)
 8013156:	6819      	ldr	r1, [r3, #0]
 8013158:	8afa      	ldrh	r2, [r7, #22]
 801315a:	4613      	mov	r3, r2
 801315c:	009b      	lsls	r3, r3, #2
 801315e:	4413      	add	r3, r2
 8013160:	009b      	lsls	r3, r3, #2
 8013162:	440b      	add	r3, r1
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	613b      	str	r3, [r7, #16]
 8013168:	e002      	b.n	8013170 <paramGetVarId+0x6c>
      }
    } else {
      id += 1;
 801316a:	8abb      	ldrh	r3, [r7, #20]
 801316c:	3301      	adds	r3, #1
 801316e:	82bb      	strh	r3, [r7, #20]
    }

    if ((!strcmp(group, currgroup)) && (!strcmp(name, params[index].name))) {
 8013170:	6939      	ldr	r1, [r7, #16]
 8013172:	6878      	ldr	r0, [r7, #4]
 8013174:	f7ed f82c 	bl	80001d0 <strcmp>
 8013178:	4603      	mov	r3, r0
 801317a:	2b00      	cmp	r3, #0
 801317c:	d118      	bne.n	80131b0 <paramGetVarId+0xac>
 801317e:	4b1c      	ldr	r3, [pc, #112]	; (80131f0 <paramGetVarId+0xec>)
 8013180:	6819      	ldr	r1, [r3, #0]
 8013182:	8afa      	ldrh	r2, [r7, #22]
 8013184:	4613      	mov	r3, r2
 8013186:	009b      	lsls	r3, r3, #2
 8013188:	4413      	add	r3, r2
 801318a:	009b      	lsls	r3, r3, #2
 801318c:	440b      	add	r3, r1
 801318e:	685b      	ldr	r3, [r3, #4]
 8013190:	4619      	mov	r1, r3
 8013192:	6838      	ldr	r0, [r7, #0]
 8013194:	f7ed f81c 	bl	80001d0 <strcmp>
 8013198:	4603      	mov	r3, r0
 801319a:	2b00      	cmp	r3, #0
 801319c:	d108      	bne.n	80131b0 <paramGetVarId+0xac>
      varId.index = index;
 801319e:	8afb      	ldrh	r3, [r7, #22]
 80131a0:	817b      	strh	r3, [r7, #10]
      varId.id = id - 1;
 80131a2:	8abb      	ldrh	r3, [r7, #20]
 80131a4:	3b01      	subs	r3, #1
 80131a6:	b29b      	uxth	r3, r3
 80131a8:	813b      	strh	r3, [r7, #8]
      return varId;
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	60fb      	str	r3, [r7, #12]
 80131ae:	e00a      	b.n	80131c6 <paramGetVarId+0xc2>
  for(index = 0; index < paramsLen; index++)
 80131b0:	8afb      	ldrh	r3, [r7, #22]
 80131b2:	3301      	adds	r3, #1
 80131b4:	82fb      	strh	r3, [r7, #22]
 80131b6:	8afa      	ldrh	r2, [r7, #22]
 80131b8:	4b0e      	ldr	r3, [pc, #56]	; (80131f4 <paramGetVarId+0xf0>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	429a      	cmp	r2, r3
 80131be:	dbb0      	blt.n	8013122 <paramGetVarId+0x1e>
    }
  }

  return invalidVarId;
 80131c0:	4b09      	ldr	r3, [pc, #36]	; (80131e8 <paramGetVarId+0xe4>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	60fb      	str	r3, [r7, #12]
}
 80131c6:	2300      	movs	r3, #0
 80131c8:	7b3a      	ldrb	r2, [r7, #12]
 80131ca:	f362 0307 	bfi	r3, r2, #0, #8
 80131ce:	7b7a      	ldrb	r2, [r7, #13]
 80131d0:	f362 230f 	bfi	r3, r2, #8, #8
 80131d4:	7bba      	ldrb	r2, [r7, #14]
 80131d6:	f362 4317 	bfi	r3, r2, #16, #8
 80131da:	7bfa      	ldrb	r2, [r7, #15]
 80131dc:	f362 631f 	bfi	r3, r2, #24, #8
 80131e0:	4618      	mov	r0, r3
 80131e2:	3718      	adds	r7, #24
 80131e4:	46bd      	mov	sp, r7
 80131e6:	bd80      	pop	{r7, pc}
 80131e8:	20000ecc 	.word	0x20000ecc
 80131ec:	0802c080 	.word	0x0802c080
 80131f0:	2000bc7c 	.word	0x2000bc7c
 80131f4:	2000bc80 	.word	0x2000bc80

080131f8 <paramGetGroupAndName>:
{
  return params[varid.index].type;
}

void paramGetGroupAndName(paramVarId_t varid, char** group, char** name)
{
 80131f8:	b480      	push	{r7}
 80131fa:	b087      	sub	sp, #28
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	60f8      	str	r0, [r7, #12]
 8013200:	60b9      	str	r1, [r7, #8]
 8013202:	607a      	str	r2, [r7, #4]
  char * currgroup = "";
 8013204:	4b28      	ldr	r3, [pc, #160]	; (80132a8 <paramGetGroupAndName+0xb0>)
 8013206:	617b      	str	r3, [r7, #20]
  *group = 0;
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	2200      	movs	r2, #0
 801320c:	601a      	str	r2, [r3, #0]
  *name = 0;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2200      	movs	r2, #0
 8013212:	601a      	str	r2, [r3, #0]

  for(int index = 0; index < paramsLen; index++) {
 8013214:	2300      	movs	r3, #0
 8013216:	613b      	str	r3, [r7, #16]
 8013218:	e039      	b.n	801328e <paramGetGroupAndName+0x96>
    if (params[index].type & PARAM_GROUP) {
 801321a:	4b24      	ldr	r3, [pc, #144]	; (80132ac <paramGetGroupAndName+0xb4>)
 801321c:	6819      	ldr	r1, [r3, #0]
 801321e:	693a      	ldr	r2, [r7, #16]
 8013220:	4613      	mov	r3, r2
 8013222:	009b      	lsls	r3, r3, #2
 8013224:	4413      	add	r3, r2
 8013226:	009b      	lsls	r3, r3, #2
 8013228:	440b      	add	r3, r1
 801322a:	781b      	ldrb	r3, [r3, #0]
 801322c:	b25b      	sxtb	r3, r3
 801322e:	2b00      	cmp	r3, #0
 8013230:	da16      	bge.n	8013260 <paramGetGroupAndName+0x68>
      if (params[index].type & PARAM_START) {
 8013232:	4b1e      	ldr	r3, [pc, #120]	; (80132ac <paramGetGroupAndName+0xb4>)
 8013234:	6819      	ldr	r1, [r3, #0]
 8013236:	693a      	ldr	r2, [r7, #16]
 8013238:	4613      	mov	r3, r2
 801323a:	009b      	lsls	r3, r3, #2
 801323c:	4413      	add	r3, r2
 801323e:	009b      	lsls	r3, r3, #2
 8013240:	440b      	add	r3, r1
 8013242:	781b      	ldrb	r3, [r3, #0]
 8013244:	f003 0301 	and.w	r3, r3, #1
 8013248:	2b00      	cmp	r3, #0
 801324a:	d009      	beq.n	8013260 <paramGetGroupAndName+0x68>
        currgroup = params[index].name;
 801324c:	4b17      	ldr	r3, [pc, #92]	; (80132ac <paramGetGroupAndName+0xb4>)
 801324e:	6819      	ldr	r1, [r3, #0]
 8013250:	693a      	ldr	r2, [r7, #16]
 8013252:	4613      	mov	r3, r2
 8013254:	009b      	lsls	r3, r3, #2
 8013256:	4413      	add	r3, r2
 8013258:	009b      	lsls	r3, r3, #2
 801325a:	440b      	add	r3, r1
 801325c:	685b      	ldr	r3, [r3, #4]
 801325e:	617b      	str	r3, [r7, #20]
      }
    }

    if (index == varid.index) {
 8013260:	89fb      	ldrh	r3, [r7, #14]
 8013262:	461a      	mov	r2, r3
 8013264:	693b      	ldr	r3, [r7, #16]
 8013266:	4293      	cmp	r3, r2
 8013268:	d10e      	bne.n	8013288 <paramGetGroupAndName+0x90>
      *group = currgroup;
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	697a      	ldr	r2, [r7, #20]
 801326e:	601a      	str	r2, [r3, #0]
      *name = params[index].name;
 8013270:	4b0e      	ldr	r3, [pc, #56]	; (80132ac <paramGetGroupAndName+0xb4>)
 8013272:	6819      	ldr	r1, [r3, #0]
 8013274:	693a      	ldr	r2, [r7, #16]
 8013276:	4613      	mov	r3, r2
 8013278:	009b      	lsls	r3, r3, #2
 801327a:	4413      	add	r3, r2
 801327c:	009b      	lsls	r3, r3, #2
 801327e:	440b      	add	r3, r1
 8013280:	685a      	ldr	r2, [r3, #4]
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	601a      	str	r2, [r3, #0]
      break;
 8013286:	e008      	b.n	801329a <paramGetGroupAndName+0xa2>
  for(int index = 0; index < paramsLen; index++) {
 8013288:	693b      	ldr	r3, [r7, #16]
 801328a:	3301      	adds	r3, #1
 801328c:	613b      	str	r3, [r7, #16]
 801328e:	4b08      	ldr	r3, [pc, #32]	; (80132b0 <paramGetGroupAndName+0xb8>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	693a      	ldr	r2, [r7, #16]
 8013294:	429a      	cmp	r2, r3
 8013296:	dbc0      	blt.n	801321a <paramGetGroupAndName+0x22>
    }
  }
}
 8013298:	bf00      	nop
 801329a:	bf00      	nop
 801329c:	371c      	adds	r7, #28
 801329e:	46bd      	mov	sp, r7
 80132a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a4:	4770      	bx	lr
 80132a6:	bf00      	nop
 80132a8:	0802c080 	.word	0x0802c080
 80132ac:	2000bc7c 	.word	0x2000bc7c
 80132b0:	2000bc80 	.word	0x2000bc80

080132b4 <paramSetByName>:

  paramNotifyChanged(varid.index);
}

void paramSetByName(CRTPPacket *p)
{
 80132b4:	b590      	push	{r4, r7, lr}
 80132b6:	b08b      	sub	sp, #44	; 0x2c
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	6078      	str	r0, [r7, #4]
  int i, nzero = 0;
 80132bc:	2300      	movs	r3, #0
 80132be:	623b      	str	r3, [r7, #32]
  void * valPtr;
  int error;

  // If the packet contains at least 2 zeros in the first 28 bytes
  // The packet decoding algorithm will not crash
  for (i = 0; i < CRTP_MAX_DATA_SIZE; i++) {
 80132c0:	2300      	movs	r3, #0
 80132c2:	627b      	str	r3, [r7, #36]	; 0x24
 80132c4:	e00c      	b.n	80132e0 <paramSetByName+0x2c>
    if (p->data[i] == '\0') nzero++;
 80132c6:	687a      	ldr	r2, [r7, #4]
 80132c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ca:	4413      	add	r3, r2
 80132cc:	3302      	adds	r3, #2
 80132ce:	781b      	ldrb	r3, [r3, #0]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d102      	bne.n	80132da <paramSetByName+0x26>
 80132d4:	6a3b      	ldr	r3, [r7, #32]
 80132d6:	3301      	adds	r3, #1
 80132d8:	623b      	str	r3, [r7, #32]
  for (i = 0; i < CRTP_MAX_DATA_SIZE; i++) {
 80132da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132dc:	3301      	adds	r3, #1
 80132de:	627b      	str	r3, [r7, #36]	; 0x24
 80132e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132e2:	2b1d      	cmp	r3, #29
 80132e4:	ddef      	ble.n	80132c6 <paramSetByName+0x12>
  }

  if (nzero < 2) return;
 80132e6:	6a3b      	ldr	r3, [r7, #32]
 80132e8:	2b01      	cmp	r3, #1
 80132ea:	dd53      	ble.n	8013394 <paramSetByName+0xe0>

  group = (char*)&p->data[1];
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	3303      	adds	r3, #3
 80132f0:	61fb      	str	r3, [r7, #28]
  name = (char*)&p->data[1 + strlen(group) + 1];
 80132f2:	69f8      	ldr	r0, [r7, #28]
 80132f4:	f7ec ffcc 	bl	8000290 <strlen>
 80132f8:	4603      	mov	r3, r0
 80132fa:	3302      	adds	r3, #2
 80132fc:	687a      	ldr	r2, [r7, #4]
 80132fe:	4413      	add	r3, r2
 8013300:	3302      	adds	r3, #2
 8013302:	61bb      	str	r3, [r7, #24]
  type = p->data[1 + strlen(group) + 1 + strlen(name) + 1];
 8013304:	69f8      	ldr	r0, [r7, #28]
 8013306:	f7ec ffc3 	bl	8000290 <strlen>
 801330a:	4604      	mov	r4, r0
 801330c:	69b8      	ldr	r0, [r7, #24]
 801330e:	f7ec ffbf 	bl	8000290 <strlen>
 8013312:	4603      	mov	r3, r0
 8013314:	4423      	add	r3, r4
 8013316:	3303      	adds	r3, #3
 8013318:	687a      	ldr	r2, [r7, #4]
 801331a:	4413      	add	r3, r2
 801331c:	789b      	ldrb	r3, [r3, #2]
 801331e:	75fb      	strb	r3, [r7, #23]
  valPtr = &p->data[1 + strlen(group) + 1 + strlen(name) + 2];
 8013320:	69f8      	ldr	r0, [r7, #28]
 8013322:	f7ec ffb5 	bl	8000290 <strlen>
 8013326:	4604      	mov	r4, r0
 8013328:	69b8      	ldr	r0, [r7, #24]
 801332a:	f7ec ffb1 	bl	8000290 <strlen>
 801332e:	4603      	mov	r3, r0
 8013330:	4423      	add	r3, r4
 8013332:	3304      	adds	r3, #4
 8013334:	687a      	ldr	r2, [r7, #4]
 8013336:	4413      	add	r3, r2
 8013338:	3302      	adds	r3, #2
 801333a:	613b      	str	r3, [r7, #16]

  error = paramWriteByNameProcess(group, name, type, valPtr);  /* calls callback */
 801333c:	7dfa      	ldrb	r2, [r7, #23]
 801333e:	693b      	ldr	r3, [r7, #16]
 8013340:	69b9      	ldr	r1, [r7, #24]
 8013342:	69f8      	ldr	r0, [r7, #28]
 8013344:	f7ff fd9a 	bl	8012e7c <paramWriteByNameProcess>
 8013348:	4603      	mov	r3, r0
 801334a:	60fb      	str	r3, [r7, #12]

  p->data[1 + strlen(group) + 1 + strlen(name) + 1] = error;
 801334c:	69f8      	ldr	r0, [r7, #28]
 801334e:	f7ec ff9f 	bl	8000290 <strlen>
 8013352:	4604      	mov	r4, r0
 8013354:	69b8      	ldr	r0, [r7, #24]
 8013356:	f7ec ff9b 	bl	8000290 <strlen>
 801335a:	4603      	mov	r3, r0
 801335c:	4423      	add	r3, r4
 801335e:	3303      	adds	r3, #3
 8013360:	68fa      	ldr	r2, [r7, #12]
 8013362:	b2d1      	uxtb	r1, r2
 8013364:	687a      	ldr	r2, [r7, #4]
 8013366:	4413      	add	r3, r2
 8013368:	460a      	mov	r2, r1
 801336a:	709a      	strb	r2, [r3, #2]
  p->size = 1 + strlen(group) + 1 + strlen(name) + 1 + 1;
 801336c:	69f8      	ldr	r0, [r7, #28]
 801336e:	f7ec ff8f 	bl	8000290 <strlen>
 8013372:	4603      	mov	r3, r0
 8013374:	b2dc      	uxtb	r4, r3
 8013376:	69b8      	ldr	r0, [r7, #24]
 8013378:	f7ec ff8a 	bl	8000290 <strlen>
 801337c:	4603      	mov	r3, r0
 801337e:	b2db      	uxtb	r3, r3
 8013380:	4423      	add	r3, r4
 8013382:	b2db      	uxtb	r3, r3
 8013384:	3304      	adds	r3, #4
 8013386:	b2da      	uxtb	r2, r3
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 801338c:	6878      	ldr	r0, [r7, #4]
 801338e:	f7ee f889 	bl	80014a4 <crtpSendPacketBlock>
 8013392:	e000      	b.n	8013396 <paramSetByName+0xe2>
  if (nzero < 2) return;
 8013394:	bf00      	nop

}
 8013396:	372c      	adds	r7, #44	; 0x2c
 8013398:	46bd      	mov	sp, r7
 801339a:	bd90      	pop	{r4, r7, pc}

0801339c <paramGetExtendedType>:

#define KEY_LEN 30  // FIXME

void paramGetExtendedType(CRTPPacket *p)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b084      	sub	sp, #16
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
  int index;
  uint16_t id;

  memcpy(&id, &p->data[1], 2);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	3303      	adds	r3, #3
 80133a8:	881b      	ldrh	r3, [r3, #0]
 80133aa:	b29b      	uxth	r3, r3
 80133ac:	817b      	strh	r3, [r7, #10]
  index = variableGetIndex(id);
 80133ae:	897b      	ldrh	r3, [r7, #10]
 80133b0:	4618      	mov	r0, r3
 80133b2:	f7ff fe23 	bl	8012ffc <variableGetIndex>
 80133b6:	60f8      	str	r0, [r7, #12]

  if (index < 0 || !(params[index].type & PARAM_EXTENDED)) {
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	db0c      	blt.n	80133d8 <paramGetExtendedType+0x3c>
 80133be:	4b15      	ldr	r3, [pc, #84]	; (8013414 <paramGetExtendedType+0x78>)
 80133c0:	6819      	ldr	r1, [r3, #0]
 80133c2:	68fa      	ldr	r2, [r7, #12]
 80133c4:	4613      	mov	r3, r2
 80133c6:	009b      	lsls	r3, r3, #2
 80133c8:	4413      	add	r3, r2
 80133ca:	009b      	lsls	r3, r3, #2
 80133cc:	440b      	add	r3, r1
 80133ce:	781b      	ldrb	r3, [r3, #0]
 80133d0:	f003 0310 	and.w	r3, r3, #16
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d109      	bne.n	80133ec <paramGetExtendedType+0x50>
    p->data[3] = ENOENT;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	2202      	movs	r2, #2
 80133dc:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	2204      	movs	r2, #4
 80133e2:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 80133e4:	6878      	ldr	r0, [r7, #4]
 80133e6:	f7ee f85d 	bl	80014a4 <crtpSendPacketBlock>
 80133ea:	e010      	b.n	801340e <paramGetExtendedType+0x72>
    return;
  }

  p->data[3] = params[index].extended_type;
 80133ec:	4b09      	ldr	r3, [pc, #36]	; (8013414 <paramGetExtendedType+0x78>)
 80133ee:	6819      	ldr	r1, [r3, #0]
 80133f0:	68fa      	ldr	r2, [r7, #12]
 80133f2:	4613      	mov	r3, r2
 80133f4:	009b      	lsls	r3, r3, #2
 80133f6:	4413      	add	r3, r2
 80133f8:	009b      	lsls	r3, r3, #2
 80133fa:	440b      	add	r3, r1
 80133fc:	785a      	ldrb	r2, [r3, #1]
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	715a      	strb	r2, [r3, #5]
  p->size = 4;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	2204      	movs	r2, #4
 8013406:	701a      	strb	r2, [r3, #0]

  crtpSendPacketBlock(p);
 8013408:	6878      	ldr	r0, [r7, #4]
 801340a:	f7ee f84b 	bl	80014a4 <crtpSendPacketBlock>
}
 801340e:	3710      	adds	r7, #16
 8013410:	46bd      	mov	sp, r7
 8013412:	bd80      	pop	{r7, pc}
 8013414:	2000bc7c 	.word	0x2000bc7c

08013418 <generateStorageKey>:

static void generateStorageKey(const uint16_t index, char key[KEY_LEN])
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b086      	sub	sp, #24
 801341c:	af00      	add	r7, sp, #0
 801341e:	4603      	mov	r3, r0
 8013420:	6039      	str	r1, [r7, #0]
 8013422:	80fb      	strh	r3, [r7, #6]
  char *group;
  char *name;
  paramVarId_t paramId;

  paramId.index = (uint16_t)index;
 8013424:	88fb      	ldrh	r3, [r7, #6]
 8013426:	81fb      	strh	r3, [r7, #14]
  paramGetGroupAndName(paramId, &group, &name);
 8013428:	f107 0210 	add.w	r2, r7, #16
 801342c:	f107 0314 	add.w	r3, r7, #20
 8013430:	4619      	mov	r1, r3
 8013432:	68f8      	ldr	r0, [r7, #12]
 8013434:	f7ff fee0 	bl	80131f8 <paramGetGroupAndName>

  // Assemble key string, e.g. "prm/pid_rate.kp"
  strcpy(key, PERSISTENT_PREFIX_STRING);
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	4a0f      	ldr	r2, [pc, #60]	; (8013478 <generateStorageKey+0x60>)
 801343c:	6810      	ldr	r0, [r2, #0]
 801343e:	6018      	str	r0, [r3, #0]
 8013440:	7912      	ldrb	r2, [r2, #4]
 8013442:	711a      	strb	r2, [r3, #4]
  strcat(key, group);
 8013444:	697b      	ldr	r3, [r7, #20]
 8013446:	4619      	mov	r1, r3
 8013448:	6838      	ldr	r0, [r7, #0]
 801344a:	f010 fa69 	bl	8023920 <strcat>
  strcat(key, ".");
 801344e:	6838      	ldr	r0, [r7, #0]
 8013450:	f7ec ff1e 	bl	8000290 <strlen>
 8013454:	4603      	mov	r3, r0
 8013456:	461a      	mov	r2, r3
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	4413      	add	r3, r2
 801345c:	4907      	ldr	r1, [pc, #28]	; (801347c <generateStorageKey+0x64>)
 801345e:	461a      	mov	r2, r3
 8013460:	460b      	mov	r3, r1
 8013462:	881b      	ldrh	r3, [r3, #0]
 8013464:	8013      	strh	r3, [r2, #0]
  strcat(key, name);
 8013466:	693b      	ldr	r3, [r7, #16]
 8013468:	4619      	mov	r1, r3
 801346a:	6838      	ldr	r0, [r7, #0]
 801346c:	f010 fa58 	bl	8023920 <strcat>
}
 8013470:	bf00      	nop
 8013472:	3718      	adds	r7, #24
 8013474:	46bd      	mov	sp, r7
 8013476:	bd80      	pop	{r7, pc}
 8013478:	0802c1f0 	.word	0x0802c1f0
 801347c:	0802c1f8 	.word	0x0802c1f8

08013480 <paramPersistentStore>:

void paramPersistentStore(CRTPPacket *p)
{
 8013480:	b590      	push	{r4, r7, lr}
 8013482:	b08d      	sub	sp, #52	; 0x34
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
  int index;
  uint16_t id;
  bool result = true;
 8013488:	2301      	movs	r3, #1
 801348a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  memcpy(&id, &p->data[1], 2);
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	3303      	adds	r3, #3
 8013492:	881b      	ldrh	r3, [r3, #0]
 8013494:	b29b      	uxth	r3, r3
 8013496:	84fb      	strh	r3, [r7, #38]	; 0x26
  index = variableGetIndex(id);
 8013498:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801349a:	4618      	mov	r0, r3
 801349c:	f7ff fdae 	bl	8012ffc <variableGetIndex>
 80134a0:	62b8      	str	r0, [r7, #40]	; 0x28

  if (index < 0) {
 80134a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	da09      	bge.n	80134bc <paramPersistentStore+0x3c>
    p->data[3] = ENOENT;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2202      	movs	r2, #2
 80134ac:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	2204      	movs	r2, #4
 80134b2:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 80134b4:	6878      	ldr	r0, [r7, #4]
 80134b6:	f7ed fff5 	bl	80014a4 <crtpSendPacketBlock>
 80134ba:	e03b      	b.n	8013534 <paramPersistentStore+0xb4>
    return;
  }

  char key[KEY_LEN] = {0};
 80134bc:	2300      	movs	r3, #0
 80134be:	60bb      	str	r3, [r7, #8]
 80134c0:	f107 030c 	add.w	r3, r7, #12
 80134c4:	2200      	movs	r2, #0
 80134c6:	601a      	str	r2, [r3, #0]
 80134c8:	605a      	str	r2, [r3, #4]
 80134ca:	609a      	str	r2, [r3, #8]
 80134cc:	60da      	str	r2, [r3, #12]
 80134ce:	611a      	str	r2, [r3, #16]
 80134d0:	615a      	str	r2, [r3, #20]
 80134d2:	831a      	strh	r2, [r3, #24]
  generateStorageKey(index, key);
 80134d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134d6:	b29b      	uxth	r3, r3
 80134d8:	f107 0208 	add.w	r2, r7, #8
 80134dc:	4611      	mov	r1, r2
 80134de:	4618      	mov	r0, r3
 80134e0:	f7ff ff9a 	bl	8013418 <generateStorageKey>

  result = storageStore(key, params[index].address, paramGetLen(index));
 80134e4:	4b15      	ldr	r3, [pc, #84]	; (801353c <paramPersistentStore+0xbc>)
 80134e6:	6819      	ldr	r1, [r3, #0]
 80134e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134ea:	4613      	mov	r3, r2
 80134ec:	009b      	lsls	r3, r3, #2
 80134ee:	4413      	add	r3, r2
 80134f0:	009b      	lsls	r3, r3, #2
 80134f2:	440b      	add	r3, r1
 80134f4:	689c      	ldr	r4, [r3, #8]
 80134f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134f8:	b29b      	uxth	r3, r3
 80134fa:	4618      	mov	r0, r3
 80134fc:	f7ff fa10 	bl	8012920 <paramGetLen>
 8013500:	4603      	mov	r3, r0
 8013502:	461a      	mov	r2, r3
 8013504:	f107 0308 	add.w	r3, r7, #8
 8013508:	4621      	mov	r1, r4
 801350a:	4618      	mov	r0, r3
 801350c:	f7f2 f910 	bl	8005730 <storageStore>
 8013510:	4603      	mov	r3, r0
 8013512:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  p->data[3] = result ? 0: ENOENT;
 8013516:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801351a:	2b00      	cmp	r3, #0
 801351c:	d001      	beq.n	8013522 <paramPersistentStore+0xa2>
 801351e:	2200      	movs	r2, #0
 8013520:	e000      	b.n	8013524 <paramPersistentStore+0xa4>
 8013522:	2202      	movs	r2, #2
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	715a      	strb	r2, [r3, #5]
  p->size = 4;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	2204      	movs	r2, #4
 801352c:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 801352e:	6878      	ldr	r0, [r7, #4]
 8013530:	f7ed ffb8 	bl	80014a4 <crtpSendPacketBlock>
}
 8013534:	3734      	adds	r7, #52	; 0x34
 8013536:	46bd      	mov	sp, r7
 8013538:	bd90      	pop	{r4, r7, pc}
 801353a:	bf00      	nop
 801353c:	2000bc7c 	.word	0x2000bc7c

08013540 <paramGetDefaultValue>:

void paramGetDefaultValue(CRTPPacket *p)
{
 8013540:	b590      	push	{r4, r7, lr}
 8013542:	b085      	sub	sp, #20
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
  uint16_t id;

  memcpy(&id, &p->data[1], sizeof(id));
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	3303      	adds	r3, #3
 801354c:	881b      	ldrh	r3, [r3, #0]
 801354e:	b29b      	uxth	r3, r3
 8013550:	813b      	strh	r3, [r7, #8]
  int index = variableGetIndex(id);
 8013552:	893b      	ldrh	r3, [r7, #8]
 8013554:	4618      	mov	r0, r3
 8013556:	f7ff fd51 	bl	8012ffc <variableGetIndex>
 801355a:	60f8      	str	r0, [r7, #12]

  const bool doesParamExist = (index >= 0);
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	43db      	mvns	r3, r3
 8013560:	0fdb      	lsrs	r3, r3, #31
 8013562:	72fb      	strb	r3, [r7, #11]
  // Read-only parameters have no default value
  if (!doesParamExist || params[index].type & PARAM_RONLY) {
 8013564:	7afb      	ldrb	r3, [r7, #11]
 8013566:	f083 0301 	eor.w	r3, r3, #1
 801356a:	b2db      	uxtb	r3, r3
 801356c:	2b00      	cmp	r3, #0
 801356e:	d10c      	bne.n	801358a <paramGetDefaultValue+0x4a>
 8013570:	4b28      	ldr	r3, [pc, #160]	; (8013614 <paramGetDefaultValue+0xd4>)
 8013572:	6819      	ldr	r1, [r3, #0]
 8013574:	68fa      	ldr	r2, [r7, #12]
 8013576:	4613      	mov	r3, r2
 8013578:	009b      	lsls	r3, r3, #2
 801357a:	4413      	add	r3, r2
 801357c:	009b      	lsls	r3, r3, #2
 801357e:	440b      	add	r3, r1
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013586:	2b00      	cmp	r3, #0
 8013588:	d009      	beq.n	801359e <paramGetDefaultValue+0x5e>
    p->data[3] = ENOENT;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	2202      	movs	r2, #2
 801358e:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2204      	movs	r2, #4
 8013594:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 8013596:	6878      	ldr	r0, [r7, #4]
 8013598:	f7ed ff84 	bl	80014a4 <crtpSendPacketBlock>
 801359c:	e037      	b.n	801360e <paramGetDefaultValue+0xce>
    return;
  }

  // Add default value
  uint8_t paramLen = paramGetLen(index);
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	b29b      	uxth	r3, r3
 80135a2:	4618      	mov	r0, r3
 80135a4:	f7ff f9bc 	bl	8012920 <paramGetLen>
 80135a8:	4603      	mov	r3, r0
 80135aa:	72bb      	strb	r3, [r7, #10]
  if (params[index].getter) {
 80135ac:	4b19      	ldr	r3, [pc, #100]	; (8013614 <paramGetDefaultValue+0xd4>)
 80135ae:	6819      	ldr	r1, [r3, #0]
 80135b0:	68fa      	ldr	r2, [r7, #12]
 80135b2:	4613      	mov	r3, r2
 80135b4:	009b      	lsls	r3, r3, #2
 80135b6:	4413      	add	r3, r2
 80135b8:	009b      	lsls	r3, r3, #2
 80135ba:	440b      	add	r3, r1
 80135bc:	691b      	ldr	r3, [r3, #16]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d012      	beq.n	80135e8 <paramGetDefaultValue+0xa8>
    memcpy(&p->data[3], params[index].getter(), paramLen);
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	1d5c      	adds	r4, r3, #5
 80135c6:	4b13      	ldr	r3, [pc, #76]	; (8013614 <paramGetDefaultValue+0xd4>)
 80135c8:	6819      	ldr	r1, [r3, #0]
 80135ca:	68fa      	ldr	r2, [r7, #12]
 80135cc:	4613      	mov	r3, r2
 80135ce:	009b      	lsls	r3, r3, #2
 80135d0:	4413      	add	r3, r2
 80135d2:	009b      	lsls	r3, r3, #2
 80135d4:	440b      	add	r3, r1
 80135d6:	691b      	ldr	r3, [r3, #16]
 80135d8:	4798      	blx	r3
 80135da:	4601      	mov	r1, r0
 80135dc:	7abb      	ldrb	r3, [r7, #10]
 80135de:	461a      	mov	r2, r3
 80135e0:	4620      	mov	r0, r4
 80135e2:	f010 fa9a 	bl	8023b1a <memcpy>
 80135e6:	e00a      	b.n	80135fe <paramGetDefaultValue+0xbe>
  } else {
    memcpy(&p->data[3], paramGetDefault(index), paramLen);
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	1d5c      	adds	r4, r3, #5
 80135ec:	68f8      	ldr	r0, [r7, #12]
 80135ee:	f7ff f8d1 	bl	8012794 <paramGetDefault>
 80135f2:	4601      	mov	r1, r0
 80135f4:	7abb      	ldrb	r3, [r7, #10]
 80135f6:	461a      	mov	r2, r3
 80135f8:	4620      	mov	r0, r4
 80135fa:	f010 fa8e 	bl	8023b1a <memcpy>
  }
  p->size = 3 + paramLen;
 80135fe:	7abb      	ldrb	r3, [r7, #10]
 8013600:	3303      	adds	r3, #3
 8013602:	b2da      	uxtb	r2, r3
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f7ed ff4b 	bl	80014a4 <crtpSendPacketBlock>
}
 801360e:	3714      	adds	r7, #20
 8013610:	46bd      	mov	sp, r7
 8013612:	bd90      	pop	{r4, r7, pc}
 8013614:	2000bc7c 	.word	0x2000bc7c

08013618 <paramPersistentGetState>:

void paramPersistentGetState(CRTPPacket *p)
{
 8013618:	b590      	push	{r4, r7, lr}
 801361a:	b08f      	sub	sp, #60	; 0x3c
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
  uint16_t id;

  memcpy(&id, &p->data[1], 2);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	3303      	adds	r3, #3
 8013624:	881b      	ldrh	r3, [r3, #0]
 8013626:	b29b      	uxth	r3, r3
 8013628:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int index = variableGetIndex(id);
 801362a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801362c:	4618      	mov	r0, r3
 801362e:	f7ff fce5 	bl	8012ffc <variableGetIndex>
 8013632:	6378      	str	r0, [r7, #52]	; 0x34

  const bool doesParamExist = (index >= 0);
 8013634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013636:	43db      	mvns	r3, r3
 8013638:	0fdb      	lsrs	r3, r3, #31
 801363a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (! doesParamExist) {
 801363e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013642:	f083 0301 	eor.w	r3, r3, #1
 8013646:	b2db      	uxtb	r3, r3
 8013648:	2b00      	cmp	r3, #0
 801364a:	d009      	beq.n	8013660 <paramPersistentGetState+0x48>
    p->data[3] = ENOENT;
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2202      	movs	r2, #2
 8013650:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	2204      	movs	r2, #4
 8013656:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 8013658:	6878      	ldr	r0, [r7, #4]
 801365a:	f7ed ff23 	bl	80014a4 <crtpSendPacketBlock>
 801365e:	e08c      	b.n	801377a <paramPersistentGetState+0x162>
    return;
  }

  char key[KEY_LEN] = {0};
 8013660:	2300      	movs	r3, #0
 8013662:	613b      	str	r3, [r7, #16]
 8013664:	f107 0314 	add.w	r3, r7, #20
 8013668:	2200      	movs	r2, #0
 801366a:	601a      	str	r2, [r3, #0]
 801366c:	605a      	str	r2, [r3, #4]
 801366e:	609a      	str	r2, [r3, #8]
 8013670:	60da      	str	r2, [r3, #12]
 8013672:	611a      	str	r2, [r3, #16]
 8013674:	615a      	str	r2, [r3, #20]
 8013676:	831a      	strh	r2, [r3, #24]
  generateStorageKey(index, key);
 8013678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801367a:	b29b      	uxth	r3, r3
 801367c:	f107 0210 	add.w	r2, r7, #16
 8013680:	4611      	mov	r1, r2
 8013682:	4618      	mov	r0, r3
 8013684:	f7ff fec8 	bl	8013418 <generateStorageKey>

  uint8_t paramLen = paramGetLen(index);
 8013688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801368a:	b29b      	uxth	r3, r3
 801368c:	4618      	mov	r0, r3
 801368e:	f7ff f947 	bl	8012920 <paramGetLen>
 8013692:	4603      	mov	r3, r0
 8013694:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

  // First part of data use 4 bytes
  p->size = 4;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	2204      	movs	r2, #4
 801369c:	701a      	strb	r2, [r3, #0]

  // Add default value
  if (params[index].getter) {
 801369e:	4b38      	ldr	r3, [pc, #224]	; (8013780 <paramPersistentGetState+0x168>)
 80136a0:	6819      	ldr	r1, [r3, #0]
 80136a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80136a4:	4613      	mov	r3, r2
 80136a6:	009b      	lsls	r3, r3, #2
 80136a8:	4413      	add	r3, r2
 80136aa:	009b      	lsls	r3, r3, #2
 80136ac:	440b      	add	r3, r1
 80136ae:	691b      	ldr	r3, [r3, #16]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d017      	beq.n	80136e4 <paramPersistentGetState+0xcc>
    memcpy(&p->data[p->size], params[index].getter(), paramLen);
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	781b      	ldrb	r3, [r3, #0]
 80136b8:	461a      	mov	r2, r3
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	4413      	add	r3, r2
 80136be:	1c9c      	adds	r4, r3, #2
 80136c0:	4b2f      	ldr	r3, [pc, #188]	; (8013780 <paramPersistentGetState+0x168>)
 80136c2:	6819      	ldr	r1, [r3, #0]
 80136c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80136c6:	4613      	mov	r3, r2
 80136c8:	009b      	lsls	r3, r3, #2
 80136ca:	4413      	add	r3, r2
 80136cc:	009b      	lsls	r3, r3, #2
 80136ce:	440b      	add	r3, r1
 80136d0:	691b      	ldr	r3, [r3, #16]
 80136d2:	4798      	blx	r3
 80136d4:	4601      	mov	r1, r0
 80136d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80136da:	461a      	mov	r2, r3
 80136dc:	4620      	mov	r0, r4
 80136de:	f010 fa1c 	bl	8023b1a <memcpy>
 80136e2:	e00f      	b.n	8013704 <paramPersistentGetState+0xec>
  } else {
    memcpy(&p->data[p->size], paramGetDefault(index), paramLen);
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	781b      	ldrb	r3, [r3, #0]
 80136e8:	461a      	mov	r2, r3
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	4413      	add	r3, r2
 80136ee:	1c9c      	adds	r4, r3, #2
 80136f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80136f2:	f7ff f84f 	bl	8012794 <paramGetDefault>
 80136f6:	4601      	mov	r1, r0
 80136f8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80136fc:	461a      	mov	r2, r3
 80136fe:	4620      	mov	r0, r4
 8013700:	f010 fa0b 	bl	8023b1a <memcpy>
  }
  p->size += paramLen;
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	781a      	ldrb	r2, [r3, #0]
 8013708:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801370c:	4413      	add	r3, r2
 801370e:	b2da      	uxtb	r2, r3
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	701a      	strb	r2, [r3, #0]

  // Add stored value if avialable
  uint8_t value[8];
  const bool isValueStored = (storageFetch(key, &value, paramLen) > 0);
 8013714:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8013718:	f107 0108 	add.w	r1, r7, #8
 801371c:	f107 0310 	add.w	r3, r7, #16
 8013720:	4618      	mov	r0, r3
 8013722:	f7f2 f855 	bl	80057d0 <storageFetch>
 8013726:	4603      	mov	r3, r0
 8013728:	2b00      	cmp	r3, #0
 801372a:	bf14      	ite	ne
 801372c:	2301      	movne	r3, #1
 801372e:	2300      	moveq	r3, #0
 8013730:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  if (isValueStored) {
 8013734:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8013738:	2b00      	cmp	r3, #0
 801373a:	d018      	beq.n	801376e <paramPersistentGetState+0x156>
    p->data[3] = PARAM_PERSISTENT_STORED;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2201      	movs	r2, #1
 8013740:	715a      	strb	r2, [r3, #5]
    memcpy(&p->data[p->size], &value, paramLen);
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	781b      	ldrb	r3, [r3, #0]
 8013746:	461a      	mov	r2, r3
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	4413      	add	r3, r2
 801374c:	3302      	adds	r3, #2
 801374e:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8013752:	f107 0108 	add.w	r1, r7, #8
 8013756:	4618      	mov	r0, r3
 8013758:	f010 f9df 	bl	8023b1a <memcpy>
    p->size += paramLen;
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	781a      	ldrb	r2, [r3, #0]
 8013760:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013764:	4413      	add	r3, r2
 8013766:	b2da      	uxtb	r2, r3
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	701a      	strb	r2, [r3, #0]
 801376c:	e002      	b.n	8013774 <paramPersistentGetState+0x15c>
  } else {
    p->data[3] = PARAM_PERSISTENT_NOT_STORED;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	2200      	movs	r2, #0
 8013772:	715a      	strb	r2, [r3, #5]
  }

  crtpSendPacketBlock(p);
 8013774:	6878      	ldr	r0, [r7, #4]
 8013776:	f7ed fe95 	bl	80014a4 <crtpSendPacketBlock>
}
 801377a:	373c      	adds	r7, #60	; 0x3c
 801377c:	46bd      	mov	sp, r7
 801377e:	bd90      	pop	{r4, r7, pc}
 8013780:	2000bc7c 	.word	0x2000bc7c

08013784 <paramPersistentClear>:

void paramPersistentClear(CRTPPacket *p)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b08c      	sub	sp, #48	; 0x30
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
  int index;
  uint16_t id;
  bool result = true;
 801378c:	2301      	movs	r3, #1
 801378e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  memcpy(&id, &p->data[1], 2);
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	3303      	adds	r3, #3
 8013796:	881b      	ldrh	r3, [r3, #0]
 8013798:	b29b      	uxth	r3, r3
 801379a:	84fb      	strh	r3, [r7, #38]	; 0x26
  index = variableGetIndex(id);
 801379c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801379e:	4618      	mov	r0, r3
 80137a0:	f7ff fc2c 	bl	8012ffc <variableGetIndex>
 80137a4:	62b8      	str	r0, [r7, #40]	; 0x28

  if (index < 0) {
 80137a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	da09      	bge.n	80137c0 <paramPersistentClear+0x3c>
    p->data[3] = ENOENT;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	2202      	movs	r2, #2
 80137b0:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	2204      	movs	r2, #4
 80137b6:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f7ed fe73 	bl	80014a4 <crtpSendPacketBlock>
 80137be:	e02a      	b.n	8013816 <paramPersistentClear+0x92>
    return;
  }

  // Assemble key string, e.g. "prm/pid_rate.kp"
  char key[KEY_LEN] = {0};
 80137c0:	2300      	movs	r3, #0
 80137c2:	60bb      	str	r3, [r7, #8]
 80137c4:	f107 030c 	add.w	r3, r7, #12
 80137c8:	2200      	movs	r2, #0
 80137ca:	601a      	str	r2, [r3, #0]
 80137cc:	605a      	str	r2, [r3, #4]
 80137ce:	609a      	str	r2, [r3, #8]
 80137d0:	60da      	str	r2, [r3, #12]
 80137d2:	611a      	str	r2, [r3, #16]
 80137d4:	615a      	str	r2, [r3, #20]
 80137d6:	831a      	strh	r2, [r3, #24]
  generateStorageKey(index, key);
 80137d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137da:	b29b      	uxth	r3, r3
 80137dc:	f107 0208 	add.w	r2, r7, #8
 80137e0:	4611      	mov	r1, r2
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7ff fe18 	bl	8013418 <generateStorageKey>

  result = storageDelete(key);
 80137e8:	f107 0308 	add.w	r3, r7, #8
 80137ec:	4618      	mov	r0, r3
 80137ee:	f7f2 f817 	bl	8005820 <storageDelete>
 80137f2:	4603      	mov	r3, r0
 80137f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  p->data[3] = result ? 0: ENOENT;
 80137f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d001      	beq.n	8013804 <paramPersistentClear+0x80>
 8013800:	2200      	movs	r2, #0
 8013802:	e000      	b.n	8013806 <paramPersistentClear+0x82>
 8013804:	2202      	movs	r2, #2
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	715a      	strb	r2, [r3, #5]
  p->size = 4;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	2204      	movs	r2, #4
 801380e:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f7ed fe47 	bl	80014a4 <crtpSendPacketBlock>
}
 8013816:	3730      	adds	r7, #48	; 0x30
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}

0801381c <persistentParamFromStorage>:

static bool persistentParamFromStorage(const char *key, void *buffer, size_t length)
{
 801381c:	b580      	push	{r7, lr}
 801381e:	b086      	sub	sp, #24
 8013820:	af00      	add	r7, sp, #0
 8013822:	60f8      	str	r0, [r7, #12]
 8013824:	60b9      	str	r1, [r7, #8]
 8013826:	607a      	str	r2, [r7, #4]
  //
  // The key is of format "prm/group.name", we need group and name.
  //
  char *completeName = (char *) key + strlen(PERSISTENT_PREFIX_STRING);
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	3304      	adds	r3, #4
 801382c:	617b      	str	r3, [r7, #20]
  paramVarId_t varId = paramGetVarIdFromComplete(completeName);
 801382e:	6978      	ldr	r0, [r7, #20]
 8013830:	f7ff fc1e 	bl	8013070 <paramGetVarIdFromComplete>
 8013834:	4603      	mov	r3, r0
 8013836:	613b      	str	r3, [r7, #16]

  if (PARAM_VARID_IS_VALID(varId)) {
 8013838:	8a3b      	ldrh	r3, [r7, #16]
 801383a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801383e:	4293      	cmp	r3, r2
 8013840:	d004      	beq.n	801384c <persistentParamFromStorage+0x30>
    paramSet(varId.index, buffer);
 8013842:	8a7b      	ldrh	r3, [r7, #18]
 8013844:	68b9      	ldr	r1, [r7, #8]
 8013846:	4618      	mov	r0, r3
 8013848:	f7fe ffe6 	bl	8012818 <paramSet>
  }

  return true;
 801384c:	2301      	movs	r3, #1
}
 801384e:	4618      	mov	r0, r3
 8013850:	3718      	adds	r7, #24
 8013852:	46bd      	mov	sp, r7
 8013854:	bd80      	pop	{r7, pc}
	...

08013858 <paramLogicStorageInit>:

void paramLogicStorageInit()
{
 8013858:	b580      	push	{r7, lr}
 801385a:	af00      	add	r7, sp, #0
  storageForeach(PERSISTENT_PREFIX_STRING, persistentParamFromStorage);
 801385c:	4902      	ldr	r1, [pc, #8]	; (8013868 <paramLogicStorageInit+0x10>)
 801385e:	4803      	ldr	r0, [pc, #12]	; (801386c <paramLogicStorageInit+0x14>)
 8013860:	f7f1 ff8e 	bl	8005780 <storageForeach>
}
 8013864:	bf00      	nop
 8013866:	bd80      	pop	{r7, pc}
 8013868:	0801381d 	.word	0x0801381d
 801386c:	0802c1f0 	.word	0x0802c1f0

08013870 <paramInit>:

STATIC_MEM_TASK_ALLOC(paramTask, PARAM_TASK_STACKSIZE);


void paramInit(void)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b084      	sub	sp, #16
 8013874:	af04      	add	r7, sp, #16
  if(isInit) {
 8013876:	4b0e      	ldr	r3, [pc, #56]	; (80138b0 <paramInit+0x40>)
 8013878:	781b      	ldrb	r3, [r3, #0]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d115      	bne.n	80138aa <paramInit+0x3a>
    return;
  }

  paramLogicInit();
 801387e:	f7ff f885 	bl	801298c <paramLogicInit>
  paramLogicStorageInit();
 8013882:	f7ff ffe9 	bl	8013858 <paramLogicStorageInit>

  //Start the param task
  STATIC_MEM_TASK_CREATE(paramTask, paramTask, PARAM_TASK_NAME, NULL, PARAM_TASK_PRI);
 8013886:	f44f 7380 	mov.w	r3, #256	; 0x100
 801388a:	461a      	mov	r2, r3
 801388c:	4b09      	ldr	r3, [pc, #36]	; (80138b4 <paramInit+0x44>)
 801388e:	9302      	str	r3, [sp, #8]
 8013890:	4b09      	ldr	r3, [pc, #36]	; (80138b8 <paramInit+0x48>)
 8013892:	9301      	str	r3, [sp, #4]
 8013894:	2301      	movs	r3, #1
 8013896:	9300      	str	r3, [sp, #0]
 8013898:	2300      	movs	r3, #0
 801389a:	4908      	ldr	r1, [pc, #32]	; (80138bc <paramInit+0x4c>)
 801389c:	4808      	ldr	r0, [pc, #32]	; (80138c0 <paramInit+0x50>)
 801389e:	f00b fe69 	bl	801f574 <xTaskCreateStatic>

  isInit = true;
 80138a2:	4b03      	ldr	r3, [pc, #12]	; (80138b0 <paramInit+0x40>)
 80138a4:	2201      	movs	r2, #1
 80138a6:	701a      	strb	r2, [r3, #0]
 80138a8:	e000      	b.n	80138ac <paramInit+0x3c>
    return;
 80138aa:	bf00      	nop
}
 80138ac:	46bd      	mov	sp, r7
 80138ae:	bd80      	pop	{r7, pc}
 80138b0:	2000bc8a 	.word	0x2000bc8a
 80138b4:	20006030 	.word	0x20006030
 80138b8:	2000bcac 	.word	0x2000bcac
 80138bc:	0802c1fc 	.word	0x0802c1fc
 80138c0:	080138c5 	.word	0x080138c5

080138c4 <paramTask>:
{
  return isInit;
}

void paramTask(void * prm)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b082      	sub	sp, #8
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
	crtpInitTaskQueue(CRTP_PORT_PARAM);
 80138cc:	2002      	movs	r0, #2
 80138ce:	f7ed fcb9 	bl	8001244 <crtpInitTaskQueue>

	while(1) {
		crtpReceivePacketBlock(CRTP_PORT_PARAM, &p);
 80138d2:	492f      	ldr	r1, [pc, #188]	; (8013990 <paramTask+0xcc>)
 80138d4:	2002      	movs	r0, #2
 80138d6:	f7ed fce5 	bl	80012a4 <crtpReceivePacketBlock>

		if (p.channel==TOC_CH)
 80138da:	4b2d      	ldr	r3, [pc, #180]	; (8013990 <paramTask+0xcc>)
 80138dc:	785b      	ldrb	r3, [r3, #1]
 80138de:	f003 0303 	and.w	r3, r3, #3
 80138e2:	b2db      	uxtb	r3, r3
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d106      	bne.n	80138f6 <paramTask+0x32>
		  paramTOCProcess(&p, p.data[0]);
 80138e8:	4b29      	ldr	r3, [pc, #164]	; (8013990 <paramTask+0xcc>)
 80138ea:	789b      	ldrb	r3, [r3, #2]
 80138ec:	4619      	mov	r1, r3
 80138ee:	4828      	ldr	r0, [pc, #160]	; (8013990 <paramTask+0xcc>)
 80138f0:	f7ff f932 	bl	8012b58 <paramTOCProcess>
 80138f4:	e7ed      	b.n	80138d2 <paramTask+0xe>
	  else if (p.channel==READ_CH)
 80138f6:	4b26      	ldr	r3, [pc, #152]	; (8013990 <paramTask+0xcc>)
 80138f8:	785b      	ldrb	r3, [r3, #1]
 80138fa:	f003 0303 	and.w	r3, r3, #3
 80138fe:	b2db      	uxtb	r3, r3
 8013900:	2b01      	cmp	r3, #1
 8013902:	d103      	bne.n	801390c <paramTask+0x48>
		  paramReadProcess(&p);
 8013904:	4822      	ldr	r0, [pc, #136]	; (8013990 <paramTask+0xcc>)
 8013906:	f7ff fb47 	bl	8012f98 <paramReadProcess>
 801390a:	e7e2      	b.n	80138d2 <paramTask+0xe>
		else if (p.channel==WRITE_CH)
 801390c:	4b20      	ldr	r3, [pc, #128]	; (8013990 <paramTask+0xcc>)
 801390e:	785b      	ldrb	r3, [r3, #1]
 8013910:	f003 0303 	and.w	r3, r3, #3
 8013914:	b2db      	uxtb	r3, r3
 8013916:	2b02      	cmp	r3, #2
 8013918:	d103      	bne.n	8013922 <paramTask+0x5e>
		  paramWriteProcess(&p);
 801391a:	481d      	ldr	r0, [pc, #116]	; (8013990 <paramTask+0xcc>)
 801391c:	f7ff fa50 	bl	8012dc0 <paramWriteProcess>
 8013920:	e7d7      	b.n	80138d2 <paramTask+0xe>
    else if (p.channel==MISC_CH) {
 8013922:	4b1b      	ldr	r3, [pc, #108]	; (8013990 <paramTask+0xcc>)
 8013924:	785b      	ldrb	r3, [r3, #1]
 8013926:	f003 0303 	and.w	r3, r3, #3
 801392a:	b2db      	uxtb	r3, r3
 801392c:	2b03      	cmp	r3, #3
 801392e:	d1d0      	bne.n	80138d2 <paramTask+0xe>
      switch (p.data[0]) {
 8013930:	4b17      	ldr	r3, [pc, #92]	; (8013990 <paramTask+0xcc>)
 8013932:	789b      	ldrb	r3, [r3, #2]
 8013934:	2b06      	cmp	r3, #6
 8013936:	d829      	bhi.n	801398c <paramTask+0xc8>
 8013938:	a201      	add	r2, pc, #4	; (adr r2, 8013940 <paramTask+0x7c>)
 801393a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801393e:	bf00      	nop
 8013940:	0801395d 	.word	0x0801395d
 8013944:	0801398d 	.word	0x0801398d
 8013948:	08013965 	.word	0x08013965
 801394c:	0801396d 	.word	0x0801396d
 8013950:	08013975 	.word	0x08013975
 8013954:	0801397d 	.word	0x0801397d
 8013958:	08013985 	.word	0x08013985
        case MISC_SETBYNAME:
          paramSetByName(&p);
 801395c:	480c      	ldr	r0, [pc, #48]	; (8013990 <paramTask+0xcc>)
 801395e:	f7ff fca9 	bl	80132b4 <paramSetByName>
          break;
 8013962:	e014      	b.n	801398e <paramTask+0xca>
        case MISC_GET_EXTENDED_TYPE:
          paramGetExtendedType(&p);
 8013964:	480a      	ldr	r0, [pc, #40]	; (8013990 <paramTask+0xcc>)
 8013966:	f7ff fd19 	bl	801339c <paramGetExtendedType>
          break;
 801396a:	e010      	b.n	801398e <paramTask+0xca>
        case MISC_PERSISTENT_STORE:
          paramPersistentStore(&p);
 801396c:	4808      	ldr	r0, [pc, #32]	; (8013990 <paramTask+0xcc>)
 801396e:	f7ff fd87 	bl	8013480 <paramPersistentStore>
          break;
 8013972:	e00c      	b.n	801398e <paramTask+0xca>
        case MISC_PERSISTENT_GET_STATE:
          paramPersistentGetState(&p);
 8013974:	4806      	ldr	r0, [pc, #24]	; (8013990 <paramTask+0xcc>)
 8013976:	f7ff fe4f 	bl	8013618 <paramPersistentGetState>
          break;
 801397a:	e008      	b.n	801398e <paramTask+0xca>
        case MISC_PERSISTENT_CLEAR:
          paramPersistentClear(&p);
 801397c:	4804      	ldr	r0, [pc, #16]	; (8013990 <paramTask+0xcc>)
 801397e:	f7ff ff01 	bl	8013784 <paramPersistentClear>
          break;
 8013982:	e004      	b.n	801398e <paramTask+0xca>
        case MISC_GET_DEFAULT_VALUE:
          paramGetDefaultValue(&p);
 8013984:	4802      	ldr	r0, [pc, #8]	; (8013990 <paramTask+0xcc>)
 8013986:	f7ff fddb 	bl	8013540 <paramGetDefaultValue>
          break;
 801398a:	e000      	b.n	801398e <paramTask+0xca>
        default:
          break;
 801398c:	bf00      	nop
		crtpReceivePacketBlock(CRTP_PORT_PARAM, &p);
 801398e:	e7a0      	b.n	80138d2 <paramTask+0xe>
 8013990:	2000bc8c 	.word	0x2000bc8c

08013994 <pidReset>:
    pid->iLimit = limit;
}


void pidReset(PidObject* pid)
{
 8013994:	b480      	push	{r7}
 8013996:	b083      	sub	sp, #12
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
  pid->error     = 0;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	f04f 0200 	mov.w	r2, #0
 80139a2:	605a      	str	r2, [r3, #4]
  pid->prevError = 0;
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	f04f 0200 	mov.w	r2, #0
 80139aa:	609a      	str	r2, [r3, #8]
  pid->integ     = 0;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	f04f 0200 	mov.w	r2, #0
 80139b2:	60da      	str	r2, [r3, #12]
  pid->deriv     = 0;
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	f04f 0200 	mov.w	r2, #0
 80139ba:	611a      	str	r2, [r3, #16]
}
 80139bc:	bf00      	nop
 80139be:	370c      	adds	r7, #12
 80139c0:	46bd      	mov	sp, r7
 80139c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c6:	4770      	bx	lr

080139c8 <filterReset>:

void pidSetDt(PidObject* pid, const float dt) {
    pid->dt = dt;
}

void filterReset(PidObject* pid, const float samplingRate, const float cutoffFreq, bool enableDFilter) {
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b084      	sub	sp, #16
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	60f8      	str	r0, [r7, #12]
 80139d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80139d4:	edc7 0a01 	vstr	s1, [r7, #4]
 80139d8:	460b      	mov	r3, r1
 80139da:	70fb      	strb	r3, [r7, #3]
  pid->enableDFilter = enableDFilter;
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	78fa      	ldrb	r2, [r7, #3]
 80139e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  if (pid->enableDFilter)
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d008      	beq.n	8013a00 <filterReset+0x38>
  {
    lpf2pInit(&pid->dFilter, samplingRate, cutoffFreq);
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	3340      	adds	r3, #64	; 0x40
 80139f2:	edd7 0a01 	vldr	s1, [r7, #4]
 80139f6:	ed97 0a02 	vldr	s0, [r7, #8]
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7f3 f8c6 	bl	8006b8c <lpf2pInit>
  }
}
 8013a00:	bf00      	nop
 8013a02:	3710      	adds	r7, #16
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd80      	pop	{r7, pc}

08013a08 <queueMonitorInit>:
static int getMaxWaiting(xQueueHandle* xQueue, int prevPeak);
static void resetCounters();

unsigned char ucQueueGetQueueNumber( xQueueHandle xQueue );

void queueMonitorInit() {
 8013a08:	b590      	push	{r4, r7, lr}
 8013a0a:	b083      	sub	sp, #12
 8013a0c:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 8013a0e:	4b19      	ldr	r3, [pc, #100]	; (8013a74 <queueMonitorInit+0x6c>)
 8013a10:	781b      	ldrb	r3, [r3, #0]
 8013a12:	f083 0301 	eor.w	r3, r3, #1
 8013a16:	b2db      	uxtb	r3, r3
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d104      	bne.n	8013a26 <queueMonitorInit+0x1e>
 8013a1c:	2248      	movs	r2, #72	; 0x48
 8013a1e:	4916      	ldr	r1, [pc, #88]	; (8013a78 <queueMonitorInit+0x70>)
 8013a20:	4816      	ldr	r0, [pc, #88]	; (8013a7c <queueMonitorInit+0x74>)
 8013a22:	f7fd f8fb 	bl	8010c1c <assertFail>
  timer = xTimerCreateStatic( "queueMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 8013a26:	4b16      	ldr	r3, [pc, #88]	; (8013a80 <queueMonitorInit+0x78>)
 8013a28:	9301      	str	r3, [sp, #4]
 8013a2a:	4b16      	ldr	r3, [pc, #88]	; (8013a84 <queueMonitorInit+0x7c>)
 8013a2c:	9300      	str	r3, [sp, #0]
 8013a2e:	2300      	movs	r3, #0
 8013a30:	2201      	movs	r2, #1
 8013a32:	f242 7110 	movw	r1, #10000	; 0x2710
 8013a36:	4814      	ldr	r0, [pc, #80]	; (8013a88 <queueMonitorInit+0x80>)
 8013a38:	f00d f904 	bl	8020c44 <xTimerCreateStatic>
 8013a3c:	4603      	mov	r3, r0
 8013a3e:	4a13      	ldr	r2, [pc, #76]	; (8013a8c <queueMonitorInit+0x84>)
 8013a40:	6013      	str	r3, [r2, #0]
  xTimerStart(timer, 100);
 8013a42:	4b12      	ldr	r3, [pc, #72]	; (8013a8c <queueMonitorInit+0x84>)
 8013a44:	681c      	ldr	r4, [r3, #0]
 8013a46:	f00c f90b 	bl	801fc60 <xTaskGetTickCount>
 8013a4a:	4602      	mov	r2, r0
 8013a4c:	2364      	movs	r3, #100	; 0x64
 8013a4e:	9300      	str	r3, [sp, #0]
 8013a50:	2300      	movs	r3, #0
 8013a52:	2101      	movs	r1, #1
 8013a54:	4620      	mov	r0, r4
 8013a56:	f00d f969 	bl	8020d2c <xTimerGenericCommand>

  data[0].fileName = "Na";
 8013a5a:	4b0d      	ldr	r3, [pc, #52]	; (8013a90 <queueMonitorInit+0x88>)
 8013a5c:	4a0d      	ldr	r2, [pc, #52]	; (8013a94 <queueMonitorInit+0x8c>)
 8013a5e:	601a      	str	r2, [r3, #0]
  data[0].queueName = "Na";
 8013a60:	4b0b      	ldr	r3, [pc, #44]	; (8013a90 <queueMonitorInit+0x88>)
 8013a62:	4a0c      	ldr	r2, [pc, #48]	; (8013a94 <queueMonitorInit+0x8c>)
 8013a64:	605a      	str	r2, [r3, #4]

  initialized = true;
 8013a66:	4b03      	ldr	r3, [pc, #12]	; (8013a74 <queueMonitorInit+0x6c>)
 8013a68:	2201      	movs	r2, #1
 8013a6a:	701a      	strb	r2, [r3, #0]
}
 8013a6c:	bf00      	nop
 8013a6e:	3704      	adds	r7, #4
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bd90      	pop	{r4, r7, pc}
 8013a74:	2000c26c 	.word	0x2000c26c
 8013a78:	0802c204 	.word	0x0802c204
 8013a7c:	0802c228 	.word	0x0802c228
 8013a80:	2000c240 	.word	0x2000c240
 8013a84:	08013c35 	.word	0x08013c35
 8013a88:	0802c238 	.word	0x0802c238
 8013a8c:	2000c23c 	.word	0x2000c23c
 8013a90:	2000c0ac 	.word	0x2000c0ac
 8013a94:	0802c24c 	.word	0x0802c24c

08013a98 <qmRegisterQueue>:

    queueData->fullCount++;
  }
}

void qmRegisterQueue(xQueueHandle* xQueue, char* fileName, char* queueName) {
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b086      	sub	sp, #24
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	60f8      	str	r0, [r7, #12]
 8013aa0:	60b9      	str	r1, [r7, #8]
 8013aa2:	607a      	str	r2, [r7, #4]
  ASSERT(initialized);
 8013aa4:	4b18      	ldr	r3, [pc, #96]	; (8013b08 <qmRegisterQueue+0x70>)
 8013aa6:	781b      	ldrb	r3, [r3, #0]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d104      	bne.n	8013ab6 <qmRegisterQueue+0x1e>
 8013aac:	2265      	movs	r2, #101	; 0x65
 8013aae:	4917      	ldr	r1, [pc, #92]	; (8013b0c <qmRegisterQueue+0x74>)
 8013ab0:	4817      	ldr	r0, [pc, #92]	; (8013b10 <qmRegisterQueue+0x78>)
 8013ab2:	f7fd f8b3 	bl	8010c1c <assertFail>
  ASSERT(nrOfQueues < MAX_NR_OF_QUEUES);
 8013ab6:	4b17      	ldr	r3, [pc, #92]	; (8013b14 <qmRegisterQueue+0x7c>)
 8013ab8:	781b      	ldrb	r3, [r3, #0]
 8013aba:	2b13      	cmp	r3, #19
 8013abc:	d904      	bls.n	8013ac8 <qmRegisterQueue+0x30>
 8013abe:	2266      	movs	r2, #102	; 0x66
 8013ac0:	4912      	ldr	r1, [pc, #72]	; (8013b0c <qmRegisterQueue+0x74>)
 8013ac2:	4815      	ldr	r0, [pc, #84]	; (8013b18 <qmRegisterQueue+0x80>)
 8013ac4:	f7fd f8aa 	bl	8010c1c <assertFail>
  Data* queueData = &data[nrOfQueues];
 8013ac8:	4b12      	ldr	r3, [pc, #72]	; (8013b14 <qmRegisterQueue+0x7c>)
 8013aca:	781b      	ldrb	r3, [r3, #0]
 8013acc:	461a      	mov	r2, r3
 8013ace:	4613      	mov	r3, r2
 8013ad0:	009b      	lsls	r3, r3, #2
 8013ad2:	4413      	add	r3, r2
 8013ad4:	009b      	lsls	r3, r3, #2
 8013ad6:	4a11      	ldr	r2, [pc, #68]	; (8013b1c <qmRegisterQueue+0x84>)
 8013ad8:	4413      	add	r3, r2
 8013ada:	617b      	str	r3, [r7, #20]

  queueData->fileName = fileName;
 8013adc:	697b      	ldr	r3, [r7, #20]
 8013ade:	68ba      	ldr	r2, [r7, #8]
 8013ae0:	601a      	str	r2, [r3, #0]
  queueData->queueName = queueName;
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	687a      	ldr	r2, [r7, #4]
 8013ae6:	605a      	str	r2, [r3, #4]
  vQueueSetQueueNumber(xQueue, nrOfQueues);
 8013ae8:	4b0a      	ldr	r3, [pc, #40]	; (8013b14 <qmRegisterQueue+0x7c>)
 8013aea:	781b      	ldrb	r3, [r3, #0]
 8013aec:	4619      	mov	r1, r3
 8013aee:	68f8      	ldr	r0, [r7, #12]
 8013af0:	f00b fbac 	bl	801f24c <vQueueSetQueueNumber>

  nrOfQueues++;
 8013af4:	4b07      	ldr	r3, [pc, #28]	; (8013b14 <qmRegisterQueue+0x7c>)
 8013af6:	781b      	ldrb	r3, [r3, #0]
 8013af8:	3301      	adds	r3, #1
 8013afa:	b2da      	uxtb	r2, r3
 8013afc:	4b05      	ldr	r3, [pc, #20]	; (8013b14 <qmRegisterQueue+0x7c>)
 8013afe:	701a      	strb	r2, [r3, #0]
}
 8013b00:	bf00      	nop
 8013b02:	3718      	adds	r7, #24
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}
 8013b08:	2000c26c 	.word	0x2000c26c
 8013b0c:	0802c204 	.word	0x0802c204
 8013b10:	0802c250 	.word	0x0802c250
 8013b14:	20000ed0 	.word	0x20000ed0
 8013b18:	0802c25c 	.word	0x0802c25c
 8013b1c:	2000c0ac 	.word	0x2000c0ac

08013b20 <debugPrint>:
    return waiting;
  }
  return prevPeak;
}

static void debugPrint() {
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b082      	sub	sp, #8
 8013b24:	af00      	add	r7, sp, #0
  int i = 0;
 8013b26:	2300      	movs	r3, #0
 8013b28:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	607b      	str	r3, [r7, #4]
 8013b2e:	e013      	b.n	8013b58 <debugPrint+0x38>
    Data* queueData = &data[i];
 8013b30:	687a      	ldr	r2, [r7, #4]
 8013b32:	4613      	mov	r3, r2
 8013b34:	009b      	lsls	r3, r3, #2
 8013b36:	4413      	add	r3, r2
 8013b38:	009b      	lsls	r3, r3, #2
 8013b3a:	4a0d      	ldr	r2, [pc, #52]	; (8013b70 <debugPrint+0x50>)
 8013b3c:	4413      	add	r3, r2
 8013b3e:	603b      	str	r3, [r7, #0]
    if (filter(queueData)) {
 8013b40:	6838      	ldr	r0, [r7, #0]
 8013b42:	f000 f819 	bl	8013b78 <filter>
 8013b46:	4603      	mov	r3, r0
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d002      	beq.n	8013b52 <debugPrint+0x32>
      debugPrintQueue(queueData);
 8013b4c:	6838      	ldr	r0, [r7, #0]
 8013b4e:	f000 f827 	bl	8013ba0 <debugPrintQueue>
  for (i = 0; i < nrOfQueues; i++) {
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	3301      	adds	r3, #1
 8013b56:	607b      	str	r3, [r7, #4]
 8013b58:	4b06      	ldr	r3, [pc, #24]	; (8013b74 <debugPrint+0x54>)
 8013b5a:	781b      	ldrb	r3, [r3, #0]
 8013b5c:	461a      	mov	r2, r3
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	4293      	cmp	r3, r2
 8013b62:	dbe5      	blt.n	8013b30 <debugPrint+0x10>
    }
  }

  if (RESET_COUNTERS_AFTER_DISPLAY) {
    resetCounters();
 8013b64:	f000 f838 	bl	8013bd8 <resetCounters>
  }
}
 8013b68:	bf00      	nop
 8013b6a:	3708      	adds	r7, #8
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	bd80      	pop	{r7, pc}
 8013b70:	2000c0ac 	.word	0x2000c0ac
 8013b74:	20000ed0 	.word	0x20000ed0

08013b78 <filter>:

static bool filter(Data* queueData) {
 8013b78:	b480      	push	{r7}
 8013b7a:	b085      	sub	sp, #20
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	6078      	str	r0, [r7, #4]
  bool doDisplay = false;
 8013b80:	2300      	movs	r3, #0
 8013b82:	73fb      	strb	r3, [r7, #15]
  if (DISPLAY_ONLY_OVERFLOW_QUEUES) {
    doDisplay = (queueData->fullCount != 0);
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	691b      	ldr	r3, [r3, #16]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	bf14      	ite	ne
 8013b8c:	2301      	movne	r3, #1
 8013b8e:	2300      	moveq	r3, #0
 8013b90:	73fb      	strb	r3, [r7, #15]
  } else {
    doDisplay = true;
  }
  return doDisplay;
 8013b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b94:	4618      	mov	r0, r3
 8013b96:	3714      	adds	r7, #20
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9e:	4770      	bx	lr

08013ba0 <debugPrintQueue>:

static void debugPrintQueue(Data* queueData) {
 8013ba0:	b590      	push	{r4, r7, lr}
 8013ba2:	b085      	sub	sp, #20
 8013ba4:	af02      	add	r7, sp, #8
 8013ba6:	6078      	str	r0, [r7, #4]
  printf("%s:%s, sent: %i, peak: %i, full: %i\n",queueData->fileName, queueData->queueName, queueData->sendCount,queueData->maxWaiting, queueData->fullCount);
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	6819      	ldr	r1, [r3, #0]
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	6858      	ldr	r0, [r3, #4]
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	689c      	ldr	r4, [r3, #8]
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	68db      	ldr	r3, [r3, #12]
 8013bb8:	687a      	ldr	r2, [r7, #4]
 8013bba:	6912      	ldr	r2, [r2, #16]
 8013bbc:	9201      	str	r2, [sp, #4]
 8013bbe:	9300      	str	r3, [sp, #0]
 8013bc0:	4623      	mov	r3, r4
 8013bc2:	4602      	mov	r2, r0
 8013bc4:	4803      	ldr	r0, [pc, #12]	; (8013bd4 <debugPrintQueue+0x34>)
 8013bc6:	f00f fdb1 	bl	802372c <iprintf>
}
 8013bca:	bf00      	nop
 8013bcc:	370c      	adds	r7, #12
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd90      	pop	{r4, r7, pc}
 8013bd2:	bf00      	nop
 8013bd4:	0802c298 	.word	0x0802c298

08013bd8 <resetCounters>:

static void resetCounters() {
 8013bd8:	b480      	push	{r7}
 8013bda:	b083      	sub	sp, #12
 8013bdc:	af00      	add	r7, sp, #0
  int i = 0;
 8013bde:	2300      	movs	r3, #0
 8013be0:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 8013be2:	2300      	movs	r3, #0
 8013be4:	607b      	str	r3, [r7, #4]
 8013be6:	e013      	b.n	8013c10 <resetCounters+0x38>
    Data* queueData = &data[i];
 8013be8:	687a      	ldr	r2, [r7, #4]
 8013bea:	4613      	mov	r3, r2
 8013bec:	009b      	lsls	r3, r3, #2
 8013bee:	4413      	add	r3, r2
 8013bf0:	009b      	lsls	r3, r3, #2
 8013bf2:	4a0e      	ldr	r2, [pc, #56]	; (8013c2c <resetCounters+0x54>)
 8013bf4:	4413      	add	r3, r2
 8013bf6:	603b      	str	r3, [r7, #0]

    queueData->sendCount = 0;
 8013bf8:	683b      	ldr	r3, [r7, #0]
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	609a      	str	r2, [r3, #8]
    queueData->maxWaiting = 0;
 8013bfe:	683b      	ldr	r3, [r7, #0]
 8013c00:	2200      	movs	r2, #0
 8013c02:	60da      	str	r2, [r3, #12]
    queueData->fullCount = 0;
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	2200      	movs	r2, #0
 8013c08:	611a      	str	r2, [r3, #16]
  for (i = 0; i < nrOfQueues; i++) {
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	3301      	adds	r3, #1
 8013c0e:	607b      	str	r3, [r7, #4]
 8013c10:	4b07      	ldr	r3, [pc, #28]	; (8013c30 <resetCounters+0x58>)
 8013c12:	781b      	ldrb	r3, [r3, #0]
 8013c14:	461a      	mov	r2, r3
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	4293      	cmp	r3, r2
 8013c1a:	dbe5      	blt.n	8013be8 <resetCounters+0x10>
  }
}
 8013c1c:	bf00      	nop
 8013c1e:	bf00      	nop
 8013c20:	370c      	adds	r7, #12
 8013c22:	46bd      	mov	sp, r7
 8013c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c28:	4770      	bx	lr
 8013c2a:	bf00      	nop
 8013c2c:	2000c0ac 	.word	0x2000c0ac
 8013c30:	20000ed0 	.word	0x20000ed0

08013c34 <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 8013c34:	b580      	push	{r7, lr}
 8013c36:	b082      	sub	sp, #8
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	6078      	str	r0, [r7, #4]
  debugPrint();
 8013c3c:	f7ff ff70 	bl	8013b20 <debugPrint>
}
 8013c40:	bf00      	nop
 8013c42:	3708      	adds	r7, #8
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}

08013c48 <statsCntRateCounterUpdate>:
    counter->latestCount = 0;
    counter->latestAveragingMs = 0;
    counter->latestRate = 0.0f;
}

float statsCntRateCounterUpdate(statsCntRateCounter_t* counter, uint32_t now_ms) {
 8013c48:	b480      	push	{r7}
 8013c4a:	b087      	sub	sp, #28
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
 8013c50:	6039      	str	r1, [r7, #0]
    uint32_t dt_ms = now_ms - counter->latestAveragingMs;
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	689b      	ldr	r3, [r3, #8]
 8013c56:	683a      	ldr	r2, [r7, #0]
 8013c58:	1ad3      	subs	r3, r2, r3
 8013c5a:	617b      	str	r3, [r7, #20]
    if (dt_ms > counter->intervalMs) {
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	691b      	ldr	r3, [r3, #16]
 8013c60:	697a      	ldr	r2, [r7, #20]
 8013c62:	429a      	cmp	r2, r3
 8013c64:	d925      	bls.n	8013cb2 <statsCntRateCounterUpdate+0x6a>
        float dt_s = dt_ms / 1000.0f;
 8013c66:	697b      	ldr	r3, [r7, #20]
 8013c68:	ee07 3a90 	vmov	s15, r3
 8013c6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013c70:	eddf 6a15 	vldr	s13, [pc, #84]	; 8013cc8 <statsCntRateCounterUpdate+0x80>
 8013c74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013c78:	edc7 7a04 	vstr	s15, [r7, #16]
        float dv = counter->count - counter->latestCount;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	681a      	ldr	r2, [r3, #0]
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	685b      	ldr	r3, [r3, #4]
 8013c84:	1ad3      	subs	r3, r2, r3
 8013c86:	ee07 3a90 	vmov	s15, r3
 8013c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c8e:	edc7 7a03 	vstr	s15, [r7, #12]

        counter->latestRate = dv / dt_s;
 8013c92:	edd7 6a03 	vldr	s13, [r7, #12]
 8013c96:	ed97 7a04 	vldr	s14, [r7, #16]
 8013c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	edc3 7a03 	vstr	s15, [r3, #12]

        counter->latestCount = counter->count;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	681a      	ldr	r2, [r3, #0]
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	605a      	str	r2, [r3, #4]
        counter->latestAveragingMs = now_ms;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	683a      	ldr	r2, [r7, #0]
 8013cb0:	609a      	str	r2, [r3, #8]
    }

    return counter->latestRate;
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	68db      	ldr	r3, [r3, #12]
 8013cb6:	ee07 3a90 	vmov	s15, r3
}
 8013cba:	eeb0 0a67 	vmov.f32	s0, s15
 8013cbe:	371c      	adds	r7, #28
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc6:	4770      	bx	lr
 8013cc8:	447a0000 	.word	0x447a0000

08013ccc <statsCntRateLogHandler>:

    logger->logByFunction.data = (void*)logger;
    logger->logByFunction.aquireFloat = statsCntRateLogHandler;
}

float statsCntRateLogHandler(uint32_t timestamp, void* data) {
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b084      	sub	sp, #16
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
 8013cd4:	6039      	str	r1, [r7, #0]
    statsCntRateLogger_t* logger = (statsCntRateLogger_t*)data;
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	60fb      	str	r3, [r7, #12]
    return statsCntRateCounterUpdate(&logger->rateCounter, timestamp);
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	3308      	adds	r3, #8
 8013cde:	6879      	ldr	r1, [r7, #4]
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f7ff ffb1 	bl	8013c48 <statsCntRateCounterUpdate>
 8013ce6:	eef0 7a40 	vmov.f32	s15, s0
}
 8013cea:	eeb0 0a67 	vmov.f32	s0, s15
 8013cee:	3710      	adds	r7, #16
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}

08013cf4 <sysLoadInit>:
static int taskTopIndex = 0;
static uint32_t previousTotalRunTime = 0;

static StaticTimer_t timerBuffer;

void sysLoadInit() {
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b084      	sub	sp, #16
 8013cf8:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 8013cfa:	4b14      	ldr	r3, [pc, #80]	; (8013d4c <sysLoadInit+0x58>)
 8013cfc:	781b      	ldrb	r3, [r3, #0]
 8013cfe:	f083 0301 	eor.w	r3, r3, #1
 8013d02:	b2db      	uxtb	r3, r3
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d104      	bne.n	8013d12 <sysLoadInit+0x1e>
 8013d08:	223c      	movs	r2, #60	; 0x3c
 8013d0a:	4911      	ldr	r1, [pc, #68]	; (8013d50 <sysLoadInit+0x5c>)
 8013d0c:	4811      	ldr	r0, [pc, #68]	; (8013d54 <sysLoadInit+0x60>)
 8013d0e:	f7fc ff85 	bl	8010c1c <assertFail>

  xTimerHandle timer = xTimerCreateStatic( "sysLoadMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 8013d12:	4b11      	ldr	r3, [pc, #68]	; (8013d58 <sysLoadInit+0x64>)
 8013d14:	9301      	str	r3, [sp, #4]
 8013d16:	4b11      	ldr	r3, [pc, #68]	; (8013d5c <sysLoadInit+0x68>)
 8013d18:	9300      	str	r3, [sp, #0]
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	2201      	movs	r2, #1
 8013d1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013d22:	480f      	ldr	r0, [pc, #60]	; (8013d60 <sysLoadInit+0x6c>)
 8013d24:	f00c ff8e 	bl	8020c44 <xTimerCreateStatic>
 8013d28:	6078      	str	r0, [r7, #4]
  xTimerStart(timer, 100);
 8013d2a:	f00b ff99 	bl	801fc60 <xTaskGetTickCount>
 8013d2e:	4602      	mov	r2, r0
 8013d30:	2364      	movs	r3, #100	; 0x64
 8013d32:	9300      	str	r3, [sp, #0]
 8013d34:	2300      	movs	r3, #0
 8013d36:	2101      	movs	r1, #1
 8013d38:	6878      	ldr	r0, [r7, #4]
 8013d3a:	f00c fff7 	bl	8020d2c <xTimerGenericCommand>

  initialized = true;
 8013d3e:	4b03      	ldr	r3, [pc, #12]	; (8013d4c <sysLoadInit+0x58>)
 8013d40:	2201      	movs	r2, #1
 8013d42:	701a      	strb	r2, [r3, #0]
}
 8013d44:	bf00      	nop
 8013d46:	3708      	adds	r7, #8
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}
 8013d4c:	2000c26d 	.word	0x2000c26d
 8013d50:	0802c2c0 	.word	0x0802c2c0
 8013d54:	0802c2dc 	.word	0x0802c2dc
 8013d58:	2000c278 	.word	0x2000c278
 8013d5c:	08013de5 	.word	0x08013de5
 8013d60:	0802c2ec 	.word	0x0802c2ec

08013d64 <getPreviousTaskData>:


static taskData_t* getPreviousTaskData(uint32_t xTaskNumber) {
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b084      	sub	sp, #16
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
  // Try to find the task in the list of tasks
  for (int i = 0; i < taskTopIndex; i++) {
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	60fb      	str	r3, [r7, #12]
 8013d70:	e00f      	b.n	8013d92 <getPreviousTaskData+0x2e>
    if (previousSnapshot[i].xTaskNumber == xTaskNumber) {
 8013d72:	4a18      	ldr	r2, [pc, #96]	; (8013dd4 <getPreviousTaskData+0x70>)
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	00db      	lsls	r3, r3, #3
 8013d78:	4413      	add	r3, r2
 8013d7a:	685b      	ldr	r3, [r3, #4]
 8013d7c:	687a      	ldr	r2, [r7, #4]
 8013d7e:	429a      	cmp	r2, r3
 8013d80:	d104      	bne.n	8013d8c <getPreviousTaskData+0x28>
      return &previousSnapshot[i];
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	00db      	lsls	r3, r3, #3
 8013d86:	4a13      	ldr	r2, [pc, #76]	; (8013dd4 <getPreviousTaskData+0x70>)
 8013d88:	4413      	add	r3, r2
 8013d8a:	e01f      	b.n	8013dcc <getPreviousTaskData+0x68>
  for (int i = 0; i < taskTopIndex; i++) {
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	3301      	adds	r3, #1
 8013d90:	60fb      	str	r3, [r7, #12]
 8013d92:	4b11      	ldr	r3, [pc, #68]	; (8013dd8 <getPreviousTaskData+0x74>)
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	68fa      	ldr	r2, [r7, #12]
 8013d98:	429a      	cmp	r2, r3
 8013d9a:	dbea      	blt.n	8013d72 <getPreviousTaskData+0xe>
    }
  }

  // Allocate a new entry
  ASSERT(taskTopIndex < TASK_MAX_COUNT);
 8013d9c:	4b0e      	ldr	r3, [pc, #56]	; (8013dd8 <getPreviousTaskData+0x74>)
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	2b1f      	cmp	r3, #31
 8013da2:	dd04      	ble.n	8013dae <getPreviousTaskData+0x4a>
 8013da4:	224e      	movs	r2, #78	; 0x4e
 8013da6:	490d      	ldr	r1, [pc, #52]	; (8013ddc <getPreviousTaskData+0x78>)
 8013da8:	480d      	ldr	r0, [pc, #52]	; (8013de0 <getPreviousTaskData+0x7c>)
 8013daa:	f7fc ff37 	bl	8010c1c <assertFail>
  taskData_t* result = &previousSnapshot[taskTopIndex];
 8013dae:	4b0a      	ldr	r3, [pc, #40]	; (8013dd8 <getPreviousTaskData+0x74>)
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	00db      	lsls	r3, r3, #3
 8013db4:	4a07      	ldr	r2, [pc, #28]	; (8013dd4 <getPreviousTaskData+0x70>)
 8013db6:	4413      	add	r3, r2
 8013db8:	60bb      	str	r3, [r7, #8]
  result->xTaskNumber = xTaskNumber;
 8013dba:	68bb      	ldr	r3, [r7, #8]
 8013dbc:	687a      	ldr	r2, [r7, #4]
 8013dbe:	605a      	str	r2, [r3, #4]

  taskTopIndex++;
 8013dc0:	4b05      	ldr	r3, [pc, #20]	; (8013dd8 <getPreviousTaskData+0x74>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	3301      	adds	r3, #1
 8013dc6:	4a04      	ldr	r2, [pc, #16]	; (8013dd8 <getPreviousTaskData+0x74>)
 8013dc8:	6013      	str	r3, [r2, #0]

  return result;
 8013dca:	68bb      	ldr	r3, [r7, #8]
}
 8013dcc:	4618      	mov	r0, r3
 8013dce:	3710      	adds	r7, #16
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	bd80      	pop	{r7, pc}
 8013dd4:	200060e8 	.word	0x200060e8
 8013dd8:	2000c270 	.word	0x2000c270
 8013ddc:	0802c2c0 	.word	0x0802c2c0
 8013de0:	0802c300 	.word	0x0802c300

08013de4 <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 8013de4:	b580      	push	{r7, lr}
 8013de6:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8013dea:	af02      	add	r7, sp, #8
 8013dec:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8013df0:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8013df4:	6018      	str	r0, [r3, #0]
  if (triggerDump != 0) {
 8013df6:	4b4e      	ldr	r3, [pc, #312]	; (8013f30 <timerHandler+0x14c>)
 8013df8:	781b      	ldrb	r3, [r3, #0]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	f000 8092 	beq.w	8013f24 <timerHandler+0x140>
    uint32_t totalRunTime;

    TaskStatus_t taskStats[TASK_MAX_COUNT];
    uint32_t taskCount = uxTaskGetSystemState(taskStats, TASK_MAX_COUNT, &totalRunTime);
 8013e00:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 8013e04:	f107 030c 	add.w	r3, r7, #12
 8013e08:	2120      	movs	r1, #32
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f00b ff38 	bl	801fc80 <uxTaskGetSystemState>
 8013e10:	f8c7 04a8 	str.w	r0, [r7, #1192]	; 0x4a8
    ASSERT(taskCount < TASK_MAX_COUNT);
 8013e14:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8013e18:	2b1f      	cmp	r3, #31
 8013e1a:	d904      	bls.n	8013e26 <timerHandler+0x42>
 8013e1c:	225d      	movs	r2, #93	; 0x5d
 8013e1e:	4945      	ldr	r1, [pc, #276]	; (8013f34 <timerHandler+0x150>)
 8013e20:	4845      	ldr	r0, [pc, #276]	; (8013f38 <timerHandler+0x154>)
 8013e22:	f7fc fefb 	bl	8010c1c <assertFail>

    uint32_t totalDelta = totalRunTime - previousTotalRunTime;
 8013e26:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 8013e2a:	4b44      	ldr	r3, [pc, #272]	; (8013f3c <timerHandler+0x158>)
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	1ad3      	subs	r3, r2, r3
 8013e30:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
    float f = 100.0 / totalDelta;
 8013e34:	f8d7 04a4 	ldr.w	r0, [r7, #1188]	; 0x4a4
 8013e38:	f7ec fb74 	bl	8000524 <__aeabi_ui2d>
 8013e3c:	4602      	mov	r2, r0
 8013e3e:	460b      	mov	r3, r1
 8013e40:	f04f 0000 	mov.w	r0, #0
 8013e44:	493e      	ldr	r1, [pc, #248]	; (8013f40 <timerHandler+0x15c>)
 8013e46:	f7ec fd11 	bl	800086c <__aeabi_ddiv>
 8013e4a:	4602      	mov	r2, r0
 8013e4c:	460b      	mov	r3, r1
 8013e4e:	4610      	mov	r0, r2
 8013e50:	4619      	mov	r1, r3
 8013e52:	f7ec feb9 	bl	8000bc8 <__aeabi_d2f>
 8013e56:	4603      	mov	r3, r0
 8013e58:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8013e5c:	6013      	str	r3, [r2, #0]

    // Dumps the the CPU load and stack usage for all tasks
    // CPU usage is since last dump in % compared to total time spent in tasks. Note that time spent in interrupts will be included in measured time.
    // Stack usage is displayed as nr of unused bytes at peak stack usage.

    DEBUG_PRINT("Task dump\n");
 8013e5e:	4939      	ldr	r1, [pc, #228]	; (8013f44 <timerHandler+0x160>)
 8013e60:	2000      	movs	r0, #0
 8013e62:	f7fc fe17 	bl	8010a94 <SEGGER_RTT_printf>
    DEBUG_PRINT("Load\tStack left\tName\n");
 8013e66:	4938      	ldr	r1, [pc, #224]	; (8013f48 <timerHandler+0x164>)
 8013e68:	2000      	movs	r0, #0
 8013e6a:	f7fc fe13 	bl	8010a94 <SEGGER_RTT_printf>
    for (uint32_t i = 0; i < taskCount; i++) {
 8013e6e:	2300      	movs	r3, #0
 8013e70:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8013e74:	e049      	b.n	8013f0a <timerHandler+0x126>
      TaskStatus_t* stats = &taskStats[i];
 8013e76:	f107 010c 	add.w	r1, r7, #12
 8013e7a:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 8013e7e:	4613      	mov	r3, r2
 8013e80:	00db      	lsls	r3, r3, #3
 8013e82:	4413      	add	r3, r2
 8013e84:	009b      	lsls	r3, r3, #2
 8013e86:	440b      	add	r3, r1
 8013e88:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      taskData_t* previousTaskData = getPreviousTaskData(stats->xTaskNumber);
 8013e8c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8013e90:	689b      	ldr	r3, [r3, #8]
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7ff ff66 	bl	8013d64 <getPreviousTaskData>
 8013e98:	f8c7 0498 	str.w	r0, [r7, #1176]	; 0x498

      uint32_t taskRunTime = stats->ulRunTimeCounter;
 8013e9c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8013ea0:	699b      	ldr	r3, [r3, #24]
 8013ea2:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
      float load = f * (taskRunTime - previousTaskData->ulRunTimeCounter);
 8013ea6:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 8013eb0:	1ad3      	subs	r3, r2, r3
 8013eb2:	ee07 3a90 	vmov	s15, r3
 8013eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013eba:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8013ebe:	ed93 7a00 	vldr	s14, [r3]
 8013ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ec6:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8013eca:	edc3 7a00 	vstr	s15, [r3]
      DEBUG_PRINT("%.2f \t%u \t%s\n", (double)load, stats->usStackHighWaterMark, stats->pcTaskName);
 8013ece:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8013ed2:	6818      	ldr	r0, [r3, #0]
 8013ed4:	f7ec fb48 	bl	8000568 <__aeabi_f2d>
 8013ed8:	4602      	mov	r2, r0
 8013eda:	460b      	mov	r3, r1
 8013edc:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 8013ee0:	8c09      	ldrh	r1, [r1, #32]
 8013ee2:	4608      	mov	r0, r1
 8013ee4:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 8013ee8:	6849      	ldr	r1, [r1, #4]
 8013eea:	9101      	str	r1, [sp, #4]
 8013eec:	9000      	str	r0, [sp, #0]
 8013eee:	4917      	ldr	r1, [pc, #92]	; (8013f4c <timerHandler+0x168>)
 8013ef0:	2000      	movs	r0, #0
 8013ef2:	f7fc fdcf 	bl	8010a94 <SEGGER_RTT_printf>

      previousTaskData->ulRunTimeCounter = taskRunTime;
 8013ef6:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8013efa:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 8013efe:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < taskCount; i++) {
 8013f00:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 8013f04:	3301      	adds	r3, #1
 8013f06:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8013f0a:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 8013f0e:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8013f12:	429a      	cmp	r2, r3
 8013f14:	d3af      	bcc.n	8013e76 <timerHandler+0x92>
    }

    previousTotalRunTime = totalRunTime;
 8013f16:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8013f1a:	4a08      	ldr	r2, [pc, #32]	; (8013f3c <timerHandler+0x158>)
 8013f1c:	6013      	str	r3, [r2, #0]

    triggerDump = 0;
 8013f1e:	4b04      	ldr	r3, [pc, #16]	; (8013f30 <timerHandler+0x14c>)
 8013f20:	2200      	movs	r2, #0
 8013f22:	701a      	strb	r2, [r3, #0]
  }
}
 8013f24:	bf00      	nop
 8013f26:	f507 6796 	add.w	r7, r7, #1200	; 0x4b0
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bd80      	pop	{r7, pc}
 8013f2e:	bf00      	nop
 8013f30:	2000c26e 	.word	0x2000c26e
 8013f34:	0802c2c0 	.word	0x0802c2c0
 8013f38:	0802c320 	.word	0x0802c320
 8013f3c:	2000c274 	.word	0x2000c274
 8013f40:	40590000 	.word	0x40590000
 8013f44:	0802c33c 	.word	0x0802c33c
 8013f48:	0802c348 	.word	0x0802c348
 8013f4c:	0802c360 	.word	0x0802c360

08013f50 <usecTimerReset>:
static uint32_t usecTimerHighCount;



void usecTimerReset(void)
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b082      	sub	sp, #8
 8013f54:	af00      	add	r7, sp, #0
  IF_DEBUG_ASSERT(isInit);
 8013f56:	4b0c      	ldr	r3, [pc, #48]	; (8013f88 <usecTimerReset+0x38>)
 8013f58:	781b      	ldrb	r3, [r3, #0]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d104      	bne.n	8013f68 <usecTimerReset+0x18>
 8013f5e:	2211      	movs	r2, #17
 8013f60:	490a      	ldr	r1, [pc, #40]	; (8013f8c <usecTimerReset+0x3c>)
 8013f62:	480b      	ldr	r0, [pc, #44]	; (8013f90 <usecTimerReset+0x40>)
 8013f64:	f7fc fe5a 	bl	8010c1c <assertFail>

  const uint32_t zero = 0;
 8013f68:	2300      	movs	r3, #0
 8013f6a:	607b      	str	r3, [r7, #4]
  __atomic_store(&usecTimerHighCount, &zero, __ATOMIC_SEQ_CST);
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	4a09      	ldr	r2, [pc, #36]	; (8013f94 <usecTimerReset+0x44>)
 8013f70:	f3bf 8f5b 	dmb	ish
 8013f74:	6013      	str	r3, [r2, #0]
 8013f76:	f3bf 8f5b 	dmb	ish

  TIM7->CNT = 0;
 8013f7a:	4b07      	ldr	r3, [pc, #28]	; (8013f98 <usecTimerReset+0x48>)
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8013f80:	bf00      	nop
 8013f82:	3708      	adds	r7, #8
 8013f84:	46bd      	mov	sp, r7
 8013f86:	bd80      	pop	{r7, pc}
 8013f88:	2000c2a4 	.word	0x2000c2a4
 8013f8c:	0802c390 	.word	0x0802c390
 8013f90:	0802c3b0 	.word	0x0802c3b0
 8013f94:	2000c2a8 	.word	0x2000c2a8
 8013f98:	40001400 	.word	0x40001400

08013f9c <usecTimestamp>:

uint64_t usecTimestamp(void)
{
 8013f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013fa0:	b08c      	sub	sp, #48	; 0x30
 8013fa2:	af00      	add	r7, sp, #0
  IF_DEBUG_ASSERT(isInit);
 8013fa4:	4b2b      	ldr	r3, [pc, #172]	; (8014054 <usecTimestamp+0xb8>)
 8013fa6:	781b      	ldrb	r3, [r3, #0]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d104      	bne.n	8013fb6 <usecTimestamp+0x1a>
 8013fac:	221b      	movs	r2, #27
 8013fae:	492a      	ldr	r1, [pc, #168]	; (8014058 <usecTimestamp+0xbc>)
 8013fb0:	482a      	ldr	r0, [pc, #168]	; (801405c <usecTimestamp+0xc0>)
 8013fb2:	f7fc fe33 	bl	8010c1c <assertFail>

  uint32_t high0;
  __atomic_load(&usecTimerHighCount, &high0, __ATOMIC_SEQ_CST);
 8013fb6:	4b2a      	ldr	r3, [pc, #168]	; (8014060 <usecTimestamp+0xc4>)
 8013fb8:	f3bf 8f5b 	dmb	ish
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	f3bf 8f5b 	dmb	ish
 8013fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t low = TIM7->CNT;
 8013fc4:	4b27      	ldr	r3, [pc, #156]	; (8014064 <usecTimestamp+0xc8>)
 8013fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t high;
  __atomic_load(&usecTimerHighCount, &high, __ATOMIC_SEQ_CST);
 8013fca:	4b25      	ldr	r3, [pc, #148]	; (8014060 <usecTimestamp+0xc4>)
 8013fcc:	f3bf 8f5b 	dmb	ish
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	f3bf 8f5b 	dmb	ish
 8013fd6:	627b      	str	r3, [r7, #36]	; 0x24

  // There was no increment in between
  if (high == high0)
 8013fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	d118      	bne.n	8014012 <usecTimestamp+0x76>
  {
    return (((uint64_t)high) << 16) + low;
 8013fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	61bb      	str	r3, [r7, #24]
 8013fe6:	61fa      	str	r2, [r7, #28]
 8013fe8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8013fec:	460b      	mov	r3, r1
 8013fee:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013ff2:	460b      	mov	r3, r1
 8013ff4:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8013ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	613b      	str	r3, [r7, #16]
 8013ffe:	617a      	str	r2, [r7, #20]
 8014000:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8014004:	460b      	mov	r3, r1
 8014006:	eb1a 0403 	adds.w	r4, sl, r3
 801400a:	4613      	mov	r3, r2
 801400c:	eb4b 0503 	adc.w	r5, fp, r3
 8014010:	e018      	b.n	8014044 <usecTimestamp+0xa8>
  }
  // There was an increment, but we don't expect another one soon
  return (((uint64_t)high) << 16) + TIM7->CNT;
 8014012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014014:	2200      	movs	r2, #0
 8014016:	60bb      	str	r3, [r7, #8]
 8014018:	60fa      	str	r2, [r7, #12]
 801401a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801401e:	460b      	mov	r3, r1
 8014020:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8014024:	460b      	mov	r3, r1
 8014026:	ea4f 4803 	mov.w	r8, r3, lsl #16
 801402a:	4b0e      	ldr	r3, [pc, #56]	; (8014064 <usecTimestamp+0xc8>)
 801402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801402e:	2200      	movs	r2, #0
 8014030:	603b      	str	r3, [r7, #0]
 8014032:	607a      	str	r2, [r7, #4]
 8014034:	e9d7 1200 	ldrd	r1, r2, [r7]
 8014038:	460b      	mov	r3, r1
 801403a:	eb18 0403 	adds.w	r4, r8, r3
 801403e:	4613      	mov	r3, r2
 8014040:	eb49 0503 	adc.w	r5, r9, r3
}
 8014044:	4622      	mov	r2, r4
 8014046:	462b      	mov	r3, r5
 8014048:	4610      	mov	r0, r2
 801404a:	4619      	mov	r1, r3
 801404c:	3730      	adds	r7, #48	; 0x30
 801404e:	46bd      	mov	sp, r7
 8014050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014054:	2000c2a4 	.word	0x2000c2a4
 8014058:	0802c390 	.word	0x0802c390
 801405c:	0802c3b0 	.word	0x0802c3b0
 8014060:	2000c2a8 	.word	0x2000c2a8
 8014064:	40001400 	.word	0x40001400

08014068 <resetParamCallback>:

/**
 * Parameters for the usec timer
 * */
static void resetParamCallback(void)
{
 8014068:	b580      	push	{r7, lr}
 801406a:	af00      	add	r7, sp, #0
  if (reset) {
 801406c:	4b05      	ldr	r3, [pc, #20]	; (8014084 <resetParamCallback+0x1c>)
 801406e:	781b      	ldrb	r3, [r3, #0]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d004      	beq.n	801407e <resetParamCallback+0x16>
    usecTimerReset();
 8014074:	f7ff ff6c 	bl	8013f50 <usecTimerReset>
    reset = 0;
 8014078:	4b02      	ldr	r3, [pc, #8]	; (8014084 <resetParamCallback+0x1c>)
 801407a:	2200      	movs	r2, #0
 801407c:	701a      	strb	r2, [r3, #0]
  }
}
 801407e:	bf00      	nop
 8014080:	bd80      	pop	{r7, pc}
 8014082:	bf00      	nop
 8014084:	2000c2a5 	.word	0x2000c2a5

08014088 <workerInit>:

static xQueueHandle workerQueue;
STATIC_MEM_QUEUE_ALLOC(workerQueue, WORKER_QUEUE_LENGTH, sizeof(struct worker_work));

void workerInit()
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b082      	sub	sp, #8
 801408c:	af02      	add	r7, sp, #8
  if (workerQueue)
 801408e:	4b0e      	ldr	r3, [pc, #56]	; (80140c8 <workerInit+0x40>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d114      	bne.n	80140c0 <workerInit+0x38>
    return;

  workerQueue = STATIC_MEM_QUEUE_CREATE(workerQueue);
 8014096:	2305      	movs	r3, #5
 8014098:	4618      	mov	r0, r3
 801409a:	2308      	movs	r3, #8
 801409c:	4619      	mov	r1, r3
 801409e:	2300      	movs	r3, #0
 80140a0:	9300      	str	r3, [sp, #0]
 80140a2:	4b0a      	ldr	r3, [pc, #40]	; (80140cc <workerInit+0x44>)
 80140a4:	4a0a      	ldr	r2, [pc, #40]	; (80140d0 <workerInit+0x48>)
 80140a6:	f00a fb55 	bl	801e754 <xQueueGenericCreateStatic>
 80140aa:	4603      	mov	r3, r0
 80140ac:	4a06      	ldr	r2, [pc, #24]	; (80140c8 <workerInit+0x40>)
 80140ae:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(workerQueue);
 80140b0:	4b05      	ldr	r3, [pc, #20]	; (80140c8 <workerInit+0x40>)
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	4a07      	ldr	r2, [pc, #28]	; (80140d4 <workerInit+0x4c>)
 80140b6:	4908      	ldr	r1, [pc, #32]	; (80140d8 <workerInit+0x50>)
 80140b8:	4618      	mov	r0, r3
 80140ba:	f7ff fced 	bl	8013a98 <qmRegisterQueue>
 80140be:	e000      	b.n	80140c2 <workerInit+0x3a>
    return;
 80140c0:	bf00      	nop
}
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}
 80140c6:	bf00      	nop
 80140c8:	2000c2ac 	.word	0x2000c2ac
 80140cc:	20006210 	.word	0x20006210
 80140d0:	200061e8 	.word	0x200061e8
 80140d4:	0802c43c 	.word	0x0802c43c
 80140d8:	0802c448 	.word	0x0802c448

080140dc <workerSchedule>:
      work.function(work.arg);
  }
}

int workerSchedule(void (*function)(void*), void *arg)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b084      	sub	sp, #16
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
 80140e4:	6039      	str	r1, [r7, #0]
  struct worker_work work;

  if (!function)
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d101      	bne.n	80140f0 <workerSchedule+0x14>
    return ENOEXEC;
 80140ec:	2308      	movs	r3, #8
 80140ee:	e011      	b.n	8014114 <workerSchedule+0x38>

  work.function = function;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	60bb      	str	r3, [r7, #8]
  work.arg = arg;
 80140f4:	683b      	ldr	r3, [r7, #0]
 80140f6:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(workerQueue, &work, 0) == pdFALSE)
 80140f8:	4b08      	ldr	r3, [pc, #32]	; (801411c <workerSchedule+0x40>)
 80140fa:	6818      	ldr	r0, [r3, #0]
 80140fc:	f107 0108 	add.w	r1, r7, #8
 8014100:	2300      	movs	r3, #0
 8014102:	2200      	movs	r2, #0
 8014104:	f00a fc3c 	bl	801e980 <xQueueGenericSend>
 8014108:	4603      	mov	r3, r0
 801410a:	2b00      	cmp	r3, #0
 801410c:	d101      	bne.n	8014112 <workerSchedule+0x36>
    return ENOMEM;
 801410e:	230c      	movs	r3, #12
 8014110:	e000      	b.n	8014114 <workerSchedule+0x38>

  return 0;
 8014112:	2300      	movs	r3, #0
}
 8014114:	4618      	mov	r0, r3
 8014116:	3710      	adds	r7, #16
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}
 801411c:	2000c2ac 	.word	0x2000c2ac

08014120 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8014120:	b480      	push	{r7}
 8014122:	af00      	add	r7, sp, #0

}
 8014124:	bf00      	nop
 8014126:	46bd      	mov	sp, r7
 8014128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801412c:	4770      	bx	lr

0801412e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 801412e:	b480      	push	{r7}
 8014130:	af00      	add	r7, sp, #0
return 0;
 8014132:	2300      	movs	r3, #0
}
 8014134:	4618      	mov	r0, r3
 8014136:	46bd      	mov	sp, r7
 8014138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413c:	4770      	bx	lr

0801413e <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 801413e:	b480      	push	{r7}
 8014140:	b083      	sub	sp, #12
 8014142:	af00      	add	r7, sp, #0
 8014144:	6078      	str	r0, [r7, #4]
 8014146:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8014148:	bf00      	nop
 801414a:	370c      	adds	r7, #12
 801414c:	46bd      	mov	sp, r7
 801414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014152:	4770      	bx	lr

08014154 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8014154:	b480      	push	{r7}
 8014156:	b085      	sub	sp, #20
 8014158:	af00      	add	r7, sp, #0
 801415a:	60f8      	str	r0, [r7, #12]
 801415c:	60b9      	str	r1, [r7, #8]
 801415e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	4a07      	ldr	r2, [pc, #28]	; (8014180 <vApplicationGetIdleTaskMemory+0x2c>)
 8014164:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	4a06      	ldr	r2, [pc, #24]	; (8014184 <vApplicationGetIdleTaskMemory+0x30>)
 801416a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	2280      	movs	r2, #128	; 0x80
 8014170:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8014172:	bf00      	nop
 8014174:	3714      	adds	r7, #20
 8014176:	46bd      	mov	sp, r7
 8014178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417c:	4770      	bx	lr
 801417e:	bf00      	nop
 8014180:	2000c2b0 	.word	0x2000c2b0
 8014184:	2000c368 	.word	0x2000c368

08014188 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8014188:	b480      	push	{r7}
 801418a:	b085      	sub	sp, #20
 801418c:	af00      	add	r7, sp, #0
 801418e:	60f8      	str	r0, [r7, #12]
 8014190:	60b9      	str	r1, [r7, #8]
 8014192:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	4a07      	ldr	r2, [pc, #28]	; (80141b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8014198:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	4a06      	ldr	r2, [pc, #24]	; (80141b8 <vApplicationGetTimerTaskMemory+0x30>)
 801419e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80141a6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80141a8:	bf00      	nop
 80141aa:	3714      	adds	r7, #20
 80141ac:	46bd      	mov	sp, r7
 80141ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b2:	4770      	bx	lr
 80141b4:	2000c568 	.word	0x2000c568
 80141b8:	2000c620 	.word	0x2000c620

080141bc <LL_SPI_SetStandard>:
{
 80141bc:	b480      	push	{r7}
 80141be:	b083      	sub	sp, #12
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	6078      	str	r0, [r7, #4]
 80141c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	685b      	ldr	r3, [r3, #4]
 80141ca:	f023 0210 	bic.w	r2, r3, #16
 80141ce:	683b      	ldr	r3, [r7, #0]
 80141d0:	431a      	orrs	r2, r3
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	605a      	str	r2, [r3, #4]
}
 80141d6:	bf00      	nop
 80141d8:	370c      	adds	r7, #12
 80141da:	46bd      	mov	sp, r7
 80141dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e0:	4770      	bx	lr
	...

080141e4 <LL_AHB1_GRP1_EnableClock>:
{
 80141e4:	b480      	push	{r7}
 80141e6:	b085      	sub	sp, #20
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80141ec:	4b08      	ldr	r3, [pc, #32]	; (8014210 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80141ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80141f0:	4907      	ldr	r1, [pc, #28]	; (8014210 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	4313      	orrs	r3, r2
 80141f6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80141f8:	4b05      	ldr	r3, [pc, #20]	; (8014210 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80141fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	4013      	ands	r3, r2
 8014200:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014202:	68fb      	ldr	r3, [r7, #12]
}
 8014204:	bf00      	nop
 8014206:	3714      	adds	r7, #20
 8014208:	46bd      	mov	sp, r7
 801420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420e:	4770      	bx	lr
 8014210:	40023800 	.word	0x40023800

08014214 <LL_APB2_GRP1_EnableClock>:
{
 8014214:	b480      	push	{r7}
 8014216:	b085      	sub	sp, #20
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 801421c:	4b08      	ldr	r3, [pc, #32]	; (8014240 <LL_APB2_GRP1_EnableClock+0x2c>)
 801421e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014220:	4907      	ldr	r1, [pc, #28]	; (8014240 <LL_APB2_GRP1_EnableClock+0x2c>)
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	4313      	orrs	r3, r2
 8014226:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8014228:	4b05      	ldr	r3, [pc, #20]	; (8014240 <LL_APB2_GRP1_EnableClock+0x2c>)
 801422a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	4013      	ands	r3, r2
 8014230:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014232:	68fb      	ldr	r3, [r7, #12]
}
 8014234:	bf00      	nop
 8014236:	3714      	adds	r7, #20
 8014238:	46bd      	mov	sp, r7
 801423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423e:	4770      	bx	lr
 8014240:	40023800 	.word	0x40023800

08014244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8014244:	b5b0      	push	{r4, r5, r7, lr}
 8014246:	b088      	sub	sp, #32
 8014248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801424a:	f001 f831 	bl	80152b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801424e:	f000 f871 	bl	8014334 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8014252:	f000 fadb 	bl	801480c <MX_GPIO_Init>
  MX_DMA_Init();
 8014256:	f000 faa1 	bl	801479c <MX_DMA_Init>
  MX_USART6_UART_Init();
 801425a:	f000 fa75 	bl	8014748 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 801425e:	f000 fa3d 	bl	80146dc <MX_TIM7_Init>
  MX_SPI1_Init();
 8014262:	f000 f973 	bl	801454c <MX_SPI1_Init>
  MX_ADC1_Init();
 8014266:	f000 f8cd 	bl	8014404 <MX_ADC1_Init>
  MX_ADC2_Init();
 801426a:	f000 f91d 	bl	80144a8 <MX_ADC2_Init>
  MX_TIM3_Init();
 801426e:	f000 f9bf 	bl	80145f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  debugInit();
 8014272:	f7fc fe24 	bl	8010ebe <debugInit>
  uartInit();
 8014276:	f7fc fe33 	bl	8010ee0 <uartInit>
  uartDmaInit();
 801427a:	f7fc fe4f 	bl	8010f1c <uartDmaInit>
*/


//  InitTick(72000000, 1000000U);			//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 801427e:	4b24      	ldr	r3, [pc, #144]	; (8014310 <main+0xcc>)
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	68da      	ldr	r2, [r3, #12]
 8014284:	4b22      	ldr	r3, [pc, #136]	; (8014310 <main+0xcc>)
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	f042 0220 	orr.w	r2, r2, #32
 801428c:	60da      	str	r2, [r3, #12]


  freertos_IntroTitle();
 801428e:	f000 fb49 	bl	8014924 <freertos_IntroTitle>

  check_enter_bootloader();
 8014292:	f7f0 fab9 	bl	8004808 <check_enter_bootloader>

  int err = platformInit();
 8014296:	f7fb fcbd 	bl	800fc14 <platformInit>
 801429a:	61f8      	str	r0, [r7, #28]
  if (err != 0) {
 801429c:	69fb      	ldr	r3, [r7, #28]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d000      	beq.n	80142a4 <main+0x60>
  	    // The firmware is running on the wrong hardware. Halt
  	    while(1);
 80142a2:	e7fe      	b.n	80142a2 <main+0x5e>
  }

  HAL_TIM_Base_Start_IT(&htim7);
 80142a4:	481b      	ldr	r0, [pc, #108]	; (8014314 <main+0xd0>)
 80142a6:	f004 fabb 	bl	8018820 <HAL_TIM_Base_Start_IT>
  t1 = DWT->CYCCNT;
 80142aa:	4b1b      	ldr	r3, [pc, #108]	; (8014318 <main+0xd4>)
 80142ac:	685b      	ldr	r3, [r3, #4]
 80142ae:	4a1b      	ldr	r2, [pc, #108]	; (801431c <main+0xd8>)
 80142b0:	6013      	str	r3, [r2, #0]
//  vTaskDelay(M2T(2000));
  delay_us(1000);	// 1002 us
 80142b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80142b6:	f000 fbc1 	bl	8014a3c <delay_us>
//  vTaskDelay(1);	// 입력값에 상관없이 약 7us, 정상적인 동작 안됨
//  usDelay(10);
//  HAL_Delay(1);		// 1350 us
  t2 = DWT->CYCCNT;
 80142ba:	4b17      	ldr	r3, [pc, #92]	; (8014318 <main+0xd4>)
 80142bc:	685b      	ldr	r3, [r3, #4]
 80142be:	4a18      	ldr	r2, [pc, #96]	; (8014320 <main+0xdc>)
 80142c0:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Stop_IT(&htim7);
 80142c2:	4814      	ldr	r0, [pc, #80]	; (8014314 <main+0xd0>)
 80142c4:	f004 fb1c 	bl	8018900 <HAL_TIM_Base_Stop_IT>
  //  DEBUG_PRINT("delay = %.2f(us)\n",(float)(t2-t1)/CLOCK_PER_USEC);
  DEBUG_PRINT("delay = %d(us)\n",(uint32_t)(t2-t1)/CLOCK_PER_USEC);
 80142c8:	4b15      	ldr	r3, [pc, #84]	; (8014320 <main+0xdc>)
 80142ca:	681a      	ldr	r2, [r3, #0]
 80142cc:	4b13      	ldr	r3, [pc, #76]	; (801431c <main+0xd8>)
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	1ad3      	subs	r3, r2, r3
 80142d2:	4a14      	ldr	r2, [pc, #80]	; (8014324 <main+0xe0>)
 80142d4:	fba2 2303 	umull	r2, r3, r2, r3
 80142d8:	091b      	lsrs	r3, r3, #4
 80142da:	461a      	mov	r2, r3
 80142dc:	4912      	ldr	r1, [pc, #72]	; (8014328 <main+0xe4>)
 80142de:	2000      	movs	r0, #0
 80142e0:	f7fc fbd8 	bl	8010a94 <SEGGER_RTT_printf>

	  DEBUG_PRINT("ADC Measure - Current:[%04d]\t Voltage:[%04d]\n", adc1Val, adc2Val);
	  delay_us(1000);
  }
*/
  systemLaunch();
 80142e4:	f7f1 fb24 	bl	8005930 <systemLaunch>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80142e8:	4b10      	ldr	r3, [pc, #64]	; (801432c <main+0xe8>)
 80142ea:	463c      	mov	r4, r7
 80142ec:	461d      	mov	r5, r3
 80142ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80142f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80142f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80142fa:	463b      	mov	r3, r7
 80142fc:	2100      	movs	r1, #0
 80142fe:	4618      	mov	r0, r3
 8014300:	f00a f8a5 	bl	801e44e <osThreadCreate>
 8014304:	4603      	mov	r3, r0
 8014306:	4a0a      	ldr	r2, [pc, #40]	; (8014330 <main+0xec>)
 8014308:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 801430a:	f00a f899 	bl	801e440 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 801430e:	e7fe      	b.n	801430e <main+0xca>
 8014310:	2000d000 	.word	0x2000d000
 8014314:	2000cfb8 	.word	0x2000cfb8
 8014318:	e0001000 	.word	0xe0001000
 801431c:	2000d10c 	.word	0x2000d10c
 8014320:	2000d110 	.word	0x2000d110
 8014324:	38e38e39 	.word	0x38e38e39
 8014328:	0802c464 	.word	0x0802c464
 801432c:	0802c480 	.word	0x0802c480
 8014330:	2000d108 	.word	0x2000d108

08014334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b094      	sub	sp, #80	; 0x50
 8014338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801433a:	f107 0320 	add.w	r3, r7, #32
 801433e:	2230      	movs	r2, #48	; 0x30
 8014340:	2100      	movs	r1, #0
 8014342:	4618      	mov	r0, r3
 8014344:	f00f fae4 	bl	8023910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8014348:	f107 030c 	add.w	r3, r7, #12
 801434c:	2200      	movs	r2, #0
 801434e:	601a      	str	r2, [r3, #0]
 8014350:	605a      	str	r2, [r3, #4]
 8014352:	609a      	str	r2, [r3, #8]
 8014354:	60da      	str	r2, [r3, #12]
 8014356:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8014358:	2300      	movs	r3, #0
 801435a:	60bb      	str	r3, [r7, #8]
 801435c:	4b27      	ldr	r3, [pc, #156]	; (80143fc <SystemClock_Config+0xc8>)
 801435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014360:	4a26      	ldr	r2, [pc, #152]	; (80143fc <SystemClock_Config+0xc8>)
 8014362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014366:	6413      	str	r3, [r2, #64]	; 0x40
 8014368:	4b24      	ldr	r3, [pc, #144]	; (80143fc <SystemClock_Config+0xc8>)
 801436a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801436c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014370:	60bb      	str	r3, [r7, #8]
 8014372:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8014374:	2300      	movs	r3, #0
 8014376:	607b      	str	r3, [r7, #4]
 8014378:	4b21      	ldr	r3, [pc, #132]	; (8014400 <SystemClock_Config+0xcc>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	4a20      	ldr	r2, [pc, #128]	; (8014400 <SystemClock_Config+0xcc>)
 801437e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014382:	6013      	str	r3, [r2, #0]
 8014384:	4b1e      	ldr	r3, [pc, #120]	; (8014400 <SystemClock_Config+0xcc>)
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801438c:	607b      	str	r3, [r7, #4]
 801438e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8014390:	2301      	movs	r3, #1
 8014392:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8014394:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8014398:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801439a:	2302      	movs	r3, #2
 801439c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801439e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80143a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80143a4:	2304      	movs	r3, #4
 80143a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80143a8:	2348      	movs	r3, #72	; 0x48
 80143aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80143ac:	2302      	movs	r3, #2
 80143ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80143b0:	2303      	movs	r3, #3
 80143b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80143b4:	f107 0320 	add.w	r3, r7, #32
 80143b8:	4618      	mov	r0, r3
 80143ba:	f003 fd49 	bl	8017e50 <HAL_RCC_OscConfig>
 80143be:	4603      	mov	r3, r0
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d001      	beq.n	80143c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80143c4:	f000 fb66 	bl	8014a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80143c8:	230f      	movs	r3, #15
 80143ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80143cc:	2302      	movs	r3, #2
 80143ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80143d0:	2300      	movs	r3, #0
 80143d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80143d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80143d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80143da:	2300      	movs	r3, #0
 80143dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80143de:	f107 030c 	add.w	r3, r7, #12
 80143e2:	2102      	movs	r1, #2
 80143e4:	4618      	mov	r0, r3
 80143e6:	f003 ffab 	bl	8018340 <HAL_RCC_ClockConfig>
 80143ea:	4603      	mov	r3, r0
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d001      	beq.n	80143f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80143f0:	f000 fb50 	bl	8014a94 <Error_Handler>
  }
}
 80143f4:	bf00      	nop
 80143f6:	3750      	adds	r7, #80	; 0x50
 80143f8:	46bd      	mov	sp, r7
 80143fa:	bd80      	pop	{r7, pc}
 80143fc:	40023800 	.word	0x40023800
 8014400:	40007000 	.word	0x40007000

08014404 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b084      	sub	sp, #16
 8014408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801440a:	463b      	mov	r3, r7
 801440c:	2200      	movs	r2, #0
 801440e:	601a      	str	r2, [r3, #0]
 8014410:	605a      	str	r2, [r3, #4]
 8014412:	609a      	str	r2, [r3, #8]
 8014414:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8014416:	4b21      	ldr	r3, [pc, #132]	; (801449c <MX_ADC1_Init+0x98>)
 8014418:	4a21      	ldr	r2, [pc, #132]	; (80144a0 <MX_ADC1_Init+0x9c>)
 801441a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 801441c:	4b1f      	ldr	r3, [pc, #124]	; (801449c <MX_ADC1_Init+0x98>)
 801441e:	2200      	movs	r2, #0
 8014420:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8014422:	4b1e      	ldr	r3, [pc, #120]	; (801449c <MX_ADC1_Init+0x98>)
 8014424:	2200      	movs	r2, #0
 8014426:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8014428:	4b1c      	ldr	r3, [pc, #112]	; (801449c <MX_ADC1_Init+0x98>)
 801442a:	2200      	movs	r2, #0
 801442c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 801442e:	4b1b      	ldr	r3, [pc, #108]	; (801449c <MX_ADC1_Init+0x98>)
 8014430:	2201      	movs	r2, #1
 8014432:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8014434:	4b19      	ldr	r3, [pc, #100]	; (801449c <MX_ADC1_Init+0x98>)
 8014436:	2200      	movs	r2, #0
 8014438:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801443c:	4b17      	ldr	r3, [pc, #92]	; (801449c <MX_ADC1_Init+0x98>)
 801443e:	2200      	movs	r2, #0
 8014440:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8014442:	4b16      	ldr	r3, [pc, #88]	; (801449c <MX_ADC1_Init+0x98>)
 8014444:	4a17      	ldr	r2, [pc, #92]	; (80144a4 <MX_ADC1_Init+0xa0>)
 8014446:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8014448:	4b14      	ldr	r3, [pc, #80]	; (801449c <MX_ADC1_Init+0x98>)
 801444a:	2200      	movs	r2, #0
 801444c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 801444e:	4b13      	ldr	r3, [pc, #76]	; (801449c <MX_ADC1_Init+0x98>)
 8014450:	2201      	movs	r2, #1
 8014452:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8014454:	4b11      	ldr	r3, [pc, #68]	; (801449c <MX_ADC1_Init+0x98>)
 8014456:	2201      	movs	r2, #1
 8014458:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801445c:	4b0f      	ldr	r3, [pc, #60]	; (801449c <MX_ADC1_Init+0x98>)
 801445e:	2201      	movs	r2, #1
 8014460:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8014462:	480e      	ldr	r0, [pc, #56]	; (801449c <MX_ADC1_Init+0x98>)
 8014464:	f000 ffba 	bl	80153dc <HAL_ADC_Init>
 8014468:	4603      	mov	r3, r0
 801446a:	2b00      	cmp	r3, #0
 801446c:	d001      	beq.n	8014472 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 801446e:	f000 fb11 	bl	8014a94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8014472:	230b      	movs	r3, #11
 8014474:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8014476:	2301      	movs	r3, #1
 8014478:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 801447a:	2307      	movs	r3, #7
 801447c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801447e:	463b      	mov	r3, r7
 8014480:	4619      	mov	r1, r3
 8014482:	4806      	ldr	r0, [pc, #24]	; (801449c <MX_ADC1_Init+0x98>)
 8014484:	f001 f91c 	bl	80156c0 <HAL_ADC_ConfigChannel>
 8014488:	4603      	mov	r3, r0
 801448a:	2b00      	cmp	r3, #0
 801448c:	d001      	beq.n	8014492 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 801448e:	f000 fb01 	bl	8014a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8014492:	bf00      	nop
 8014494:	3710      	adds	r7, #16
 8014496:	46bd      	mov	sp, r7
 8014498:	bd80      	pop	{r7, pc}
 801449a:	bf00      	nop
 801449c:	2000ce20 	.word	0x2000ce20
 80144a0:	40012000 	.word	0x40012000
 80144a4:	0f000001 	.word	0x0f000001

080144a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b084      	sub	sp, #16
 80144ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80144ae:	463b      	mov	r3, r7
 80144b0:	2200      	movs	r2, #0
 80144b2:	601a      	str	r2, [r3, #0]
 80144b4:	605a      	str	r2, [r3, #4]
 80144b6:	609a      	str	r2, [r3, #8]
 80144b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80144ba:	4b21      	ldr	r3, [pc, #132]	; (8014540 <MX_ADC2_Init+0x98>)
 80144bc:	4a21      	ldr	r2, [pc, #132]	; (8014544 <MX_ADC2_Init+0x9c>)
 80144be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80144c0:	4b1f      	ldr	r3, [pc, #124]	; (8014540 <MX_ADC2_Init+0x98>)
 80144c2:	2200      	movs	r2, #0
 80144c4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80144c6:	4b1e      	ldr	r3, [pc, #120]	; (8014540 <MX_ADC2_Init+0x98>)
 80144c8:	2200      	movs	r2, #0
 80144ca:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80144cc:	4b1c      	ldr	r3, [pc, #112]	; (8014540 <MX_ADC2_Init+0x98>)
 80144ce:	2200      	movs	r2, #0
 80144d0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80144d2:	4b1b      	ldr	r3, [pc, #108]	; (8014540 <MX_ADC2_Init+0x98>)
 80144d4:	2201      	movs	r2, #1
 80144d6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80144d8:	4b19      	ldr	r3, [pc, #100]	; (8014540 <MX_ADC2_Init+0x98>)
 80144da:	2200      	movs	r2, #0
 80144dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80144e0:	4b17      	ldr	r3, [pc, #92]	; (8014540 <MX_ADC2_Init+0x98>)
 80144e2:	2200      	movs	r2, #0
 80144e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80144e6:	4b16      	ldr	r3, [pc, #88]	; (8014540 <MX_ADC2_Init+0x98>)
 80144e8:	4a17      	ldr	r2, [pc, #92]	; (8014548 <MX_ADC2_Init+0xa0>)
 80144ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80144ec:	4b14      	ldr	r3, [pc, #80]	; (8014540 <MX_ADC2_Init+0x98>)
 80144ee:	2200      	movs	r2, #0
 80144f0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80144f2:	4b13      	ldr	r3, [pc, #76]	; (8014540 <MX_ADC2_Init+0x98>)
 80144f4:	2201      	movs	r2, #1
 80144f6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80144f8:	4b11      	ldr	r3, [pc, #68]	; (8014540 <MX_ADC2_Init+0x98>)
 80144fa:	2201      	movs	r2, #1
 80144fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8014500:	4b0f      	ldr	r3, [pc, #60]	; (8014540 <MX_ADC2_Init+0x98>)
 8014502:	2201      	movs	r2, #1
 8014504:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8014506:	480e      	ldr	r0, [pc, #56]	; (8014540 <MX_ADC2_Init+0x98>)
 8014508:	f000 ff68 	bl	80153dc <HAL_ADC_Init>
 801450c:	4603      	mov	r3, r0
 801450e:	2b00      	cmp	r3, #0
 8014510:	d001      	beq.n	8014516 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8014512:	f000 fabf 	bl	8014a94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8014516:	230c      	movs	r3, #12
 8014518:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 801451a:	2301      	movs	r3, #1
 801451c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 801451e:	2307      	movs	r3, #7
 8014520:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8014522:	463b      	mov	r3, r7
 8014524:	4619      	mov	r1, r3
 8014526:	4806      	ldr	r0, [pc, #24]	; (8014540 <MX_ADC2_Init+0x98>)
 8014528:	f001 f8ca 	bl	80156c0 <HAL_ADC_ConfigChannel>
 801452c:	4603      	mov	r3, r0
 801452e:	2b00      	cmp	r3, #0
 8014530:	d001      	beq.n	8014536 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8014532:	f000 faaf 	bl	8014a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8014536:	bf00      	nop
 8014538:	3710      	adds	r7, #16
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
 801453e:	bf00      	nop
 8014540:	2000ce68 	.word	0x2000ce68
 8014544:	40012100 	.word	0x40012100
 8014548:	0f000001 	.word	0x0f000001

0801454c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b090      	sub	sp, #64	; 0x40
 8014550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8014552:	f107 0318 	add.w	r3, r7, #24
 8014556:	2228      	movs	r2, #40	; 0x28
 8014558:	2100      	movs	r1, #0
 801455a:	4618      	mov	r0, r3
 801455c:	f00f f9d8 	bl	8023910 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014560:	463b      	mov	r3, r7
 8014562:	2200      	movs	r2, #0
 8014564:	601a      	str	r2, [r3, #0]
 8014566:	605a      	str	r2, [r3, #4]
 8014568:	609a      	str	r2, [r3, #8]
 801456a:	60da      	str	r2, [r3, #12]
 801456c:	611a      	str	r2, [r3, #16]
 801456e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8014570:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8014574:	f7ff fe4e 	bl	8014214 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8014578:	2001      	movs	r0, #1
 801457a:	f7ff fe33 	bl	80141e4 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 801457e:	23e0      	movs	r3, #224	; 0xe0
 8014580:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8014582:	2302      	movs	r3, #2
 8014584:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8014586:	2303      	movs	r3, #3
 8014588:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 801458a:	2300      	movs	r3, #0
 801458c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 801458e:	2300      	movs	r3, #0
 8014590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8014592:	2305      	movs	r3, #5
 8014594:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014596:	463b      	mov	r3, r7
 8014598:	4619      	mov	r1, r3
 801459a:	4813      	ldr	r0, [pc, #76]	; (80145e8 <MX_SPI1_Init+0x9c>)
 801459c:	f006 fb77 	bl	801ac8e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80145a0:	2300      	movs	r3, #0
 80145a2:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80145a4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80145a8:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80145aa:	2300      	movs	r3, #0
 80145ac:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80145ae:	2302      	movs	r3, #2
 80145b0:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80145b2:	2301      	movs	r3, #1
 80145b4:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80145b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80145ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 80145bc:	2310      	movs	r3, #16
 80145be:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80145c0:	2300      	movs	r3, #0
 80145c2:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80145c4:	2300      	movs	r3, #0
 80145c6:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80145c8:	230a      	movs	r3, #10
 80145ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80145cc:	f107 0318 	add.w	r3, r7, #24
 80145d0:	4619      	mov	r1, r3
 80145d2:	4806      	ldr	r0, [pc, #24]	; (80145ec <MX_SPI1_Init+0xa0>)
 80145d4:	f006 fbff 	bl	801add6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80145d8:	2100      	movs	r1, #0
 80145da:	4804      	ldr	r0, [pc, #16]	; (80145ec <MX_SPI1_Init+0xa0>)
 80145dc:	f7ff fdee 	bl	80141bc <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80145e0:	bf00      	nop
 80145e2:	3740      	adds	r7, #64	; 0x40
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bd80      	pop	{r7, pc}
 80145e8:	40020000 	.word	0x40020000
 80145ec:	40013000 	.word	0x40013000

080145f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b08e      	sub	sp, #56	; 0x38
 80145f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80145f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80145fa:	2200      	movs	r2, #0
 80145fc:	601a      	str	r2, [r3, #0]
 80145fe:	605a      	str	r2, [r3, #4]
 8014600:	609a      	str	r2, [r3, #8]
 8014602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8014604:	f107 0320 	add.w	r3, r7, #32
 8014608:	2200      	movs	r2, #0
 801460a:	601a      	str	r2, [r3, #0]
 801460c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801460e:	1d3b      	adds	r3, r7, #4
 8014610:	2200      	movs	r2, #0
 8014612:	601a      	str	r2, [r3, #0]
 8014614:	605a      	str	r2, [r3, #4]
 8014616:	609a      	str	r2, [r3, #8]
 8014618:	60da      	str	r2, [r3, #12]
 801461a:	611a      	str	r2, [r3, #16]
 801461c:	615a      	str	r2, [r3, #20]
 801461e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8014620:	4b2c      	ldr	r3, [pc, #176]	; (80146d4 <MX_TIM3_Init+0xe4>)
 8014622:	4a2d      	ldr	r2, [pc, #180]	; (80146d8 <MX_TIM3_Init+0xe8>)
 8014624:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8014626:	4b2b      	ldr	r3, [pc, #172]	; (80146d4 <MX_TIM3_Init+0xe4>)
 8014628:	f240 32e7 	movw	r2, #999	; 0x3e7
 801462c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801462e:	4b29      	ldr	r3, [pc, #164]	; (80146d4 <MX_TIM3_Init+0xe4>)
 8014630:	2200      	movs	r2, #0
 8014632:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 71;
 8014634:	4b27      	ldr	r3, [pc, #156]	; (80146d4 <MX_TIM3_Init+0xe4>)
 8014636:	2247      	movs	r2, #71	; 0x47
 8014638:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801463a:	4b26      	ldr	r3, [pc, #152]	; (80146d4 <MX_TIM3_Init+0xe4>)
 801463c:	2200      	movs	r2, #0
 801463e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8014640:	4b24      	ldr	r3, [pc, #144]	; (80146d4 <MX_TIM3_Init+0xe4>)
 8014642:	2200      	movs	r2, #0
 8014644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8014646:	4823      	ldr	r0, [pc, #140]	; (80146d4 <MX_TIM3_Init+0xe4>)
 8014648:	f004 f89a 	bl	8018780 <HAL_TIM_Base_Init>
 801464c:	4603      	mov	r3, r0
 801464e:	2b00      	cmp	r3, #0
 8014650:	d001      	beq.n	8014656 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8014652:	f000 fa1f 	bl	8014a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8014656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801465a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 801465c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014660:	4619      	mov	r1, r3
 8014662:	481c      	ldr	r0, [pc, #112]	; (80146d4 <MX_TIM3_Init+0xe4>)
 8014664:	f004 fcbe 	bl	8018fe4 <HAL_TIM_ConfigClockSource>
 8014668:	4603      	mov	r3, r0
 801466a:	2b00      	cmp	r3, #0
 801466c:	d001      	beq.n	8014672 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 801466e:	f000 fa11 	bl	8014a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8014672:	4818      	ldr	r0, [pc, #96]	; (80146d4 <MX_TIM3_Init+0xe4>)
 8014674:	f004 f973 	bl	801895e <HAL_TIM_PWM_Init>
 8014678:	4603      	mov	r3, r0
 801467a:	2b00      	cmp	r3, #0
 801467c:	d001      	beq.n	8014682 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 801467e:	f000 fa09 	bl	8014a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8014682:	2300      	movs	r3, #0
 8014684:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8014686:	2300      	movs	r3, #0
 8014688:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801468a:	f107 0320 	add.w	r3, r7, #32
 801468e:	4619      	mov	r1, r3
 8014690:	4810      	ldr	r0, [pc, #64]	; (80146d4 <MX_TIM3_Init+0xe4>)
 8014692:	f005 f8bd 	bl	8019810 <HAL_TIMEx_MasterConfigSynchronization>
 8014696:	4603      	mov	r3, r0
 8014698:	2b00      	cmp	r3, #0
 801469a:	d001      	beq.n	80146a0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 801469c:	f000 f9fa 	bl	8014a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80146a0:	2360      	movs	r3, #96	; 0x60
 80146a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 36;
 80146a4:	2324      	movs	r3, #36	; 0x24
 80146a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80146a8:	2300      	movs	r3, #0
 80146aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80146ac:	2300      	movs	r3, #0
 80146ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80146b0:	1d3b      	adds	r3, r7, #4
 80146b2:	2200      	movs	r2, #0
 80146b4:	4619      	mov	r1, r3
 80146b6:	4807      	ldr	r0, [pc, #28]	; (80146d4 <MX_TIM3_Init+0xe4>)
 80146b8:	f004 fbd2 	bl	8018e60 <HAL_TIM_PWM_ConfigChannel>
 80146bc:	4603      	mov	r3, r0
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d001      	beq.n	80146c6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80146c2:	f000 f9e7 	bl	8014a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80146c6:	4803      	ldr	r0, [pc, #12]	; (80146d4 <MX_TIM3_Init+0xe4>)
 80146c8:	f000 fb38 	bl	8014d3c <HAL_TIM_MspPostInit>

}
 80146cc:	bf00      	nop
 80146ce:	3738      	adds	r7, #56	; 0x38
 80146d0:	46bd      	mov	sp, r7
 80146d2:	bd80      	pop	{r7, pc}
 80146d4:	2000cf70 	.word	0x2000cf70
 80146d8:	40000400 	.word	0x40000400

080146dc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b082      	sub	sp, #8
 80146e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80146e2:	463b      	mov	r3, r7
 80146e4:	2200      	movs	r2, #0
 80146e6:	601a      	str	r2, [r3, #0]
 80146e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80146ea:	4b15      	ldr	r3, [pc, #84]	; (8014740 <MX_TIM7_Init+0x64>)
 80146ec:	4a15      	ldr	r2, [pc, #84]	; (8014744 <MX_TIM7_Init+0x68>)
 80146ee:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 80146f0:	4b13      	ldr	r3, [pc, #76]	; (8014740 <MX_TIM7_Init+0x64>)
 80146f2:	2247      	movs	r2, #71	; 0x47
 80146f4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80146f6:	4b12      	ldr	r3, [pc, #72]	; (8014740 <MX_TIM7_Init+0x64>)
 80146f8:	2200      	movs	r2, #0
 80146fa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80146fc:	4b10      	ldr	r3, [pc, #64]	; (8014740 <MX_TIM7_Init+0x64>)
 80146fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014702:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8014704:	4b0e      	ldr	r3, [pc, #56]	; (8014740 <MX_TIM7_Init+0x64>)
 8014706:	2200      	movs	r2, #0
 8014708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801470a:	480d      	ldr	r0, [pc, #52]	; (8014740 <MX_TIM7_Init+0x64>)
 801470c:	f004 f838 	bl	8018780 <HAL_TIM_Base_Init>
 8014710:	4603      	mov	r3, r0
 8014712:	2b00      	cmp	r3, #0
 8014714:	d001      	beq.n	801471a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8014716:	f000 f9bd 	bl	8014a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801471a:	2300      	movs	r3, #0
 801471c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801471e:	2300      	movs	r3, #0
 8014720:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8014722:	463b      	mov	r3, r7
 8014724:	4619      	mov	r1, r3
 8014726:	4806      	ldr	r0, [pc, #24]	; (8014740 <MX_TIM7_Init+0x64>)
 8014728:	f005 f872 	bl	8019810 <HAL_TIMEx_MasterConfigSynchronization>
 801472c:	4603      	mov	r3, r0
 801472e:	2b00      	cmp	r3, #0
 8014730:	d001      	beq.n	8014736 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8014732:	f000 f9af 	bl	8014a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8014736:	bf00      	nop
 8014738:	3708      	adds	r7, #8
 801473a:	46bd      	mov	sp, r7
 801473c:	bd80      	pop	{r7, pc}
 801473e:	bf00      	nop
 8014740:	2000cfb8 	.word	0x2000cfb8
 8014744:	40001400 	.word	0x40001400

08014748 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8014748:	b580      	push	{r7, lr}
 801474a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 801474c:	4b11      	ldr	r3, [pc, #68]	; (8014794 <MX_USART6_UART_Init+0x4c>)
 801474e:	4a12      	ldr	r2, [pc, #72]	; (8014798 <MX_USART6_UART_Init+0x50>)
 8014750:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8014752:	4b10      	ldr	r3, [pc, #64]	; (8014794 <MX_USART6_UART_Init+0x4c>)
 8014754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8014758:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 801475a:	4b0e      	ldr	r3, [pc, #56]	; (8014794 <MX_USART6_UART_Init+0x4c>)
 801475c:	2200      	movs	r2, #0
 801475e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8014760:	4b0c      	ldr	r3, [pc, #48]	; (8014794 <MX_USART6_UART_Init+0x4c>)
 8014762:	2200      	movs	r2, #0
 8014764:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8014766:	4b0b      	ldr	r3, [pc, #44]	; (8014794 <MX_USART6_UART_Init+0x4c>)
 8014768:	2200      	movs	r2, #0
 801476a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 801476c:	4b09      	ldr	r3, [pc, #36]	; (8014794 <MX_USART6_UART_Init+0x4c>)
 801476e:	220c      	movs	r2, #12
 8014770:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014772:	4b08      	ldr	r3, [pc, #32]	; (8014794 <MX_USART6_UART_Init+0x4c>)
 8014774:	2200      	movs	r2, #0
 8014776:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8014778:	4b06      	ldr	r3, [pc, #24]	; (8014794 <MX_USART6_UART_Init+0x4c>)
 801477a:	2200      	movs	r2, #0
 801477c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 801477e:	4805      	ldr	r0, [pc, #20]	; (8014794 <MX_USART6_UART_Init+0x4c>)
 8014780:	f005 f8d6 	bl	8019930 <HAL_UART_Init>
 8014784:	4603      	mov	r3, r0
 8014786:	2b00      	cmp	r3, #0
 8014788:	d001      	beq.n	801478e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 801478a:	f000 f983 	bl	8014a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 801478e:	bf00      	nop
 8014790:	bd80      	pop	{r7, pc}
 8014792:	bf00      	nop
 8014794:	2000d000 	.word	0x2000d000
 8014798:	40011400 	.word	0x40011400

0801479c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 801479c:	b580      	push	{r7, lr}
 801479e:	b082      	sub	sp, #8
 80147a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80147a2:	2300      	movs	r3, #0
 80147a4:	607b      	str	r3, [r7, #4]
 80147a6:	4b18      	ldr	r3, [pc, #96]	; (8014808 <MX_DMA_Init+0x6c>)
 80147a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147aa:	4a17      	ldr	r2, [pc, #92]	; (8014808 <MX_DMA_Init+0x6c>)
 80147ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80147b0:	6313      	str	r3, [r2, #48]	; 0x30
 80147b2:	4b15      	ldr	r3, [pc, #84]	; (8014808 <MX_DMA_Init+0x6c>)
 80147b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80147ba:	607b      	str	r3, [r7, #4]
 80147bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80147be:	2200      	movs	r2, #0
 80147c0:	2105      	movs	r1, #5
 80147c2:	2038      	movs	r0, #56	; 0x38
 80147c4:	f001 faf7 	bl	8015db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80147c8:	2038      	movs	r0, #56	; 0x38
 80147ca:	f001 fb10 	bl	8015dee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80147ce:	2200      	movs	r2, #0
 80147d0:	2105      	movs	r1, #5
 80147d2:	2039      	movs	r0, #57	; 0x39
 80147d4:	f001 faef 	bl	8015db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80147d8:	2039      	movs	r0, #57	; 0x39
 80147da:	f001 fb08 	bl	8015dee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80147de:	2200      	movs	r2, #0
 80147e0:	2105      	movs	r1, #5
 80147e2:	203a      	movs	r0, #58	; 0x3a
 80147e4:	f001 fae7 	bl	8015db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80147e8:	203a      	movs	r0, #58	; 0x3a
 80147ea:	f001 fb00 	bl	8015dee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80147ee:	2200      	movs	r2, #0
 80147f0:	2105      	movs	r1, #5
 80147f2:	2046      	movs	r0, #70	; 0x46
 80147f4:	f001 fadf 	bl	8015db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80147f8:	2046      	movs	r0, #70	; 0x46
 80147fa:	f001 faf8 	bl	8015dee <HAL_NVIC_EnableIRQ>

}
 80147fe:	bf00      	nop
 8014800:	3708      	adds	r7, #8
 8014802:	46bd      	mov	sp, r7
 8014804:	bd80      	pop	{r7, pc}
 8014806:	bf00      	nop
 8014808:	40023800 	.word	0x40023800

0801480c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b08a      	sub	sp, #40	; 0x28
 8014810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014812:	f107 0314 	add.w	r3, r7, #20
 8014816:	2200      	movs	r2, #0
 8014818:	601a      	str	r2, [r3, #0]
 801481a:	605a      	str	r2, [r3, #4]
 801481c:	609a      	str	r2, [r3, #8]
 801481e:	60da      	str	r2, [r3, #12]
 8014820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8014822:	2300      	movs	r3, #0
 8014824:	613b      	str	r3, [r7, #16]
 8014826:	4b36      	ldr	r3, [pc, #216]	; (8014900 <MX_GPIO_Init+0xf4>)
 8014828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801482a:	4a35      	ldr	r2, [pc, #212]	; (8014900 <MX_GPIO_Init+0xf4>)
 801482c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014830:	6313      	str	r3, [r2, #48]	; 0x30
 8014832:	4b33      	ldr	r3, [pc, #204]	; (8014900 <MX_GPIO_Init+0xf4>)
 8014834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801483a:	613b      	str	r3, [r7, #16]
 801483c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801483e:	2300      	movs	r3, #0
 8014840:	60fb      	str	r3, [r7, #12]
 8014842:	4b2f      	ldr	r3, [pc, #188]	; (8014900 <MX_GPIO_Init+0xf4>)
 8014844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014846:	4a2e      	ldr	r2, [pc, #184]	; (8014900 <MX_GPIO_Init+0xf4>)
 8014848:	f043 0304 	orr.w	r3, r3, #4
 801484c:	6313      	str	r3, [r2, #48]	; 0x30
 801484e:	4b2c      	ldr	r3, [pc, #176]	; (8014900 <MX_GPIO_Init+0xf4>)
 8014850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014852:	f003 0304 	and.w	r3, r3, #4
 8014856:	60fb      	str	r3, [r7, #12]
 8014858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801485a:	2300      	movs	r3, #0
 801485c:	60bb      	str	r3, [r7, #8]
 801485e:	4b28      	ldr	r3, [pc, #160]	; (8014900 <MX_GPIO_Init+0xf4>)
 8014860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014862:	4a27      	ldr	r2, [pc, #156]	; (8014900 <MX_GPIO_Init+0xf4>)
 8014864:	f043 0301 	orr.w	r3, r3, #1
 8014868:	6313      	str	r3, [r2, #48]	; 0x30
 801486a:	4b25      	ldr	r3, [pc, #148]	; (8014900 <MX_GPIO_Init+0xf4>)
 801486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801486e:	f003 0301 	and.w	r3, r3, #1
 8014872:	60bb      	str	r3, [r7, #8]
 8014874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8014876:	2300      	movs	r3, #0
 8014878:	607b      	str	r3, [r7, #4]
 801487a:	4b21      	ldr	r3, [pc, #132]	; (8014900 <MX_GPIO_Init+0xf4>)
 801487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801487e:	4a20      	ldr	r2, [pc, #128]	; (8014900 <MX_GPIO_Init+0xf4>)
 8014880:	f043 0302 	orr.w	r3, r3, #2
 8014884:	6313      	str	r3, [r2, #48]	; 0x30
 8014886:	4b1e      	ldr	r3, [pc, #120]	; (8014900 <MX_GPIO_Init+0xf4>)
 8014888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801488a:	f003 0302 	and.w	r3, r3, #2
 801488e:	607b      	str	r3, [r7, #4]
 8014890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_PIN_GPIO_Port, SPI1_NSS_PIN_Pin, GPIO_PIN_SET);
 8014892:	2201      	movs	r2, #1
 8014894:	2110      	movs	r1, #16
 8014896:	481b      	ldr	r0, [pc, #108]	; (8014904 <MX_GPIO_Init+0xf8>)
 8014898:	f002 f870 	bl	801697c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 801489c:	2200      	movs	r2, #0
 801489e:	2120      	movs	r1, #32
 80148a0:	4819      	ldr	r0, [pc, #100]	; (8014908 <MX_GPIO_Init+0xfc>)
 80148a2:	f002 f86b 	bl	801697c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_PIN_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_PIN_Pin;
 80148a6:	2310      	movs	r3, #16
 80148a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80148aa:	2301      	movs	r3, #1
 80148ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80148ae:	2300      	movs	r3, #0
 80148b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80148b2:	2303      	movs	r3, #3
 80148b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_PIN_GPIO_Port, &GPIO_InitStruct);
 80148b6:	f107 0314 	add.w	r3, r7, #20
 80148ba:	4619      	mov	r1, r3
 80148bc:	4811      	ldr	r0, [pc, #68]	; (8014904 <MX_GPIO_Init+0xf8>)
 80148be:	f001 fec1 	bl	8016644 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_INT_Pin */
  GPIO_InitStruct.Pin = SPI1_INT_Pin;
 80148c2:	2310      	movs	r3, #16
 80148c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80148c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80148ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80148cc:	2300      	movs	r3, #0
 80148ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_INT_GPIO_Port, &GPIO_InitStruct);
 80148d0:	f107 0314 	add.w	r3, r7, #20
 80148d4:	4619      	mov	r1, r3
 80148d6:	480d      	ldr	r0, [pc, #52]	; (801490c <MX_GPIO_Init+0x100>)
 80148d8:	f001 feb4 	bl	8016644 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80148dc:	2320      	movs	r3, #32
 80148de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80148e0:	2301      	movs	r3, #1
 80148e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80148e4:	2300      	movs	r3, #0
 80148e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80148e8:	2300      	movs	r3, #0
 80148ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80148ec:	f107 0314 	add.w	r3, r7, #20
 80148f0:	4619      	mov	r1, r3
 80148f2:	4805      	ldr	r0, [pc, #20]	; (8014908 <MX_GPIO_Init+0xfc>)
 80148f4:	f001 fea6 	bl	8016644 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80148f8:	bf00      	nop
 80148fa:	3728      	adds	r7, #40	; 0x28
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}
 8014900:	40023800 	.word	0x40023800
 8014904:	40020000 	.word	0x40020000
 8014908:	40020400 	.word	0x40020400
 801490c:	40020800 	.word	0x40020800

08014910 <OSVersion>:

/* USER CODE BEGIN 4 */

char* OSVersion(void)
{
 8014910:	b480      	push	{r7}
 8014912:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 8014914:	4b02      	ldr	r3, [pc, #8]	; (8014920 <OSVersion+0x10>)
}
 8014916:	4618      	mov	r0, r3
 8014918:	46bd      	mov	sp, r7
 801491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491e:	4770      	bx	lr
 8014920:	0802c49c 	.word	0x0802c49c

08014924 <freertos_IntroTitle>:


void freertos_IntroTitle(void)
{
 8014924:	b580      	push	{r7, lr}
 8014926:	af00      	add	r7, sp, #0
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 8014928:	492e      	ldr	r1, [pc, #184]	; (80149e4 <freertos_IntroTitle+0xc0>)
 801492a:	2000      	movs	r0, #0
 801492c:	f7fc f8b2 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 8014930:	492d      	ldr	r1, [pc, #180]	; (80149e8 <freertos_IntroTitle+0xc4>)
 8014932:	2000      	movs	r0, #0
 8014934:	f7fc f8ae 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 8014938:	492c      	ldr	r1, [pc, #176]	; (80149ec <freertos_IntroTitle+0xc8>)
 801493a:	2000      	movs	r0, #0
 801493c:	f7fc f8aa 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 8014940:	492b      	ldr	r1, [pc, #172]	; (80149f0 <freertos_IntroTitle+0xcc>)
 8014942:	2000      	movs	r0, #0
 8014944:	f7fc f8a6 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 8014948:	492a      	ldr	r1, [pc, #168]	; (80149f4 <freertos_IntroTitle+0xd0>)
 801494a:	2000      	movs	r0, #0
 801494c:	f7fc f8a2 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 8014950:	4929      	ldr	r1, [pc, #164]	; (80149f8 <freertos_IntroTitle+0xd4>)
 8014952:	2000      	movs	r0, #0
 8014954:	f7fc f89e 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 8014958:	4928      	ldr	r1, [pc, #160]	; (80149fc <freertos_IntroTitle+0xd8>)
 801495a:	2000      	movs	r0, #0
 801495c:	f7fc f89a 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 8014960:	4927      	ldr	r1, [pc, #156]	; (8014a00 <freertos_IntroTitle+0xdc>)
 8014962:	2000      	movs	r0, #0
 8014964:	f7fc f896 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 8014968:	4926      	ldr	r1, [pc, #152]	; (8014a04 <freertos_IntroTitle+0xe0>)
 801496a:	2000      	movs	r0, #0
 801496c:	f7fc f892 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 8014970:	4925      	ldr	r1, [pc, #148]	; (8014a08 <freertos_IntroTitle+0xe4>)
 8014972:	2000      	movs	r0, #0
 8014974:	f7fc f88e 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 8014978:	4924      	ldr	r1, [pc, #144]	; (8014a0c <freertos_IntroTitle+0xe8>)
 801497a:	2000      	movs	r0, #0
 801497c:	f7fc f88a 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 8014980:	4923      	ldr	r1, [pc, #140]	; (8014a10 <freertos_IntroTitle+0xec>)
 8014982:	2000      	movs	r0, #0
 8014984:	f7fc f886 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 8014988:	4922      	ldr	r1, [pc, #136]	; (8014a14 <freertos_IntroTitle+0xf0>)
 801498a:	2000      	movs	r0, #0
 801498c:	f7fc f882 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 8014990:	4921      	ldr	r1, [pc, #132]	; (8014a18 <freertos_IntroTitle+0xf4>)
 8014992:	2000      	movs	r0, #0
 8014994:	f7fc f87e 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 8014998:	4920      	ldr	r1, [pc, #128]	; (8014a1c <freertos_IntroTitle+0xf8>)
 801499a:	2000      	movs	r0, #0
 801499c:	f7fc f87a 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 80149a0:	491f      	ldr	r1, [pc, #124]	; (8014a20 <freertos_IntroTitle+0xfc>)
 80149a2:	2000      	movs	r0, #0
 80149a4:	f7fc f876 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 80149a8:	491e      	ldr	r1, [pc, #120]	; (8014a24 <freertos_IntroTitle+0x100>)
 80149aa:	2000      	movs	r0, #0
 80149ac:	f7fc f872 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 80149b0:	491d      	ldr	r1, [pc, #116]	; (8014a28 <freertos_IntroTitle+0x104>)
 80149b2:	2000      	movs	r0, #0
 80149b4:	f7fc f86e 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 80149b8:	491c      	ldr	r1, [pc, #112]	; (8014a2c <freertos_IntroTitle+0x108>)
 80149ba:	2000      	movs	r0, #0
 80149bc:	f7fc f86a 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 80149c0:	f7ff ffa6 	bl	8014910 <OSVersion>
 80149c4:	4603      	mov	r3, r0
 80149c6:	461a      	mov	r2, r3
 80149c8:	4919      	ldr	r1, [pc, #100]	; (8014a30 <freertos_IntroTitle+0x10c>)
 80149ca:	2000      	movs	r0, #0
 80149cc:	f7fc f862 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 80149d0:	4918      	ldr	r1, [pc, #96]	; (8014a34 <freertos_IntroTitle+0x110>)
 80149d2:	2000      	movs	r0, #0
 80149d4:	f7fc f85e 	bl	8010a94 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n\n");
 80149d8:	4917      	ldr	r1, [pc, #92]	; (8014a38 <freertos_IntroTitle+0x114>)
 80149da:	2000      	movs	r0, #0
 80149dc:	f7fc f85a 	bl	8010a94 <SEGGER_RTT_printf>
}
 80149e0:	bf00      	nop
 80149e2:	bd80      	pop	{r7, pc}
 80149e4:	0802c4a4 	.word	0x0802c4a4
 80149e8:	0802c4e4 	.word	0x0802c4e4
 80149ec:	0802c538 	.word	0x0802c538
 80149f0:	0802c58c 	.word	0x0802c58c
 80149f4:	0802c5e0 	.word	0x0802c5e0
 80149f8:	0802c634 	.word	0x0802c634
 80149fc:	0802c688 	.word	0x0802c688
 8014a00:	0802c6dc 	.word	0x0802c6dc
 8014a04:	0802c730 	.word	0x0802c730
 8014a08:	0802c784 	.word	0x0802c784
 8014a0c:	0802c7d8 	.word	0x0802c7d8
 8014a10:	0802c82c 	.word	0x0802c82c
 8014a14:	0802c880 	.word	0x0802c880
 8014a18:	0802c8d4 	.word	0x0802c8d4
 8014a1c:	0802c928 	.word	0x0802c928
 8014a20:	0802c97c 	.word	0x0802c97c
 8014a24:	0802c9d0 	.word	0x0802c9d0
 8014a28:	0802ca24 	.word	0x0802ca24
 8014a2c:	0802ca6c 	.word	0x0802ca6c
 8014a30:	0802ca9c 	.word	0x0802ca9c
 8014a34:	0802cae0 	.word	0x0802cae0
 8014a38:	0802cb0c 	.word	0x0802cb0c

08014a3c <delay_us>:
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; 				// 시간 측정 초기화
  DWT->CYCCNT = 0;   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

void delay_us (uint16_t us)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b082      	sub	sp, #8
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	4603      	mov	r3, r0
 8014a44:	80fb      	strh	r3, [r7, #6]

	HAL_TIM_Base_Start_IT(&htim7);
 8014a46:	480a      	ldr	r0, [pc, #40]	; (8014a70 <delay_us+0x34>)
 8014a48:	f003 feea 	bl	8018820 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim7,0);  // set the counter value a 0
 8014a4c:	4b08      	ldr	r3, [pc, #32]	; (8014a70 <delay_us+0x34>)
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	2200      	movs	r2, #0
 8014a52:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 8014a54:	bf00      	nop
 8014a56:	4b06      	ldr	r3, [pc, #24]	; (8014a70 <delay_us+0x34>)
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014a5c:	88fb      	ldrh	r3, [r7, #6]
 8014a5e:	429a      	cmp	r2, r3
 8014a60:	d3f9      	bcc.n	8014a56 <delay_us+0x1a>
	HAL_TIM_Base_Stop_IT(&htim7);
 8014a62:	4803      	ldr	r0, [pc, #12]	; (8014a70 <delay_us+0x34>)
 8014a64:	f003 ff4c 	bl	8018900 <HAL_TIM_Base_Stop_IT>
}
 8014a68:	bf00      	nop
 8014a6a:	3708      	adds	r7, #8
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	bd80      	pop	{r7, pc}
 8014a70:	2000cfb8 	.word	0x2000cfb8

08014a74 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b082      	sub	sp, #8
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8014a7c:	f00d f894 	bl	8021ba8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	DEBUG_PRINT("[TASK] StartDefaultTask is running!\n");
 8014a80:	4903      	ldr	r1, [pc, #12]	; (8014a90 <StartDefaultTask+0x1c>)
 8014a82:	2000      	movs	r0, #0
 8014a84:	f7fc f806 	bl	8010a94 <SEGGER_RTT_printf>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8014a88:	2001      	movs	r0, #1
 8014a8a:	f009 fd2d 	bl	801e4e8 <osDelay>
 8014a8e:	e7fb      	b.n	8014a88 <StartDefaultTask+0x14>
 8014a90:	0802cb58 	.word	0x0802cb58

08014a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8014a94:	b480      	push	{r7}
 8014a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8014a98:	b672      	cpsid	i
}
 8014a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8014a9c:	e7fe      	b.n	8014a9c <Error_Handler+0x8>
	...

08014aa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b082      	sub	sp, #8
 8014aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	607b      	str	r3, [r7, #4]
 8014aaa:	4b16      	ldr	r3, [pc, #88]	; (8014b04 <HAL_MspInit+0x64>)
 8014aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014aae:	4a15      	ldr	r2, [pc, #84]	; (8014b04 <HAL_MspInit+0x64>)
 8014ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8014ab6:	4b13      	ldr	r3, [pc, #76]	; (8014b04 <HAL_MspInit+0x64>)
 8014ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014abe:	607b      	str	r3, [r7, #4]
 8014ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	603b      	str	r3, [r7, #0]
 8014ac6:	4b0f      	ldr	r3, [pc, #60]	; (8014b04 <HAL_MspInit+0x64>)
 8014ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014aca:	4a0e      	ldr	r2, [pc, #56]	; (8014b04 <HAL_MspInit+0x64>)
 8014acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8014ad2:	4b0c      	ldr	r3, [pc, #48]	; (8014b04 <HAL_MspInit+0x64>)
 8014ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014ada:	603b      	str	r3, [r7, #0]
 8014adc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8014ade:	2200      	movs	r2, #0
 8014ae0:	210f      	movs	r1, #15
 8014ae2:	f06f 0001 	mvn.w	r0, #1
 8014ae6:	f001 f966 	bl	8015db6 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8014aea:	2200      	movs	r2, #0
 8014aec:	2105      	movs	r1, #5
 8014aee:	2005      	movs	r0, #5
 8014af0:	f001 f961 	bl	8015db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8014af4:	2005      	movs	r0, #5
 8014af6:	f001 f97a 	bl	8015dee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8014afa:	bf00      	nop
 8014afc:	3708      	adds	r7, #8
 8014afe:	46bd      	mov	sp, r7
 8014b00:	bd80      	pop	{r7, pc}
 8014b02:	bf00      	nop
 8014b04:	40023800 	.word	0x40023800

08014b08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b08c      	sub	sp, #48	; 0x30
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014b10:	f107 031c 	add.w	r3, r7, #28
 8014b14:	2200      	movs	r2, #0
 8014b16:	601a      	str	r2, [r3, #0]
 8014b18:	605a      	str	r2, [r3, #4]
 8014b1a:	609a      	str	r2, [r3, #8]
 8014b1c:	60da      	str	r2, [r3, #12]
 8014b1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	4a5e      	ldr	r2, [pc, #376]	; (8014ca0 <HAL_ADC_MspInit+0x198>)
 8014b26:	4293      	cmp	r3, r2
 8014b28:	d158      	bne.n	8014bdc <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	61bb      	str	r3, [r7, #24]
 8014b2e:	4b5d      	ldr	r3, [pc, #372]	; (8014ca4 <HAL_ADC_MspInit+0x19c>)
 8014b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b32:	4a5c      	ldr	r2, [pc, #368]	; (8014ca4 <HAL_ADC_MspInit+0x19c>)
 8014b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014b38:	6453      	str	r3, [r2, #68]	; 0x44
 8014b3a:	4b5a      	ldr	r3, [pc, #360]	; (8014ca4 <HAL_ADC_MspInit+0x19c>)
 8014b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014b42:	61bb      	str	r3, [r7, #24]
 8014b44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014b46:	2300      	movs	r3, #0
 8014b48:	617b      	str	r3, [r7, #20]
 8014b4a:	4b56      	ldr	r3, [pc, #344]	; (8014ca4 <HAL_ADC_MspInit+0x19c>)
 8014b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b4e:	4a55      	ldr	r2, [pc, #340]	; (8014ca4 <HAL_ADC_MspInit+0x19c>)
 8014b50:	f043 0304 	orr.w	r3, r3, #4
 8014b54:	6313      	str	r3, [r2, #48]	; 0x30
 8014b56:	4b53      	ldr	r3, [pc, #332]	; (8014ca4 <HAL_ADC_MspInit+0x19c>)
 8014b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b5a:	f003 0304 	and.w	r3, r3, #4
 8014b5e:	617b      	str	r3, [r7, #20]
 8014b60:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC1_CM_Pin;
 8014b62:	2302      	movs	r3, #2
 8014b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014b66:	2303      	movs	r3, #3
 8014b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC1_CM_GPIO_Port, &GPIO_InitStruct);
 8014b6e:	f107 031c 	add.w	r3, r7, #28
 8014b72:	4619      	mov	r1, r3
 8014b74:	484c      	ldr	r0, [pc, #304]	; (8014ca8 <HAL_ADC_MspInit+0x1a0>)
 8014b76:	f001 fd65 	bl	8016644 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8014b7a:	4b4c      	ldr	r3, [pc, #304]	; (8014cac <HAL_ADC_MspInit+0x1a4>)
 8014b7c:	4a4c      	ldr	r2, [pc, #304]	; (8014cb0 <HAL_ADC_MspInit+0x1a8>)
 8014b7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8014b80:	4b4a      	ldr	r3, [pc, #296]	; (8014cac <HAL_ADC_MspInit+0x1a4>)
 8014b82:	2200      	movs	r2, #0
 8014b84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014b86:	4b49      	ldr	r3, [pc, #292]	; (8014cac <HAL_ADC_MspInit+0x1a4>)
 8014b88:	2200      	movs	r2, #0
 8014b8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8014b8c:	4b47      	ldr	r3, [pc, #284]	; (8014cac <HAL_ADC_MspInit+0x1a4>)
 8014b8e:	2200      	movs	r2, #0
 8014b90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8014b92:	4b46      	ldr	r3, [pc, #280]	; (8014cac <HAL_ADC_MspInit+0x1a4>)
 8014b94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014b98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8014b9a:	4b44      	ldr	r3, [pc, #272]	; (8014cac <HAL_ADC_MspInit+0x1a4>)
 8014b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014ba0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8014ba2:	4b42      	ldr	r3, [pc, #264]	; (8014cac <HAL_ADC_MspInit+0x1a4>)
 8014ba4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014ba8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8014baa:	4b40      	ldr	r3, [pc, #256]	; (8014cac <HAL_ADC_MspInit+0x1a4>)
 8014bac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014bb0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8014bb2:	4b3e      	ldr	r3, [pc, #248]	; (8014cac <HAL_ADC_MspInit+0x1a4>)
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014bb8:	4b3c      	ldr	r3, [pc, #240]	; (8014cac <HAL_ADC_MspInit+0x1a4>)
 8014bba:	2200      	movs	r2, #0
 8014bbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8014bbe:	483b      	ldr	r0, [pc, #236]	; (8014cac <HAL_ADC_MspInit+0x1a4>)
 8014bc0:	f001 f930 	bl	8015e24 <HAL_DMA_Init>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d001      	beq.n	8014bce <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8014bca:	f7ff ff63 	bl	8014a94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	4a36      	ldr	r2, [pc, #216]	; (8014cac <HAL_ADC_MspInit+0x1a4>)
 8014bd2:	639a      	str	r2, [r3, #56]	; 0x38
 8014bd4:	4a35      	ldr	r2, [pc, #212]	; (8014cac <HAL_ADC_MspInit+0x1a4>)
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8014bda:	e05d      	b.n	8014c98 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	4a34      	ldr	r2, [pc, #208]	; (8014cb4 <HAL_ADC_MspInit+0x1ac>)
 8014be2:	4293      	cmp	r3, r2
 8014be4:	d158      	bne.n	8014c98 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8014be6:	2300      	movs	r3, #0
 8014be8:	613b      	str	r3, [r7, #16]
 8014bea:	4b2e      	ldr	r3, [pc, #184]	; (8014ca4 <HAL_ADC_MspInit+0x19c>)
 8014bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bee:	4a2d      	ldr	r2, [pc, #180]	; (8014ca4 <HAL_ADC_MspInit+0x19c>)
 8014bf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8014bf6:	4b2b      	ldr	r3, [pc, #172]	; (8014ca4 <HAL_ADC_MspInit+0x19c>)
 8014bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014bfe:	613b      	str	r3, [r7, #16]
 8014c00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014c02:	2300      	movs	r3, #0
 8014c04:	60fb      	str	r3, [r7, #12]
 8014c06:	4b27      	ldr	r3, [pc, #156]	; (8014ca4 <HAL_ADC_MspInit+0x19c>)
 8014c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c0a:	4a26      	ldr	r2, [pc, #152]	; (8014ca4 <HAL_ADC_MspInit+0x19c>)
 8014c0c:	f043 0304 	orr.w	r3, r3, #4
 8014c10:	6313      	str	r3, [r2, #48]	; 0x30
 8014c12:	4b24      	ldr	r3, [pc, #144]	; (8014ca4 <HAL_ADC_MspInit+0x19c>)
 8014c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c16:	f003 0304 	and.w	r3, r3, #4
 8014c1a:	60fb      	str	r3, [r7, #12]
 8014c1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC2_VM_Pin;
 8014c1e:	2304      	movs	r3, #4
 8014c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014c22:	2303      	movs	r3, #3
 8014c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c26:	2300      	movs	r3, #0
 8014c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC2_VM_GPIO_Port, &GPIO_InitStruct);
 8014c2a:	f107 031c 	add.w	r3, r7, #28
 8014c2e:	4619      	mov	r1, r3
 8014c30:	481d      	ldr	r0, [pc, #116]	; (8014ca8 <HAL_ADC_MspInit+0x1a0>)
 8014c32:	f001 fd07 	bl	8016644 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8014c36:	4b20      	ldr	r3, [pc, #128]	; (8014cb8 <HAL_ADC_MspInit+0x1b0>)
 8014c38:	4a20      	ldr	r2, [pc, #128]	; (8014cbc <HAL_ADC_MspInit+0x1b4>)
 8014c3a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8014c3c:	4b1e      	ldr	r3, [pc, #120]	; (8014cb8 <HAL_ADC_MspInit+0x1b0>)
 8014c3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8014c42:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014c44:	4b1c      	ldr	r3, [pc, #112]	; (8014cb8 <HAL_ADC_MspInit+0x1b0>)
 8014c46:	2200      	movs	r2, #0
 8014c48:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8014c4a:	4b1b      	ldr	r3, [pc, #108]	; (8014cb8 <HAL_ADC_MspInit+0x1b0>)
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8014c50:	4b19      	ldr	r3, [pc, #100]	; (8014cb8 <HAL_ADC_MspInit+0x1b0>)
 8014c52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014c56:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8014c58:	4b17      	ldr	r3, [pc, #92]	; (8014cb8 <HAL_ADC_MspInit+0x1b0>)
 8014c5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014c5e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8014c60:	4b15      	ldr	r3, [pc, #84]	; (8014cb8 <HAL_ADC_MspInit+0x1b0>)
 8014c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014c66:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8014c68:	4b13      	ldr	r3, [pc, #76]	; (8014cb8 <HAL_ADC_MspInit+0x1b0>)
 8014c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014c6e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8014c70:	4b11      	ldr	r3, [pc, #68]	; (8014cb8 <HAL_ADC_MspInit+0x1b0>)
 8014c72:	2200      	movs	r2, #0
 8014c74:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014c76:	4b10      	ldr	r3, [pc, #64]	; (8014cb8 <HAL_ADC_MspInit+0x1b0>)
 8014c78:	2200      	movs	r2, #0
 8014c7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8014c7c:	480e      	ldr	r0, [pc, #56]	; (8014cb8 <HAL_ADC_MspInit+0x1b0>)
 8014c7e:	f001 f8d1 	bl	8015e24 <HAL_DMA_Init>
 8014c82:	4603      	mov	r3, r0
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d001      	beq.n	8014c8c <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8014c88:	f7ff ff04 	bl	8014a94 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	4a0a      	ldr	r2, [pc, #40]	; (8014cb8 <HAL_ADC_MspInit+0x1b0>)
 8014c90:	639a      	str	r2, [r3, #56]	; 0x38
 8014c92:	4a09      	ldr	r2, [pc, #36]	; (8014cb8 <HAL_ADC_MspInit+0x1b0>)
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6393      	str	r3, [r2, #56]	; 0x38
}
 8014c98:	bf00      	nop
 8014c9a:	3730      	adds	r7, #48	; 0x30
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	bd80      	pop	{r7, pc}
 8014ca0:	40012000 	.word	0x40012000
 8014ca4:	40023800 	.word	0x40023800
 8014ca8:	40020800 	.word	0x40020800
 8014cac:	2000ceb0 	.word	0x2000ceb0
 8014cb0:	40026410 	.word	0x40026410
 8014cb4:	40012100 	.word	0x40012100
 8014cb8:	2000cf10 	.word	0x2000cf10
 8014cbc:	40026440 	.word	0x40026440

08014cc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b084      	sub	sp, #16
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	4a18      	ldr	r2, [pc, #96]	; (8014d30 <HAL_TIM_Base_MspInit+0x70>)
 8014cce:	4293      	cmp	r3, r2
 8014cd0:	d10e      	bne.n	8014cf0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	60fb      	str	r3, [r7, #12]
 8014cd6:	4b17      	ldr	r3, [pc, #92]	; (8014d34 <HAL_TIM_Base_MspInit+0x74>)
 8014cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cda:	4a16      	ldr	r2, [pc, #88]	; (8014d34 <HAL_TIM_Base_MspInit+0x74>)
 8014cdc:	f043 0302 	orr.w	r3, r3, #2
 8014ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8014ce2:	4b14      	ldr	r3, [pc, #80]	; (8014d34 <HAL_TIM_Base_MspInit+0x74>)
 8014ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ce6:	f003 0302 	and.w	r3, r3, #2
 8014cea:	60fb      	str	r3, [r7, #12]
 8014cec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8014cee:	e01a      	b.n	8014d26 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	4a10      	ldr	r2, [pc, #64]	; (8014d38 <HAL_TIM_Base_MspInit+0x78>)
 8014cf6:	4293      	cmp	r3, r2
 8014cf8:	d115      	bne.n	8014d26 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	60bb      	str	r3, [r7, #8]
 8014cfe:	4b0d      	ldr	r3, [pc, #52]	; (8014d34 <HAL_TIM_Base_MspInit+0x74>)
 8014d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d02:	4a0c      	ldr	r2, [pc, #48]	; (8014d34 <HAL_TIM_Base_MspInit+0x74>)
 8014d04:	f043 0320 	orr.w	r3, r3, #32
 8014d08:	6413      	str	r3, [r2, #64]	; 0x40
 8014d0a:	4b0a      	ldr	r3, [pc, #40]	; (8014d34 <HAL_TIM_Base_MspInit+0x74>)
 8014d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d0e:	f003 0320 	and.w	r3, r3, #32
 8014d12:	60bb      	str	r3, [r7, #8]
 8014d14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8014d16:	2200      	movs	r2, #0
 8014d18:	2105      	movs	r1, #5
 8014d1a:	2037      	movs	r0, #55	; 0x37
 8014d1c:	f001 f84b 	bl	8015db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8014d20:	2037      	movs	r0, #55	; 0x37
 8014d22:	f001 f864 	bl	8015dee <HAL_NVIC_EnableIRQ>
}
 8014d26:	bf00      	nop
 8014d28:	3710      	adds	r7, #16
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	bd80      	pop	{r7, pc}
 8014d2e:	bf00      	nop
 8014d30:	40000400 	.word	0x40000400
 8014d34:	40023800 	.word	0x40023800
 8014d38:	40001400 	.word	0x40001400

08014d3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b088      	sub	sp, #32
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014d44:	f107 030c 	add.w	r3, r7, #12
 8014d48:	2200      	movs	r2, #0
 8014d4a:	601a      	str	r2, [r3, #0]
 8014d4c:	605a      	str	r2, [r3, #4]
 8014d4e:	609a      	str	r2, [r3, #8]
 8014d50:	60da      	str	r2, [r3, #12]
 8014d52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	4a12      	ldr	r2, [pc, #72]	; (8014da4 <HAL_TIM_MspPostInit+0x68>)
 8014d5a:	4293      	cmp	r3, r2
 8014d5c:	d11d      	bne.n	8014d9a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014d5e:	2300      	movs	r3, #0
 8014d60:	60bb      	str	r3, [r7, #8]
 8014d62:	4b11      	ldr	r3, [pc, #68]	; (8014da8 <HAL_TIM_MspPostInit+0x6c>)
 8014d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d66:	4a10      	ldr	r2, [pc, #64]	; (8014da8 <HAL_TIM_MspPostInit+0x6c>)
 8014d68:	f043 0302 	orr.w	r3, r3, #2
 8014d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8014d6e:	4b0e      	ldr	r3, [pc, #56]	; (8014da8 <HAL_TIM_MspPostInit+0x6c>)
 8014d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d72:	f003 0302 	and.w	r3, r3, #2
 8014d76:	60bb      	str	r3, [r7, #8]
 8014d78:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_BUZZER_Pin;
 8014d7a:	2310      	movs	r3, #16
 8014d7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d7e:	2302      	movs	r3, #2
 8014d80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d82:	2300      	movs	r3, #0
 8014d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014d86:	2300      	movs	r3, #0
 8014d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8014d8a:	2302      	movs	r3, #2
 8014d8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM3_BUZZER_GPIO_Port, &GPIO_InitStruct);
 8014d8e:	f107 030c 	add.w	r3, r7, #12
 8014d92:	4619      	mov	r1, r3
 8014d94:	4805      	ldr	r0, [pc, #20]	; (8014dac <HAL_TIM_MspPostInit+0x70>)
 8014d96:	f001 fc55 	bl	8016644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8014d9a:	bf00      	nop
 8014d9c:	3720      	adds	r7, #32
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	bd80      	pop	{r7, pc}
 8014da2:	bf00      	nop
 8014da4:	40000400 	.word	0x40000400
 8014da8:	40023800 	.word	0x40023800
 8014dac:	40020400 	.word	0x40020400

08014db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b08a      	sub	sp, #40	; 0x28
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014db8:	f107 0314 	add.w	r3, r7, #20
 8014dbc:	2200      	movs	r2, #0
 8014dbe:	601a      	str	r2, [r3, #0]
 8014dc0:	605a      	str	r2, [r3, #4]
 8014dc2:	609a      	str	r2, [r3, #8]
 8014dc4:	60da      	str	r2, [r3, #12]
 8014dc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	4a4c      	ldr	r2, [pc, #304]	; (8014f00 <HAL_UART_MspInit+0x150>)
 8014dce:	4293      	cmp	r3, r2
 8014dd0:	f040 8092 	bne.w	8014ef8 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	613b      	str	r3, [r7, #16]
 8014dd8:	4b4a      	ldr	r3, [pc, #296]	; (8014f04 <HAL_UART_MspInit+0x154>)
 8014dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ddc:	4a49      	ldr	r2, [pc, #292]	; (8014f04 <HAL_UART_MspInit+0x154>)
 8014dde:	f043 0320 	orr.w	r3, r3, #32
 8014de2:	6453      	str	r3, [r2, #68]	; 0x44
 8014de4:	4b47      	ldr	r3, [pc, #284]	; (8014f04 <HAL_UART_MspInit+0x154>)
 8014de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014de8:	f003 0320 	and.w	r3, r3, #32
 8014dec:	613b      	str	r3, [r7, #16]
 8014dee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014df0:	2300      	movs	r3, #0
 8014df2:	60fb      	str	r3, [r7, #12]
 8014df4:	4b43      	ldr	r3, [pc, #268]	; (8014f04 <HAL_UART_MspInit+0x154>)
 8014df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014df8:	4a42      	ldr	r2, [pc, #264]	; (8014f04 <HAL_UART_MspInit+0x154>)
 8014dfa:	f043 0304 	orr.w	r3, r3, #4
 8014dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8014e00:	4b40      	ldr	r3, [pc, #256]	; (8014f04 <HAL_UART_MspInit+0x154>)
 8014e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e04:	f003 0304 	and.w	r3, r3, #4
 8014e08:	60fb      	str	r3, [r7, #12]
 8014e0a:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = UART6_TX_DEBUG_Pin|UART6_RX_DEBUG_Pin;
 8014e0c:	23c0      	movs	r3, #192	; 0xc0
 8014e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e10:	2302      	movs	r3, #2
 8014e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e14:	2300      	movs	r3, #0
 8014e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014e18:	2303      	movs	r3, #3
 8014e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8014e1c:	2308      	movs	r3, #8
 8014e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014e20:	f107 0314 	add.w	r3, r7, #20
 8014e24:	4619      	mov	r1, r3
 8014e26:	4838      	ldr	r0, [pc, #224]	; (8014f08 <HAL_UART_MspInit+0x158>)
 8014e28:	f001 fc0c 	bl	8016644 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream7;
 8014e2c:	4b37      	ldr	r3, [pc, #220]	; (8014f0c <HAL_UART_MspInit+0x15c>)
 8014e2e:	4a38      	ldr	r2, [pc, #224]	; (8014f10 <HAL_UART_MspInit+0x160>)
 8014e30:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8014e32:	4b36      	ldr	r3, [pc, #216]	; (8014f0c <HAL_UART_MspInit+0x15c>)
 8014e34:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8014e38:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8014e3a:	4b34      	ldr	r3, [pc, #208]	; (8014f0c <HAL_UART_MspInit+0x15c>)
 8014e3c:	2240      	movs	r2, #64	; 0x40
 8014e3e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8014e40:	4b32      	ldr	r3, [pc, #200]	; (8014f0c <HAL_UART_MspInit+0x15c>)
 8014e42:	2200      	movs	r2, #0
 8014e44:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8014e46:	4b31      	ldr	r3, [pc, #196]	; (8014f0c <HAL_UART_MspInit+0x15c>)
 8014e48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014e4c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8014e4e:	4b2f      	ldr	r3, [pc, #188]	; (8014f0c <HAL_UART_MspInit+0x15c>)
 8014e50:	2200      	movs	r2, #0
 8014e52:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8014e54:	4b2d      	ldr	r3, [pc, #180]	; (8014f0c <HAL_UART_MspInit+0x15c>)
 8014e56:	2200      	movs	r2, #0
 8014e58:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8014e5a:	4b2c      	ldr	r3, [pc, #176]	; (8014f0c <HAL_UART_MspInit+0x15c>)
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8014e60:	4b2a      	ldr	r3, [pc, #168]	; (8014f0c <HAL_UART_MspInit+0x15c>)
 8014e62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8014e66:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014e68:	4b28      	ldr	r3, [pc, #160]	; (8014f0c <HAL_UART_MspInit+0x15c>)
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8014e6e:	4827      	ldr	r0, [pc, #156]	; (8014f0c <HAL_UART_MspInit+0x15c>)
 8014e70:	f000 ffd8 	bl	8015e24 <HAL_DMA_Init>
 8014e74:	4603      	mov	r3, r0
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d001      	beq.n	8014e7e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8014e7a:	f7ff fe0b 	bl	8014a94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	4a22      	ldr	r2, [pc, #136]	; (8014f0c <HAL_UART_MspInit+0x15c>)
 8014e82:	639a      	str	r2, [r3, #56]	; 0x38
 8014e84:	4a21      	ldr	r2, [pc, #132]	; (8014f0c <HAL_UART_MspInit+0x15c>)
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8014e8a:	4b22      	ldr	r3, [pc, #136]	; (8014f14 <HAL_UART_MspInit+0x164>)
 8014e8c:	4a22      	ldr	r2, [pc, #136]	; (8014f18 <HAL_UART_MspInit+0x168>)
 8014e8e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8014e90:	4b20      	ldr	r3, [pc, #128]	; (8014f14 <HAL_UART_MspInit+0x164>)
 8014e92:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8014e96:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014e98:	4b1e      	ldr	r3, [pc, #120]	; (8014f14 <HAL_UART_MspInit+0x164>)
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8014e9e:	4b1d      	ldr	r3, [pc, #116]	; (8014f14 <HAL_UART_MspInit+0x164>)
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8014ea4:	4b1b      	ldr	r3, [pc, #108]	; (8014f14 <HAL_UART_MspInit+0x164>)
 8014ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014eaa:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8014eac:	4b19      	ldr	r3, [pc, #100]	; (8014f14 <HAL_UART_MspInit+0x164>)
 8014eae:	2200      	movs	r2, #0
 8014eb0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8014eb2:	4b18      	ldr	r3, [pc, #96]	; (8014f14 <HAL_UART_MspInit+0x164>)
 8014eb4:	2200      	movs	r2, #0
 8014eb6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8014eb8:	4b16      	ldr	r3, [pc, #88]	; (8014f14 <HAL_UART_MspInit+0x164>)
 8014eba:	2200      	movs	r2, #0
 8014ebc:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8014ebe:	4b15      	ldr	r3, [pc, #84]	; (8014f14 <HAL_UART_MspInit+0x164>)
 8014ec0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8014ec4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014ec6:	4b13      	ldr	r3, [pc, #76]	; (8014f14 <HAL_UART_MspInit+0x164>)
 8014ec8:	2200      	movs	r2, #0
 8014eca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8014ecc:	4811      	ldr	r0, [pc, #68]	; (8014f14 <HAL_UART_MspInit+0x164>)
 8014ece:	f000 ffa9 	bl	8015e24 <HAL_DMA_Init>
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d001      	beq.n	8014edc <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8014ed8:	f7ff fddc 	bl	8014a94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	4a0d      	ldr	r2, [pc, #52]	; (8014f14 <HAL_UART_MspInit+0x164>)
 8014ee0:	63da      	str	r2, [r3, #60]	; 0x3c
 8014ee2:	4a0c      	ldr	r2, [pc, #48]	; (8014f14 <HAL_UART_MspInit+0x164>)
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8014ee8:	2200      	movs	r2, #0
 8014eea:	2105      	movs	r1, #5
 8014eec:	2047      	movs	r0, #71	; 0x47
 8014eee:	f000 ff62 	bl	8015db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8014ef2:	2047      	movs	r0, #71	; 0x47
 8014ef4:	f000 ff7b 	bl	8015dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8014ef8:	bf00      	nop
 8014efa:	3728      	adds	r7, #40	; 0x28
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bd80      	pop	{r7, pc}
 8014f00:	40011400 	.word	0x40011400
 8014f04:	40023800 	.word	0x40023800
 8014f08:	40020800 	.word	0x40020800
 8014f0c:	2000d048 	.word	0x2000d048
 8014f10:	400264b8 	.word	0x400264b8
 8014f14:	2000d0a8 	.word	0x2000d0a8
 8014f18:	40026428 	.word	0x40026428

08014f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8014f1c:	b480      	push	{r7}
 8014f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8014f20:	e7fe      	b.n	8014f20 <NMI_Handler+0x4>

08014f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8014f22:	b480      	push	{r7}
 8014f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014f26:	e7fe      	b.n	8014f26 <HardFault_Handler+0x4>

08014f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014f28:	b480      	push	{r7}
 8014f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014f2c:	e7fe      	b.n	8014f2c <MemManage_Handler+0x4>

08014f2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8014f2e:	b480      	push	{r7}
 8014f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8014f32:	e7fe      	b.n	8014f32 <BusFault_Handler+0x4>

08014f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014f34:	b480      	push	{r7}
 8014f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014f38:	e7fe      	b.n	8014f38 <UsageFault_Handler+0x4>

08014f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014f3a:	b480      	push	{r7}
 8014f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014f3e:	bf00      	nop
 8014f40:	46bd      	mov	sp, r7
 8014f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f46:	4770      	bx	lr

08014f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 8014f4c:	4b09      	ldr	r3, [pc, #36]	; (8014f74 <SysTick_Handler+0x2c>)
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d004      	beq.n	8014f5e <SysTick_Handler+0x16>

		TimingDelay--;
 8014f54:	4b07      	ldr	r3, [pc, #28]	; (8014f74 <SysTick_Handler+0x2c>)
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	3b01      	subs	r3, #1
 8014f5a:	4a06      	ldr	r2, [pc, #24]	; (8014f74 <SysTick_Handler+0x2c>)
 8014f5c:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014f5e:	f000 f9f9 	bl	8015354 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8014f62:	f00b fb7b 	bl	802065c <xTaskGetSchedulerState>
 8014f66:	4603      	mov	r3, r0
 8014f68:	2b01      	cmp	r3, #1
 8014f6a:	d001      	beq.n	8014f70 <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8014f6c:	f00c fbbc 	bl	80216e8 <tickFreeRTOS>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014f70:	bf00      	nop
 8014f72:	bd80      	pop	{r7, pc}
 8014f74:	2000d118 	.word	0x2000d118

08014f78 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8014f78:	b480      	push	{r7}
 8014f7a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8014f7c:	bf00      	nop
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f84:	4770      	bx	lr
	...

08014f88 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8014f8c:	4802      	ldr	r0, [pc, #8]	; (8014f98 <TIM7_IRQHandler+0x10>)
 8014f8e:	f003 fe77 	bl	8018c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8014f92:	bf00      	nop
 8014f94:	bd80      	pop	{r7, pc}
 8014f96:	bf00      	nop
 8014f98:	2000cfb8 	.word	0x2000cfb8

08014f9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8014fa0:	4802      	ldr	r0, [pc, #8]	; (8014fac <DMA2_Stream0_IRQHandler+0x10>)
 8014fa2:	f001 f8d7 	bl	8016154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8014fa6:	bf00      	nop
 8014fa8:	bd80      	pop	{r7, pc}
 8014faa:	bf00      	nop
 8014fac:	2000ceb0 	.word	0x2000ceb0

08014fb0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8014fb4:	4802      	ldr	r0, [pc, #8]	; (8014fc0 <DMA2_Stream1_IRQHandler+0x10>)
 8014fb6:	f001 f8cd 	bl	8016154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8014fba:	bf00      	nop
 8014fbc:	bd80      	pop	{r7, pc}
 8014fbe:	bf00      	nop
 8014fc0:	2000d0a8 	.word	0x2000d0a8

08014fc4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8014fc8:	4802      	ldr	r0, [pc, #8]	; (8014fd4 <DMA2_Stream2_IRQHandler+0x10>)
 8014fca:	f001 f8c3 	bl	8016154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8014fce:	bf00      	nop
 8014fd0:	bd80      	pop	{r7, pc}
 8014fd2:	bf00      	nop
 8014fd4:	2000cf10 	.word	0x2000cf10

08014fd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8014fdc:	4802      	ldr	r0, [pc, #8]	; (8014fe8 <OTG_FS_IRQHandler+0x10>)
 8014fde:	f001 fe2a 	bl	8016c36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8014fe2:	bf00      	nop
 8014fe4:	bd80      	pop	{r7, pc}
 8014fe6:	bf00      	nop
 8014fe8:	20012684 	.word	0x20012684

08014fec <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8014ff0:	4802      	ldr	r0, [pc, #8]	; (8014ffc <DMA2_Stream7_IRQHandler+0x10>)
 8014ff2:	f001 f8af 	bl	8016154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8014ff6:	bf00      	nop
 8014ff8:	bd80      	pop	{r7, pc}
 8014ffa:	bf00      	nop
 8014ffc:	2000d048 	.word	0x2000d048

08015000 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b082      	sub	sp, #8
 8015004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)!=RESET)&&(__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_RXNE)!=RESET) ){
 8015006:	4b1d      	ldr	r3, [pc, #116]	; (801507c <USART6_IRQHandler+0x7c>)
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	f003 0320 	and.w	r3, r3, #32
 8015010:	2b20      	cmp	r3, #32
 8015012:	d12b      	bne.n	801506c <USART6_IRQHandler+0x6c>
 8015014:	4b19      	ldr	r3, [pc, #100]	; (801507c <USART6_IRQHandler+0x7c>)
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	68db      	ldr	r3, [r3, #12]
 801501a:	f003 0320 	and.w	r3, r3, #32
 801501e:	2b00      	cmp	r3, #0
 8015020:	d024      	beq.n	801506c <USART6_IRQHandler+0x6c>
		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8015022:	2300      	movs	r3, #0
 8015024:	607b      	str	r3, [r7, #4]
		g_rx_buffer = (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF);	// 데이터 1바이트 수신
 8015026:	4b15      	ldr	r3, [pc, #84]	; (801507c <USART6_IRQHandler+0x7c>)
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	685b      	ldr	r3, [r3, #4]
 801502c:	b2da      	uxtb	r2, r3
 801502e:	4b14      	ldr	r3, [pc, #80]	; (8015080 <USART6_IRQHandler+0x80>)
 8015030:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_CLEAR_PEFLAG(&huart6);
 8015032:	2300      	movs	r3, #0
 8015034:	603b      	str	r3, [r7, #0]
 8015036:	4b11      	ldr	r3, [pc, #68]	; (801507c <USART6_IRQHandler+0x7c>)
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	603b      	str	r3, [r7, #0]
 801503e:	4b0f      	ldr	r3, [pc, #60]	; (801507c <USART6_IRQHandler+0x7c>)
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	685b      	ldr	r3, [r3, #4]
 8015044:	603b      	str	r3, [r7, #0]
 8015046:	683b      	ldr	r3, [r7, #0]
		xQueueSendFromISR(uartqueue, &g_rx_buffer, &xHigherPriorityTaskWoken);	// Queue에서 멈춤
 8015048:	4b0e      	ldr	r3, [pc, #56]	; (8015084 <USART6_IRQHandler+0x84>)
 801504a:	6818      	ldr	r0, [r3, #0]
 801504c:	1d3a      	adds	r2, r7, #4
 801504e:	2300      	movs	r3, #0
 8015050:	490b      	ldr	r1, [pc, #44]	; (8015080 <USART6_IRQHandler+0x80>)
 8015052:	f009 fda3 	bl	801eb9c <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d007      	beq.n	801506c <USART6_IRQHandler+0x6c>
 801505c:	4b0a      	ldr	r3, [pc, #40]	; (8015088 <USART6_IRQHandler+0x88>)
 801505e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015062:	601a      	str	r2, [r3, #0]
 8015064:	f3bf 8f4f 	dsb	sy
 8015068:	f3bf 8f6f 	isb	sy
	}

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 801506c:	4803      	ldr	r0, [pc, #12]	; (801507c <USART6_IRQHandler+0x7c>)
 801506e:	f004 fd1f 	bl	8019ab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8015072:	bf00      	nop
 8015074:	3708      	adds	r7, #8
 8015076:	46bd      	mov	sp, r7
 8015078:	bd80      	pop	{r7, pc}
 801507a:	bf00      	nop
 801507c:	2000d000 	.word	0x2000d000
 8015080:	2000d114 	.word	0x2000d114
 8015084:	2000bb20 	.word	0x2000bb20
 8015088:	e000ed04 	.word	0xe000ed04

0801508c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801508c:	b480      	push	{r7}
 801508e:	af00      	add	r7, sp, #0
  return 1;
 8015090:	2301      	movs	r3, #1
}
 8015092:	4618      	mov	r0, r3
 8015094:	46bd      	mov	sp, r7
 8015096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509a:	4770      	bx	lr

0801509c <_kill>:

int _kill(int pid, int sig)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b082      	sub	sp, #8
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
 80150a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80150a6:	f00e fd0b 	bl	8023ac0 <__errno>
 80150aa:	4603      	mov	r3, r0
 80150ac:	2216      	movs	r2, #22
 80150ae:	601a      	str	r2, [r3, #0]
  return -1;
 80150b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80150b4:	4618      	mov	r0, r3
 80150b6:	3708      	adds	r7, #8
 80150b8:	46bd      	mov	sp, r7
 80150ba:	bd80      	pop	{r7, pc}

080150bc <_exit>:

void _exit (int status)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b082      	sub	sp, #8
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80150c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80150c8:	6878      	ldr	r0, [r7, #4]
 80150ca:	f7ff ffe7 	bl	801509c <_kill>
  while (1) {}    /* Make sure we hang here */
 80150ce:	e7fe      	b.n	80150ce <_exit+0x12>

080150d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b086      	sub	sp, #24
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	60f8      	str	r0, [r7, #12]
 80150d8:	60b9      	str	r1, [r7, #8]
 80150da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80150dc:	2300      	movs	r3, #0
 80150de:	617b      	str	r3, [r7, #20]
 80150e0:	e00a      	b.n	80150f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80150e2:	f3af 8000 	nop.w
 80150e6:	4601      	mov	r1, r0
 80150e8:	68bb      	ldr	r3, [r7, #8]
 80150ea:	1c5a      	adds	r2, r3, #1
 80150ec:	60ba      	str	r2, [r7, #8]
 80150ee:	b2ca      	uxtb	r2, r1
 80150f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80150f2:	697b      	ldr	r3, [r7, #20]
 80150f4:	3301      	adds	r3, #1
 80150f6:	617b      	str	r3, [r7, #20]
 80150f8:	697a      	ldr	r2, [r7, #20]
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	429a      	cmp	r2, r3
 80150fe:	dbf0      	blt.n	80150e2 <_read+0x12>
  }

  return len;
 8015100:	687b      	ldr	r3, [r7, #4]
}
 8015102:	4618      	mov	r0, r3
 8015104:	3718      	adds	r7, #24
 8015106:	46bd      	mov	sp, r7
 8015108:	bd80      	pop	{r7, pc}

0801510a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801510a:	b580      	push	{r7, lr}
 801510c:	b086      	sub	sp, #24
 801510e:	af00      	add	r7, sp, #0
 8015110:	60f8      	str	r0, [r7, #12]
 8015112:	60b9      	str	r1, [r7, #8]
 8015114:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015116:	2300      	movs	r3, #0
 8015118:	617b      	str	r3, [r7, #20]
 801511a:	e009      	b.n	8015130 <_write+0x26>
  {
    __io_putchar(*ptr++);
 801511c:	68bb      	ldr	r3, [r7, #8]
 801511e:	1c5a      	adds	r2, r3, #1
 8015120:	60ba      	str	r2, [r7, #8]
 8015122:	781b      	ldrb	r3, [r3, #0]
 8015124:	4618      	mov	r0, r3
 8015126:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801512a:	697b      	ldr	r3, [r7, #20]
 801512c:	3301      	adds	r3, #1
 801512e:	617b      	str	r3, [r7, #20]
 8015130:	697a      	ldr	r2, [r7, #20]
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	429a      	cmp	r2, r3
 8015136:	dbf1      	blt.n	801511c <_write+0x12>
  }
  return len;
 8015138:	687b      	ldr	r3, [r7, #4]
}
 801513a:	4618      	mov	r0, r3
 801513c:	3718      	adds	r7, #24
 801513e:	46bd      	mov	sp, r7
 8015140:	bd80      	pop	{r7, pc}

08015142 <_close>:

int _close(int file)
{
 8015142:	b480      	push	{r7}
 8015144:	b083      	sub	sp, #12
 8015146:	af00      	add	r7, sp, #0
 8015148:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 801514a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801514e:	4618      	mov	r0, r3
 8015150:	370c      	adds	r7, #12
 8015152:	46bd      	mov	sp, r7
 8015154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015158:	4770      	bx	lr

0801515a <_fstat>:


int _fstat(int file, struct stat *st)
{
 801515a:	b480      	push	{r7}
 801515c:	b083      	sub	sp, #12
 801515e:	af00      	add	r7, sp, #0
 8015160:	6078      	str	r0, [r7, #4]
 8015162:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8015164:	683b      	ldr	r3, [r7, #0]
 8015166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801516a:	605a      	str	r2, [r3, #4]
  return 0;
 801516c:	2300      	movs	r3, #0
}
 801516e:	4618      	mov	r0, r3
 8015170:	370c      	adds	r7, #12
 8015172:	46bd      	mov	sp, r7
 8015174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015178:	4770      	bx	lr

0801517a <_isatty>:

int _isatty(int file)
{
 801517a:	b480      	push	{r7}
 801517c:	b083      	sub	sp, #12
 801517e:	af00      	add	r7, sp, #0
 8015180:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8015182:	2301      	movs	r3, #1
}
 8015184:	4618      	mov	r0, r3
 8015186:	370c      	adds	r7, #12
 8015188:	46bd      	mov	sp, r7
 801518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518e:	4770      	bx	lr

08015190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8015190:	b480      	push	{r7}
 8015192:	b085      	sub	sp, #20
 8015194:	af00      	add	r7, sp, #0
 8015196:	60f8      	str	r0, [r7, #12]
 8015198:	60b9      	str	r1, [r7, #8]
 801519a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 801519c:	2300      	movs	r3, #0
}
 801519e:	4618      	mov	r0, r3
 80151a0:	3714      	adds	r7, #20
 80151a2:	46bd      	mov	sp, r7
 80151a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a8:	4770      	bx	lr
	...

080151ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	b086      	sub	sp, #24
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80151b4:	4a14      	ldr	r2, [pc, #80]	; (8015208 <_sbrk+0x5c>)
 80151b6:	4b15      	ldr	r3, [pc, #84]	; (801520c <_sbrk+0x60>)
 80151b8:	1ad3      	subs	r3, r2, r3
 80151ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80151bc:	697b      	ldr	r3, [r7, #20]
 80151be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80151c0:	4b13      	ldr	r3, [pc, #76]	; (8015210 <_sbrk+0x64>)
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d102      	bne.n	80151ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80151c8:	4b11      	ldr	r3, [pc, #68]	; (8015210 <_sbrk+0x64>)
 80151ca:	4a12      	ldr	r2, [pc, #72]	; (8015214 <_sbrk+0x68>)
 80151cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80151ce:	4b10      	ldr	r3, [pc, #64]	; (8015210 <_sbrk+0x64>)
 80151d0:	681a      	ldr	r2, [r3, #0]
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	4413      	add	r3, r2
 80151d6:	693a      	ldr	r2, [r7, #16]
 80151d8:	429a      	cmp	r2, r3
 80151da:	d207      	bcs.n	80151ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80151dc:	f00e fc70 	bl	8023ac0 <__errno>
 80151e0:	4603      	mov	r3, r0
 80151e2:	220c      	movs	r2, #12
 80151e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80151e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80151ea:	e009      	b.n	8015200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80151ec:	4b08      	ldr	r3, [pc, #32]	; (8015210 <_sbrk+0x64>)
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80151f2:	4b07      	ldr	r3, [pc, #28]	; (8015210 <_sbrk+0x64>)
 80151f4:	681a      	ldr	r2, [r3, #0]
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	4413      	add	r3, r2
 80151fa:	4a05      	ldr	r2, [pc, #20]	; (8015210 <_sbrk+0x64>)
 80151fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80151fe:	68fb      	ldr	r3, [r7, #12]
}
 8015200:	4618      	mov	r0, r3
 8015202:	3718      	adds	r7, #24
 8015204:	46bd      	mov	sp, r7
 8015206:	bd80      	pop	{r7, pc}
 8015208:	20020000 	.word	0x20020000
 801520c:	00000400 	.word	0x00000400
 8015210:	2000d11c 	.word	0x2000d11c
 8015214:	20012ed8 	.word	0x20012ed8

08015218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8015218:	b480      	push	{r7}
 801521a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801521c:	4b06      	ldr	r3, [pc, #24]	; (8015238 <SystemInit+0x20>)
 801521e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015222:	4a05      	ldr	r2, [pc, #20]	; (8015238 <SystemInit+0x20>)
 8015224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801522c:	bf00      	nop
 801522e:	46bd      	mov	sp, r7
 8015230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015234:	4770      	bx	lr
 8015236:	bf00      	nop
 8015238:	e000ed00 	.word	0xe000ed00

0801523c <vApplicationIdleHook>:
	}
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook (void)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	af00      	add	r7, sp, #0
	printf("."); fflush(stdout);
 8015240:	202e      	movs	r0, #46	; 0x2e
 8015242:	f00e fa85 	bl	8023750 <putchar>
 8015246:	4b04      	ldr	r3, [pc, #16]	; (8015258 <vApplicationIdleHook+0x1c>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	689b      	ldr	r3, [r3, #8]
 801524c:	4618      	mov	r0, r3
 801524e:	f00e f997 	bl	8023580 <fflush>
}
 8015252:	bf00      	nop
 8015254:	bd80      	pop	{r7, pc}
 8015256:	bf00      	nop
 8015258:	20001038 	.word	0x20001038

0801525c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 801525c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015294 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8015260:	f7ff ffda 	bl	8015218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8015264:	480c      	ldr	r0, [pc, #48]	; (8015298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8015266:	490d      	ldr	r1, [pc, #52]	; (801529c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8015268:	4a0d      	ldr	r2, [pc, #52]	; (80152a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801526a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801526c:	e002      	b.n	8015274 <LoopCopyDataInit>

0801526e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801526e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8015270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8015272:	3304      	adds	r3, #4

08015274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8015274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8015276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8015278:	d3f9      	bcc.n	801526e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801527a:	4a0a      	ldr	r2, [pc, #40]	; (80152a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 801527c:	4c0a      	ldr	r4, [pc, #40]	; (80152a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 801527e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8015280:	e001      	b.n	8015286 <LoopFillZerobss>

08015282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8015282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8015284:	3204      	adds	r2, #4

08015286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8015286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8015288:	d3fb      	bcc.n	8015282 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 801528a:	f00e fc1f 	bl	8023acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801528e:	f7fe ffd9 	bl	8014244 <main>
  bx  lr    
 8015292:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8015294:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8015298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801529c:	200011a8 	.word	0x200011a8
  ldr r2, =_sidata
 80152a0:	0802e904 	.word	0x0802e904
  ldr r2, =_sbss
 80152a4:	20006288 	.word	0x20006288
  ldr r4, =_ebss
 80152a8:	20012ed4 	.word	0x20012ed4

080152ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80152ac:	e7fe      	b.n	80152ac <ADC_IRQHandler>
	...

080152b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80152b4:	4b0e      	ldr	r3, [pc, #56]	; (80152f0 <HAL_Init+0x40>)
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	4a0d      	ldr	r2, [pc, #52]	; (80152f0 <HAL_Init+0x40>)
 80152ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80152be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80152c0:	4b0b      	ldr	r3, [pc, #44]	; (80152f0 <HAL_Init+0x40>)
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	4a0a      	ldr	r2, [pc, #40]	; (80152f0 <HAL_Init+0x40>)
 80152c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80152ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80152cc:	4b08      	ldr	r3, [pc, #32]	; (80152f0 <HAL_Init+0x40>)
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	4a07      	ldr	r2, [pc, #28]	; (80152f0 <HAL_Init+0x40>)
 80152d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80152d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80152d8:	2003      	movs	r0, #3
 80152da:	f000 fd61 	bl	8015da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80152de:	200f      	movs	r0, #15
 80152e0:	f000 f808 	bl	80152f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80152e4:	f7ff fbdc 	bl	8014aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80152e8:	2300      	movs	r3, #0
}
 80152ea:	4618      	mov	r0, r3
 80152ec:	bd80      	pop	{r7, pc}
 80152ee:	bf00      	nop
 80152f0:	40023c00 	.word	0x40023c00

080152f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b082      	sub	sp, #8
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80152fc:	4b12      	ldr	r3, [pc, #72]	; (8015348 <HAL_InitTick+0x54>)
 80152fe:	681a      	ldr	r2, [r3, #0]
 8015300:	4b12      	ldr	r3, [pc, #72]	; (801534c <HAL_InitTick+0x58>)
 8015302:	781b      	ldrb	r3, [r3, #0]
 8015304:	4619      	mov	r1, r3
 8015306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801530a:	fbb3 f3f1 	udiv	r3, r3, r1
 801530e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015312:	4618      	mov	r0, r3
 8015314:	f000 fd79 	bl	8015e0a <HAL_SYSTICK_Config>
 8015318:	4603      	mov	r3, r0
 801531a:	2b00      	cmp	r3, #0
 801531c:	d001      	beq.n	8015322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801531e:	2301      	movs	r3, #1
 8015320:	e00e      	b.n	8015340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	2b0f      	cmp	r3, #15
 8015326:	d80a      	bhi.n	801533e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8015328:	2200      	movs	r2, #0
 801532a:	6879      	ldr	r1, [r7, #4]
 801532c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015330:	f000 fd41 	bl	8015db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8015334:	4a06      	ldr	r2, [pc, #24]	; (8015350 <HAL_InitTick+0x5c>)
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801533a:	2300      	movs	r3, #0
 801533c:	e000      	b.n	8015340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801533e:	2301      	movs	r3, #1
}
 8015340:	4618      	mov	r0, r3
 8015342:	3708      	adds	r7, #8
 8015344:	46bd      	mov	sp, r7
 8015346:	bd80      	pop	{r7, pc}
 8015348:	20000ee0 	.word	0x20000ee0
 801534c:	20000ee8 	.word	0x20000ee8
 8015350:	20000ee4 	.word	0x20000ee4

08015354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015354:	b480      	push	{r7}
 8015356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8015358:	4b06      	ldr	r3, [pc, #24]	; (8015374 <HAL_IncTick+0x20>)
 801535a:	781b      	ldrb	r3, [r3, #0]
 801535c:	461a      	mov	r2, r3
 801535e:	4b06      	ldr	r3, [pc, #24]	; (8015378 <HAL_IncTick+0x24>)
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	4413      	add	r3, r2
 8015364:	4a04      	ldr	r2, [pc, #16]	; (8015378 <HAL_IncTick+0x24>)
 8015366:	6013      	str	r3, [r2, #0]
}
 8015368:	bf00      	nop
 801536a:	46bd      	mov	sp, r7
 801536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015370:	4770      	bx	lr
 8015372:	bf00      	nop
 8015374:	20000ee8 	.word	0x20000ee8
 8015378:	2000d120 	.word	0x2000d120

0801537c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801537c:	b480      	push	{r7}
 801537e:	af00      	add	r7, sp, #0
  return uwTick;
 8015380:	4b03      	ldr	r3, [pc, #12]	; (8015390 <HAL_GetTick+0x14>)
 8015382:	681b      	ldr	r3, [r3, #0]
}
 8015384:	4618      	mov	r0, r3
 8015386:	46bd      	mov	sp, r7
 8015388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538c:	4770      	bx	lr
 801538e:	bf00      	nop
 8015390:	2000d120 	.word	0x2000d120

08015394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8015394:	b580      	push	{r7, lr}
 8015396:	b084      	sub	sp, #16
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801539c:	f7ff ffee 	bl	801537c <HAL_GetTick>
 80153a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80153ac:	d005      	beq.n	80153ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80153ae:	4b0a      	ldr	r3, [pc, #40]	; (80153d8 <HAL_Delay+0x44>)
 80153b0:	781b      	ldrb	r3, [r3, #0]
 80153b2:	461a      	mov	r2, r3
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	4413      	add	r3, r2
 80153b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80153ba:	bf00      	nop
 80153bc:	f7ff ffde 	bl	801537c <HAL_GetTick>
 80153c0:	4602      	mov	r2, r0
 80153c2:	68bb      	ldr	r3, [r7, #8]
 80153c4:	1ad3      	subs	r3, r2, r3
 80153c6:	68fa      	ldr	r2, [r7, #12]
 80153c8:	429a      	cmp	r2, r3
 80153ca:	d8f7      	bhi.n	80153bc <HAL_Delay+0x28>
  {
  }
}
 80153cc:	bf00      	nop
 80153ce:	bf00      	nop
 80153d0:	3710      	adds	r7, #16
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}
 80153d6:	bf00      	nop
 80153d8:	20000ee8 	.word	0x20000ee8

080153dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b084      	sub	sp, #16
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80153e4:	2300      	movs	r3, #0
 80153e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d101      	bne.n	80153f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80153ee:	2301      	movs	r3, #1
 80153f0:	e033      	b.n	801545a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d109      	bne.n	801540e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80153fa:	6878      	ldr	r0, [r7, #4]
 80153fc:	f7ff fb84 	bl	8014b08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	2200      	movs	r2, #0
 8015404:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	2200      	movs	r2, #0
 801540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015412:	f003 0310 	and.w	r3, r3, #16
 8015416:	2b00      	cmp	r3, #0
 8015418:	d118      	bne.n	801544c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801541e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8015422:	f023 0302 	bic.w	r3, r3, #2
 8015426:	f043 0202 	orr.w	r2, r3, #2
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 801542e:	6878      	ldr	r0, [r7, #4]
 8015430:	f000 fa68 	bl	8015904 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	2200      	movs	r2, #0
 8015438:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801543e:	f023 0303 	bic.w	r3, r3, #3
 8015442:	f043 0201 	orr.w	r2, r3, #1
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	641a      	str	r2, [r3, #64]	; 0x40
 801544a:	e001      	b.n	8015450 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 801544c:	2301      	movs	r3, #1
 801544e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	2200      	movs	r2, #0
 8015454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8015458:	7bfb      	ldrb	r3, [r7, #15]
}
 801545a:	4618      	mov	r0, r3
 801545c:	3710      	adds	r7, #16
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}
	...

08015464 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8015464:	b580      	push	{r7, lr}
 8015466:	b086      	sub	sp, #24
 8015468:	af00      	add	r7, sp, #0
 801546a:	60f8      	str	r0, [r7, #12]
 801546c:	60b9      	str	r1, [r7, #8]
 801546e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8015470:	2300      	movs	r3, #0
 8015472:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801547a:	2b01      	cmp	r3, #1
 801547c:	d101      	bne.n	8015482 <HAL_ADC_Start_DMA+0x1e>
 801547e:	2302      	movs	r3, #2
 8015480:	e0e9      	b.n	8015656 <HAL_ADC_Start_DMA+0x1f2>
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	2201      	movs	r2, #1
 8015486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	689b      	ldr	r3, [r3, #8]
 8015490:	f003 0301 	and.w	r3, r3, #1
 8015494:	2b01      	cmp	r3, #1
 8015496:	d018      	beq.n	80154ca <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	689a      	ldr	r2, [r3, #8]
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	f042 0201 	orr.w	r2, r2, #1
 80154a6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80154a8:	4b6d      	ldr	r3, [pc, #436]	; (8015660 <HAL_ADC_Start_DMA+0x1fc>)
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	4a6d      	ldr	r2, [pc, #436]	; (8015664 <HAL_ADC_Start_DMA+0x200>)
 80154ae:	fba2 2303 	umull	r2, r3, r2, r3
 80154b2:	0c9a      	lsrs	r2, r3, #18
 80154b4:	4613      	mov	r3, r2
 80154b6:	005b      	lsls	r3, r3, #1
 80154b8:	4413      	add	r3, r2
 80154ba:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80154bc:	e002      	b.n	80154c4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80154be:	693b      	ldr	r3, [r7, #16]
 80154c0:	3b01      	subs	r3, #1
 80154c2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80154c4:	693b      	ldr	r3, [r7, #16]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d1f9      	bne.n	80154be <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	689b      	ldr	r3, [r3, #8]
 80154d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80154d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80154d8:	d107      	bne.n	80154ea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	689a      	ldr	r2, [r3, #8]
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80154e8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	689b      	ldr	r3, [r3, #8]
 80154f0:	f003 0301 	and.w	r3, r3, #1
 80154f4:	2b01      	cmp	r3, #1
 80154f6:	f040 80a1 	bne.w	801563c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8015502:	f023 0301 	bic.w	r3, r3, #1
 8015506:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	685b      	ldr	r3, [r3, #4]
 8015514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015518:	2b00      	cmp	r3, #0
 801551a:	d007      	beq.n	801552c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015520:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8015524:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015538:	d106      	bne.n	8015548 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801553e:	f023 0206 	bic.w	r2, r3, #6
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	645a      	str	r2, [r3, #68]	; 0x44
 8015546:	e002      	b.n	801554e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	2200      	movs	r2, #0
 801554c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	2200      	movs	r2, #0
 8015552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8015556:	4b44      	ldr	r3, [pc, #272]	; (8015668 <HAL_ADC_Start_DMA+0x204>)
 8015558:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801555e:	4a43      	ldr	r2, [pc, #268]	; (801566c <HAL_ADC_Start_DMA+0x208>)
 8015560:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015566:	4a42      	ldr	r2, [pc, #264]	; (8015670 <HAL_ADC_Start_DMA+0x20c>)
 8015568:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801556e:	4a41      	ldr	r2, [pc, #260]	; (8015674 <HAL_ADC_Start_DMA+0x210>)
 8015570:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	f06f 0222 	mvn.w	r2, #34	; 0x22
 801557a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	685a      	ldr	r2, [r3, #4]
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801558a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	689a      	ldr	r2, [r3, #8]
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801559a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	334c      	adds	r3, #76	; 0x4c
 80155a6:	4619      	mov	r1, r3
 80155a8:	68ba      	ldr	r2, [r7, #8]
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	f000 fce8 	bl	8015f80 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80155b0:	697b      	ldr	r3, [r7, #20]
 80155b2:	685b      	ldr	r3, [r3, #4]
 80155b4:	f003 031f 	and.w	r3, r3, #31
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d12a      	bne.n	8015612 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	4a2d      	ldr	r2, [pc, #180]	; (8015678 <HAL_ADC_Start_DMA+0x214>)
 80155c2:	4293      	cmp	r3, r2
 80155c4:	d015      	beq.n	80155f2 <HAL_ADC_Start_DMA+0x18e>
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	4a2c      	ldr	r2, [pc, #176]	; (801567c <HAL_ADC_Start_DMA+0x218>)
 80155cc:	4293      	cmp	r3, r2
 80155ce:	d105      	bne.n	80155dc <HAL_ADC_Start_DMA+0x178>
 80155d0:	4b25      	ldr	r3, [pc, #148]	; (8015668 <HAL_ADC_Start_DMA+0x204>)
 80155d2:	685b      	ldr	r3, [r3, #4]
 80155d4:	f003 031f 	and.w	r3, r3, #31
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d00a      	beq.n	80155f2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	4a27      	ldr	r2, [pc, #156]	; (8015680 <HAL_ADC_Start_DMA+0x21c>)
 80155e2:	4293      	cmp	r3, r2
 80155e4:	d136      	bne.n	8015654 <HAL_ADC_Start_DMA+0x1f0>
 80155e6:	4b20      	ldr	r3, [pc, #128]	; (8015668 <HAL_ADC_Start_DMA+0x204>)
 80155e8:	685b      	ldr	r3, [r3, #4]
 80155ea:	f003 0310 	and.w	r3, r3, #16
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d130      	bne.n	8015654 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	689b      	ldr	r3, [r3, #8]
 80155f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d129      	bne.n	8015654 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	689a      	ldr	r2, [r3, #8]
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801560e:	609a      	str	r2, [r3, #8]
 8015610:	e020      	b.n	8015654 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	4a18      	ldr	r2, [pc, #96]	; (8015678 <HAL_ADC_Start_DMA+0x214>)
 8015618:	4293      	cmp	r3, r2
 801561a:	d11b      	bne.n	8015654 <HAL_ADC_Start_DMA+0x1f0>
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	689b      	ldr	r3, [r3, #8]
 8015622:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8015626:	2b00      	cmp	r3, #0
 8015628:	d114      	bne.n	8015654 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	689a      	ldr	r2, [r3, #8]
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8015638:	609a      	str	r2, [r3, #8]
 801563a:	e00b      	b.n	8015654 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015640:	f043 0210 	orr.w	r2, r3, #16
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801564c:	f043 0201 	orr.w	r2, r3, #1
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8015654:	2300      	movs	r3, #0
}
 8015656:	4618      	mov	r0, r3
 8015658:	3718      	adds	r7, #24
 801565a:	46bd      	mov	sp, r7
 801565c:	bd80      	pop	{r7, pc}
 801565e:	bf00      	nop
 8015660:	20000ee0 	.word	0x20000ee0
 8015664:	431bde83 	.word	0x431bde83
 8015668:	40012300 	.word	0x40012300
 801566c:	08015afd 	.word	0x08015afd
 8015670:	08015bb7 	.word	0x08015bb7
 8015674:	08015bd3 	.word	0x08015bd3
 8015678:	40012000 	.word	0x40012000
 801567c:	40012100 	.word	0x40012100
 8015680:	40012200 	.word	0x40012200

08015684 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8015684:	b480      	push	{r7}
 8015686:	b083      	sub	sp, #12
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 801568c:	bf00      	nop
 801568e:	370c      	adds	r7, #12
 8015690:	46bd      	mov	sp, r7
 8015692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015696:	4770      	bx	lr

08015698 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8015698:	b480      	push	{r7}
 801569a:	b083      	sub	sp, #12
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80156a0:	bf00      	nop
 80156a2:	370c      	adds	r7, #12
 80156a4:	46bd      	mov	sp, r7
 80156a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156aa:	4770      	bx	lr

080156ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80156ac:	b480      	push	{r7}
 80156ae:	b083      	sub	sp, #12
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80156b4:	bf00      	nop
 80156b6:	370c      	adds	r7, #12
 80156b8:	46bd      	mov	sp, r7
 80156ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156be:	4770      	bx	lr

080156c0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80156c0:	b480      	push	{r7}
 80156c2:	b085      	sub	sp, #20
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
 80156c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80156ca:	2300      	movs	r3, #0
 80156cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80156d4:	2b01      	cmp	r3, #1
 80156d6:	d101      	bne.n	80156dc <HAL_ADC_ConfigChannel+0x1c>
 80156d8:	2302      	movs	r3, #2
 80156da:	e105      	b.n	80158e8 <HAL_ADC_ConfigChannel+0x228>
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	2201      	movs	r2, #1
 80156e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80156e4:	683b      	ldr	r3, [r7, #0]
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	2b09      	cmp	r3, #9
 80156ea:	d925      	bls.n	8015738 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	68d9      	ldr	r1, [r3, #12]
 80156f2:	683b      	ldr	r3, [r7, #0]
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	b29b      	uxth	r3, r3
 80156f8:	461a      	mov	r2, r3
 80156fa:	4613      	mov	r3, r2
 80156fc:	005b      	lsls	r3, r3, #1
 80156fe:	4413      	add	r3, r2
 8015700:	3b1e      	subs	r3, #30
 8015702:	2207      	movs	r2, #7
 8015704:	fa02 f303 	lsl.w	r3, r2, r3
 8015708:	43da      	mvns	r2, r3
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	400a      	ands	r2, r1
 8015710:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	68d9      	ldr	r1, [r3, #12]
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	689a      	ldr	r2, [r3, #8]
 801571c:	683b      	ldr	r3, [r7, #0]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	b29b      	uxth	r3, r3
 8015722:	4618      	mov	r0, r3
 8015724:	4603      	mov	r3, r0
 8015726:	005b      	lsls	r3, r3, #1
 8015728:	4403      	add	r3, r0
 801572a:	3b1e      	subs	r3, #30
 801572c:	409a      	lsls	r2, r3
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	430a      	orrs	r2, r1
 8015734:	60da      	str	r2, [r3, #12]
 8015736:	e022      	b.n	801577e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	6919      	ldr	r1, [r3, #16]
 801573e:	683b      	ldr	r3, [r7, #0]
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	b29b      	uxth	r3, r3
 8015744:	461a      	mov	r2, r3
 8015746:	4613      	mov	r3, r2
 8015748:	005b      	lsls	r3, r3, #1
 801574a:	4413      	add	r3, r2
 801574c:	2207      	movs	r2, #7
 801574e:	fa02 f303 	lsl.w	r3, r2, r3
 8015752:	43da      	mvns	r2, r3
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	400a      	ands	r2, r1
 801575a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	6919      	ldr	r1, [r3, #16]
 8015762:	683b      	ldr	r3, [r7, #0]
 8015764:	689a      	ldr	r2, [r3, #8]
 8015766:	683b      	ldr	r3, [r7, #0]
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	b29b      	uxth	r3, r3
 801576c:	4618      	mov	r0, r3
 801576e:	4603      	mov	r3, r0
 8015770:	005b      	lsls	r3, r3, #1
 8015772:	4403      	add	r3, r0
 8015774:	409a      	lsls	r2, r3
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	430a      	orrs	r2, r1
 801577c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	685b      	ldr	r3, [r3, #4]
 8015782:	2b06      	cmp	r3, #6
 8015784:	d824      	bhi.n	80157d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801578c:	683b      	ldr	r3, [r7, #0]
 801578e:	685a      	ldr	r2, [r3, #4]
 8015790:	4613      	mov	r3, r2
 8015792:	009b      	lsls	r3, r3, #2
 8015794:	4413      	add	r3, r2
 8015796:	3b05      	subs	r3, #5
 8015798:	221f      	movs	r2, #31
 801579a:	fa02 f303 	lsl.w	r3, r2, r3
 801579e:	43da      	mvns	r2, r3
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	400a      	ands	r2, r1
 80157a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	b29b      	uxth	r3, r3
 80157b4:	4618      	mov	r0, r3
 80157b6:	683b      	ldr	r3, [r7, #0]
 80157b8:	685a      	ldr	r2, [r3, #4]
 80157ba:	4613      	mov	r3, r2
 80157bc:	009b      	lsls	r3, r3, #2
 80157be:	4413      	add	r3, r2
 80157c0:	3b05      	subs	r3, #5
 80157c2:	fa00 f203 	lsl.w	r2, r0, r3
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	430a      	orrs	r2, r1
 80157cc:	635a      	str	r2, [r3, #52]	; 0x34
 80157ce:	e04c      	b.n	801586a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80157d0:	683b      	ldr	r3, [r7, #0]
 80157d2:	685b      	ldr	r3, [r3, #4]
 80157d4:	2b0c      	cmp	r3, #12
 80157d6:	d824      	bhi.n	8015822 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80157de:	683b      	ldr	r3, [r7, #0]
 80157e0:	685a      	ldr	r2, [r3, #4]
 80157e2:	4613      	mov	r3, r2
 80157e4:	009b      	lsls	r3, r3, #2
 80157e6:	4413      	add	r3, r2
 80157e8:	3b23      	subs	r3, #35	; 0x23
 80157ea:	221f      	movs	r2, #31
 80157ec:	fa02 f303 	lsl.w	r3, r2, r3
 80157f0:	43da      	mvns	r2, r3
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	400a      	ands	r2, r1
 80157f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8015800:	683b      	ldr	r3, [r7, #0]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	b29b      	uxth	r3, r3
 8015806:	4618      	mov	r0, r3
 8015808:	683b      	ldr	r3, [r7, #0]
 801580a:	685a      	ldr	r2, [r3, #4]
 801580c:	4613      	mov	r3, r2
 801580e:	009b      	lsls	r3, r3, #2
 8015810:	4413      	add	r3, r2
 8015812:	3b23      	subs	r3, #35	; 0x23
 8015814:	fa00 f203 	lsl.w	r2, r0, r3
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	430a      	orrs	r2, r1
 801581e:	631a      	str	r2, [r3, #48]	; 0x30
 8015820:	e023      	b.n	801586a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015828:	683b      	ldr	r3, [r7, #0]
 801582a:	685a      	ldr	r2, [r3, #4]
 801582c:	4613      	mov	r3, r2
 801582e:	009b      	lsls	r3, r3, #2
 8015830:	4413      	add	r3, r2
 8015832:	3b41      	subs	r3, #65	; 0x41
 8015834:	221f      	movs	r2, #31
 8015836:	fa02 f303 	lsl.w	r3, r2, r3
 801583a:	43da      	mvns	r2, r3
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	400a      	ands	r2, r1
 8015842:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	b29b      	uxth	r3, r3
 8015850:	4618      	mov	r0, r3
 8015852:	683b      	ldr	r3, [r7, #0]
 8015854:	685a      	ldr	r2, [r3, #4]
 8015856:	4613      	mov	r3, r2
 8015858:	009b      	lsls	r3, r3, #2
 801585a:	4413      	add	r3, r2
 801585c:	3b41      	subs	r3, #65	; 0x41
 801585e:	fa00 f203 	lsl.w	r2, r0, r3
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	430a      	orrs	r2, r1
 8015868:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801586a:	4b22      	ldr	r3, [pc, #136]	; (80158f4 <HAL_ADC_ConfigChannel+0x234>)
 801586c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	4a21      	ldr	r2, [pc, #132]	; (80158f8 <HAL_ADC_ConfigChannel+0x238>)
 8015874:	4293      	cmp	r3, r2
 8015876:	d109      	bne.n	801588c <HAL_ADC_ConfigChannel+0x1cc>
 8015878:	683b      	ldr	r3, [r7, #0]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	2b12      	cmp	r3, #18
 801587e:	d105      	bne.n	801588c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	685b      	ldr	r3, [r3, #4]
 8015884:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	4a19      	ldr	r2, [pc, #100]	; (80158f8 <HAL_ADC_ConfigChannel+0x238>)
 8015892:	4293      	cmp	r3, r2
 8015894:	d123      	bne.n	80158de <HAL_ADC_ConfigChannel+0x21e>
 8015896:	683b      	ldr	r3, [r7, #0]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	2b10      	cmp	r3, #16
 801589c:	d003      	beq.n	80158a6 <HAL_ADC_ConfigChannel+0x1e6>
 801589e:	683b      	ldr	r3, [r7, #0]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	2b11      	cmp	r3, #17
 80158a4:	d11b      	bne.n	80158de <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	685b      	ldr	r3, [r3, #4]
 80158aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80158b2:	683b      	ldr	r3, [r7, #0]
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	2b10      	cmp	r3, #16
 80158b8:	d111      	bne.n	80158de <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80158ba:	4b10      	ldr	r3, [pc, #64]	; (80158fc <HAL_ADC_ConfigChannel+0x23c>)
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	4a10      	ldr	r2, [pc, #64]	; (8015900 <HAL_ADC_ConfigChannel+0x240>)
 80158c0:	fba2 2303 	umull	r2, r3, r2, r3
 80158c4:	0c9a      	lsrs	r2, r3, #18
 80158c6:	4613      	mov	r3, r2
 80158c8:	009b      	lsls	r3, r3, #2
 80158ca:	4413      	add	r3, r2
 80158cc:	005b      	lsls	r3, r3, #1
 80158ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80158d0:	e002      	b.n	80158d8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	3b01      	subs	r3, #1
 80158d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80158d8:	68bb      	ldr	r3, [r7, #8]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d1f9      	bne.n	80158d2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	2200      	movs	r2, #0
 80158e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80158e6:	2300      	movs	r3, #0
}
 80158e8:	4618      	mov	r0, r3
 80158ea:	3714      	adds	r7, #20
 80158ec:	46bd      	mov	sp, r7
 80158ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f2:	4770      	bx	lr
 80158f4:	40012300 	.word	0x40012300
 80158f8:	40012000 	.word	0x40012000
 80158fc:	20000ee0 	.word	0x20000ee0
 8015900:	431bde83 	.word	0x431bde83

08015904 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8015904:	b480      	push	{r7}
 8015906:	b085      	sub	sp, #20
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801590c:	4b79      	ldr	r3, [pc, #484]	; (8015af4 <ADC_Init+0x1f0>)
 801590e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	685b      	ldr	r3, [r3, #4]
 8015914:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	685a      	ldr	r2, [r3, #4]
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	685b      	ldr	r3, [r3, #4]
 8015924:	431a      	orrs	r2, r3
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	685a      	ldr	r2, [r3, #4]
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	6859      	ldr	r1, [r3, #4]
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	691b      	ldr	r3, [r3, #16]
 8015944:	021a      	lsls	r2, r3, #8
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	430a      	orrs	r2, r1
 801594c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	685a      	ldr	r2, [r3, #4]
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801595c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	6859      	ldr	r1, [r3, #4]
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	689a      	ldr	r2, [r3, #8]
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	430a      	orrs	r2, r1
 801596e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	689a      	ldr	r2, [r3, #8]
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801597e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	6899      	ldr	r1, [r3, #8]
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	68da      	ldr	r2, [r3, #12]
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	430a      	orrs	r2, r1
 8015990:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015996:	4a58      	ldr	r2, [pc, #352]	; (8015af8 <ADC_Init+0x1f4>)
 8015998:	4293      	cmp	r3, r2
 801599a:	d022      	beq.n	80159e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	689a      	ldr	r2, [r3, #8]
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80159aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	6899      	ldr	r1, [r3, #8]
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	430a      	orrs	r2, r1
 80159bc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	689a      	ldr	r2, [r3, #8]
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80159cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	6899      	ldr	r1, [r3, #8]
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	430a      	orrs	r2, r1
 80159de:	609a      	str	r2, [r3, #8]
 80159e0:	e00f      	b.n	8015a02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	689a      	ldr	r2, [r3, #8]
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80159f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	689a      	ldr	r2, [r3, #8]
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8015a00:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	689a      	ldr	r2, [r3, #8]
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	f022 0202 	bic.w	r2, r2, #2
 8015a10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	6899      	ldr	r1, [r3, #8]
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	7e1b      	ldrb	r3, [r3, #24]
 8015a1c:	005a      	lsls	r2, r3, #1
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	430a      	orrs	r2, r1
 8015a24:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d01b      	beq.n	8015a68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	685a      	ldr	r2, [r3, #4]
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015a3e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	685a      	ldr	r2, [r3, #4]
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8015a4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	6859      	ldr	r1, [r3, #4]
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a5a:	3b01      	subs	r3, #1
 8015a5c:	035a      	lsls	r2, r3, #13
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	430a      	orrs	r2, r1
 8015a64:	605a      	str	r2, [r3, #4]
 8015a66:	e007      	b.n	8015a78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	685a      	ldr	r2, [r3, #4]
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015a76:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8015a86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	69db      	ldr	r3, [r3, #28]
 8015a92:	3b01      	subs	r3, #1
 8015a94:	051a      	lsls	r2, r3, #20
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	430a      	orrs	r2, r1
 8015a9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	689a      	ldr	r2, [r3, #8]
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8015aac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	6899      	ldr	r1, [r3, #8]
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015aba:	025a      	lsls	r2, r3, #9
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	430a      	orrs	r2, r1
 8015ac2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	689a      	ldr	r2, [r3, #8]
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015ad2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	6899      	ldr	r1, [r3, #8]
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	695b      	ldr	r3, [r3, #20]
 8015ade:	029a      	lsls	r2, r3, #10
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	430a      	orrs	r2, r1
 8015ae6:	609a      	str	r2, [r3, #8]
}
 8015ae8:	bf00      	nop
 8015aea:	3714      	adds	r7, #20
 8015aec:	46bd      	mov	sp, r7
 8015aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af2:	4770      	bx	lr
 8015af4:	40012300 	.word	0x40012300
 8015af8:	0f000001 	.word	0x0f000001

08015afc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b084      	sub	sp, #16
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b08:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b0e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d13c      	bne.n	8015b90 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	689b      	ldr	r3, [r3, #8]
 8015b28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d12b      	bne.n	8015b88 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d127      	bne.n	8015b88 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b3e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d006      	beq.n	8015b54 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	689b      	ldr	r3, [r3, #8]
 8015b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d119      	bne.n	8015b88 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	685a      	ldr	r2, [r3, #4]
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	f022 0220 	bic.w	r2, r2, #32
 8015b62:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d105      	bne.n	8015b88 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b80:	f043 0201 	orr.w	r2, r3, #1
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8015b88:	68f8      	ldr	r0, [r7, #12]
 8015b8a:	f7ff fd7b 	bl	8015684 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8015b8e:	e00e      	b.n	8015bae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b94:	f003 0310 	and.w	r3, r3, #16
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d003      	beq.n	8015ba4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8015b9c:	68f8      	ldr	r0, [r7, #12]
 8015b9e:	f7ff fd85 	bl	80156ac <HAL_ADC_ErrorCallback>
}
 8015ba2:	e004      	b.n	8015bae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015baa:	6878      	ldr	r0, [r7, #4]
 8015bac:	4798      	blx	r3
}
 8015bae:	bf00      	nop
 8015bb0:	3710      	adds	r7, #16
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}

08015bb6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8015bb6:	b580      	push	{r7, lr}
 8015bb8:	b084      	sub	sp, #16
 8015bba:	af00      	add	r7, sp, #0
 8015bbc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015bc2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8015bc4:	68f8      	ldr	r0, [r7, #12]
 8015bc6:	f7ff fd67 	bl	8015698 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8015bca:	bf00      	nop
 8015bcc:	3710      	adds	r7, #16
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	bd80      	pop	{r7, pc}

08015bd2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8015bd2:	b580      	push	{r7, lr}
 8015bd4:	b084      	sub	sp, #16
 8015bd6:	af00      	add	r7, sp, #0
 8015bd8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015bde:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	2240      	movs	r2, #64	; 0x40
 8015be4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015bea:	f043 0204 	orr.w	r2, r3, #4
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8015bf2:	68f8      	ldr	r0, [r7, #12]
 8015bf4:	f7ff fd5a 	bl	80156ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8015bf8:	bf00      	nop
 8015bfa:	3710      	adds	r7, #16
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	bd80      	pop	{r7, pc}

08015c00 <__NVIC_SetPriorityGrouping>:
{
 8015c00:	b480      	push	{r7}
 8015c02:	b085      	sub	sp, #20
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	f003 0307 	and.w	r3, r3, #7
 8015c0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015c10:	4b0c      	ldr	r3, [pc, #48]	; (8015c44 <__NVIC_SetPriorityGrouping+0x44>)
 8015c12:	68db      	ldr	r3, [r3, #12]
 8015c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8015c16:	68ba      	ldr	r2, [r7, #8]
 8015c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8015c1c:	4013      	ands	r3, r2
 8015c1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015c24:	68bb      	ldr	r3, [r7, #8]
 8015c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8015c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8015c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8015c32:	4a04      	ldr	r2, [pc, #16]	; (8015c44 <__NVIC_SetPriorityGrouping+0x44>)
 8015c34:	68bb      	ldr	r3, [r7, #8]
 8015c36:	60d3      	str	r3, [r2, #12]
}
 8015c38:	bf00      	nop
 8015c3a:	3714      	adds	r7, #20
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c42:	4770      	bx	lr
 8015c44:	e000ed00 	.word	0xe000ed00

08015c48 <__NVIC_GetPriorityGrouping>:
{
 8015c48:	b480      	push	{r7}
 8015c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015c4c:	4b04      	ldr	r3, [pc, #16]	; (8015c60 <__NVIC_GetPriorityGrouping+0x18>)
 8015c4e:	68db      	ldr	r3, [r3, #12]
 8015c50:	0a1b      	lsrs	r3, r3, #8
 8015c52:	f003 0307 	and.w	r3, r3, #7
}
 8015c56:	4618      	mov	r0, r3
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c5e:	4770      	bx	lr
 8015c60:	e000ed00 	.word	0xe000ed00

08015c64 <__NVIC_EnableIRQ>:
{
 8015c64:	b480      	push	{r7}
 8015c66:	b083      	sub	sp, #12
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	db0b      	blt.n	8015c8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015c76:	79fb      	ldrb	r3, [r7, #7]
 8015c78:	f003 021f 	and.w	r2, r3, #31
 8015c7c:	4907      	ldr	r1, [pc, #28]	; (8015c9c <__NVIC_EnableIRQ+0x38>)
 8015c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015c82:	095b      	lsrs	r3, r3, #5
 8015c84:	2001      	movs	r0, #1
 8015c86:	fa00 f202 	lsl.w	r2, r0, r2
 8015c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015c8e:	bf00      	nop
 8015c90:	370c      	adds	r7, #12
 8015c92:	46bd      	mov	sp, r7
 8015c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c98:	4770      	bx	lr
 8015c9a:	bf00      	nop
 8015c9c:	e000e100 	.word	0xe000e100

08015ca0 <__NVIC_SetPriority>:
{
 8015ca0:	b480      	push	{r7}
 8015ca2:	b083      	sub	sp, #12
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	6039      	str	r1, [r7, #0]
 8015caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	db0a      	blt.n	8015cca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015cb4:	683b      	ldr	r3, [r7, #0]
 8015cb6:	b2da      	uxtb	r2, r3
 8015cb8:	490c      	ldr	r1, [pc, #48]	; (8015cec <__NVIC_SetPriority+0x4c>)
 8015cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015cbe:	0112      	lsls	r2, r2, #4
 8015cc0:	b2d2      	uxtb	r2, r2
 8015cc2:	440b      	add	r3, r1
 8015cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015cc8:	e00a      	b.n	8015ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015cca:	683b      	ldr	r3, [r7, #0]
 8015ccc:	b2da      	uxtb	r2, r3
 8015cce:	4908      	ldr	r1, [pc, #32]	; (8015cf0 <__NVIC_SetPriority+0x50>)
 8015cd0:	79fb      	ldrb	r3, [r7, #7]
 8015cd2:	f003 030f 	and.w	r3, r3, #15
 8015cd6:	3b04      	subs	r3, #4
 8015cd8:	0112      	lsls	r2, r2, #4
 8015cda:	b2d2      	uxtb	r2, r2
 8015cdc:	440b      	add	r3, r1
 8015cde:	761a      	strb	r2, [r3, #24]
}
 8015ce0:	bf00      	nop
 8015ce2:	370c      	adds	r7, #12
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cea:	4770      	bx	lr
 8015cec:	e000e100 	.word	0xe000e100
 8015cf0:	e000ed00 	.word	0xe000ed00

08015cf4 <NVIC_EncodePriority>:
{
 8015cf4:	b480      	push	{r7}
 8015cf6:	b089      	sub	sp, #36	; 0x24
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	60f8      	str	r0, [r7, #12]
 8015cfc:	60b9      	str	r1, [r7, #8]
 8015cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	f003 0307 	and.w	r3, r3, #7
 8015d06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8015d08:	69fb      	ldr	r3, [r7, #28]
 8015d0a:	f1c3 0307 	rsb	r3, r3, #7
 8015d0e:	2b04      	cmp	r3, #4
 8015d10:	bf28      	it	cs
 8015d12:	2304      	movcs	r3, #4
 8015d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8015d16:	69fb      	ldr	r3, [r7, #28]
 8015d18:	3304      	adds	r3, #4
 8015d1a:	2b06      	cmp	r3, #6
 8015d1c:	d902      	bls.n	8015d24 <NVIC_EncodePriority+0x30>
 8015d1e:	69fb      	ldr	r3, [r7, #28]
 8015d20:	3b03      	subs	r3, #3
 8015d22:	e000      	b.n	8015d26 <NVIC_EncodePriority+0x32>
 8015d24:	2300      	movs	r3, #0
 8015d26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015d2c:	69bb      	ldr	r3, [r7, #24]
 8015d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8015d32:	43da      	mvns	r2, r3
 8015d34:	68bb      	ldr	r3, [r7, #8]
 8015d36:	401a      	ands	r2, r3
 8015d38:	697b      	ldr	r3, [r7, #20]
 8015d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015d3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015d40:	697b      	ldr	r3, [r7, #20]
 8015d42:	fa01 f303 	lsl.w	r3, r1, r3
 8015d46:	43d9      	mvns	r1, r3
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015d4c:	4313      	orrs	r3, r2
}
 8015d4e:	4618      	mov	r0, r3
 8015d50:	3724      	adds	r7, #36	; 0x24
 8015d52:	46bd      	mov	sp, r7
 8015d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d58:	4770      	bx	lr
	...

08015d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b082      	sub	sp, #8
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	3b01      	subs	r3, #1
 8015d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015d6c:	d301      	bcc.n	8015d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8015d6e:	2301      	movs	r3, #1
 8015d70:	e00f      	b.n	8015d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8015d72:	4a0a      	ldr	r2, [pc, #40]	; (8015d9c <SysTick_Config+0x40>)
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	3b01      	subs	r3, #1
 8015d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8015d7a:	210f      	movs	r1, #15
 8015d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015d80:	f7ff ff8e 	bl	8015ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8015d84:	4b05      	ldr	r3, [pc, #20]	; (8015d9c <SysTick_Config+0x40>)
 8015d86:	2200      	movs	r2, #0
 8015d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8015d8a:	4b04      	ldr	r3, [pc, #16]	; (8015d9c <SysTick_Config+0x40>)
 8015d8c:	2207      	movs	r2, #7
 8015d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8015d90:	2300      	movs	r3, #0
}
 8015d92:	4618      	mov	r0, r3
 8015d94:	3708      	adds	r7, #8
 8015d96:	46bd      	mov	sp, r7
 8015d98:	bd80      	pop	{r7, pc}
 8015d9a:	bf00      	nop
 8015d9c:	e000e010 	.word	0xe000e010

08015da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b082      	sub	sp, #8
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8015da8:	6878      	ldr	r0, [r7, #4]
 8015daa:	f7ff ff29 	bl	8015c00 <__NVIC_SetPriorityGrouping>
}
 8015dae:	bf00      	nop
 8015db0:	3708      	adds	r7, #8
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bd80      	pop	{r7, pc}

08015db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8015db6:	b580      	push	{r7, lr}
 8015db8:	b086      	sub	sp, #24
 8015dba:	af00      	add	r7, sp, #0
 8015dbc:	4603      	mov	r3, r0
 8015dbe:	60b9      	str	r1, [r7, #8]
 8015dc0:	607a      	str	r2, [r7, #4]
 8015dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8015dc8:	f7ff ff3e 	bl	8015c48 <__NVIC_GetPriorityGrouping>
 8015dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015dce:	687a      	ldr	r2, [r7, #4]
 8015dd0:	68b9      	ldr	r1, [r7, #8]
 8015dd2:	6978      	ldr	r0, [r7, #20]
 8015dd4:	f7ff ff8e 	bl	8015cf4 <NVIC_EncodePriority>
 8015dd8:	4602      	mov	r2, r0
 8015dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015dde:	4611      	mov	r1, r2
 8015de0:	4618      	mov	r0, r3
 8015de2:	f7ff ff5d 	bl	8015ca0 <__NVIC_SetPriority>
}
 8015de6:	bf00      	nop
 8015de8:	3718      	adds	r7, #24
 8015dea:	46bd      	mov	sp, r7
 8015dec:	bd80      	pop	{r7, pc}

08015dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015dee:	b580      	push	{r7, lr}
 8015df0:	b082      	sub	sp, #8
 8015df2:	af00      	add	r7, sp, #0
 8015df4:	4603      	mov	r3, r0
 8015df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	f7ff ff31 	bl	8015c64 <__NVIC_EnableIRQ>
}
 8015e02:	bf00      	nop
 8015e04:	3708      	adds	r7, #8
 8015e06:	46bd      	mov	sp, r7
 8015e08:	bd80      	pop	{r7, pc}

08015e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8015e0a:	b580      	push	{r7, lr}
 8015e0c:	b082      	sub	sp, #8
 8015e0e:	af00      	add	r7, sp, #0
 8015e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8015e12:	6878      	ldr	r0, [r7, #4]
 8015e14:	f7ff ffa2 	bl	8015d5c <SysTick_Config>
 8015e18:	4603      	mov	r3, r0
}
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	3708      	adds	r7, #8
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	bd80      	pop	{r7, pc}
	...

08015e24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b086      	sub	sp, #24
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8015e30:	f7ff faa4 	bl	801537c <HAL_GetTick>
 8015e34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d101      	bne.n	8015e40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8015e3c:	2301      	movs	r3, #1
 8015e3e:	e099      	b.n	8015f74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	2202      	movs	r2, #2
 8015e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	681a      	ldr	r2, [r3, #0]
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	f022 0201 	bic.w	r2, r2, #1
 8015e5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015e60:	e00f      	b.n	8015e82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8015e62:	f7ff fa8b 	bl	801537c <HAL_GetTick>
 8015e66:	4602      	mov	r2, r0
 8015e68:	693b      	ldr	r3, [r7, #16]
 8015e6a:	1ad3      	subs	r3, r2, r3
 8015e6c:	2b05      	cmp	r3, #5
 8015e6e:	d908      	bls.n	8015e82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	2220      	movs	r2, #32
 8015e74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	2203      	movs	r2, #3
 8015e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8015e7e:	2303      	movs	r3, #3
 8015e80:	e078      	b.n	8015f74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	f003 0301 	and.w	r3, r3, #1
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d1e8      	bne.n	8015e62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8015e98:	697a      	ldr	r2, [r7, #20]
 8015e9a:	4b38      	ldr	r3, [pc, #224]	; (8015f7c <HAL_DMA_Init+0x158>)
 8015e9c:	4013      	ands	r3, r2
 8015e9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	685a      	ldr	r2, [r3, #4]
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	689b      	ldr	r3, [r3, #8]
 8015ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8015eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	691b      	ldr	r3, [r3, #16]
 8015eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	699b      	ldr	r3, [r3, #24]
 8015ec0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015ec6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	6a1b      	ldr	r3, [r3, #32]
 8015ecc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8015ece:	697a      	ldr	r2, [r7, #20]
 8015ed0:	4313      	orrs	r3, r2
 8015ed2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ed8:	2b04      	cmp	r3, #4
 8015eda:	d107      	bne.n	8015eec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ee4:	4313      	orrs	r3, r2
 8015ee6:	697a      	ldr	r2, [r7, #20]
 8015ee8:	4313      	orrs	r3, r2
 8015eea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	697a      	ldr	r2, [r7, #20]
 8015ef2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	695b      	ldr	r3, [r3, #20]
 8015efa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8015efc:	697b      	ldr	r3, [r7, #20]
 8015efe:	f023 0307 	bic.w	r3, r3, #7
 8015f02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f08:	697a      	ldr	r2, [r7, #20]
 8015f0a:	4313      	orrs	r3, r2
 8015f0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f12:	2b04      	cmp	r3, #4
 8015f14:	d117      	bne.n	8015f46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f1a:	697a      	ldr	r2, [r7, #20]
 8015f1c:	4313      	orrs	r3, r2
 8015f1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d00e      	beq.n	8015f46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8015f28:	6878      	ldr	r0, [r7, #4]
 8015f2a:	f000 fb0f 	bl	801654c <DMA_CheckFifoParam>
 8015f2e:	4603      	mov	r3, r0
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d008      	beq.n	8015f46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	2240      	movs	r2, #64	; 0x40
 8015f38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	2201      	movs	r2, #1
 8015f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8015f42:	2301      	movs	r3, #1
 8015f44:	e016      	b.n	8015f74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	697a      	ldr	r2, [r7, #20]
 8015f4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8015f4e:	6878      	ldr	r0, [r7, #4]
 8015f50:	f000 fac6 	bl	80164e0 <DMA_CalcBaseAndBitshift>
 8015f54:	4603      	mov	r3, r0
 8015f56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015f5c:	223f      	movs	r2, #63	; 0x3f
 8015f5e:	409a      	lsls	r2, r3
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	2200      	movs	r2, #0
 8015f68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	2201      	movs	r2, #1
 8015f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8015f72:	2300      	movs	r3, #0
}
 8015f74:	4618      	mov	r0, r3
 8015f76:	3718      	adds	r7, #24
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd80      	pop	{r7, pc}
 8015f7c:	f010803f 	.word	0xf010803f

08015f80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b086      	sub	sp, #24
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	60f8      	str	r0, [r7, #12]
 8015f88:	60b9      	str	r1, [r7, #8]
 8015f8a:	607a      	str	r2, [r7, #4]
 8015f8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015f8e:	2300      	movs	r3, #0
 8015f90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015f9e:	2b01      	cmp	r3, #1
 8015fa0:	d101      	bne.n	8015fa6 <HAL_DMA_Start_IT+0x26>
 8015fa2:	2302      	movs	r3, #2
 8015fa4:	e040      	b.n	8016028 <HAL_DMA_Start_IT+0xa8>
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	2201      	movs	r2, #1
 8015faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015fb4:	b2db      	uxtb	r3, r3
 8015fb6:	2b01      	cmp	r3, #1
 8015fb8:	d12f      	bne.n	801601a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	2202      	movs	r2, #2
 8015fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8015fc8:	683b      	ldr	r3, [r7, #0]
 8015fca:	687a      	ldr	r2, [r7, #4]
 8015fcc:	68b9      	ldr	r1, [r7, #8]
 8015fce:	68f8      	ldr	r0, [r7, #12]
 8015fd0:	f000 fa58 	bl	8016484 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015fd8:	223f      	movs	r2, #63	; 0x3f
 8015fda:	409a      	lsls	r2, r3
 8015fdc:	693b      	ldr	r3, [r7, #16]
 8015fde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	681a      	ldr	r2, [r3, #0]
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	f042 0216 	orr.w	r2, r2, #22
 8015fee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d007      	beq.n	8016008 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	681a      	ldr	r2, [r3, #0]
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	f042 0208 	orr.w	r2, r2, #8
 8016006:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	681a      	ldr	r2, [r3, #0]
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	f042 0201 	orr.w	r2, r2, #1
 8016016:	601a      	str	r2, [r3, #0]
 8016018:	e005      	b.n	8016026 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	2200      	movs	r2, #0
 801601e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8016022:	2302      	movs	r3, #2
 8016024:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8016026:	7dfb      	ldrb	r3, [r7, #23]
}
 8016028:	4618      	mov	r0, r3
 801602a:	3718      	adds	r7, #24
 801602c:	46bd      	mov	sp, r7
 801602e:	bd80      	pop	{r7, pc}

08016030 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8016030:	b580      	push	{r7, lr}
 8016032:	b084      	sub	sp, #16
 8016034:	af00      	add	r7, sp, #0
 8016036:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801603c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801603e:	f7ff f99d 	bl	801537c <HAL_GetTick>
 8016042:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801604a:	b2db      	uxtb	r3, r3
 801604c:	2b02      	cmp	r3, #2
 801604e:	d008      	beq.n	8016062 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	2280      	movs	r2, #128	; 0x80
 8016054:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	2200      	movs	r2, #0
 801605a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801605e:	2301      	movs	r3, #1
 8016060:	e052      	b.n	8016108 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	681a      	ldr	r2, [r3, #0]
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	f022 0216 	bic.w	r2, r2, #22
 8016070:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	695a      	ldr	r2, [r3, #20]
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016080:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016086:	2b00      	cmp	r3, #0
 8016088:	d103      	bne.n	8016092 <HAL_DMA_Abort+0x62>
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801608e:	2b00      	cmp	r3, #0
 8016090:	d007      	beq.n	80160a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	681a      	ldr	r2, [r3, #0]
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	f022 0208 	bic.w	r2, r2, #8
 80160a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	681a      	ldr	r2, [r3, #0]
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	f022 0201 	bic.w	r2, r2, #1
 80160b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80160b2:	e013      	b.n	80160dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80160b4:	f7ff f962 	bl	801537c <HAL_GetTick>
 80160b8:	4602      	mov	r2, r0
 80160ba:	68bb      	ldr	r3, [r7, #8]
 80160bc:	1ad3      	subs	r3, r2, r3
 80160be:	2b05      	cmp	r3, #5
 80160c0:	d90c      	bls.n	80160dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	2220      	movs	r2, #32
 80160c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	2203      	movs	r2, #3
 80160cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	2200      	movs	r2, #0
 80160d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80160d8:	2303      	movs	r3, #3
 80160da:	e015      	b.n	8016108 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	f003 0301 	and.w	r3, r3, #1
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d1e4      	bne.n	80160b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80160ee:	223f      	movs	r2, #63	; 0x3f
 80160f0:	409a      	lsls	r2, r3
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	2201      	movs	r2, #1
 80160fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	2200      	movs	r2, #0
 8016102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8016106:	2300      	movs	r3, #0
}
 8016108:	4618      	mov	r0, r3
 801610a:	3710      	adds	r7, #16
 801610c:	46bd      	mov	sp, r7
 801610e:	bd80      	pop	{r7, pc}

08016110 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016110:	b480      	push	{r7}
 8016112:	b083      	sub	sp, #12
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801611e:	b2db      	uxtb	r3, r3
 8016120:	2b02      	cmp	r3, #2
 8016122:	d004      	beq.n	801612e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	2280      	movs	r2, #128	; 0x80
 8016128:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801612a:	2301      	movs	r3, #1
 801612c:	e00c      	b.n	8016148 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	2205      	movs	r2, #5
 8016132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	681a      	ldr	r2, [r3, #0]
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	f022 0201 	bic.w	r2, r2, #1
 8016144:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8016146:	2300      	movs	r3, #0
}
 8016148:	4618      	mov	r0, r3
 801614a:	370c      	adds	r7, #12
 801614c:	46bd      	mov	sp, r7
 801614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016152:	4770      	bx	lr

08016154 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8016154:	b580      	push	{r7, lr}
 8016156:	b086      	sub	sp, #24
 8016158:	af00      	add	r7, sp, #0
 801615a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801615c:	2300      	movs	r3, #0
 801615e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8016160:	4b8e      	ldr	r3, [pc, #568]	; (801639c <HAL_DMA_IRQHandler+0x248>)
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	4a8e      	ldr	r2, [pc, #568]	; (80163a0 <HAL_DMA_IRQHandler+0x24c>)
 8016166:	fba2 2303 	umull	r2, r3, r2, r3
 801616a:	0a9b      	lsrs	r3, r3, #10
 801616c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016172:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8016174:	693b      	ldr	r3, [r7, #16]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801617e:	2208      	movs	r2, #8
 8016180:	409a      	lsls	r2, r3
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	4013      	ands	r3, r2
 8016186:	2b00      	cmp	r3, #0
 8016188:	d01a      	beq.n	80161c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	f003 0304 	and.w	r3, r3, #4
 8016194:	2b00      	cmp	r3, #0
 8016196:	d013      	beq.n	80161c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	681a      	ldr	r2, [r3, #0]
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	f022 0204 	bic.w	r2, r2, #4
 80161a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80161ac:	2208      	movs	r2, #8
 80161ae:	409a      	lsls	r2, r3
 80161b0:	693b      	ldr	r3, [r7, #16]
 80161b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80161b8:	f043 0201 	orr.w	r2, r3, #1
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80161c4:	2201      	movs	r2, #1
 80161c6:	409a      	lsls	r2, r3
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	4013      	ands	r3, r2
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d012      	beq.n	80161f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	695b      	ldr	r3, [r3, #20]
 80161d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d00b      	beq.n	80161f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80161e2:	2201      	movs	r2, #1
 80161e4:	409a      	lsls	r2, r3
 80161e6:	693b      	ldr	r3, [r7, #16]
 80161e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80161ee:	f043 0202 	orr.w	r2, r3, #2
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80161fa:	2204      	movs	r2, #4
 80161fc:	409a      	lsls	r2, r3
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	4013      	ands	r3, r2
 8016202:	2b00      	cmp	r3, #0
 8016204:	d012      	beq.n	801622c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	f003 0302 	and.w	r3, r3, #2
 8016210:	2b00      	cmp	r3, #0
 8016212:	d00b      	beq.n	801622c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016218:	2204      	movs	r2, #4
 801621a:	409a      	lsls	r2, r3
 801621c:	693b      	ldr	r3, [r7, #16]
 801621e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016224:	f043 0204 	orr.w	r2, r3, #4
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016230:	2210      	movs	r2, #16
 8016232:	409a      	lsls	r2, r3
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	4013      	ands	r3, r2
 8016238:	2b00      	cmp	r3, #0
 801623a:	d043      	beq.n	80162c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	f003 0308 	and.w	r3, r3, #8
 8016246:	2b00      	cmp	r3, #0
 8016248:	d03c      	beq.n	80162c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801624e:	2210      	movs	r2, #16
 8016250:	409a      	lsls	r2, r3
 8016252:	693b      	ldr	r3, [r7, #16]
 8016254:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016260:	2b00      	cmp	r3, #0
 8016262:	d018      	beq.n	8016296 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801626e:	2b00      	cmp	r3, #0
 8016270:	d108      	bne.n	8016284 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016276:	2b00      	cmp	r3, #0
 8016278:	d024      	beq.n	80162c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801627e:	6878      	ldr	r0, [r7, #4]
 8016280:	4798      	blx	r3
 8016282:	e01f      	b.n	80162c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016288:	2b00      	cmp	r3, #0
 801628a:	d01b      	beq.n	80162c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016290:	6878      	ldr	r0, [r7, #4]
 8016292:	4798      	blx	r3
 8016294:	e016      	b.n	80162c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d107      	bne.n	80162b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	681a      	ldr	r2, [r3, #0]
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	f022 0208 	bic.w	r2, r2, #8
 80162b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d003      	beq.n	80162c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162c0:	6878      	ldr	r0, [r7, #4]
 80162c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80162c8:	2220      	movs	r2, #32
 80162ca:	409a      	lsls	r2, r3
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	4013      	ands	r3, r2
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	f000 808f 	beq.w	80163f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	f003 0310 	and.w	r3, r3, #16
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	f000 8087 	beq.w	80163f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80162ea:	2220      	movs	r2, #32
 80162ec:	409a      	lsls	r2, r3
 80162ee:	693b      	ldr	r3, [r7, #16]
 80162f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80162f8:	b2db      	uxtb	r3, r3
 80162fa:	2b05      	cmp	r3, #5
 80162fc:	d136      	bne.n	801636c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	681a      	ldr	r2, [r3, #0]
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	f022 0216 	bic.w	r2, r2, #22
 801630c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	695a      	ldr	r2, [r3, #20]
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801631c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016322:	2b00      	cmp	r3, #0
 8016324:	d103      	bne.n	801632e <HAL_DMA_IRQHandler+0x1da>
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801632a:	2b00      	cmp	r3, #0
 801632c:	d007      	beq.n	801633e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	681a      	ldr	r2, [r3, #0]
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	f022 0208 	bic.w	r2, r2, #8
 801633c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016342:	223f      	movs	r2, #63	; 0x3f
 8016344:	409a      	lsls	r2, r3
 8016346:	693b      	ldr	r3, [r7, #16]
 8016348:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	2201      	movs	r2, #1
 801634e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	2200      	movs	r2, #0
 8016356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801635e:	2b00      	cmp	r3, #0
 8016360:	d07e      	beq.n	8016460 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016366:	6878      	ldr	r0, [r7, #4]
 8016368:	4798      	blx	r3
        }
        return;
 801636a:	e079      	b.n	8016460 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016376:	2b00      	cmp	r3, #0
 8016378:	d01d      	beq.n	80163b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016384:	2b00      	cmp	r3, #0
 8016386:	d10d      	bne.n	80163a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801638c:	2b00      	cmp	r3, #0
 801638e:	d031      	beq.n	80163f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016394:	6878      	ldr	r0, [r7, #4]
 8016396:	4798      	blx	r3
 8016398:	e02c      	b.n	80163f4 <HAL_DMA_IRQHandler+0x2a0>
 801639a:	bf00      	nop
 801639c:	20000ee0 	.word	0x20000ee0
 80163a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d023      	beq.n	80163f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80163b0:	6878      	ldr	r0, [r7, #4]
 80163b2:	4798      	blx	r3
 80163b4:	e01e      	b.n	80163f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d10f      	bne.n	80163e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	681a      	ldr	r2, [r3, #0]
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	f022 0210 	bic.w	r2, r2, #16
 80163d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	2201      	movs	r2, #1
 80163d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	2200      	movs	r2, #0
 80163e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d003      	beq.n	80163f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80163f0:	6878      	ldr	r0, [r7, #4]
 80163f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d032      	beq.n	8016462 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016400:	f003 0301 	and.w	r3, r3, #1
 8016404:	2b00      	cmp	r3, #0
 8016406:	d022      	beq.n	801644e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	2205      	movs	r2, #5
 801640c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	681a      	ldr	r2, [r3, #0]
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	f022 0201 	bic.w	r2, r2, #1
 801641e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8016420:	68bb      	ldr	r3, [r7, #8]
 8016422:	3301      	adds	r3, #1
 8016424:	60bb      	str	r3, [r7, #8]
 8016426:	697a      	ldr	r2, [r7, #20]
 8016428:	429a      	cmp	r2, r3
 801642a:	d307      	bcc.n	801643c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	f003 0301 	and.w	r3, r3, #1
 8016436:	2b00      	cmp	r3, #0
 8016438:	d1f2      	bne.n	8016420 <HAL_DMA_IRQHandler+0x2cc>
 801643a:	e000      	b.n	801643e <HAL_DMA_IRQHandler+0x2ea>
          break;
 801643c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	2201      	movs	r2, #1
 8016442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	2200      	movs	r2, #0
 801644a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016452:	2b00      	cmp	r3, #0
 8016454:	d005      	beq.n	8016462 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801645a:	6878      	ldr	r0, [r7, #4]
 801645c:	4798      	blx	r3
 801645e:	e000      	b.n	8016462 <HAL_DMA_IRQHandler+0x30e>
        return;
 8016460:	bf00      	nop
    }
  }
}
 8016462:	3718      	adds	r7, #24
 8016464:	46bd      	mov	sp, r7
 8016466:	bd80      	pop	{r7, pc}

08016468 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8016468:	b480      	push	{r7}
 801646a:	b083      	sub	sp, #12
 801646c:	af00      	add	r7, sp, #0
 801646e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016476:	b2db      	uxtb	r3, r3
}
 8016478:	4618      	mov	r0, r3
 801647a:	370c      	adds	r7, #12
 801647c:	46bd      	mov	sp, r7
 801647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016482:	4770      	bx	lr

08016484 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016484:	b480      	push	{r7}
 8016486:	b085      	sub	sp, #20
 8016488:	af00      	add	r7, sp, #0
 801648a:	60f8      	str	r0, [r7, #12]
 801648c:	60b9      	str	r1, [r7, #8]
 801648e:	607a      	str	r2, [r7, #4]
 8016490:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	681a      	ldr	r2, [r3, #0]
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80164a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	683a      	ldr	r2, [r7, #0]
 80164a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	689b      	ldr	r3, [r3, #8]
 80164ae:	2b40      	cmp	r3, #64	; 0x40
 80164b0:	d108      	bne.n	80164c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	687a      	ldr	r2, [r7, #4]
 80164b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	68ba      	ldr	r2, [r7, #8]
 80164c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80164c2:	e007      	b.n	80164d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	68ba      	ldr	r2, [r7, #8]
 80164ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	687a      	ldr	r2, [r7, #4]
 80164d2:	60da      	str	r2, [r3, #12]
}
 80164d4:	bf00      	nop
 80164d6:	3714      	adds	r7, #20
 80164d8:	46bd      	mov	sp, r7
 80164da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164de:	4770      	bx	lr

080164e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80164e0:	b480      	push	{r7}
 80164e2:	b085      	sub	sp, #20
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	b2db      	uxtb	r3, r3
 80164ee:	3b10      	subs	r3, #16
 80164f0:	4a14      	ldr	r2, [pc, #80]	; (8016544 <DMA_CalcBaseAndBitshift+0x64>)
 80164f2:	fba2 2303 	umull	r2, r3, r2, r3
 80164f6:	091b      	lsrs	r3, r3, #4
 80164f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80164fa:	4a13      	ldr	r2, [pc, #76]	; (8016548 <DMA_CalcBaseAndBitshift+0x68>)
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	4413      	add	r3, r2
 8016500:	781b      	ldrb	r3, [r3, #0]
 8016502:	461a      	mov	r2, r3
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	2b03      	cmp	r3, #3
 801650c:	d909      	bls.n	8016522 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8016516:	f023 0303 	bic.w	r3, r3, #3
 801651a:	1d1a      	adds	r2, r3, #4
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	659a      	str	r2, [r3, #88]	; 0x58
 8016520:	e007      	b.n	8016532 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801652a:	f023 0303 	bic.w	r3, r3, #3
 801652e:	687a      	ldr	r2, [r7, #4]
 8016530:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8016536:	4618      	mov	r0, r3
 8016538:	3714      	adds	r7, #20
 801653a:	46bd      	mov	sp, r7
 801653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016540:	4770      	bx	lr
 8016542:	bf00      	nop
 8016544:	aaaaaaab 	.word	0xaaaaaaab
 8016548:	0802d94c 	.word	0x0802d94c

0801654c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801654c:	b480      	push	{r7}
 801654e:	b085      	sub	sp, #20
 8016550:	af00      	add	r7, sp, #0
 8016552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016554:	2300      	movs	r3, #0
 8016556:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801655c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	699b      	ldr	r3, [r3, #24]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d11f      	bne.n	80165a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8016566:	68bb      	ldr	r3, [r7, #8]
 8016568:	2b03      	cmp	r3, #3
 801656a:	d856      	bhi.n	801661a <DMA_CheckFifoParam+0xce>
 801656c:	a201      	add	r2, pc, #4	; (adr r2, 8016574 <DMA_CheckFifoParam+0x28>)
 801656e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016572:	bf00      	nop
 8016574:	08016585 	.word	0x08016585
 8016578:	08016597 	.word	0x08016597
 801657c:	08016585 	.word	0x08016585
 8016580:	0801661b 	.word	0x0801661b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801658c:	2b00      	cmp	r3, #0
 801658e:	d046      	beq.n	801661e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8016590:	2301      	movs	r3, #1
 8016592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016594:	e043      	b.n	801661e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801659a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801659e:	d140      	bne.n	8016622 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80165a0:	2301      	movs	r3, #1
 80165a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80165a4:	e03d      	b.n	8016622 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	699b      	ldr	r3, [r3, #24]
 80165aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80165ae:	d121      	bne.n	80165f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80165b0:	68bb      	ldr	r3, [r7, #8]
 80165b2:	2b03      	cmp	r3, #3
 80165b4:	d837      	bhi.n	8016626 <DMA_CheckFifoParam+0xda>
 80165b6:	a201      	add	r2, pc, #4	; (adr r2, 80165bc <DMA_CheckFifoParam+0x70>)
 80165b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165bc:	080165cd 	.word	0x080165cd
 80165c0:	080165d3 	.word	0x080165d3
 80165c4:	080165cd 	.word	0x080165cd
 80165c8:	080165e5 	.word	0x080165e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80165cc:	2301      	movs	r3, #1
 80165ce:	73fb      	strb	r3, [r7, #15]
      break;
 80165d0:	e030      	b.n	8016634 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d025      	beq.n	801662a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80165de:	2301      	movs	r3, #1
 80165e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80165e2:	e022      	b.n	801662a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80165ec:	d11f      	bne.n	801662e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80165ee:	2301      	movs	r3, #1
 80165f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80165f2:	e01c      	b.n	801662e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80165f4:	68bb      	ldr	r3, [r7, #8]
 80165f6:	2b02      	cmp	r3, #2
 80165f8:	d903      	bls.n	8016602 <DMA_CheckFifoParam+0xb6>
 80165fa:	68bb      	ldr	r3, [r7, #8]
 80165fc:	2b03      	cmp	r3, #3
 80165fe:	d003      	beq.n	8016608 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8016600:	e018      	b.n	8016634 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8016602:	2301      	movs	r3, #1
 8016604:	73fb      	strb	r3, [r7, #15]
      break;
 8016606:	e015      	b.n	8016634 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801660c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016610:	2b00      	cmp	r3, #0
 8016612:	d00e      	beq.n	8016632 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8016614:	2301      	movs	r3, #1
 8016616:	73fb      	strb	r3, [r7, #15]
      break;
 8016618:	e00b      	b.n	8016632 <DMA_CheckFifoParam+0xe6>
      break;
 801661a:	bf00      	nop
 801661c:	e00a      	b.n	8016634 <DMA_CheckFifoParam+0xe8>
      break;
 801661e:	bf00      	nop
 8016620:	e008      	b.n	8016634 <DMA_CheckFifoParam+0xe8>
      break;
 8016622:	bf00      	nop
 8016624:	e006      	b.n	8016634 <DMA_CheckFifoParam+0xe8>
      break;
 8016626:	bf00      	nop
 8016628:	e004      	b.n	8016634 <DMA_CheckFifoParam+0xe8>
      break;
 801662a:	bf00      	nop
 801662c:	e002      	b.n	8016634 <DMA_CheckFifoParam+0xe8>
      break;   
 801662e:	bf00      	nop
 8016630:	e000      	b.n	8016634 <DMA_CheckFifoParam+0xe8>
      break;
 8016632:	bf00      	nop
    }
  } 
  
  return status; 
 8016634:	7bfb      	ldrb	r3, [r7, #15]
}
 8016636:	4618      	mov	r0, r3
 8016638:	3714      	adds	r7, #20
 801663a:	46bd      	mov	sp, r7
 801663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016640:	4770      	bx	lr
 8016642:	bf00      	nop

08016644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8016644:	b480      	push	{r7}
 8016646:	b089      	sub	sp, #36	; 0x24
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
 801664c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801664e:	2300      	movs	r3, #0
 8016650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8016652:	2300      	movs	r3, #0
 8016654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8016656:	2300      	movs	r3, #0
 8016658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801665a:	2300      	movs	r3, #0
 801665c:	61fb      	str	r3, [r7, #28]
 801665e:	e16b      	b.n	8016938 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8016660:	2201      	movs	r2, #1
 8016662:	69fb      	ldr	r3, [r7, #28]
 8016664:	fa02 f303 	lsl.w	r3, r2, r3
 8016668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801666a:	683b      	ldr	r3, [r7, #0]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	697a      	ldr	r2, [r7, #20]
 8016670:	4013      	ands	r3, r2
 8016672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8016674:	693a      	ldr	r2, [r7, #16]
 8016676:	697b      	ldr	r3, [r7, #20]
 8016678:	429a      	cmp	r2, r3
 801667a:	f040 815a 	bne.w	8016932 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801667e:	683b      	ldr	r3, [r7, #0]
 8016680:	685b      	ldr	r3, [r3, #4]
 8016682:	f003 0303 	and.w	r3, r3, #3
 8016686:	2b01      	cmp	r3, #1
 8016688:	d005      	beq.n	8016696 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801668a:	683b      	ldr	r3, [r7, #0]
 801668c:	685b      	ldr	r3, [r3, #4]
 801668e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8016692:	2b02      	cmp	r3, #2
 8016694:	d130      	bne.n	80166f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	689b      	ldr	r3, [r3, #8]
 801669a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801669c:	69fb      	ldr	r3, [r7, #28]
 801669e:	005b      	lsls	r3, r3, #1
 80166a0:	2203      	movs	r2, #3
 80166a2:	fa02 f303 	lsl.w	r3, r2, r3
 80166a6:	43db      	mvns	r3, r3
 80166a8:	69ba      	ldr	r2, [r7, #24]
 80166aa:	4013      	ands	r3, r2
 80166ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80166ae:	683b      	ldr	r3, [r7, #0]
 80166b0:	68da      	ldr	r2, [r3, #12]
 80166b2:	69fb      	ldr	r3, [r7, #28]
 80166b4:	005b      	lsls	r3, r3, #1
 80166b6:	fa02 f303 	lsl.w	r3, r2, r3
 80166ba:	69ba      	ldr	r2, [r7, #24]
 80166bc:	4313      	orrs	r3, r2
 80166be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	69ba      	ldr	r2, [r7, #24]
 80166c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	685b      	ldr	r3, [r3, #4]
 80166ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80166cc:	2201      	movs	r2, #1
 80166ce:	69fb      	ldr	r3, [r7, #28]
 80166d0:	fa02 f303 	lsl.w	r3, r2, r3
 80166d4:	43db      	mvns	r3, r3
 80166d6:	69ba      	ldr	r2, [r7, #24]
 80166d8:	4013      	ands	r3, r2
 80166da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80166dc:	683b      	ldr	r3, [r7, #0]
 80166de:	685b      	ldr	r3, [r3, #4]
 80166e0:	091b      	lsrs	r3, r3, #4
 80166e2:	f003 0201 	and.w	r2, r3, #1
 80166e6:	69fb      	ldr	r3, [r7, #28]
 80166e8:	fa02 f303 	lsl.w	r3, r2, r3
 80166ec:	69ba      	ldr	r2, [r7, #24]
 80166ee:	4313      	orrs	r3, r2
 80166f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	69ba      	ldr	r2, [r7, #24]
 80166f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80166f8:	683b      	ldr	r3, [r7, #0]
 80166fa:	685b      	ldr	r3, [r3, #4]
 80166fc:	f003 0303 	and.w	r3, r3, #3
 8016700:	2b03      	cmp	r3, #3
 8016702:	d017      	beq.n	8016734 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	68db      	ldr	r3, [r3, #12]
 8016708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801670a:	69fb      	ldr	r3, [r7, #28]
 801670c:	005b      	lsls	r3, r3, #1
 801670e:	2203      	movs	r2, #3
 8016710:	fa02 f303 	lsl.w	r3, r2, r3
 8016714:	43db      	mvns	r3, r3
 8016716:	69ba      	ldr	r2, [r7, #24]
 8016718:	4013      	ands	r3, r2
 801671a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801671c:	683b      	ldr	r3, [r7, #0]
 801671e:	689a      	ldr	r2, [r3, #8]
 8016720:	69fb      	ldr	r3, [r7, #28]
 8016722:	005b      	lsls	r3, r3, #1
 8016724:	fa02 f303 	lsl.w	r3, r2, r3
 8016728:	69ba      	ldr	r2, [r7, #24]
 801672a:	4313      	orrs	r3, r2
 801672c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	69ba      	ldr	r2, [r7, #24]
 8016732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016734:	683b      	ldr	r3, [r7, #0]
 8016736:	685b      	ldr	r3, [r3, #4]
 8016738:	f003 0303 	and.w	r3, r3, #3
 801673c:	2b02      	cmp	r3, #2
 801673e:	d123      	bne.n	8016788 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8016740:	69fb      	ldr	r3, [r7, #28]
 8016742:	08da      	lsrs	r2, r3, #3
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	3208      	adds	r2, #8
 8016748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801674c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801674e:	69fb      	ldr	r3, [r7, #28]
 8016750:	f003 0307 	and.w	r3, r3, #7
 8016754:	009b      	lsls	r3, r3, #2
 8016756:	220f      	movs	r2, #15
 8016758:	fa02 f303 	lsl.w	r3, r2, r3
 801675c:	43db      	mvns	r3, r3
 801675e:	69ba      	ldr	r2, [r7, #24]
 8016760:	4013      	ands	r3, r2
 8016762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8016764:	683b      	ldr	r3, [r7, #0]
 8016766:	691a      	ldr	r2, [r3, #16]
 8016768:	69fb      	ldr	r3, [r7, #28]
 801676a:	f003 0307 	and.w	r3, r3, #7
 801676e:	009b      	lsls	r3, r3, #2
 8016770:	fa02 f303 	lsl.w	r3, r2, r3
 8016774:	69ba      	ldr	r2, [r7, #24]
 8016776:	4313      	orrs	r3, r2
 8016778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801677a:	69fb      	ldr	r3, [r7, #28]
 801677c:	08da      	lsrs	r2, r3, #3
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	3208      	adds	r2, #8
 8016782:	69b9      	ldr	r1, [r7, #24]
 8016784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801678e:	69fb      	ldr	r3, [r7, #28]
 8016790:	005b      	lsls	r3, r3, #1
 8016792:	2203      	movs	r2, #3
 8016794:	fa02 f303 	lsl.w	r3, r2, r3
 8016798:	43db      	mvns	r3, r3
 801679a:	69ba      	ldr	r2, [r7, #24]
 801679c:	4013      	ands	r3, r2
 801679e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80167a0:	683b      	ldr	r3, [r7, #0]
 80167a2:	685b      	ldr	r3, [r3, #4]
 80167a4:	f003 0203 	and.w	r2, r3, #3
 80167a8:	69fb      	ldr	r3, [r7, #28]
 80167aa:	005b      	lsls	r3, r3, #1
 80167ac:	fa02 f303 	lsl.w	r3, r2, r3
 80167b0:	69ba      	ldr	r2, [r7, #24]
 80167b2:	4313      	orrs	r3, r2
 80167b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	69ba      	ldr	r2, [r7, #24]
 80167ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80167bc:	683b      	ldr	r3, [r7, #0]
 80167be:	685b      	ldr	r3, [r3, #4]
 80167c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	f000 80b4 	beq.w	8016932 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80167ca:	2300      	movs	r3, #0
 80167cc:	60fb      	str	r3, [r7, #12]
 80167ce:	4b60      	ldr	r3, [pc, #384]	; (8016950 <HAL_GPIO_Init+0x30c>)
 80167d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80167d2:	4a5f      	ldr	r2, [pc, #380]	; (8016950 <HAL_GPIO_Init+0x30c>)
 80167d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80167d8:	6453      	str	r3, [r2, #68]	; 0x44
 80167da:	4b5d      	ldr	r3, [pc, #372]	; (8016950 <HAL_GPIO_Init+0x30c>)
 80167dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80167de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80167e2:	60fb      	str	r3, [r7, #12]
 80167e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80167e6:	4a5b      	ldr	r2, [pc, #364]	; (8016954 <HAL_GPIO_Init+0x310>)
 80167e8:	69fb      	ldr	r3, [r7, #28]
 80167ea:	089b      	lsrs	r3, r3, #2
 80167ec:	3302      	adds	r3, #2
 80167ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80167f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80167f4:	69fb      	ldr	r3, [r7, #28]
 80167f6:	f003 0303 	and.w	r3, r3, #3
 80167fa:	009b      	lsls	r3, r3, #2
 80167fc:	220f      	movs	r2, #15
 80167fe:	fa02 f303 	lsl.w	r3, r2, r3
 8016802:	43db      	mvns	r3, r3
 8016804:	69ba      	ldr	r2, [r7, #24]
 8016806:	4013      	ands	r3, r2
 8016808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	4a52      	ldr	r2, [pc, #328]	; (8016958 <HAL_GPIO_Init+0x314>)
 801680e:	4293      	cmp	r3, r2
 8016810:	d02b      	beq.n	801686a <HAL_GPIO_Init+0x226>
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	4a51      	ldr	r2, [pc, #324]	; (801695c <HAL_GPIO_Init+0x318>)
 8016816:	4293      	cmp	r3, r2
 8016818:	d025      	beq.n	8016866 <HAL_GPIO_Init+0x222>
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	4a50      	ldr	r2, [pc, #320]	; (8016960 <HAL_GPIO_Init+0x31c>)
 801681e:	4293      	cmp	r3, r2
 8016820:	d01f      	beq.n	8016862 <HAL_GPIO_Init+0x21e>
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	4a4f      	ldr	r2, [pc, #316]	; (8016964 <HAL_GPIO_Init+0x320>)
 8016826:	4293      	cmp	r3, r2
 8016828:	d019      	beq.n	801685e <HAL_GPIO_Init+0x21a>
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	4a4e      	ldr	r2, [pc, #312]	; (8016968 <HAL_GPIO_Init+0x324>)
 801682e:	4293      	cmp	r3, r2
 8016830:	d013      	beq.n	801685a <HAL_GPIO_Init+0x216>
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	4a4d      	ldr	r2, [pc, #308]	; (801696c <HAL_GPIO_Init+0x328>)
 8016836:	4293      	cmp	r3, r2
 8016838:	d00d      	beq.n	8016856 <HAL_GPIO_Init+0x212>
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	4a4c      	ldr	r2, [pc, #304]	; (8016970 <HAL_GPIO_Init+0x32c>)
 801683e:	4293      	cmp	r3, r2
 8016840:	d007      	beq.n	8016852 <HAL_GPIO_Init+0x20e>
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	4a4b      	ldr	r2, [pc, #300]	; (8016974 <HAL_GPIO_Init+0x330>)
 8016846:	4293      	cmp	r3, r2
 8016848:	d101      	bne.n	801684e <HAL_GPIO_Init+0x20a>
 801684a:	2307      	movs	r3, #7
 801684c:	e00e      	b.n	801686c <HAL_GPIO_Init+0x228>
 801684e:	2308      	movs	r3, #8
 8016850:	e00c      	b.n	801686c <HAL_GPIO_Init+0x228>
 8016852:	2306      	movs	r3, #6
 8016854:	e00a      	b.n	801686c <HAL_GPIO_Init+0x228>
 8016856:	2305      	movs	r3, #5
 8016858:	e008      	b.n	801686c <HAL_GPIO_Init+0x228>
 801685a:	2304      	movs	r3, #4
 801685c:	e006      	b.n	801686c <HAL_GPIO_Init+0x228>
 801685e:	2303      	movs	r3, #3
 8016860:	e004      	b.n	801686c <HAL_GPIO_Init+0x228>
 8016862:	2302      	movs	r3, #2
 8016864:	e002      	b.n	801686c <HAL_GPIO_Init+0x228>
 8016866:	2301      	movs	r3, #1
 8016868:	e000      	b.n	801686c <HAL_GPIO_Init+0x228>
 801686a:	2300      	movs	r3, #0
 801686c:	69fa      	ldr	r2, [r7, #28]
 801686e:	f002 0203 	and.w	r2, r2, #3
 8016872:	0092      	lsls	r2, r2, #2
 8016874:	4093      	lsls	r3, r2
 8016876:	69ba      	ldr	r2, [r7, #24]
 8016878:	4313      	orrs	r3, r2
 801687a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801687c:	4935      	ldr	r1, [pc, #212]	; (8016954 <HAL_GPIO_Init+0x310>)
 801687e:	69fb      	ldr	r3, [r7, #28]
 8016880:	089b      	lsrs	r3, r3, #2
 8016882:	3302      	adds	r3, #2
 8016884:	69ba      	ldr	r2, [r7, #24]
 8016886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801688a:	4b3b      	ldr	r3, [pc, #236]	; (8016978 <HAL_GPIO_Init+0x334>)
 801688c:	689b      	ldr	r3, [r3, #8]
 801688e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016890:	693b      	ldr	r3, [r7, #16]
 8016892:	43db      	mvns	r3, r3
 8016894:	69ba      	ldr	r2, [r7, #24]
 8016896:	4013      	ands	r3, r2
 8016898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801689a:	683b      	ldr	r3, [r7, #0]
 801689c:	685b      	ldr	r3, [r3, #4]
 801689e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d003      	beq.n	80168ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80168a6:	69ba      	ldr	r2, [r7, #24]
 80168a8:	693b      	ldr	r3, [r7, #16]
 80168aa:	4313      	orrs	r3, r2
 80168ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80168ae:	4a32      	ldr	r2, [pc, #200]	; (8016978 <HAL_GPIO_Init+0x334>)
 80168b0:	69bb      	ldr	r3, [r7, #24]
 80168b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80168b4:	4b30      	ldr	r3, [pc, #192]	; (8016978 <HAL_GPIO_Init+0x334>)
 80168b6:	68db      	ldr	r3, [r3, #12]
 80168b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80168ba:	693b      	ldr	r3, [r7, #16]
 80168bc:	43db      	mvns	r3, r3
 80168be:	69ba      	ldr	r2, [r7, #24]
 80168c0:	4013      	ands	r3, r2
 80168c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80168c4:	683b      	ldr	r3, [r7, #0]
 80168c6:	685b      	ldr	r3, [r3, #4]
 80168c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d003      	beq.n	80168d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80168d0:	69ba      	ldr	r2, [r7, #24]
 80168d2:	693b      	ldr	r3, [r7, #16]
 80168d4:	4313      	orrs	r3, r2
 80168d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80168d8:	4a27      	ldr	r2, [pc, #156]	; (8016978 <HAL_GPIO_Init+0x334>)
 80168da:	69bb      	ldr	r3, [r7, #24]
 80168dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80168de:	4b26      	ldr	r3, [pc, #152]	; (8016978 <HAL_GPIO_Init+0x334>)
 80168e0:	685b      	ldr	r3, [r3, #4]
 80168e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80168e4:	693b      	ldr	r3, [r7, #16]
 80168e6:	43db      	mvns	r3, r3
 80168e8:	69ba      	ldr	r2, [r7, #24]
 80168ea:	4013      	ands	r3, r2
 80168ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80168ee:	683b      	ldr	r3, [r7, #0]
 80168f0:	685b      	ldr	r3, [r3, #4]
 80168f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d003      	beq.n	8016902 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80168fa:	69ba      	ldr	r2, [r7, #24]
 80168fc:	693b      	ldr	r3, [r7, #16]
 80168fe:	4313      	orrs	r3, r2
 8016900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8016902:	4a1d      	ldr	r2, [pc, #116]	; (8016978 <HAL_GPIO_Init+0x334>)
 8016904:	69bb      	ldr	r3, [r7, #24]
 8016906:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8016908:	4b1b      	ldr	r3, [pc, #108]	; (8016978 <HAL_GPIO_Init+0x334>)
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801690e:	693b      	ldr	r3, [r7, #16]
 8016910:	43db      	mvns	r3, r3
 8016912:	69ba      	ldr	r2, [r7, #24]
 8016914:	4013      	ands	r3, r2
 8016916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8016918:	683b      	ldr	r3, [r7, #0]
 801691a:	685b      	ldr	r3, [r3, #4]
 801691c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016920:	2b00      	cmp	r3, #0
 8016922:	d003      	beq.n	801692c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8016924:	69ba      	ldr	r2, [r7, #24]
 8016926:	693b      	ldr	r3, [r7, #16]
 8016928:	4313      	orrs	r3, r2
 801692a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801692c:	4a12      	ldr	r2, [pc, #72]	; (8016978 <HAL_GPIO_Init+0x334>)
 801692e:	69bb      	ldr	r3, [r7, #24]
 8016930:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016932:	69fb      	ldr	r3, [r7, #28]
 8016934:	3301      	adds	r3, #1
 8016936:	61fb      	str	r3, [r7, #28]
 8016938:	69fb      	ldr	r3, [r7, #28]
 801693a:	2b0f      	cmp	r3, #15
 801693c:	f67f ae90 	bls.w	8016660 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8016940:	bf00      	nop
 8016942:	bf00      	nop
 8016944:	3724      	adds	r7, #36	; 0x24
 8016946:	46bd      	mov	sp, r7
 8016948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801694c:	4770      	bx	lr
 801694e:	bf00      	nop
 8016950:	40023800 	.word	0x40023800
 8016954:	40013800 	.word	0x40013800
 8016958:	40020000 	.word	0x40020000
 801695c:	40020400 	.word	0x40020400
 8016960:	40020800 	.word	0x40020800
 8016964:	40020c00 	.word	0x40020c00
 8016968:	40021000 	.word	0x40021000
 801696c:	40021400 	.word	0x40021400
 8016970:	40021800 	.word	0x40021800
 8016974:	40021c00 	.word	0x40021c00
 8016978:	40013c00 	.word	0x40013c00

0801697c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801697c:	b480      	push	{r7}
 801697e:	b083      	sub	sp, #12
 8016980:	af00      	add	r7, sp, #0
 8016982:	6078      	str	r0, [r7, #4]
 8016984:	460b      	mov	r3, r1
 8016986:	807b      	strh	r3, [r7, #2]
 8016988:	4613      	mov	r3, r2
 801698a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801698c:	787b      	ldrb	r3, [r7, #1]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d003      	beq.n	801699a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8016992:	887a      	ldrh	r2, [r7, #2]
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8016998:	e003      	b.n	80169a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801699a:	887b      	ldrh	r3, [r7, #2]
 801699c:	041a      	lsls	r2, r3, #16
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	619a      	str	r2, [r3, #24]
}
 80169a2:	bf00      	nop
 80169a4:	370c      	adds	r7, #12
 80169a6:	46bd      	mov	sp, r7
 80169a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ac:	4770      	bx	lr

080169ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80169ae:	b580      	push	{r7, lr}
 80169b0:	b086      	sub	sp, #24
 80169b2:	af02      	add	r7, sp, #8
 80169b4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d101      	bne.n	80169c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80169bc:	2301      	movs	r3, #1
 80169be:	e101      	b.n	8016bc4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80169cc:	b2db      	uxtb	r3, r3
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d106      	bne.n	80169e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	2200      	movs	r2, #0
 80169d6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80169da:	6878      	ldr	r0, [r7, #4]
 80169dc:	f00b fac4 	bl	8021f68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	2203      	movs	r2, #3
 80169e4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80169e8:	68bb      	ldr	r3, [r7, #8]
 80169ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80169ee:	d102      	bne.n	80169f6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	2200      	movs	r2, #0
 80169f4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	4618      	mov	r0, r3
 80169fc:	f004 fb55 	bl	801b0aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	6818      	ldr	r0, [r3, #0]
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	7c1a      	ldrb	r2, [r3, #16]
 8016a08:	f88d 2000 	strb.w	r2, [sp]
 8016a0c:	3304      	adds	r3, #4
 8016a0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016a10:	f004 fa33 	bl	801ae7a <USB_CoreInit>
 8016a14:	4603      	mov	r3, r0
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d005      	beq.n	8016a26 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	2202      	movs	r2, #2
 8016a1e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8016a22:	2301      	movs	r3, #1
 8016a24:	e0ce      	b.n	8016bc4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	2100      	movs	r1, #0
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	f004 fb4d 	bl	801b0cc <USB_SetCurrentMode>
 8016a32:	4603      	mov	r3, r0
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d005      	beq.n	8016a44 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	2202      	movs	r2, #2
 8016a3c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8016a40:	2301      	movs	r3, #1
 8016a42:	e0bf      	b.n	8016bc4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016a44:	2300      	movs	r3, #0
 8016a46:	73fb      	strb	r3, [r7, #15]
 8016a48:	e04a      	b.n	8016ae0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8016a4a:	7bfa      	ldrb	r2, [r7, #15]
 8016a4c:	6879      	ldr	r1, [r7, #4]
 8016a4e:	4613      	mov	r3, r2
 8016a50:	00db      	lsls	r3, r3, #3
 8016a52:	4413      	add	r3, r2
 8016a54:	009b      	lsls	r3, r3, #2
 8016a56:	440b      	add	r3, r1
 8016a58:	3315      	adds	r3, #21
 8016a5a:	2201      	movs	r2, #1
 8016a5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8016a5e:	7bfa      	ldrb	r2, [r7, #15]
 8016a60:	6879      	ldr	r1, [r7, #4]
 8016a62:	4613      	mov	r3, r2
 8016a64:	00db      	lsls	r3, r3, #3
 8016a66:	4413      	add	r3, r2
 8016a68:	009b      	lsls	r3, r3, #2
 8016a6a:	440b      	add	r3, r1
 8016a6c:	3314      	adds	r3, #20
 8016a6e:	7bfa      	ldrb	r2, [r7, #15]
 8016a70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8016a72:	7bfa      	ldrb	r2, [r7, #15]
 8016a74:	7bfb      	ldrb	r3, [r7, #15]
 8016a76:	b298      	uxth	r0, r3
 8016a78:	6879      	ldr	r1, [r7, #4]
 8016a7a:	4613      	mov	r3, r2
 8016a7c:	00db      	lsls	r3, r3, #3
 8016a7e:	4413      	add	r3, r2
 8016a80:	009b      	lsls	r3, r3, #2
 8016a82:	440b      	add	r3, r1
 8016a84:	332e      	adds	r3, #46	; 0x2e
 8016a86:	4602      	mov	r2, r0
 8016a88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8016a8a:	7bfa      	ldrb	r2, [r7, #15]
 8016a8c:	6879      	ldr	r1, [r7, #4]
 8016a8e:	4613      	mov	r3, r2
 8016a90:	00db      	lsls	r3, r3, #3
 8016a92:	4413      	add	r3, r2
 8016a94:	009b      	lsls	r3, r3, #2
 8016a96:	440b      	add	r3, r1
 8016a98:	3318      	adds	r3, #24
 8016a9a:	2200      	movs	r2, #0
 8016a9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8016a9e:	7bfa      	ldrb	r2, [r7, #15]
 8016aa0:	6879      	ldr	r1, [r7, #4]
 8016aa2:	4613      	mov	r3, r2
 8016aa4:	00db      	lsls	r3, r3, #3
 8016aa6:	4413      	add	r3, r2
 8016aa8:	009b      	lsls	r3, r3, #2
 8016aaa:	440b      	add	r3, r1
 8016aac:	331c      	adds	r3, #28
 8016aae:	2200      	movs	r2, #0
 8016ab0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8016ab2:	7bfa      	ldrb	r2, [r7, #15]
 8016ab4:	6879      	ldr	r1, [r7, #4]
 8016ab6:	4613      	mov	r3, r2
 8016ab8:	00db      	lsls	r3, r3, #3
 8016aba:	4413      	add	r3, r2
 8016abc:	009b      	lsls	r3, r3, #2
 8016abe:	440b      	add	r3, r1
 8016ac0:	3320      	adds	r3, #32
 8016ac2:	2200      	movs	r2, #0
 8016ac4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8016ac6:	7bfa      	ldrb	r2, [r7, #15]
 8016ac8:	6879      	ldr	r1, [r7, #4]
 8016aca:	4613      	mov	r3, r2
 8016acc:	00db      	lsls	r3, r3, #3
 8016ace:	4413      	add	r3, r2
 8016ad0:	009b      	lsls	r3, r3, #2
 8016ad2:	440b      	add	r3, r1
 8016ad4:	3324      	adds	r3, #36	; 0x24
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016ada:	7bfb      	ldrb	r3, [r7, #15]
 8016adc:	3301      	adds	r3, #1
 8016ade:	73fb      	strb	r3, [r7, #15]
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	791b      	ldrb	r3, [r3, #4]
 8016ae4:	7bfa      	ldrb	r2, [r7, #15]
 8016ae6:	429a      	cmp	r2, r3
 8016ae8:	d3af      	bcc.n	8016a4a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016aea:	2300      	movs	r3, #0
 8016aec:	73fb      	strb	r3, [r7, #15]
 8016aee:	e044      	b.n	8016b7a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8016af0:	7bfa      	ldrb	r2, [r7, #15]
 8016af2:	6879      	ldr	r1, [r7, #4]
 8016af4:	4613      	mov	r3, r2
 8016af6:	00db      	lsls	r3, r3, #3
 8016af8:	4413      	add	r3, r2
 8016afa:	009b      	lsls	r3, r3, #2
 8016afc:	440b      	add	r3, r1
 8016afe:	f203 2355 	addw	r3, r3, #597	; 0x255
 8016b02:	2200      	movs	r2, #0
 8016b04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8016b06:	7bfa      	ldrb	r2, [r7, #15]
 8016b08:	6879      	ldr	r1, [r7, #4]
 8016b0a:	4613      	mov	r3, r2
 8016b0c:	00db      	lsls	r3, r3, #3
 8016b0e:	4413      	add	r3, r2
 8016b10:	009b      	lsls	r3, r3, #2
 8016b12:	440b      	add	r3, r1
 8016b14:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8016b18:	7bfa      	ldrb	r2, [r7, #15]
 8016b1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8016b1c:	7bfa      	ldrb	r2, [r7, #15]
 8016b1e:	6879      	ldr	r1, [r7, #4]
 8016b20:	4613      	mov	r3, r2
 8016b22:	00db      	lsls	r3, r3, #3
 8016b24:	4413      	add	r3, r2
 8016b26:	009b      	lsls	r3, r3, #2
 8016b28:	440b      	add	r3, r1
 8016b2a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8016b2e:	2200      	movs	r2, #0
 8016b30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8016b32:	7bfa      	ldrb	r2, [r7, #15]
 8016b34:	6879      	ldr	r1, [r7, #4]
 8016b36:	4613      	mov	r3, r2
 8016b38:	00db      	lsls	r3, r3, #3
 8016b3a:	4413      	add	r3, r2
 8016b3c:	009b      	lsls	r3, r3, #2
 8016b3e:	440b      	add	r3, r1
 8016b40:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016b44:	2200      	movs	r2, #0
 8016b46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8016b48:	7bfa      	ldrb	r2, [r7, #15]
 8016b4a:	6879      	ldr	r1, [r7, #4]
 8016b4c:	4613      	mov	r3, r2
 8016b4e:	00db      	lsls	r3, r3, #3
 8016b50:	4413      	add	r3, r2
 8016b52:	009b      	lsls	r3, r3, #2
 8016b54:	440b      	add	r3, r1
 8016b56:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8016b5a:	2200      	movs	r2, #0
 8016b5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8016b5e:	7bfa      	ldrb	r2, [r7, #15]
 8016b60:	6879      	ldr	r1, [r7, #4]
 8016b62:	4613      	mov	r3, r2
 8016b64:	00db      	lsls	r3, r3, #3
 8016b66:	4413      	add	r3, r2
 8016b68:	009b      	lsls	r3, r3, #2
 8016b6a:	440b      	add	r3, r1
 8016b6c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8016b70:	2200      	movs	r2, #0
 8016b72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016b74:	7bfb      	ldrb	r3, [r7, #15]
 8016b76:	3301      	adds	r3, #1
 8016b78:	73fb      	strb	r3, [r7, #15]
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	791b      	ldrb	r3, [r3, #4]
 8016b7e:	7bfa      	ldrb	r2, [r7, #15]
 8016b80:	429a      	cmp	r2, r3
 8016b82:	d3b5      	bcc.n	8016af0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	6818      	ldr	r0, [r3, #0]
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	7c1a      	ldrb	r2, [r3, #16]
 8016b8c:	f88d 2000 	strb.w	r2, [sp]
 8016b90:	3304      	adds	r3, #4
 8016b92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016b94:	f004 fae6 	bl	801b164 <USB_DevInit>
 8016b98:	4603      	mov	r3, r0
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d005      	beq.n	8016baa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	2202      	movs	r2, #2
 8016ba2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8016ba6:	2301      	movs	r3, #1
 8016ba8:	e00c      	b.n	8016bc4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	2200      	movs	r2, #0
 8016bae:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	2201      	movs	r2, #1
 8016bb4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	f005 fb2a 	bl	801c216 <USB_DevDisconnect>

  return HAL_OK;
 8016bc2:	2300      	movs	r3, #0
}
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	3710      	adds	r7, #16
 8016bc8:	46bd      	mov	sp, r7
 8016bca:	bd80      	pop	{r7, pc}

08016bcc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b084      	sub	sp, #16
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8016be0:	2b01      	cmp	r3, #1
 8016be2:	d101      	bne.n	8016be8 <HAL_PCD_Start+0x1c>
 8016be4:	2302      	movs	r3, #2
 8016be6:	e022      	b.n	8016c2e <HAL_PCD_Start+0x62>
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	2201      	movs	r2, #1
 8016bec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	68db      	ldr	r3, [r3, #12]
 8016bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d009      	beq.n	8016c10 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8016c00:	2b01      	cmp	r3, #1
 8016c02:	d105      	bne.n	8016c10 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	4618      	mov	r0, r3
 8016c16:	f004 fa37 	bl	801b088 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	4618      	mov	r0, r3
 8016c20:	f005 fad8 	bl	801c1d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	2200      	movs	r2, #0
 8016c28:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8016c2c:	2300      	movs	r3, #0
}
 8016c2e:	4618      	mov	r0, r3
 8016c30:	3710      	adds	r7, #16
 8016c32:	46bd      	mov	sp, r7
 8016c34:	bd80      	pop	{r7, pc}

08016c36 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8016c36:	b590      	push	{r4, r7, lr}
 8016c38:	b08d      	sub	sp, #52	; 0x34
 8016c3a:	af00      	add	r7, sp, #0
 8016c3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016c44:	6a3b      	ldr	r3, [r7, #32]
 8016c46:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	f005 fb96 	bl	801c37e <USB_GetMode>
 8016c52:	4603      	mov	r3, r0
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	f040 848c 	bne.w	8017572 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	4618      	mov	r0, r3
 8016c60:	f005 fafa 	bl	801c258 <USB_ReadInterrupts>
 8016c64:	4603      	mov	r3, r0
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	f000 8482 	beq.w	8017570 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8016c6c:	69fb      	ldr	r3, [r7, #28]
 8016c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c72:	689b      	ldr	r3, [r3, #8]
 8016c74:	0a1b      	lsrs	r3, r3, #8
 8016c76:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	4618      	mov	r0, r3
 8016c86:	f005 fae7 	bl	801c258 <USB_ReadInterrupts>
 8016c8a:	4603      	mov	r3, r0
 8016c8c:	f003 0302 	and.w	r3, r3, #2
 8016c90:	2b02      	cmp	r3, #2
 8016c92:	d107      	bne.n	8016ca4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	695a      	ldr	r2, [r3, #20]
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	f002 0202 	and.w	r2, r2, #2
 8016ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	4618      	mov	r0, r3
 8016caa:	f005 fad5 	bl	801c258 <USB_ReadInterrupts>
 8016cae:	4603      	mov	r3, r0
 8016cb0:	f003 0310 	and.w	r3, r3, #16
 8016cb4:	2b10      	cmp	r3, #16
 8016cb6:	d161      	bne.n	8016d7c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	699a      	ldr	r2, [r3, #24]
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	f022 0210 	bic.w	r2, r2, #16
 8016cc6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8016cc8:	6a3b      	ldr	r3, [r7, #32]
 8016cca:	6a1b      	ldr	r3, [r3, #32]
 8016ccc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8016cce:	69bb      	ldr	r3, [r7, #24]
 8016cd0:	f003 020f 	and.w	r2, r3, #15
 8016cd4:	4613      	mov	r3, r2
 8016cd6:	00db      	lsls	r3, r3, #3
 8016cd8:	4413      	add	r3, r2
 8016cda:	009b      	lsls	r3, r3, #2
 8016cdc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8016ce0:	687a      	ldr	r2, [r7, #4]
 8016ce2:	4413      	add	r3, r2
 8016ce4:	3304      	adds	r3, #4
 8016ce6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8016ce8:	69bb      	ldr	r3, [r7, #24]
 8016cea:	0c5b      	lsrs	r3, r3, #17
 8016cec:	f003 030f 	and.w	r3, r3, #15
 8016cf0:	2b02      	cmp	r3, #2
 8016cf2:	d124      	bne.n	8016d3e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8016cf4:	69ba      	ldr	r2, [r7, #24]
 8016cf6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8016cfa:	4013      	ands	r3, r2
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d035      	beq.n	8016d6c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8016d00:	697b      	ldr	r3, [r7, #20]
 8016d02:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8016d04:	69bb      	ldr	r3, [r7, #24]
 8016d06:	091b      	lsrs	r3, r3, #4
 8016d08:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8016d0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016d0e:	b29b      	uxth	r3, r3
 8016d10:	461a      	mov	r2, r3
 8016d12:	6a38      	ldr	r0, [r7, #32]
 8016d14:	f005 f90c 	bl	801bf30 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8016d18:	697b      	ldr	r3, [r7, #20]
 8016d1a:	68da      	ldr	r2, [r3, #12]
 8016d1c:	69bb      	ldr	r3, [r7, #24]
 8016d1e:	091b      	lsrs	r3, r3, #4
 8016d20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016d24:	441a      	add	r2, r3
 8016d26:	697b      	ldr	r3, [r7, #20]
 8016d28:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8016d2a:	697b      	ldr	r3, [r7, #20]
 8016d2c:	695a      	ldr	r2, [r3, #20]
 8016d2e:	69bb      	ldr	r3, [r7, #24]
 8016d30:	091b      	lsrs	r3, r3, #4
 8016d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016d36:	441a      	add	r2, r3
 8016d38:	697b      	ldr	r3, [r7, #20]
 8016d3a:	615a      	str	r2, [r3, #20]
 8016d3c:	e016      	b.n	8016d6c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8016d3e:	69bb      	ldr	r3, [r7, #24]
 8016d40:	0c5b      	lsrs	r3, r3, #17
 8016d42:	f003 030f 	and.w	r3, r3, #15
 8016d46:	2b06      	cmp	r3, #6
 8016d48:	d110      	bne.n	8016d6c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8016d50:	2208      	movs	r2, #8
 8016d52:	4619      	mov	r1, r3
 8016d54:	6a38      	ldr	r0, [r7, #32]
 8016d56:	f005 f8eb 	bl	801bf30 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8016d5a:	697b      	ldr	r3, [r7, #20]
 8016d5c:	695a      	ldr	r2, [r3, #20]
 8016d5e:	69bb      	ldr	r3, [r7, #24]
 8016d60:	091b      	lsrs	r3, r3, #4
 8016d62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016d66:	441a      	add	r2, r3
 8016d68:	697b      	ldr	r3, [r7, #20]
 8016d6a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	699a      	ldr	r2, [r3, #24]
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	f042 0210 	orr.w	r2, r2, #16
 8016d7a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	4618      	mov	r0, r3
 8016d82:	f005 fa69 	bl	801c258 <USB_ReadInterrupts>
 8016d86:	4603      	mov	r3, r0
 8016d88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016d8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8016d90:	f040 80a7 	bne.w	8016ee2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8016d94:	2300      	movs	r3, #0
 8016d96:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	f005 fa6e 	bl	801c27e <USB_ReadDevAllOutEpInterrupt>
 8016da2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8016da4:	e099      	b.n	8016eda <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8016da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016da8:	f003 0301 	and.w	r3, r3, #1
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	f000 808e 	beq.w	8016ece <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016db8:	b2d2      	uxtb	r2, r2
 8016dba:	4611      	mov	r1, r2
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	f005 fa92 	bl	801c2e6 <USB_ReadDevOutEPInterrupt>
 8016dc2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8016dc4:	693b      	ldr	r3, [r7, #16]
 8016dc6:	f003 0301 	and.w	r3, r3, #1
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d00c      	beq.n	8016de8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8016dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dd0:	015a      	lsls	r2, r3, #5
 8016dd2:	69fb      	ldr	r3, [r7, #28]
 8016dd4:	4413      	add	r3, r2
 8016dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016dda:	461a      	mov	r2, r3
 8016ddc:	2301      	movs	r3, #1
 8016dde:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8016de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016de2:	6878      	ldr	r0, [r7, #4]
 8016de4:	f000 fea2 	bl	8017b2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8016de8:	693b      	ldr	r3, [r7, #16]
 8016dea:	f003 0308 	and.w	r3, r3, #8
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d00c      	beq.n	8016e0c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8016df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016df4:	015a      	lsls	r2, r3, #5
 8016df6:	69fb      	ldr	r3, [r7, #28]
 8016df8:	4413      	add	r3, r2
 8016dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016dfe:	461a      	mov	r2, r3
 8016e00:	2308      	movs	r3, #8
 8016e02:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8016e04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016e06:	6878      	ldr	r0, [r7, #4]
 8016e08:	f000 ff78 	bl	8017cfc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8016e0c:	693b      	ldr	r3, [r7, #16]
 8016e0e:	f003 0310 	and.w	r3, r3, #16
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d008      	beq.n	8016e28 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8016e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e18:	015a      	lsls	r2, r3, #5
 8016e1a:	69fb      	ldr	r3, [r7, #28]
 8016e1c:	4413      	add	r3, r2
 8016e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016e22:	461a      	mov	r2, r3
 8016e24:	2310      	movs	r3, #16
 8016e26:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8016e28:	693b      	ldr	r3, [r7, #16]
 8016e2a:	f003 0302 	and.w	r3, r3, #2
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d030      	beq.n	8016e94 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8016e32:	6a3b      	ldr	r3, [r7, #32]
 8016e34:	695b      	ldr	r3, [r3, #20]
 8016e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016e3a:	2b80      	cmp	r3, #128	; 0x80
 8016e3c:	d109      	bne.n	8016e52 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8016e3e:	69fb      	ldr	r3, [r7, #28]
 8016e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016e44:	685b      	ldr	r3, [r3, #4]
 8016e46:	69fa      	ldr	r2, [r7, #28]
 8016e48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016e4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016e50:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8016e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e54:	4613      	mov	r3, r2
 8016e56:	00db      	lsls	r3, r3, #3
 8016e58:	4413      	add	r3, r2
 8016e5a:	009b      	lsls	r3, r3, #2
 8016e5c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8016e60:	687a      	ldr	r2, [r7, #4]
 8016e62:	4413      	add	r3, r2
 8016e64:	3304      	adds	r3, #4
 8016e66:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8016e68:	697b      	ldr	r3, [r7, #20]
 8016e6a:	78db      	ldrb	r3, [r3, #3]
 8016e6c:	2b01      	cmp	r3, #1
 8016e6e:	d108      	bne.n	8016e82 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8016e70:	697b      	ldr	r3, [r7, #20]
 8016e72:	2200      	movs	r2, #0
 8016e74:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8016e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e78:	b2db      	uxtb	r3, r3
 8016e7a:	4619      	mov	r1, r3
 8016e7c:	6878      	ldr	r0, [r7, #4]
 8016e7e:	f00b f979 	bl	8022174 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8016e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e84:	015a      	lsls	r2, r3, #5
 8016e86:	69fb      	ldr	r3, [r7, #28]
 8016e88:	4413      	add	r3, r2
 8016e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016e8e:	461a      	mov	r2, r3
 8016e90:	2302      	movs	r3, #2
 8016e92:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8016e94:	693b      	ldr	r3, [r7, #16]
 8016e96:	f003 0320 	and.w	r3, r3, #32
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d008      	beq.n	8016eb0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8016e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ea0:	015a      	lsls	r2, r3, #5
 8016ea2:	69fb      	ldr	r3, [r7, #28]
 8016ea4:	4413      	add	r3, r2
 8016ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016eaa:	461a      	mov	r2, r3
 8016eac:	2320      	movs	r3, #32
 8016eae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8016eb0:	693b      	ldr	r3, [r7, #16]
 8016eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d009      	beq.n	8016ece <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8016eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ebc:	015a      	lsls	r2, r3, #5
 8016ebe:	69fb      	ldr	r3, [r7, #28]
 8016ec0:	4413      	add	r3, r2
 8016ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016ec6:	461a      	mov	r2, r3
 8016ec8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016ecc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8016ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ed0:	3301      	adds	r3, #1
 8016ed2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8016ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ed6:	085b      	lsrs	r3, r3, #1
 8016ed8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8016eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	f47f af62 	bne.w	8016da6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	f005 f9b6 	bl	801c258 <USB_ReadInterrupts>
 8016eec:	4603      	mov	r3, r0
 8016eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016ef2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8016ef6:	f040 80db 	bne.w	80170b0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	4618      	mov	r0, r3
 8016f00:	f005 f9d7 	bl	801c2b2 <USB_ReadDevAllInEpInterrupt>
 8016f04:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8016f06:	2300      	movs	r3, #0
 8016f08:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8016f0a:	e0cd      	b.n	80170a8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8016f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f0e:	f003 0301 	and.w	r3, r3, #1
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	f000 80c2 	beq.w	801709c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f1e:	b2d2      	uxtb	r2, r2
 8016f20:	4611      	mov	r1, r2
 8016f22:	4618      	mov	r0, r3
 8016f24:	f005 f9fd 	bl	801c322 <USB_ReadDevInEPInterrupt>
 8016f28:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8016f2a:	693b      	ldr	r3, [r7, #16]
 8016f2c:	f003 0301 	and.w	r3, r3, #1
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d057      	beq.n	8016fe4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8016f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f36:	f003 030f 	and.w	r3, r3, #15
 8016f3a:	2201      	movs	r2, #1
 8016f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8016f40:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8016f42:	69fb      	ldr	r3, [r7, #28]
 8016f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	43db      	mvns	r3, r3
 8016f4e:	69f9      	ldr	r1, [r7, #28]
 8016f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016f54:	4013      	ands	r3, r2
 8016f56:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8016f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f5a:	015a      	lsls	r2, r3, #5
 8016f5c:	69fb      	ldr	r3, [r7, #28]
 8016f5e:	4413      	add	r3, r2
 8016f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016f64:	461a      	mov	r2, r3
 8016f66:	2301      	movs	r3, #1
 8016f68:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	799b      	ldrb	r3, [r3, #6]
 8016f6e:	2b01      	cmp	r3, #1
 8016f70:	d132      	bne.n	8016fd8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8016f72:	6879      	ldr	r1, [r7, #4]
 8016f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f76:	4613      	mov	r3, r2
 8016f78:	00db      	lsls	r3, r3, #3
 8016f7a:	4413      	add	r3, r2
 8016f7c:	009b      	lsls	r3, r3, #2
 8016f7e:	440b      	add	r3, r1
 8016f80:	3320      	adds	r3, #32
 8016f82:	6819      	ldr	r1, [r3, #0]
 8016f84:	6878      	ldr	r0, [r7, #4]
 8016f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f88:	4613      	mov	r3, r2
 8016f8a:	00db      	lsls	r3, r3, #3
 8016f8c:	4413      	add	r3, r2
 8016f8e:	009b      	lsls	r3, r3, #2
 8016f90:	4403      	add	r3, r0
 8016f92:	331c      	adds	r3, #28
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	4419      	add	r1, r3
 8016f98:	6878      	ldr	r0, [r7, #4]
 8016f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f9c:	4613      	mov	r3, r2
 8016f9e:	00db      	lsls	r3, r3, #3
 8016fa0:	4413      	add	r3, r2
 8016fa2:	009b      	lsls	r3, r3, #2
 8016fa4:	4403      	add	r3, r0
 8016fa6:	3320      	adds	r3, #32
 8016fa8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8016faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d113      	bne.n	8016fd8 <HAL_PCD_IRQHandler+0x3a2>
 8016fb0:	6879      	ldr	r1, [r7, #4]
 8016fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016fb4:	4613      	mov	r3, r2
 8016fb6:	00db      	lsls	r3, r3, #3
 8016fb8:	4413      	add	r3, r2
 8016fba:	009b      	lsls	r3, r3, #2
 8016fbc:	440b      	add	r3, r1
 8016fbe:	3324      	adds	r3, #36	; 0x24
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d108      	bne.n	8016fd8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	6818      	ldr	r0, [r3, #0]
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8016fd0:	461a      	mov	r2, r3
 8016fd2:	2101      	movs	r1, #1
 8016fd4:	f005 fa04 	bl	801c3e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8016fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fda:	b2db      	uxtb	r3, r3
 8016fdc:	4619      	mov	r1, r3
 8016fde:	6878      	ldr	r0, [r7, #4]
 8016fe0:	f00b f843 	bl	802206a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8016fe4:	693b      	ldr	r3, [r7, #16]
 8016fe6:	f003 0308 	and.w	r3, r3, #8
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d008      	beq.n	8017000 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8016fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ff0:	015a      	lsls	r2, r3, #5
 8016ff2:	69fb      	ldr	r3, [r7, #28]
 8016ff4:	4413      	add	r3, r2
 8016ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016ffa:	461a      	mov	r2, r3
 8016ffc:	2308      	movs	r3, #8
 8016ffe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8017000:	693b      	ldr	r3, [r7, #16]
 8017002:	f003 0310 	and.w	r3, r3, #16
 8017006:	2b00      	cmp	r3, #0
 8017008:	d008      	beq.n	801701c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 801700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801700c:	015a      	lsls	r2, r3, #5
 801700e:	69fb      	ldr	r3, [r7, #28]
 8017010:	4413      	add	r3, r2
 8017012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017016:	461a      	mov	r2, r3
 8017018:	2310      	movs	r3, #16
 801701a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 801701c:	693b      	ldr	r3, [r7, #16]
 801701e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017022:	2b00      	cmp	r3, #0
 8017024:	d008      	beq.n	8017038 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8017026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017028:	015a      	lsls	r2, r3, #5
 801702a:	69fb      	ldr	r3, [r7, #28]
 801702c:	4413      	add	r3, r2
 801702e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017032:	461a      	mov	r2, r3
 8017034:	2340      	movs	r3, #64	; 0x40
 8017036:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8017038:	693b      	ldr	r3, [r7, #16]
 801703a:	f003 0302 	and.w	r3, r3, #2
 801703e:	2b00      	cmp	r3, #0
 8017040:	d023      	beq.n	801708a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8017042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017044:	6a38      	ldr	r0, [r7, #32]
 8017046:	f004 f9f1 	bl	801b42c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 801704a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801704c:	4613      	mov	r3, r2
 801704e:	00db      	lsls	r3, r3, #3
 8017050:	4413      	add	r3, r2
 8017052:	009b      	lsls	r3, r3, #2
 8017054:	3310      	adds	r3, #16
 8017056:	687a      	ldr	r2, [r7, #4]
 8017058:	4413      	add	r3, r2
 801705a:	3304      	adds	r3, #4
 801705c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 801705e:	697b      	ldr	r3, [r7, #20]
 8017060:	78db      	ldrb	r3, [r3, #3]
 8017062:	2b01      	cmp	r3, #1
 8017064:	d108      	bne.n	8017078 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8017066:	697b      	ldr	r3, [r7, #20]
 8017068:	2200      	movs	r2, #0
 801706a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 801706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801706e:	b2db      	uxtb	r3, r3
 8017070:	4619      	mov	r1, r3
 8017072:	6878      	ldr	r0, [r7, #4]
 8017074:	f00b f890 	bl	8022198 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8017078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801707a:	015a      	lsls	r2, r3, #5
 801707c:	69fb      	ldr	r3, [r7, #28]
 801707e:	4413      	add	r3, r2
 8017080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017084:	461a      	mov	r2, r3
 8017086:	2302      	movs	r3, #2
 8017088:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 801708a:	693b      	ldr	r3, [r7, #16]
 801708c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017090:	2b00      	cmp	r3, #0
 8017092:	d003      	beq.n	801709c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8017094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017096:	6878      	ldr	r0, [r7, #4]
 8017098:	f000 fcbb 	bl	8017a12 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 801709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801709e:	3301      	adds	r3, #1
 80170a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80170a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170a4:	085b      	lsrs	r3, r3, #1
 80170a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80170a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	f47f af2e 	bne.w	8016f0c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	4618      	mov	r0, r3
 80170b6:	f005 f8cf 	bl	801c258 <USB_ReadInterrupts>
 80170ba:	4603      	mov	r3, r0
 80170bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80170c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80170c4:	d122      	bne.n	801710c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80170c6:	69fb      	ldr	r3, [r7, #28]
 80170c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80170cc:	685b      	ldr	r3, [r3, #4]
 80170ce:	69fa      	ldr	r2, [r7, #28]
 80170d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80170d4:	f023 0301 	bic.w	r3, r3, #1
 80170d8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80170e0:	2b01      	cmp	r3, #1
 80170e2:	d108      	bne.n	80170f6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	2200      	movs	r2, #0
 80170e8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80170ec:	2100      	movs	r1, #0
 80170ee:	6878      	ldr	r0, [r7, #4]
 80170f0:	f000 fea2 	bl	8017e38 <HAL_PCDEx_LPM_Callback>
 80170f4:	e002      	b.n	80170fc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80170f6:	6878      	ldr	r0, [r7, #4]
 80170f8:	f00b f82e 	bl	8022158 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	695a      	ldr	r2, [r3, #20]
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801710a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	4618      	mov	r0, r3
 8017112:	f005 f8a1 	bl	801c258 <USB_ReadInterrupts>
 8017116:	4603      	mov	r3, r0
 8017118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801711c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017120:	d112      	bne.n	8017148 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8017122:	69fb      	ldr	r3, [r7, #28]
 8017124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017128:	689b      	ldr	r3, [r3, #8]
 801712a:	f003 0301 	and.w	r3, r3, #1
 801712e:	2b01      	cmp	r3, #1
 8017130:	d102      	bne.n	8017138 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8017132:	6878      	ldr	r0, [r7, #4]
 8017134:	f00a ffea 	bl	802210c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	695a      	ldr	r2, [r3, #20]
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8017146:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	4618      	mov	r0, r3
 801714e:	f005 f883 	bl	801c258 <USB_ReadInterrupts>
 8017152:	4603      	mov	r3, r0
 8017154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801715c:	f040 80b7 	bne.w	80172ce <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8017160:	69fb      	ldr	r3, [r7, #28]
 8017162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017166:	685b      	ldr	r3, [r3, #4]
 8017168:	69fa      	ldr	r2, [r7, #28]
 801716a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801716e:	f023 0301 	bic.w	r3, r3, #1
 8017172:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	2110      	movs	r1, #16
 801717a:	4618      	mov	r0, r3
 801717c:	f004 f956 	bl	801b42c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017180:	2300      	movs	r3, #0
 8017182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017184:	e046      	b.n	8017214 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8017186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017188:	015a      	lsls	r2, r3, #5
 801718a:	69fb      	ldr	r3, [r7, #28]
 801718c:	4413      	add	r3, r2
 801718e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017192:	461a      	mov	r2, r3
 8017194:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8017198:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801719c:	015a      	lsls	r2, r3, #5
 801719e:	69fb      	ldr	r3, [r7, #28]
 80171a0:	4413      	add	r3, r2
 80171a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80171aa:	0151      	lsls	r1, r2, #5
 80171ac:	69fa      	ldr	r2, [r7, #28]
 80171ae:	440a      	add	r2, r1
 80171b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80171b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80171b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80171ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171bc:	015a      	lsls	r2, r3, #5
 80171be:	69fb      	ldr	r3, [r7, #28]
 80171c0:	4413      	add	r3, r2
 80171c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80171c6:	461a      	mov	r2, r3
 80171c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80171cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80171ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171d0:	015a      	lsls	r2, r3, #5
 80171d2:	69fb      	ldr	r3, [r7, #28]
 80171d4:	4413      	add	r3, r2
 80171d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80171de:	0151      	lsls	r1, r2, #5
 80171e0:	69fa      	ldr	r2, [r7, #28]
 80171e2:	440a      	add	r2, r1
 80171e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80171e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80171ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80171ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171f0:	015a      	lsls	r2, r3, #5
 80171f2:	69fb      	ldr	r3, [r7, #28]
 80171f4:	4413      	add	r3, r2
 80171f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80171fe:	0151      	lsls	r1, r2, #5
 8017200:	69fa      	ldr	r2, [r7, #28]
 8017202:	440a      	add	r2, r1
 8017204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017208:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801720c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801720e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017210:	3301      	adds	r3, #1
 8017212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	791b      	ldrb	r3, [r3, #4]
 8017218:	461a      	mov	r2, r3
 801721a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801721c:	4293      	cmp	r3, r2
 801721e:	d3b2      	bcc.n	8017186 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8017220:	69fb      	ldr	r3, [r7, #28]
 8017222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017226:	69db      	ldr	r3, [r3, #28]
 8017228:	69fa      	ldr	r2, [r7, #28]
 801722a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801722e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8017232:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	7bdb      	ldrb	r3, [r3, #15]
 8017238:	2b00      	cmp	r3, #0
 801723a:	d016      	beq.n	801726a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801723c:	69fb      	ldr	r3, [r7, #28]
 801723e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017246:	69fa      	ldr	r2, [r7, #28]
 8017248:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801724c:	f043 030b 	orr.w	r3, r3, #11
 8017250:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8017254:	69fb      	ldr	r3, [r7, #28]
 8017256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801725a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801725c:	69fa      	ldr	r2, [r7, #28]
 801725e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017262:	f043 030b 	orr.w	r3, r3, #11
 8017266:	6453      	str	r3, [r2, #68]	; 0x44
 8017268:	e015      	b.n	8017296 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801726a:	69fb      	ldr	r3, [r7, #28]
 801726c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017270:	695b      	ldr	r3, [r3, #20]
 8017272:	69fa      	ldr	r2, [r7, #28]
 8017274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017278:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801727c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8017280:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8017282:	69fb      	ldr	r3, [r7, #28]
 8017284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017288:	691b      	ldr	r3, [r3, #16]
 801728a:	69fa      	ldr	r2, [r7, #28]
 801728c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017290:	f043 030b 	orr.w	r3, r3, #11
 8017294:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8017296:	69fb      	ldr	r3, [r7, #28]
 8017298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	69fa      	ldr	r2, [r7, #28]
 80172a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80172a4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80172a8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	6818      	ldr	r0, [r3, #0]
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80172b8:	461a      	mov	r2, r3
 80172ba:	f005 f891 	bl	801c3e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	695a      	ldr	r2, [r3, #20]
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80172cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	4618      	mov	r0, r3
 80172d4:	f004 ffc0 	bl	801c258 <USB_ReadInterrupts>
 80172d8:	4603      	mov	r3, r0
 80172da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80172de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80172e2:	d123      	bne.n	801732c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	4618      	mov	r0, r3
 80172ea:	f005 f856 	bl	801c39a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	4618      	mov	r0, r3
 80172f4:	f004 f913 	bl	801b51e <USB_GetDevSpeed>
 80172f8:	4603      	mov	r3, r0
 80172fa:	461a      	mov	r2, r3
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	681c      	ldr	r4, [r3, #0]
 8017304:	f001 fa08 	bl	8018718 <HAL_RCC_GetHCLKFreq>
 8017308:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801730e:	461a      	mov	r2, r3
 8017310:	4620      	mov	r0, r4
 8017312:	f003 fe17 	bl	801af44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8017316:	6878      	ldr	r0, [r7, #4]
 8017318:	f00a fecf 	bl	80220ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	695a      	ldr	r2, [r3, #20]
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801732a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	4618      	mov	r0, r3
 8017332:	f004 ff91 	bl	801c258 <USB_ReadInterrupts>
 8017336:	4603      	mov	r3, r0
 8017338:	f003 0308 	and.w	r3, r3, #8
 801733c:	2b08      	cmp	r3, #8
 801733e:	d10a      	bne.n	8017356 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8017340:	6878      	ldr	r0, [r7, #4]
 8017342:	f00a feac 	bl	802209e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	695a      	ldr	r2, [r3, #20]
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	f002 0208 	and.w	r2, r2, #8
 8017354:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	4618      	mov	r0, r3
 801735c:	f004 ff7c 	bl	801c258 <USB_ReadInterrupts>
 8017360:	4603      	mov	r3, r0
 8017362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017366:	2b80      	cmp	r3, #128	; 0x80
 8017368:	d123      	bne.n	80173b2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 801736a:	6a3b      	ldr	r3, [r7, #32]
 801736c:	699b      	ldr	r3, [r3, #24]
 801736e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8017372:	6a3b      	ldr	r3, [r7, #32]
 8017374:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8017376:	2301      	movs	r3, #1
 8017378:	627b      	str	r3, [r7, #36]	; 0x24
 801737a:	e014      	b.n	80173a6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 801737c:	6879      	ldr	r1, [r7, #4]
 801737e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017380:	4613      	mov	r3, r2
 8017382:	00db      	lsls	r3, r3, #3
 8017384:	4413      	add	r3, r2
 8017386:	009b      	lsls	r3, r3, #2
 8017388:	440b      	add	r3, r1
 801738a:	f203 2357 	addw	r3, r3, #599	; 0x257
 801738e:	781b      	ldrb	r3, [r3, #0]
 8017390:	2b01      	cmp	r3, #1
 8017392:	d105      	bne.n	80173a0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8017394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017396:	b2db      	uxtb	r3, r3
 8017398:	4619      	mov	r1, r3
 801739a:	6878      	ldr	r0, [r7, #4]
 801739c:	f000 fb08 	bl	80179b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80173a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173a2:	3301      	adds	r3, #1
 80173a4:	627b      	str	r3, [r7, #36]	; 0x24
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	791b      	ldrb	r3, [r3, #4]
 80173aa:	461a      	mov	r2, r3
 80173ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ae:	4293      	cmp	r3, r2
 80173b0:	d3e4      	bcc.n	801737c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	4618      	mov	r0, r3
 80173b8:	f004 ff4e 	bl	801c258 <USB_ReadInterrupts>
 80173bc:	4603      	mov	r3, r0
 80173be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80173c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80173c6:	d13c      	bne.n	8017442 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80173c8:	2301      	movs	r3, #1
 80173ca:	627b      	str	r3, [r7, #36]	; 0x24
 80173cc:	e02b      	b.n	8017426 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80173ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173d0:	015a      	lsls	r2, r3, #5
 80173d2:	69fb      	ldr	r3, [r7, #28]
 80173d4:	4413      	add	r3, r2
 80173d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80173de:	6879      	ldr	r1, [r7, #4]
 80173e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80173e2:	4613      	mov	r3, r2
 80173e4:	00db      	lsls	r3, r3, #3
 80173e6:	4413      	add	r3, r2
 80173e8:	009b      	lsls	r3, r3, #2
 80173ea:	440b      	add	r3, r1
 80173ec:	3318      	adds	r3, #24
 80173ee:	781b      	ldrb	r3, [r3, #0]
 80173f0:	2b01      	cmp	r3, #1
 80173f2:	d115      	bne.n	8017420 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80173f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	da12      	bge.n	8017420 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80173fa:	6879      	ldr	r1, [r7, #4]
 80173fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80173fe:	4613      	mov	r3, r2
 8017400:	00db      	lsls	r3, r3, #3
 8017402:	4413      	add	r3, r2
 8017404:	009b      	lsls	r3, r3, #2
 8017406:	440b      	add	r3, r1
 8017408:	3317      	adds	r3, #23
 801740a:	2201      	movs	r2, #1
 801740c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 801740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017410:	b2db      	uxtb	r3, r3
 8017412:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017416:	b2db      	uxtb	r3, r3
 8017418:	4619      	mov	r1, r3
 801741a:	6878      	ldr	r0, [r7, #4]
 801741c:	f000 fac8 	bl	80179b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8017420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017422:	3301      	adds	r3, #1
 8017424:	627b      	str	r3, [r7, #36]	; 0x24
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	791b      	ldrb	r3, [r3, #4]
 801742a:	461a      	mov	r2, r3
 801742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801742e:	4293      	cmp	r3, r2
 8017430:	d3cd      	bcc.n	80173ce <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	695a      	ldr	r2, [r3, #20]
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8017440:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	4618      	mov	r0, r3
 8017448:	f004 ff06 	bl	801c258 <USB_ReadInterrupts>
 801744c:	4603      	mov	r3, r0
 801744e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017452:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017456:	d156      	bne.n	8017506 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8017458:	2301      	movs	r3, #1
 801745a:	627b      	str	r3, [r7, #36]	; 0x24
 801745c:	e045      	b.n	80174ea <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 801745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017460:	015a      	lsls	r2, r3, #5
 8017462:	69fb      	ldr	r3, [r7, #28]
 8017464:	4413      	add	r3, r2
 8017466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 801746e:	6879      	ldr	r1, [r7, #4]
 8017470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017472:	4613      	mov	r3, r2
 8017474:	00db      	lsls	r3, r3, #3
 8017476:	4413      	add	r3, r2
 8017478:	009b      	lsls	r3, r3, #2
 801747a:	440b      	add	r3, r1
 801747c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8017480:	781b      	ldrb	r3, [r3, #0]
 8017482:	2b01      	cmp	r3, #1
 8017484:	d12e      	bne.n	80174e4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8017486:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8017488:	2b00      	cmp	r3, #0
 801748a:	da2b      	bge.n	80174e4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 801748c:	69bb      	ldr	r3, [r7, #24]
 801748e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8017498:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 801749c:	429a      	cmp	r2, r3
 801749e:	d121      	bne.n	80174e4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80174a0:	6879      	ldr	r1, [r7, #4]
 80174a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80174a4:	4613      	mov	r3, r2
 80174a6:	00db      	lsls	r3, r3, #3
 80174a8:	4413      	add	r3, r2
 80174aa:	009b      	lsls	r3, r3, #2
 80174ac:	440b      	add	r3, r1
 80174ae:	f203 2357 	addw	r3, r3, #599	; 0x257
 80174b2:	2201      	movs	r2, #1
 80174b4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80174b6:	6a3b      	ldr	r3, [r7, #32]
 80174b8:	699b      	ldr	r3, [r3, #24]
 80174ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80174be:	6a3b      	ldr	r3, [r7, #32]
 80174c0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80174c2:	6a3b      	ldr	r3, [r7, #32]
 80174c4:	695b      	ldr	r3, [r3, #20]
 80174c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d10a      	bne.n	80174e4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80174ce:	69fb      	ldr	r3, [r7, #28]
 80174d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80174d4:	685b      	ldr	r3, [r3, #4]
 80174d6:	69fa      	ldr	r2, [r7, #28]
 80174d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80174dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80174e0:	6053      	str	r3, [r2, #4]
            break;
 80174e2:	e008      	b.n	80174f6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80174e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174e6:	3301      	adds	r3, #1
 80174e8:	627b      	str	r3, [r7, #36]	; 0x24
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	791b      	ldrb	r3, [r3, #4]
 80174ee:	461a      	mov	r2, r3
 80174f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174f2:	4293      	cmp	r3, r2
 80174f4:	d3b3      	bcc.n	801745e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	695a      	ldr	r2, [r3, #20]
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8017504:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	4618      	mov	r0, r3
 801750c:	f004 fea4 	bl	801c258 <USB_ReadInterrupts>
 8017510:	4603      	mov	r3, r0
 8017512:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8017516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801751a:	d10a      	bne.n	8017532 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801751c:	6878      	ldr	r0, [r7, #4]
 801751e:	f00a fe4d 	bl	80221bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	695a      	ldr	r2, [r3, #20]
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8017530:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	4618      	mov	r0, r3
 8017538:	f004 fe8e 	bl	801c258 <USB_ReadInterrupts>
 801753c:	4603      	mov	r3, r0
 801753e:	f003 0304 	and.w	r3, r3, #4
 8017542:	2b04      	cmp	r3, #4
 8017544:	d115      	bne.n	8017572 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	685b      	ldr	r3, [r3, #4]
 801754c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801754e:	69bb      	ldr	r3, [r7, #24]
 8017550:	f003 0304 	and.w	r3, r3, #4
 8017554:	2b00      	cmp	r3, #0
 8017556:	d002      	beq.n	801755e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8017558:	6878      	ldr	r0, [r7, #4]
 801755a:	f00a fe3d 	bl	80221d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	6859      	ldr	r1, [r3, #4]
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	69ba      	ldr	r2, [r7, #24]
 801756a:	430a      	orrs	r2, r1
 801756c:	605a      	str	r2, [r3, #4]
 801756e:	e000      	b.n	8017572 <HAL_PCD_IRQHandler+0x93c>
      return;
 8017570:	bf00      	nop
    }
  }
}
 8017572:	3734      	adds	r7, #52	; 0x34
 8017574:	46bd      	mov	sp, r7
 8017576:	bd90      	pop	{r4, r7, pc}

08017578 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8017578:	b580      	push	{r7, lr}
 801757a:	b082      	sub	sp, #8
 801757c:	af00      	add	r7, sp, #0
 801757e:	6078      	str	r0, [r7, #4]
 8017580:	460b      	mov	r3, r1
 8017582:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 801758a:	2b01      	cmp	r3, #1
 801758c:	d101      	bne.n	8017592 <HAL_PCD_SetAddress+0x1a>
 801758e:	2302      	movs	r3, #2
 8017590:	e012      	b.n	80175b8 <HAL_PCD_SetAddress+0x40>
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	2201      	movs	r2, #1
 8017596:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	78fa      	ldrb	r2, [r7, #3]
 801759e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	78fa      	ldrb	r2, [r7, #3]
 80175a6:	4611      	mov	r1, r2
 80175a8:	4618      	mov	r0, r3
 80175aa:	f004 fded 	bl	801c188 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	2200      	movs	r2, #0
 80175b2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80175b6:	2300      	movs	r3, #0
}
 80175b8:	4618      	mov	r0, r3
 80175ba:	3708      	adds	r7, #8
 80175bc:	46bd      	mov	sp, r7
 80175be:	bd80      	pop	{r7, pc}

080175c0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b084      	sub	sp, #16
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	6078      	str	r0, [r7, #4]
 80175c8:	4608      	mov	r0, r1
 80175ca:	4611      	mov	r1, r2
 80175cc:	461a      	mov	r2, r3
 80175ce:	4603      	mov	r3, r0
 80175d0:	70fb      	strb	r3, [r7, #3]
 80175d2:	460b      	mov	r3, r1
 80175d4:	803b      	strh	r3, [r7, #0]
 80175d6:	4613      	mov	r3, r2
 80175d8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80175da:	2300      	movs	r3, #0
 80175dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80175de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	da0f      	bge.n	8017606 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80175e6:	78fb      	ldrb	r3, [r7, #3]
 80175e8:	f003 020f 	and.w	r2, r3, #15
 80175ec:	4613      	mov	r3, r2
 80175ee:	00db      	lsls	r3, r3, #3
 80175f0:	4413      	add	r3, r2
 80175f2:	009b      	lsls	r3, r3, #2
 80175f4:	3310      	adds	r3, #16
 80175f6:	687a      	ldr	r2, [r7, #4]
 80175f8:	4413      	add	r3, r2
 80175fa:	3304      	adds	r3, #4
 80175fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	2201      	movs	r2, #1
 8017602:	705a      	strb	r2, [r3, #1]
 8017604:	e00f      	b.n	8017626 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8017606:	78fb      	ldrb	r3, [r7, #3]
 8017608:	f003 020f 	and.w	r2, r3, #15
 801760c:	4613      	mov	r3, r2
 801760e:	00db      	lsls	r3, r3, #3
 8017610:	4413      	add	r3, r2
 8017612:	009b      	lsls	r3, r3, #2
 8017614:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8017618:	687a      	ldr	r2, [r7, #4]
 801761a:	4413      	add	r3, r2
 801761c:	3304      	adds	r3, #4
 801761e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	2200      	movs	r2, #0
 8017624:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8017626:	78fb      	ldrb	r3, [r7, #3]
 8017628:	f003 030f 	and.w	r3, r3, #15
 801762c:	b2da      	uxtb	r2, r3
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8017632:	883a      	ldrh	r2, [r7, #0]
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	78ba      	ldrb	r2, [r7, #2]
 801763c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	785b      	ldrb	r3, [r3, #1]
 8017642:	2b00      	cmp	r3, #0
 8017644:	d004      	beq.n	8017650 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	781b      	ldrb	r3, [r3, #0]
 801764a:	b29a      	uxth	r2, r3
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8017650:	78bb      	ldrb	r3, [r7, #2]
 8017652:	2b02      	cmp	r3, #2
 8017654:	d102      	bne.n	801765c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	2200      	movs	r2, #0
 801765a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8017662:	2b01      	cmp	r3, #1
 8017664:	d101      	bne.n	801766a <HAL_PCD_EP_Open+0xaa>
 8017666:	2302      	movs	r3, #2
 8017668:	e00e      	b.n	8017688 <HAL_PCD_EP_Open+0xc8>
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	2201      	movs	r2, #1
 801766e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	68f9      	ldr	r1, [r7, #12]
 8017678:	4618      	mov	r0, r3
 801767a:	f003 ff75 	bl	801b568 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	2200      	movs	r2, #0
 8017682:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8017686:	7afb      	ldrb	r3, [r7, #11]
}
 8017688:	4618      	mov	r0, r3
 801768a:	3710      	adds	r7, #16
 801768c:	46bd      	mov	sp, r7
 801768e:	bd80      	pop	{r7, pc}

08017690 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8017690:	b580      	push	{r7, lr}
 8017692:	b084      	sub	sp, #16
 8017694:	af00      	add	r7, sp, #0
 8017696:	6078      	str	r0, [r7, #4]
 8017698:	460b      	mov	r3, r1
 801769a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801769c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	da0f      	bge.n	80176c4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80176a4:	78fb      	ldrb	r3, [r7, #3]
 80176a6:	f003 020f 	and.w	r2, r3, #15
 80176aa:	4613      	mov	r3, r2
 80176ac:	00db      	lsls	r3, r3, #3
 80176ae:	4413      	add	r3, r2
 80176b0:	009b      	lsls	r3, r3, #2
 80176b2:	3310      	adds	r3, #16
 80176b4:	687a      	ldr	r2, [r7, #4]
 80176b6:	4413      	add	r3, r2
 80176b8:	3304      	adds	r3, #4
 80176ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	2201      	movs	r2, #1
 80176c0:	705a      	strb	r2, [r3, #1]
 80176c2:	e00f      	b.n	80176e4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80176c4:	78fb      	ldrb	r3, [r7, #3]
 80176c6:	f003 020f 	and.w	r2, r3, #15
 80176ca:	4613      	mov	r3, r2
 80176cc:	00db      	lsls	r3, r3, #3
 80176ce:	4413      	add	r3, r2
 80176d0:	009b      	lsls	r3, r3, #2
 80176d2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80176d6:	687a      	ldr	r2, [r7, #4]
 80176d8:	4413      	add	r3, r2
 80176da:	3304      	adds	r3, #4
 80176dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	2200      	movs	r2, #0
 80176e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80176e4:	78fb      	ldrb	r3, [r7, #3]
 80176e6:	f003 030f 	and.w	r3, r3, #15
 80176ea:	b2da      	uxtb	r2, r3
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80176f6:	2b01      	cmp	r3, #1
 80176f8:	d101      	bne.n	80176fe <HAL_PCD_EP_Close+0x6e>
 80176fa:	2302      	movs	r3, #2
 80176fc:	e00e      	b.n	801771c <HAL_PCD_EP_Close+0x8c>
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	2201      	movs	r2, #1
 8017702:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	68f9      	ldr	r1, [r7, #12]
 801770c:	4618      	mov	r0, r3
 801770e:	f003 ffb3 	bl	801b678 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	2200      	movs	r2, #0
 8017716:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 801771a:	2300      	movs	r3, #0
}
 801771c:	4618      	mov	r0, r3
 801771e:	3710      	adds	r7, #16
 8017720:	46bd      	mov	sp, r7
 8017722:	bd80      	pop	{r7, pc}

08017724 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8017724:	b580      	push	{r7, lr}
 8017726:	b086      	sub	sp, #24
 8017728:	af00      	add	r7, sp, #0
 801772a:	60f8      	str	r0, [r7, #12]
 801772c:	607a      	str	r2, [r7, #4]
 801772e:	603b      	str	r3, [r7, #0]
 8017730:	460b      	mov	r3, r1
 8017732:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8017734:	7afb      	ldrb	r3, [r7, #11]
 8017736:	f003 020f 	and.w	r2, r3, #15
 801773a:	4613      	mov	r3, r2
 801773c:	00db      	lsls	r3, r3, #3
 801773e:	4413      	add	r3, r2
 8017740:	009b      	lsls	r3, r3, #2
 8017742:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8017746:	68fa      	ldr	r2, [r7, #12]
 8017748:	4413      	add	r3, r2
 801774a:	3304      	adds	r3, #4
 801774c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801774e:	697b      	ldr	r3, [r7, #20]
 8017750:	687a      	ldr	r2, [r7, #4]
 8017752:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8017754:	697b      	ldr	r3, [r7, #20]
 8017756:	683a      	ldr	r2, [r7, #0]
 8017758:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 801775a:	697b      	ldr	r3, [r7, #20]
 801775c:	2200      	movs	r2, #0
 801775e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8017760:	697b      	ldr	r3, [r7, #20]
 8017762:	2200      	movs	r2, #0
 8017764:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8017766:	7afb      	ldrb	r3, [r7, #11]
 8017768:	f003 030f 	and.w	r3, r3, #15
 801776c:	b2da      	uxtb	r2, r3
 801776e:	697b      	ldr	r3, [r7, #20]
 8017770:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	799b      	ldrb	r3, [r3, #6]
 8017776:	2b01      	cmp	r3, #1
 8017778:	d102      	bne.n	8017780 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801777a:	687a      	ldr	r2, [r7, #4]
 801777c:	697b      	ldr	r3, [r7, #20]
 801777e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	6818      	ldr	r0, [r3, #0]
 8017784:	68fb      	ldr	r3, [r7, #12]
 8017786:	799b      	ldrb	r3, [r3, #6]
 8017788:	461a      	mov	r2, r3
 801778a:	6979      	ldr	r1, [r7, #20]
 801778c:	f004 f850 	bl	801b830 <USB_EPStartXfer>

  return HAL_OK;
 8017790:	2300      	movs	r3, #0
}
 8017792:	4618      	mov	r0, r3
 8017794:	3718      	adds	r7, #24
 8017796:	46bd      	mov	sp, r7
 8017798:	bd80      	pop	{r7, pc}

0801779a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 801779a:	b480      	push	{r7}
 801779c:	b083      	sub	sp, #12
 801779e:	af00      	add	r7, sp, #0
 80177a0:	6078      	str	r0, [r7, #4]
 80177a2:	460b      	mov	r3, r1
 80177a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80177a6:	78fb      	ldrb	r3, [r7, #3]
 80177a8:	f003 020f 	and.w	r2, r3, #15
 80177ac:	6879      	ldr	r1, [r7, #4]
 80177ae:	4613      	mov	r3, r2
 80177b0:	00db      	lsls	r3, r3, #3
 80177b2:	4413      	add	r3, r2
 80177b4:	009b      	lsls	r3, r3, #2
 80177b6:	440b      	add	r3, r1
 80177b8:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80177bc:	681b      	ldr	r3, [r3, #0]
}
 80177be:	4618      	mov	r0, r3
 80177c0:	370c      	adds	r7, #12
 80177c2:	46bd      	mov	sp, r7
 80177c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177c8:	4770      	bx	lr

080177ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80177ca:	b580      	push	{r7, lr}
 80177cc:	b086      	sub	sp, #24
 80177ce:	af00      	add	r7, sp, #0
 80177d0:	60f8      	str	r0, [r7, #12]
 80177d2:	607a      	str	r2, [r7, #4]
 80177d4:	603b      	str	r3, [r7, #0]
 80177d6:	460b      	mov	r3, r1
 80177d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80177da:	7afb      	ldrb	r3, [r7, #11]
 80177dc:	f003 020f 	and.w	r2, r3, #15
 80177e0:	4613      	mov	r3, r2
 80177e2:	00db      	lsls	r3, r3, #3
 80177e4:	4413      	add	r3, r2
 80177e6:	009b      	lsls	r3, r3, #2
 80177e8:	3310      	adds	r3, #16
 80177ea:	68fa      	ldr	r2, [r7, #12]
 80177ec:	4413      	add	r3, r2
 80177ee:	3304      	adds	r3, #4
 80177f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80177f2:	697b      	ldr	r3, [r7, #20]
 80177f4:	687a      	ldr	r2, [r7, #4]
 80177f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80177f8:	697b      	ldr	r3, [r7, #20]
 80177fa:	683a      	ldr	r2, [r7, #0]
 80177fc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80177fe:	697b      	ldr	r3, [r7, #20]
 8017800:	2200      	movs	r2, #0
 8017802:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8017804:	697b      	ldr	r3, [r7, #20]
 8017806:	2201      	movs	r2, #1
 8017808:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801780a:	7afb      	ldrb	r3, [r7, #11]
 801780c:	f003 030f 	and.w	r3, r3, #15
 8017810:	b2da      	uxtb	r2, r3
 8017812:	697b      	ldr	r3, [r7, #20]
 8017814:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	799b      	ldrb	r3, [r3, #6]
 801781a:	2b01      	cmp	r3, #1
 801781c:	d102      	bne.n	8017824 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801781e:	687a      	ldr	r2, [r7, #4]
 8017820:	697b      	ldr	r3, [r7, #20]
 8017822:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	6818      	ldr	r0, [r3, #0]
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	799b      	ldrb	r3, [r3, #6]
 801782c:	461a      	mov	r2, r3
 801782e:	6979      	ldr	r1, [r7, #20]
 8017830:	f003 fffe 	bl	801b830 <USB_EPStartXfer>

  return HAL_OK;
 8017834:	2300      	movs	r3, #0
}
 8017836:	4618      	mov	r0, r3
 8017838:	3718      	adds	r7, #24
 801783a:	46bd      	mov	sp, r7
 801783c:	bd80      	pop	{r7, pc}

0801783e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801783e:	b580      	push	{r7, lr}
 8017840:	b084      	sub	sp, #16
 8017842:	af00      	add	r7, sp, #0
 8017844:	6078      	str	r0, [r7, #4]
 8017846:	460b      	mov	r3, r1
 8017848:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801784a:	78fb      	ldrb	r3, [r7, #3]
 801784c:	f003 030f 	and.w	r3, r3, #15
 8017850:	687a      	ldr	r2, [r7, #4]
 8017852:	7912      	ldrb	r2, [r2, #4]
 8017854:	4293      	cmp	r3, r2
 8017856:	d901      	bls.n	801785c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8017858:	2301      	movs	r3, #1
 801785a:	e04f      	b.n	80178fc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801785c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017860:	2b00      	cmp	r3, #0
 8017862:	da0f      	bge.n	8017884 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8017864:	78fb      	ldrb	r3, [r7, #3]
 8017866:	f003 020f 	and.w	r2, r3, #15
 801786a:	4613      	mov	r3, r2
 801786c:	00db      	lsls	r3, r3, #3
 801786e:	4413      	add	r3, r2
 8017870:	009b      	lsls	r3, r3, #2
 8017872:	3310      	adds	r3, #16
 8017874:	687a      	ldr	r2, [r7, #4]
 8017876:	4413      	add	r3, r2
 8017878:	3304      	adds	r3, #4
 801787a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	2201      	movs	r2, #1
 8017880:	705a      	strb	r2, [r3, #1]
 8017882:	e00d      	b.n	80178a0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8017884:	78fa      	ldrb	r2, [r7, #3]
 8017886:	4613      	mov	r3, r2
 8017888:	00db      	lsls	r3, r3, #3
 801788a:	4413      	add	r3, r2
 801788c:	009b      	lsls	r3, r3, #2
 801788e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8017892:	687a      	ldr	r2, [r7, #4]
 8017894:	4413      	add	r3, r2
 8017896:	3304      	adds	r3, #4
 8017898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	2200      	movs	r2, #0
 801789e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	2201      	movs	r2, #1
 80178a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80178a6:	78fb      	ldrb	r3, [r7, #3]
 80178a8:	f003 030f 	and.w	r3, r3, #15
 80178ac:	b2da      	uxtb	r2, r3
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80178b8:	2b01      	cmp	r3, #1
 80178ba:	d101      	bne.n	80178c0 <HAL_PCD_EP_SetStall+0x82>
 80178bc:	2302      	movs	r3, #2
 80178be:	e01d      	b.n	80178fc <HAL_PCD_EP_SetStall+0xbe>
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	2201      	movs	r2, #1
 80178c4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	68f9      	ldr	r1, [r7, #12]
 80178ce:	4618      	mov	r0, r3
 80178d0:	f004 fb86 	bl	801bfe0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80178d4:	78fb      	ldrb	r3, [r7, #3]
 80178d6:	f003 030f 	and.w	r3, r3, #15
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d109      	bne.n	80178f2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	6818      	ldr	r0, [r3, #0]
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	7999      	ldrb	r1, [r3, #6]
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80178ec:	461a      	mov	r2, r3
 80178ee:	f004 fd77 	bl	801c3e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	2200      	movs	r2, #0
 80178f6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80178fa:	2300      	movs	r3, #0
}
 80178fc:	4618      	mov	r0, r3
 80178fe:	3710      	adds	r7, #16
 8017900:	46bd      	mov	sp, r7
 8017902:	bd80      	pop	{r7, pc}

08017904 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8017904:	b580      	push	{r7, lr}
 8017906:	b084      	sub	sp, #16
 8017908:	af00      	add	r7, sp, #0
 801790a:	6078      	str	r0, [r7, #4]
 801790c:	460b      	mov	r3, r1
 801790e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8017910:	78fb      	ldrb	r3, [r7, #3]
 8017912:	f003 030f 	and.w	r3, r3, #15
 8017916:	687a      	ldr	r2, [r7, #4]
 8017918:	7912      	ldrb	r2, [r2, #4]
 801791a:	4293      	cmp	r3, r2
 801791c:	d901      	bls.n	8017922 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801791e:	2301      	movs	r3, #1
 8017920:	e042      	b.n	80179a8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8017922:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017926:	2b00      	cmp	r3, #0
 8017928:	da0f      	bge.n	801794a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801792a:	78fb      	ldrb	r3, [r7, #3]
 801792c:	f003 020f 	and.w	r2, r3, #15
 8017930:	4613      	mov	r3, r2
 8017932:	00db      	lsls	r3, r3, #3
 8017934:	4413      	add	r3, r2
 8017936:	009b      	lsls	r3, r3, #2
 8017938:	3310      	adds	r3, #16
 801793a:	687a      	ldr	r2, [r7, #4]
 801793c:	4413      	add	r3, r2
 801793e:	3304      	adds	r3, #4
 8017940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	2201      	movs	r2, #1
 8017946:	705a      	strb	r2, [r3, #1]
 8017948:	e00f      	b.n	801796a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801794a:	78fb      	ldrb	r3, [r7, #3]
 801794c:	f003 020f 	and.w	r2, r3, #15
 8017950:	4613      	mov	r3, r2
 8017952:	00db      	lsls	r3, r3, #3
 8017954:	4413      	add	r3, r2
 8017956:	009b      	lsls	r3, r3, #2
 8017958:	f503 7314 	add.w	r3, r3, #592	; 0x250
 801795c:	687a      	ldr	r2, [r7, #4]
 801795e:	4413      	add	r3, r2
 8017960:	3304      	adds	r3, #4
 8017962:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	2200      	movs	r2, #0
 8017968:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	2200      	movs	r2, #0
 801796e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8017970:	78fb      	ldrb	r3, [r7, #3]
 8017972:	f003 030f 	and.w	r3, r3, #15
 8017976:	b2da      	uxtb	r2, r3
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8017982:	2b01      	cmp	r3, #1
 8017984:	d101      	bne.n	801798a <HAL_PCD_EP_ClrStall+0x86>
 8017986:	2302      	movs	r3, #2
 8017988:	e00e      	b.n	80179a8 <HAL_PCD_EP_ClrStall+0xa4>
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	2201      	movs	r2, #1
 801798e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	68f9      	ldr	r1, [r7, #12]
 8017998:	4618      	mov	r0, r3
 801799a:	f004 fb8f 	bl	801c0bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	2200      	movs	r2, #0
 80179a2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80179a6:	2300      	movs	r3, #0
}
 80179a8:	4618      	mov	r0, r3
 80179aa:	3710      	adds	r7, #16
 80179ac:	46bd      	mov	sp, r7
 80179ae:	bd80      	pop	{r7, pc}

080179b0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80179b0:	b580      	push	{r7, lr}
 80179b2:	b084      	sub	sp, #16
 80179b4:	af00      	add	r7, sp, #0
 80179b6:	6078      	str	r0, [r7, #4]
 80179b8:	460b      	mov	r3, r1
 80179ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80179bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	da0c      	bge.n	80179de <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80179c4:	78fb      	ldrb	r3, [r7, #3]
 80179c6:	f003 020f 	and.w	r2, r3, #15
 80179ca:	4613      	mov	r3, r2
 80179cc:	00db      	lsls	r3, r3, #3
 80179ce:	4413      	add	r3, r2
 80179d0:	009b      	lsls	r3, r3, #2
 80179d2:	3310      	adds	r3, #16
 80179d4:	687a      	ldr	r2, [r7, #4]
 80179d6:	4413      	add	r3, r2
 80179d8:	3304      	adds	r3, #4
 80179da:	60fb      	str	r3, [r7, #12]
 80179dc:	e00c      	b.n	80179f8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80179de:	78fb      	ldrb	r3, [r7, #3]
 80179e0:	f003 020f 	and.w	r2, r3, #15
 80179e4:	4613      	mov	r3, r2
 80179e6:	00db      	lsls	r3, r3, #3
 80179e8:	4413      	add	r3, r2
 80179ea:	009b      	lsls	r3, r3, #2
 80179ec:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80179f0:	687a      	ldr	r2, [r7, #4]
 80179f2:	4413      	add	r3, r2
 80179f4:	3304      	adds	r3, #4
 80179f6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	68f9      	ldr	r1, [r7, #12]
 80179fe:	4618      	mov	r0, r3
 8017a00:	f004 f9ae 	bl	801bd60 <USB_EPStopXfer>
 8017a04:	4603      	mov	r3, r0
 8017a06:	72fb      	strb	r3, [r7, #11]

  return ret;
 8017a08:	7afb      	ldrb	r3, [r7, #11]
}
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	3710      	adds	r7, #16
 8017a0e:	46bd      	mov	sp, r7
 8017a10:	bd80      	pop	{r7, pc}

08017a12 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8017a12:	b580      	push	{r7, lr}
 8017a14:	b08a      	sub	sp, #40	; 0x28
 8017a16:	af02      	add	r7, sp, #8
 8017a18:	6078      	str	r0, [r7, #4]
 8017a1a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017a22:	697b      	ldr	r3, [r7, #20]
 8017a24:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8017a26:	683a      	ldr	r2, [r7, #0]
 8017a28:	4613      	mov	r3, r2
 8017a2a:	00db      	lsls	r3, r3, #3
 8017a2c:	4413      	add	r3, r2
 8017a2e:	009b      	lsls	r3, r3, #2
 8017a30:	3310      	adds	r3, #16
 8017a32:	687a      	ldr	r2, [r7, #4]
 8017a34:	4413      	add	r3, r2
 8017a36:	3304      	adds	r3, #4
 8017a38:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	695a      	ldr	r2, [r3, #20]
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	691b      	ldr	r3, [r3, #16]
 8017a42:	429a      	cmp	r2, r3
 8017a44:	d901      	bls.n	8017a4a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8017a46:	2301      	movs	r3, #1
 8017a48:	e06b      	b.n	8017b22 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	691a      	ldr	r2, [r3, #16]
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	695b      	ldr	r3, [r3, #20]
 8017a52:	1ad3      	subs	r3, r2, r3
 8017a54:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	689b      	ldr	r3, [r3, #8]
 8017a5a:	69fa      	ldr	r2, [r7, #28]
 8017a5c:	429a      	cmp	r2, r3
 8017a5e:	d902      	bls.n	8017a66 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	689b      	ldr	r3, [r3, #8]
 8017a64:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8017a66:	69fb      	ldr	r3, [r7, #28]
 8017a68:	3303      	adds	r3, #3
 8017a6a:	089b      	lsrs	r3, r3, #2
 8017a6c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8017a6e:	e02a      	b.n	8017ac6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	691a      	ldr	r2, [r3, #16]
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	695b      	ldr	r3, [r3, #20]
 8017a78:	1ad3      	subs	r3, r2, r3
 8017a7a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	689b      	ldr	r3, [r3, #8]
 8017a80:	69fa      	ldr	r2, [r7, #28]
 8017a82:	429a      	cmp	r2, r3
 8017a84:	d902      	bls.n	8017a8c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	689b      	ldr	r3, [r3, #8]
 8017a8a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8017a8c:	69fb      	ldr	r3, [r7, #28]
 8017a8e:	3303      	adds	r3, #3
 8017a90:	089b      	lsrs	r3, r3, #2
 8017a92:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	68d9      	ldr	r1, [r3, #12]
 8017a98:	683b      	ldr	r3, [r7, #0]
 8017a9a:	b2da      	uxtb	r2, r3
 8017a9c:	69fb      	ldr	r3, [r7, #28]
 8017a9e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8017aa4:	9300      	str	r3, [sp, #0]
 8017aa6:	4603      	mov	r3, r0
 8017aa8:	6978      	ldr	r0, [r7, #20]
 8017aaa:	f004 fa03 	bl	801beb4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8017aae:	68fb      	ldr	r3, [r7, #12]
 8017ab0:	68da      	ldr	r2, [r3, #12]
 8017ab2:	69fb      	ldr	r3, [r7, #28]
 8017ab4:	441a      	add	r2, r3
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	695a      	ldr	r2, [r3, #20]
 8017abe:	69fb      	ldr	r3, [r7, #28]
 8017ac0:	441a      	add	r2, r3
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8017ac6:	683b      	ldr	r3, [r7, #0]
 8017ac8:	015a      	lsls	r2, r3, #5
 8017aca:	693b      	ldr	r3, [r7, #16]
 8017acc:	4413      	add	r3, r2
 8017ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017ad2:	699b      	ldr	r3, [r3, #24]
 8017ad4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8017ad6:	69ba      	ldr	r2, [r7, #24]
 8017ad8:	429a      	cmp	r2, r3
 8017ada:	d809      	bhi.n	8017af0 <PCD_WriteEmptyTxFifo+0xde>
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	695a      	ldr	r2, [r3, #20]
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8017ae4:	429a      	cmp	r2, r3
 8017ae6:	d203      	bcs.n	8017af0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	691b      	ldr	r3, [r3, #16]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d1bf      	bne.n	8017a70 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	691a      	ldr	r2, [r3, #16]
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	695b      	ldr	r3, [r3, #20]
 8017af8:	429a      	cmp	r2, r3
 8017afa:	d811      	bhi.n	8017b20 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8017afc:	683b      	ldr	r3, [r7, #0]
 8017afe:	f003 030f 	and.w	r3, r3, #15
 8017b02:	2201      	movs	r2, #1
 8017b04:	fa02 f303 	lsl.w	r3, r2, r3
 8017b08:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8017b0a:	693b      	ldr	r3, [r7, #16]
 8017b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017b12:	68bb      	ldr	r3, [r7, #8]
 8017b14:	43db      	mvns	r3, r3
 8017b16:	6939      	ldr	r1, [r7, #16]
 8017b18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8017b1c:	4013      	ands	r3, r2
 8017b1e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8017b20:	2300      	movs	r3, #0
}
 8017b22:	4618      	mov	r0, r3
 8017b24:	3720      	adds	r7, #32
 8017b26:	46bd      	mov	sp, r7
 8017b28:	bd80      	pop	{r7, pc}
	...

08017b2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8017b2c:	b580      	push	{r7, lr}
 8017b2e:	b088      	sub	sp, #32
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	6078      	str	r0, [r7, #4]
 8017b34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017b3c:	69fb      	ldr	r3, [r7, #28]
 8017b3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8017b40:	69fb      	ldr	r3, [r7, #28]
 8017b42:	333c      	adds	r3, #60	; 0x3c
 8017b44:	3304      	adds	r3, #4
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8017b4a:	683b      	ldr	r3, [r7, #0]
 8017b4c:	015a      	lsls	r2, r3, #5
 8017b4e:	69bb      	ldr	r3, [r7, #24]
 8017b50:	4413      	add	r3, r2
 8017b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017b56:	689b      	ldr	r3, [r3, #8]
 8017b58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	799b      	ldrb	r3, [r3, #6]
 8017b5e:	2b01      	cmp	r3, #1
 8017b60:	d17b      	bne.n	8017c5a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8017b62:	693b      	ldr	r3, [r7, #16]
 8017b64:	f003 0308 	and.w	r3, r3, #8
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d015      	beq.n	8017b98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8017b6c:	697b      	ldr	r3, [r7, #20]
 8017b6e:	4a61      	ldr	r2, [pc, #388]	; (8017cf4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8017b70:	4293      	cmp	r3, r2
 8017b72:	f240 80b9 	bls.w	8017ce8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8017b76:	693b      	ldr	r3, [r7, #16]
 8017b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	f000 80b3 	beq.w	8017ce8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8017b82:	683b      	ldr	r3, [r7, #0]
 8017b84:	015a      	lsls	r2, r3, #5
 8017b86:	69bb      	ldr	r3, [r7, #24]
 8017b88:	4413      	add	r3, r2
 8017b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017b8e:	461a      	mov	r2, r3
 8017b90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017b94:	6093      	str	r3, [r2, #8]
 8017b96:	e0a7      	b.n	8017ce8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8017b98:	693b      	ldr	r3, [r7, #16]
 8017b9a:	f003 0320 	and.w	r3, r3, #32
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d009      	beq.n	8017bb6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8017ba2:	683b      	ldr	r3, [r7, #0]
 8017ba4:	015a      	lsls	r2, r3, #5
 8017ba6:	69bb      	ldr	r3, [r7, #24]
 8017ba8:	4413      	add	r3, r2
 8017baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017bae:	461a      	mov	r2, r3
 8017bb0:	2320      	movs	r3, #32
 8017bb2:	6093      	str	r3, [r2, #8]
 8017bb4:	e098      	b.n	8017ce8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8017bb6:	693b      	ldr	r3, [r7, #16]
 8017bb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	f040 8093 	bne.w	8017ce8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8017bc2:	697b      	ldr	r3, [r7, #20]
 8017bc4:	4a4b      	ldr	r2, [pc, #300]	; (8017cf4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8017bc6:	4293      	cmp	r3, r2
 8017bc8:	d90f      	bls.n	8017bea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8017bca:	693b      	ldr	r3, [r7, #16]
 8017bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d00a      	beq.n	8017bea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8017bd4:	683b      	ldr	r3, [r7, #0]
 8017bd6:	015a      	lsls	r2, r3, #5
 8017bd8:	69bb      	ldr	r3, [r7, #24]
 8017bda:	4413      	add	r3, r2
 8017bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017be0:	461a      	mov	r2, r3
 8017be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017be6:	6093      	str	r3, [r2, #8]
 8017be8:	e07e      	b.n	8017ce8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8017bea:	683a      	ldr	r2, [r7, #0]
 8017bec:	4613      	mov	r3, r2
 8017bee:	00db      	lsls	r3, r3, #3
 8017bf0:	4413      	add	r3, r2
 8017bf2:	009b      	lsls	r3, r3, #2
 8017bf4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8017bf8:	687a      	ldr	r2, [r7, #4]
 8017bfa:	4413      	add	r3, r2
 8017bfc:	3304      	adds	r3, #4
 8017bfe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	6a1a      	ldr	r2, [r3, #32]
 8017c04:	683b      	ldr	r3, [r7, #0]
 8017c06:	0159      	lsls	r1, r3, #5
 8017c08:	69bb      	ldr	r3, [r7, #24]
 8017c0a:	440b      	add	r3, r1
 8017c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017c10:	691b      	ldr	r3, [r3, #16]
 8017c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017c16:	1ad2      	subs	r2, r2, r3
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8017c1c:	683b      	ldr	r3, [r7, #0]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d114      	bne.n	8017c4c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	691b      	ldr	r3, [r3, #16]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d109      	bne.n	8017c3e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	6818      	ldr	r0, [r3, #0]
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8017c34:	461a      	mov	r2, r3
 8017c36:	2101      	movs	r1, #1
 8017c38:	f004 fbd2 	bl	801c3e0 <USB_EP0_OutStart>
 8017c3c:	e006      	b.n	8017c4c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	68da      	ldr	r2, [r3, #12]
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	695b      	ldr	r3, [r3, #20]
 8017c46:	441a      	add	r2, r3
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8017c4c:	683b      	ldr	r3, [r7, #0]
 8017c4e:	b2db      	uxtb	r3, r3
 8017c50:	4619      	mov	r1, r3
 8017c52:	6878      	ldr	r0, [r7, #4]
 8017c54:	f00a f9ee 	bl	8022034 <HAL_PCD_DataOutStageCallback>
 8017c58:	e046      	b.n	8017ce8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8017c5a:	697b      	ldr	r3, [r7, #20]
 8017c5c:	4a26      	ldr	r2, [pc, #152]	; (8017cf8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8017c5e:	4293      	cmp	r3, r2
 8017c60:	d124      	bne.n	8017cac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8017c62:	693b      	ldr	r3, [r7, #16]
 8017c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d00a      	beq.n	8017c82 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8017c6c:	683b      	ldr	r3, [r7, #0]
 8017c6e:	015a      	lsls	r2, r3, #5
 8017c70:	69bb      	ldr	r3, [r7, #24]
 8017c72:	4413      	add	r3, r2
 8017c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017c78:	461a      	mov	r2, r3
 8017c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017c7e:	6093      	str	r3, [r2, #8]
 8017c80:	e032      	b.n	8017ce8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8017c82:	693b      	ldr	r3, [r7, #16]
 8017c84:	f003 0320 	and.w	r3, r3, #32
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d008      	beq.n	8017c9e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8017c8c:	683b      	ldr	r3, [r7, #0]
 8017c8e:	015a      	lsls	r2, r3, #5
 8017c90:	69bb      	ldr	r3, [r7, #24]
 8017c92:	4413      	add	r3, r2
 8017c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017c98:	461a      	mov	r2, r3
 8017c9a:	2320      	movs	r3, #32
 8017c9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8017c9e:	683b      	ldr	r3, [r7, #0]
 8017ca0:	b2db      	uxtb	r3, r3
 8017ca2:	4619      	mov	r1, r3
 8017ca4:	6878      	ldr	r0, [r7, #4]
 8017ca6:	f00a f9c5 	bl	8022034 <HAL_PCD_DataOutStageCallback>
 8017caa:	e01d      	b.n	8017ce8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8017cac:	683b      	ldr	r3, [r7, #0]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d114      	bne.n	8017cdc <PCD_EP_OutXfrComplete_int+0x1b0>
 8017cb2:	6879      	ldr	r1, [r7, #4]
 8017cb4:	683a      	ldr	r2, [r7, #0]
 8017cb6:	4613      	mov	r3, r2
 8017cb8:	00db      	lsls	r3, r3, #3
 8017cba:	4413      	add	r3, r2
 8017cbc:	009b      	lsls	r3, r3, #2
 8017cbe:	440b      	add	r3, r1
 8017cc0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d108      	bne.n	8017cdc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	6818      	ldr	r0, [r3, #0]
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8017cd4:	461a      	mov	r2, r3
 8017cd6:	2100      	movs	r1, #0
 8017cd8:	f004 fb82 	bl	801c3e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8017cdc:	683b      	ldr	r3, [r7, #0]
 8017cde:	b2db      	uxtb	r3, r3
 8017ce0:	4619      	mov	r1, r3
 8017ce2:	6878      	ldr	r0, [r7, #4]
 8017ce4:	f00a f9a6 	bl	8022034 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8017ce8:	2300      	movs	r3, #0
}
 8017cea:	4618      	mov	r0, r3
 8017cec:	3720      	adds	r7, #32
 8017cee:	46bd      	mov	sp, r7
 8017cf0:	bd80      	pop	{r7, pc}
 8017cf2:	bf00      	nop
 8017cf4:	4f54300a 	.word	0x4f54300a
 8017cf8:	4f54310a 	.word	0x4f54310a

08017cfc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b086      	sub	sp, #24
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6078      	str	r0, [r7, #4]
 8017d04:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017d0c:	697b      	ldr	r3, [r7, #20]
 8017d0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8017d10:	697b      	ldr	r3, [r7, #20]
 8017d12:	333c      	adds	r3, #60	; 0x3c
 8017d14:	3304      	adds	r3, #4
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8017d1a:	683b      	ldr	r3, [r7, #0]
 8017d1c:	015a      	lsls	r2, r3, #5
 8017d1e:	693b      	ldr	r3, [r7, #16]
 8017d20:	4413      	add	r3, r2
 8017d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017d26:	689b      	ldr	r3, [r3, #8]
 8017d28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	4a15      	ldr	r2, [pc, #84]	; (8017d84 <PCD_EP_OutSetupPacket_int+0x88>)
 8017d2e:	4293      	cmp	r3, r2
 8017d30:	d90e      	bls.n	8017d50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8017d32:	68bb      	ldr	r3, [r7, #8]
 8017d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d009      	beq.n	8017d50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8017d3c:	683b      	ldr	r3, [r7, #0]
 8017d3e:	015a      	lsls	r2, r3, #5
 8017d40:	693b      	ldr	r3, [r7, #16]
 8017d42:	4413      	add	r3, r2
 8017d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017d48:	461a      	mov	r2, r3
 8017d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017d4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8017d50:	6878      	ldr	r0, [r7, #4]
 8017d52:	f00a f95d 	bl	8022010 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	4a0a      	ldr	r2, [pc, #40]	; (8017d84 <PCD_EP_OutSetupPacket_int+0x88>)
 8017d5a:	4293      	cmp	r3, r2
 8017d5c:	d90c      	bls.n	8017d78 <PCD_EP_OutSetupPacket_int+0x7c>
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	799b      	ldrb	r3, [r3, #6]
 8017d62:	2b01      	cmp	r3, #1
 8017d64:	d108      	bne.n	8017d78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	6818      	ldr	r0, [r3, #0]
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8017d70:	461a      	mov	r2, r3
 8017d72:	2101      	movs	r1, #1
 8017d74:	f004 fb34 	bl	801c3e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8017d78:	2300      	movs	r3, #0
}
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	3718      	adds	r7, #24
 8017d7e:	46bd      	mov	sp, r7
 8017d80:	bd80      	pop	{r7, pc}
 8017d82:	bf00      	nop
 8017d84:	4f54300a 	.word	0x4f54300a

08017d88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8017d88:	b480      	push	{r7}
 8017d8a:	b085      	sub	sp, #20
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	6078      	str	r0, [r7, #4]
 8017d90:	460b      	mov	r3, r1
 8017d92:	70fb      	strb	r3, [r7, #3]
 8017d94:	4613      	mov	r3, r2
 8017d96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8017da0:	78fb      	ldrb	r3, [r7, #3]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d107      	bne.n	8017db6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8017da6:	883b      	ldrh	r3, [r7, #0]
 8017da8:	0419      	lsls	r1, r3, #16
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	68ba      	ldr	r2, [r7, #8]
 8017db0:	430a      	orrs	r2, r1
 8017db2:	629a      	str	r2, [r3, #40]	; 0x28
 8017db4:	e028      	b.n	8017e08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017dbc:	0c1b      	lsrs	r3, r3, #16
 8017dbe:	68ba      	ldr	r2, [r7, #8]
 8017dc0:	4413      	add	r3, r2
 8017dc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	73fb      	strb	r3, [r7, #15]
 8017dc8:	e00d      	b.n	8017de6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	681a      	ldr	r2, [r3, #0]
 8017dce:	7bfb      	ldrb	r3, [r7, #15]
 8017dd0:	3340      	adds	r3, #64	; 0x40
 8017dd2:	009b      	lsls	r3, r3, #2
 8017dd4:	4413      	add	r3, r2
 8017dd6:	685b      	ldr	r3, [r3, #4]
 8017dd8:	0c1b      	lsrs	r3, r3, #16
 8017dda:	68ba      	ldr	r2, [r7, #8]
 8017ddc:	4413      	add	r3, r2
 8017dde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8017de0:	7bfb      	ldrb	r3, [r7, #15]
 8017de2:	3301      	adds	r3, #1
 8017de4:	73fb      	strb	r3, [r7, #15]
 8017de6:	7bfa      	ldrb	r2, [r7, #15]
 8017de8:	78fb      	ldrb	r3, [r7, #3]
 8017dea:	3b01      	subs	r3, #1
 8017dec:	429a      	cmp	r2, r3
 8017dee:	d3ec      	bcc.n	8017dca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8017df0:	883b      	ldrh	r3, [r7, #0]
 8017df2:	0418      	lsls	r0, r3, #16
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	6819      	ldr	r1, [r3, #0]
 8017df8:	78fb      	ldrb	r3, [r7, #3]
 8017dfa:	3b01      	subs	r3, #1
 8017dfc:	68ba      	ldr	r2, [r7, #8]
 8017dfe:	4302      	orrs	r2, r0
 8017e00:	3340      	adds	r3, #64	; 0x40
 8017e02:	009b      	lsls	r3, r3, #2
 8017e04:	440b      	add	r3, r1
 8017e06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8017e08:	2300      	movs	r3, #0
}
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	3714      	adds	r7, #20
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e14:	4770      	bx	lr

08017e16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8017e16:	b480      	push	{r7}
 8017e18:	b083      	sub	sp, #12
 8017e1a:	af00      	add	r7, sp, #0
 8017e1c:	6078      	str	r0, [r7, #4]
 8017e1e:	460b      	mov	r3, r1
 8017e20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	887a      	ldrh	r2, [r7, #2]
 8017e28:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8017e2a:	2300      	movs	r3, #0
}
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	370c      	adds	r7, #12
 8017e30:	46bd      	mov	sp, r7
 8017e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e36:	4770      	bx	lr

08017e38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017e38:	b480      	push	{r7}
 8017e3a:	b083      	sub	sp, #12
 8017e3c:	af00      	add	r7, sp, #0
 8017e3e:	6078      	str	r0, [r7, #4]
 8017e40:	460b      	mov	r3, r1
 8017e42:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8017e44:	bf00      	nop
 8017e46:	370c      	adds	r7, #12
 8017e48:	46bd      	mov	sp, r7
 8017e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e4e:	4770      	bx	lr

08017e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8017e50:	b580      	push	{r7, lr}
 8017e52:	b086      	sub	sp, #24
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d101      	bne.n	8017e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8017e5e:	2301      	movs	r3, #1
 8017e60:	e267      	b.n	8018332 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	f003 0301 	and.w	r3, r3, #1
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d075      	beq.n	8017f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8017e6e:	4b88      	ldr	r3, [pc, #544]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017e70:	689b      	ldr	r3, [r3, #8]
 8017e72:	f003 030c 	and.w	r3, r3, #12
 8017e76:	2b04      	cmp	r3, #4
 8017e78:	d00c      	beq.n	8017e94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8017e7a:	4b85      	ldr	r3, [pc, #532]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017e7c:	689b      	ldr	r3, [r3, #8]
 8017e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8017e82:	2b08      	cmp	r3, #8
 8017e84:	d112      	bne.n	8017eac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8017e86:	4b82      	ldr	r3, [pc, #520]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017e88:	685b      	ldr	r3, [r3, #4]
 8017e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8017e92:	d10b      	bne.n	8017eac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017e94:	4b7e      	ldr	r3, [pc, #504]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d05b      	beq.n	8017f58 <HAL_RCC_OscConfig+0x108>
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	685b      	ldr	r3, [r3, #4]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d157      	bne.n	8017f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8017ea8:	2301      	movs	r3, #1
 8017eaa:	e242      	b.n	8018332 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	685b      	ldr	r3, [r3, #4]
 8017eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017eb4:	d106      	bne.n	8017ec4 <HAL_RCC_OscConfig+0x74>
 8017eb6:	4b76      	ldr	r3, [pc, #472]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	4a75      	ldr	r2, [pc, #468]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017ec0:	6013      	str	r3, [r2, #0]
 8017ec2:	e01d      	b.n	8017f00 <HAL_RCC_OscConfig+0xb0>
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	685b      	ldr	r3, [r3, #4]
 8017ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8017ecc:	d10c      	bne.n	8017ee8 <HAL_RCC_OscConfig+0x98>
 8017ece:	4b70      	ldr	r3, [pc, #448]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	4a6f      	ldr	r2, [pc, #444]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8017ed8:	6013      	str	r3, [r2, #0]
 8017eda:	4b6d      	ldr	r3, [pc, #436]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	4a6c      	ldr	r2, [pc, #432]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017ee4:	6013      	str	r3, [r2, #0]
 8017ee6:	e00b      	b.n	8017f00 <HAL_RCC_OscConfig+0xb0>
 8017ee8:	4b69      	ldr	r3, [pc, #420]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	4a68      	ldr	r2, [pc, #416]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017ef2:	6013      	str	r3, [r2, #0]
 8017ef4:	4b66      	ldr	r3, [pc, #408]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	4a65      	ldr	r2, [pc, #404]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8017efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	685b      	ldr	r3, [r3, #4]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d013      	beq.n	8017f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017f08:	f7fd fa38 	bl	801537c <HAL_GetTick>
 8017f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8017f0e:	e008      	b.n	8017f22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8017f10:	f7fd fa34 	bl	801537c <HAL_GetTick>
 8017f14:	4602      	mov	r2, r0
 8017f16:	693b      	ldr	r3, [r7, #16]
 8017f18:	1ad3      	subs	r3, r2, r3
 8017f1a:	2b64      	cmp	r3, #100	; 0x64
 8017f1c:	d901      	bls.n	8017f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8017f1e:	2303      	movs	r3, #3
 8017f20:	e207      	b.n	8018332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8017f22:	4b5b      	ldr	r3, [pc, #364]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d0f0      	beq.n	8017f10 <HAL_RCC_OscConfig+0xc0>
 8017f2e:	e014      	b.n	8017f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017f30:	f7fd fa24 	bl	801537c <HAL_GetTick>
 8017f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8017f36:	e008      	b.n	8017f4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8017f38:	f7fd fa20 	bl	801537c <HAL_GetTick>
 8017f3c:	4602      	mov	r2, r0
 8017f3e:	693b      	ldr	r3, [r7, #16]
 8017f40:	1ad3      	subs	r3, r2, r3
 8017f42:	2b64      	cmp	r3, #100	; 0x64
 8017f44:	d901      	bls.n	8017f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8017f46:	2303      	movs	r3, #3
 8017f48:	e1f3      	b.n	8018332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8017f4a:	4b51      	ldr	r3, [pc, #324]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d1f0      	bne.n	8017f38 <HAL_RCC_OscConfig+0xe8>
 8017f56:	e000      	b.n	8017f5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	f003 0302 	and.w	r3, r3, #2
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d063      	beq.n	801802e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8017f66:	4b4a      	ldr	r3, [pc, #296]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017f68:	689b      	ldr	r3, [r3, #8]
 8017f6a:	f003 030c 	and.w	r3, r3, #12
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d00b      	beq.n	8017f8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8017f72:	4b47      	ldr	r3, [pc, #284]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017f74:	689b      	ldr	r3, [r3, #8]
 8017f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8017f7a:	2b08      	cmp	r3, #8
 8017f7c:	d11c      	bne.n	8017fb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8017f7e:	4b44      	ldr	r3, [pc, #272]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017f80:	685b      	ldr	r3, [r3, #4]
 8017f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d116      	bne.n	8017fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8017f8a:	4b41      	ldr	r3, [pc, #260]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	f003 0302 	and.w	r3, r3, #2
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d005      	beq.n	8017fa2 <HAL_RCC_OscConfig+0x152>
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	68db      	ldr	r3, [r3, #12]
 8017f9a:	2b01      	cmp	r3, #1
 8017f9c:	d001      	beq.n	8017fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8017f9e:	2301      	movs	r3, #1
 8017fa0:	e1c7      	b.n	8018332 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017fa2:	4b3b      	ldr	r3, [pc, #236]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	691b      	ldr	r3, [r3, #16]
 8017fae:	00db      	lsls	r3, r3, #3
 8017fb0:	4937      	ldr	r1, [pc, #220]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017fb2:	4313      	orrs	r3, r2
 8017fb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8017fb6:	e03a      	b.n	801802e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	68db      	ldr	r3, [r3, #12]
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d020      	beq.n	8018002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8017fc0:	4b34      	ldr	r3, [pc, #208]	; (8018094 <HAL_RCC_OscConfig+0x244>)
 8017fc2:	2201      	movs	r2, #1
 8017fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017fc6:	f7fd f9d9 	bl	801537c <HAL_GetTick>
 8017fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017fcc:	e008      	b.n	8017fe0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8017fce:	f7fd f9d5 	bl	801537c <HAL_GetTick>
 8017fd2:	4602      	mov	r2, r0
 8017fd4:	693b      	ldr	r3, [r7, #16]
 8017fd6:	1ad3      	subs	r3, r2, r3
 8017fd8:	2b02      	cmp	r3, #2
 8017fda:	d901      	bls.n	8017fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8017fdc:	2303      	movs	r3, #3
 8017fde:	e1a8      	b.n	8018332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017fe0:	4b2b      	ldr	r3, [pc, #172]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	f003 0302 	and.w	r3, r3, #2
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d0f0      	beq.n	8017fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017fec:	4b28      	ldr	r3, [pc, #160]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	691b      	ldr	r3, [r3, #16]
 8017ff8:	00db      	lsls	r3, r3, #3
 8017ffa:	4925      	ldr	r1, [pc, #148]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8017ffc:	4313      	orrs	r3, r2
 8017ffe:	600b      	str	r3, [r1, #0]
 8018000:	e015      	b.n	801802e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8018002:	4b24      	ldr	r3, [pc, #144]	; (8018094 <HAL_RCC_OscConfig+0x244>)
 8018004:	2200      	movs	r2, #0
 8018006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018008:	f7fd f9b8 	bl	801537c <HAL_GetTick>
 801800c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801800e:	e008      	b.n	8018022 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8018010:	f7fd f9b4 	bl	801537c <HAL_GetTick>
 8018014:	4602      	mov	r2, r0
 8018016:	693b      	ldr	r3, [r7, #16]
 8018018:	1ad3      	subs	r3, r2, r3
 801801a:	2b02      	cmp	r3, #2
 801801c:	d901      	bls.n	8018022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801801e:	2303      	movs	r3, #3
 8018020:	e187      	b.n	8018332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8018022:	4b1b      	ldr	r3, [pc, #108]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	f003 0302 	and.w	r3, r3, #2
 801802a:	2b00      	cmp	r3, #0
 801802c:	d1f0      	bne.n	8018010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	f003 0308 	and.w	r3, r3, #8
 8018036:	2b00      	cmp	r3, #0
 8018038:	d036      	beq.n	80180a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	695b      	ldr	r3, [r3, #20]
 801803e:	2b00      	cmp	r3, #0
 8018040:	d016      	beq.n	8018070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8018042:	4b15      	ldr	r3, [pc, #84]	; (8018098 <HAL_RCC_OscConfig+0x248>)
 8018044:	2201      	movs	r2, #1
 8018046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018048:	f7fd f998 	bl	801537c <HAL_GetTick>
 801804c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801804e:	e008      	b.n	8018062 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8018050:	f7fd f994 	bl	801537c <HAL_GetTick>
 8018054:	4602      	mov	r2, r0
 8018056:	693b      	ldr	r3, [r7, #16]
 8018058:	1ad3      	subs	r3, r2, r3
 801805a:	2b02      	cmp	r3, #2
 801805c:	d901      	bls.n	8018062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801805e:	2303      	movs	r3, #3
 8018060:	e167      	b.n	8018332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8018062:	4b0b      	ldr	r3, [pc, #44]	; (8018090 <HAL_RCC_OscConfig+0x240>)
 8018064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018066:	f003 0302 	and.w	r3, r3, #2
 801806a:	2b00      	cmp	r3, #0
 801806c:	d0f0      	beq.n	8018050 <HAL_RCC_OscConfig+0x200>
 801806e:	e01b      	b.n	80180a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8018070:	4b09      	ldr	r3, [pc, #36]	; (8018098 <HAL_RCC_OscConfig+0x248>)
 8018072:	2200      	movs	r2, #0
 8018074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018076:	f7fd f981 	bl	801537c <HAL_GetTick>
 801807a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801807c:	e00e      	b.n	801809c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801807e:	f7fd f97d 	bl	801537c <HAL_GetTick>
 8018082:	4602      	mov	r2, r0
 8018084:	693b      	ldr	r3, [r7, #16]
 8018086:	1ad3      	subs	r3, r2, r3
 8018088:	2b02      	cmp	r3, #2
 801808a:	d907      	bls.n	801809c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801808c:	2303      	movs	r3, #3
 801808e:	e150      	b.n	8018332 <HAL_RCC_OscConfig+0x4e2>
 8018090:	40023800 	.word	0x40023800
 8018094:	42470000 	.word	0x42470000
 8018098:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801809c:	4b88      	ldr	r3, [pc, #544]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 801809e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80180a0:	f003 0302 	and.w	r3, r3, #2
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d1ea      	bne.n	801807e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	f003 0304 	and.w	r3, r3, #4
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	f000 8097 	beq.w	80181e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80180b6:	2300      	movs	r3, #0
 80180b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80180ba:	4b81      	ldr	r3, [pc, #516]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 80180bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d10f      	bne.n	80180e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80180c6:	2300      	movs	r3, #0
 80180c8:	60bb      	str	r3, [r7, #8]
 80180ca:	4b7d      	ldr	r3, [pc, #500]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 80180cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180ce:	4a7c      	ldr	r2, [pc, #496]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 80180d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80180d4:	6413      	str	r3, [r2, #64]	; 0x40
 80180d6:	4b7a      	ldr	r3, [pc, #488]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 80180d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80180de:	60bb      	str	r3, [r7, #8]
 80180e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80180e2:	2301      	movs	r3, #1
 80180e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80180e6:	4b77      	ldr	r3, [pc, #476]	; (80182c4 <HAL_RCC_OscConfig+0x474>)
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d118      	bne.n	8018124 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80180f2:	4b74      	ldr	r3, [pc, #464]	; (80182c4 <HAL_RCC_OscConfig+0x474>)
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	4a73      	ldr	r2, [pc, #460]	; (80182c4 <HAL_RCC_OscConfig+0x474>)
 80180f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80180fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80180fe:	f7fd f93d 	bl	801537c <HAL_GetTick>
 8018102:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018104:	e008      	b.n	8018118 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018106:	f7fd f939 	bl	801537c <HAL_GetTick>
 801810a:	4602      	mov	r2, r0
 801810c:	693b      	ldr	r3, [r7, #16]
 801810e:	1ad3      	subs	r3, r2, r3
 8018110:	2b02      	cmp	r3, #2
 8018112:	d901      	bls.n	8018118 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8018114:	2303      	movs	r3, #3
 8018116:	e10c      	b.n	8018332 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018118:	4b6a      	ldr	r3, [pc, #424]	; (80182c4 <HAL_RCC_OscConfig+0x474>)
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018120:	2b00      	cmp	r3, #0
 8018122:	d0f0      	beq.n	8018106 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	689b      	ldr	r3, [r3, #8]
 8018128:	2b01      	cmp	r3, #1
 801812a:	d106      	bne.n	801813a <HAL_RCC_OscConfig+0x2ea>
 801812c:	4b64      	ldr	r3, [pc, #400]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 801812e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018130:	4a63      	ldr	r2, [pc, #396]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 8018132:	f043 0301 	orr.w	r3, r3, #1
 8018136:	6713      	str	r3, [r2, #112]	; 0x70
 8018138:	e01c      	b.n	8018174 <HAL_RCC_OscConfig+0x324>
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	689b      	ldr	r3, [r3, #8]
 801813e:	2b05      	cmp	r3, #5
 8018140:	d10c      	bne.n	801815c <HAL_RCC_OscConfig+0x30c>
 8018142:	4b5f      	ldr	r3, [pc, #380]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 8018144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018146:	4a5e      	ldr	r2, [pc, #376]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 8018148:	f043 0304 	orr.w	r3, r3, #4
 801814c:	6713      	str	r3, [r2, #112]	; 0x70
 801814e:	4b5c      	ldr	r3, [pc, #368]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 8018150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018152:	4a5b      	ldr	r2, [pc, #364]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 8018154:	f043 0301 	orr.w	r3, r3, #1
 8018158:	6713      	str	r3, [r2, #112]	; 0x70
 801815a:	e00b      	b.n	8018174 <HAL_RCC_OscConfig+0x324>
 801815c:	4b58      	ldr	r3, [pc, #352]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 801815e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018160:	4a57      	ldr	r2, [pc, #348]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 8018162:	f023 0301 	bic.w	r3, r3, #1
 8018166:	6713      	str	r3, [r2, #112]	; 0x70
 8018168:	4b55      	ldr	r3, [pc, #340]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 801816a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801816c:	4a54      	ldr	r2, [pc, #336]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 801816e:	f023 0304 	bic.w	r3, r3, #4
 8018172:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	689b      	ldr	r3, [r3, #8]
 8018178:	2b00      	cmp	r3, #0
 801817a:	d015      	beq.n	80181a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801817c:	f7fd f8fe 	bl	801537c <HAL_GetTick>
 8018180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8018182:	e00a      	b.n	801819a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8018184:	f7fd f8fa 	bl	801537c <HAL_GetTick>
 8018188:	4602      	mov	r2, r0
 801818a:	693b      	ldr	r3, [r7, #16]
 801818c:	1ad3      	subs	r3, r2, r3
 801818e:	f241 3288 	movw	r2, #5000	; 0x1388
 8018192:	4293      	cmp	r3, r2
 8018194:	d901      	bls.n	801819a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8018196:	2303      	movs	r3, #3
 8018198:	e0cb      	b.n	8018332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801819a:	4b49      	ldr	r3, [pc, #292]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 801819c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801819e:	f003 0302 	and.w	r3, r3, #2
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d0ee      	beq.n	8018184 <HAL_RCC_OscConfig+0x334>
 80181a6:	e014      	b.n	80181d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80181a8:	f7fd f8e8 	bl	801537c <HAL_GetTick>
 80181ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80181ae:	e00a      	b.n	80181c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80181b0:	f7fd f8e4 	bl	801537c <HAL_GetTick>
 80181b4:	4602      	mov	r2, r0
 80181b6:	693b      	ldr	r3, [r7, #16]
 80181b8:	1ad3      	subs	r3, r2, r3
 80181ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80181be:	4293      	cmp	r3, r2
 80181c0:	d901      	bls.n	80181c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80181c2:	2303      	movs	r3, #3
 80181c4:	e0b5      	b.n	8018332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80181c6:	4b3e      	ldr	r3, [pc, #248]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 80181c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80181ca:	f003 0302 	and.w	r3, r3, #2
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d1ee      	bne.n	80181b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80181d2:	7dfb      	ldrb	r3, [r7, #23]
 80181d4:	2b01      	cmp	r3, #1
 80181d6:	d105      	bne.n	80181e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80181d8:	4b39      	ldr	r3, [pc, #228]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 80181da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181dc:	4a38      	ldr	r2, [pc, #224]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 80181de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80181e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	699b      	ldr	r3, [r3, #24]
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	f000 80a1 	beq.w	8018330 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80181ee:	4b34      	ldr	r3, [pc, #208]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 80181f0:	689b      	ldr	r3, [r3, #8]
 80181f2:	f003 030c 	and.w	r3, r3, #12
 80181f6:	2b08      	cmp	r3, #8
 80181f8:	d05c      	beq.n	80182b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	699b      	ldr	r3, [r3, #24]
 80181fe:	2b02      	cmp	r3, #2
 8018200:	d141      	bne.n	8018286 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018202:	4b31      	ldr	r3, [pc, #196]	; (80182c8 <HAL_RCC_OscConfig+0x478>)
 8018204:	2200      	movs	r2, #0
 8018206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018208:	f7fd f8b8 	bl	801537c <HAL_GetTick>
 801820c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801820e:	e008      	b.n	8018222 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018210:	f7fd f8b4 	bl	801537c <HAL_GetTick>
 8018214:	4602      	mov	r2, r0
 8018216:	693b      	ldr	r3, [r7, #16]
 8018218:	1ad3      	subs	r3, r2, r3
 801821a:	2b02      	cmp	r3, #2
 801821c:	d901      	bls.n	8018222 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801821e:	2303      	movs	r3, #3
 8018220:	e087      	b.n	8018332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018222:	4b27      	ldr	r3, [pc, #156]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801822a:	2b00      	cmp	r3, #0
 801822c:	d1f0      	bne.n	8018210 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	69da      	ldr	r2, [r3, #28]
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	6a1b      	ldr	r3, [r3, #32]
 8018236:	431a      	orrs	r2, r3
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801823c:	019b      	lsls	r3, r3, #6
 801823e:	431a      	orrs	r2, r3
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018244:	085b      	lsrs	r3, r3, #1
 8018246:	3b01      	subs	r3, #1
 8018248:	041b      	lsls	r3, r3, #16
 801824a:	431a      	orrs	r2, r3
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018250:	061b      	lsls	r3, r3, #24
 8018252:	491b      	ldr	r1, [pc, #108]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 8018254:	4313      	orrs	r3, r2
 8018256:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8018258:	4b1b      	ldr	r3, [pc, #108]	; (80182c8 <HAL_RCC_OscConfig+0x478>)
 801825a:	2201      	movs	r2, #1
 801825c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801825e:	f7fd f88d 	bl	801537c <HAL_GetTick>
 8018262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8018264:	e008      	b.n	8018278 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018266:	f7fd f889 	bl	801537c <HAL_GetTick>
 801826a:	4602      	mov	r2, r0
 801826c:	693b      	ldr	r3, [r7, #16]
 801826e:	1ad3      	subs	r3, r2, r3
 8018270:	2b02      	cmp	r3, #2
 8018272:	d901      	bls.n	8018278 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8018274:	2303      	movs	r3, #3
 8018276:	e05c      	b.n	8018332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8018278:	4b11      	ldr	r3, [pc, #68]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018280:	2b00      	cmp	r3, #0
 8018282:	d0f0      	beq.n	8018266 <HAL_RCC_OscConfig+0x416>
 8018284:	e054      	b.n	8018330 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018286:	4b10      	ldr	r3, [pc, #64]	; (80182c8 <HAL_RCC_OscConfig+0x478>)
 8018288:	2200      	movs	r2, #0
 801828a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801828c:	f7fd f876 	bl	801537c <HAL_GetTick>
 8018290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018292:	e008      	b.n	80182a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018294:	f7fd f872 	bl	801537c <HAL_GetTick>
 8018298:	4602      	mov	r2, r0
 801829a:	693b      	ldr	r3, [r7, #16]
 801829c:	1ad3      	subs	r3, r2, r3
 801829e:	2b02      	cmp	r3, #2
 80182a0:	d901      	bls.n	80182a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80182a2:	2303      	movs	r3, #3
 80182a4:	e045      	b.n	8018332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80182a6:	4b06      	ldr	r3, [pc, #24]	; (80182c0 <HAL_RCC_OscConfig+0x470>)
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d1f0      	bne.n	8018294 <HAL_RCC_OscConfig+0x444>
 80182b2:	e03d      	b.n	8018330 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	699b      	ldr	r3, [r3, #24]
 80182b8:	2b01      	cmp	r3, #1
 80182ba:	d107      	bne.n	80182cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80182bc:	2301      	movs	r3, #1
 80182be:	e038      	b.n	8018332 <HAL_RCC_OscConfig+0x4e2>
 80182c0:	40023800 	.word	0x40023800
 80182c4:	40007000 	.word	0x40007000
 80182c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80182cc:	4b1b      	ldr	r3, [pc, #108]	; (801833c <HAL_RCC_OscConfig+0x4ec>)
 80182ce:	685b      	ldr	r3, [r3, #4]
 80182d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	699b      	ldr	r3, [r3, #24]
 80182d6:	2b01      	cmp	r3, #1
 80182d8:	d028      	beq.n	801832c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80182e4:	429a      	cmp	r2, r3
 80182e6:	d121      	bne.n	801832c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80182f2:	429a      	cmp	r2, r3
 80182f4:	d11a      	bne.n	801832c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80182f6:	68fa      	ldr	r2, [r7, #12]
 80182f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80182fc:	4013      	ands	r3, r2
 80182fe:	687a      	ldr	r2, [r7, #4]
 8018300:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018302:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8018304:	4293      	cmp	r3, r2
 8018306:	d111      	bne.n	801832c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018312:	085b      	lsrs	r3, r3, #1
 8018314:	3b01      	subs	r3, #1
 8018316:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8018318:	429a      	cmp	r2, r3
 801831a:	d107      	bne.n	801832c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018326:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8018328:	429a      	cmp	r2, r3
 801832a:	d001      	beq.n	8018330 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801832c:	2301      	movs	r3, #1
 801832e:	e000      	b.n	8018332 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8018330:	2300      	movs	r3, #0
}
 8018332:	4618      	mov	r0, r3
 8018334:	3718      	adds	r7, #24
 8018336:	46bd      	mov	sp, r7
 8018338:	bd80      	pop	{r7, pc}
 801833a:	bf00      	nop
 801833c:	40023800 	.word	0x40023800

08018340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8018340:	b580      	push	{r7, lr}
 8018342:	b084      	sub	sp, #16
 8018344:	af00      	add	r7, sp, #0
 8018346:	6078      	str	r0, [r7, #4]
 8018348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	2b00      	cmp	r3, #0
 801834e:	d101      	bne.n	8018354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8018350:	2301      	movs	r3, #1
 8018352:	e0cc      	b.n	80184ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8018354:	4b68      	ldr	r3, [pc, #416]	; (80184f8 <HAL_RCC_ClockConfig+0x1b8>)
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	f003 0307 	and.w	r3, r3, #7
 801835c:	683a      	ldr	r2, [r7, #0]
 801835e:	429a      	cmp	r2, r3
 8018360:	d90c      	bls.n	801837c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018362:	4b65      	ldr	r3, [pc, #404]	; (80184f8 <HAL_RCC_ClockConfig+0x1b8>)
 8018364:	683a      	ldr	r2, [r7, #0]
 8018366:	b2d2      	uxtb	r2, r2
 8018368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801836a:	4b63      	ldr	r3, [pc, #396]	; (80184f8 <HAL_RCC_ClockConfig+0x1b8>)
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	f003 0307 	and.w	r3, r3, #7
 8018372:	683a      	ldr	r2, [r7, #0]
 8018374:	429a      	cmp	r2, r3
 8018376:	d001      	beq.n	801837c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8018378:	2301      	movs	r3, #1
 801837a:	e0b8      	b.n	80184ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	f003 0302 	and.w	r3, r3, #2
 8018384:	2b00      	cmp	r3, #0
 8018386:	d020      	beq.n	80183ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	f003 0304 	and.w	r3, r3, #4
 8018390:	2b00      	cmp	r3, #0
 8018392:	d005      	beq.n	80183a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8018394:	4b59      	ldr	r3, [pc, #356]	; (80184fc <HAL_RCC_ClockConfig+0x1bc>)
 8018396:	689b      	ldr	r3, [r3, #8]
 8018398:	4a58      	ldr	r2, [pc, #352]	; (80184fc <HAL_RCC_ClockConfig+0x1bc>)
 801839a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801839e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	f003 0308 	and.w	r3, r3, #8
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d005      	beq.n	80183b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80183ac:	4b53      	ldr	r3, [pc, #332]	; (80184fc <HAL_RCC_ClockConfig+0x1bc>)
 80183ae:	689b      	ldr	r3, [r3, #8]
 80183b0:	4a52      	ldr	r2, [pc, #328]	; (80184fc <HAL_RCC_ClockConfig+0x1bc>)
 80183b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80183b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80183b8:	4b50      	ldr	r3, [pc, #320]	; (80184fc <HAL_RCC_ClockConfig+0x1bc>)
 80183ba:	689b      	ldr	r3, [r3, #8]
 80183bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	689b      	ldr	r3, [r3, #8]
 80183c4:	494d      	ldr	r1, [pc, #308]	; (80184fc <HAL_RCC_ClockConfig+0x1bc>)
 80183c6:	4313      	orrs	r3, r2
 80183c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	f003 0301 	and.w	r3, r3, #1
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d044      	beq.n	8018460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	685b      	ldr	r3, [r3, #4]
 80183da:	2b01      	cmp	r3, #1
 80183dc:	d107      	bne.n	80183ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80183de:	4b47      	ldr	r3, [pc, #284]	; (80184fc <HAL_RCC_ClockConfig+0x1bc>)
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d119      	bne.n	801841e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80183ea:	2301      	movs	r3, #1
 80183ec:	e07f      	b.n	80184ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	685b      	ldr	r3, [r3, #4]
 80183f2:	2b02      	cmp	r3, #2
 80183f4:	d003      	beq.n	80183fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80183fa:	2b03      	cmp	r3, #3
 80183fc:	d107      	bne.n	801840e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80183fe:	4b3f      	ldr	r3, [pc, #252]	; (80184fc <HAL_RCC_ClockConfig+0x1bc>)
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018406:	2b00      	cmp	r3, #0
 8018408:	d109      	bne.n	801841e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801840a:	2301      	movs	r3, #1
 801840c:	e06f      	b.n	80184ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801840e:	4b3b      	ldr	r3, [pc, #236]	; (80184fc <HAL_RCC_ClockConfig+0x1bc>)
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	f003 0302 	and.w	r3, r3, #2
 8018416:	2b00      	cmp	r3, #0
 8018418:	d101      	bne.n	801841e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801841a:	2301      	movs	r3, #1
 801841c:	e067      	b.n	80184ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801841e:	4b37      	ldr	r3, [pc, #220]	; (80184fc <HAL_RCC_ClockConfig+0x1bc>)
 8018420:	689b      	ldr	r3, [r3, #8]
 8018422:	f023 0203 	bic.w	r2, r3, #3
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	685b      	ldr	r3, [r3, #4]
 801842a:	4934      	ldr	r1, [pc, #208]	; (80184fc <HAL_RCC_ClockConfig+0x1bc>)
 801842c:	4313      	orrs	r3, r2
 801842e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8018430:	f7fc ffa4 	bl	801537c <HAL_GetTick>
 8018434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018436:	e00a      	b.n	801844e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018438:	f7fc ffa0 	bl	801537c <HAL_GetTick>
 801843c:	4602      	mov	r2, r0
 801843e:	68fb      	ldr	r3, [r7, #12]
 8018440:	1ad3      	subs	r3, r2, r3
 8018442:	f241 3288 	movw	r2, #5000	; 0x1388
 8018446:	4293      	cmp	r3, r2
 8018448:	d901      	bls.n	801844e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801844a:	2303      	movs	r3, #3
 801844c:	e04f      	b.n	80184ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801844e:	4b2b      	ldr	r3, [pc, #172]	; (80184fc <HAL_RCC_ClockConfig+0x1bc>)
 8018450:	689b      	ldr	r3, [r3, #8]
 8018452:	f003 020c 	and.w	r2, r3, #12
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	685b      	ldr	r3, [r3, #4]
 801845a:	009b      	lsls	r3, r3, #2
 801845c:	429a      	cmp	r2, r3
 801845e:	d1eb      	bne.n	8018438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8018460:	4b25      	ldr	r3, [pc, #148]	; (80184f8 <HAL_RCC_ClockConfig+0x1b8>)
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	f003 0307 	and.w	r3, r3, #7
 8018468:	683a      	ldr	r2, [r7, #0]
 801846a:	429a      	cmp	r2, r3
 801846c:	d20c      	bcs.n	8018488 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801846e:	4b22      	ldr	r3, [pc, #136]	; (80184f8 <HAL_RCC_ClockConfig+0x1b8>)
 8018470:	683a      	ldr	r2, [r7, #0]
 8018472:	b2d2      	uxtb	r2, r2
 8018474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8018476:	4b20      	ldr	r3, [pc, #128]	; (80184f8 <HAL_RCC_ClockConfig+0x1b8>)
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	f003 0307 	and.w	r3, r3, #7
 801847e:	683a      	ldr	r2, [r7, #0]
 8018480:	429a      	cmp	r2, r3
 8018482:	d001      	beq.n	8018488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8018484:	2301      	movs	r3, #1
 8018486:	e032      	b.n	80184ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	f003 0304 	and.w	r3, r3, #4
 8018490:	2b00      	cmp	r3, #0
 8018492:	d008      	beq.n	80184a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8018494:	4b19      	ldr	r3, [pc, #100]	; (80184fc <HAL_RCC_ClockConfig+0x1bc>)
 8018496:	689b      	ldr	r3, [r3, #8]
 8018498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	68db      	ldr	r3, [r3, #12]
 80184a0:	4916      	ldr	r1, [pc, #88]	; (80184fc <HAL_RCC_ClockConfig+0x1bc>)
 80184a2:	4313      	orrs	r3, r2
 80184a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	f003 0308 	and.w	r3, r3, #8
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d009      	beq.n	80184c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80184b2:	4b12      	ldr	r3, [pc, #72]	; (80184fc <HAL_RCC_ClockConfig+0x1bc>)
 80184b4:	689b      	ldr	r3, [r3, #8]
 80184b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	691b      	ldr	r3, [r3, #16]
 80184be:	00db      	lsls	r3, r3, #3
 80184c0:	490e      	ldr	r1, [pc, #56]	; (80184fc <HAL_RCC_ClockConfig+0x1bc>)
 80184c2:	4313      	orrs	r3, r2
 80184c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80184c6:	f000 f821 	bl	801850c <HAL_RCC_GetSysClockFreq>
 80184ca:	4602      	mov	r2, r0
 80184cc:	4b0b      	ldr	r3, [pc, #44]	; (80184fc <HAL_RCC_ClockConfig+0x1bc>)
 80184ce:	689b      	ldr	r3, [r3, #8]
 80184d0:	091b      	lsrs	r3, r3, #4
 80184d2:	f003 030f 	and.w	r3, r3, #15
 80184d6:	490a      	ldr	r1, [pc, #40]	; (8018500 <HAL_RCC_ClockConfig+0x1c0>)
 80184d8:	5ccb      	ldrb	r3, [r1, r3]
 80184da:	fa22 f303 	lsr.w	r3, r2, r3
 80184de:	4a09      	ldr	r2, [pc, #36]	; (8018504 <HAL_RCC_ClockConfig+0x1c4>)
 80184e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80184e2:	4b09      	ldr	r3, [pc, #36]	; (8018508 <HAL_RCC_ClockConfig+0x1c8>)
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	4618      	mov	r0, r3
 80184e8:	f7fc ff04 	bl	80152f4 <HAL_InitTick>

  return HAL_OK;
 80184ec:	2300      	movs	r3, #0
}
 80184ee:	4618      	mov	r0, r3
 80184f0:	3710      	adds	r7, #16
 80184f2:	46bd      	mov	sp, r7
 80184f4:	bd80      	pop	{r7, pc}
 80184f6:	bf00      	nop
 80184f8:	40023c00 	.word	0x40023c00
 80184fc:	40023800 	.word	0x40023800
 8018500:	0802d934 	.word	0x0802d934
 8018504:	20000ee0 	.word	0x20000ee0
 8018508:	20000ee4 	.word	0x20000ee4

0801850c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801850c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018510:	b094      	sub	sp, #80	; 0x50
 8018512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8018514:	2300      	movs	r3, #0
 8018516:	647b      	str	r3, [r7, #68]	; 0x44
 8018518:	2300      	movs	r3, #0
 801851a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801851c:	2300      	movs	r3, #0
 801851e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8018520:	2300      	movs	r3, #0
 8018522:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8018524:	4b79      	ldr	r3, [pc, #484]	; (801870c <HAL_RCC_GetSysClockFreq+0x200>)
 8018526:	689b      	ldr	r3, [r3, #8]
 8018528:	f003 030c 	and.w	r3, r3, #12
 801852c:	2b08      	cmp	r3, #8
 801852e:	d00d      	beq.n	801854c <HAL_RCC_GetSysClockFreq+0x40>
 8018530:	2b08      	cmp	r3, #8
 8018532:	f200 80e1 	bhi.w	80186f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8018536:	2b00      	cmp	r3, #0
 8018538:	d002      	beq.n	8018540 <HAL_RCC_GetSysClockFreq+0x34>
 801853a:	2b04      	cmp	r3, #4
 801853c:	d003      	beq.n	8018546 <HAL_RCC_GetSysClockFreq+0x3a>
 801853e:	e0db      	b.n	80186f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8018540:	4b73      	ldr	r3, [pc, #460]	; (8018710 <HAL_RCC_GetSysClockFreq+0x204>)
 8018542:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8018544:	e0db      	b.n	80186fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8018546:	4b73      	ldr	r3, [pc, #460]	; (8018714 <HAL_RCC_GetSysClockFreq+0x208>)
 8018548:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801854a:	e0d8      	b.n	80186fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801854c:	4b6f      	ldr	r3, [pc, #444]	; (801870c <HAL_RCC_GetSysClockFreq+0x200>)
 801854e:	685b      	ldr	r3, [r3, #4]
 8018550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018554:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8018556:	4b6d      	ldr	r3, [pc, #436]	; (801870c <HAL_RCC_GetSysClockFreq+0x200>)
 8018558:	685b      	ldr	r3, [r3, #4]
 801855a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801855e:	2b00      	cmp	r3, #0
 8018560:	d063      	beq.n	801862a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8018562:	4b6a      	ldr	r3, [pc, #424]	; (801870c <HAL_RCC_GetSysClockFreq+0x200>)
 8018564:	685b      	ldr	r3, [r3, #4]
 8018566:	099b      	lsrs	r3, r3, #6
 8018568:	2200      	movs	r2, #0
 801856a:	63bb      	str	r3, [r7, #56]	; 0x38
 801856c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801856e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018574:	633b      	str	r3, [r7, #48]	; 0x30
 8018576:	2300      	movs	r3, #0
 8018578:	637b      	str	r3, [r7, #52]	; 0x34
 801857a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801857e:	4622      	mov	r2, r4
 8018580:	462b      	mov	r3, r5
 8018582:	f04f 0000 	mov.w	r0, #0
 8018586:	f04f 0100 	mov.w	r1, #0
 801858a:	0159      	lsls	r1, r3, #5
 801858c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8018590:	0150      	lsls	r0, r2, #5
 8018592:	4602      	mov	r2, r0
 8018594:	460b      	mov	r3, r1
 8018596:	4621      	mov	r1, r4
 8018598:	1a51      	subs	r1, r2, r1
 801859a:	6139      	str	r1, [r7, #16]
 801859c:	4629      	mov	r1, r5
 801859e:	eb63 0301 	sbc.w	r3, r3, r1
 80185a2:	617b      	str	r3, [r7, #20]
 80185a4:	f04f 0200 	mov.w	r2, #0
 80185a8:	f04f 0300 	mov.w	r3, #0
 80185ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80185b0:	4659      	mov	r1, fp
 80185b2:	018b      	lsls	r3, r1, #6
 80185b4:	4651      	mov	r1, sl
 80185b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80185ba:	4651      	mov	r1, sl
 80185bc:	018a      	lsls	r2, r1, #6
 80185be:	4651      	mov	r1, sl
 80185c0:	ebb2 0801 	subs.w	r8, r2, r1
 80185c4:	4659      	mov	r1, fp
 80185c6:	eb63 0901 	sbc.w	r9, r3, r1
 80185ca:	f04f 0200 	mov.w	r2, #0
 80185ce:	f04f 0300 	mov.w	r3, #0
 80185d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80185d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80185da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80185de:	4690      	mov	r8, r2
 80185e0:	4699      	mov	r9, r3
 80185e2:	4623      	mov	r3, r4
 80185e4:	eb18 0303 	adds.w	r3, r8, r3
 80185e8:	60bb      	str	r3, [r7, #8]
 80185ea:	462b      	mov	r3, r5
 80185ec:	eb49 0303 	adc.w	r3, r9, r3
 80185f0:	60fb      	str	r3, [r7, #12]
 80185f2:	f04f 0200 	mov.w	r2, #0
 80185f6:	f04f 0300 	mov.w	r3, #0
 80185fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80185fe:	4629      	mov	r1, r5
 8018600:	024b      	lsls	r3, r1, #9
 8018602:	4621      	mov	r1, r4
 8018604:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8018608:	4621      	mov	r1, r4
 801860a:	024a      	lsls	r2, r1, #9
 801860c:	4610      	mov	r0, r2
 801860e:	4619      	mov	r1, r3
 8018610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018612:	2200      	movs	r2, #0
 8018614:	62bb      	str	r3, [r7, #40]	; 0x28
 8018616:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018618:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801861c:	f7e8 fb24 	bl	8000c68 <__aeabi_uldivmod>
 8018620:	4602      	mov	r2, r0
 8018622:	460b      	mov	r3, r1
 8018624:	4613      	mov	r3, r2
 8018626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018628:	e058      	b.n	80186dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801862a:	4b38      	ldr	r3, [pc, #224]	; (801870c <HAL_RCC_GetSysClockFreq+0x200>)
 801862c:	685b      	ldr	r3, [r3, #4]
 801862e:	099b      	lsrs	r3, r3, #6
 8018630:	2200      	movs	r2, #0
 8018632:	4618      	mov	r0, r3
 8018634:	4611      	mov	r1, r2
 8018636:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801863a:	623b      	str	r3, [r7, #32]
 801863c:	2300      	movs	r3, #0
 801863e:	627b      	str	r3, [r7, #36]	; 0x24
 8018640:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8018644:	4642      	mov	r2, r8
 8018646:	464b      	mov	r3, r9
 8018648:	f04f 0000 	mov.w	r0, #0
 801864c:	f04f 0100 	mov.w	r1, #0
 8018650:	0159      	lsls	r1, r3, #5
 8018652:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8018656:	0150      	lsls	r0, r2, #5
 8018658:	4602      	mov	r2, r0
 801865a:	460b      	mov	r3, r1
 801865c:	4641      	mov	r1, r8
 801865e:	ebb2 0a01 	subs.w	sl, r2, r1
 8018662:	4649      	mov	r1, r9
 8018664:	eb63 0b01 	sbc.w	fp, r3, r1
 8018668:	f04f 0200 	mov.w	r2, #0
 801866c:	f04f 0300 	mov.w	r3, #0
 8018670:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8018674:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8018678:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801867c:	ebb2 040a 	subs.w	r4, r2, sl
 8018680:	eb63 050b 	sbc.w	r5, r3, fp
 8018684:	f04f 0200 	mov.w	r2, #0
 8018688:	f04f 0300 	mov.w	r3, #0
 801868c:	00eb      	lsls	r3, r5, #3
 801868e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8018692:	00e2      	lsls	r2, r4, #3
 8018694:	4614      	mov	r4, r2
 8018696:	461d      	mov	r5, r3
 8018698:	4643      	mov	r3, r8
 801869a:	18e3      	adds	r3, r4, r3
 801869c:	603b      	str	r3, [r7, #0]
 801869e:	464b      	mov	r3, r9
 80186a0:	eb45 0303 	adc.w	r3, r5, r3
 80186a4:	607b      	str	r3, [r7, #4]
 80186a6:	f04f 0200 	mov.w	r2, #0
 80186aa:	f04f 0300 	mov.w	r3, #0
 80186ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80186b2:	4629      	mov	r1, r5
 80186b4:	028b      	lsls	r3, r1, #10
 80186b6:	4621      	mov	r1, r4
 80186b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80186bc:	4621      	mov	r1, r4
 80186be:	028a      	lsls	r2, r1, #10
 80186c0:	4610      	mov	r0, r2
 80186c2:	4619      	mov	r1, r3
 80186c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80186c6:	2200      	movs	r2, #0
 80186c8:	61bb      	str	r3, [r7, #24]
 80186ca:	61fa      	str	r2, [r7, #28]
 80186cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80186d0:	f7e8 faca 	bl	8000c68 <__aeabi_uldivmod>
 80186d4:	4602      	mov	r2, r0
 80186d6:	460b      	mov	r3, r1
 80186d8:	4613      	mov	r3, r2
 80186da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80186dc:	4b0b      	ldr	r3, [pc, #44]	; (801870c <HAL_RCC_GetSysClockFreq+0x200>)
 80186de:	685b      	ldr	r3, [r3, #4]
 80186e0:	0c1b      	lsrs	r3, r3, #16
 80186e2:	f003 0303 	and.w	r3, r3, #3
 80186e6:	3301      	adds	r3, #1
 80186e8:	005b      	lsls	r3, r3, #1
 80186ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80186ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80186ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80186f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80186f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80186f6:	e002      	b.n	80186fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80186f8:	4b05      	ldr	r3, [pc, #20]	; (8018710 <HAL_RCC_GetSysClockFreq+0x204>)
 80186fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80186fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80186fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8018700:	4618      	mov	r0, r3
 8018702:	3750      	adds	r7, #80	; 0x50
 8018704:	46bd      	mov	sp, r7
 8018706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801870a:	bf00      	nop
 801870c:	40023800 	.word	0x40023800
 8018710:	00f42400 	.word	0x00f42400
 8018714:	007a1200 	.word	0x007a1200

08018718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8018718:	b480      	push	{r7}
 801871a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801871c:	4b03      	ldr	r3, [pc, #12]	; (801872c <HAL_RCC_GetHCLKFreq+0x14>)
 801871e:	681b      	ldr	r3, [r3, #0]
}
 8018720:	4618      	mov	r0, r3
 8018722:	46bd      	mov	sp, r7
 8018724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018728:	4770      	bx	lr
 801872a:	bf00      	nop
 801872c:	20000ee0 	.word	0x20000ee0

08018730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8018730:	b580      	push	{r7, lr}
 8018732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8018734:	f7ff fff0 	bl	8018718 <HAL_RCC_GetHCLKFreq>
 8018738:	4602      	mov	r2, r0
 801873a:	4b05      	ldr	r3, [pc, #20]	; (8018750 <HAL_RCC_GetPCLK1Freq+0x20>)
 801873c:	689b      	ldr	r3, [r3, #8]
 801873e:	0a9b      	lsrs	r3, r3, #10
 8018740:	f003 0307 	and.w	r3, r3, #7
 8018744:	4903      	ldr	r1, [pc, #12]	; (8018754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8018746:	5ccb      	ldrb	r3, [r1, r3]
 8018748:	fa22 f303 	lsr.w	r3, r2, r3
}
 801874c:	4618      	mov	r0, r3
 801874e:	bd80      	pop	{r7, pc}
 8018750:	40023800 	.word	0x40023800
 8018754:	0802d944 	.word	0x0802d944

08018758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8018758:	b580      	push	{r7, lr}
 801875a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801875c:	f7ff ffdc 	bl	8018718 <HAL_RCC_GetHCLKFreq>
 8018760:	4602      	mov	r2, r0
 8018762:	4b05      	ldr	r3, [pc, #20]	; (8018778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8018764:	689b      	ldr	r3, [r3, #8]
 8018766:	0b5b      	lsrs	r3, r3, #13
 8018768:	f003 0307 	and.w	r3, r3, #7
 801876c:	4903      	ldr	r1, [pc, #12]	; (801877c <HAL_RCC_GetPCLK2Freq+0x24>)
 801876e:	5ccb      	ldrb	r3, [r1, r3]
 8018770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8018774:	4618      	mov	r0, r3
 8018776:	bd80      	pop	{r7, pc}
 8018778:	40023800 	.word	0x40023800
 801877c:	0802d944 	.word	0x0802d944

08018780 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8018780:	b580      	push	{r7, lr}
 8018782:	b082      	sub	sp, #8
 8018784:	af00      	add	r7, sp, #0
 8018786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	2b00      	cmp	r3, #0
 801878c:	d101      	bne.n	8018792 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801878e:	2301      	movs	r3, #1
 8018790:	e041      	b.n	8018816 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018798:	b2db      	uxtb	r3, r3
 801879a:	2b00      	cmp	r3, #0
 801879c:	d106      	bne.n	80187ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	2200      	movs	r2, #0
 80187a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80187a6:	6878      	ldr	r0, [r7, #4]
 80187a8:	f7fc fa8a 	bl	8014cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	2202      	movs	r2, #2
 80187b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	681a      	ldr	r2, [r3, #0]
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	3304      	adds	r3, #4
 80187bc:	4619      	mov	r1, r3
 80187be:	4610      	mov	r0, r2
 80187c0:	f000 fd0a 	bl	80191d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	2201      	movs	r2, #1
 80187c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	2201      	movs	r2, #1
 80187d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	2201      	movs	r2, #1
 80187d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	2201      	movs	r2, #1
 80187e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	2201      	movs	r2, #1
 80187e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	2201      	movs	r2, #1
 80187f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	2201      	movs	r2, #1
 80187f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	2201      	movs	r2, #1
 8018800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	2201      	movs	r2, #1
 8018808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	2201      	movs	r2, #1
 8018810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8018814:	2300      	movs	r3, #0
}
 8018816:	4618      	mov	r0, r3
 8018818:	3708      	adds	r7, #8
 801881a:	46bd      	mov	sp, r7
 801881c:	bd80      	pop	{r7, pc}
	...

08018820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8018820:	b480      	push	{r7}
 8018822:	b085      	sub	sp, #20
 8018824:	af00      	add	r7, sp, #0
 8018826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801882e:	b2db      	uxtb	r3, r3
 8018830:	2b01      	cmp	r3, #1
 8018832:	d001      	beq.n	8018838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8018834:	2301      	movs	r3, #1
 8018836:	e04e      	b.n	80188d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	2202      	movs	r2, #2
 801883c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	68da      	ldr	r2, [r3, #12]
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	f042 0201 	orr.w	r2, r2, #1
 801884e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	4a23      	ldr	r2, [pc, #140]	; (80188e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8018856:	4293      	cmp	r3, r2
 8018858:	d022      	beq.n	80188a0 <HAL_TIM_Base_Start_IT+0x80>
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018862:	d01d      	beq.n	80188a0 <HAL_TIM_Base_Start_IT+0x80>
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	4a1f      	ldr	r2, [pc, #124]	; (80188e8 <HAL_TIM_Base_Start_IT+0xc8>)
 801886a:	4293      	cmp	r3, r2
 801886c:	d018      	beq.n	80188a0 <HAL_TIM_Base_Start_IT+0x80>
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	4a1e      	ldr	r2, [pc, #120]	; (80188ec <HAL_TIM_Base_Start_IT+0xcc>)
 8018874:	4293      	cmp	r3, r2
 8018876:	d013      	beq.n	80188a0 <HAL_TIM_Base_Start_IT+0x80>
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	4a1c      	ldr	r2, [pc, #112]	; (80188f0 <HAL_TIM_Base_Start_IT+0xd0>)
 801887e:	4293      	cmp	r3, r2
 8018880:	d00e      	beq.n	80188a0 <HAL_TIM_Base_Start_IT+0x80>
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	4a1b      	ldr	r2, [pc, #108]	; (80188f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8018888:	4293      	cmp	r3, r2
 801888a:	d009      	beq.n	80188a0 <HAL_TIM_Base_Start_IT+0x80>
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	4a19      	ldr	r2, [pc, #100]	; (80188f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8018892:	4293      	cmp	r3, r2
 8018894:	d004      	beq.n	80188a0 <HAL_TIM_Base_Start_IT+0x80>
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	4a18      	ldr	r2, [pc, #96]	; (80188fc <HAL_TIM_Base_Start_IT+0xdc>)
 801889c:	4293      	cmp	r3, r2
 801889e:	d111      	bne.n	80188c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	689b      	ldr	r3, [r3, #8]
 80188a6:	f003 0307 	and.w	r3, r3, #7
 80188aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	2b06      	cmp	r3, #6
 80188b0:	d010      	beq.n	80188d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	681a      	ldr	r2, [r3, #0]
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	f042 0201 	orr.w	r2, r2, #1
 80188c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80188c2:	e007      	b.n	80188d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	681a      	ldr	r2, [r3, #0]
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	f042 0201 	orr.w	r2, r2, #1
 80188d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80188d4:	2300      	movs	r3, #0
}
 80188d6:	4618      	mov	r0, r3
 80188d8:	3714      	adds	r7, #20
 80188da:	46bd      	mov	sp, r7
 80188dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188e0:	4770      	bx	lr
 80188e2:	bf00      	nop
 80188e4:	40010000 	.word	0x40010000
 80188e8:	40000400 	.word	0x40000400
 80188ec:	40000800 	.word	0x40000800
 80188f0:	40000c00 	.word	0x40000c00
 80188f4:	40010400 	.word	0x40010400
 80188f8:	40014000 	.word	0x40014000
 80188fc:	40001800 	.word	0x40001800

08018900 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8018900:	b480      	push	{r7}
 8018902:	b083      	sub	sp, #12
 8018904:	af00      	add	r7, sp, #0
 8018906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	68da      	ldr	r2, [r3, #12]
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	f022 0201 	bic.w	r2, r2, #1
 8018916:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	6a1a      	ldr	r2, [r3, #32]
 801891e:	f241 1311 	movw	r3, #4369	; 0x1111
 8018922:	4013      	ands	r3, r2
 8018924:	2b00      	cmp	r3, #0
 8018926:	d10f      	bne.n	8018948 <HAL_TIM_Base_Stop_IT+0x48>
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	6a1a      	ldr	r2, [r3, #32]
 801892e:	f240 4344 	movw	r3, #1092	; 0x444
 8018932:	4013      	ands	r3, r2
 8018934:	2b00      	cmp	r3, #0
 8018936:	d107      	bne.n	8018948 <HAL_TIM_Base_Stop_IT+0x48>
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	681a      	ldr	r2, [r3, #0]
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	f022 0201 	bic.w	r2, r2, #1
 8018946:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	2201      	movs	r2, #1
 801894c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8018950:	2300      	movs	r3, #0
}
 8018952:	4618      	mov	r0, r3
 8018954:	370c      	adds	r7, #12
 8018956:	46bd      	mov	sp, r7
 8018958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801895c:	4770      	bx	lr

0801895e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801895e:	b580      	push	{r7, lr}
 8018960:	b082      	sub	sp, #8
 8018962:	af00      	add	r7, sp, #0
 8018964:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	2b00      	cmp	r3, #0
 801896a:	d101      	bne.n	8018970 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801896c:	2301      	movs	r3, #1
 801896e:	e041      	b.n	80189f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018976:	b2db      	uxtb	r3, r3
 8018978:	2b00      	cmp	r3, #0
 801897a:	d106      	bne.n	801898a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	2200      	movs	r2, #0
 8018980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8018984:	6878      	ldr	r0, [r7, #4]
 8018986:	f000 f839 	bl	80189fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	2202      	movs	r2, #2
 801898e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	681a      	ldr	r2, [r3, #0]
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	3304      	adds	r3, #4
 801899a:	4619      	mov	r1, r3
 801899c:	4610      	mov	r0, r2
 801899e:	f000 fc1b 	bl	80191d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	2201      	movs	r2, #1
 80189a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	2201      	movs	r2, #1
 80189ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	2201      	movs	r2, #1
 80189b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	2201      	movs	r2, #1
 80189be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	2201      	movs	r2, #1
 80189c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	2201      	movs	r2, #1
 80189ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	2201      	movs	r2, #1
 80189d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	2201      	movs	r2, #1
 80189de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	2201      	movs	r2, #1
 80189e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	2201      	movs	r2, #1
 80189ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80189f2:	2300      	movs	r3, #0
}
 80189f4:	4618      	mov	r0, r3
 80189f6:	3708      	adds	r7, #8
 80189f8:	46bd      	mov	sp, r7
 80189fa:	bd80      	pop	{r7, pc}

080189fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80189fc:	b480      	push	{r7}
 80189fe:	b083      	sub	sp, #12
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8018a04:	bf00      	nop
 8018a06:	370c      	adds	r7, #12
 8018a08:	46bd      	mov	sp, r7
 8018a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a0e:	4770      	bx	lr

08018a10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b084      	sub	sp, #16
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	6078      	str	r0, [r7, #4]
 8018a18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8018a1a:	683b      	ldr	r3, [r7, #0]
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d109      	bne.n	8018a34 <HAL_TIM_PWM_Start+0x24>
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018a26:	b2db      	uxtb	r3, r3
 8018a28:	2b01      	cmp	r3, #1
 8018a2a:	bf14      	ite	ne
 8018a2c:	2301      	movne	r3, #1
 8018a2e:	2300      	moveq	r3, #0
 8018a30:	b2db      	uxtb	r3, r3
 8018a32:	e022      	b.n	8018a7a <HAL_TIM_PWM_Start+0x6a>
 8018a34:	683b      	ldr	r3, [r7, #0]
 8018a36:	2b04      	cmp	r3, #4
 8018a38:	d109      	bne.n	8018a4e <HAL_TIM_PWM_Start+0x3e>
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8018a40:	b2db      	uxtb	r3, r3
 8018a42:	2b01      	cmp	r3, #1
 8018a44:	bf14      	ite	ne
 8018a46:	2301      	movne	r3, #1
 8018a48:	2300      	moveq	r3, #0
 8018a4a:	b2db      	uxtb	r3, r3
 8018a4c:	e015      	b.n	8018a7a <HAL_TIM_PWM_Start+0x6a>
 8018a4e:	683b      	ldr	r3, [r7, #0]
 8018a50:	2b08      	cmp	r3, #8
 8018a52:	d109      	bne.n	8018a68 <HAL_TIM_PWM_Start+0x58>
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018a5a:	b2db      	uxtb	r3, r3
 8018a5c:	2b01      	cmp	r3, #1
 8018a5e:	bf14      	ite	ne
 8018a60:	2301      	movne	r3, #1
 8018a62:	2300      	moveq	r3, #0
 8018a64:	b2db      	uxtb	r3, r3
 8018a66:	e008      	b.n	8018a7a <HAL_TIM_PWM_Start+0x6a>
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018a6e:	b2db      	uxtb	r3, r3
 8018a70:	2b01      	cmp	r3, #1
 8018a72:	bf14      	ite	ne
 8018a74:	2301      	movne	r3, #1
 8018a76:	2300      	moveq	r3, #0
 8018a78:	b2db      	uxtb	r3, r3
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d001      	beq.n	8018a82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8018a7e:	2301      	movs	r3, #1
 8018a80:	e07c      	b.n	8018b7c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8018a82:	683b      	ldr	r3, [r7, #0]
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d104      	bne.n	8018a92 <HAL_TIM_PWM_Start+0x82>
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	2202      	movs	r2, #2
 8018a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8018a90:	e013      	b.n	8018aba <HAL_TIM_PWM_Start+0xaa>
 8018a92:	683b      	ldr	r3, [r7, #0]
 8018a94:	2b04      	cmp	r3, #4
 8018a96:	d104      	bne.n	8018aa2 <HAL_TIM_PWM_Start+0x92>
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	2202      	movs	r2, #2
 8018a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8018aa0:	e00b      	b.n	8018aba <HAL_TIM_PWM_Start+0xaa>
 8018aa2:	683b      	ldr	r3, [r7, #0]
 8018aa4:	2b08      	cmp	r3, #8
 8018aa6:	d104      	bne.n	8018ab2 <HAL_TIM_PWM_Start+0xa2>
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	2202      	movs	r2, #2
 8018aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8018ab0:	e003      	b.n	8018aba <HAL_TIM_PWM_Start+0xaa>
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	2202      	movs	r2, #2
 8018ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	2201      	movs	r2, #1
 8018ac0:	6839      	ldr	r1, [r7, #0]
 8018ac2:	4618      	mov	r0, r3
 8018ac4:	f000 fe7e 	bl	80197c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	681b      	ldr	r3, [r3, #0]
 8018acc:	4a2d      	ldr	r2, [pc, #180]	; (8018b84 <HAL_TIM_PWM_Start+0x174>)
 8018ace:	4293      	cmp	r3, r2
 8018ad0:	d004      	beq.n	8018adc <HAL_TIM_PWM_Start+0xcc>
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	4a2c      	ldr	r2, [pc, #176]	; (8018b88 <HAL_TIM_PWM_Start+0x178>)
 8018ad8:	4293      	cmp	r3, r2
 8018ada:	d101      	bne.n	8018ae0 <HAL_TIM_PWM_Start+0xd0>
 8018adc:	2301      	movs	r3, #1
 8018ade:	e000      	b.n	8018ae2 <HAL_TIM_PWM_Start+0xd2>
 8018ae0:	2300      	movs	r3, #0
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d007      	beq.n	8018af6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	681b      	ldr	r3, [r3, #0]
 8018af0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8018af4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	4a22      	ldr	r2, [pc, #136]	; (8018b84 <HAL_TIM_PWM_Start+0x174>)
 8018afc:	4293      	cmp	r3, r2
 8018afe:	d022      	beq.n	8018b46 <HAL_TIM_PWM_Start+0x136>
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018b08:	d01d      	beq.n	8018b46 <HAL_TIM_PWM_Start+0x136>
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	4a1f      	ldr	r2, [pc, #124]	; (8018b8c <HAL_TIM_PWM_Start+0x17c>)
 8018b10:	4293      	cmp	r3, r2
 8018b12:	d018      	beq.n	8018b46 <HAL_TIM_PWM_Start+0x136>
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	4a1d      	ldr	r2, [pc, #116]	; (8018b90 <HAL_TIM_PWM_Start+0x180>)
 8018b1a:	4293      	cmp	r3, r2
 8018b1c:	d013      	beq.n	8018b46 <HAL_TIM_PWM_Start+0x136>
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	4a1c      	ldr	r2, [pc, #112]	; (8018b94 <HAL_TIM_PWM_Start+0x184>)
 8018b24:	4293      	cmp	r3, r2
 8018b26:	d00e      	beq.n	8018b46 <HAL_TIM_PWM_Start+0x136>
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	4a16      	ldr	r2, [pc, #88]	; (8018b88 <HAL_TIM_PWM_Start+0x178>)
 8018b2e:	4293      	cmp	r3, r2
 8018b30:	d009      	beq.n	8018b46 <HAL_TIM_PWM_Start+0x136>
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	4a18      	ldr	r2, [pc, #96]	; (8018b98 <HAL_TIM_PWM_Start+0x188>)
 8018b38:	4293      	cmp	r3, r2
 8018b3a:	d004      	beq.n	8018b46 <HAL_TIM_PWM_Start+0x136>
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	681b      	ldr	r3, [r3, #0]
 8018b40:	4a16      	ldr	r2, [pc, #88]	; (8018b9c <HAL_TIM_PWM_Start+0x18c>)
 8018b42:	4293      	cmp	r3, r2
 8018b44:	d111      	bne.n	8018b6a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	689b      	ldr	r3, [r3, #8]
 8018b4c:	f003 0307 	and.w	r3, r3, #7
 8018b50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	2b06      	cmp	r3, #6
 8018b56:	d010      	beq.n	8018b7a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	681a      	ldr	r2, [r3, #0]
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	f042 0201 	orr.w	r2, r2, #1
 8018b66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018b68:	e007      	b.n	8018b7a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	681a      	ldr	r2, [r3, #0]
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	f042 0201 	orr.w	r2, r2, #1
 8018b78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8018b7a:	2300      	movs	r3, #0
}
 8018b7c:	4618      	mov	r0, r3
 8018b7e:	3710      	adds	r7, #16
 8018b80:	46bd      	mov	sp, r7
 8018b82:	bd80      	pop	{r7, pc}
 8018b84:	40010000 	.word	0x40010000
 8018b88:	40010400 	.word	0x40010400
 8018b8c:	40000400 	.word	0x40000400
 8018b90:	40000800 	.word	0x40000800
 8018b94:	40000c00 	.word	0x40000c00
 8018b98:	40014000 	.word	0x40014000
 8018b9c:	40001800 	.word	0x40001800

08018ba0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8018ba0:	b580      	push	{r7, lr}
 8018ba2:	b082      	sub	sp, #8
 8018ba4:	af00      	add	r7, sp, #0
 8018ba6:	6078      	str	r0, [r7, #4]
 8018ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	2200      	movs	r2, #0
 8018bb0:	6839      	ldr	r1, [r7, #0]
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	f000 fe06 	bl	80197c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	4a2e      	ldr	r2, [pc, #184]	; (8018c78 <HAL_TIM_PWM_Stop+0xd8>)
 8018bbe:	4293      	cmp	r3, r2
 8018bc0:	d004      	beq.n	8018bcc <HAL_TIM_PWM_Stop+0x2c>
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	4a2d      	ldr	r2, [pc, #180]	; (8018c7c <HAL_TIM_PWM_Stop+0xdc>)
 8018bc8:	4293      	cmp	r3, r2
 8018bca:	d101      	bne.n	8018bd0 <HAL_TIM_PWM_Stop+0x30>
 8018bcc:	2301      	movs	r3, #1
 8018bce:	e000      	b.n	8018bd2 <HAL_TIM_PWM_Stop+0x32>
 8018bd0:	2300      	movs	r3, #0
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d017      	beq.n	8018c06 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	6a1a      	ldr	r2, [r3, #32]
 8018bdc:	f241 1311 	movw	r3, #4369	; 0x1111
 8018be0:	4013      	ands	r3, r2
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d10f      	bne.n	8018c06 <HAL_TIM_PWM_Stop+0x66>
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	681b      	ldr	r3, [r3, #0]
 8018bea:	6a1a      	ldr	r2, [r3, #32]
 8018bec:	f240 4344 	movw	r3, #1092	; 0x444
 8018bf0:	4013      	ands	r3, r2
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d107      	bne.n	8018c06 <HAL_TIM_PWM_Stop+0x66>
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018c04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	6a1a      	ldr	r2, [r3, #32]
 8018c0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8018c10:	4013      	ands	r3, r2
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d10f      	bne.n	8018c36 <HAL_TIM_PWM_Stop+0x96>
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	6a1a      	ldr	r2, [r3, #32]
 8018c1c:	f240 4344 	movw	r3, #1092	; 0x444
 8018c20:	4013      	ands	r3, r2
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d107      	bne.n	8018c36 <HAL_TIM_PWM_Stop+0x96>
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	681a      	ldr	r2, [r3, #0]
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	f022 0201 	bic.w	r2, r2, #1
 8018c34:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8018c36:	683b      	ldr	r3, [r7, #0]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d104      	bne.n	8018c46 <HAL_TIM_PWM_Stop+0xa6>
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	2201      	movs	r2, #1
 8018c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8018c44:	e013      	b.n	8018c6e <HAL_TIM_PWM_Stop+0xce>
 8018c46:	683b      	ldr	r3, [r7, #0]
 8018c48:	2b04      	cmp	r3, #4
 8018c4a:	d104      	bne.n	8018c56 <HAL_TIM_PWM_Stop+0xb6>
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	2201      	movs	r2, #1
 8018c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8018c54:	e00b      	b.n	8018c6e <HAL_TIM_PWM_Stop+0xce>
 8018c56:	683b      	ldr	r3, [r7, #0]
 8018c58:	2b08      	cmp	r3, #8
 8018c5a:	d104      	bne.n	8018c66 <HAL_TIM_PWM_Stop+0xc6>
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	2201      	movs	r2, #1
 8018c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8018c64:	e003      	b.n	8018c6e <HAL_TIM_PWM_Stop+0xce>
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	2201      	movs	r2, #1
 8018c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8018c6e:	2300      	movs	r3, #0
}
 8018c70:	4618      	mov	r0, r3
 8018c72:	3708      	adds	r7, #8
 8018c74:	46bd      	mov	sp, r7
 8018c76:	bd80      	pop	{r7, pc}
 8018c78:	40010000 	.word	0x40010000
 8018c7c:	40010400 	.word	0x40010400

08018c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8018c80:	b580      	push	{r7, lr}
 8018c82:	b084      	sub	sp, #16
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	68db      	ldr	r3, [r3, #12]
 8018c8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	691b      	ldr	r3, [r3, #16]
 8018c96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8018c98:	68bb      	ldr	r3, [r7, #8]
 8018c9a:	f003 0302 	and.w	r3, r3, #2
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d020      	beq.n	8018ce4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	f003 0302 	and.w	r3, r3, #2
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d01b      	beq.n	8018ce4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	f06f 0202 	mvn.w	r2, #2
 8018cb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	2201      	movs	r2, #1
 8018cba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	699b      	ldr	r3, [r3, #24]
 8018cc2:	f003 0303 	and.w	r3, r3, #3
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d003      	beq.n	8018cd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8018cca:	6878      	ldr	r0, [r7, #4]
 8018ccc:	f000 fa65 	bl	801919a <HAL_TIM_IC_CaptureCallback>
 8018cd0:	e005      	b.n	8018cde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8018cd2:	6878      	ldr	r0, [r7, #4]
 8018cd4:	f000 fa57 	bl	8019186 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018cd8:	6878      	ldr	r0, [r7, #4]
 8018cda:	f000 fa68 	bl	80191ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	2200      	movs	r2, #0
 8018ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8018ce4:	68bb      	ldr	r3, [r7, #8]
 8018ce6:	f003 0304 	and.w	r3, r3, #4
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d020      	beq.n	8018d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8018cee:	68fb      	ldr	r3, [r7, #12]
 8018cf0:	f003 0304 	and.w	r3, r3, #4
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d01b      	beq.n	8018d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	f06f 0204 	mvn.w	r2, #4
 8018d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	2202      	movs	r2, #2
 8018d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	699b      	ldr	r3, [r3, #24]
 8018d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d003      	beq.n	8018d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018d16:	6878      	ldr	r0, [r7, #4]
 8018d18:	f000 fa3f 	bl	801919a <HAL_TIM_IC_CaptureCallback>
 8018d1c:	e005      	b.n	8018d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018d1e:	6878      	ldr	r0, [r7, #4]
 8018d20:	f000 fa31 	bl	8019186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018d24:	6878      	ldr	r0, [r7, #4]
 8018d26:	f000 fa42 	bl	80191ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	2200      	movs	r2, #0
 8018d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8018d30:	68bb      	ldr	r3, [r7, #8]
 8018d32:	f003 0308 	and.w	r3, r3, #8
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d020      	beq.n	8018d7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8018d3a:	68fb      	ldr	r3, [r7, #12]
 8018d3c:	f003 0308 	and.w	r3, r3, #8
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d01b      	beq.n	8018d7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	f06f 0208 	mvn.w	r2, #8
 8018d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	2204      	movs	r2, #4
 8018d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	69db      	ldr	r3, [r3, #28]
 8018d5a:	f003 0303 	and.w	r3, r3, #3
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d003      	beq.n	8018d6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018d62:	6878      	ldr	r0, [r7, #4]
 8018d64:	f000 fa19 	bl	801919a <HAL_TIM_IC_CaptureCallback>
 8018d68:	e005      	b.n	8018d76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018d6a:	6878      	ldr	r0, [r7, #4]
 8018d6c:	f000 fa0b 	bl	8019186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018d70:	6878      	ldr	r0, [r7, #4]
 8018d72:	f000 fa1c 	bl	80191ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	2200      	movs	r2, #0
 8018d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8018d7c:	68bb      	ldr	r3, [r7, #8]
 8018d7e:	f003 0310 	and.w	r3, r3, #16
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d020      	beq.n	8018dc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	f003 0310 	and.w	r3, r3, #16
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d01b      	beq.n	8018dc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	f06f 0210 	mvn.w	r2, #16
 8018d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	2208      	movs	r2, #8
 8018d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	69db      	ldr	r3, [r3, #28]
 8018da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d003      	beq.n	8018db6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018dae:	6878      	ldr	r0, [r7, #4]
 8018db0:	f000 f9f3 	bl	801919a <HAL_TIM_IC_CaptureCallback>
 8018db4:	e005      	b.n	8018dc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018db6:	6878      	ldr	r0, [r7, #4]
 8018db8:	f000 f9e5 	bl	8019186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018dbc:	6878      	ldr	r0, [r7, #4]
 8018dbe:	f000 f9f6 	bl	80191ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	2200      	movs	r2, #0
 8018dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8018dc8:	68bb      	ldr	r3, [r7, #8]
 8018dca:	f003 0301 	and.w	r3, r3, #1
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d00c      	beq.n	8018dec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	f003 0301 	and.w	r3, r3, #1
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d007      	beq.n	8018dec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	f06f 0201 	mvn.w	r2, #1
 8018de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8018de6:	6878      	ldr	r0, [r7, #4]
 8018de8:	f000 f9c3 	bl	8019172 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8018dec:	68bb      	ldr	r3, [r7, #8]
 8018dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d00c      	beq.n	8018e10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8018df6:	68fb      	ldr	r3, [r7, #12]
 8018df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d007      	beq.n	8018e10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8018e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8018e0a:	6878      	ldr	r0, [r7, #4]
 8018e0c:	f000 fd86 	bl	801991c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8018e10:	68bb      	ldr	r3, [r7, #8]
 8018e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d00c      	beq.n	8018e34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d007      	beq.n	8018e34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8018e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8018e2e:	6878      	ldr	r0, [r7, #4]
 8018e30:	f000 f9c7 	bl	80191c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8018e34:	68bb      	ldr	r3, [r7, #8]
 8018e36:	f003 0320 	and.w	r3, r3, #32
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d00c      	beq.n	8018e58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8018e3e:	68fb      	ldr	r3, [r7, #12]
 8018e40:	f003 0320 	and.w	r3, r3, #32
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d007      	beq.n	8018e58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	f06f 0220 	mvn.w	r2, #32
 8018e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8018e52:	6878      	ldr	r0, [r7, #4]
 8018e54:	f000 fd58 	bl	8019908 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8018e58:	bf00      	nop
 8018e5a:	3710      	adds	r7, #16
 8018e5c:	46bd      	mov	sp, r7
 8018e5e:	bd80      	pop	{r7, pc}

08018e60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8018e60:	b580      	push	{r7, lr}
 8018e62:	b086      	sub	sp, #24
 8018e64:	af00      	add	r7, sp, #0
 8018e66:	60f8      	str	r0, [r7, #12]
 8018e68:	60b9      	str	r1, [r7, #8]
 8018e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018e6c:	2300      	movs	r3, #0
 8018e6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018e76:	2b01      	cmp	r3, #1
 8018e78:	d101      	bne.n	8018e7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8018e7a:	2302      	movs	r3, #2
 8018e7c:	e0ae      	b.n	8018fdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8018e7e:	68fb      	ldr	r3, [r7, #12]
 8018e80:	2201      	movs	r2, #1
 8018e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	2b0c      	cmp	r3, #12
 8018e8a:	f200 809f 	bhi.w	8018fcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8018e8e:	a201      	add	r2, pc, #4	; (adr r2, 8018e94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8018e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e94:	08018ec9 	.word	0x08018ec9
 8018e98:	08018fcd 	.word	0x08018fcd
 8018e9c:	08018fcd 	.word	0x08018fcd
 8018ea0:	08018fcd 	.word	0x08018fcd
 8018ea4:	08018f09 	.word	0x08018f09
 8018ea8:	08018fcd 	.word	0x08018fcd
 8018eac:	08018fcd 	.word	0x08018fcd
 8018eb0:	08018fcd 	.word	0x08018fcd
 8018eb4:	08018f4b 	.word	0x08018f4b
 8018eb8:	08018fcd 	.word	0x08018fcd
 8018ebc:	08018fcd 	.word	0x08018fcd
 8018ec0:	08018fcd 	.word	0x08018fcd
 8018ec4:	08018f8b 	.word	0x08018f8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	68b9      	ldr	r1, [r7, #8]
 8018ece:	4618      	mov	r0, r3
 8018ed0:	f000 fa2e 	bl	8019330 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8018ed4:	68fb      	ldr	r3, [r7, #12]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	699a      	ldr	r2, [r3, #24]
 8018eda:	68fb      	ldr	r3, [r7, #12]
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	f042 0208 	orr.w	r2, r2, #8
 8018ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8018ee4:	68fb      	ldr	r3, [r7, #12]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	699a      	ldr	r2, [r3, #24]
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	f022 0204 	bic.w	r2, r2, #4
 8018ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8018ef4:	68fb      	ldr	r3, [r7, #12]
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	6999      	ldr	r1, [r3, #24]
 8018efa:	68bb      	ldr	r3, [r7, #8]
 8018efc:	691a      	ldr	r2, [r3, #16]
 8018efe:	68fb      	ldr	r3, [r7, #12]
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	430a      	orrs	r2, r1
 8018f04:	619a      	str	r2, [r3, #24]
      break;
 8018f06:	e064      	b.n	8018fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	68b9      	ldr	r1, [r7, #8]
 8018f0e:	4618      	mov	r0, r3
 8018f10:	f000 fa7e 	bl	8019410 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	699a      	ldr	r2, [r3, #24]
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	699a      	ldr	r2, [r3, #24]
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	6999      	ldr	r1, [r3, #24]
 8018f3a:	68bb      	ldr	r3, [r7, #8]
 8018f3c:	691b      	ldr	r3, [r3, #16]
 8018f3e:	021a      	lsls	r2, r3, #8
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	430a      	orrs	r2, r1
 8018f46:	619a      	str	r2, [r3, #24]
      break;
 8018f48:	e043      	b.n	8018fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	68b9      	ldr	r1, [r7, #8]
 8018f50:	4618      	mov	r0, r3
 8018f52:	f000 fad3 	bl	80194fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	69da      	ldr	r2, [r3, #28]
 8018f5c:	68fb      	ldr	r3, [r7, #12]
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	f042 0208 	orr.w	r2, r2, #8
 8018f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	69da      	ldr	r2, [r3, #28]
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	f022 0204 	bic.w	r2, r2, #4
 8018f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	69d9      	ldr	r1, [r3, #28]
 8018f7c:	68bb      	ldr	r3, [r7, #8]
 8018f7e:	691a      	ldr	r2, [r3, #16]
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	430a      	orrs	r2, r1
 8018f86:	61da      	str	r2, [r3, #28]
      break;
 8018f88:	e023      	b.n	8018fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	68b9      	ldr	r1, [r7, #8]
 8018f90:	4618      	mov	r0, r3
 8018f92:	f000 fb27 	bl	80195e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	69da      	ldr	r2, [r3, #28]
 8018f9c:	68fb      	ldr	r3, [r7, #12]
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	69da      	ldr	r2, [r3, #28]
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	69d9      	ldr	r1, [r3, #28]
 8018fbc:	68bb      	ldr	r3, [r7, #8]
 8018fbe:	691b      	ldr	r3, [r3, #16]
 8018fc0:	021a      	lsls	r2, r3, #8
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	430a      	orrs	r2, r1
 8018fc8:	61da      	str	r2, [r3, #28]
      break;
 8018fca:	e002      	b.n	8018fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8018fcc:	2301      	movs	r3, #1
 8018fce:	75fb      	strb	r3, [r7, #23]
      break;
 8018fd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8018fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8018fdc:	4618      	mov	r0, r3
 8018fde:	3718      	adds	r7, #24
 8018fe0:	46bd      	mov	sp, r7
 8018fe2:	bd80      	pop	{r7, pc}

08018fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8018fe4:	b580      	push	{r7, lr}
 8018fe6:	b084      	sub	sp, #16
 8018fe8:	af00      	add	r7, sp, #0
 8018fea:	6078      	str	r0, [r7, #4]
 8018fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8018fee:	2300      	movs	r3, #0
 8018ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018ff8:	2b01      	cmp	r3, #1
 8018ffa:	d101      	bne.n	8019000 <HAL_TIM_ConfigClockSource+0x1c>
 8018ffc:	2302      	movs	r3, #2
 8018ffe:	e0b4      	b.n	801916a <HAL_TIM_ConfigClockSource+0x186>
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	2201      	movs	r2, #1
 8019004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	2202      	movs	r2, #2
 801900c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	689b      	ldr	r3, [r3, #8]
 8019016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8019018:	68bb      	ldr	r3, [r7, #8]
 801901a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801901e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8019020:	68bb      	ldr	r3, [r7, #8]
 8019022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8019026:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	68ba      	ldr	r2, [r7, #8]
 801902e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8019030:	683b      	ldr	r3, [r7, #0]
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8019038:	d03e      	beq.n	80190b8 <HAL_TIM_ConfigClockSource+0xd4>
 801903a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801903e:	f200 8087 	bhi.w	8019150 <HAL_TIM_ConfigClockSource+0x16c>
 8019042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019046:	f000 8086 	beq.w	8019156 <HAL_TIM_ConfigClockSource+0x172>
 801904a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801904e:	d87f      	bhi.n	8019150 <HAL_TIM_ConfigClockSource+0x16c>
 8019050:	2b70      	cmp	r3, #112	; 0x70
 8019052:	d01a      	beq.n	801908a <HAL_TIM_ConfigClockSource+0xa6>
 8019054:	2b70      	cmp	r3, #112	; 0x70
 8019056:	d87b      	bhi.n	8019150 <HAL_TIM_ConfigClockSource+0x16c>
 8019058:	2b60      	cmp	r3, #96	; 0x60
 801905a:	d050      	beq.n	80190fe <HAL_TIM_ConfigClockSource+0x11a>
 801905c:	2b60      	cmp	r3, #96	; 0x60
 801905e:	d877      	bhi.n	8019150 <HAL_TIM_ConfigClockSource+0x16c>
 8019060:	2b50      	cmp	r3, #80	; 0x50
 8019062:	d03c      	beq.n	80190de <HAL_TIM_ConfigClockSource+0xfa>
 8019064:	2b50      	cmp	r3, #80	; 0x50
 8019066:	d873      	bhi.n	8019150 <HAL_TIM_ConfigClockSource+0x16c>
 8019068:	2b40      	cmp	r3, #64	; 0x40
 801906a:	d058      	beq.n	801911e <HAL_TIM_ConfigClockSource+0x13a>
 801906c:	2b40      	cmp	r3, #64	; 0x40
 801906e:	d86f      	bhi.n	8019150 <HAL_TIM_ConfigClockSource+0x16c>
 8019070:	2b30      	cmp	r3, #48	; 0x30
 8019072:	d064      	beq.n	801913e <HAL_TIM_ConfigClockSource+0x15a>
 8019074:	2b30      	cmp	r3, #48	; 0x30
 8019076:	d86b      	bhi.n	8019150 <HAL_TIM_ConfigClockSource+0x16c>
 8019078:	2b20      	cmp	r3, #32
 801907a:	d060      	beq.n	801913e <HAL_TIM_ConfigClockSource+0x15a>
 801907c:	2b20      	cmp	r3, #32
 801907e:	d867      	bhi.n	8019150 <HAL_TIM_ConfigClockSource+0x16c>
 8019080:	2b00      	cmp	r3, #0
 8019082:	d05c      	beq.n	801913e <HAL_TIM_ConfigClockSource+0x15a>
 8019084:	2b10      	cmp	r3, #16
 8019086:	d05a      	beq.n	801913e <HAL_TIM_ConfigClockSource+0x15a>
 8019088:	e062      	b.n	8019150 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801908e:	683b      	ldr	r3, [r7, #0]
 8019090:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8019092:	683b      	ldr	r3, [r7, #0]
 8019094:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8019096:	683b      	ldr	r3, [r7, #0]
 8019098:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801909a:	f000 fb73 	bl	8019784 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	689b      	ldr	r3, [r3, #8]
 80190a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80190a6:	68bb      	ldr	r3, [r7, #8]
 80190a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80190ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	68ba      	ldr	r2, [r7, #8]
 80190b4:	609a      	str	r2, [r3, #8]
      break;
 80190b6:	e04f      	b.n	8019158 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80190bc:	683b      	ldr	r3, [r7, #0]
 80190be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80190c0:	683b      	ldr	r3, [r7, #0]
 80190c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80190c4:	683b      	ldr	r3, [r7, #0]
 80190c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80190c8:	f000 fb5c 	bl	8019784 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	689a      	ldr	r2, [r3, #8]
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80190da:	609a      	str	r2, [r3, #8]
      break;
 80190dc:	e03c      	b.n	8019158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80190e2:	683b      	ldr	r3, [r7, #0]
 80190e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80190e6:	683b      	ldr	r3, [r7, #0]
 80190e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80190ea:	461a      	mov	r2, r3
 80190ec:	f000 fad0 	bl	8019690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	2150      	movs	r1, #80	; 0x50
 80190f6:	4618      	mov	r0, r3
 80190f8:	f000 fb29 	bl	801974e <TIM_ITRx_SetConfig>
      break;
 80190fc:	e02c      	b.n	8019158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8019102:	683b      	ldr	r3, [r7, #0]
 8019104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8019106:	683b      	ldr	r3, [r7, #0]
 8019108:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801910a:	461a      	mov	r2, r3
 801910c:	f000 faef 	bl	80196ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	2160      	movs	r1, #96	; 0x60
 8019116:	4618      	mov	r0, r3
 8019118:	f000 fb19 	bl	801974e <TIM_ITRx_SetConfig>
      break;
 801911c:	e01c      	b.n	8019158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8019122:	683b      	ldr	r3, [r7, #0]
 8019124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8019126:	683b      	ldr	r3, [r7, #0]
 8019128:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801912a:	461a      	mov	r2, r3
 801912c:	f000 fab0 	bl	8019690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	2140      	movs	r1, #64	; 0x40
 8019136:	4618      	mov	r0, r3
 8019138:	f000 fb09 	bl	801974e <TIM_ITRx_SetConfig>
      break;
 801913c:	e00c      	b.n	8019158 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	681a      	ldr	r2, [r3, #0]
 8019142:	683b      	ldr	r3, [r7, #0]
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	4619      	mov	r1, r3
 8019148:	4610      	mov	r0, r2
 801914a:	f000 fb00 	bl	801974e <TIM_ITRx_SetConfig>
      break;
 801914e:	e003      	b.n	8019158 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8019150:	2301      	movs	r3, #1
 8019152:	73fb      	strb	r3, [r7, #15]
      break;
 8019154:	e000      	b.n	8019158 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8019156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	2201      	movs	r2, #1
 801915c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	2200      	movs	r2, #0
 8019164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8019168:	7bfb      	ldrb	r3, [r7, #15]
}
 801916a:	4618      	mov	r0, r3
 801916c:	3710      	adds	r7, #16
 801916e:	46bd      	mov	sp, r7
 8019170:	bd80      	pop	{r7, pc}

08019172 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8019172:	b480      	push	{r7}
 8019174:	b083      	sub	sp, #12
 8019176:	af00      	add	r7, sp, #0
 8019178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801917a:	bf00      	nop
 801917c:	370c      	adds	r7, #12
 801917e:	46bd      	mov	sp, r7
 8019180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019184:	4770      	bx	lr

08019186 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8019186:	b480      	push	{r7}
 8019188:	b083      	sub	sp, #12
 801918a:	af00      	add	r7, sp, #0
 801918c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801918e:	bf00      	nop
 8019190:	370c      	adds	r7, #12
 8019192:	46bd      	mov	sp, r7
 8019194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019198:	4770      	bx	lr

0801919a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801919a:	b480      	push	{r7}
 801919c:	b083      	sub	sp, #12
 801919e:	af00      	add	r7, sp, #0
 80191a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80191a2:	bf00      	nop
 80191a4:	370c      	adds	r7, #12
 80191a6:	46bd      	mov	sp, r7
 80191a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ac:	4770      	bx	lr

080191ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80191ae:	b480      	push	{r7}
 80191b0:	b083      	sub	sp, #12
 80191b2:	af00      	add	r7, sp, #0
 80191b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80191b6:	bf00      	nop
 80191b8:	370c      	adds	r7, #12
 80191ba:	46bd      	mov	sp, r7
 80191bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191c0:	4770      	bx	lr

080191c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80191c2:	b480      	push	{r7}
 80191c4:	b083      	sub	sp, #12
 80191c6:	af00      	add	r7, sp, #0
 80191c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80191ca:	bf00      	nop
 80191cc:	370c      	adds	r7, #12
 80191ce:	46bd      	mov	sp, r7
 80191d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191d4:	4770      	bx	lr
	...

080191d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80191d8:	b480      	push	{r7}
 80191da:	b085      	sub	sp, #20
 80191dc:	af00      	add	r7, sp, #0
 80191de:	6078      	str	r0, [r7, #4]
 80191e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	4a46      	ldr	r2, [pc, #280]	; (8019304 <TIM_Base_SetConfig+0x12c>)
 80191ec:	4293      	cmp	r3, r2
 80191ee:	d013      	beq.n	8019218 <TIM_Base_SetConfig+0x40>
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80191f6:	d00f      	beq.n	8019218 <TIM_Base_SetConfig+0x40>
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	4a43      	ldr	r2, [pc, #268]	; (8019308 <TIM_Base_SetConfig+0x130>)
 80191fc:	4293      	cmp	r3, r2
 80191fe:	d00b      	beq.n	8019218 <TIM_Base_SetConfig+0x40>
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	4a42      	ldr	r2, [pc, #264]	; (801930c <TIM_Base_SetConfig+0x134>)
 8019204:	4293      	cmp	r3, r2
 8019206:	d007      	beq.n	8019218 <TIM_Base_SetConfig+0x40>
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	4a41      	ldr	r2, [pc, #260]	; (8019310 <TIM_Base_SetConfig+0x138>)
 801920c:	4293      	cmp	r3, r2
 801920e:	d003      	beq.n	8019218 <TIM_Base_SetConfig+0x40>
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	4a40      	ldr	r2, [pc, #256]	; (8019314 <TIM_Base_SetConfig+0x13c>)
 8019214:	4293      	cmp	r3, r2
 8019216:	d108      	bne.n	801922a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8019218:	68fb      	ldr	r3, [r7, #12]
 801921a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801921e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8019220:	683b      	ldr	r3, [r7, #0]
 8019222:	685b      	ldr	r3, [r3, #4]
 8019224:	68fa      	ldr	r2, [r7, #12]
 8019226:	4313      	orrs	r3, r2
 8019228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	4a35      	ldr	r2, [pc, #212]	; (8019304 <TIM_Base_SetConfig+0x12c>)
 801922e:	4293      	cmp	r3, r2
 8019230:	d02b      	beq.n	801928a <TIM_Base_SetConfig+0xb2>
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019238:	d027      	beq.n	801928a <TIM_Base_SetConfig+0xb2>
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	4a32      	ldr	r2, [pc, #200]	; (8019308 <TIM_Base_SetConfig+0x130>)
 801923e:	4293      	cmp	r3, r2
 8019240:	d023      	beq.n	801928a <TIM_Base_SetConfig+0xb2>
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	4a31      	ldr	r2, [pc, #196]	; (801930c <TIM_Base_SetConfig+0x134>)
 8019246:	4293      	cmp	r3, r2
 8019248:	d01f      	beq.n	801928a <TIM_Base_SetConfig+0xb2>
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	4a30      	ldr	r2, [pc, #192]	; (8019310 <TIM_Base_SetConfig+0x138>)
 801924e:	4293      	cmp	r3, r2
 8019250:	d01b      	beq.n	801928a <TIM_Base_SetConfig+0xb2>
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	4a2f      	ldr	r2, [pc, #188]	; (8019314 <TIM_Base_SetConfig+0x13c>)
 8019256:	4293      	cmp	r3, r2
 8019258:	d017      	beq.n	801928a <TIM_Base_SetConfig+0xb2>
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	4a2e      	ldr	r2, [pc, #184]	; (8019318 <TIM_Base_SetConfig+0x140>)
 801925e:	4293      	cmp	r3, r2
 8019260:	d013      	beq.n	801928a <TIM_Base_SetConfig+0xb2>
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	4a2d      	ldr	r2, [pc, #180]	; (801931c <TIM_Base_SetConfig+0x144>)
 8019266:	4293      	cmp	r3, r2
 8019268:	d00f      	beq.n	801928a <TIM_Base_SetConfig+0xb2>
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	4a2c      	ldr	r2, [pc, #176]	; (8019320 <TIM_Base_SetConfig+0x148>)
 801926e:	4293      	cmp	r3, r2
 8019270:	d00b      	beq.n	801928a <TIM_Base_SetConfig+0xb2>
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	4a2b      	ldr	r2, [pc, #172]	; (8019324 <TIM_Base_SetConfig+0x14c>)
 8019276:	4293      	cmp	r3, r2
 8019278:	d007      	beq.n	801928a <TIM_Base_SetConfig+0xb2>
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	4a2a      	ldr	r2, [pc, #168]	; (8019328 <TIM_Base_SetConfig+0x150>)
 801927e:	4293      	cmp	r3, r2
 8019280:	d003      	beq.n	801928a <TIM_Base_SetConfig+0xb2>
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	4a29      	ldr	r2, [pc, #164]	; (801932c <TIM_Base_SetConfig+0x154>)
 8019286:	4293      	cmp	r3, r2
 8019288:	d108      	bne.n	801929c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801928a:	68fb      	ldr	r3, [r7, #12]
 801928c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8019292:	683b      	ldr	r3, [r7, #0]
 8019294:	68db      	ldr	r3, [r3, #12]
 8019296:	68fa      	ldr	r2, [r7, #12]
 8019298:	4313      	orrs	r3, r2
 801929a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801929c:	68fb      	ldr	r3, [r7, #12]
 801929e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80192a2:	683b      	ldr	r3, [r7, #0]
 80192a4:	695b      	ldr	r3, [r3, #20]
 80192a6:	4313      	orrs	r3, r2
 80192a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	68fa      	ldr	r2, [r7, #12]
 80192ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80192b0:	683b      	ldr	r3, [r7, #0]
 80192b2:	689a      	ldr	r2, [r3, #8]
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80192b8:	683b      	ldr	r3, [r7, #0]
 80192ba:	681a      	ldr	r2, [r3, #0]
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	4a10      	ldr	r2, [pc, #64]	; (8019304 <TIM_Base_SetConfig+0x12c>)
 80192c4:	4293      	cmp	r3, r2
 80192c6:	d003      	beq.n	80192d0 <TIM_Base_SetConfig+0xf8>
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	4a12      	ldr	r2, [pc, #72]	; (8019314 <TIM_Base_SetConfig+0x13c>)
 80192cc:	4293      	cmp	r3, r2
 80192ce:	d103      	bne.n	80192d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80192d0:	683b      	ldr	r3, [r7, #0]
 80192d2:	691a      	ldr	r2, [r3, #16]
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	2201      	movs	r2, #1
 80192dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	691b      	ldr	r3, [r3, #16]
 80192e2:	f003 0301 	and.w	r3, r3, #1
 80192e6:	2b01      	cmp	r3, #1
 80192e8:	d105      	bne.n	80192f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	691b      	ldr	r3, [r3, #16]
 80192ee:	f023 0201 	bic.w	r2, r3, #1
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	611a      	str	r2, [r3, #16]
  }
}
 80192f6:	bf00      	nop
 80192f8:	3714      	adds	r7, #20
 80192fa:	46bd      	mov	sp, r7
 80192fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019300:	4770      	bx	lr
 8019302:	bf00      	nop
 8019304:	40010000 	.word	0x40010000
 8019308:	40000400 	.word	0x40000400
 801930c:	40000800 	.word	0x40000800
 8019310:	40000c00 	.word	0x40000c00
 8019314:	40010400 	.word	0x40010400
 8019318:	40014000 	.word	0x40014000
 801931c:	40014400 	.word	0x40014400
 8019320:	40014800 	.word	0x40014800
 8019324:	40001800 	.word	0x40001800
 8019328:	40001c00 	.word	0x40001c00
 801932c:	40002000 	.word	0x40002000

08019330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019330:	b480      	push	{r7}
 8019332:	b087      	sub	sp, #28
 8019334:	af00      	add	r7, sp, #0
 8019336:	6078      	str	r0, [r7, #4]
 8019338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	6a1b      	ldr	r3, [r3, #32]
 801933e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	6a1b      	ldr	r3, [r3, #32]
 8019344:	f023 0201 	bic.w	r2, r3, #1
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	685b      	ldr	r3, [r3, #4]
 8019350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	699b      	ldr	r3, [r3, #24]
 8019356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801935e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8019360:	68fb      	ldr	r3, [r7, #12]
 8019362:	f023 0303 	bic.w	r3, r3, #3
 8019366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019368:	683b      	ldr	r3, [r7, #0]
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	68fa      	ldr	r2, [r7, #12]
 801936e:	4313      	orrs	r3, r2
 8019370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8019372:	697b      	ldr	r3, [r7, #20]
 8019374:	f023 0302 	bic.w	r3, r3, #2
 8019378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801937a:	683b      	ldr	r3, [r7, #0]
 801937c:	689b      	ldr	r3, [r3, #8]
 801937e:	697a      	ldr	r2, [r7, #20]
 8019380:	4313      	orrs	r3, r2
 8019382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	4a20      	ldr	r2, [pc, #128]	; (8019408 <TIM_OC1_SetConfig+0xd8>)
 8019388:	4293      	cmp	r3, r2
 801938a:	d003      	beq.n	8019394 <TIM_OC1_SetConfig+0x64>
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	4a1f      	ldr	r2, [pc, #124]	; (801940c <TIM_OC1_SetConfig+0xdc>)
 8019390:	4293      	cmp	r3, r2
 8019392:	d10c      	bne.n	80193ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8019394:	697b      	ldr	r3, [r7, #20]
 8019396:	f023 0308 	bic.w	r3, r3, #8
 801939a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801939c:	683b      	ldr	r3, [r7, #0]
 801939e:	68db      	ldr	r3, [r3, #12]
 80193a0:	697a      	ldr	r2, [r7, #20]
 80193a2:	4313      	orrs	r3, r2
 80193a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80193a6:	697b      	ldr	r3, [r7, #20]
 80193a8:	f023 0304 	bic.w	r3, r3, #4
 80193ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	4a15      	ldr	r2, [pc, #84]	; (8019408 <TIM_OC1_SetConfig+0xd8>)
 80193b2:	4293      	cmp	r3, r2
 80193b4:	d003      	beq.n	80193be <TIM_OC1_SetConfig+0x8e>
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	4a14      	ldr	r2, [pc, #80]	; (801940c <TIM_OC1_SetConfig+0xdc>)
 80193ba:	4293      	cmp	r3, r2
 80193bc:	d111      	bne.n	80193e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80193be:	693b      	ldr	r3, [r7, #16]
 80193c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80193c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80193c6:	693b      	ldr	r3, [r7, #16]
 80193c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80193cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80193ce:	683b      	ldr	r3, [r7, #0]
 80193d0:	695b      	ldr	r3, [r3, #20]
 80193d2:	693a      	ldr	r2, [r7, #16]
 80193d4:	4313      	orrs	r3, r2
 80193d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80193d8:	683b      	ldr	r3, [r7, #0]
 80193da:	699b      	ldr	r3, [r3, #24]
 80193dc:	693a      	ldr	r2, [r7, #16]
 80193de:	4313      	orrs	r3, r2
 80193e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	693a      	ldr	r2, [r7, #16]
 80193e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	68fa      	ldr	r2, [r7, #12]
 80193ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80193ee:	683b      	ldr	r3, [r7, #0]
 80193f0:	685a      	ldr	r2, [r3, #4]
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	697a      	ldr	r2, [r7, #20]
 80193fa:	621a      	str	r2, [r3, #32]
}
 80193fc:	bf00      	nop
 80193fe:	371c      	adds	r7, #28
 8019400:	46bd      	mov	sp, r7
 8019402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019406:	4770      	bx	lr
 8019408:	40010000 	.word	0x40010000
 801940c:	40010400 	.word	0x40010400

08019410 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019410:	b480      	push	{r7}
 8019412:	b087      	sub	sp, #28
 8019414:	af00      	add	r7, sp, #0
 8019416:	6078      	str	r0, [r7, #4]
 8019418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	6a1b      	ldr	r3, [r3, #32]
 801941e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	6a1b      	ldr	r3, [r3, #32]
 8019424:	f023 0210 	bic.w	r2, r3, #16
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	685b      	ldr	r3, [r3, #4]
 8019430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	699b      	ldr	r3, [r3, #24]
 8019436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801943e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8019448:	683b      	ldr	r3, [r7, #0]
 801944a:	681b      	ldr	r3, [r3, #0]
 801944c:	021b      	lsls	r3, r3, #8
 801944e:	68fa      	ldr	r2, [r7, #12]
 8019450:	4313      	orrs	r3, r2
 8019452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8019454:	697b      	ldr	r3, [r7, #20]
 8019456:	f023 0320 	bic.w	r3, r3, #32
 801945a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801945c:	683b      	ldr	r3, [r7, #0]
 801945e:	689b      	ldr	r3, [r3, #8]
 8019460:	011b      	lsls	r3, r3, #4
 8019462:	697a      	ldr	r2, [r7, #20]
 8019464:	4313      	orrs	r3, r2
 8019466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	4a22      	ldr	r2, [pc, #136]	; (80194f4 <TIM_OC2_SetConfig+0xe4>)
 801946c:	4293      	cmp	r3, r2
 801946e:	d003      	beq.n	8019478 <TIM_OC2_SetConfig+0x68>
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	4a21      	ldr	r2, [pc, #132]	; (80194f8 <TIM_OC2_SetConfig+0xe8>)
 8019474:	4293      	cmp	r3, r2
 8019476:	d10d      	bne.n	8019494 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8019478:	697b      	ldr	r3, [r7, #20]
 801947a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801947e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8019480:	683b      	ldr	r3, [r7, #0]
 8019482:	68db      	ldr	r3, [r3, #12]
 8019484:	011b      	lsls	r3, r3, #4
 8019486:	697a      	ldr	r2, [r7, #20]
 8019488:	4313      	orrs	r3, r2
 801948a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801948c:	697b      	ldr	r3, [r7, #20]
 801948e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019492:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	4a17      	ldr	r2, [pc, #92]	; (80194f4 <TIM_OC2_SetConfig+0xe4>)
 8019498:	4293      	cmp	r3, r2
 801949a:	d003      	beq.n	80194a4 <TIM_OC2_SetConfig+0x94>
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	4a16      	ldr	r2, [pc, #88]	; (80194f8 <TIM_OC2_SetConfig+0xe8>)
 80194a0:	4293      	cmp	r3, r2
 80194a2:	d113      	bne.n	80194cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80194a4:	693b      	ldr	r3, [r7, #16]
 80194a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80194aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80194ac:	693b      	ldr	r3, [r7, #16]
 80194ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80194b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80194b4:	683b      	ldr	r3, [r7, #0]
 80194b6:	695b      	ldr	r3, [r3, #20]
 80194b8:	009b      	lsls	r3, r3, #2
 80194ba:	693a      	ldr	r2, [r7, #16]
 80194bc:	4313      	orrs	r3, r2
 80194be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80194c0:	683b      	ldr	r3, [r7, #0]
 80194c2:	699b      	ldr	r3, [r3, #24]
 80194c4:	009b      	lsls	r3, r3, #2
 80194c6:	693a      	ldr	r2, [r7, #16]
 80194c8:	4313      	orrs	r3, r2
 80194ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	693a      	ldr	r2, [r7, #16]
 80194d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	68fa      	ldr	r2, [r7, #12]
 80194d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80194d8:	683b      	ldr	r3, [r7, #0]
 80194da:	685a      	ldr	r2, [r3, #4]
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	697a      	ldr	r2, [r7, #20]
 80194e4:	621a      	str	r2, [r3, #32]
}
 80194e6:	bf00      	nop
 80194e8:	371c      	adds	r7, #28
 80194ea:	46bd      	mov	sp, r7
 80194ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194f0:	4770      	bx	lr
 80194f2:	bf00      	nop
 80194f4:	40010000 	.word	0x40010000
 80194f8:	40010400 	.word	0x40010400

080194fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80194fc:	b480      	push	{r7}
 80194fe:	b087      	sub	sp, #28
 8019500:	af00      	add	r7, sp, #0
 8019502:	6078      	str	r0, [r7, #4]
 8019504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	6a1b      	ldr	r3, [r3, #32]
 801950a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	6a1b      	ldr	r3, [r3, #32]
 8019510:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	685b      	ldr	r3, [r3, #4]
 801951c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	69db      	ldr	r3, [r3, #28]
 8019522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801952a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801952c:	68fb      	ldr	r3, [r7, #12]
 801952e:	f023 0303 	bic.w	r3, r3, #3
 8019532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019534:	683b      	ldr	r3, [r7, #0]
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	68fa      	ldr	r2, [r7, #12]
 801953a:	4313      	orrs	r3, r2
 801953c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801953e:	697b      	ldr	r3, [r7, #20]
 8019540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8019544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8019546:	683b      	ldr	r3, [r7, #0]
 8019548:	689b      	ldr	r3, [r3, #8]
 801954a:	021b      	lsls	r3, r3, #8
 801954c:	697a      	ldr	r2, [r7, #20]
 801954e:	4313      	orrs	r3, r2
 8019550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	4a21      	ldr	r2, [pc, #132]	; (80195dc <TIM_OC3_SetConfig+0xe0>)
 8019556:	4293      	cmp	r3, r2
 8019558:	d003      	beq.n	8019562 <TIM_OC3_SetConfig+0x66>
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	4a20      	ldr	r2, [pc, #128]	; (80195e0 <TIM_OC3_SetConfig+0xe4>)
 801955e:	4293      	cmp	r3, r2
 8019560:	d10d      	bne.n	801957e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8019562:	697b      	ldr	r3, [r7, #20]
 8019564:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019568:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801956a:	683b      	ldr	r3, [r7, #0]
 801956c:	68db      	ldr	r3, [r3, #12]
 801956e:	021b      	lsls	r3, r3, #8
 8019570:	697a      	ldr	r2, [r7, #20]
 8019572:	4313      	orrs	r3, r2
 8019574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8019576:	697b      	ldr	r3, [r7, #20]
 8019578:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801957c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	4a16      	ldr	r2, [pc, #88]	; (80195dc <TIM_OC3_SetConfig+0xe0>)
 8019582:	4293      	cmp	r3, r2
 8019584:	d003      	beq.n	801958e <TIM_OC3_SetConfig+0x92>
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	4a15      	ldr	r2, [pc, #84]	; (80195e0 <TIM_OC3_SetConfig+0xe4>)
 801958a:	4293      	cmp	r3, r2
 801958c:	d113      	bne.n	80195b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801958e:	693b      	ldr	r3, [r7, #16]
 8019590:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8019596:	693b      	ldr	r3, [r7, #16]
 8019598:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801959c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801959e:	683b      	ldr	r3, [r7, #0]
 80195a0:	695b      	ldr	r3, [r3, #20]
 80195a2:	011b      	lsls	r3, r3, #4
 80195a4:	693a      	ldr	r2, [r7, #16]
 80195a6:	4313      	orrs	r3, r2
 80195a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80195aa:	683b      	ldr	r3, [r7, #0]
 80195ac:	699b      	ldr	r3, [r3, #24]
 80195ae:	011b      	lsls	r3, r3, #4
 80195b0:	693a      	ldr	r2, [r7, #16]
 80195b2:	4313      	orrs	r3, r2
 80195b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	693a      	ldr	r2, [r7, #16]
 80195ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	68fa      	ldr	r2, [r7, #12]
 80195c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80195c2:	683b      	ldr	r3, [r7, #0]
 80195c4:	685a      	ldr	r2, [r3, #4]
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	697a      	ldr	r2, [r7, #20]
 80195ce:	621a      	str	r2, [r3, #32]
}
 80195d0:	bf00      	nop
 80195d2:	371c      	adds	r7, #28
 80195d4:	46bd      	mov	sp, r7
 80195d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195da:	4770      	bx	lr
 80195dc:	40010000 	.word	0x40010000
 80195e0:	40010400 	.word	0x40010400

080195e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80195e4:	b480      	push	{r7}
 80195e6:	b087      	sub	sp, #28
 80195e8:	af00      	add	r7, sp, #0
 80195ea:	6078      	str	r0, [r7, #4]
 80195ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	6a1b      	ldr	r3, [r3, #32]
 80195f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	6a1b      	ldr	r3, [r3, #32]
 80195f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	685b      	ldr	r3, [r3, #4]
 8019604:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	69db      	ldr	r3, [r3, #28]
 801960a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8019612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801961a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801961c:	683b      	ldr	r3, [r7, #0]
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	021b      	lsls	r3, r3, #8
 8019622:	68fa      	ldr	r2, [r7, #12]
 8019624:	4313      	orrs	r3, r2
 8019626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8019628:	693b      	ldr	r3, [r7, #16]
 801962a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801962e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8019630:	683b      	ldr	r3, [r7, #0]
 8019632:	689b      	ldr	r3, [r3, #8]
 8019634:	031b      	lsls	r3, r3, #12
 8019636:	693a      	ldr	r2, [r7, #16]
 8019638:	4313      	orrs	r3, r2
 801963a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	4a12      	ldr	r2, [pc, #72]	; (8019688 <TIM_OC4_SetConfig+0xa4>)
 8019640:	4293      	cmp	r3, r2
 8019642:	d003      	beq.n	801964c <TIM_OC4_SetConfig+0x68>
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	4a11      	ldr	r2, [pc, #68]	; (801968c <TIM_OC4_SetConfig+0xa8>)
 8019648:	4293      	cmp	r3, r2
 801964a:	d109      	bne.n	8019660 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801964c:	697b      	ldr	r3, [r7, #20]
 801964e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8019652:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8019654:	683b      	ldr	r3, [r7, #0]
 8019656:	695b      	ldr	r3, [r3, #20]
 8019658:	019b      	lsls	r3, r3, #6
 801965a:	697a      	ldr	r2, [r7, #20]
 801965c:	4313      	orrs	r3, r2
 801965e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	697a      	ldr	r2, [r7, #20]
 8019664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	68fa      	ldr	r2, [r7, #12]
 801966a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801966c:	683b      	ldr	r3, [r7, #0]
 801966e:	685a      	ldr	r2, [r3, #4]
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	693a      	ldr	r2, [r7, #16]
 8019678:	621a      	str	r2, [r3, #32]
}
 801967a:	bf00      	nop
 801967c:	371c      	adds	r7, #28
 801967e:	46bd      	mov	sp, r7
 8019680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019684:	4770      	bx	lr
 8019686:	bf00      	nop
 8019688:	40010000 	.word	0x40010000
 801968c:	40010400 	.word	0x40010400

08019690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8019690:	b480      	push	{r7}
 8019692:	b087      	sub	sp, #28
 8019694:	af00      	add	r7, sp, #0
 8019696:	60f8      	str	r0, [r7, #12]
 8019698:	60b9      	str	r1, [r7, #8]
 801969a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	6a1b      	ldr	r3, [r3, #32]
 80196a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80196a2:	68fb      	ldr	r3, [r7, #12]
 80196a4:	6a1b      	ldr	r3, [r3, #32]
 80196a6:	f023 0201 	bic.w	r2, r3, #1
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	699b      	ldr	r3, [r3, #24]
 80196b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80196b4:	693b      	ldr	r3, [r7, #16]
 80196b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80196ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	011b      	lsls	r3, r3, #4
 80196c0:	693a      	ldr	r2, [r7, #16]
 80196c2:	4313      	orrs	r3, r2
 80196c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80196c6:	697b      	ldr	r3, [r7, #20]
 80196c8:	f023 030a 	bic.w	r3, r3, #10
 80196cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80196ce:	697a      	ldr	r2, [r7, #20]
 80196d0:	68bb      	ldr	r3, [r7, #8]
 80196d2:	4313      	orrs	r3, r2
 80196d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	693a      	ldr	r2, [r7, #16]
 80196da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	697a      	ldr	r2, [r7, #20]
 80196e0:	621a      	str	r2, [r3, #32]
}
 80196e2:	bf00      	nop
 80196e4:	371c      	adds	r7, #28
 80196e6:	46bd      	mov	sp, r7
 80196e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ec:	4770      	bx	lr

080196ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80196ee:	b480      	push	{r7}
 80196f0:	b087      	sub	sp, #28
 80196f2:	af00      	add	r7, sp, #0
 80196f4:	60f8      	str	r0, [r7, #12]
 80196f6:	60b9      	str	r1, [r7, #8]
 80196f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	6a1b      	ldr	r3, [r3, #32]
 80196fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8019700:	68fb      	ldr	r3, [r7, #12]
 8019702:	6a1b      	ldr	r3, [r3, #32]
 8019704:	f023 0210 	bic.w	r2, r3, #16
 8019708:	68fb      	ldr	r3, [r7, #12]
 801970a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	699b      	ldr	r3, [r3, #24]
 8019710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8019712:	693b      	ldr	r3, [r7, #16]
 8019714:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8019718:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	031b      	lsls	r3, r3, #12
 801971e:	693a      	ldr	r2, [r7, #16]
 8019720:	4313      	orrs	r3, r2
 8019722:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8019724:	697b      	ldr	r3, [r7, #20]
 8019726:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801972a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801972c:	68bb      	ldr	r3, [r7, #8]
 801972e:	011b      	lsls	r3, r3, #4
 8019730:	697a      	ldr	r2, [r7, #20]
 8019732:	4313      	orrs	r3, r2
 8019734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8019736:	68fb      	ldr	r3, [r7, #12]
 8019738:	693a      	ldr	r2, [r7, #16]
 801973a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	697a      	ldr	r2, [r7, #20]
 8019740:	621a      	str	r2, [r3, #32]
}
 8019742:	bf00      	nop
 8019744:	371c      	adds	r7, #28
 8019746:	46bd      	mov	sp, r7
 8019748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801974c:	4770      	bx	lr

0801974e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801974e:	b480      	push	{r7}
 8019750:	b085      	sub	sp, #20
 8019752:	af00      	add	r7, sp, #0
 8019754:	6078      	str	r0, [r7, #4]
 8019756:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	689b      	ldr	r3, [r3, #8]
 801975c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801975e:	68fb      	ldr	r3, [r7, #12]
 8019760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019764:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8019766:	683a      	ldr	r2, [r7, #0]
 8019768:	68fb      	ldr	r3, [r7, #12]
 801976a:	4313      	orrs	r3, r2
 801976c:	f043 0307 	orr.w	r3, r3, #7
 8019770:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	68fa      	ldr	r2, [r7, #12]
 8019776:	609a      	str	r2, [r3, #8]
}
 8019778:	bf00      	nop
 801977a:	3714      	adds	r7, #20
 801977c:	46bd      	mov	sp, r7
 801977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019782:	4770      	bx	lr

08019784 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8019784:	b480      	push	{r7}
 8019786:	b087      	sub	sp, #28
 8019788:	af00      	add	r7, sp, #0
 801978a:	60f8      	str	r0, [r7, #12]
 801978c:	60b9      	str	r1, [r7, #8]
 801978e:	607a      	str	r2, [r7, #4]
 8019790:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8019792:	68fb      	ldr	r3, [r7, #12]
 8019794:	689b      	ldr	r3, [r3, #8]
 8019796:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8019798:	697b      	ldr	r3, [r7, #20]
 801979a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801979e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80197a0:	683b      	ldr	r3, [r7, #0]
 80197a2:	021a      	lsls	r2, r3, #8
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	431a      	orrs	r2, r3
 80197a8:	68bb      	ldr	r3, [r7, #8]
 80197aa:	4313      	orrs	r3, r2
 80197ac:	697a      	ldr	r2, [r7, #20]
 80197ae:	4313      	orrs	r3, r2
 80197b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80197b2:	68fb      	ldr	r3, [r7, #12]
 80197b4:	697a      	ldr	r2, [r7, #20]
 80197b6:	609a      	str	r2, [r3, #8]
}
 80197b8:	bf00      	nop
 80197ba:	371c      	adds	r7, #28
 80197bc:	46bd      	mov	sp, r7
 80197be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197c2:	4770      	bx	lr

080197c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80197c4:	b480      	push	{r7}
 80197c6:	b087      	sub	sp, #28
 80197c8:	af00      	add	r7, sp, #0
 80197ca:	60f8      	str	r0, [r7, #12]
 80197cc:	60b9      	str	r1, [r7, #8]
 80197ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80197d0:	68bb      	ldr	r3, [r7, #8]
 80197d2:	f003 031f 	and.w	r3, r3, #31
 80197d6:	2201      	movs	r2, #1
 80197d8:	fa02 f303 	lsl.w	r3, r2, r3
 80197dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80197de:	68fb      	ldr	r3, [r7, #12]
 80197e0:	6a1a      	ldr	r2, [r3, #32]
 80197e2:	697b      	ldr	r3, [r7, #20]
 80197e4:	43db      	mvns	r3, r3
 80197e6:	401a      	ands	r2, r3
 80197e8:	68fb      	ldr	r3, [r7, #12]
 80197ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80197ec:	68fb      	ldr	r3, [r7, #12]
 80197ee:	6a1a      	ldr	r2, [r3, #32]
 80197f0:	68bb      	ldr	r3, [r7, #8]
 80197f2:	f003 031f 	and.w	r3, r3, #31
 80197f6:	6879      	ldr	r1, [r7, #4]
 80197f8:	fa01 f303 	lsl.w	r3, r1, r3
 80197fc:	431a      	orrs	r2, r3
 80197fe:	68fb      	ldr	r3, [r7, #12]
 8019800:	621a      	str	r2, [r3, #32]
}
 8019802:	bf00      	nop
 8019804:	371c      	adds	r7, #28
 8019806:	46bd      	mov	sp, r7
 8019808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801980c:	4770      	bx	lr
	...

08019810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8019810:	b480      	push	{r7}
 8019812:	b085      	sub	sp, #20
 8019814:	af00      	add	r7, sp, #0
 8019816:	6078      	str	r0, [r7, #4]
 8019818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8019820:	2b01      	cmp	r3, #1
 8019822:	d101      	bne.n	8019828 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8019824:	2302      	movs	r3, #2
 8019826:	e05a      	b.n	80198de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	2201      	movs	r2, #1
 801982c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	2202      	movs	r2, #2
 8019834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	685b      	ldr	r3, [r3, #4]
 801983e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	689b      	ldr	r3, [r3, #8]
 8019846:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8019848:	68fb      	ldr	r3, [r7, #12]
 801984a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801984e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8019850:	683b      	ldr	r3, [r7, #0]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	68fa      	ldr	r2, [r7, #12]
 8019856:	4313      	orrs	r3, r2
 8019858:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	68fa      	ldr	r2, [r7, #12]
 8019860:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	4a21      	ldr	r2, [pc, #132]	; (80198ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8019868:	4293      	cmp	r3, r2
 801986a:	d022      	beq.n	80198b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	681b      	ldr	r3, [r3, #0]
 8019870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019874:	d01d      	beq.n	80198b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	681b      	ldr	r3, [r3, #0]
 801987a:	4a1d      	ldr	r2, [pc, #116]	; (80198f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801987c:	4293      	cmp	r3, r2
 801987e:	d018      	beq.n	80198b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	681b      	ldr	r3, [r3, #0]
 8019884:	4a1b      	ldr	r2, [pc, #108]	; (80198f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8019886:	4293      	cmp	r3, r2
 8019888:	d013      	beq.n	80198b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	4a1a      	ldr	r2, [pc, #104]	; (80198f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8019890:	4293      	cmp	r3, r2
 8019892:	d00e      	beq.n	80198b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	4a18      	ldr	r2, [pc, #96]	; (80198fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801989a:	4293      	cmp	r3, r2
 801989c:	d009      	beq.n	80198b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	4a17      	ldr	r2, [pc, #92]	; (8019900 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80198a4:	4293      	cmp	r3, r2
 80198a6:	d004      	beq.n	80198b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	4a15      	ldr	r2, [pc, #84]	; (8019904 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80198ae:	4293      	cmp	r3, r2
 80198b0:	d10c      	bne.n	80198cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80198b2:	68bb      	ldr	r3, [r7, #8]
 80198b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80198b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80198ba:	683b      	ldr	r3, [r7, #0]
 80198bc:	685b      	ldr	r3, [r3, #4]
 80198be:	68ba      	ldr	r2, [r7, #8]
 80198c0:	4313      	orrs	r3, r2
 80198c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	68ba      	ldr	r2, [r7, #8]
 80198ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	2201      	movs	r2, #1
 80198d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	2200      	movs	r2, #0
 80198d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80198dc:	2300      	movs	r3, #0
}
 80198de:	4618      	mov	r0, r3
 80198e0:	3714      	adds	r7, #20
 80198e2:	46bd      	mov	sp, r7
 80198e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198e8:	4770      	bx	lr
 80198ea:	bf00      	nop
 80198ec:	40010000 	.word	0x40010000
 80198f0:	40000400 	.word	0x40000400
 80198f4:	40000800 	.word	0x40000800
 80198f8:	40000c00 	.word	0x40000c00
 80198fc:	40010400 	.word	0x40010400
 8019900:	40014000 	.word	0x40014000
 8019904:	40001800 	.word	0x40001800

08019908 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8019908:	b480      	push	{r7}
 801990a:	b083      	sub	sp, #12
 801990c:	af00      	add	r7, sp, #0
 801990e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8019910:	bf00      	nop
 8019912:	370c      	adds	r7, #12
 8019914:	46bd      	mov	sp, r7
 8019916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801991a:	4770      	bx	lr

0801991c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801991c:	b480      	push	{r7}
 801991e:	b083      	sub	sp, #12
 8019920:	af00      	add	r7, sp, #0
 8019922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8019924:	bf00      	nop
 8019926:	370c      	adds	r7, #12
 8019928:	46bd      	mov	sp, r7
 801992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801992e:	4770      	bx	lr

08019930 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8019930:	b580      	push	{r7, lr}
 8019932:	b082      	sub	sp, #8
 8019934:	af00      	add	r7, sp, #0
 8019936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	2b00      	cmp	r3, #0
 801993c:	d101      	bne.n	8019942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801993e:	2301      	movs	r3, #1
 8019940:	e042      	b.n	80199c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019948:	b2db      	uxtb	r3, r3
 801994a:	2b00      	cmp	r3, #0
 801994c:	d106      	bne.n	801995c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	2200      	movs	r2, #0
 8019952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8019956:	6878      	ldr	r0, [r7, #4]
 8019958:	f7fb fa2a 	bl	8014db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	2224      	movs	r2, #36	; 0x24
 8019960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	68da      	ldr	r2, [r3, #12]
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8019972:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8019974:	6878      	ldr	r0, [r7, #4]
 8019976:	f000 fdcb 	bl	801a510 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	691a      	ldr	r2, [r3, #16]
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8019988:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	695a      	ldr	r2, [r3, #20]
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	681b      	ldr	r3, [r3, #0]
 8019994:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8019998:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	681b      	ldr	r3, [r3, #0]
 801999e:	68da      	ldr	r2, [r3, #12]
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80199a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	2200      	movs	r2, #0
 80199ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	2220      	movs	r2, #32
 80199b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	2220      	movs	r2, #32
 80199bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	2200      	movs	r2, #0
 80199c4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80199c6:	2300      	movs	r3, #0
}
 80199c8:	4618      	mov	r0, r3
 80199ca:	3708      	adds	r7, #8
 80199cc:	46bd      	mov	sp, r7
 80199ce:	bd80      	pop	{r7, pc}

080199d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80199d0:	b580      	push	{r7, lr}
 80199d2:	b08c      	sub	sp, #48	; 0x30
 80199d4:	af00      	add	r7, sp, #0
 80199d6:	60f8      	str	r0, [r7, #12]
 80199d8:	60b9      	str	r1, [r7, #8]
 80199da:	4613      	mov	r3, r2
 80199dc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80199e4:	b2db      	uxtb	r3, r3
 80199e6:	2b20      	cmp	r3, #32
 80199e8:	d156      	bne.n	8019a98 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80199ea:	68bb      	ldr	r3, [r7, #8]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d002      	beq.n	80199f6 <HAL_UART_Transmit_DMA+0x26>
 80199f0:	88fb      	ldrh	r3, [r7, #6]
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d101      	bne.n	80199fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80199f6:	2301      	movs	r3, #1
 80199f8:	e04f      	b.n	8019a9a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80199fa:	68ba      	ldr	r2, [r7, #8]
 80199fc:	68fb      	ldr	r3, [r7, #12]
 80199fe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8019a00:	68fb      	ldr	r3, [r7, #12]
 8019a02:	88fa      	ldrh	r2, [r7, #6]
 8019a04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8019a06:	68fb      	ldr	r3, [r7, #12]
 8019a08:	88fa      	ldrh	r2, [r7, #6]
 8019a0a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019a0c:	68fb      	ldr	r3, [r7, #12]
 8019a0e:	2200      	movs	r2, #0
 8019a10:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8019a12:	68fb      	ldr	r3, [r7, #12]
 8019a14:	2221      	movs	r2, #33	; 0x21
 8019a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a1e:	4a21      	ldr	r2, [pc, #132]	; (8019aa4 <HAL_UART_Transmit_DMA+0xd4>)
 8019a20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8019a22:	68fb      	ldr	r3, [r7, #12]
 8019a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a26:	4a20      	ldr	r2, [pc, #128]	; (8019aa8 <HAL_UART_Transmit_DMA+0xd8>)
 8019a28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a2e:	4a1f      	ldr	r2, [pc, #124]	; (8019aac <HAL_UART_Transmit_DMA+0xdc>)
 8019a30:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a36:	2200      	movs	r2, #0
 8019a38:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8019a3a:	f107 0308 	add.w	r3, r7, #8
 8019a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8019a40:	68fb      	ldr	r3, [r7, #12]
 8019a42:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8019a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a46:	6819      	ldr	r1, [r3, #0]
 8019a48:	68fb      	ldr	r3, [r7, #12]
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	3304      	adds	r3, #4
 8019a4e:	461a      	mov	r2, r3
 8019a50:	88fb      	ldrh	r3, [r7, #6]
 8019a52:	f7fc fa95 	bl	8015f80 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8019a5e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	3314      	adds	r3, #20
 8019a66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a68:	69bb      	ldr	r3, [r7, #24]
 8019a6a:	e853 3f00 	ldrex	r3, [r3]
 8019a6e:	617b      	str	r3, [r7, #20]
   return(result);
 8019a70:	697b      	ldr	r3, [r7, #20]
 8019a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	681b      	ldr	r3, [r3, #0]
 8019a7c:	3314      	adds	r3, #20
 8019a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a80:	627a      	str	r2, [r7, #36]	; 0x24
 8019a82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a84:	6a39      	ldr	r1, [r7, #32]
 8019a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a88:	e841 2300 	strex	r3, r2, [r1]
 8019a8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8019a8e:	69fb      	ldr	r3, [r7, #28]
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d1e5      	bne.n	8019a60 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8019a94:	2300      	movs	r3, #0
 8019a96:	e000      	b.n	8019a9a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8019a98:	2302      	movs	r3, #2
  }
}
 8019a9a:	4618      	mov	r0, r3
 8019a9c:	3730      	adds	r7, #48	; 0x30
 8019a9e:	46bd      	mov	sp, r7
 8019aa0:	bd80      	pop	{r7, pc}
 8019aa2:	bf00      	nop
 8019aa4:	0801a03d 	.word	0x0801a03d
 8019aa8:	0801a0d7 	.word	0x0801a0d7
 8019aac:	0801a0f3 	.word	0x0801a0f3

08019ab0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8019ab0:	b580      	push	{r7, lr}
 8019ab2:	b0ba      	sub	sp, #232	; 0xe8
 8019ab4:	af00      	add	r7, sp, #0
 8019ab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	68db      	ldr	r3, [r3, #12]
 8019ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	695b      	ldr	r3, [r3, #20]
 8019ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8019adc:	2300      	movs	r3, #0
 8019ade:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8019ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8019ae6:	f003 030f 	and.w	r3, r3, #15
 8019aea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8019aee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d10f      	bne.n	8019b16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8019af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8019afa:	f003 0320 	and.w	r3, r3, #32
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	d009      	beq.n	8019b16 <HAL_UART_IRQHandler+0x66>
 8019b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8019b06:	f003 0320 	and.w	r3, r3, #32
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d003      	beq.n	8019b16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8019b0e:	6878      	ldr	r0, [r7, #4]
 8019b10:	f000 fc40 	bl	801a394 <UART_Receive_IT>
      return;
 8019b14:	e25b      	b.n	8019fce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8019b16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	f000 80de 	beq.w	8019cdc <HAL_UART_IRQHandler+0x22c>
 8019b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8019b24:	f003 0301 	and.w	r3, r3, #1
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d106      	bne.n	8019b3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8019b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8019b30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	f000 80d1 	beq.w	8019cdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8019b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8019b3e:	f003 0301 	and.w	r3, r3, #1
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d00b      	beq.n	8019b5e <HAL_UART_IRQHandler+0xae>
 8019b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8019b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d005      	beq.n	8019b5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b56:	f043 0201 	orr.w	r2, r3, #1
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8019b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8019b62:	f003 0304 	and.w	r3, r3, #4
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	d00b      	beq.n	8019b82 <HAL_UART_IRQHandler+0xd2>
 8019b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8019b6e:	f003 0301 	and.w	r3, r3, #1
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d005      	beq.n	8019b82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b7a:	f043 0202 	orr.w	r2, r3, #2
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8019b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8019b86:	f003 0302 	and.w	r3, r3, #2
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d00b      	beq.n	8019ba6 <HAL_UART_IRQHandler+0xf6>
 8019b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8019b92:	f003 0301 	and.w	r3, r3, #1
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d005      	beq.n	8019ba6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b9e:	f043 0204 	orr.w	r2, r3, #4
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8019ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8019baa:	f003 0308 	and.w	r3, r3, #8
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d011      	beq.n	8019bd6 <HAL_UART_IRQHandler+0x126>
 8019bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8019bb6:	f003 0320 	and.w	r3, r3, #32
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d105      	bne.n	8019bca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8019bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8019bc2:	f003 0301 	and.w	r3, r3, #1
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d005      	beq.n	8019bd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019bce:	f043 0208 	orr.w	r2, r3, #8
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	f000 81f2 	beq.w	8019fc4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8019be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8019be4:	f003 0320 	and.w	r3, r3, #32
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d008      	beq.n	8019bfe <HAL_UART_IRQHandler+0x14e>
 8019bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8019bf0:	f003 0320 	and.w	r3, r3, #32
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d002      	beq.n	8019bfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8019bf8:	6878      	ldr	r0, [r7, #4]
 8019bfa:	f000 fbcb 	bl	801a394 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	695b      	ldr	r3, [r3, #20]
 8019c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019c08:	2b40      	cmp	r3, #64	; 0x40
 8019c0a:	bf0c      	ite	eq
 8019c0c:	2301      	moveq	r3, #1
 8019c0e:	2300      	movne	r3, #0
 8019c10:	b2db      	uxtb	r3, r3
 8019c12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c1a:	f003 0308 	and.w	r3, r3, #8
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d103      	bne.n	8019c2a <HAL_UART_IRQHandler+0x17a>
 8019c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d04f      	beq.n	8019cca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8019c2a:	6878      	ldr	r0, [r7, #4]
 8019c2c:	f000 fad3 	bl	801a1d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	695b      	ldr	r3, [r3, #20]
 8019c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019c3a:	2b40      	cmp	r3, #64	; 0x40
 8019c3c:	d141      	bne.n	8019cc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	3314      	adds	r3, #20
 8019c44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019c4c:	e853 3f00 	ldrex	r3, [r3]
 8019c50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8019c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	3314      	adds	r3, #20
 8019c66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8019c6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8019c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8019c76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8019c7a:	e841 2300 	strex	r3, r2, [r1]
 8019c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8019c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d1d9      	bne.n	8019c3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d013      	beq.n	8019cba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c96:	4a7e      	ldr	r2, [pc, #504]	; (8019e90 <HAL_UART_IRQHandler+0x3e0>)
 8019c98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c9e:	4618      	mov	r0, r3
 8019ca0:	f7fc fa36 	bl	8016110 <HAL_DMA_Abort_IT>
 8019ca4:	4603      	mov	r3, r0
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d016      	beq.n	8019cd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019cb0:	687a      	ldr	r2, [r7, #4]
 8019cb2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8019cb4:	4610      	mov	r0, r2
 8019cb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019cb8:	e00e      	b.n	8019cd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8019cba:	6878      	ldr	r0, [r7, #4]
 8019cbc:	f000 f9a8 	bl	801a010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019cc0:	e00a      	b.n	8019cd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8019cc2:	6878      	ldr	r0, [r7, #4]
 8019cc4:	f000 f9a4 	bl	801a010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019cc8:	e006      	b.n	8019cd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8019cca:	6878      	ldr	r0, [r7, #4]
 8019ccc:	f000 f9a0 	bl	801a010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	2200      	movs	r2, #0
 8019cd4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8019cd6:	e175      	b.n	8019fc4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019cd8:	bf00      	nop
    return;
 8019cda:	e173      	b.n	8019fc4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ce0:	2b01      	cmp	r3, #1
 8019ce2:	f040 814f 	bne.w	8019f84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8019ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8019cea:	f003 0310 	and.w	r3, r3, #16
 8019cee:	2b00      	cmp	r3, #0
 8019cf0:	f000 8148 	beq.w	8019f84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8019cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8019cf8:	f003 0310 	and.w	r3, r3, #16
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	f000 8141 	beq.w	8019f84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8019d02:	2300      	movs	r3, #0
 8019d04:	60bb      	str	r3, [r7, #8]
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	60bb      	str	r3, [r7, #8]
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	685b      	ldr	r3, [r3, #4]
 8019d14:	60bb      	str	r3, [r7, #8]
 8019d16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	695b      	ldr	r3, [r3, #20]
 8019d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019d22:	2b40      	cmp	r3, #64	; 0x40
 8019d24:	f040 80b6 	bne.w	8019e94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	685b      	ldr	r3, [r3, #4]
 8019d30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8019d34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	f000 8145 	beq.w	8019fc8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8019d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8019d46:	429a      	cmp	r2, r3
 8019d48:	f080 813e 	bcs.w	8019fc8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8019d52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d58:	69db      	ldr	r3, [r3, #28]
 8019d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019d5e:	f000 8088 	beq.w	8019e72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	330c      	adds	r3, #12
 8019d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019d70:	e853 3f00 	ldrex	r3, [r3]
 8019d74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8019d78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019d80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	330c      	adds	r3, #12
 8019d8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8019d8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8019d92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8019d9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8019d9e:	e841 2300 	strex	r3, r2, [r1]
 8019da2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8019da6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d1d9      	bne.n	8019d62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	3314      	adds	r3, #20
 8019db4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019db8:	e853 3f00 	ldrex	r3, [r3]
 8019dbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8019dbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019dc0:	f023 0301 	bic.w	r3, r3, #1
 8019dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	3314      	adds	r3, #20
 8019dce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8019dd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8019dd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019dd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8019dda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8019dde:	e841 2300 	strex	r3, r2, [r1]
 8019de2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8019de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d1e1      	bne.n	8019dae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	3314      	adds	r3, #20
 8019df0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019df4:	e853 3f00 	ldrex	r3, [r3]
 8019df8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8019dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019dfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019e00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	3314      	adds	r3, #20
 8019e0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8019e0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8019e10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8019e14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8019e16:	e841 2300 	strex	r3, r2, [r1]
 8019e1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8019e1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d1e3      	bne.n	8019dea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	2220      	movs	r2, #32
 8019e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	2200      	movs	r2, #0
 8019e2e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	330c      	adds	r3, #12
 8019e36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019e3a:	e853 3f00 	ldrex	r3, [r3]
 8019e3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8019e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019e42:	f023 0310 	bic.w	r3, r3, #16
 8019e46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	330c      	adds	r3, #12
 8019e50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8019e54:	65ba      	str	r2, [r7, #88]	; 0x58
 8019e56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8019e5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019e5c:	e841 2300 	strex	r3, r2, [r1]
 8019e60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8019e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d1e3      	bne.n	8019e30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e6c:	4618      	mov	r0, r3
 8019e6e:	f7fc f8df 	bl	8016030 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	2202      	movs	r2, #2
 8019e76:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8019e80:	b29b      	uxth	r3, r3
 8019e82:	1ad3      	subs	r3, r2, r3
 8019e84:	b29b      	uxth	r3, r3
 8019e86:	4619      	mov	r1, r3
 8019e88:	6878      	ldr	r0, [r7, #4]
 8019e8a:	f000 f8cb 	bl	801a024 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8019e8e:	e09b      	b.n	8019fc8 <HAL_UART_IRQHandler+0x518>
 8019e90:	0801a29d 	.word	0x0801a29d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8019e9c:	b29b      	uxth	r3, r3
 8019e9e:	1ad3      	subs	r3, r2, r3
 8019ea0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8019ea8:	b29b      	uxth	r3, r3
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	f000 808e 	beq.w	8019fcc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8019eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	f000 8089 	beq.w	8019fcc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	330c      	adds	r3, #12
 8019ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ec4:	e853 3f00 	ldrex	r3, [r3]
 8019ec8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8019eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ecc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8019ed0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	330c      	adds	r3, #12
 8019eda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8019ede:	647a      	str	r2, [r7, #68]	; 0x44
 8019ee0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ee2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8019ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019ee6:	e841 2300 	strex	r3, r2, [r1]
 8019eea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8019eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d1e3      	bne.n	8019eba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	681b      	ldr	r3, [r3, #0]
 8019ef6:	3314      	adds	r3, #20
 8019ef8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019efc:	e853 3f00 	ldrex	r3, [r3]
 8019f00:	623b      	str	r3, [r7, #32]
   return(result);
 8019f02:	6a3b      	ldr	r3, [r7, #32]
 8019f04:	f023 0301 	bic.w	r3, r3, #1
 8019f08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	3314      	adds	r3, #20
 8019f12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8019f16:	633a      	str	r2, [r7, #48]	; 0x30
 8019f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019f1e:	e841 2300 	strex	r3, r2, [r1]
 8019f22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8019f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d1e3      	bne.n	8019ef2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	2220      	movs	r2, #32
 8019f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	2200      	movs	r2, #0
 8019f36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	330c      	adds	r3, #12
 8019f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f40:	693b      	ldr	r3, [r7, #16]
 8019f42:	e853 3f00 	ldrex	r3, [r3]
 8019f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8019f48:	68fb      	ldr	r3, [r7, #12]
 8019f4a:	f023 0310 	bic.w	r3, r3, #16
 8019f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	330c      	adds	r3, #12
 8019f58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8019f5c:	61fa      	str	r2, [r7, #28]
 8019f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f60:	69b9      	ldr	r1, [r7, #24]
 8019f62:	69fa      	ldr	r2, [r7, #28]
 8019f64:	e841 2300 	strex	r3, r2, [r1]
 8019f68:	617b      	str	r3, [r7, #20]
   return(result);
 8019f6a:	697b      	ldr	r3, [r7, #20]
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d1e3      	bne.n	8019f38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	2202      	movs	r2, #2
 8019f74:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8019f76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8019f7a:	4619      	mov	r1, r3
 8019f7c:	6878      	ldr	r0, [r7, #4]
 8019f7e:	f000 f851 	bl	801a024 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8019f82:	e023      	b.n	8019fcc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8019f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8019f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019f8c:	2b00      	cmp	r3, #0
 8019f8e:	d009      	beq.n	8019fa4 <HAL_UART_IRQHandler+0x4f4>
 8019f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8019f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d003      	beq.n	8019fa4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8019f9c:	6878      	ldr	r0, [r7, #4]
 8019f9e:	f000 f991 	bl	801a2c4 <UART_Transmit_IT>
    return;
 8019fa2:	e014      	b.n	8019fce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8019fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8019fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d00e      	beq.n	8019fce <HAL_UART_IRQHandler+0x51e>
 8019fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8019fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d008      	beq.n	8019fce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8019fbc:	6878      	ldr	r0, [r7, #4]
 8019fbe:	f000 f9d1 	bl	801a364 <UART_EndTransmit_IT>
    return;
 8019fc2:	e004      	b.n	8019fce <HAL_UART_IRQHandler+0x51e>
    return;
 8019fc4:	bf00      	nop
 8019fc6:	e002      	b.n	8019fce <HAL_UART_IRQHandler+0x51e>
      return;
 8019fc8:	bf00      	nop
 8019fca:	e000      	b.n	8019fce <HAL_UART_IRQHandler+0x51e>
      return;
 8019fcc:	bf00      	nop
  }
}
 8019fce:	37e8      	adds	r7, #232	; 0xe8
 8019fd0:	46bd      	mov	sp, r7
 8019fd2:	bd80      	pop	{r7, pc}

08019fd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8019fd4:	b480      	push	{r7}
 8019fd6:	b083      	sub	sp, #12
 8019fd8:	af00      	add	r7, sp, #0
 8019fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8019fdc:	bf00      	nop
 8019fde:	370c      	adds	r7, #12
 8019fe0:	46bd      	mov	sp, r7
 8019fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fe6:	4770      	bx	lr

08019fe8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8019fe8:	b480      	push	{r7}
 8019fea:	b083      	sub	sp, #12
 8019fec:	af00      	add	r7, sp, #0
 8019fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8019ff0:	bf00      	nop
 8019ff2:	370c      	adds	r7, #12
 8019ff4:	46bd      	mov	sp, r7
 8019ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ffa:	4770      	bx	lr

08019ffc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8019ffc:	b480      	push	{r7}
 8019ffe:	b083      	sub	sp, #12
 801a000:	af00      	add	r7, sp, #0
 801a002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 801a004:	bf00      	nop
 801a006:	370c      	adds	r7, #12
 801a008:	46bd      	mov	sp, r7
 801a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a00e:	4770      	bx	lr

0801a010 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801a010:	b480      	push	{r7}
 801a012:	b083      	sub	sp, #12
 801a014:	af00      	add	r7, sp, #0
 801a016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801a018:	bf00      	nop
 801a01a:	370c      	adds	r7, #12
 801a01c:	46bd      	mov	sp, r7
 801a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a022:	4770      	bx	lr

0801a024 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801a024:	b480      	push	{r7}
 801a026:	b083      	sub	sp, #12
 801a028:	af00      	add	r7, sp, #0
 801a02a:	6078      	str	r0, [r7, #4]
 801a02c:	460b      	mov	r3, r1
 801a02e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801a030:	bf00      	nop
 801a032:	370c      	adds	r7, #12
 801a034:	46bd      	mov	sp, r7
 801a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a03a:	4770      	bx	lr

0801a03c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801a03c:	b580      	push	{r7, lr}
 801a03e:	b090      	sub	sp, #64	; 0x40
 801a040:	af00      	add	r7, sp, #0
 801a042:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a048:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a054:	2b00      	cmp	r3, #0
 801a056:	d137      	bne.n	801a0c8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 801a058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a05a:	2200      	movs	r2, #0
 801a05c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801a05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a060:	681b      	ldr	r3, [r3, #0]
 801a062:	3314      	adds	r3, #20
 801a064:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a068:	e853 3f00 	ldrex	r3, [r3]
 801a06c:	623b      	str	r3, [r7, #32]
   return(result);
 801a06e:	6a3b      	ldr	r3, [r7, #32]
 801a070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a074:	63bb      	str	r3, [r7, #56]	; 0x38
 801a076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	3314      	adds	r3, #20
 801a07c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a07e:	633a      	str	r2, [r7, #48]	; 0x30
 801a080:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a086:	e841 2300 	strex	r3, r2, [r1]
 801a08a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801a08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d1e5      	bne.n	801a05e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	330c      	adds	r3, #12
 801a098:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a09a:	693b      	ldr	r3, [r7, #16]
 801a09c:	e853 3f00 	ldrex	r3, [r3]
 801a0a0:	60fb      	str	r3, [r7, #12]
   return(result);
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a0a8:	637b      	str	r3, [r7, #52]	; 0x34
 801a0aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0ac:	681b      	ldr	r3, [r3, #0]
 801a0ae:	330c      	adds	r3, #12
 801a0b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a0b2:	61fa      	str	r2, [r7, #28]
 801a0b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a0b6:	69b9      	ldr	r1, [r7, #24]
 801a0b8:	69fa      	ldr	r2, [r7, #28]
 801a0ba:	e841 2300 	strex	r3, r2, [r1]
 801a0be:	617b      	str	r3, [r7, #20]
   return(result);
 801a0c0:	697b      	ldr	r3, [r7, #20]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d1e5      	bne.n	801a092 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801a0c6:	e002      	b.n	801a0ce <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 801a0c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801a0ca:	f7ff ff83 	bl	8019fd4 <HAL_UART_TxCpltCallback>
}
 801a0ce:	bf00      	nop
 801a0d0:	3740      	adds	r7, #64	; 0x40
 801a0d2:	46bd      	mov	sp, r7
 801a0d4:	bd80      	pop	{r7, pc}

0801a0d6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801a0d6:	b580      	push	{r7, lr}
 801a0d8:	b084      	sub	sp, #16
 801a0da:	af00      	add	r7, sp, #0
 801a0dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a0e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801a0e4:	68f8      	ldr	r0, [r7, #12]
 801a0e6:	f7ff ff7f 	bl	8019fe8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a0ea:	bf00      	nop
 801a0ec:	3710      	adds	r7, #16
 801a0ee:	46bd      	mov	sp, r7
 801a0f0:	bd80      	pop	{r7, pc}

0801a0f2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801a0f2:	b580      	push	{r7, lr}
 801a0f4:	b084      	sub	sp, #16
 801a0f6:	af00      	add	r7, sp, #0
 801a0f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801a0fa:	2300      	movs	r3, #0
 801a0fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a102:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801a104:	68bb      	ldr	r3, [r7, #8]
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	695b      	ldr	r3, [r3, #20]
 801a10a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a10e:	2b80      	cmp	r3, #128	; 0x80
 801a110:	bf0c      	ite	eq
 801a112:	2301      	moveq	r3, #1
 801a114:	2300      	movne	r3, #0
 801a116:	b2db      	uxtb	r3, r3
 801a118:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801a11a:	68bb      	ldr	r3, [r7, #8]
 801a11c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a120:	b2db      	uxtb	r3, r3
 801a122:	2b21      	cmp	r3, #33	; 0x21
 801a124:	d108      	bne.n	801a138 <UART_DMAError+0x46>
 801a126:	68fb      	ldr	r3, [r7, #12]
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d005      	beq.n	801a138 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801a12c:	68bb      	ldr	r3, [r7, #8]
 801a12e:	2200      	movs	r2, #0
 801a130:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801a132:	68b8      	ldr	r0, [r7, #8]
 801a134:	f000 f827 	bl	801a186 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801a138:	68bb      	ldr	r3, [r7, #8]
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	695b      	ldr	r3, [r3, #20]
 801a13e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a142:	2b40      	cmp	r3, #64	; 0x40
 801a144:	bf0c      	ite	eq
 801a146:	2301      	moveq	r3, #1
 801a148:	2300      	movne	r3, #0
 801a14a:	b2db      	uxtb	r3, r3
 801a14c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801a14e:	68bb      	ldr	r3, [r7, #8]
 801a150:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a154:	b2db      	uxtb	r3, r3
 801a156:	2b22      	cmp	r3, #34	; 0x22
 801a158:	d108      	bne.n	801a16c <UART_DMAError+0x7a>
 801a15a:	68fb      	ldr	r3, [r7, #12]
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d005      	beq.n	801a16c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801a160:	68bb      	ldr	r3, [r7, #8]
 801a162:	2200      	movs	r2, #0
 801a164:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801a166:	68b8      	ldr	r0, [r7, #8]
 801a168:	f000 f835 	bl	801a1d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801a16c:	68bb      	ldr	r3, [r7, #8]
 801a16e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a170:	f043 0210 	orr.w	r2, r3, #16
 801a174:	68bb      	ldr	r3, [r7, #8]
 801a176:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801a178:	68b8      	ldr	r0, [r7, #8]
 801a17a:	f7ff ff49 	bl	801a010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a17e:	bf00      	nop
 801a180:	3710      	adds	r7, #16
 801a182:	46bd      	mov	sp, r7
 801a184:	bd80      	pop	{r7, pc}

0801a186 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801a186:	b480      	push	{r7}
 801a188:	b089      	sub	sp, #36	; 0x24
 801a18a:	af00      	add	r7, sp, #0
 801a18c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	330c      	adds	r3, #12
 801a194:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	e853 3f00 	ldrex	r3, [r3]
 801a19c:	60bb      	str	r3, [r7, #8]
   return(result);
 801a19e:	68bb      	ldr	r3, [r7, #8]
 801a1a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801a1a4:	61fb      	str	r3, [r7, #28]
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	330c      	adds	r3, #12
 801a1ac:	69fa      	ldr	r2, [r7, #28]
 801a1ae:	61ba      	str	r2, [r7, #24]
 801a1b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1b2:	6979      	ldr	r1, [r7, #20]
 801a1b4:	69ba      	ldr	r2, [r7, #24]
 801a1b6:	e841 2300 	strex	r3, r2, [r1]
 801a1ba:	613b      	str	r3, [r7, #16]
   return(result);
 801a1bc:	693b      	ldr	r3, [r7, #16]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d1e5      	bne.n	801a18e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	2220      	movs	r2, #32
 801a1c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 801a1ca:	bf00      	nop
 801a1cc:	3724      	adds	r7, #36	; 0x24
 801a1ce:	46bd      	mov	sp, r7
 801a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1d4:	4770      	bx	lr

0801a1d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801a1d6:	b480      	push	{r7}
 801a1d8:	b095      	sub	sp, #84	; 0x54
 801a1da:	af00      	add	r7, sp, #0
 801a1dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	330c      	adds	r3, #12
 801a1e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1e8:	e853 3f00 	ldrex	r3, [r3]
 801a1ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801a1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801a1f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	330c      	adds	r3, #12
 801a1fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a1fe:	643a      	str	r2, [r7, #64]	; 0x40
 801a200:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a202:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801a204:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a206:	e841 2300 	strex	r3, r2, [r1]
 801a20a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801a20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d1e5      	bne.n	801a1de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	3314      	adds	r3, #20
 801a218:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a21a:	6a3b      	ldr	r3, [r7, #32]
 801a21c:	e853 3f00 	ldrex	r3, [r3]
 801a220:	61fb      	str	r3, [r7, #28]
   return(result);
 801a222:	69fb      	ldr	r3, [r7, #28]
 801a224:	f023 0301 	bic.w	r3, r3, #1
 801a228:	64bb      	str	r3, [r7, #72]	; 0x48
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	681b      	ldr	r3, [r3, #0]
 801a22e:	3314      	adds	r3, #20
 801a230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a232:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a234:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a236:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a23a:	e841 2300 	strex	r3, r2, [r1]
 801a23e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a242:	2b00      	cmp	r3, #0
 801a244:	d1e5      	bne.n	801a212 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a24a:	2b01      	cmp	r3, #1
 801a24c:	d119      	bne.n	801a282 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	330c      	adds	r3, #12
 801a254:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	e853 3f00 	ldrex	r3, [r3]
 801a25c:	60bb      	str	r3, [r7, #8]
   return(result);
 801a25e:	68bb      	ldr	r3, [r7, #8]
 801a260:	f023 0310 	bic.w	r3, r3, #16
 801a264:	647b      	str	r3, [r7, #68]	; 0x44
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	330c      	adds	r3, #12
 801a26c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a26e:	61ba      	str	r2, [r7, #24]
 801a270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a272:	6979      	ldr	r1, [r7, #20]
 801a274:	69ba      	ldr	r2, [r7, #24]
 801a276:	e841 2300 	strex	r3, r2, [r1]
 801a27a:	613b      	str	r3, [r7, #16]
   return(result);
 801a27c:	693b      	ldr	r3, [r7, #16]
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d1e5      	bne.n	801a24e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	2220      	movs	r2, #32
 801a286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	2200      	movs	r2, #0
 801a28e:	631a      	str	r2, [r3, #48]	; 0x30
}
 801a290:	bf00      	nop
 801a292:	3754      	adds	r7, #84	; 0x54
 801a294:	46bd      	mov	sp, r7
 801a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a29a:	4770      	bx	lr

0801a29c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801a29c:	b580      	push	{r7, lr}
 801a29e:	b084      	sub	sp, #16
 801a2a0:	af00      	add	r7, sp, #0
 801a2a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a2a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	2200      	movs	r2, #0
 801a2ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801a2b0:	68fb      	ldr	r3, [r7, #12]
 801a2b2:	2200      	movs	r2, #0
 801a2b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801a2b6:	68f8      	ldr	r0, [r7, #12]
 801a2b8:	f7ff feaa 	bl	801a010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a2bc:	bf00      	nop
 801a2be:	3710      	adds	r7, #16
 801a2c0:	46bd      	mov	sp, r7
 801a2c2:	bd80      	pop	{r7, pc}

0801a2c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801a2c4:	b480      	push	{r7}
 801a2c6:	b085      	sub	sp, #20
 801a2c8:	af00      	add	r7, sp, #0
 801a2ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a2d2:	b2db      	uxtb	r3, r3
 801a2d4:	2b21      	cmp	r3, #33	; 0x21
 801a2d6:	d13e      	bne.n	801a356 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	689b      	ldr	r3, [r3, #8]
 801a2dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a2e0:	d114      	bne.n	801a30c <UART_Transmit_IT+0x48>
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	691b      	ldr	r3, [r3, #16]
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	d110      	bne.n	801a30c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	6a1b      	ldr	r3, [r3, #32]
 801a2ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	881b      	ldrh	r3, [r3, #0]
 801a2f4:	461a      	mov	r2, r3
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	681b      	ldr	r3, [r3, #0]
 801a2fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801a2fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	6a1b      	ldr	r3, [r3, #32]
 801a304:	1c9a      	adds	r2, r3, #2
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	621a      	str	r2, [r3, #32]
 801a30a:	e008      	b.n	801a31e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	6a1b      	ldr	r3, [r3, #32]
 801a310:	1c59      	adds	r1, r3, #1
 801a312:	687a      	ldr	r2, [r7, #4]
 801a314:	6211      	str	r1, [r2, #32]
 801a316:	781a      	ldrb	r2, [r3, #0]
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801a322:	b29b      	uxth	r3, r3
 801a324:	3b01      	subs	r3, #1
 801a326:	b29b      	uxth	r3, r3
 801a328:	687a      	ldr	r2, [r7, #4]
 801a32a:	4619      	mov	r1, r3
 801a32c:	84d1      	strh	r1, [r2, #38]	; 0x26
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d10f      	bne.n	801a352 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	68da      	ldr	r2, [r3, #12]
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a340:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	68da      	ldr	r2, [r3, #12]
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a350:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801a352:	2300      	movs	r3, #0
 801a354:	e000      	b.n	801a358 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801a356:	2302      	movs	r3, #2
  }
}
 801a358:	4618      	mov	r0, r3
 801a35a:	3714      	adds	r7, #20
 801a35c:	46bd      	mov	sp, r7
 801a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a362:	4770      	bx	lr

0801a364 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801a364:	b580      	push	{r7, lr}
 801a366:	b082      	sub	sp, #8
 801a368:	af00      	add	r7, sp, #0
 801a36a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	68da      	ldr	r2, [r3, #12]
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a37a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	2220      	movs	r2, #32
 801a380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801a384:	6878      	ldr	r0, [r7, #4]
 801a386:	f7ff fe25 	bl	8019fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801a38a:	2300      	movs	r3, #0
}
 801a38c:	4618      	mov	r0, r3
 801a38e:	3708      	adds	r7, #8
 801a390:	46bd      	mov	sp, r7
 801a392:	bd80      	pop	{r7, pc}

0801a394 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801a394:	b580      	push	{r7, lr}
 801a396:	b08c      	sub	sp, #48	; 0x30
 801a398:	af00      	add	r7, sp, #0
 801a39a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a3a2:	b2db      	uxtb	r3, r3
 801a3a4:	2b22      	cmp	r3, #34	; 0x22
 801a3a6:	f040 80ae 	bne.w	801a506 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	689b      	ldr	r3, [r3, #8]
 801a3ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a3b2:	d117      	bne.n	801a3e4 <UART_Receive_IT+0x50>
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	691b      	ldr	r3, [r3, #16]
 801a3b8:	2b00      	cmp	r3, #0
 801a3ba:	d113      	bne.n	801a3e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801a3bc:	2300      	movs	r3, #0
 801a3be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a3c4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	685b      	ldr	r3, [r3, #4]
 801a3cc:	b29b      	uxth	r3, r3
 801a3ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a3d2:	b29a      	uxth	r2, r3
 801a3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a3dc:	1c9a      	adds	r2, r3, #2
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	629a      	str	r2, [r3, #40]	; 0x28
 801a3e2:	e026      	b.n	801a432 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a3e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801a3ea:	2300      	movs	r3, #0
 801a3ec:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	689b      	ldr	r3, [r3, #8]
 801a3f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a3f6:	d007      	beq.n	801a408 <UART_Receive_IT+0x74>
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	689b      	ldr	r3, [r3, #8]
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d10a      	bne.n	801a416 <UART_Receive_IT+0x82>
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	691b      	ldr	r3, [r3, #16]
 801a404:	2b00      	cmp	r3, #0
 801a406:	d106      	bne.n	801a416 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	685b      	ldr	r3, [r3, #4]
 801a40e:	b2da      	uxtb	r2, r3
 801a410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a412:	701a      	strb	r2, [r3, #0]
 801a414:	e008      	b.n	801a428 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	685b      	ldr	r3, [r3, #4]
 801a41c:	b2db      	uxtb	r3, r3
 801a41e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a422:	b2da      	uxtb	r2, r3
 801a424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a426:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a42c:	1c5a      	adds	r2, r3, #1
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801a436:	b29b      	uxth	r3, r3
 801a438:	3b01      	subs	r3, #1
 801a43a:	b29b      	uxth	r3, r3
 801a43c:	687a      	ldr	r2, [r7, #4]
 801a43e:	4619      	mov	r1, r3
 801a440:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801a442:	2b00      	cmp	r3, #0
 801a444:	d15d      	bne.n	801a502 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	68da      	ldr	r2, [r3, #12]
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	f022 0220 	bic.w	r2, r2, #32
 801a454:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	681b      	ldr	r3, [r3, #0]
 801a45a:	68da      	ldr	r2, [r3, #12]
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801a464:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	695a      	ldr	r2, [r3, #20]
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	f022 0201 	bic.w	r2, r2, #1
 801a474:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	2220      	movs	r2, #32
 801a47a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	2200      	movs	r2, #0
 801a482:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a488:	2b01      	cmp	r3, #1
 801a48a:	d135      	bne.n	801a4f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	2200      	movs	r2, #0
 801a490:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	681b      	ldr	r3, [r3, #0]
 801a496:	330c      	adds	r3, #12
 801a498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a49a:	697b      	ldr	r3, [r7, #20]
 801a49c:	e853 3f00 	ldrex	r3, [r3]
 801a4a0:	613b      	str	r3, [r7, #16]
   return(result);
 801a4a2:	693b      	ldr	r3, [r7, #16]
 801a4a4:	f023 0310 	bic.w	r3, r3, #16
 801a4a8:	627b      	str	r3, [r7, #36]	; 0x24
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	330c      	adds	r3, #12
 801a4b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a4b2:	623a      	str	r2, [r7, #32]
 801a4b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a4b6:	69f9      	ldr	r1, [r7, #28]
 801a4b8:	6a3a      	ldr	r2, [r7, #32]
 801a4ba:	e841 2300 	strex	r3, r2, [r1]
 801a4be:	61bb      	str	r3, [r7, #24]
   return(result);
 801a4c0:	69bb      	ldr	r3, [r7, #24]
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d1e5      	bne.n	801a492 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	f003 0310 	and.w	r3, r3, #16
 801a4d0:	2b10      	cmp	r3, #16
 801a4d2:	d10a      	bne.n	801a4ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801a4d4:	2300      	movs	r3, #0
 801a4d6:	60fb      	str	r3, [r7, #12]
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	60fb      	str	r3, [r7, #12]
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	685b      	ldr	r3, [r3, #4]
 801a4e6:	60fb      	str	r3, [r7, #12]
 801a4e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801a4ee:	4619      	mov	r1, r3
 801a4f0:	6878      	ldr	r0, [r7, #4]
 801a4f2:	f7ff fd97 	bl	801a024 <HAL_UARTEx_RxEventCallback>
 801a4f6:	e002      	b.n	801a4fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801a4f8:	6878      	ldr	r0, [r7, #4]
 801a4fa:	f7ff fd7f 	bl	8019ffc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801a4fe:	2300      	movs	r3, #0
 801a500:	e002      	b.n	801a508 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 801a502:	2300      	movs	r3, #0
 801a504:	e000      	b.n	801a508 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 801a506:	2302      	movs	r3, #2
  }
}
 801a508:	4618      	mov	r0, r3
 801a50a:	3730      	adds	r7, #48	; 0x30
 801a50c:	46bd      	mov	sp, r7
 801a50e:	bd80      	pop	{r7, pc}

0801a510 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801a510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a514:	b0c0      	sub	sp, #256	; 0x100
 801a516:	af00      	add	r7, sp, #0
 801a518:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801a51c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	691b      	ldr	r3, [r3, #16]
 801a524:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801a528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a52c:	68d9      	ldr	r1, [r3, #12]
 801a52e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a532:	681a      	ldr	r2, [r3, #0]
 801a534:	ea40 0301 	orr.w	r3, r0, r1
 801a538:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801a53a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a53e:	689a      	ldr	r2, [r3, #8]
 801a540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a544:	691b      	ldr	r3, [r3, #16]
 801a546:	431a      	orrs	r2, r3
 801a548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a54c:	695b      	ldr	r3, [r3, #20]
 801a54e:	431a      	orrs	r2, r3
 801a550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a554:	69db      	ldr	r3, [r3, #28]
 801a556:	4313      	orrs	r3, r2
 801a558:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801a55c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	68db      	ldr	r3, [r3, #12]
 801a564:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801a568:	f021 010c 	bic.w	r1, r1, #12
 801a56c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a570:	681a      	ldr	r2, [r3, #0]
 801a572:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801a576:	430b      	orrs	r3, r1
 801a578:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801a57a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	695b      	ldr	r3, [r3, #20]
 801a582:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801a586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a58a:	6999      	ldr	r1, [r3, #24]
 801a58c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a590:	681a      	ldr	r2, [r3, #0]
 801a592:	ea40 0301 	orr.w	r3, r0, r1
 801a596:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801a598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a59c:	681a      	ldr	r2, [r3, #0]
 801a59e:	4b8f      	ldr	r3, [pc, #572]	; (801a7dc <UART_SetConfig+0x2cc>)
 801a5a0:	429a      	cmp	r2, r3
 801a5a2:	d005      	beq.n	801a5b0 <UART_SetConfig+0xa0>
 801a5a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a5a8:	681a      	ldr	r2, [r3, #0]
 801a5aa:	4b8d      	ldr	r3, [pc, #564]	; (801a7e0 <UART_SetConfig+0x2d0>)
 801a5ac:	429a      	cmp	r2, r3
 801a5ae:	d104      	bne.n	801a5ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801a5b0:	f7fe f8d2 	bl	8018758 <HAL_RCC_GetPCLK2Freq>
 801a5b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801a5b8:	e003      	b.n	801a5c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801a5ba:	f7fe f8b9 	bl	8018730 <HAL_RCC_GetPCLK1Freq>
 801a5be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801a5c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a5c6:	69db      	ldr	r3, [r3, #28]
 801a5c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a5cc:	f040 810c 	bne.w	801a7e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801a5d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801a5d4:	2200      	movs	r2, #0
 801a5d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801a5da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801a5de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801a5e2:	4622      	mov	r2, r4
 801a5e4:	462b      	mov	r3, r5
 801a5e6:	1891      	adds	r1, r2, r2
 801a5e8:	65b9      	str	r1, [r7, #88]	; 0x58
 801a5ea:	415b      	adcs	r3, r3
 801a5ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 801a5ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801a5f2:	4621      	mov	r1, r4
 801a5f4:	eb12 0801 	adds.w	r8, r2, r1
 801a5f8:	4629      	mov	r1, r5
 801a5fa:	eb43 0901 	adc.w	r9, r3, r1
 801a5fe:	f04f 0200 	mov.w	r2, #0
 801a602:	f04f 0300 	mov.w	r3, #0
 801a606:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801a60a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801a60e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801a612:	4690      	mov	r8, r2
 801a614:	4699      	mov	r9, r3
 801a616:	4623      	mov	r3, r4
 801a618:	eb18 0303 	adds.w	r3, r8, r3
 801a61c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801a620:	462b      	mov	r3, r5
 801a622:	eb49 0303 	adc.w	r3, r9, r3
 801a626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801a62a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a62e:	685b      	ldr	r3, [r3, #4]
 801a630:	2200      	movs	r2, #0
 801a632:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801a636:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801a63a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801a63e:	460b      	mov	r3, r1
 801a640:	18db      	adds	r3, r3, r3
 801a642:	653b      	str	r3, [r7, #80]	; 0x50
 801a644:	4613      	mov	r3, r2
 801a646:	eb42 0303 	adc.w	r3, r2, r3
 801a64a:	657b      	str	r3, [r7, #84]	; 0x54
 801a64c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801a650:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801a654:	f7e6 fb08 	bl	8000c68 <__aeabi_uldivmod>
 801a658:	4602      	mov	r2, r0
 801a65a:	460b      	mov	r3, r1
 801a65c:	4b61      	ldr	r3, [pc, #388]	; (801a7e4 <UART_SetConfig+0x2d4>)
 801a65e:	fba3 2302 	umull	r2, r3, r3, r2
 801a662:	095b      	lsrs	r3, r3, #5
 801a664:	011c      	lsls	r4, r3, #4
 801a666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801a66a:	2200      	movs	r2, #0
 801a66c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801a670:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801a674:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801a678:	4642      	mov	r2, r8
 801a67a:	464b      	mov	r3, r9
 801a67c:	1891      	adds	r1, r2, r2
 801a67e:	64b9      	str	r1, [r7, #72]	; 0x48
 801a680:	415b      	adcs	r3, r3
 801a682:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a684:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801a688:	4641      	mov	r1, r8
 801a68a:	eb12 0a01 	adds.w	sl, r2, r1
 801a68e:	4649      	mov	r1, r9
 801a690:	eb43 0b01 	adc.w	fp, r3, r1
 801a694:	f04f 0200 	mov.w	r2, #0
 801a698:	f04f 0300 	mov.w	r3, #0
 801a69c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801a6a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801a6a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801a6a8:	4692      	mov	sl, r2
 801a6aa:	469b      	mov	fp, r3
 801a6ac:	4643      	mov	r3, r8
 801a6ae:	eb1a 0303 	adds.w	r3, sl, r3
 801a6b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801a6b6:	464b      	mov	r3, r9
 801a6b8:	eb4b 0303 	adc.w	r3, fp, r3
 801a6bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801a6c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a6c4:	685b      	ldr	r3, [r3, #4]
 801a6c6:	2200      	movs	r2, #0
 801a6c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801a6cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801a6d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801a6d4:	460b      	mov	r3, r1
 801a6d6:	18db      	adds	r3, r3, r3
 801a6d8:	643b      	str	r3, [r7, #64]	; 0x40
 801a6da:	4613      	mov	r3, r2
 801a6dc:	eb42 0303 	adc.w	r3, r2, r3
 801a6e0:	647b      	str	r3, [r7, #68]	; 0x44
 801a6e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801a6e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801a6ea:	f7e6 fabd 	bl	8000c68 <__aeabi_uldivmod>
 801a6ee:	4602      	mov	r2, r0
 801a6f0:	460b      	mov	r3, r1
 801a6f2:	4611      	mov	r1, r2
 801a6f4:	4b3b      	ldr	r3, [pc, #236]	; (801a7e4 <UART_SetConfig+0x2d4>)
 801a6f6:	fba3 2301 	umull	r2, r3, r3, r1
 801a6fa:	095b      	lsrs	r3, r3, #5
 801a6fc:	2264      	movs	r2, #100	; 0x64
 801a6fe:	fb02 f303 	mul.w	r3, r2, r3
 801a702:	1acb      	subs	r3, r1, r3
 801a704:	00db      	lsls	r3, r3, #3
 801a706:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801a70a:	4b36      	ldr	r3, [pc, #216]	; (801a7e4 <UART_SetConfig+0x2d4>)
 801a70c:	fba3 2302 	umull	r2, r3, r3, r2
 801a710:	095b      	lsrs	r3, r3, #5
 801a712:	005b      	lsls	r3, r3, #1
 801a714:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801a718:	441c      	add	r4, r3
 801a71a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801a71e:	2200      	movs	r2, #0
 801a720:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801a724:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801a728:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801a72c:	4642      	mov	r2, r8
 801a72e:	464b      	mov	r3, r9
 801a730:	1891      	adds	r1, r2, r2
 801a732:	63b9      	str	r1, [r7, #56]	; 0x38
 801a734:	415b      	adcs	r3, r3
 801a736:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a738:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801a73c:	4641      	mov	r1, r8
 801a73e:	1851      	adds	r1, r2, r1
 801a740:	6339      	str	r1, [r7, #48]	; 0x30
 801a742:	4649      	mov	r1, r9
 801a744:	414b      	adcs	r3, r1
 801a746:	637b      	str	r3, [r7, #52]	; 0x34
 801a748:	f04f 0200 	mov.w	r2, #0
 801a74c:	f04f 0300 	mov.w	r3, #0
 801a750:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801a754:	4659      	mov	r1, fp
 801a756:	00cb      	lsls	r3, r1, #3
 801a758:	4651      	mov	r1, sl
 801a75a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801a75e:	4651      	mov	r1, sl
 801a760:	00ca      	lsls	r2, r1, #3
 801a762:	4610      	mov	r0, r2
 801a764:	4619      	mov	r1, r3
 801a766:	4603      	mov	r3, r0
 801a768:	4642      	mov	r2, r8
 801a76a:	189b      	adds	r3, r3, r2
 801a76c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801a770:	464b      	mov	r3, r9
 801a772:	460a      	mov	r2, r1
 801a774:	eb42 0303 	adc.w	r3, r2, r3
 801a778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801a77c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a780:	685b      	ldr	r3, [r3, #4]
 801a782:	2200      	movs	r2, #0
 801a784:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801a788:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801a78c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801a790:	460b      	mov	r3, r1
 801a792:	18db      	adds	r3, r3, r3
 801a794:	62bb      	str	r3, [r7, #40]	; 0x28
 801a796:	4613      	mov	r3, r2
 801a798:	eb42 0303 	adc.w	r3, r2, r3
 801a79c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a79e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801a7a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801a7a6:	f7e6 fa5f 	bl	8000c68 <__aeabi_uldivmod>
 801a7aa:	4602      	mov	r2, r0
 801a7ac:	460b      	mov	r3, r1
 801a7ae:	4b0d      	ldr	r3, [pc, #52]	; (801a7e4 <UART_SetConfig+0x2d4>)
 801a7b0:	fba3 1302 	umull	r1, r3, r3, r2
 801a7b4:	095b      	lsrs	r3, r3, #5
 801a7b6:	2164      	movs	r1, #100	; 0x64
 801a7b8:	fb01 f303 	mul.w	r3, r1, r3
 801a7bc:	1ad3      	subs	r3, r2, r3
 801a7be:	00db      	lsls	r3, r3, #3
 801a7c0:	3332      	adds	r3, #50	; 0x32
 801a7c2:	4a08      	ldr	r2, [pc, #32]	; (801a7e4 <UART_SetConfig+0x2d4>)
 801a7c4:	fba2 2303 	umull	r2, r3, r2, r3
 801a7c8:	095b      	lsrs	r3, r3, #5
 801a7ca:	f003 0207 	and.w	r2, r3, #7
 801a7ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a7d2:	681b      	ldr	r3, [r3, #0]
 801a7d4:	4422      	add	r2, r4
 801a7d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801a7d8:	e106      	b.n	801a9e8 <UART_SetConfig+0x4d8>
 801a7da:	bf00      	nop
 801a7dc:	40011000 	.word	0x40011000
 801a7e0:	40011400 	.word	0x40011400
 801a7e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801a7e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801a7ec:	2200      	movs	r2, #0
 801a7ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801a7f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801a7f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801a7fa:	4642      	mov	r2, r8
 801a7fc:	464b      	mov	r3, r9
 801a7fe:	1891      	adds	r1, r2, r2
 801a800:	6239      	str	r1, [r7, #32]
 801a802:	415b      	adcs	r3, r3
 801a804:	627b      	str	r3, [r7, #36]	; 0x24
 801a806:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801a80a:	4641      	mov	r1, r8
 801a80c:	1854      	adds	r4, r2, r1
 801a80e:	4649      	mov	r1, r9
 801a810:	eb43 0501 	adc.w	r5, r3, r1
 801a814:	f04f 0200 	mov.w	r2, #0
 801a818:	f04f 0300 	mov.w	r3, #0
 801a81c:	00eb      	lsls	r3, r5, #3
 801a81e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801a822:	00e2      	lsls	r2, r4, #3
 801a824:	4614      	mov	r4, r2
 801a826:	461d      	mov	r5, r3
 801a828:	4643      	mov	r3, r8
 801a82a:	18e3      	adds	r3, r4, r3
 801a82c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801a830:	464b      	mov	r3, r9
 801a832:	eb45 0303 	adc.w	r3, r5, r3
 801a836:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801a83a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a83e:	685b      	ldr	r3, [r3, #4]
 801a840:	2200      	movs	r2, #0
 801a842:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801a846:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801a84a:	f04f 0200 	mov.w	r2, #0
 801a84e:	f04f 0300 	mov.w	r3, #0
 801a852:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801a856:	4629      	mov	r1, r5
 801a858:	008b      	lsls	r3, r1, #2
 801a85a:	4621      	mov	r1, r4
 801a85c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801a860:	4621      	mov	r1, r4
 801a862:	008a      	lsls	r2, r1, #2
 801a864:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801a868:	f7e6 f9fe 	bl	8000c68 <__aeabi_uldivmod>
 801a86c:	4602      	mov	r2, r0
 801a86e:	460b      	mov	r3, r1
 801a870:	4b60      	ldr	r3, [pc, #384]	; (801a9f4 <UART_SetConfig+0x4e4>)
 801a872:	fba3 2302 	umull	r2, r3, r3, r2
 801a876:	095b      	lsrs	r3, r3, #5
 801a878:	011c      	lsls	r4, r3, #4
 801a87a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801a87e:	2200      	movs	r2, #0
 801a880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801a884:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801a888:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801a88c:	4642      	mov	r2, r8
 801a88e:	464b      	mov	r3, r9
 801a890:	1891      	adds	r1, r2, r2
 801a892:	61b9      	str	r1, [r7, #24]
 801a894:	415b      	adcs	r3, r3
 801a896:	61fb      	str	r3, [r7, #28]
 801a898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a89c:	4641      	mov	r1, r8
 801a89e:	1851      	adds	r1, r2, r1
 801a8a0:	6139      	str	r1, [r7, #16]
 801a8a2:	4649      	mov	r1, r9
 801a8a4:	414b      	adcs	r3, r1
 801a8a6:	617b      	str	r3, [r7, #20]
 801a8a8:	f04f 0200 	mov.w	r2, #0
 801a8ac:	f04f 0300 	mov.w	r3, #0
 801a8b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801a8b4:	4659      	mov	r1, fp
 801a8b6:	00cb      	lsls	r3, r1, #3
 801a8b8:	4651      	mov	r1, sl
 801a8ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801a8be:	4651      	mov	r1, sl
 801a8c0:	00ca      	lsls	r2, r1, #3
 801a8c2:	4610      	mov	r0, r2
 801a8c4:	4619      	mov	r1, r3
 801a8c6:	4603      	mov	r3, r0
 801a8c8:	4642      	mov	r2, r8
 801a8ca:	189b      	adds	r3, r3, r2
 801a8cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801a8d0:	464b      	mov	r3, r9
 801a8d2:	460a      	mov	r2, r1
 801a8d4:	eb42 0303 	adc.w	r3, r2, r3
 801a8d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801a8dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a8e0:	685b      	ldr	r3, [r3, #4]
 801a8e2:	2200      	movs	r2, #0
 801a8e4:	67bb      	str	r3, [r7, #120]	; 0x78
 801a8e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 801a8e8:	f04f 0200 	mov.w	r2, #0
 801a8ec:	f04f 0300 	mov.w	r3, #0
 801a8f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801a8f4:	4649      	mov	r1, r9
 801a8f6:	008b      	lsls	r3, r1, #2
 801a8f8:	4641      	mov	r1, r8
 801a8fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801a8fe:	4641      	mov	r1, r8
 801a900:	008a      	lsls	r2, r1, #2
 801a902:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801a906:	f7e6 f9af 	bl	8000c68 <__aeabi_uldivmod>
 801a90a:	4602      	mov	r2, r0
 801a90c:	460b      	mov	r3, r1
 801a90e:	4611      	mov	r1, r2
 801a910:	4b38      	ldr	r3, [pc, #224]	; (801a9f4 <UART_SetConfig+0x4e4>)
 801a912:	fba3 2301 	umull	r2, r3, r3, r1
 801a916:	095b      	lsrs	r3, r3, #5
 801a918:	2264      	movs	r2, #100	; 0x64
 801a91a:	fb02 f303 	mul.w	r3, r2, r3
 801a91e:	1acb      	subs	r3, r1, r3
 801a920:	011b      	lsls	r3, r3, #4
 801a922:	3332      	adds	r3, #50	; 0x32
 801a924:	4a33      	ldr	r2, [pc, #204]	; (801a9f4 <UART_SetConfig+0x4e4>)
 801a926:	fba2 2303 	umull	r2, r3, r2, r3
 801a92a:	095b      	lsrs	r3, r3, #5
 801a92c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a930:	441c      	add	r4, r3
 801a932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801a936:	2200      	movs	r2, #0
 801a938:	673b      	str	r3, [r7, #112]	; 0x70
 801a93a:	677a      	str	r2, [r7, #116]	; 0x74
 801a93c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801a940:	4642      	mov	r2, r8
 801a942:	464b      	mov	r3, r9
 801a944:	1891      	adds	r1, r2, r2
 801a946:	60b9      	str	r1, [r7, #8]
 801a948:	415b      	adcs	r3, r3
 801a94a:	60fb      	str	r3, [r7, #12]
 801a94c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801a950:	4641      	mov	r1, r8
 801a952:	1851      	adds	r1, r2, r1
 801a954:	6039      	str	r1, [r7, #0]
 801a956:	4649      	mov	r1, r9
 801a958:	414b      	adcs	r3, r1
 801a95a:	607b      	str	r3, [r7, #4]
 801a95c:	f04f 0200 	mov.w	r2, #0
 801a960:	f04f 0300 	mov.w	r3, #0
 801a964:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801a968:	4659      	mov	r1, fp
 801a96a:	00cb      	lsls	r3, r1, #3
 801a96c:	4651      	mov	r1, sl
 801a96e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801a972:	4651      	mov	r1, sl
 801a974:	00ca      	lsls	r2, r1, #3
 801a976:	4610      	mov	r0, r2
 801a978:	4619      	mov	r1, r3
 801a97a:	4603      	mov	r3, r0
 801a97c:	4642      	mov	r2, r8
 801a97e:	189b      	adds	r3, r3, r2
 801a980:	66bb      	str	r3, [r7, #104]	; 0x68
 801a982:	464b      	mov	r3, r9
 801a984:	460a      	mov	r2, r1
 801a986:	eb42 0303 	adc.w	r3, r2, r3
 801a98a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801a98c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a990:	685b      	ldr	r3, [r3, #4]
 801a992:	2200      	movs	r2, #0
 801a994:	663b      	str	r3, [r7, #96]	; 0x60
 801a996:	667a      	str	r2, [r7, #100]	; 0x64
 801a998:	f04f 0200 	mov.w	r2, #0
 801a99c:	f04f 0300 	mov.w	r3, #0
 801a9a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801a9a4:	4649      	mov	r1, r9
 801a9a6:	008b      	lsls	r3, r1, #2
 801a9a8:	4641      	mov	r1, r8
 801a9aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801a9ae:	4641      	mov	r1, r8
 801a9b0:	008a      	lsls	r2, r1, #2
 801a9b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801a9b6:	f7e6 f957 	bl	8000c68 <__aeabi_uldivmod>
 801a9ba:	4602      	mov	r2, r0
 801a9bc:	460b      	mov	r3, r1
 801a9be:	4b0d      	ldr	r3, [pc, #52]	; (801a9f4 <UART_SetConfig+0x4e4>)
 801a9c0:	fba3 1302 	umull	r1, r3, r3, r2
 801a9c4:	095b      	lsrs	r3, r3, #5
 801a9c6:	2164      	movs	r1, #100	; 0x64
 801a9c8:	fb01 f303 	mul.w	r3, r1, r3
 801a9cc:	1ad3      	subs	r3, r2, r3
 801a9ce:	011b      	lsls	r3, r3, #4
 801a9d0:	3332      	adds	r3, #50	; 0x32
 801a9d2:	4a08      	ldr	r2, [pc, #32]	; (801a9f4 <UART_SetConfig+0x4e4>)
 801a9d4:	fba2 2303 	umull	r2, r3, r2, r3
 801a9d8:	095b      	lsrs	r3, r3, #5
 801a9da:	f003 020f 	and.w	r2, r3, #15
 801a9de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a9e2:	681b      	ldr	r3, [r3, #0]
 801a9e4:	4422      	add	r2, r4
 801a9e6:	609a      	str	r2, [r3, #8]
}
 801a9e8:	bf00      	nop
 801a9ea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801a9ee:	46bd      	mov	sp, r7
 801a9f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a9f4:	51eb851f 	.word	0x51eb851f

0801a9f8 <LL_GPIO_SetPinMode>:
{
 801a9f8:	b480      	push	{r7}
 801a9fa:	b08b      	sub	sp, #44	; 0x2c
 801a9fc:	af00      	add	r7, sp, #0
 801a9fe:	60f8      	str	r0, [r7, #12]
 801aa00:	60b9      	str	r1, [r7, #8]
 801aa02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801aa04:	68fb      	ldr	r3, [r7, #12]
 801aa06:	681a      	ldr	r2, [r3, #0]
 801aa08:	68bb      	ldr	r3, [r7, #8]
 801aa0a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801aa0c:	697b      	ldr	r3, [r7, #20]
 801aa0e:	fa93 f3a3 	rbit	r3, r3
 801aa12:	613b      	str	r3, [r7, #16]
  return result;
 801aa14:	693b      	ldr	r3, [r7, #16]
 801aa16:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801aa18:	69bb      	ldr	r3, [r7, #24]
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d101      	bne.n	801aa22 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 801aa1e:	2320      	movs	r3, #32
 801aa20:	e003      	b.n	801aa2a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 801aa22:	69bb      	ldr	r3, [r7, #24]
 801aa24:	fab3 f383 	clz	r3, r3
 801aa28:	b2db      	uxtb	r3, r3
 801aa2a:	005b      	lsls	r3, r3, #1
 801aa2c:	2103      	movs	r1, #3
 801aa2e:	fa01 f303 	lsl.w	r3, r1, r3
 801aa32:	43db      	mvns	r3, r3
 801aa34:	401a      	ands	r2, r3
 801aa36:	68bb      	ldr	r3, [r7, #8]
 801aa38:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801aa3a:	6a3b      	ldr	r3, [r7, #32]
 801aa3c:	fa93 f3a3 	rbit	r3, r3
 801aa40:	61fb      	str	r3, [r7, #28]
  return result;
 801aa42:	69fb      	ldr	r3, [r7, #28]
 801aa44:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801aa46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	d101      	bne.n	801aa50 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 801aa4c:	2320      	movs	r3, #32
 801aa4e:	e003      	b.n	801aa58 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 801aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa52:	fab3 f383 	clz	r3, r3
 801aa56:	b2db      	uxtb	r3, r3
 801aa58:	005b      	lsls	r3, r3, #1
 801aa5a:	6879      	ldr	r1, [r7, #4]
 801aa5c:	fa01 f303 	lsl.w	r3, r1, r3
 801aa60:	431a      	orrs	r2, r3
 801aa62:	68fb      	ldr	r3, [r7, #12]
 801aa64:	601a      	str	r2, [r3, #0]
}
 801aa66:	bf00      	nop
 801aa68:	372c      	adds	r7, #44	; 0x2c
 801aa6a:	46bd      	mov	sp, r7
 801aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa70:	4770      	bx	lr

0801aa72 <LL_GPIO_SetPinOutputType>:
{
 801aa72:	b480      	push	{r7}
 801aa74:	b085      	sub	sp, #20
 801aa76:	af00      	add	r7, sp, #0
 801aa78:	60f8      	str	r0, [r7, #12]
 801aa7a:	60b9      	str	r1, [r7, #8]
 801aa7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801aa7e:	68fb      	ldr	r3, [r7, #12]
 801aa80:	685a      	ldr	r2, [r3, #4]
 801aa82:	68bb      	ldr	r3, [r7, #8]
 801aa84:	43db      	mvns	r3, r3
 801aa86:	401a      	ands	r2, r3
 801aa88:	68bb      	ldr	r3, [r7, #8]
 801aa8a:	6879      	ldr	r1, [r7, #4]
 801aa8c:	fb01 f303 	mul.w	r3, r1, r3
 801aa90:	431a      	orrs	r2, r3
 801aa92:	68fb      	ldr	r3, [r7, #12]
 801aa94:	605a      	str	r2, [r3, #4]
}
 801aa96:	bf00      	nop
 801aa98:	3714      	adds	r7, #20
 801aa9a:	46bd      	mov	sp, r7
 801aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaa0:	4770      	bx	lr

0801aaa2 <LL_GPIO_SetPinSpeed>:
{
 801aaa2:	b480      	push	{r7}
 801aaa4:	b08b      	sub	sp, #44	; 0x2c
 801aaa6:	af00      	add	r7, sp, #0
 801aaa8:	60f8      	str	r0, [r7, #12]
 801aaaa:	60b9      	str	r1, [r7, #8]
 801aaac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 801aaae:	68fb      	ldr	r3, [r7, #12]
 801aab0:	689a      	ldr	r2, [r3, #8]
 801aab2:	68bb      	ldr	r3, [r7, #8]
 801aab4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801aab6:	697b      	ldr	r3, [r7, #20]
 801aab8:	fa93 f3a3 	rbit	r3, r3
 801aabc:	613b      	str	r3, [r7, #16]
  return result;
 801aabe:	693b      	ldr	r3, [r7, #16]
 801aac0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801aac2:	69bb      	ldr	r3, [r7, #24]
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d101      	bne.n	801aacc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 801aac8:	2320      	movs	r3, #32
 801aaca:	e003      	b.n	801aad4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 801aacc:	69bb      	ldr	r3, [r7, #24]
 801aace:	fab3 f383 	clz	r3, r3
 801aad2:	b2db      	uxtb	r3, r3
 801aad4:	005b      	lsls	r3, r3, #1
 801aad6:	2103      	movs	r1, #3
 801aad8:	fa01 f303 	lsl.w	r3, r1, r3
 801aadc:	43db      	mvns	r3, r3
 801aade:	401a      	ands	r2, r3
 801aae0:	68bb      	ldr	r3, [r7, #8]
 801aae2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801aae4:	6a3b      	ldr	r3, [r7, #32]
 801aae6:	fa93 f3a3 	rbit	r3, r3
 801aaea:	61fb      	str	r3, [r7, #28]
  return result;
 801aaec:	69fb      	ldr	r3, [r7, #28]
 801aaee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801aaf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	d101      	bne.n	801aafa <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 801aaf6:	2320      	movs	r3, #32
 801aaf8:	e003      	b.n	801ab02 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 801aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aafc:	fab3 f383 	clz	r3, r3
 801ab00:	b2db      	uxtb	r3, r3
 801ab02:	005b      	lsls	r3, r3, #1
 801ab04:	6879      	ldr	r1, [r7, #4]
 801ab06:	fa01 f303 	lsl.w	r3, r1, r3
 801ab0a:	431a      	orrs	r2, r3
 801ab0c:	68fb      	ldr	r3, [r7, #12]
 801ab0e:	609a      	str	r2, [r3, #8]
}
 801ab10:	bf00      	nop
 801ab12:	372c      	adds	r7, #44	; 0x2c
 801ab14:	46bd      	mov	sp, r7
 801ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab1a:	4770      	bx	lr

0801ab1c <LL_GPIO_SetPinPull>:
{
 801ab1c:	b480      	push	{r7}
 801ab1e:	b08b      	sub	sp, #44	; 0x2c
 801ab20:	af00      	add	r7, sp, #0
 801ab22:	60f8      	str	r0, [r7, #12]
 801ab24:	60b9      	str	r1, [r7, #8]
 801ab26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 801ab28:	68fb      	ldr	r3, [r7, #12]
 801ab2a:	68da      	ldr	r2, [r3, #12]
 801ab2c:	68bb      	ldr	r3, [r7, #8]
 801ab2e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ab30:	697b      	ldr	r3, [r7, #20]
 801ab32:	fa93 f3a3 	rbit	r3, r3
 801ab36:	613b      	str	r3, [r7, #16]
  return result;
 801ab38:	693b      	ldr	r3, [r7, #16]
 801ab3a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801ab3c:	69bb      	ldr	r3, [r7, #24]
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	d101      	bne.n	801ab46 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 801ab42:	2320      	movs	r3, #32
 801ab44:	e003      	b.n	801ab4e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 801ab46:	69bb      	ldr	r3, [r7, #24]
 801ab48:	fab3 f383 	clz	r3, r3
 801ab4c:	b2db      	uxtb	r3, r3
 801ab4e:	005b      	lsls	r3, r3, #1
 801ab50:	2103      	movs	r1, #3
 801ab52:	fa01 f303 	lsl.w	r3, r1, r3
 801ab56:	43db      	mvns	r3, r3
 801ab58:	401a      	ands	r2, r3
 801ab5a:	68bb      	ldr	r3, [r7, #8]
 801ab5c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ab5e:	6a3b      	ldr	r3, [r7, #32]
 801ab60:	fa93 f3a3 	rbit	r3, r3
 801ab64:	61fb      	str	r3, [r7, #28]
  return result;
 801ab66:	69fb      	ldr	r3, [r7, #28]
 801ab68:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801ab6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d101      	bne.n	801ab74 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 801ab70:	2320      	movs	r3, #32
 801ab72:	e003      	b.n	801ab7c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801ab74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab76:	fab3 f383 	clz	r3, r3
 801ab7a:	b2db      	uxtb	r3, r3
 801ab7c:	005b      	lsls	r3, r3, #1
 801ab7e:	6879      	ldr	r1, [r7, #4]
 801ab80:	fa01 f303 	lsl.w	r3, r1, r3
 801ab84:	431a      	orrs	r2, r3
 801ab86:	68fb      	ldr	r3, [r7, #12]
 801ab88:	60da      	str	r2, [r3, #12]
}
 801ab8a:	bf00      	nop
 801ab8c:	372c      	adds	r7, #44	; 0x2c
 801ab8e:	46bd      	mov	sp, r7
 801ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab94:	4770      	bx	lr

0801ab96 <LL_GPIO_SetAFPin_0_7>:
{
 801ab96:	b480      	push	{r7}
 801ab98:	b08b      	sub	sp, #44	; 0x2c
 801ab9a:	af00      	add	r7, sp, #0
 801ab9c:	60f8      	str	r0, [r7, #12]
 801ab9e:	60b9      	str	r1, [r7, #8]
 801aba0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 801aba2:	68fb      	ldr	r3, [r7, #12]
 801aba4:	6a1a      	ldr	r2, [r3, #32]
 801aba6:	68bb      	ldr	r3, [r7, #8]
 801aba8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801abaa:	697b      	ldr	r3, [r7, #20]
 801abac:	fa93 f3a3 	rbit	r3, r3
 801abb0:	613b      	str	r3, [r7, #16]
  return result;
 801abb2:	693b      	ldr	r3, [r7, #16]
 801abb4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801abb6:	69bb      	ldr	r3, [r7, #24]
 801abb8:	2b00      	cmp	r3, #0
 801abba:	d101      	bne.n	801abc0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 801abbc:	2320      	movs	r3, #32
 801abbe:	e003      	b.n	801abc8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 801abc0:	69bb      	ldr	r3, [r7, #24]
 801abc2:	fab3 f383 	clz	r3, r3
 801abc6:	b2db      	uxtb	r3, r3
 801abc8:	009b      	lsls	r3, r3, #2
 801abca:	210f      	movs	r1, #15
 801abcc:	fa01 f303 	lsl.w	r3, r1, r3
 801abd0:	43db      	mvns	r3, r3
 801abd2:	401a      	ands	r2, r3
 801abd4:	68bb      	ldr	r3, [r7, #8]
 801abd6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801abd8:	6a3b      	ldr	r3, [r7, #32]
 801abda:	fa93 f3a3 	rbit	r3, r3
 801abde:	61fb      	str	r3, [r7, #28]
  return result;
 801abe0:	69fb      	ldr	r3, [r7, #28]
 801abe2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d101      	bne.n	801abee <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 801abea:	2320      	movs	r3, #32
 801abec:	e003      	b.n	801abf6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 801abee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abf0:	fab3 f383 	clz	r3, r3
 801abf4:	b2db      	uxtb	r3, r3
 801abf6:	009b      	lsls	r3, r3, #2
 801abf8:	6879      	ldr	r1, [r7, #4]
 801abfa:	fa01 f303 	lsl.w	r3, r1, r3
 801abfe:	431a      	orrs	r2, r3
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	621a      	str	r2, [r3, #32]
}
 801ac04:	bf00      	nop
 801ac06:	372c      	adds	r7, #44	; 0x2c
 801ac08:	46bd      	mov	sp, r7
 801ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac0e:	4770      	bx	lr

0801ac10 <LL_GPIO_SetAFPin_8_15>:
{
 801ac10:	b480      	push	{r7}
 801ac12:	b08b      	sub	sp, #44	; 0x2c
 801ac14:	af00      	add	r7, sp, #0
 801ac16:	60f8      	str	r0, [r7, #12]
 801ac18:	60b9      	str	r1, [r7, #8]
 801ac1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 801ac1c:	68fb      	ldr	r3, [r7, #12]
 801ac1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ac20:	68bb      	ldr	r3, [r7, #8]
 801ac22:	0a1b      	lsrs	r3, r3, #8
 801ac24:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ac26:	697b      	ldr	r3, [r7, #20]
 801ac28:	fa93 f3a3 	rbit	r3, r3
 801ac2c:	613b      	str	r3, [r7, #16]
  return result;
 801ac2e:	693b      	ldr	r3, [r7, #16]
 801ac30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801ac32:	69bb      	ldr	r3, [r7, #24]
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	d101      	bne.n	801ac3c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 801ac38:	2320      	movs	r3, #32
 801ac3a:	e003      	b.n	801ac44 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 801ac3c:	69bb      	ldr	r3, [r7, #24]
 801ac3e:	fab3 f383 	clz	r3, r3
 801ac42:	b2db      	uxtb	r3, r3
 801ac44:	009b      	lsls	r3, r3, #2
 801ac46:	210f      	movs	r1, #15
 801ac48:	fa01 f303 	lsl.w	r3, r1, r3
 801ac4c:	43db      	mvns	r3, r3
 801ac4e:	401a      	ands	r2, r3
 801ac50:	68bb      	ldr	r3, [r7, #8]
 801ac52:	0a1b      	lsrs	r3, r3, #8
 801ac54:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ac56:	6a3b      	ldr	r3, [r7, #32]
 801ac58:	fa93 f3a3 	rbit	r3, r3
 801ac5c:	61fb      	str	r3, [r7, #28]
  return result;
 801ac5e:	69fb      	ldr	r3, [r7, #28]
 801ac60:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801ac62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac64:	2b00      	cmp	r3, #0
 801ac66:	d101      	bne.n	801ac6c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 801ac68:	2320      	movs	r3, #32
 801ac6a:	e003      	b.n	801ac74 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 801ac6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac6e:	fab3 f383 	clz	r3, r3
 801ac72:	b2db      	uxtb	r3, r3
 801ac74:	009b      	lsls	r3, r3, #2
 801ac76:	6879      	ldr	r1, [r7, #4]
 801ac78:	fa01 f303 	lsl.w	r3, r1, r3
 801ac7c:	431a      	orrs	r2, r3
 801ac7e:	68fb      	ldr	r3, [r7, #12]
 801ac80:	625a      	str	r2, [r3, #36]	; 0x24
}
 801ac82:	bf00      	nop
 801ac84:	372c      	adds	r7, #44	; 0x2c
 801ac86:	46bd      	mov	sp, r7
 801ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac8c:	4770      	bx	lr

0801ac8e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801ac8e:	b580      	push	{r7, lr}
 801ac90:	b08a      	sub	sp, #40	; 0x28
 801ac92:	af00      	add	r7, sp, #0
 801ac94:	6078      	str	r0, [r7, #4]
 801ac96:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 801ac98:	2300      	movs	r3, #0
 801ac9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 801ac9c:	2300      	movs	r3, #0
 801ac9e:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 801aca0:	683b      	ldr	r3, [r7, #0]
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801aca6:	69bb      	ldr	r3, [r7, #24]
 801aca8:	fa93 f3a3 	rbit	r3, r3
 801acac:	617b      	str	r3, [r7, #20]
  return result;
 801acae:	697b      	ldr	r3, [r7, #20]
 801acb0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 801acb2:	69fb      	ldr	r3, [r7, #28]
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d101      	bne.n	801acbc <LL_GPIO_Init+0x2e>
    return 32U;
 801acb8:	2320      	movs	r3, #32
 801acba:	e003      	b.n	801acc4 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 801acbc:	69fb      	ldr	r3, [r7, #28]
 801acbe:	fab3 f383 	clz	r3, r3
 801acc2:	b2db      	uxtb	r3, r3
 801acc4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801acc6:	e057      	b.n	801ad78 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 801acc8:	683b      	ldr	r3, [r7, #0]
 801acca:	681a      	ldr	r2, [r3, #0]
 801accc:	2101      	movs	r1, #1
 801acce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acd0:	fa01 f303 	lsl.w	r3, r1, r3
 801acd4:	4013      	ands	r3, r2
 801acd6:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 801acd8:	6a3b      	ldr	r3, [r7, #32]
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d049      	beq.n	801ad72 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 801acde:	683b      	ldr	r3, [r7, #0]
 801ace0:	685b      	ldr	r3, [r3, #4]
 801ace2:	2b01      	cmp	r3, #1
 801ace4:	d003      	beq.n	801acee <LL_GPIO_Init+0x60>
 801ace6:	683b      	ldr	r3, [r7, #0]
 801ace8:	685b      	ldr	r3, [r3, #4]
 801acea:	2b02      	cmp	r3, #2
 801acec:	d10d      	bne.n	801ad0a <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 801acee:	683b      	ldr	r3, [r7, #0]
 801acf0:	689b      	ldr	r3, [r3, #8]
 801acf2:	461a      	mov	r2, r3
 801acf4:	6a39      	ldr	r1, [r7, #32]
 801acf6:	6878      	ldr	r0, [r7, #4]
 801acf8:	f7ff fed3 	bl	801aaa2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 801acfc:	683b      	ldr	r3, [r7, #0]
 801acfe:	68db      	ldr	r3, [r3, #12]
 801ad00:	461a      	mov	r2, r3
 801ad02:	6a39      	ldr	r1, [r7, #32]
 801ad04:	6878      	ldr	r0, [r7, #4]
 801ad06:	f7ff feb4 	bl	801aa72 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 801ad0a:	683b      	ldr	r3, [r7, #0]
 801ad0c:	691b      	ldr	r3, [r3, #16]
 801ad0e:	461a      	mov	r2, r3
 801ad10:	6a39      	ldr	r1, [r7, #32]
 801ad12:	6878      	ldr	r0, [r7, #4]
 801ad14:	f7ff ff02 	bl	801ab1c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 801ad18:	683b      	ldr	r3, [r7, #0]
 801ad1a:	685b      	ldr	r3, [r3, #4]
 801ad1c:	2b02      	cmp	r3, #2
 801ad1e:	d121      	bne.n	801ad64 <LL_GPIO_Init+0xd6>
 801ad20:	6a3b      	ldr	r3, [r7, #32]
 801ad22:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ad24:	68fb      	ldr	r3, [r7, #12]
 801ad26:	fa93 f3a3 	rbit	r3, r3
 801ad2a:	60bb      	str	r3, [r7, #8]
  return result;
 801ad2c:	68bb      	ldr	r3, [r7, #8]
 801ad2e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 801ad30:	693b      	ldr	r3, [r7, #16]
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d101      	bne.n	801ad3a <LL_GPIO_Init+0xac>
    return 32U;
 801ad36:	2320      	movs	r3, #32
 801ad38:	e003      	b.n	801ad42 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 801ad3a:	693b      	ldr	r3, [r7, #16]
 801ad3c:	fab3 f383 	clz	r3, r3
 801ad40:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 801ad42:	2b07      	cmp	r3, #7
 801ad44:	d807      	bhi.n	801ad56 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801ad46:	683b      	ldr	r3, [r7, #0]
 801ad48:	695b      	ldr	r3, [r3, #20]
 801ad4a:	461a      	mov	r2, r3
 801ad4c:	6a39      	ldr	r1, [r7, #32]
 801ad4e:	6878      	ldr	r0, [r7, #4]
 801ad50:	f7ff ff21 	bl	801ab96 <LL_GPIO_SetAFPin_0_7>
 801ad54:	e006      	b.n	801ad64 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801ad56:	683b      	ldr	r3, [r7, #0]
 801ad58:	695b      	ldr	r3, [r3, #20]
 801ad5a:	461a      	mov	r2, r3
 801ad5c:	6a39      	ldr	r1, [r7, #32]
 801ad5e:	6878      	ldr	r0, [r7, #4]
 801ad60:	f7ff ff56 	bl	801ac10 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 801ad64:	683b      	ldr	r3, [r7, #0]
 801ad66:	685b      	ldr	r3, [r3, #4]
 801ad68:	461a      	mov	r2, r3
 801ad6a:	6a39      	ldr	r1, [r7, #32]
 801ad6c:	6878      	ldr	r0, [r7, #4]
 801ad6e:	f7ff fe43 	bl	801a9f8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 801ad72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad74:	3301      	adds	r3, #1
 801ad76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801ad78:	683b      	ldr	r3, [r7, #0]
 801ad7a:	681a      	ldr	r2, [r3, #0]
 801ad7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad7e:	fa22 f303 	lsr.w	r3, r2, r3
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	d1a0      	bne.n	801acc8 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 801ad86:	2300      	movs	r3, #0
}
 801ad88:	4618      	mov	r0, r3
 801ad8a:	3728      	adds	r7, #40	; 0x28
 801ad8c:	46bd      	mov	sp, r7
 801ad8e:	bd80      	pop	{r7, pc}

0801ad90 <LL_SPI_IsEnabled>:
{
 801ad90:	b480      	push	{r7}
 801ad92:	b083      	sub	sp, #12
 801ad94:	af00      	add	r7, sp, #0
 801ad96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	681b      	ldr	r3, [r3, #0]
 801ad9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ada0:	2b40      	cmp	r3, #64	; 0x40
 801ada2:	d101      	bne.n	801ada8 <LL_SPI_IsEnabled+0x18>
 801ada4:	2301      	movs	r3, #1
 801ada6:	e000      	b.n	801adaa <LL_SPI_IsEnabled+0x1a>
 801ada8:	2300      	movs	r3, #0
}
 801adaa:	4618      	mov	r0, r3
 801adac:	370c      	adds	r7, #12
 801adae:	46bd      	mov	sp, r7
 801adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adb4:	4770      	bx	lr

0801adb6 <LL_SPI_SetCRCPolynomial>:
{
 801adb6:	b480      	push	{r7}
 801adb8:	b083      	sub	sp, #12
 801adba:	af00      	add	r7, sp, #0
 801adbc:	6078      	str	r0, [r7, #4]
 801adbe:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 801adc0:	683b      	ldr	r3, [r7, #0]
 801adc2:	b29b      	uxth	r3, r3
 801adc4:	461a      	mov	r2, r3
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	611a      	str	r2, [r3, #16]
}
 801adca:	bf00      	nop
 801adcc:	370c      	adds	r7, #12
 801adce:	46bd      	mov	sp, r7
 801add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801add4:	4770      	bx	lr

0801add6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 801add6:	b580      	push	{r7, lr}
 801add8:	b084      	sub	sp, #16
 801adda:	af00      	add	r7, sp, #0
 801addc:	6078      	str	r0, [r7, #4]
 801adde:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 801ade0:	2301      	movs	r3, #1
 801ade2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 801ade4:	6878      	ldr	r0, [r7, #4]
 801ade6:	f7ff ffd3 	bl	801ad90 <LL_SPI_IsEnabled>
 801adea:	4603      	mov	r3, r0
 801adec:	2b00      	cmp	r3, #0
 801adee:	d139      	bne.n	801ae64 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801adf8:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 801adfc:	683a      	ldr	r2, [r7, #0]
 801adfe:	6811      	ldr	r1, [r2, #0]
 801ae00:	683a      	ldr	r2, [r7, #0]
 801ae02:	6852      	ldr	r2, [r2, #4]
 801ae04:	4311      	orrs	r1, r2
 801ae06:	683a      	ldr	r2, [r7, #0]
 801ae08:	6892      	ldr	r2, [r2, #8]
 801ae0a:	4311      	orrs	r1, r2
 801ae0c:	683a      	ldr	r2, [r7, #0]
 801ae0e:	68d2      	ldr	r2, [r2, #12]
 801ae10:	4311      	orrs	r1, r2
 801ae12:	683a      	ldr	r2, [r7, #0]
 801ae14:	6912      	ldr	r2, [r2, #16]
 801ae16:	4311      	orrs	r1, r2
 801ae18:	683a      	ldr	r2, [r7, #0]
 801ae1a:	6952      	ldr	r2, [r2, #20]
 801ae1c:	4311      	orrs	r1, r2
 801ae1e:	683a      	ldr	r2, [r7, #0]
 801ae20:	6992      	ldr	r2, [r2, #24]
 801ae22:	4311      	orrs	r1, r2
 801ae24:	683a      	ldr	r2, [r7, #0]
 801ae26:	69d2      	ldr	r2, [r2, #28]
 801ae28:	4311      	orrs	r1, r2
 801ae2a:	683a      	ldr	r2, [r7, #0]
 801ae2c:	6a12      	ldr	r2, [r2, #32]
 801ae2e:	430a      	orrs	r2, r1
 801ae30:	431a      	orrs	r2, r3
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	685b      	ldr	r3, [r3, #4]
 801ae3a:	f023 0204 	bic.w	r2, r3, #4
 801ae3e:	683b      	ldr	r3, [r7, #0]
 801ae40:	695b      	ldr	r3, [r3, #20]
 801ae42:	0c1b      	lsrs	r3, r3, #16
 801ae44:	431a      	orrs	r2, r3
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 801ae4a:	683b      	ldr	r3, [r7, #0]
 801ae4c:	6a1b      	ldr	r3, [r3, #32]
 801ae4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ae52:	d105      	bne.n	801ae60 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 801ae54:	683b      	ldr	r3, [r7, #0]
 801ae56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae58:	4619      	mov	r1, r3
 801ae5a:	6878      	ldr	r0, [r7, #4]
 801ae5c:	f7ff ffab 	bl	801adb6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 801ae60:	2300      	movs	r3, #0
 801ae62:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	69db      	ldr	r3, [r3, #28]
 801ae68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	61da      	str	r2, [r3, #28]
  return status;
 801ae70:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae72:	4618      	mov	r0, r3
 801ae74:	3710      	adds	r7, #16
 801ae76:	46bd      	mov	sp, r7
 801ae78:	bd80      	pop	{r7, pc}

0801ae7a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801ae7a:	b084      	sub	sp, #16
 801ae7c:	b580      	push	{r7, lr}
 801ae7e:	b084      	sub	sp, #16
 801ae80:	af00      	add	r7, sp, #0
 801ae82:	6078      	str	r0, [r7, #4]
 801ae84:	f107 001c 	add.w	r0, r7, #28
 801ae88:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801ae8c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801ae90:	2b01      	cmp	r3, #1
 801ae92:	d123      	bne.n	801aedc <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ae98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	68db      	ldr	r3, [r3, #12]
 801aea4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801aea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801aeac:	687a      	ldr	r2, [r7, #4]
 801aeae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	68db      	ldr	r3, [r3, #12]
 801aeb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801aebc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801aec0:	2b01      	cmp	r3, #1
 801aec2:	d105      	bne.n	801aed0 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	68db      	ldr	r3, [r3, #12]
 801aec8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801aed0:	6878      	ldr	r0, [r7, #4]
 801aed2:	f001 fae3 	bl	801c49c <USB_CoreReset>
 801aed6:	4603      	mov	r3, r0
 801aed8:	73fb      	strb	r3, [r7, #15]
 801aeda:	e01b      	b.n	801af14 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	68db      	ldr	r3, [r3, #12]
 801aee0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801aee8:	6878      	ldr	r0, [r7, #4]
 801aeea:	f001 fad7 	bl	801c49c <USB_CoreReset>
 801aeee:	4603      	mov	r3, r0
 801aef0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801aef2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d106      	bne.n	801af08 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aefe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	639a      	str	r2, [r3, #56]	; 0x38
 801af06:	e005      	b.n	801af14 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801af14:	7fbb      	ldrb	r3, [r7, #30]
 801af16:	2b01      	cmp	r3, #1
 801af18:	d10b      	bne.n	801af32 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	689b      	ldr	r3, [r3, #8]
 801af1e:	f043 0206 	orr.w	r2, r3, #6
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	689b      	ldr	r3, [r3, #8]
 801af2a:	f043 0220 	orr.w	r2, r3, #32
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801af32:	7bfb      	ldrb	r3, [r7, #15]
}
 801af34:	4618      	mov	r0, r3
 801af36:	3710      	adds	r7, #16
 801af38:	46bd      	mov	sp, r7
 801af3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801af3e:	b004      	add	sp, #16
 801af40:	4770      	bx	lr
	...

0801af44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801af44:	b480      	push	{r7}
 801af46:	b087      	sub	sp, #28
 801af48:	af00      	add	r7, sp, #0
 801af4a:	60f8      	str	r0, [r7, #12]
 801af4c:	60b9      	str	r1, [r7, #8]
 801af4e:	4613      	mov	r3, r2
 801af50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801af52:	79fb      	ldrb	r3, [r7, #7]
 801af54:	2b02      	cmp	r3, #2
 801af56:	d165      	bne.n	801b024 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801af58:	68bb      	ldr	r3, [r7, #8]
 801af5a:	4a41      	ldr	r2, [pc, #260]	; (801b060 <USB_SetTurnaroundTime+0x11c>)
 801af5c:	4293      	cmp	r3, r2
 801af5e:	d906      	bls.n	801af6e <USB_SetTurnaroundTime+0x2a>
 801af60:	68bb      	ldr	r3, [r7, #8]
 801af62:	4a40      	ldr	r2, [pc, #256]	; (801b064 <USB_SetTurnaroundTime+0x120>)
 801af64:	4293      	cmp	r3, r2
 801af66:	d202      	bcs.n	801af6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801af68:	230f      	movs	r3, #15
 801af6a:	617b      	str	r3, [r7, #20]
 801af6c:	e062      	b.n	801b034 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801af6e:	68bb      	ldr	r3, [r7, #8]
 801af70:	4a3c      	ldr	r2, [pc, #240]	; (801b064 <USB_SetTurnaroundTime+0x120>)
 801af72:	4293      	cmp	r3, r2
 801af74:	d306      	bcc.n	801af84 <USB_SetTurnaroundTime+0x40>
 801af76:	68bb      	ldr	r3, [r7, #8]
 801af78:	4a3b      	ldr	r2, [pc, #236]	; (801b068 <USB_SetTurnaroundTime+0x124>)
 801af7a:	4293      	cmp	r3, r2
 801af7c:	d202      	bcs.n	801af84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801af7e:	230e      	movs	r3, #14
 801af80:	617b      	str	r3, [r7, #20]
 801af82:	e057      	b.n	801b034 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801af84:	68bb      	ldr	r3, [r7, #8]
 801af86:	4a38      	ldr	r2, [pc, #224]	; (801b068 <USB_SetTurnaroundTime+0x124>)
 801af88:	4293      	cmp	r3, r2
 801af8a:	d306      	bcc.n	801af9a <USB_SetTurnaroundTime+0x56>
 801af8c:	68bb      	ldr	r3, [r7, #8]
 801af8e:	4a37      	ldr	r2, [pc, #220]	; (801b06c <USB_SetTurnaroundTime+0x128>)
 801af90:	4293      	cmp	r3, r2
 801af92:	d202      	bcs.n	801af9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801af94:	230d      	movs	r3, #13
 801af96:	617b      	str	r3, [r7, #20]
 801af98:	e04c      	b.n	801b034 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801af9a:	68bb      	ldr	r3, [r7, #8]
 801af9c:	4a33      	ldr	r2, [pc, #204]	; (801b06c <USB_SetTurnaroundTime+0x128>)
 801af9e:	4293      	cmp	r3, r2
 801afa0:	d306      	bcc.n	801afb0 <USB_SetTurnaroundTime+0x6c>
 801afa2:	68bb      	ldr	r3, [r7, #8]
 801afa4:	4a32      	ldr	r2, [pc, #200]	; (801b070 <USB_SetTurnaroundTime+0x12c>)
 801afa6:	4293      	cmp	r3, r2
 801afa8:	d802      	bhi.n	801afb0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801afaa:	230c      	movs	r3, #12
 801afac:	617b      	str	r3, [r7, #20]
 801afae:	e041      	b.n	801b034 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801afb0:	68bb      	ldr	r3, [r7, #8]
 801afb2:	4a2f      	ldr	r2, [pc, #188]	; (801b070 <USB_SetTurnaroundTime+0x12c>)
 801afb4:	4293      	cmp	r3, r2
 801afb6:	d906      	bls.n	801afc6 <USB_SetTurnaroundTime+0x82>
 801afb8:	68bb      	ldr	r3, [r7, #8]
 801afba:	4a2e      	ldr	r2, [pc, #184]	; (801b074 <USB_SetTurnaroundTime+0x130>)
 801afbc:	4293      	cmp	r3, r2
 801afbe:	d802      	bhi.n	801afc6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801afc0:	230b      	movs	r3, #11
 801afc2:	617b      	str	r3, [r7, #20]
 801afc4:	e036      	b.n	801b034 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801afc6:	68bb      	ldr	r3, [r7, #8]
 801afc8:	4a2a      	ldr	r2, [pc, #168]	; (801b074 <USB_SetTurnaroundTime+0x130>)
 801afca:	4293      	cmp	r3, r2
 801afcc:	d906      	bls.n	801afdc <USB_SetTurnaroundTime+0x98>
 801afce:	68bb      	ldr	r3, [r7, #8]
 801afd0:	4a29      	ldr	r2, [pc, #164]	; (801b078 <USB_SetTurnaroundTime+0x134>)
 801afd2:	4293      	cmp	r3, r2
 801afd4:	d802      	bhi.n	801afdc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801afd6:	230a      	movs	r3, #10
 801afd8:	617b      	str	r3, [r7, #20]
 801afda:	e02b      	b.n	801b034 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801afdc:	68bb      	ldr	r3, [r7, #8]
 801afde:	4a26      	ldr	r2, [pc, #152]	; (801b078 <USB_SetTurnaroundTime+0x134>)
 801afe0:	4293      	cmp	r3, r2
 801afe2:	d906      	bls.n	801aff2 <USB_SetTurnaroundTime+0xae>
 801afe4:	68bb      	ldr	r3, [r7, #8]
 801afe6:	4a25      	ldr	r2, [pc, #148]	; (801b07c <USB_SetTurnaroundTime+0x138>)
 801afe8:	4293      	cmp	r3, r2
 801afea:	d202      	bcs.n	801aff2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801afec:	2309      	movs	r3, #9
 801afee:	617b      	str	r3, [r7, #20]
 801aff0:	e020      	b.n	801b034 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801aff2:	68bb      	ldr	r3, [r7, #8]
 801aff4:	4a21      	ldr	r2, [pc, #132]	; (801b07c <USB_SetTurnaroundTime+0x138>)
 801aff6:	4293      	cmp	r3, r2
 801aff8:	d306      	bcc.n	801b008 <USB_SetTurnaroundTime+0xc4>
 801affa:	68bb      	ldr	r3, [r7, #8]
 801affc:	4a20      	ldr	r2, [pc, #128]	; (801b080 <USB_SetTurnaroundTime+0x13c>)
 801affe:	4293      	cmp	r3, r2
 801b000:	d802      	bhi.n	801b008 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801b002:	2308      	movs	r3, #8
 801b004:	617b      	str	r3, [r7, #20]
 801b006:	e015      	b.n	801b034 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801b008:	68bb      	ldr	r3, [r7, #8]
 801b00a:	4a1d      	ldr	r2, [pc, #116]	; (801b080 <USB_SetTurnaroundTime+0x13c>)
 801b00c:	4293      	cmp	r3, r2
 801b00e:	d906      	bls.n	801b01e <USB_SetTurnaroundTime+0xda>
 801b010:	68bb      	ldr	r3, [r7, #8]
 801b012:	4a1c      	ldr	r2, [pc, #112]	; (801b084 <USB_SetTurnaroundTime+0x140>)
 801b014:	4293      	cmp	r3, r2
 801b016:	d202      	bcs.n	801b01e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801b018:	2307      	movs	r3, #7
 801b01a:	617b      	str	r3, [r7, #20]
 801b01c:	e00a      	b.n	801b034 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801b01e:	2306      	movs	r3, #6
 801b020:	617b      	str	r3, [r7, #20]
 801b022:	e007      	b.n	801b034 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801b024:	79fb      	ldrb	r3, [r7, #7]
 801b026:	2b00      	cmp	r3, #0
 801b028:	d102      	bne.n	801b030 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801b02a:	2309      	movs	r3, #9
 801b02c:	617b      	str	r3, [r7, #20]
 801b02e:	e001      	b.n	801b034 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801b030:	2309      	movs	r3, #9
 801b032:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	68db      	ldr	r3, [r3, #12]
 801b038:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801b03c:	68fb      	ldr	r3, [r7, #12]
 801b03e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801b040:	68fb      	ldr	r3, [r7, #12]
 801b042:	68da      	ldr	r2, [r3, #12]
 801b044:	697b      	ldr	r3, [r7, #20]
 801b046:	029b      	lsls	r3, r3, #10
 801b048:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801b04c:	431a      	orrs	r2, r3
 801b04e:	68fb      	ldr	r3, [r7, #12]
 801b050:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801b052:	2300      	movs	r3, #0
}
 801b054:	4618      	mov	r0, r3
 801b056:	371c      	adds	r7, #28
 801b058:	46bd      	mov	sp, r7
 801b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b05e:	4770      	bx	lr
 801b060:	00d8acbf 	.word	0x00d8acbf
 801b064:	00e4e1c0 	.word	0x00e4e1c0
 801b068:	00f42400 	.word	0x00f42400
 801b06c:	01067380 	.word	0x01067380
 801b070:	011a499f 	.word	0x011a499f
 801b074:	01312cff 	.word	0x01312cff
 801b078:	014ca43f 	.word	0x014ca43f
 801b07c:	016e3600 	.word	0x016e3600
 801b080:	01a6ab1f 	.word	0x01a6ab1f
 801b084:	01e84800 	.word	0x01e84800

0801b088 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801b088:	b480      	push	{r7}
 801b08a:	b083      	sub	sp, #12
 801b08c:	af00      	add	r7, sp, #0
 801b08e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	689b      	ldr	r3, [r3, #8]
 801b094:	f043 0201 	orr.w	r2, r3, #1
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801b09c:	2300      	movs	r3, #0
}
 801b09e:	4618      	mov	r0, r3
 801b0a0:	370c      	adds	r7, #12
 801b0a2:	46bd      	mov	sp, r7
 801b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0a8:	4770      	bx	lr

0801b0aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801b0aa:	b480      	push	{r7}
 801b0ac:	b083      	sub	sp, #12
 801b0ae:	af00      	add	r7, sp, #0
 801b0b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	689b      	ldr	r3, [r3, #8]
 801b0b6:	f023 0201 	bic.w	r2, r3, #1
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801b0be:	2300      	movs	r3, #0
}
 801b0c0:	4618      	mov	r0, r3
 801b0c2:	370c      	adds	r7, #12
 801b0c4:	46bd      	mov	sp, r7
 801b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0ca:	4770      	bx	lr

0801b0cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801b0cc:	b580      	push	{r7, lr}
 801b0ce:	b084      	sub	sp, #16
 801b0d0:	af00      	add	r7, sp, #0
 801b0d2:	6078      	str	r0, [r7, #4]
 801b0d4:	460b      	mov	r3, r1
 801b0d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801b0d8:	2300      	movs	r3, #0
 801b0da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	68db      	ldr	r3, [r3, #12]
 801b0e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801b0e8:	78fb      	ldrb	r3, [r7, #3]
 801b0ea:	2b01      	cmp	r3, #1
 801b0ec:	d115      	bne.n	801b11a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	68db      	ldr	r3, [r3, #12]
 801b0f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801b0fa:	200a      	movs	r0, #10
 801b0fc:	f7fa f94a 	bl	8015394 <HAL_Delay>
      ms += 10U;
 801b100:	68fb      	ldr	r3, [r7, #12]
 801b102:	330a      	adds	r3, #10
 801b104:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801b106:	6878      	ldr	r0, [r7, #4]
 801b108:	f001 f939 	bl	801c37e <USB_GetMode>
 801b10c:	4603      	mov	r3, r0
 801b10e:	2b01      	cmp	r3, #1
 801b110:	d01e      	beq.n	801b150 <USB_SetCurrentMode+0x84>
 801b112:	68fb      	ldr	r3, [r7, #12]
 801b114:	2bc7      	cmp	r3, #199	; 0xc7
 801b116:	d9f0      	bls.n	801b0fa <USB_SetCurrentMode+0x2e>
 801b118:	e01a      	b.n	801b150 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801b11a:	78fb      	ldrb	r3, [r7, #3]
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d115      	bne.n	801b14c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	68db      	ldr	r3, [r3, #12]
 801b124:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801b12c:	200a      	movs	r0, #10
 801b12e:	f7fa f931 	bl	8015394 <HAL_Delay>
      ms += 10U;
 801b132:	68fb      	ldr	r3, [r7, #12]
 801b134:	330a      	adds	r3, #10
 801b136:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801b138:	6878      	ldr	r0, [r7, #4]
 801b13a:	f001 f920 	bl	801c37e <USB_GetMode>
 801b13e:	4603      	mov	r3, r0
 801b140:	2b00      	cmp	r3, #0
 801b142:	d005      	beq.n	801b150 <USB_SetCurrentMode+0x84>
 801b144:	68fb      	ldr	r3, [r7, #12]
 801b146:	2bc7      	cmp	r3, #199	; 0xc7
 801b148:	d9f0      	bls.n	801b12c <USB_SetCurrentMode+0x60>
 801b14a:	e001      	b.n	801b150 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801b14c:	2301      	movs	r3, #1
 801b14e:	e005      	b.n	801b15c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801b150:	68fb      	ldr	r3, [r7, #12]
 801b152:	2bc8      	cmp	r3, #200	; 0xc8
 801b154:	d101      	bne.n	801b15a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801b156:	2301      	movs	r3, #1
 801b158:	e000      	b.n	801b15c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801b15a:	2300      	movs	r3, #0
}
 801b15c:	4618      	mov	r0, r3
 801b15e:	3710      	adds	r7, #16
 801b160:	46bd      	mov	sp, r7
 801b162:	bd80      	pop	{r7, pc}

0801b164 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801b164:	b084      	sub	sp, #16
 801b166:	b580      	push	{r7, lr}
 801b168:	b086      	sub	sp, #24
 801b16a:	af00      	add	r7, sp, #0
 801b16c:	6078      	str	r0, [r7, #4]
 801b16e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801b172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801b176:	2300      	movs	r3, #0
 801b178:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801b17e:	2300      	movs	r3, #0
 801b180:	613b      	str	r3, [r7, #16]
 801b182:	e009      	b.n	801b198 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801b184:	687a      	ldr	r2, [r7, #4]
 801b186:	693b      	ldr	r3, [r7, #16]
 801b188:	3340      	adds	r3, #64	; 0x40
 801b18a:	009b      	lsls	r3, r3, #2
 801b18c:	4413      	add	r3, r2
 801b18e:	2200      	movs	r2, #0
 801b190:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801b192:	693b      	ldr	r3, [r7, #16]
 801b194:	3301      	adds	r3, #1
 801b196:	613b      	str	r3, [r7, #16]
 801b198:	693b      	ldr	r3, [r7, #16]
 801b19a:	2b0e      	cmp	r3, #14
 801b19c:	d9f2      	bls.n	801b184 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801b19e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d11c      	bne.n	801b1e0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801b1a6:	68fb      	ldr	r3, [r7, #12]
 801b1a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b1ac:	685b      	ldr	r3, [r3, #4]
 801b1ae:	68fa      	ldr	r2, [r7, #12]
 801b1b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801b1b4:	f043 0302 	orr.w	r3, r3, #2
 801b1b8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1ca:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1d6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	639a      	str	r2, [r3, #56]	; 0x38
 801b1de:	e00b      	b.n	801b1f8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1f0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801b1f8:	68fb      	ldr	r3, [r7, #12]
 801b1fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801b1fe:	461a      	mov	r2, r3
 801b200:	2300      	movs	r3, #0
 801b202:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801b204:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801b208:	2b01      	cmp	r3, #1
 801b20a:	d10d      	bne.n	801b228 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801b20c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b210:	2b00      	cmp	r3, #0
 801b212:	d104      	bne.n	801b21e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801b214:	2100      	movs	r1, #0
 801b216:	6878      	ldr	r0, [r7, #4]
 801b218:	f000 f968 	bl	801b4ec <USB_SetDevSpeed>
 801b21c:	e008      	b.n	801b230 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801b21e:	2101      	movs	r1, #1
 801b220:	6878      	ldr	r0, [r7, #4]
 801b222:	f000 f963 	bl	801b4ec <USB_SetDevSpeed>
 801b226:	e003      	b.n	801b230 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801b228:	2103      	movs	r1, #3
 801b22a:	6878      	ldr	r0, [r7, #4]
 801b22c:	f000 f95e 	bl	801b4ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801b230:	2110      	movs	r1, #16
 801b232:	6878      	ldr	r0, [r7, #4]
 801b234:	f000 f8fa 	bl	801b42c <USB_FlushTxFifo>
 801b238:	4603      	mov	r3, r0
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	d001      	beq.n	801b242 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 801b23e:	2301      	movs	r3, #1
 801b240:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801b242:	6878      	ldr	r0, [r7, #4]
 801b244:	f000 f924 	bl	801b490 <USB_FlushRxFifo>
 801b248:	4603      	mov	r3, r0
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d001      	beq.n	801b252 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 801b24e:	2301      	movs	r3, #1
 801b250:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b258:	461a      	mov	r2, r3
 801b25a:	2300      	movs	r3, #0
 801b25c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801b25e:	68fb      	ldr	r3, [r7, #12]
 801b260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b264:	461a      	mov	r2, r3
 801b266:	2300      	movs	r3, #0
 801b268:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801b26a:	68fb      	ldr	r3, [r7, #12]
 801b26c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b270:	461a      	mov	r2, r3
 801b272:	2300      	movs	r3, #0
 801b274:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b276:	2300      	movs	r3, #0
 801b278:	613b      	str	r3, [r7, #16]
 801b27a:	e043      	b.n	801b304 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801b27c:	693b      	ldr	r3, [r7, #16]
 801b27e:	015a      	lsls	r2, r3, #5
 801b280:	68fb      	ldr	r3, [r7, #12]
 801b282:	4413      	add	r3, r2
 801b284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b28e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b292:	d118      	bne.n	801b2c6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 801b294:	693b      	ldr	r3, [r7, #16]
 801b296:	2b00      	cmp	r3, #0
 801b298:	d10a      	bne.n	801b2b0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801b29a:	693b      	ldr	r3, [r7, #16]
 801b29c:	015a      	lsls	r2, r3, #5
 801b29e:	68fb      	ldr	r3, [r7, #12]
 801b2a0:	4413      	add	r3, r2
 801b2a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b2a6:	461a      	mov	r2, r3
 801b2a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801b2ac:	6013      	str	r3, [r2, #0]
 801b2ae:	e013      	b.n	801b2d8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801b2b0:	693b      	ldr	r3, [r7, #16]
 801b2b2:	015a      	lsls	r2, r3, #5
 801b2b4:	68fb      	ldr	r3, [r7, #12]
 801b2b6:	4413      	add	r3, r2
 801b2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b2bc:	461a      	mov	r2, r3
 801b2be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801b2c2:	6013      	str	r3, [r2, #0]
 801b2c4:	e008      	b.n	801b2d8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801b2c6:	693b      	ldr	r3, [r7, #16]
 801b2c8:	015a      	lsls	r2, r3, #5
 801b2ca:	68fb      	ldr	r3, [r7, #12]
 801b2cc:	4413      	add	r3, r2
 801b2ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b2d2:	461a      	mov	r2, r3
 801b2d4:	2300      	movs	r3, #0
 801b2d6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801b2d8:	693b      	ldr	r3, [r7, #16]
 801b2da:	015a      	lsls	r2, r3, #5
 801b2dc:	68fb      	ldr	r3, [r7, #12]
 801b2de:	4413      	add	r3, r2
 801b2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b2e4:	461a      	mov	r2, r3
 801b2e6:	2300      	movs	r3, #0
 801b2e8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801b2ea:	693b      	ldr	r3, [r7, #16]
 801b2ec:	015a      	lsls	r2, r3, #5
 801b2ee:	68fb      	ldr	r3, [r7, #12]
 801b2f0:	4413      	add	r3, r2
 801b2f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b2f6:	461a      	mov	r2, r3
 801b2f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801b2fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b2fe:	693b      	ldr	r3, [r7, #16]
 801b300:	3301      	adds	r3, #1
 801b302:	613b      	str	r3, [r7, #16]
 801b304:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b308:	461a      	mov	r2, r3
 801b30a:	693b      	ldr	r3, [r7, #16]
 801b30c:	4293      	cmp	r3, r2
 801b30e:	d3b5      	bcc.n	801b27c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b310:	2300      	movs	r3, #0
 801b312:	613b      	str	r3, [r7, #16]
 801b314:	e043      	b.n	801b39e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801b316:	693b      	ldr	r3, [r7, #16]
 801b318:	015a      	lsls	r2, r3, #5
 801b31a:	68fb      	ldr	r3, [r7, #12]
 801b31c:	4413      	add	r3, r2
 801b31e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b322:	681b      	ldr	r3, [r3, #0]
 801b324:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b328:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b32c:	d118      	bne.n	801b360 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 801b32e:	693b      	ldr	r3, [r7, #16]
 801b330:	2b00      	cmp	r3, #0
 801b332:	d10a      	bne.n	801b34a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801b334:	693b      	ldr	r3, [r7, #16]
 801b336:	015a      	lsls	r2, r3, #5
 801b338:	68fb      	ldr	r3, [r7, #12]
 801b33a:	4413      	add	r3, r2
 801b33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b340:	461a      	mov	r2, r3
 801b342:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801b346:	6013      	str	r3, [r2, #0]
 801b348:	e013      	b.n	801b372 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801b34a:	693b      	ldr	r3, [r7, #16]
 801b34c:	015a      	lsls	r2, r3, #5
 801b34e:	68fb      	ldr	r3, [r7, #12]
 801b350:	4413      	add	r3, r2
 801b352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b356:	461a      	mov	r2, r3
 801b358:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801b35c:	6013      	str	r3, [r2, #0]
 801b35e:	e008      	b.n	801b372 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801b360:	693b      	ldr	r3, [r7, #16]
 801b362:	015a      	lsls	r2, r3, #5
 801b364:	68fb      	ldr	r3, [r7, #12]
 801b366:	4413      	add	r3, r2
 801b368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b36c:	461a      	mov	r2, r3
 801b36e:	2300      	movs	r3, #0
 801b370:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801b372:	693b      	ldr	r3, [r7, #16]
 801b374:	015a      	lsls	r2, r3, #5
 801b376:	68fb      	ldr	r3, [r7, #12]
 801b378:	4413      	add	r3, r2
 801b37a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b37e:	461a      	mov	r2, r3
 801b380:	2300      	movs	r3, #0
 801b382:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801b384:	693b      	ldr	r3, [r7, #16]
 801b386:	015a      	lsls	r2, r3, #5
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	4413      	add	r3, r2
 801b38c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b390:	461a      	mov	r2, r3
 801b392:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801b396:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b398:	693b      	ldr	r3, [r7, #16]
 801b39a:	3301      	adds	r3, #1
 801b39c:	613b      	str	r3, [r7, #16]
 801b39e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b3a2:	461a      	mov	r2, r3
 801b3a4:	693b      	ldr	r3, [r7, #16]
 801b3a6:	4293      	cmp	r3, r2
 801b3a8:	d3b5      	bcc.n	801b316 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801b3aa:	68fb      	ldr	r3, [r7, #12]
 801b3ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b3b0:	691b      	ldr	r3, [r3, #16]
 801b3b2:	68fa      	ldr	r2, [r7, #12]
 801b3b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801b3b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b3bc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	2200      	movs	r2, #0
 801b3c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801b3ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801b3cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	d105      	bne.n	801b3e0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	699b      	ldr	r3, [r3, #24]
 801b3d8:	f043 0210 	orr.w	r2, r3, #16
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	699a      	ldr	r2, [r3, #24]
 801b3e4:	4b10      	ldr	r3, [pc, #64]	; (801b428 <USB_DevInit+0x2c4>)
 801b3e6:	4313      	orrs	r3, r2
 801b3e8:	687a      	ldr	r2, [r7, #4]
 801b3ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801b3ec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	d005      	beq.n	801b400 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	699b      	ldr	r3, [r3, #24]
 801b3f8:	f043 0208 	orr.w	r2, r3, #8
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801b400:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801b404:	2b01      	cmp	r3, #1
 801b406:	d107      	bne.n	801b418 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801b408:	687b      	ldr	r3, [r7, #4]
 801b40a:	699b      	ldr	r3, [r3, #24]
 801b40c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801b410:	f043 0304 	orr.w	r3, r3, #4
 801b414:	687a      	ldr	r2, [r7, #4]
 801b416:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801b418:	7dfb      	ldrb	r3, [r7, #23]
}
 801b41a:	4618      	mov	r0, r3
 801b41c:	3718      	adds	r7, #24
 801b41e:	46bd      	mov	sp, r7
 801b420:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b424:	b004      	add	sp, #16
 801b426:	4770      	bx	lr
 801b428:	803c3800 	.word	0x803c3800

0801b42c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801b42c:	b480      	push	{r7}
 801b42e:	b085      	sub	sp, #20
 801b430:	af00      	add	r7, sp, #0
 801b432:	6078      	str	r0, [r7, #4]
 801b434:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801b436:	2300      	movs	r3, #0
 801b438:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801b43a:	68fb      	ldr	r3, [r7, #12]
 801b43c:	3301      	adds	r3, #1
 801b43e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801b440:	68fb      	ldr	r3, [r7, #12]
 801b442:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 801b446:	d901      	bls.n	801b44c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801b448:	2303      	movs	r3, #3
 801b44a:	e01b      	b.n	801b484 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	691b      	ldr	r3, [r3, #16]
 801b450:	2b00      	cmp	r3, #0
 801b452:	daf2      	bge.n	801b43a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801b454:	2300      	movs	r3, #0
 801b456:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801b458:	683b      	ldr	r3, [r7, #0]
 801b45a:	019b      	lsls	r3, r3, #6
 801b45c:	f043 0220 	orr.w	r2, r3, #32
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801b464:	68fb      	ldr	r3, [r7, #12]
 801b466:	3301      	adds	r3, #1
 801b468:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801b46a:	68fb      	ldr	r3, [r7, #12]
 801b46c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 801b470:	d901      	bls.n	801b476 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801b472:	2303      	movs	r3, #3
 801b474:	e006      	b.n	801b484 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	691b      	ldr	r3, [r3, #16]
 801b47a:	f003 0320 	and.w	r3, r3, #32
 801b47e:	2b20      	cmp	r3, #32
 801b480:	d0f0      	beq.n	801b464 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801b482:	2300      	movs	r3, #0
}
 801b484:	4618      	mov	r0, r3
 801b486:	3714      	adds	r7, #20
 801b488:	46bd      	mov	sp, r7
 801b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b48e:	4770      	bx	lr

0801b490 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801b490:	b480      	push	{r7}
 801b492:	b085      	sub	sp, #20
 801b494:	af00      	add	r7, sp, #0
 801b496:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801b498:	2300      	movs	r3, #0
 801b49a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801b49c:	68fb      	ldr	r3, [r7, #12]
 801b49e:	3301      	adds	r3, #1
 801b4a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801b4a2:	68fb      	ldr	r3, [r7, #12]
 801b4a4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 801b4a8:	d901      	bls.n	801b4ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801b4aa:	2303      	movs	r3, #3
 801b4ac:	e018      	b.n	801b4e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	691b      	ldr	r3, [r3, #16]
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	daf2      	bge.n	801b49c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801b4b6:	2300      	movs	r3, #0
 801b4b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	2210      	movs	r2, #16
 801b4be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801b4c0:	68fb      	ldr	r3, [r7, #12]
 801b4c2:	3301      	adds	r3, #1
 801b4c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 801b4cc:	d901      	bls.n	801b4d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801b4ce:	2303      	movs	r3, #3
 801b4d0:	e006      	b.n	801b4e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	691b      	ldr	r3, [r3, #16]
 801b4d6:	f003 0310 	and.w	r3, r3, #16
 801b4da:	2b10      	cmp	r3, #16
 801b4dc:	d0f0      	beq.n	801b4c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801b4de:	2300      	movs	r3, #0
}
 801b4e0:	4618      	mov	r0, r3
 801b4e2:	3714      	adds	r7, #20
 801b4e4:	46bd      	mov	sp, r7
 801b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ea:	4770      	bx	lr

0801b4ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801b4ec:	b480      	push	{r7}
 801b4ee:	b085      	sub	sp, #20
 801b4f0:	af00      	add	r7, sp, #0
 801b4f2:	6078      	str	r0, [r7, #4]
 801b4f4:	460b      	mov	r3, r1
 801b4f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801b4fc:	68fb      	ldr	r3, [r7, #12]
 801b4fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b502:	681a      	ldr	r2, [r3, #0]
 801b504:	78fb      	ldrb	r3, [r7, #3]
 801b506:	68f9      	ldr	r1, [r7, #12]
 801b508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b50c:	4313      	orrs	r3, r2
 801b50e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801b510:	2300      	movs	r3, #0
}
 801b512:	4618      	mov	r0, r3
 801b514:	3714      	adds	r7, #20
 801b516:	46bd      	mov	sp, r7
 801b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b51c:	4770      	bx	lr

0801b51e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 801b51e:	b480      	push	{r7}
 801b520:	b087      	sub	sp, #28
 801b522:	af00      	add	r7, sp, #0
 801b524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801b52a:	693b      	ldr	r3, [r7, #16]
 801b52c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b530:	689b      	ldr	r3, [r3, #8]
 801b532:	f003 0306 	and.w	r3, r3, #6
 801b536:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801b538:	68fb      	ldr	r3, [r7, #12]
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d102      	bne.n	801b544 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801b53e:	2300      	movs	r3, #0
 801b540:	75fb      	strb	r3, [r7, #23]
 801b542:	e00a      	b.n	801b55a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801b544:	68fb      	ldr	r3, [r7, #12]
 801b546:	2b02      	cmp	r3, #2
 801b548:	d002      	beq.n	801b550 <USB_GetDevSpeed+0x32>
 801b54a:	68fb      	ldr	r3, [r7, #12]
 801b54c:	2b06      	cmp	r3, #6
 801b54e:	d102      	bne.n	801b556 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801b550:	2302      	movs	r3, #2
 801b552:	75fb      	strb	r3, [r7, #23]
 801b554:	e001      	b.n	801b55a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801b556:	230f      	movs	r3, #15
 801b558:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801b55a:	7dfb      	ldrb	r3, [r7, #23]
}
 801b55c:	4618      	mov	r0, r3
 801b55e:	371c      	adds	r7, #28
 801b560:	46bd      	mov	sp, r7
 801b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b566:	4770      	bx	lr

0801b568 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801b568:	b480      	push	{r7}
 801b56a:	b085      	sub	sp, #20
 801b56c:	af00      	add	r7, sp, #0
 801b56e:	6078      	str	r0, [r7, #4]
 801b570:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b572:	687b      	ldr	r3, [r7, #4]
 801b574:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801b576:	683b      	ldr	r3, [r7, #0]
 801b578:	781b      	ldrb	r3, [r3, #0]
 801b57a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801b57c:	683b      	ldr	r3, [r7, #0]
 801b57e:	785b      	ldrb	r3, [r3, #1]
 801b580:	2b01      	cmp	r3, #1
 801b582:	d13a      	bne.n	801b5fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801b584:	68fb      	ldr	r3, [r7, #12]
 801b586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b58a:	69da      	ldr	r2, [r3, #28]
 801b58c:	683b      	ldr	r3, [r7, #0]
 801b58e:	781b      	ldrb	r3, [r3, #0]
 801b590:	f003 030f 	and.w	r3, r3, #15
 801b594:	2101      	movs	r1, #1
 801b596:	fa01 f303 	lsl.w	r3, r1, r3
 801b59a:	b29b      	uxth	r3, r3
 801b59c:	68f9      	ldr	r1, [r7, #12]
 801b59e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b5a2:	4313      	orrs	r3, r2
 801b5a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801b5a6:	68bb      	ldr	r3, [r7, #8]
 801b5a8:	015a      	lsls	r2, r3, #5
 801b5aa:	68fb      	ldr	r3, [r7, #12]
 801b5ac:	4413      	add	r3, r2
 801b5ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d155      	bne.n	801b668 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b5bc:	68bb      	ldr	r3, [r7, #8]
 801b5be:	015a      	lsls	r2, r3, #5
 801b5c0:	68fb      	ldr	r3, [r7, #12]
 801b5c2:	4413      	add	r3, r2
 801b5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b5c8:	681a      	ldr	r2, [r3, #0]
 801b5ca:	683b      	ldr	r3, [r7, #0]
 801b5cc:	689b      	ldr	r3, [r3, #8]
 801b5ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801b5d2:	683b      	ldr	r3, [r7, #0]
 801b5d4:	791b      	ldrb	r3, [r3, #4]
 801b5d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b5d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801b5da:	68bb      	ldr	r3, [r7, #8]
 801b5dc:	059b      	lsls	r3, r3, #22
 801b5de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b5e0:	4313      	orrs	r3, r2
 801b5e2:	68ba      	ldr	r2, [r7, #8]
 801b5e4:	0151      	lsls	r1, r2, #5
 801b5e6:	68fa      	ldr	r2, [r7, #12]
 801b5e8:	440a      	add	r2, r1
 801b5ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b5ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b5f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801b5f6:	6013      	str	r3, [r2, #0]
 801b5f8:	e036      	b.n	801b668 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801b5fa:	68fb      	ldr	r3, [r7, #12]
 801b5fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b600:	69da      	ldr	r2, [r3, #28]
 801b602:	683b      	ldr	r3, [r7, #0]
 801b604:	781b      	ldrb	r3, [r3, #0]
 801b606:	f003 030f 	and.w	r3, r3, #15
 801b60a:	2101      	movs	r1, #1
 801b60c:	fa01 f303 	lsl.w	r3, r1, r3
 801b610:	041b      	lsls	r3, r3, #16
 801b612:	68f9      	ldr	r1, [r7, #12]
 801b614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b618:	4313      	orrs	r3, r2
 801b61a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801b61c:	68bb      	ldr	r3, [r7, #8]
 801b61e:	015a      	lsls	r2, r3, #5
 801b620:	68fb      	ldr	r3, [r7, #12]
 801b622:	4413      	add	r3, r2
 801b624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b628:	681b      	ldr	r3, [r3, #0]
 801b62a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b62e:	2b00      	cmp	r3, #0
 801b630:	d11a      	bne.n	801b668 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801b632:	68bb      	ldr	r3, [r7, #8]
 801b634:	015a      	lsls	r2, r3, #5
 801b636:	68fb      	ldr	r3, [r7, #12]
 801b638:	4413      	add	r3, r2
 801b63a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b63e:	681a      	ldr	r2, [r3, #0]
 801b640:	683b      	ldr	r3, [r7, #0]
 801b642:	689b      	ldr	r3, [r3, #8]
 801b644:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801b648:	683b      	ldr	r3, [r7, #0]
 801b64a:	791b      	ldrb	r3, [r3, #4]
 801b64c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801b64e:	430b      	orrs	r3, r1
 801b650:	4313      	orrs	r3, r2
 801b652:	68ba      	ldr	r2, [r7, #8]
 801b654:	0151      	lsls	r1, r2, #5
 801b656:	68fa      	ldr	r2, [r7, #12]
 801b658:	440a      	add	r2, r1
 801b65a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b65e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801b666:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801b668:	2300      	movs	r3, #0
}
 801b66a:	4618      	mov	r0, r3
 801b66c:	3714      	adds	r7, #20
 801b66e:	46bd      	mov	sp, r7
 801b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b674:	4770      	bx	lr
	...

0801b678 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801b678:	b480      	push	{r7}
 801b67a:	b085      	sub	sp, #20
 801b67c:	af00      	add	r7, sp, #0
 801b67e:	6078      	str	r0, [r7, #4]
 801b680:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801b686:	683b      	ldr	r3, [r7, #0]
 801b688:	781b      	ldrb	r3, [r3, #0]
 801b68a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801b68c:	683b      	ldr	r3, [r7, #0]
 801b68e:	785b      	ldrb	r3, [r3, #1]
 801b690:	2b01      	cmp	r3, #1
 801b692:	d161      	bne.n	801b758 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801b694:	68bb      	ldr	r3, [r7, #8]
 801b696:	015a      	lsls	r2, r3, #5
 801b698:	68fb      	ldr	r3, [r7, #12]
 801b69a:	4413      	add	r3, r2
 801b69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b6a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b6aa:	d11f      	bne.n	801b6ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801b6ac:	68bb      	ldr	r3, [r7, #8]
 801b6ae:	015a      	lsls	r2, r3, #5
 801b6b0:	68fb      	ldr	r3, [r7, #12]
 801b6b2:	4413      	add	r3, r2
 801b6b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b6b8:	681b      	ldr	r3, [r3, #0]
 801b6ba:	68ba      	ldr	r2, [r7, #8]
 801b6bc:	0151      	lsls	r1, r2, #5
 801b6be:	68fa      	ldr	r2, [r7, #12]
 801b6c0:	440a      	add	r2, r1
 801b6c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b6c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801b6ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801b6cc:	68bb      	ldr	r3, [r7, #8]
 801b6ce:	015a      	lsls	r2, r3, #5
 801b6d0:	68fb      	ldr	r3, [r7, #12]
 801b6d2:	4413      	add	r3, r2
 801b6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b6d8:	681b      	ldr	r3, [r3, #0]
 801b6da:	68ba      	ldr	r2, [r7, #8]
 801b6dc:	0151      	lsls	r1, r2, #5
 801b6de:	68fa      	ldr	r2, [r7, #12]
 801b6e0:	440a      	add	r2, r1
 801b6e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b6e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801b6ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801b6ec:	68fb      	ldr	r3, [r7, #12]
 801b6ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b6f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801b6f4:	683b      	ldr	r3, [r7, #0]
 801b6f6:	781b      	ldrb	r3, [r3, #0]
 801b6f8:	f003 030f 	and.w	r3, r3, #15
 801b6fc:	2101      	movs	r1, #1
 801b6fe:	fa01 f303 	lsl.w	r3, r1, r3
 801b702:	b29b      	uxth	r3, r3
 801b704:	43db      	mvns	r3, r3
 801b706:	68f9      	ldr	r1, [r7, #12]
 801b708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b70c:	4013      	ands	r3, r2
 801b70e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801b710:	68fb      	ldr	r3, [r7, #12]
 801b712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b716:	69da      	ldr	r2, [r3, #28]
 801b718:	683b      	ldr	r3, [r7, #0]
 801b71a:	781b      	ldrb	r3, [r3, #0]
 801b71c:	f003 030f 	and.w	r3, r3, #15
 801b720:	2101      	movs	r1, #1
 801b722:	fa01 f303 	lsl.w	r3, r1, r3
 801b726:	b29b      	uxth	r3, r3
 801b728:	43db      	mvns	r3, r3
 801b72a:	68f9      	ldr	r1, [r7, #12]
 801b72c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b730:	4013      	ands	r3, r2
 801b732:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801b734:	68bb      	ldr	r3, [r7, #8]
 801b736:	015a      	lsls	r2, r3, #5
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	4413      	add	r3, r2
 801b73c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b740:	681a      	ldr	r2, [r3, #0]
 801b742:	68bb      	ldr	r3, [r7, #8]
 801b744:	0159      	lsls	r1, r3, #5
 801b746:	68fb      	ldr	r3, [r7, #12]
 801b748:	440b      	add	r3, r1
 801b74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b74e:	4619      	mov	r1, r3
 801b750:	4b35      	ldr	r3, [pc, #212]	; (801b828 <USB_DeactivateEndpoint+0x1b0>)
 801b752:	4013      	ands	r3, r2
 801b754:	600b      	str	r3, [r1, #0]
 801b756:	e060      	b.n	801b81a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801b758:	68bb      	ldr	r3, [r7, #8]
 801b75a:	015a      	lsls	r2, r3, #5
 801b75c:	68fb      	ldr	r3, [r7, #12]
 801b75e:	4413      	add	r3, r2
 801b760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b764:	681b      	ldr	r3, [r3, #0]
 801b766:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b76a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b76e:	d11f      	bne.n	801b7b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801b770:	68bb      	ldr	r3, [r7, #8]
 801b772:	015a      	lsls	r2, r3, #5
 801b774:	68fb      	ldr	r3, [r7, #12]
 801b776:	4413      	add	r3, r2
 801b778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b77c:	681b      	ldr	r3, [r3, #0]
 801b77e:	68ba      	ldr	r2, [r7, #8]
 801b780:	0151      	lsls	r1, r2, #5
 801b782:	68fa      	ldr	r2, [r7, #12]
 801b784:	440a      	add	r2, r1
 801b786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b78a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801b78e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801b790:	68bb      	ldr	r3, [r7, #8]
 801b792:	015a      	lsls	r2, r3, #5
 801b794:	68fb      	ldr	r3, [r7, #12]
 801b796:	4413      	add	r3, r2
 801b798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b79c:	681b      	ldr	r3, [r3, #0]
 801b79e:	68ba      	ldr	r2, [r7, #8]
 801b7a0:	0151      	lsls	r1, r2, #5
 801b7a2:	68fa      	ldr	r2, [r7, #12]
 801b7a4:	440a      	add	r2, r1
 801b7a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b7aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801b7ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801b7b0:	68fb      	ldr	r3, [r7, #12]
 801b7b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b7b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801b7b8:	683b      	ldr	r3, [r7, #0]
 801b7ba:	781b      	ldrb	r3, [r3, #0]
 801b7bc:	f003 030f 	and.w	r3, r3, #15
 801b7c0:	2101      	movs	r1, #1
 801b7c2:	fa01 f303 	lsl.w	r3, r1, r3
 801b7c6:	041b      	lsls	r3, r3, #16
 801b7c8:	43db      	mvns	r3, r3
 801b7ca:	68f9      	ldr	r1, [r7, #12]
 801b7cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b7d0:	4013      	ands	r3, r2
 801b7d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801b7d4:	68fb      	ldr	r3, [r7, #12]
 801b7d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b7da:	69da      	ldr	r2, [r3, #28]
 801b7dc:	683b      	ldr	r3, [r7, #0]
 801b7de:	781b      	ldrb	r3, [r3, #0]
 801b7e0:	f003 030f 	and.w	r3, r3, #15
 801b7e4:	2101      	movs	r1, #1
 801b7e6:	fa01 f303 	lsl.w	r3, r1, r3
 801b7ea:	041b      	lsls	r3, r3, #16
 801b7ec:	43db      	mvns	r3, r3
 801b7ee:	68f9      	ldr	r1, [r7, #12]
 801b7f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b7f4:	4013      	ands	r3, r2
 801b7f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801b7f8:	68bb      	ldr	r3, [r7, #8]
 801b7fa:	015a      	lsls	r2, r3, #5
 801b7fc:	68fb      	ldr	r3, [r7, #12]
 801b7fe:	4413      	add	r3, r2
 801b800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b804:	681a      	ldr	r2, [r3, #0]
 801b806:	68bb      	ldr	r3, [r7, #8]
 801b808:	0159      	lsls	r1, r3, #5
 801b80a:	68fb      	ldr	r3, [r7, #12]
 801b80c:	440b      	add	r3, r1
 801b80e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b812:	4619      	mov	r1, r3
 801b814:	4b05      	ldr	r3, [pc, #20]	; (801b82c <USB_DeactivateEndpoint+0x1b4>)
 801b816:	4013      	ands	r3, r2
 801b818:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801b81a:	2300      	movs	r3, #0
}
 801b81c:	4618      	mov	r0, r3
 801b81e:	3714      	adds	r7, #20
 801b820:	46bd      	mov	sp, r7
 801b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b826:	4770      	bx	lr
 801b828:	ec337800 	.word	0xec337800
 801b82c:	eff37800 	.word	0xeff37800

0801b830 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801b830:	b580      	push	{r7, lr}
 801b832:	b08a      	sub	sp, #40	; 0x28
 801b834:	af02      	add	r7, sp, #8
 801b836:	60f8      	str	r0, [r7, #12]
 801b838:	60b9      	str	r1, [r7, #8]
 801b83a:	4613      	mov	r3, r2
 801b83c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b83e:	68fb      	ldr	r3, [r7, #12]
 801b840:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801b842:	68bb      	ldr	r3, [r7, #8]
 801b844:	781b      	ldrb	r3, [r3, #0]
 801b846:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801b848:	68bb      	ldr	r3, [r7, #8]
 801b84a:	785b      	ldrb	r3, [r3, #1]
 801b84c:	2b01      	cmp	r3, #1
 801b84e:	f040 817a 	bne.w	801bb46 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801b852:	68bb      	ldr	r3, [r7, #8]
 801b854:	691b      	ldr	r3, [r3, #16]
 801b856:	2b00      	cmp	r3, #0
 801b858:	d132      	bne.n	801b8c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b85a:	69bb      	ldr	r3, [r7, #24]
 801b85c:	015a      	lsls	r2, r3, #5
 801b85e:	69fb      	ldr	r3, [r7, #28]
 801b860:	4413      	add	r3, r2
 801b862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b866:	691b      	ldr	r3, [r3, #16]
 801b868:	69ba      	ldr	r2, [r7, #24]
 801b86a:	0151      	lsls	r1, r2, #5
 801b86c:	69fa      	ldr	r2, [r7, #28]
 801b86e:	440a      	add	r2, r1
 801b870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b874:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801b878:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801b87c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801b87e:	69bb      	ldr	r3, [r7, #24]
 801b880:	015a      	lsls	r2, r3, #5
 801b882:	69fb      	ldr	r3, [r7, #28]
 801b884:	4413      	add	r3, r2
 801b886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b88a:	691b      	ldr	r3, [r3, #16]
 801b88c:	69ba      	ldr	r2, [r7, #24]
 801b88e:	0151      	lsls	r1, r2, #5
 801b890:	69fa      	ldr	r2, [r7, #28]
 801b892:	440a      	add	r2, r1
 801b894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b898:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b89c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b89e:	69bb      	ldr	r3, [r7, #24]
 801b8a0:	015a      	lsls	r2, r3, #5
 801b8a2:	69fb      	ldr	r3, [r7, #28]
 801b8a4:	4413      	add	r3, r2
 801b8a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b8aa:	691b      	ldr	r3, [r3, #16]
 801b8ac:	69ba      	ldr	r2, [r7, #24]
 801b8ae:	0151      	lsls	r1, r2, #5
 801b8b0:	69fa      	ldr	r2, [r7, #28]
 801b8b2:	440a      	add	r2, r1
 801b8b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b8b8:	0cdb      	lsrs	r3, r3, #19
 801b8ba:	04db      	lsls	r3, r3, #19
 801b8bc:	6113      	str	r3, [r2, #16]
 801b8be:	e092      	b.n	801b9e6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b8c0:	69bb      	ldr	r3, [r7, #24]
 801b8c2:	015a      	lsls	r2, r3, #5
 801b8c4:	69fb      	ldr	r3, [r7, #28]
 801b8c6:	4413      	add	r3, r2
 801b8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b8cc:	691b      	ldr	r3, [r3, #16]
 801b8ce:	69ba      	ldr	r2, [r7, #24]
 801b8d0:	0151      	lsls	r1, r2, #5
 801b8d2:	69fa      	ldr	r2, [r7, #28]
 801b8d4:	440a      	add	r2, r1
 801b8d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b8da:	0cdb      	lsrs	r3, r3, #19
 801b8dc:	04db      	lsls	r3, r3, #19
 801b8de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b8e0:	69bb      	ldr	r3, [r7, #24]
 801b8e2:	015a      	lsls	r2, r3, #5
 801b8e4:	69fb      	ldr	r3, [r7, #28]
 801b8e6:	4413      	add	r3, r2
 801b8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b8ec:	691b      	ldr	r3, [r3, #16]
 801b8ee:	69ba      	ldr	r2, [r7, #24]
 801b8f0:	0151      	lsls	r1, r2, #5
 801b8f2:	69fa      	ldr	r2, [r7, #28]
 801b8f4:	440a      	add	r2, r1
 801b8f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b8fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801b8fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801b902:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 801b904:	69bb      	ldr	r3, [r7, #24]
 801b906:	2b00      	cmp	r3, #0
 801b908:	d11a      	bne.n	801b940 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801b90a:	68bb      	ldr	r3, [r7, #8]
 801b90c:	691a      	ldr	r2, [r3, #16]
 801b90e:	68bb      	ldr	r3, [r7, #8]
 801b910:	689b      	ldr	r3, [r3, #8]
 801b912:	429a      	cmp	r2, r3
 801b914:	d903      	bls.n	801b91e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801b916:	68bb      	ldr	r3, [r7, #8]
 801b918:	689a      	ldr	r2, [r3, #8]
 801b91a:	68bb      	ldr	r3, [r7, #8]
 801b91c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801b91e:	69bb      	ldr	r3, [r7, #24]
 801b920:	015a      	lsls	r2, r3, #5
 801b922:	69fb      	ldr	r3, [r7, #28]
 801b924:	4413      	add	r3, r2
 801b926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b92a:	691b      	ldr	r3, [r3, #16]
 801b92c:	69ba      	ldr	r2, [r7, #24]
 801b92e:	0151      	lsls	r1, r2, #5
 801b930:	69fa      	ldr	r2, [r7, #28]
 801b932:	440a      	add	r2, r1
 801b934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b938:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b93c:	6113      	str	r3, [r2, #16]
 801b93e:	e01b      	b.n	801b978 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801b940:	69bb      	ldr	r3, [r7, #24]
 801b942:	015a      	lsls	r2, r3, #5
 801b944:	69fb      	ldr	r3, [r7, #28]
 801b946:	4413      	add	r3, r2
 801b948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b94c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801b94e:	68bb      	ldr	r3, [r7, #8]
 801b950:	6919      	ldr	r1, [r3, #16]
 801b952:	68bb      	ldr	r3, [r7, #8]
 801b954:	689b      	ldr	r3, [r3, #8]
 801b956:	440b      	add	r3, r1
 801b958:	1e59      	subs	r1, r3, #1
 801b95a:	68bb      	ldr	r3, [r7, #8]
 801b95c:	689b      	ldr	r3, [r3, #8]
 801b95e:	fbb1 f3f3 	udiv	r3, r1, r3
 801b962:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801b964:	4ba2      	ldr	r3, [pc, #648]	; (801bbf0 <USB_EPStartXfer+0x3c0>)
 801b966:	400b      	ands	r3, r1
 801b968:	69b9      	ldr	r1, [r7, #24]
 801b96a:	0148      	lsls	r0, r1, #5
 801b96c:	69f9      	ldr	r1, [r7, #28]
 801b96e:	4401      	add	r1, r0
 801b970:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801b974:	4313      	orrs	r3, r2
 801b976:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801b978:	69bb      	ldr	r3, [r7, #24]
 801b97a:	015a      	lsls	r2, r3, #5
 801b97c:	69fb      	ldr	r3, [r7, #28]
 801b97e:	4413      	add	r3, r2
 801b980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b984:	691a      	ldr	r2, [r3, #16]
 801b986:	68bb      	ldr	r3, [r7, #8]
 801b988:	691b      	ldr	r3, [r3, #16]
 801b98a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b98e:	69b9      	ldr	r1, [r7, #24]
 801b990:	0148      	lsls	r0, r1, #5
 801b992:	69f9      	ldr	r1, [r7, #28]
 801b994:	4401      	add	r1, r0
 801b996:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801b99a:	4313      	orrs	r3, r2
 801b99c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801b99e:	68bb      	ldr	r3, [r7, #8]
 801b9a0:	791b      	ldrb	r3, [r3, #4]
 801b9a2:	2b01      	cmp	r3, #1
 801b9a4:	d11f      	bne.n	801b9e6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801b9a6:	69bb      	ldr	r3, [r7, #24]
 801b9a8:	015a      	lsls	r2, r3, #5
 801b9aa:	69fb      	ldr	r3, [r7, #28]
 801b9ac:	4413      	add	r3, r2
 801b9ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b9b2:	691b      	ldr	r3, [r3, #16]
 801b9b4:	69ba      	ldr	r2, [r7, #24]
 801b9b6:	0151      	lsls	r1, r2, #5
 801b9b8:	69fa      	ldr	r2, [r7, #28]
 801b9ba:	440a      	add	r2, r1
 801b9bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b9c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801b9c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801b9c6:	69bb      	ldr	r3, [r7, #24]
 801b9c8:	015a      	lsls	r2, r3, #5
 801b9ca:	69fb      	ldr	r3, [r7, #28]
 801b9cc:	4413      	add	r3, r2
 801b9ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b9d2:	691b      	ldr	r3, [r3, #16]
 801b9d4:	69ba      	ldr	r2, [r7, #24]
 801b9d6:	0151      	lsls	r1, r2, #5
 801b9d8:	69fa      	ldr	r2, [r7, #28]
 801b9da:	440a      	add	r2, r1
 801b9dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b9e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b9e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801b9e6:	79fb      	ldrb	r3, [r7, #7]
 801b9e8:	2b01      	cmp	r3, #1
 801b9ea:	d14b      	bne.n	801ba84 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801b9ec:	68bb      	ldr	r3, [r7, #8]
 801b9ee:	69db      	ldr	r3, [r3, #28]
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	d009      	beq.n	801ba08 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801b9f4:	69bb      	ldr	r3, [r7, #24]
 801b9f6:	015a      	lsls	r2, r3, #5
 801b9f8:	69fb      	ldr	r3, [r7, #28]
 801b9fa:	4413      	add	r3, r2
 801b9fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ba00:	461a      	mov	r2, r3
 801ba02:	68bb      	ldr	r3, [r7, #8]
 801ba04:	69db      	ldr	r3, [r3, #28]
 801ba06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801ba08:	68bb      	ldr	r3, [r7, #8]
 801ba0a:	791b      	ldrb	r3, [r3, #4]
 801ba0c:	2b01      	cmp	r3, #1
 801ba0e:	d128      	bne.n	801ba62 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801ba10:	69fb      	ldr	r3, [r7, #28]
 801ba12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ba16:	689b      	ldr	r3, [r3, #8]
 801ba18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d110      	bne.n	801ba42 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801ba20:	69bb      	ldr	r3, [r7, #24]
 801ba22:	015a      	lsls	r2, r3, #5
 801ba24:	69fb      	ldr	r3, [r7, #28]
 801ba26:	4413      	add	r3, r2
 801ba28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ba2c:	681b      	ldr	r3, [r3, #0]
 801ba2e:	69ba      	ldr	r2, [r7, #24]
 801ba30:	0151      	lsls	r1, r2, #5
 801ba32:	69fa      	ldr	r2, [r7, #28]
 801ba34:	440a      	add	r2, r1
 801ba36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ba3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801ba3e:	6013      	str	r3, [r2, #0]
 801ba40:	e00f      	b.n	801ba62 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801ba42:	69bb      	ldr	r3, [r7, #24]
 801ba44:	015a      	lsls	r2, r3, #5
 801ba46:	69fb      	ldr	r3, [r7, #28]
 801ba48:	4413      	add	r3, r2
 801ba4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	69ba      	ldr	r2, [r7, #24]
 801ba52:	0151      	lsls	r1, r2, #5
 801ba54:	69fa      	ldr	r2, [r7, #28]
 801ba56:	440a      	add	r2, r1
 801ba58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ba5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ba60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801ba62:	69bb      	ldr	r3, [r7, #24]
 801ba64:	015a      	lsls	r2, r3, #5
 801ba66:	69fb      	ldr	r3, [r7, #28]
 801ba68:	4413      	add	r3, r2
 801ba6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ba6e:	681b      	ldr	r3, [r3, #0]
 801ba70:	69ba      	ldr	r2, [r7, #24]
 801ba72:	0151      	lsls	r1, r2, #5
 801ba74:	69fa      	ldr	r2, [r7, #28]
 801ba76:	440a      	add	r2, r1
 801ba78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ba7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ba80:	6013      	str	r3, [r2, #0]
 801ba82:	e165      	b.n	801bd50 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801ba84:	69bb      	ldr	r3, [r7, #24]
 801ba86:	015a      	lsls	r2, r3, #5
 801ba88:	69fb      	ldr	r3, [r7, #28]
 801ba8a:	4413      	add	r3, r2
 801ba8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ba90:	681b      	ldr	r3, [r3, #0]
 801ba92:	69ba      	ldr	r2, [r7, #24]
 801ba94:	0151      	lsls	r1, r2, #5
 801ba96:	69fa      	ldr	r2, [r7, #28]
 801ba98:	440a      	add	r2, r1
 801ba9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ba9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801baa2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801baa4:	68bb      	ldr	r3, [r7, #8]
 801baa6:	791b      	ldrb	r3, [r3, #4]
 801baa8:	2b01      	cmp	r3, #1
 801baaa:	d015      	beq.n	801bad8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801baac:	68bb      	ldr	r3, [r7, #8]
 801baae:	691b      	ldr	r3, [r3, #16]
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	f000 814d 	beq.w	801bd50 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801bab6:	69fb      	ldr	r3, [r7, #28]
 801bab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801babc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801babe:	68bb      	ldr	r3, [r7, #8]
 801bac0:	781b      	ldrb	r3, [r3, #0]
 801bac2:	f003 030f 	and.w	r3, r3, #15
 801bac6:	2101      	movs	r1, #1
 801bac8:	fa01 f303 	lsl.w	r3, r1, r3
 801bacc:	69f9      	ldr	r1, [r7, #28]
 801bace:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801bad2:	4313      	orrs	r3, r2
 801bad4:	634b      	str	r3, [r1, #52]	; 0x34
 801bad6:	e13b      	b.n	801bd50 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801bad8:	69fb      	ldr	r3, [r7, #28]
 801bada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bade:	689b      	ldr	r3, [r3, #8]
 801bae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	d110      	bne.n	801bb0a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801bae8:	69bb      	ldr	r3, [r7, #24]
 801baea:	015a      	lsls	r2, r3, #5
 801baec:	69fb      	ldr	r3, [r7, #28]
 801baee:	4413      	add	r3, r2
 801baf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801baf4:	681b      	ldr	r3, [r3, #0]
 801baf6:	69ba      	ldr	r2, [r7, #24]
 801baf8:	0151      	lsls	r1, r2, #5
 801bafa:	69fa      	ldr	r2, [r7, #28]
 801bafc:	440a      	add	r2, r1
 801bafe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bb02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801bb06:	6013      	str	r3, [r2, #0]
 801bb08:	e00f      	b.n	801bb2a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801bb0a:	69bb      	ldr	r3, [r7, #24]
 801bb0c:	015a      	lsls	r2, r3, #5
 801bb0e:	69fb      	ldr	r3, [r7, #28]
 801bb10:	4413      	add	r3, r2
 801bb12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bb16:	681b      	ldr	r3, [r3, #0]
 801bb18:	69ba      	ldr	r2, [r7, #24]
 801bb1a:	0151      	lsls	r1, r2, #5
 801bb1c:	69fa      	ldr	r2, [r7, #28]
 801bb1e:	440a      	add	r2, r1
 801bb20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bb24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bb28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801bb2a:	68bb      	ldr	r3, [r7, #8]
 801bb2c:	68d9      	ldr	r1, [r3, #12]
 801bb2e:	68bb      	ldr	r3, [r7, #8]
 801bb30:	781a      	ldrb	r2, [r3, #0]
 801bb32:	68bb      	ldr	r3, [r7, #8]
 801bb34:	691b      	ldr	r3, [r3, #16]
 801bb36:	b298      	uxth	r0, r3
 801bb38:	79fb      	ldrb	r3, [r7, #7]
 801bb3a:	9300      	str	r3, [sp, #0]
 801bb3c:	4603      	mov	r3, r0
 801bb3e:	68f8      	ldr	r0, [r7, #12]
 801bb40:	f000 f9b8 	bl	801beb4 <USB_WritePacket>
 801bb44:	e104      	b.n	801bd50 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801bb46:	69bb      	ldr	r3, [r7, #24]
 801bb48:	015a      	lsls	r2, r3, #5
 801bb4a:	69fb      	ldr	r3, [r7, #28]
 801bb4c:	4413      	add	r3, r2
 801bb4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bb52:	691b      	ldr	r3, [r3, #16]
 801bb54:	69ba      	ldr	r2, [r7, #24]
 801bb56:	0151      	lsls	r1, r2, #5
 801bb58:	69fa      	ldr	r2, [r7, #28]
 801bb5a:	440a      	add	r2, r1
 801bb5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bb60:	0cdb      	lsrs	r3, r3, #19
 801bb62:	04db      	lsls	r3, r3, #19
 801bb64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801bb66:	69bb      	ldr	r3, [r7, #24]
 801bb68:	015a      	lsls	r2, r3, #5
 801bb6a:	69fb      	ldr	r3, [r7, #28]
 801bb6c:	4413      	add	r3, r2
 801bb6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bb72:	691b      	ldr	r3, [r3, #16]
 801bb74:	69ba      	ldr	r2, [r7, #24]
 801bb76:	0151      	lsls	r1, r2, #5
 801bb78:	69fa      	ldr	r2, [r7, #28]
 801bb7a:	440a      	add	r2, r1
 801bb7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bb80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801bb84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801bb88:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 801bb8a:	69bb      	ldr	r3, [r7, #24]
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d131      	bne.n	801bbf4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 801bb90:	68bb      	ldr	r3, [r7, #8]
 801bb92:	691b      	ldr	r3, [r3, #16]
 801bb94:	2b00      	cmp	r3, #0
 801bb96:	d003      	beq.n	801bba0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 801bb98:	68bb      	ldr	r3, [r7, #8]
 801bb9a:	689a      	ldr	r2, [r3, #8]
 801bb9c:	68bb      	ldr	r3, [r7, #8]
 801bb9e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801bba0:	68bb      	ldr	r3, [r7, #8]
 801bba2:	689a      	ldr	r2, [r3, #8]
 801bba4:	68bb      	ldr	r3, [r7, #8]
 801bba6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801bba8:	69bb      	ldr	r3, [r7, #24]
 801bbaa:	015a      	lsls	r2, r3, #5
 801bbac:	69fb      	ldr	r3, [r7, #28]
 801bbae:	4413      	add	r3, r2
 801bbb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bbb4:	691a      	ldr	r2, [r3, #16]
 801bbb6:	68bb      	ldr	r3, [r7, #8]
 801bbb8:	6a1b      	ldr	r3, [r3, #32]
 801bbba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801bbbe:	69b9      	ldr	r1, [r7, #24]
 801bbc0:	0148      	lsls	r0, r1, #5
 801bbc2:	69f9      	ldr	r1, [r7, #28]
 801bbc4:	4401      	add	r1, r0
 801bbc6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801bbca:	4313      	orrs	r3, r2
 801bbcc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801bbce:	69bb      	ldr	r3, [r7, #24]
 801bbd0:	015a      	lsls	r2, r3, #5
 801bbd2:	69fb      	ldr	r3, [r7, #28]
 801bbd4:	4413      	add	r3, r2
 801bbd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bbda:	691b      	ldr	r3, [r3, #16]
 801bbdc:	69ba      	ldr	r2, [r7, #24]
 801bbde:	0151      	lsls	r1, r2, #5
 801bbe0:	69fa      	ldr	r2, [r7, #28]
 801bbe2:	440a      	add	r2, r1
 801bbe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bbe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801bbec:	6113      	str	r3, [r2, #16]
 801bbee:	e061      	b.n	801bcb4 <USB_EPStartXfer+0x484>
 801bbf0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 801bbf4:	68bb      	ldr	r3, [r7, #8]
 801bbf6:	691b      	ldr	r3, [r3, #16]
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	d123      	bne.n	801bc44 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801bbfc:	69bb      	ldr	r3, [r7, #24]
 801bbfe:	015a      	lsls	r2, r3, #5
 801bc00:	69fb      	ldr	r3, [r7, #28]
 801bc02:	4413      	add	r3, r2
 801bc04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bc08:	691a      	ldr	r2, [r3, #16]
 801bc0a:	68bb      	ldr	r3, [r7, #8]
 801bc0c:	689b      	ldr	r3, [r3, #8]
 801bc0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801bc12:	69b9      	ldr	r1, [r7, #24]
 801bc14:	0148      	lsls	r0, r1, #5
 801bc16:	69f9      	ldr	r1, [r7, #28]
 801bc18:	4401      	add	r1, r0
 801bc1a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801bc1e:	4313      	orrs	r3, r2
 801bc20:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801bc22:	69bb      	ldr	r3, [r7, #24]
 801bc24:	015a      	lsls	r2, r3, #5
 801bc26:	69fb      	ldr	r3, [r7, #28]
 801bc28:	4413      	add	r3, r2
 801bc2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bc2e:	691b      	ldr	r3, [r3, #16]
 801bc30:	69ba      	ldr	r2, [r7, #24]
 801bc32:	0151      	lsls	r1, r2, #5
 801bc34:	69fa      	ldr	r2, [r7, #28]
 801bc36:	440a      	add	r2, r1
 801bc38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bc3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801bc40:	6113      	str	r3, [r2, #16]
 801bc42:	e037      	b.n	801bcb4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801bc44:	68bb      	ldr	r3, [r7, #8]
 801bc46:	691a      	ldr	r2, [r3, #16]
 801bc48:	68bb      	ldr	r3, [r7, #8]
 801bc4a:	689b      	ldr	r3, [r3, #8]
 801bc4c:	4413      	add	r3, r2
 801bc4e:	1e5a      	subs	r2, r3, #1
 801bc50:	68bb      	ldr	r3, [r7, #8]
 801bc52:	689b      	ldr	r3, [r3, #8]
 801bc54:	fbb2 f3f3 	udiv	r3, r2, r3
 801bc58:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801bc5a:	68bb      	ldr	r3, [r7, #8]
 801bc5c:	689b      	ldr	r3, [r3, #8]
 801bc5e:	8afa      	ldrh	r2, [r7, #22]
 801bc60:	fb03 f202 	mul.w	r2, r3, r2
 801bc64:	68bb      	ldr	r3, [r7, #8]
 801bc66:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801bc68:	69bb      	ldr	r3, [r7, #24]
 801bc6a:	015a      	lsls	r2, r3, #5
 801bc6c:	69fb      	ldr	r3, [r7, #28]
 801bc6e:	4413      	add	r3, r2
 801bc70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bc74:	691a      	ldr	r2, [r3, #16]
 801bc76:	8afb      	ldrh	r3, [r7, #22]
 801bc78:	04d9      	lsls	r1, r3, #19
 801bc7a:	4b38      	ldr	r3, [pc, #224]	; (801bd5c <USB_EPStartXfer+0x52c>)
 801bc7c:	400b      	ands	r3, r1
 801bc7e:	69b9      	ldr	r1, [r7, #24]
 801bc80:	0148      	lsls	r0, r1, #5
 801bc82:	69f9      	ldr	r1, [r7, #28]
 801bc84:	4401      	add	r1, r0
 801bc86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801bc8a:	4313      	orrs	r3, r2
 801bc8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801bc8e:	69bb      	ldr	r3, [r7, #24]
 801bc90:	015a      	lsls	r2, r3, #5
 801bc92:	69fb      	ldr	r3, [r7, #28]
 801bc94:	4413      	add	r3, r2
 801bc96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bc9a:	691a      	ldr	r2, [r3, #16]
 801bc9c:	68bb      	ldr	r3, [r7, #8]
 801bc9e:	6a1b      	ldr	r3, [r3, #32]
 801bca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801bca4:	69b9      	ldr	r1, [r7, #24]
 801bca6:	0148      	lsls	r0, r1, #5
 801bca8:	69f9      	ldr	r1, [r7, #28]
 801bcaa:	4401      	add	r1, r0
 801bcac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801bcb0:	4313      	orrs	r3, r2
 801bcb2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801bcb4:	79fb      	ldrb	r3, [r7, #7]
 801bcb6:	2b01      	cmp	r3, #1
 801bcb8:	d10d      	bne.n	801bcd6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801bcba:	68bb      	ldr	r3, [r7, #8]
 801bcbc:	68db      	ldr	r3, [r3, #12]
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d009      	beq.n	801bcd6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801bcc2:	68bb      	ldr	r3, [r7, #8]
 801bcc4:	68d9      	ldr	r1, [r3, #12]
 801bcc6:	69bb      	ldr	r3, [r7, #24]
 801bcc8:	015a      	lsls	r2, r3, #5
 801bcca:	69fb      	ldr	r3, [r7, #28]
 801bccc:	4413      	add	r3, r2
 801bcce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bcd2:	460a      	mov	r2, r1
 801bcd4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801bcd6:	68bb      	ldr	r3, [r7, #8]
 801bcd8:	791b      	ldrb	r3, [r3, #4]
 801bcda:	2b01      	cmp	r3, #1
 801bcdc:	d128      	bne.n	801bd30 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801bcde:	69fb      	ldr	r3, [r7, #28]
 801bce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bce4:	689b      	ldr	r3, [r3, #8]
 801bce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	d110      	bne.n	801bd10 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801bcee:	69bb      	ldr	r3, [r7, #24]
 801bcf0:	015a      	lsls	r2, r3, #5
 801bcf2:	69fb      	ldr	r3, [r7, #28]
 801bcf4:	4413      	add	r3, r2
 801bcf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bcfa:	681b      	ldr	r3, [r3, #0]
 801bcfc:	69ba      	ldr	r2, [r7, #24]
 801bcfe:	0151      	lsls	r1, r2, #5
 801bd00:	69fa      	ldr	r2, [r7, #28]
 801bd02:	440a      	add	r2, r1
 801bd04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bd08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801bd0c:	6013      	str	r3, [r2, #0]
 801bd0e:	e00f      	b.n	801bd30 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801bd10:	69bb      	ldr	r3, [r7, #24]
 801bd12:	015a      	lsls	r2, r3, #5
 801bd14:	69fb      	ldr	r3, [r7, #28]
 801bd16:	4413      	add	r3, r2
 801bd18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd1c:	681b      	ldr	r3, [r3, #0]
 801bd1e:	69ba      	ldr	r2, [r7, #24]
 801bd20:	0151      	lsls	r1, r2, #5
 801bd22:	69fa      	ldr	r2, [r7, #28]
 801bd24:	440a      	add	r2, r1
 801bd26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bd2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bd2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801bd30:	69bb      	ldr	r3, [r7, #24]
 801bd32:	015a      	lsls	r2, r3, #5
 801bd34:	69fb      	ldr	r3, [r7, #28]
 801bd36:	4413      	add	r3, r2
 801bd38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd3c:	681b      	ldr	r3, [r3, #0]
 801bd3e:	69ba      	ldr	r2, [r7, #24]
 801bd40:	0151      	lsls	r1, r2, #5
 801bd42:	69fa      	ldr	r2, [r7, #28]
 801bd44:	440a      	add	r2, r1
 801bd46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bd4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801bd4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801bd50:	2300      	movs	r3, #0
}
 801bd52:	4618      	mov	r0, r3
 801bd54:	3720      	adds	r7, #32
 801bd56:	46bd      	mov	sp, r7
 801bd58:	bd80      	pop	{r7, pc}
 801bd5a:	bf00      	nop
 801bd5c:	1ff80000 	.word	0x1ff80000

0801bd60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801bd60:	b480      	push	{r7}
 801bd62:	b087      	sub	sp, #28
 801bd64:	af00      	add	r7, sp, #0
 801bd66:	6078      	str	r0, [r7, #4]
 801bd68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801bd6a:	2300      	movs	r3, #0
 801bd6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801bd6e:	2300      	movs	r3, #0
 801bd70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bd72:	687b      	ldr	r3, [r7, #4]
 801bd74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801bd76:	683b      	ldr	r3, [r7, #0]
 801bd78:	785b      	ldrb	r3, [r3, #1]
 801bd7a:	2b01      	cmp	r3, #1
 801bd7c:	d14a      	bne.n	801be14 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801bd7e:	683b      	ldr	r3, [r7, #0]
 801bd80:	781b      	ldrb	r3, [r3, #0]
 801bd82:	015a      	lsls	r2, r3, #5
 801bd84:	693b      	ldr	r3, [r7, #16]
 801bd86:	4413      	add	r3, r2
 801bd88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801bd92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801bd96:	f040 8086 	bne.w	801bea6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801bd9a:	683b      	ldr	r3, [r7, #0]
 801bd9c:	781b      	ldrb	r3, [r3, #0]
 801bd9e:	015a      	lsls	r2, r3, #5
 801bda0:	693b      	ldr	r3, [r7, #16]
 801bda2:	4413      	add	r3, r2
 801bda4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bda8:	681b      	ldr	r3, [r3, #0]
 801bdaa:	683a      	ldr	r2, [r7, #0]
 801bdac:	7812      	ldrb	r2, [r2, #0]
 801bdae:	0151      	lsls	r1, r2, #5
 801bdb0:	693a      	ldr	r2, [r7, #16]
 801bdb2:	440a      	add	r2, r1
 801bdb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bdb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801bdbc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801bdbe:	683b      	ldr	r3, [r7, #0]
 801bdc0:	781b      	ldrb	r3, [r3, #0]
 801bdc2:	015a      	lsls	r2, r3, #5
 801bdc4:	693b      	ldr	r3, [r7, #16]
 801bdc6:	4413      	add	r3, r2
 801bdc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bdcc:	681b      	ldr	r3, [r3, #0]
 801bdce:	683a      	ldr	r2, [r7, #0]
 801bdd0:	7812      	ldrb	r2, [r2, #0]
 801bdd2:	0151      	lsls	r1, r2, #5
 801bdd4:	693a      	ldr	r2, [r7, #16]
 801bdd6:	440a      	add	r2, r1
 801bdd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bddc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801bde0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801bde2:	68fb      	ldr	r3, [r7, #12]
 801bde4:	3301      	adds	r3, #1
 801bde6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801bde8:	68fb      	ldr	r3, [r7, #12]
 801bdea:	f242 7210 	movw	r2, #10000	; 0x2710
 801bdee:	4293      	cmp	r3, r2
 801bdf0:	d902      	bls.n	801bdf8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801bdf2:	2301      	movs	r3, #1
 801bdf4:	75fb      	strb	r3, [r7, #23]
          break;
 801bdf6:	e056      	b.n	801bea6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801bdf8:	683b      	ldr	r3, [r7, #0]
 801bdfa:	781b      	ldrb	r3, [r3, #0]
 801bdfc:	015a      	lsls	r2, r3, #5
 801bdfe:	693b      	ldr	r3, [r7, #16]
 801be00:	4413      	add	r3, r2
 801be02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801be06:	681b      	ldr	r3, [r3, #0]
 801be08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801be0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801be10:	d0e7      	beq.n	801bde2 <USB_EPStopXfer+0x82>
 801be12:	e048      	b.n	801bea6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801be14:	683b      	ldr	r3, [r7, #0]
 801be16:	781b      	ldrb	r3, [r3, #0]
 801be18:	015a      	lsls	r2, r3, #5
 801be1a:	693b      	ldr	r3, [r7, #16]
 801be1c:	4413      	add	r3, r2
 801be1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be22:	681b      	ldr	r3, [r3, #0]
 801be24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801be28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801be2c:	d13b      	bne.n	801bea6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801be2e:	683b      	ldr	r3, [r7, #0]
 801be30:	781b      	ldrb	r3, [r3, #0]
 801be32:	015a      	lsls	r2, r3, #5
 801be34:	693b      	ldr	r3, [r7, #16]
 801be36:	4413      	add	r3, r2
 801be38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be3c:	681b      	ldr	r3, [r3, #0]
 801be3e:	683a      	ldr	r2, [r7, #0]
 801be40:	7812      	ldrb	r2, [r2, #0]
 801be42:	0151      	lsls	r1, r2, #5
 801be44:	693a      	ldr	r2, [r7, #16]
 801be46:	440a      	add	r2, r1
 801be48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801be4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801be50:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801be52:	683b      	ldr	r3, [r7, #0]
 801be54:	781b      	ldrb	r3, [r3, #0]
 801be56:	015a      	lsls	r2, r3, #5
 801be58:	693b      	ldr	r3, [r7, #16]
 801be5a:	4413      	add	r3, r2
 801be5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be60:	681b      	ldr	r3, [r3, #0]
 801be62:	683a      	ldr	r2, [r7, #0]
 801be64:	7812      	ldrb	r2, [r2, #0]
 801be66:	0151      	lsls	r1, r2, #5
 801be68:	693a      	ldr	r2, [r7, #16]
 801be6a:	440a      	add	r2, r1
 801be6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801be70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801be74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801be76:	68fb      	ldr	r3, [r7, #12]
 801be78:	3301      	adds	r3, #1
 801be7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801be7c:	68fb      	ldr	r3, [r7, #12]
 801be7e:	f242 7210 	movw	r2, #10000	; 0x2710
 801be82:	4293      	cmp	r3, r2
 801be84:	d902      	bls.n	801be8c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801be86:	2301      	movs	r3, #1
 801be88:	75fb      	strb	r3, [r7, #23]
          break;
 801be8a:	e00c      	b.n	801bea6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801be8c:	683b      	ldr	r3, [r7, #0]
 801be8e:	781b      	ldrb	r3, [r3, #0]
 801be90:	015a      	lsls	r2, r3, #5
 801be92:	693b      	ldr	r3, [r7, #16]
 801be94:	4413      	add	r3, r2
 801be96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be9a:	681b      	ldr	r3, [r3, #0]
 801be9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801bea0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801bea4:	d0e7      	beq.n	801be76 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801bea6:	7dfb      	ldrb	r3, [r7, #23]
}
 801bea8:	4618      	mov	r0, r3
 801beaa:	371c      	adds	r7, #28
 801beac:	46bd      	mov	sp, r7
 801beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beb2:	4770      	bx	lr

0801beb4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801beb4:	b480      	push	{r7}
 801beb6:	b089      	sub	sp, #36	; 0x24
 801beb8:	af00      	add	r7, sp, #0
 801beba:	60f8      	str	r0, [r7, #12]
 801bebc:	60b9      	str	r1, [r7, #8]
 801bebe:	4611      	mov	r1, r2
 801bec0:	461a      	mov	r2, r3
 801bec2:	460b      	mov	r3, r1
 801bec4:	71fb      	strb	r3, [r7, #7]
 801bec6:	4613      	mov	r3, r2
 801bec8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801beca:	68fb      	ldr	r3, [r7, #12]
 801becc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801bece:	68bb      	ldr	r3, [r7, #8]
 801bed0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801bed2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	d123      	bne.n	801bf22 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801beda:	88bb      	ldrh	r3, [r7, #4]
 801bedc:	3303      	adds	r3, #3
 801bede:	089b      	lsrs	r3, r3, #2
 801bee0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801bee2:	2300      	movs	r3, #0
 801bee4:	61bb      	str	r3, [r7, #24]
 801bee6:	e018      	b.n	801bf1a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801bee8:	79fb      	ldrb	r3, [r7, #7]
 801beea:	031a      	lsls	r2, r3, #12
 801beec:	697b      	ldr	r3, [r7, #20]
 801beee:	4413      	add	r3, r2
 801bef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bef4:	461a      	mov	r2, r3
 801bef6:	69fb      	ldr	r3, [r7, #28]
 801bef8:	681b      	ldr	r3, [r3, #0]
 801befa:	6013      	str	r3, [r2, #0]
      pSrc++;
 801befc:	69fb      	ldr	r3, [r7, #28]
 801befe:	3301      	adds	r3, #1
 801bf00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801bf02:	69fb      	ldr	r3, [r7, #28]
 801bf04:	3301      	adds	r3, #1
 801bf06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801bf08:	69fb      	ldr	r3, [r7, #28]
 801bf0a:	3301      	adds	r3, #1
 801bf0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801bf0e:	69fb      	ldr	r3, [r7, #28]
 801bf10:	3301      	adds	r3, #1
 801bf12:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801bf14:	69bb      	ldr	r3, [r7, #24]
 801bf16:	3301      	adds	r3, #1
 801bf18:	61bb      	str	r3, [r7, #24]
 801bf1a:	69ba      	ldr	r2, [r7, #24]
 801bf1c:	693b      	ldr	r3, [r7, #16]
 801bf1e:	429a      	cmp	r2, r3
 801bf20:	d3e2      	bcc.n	801bee8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801bf22:	2300      	movs	r3, #0
}
 801bf24:	4618      	mov	r0, r3
 801bf26:	3724      	adds	r7, #36	; 0x24
 801bf28:	46bd      	mov	sp, r7
 801bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf2e:	4770      	bx	lr

0801bf30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801bf30:	b480      	push	{r7}
 801bf32:	b08b      	sub	sp, #44	; 0x2c
 801bf34:	af00      	add	r7, sp, #0
 801bf36:	60f8      	str	r0, [r7, #12]
 801bf38:	60b9      	str	r1, [r7, #8]
 801bf3a:	4613      	mov	r3, r2
 801bf3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bf3e:	68fb      	ldr	r3, [r7, #12]
 801bf40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801bf42:	68bb      	ldr	r3, [r7, #8]
 801bf44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801bf46:	88fb      	ldrh	r3, [r7, #6]
 801bf48:	089b      	lsrs	r3, r3, #2
 801bf4a:	b29b      	uxth	r3, r3
 801bf4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801bf4e:	88fb      	ldrh	r3, [r7, #6]
 801bf50:	f003 0303 	and.w	r3, r3, #3
 801bf54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801bf56:	2300      	movs	r3, #0
 801bf58:	623b      	str	r3, [r7, #32]
 801bf5a:	e014      	b.n	801bf86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801bf5c:	69bb      	ldr	r3, [r7, #24]
 801bf5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bf62:	681a      	ldr	r2, [r3, #0]
 801bf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf66:	601a      	str	r2, [r3, #0]
    pDest++;
 801bf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf6a:	3301      	adds	r3, #1
 801bf6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801bf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf70:	3301      	adds	r3, #1
 801bf72:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801bf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf76:	3301      	adds	r3, #1
 801bf78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801bf7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf7c:	3301      	adds	r3, #1
 801bf7e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801bf80:	6a3b      	ldr	r3, [r7, #32]
 801bf82:	3301      	adds	r3, #1
 801bf84:	623b      	str	r3, [r7, #32]
 801bf86:	6a3a      	ldr	r2, [r7, #32]
 801bf88:	697b      	ldr	r3, [r7, #20]
 801bf8a:	429a      	cmp	r2, r3
 801bf8c:	d3e6      	bcc.n	801bf5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801bf8e:	8bfb      	ldrh	r3, [r7, #30]
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d01e      	beq.n	801bfd2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801bf94:	2300      	movs	r3, #0
 801bf96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801bf98:	69bb      	ldr	r3, [r7, #24]
 801bf9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bf9e:	461a      	mov	r2, r3
 801bfa0:	f107 0310 	add.w	r3, r7, #16
 801bfa4:	6812      	ldr	r2, [r2, #0]
 801bfa6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801bfa8:	693a      	ldr	r2, [r7, #16]
 801bfaa:	6a3b      	ldr	r3, [r7, #32]
 801bfac:	b2db      	uxtb	r3, r3
 801bfae:	00db      	lsls	r3, r3, #3
 801bfb0:	fa22 f303 	lsr.w	r3, r2, r3
 801bfb4:	b2da      	uxtb	r2, r3
 801bfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfb8:	701a      	strb	r2, [r3, #0]
      i++;
 801bfba:	6a3b      	ldr	r3, [r7, #32]
 801bfbc:	3301      	adds	r3, #1
 801bfbe:	623b      	str	r3, [r7, #32]
      pDest++;
 801bfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfc2:	3301      	adds	r3, #1
 801bfc4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801bfc6:	8bfb      	ldrh	r3, [r7, #30]
 801bfc8:	3b01      	subs	r3, #1
 801bfca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801bfcc:	8bfb      	ldrh	r3, [r7, #30]
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d1ea      	bne.n	801bfa8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801bfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801bfd4:	4618      	mov	r0, r3
 801bfd6:	372c      	adds	r7, #44	; 0x2c
 801bfd8:	46bd      	mov	sp, r7
 801bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfde:	4770      	bx	lr

0801bfe0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801bfe0:	b480      	push	{r7}
 801bfe2:	b085      	sub	sp, #20
 801bfe4:	af00      	add	r7, sp, #0
 801bfe6:	6078      	str	r0, [r7, #4]
 801bfe8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bfea:	687b      	ldr	r3, [r7, #4]
 801bfec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801bfee:	683b      	ldr	r3, [r7, #0]
 801bff0:	781b      	ldrb	r3, [r3, #0]
 801bff2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801bff4:	683b      	ldr	r3, [r7, #0]
 801bff6:	785b      	ldrb	r3, [r3, #1]
 801bff8:	2b01      	cmp	r3, #1
 801bffa:	d12c      	bne.n	801c056 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801bffc:	68bb      	ldr	r3, [r7, #8]
 801bffe:	015a      	lsls	r2, r3, #5
 801c000:	68fb      	ldr	r3, [r7, #12]
 801c002:	4413      	add	r3, r2
 801c004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c008:	681b      	ldr	r3, [r3, #0]
 801c00a:	2b00      	cmp	r3, #0
 801c00c:	db12      	blt.n	801c034 <USB_EPSetStall+0x54>
 801c00e:	68bb      	ldr	r3, [r7, #8]
 801c010:	2b00      	cmp	r3, #0
 801c012:	d00f      	beq.n	801c034 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801c014:	68bb      	ldr	r3, [r7, #8]
 801c016:	015a      	lsls	r2, r3, #5
 801c018:	68fb      	ldr	r3, [r7, #12]
 801c01a:	4413      	add	r3, r2
 801c01c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c020:	681b      	ldr	r3, [r3, #0]
 801c022:	68ba      	ldr	r2, [r7, #8]
 801c024:	0151      	lsls	r1, r2, #5
 801c026:	68fa      	ldr	r2, [r7, #12]
 801c028:	440a      	add	r2, r1
 801c02a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c02e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801c032:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801c034:	68bb      	ldr	r3, [r7, #8]
 801c036:	015a      	lsls	r2, r3, #5
 801c038:	68fb      	ldr	r3, [r7, #12]
 801c03a:	4413      	add	r3, r2
 801c03c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	68ba      	ldr	r2, [r7, #8]
 801c044:	0151      	lsls	r1, r2, #5
 801c046:	68fa      	ldr	r2, [r7, #12]
 801c048:	440a      	add	r2, r1
 801c04a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c04e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801c052:	6013      	str	r3, [r2, #0]
 801c054:	e02b      	b.n	801c0ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801c056:	68bb      	ldr	r3, [r7, #8]
 801c058:	015a      	lsls	r2, r3, #5
 801c05a:	68fb      	ldr	r3, [r7, #12]
 801c05c:	4413      	add	r3, r2
 801c05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c062:	681b      	ldr	r3, [r3, #0]
 801c064:	2b00      	cmp	r3, #0
 801c066:	db12      	blt.n	801c08e <USB_EPSetStall+0xae>
 801c068:	68bb      	ldr	r3, [r7, #8]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d00f      	beq.n	801c08e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801c06e:	68bb      	ldr	r3, [r7, #8]
 801c070:	015a      	lsls	r2, r3, #5
 801c072:	68fb      	ldr	r3, [r7, #12]
 801c074:	4413      	add	r3, r2
 801c076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c07a:	681b      	ldr	r3, [r3, #0]
 801c07c:	68ba      	ldr	r2, [r7, #8]
 801c07e:	0151      	lsls	r1, r2, #5
 801c080:	68fa      	ldr	r2, [r7, #12]
 801c082:	440a      	add	r2, r1
 801c084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c088:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801c08c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801c08e:	68bb      	ldr	r3, [r7, #8]
 801c090:	015a      	lsls	r2, r3, #5
 801c092:	68fb      	ldr	r3, [r7, #12]
 801c094:	4413      	add	r3, r2
 801c096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c09a:	681b      	ldr	r3, [r3, #0]
 801c09c:	68ba      	ldr	r2, [r7, #8]
 801c09e:	0151      	lsls	r1, r2, #5
 801c0a0:	68fa      	ldr	r2, [r7, #12]
 801c0a2:	440a      	add	r2, r1
 801c0a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c0a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801c0ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801c0ae:	2300      	movs	r3, #0
}
 801c0b0:	4618      	mov	r0, r3
 801c0b2:	3714      	adds	r7, #20
 801c0b4:	46bd      	mov	sp, r7
 801c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0ba:	4770      	bx	lr

0801c0bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801c0bc:	b480      	push	{r7}
 801c0be:	b085      	sub	sp, #20
 801c0c0:	af00      	add	r7, sp, #0
 801c0c2:	6078      	str	r0, [r7, #4]
 801c0c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801c0ca:	683b      	ldr	r3, [r7, #0]
 801c0cc:	781b      	ldrb	r3, [r3, #0]
 801c0ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801c0d0:	683b      	ldr	r3, [r7, #0]
 801c0d2:	785b      	ldrb	r3, [r3, #1]
 801c0d4:	2b01      	cmp	r3, #1
 801c0d6:	d128      	bne.n	801c12a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801c0d8:	68bb      	ldr	r3, [r7, #8]
 801c0da:	015a      	lsls	r2, r3, #5
 801c0dc:	68fb      	ldr	r3, [r7, #12]
 801c0de:	4413      	add	r3, r2
 801c0e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c0e4:	681b      	ldr	r3, [r3, #0]
 801c0e6:	68ba      	ldr	r2, [r7, #8]
 801c0e8:	0151      	lsls	r1, r2, #5
 801c0ea:	68fa      	ldr	r2, [r7, #12]
 801c0ec:	440a      	add	r2, r1
 801c0ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c0f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801c0f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801c0f8:	683b      	ldr	r3, [r7, #0]
 801c0fa:	791b      	ldrb	r3, [r3, #4]
 801c0fc:	2b03      	cmp	r3, #3
 801c0fe:	d003      	beq.n	801c108 <USB_EPClearStall+0x4c>
 801c100:	683b      	ldr	r3, [r7, #0]
 801c102:	791b      	ldrb	r3, [r3, #4]
 801c104:	2b02      	cmp	r3, #2
 801c106:	d138      	bne.n	801c17a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801c108:	68bb      	ldr	r3, [r7, #8]
 801c10a:	015a      	lsls	r2, r3, #5
 801c10c:	68fb      	ldr	r3, [r7, #12]
 801c10e:	4413      	add	r3, r2
 801c110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	68ba      	ldr	r2, [r7, #8]
 801c118:	0151      	lsls	r1, r2, #5
 801c11a:	68fa      	ldr	r2, [r7, #12]
 801c11c:	440a      	add	r2, r1
 801c11e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c126:	6013      	str	r3, [r2, #0]
 801c128:	e027      	b.n	801c17a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801c12a:	68bb      	ldr	r3, [r7, #8]
 801c12c:	015a      	lsls	r2, r3, #5
 801c12e:	68fb      	ldr	r3, [r7, #12]
 801c130:	4413      	add	r3, r2
 801c132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c136:	681b      	ldr	r3, [r3, #0]
 801c138:	68ba      	ldr	r2, [r7, #8]
 801c13a:	0151      	lsls	r1, r2, #5
 801c13c:	68fa      	ldr	r2, [r7, #12]
 801c13e:	440a      	add	r2, r1
 801c140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c144:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801c148:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801c14a:	683b      	ldr	r3, [r7, #0]
 801c14c:	791b      	ldrb	r3, [r3, #4]
 801c14e:	2b03      	cmp	r3, #3
 801c150:	d003      	beq.n	801c15a <USB_EPClearStall+0x9e>
 801c152:	683b      	ldr	r3, [r7, #0]
 801c154:	791b      	ldrb	r3, [r3, #4]
 801c156:	2b02      	cmp	r3, #2
 801c158:	d10f      	bne.n	801c17a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801c15a:	68bb      	ldr	r3, [r7, #8]
 801c15c:	015a      	lsls	r2, r3, #5
 801c15e:	68fb      	ldr	r3, [r7, #12]
 801c160:	4413      	add	r3, r2
 801c162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c166:	681b      	ldr	r3, [r3, #0]
 801c168:	68ba      	ldr	r2, [r7, #8]
 801c16a:	0151      	lsls	r1, r2, #5
 801c16c:	68fa      	ldr	r2, [r7, #12]
 801c16e:	440a      	add	r2, r1
 801c170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c178:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801c17a:	2300      	movs	r3, #0
}
 801c17c:	4618      	mov	r0, r3
 801c17e:	3714      	adds	r7, #20
 801c180:	46bd      	mov	sp, r7
 801c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c186:	4770      	bx	lr

0801c188 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801c188:	b480      	push	{r7}
 801c18a:	b085      	sub	sp, #20
 801c18c:	af00      	add	r7, sp, #0
 801c18e:	6078      	str	r0, [r7, #4]
 801c190:	460b      	mov	r3, r1
 801c192:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c194:	687b      	ldr	r3, [r7, #4]
 801c196:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801c198:	68fb      	ldr	r3, [r7, #12]
 801c19a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c19e:	681b      	ldr	r3, [r3, #0]
 801c1a0:	68fa      	ldr	r2, [r7, #12]
 801c1a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801c1a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801c1aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801c1ac:	68fb      	ldr	r3, [r7, #12]
 801c1ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c1b2:	681a      	ldr	r2, [r3, #0]
 801c1b4:	78fb      	ldrb	r3, [r7, #3]
 801c1b6:	011b      	lsls	r3, r3, #4
 801c1b8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801c1bc:	68f9      	ldr	r1, [r7, #12]
 801c1be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801c1c2:	4313      	orrs	r3, r2
 801c1c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801c1c6:	2300      	movs	r3, #0
}
 801c1c8:	4618      	mov	r0, r3
 801c1ca:	3714      	adds	r7, #20
 801c1cc:	46bd      	mov	sp, r7
 801c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1d2:	4770      	bx	lr

0801c1d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801c1d4:	b480      	push	{r7}
 801c1d6:	b085      	sub	sp, #20
 801c1d8:	af00      	add	r7, sp, #0
 801c1da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801c1e0:	68fb      	ldr	r3, [r7, #12]
 801c1e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801c1e6:	681b      	ldr	r3, [r3, #0]
 801c1e8:	68fa      	ldr	r2, [r7, #12]
 801c1ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801c1ee:	f023 0303 	bic.w	r3, r3, #3
 801c1f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801c1f4:	68fb      	ldr	r3, [r7, #12]
 801c1f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c1fa:	685b      	ldr	r3, [r3, #4]
 801c1fc:	68fa      	ldr	r2, [r7, #12]
 801c1fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801c202:	f023 0302 	bic.w	r3, r3, #2
 801c206:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801c208:	2300      	movs	r3, #0
}
 801c20a:	4618      	mov	r0, r3
 801c20c:	3714      	adds	r7, #20
 801c20e:	46bd      	mov	sp, r7
 801c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c214:	4770      	bx	lr

0801c216 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801c216:	b480      	push	{r7}
 801c218:	b085      	sub	sp, #20
 801c21a:	af00      	add	r7, sp, #0
 801c21c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801c222:	68fb      	ldr	r3, [r7, #12]
 801c224:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	68fa      	ldr	r2, [r7, #12]
 801c22c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801c230:	f023 0303 	bic.w	r3, r3, #3
 801c234:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801c236:	68fb      	ldr	r3, [r7, #12]
 801c238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c23c:	685b      	ldr	r3, [r3, #4]
 801c23e:	68fa      	ldr	r2, [r7, #12]
 801c240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801c244:	f043 0302 	orr.w	r3, r3, #2
 801c248:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801c24a:	2300      	movs	r3, #0
}
 801c24c:	4618      	mov	r0, r3
 801c24e:	3714      	adds	r7, #20
 801c250:	46bd      	mov	sp, r7
 801c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c256:	4770      	bx	lr

0801c258 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801c258:	b480      	push	{r7}
 801c25a:	b085      	sub	sp, #20
 801c25c:	af00      	add	r7, sp, #0
 801c25e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	695b      	ldr	r3, [r3, #20]
 801c264:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	699b      	ldr	r3, [r3, #24]
 801c26a:	68fa      	ldr	r2, [r7, #12]
 801c26c:	4013      	ands	r3, r2
 801c26e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801c270:	68fb      	ldr	r3, [r7, #12]
}
 801c272:	4618      	mov	r0, r3
 801c274:	3714      	adds	r7, #20
 801c276:	46bd      	mov	sp, r7
 801c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c27c:	4770      	bx	lr

0801c27e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801c27e:	b480      	push	{r7}
 801c280:	b085      	sub	sp, #20
 801c282:	af00      	add	r7, sp, #0
 801c284:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801c28a:	68fb      	ldr	r3, [r7, #12]
 801c28c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c290:	699b      	ldr	r3, [r3, #24]
 801c292:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801c294:	68fb      	ldr	r3, [r7, #12]
 801c296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c29a:	69db      	ldr	r3, [r3, #28]
 801c29c:	68ba      	ldr	r2, [r7, #8]
 801c29e:	4013      	ands	r3, r2
 801c2a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801c2a2:	68bb      	ldr	r3, [r7, #8]
 801c2a4:	0c1b      	lsrs	r3, r3, #16
}
 801c2a6:	4618      	mov	r0, r3
 801c2a8:	3714      	adds	r7, #20
 801c2aa:	46bd      	mov	sp, r7
 801c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2b0:	4770      	bx	lr

0801c2b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801c2b2:	b480      	push	{r7}
 801c2b4:	b085      	sub	sp, #20
 801c2b6:	af00      	add	r7, sp, #0
 801c2b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801c2be:	68fb      	ldr	r3, [r7, #12]
 801c2c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c2c4:	699b      	ldr	r3, [r3, #24]
 801c2c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c2ce:	69db      	ldr	r3, [r3, #28]
 801c2d0:	68ba      	ldr	r2, [r7, #8]
 801c2d2:	4013      	ands	r3, r2
 801c2d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801c2d6:	68bb      	ldr	r3, [r7, #8]
 801c2d8:	b29b      	uxth	r3, r3
}
 801c2da:	4618      	mov	r0, r3
 801c2dc:	3714      	adds	r7, #20
 801c2de:	46bd      	mov	sp, r7
 801c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2e4:	4770      	bx	lr

0801c2e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801c2e6:	b480      	push	{r7}
 801c2e8:	b085      	sub	sp, #20
 801c2ea:	af00      	add	r7, sp, #0
 801c2ec:	6078      	str	r0, [r7, #4]
 801c2ee:	460b      	mov	r3, r1
 801c2f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801c2f6:	78fb      	ldrb	r3, [r7, #3]
 801c2f8:	015a      	lsls	r2, r3, #5
 801c2fa:	68fb      	ldr	r3, [r7, #12]
 801c2fc:	4413      	add	r3, r2
 801c2fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c302:	689b      	ldr	r3, [r3, #8]
 801c304:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801c306:	68fb      	ldr	r3, [r7, #12]
 801c308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c30c:	695b      	ldr	r3, [r3, #20]
 801c30e:	68ba      	ldr	r2, [r7, #8]
 801c310:	4013      	ands	r3, r2
 801c312:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801c314:	68bb      	ldr	r3, [r7, #8]
}
 801c316:	4618      	mov	r0, r3
 801c318:	3714      	adds	r7, #20
 801c31a:	46bd      	mov	sp, r7
 801c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c320:	4770      	bx	lr

0801c322 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801c322:	b480      	push	{r7}
 801c324:	b087      	sub	sp, #28
 801c326:	af00      	add	r7, sp, #0
 801c328:	6078      	str	r0, [r7, #4]
 801c32a:	460b      	mov	r3, r1
 801c32c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801c332:	697b      	ldr	r3, [r7, #20]
 801c334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c338:	691b      	ldr	r3, [r3, #16]
 801c33a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801c33c:	697b      	ldr	r3, [r7, #20]
 801c33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c344:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801c346:	78fb      	ldrb	r3, [r7, #3]
 801c348:	f003 030f 	and.w	r3, r3, #15
 801c34c:	68fa      	ldr	r2, [r7, #12]
 801c34e:	fa22 f303 	lsr.w	r3, r2, r3
 801c352:	01db      	lsls	r3, r3, #7
 801c354:	b2db      	uxtb	r3, r3
 801c356:	693a      	ldr	r2, [r7, #16]
 801c358:	4313      	orrs	r3, r2
 801c35a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801c35c:	78fb      	ldrb	r3, [r7, #3]
 801c35e:	015a      	lsls	r2, r3, #5
 801c360:	697b      	ldr	r3, [r7, #20]
 801c362:	4413      	add	r3, r2
 801c364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c368:	689b      	ldr	r3, [r3, #8]
 801c36a:	693a      	ldr	r2, [r7, #16]
 801c36c:	4013      	ands	r3, r2
 801c36e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801c370:	68bb      	ldr	r3, [r7, #8]
}
 801c372:	4618      	mov	r0, r3
 801c374:	371c      	adds	r7, #28
 801c376:	46bd      	mov	sp, r7
 801c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c37c:	4770      	bx	lr

0801c37e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801c37e:	b480      	push	{r7}
 801c380:	b083      	sub	sp, #12
 801c382:	af00      	add	r7, sp, #0
 801c384:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	695b      	ldr	r3, [r3, #20]
 801c38a:	f003 0301 	and.w	r3, r3, #1
}
 801c38e:	4618      	mov	r0, r3
 801c390:	370c      	adds	r7, #12
 801c392:	46bd      	mov	sp, r7
 801c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c398:	4770      	bx	lr

0801c39a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 801c39a:	b480      	push	{r7}
 801c39c:	b085      	sub	sp, #20
 801c39e:	af00      	add	r7, sp, #0
 801c3a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801c3a6:	68fb      	ldr	r3, [r7, #12]
 801c3a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c3ac:	681b      	ldr	r3, [r3, #0]
 801c3ae:	68fa      	ldr	r2, [r7, #12]
 801c3b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c3b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801c3b8:	f023 0307 	bic.w	r3, r3, #7
 801c3bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801c3be:	68fb      	ldr	r3, [r7, #12]
 801c3c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c3c4:	685b      	ldr	r3, [r3, #4]
 801c3c6:	68fa      	ldr	r2, [r7, #12]
 801c3c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801c3cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c3d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801c3d2:	2300      	movs	r3, #0
}
 801c3d4:	4618      	mov	r0, r3
 801c3d6:	3714      	adds	r7, #20
 801c3d8:	46bd      	mov	sp, r7
 801c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3de:	4770      	bx	lr

0801c3e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 801c3e0:	b480      	push	{r7}
 801c3e2:	b087      	sub	sp, #28
 801c3e4:	af00      	add	r7, sp, #0
 801c3e6:	60f8      	str	r0, [r7, #12]
 801c3e8:	460b      	mov	r3, r1
 801c3ea:	607a      	str	r2, [r7, #4]
 801c3ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c3ee:	68fb      	ldr	r3, [r7, #12]
 801c3f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801c3f2:	68fb      	ldr	r3, [r7, #12]
 801c3f4:	333c      	adds	r3, #60	; 0x3c
 801c3f6:	3304      	adds	r3, #4
 801c3f8:	681b      	ldr	r3, [r3, #0]
 801c3fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801c3fc:	693b      	ldr	r3, [r7, #16]
 801c3fe:	4a26      	ldr	r2, [pc, #152]	; (801c498 <USB_EP0_OutStart+0xb8>)
 801c400:	4293      	cmp	r3, r2
 801c402:	d90a      	bls.n	801c41a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801c404:	697b      	ldr	r3, [r7, #20]
 801c406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c40a:	681b      	ldr	r3, [r3, #0]
 801c40c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801c410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801c414:	d101      	bne.n	801c41a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801c416:	2300      	movs	r3, #0
 801c418:	e037      	b.n	801c48a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801c41a:	697b      	ldr	r3, [r7, #20]
 801c41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c420:	461a      	mov	r2, r3
 801c422:	2300      	movs	r3, #0
 801c424:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801c426:	697b      	ldr	r3, [r7, #20]
 801c428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c42c:	691b      	ldr	r3, [r3, #16]
 801c42e:	697a      	ldr	r2, [r7, #20]
 801c430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c434:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801c438:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801c43a:	697b      	ldr	r3, [r7, #20]
 801c43c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c440:	691b      	ldr	r3, [r3, #16]
 801c442:	697a      	ldr	r2, [r7, #20]
 801c444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c448:	f043 0318 	orr.w	r3, r3, #24
 801c44c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801c44e:	697b      	ldr	r3, [r7, #20]
 801c450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c454:	691b      	ldr	r3, [r3, #16]
 801c456:	697a      	ldr	r2, [r7, #20]
 801c458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c45c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801c460:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801c462:	7afb      	ldrb	r3, [r7, #11]
 801c464:	2b01      	cmp	r3, #1
 801c466:	d10f      	bne.n	801c488 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801c468:	697b      	ldr	r3, [r7, #20]
 801c46a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c46e:	461a      	mov	r2, r3
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801c474:	697b      	ldr	r3, [r7, #20]
 801c476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c47a:	681b      	ldr	r3, [r3, #0]
 801c47c:	697a      	ldr	r2, [r7, #20]
 801c47e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c482:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801c486:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801c488:	2300      	movs	r3, #0
}
 801c48a:	4618      	mov	r0, r3
 801c48c:	371c      	adds	r7, #28
 801c48e:	46bd      	mov	sp, r7
 801c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c494:	4770      	bx	lr
 801c496:	bf00      	nop
 801c498:	4f54300a 	.word	0x4f54300a

0801c49c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801c49c:	b480      	push	{r7}
 801c49e:	b085      	sub	sp, #20
 801c4a0:	af00      	add	r7, sp, #0
 801c4a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801c4a4:	2300      	movs	r3, #0
 801c4a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801c4a8:	68fb      	ldr	r3, [r7, #12]
 801c4aa:	3301      	adds	r3, #1
 801c4ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801c4ae:	68fb      	ldr	r3, [r7, #12]
 801c4b0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 801c4b4:	d901      	bls.n	801c4ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801c4b6:	2303      	movs	r3, #3
 801c4b8:	e01b      	b.n	801c4f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	691b      	ldr	r3, [r3, #16]
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	daf2      	bge.n	801c4a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801c4c2:	2300      	movs	r3, #0
 801c4c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801c4c6:	687b      	ldr	r3, [r7, #4]
 801c4c8:	691b      	ldr	r3, [r3, #16]
 801c4ca:	f043 0201 	orr.w	r2, r3, #1
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	3301      	adds	r3, #1
 801c4d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801c4d8:	68fb      	ldr	r3, [r7, #12]
 801c4da:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 801c4de:	d901      	bls.n	801c4e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801c4e0:	2303      	movs	r3, #3
 801c4e2:	e006      	b.n	801c4f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	691b      	ldr	r3, [r3, #16]
 801c4e8:	f003 0301 	and.w	r3, r3, #1
 801c4ec:	2b01      	cmp	r3, #1
 801c4ee:	d0f0      	beq.n	801c4d2 <USB_CoreReset+0x36>

  return HAL_OK;
 801c4f0:	2300      	movs	r3, #0
}
 801c4f2:	4618      	mov	r0, r3
 801c4f4:	3714      	adds	r7, #20
 801c4f6:	46bd      	mov	sp, r7
 801c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4fc:	4770      	bx	lr
	...

0801c500 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801c500:	b580      	push	{r7, lr}
 801c502:	b084      	sub	sp, #16
 801c504:	af00      	add	r7, sp, #0
 801c506:	6078      	str	r0, [r7, #4]
 801c508:	460b      	mov	r3, r1
 801c50a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801c50c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801c510:	f005 fffa 	bl	8022508 <USBD_static_malloc>
 801c514:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801c516:	68fb      	ldr	r3, [r7, #12]
 801c518:	2b00      	cmp	r3, #0
 801c51a:	d109      	bne.n	801c530 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	32b0      	adds	r2, #176	; 0xb0
 801c526:	2100      	movs	r1, #0
 801c528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801c52c:	2302      	movs	r3, #2
 801c52e:	e0d4      	b.n	801c6da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801c530:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801c534:	2100      	movs	r1, #0
 801c536:	68f8      	ldr	r0, [r7, #12]
 801c538:	f007 f9ea 	bl	8023910 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	32b0      	adds	r2, #176	; 0xb0
 801c546:	68f9      	ldr	r1, [r7, #12]
 801c548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	32b0      	adds	r2, #176	; 0xb0
 801c556:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	7c1b      	ldrb	r3, [r3, #16]
 801c564:	2b00      	cmp	r3, #0
 801c566:	d138      	bne.n	801c5da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801c568:	4b5e      	ldr	r3, [pc, #376]	; (801c6e4 <USBD_CDC_Init+0x1e4>)
 801c56a:	7819      	ldrb	r1, [r3, #0]
 801c56c:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c570:	2202      	movs	r2, #2
 801c572:	6878      	ldr	r0, [r7, #4]
 801c574:	f005 fea5 	bl	80222c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801c578:	4b5a      	ldr	r3, [pc, #360]	; (801c6e4 <USBD_CDC_Init+0x1e4>)
 801c57a:	781b      	ldrb	r3, [r3, #0]
 801c57c:	f003 020f 	and.w	r2, r3, #15
 801c580:	6879      	ldr	r1, [r7, #4]
 801c582:	4613      	mov	r3, r2
 801c584:	009b      	lsls	r3, r3, #2
 801c586:	4413      	add	r3, r2
 801c588:	009b      	lsls	r3, r3, #2
 801c58a:	440b      	add	r3, r1
 801c58c:	3324      	adds	r3, #36	; 0x24
 801c58e:	2201      	movs	r2, #1
 801c590:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801c592:	4b55      	ldr	r3, [pc, #340]	; (801c6e8 <USBD_CDC_Init+0x1e8>)
 801c594:	7819      	ldrb	r1, [r3, #0]
 801c596:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c59a:	2202      	movs	r2, #2
 801c59c:	6878      	ldr	r0, [r7, #4]
 801c59e:	f005 fe90 	bl	80222c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801c5a2:	4b51      	ldr	r3, [pc, #324]	; (801c6e8 <USBD_CDC_Init+0x1e8>)
 801c5a4:	781b      	ldrb	r3, [r3, #0]
 801c5a6:	f003 020f 	and.w	r2, r3, #15
 801c5aa:	6879      	ldr	r1, [r7, #4]
 801c5ac:	4613      	mov	r3, r2
 801c5ae:	009b      	lsls	r3, r3, #2
 801c5b0:	4413      	add	r3, r2
 801c5b2:	009b      	lsls	r3, r3, #2
 801c5b4:	440b      	add	r3, r1
 801c5b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801c5ba:	2201      	movs	r2, #1
 801c5bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801c5be:	4b4b      	ldr	r3, [pc, #300]	; (801c6ec <USBD_CDC_Init+0x1ec>)
 801c5c0:	781b      	ldrb	r3, [r3, #0]
 801c5c2:	f003 020f 	and.w	r2, r3, #15
 801c5c6:	6879      	ldr	r1, [r7, #4]
 801c5c8:	4613      	mov	r3, r2
 801c5ca:	009b      	lsls	r3, r3, #2
 801c5cc:	4413      	add	r3, r2
 801c5ce:	009b      	lsls	r3, r3, #2
 801c5d0:	440b      	add	r3, r1
 801c5d2:	3326      	adds	r3, #38	; 0x26
 801c5d4:	2210      	movs	r2, #16
 801c5d6:	801a      	strh	r2, [r3, #0]
 801c5d8:	e035      	b.n	801c646 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801c5da:	4b42      	ldr	r3, [pc, #264]	; (801c6e4 <USBD_CDC_Init+0x1e4>)
 801c5dc:	7819      	ldrb	r1, [r3, #0]
 801c5de:	2340      	movs	r3, #64	; 0x40
 801c5e0:	2202      	movs	r2, #2
 801c5e2:	6878      	ldr	r0, [r7, #4]
 801c5e4:	f005 fe6d 	bl	80222c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801c5e8:	4b3e      	ldr	r3, [pc, #248]	; (801c6e4 <USBD_CDC_Init+0x1e4>)
 801c5ea:	781b      	ldrb	r3, [r3, #0]
 801c5ec:	f003 020f 	and.w	r2, r3, #15
 801c5f0:	6879      	ldr	r1, [r7, #4]
 801c5f2:	4613      	mov	r3, r2
 801c5f4:	009b      	lsls	r3, r3, #2
 801c5f6:	4413      	add	r3, r2
 801c5f8:	009b      	lsls	r3, r3, #2
 801c5fa:	440b      	add	r3, r1
 801c5fc:	3324      	adds	r3, #36	; 0x24
 801c5fe:	2201      	movs	r2, #1
 801c600:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801c602:	4b39      	ldr	r3, [pc, #228]	; (801c6e8 <USBD_CDC_Init+0x1e8>)
 801c604:	7819      	ldrb	r1, [r3, #0]
 801c606:	2340      	movs	r3, #64	; 0x40
 801c608:	2202      	movs	r2, #2
 801c60a:	6878      	ldr	r0, [r7, #4]
 801c60c:	f005 fe59 	bl	80222c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801c610:	4b35      	ldr	r3, [pc, #212]	; (801c6e8 <USBD_CDC_Init+0x1e8>)
 801c612:	781b      	ldrb	r3, [r3, #0]
 801c614:	f003 020f 	and.w	r2, r3, #15
 801c618:	6879      	ldr	r1, [r7, #4]
 801c61a:	4613      	mov	r3, r2
 801c61c:	009b      	lsls	r3, r3, #2
 801c61e:	4413      	add	r3, r2
 801c620:	009b      	lsls	r3, r3, #2
 801c622:	440b      	add	r3, r1
 801c624:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801c628:	2201      	movs	r2, #1
 801c62a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801c62c:	4b2f      	ldr	r3, [pc, #188]	; (801c6ec <USBD_CDC_Init+0x1ec>)
 801c62e:	781b      	ldrb	r3, [r3, #0]
 801c630:	f003 020f 	and.w	r2, r3, #15
 801c634:	6879      	ldr	r1, [r7, #4]
 801c636:	4613      	mov	r3, r2
 801c638:	009b      	lsls	r3, r3, #2
 801c63a:	4413      	add	r3, r2
 801c63c:	009b      	lsls	r3, r3, #2
 801c63e:	440b      	add	r3, r1
 801c640:	3326      	adds	r3, #38	; 0x26
 801c642:	2210      	movs	r2, #16
 801c644:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801c646:	4b29      	ldr	r3, [pc, #164]	; (801c6ec <USBD_CDC_Init+0x1ec>)
 801c648:	7819      	ldrb	r1, [r3, #0]
 801c64a:	2308      	movs	r3, #8
 801c64c:	2203      	movs	r2, #3
 801c64e:	6878      	ldr	r0, [r7, #4]
 801c650:	f005 fe37 	bl	80222c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801c654:	4b25      	ldr	r3, [pc, #148]	; (801c6ec <USBD_CDC_Init+0x1ec>)
 801c656:	781b      	ldrb	r3, [r3, #0]
 801c658:	f003 020f 	and.w	r2, r3, #15
 801c65c:	6879      	ldr	r1, [r7, #4]
 801c65e:	4613      	mov	r3, r2
 801c660:	009b      	lsls	r3, r3, #2
 801c662:	4413      	add	r3, r2
 801c664:	009b      	lsls	r3, r3, #2
 801c666:	440b      	add	r3, r1
 801c668:	3324      	adds	r3, #36	; 0x24
 801c66a:	2201      	movs	r2, #1
 801c66c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	2200      	movs	r2, #0
 801c672:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801c67c:	687a      	ldr	r2, [r7, #4]
 801c67e:	33b0      	adds	r3, #176	; 0xb0
 801c680:	009b      	lsls	r3, r3, #2
 801c682:	4413      	add	r3, r2
 801c684:	685b      	ldr	r3, [r3, #4]
 801c686:	681b      	ldr	r3, [r3, #0]
 801c688:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801c68a:	68fb      	ldr	r3, [r7, #12]
 801c68c:	2200      	movs	r2, #0
 801c68e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801c692:	68fb      	ldr	r3, [r7, #12]
 801c694:	2200      	movs	r2, #0
 801c696:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d101      	bne.n	801c6a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801c6a4:	2302      	movs	r3, #2
 801c6a6:	e018      	b.n	801c6da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	7c1b      	ldrb	r3, [r3, #16]
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	d10a      	bne.n	801c6c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801c6b0:	4b0d      	ldr	r3, [pc, #52]	; (801c6e8 <USBD_CDC_Init+0x1e8>)
 801c6b2:	7819      	ldrb	r1, [r3, #0]
 801c6b4:	68fb      	ldr	r3, [r7, #12]
 801c6b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c6ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c6be:	6878      	ldr	r0, [r7, #4]
 801c6c0:	f005 feee 	bl	80224a0 <USBD_LL_PrepareReceive>
 801c6c4:	e008      	b.n	801c6d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801c6c6:	4b08      	ldr	r3, [pc, #32]	; (801c6e8 <USBD_CDC_Init+0x1e8>)
 801c6c8:	7819      	ldrb	r1, [r3, #0]
 801c6ca:	68fb      	ldr	r3, [r7, #12]
 801c6cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c6d0:	2340      	movs	r3, #64	; 0x40
 801c6d2:	6878      	ldr	r0, [r7, #4]
 801c6d4:	f005 fee4 	bl	80224a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801c6d8:	2300      	movs	r3, #0
}
 801c6da:	4618      	mov	r0, r3
 801c6dc:	3710      	adds	r7, #16
 801c6de:	46bd      	mov	sp, r7
 801c6e0:	bd80      	pop	{r7, pc}
 801c6e2:	bf00      	nop
 801c6e4:	20000f73 	.word	0x20000f73
 801c6e8:	20000f74 	.word	0x20000f74
 801c6ec:	20000f75 	.word	0x20000f75

0801c6f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801c6f0:	b580      	push	{r7, lr}
 801c6f2:	b082      	sub	sp, #8
 801c6f4:	af00      	add	r7, sp, #0
 801c6f6:	6078      	str	r0, [r7, #4]
 801c6f8:	460b      	mov	r3, r1
 801c6fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801c6fc:	4b3a      	ldr	r3, [pc, #232]	; (801c7e8 <USBD_CDC_DeInit+0xf8>)
 801c6fe:	781b      	ldrb	r3, [r3, #0]
 801c700:	4619      	mov	r1, r3
 801c702:	6878      	ldr	r0, [r7, #4]
 801c704:	f005 fe03 	bl	802230e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801c708:	4b37      	ldr	r3, [pc, #220]	; (801c7e8 <USBD_CDC_DeInit+0xf8>)
 801c70a:	781b      	ldrb	r3, [r3, #0]
 801c70c:	f003 020f 	and.w	r2, r3, #15
 801c710:	6879      	ldr	r1, [r7, #4]
 801c712:	4613      	mov	r3, r2
 801c714:	009b      	lsls	r3, r3, #2
 801c716:	4413      	add	r3, r2
 801c718:	009b      	lsls	r3, r3, #2
 801c71a:	440b      	add	r3, r1
 801c71c:	3324      	adds	r3, #36	; 0x24
 801c71e:	2200      	movs	r2, #0
 801c720:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801c722:	4b32      	ldr	r3, [pc, #200]	; (801c7ec <USBD_CDC_DeInit+0xfc>)
 801c724:	781b      	ldrb	r3, [r3, #0]
 801c726:	4619      	mov	r1, r3
 801c728:	6878      	ldr	r0, [r7, #4]
 801c72a:	f005 fdf0 	bl	802230e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801c72e:	4b2f      	ldr	r3, [pc, #188]	; (801c7ec <USBD_CDC_DeInit+0xfc>)
 801c730:	781b      	ldrb	r3, [r3, #0]
 801c732:	f003 020f 	and.w	r2, r3, #15
 801c736:	6879      	ldr	r1, [r7, #4]
 801c738:	4613      	mov	r3, r2
 801c73a:	009b      	lsls	r3, r3, #2
 801c73c:	4413      	add	r3, r2
 801c73e:	009b      	lsls	r3, r3, #2
 801c740:	440b      	add	r3, r1
 801c742:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801c746:	2200      	movs	r2, #0
 801c748:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801c74a:	4b29      	ldr	r3, [pc, #164]	; (801c7f0 <USBD_CDC_DeInit+0x100>)
 801c74c:	781b      	ldrb	r3, [r3, #0]
 801c74e:	4619      	mov	r1, r3
 801c750:	6878      	ldr	r0, [r7, #4]
 801c752:	f005 fddc 	bl	802230e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801c756:	4b26      	ldr	r3, [pc, #152]	; (801c7f0 <USBD_CDC_DeInit+0x100>)
 801c758:	781b      	ldrb	r3, [r3, #0]
 801c75a:	f003 020f 	and.w	r2, r3, #15
 801c75e:	6879      	ldr	r1, [r7, #4]
 801c760:	4613      	mov	r3, r2
 801c762:	009b      	lsls	r3, r3, #2
 801c764:	4413      	add	r3, r2
 801c766:	009b      	lsls	r3, r3, #2
 801c768:	440b      	add	r3, r1
 801c76a:	3324      	adds	r3, #36	; 0x24
 801c76c:	2200      	movs	r2, #0
 801c76e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801c770:	4b1f      	ldr	r3, [pc, #124]	; (801c7f0 <USBD_CDC_DeInit+0x100>)
 801c772:	781b      	ldrb	r3, [r3, #0]
 801c774:	f003 020f 	and.w	r2, r3, #15
 801c778:	6879      	ldr	r1, [r7, #4]
 801c77a:	4613      	mov	r3, r2
 801c77c:	009b      	lsls	r3, r3, #2
 801c77e:	4413      	add	r3, r2
 801c780:	009b      	lsls	r3, r3, #2
 801c782:	440b      	add	r3, r1
 801c784:	3326      	adds	r3, #38	; 0x26
 801c786:	2200      	movs	r2, #0
 801c788:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801c78a:	687b      	ldr	r3, [r7, #4]
 801c78c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	32b0      	adds	r2, #176	; 0xb0
 801c794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c798:	2b00      	cmp	r3, #0
 801c79a:	d01f      	beq.n	801c7dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801c7a2:	687a      	ldr	r2, [r7, #4]
 801c7a4:	33b0      	adds	r3, #176	; 0xb0
 801c7a6:	009b      	lsls	r3, r3, #2
 801c7a8:	4413      	add	r3, r2
 801c7aa:	685b      	ldr	r3, [r3, #4]
 801c7ac:	685b      	ldr	r3, [r3, #4]
 801c7ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c7b6:	687b      	ldr	r3, [r7, #4]
 801c7b8:	32b0      	adds	r2, #176	; 0xb0
 801c7ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c7be:	4618      	mov	r0, r3
 801c7c0:	f005 feb0 	bl	8022524 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c7ca:	687b      	ldr	r3, [r7, #4]
 801c7cc:	32b0      	adds	r2, #176	; 0xb0
 801c7ce:	2100      	movs	r1, #0
 801c7d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	2200      	movs	r2, #0
 801c7d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801c7dc:	2300      	movs	r3, #0
}
 801c7de:	4618      	mov	r0, r3
 801c7e0:	3708      	adds	r7, #8
 801c7e2:	46bd      	mov	sp, r7
 801c7e4:	bd80      	pop	{r7, pc}
 801c7e6:	bf00      	nop
 801c7e8:	20000f73 	.word	0x20000f73
 801c7ec:	20000f74 	.word	0x20000f74
 801c7f0:	20000f75 	.word	0x20000f75

0801c7f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801c7f4:	b580      	push	{r7, lr}
 801c7f6:	b086      	sub	sp, #24
 801c7f8:	af00      	add	r7, sp, #0
 801c7fa:	6078      	str	r0, [r7, #4]
 801c7fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	32b0      	adds	r2, #176	; 0xb0
 801c808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c80c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801c80e:	2300      	movs	r3, #0
 801c810:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801c812:	2300      	movs	r3, #0
 801c814:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801c816:	2300      	movs	r3, #0
 801c818:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801c81a:	693b      	ldr	r3, [r7, #16]
 801c81c:	2b00      	cmp	r3, #0
 801c81e:	d101      	bne.n	801c824 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801c820:	2303      	movs	r3, #3
 801c822:	e0bf      	b.n	801c9a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c824:	683b      	ldr	r3, [r7, #0]
 801c826:	781b      	ldrb	r3, [r3, #0]
 801c828:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	d050      	beq.n	801c8d2 <USBD_CDC_Setup+0xde>
 801c830:	2b20      	cmp	r3, #32
 801c832:	f040 80af 	bne.w	801c994 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801c836:	683b      	ldr	r3, [r7, #0]
 801c838:	88db      	ldrh	r3, [r3, #6]
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d03a      	beq.n	801c8b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801c83e:	683b      	ldr	r3, [r7, #0]
 801c840:	781b      	ldrb	r3, [r3, #0]
 801c842:	b25b      	sxtb	r3, r3
 801c844:	2b00      	cmp	r3, #0
 801c846:	da1b      	bge.n	801c880 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801c848:	687b      	ldr	r3, [r7, #4]
 801c84a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801c84e:	687a      	ldr	r2, [r7, #4]
 801c850:	33b0      	adds	r3, #176	; 0xb0
 801c852:	009b      	lsls	r3, r3, #2
 801c854:	4413      	add	r3, r2
 801c856:	685b      	ldr	r3, [r3, #4]
 801c858:	689b      	ldr	r3, [r3, #8]
 801c85a:	683a      	ldr	r2, [r7, #0]
 801c85c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801c85e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801c860:	683a      	ldr	r2, [r7, #0]
 801c862:	88d2      	ldrh	r2, [r2, #6]
 801c864:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801c866:	683b      	ldr	r3, [r7, #0]
 801c868:	88db      	ldrh	r3, [r3, #6]
 801c86a:	2b07      	cmp	r3, #7
 801c86c:	bf28      	it	cs
 801c86e:	2307      	movcs	r3, #7
 801c870:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801c872:	693b      	ldr	r3, [r7, #16]
 801c874:	89fa      	ldrh	r2, [r7, #14]
 801c876:	4619      	mov	r1, r3
 801c878:	6878      	ldr	r0, [r7, #4]
 801c87a:	f001 fd49 	bl	801e310 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801c87e:	e090      	b.n	801c9a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801c880:	683b      	ldr	r3, [r7, #0]
 801c882:	785a      	ldrb	r2, [r3, #1]
 801c884:	693b      	ldr	r3, [r7, #16]
 801c886:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801c88a:	683b      	ldr	r3, [r7, #0]
 801c88c:	88db      	ldrh	r3, [r3, #6]
 801c88e:	2b3f      	cmp	r3, #63	; 0x3f
 801c890:	d803      	bhi.n	801c89a <USBD_CDC_Setup+0xa6>
 801c892:	683b      	ldr	r3, [r7, #0]
 801c894:	88db      	ldrh	r3, [r3, #6]
 801c896:	b2da      	uxtb	r2, r3
 801c898:	e000      	b.n	801c89c <USBD_CDC_Setup+0xa8>
 801c89a:	2240      	movs	r2, #64	; 0x40
 801c89c:	693b      	ldr	r3, [r7, #16]
 801c89e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801c8a2:	6939      	ldr	r1, [r7, #16]
 801c8a4:	693b      	ldr	r3, [r7, #16]
 801c8a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801c8aa:	461a      	mov	r2, r3
 801c8ac:	6878      	ldr	r0, [r7, #4]
 801c8ae:	f001 fd5b 	bl	801e368 <USBD_CtlPrepareRx>
      break;
 801c8b2:	e076      	b.n	801c9a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801c8ba:	687a      	ldr	r2, [r7, #4]
 801c8bc:	33b0      	adds	r3, #176	; 0xb0
 801c8be:	009b      	lsls	r3, r3, #2
 801c8c0:	4413      	add	r3, r2
 801c8c2:	685b      	ldr	r3, [r3, #4]
 801c8c4:	689b      	ldr	r3, [r3, #8]
 801c8c6:	683a      	ldr	r2, [r7, #0]
 801c8c8:	7850      	ldrb	r0, [r2, #1]
 801c8ca:	2200      	movs	r2, #0
 801c8cc:	6839      	ldr	r1, [r7, #0]
 801c8ce:	4798      	blx	r3
      break;
 801c8d0:	e067      	b.n	801c9a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801c8d2:	683b      	ldr	r3, [r7, #0]
 801c8d4:	785b      	ldrb	r3, [r3, #1]
 801c8d6:	2b0b      	cmp	r3, #11
 801c8d8:	d851      	bhi.n	801c97e <USBD_CDC_Setup+0x18a>
 801c8da:	a201      	add	r2, pc, #4	; (adr r2, 801c8e0 <USBD_CDC_Setup+0xec>)
 801c8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c8e0:	0801c911 	.word	0x0801c911
 801c8e4:	0801c98d 	.word	0x0801c98d
 801c8e8:	0801c97f 	.word	0x0801c97f
 801c8ec:	0801c97f 	.word	0x0801c97f
 801c8f0:	0801c97f 	.word	0x0801c97f
 801c8f4:	0801c97f 	.word	0x0801c97f
 801c8f8:	0801c97f 	.word	0x0801c97f
 801c8fc:	0801c97f 	.word	0x0801c97f
 801c900:	0801c97f 	.word	0x0801c97f
 801c904:	0801c97f 	.word	0x0801c97f
 801c908:	0801c93b 	.word	0x0801c93b
 801c90c:	0801c965 	.word	0x0801c965
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c916:	b2db      	uxtb	r3, r3
 801c918:	2b03      	cmp	r3, #3
 801c91a:	d107      	bne.n	801c92c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801c91c:	f107 030a 	add.w	r3, r7, #10
 801c920:	2202      	movs	r2, #2
 801c922:	4619      	mov	r1, r3
 801c924:	6878      	ldr	r0, [r7, #4]
 801c926:	f001 fcf3 	bl	801e310 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801c92a:	e032      	b.n	801c992 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801c92c:	6839      	ldr	r1, [r7, #0]
 801c92e:	6878      	ldr	r0, [r7, #4]
 801c930:	f001 fc7d 	bl	801e22e <USBD_CtlError>
            ret = USBD_FAIL;
 801c934:	2303      	movs	r3, #3
 801c936:	75fb      	strb	r3, [r7, #23]
          break;
 801c938:	e02b      	b.n	801c992 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c93a:	687b      	ldr	r3, [r7, #4]
 801c93c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c940:	b2db      	uxtb	r3, r3
 801c942:	2b03      	cmp	r3, #3
 801c944:	d107      	bne.n	801c956 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801c946:	f107 030d 	add.w	r3, r7, #13
 801c94a:	2201      	movs	r2, #1
 801c94c:	4619      	mov	r1, r3
 801c94e:	6878      	ldr	r0, [r7, #4]
 801c950:	f001 fcde 	bl	801e310 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801c954:	e01d      	b.n	801c992 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801c956:	6839      	ldr	r1, [r7, #0]
 801c958:	6878      	ldr	r0, [r7, #4]
 801c95a:	f001 fc68 	bl	801e22e <USBD_CtlError>
            ret = USBD_FAIL;
 801c95e:	2303      	movs	r3, #3
 801c960:	75fb      	strb	r3, [r7, #23]
          break;
 801c962:	e016      	b.n	801c992 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c96a:	b2db      	uxtb	r3, r3
 801c96c:	2b03      	cmp	r3, #3
 801c96e:	d00f      	beq.n	801c990 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801c970:	6839      	ldr	r1, [r7, #0]
 801c972:	6878      	ldr	r0, [r7, #4]
 801c974:	f001 fc5b 	bl	801e22e <USBD_CtlError>
            ret = USBD_FAIL;
 801c978:	2303      	movs	r3, #3
 801c97a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801c97c:	e008      	b.n	801c990 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801c97e:	6839      	ldr	r1, [r7, #0]
 801c980:	6878      	ldr	r0, [r7, #4]
 801c982:	f001 fc54 	bl	801e22e <USBD_CtlError>
          ret = USBD_FAIL;
 801c986:	2303      	movs	r3, #3
 801c988:	75fb      	strb	r3, [r7, #23]
          break;
 801c98a:	e002      	b.n	801c992 <USBD_CDC_Setup+0x19e>
          break;
 801c98c:	bf00      	nop
 801c98e:	e008      	b.n	801c9a2 <USBD_CDC_Setup+0x1ae>
          break;
 801c990:	bf00      	nop
      }
      break;
 801c992:	e006      	b.n	801c9a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801c994:	6839      	ldr	r1, [r7, #0]
 801c996:	6878      	ldr	r0, [r7, #4]
 801c998:	f001 fc49 	bl	801e22e <USBD_CtlError>
      ret = USBD_FAIL;
 801c99c:	2303      	movs	r3, #3
 801c99e:	75fb      	strb	r3, [r7, #23]
      break;
 801c9a0:	bf00      	nop
  }

  return (uint8_t)ret;
 801c9a2:	7dfb      	ldrb	r3, [r7, #23]
}
 801c9a4:	4618      	mov	r0, r3
 801c9a6:	3718      	adds	r7, #24
 801c9a8:	46bd      	mov	sp, r7
 801c9aa:	bd80      	pop	{r7, pc}

0801c9ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801c9ac:	b580      	push	{r7, lr}
 801c9ae:	b084      	sub	sp, #16
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	6078      	str	r0, [r7, #4]
 801c9b4:	460b      	mov	r3, r1
 801c9b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c9be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c9c6:	687b      	ldr	r3, [r7, #4]
 801c9c8:	32b0      	adds	r2, #176	; 0xb0
 801c9ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	d101      	bne.n	801c9d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801c9d2:	2303      	movs	r3, #3
 801c9d4:	e065      	b.n	801caa2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c9dc:	687b      	ldr	r3, [r7, #4]
 801c9de:	32b0      	adds	r2, #176	; 0xb0
 801c9e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c9e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801c9e6:	78fb      	ldrb	r3, [r7, #3]
 801c9e8:	f003 020f 	and.w	r2, r3, #15
 801c9ec:	6879      	ldr	r1, [r7, #4]
 801c9ee:	4613      	mov	r3, r2
 801c9f0:	009b      	lsls	r3, r3, #2
 801c9f2:	4413      	add	r3, r2
 801c9f4:	009b      	lsls	r3, r3, #2
 801c9f6:	440b      	add	r3, r1
 801c9f8:	3318      	adds	r3, #24
 801c9fa:	681b      	ldr	r3, [r3, #0]
 801c9fc:	2b00      	cmp	r3, #0
 801c9fe:	d02f      	beq.n	801ca60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801ca00:	78fb      	ldrb	r3, [r7, #3]
 801ca02:	f003 020f 	and.w	r2, r3, #15
 801ca06:	6879      	ldr	r1, [r7, #4]
 801ca08:	4613      	mov	r3, r2
 801ca0a:	009b      	lsls	r3, r3, #2
 801ca0c:	4413      	add	r3, r2
 801ca0e:	009b      	lsls	r3, r3, #2
 801ca10:	440b      	add	r3, r1
 801ca12:	3318      	adds	r3, #24
 801ca14:	681a      	ldr	r2, [r3, #0]
 801ca16:	78fb      	ldrb	r3, [r7, #3]
 801ca18:	f003 010f 	and.w	r1, r3, #15
 801ca1c:	68f8      	ldr	r0, [r7, #12]
 801ca1e:	460b      	mov	r3, r1
 801ca20:	00db      	lsls	r3, r3, #3
 801ca22:	440b      	add	r3, r1
 801ca24:	009b      	lsls	r3, r3, #2
 801ca26:	4403      	add	r3, r0
 801ca28:	331c      	adds	r3, #28
 801ca2a:	681b      	ldr	r3, [r3, #0]
 801ca2c:	fbb2 f1f3 	udiv	r1, r2, r3
 801ca30:	fb01 f303 	mul.w	r3, r1, r3
 801ca34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d112      	bne.n	801ca60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801ca3a:	78fb      	ldrb	r3, [r7, #3]
 801ca3c:	f003 020f 	and.w	r2, r3, #15
 801ca40:	6879      	ldr	r1, [r7, #4]
 801ca42:	4613      	mov	r3, r2
 801ca44:	009b      	lsls	r3, r3, #2
 801ca46:	4413      	add	r3, r2
 801ca48:	009b      	lsls	r3, r3, #2
 801ca4a:	440b      	add	r3, r1
 801ca4c:	3318      	adds	r3, #24
 801ca4e:	2200      	movs	r2, #0
 801ca50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801ca52:	78f9      	ldrb	r1, [r7, #3]
 801ca54:	2300      	movs	r3, #0
 801ca56:	2200      	movs	r2, #0
 801ca58:	6878      	ldr	r0, [r7, #4]
 801ca5a:	f005 fd00 	bl	802245e <USBD_LL_Transmit>
 801ca5e:	e01f      	b.n	801caa0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801ca60:	68bb      	ldr	r3, [r7, #8]
 801ca62:	2200      	movs	r2, #0
 801ca64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801ca6e:	687a      	ldr	r2, [r7, #4]
 801ca70:	33b0      	adds	r3, #176	; 0xb0
 801ca72:	009b      	lsls	r3, r3, #2
 801ca74:	4413      	add	r3, r2
 801ca76:	685b      	ldr	r3, [r3, #4]
 801ca78:	691b      	ldr	r3, [r3, #16]
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d010      	beq.n	801caa0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801ca84:	687a      	ldr	r2, [r7, #4]
 801ca86:	33b0      	adds	r3, #176	; 0xb0
 801ca88:	009b      	lsls	r3, r3, #2
 801ca8a:	4413      	add	r3, r2
 801ca8c:	685b      	ldr	r3, [r3, #4]
 801ca8e:	691b      	ldr	r3, [r3, #16]
 801ca90:	68ba      	ldr	r2, [r7, #8]
 801ca92:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801ca96:	68ba      	ldr	r2, [r7, #8]
 801ca98:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801ca9c:	78fa      	ldrb	r2, [r7, #3]
 801ca9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801caa0:	2300      	movs	r3, #0
}
 801caa2:	4618      	mov	r0, r3
 801caa4:	3710      	adds	r7, #16
 801caa6:	46bd      	mov	sp, r7
 801caa8:	bd80      	pop	{r7, pc}

0801caaa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801caaa:	b580      	push	{r7, lr}
 801caac:	b084      	sub	sp, #16
 801caae:	af00      	add	r7, sp, #0
 801cab0:	6078      	str	r0, [r7, #4]
 801cab2:	460b      	mov	r3, r1
 801cab4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	32b0      	adds	r2, #176	; 0xb0
 801cac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cac4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801cac6:	687b      	ldr	r3, [r7, #4]
 801cac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	32b0      	adds	r2, #176	; 0xb0
 801cad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	d101      	bne.n	801cadc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801cad8:	2303      	movs	r3, #3
 801cada:	e01a      	b.n	801cb12 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801cadc:	78fb      	ldrb	r3, [r7, #3]
 801cade:	4619      	mov	r1, r3
 801cae0:	6878      	ldr	r0, [r7, #4]
 801cae2:	f005 fcfe 	bl	80224e2 <USBD_LL_GetRxDataSize>
 801cae6:	4602      	mov	r2, r0
 801cae8:	68fb      	ldr	r3, [r7, #12]
 801caea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801caf4:	687a      	ldr	r2, [r7, #4]
 801caf6:	33b0      	adds	r3, #176	; 0xb0
 801caf8:	009b      	lsls	r3, r3, #2
 801cafa:	4413      	add	r3, r2
 801cafc:	685b      	ldr	r3, [r3, #4]
 801cafe:	68db      	ldr	r3, [r3, #12]
 801cb00:	68fa      	ldr	r2, [r7, #12]
 801cb02:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801cb06:	68fa      	ldr	r2, [r7, #12]
 801cb08:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801cb0c:	4611      	mov	r1, r2
 801cb0e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801cb10:	2300      	movs	r3, #0
}
 801cb12:	4618      	mov	r0, r3
 801cb14:	3710      	adds	r7, #16
 801cb16:	46bd      	mov	sp, r7
 801cb18:	bd80      	pop	{r7, pc}

0801cb1a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801cb1a:	b580      	push	{r7, lr}
 801cb1c:	b084      	sub	sp, #16
 801cb1e:	af00      	add	r7, sp, #0
 801cb20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	32b0      	adds	r2, #176	; 0xb0
 801cb2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cb30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801cb32:	68fb      	ldr	r3, [r7, #12]
 801cb34:	2b00      	cmp	r3, #0
 801cb36:	d101      	bne.n	801cb3c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801cb38:	2303      	movs	r3, #3
 801cb3a:	e025      	b.n	801cb88 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801cb42:	687a      	ldr	r2, [r7, #4]
 801cb44:	33b0      	adds	r3, #176	; 0xb0
 801cb46:	009b      	lsls	r3, r3, #2
 801cb48:	4413      	add	r3, r2
 801cb4a:	685b      	ldr	r3, [r3, #4]
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	d01a      	beq.n	801cb86 <USBD_CDC_EP0_RxReady+0x6c>
 801cb50:	68fb      	ldr	r3, [r7, #12]
 801cb52:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801cb56:	2bff      	cmp	r3, #255	; 0xff
 801cb58:	d015      	beq.n	801cb86 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801cb60:	687a      	ldr	r2, [r7, #4]
 801cb62:	33b0      	adds	r3, #176	; 0xb0
 801cb64:	009b      	lsls	r3, r3, #2
 801cb66:	4413      	add	r3, r2
 801cb68:	685b      	ldr	r3, [r3, #4]
 801cb6a:	689b      	ldr	r3, [r3, #8]
 801cb6c:	68fa      	ldr	r2, [r7, #12]
 801cb6e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801cb72:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801cb74:	68fa      	ldr	r2, [r7, #12]
 801cb76:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801cb7a:	b292      	uxth	r2, r2
 801cb7c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801cb7e:	68fb      	ldr	r3, [r7, #12]
 801cb80:	22ff      	movs	r2, #255	; 0xff
 801cb82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801cb86:	2300      	movs	r3, #0
}
 801cb88:	4618      	mov	r0, r3
 801cb8a:	3710      	adds	r7, #16
 801cb8c:	46bd      	mov	sp, r7
 801cb8e:	bd80      	pop	{r7, pc}

0801cb90 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801cb90:	b580      	push	{r7, lr}
 801cb92:	b086      	sub	sp, #24
 801cb94:	af00      	add	r7, sp, #0
 801cb96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801cb98:	2182      	movs	r1, #130	; 0x82
 801cb9a:	4818      	ldr	r0, [pc, #96]	; (801cbfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 801cb9c:	f000 fd0f 	bl	801d5be <USBD_GetEpDesc>
 801cba0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801cba2:	2101      	movs	r1, #1
 801cba4:	4815      	ldr	r0, [pc, #84]	; (801cbfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 801cba6:	f000 fd0a 	bl	801d5be <USBD_GetEpDesc>
 801cbaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801cbac:	2181      	movs	r1, #129	; 0x81
 801cbae:	4813      	ldr	r0, [pc, #76]	; (801cbfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 801cbb0:	f000 fd05 	bl	801d5be <USBD_GetEpDesc>
 801cbb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801cbb6:	697b      	ldr	r3, [r7, #20]
 801cbb8:	2b00      	cmp	r3, #0
 801cbba:	d002      	beq.n	801cbc2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801cbbc:	697b      	ldr	r3, [r7, #20]
 801cbbe:	2210      	movs	r2, #16
 801cbc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801cbc2:	693b      	ldr	r3, [r7, #16]
 801cbc4:	2b00      	cmp	r3, #0
 801cbc6:	d006      	beq.n	801cbd6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801cbc8:	693b      	ldr	r3, [r7, #16]
 801cbca:	2200      	movs	r2, #0
 801cbcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801cbd0:	711a      	strb	r2, [r3, #4]
 801cbd2:	2200      	movs	r2, #0
 801cbd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801cbd6:	68fb      	ldr	r3, [r7, #12]
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	d006      	beq.n	801cbea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801cbdc:	68fb      	ldr	r3, [r7, #12]
 801cbde:	2200      	movs	r2, #0
 801cbe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801cbe4:	711a      	strb	r2, [r3, #4]
 801cbe6:	2200      	movs	r2, #0
 801cbe8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	2243      	movs	r2, #67	; 0x43
 801cbee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801cbf0:	4b02      	ldr	r3, [pc, #8]	; (801cbfc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801cbf2:	4618      	mov	r0, r3
 801cbf4:	3718      	adds	r7, #24
 801cbf6:	46bd      	mov	sp, r7
 801cbf8:	bd80      	pop	{r7, pc}
 801cbfa:	bf00      	nop
 801cbfc:	20000f30 	.word	0x20000f30

0801cc00 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801cc00:	b580      	push	{r7, lr}
 801cc02:	b086      	sub	sp, #24
 801cc04:	af00      	add	r7, sp, #0
 801cc06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801cc08:	2182      	movs	r1, #130	; 0x82
 801cc0a:	4818      	ldr	r0, [pc, #96]	; (801cc6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 801cc0c:	f000 fcd7 	bl	801d5be <USBD_GetEpDesc>
 801cc10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801cc12:	2101      	movs	r1, #1
 801cc14:	4815      	ldr	r0, [pc, #84]	; (801cc6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 801cc16:	f000 fcd2 	bl	801d5be <USBD_GetEpDesc>
 801cc1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801cc1c:	2181      	movs	r1, #129	; 0x81
 801cc1e:	4813      	ldr	r0, [pc, #76]	; (801cc6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 801cc20:	f000 fccd 	bl	801d5be <USBD_GetEpDesc>
 801cc24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801cc26:	697b      	ldr	r3, [r7, #20]
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d002      	beq.n	801cc32 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801cc2c:	697b      	ldr	r3, [r7, #20]
 801cc2e:	2210      	movs	r2, #16
 801cc30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801cc32:	693b      	ldr	r3, [r7, #16]
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	d006      	beq.n	801cc46 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801cc38:	693b      	ldr	r3, [r7, #16]
 801cc3a:	2200      	movs	r2, #0
 801cc3c:	711a      	strb	r2, [r3, #4]
 801cc3e:	2200      	movs	r2, #0
 801cc40:	f042 0202 	orr.w	r2, r2, #2
 801cc44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801cc46:	68fb      	ldr	r3, [r7, #12]
 801cc48:	2b00      	cmp	r3, #0
 801cc4a:	d006      	beq.n	801cc5a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801cc4c:	68fb      	ldr	r3, [r7, #12]
 801cc4e:	2200      	movs	r2, #0
 801cc50:	711a      	strb	r2, [r3, #4]
 801cc52:	2200      	movs	r2, #0
 801cc54:	f042 0202 	orr.w	r2, r2, #2
 801cc58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801cc5a:	687b      	ldr	r3, [r7, #4]
 801cc5c:	2243      	movs	r2, #67	; 0x43
 801cc5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801cc60:	4b02      	ldr	r3, [pc, #8]	; (801cc6c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801cc62:	4618      	mov	r0, r3
 801cc64:	3718      	adds	r7, #24
 801cc66:	46bd      	mov	sp, r7
 801cc68:	bd80      	pop	{r7, pc}
 801cc6a:	bf00      	nop
 801cc6c:	20000f30 	.word	0x20000f30

0801cc70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801cc70:	b580      	push	{r7, lr}
 801cc72:	b086      	sub	sp, #24
 801cc74:	af00      	add	r7, sp, #0
 801cc76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801cc78:	2182      	movs	r1, #130	; 0x82
 801cc7a:	4818      	ldr	r0, [pc, #96]	; (801ccdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801cc7c:	f000 fc9f 	bl	801d5be <USBD_GetEpDesc>
 801cc80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801cc82:	2101      	movs	r1, #1
 801cc84:	4815      	ldr	r0, [pc, #84]	; (801ccdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801cc86:	f000 fc9a 	bl	801d5be <USBD_GetEpDesc>
 801cc8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801cc8c:	2181      	movs	r1, #129	; 0x81
 801cc8e:	4813      	ldr	r0, [pc, #76]	; (801ccdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801cc90:	f000 fc95 	bl	801d5be <USBD_GetEpDesc>
 801cc94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801cc96:	697b      	ldr	r3, [r7, #20]
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	d002      	beq.n	801cca2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801cc9c:	697b      	ldr	r3, [r7, #20]
 801cc9e:	2210      	movs	r2, #16
 801cca0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801cca2:	693b      	ldr	r3, [r7, #16]
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	d006      	beq.n	801ccb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801cca8:	693b      	ldr	r3, [r7, #16]
 801ccaa:	2200      	movs	r2, #0
 801ccac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ccb0:	711a      	strb	r2, [r3, #4]
 801ccb2:	2200      	movs	r2, #0
 801ccb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801ccb6:	68fb      	ldr	r3, [r7, #12]
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d006      	beq.n	801ccca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801ccbc:	68fb      	ldr	r3, [r7, #12]
 801ccbe:	2200      	movs	r2, #0
 801ccc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ccc4:	711a      	strb	r2, [r3, #4]
 801ccc6:	2200      	movs	r2, #0
 801ccc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	2243      	movs	r2, #67	; 0x43
 801ccce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801ccd0:	4b02      	ldr	r3, [pc, #8]	; (801ccdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801ccd2:	4618      	mov	r0, r3
 801ccd4:	3718      	adds	r7, #24
 801ccd6:	46bd      	mov	sp, r7
 801ccd8:	bd80      	pop	{r7, pc}
 801ccda:	bf00      	nop
 801ccdc:	20000f30 	.word	0x20000f30

0801cce0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801cce0:	b480      	push	{r7}
 801cce2:	b083      	sub	sp, #12
 801cce4:	af00      	add	r7, sp, #0
 801cce6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	220a      	movs	r2, #10
 801ccec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801ccee:	4b03      	ldr	r3, [pc, #12]	; (801ccfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801ccf0:	4618      	mov	r0, r3
 801ccf2:	370c      	adds	r7, #12
 801ccf4:	46bd      	mov	sp, r7
 801ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccfa:	4770      	bx	lr
 801ccfc:	20000eec 	.word	0x20000eec

0801cd00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801cd00:	b480      	push	{r7}
 801cd02:	b083      	sub	sp, #12
 801cd04:	af00      	add	r7, sp, #0
 801cd06:	6078      	str	r0, [r7, #4]
 801cd08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801cd0a:	683b      	ldr	r3, [r7, #0]
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d101      	bne.n	801cd14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801cd10:	2303      	movs	r3, #3
 801cd12:	e009      	b.n	801cd28 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801cd1a:	687a      	ldr	r2, [r7, #4]
 801cd1c:	33b0      	adds	r3, #176	; 0xb0
 801cd1e:	009b      	lsls	r3, r3, #2
 801cd20:	4413      	add	r3, r2
 801cd22:	683a      	ldr	r2, [r7, #0]
 801cd24:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801cd26:	2300      	movs	r3, #0
}
 801cd28:	4618      	mov	r0, r3
 801cd2a:	370c      	adds	r7, #12
 801cd2c:	46bd      	mov	sp, r7
 801cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd32:	4770      	bx	lr

0801cd34 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801cd34:	b480      	push	{r7}
 801cd36:	b087      	sub	sp, #28
 801cd38:	af00      	add	r7, sp, #0
 801cd3a:	60f8      	str	r0, [r7, #12]
 801cd3c:	60b9      	str	r1, [r7, #8]
 801cd3e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801cd40:	68fb      	ldr	r3, [r7, #12]
 801cd42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801cd46:	68fb      	ldr	r3, [r7, #12]
 801cd48:	32b0      	adds	r2, #176	; 0xb0
 801cd4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cd4e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801cd50:	697b      	ldr	r3, [r7, #20]
 801cd52:	2b00      	cmp	r3, #0
 801cd54:	d101      	bne.n	801cd5a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801cd56:	2303      	movs	r3, #3
 801cd58:	e008      	b.n	801cd6c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801cd5a:	697b      	ldr	r3, [r7, #20]
 801cd5c:	68ba      	ldr	r2, [r7, #8]
 801cd5e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801cd62:	697b      	ldr	r3, [r7, #20]
 801cd64:	687a      	ldr	r2, [r7, #4]
 801cd66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801cd6a:	2300      	movs	r3, #0
}
 801cd6c:	4618      	mov	r0, r3
 801cd6e:	371c      	adds	r7, #28
 801cd70:	46bd      	mov	sp, r7
 801cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd76:	4770      	bx	lr

0801cd78 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801cd78:	b480      	push	{r7}
 801cd7a:	b085      	sub	sp, #20
 801cd7c:	af00      	add	r7, sp, #0
 801cd7e:	6078      	str	r0, [r7, #4]
 801cd80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801cd82:	687b      	ldr	r3, [r7, #4]
 801cd84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	32b0      	adds	r2, #176	; 0xb0
 801cd8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cd90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801cd92:	68fb      	ldr	r3, [r7, #12]
 801cd94:	2b00      	cmp	r3, #0
 801cd96:	d101      	bne.n	801cd9c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801cd98:	2303      	movs	r3, #3
 801cd9a:	e004      	b.n	801cda6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801cd9c:	68fb      	ldr	r3, [r7, #12]
 801cd9e:	683a      	ldr	r2, [r7, #0]
 801cda0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801cda4:	2300      	movs	r3, #0
}
 801cda6:	4618      	mov	r0, r3
 801cda8:	3714      	adds	r7, #20
 801cdaa:	46bd      	mov	sp, r7
 801cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdb0:	4770      	bx	lr
	...

0801cdb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801cdb4:	b580      	push	{r7, lr}
 801cdb6:	b084      	sub	sp, #16
 801cdb8:	af00      	add	r7, sp, #0
 801cdba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	32b0      	adds	r2, #176	; 0xb0
 801cdc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cdca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801cdd2:	687b      	ldr	r3, [r7, #4]
 801cdd4:	32b0      	adds	r2, #176	; 0xb0
 801cdd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	d101      	bne.n	801cde2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801cdde:	2303      	movs	r3, #3
 801cde0:	e018      	b.n	801ce14 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	7c1b      	ldrb	r3, [r3, #16]
 801cde6:	2b00      	cmp	r3, #0
 801cde8:	d10a      	bne.n	801ce00 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801cdea:	4b0c      	ldr	r3, [pc, #48]	; (801ce1c <USBD_CDC_ReceivePacket+0x68>)
 801cdec:	7819      	ldrb	r1, [r3, #0]
 801cdee:	68fb      	ldr	r3, [r7, #12]
 801cdf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801cdf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 801cdf8:	6878      	ldr	r0, [r7, #4]
 801cdfa:	f005 fb51 	bl	80224a0 <USBD_LL_PrepareReceive>
 801cdfe:	e008      	b.n	801ce12 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801ce00:	4b06      	ldr	r3, [pc, #24]	; (801ce1c <USBD_CDC_ReceivePacket+0x68>)
 801ce02:	7819      	ldrb	r1, [r3, #0]
 801ce04:	68fb      	ldr	r3, [r7, #12]
 801ce06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801ce0a:	2340      	movs	r3, #64	; 0x40
 801ce0c:	6878      	ldr	r0, [r7, #4]
 801ce0e:	f005 fb47 	bl	80224a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801ce12:	2300      	movs	r3, #0
}
 801ce14:	4618      	mov	r0, r3
 801ce16:	3710      	adds	r7, #16
 801ce18:	46bd      	mov	sp, r7
 801ce1a:	bd80      	pop	{r7, pc}
 801ce1c:	20000f74 	.word	0x20000f74

0801ce20 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801ce20:	b580      	push	{r7, lr}
 801ce22:	b086      	sub	sp, #24
 801ce24:	af00      	add	r7, sp, #0
 801ce26:	60f8      	str	r0, [r7, #12]
 801ce28:	60b9      	str	r1, [r7, #8]
 801ce2a:	4613      	mov	r3, r2
 801ce2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801ce2e:	68fb      	ldr	r3, [r7, #12]
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	d101      	bne.n	801ce38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801ce34:	2303      	movs	r3, #3
 801ce36:	e01f      	b.n	801ce78 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801ce38:	68fb      	ldr	r3, [r7, #12]
 801ce3a:	2200      	movs	r2, #0
 801ce3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801ce40:	68fb      	ldr	r3, [r7, #12]
 801ce42:	2200      	movs	r2, #0
 801ce44:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801ce48:	68fb      	ldr	r3, [r7, #12]
 801ce4a:	2200      	movs	r2, #0
 801ce4c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801ce50:	68bb      	ldr	r3, [r7, #8]
 801ce52:	2b00      	cmp	r3, #0
 801ce54:	d003      	beq.n	801ce5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801ce56:	68fb      	ldr	r3, [r7, #12]
 801ce58:	68ba      	ldr	r2, [r7, #8]
 801ce5a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801ce5e:	68fb      	ldr	r3, [r7, #12]
 801ce60:	2201      	movs	r2, #1
 801ce62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801ce66:	68fb      	ldr	r3, [r7, #12]
 801ce68:	79fa      	ldrb	r2, [r7, #7]
 801ce6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801ce6c:	68f8      	ldr	r0, [r7, #12]
 801ce6e:	f005 f9c1 	bl	80221f4 <USBD_LL_Init>
 801ce72:	4603      	mov	r3, r0
 801ce74:	75fb      	strb	r3, [r7, #23]

  return ret;
 801ce76:	7dfb      	ldrb	r3, [r7, #23]
}
 801ce78:	4618      	mov	r0, r3
 801ce7a:	3718      	adds	r7, #24
 801ce7c:	46bd      	mov	sp, r7
 801ce7e:	bd80      	pop	{r7, pc}

0801ce80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801ce80:	b580      	push	{r7, lr}
 801ce82:	b084      	sub	sp, #16
 801ce84:	af00      	add	r7, sp, #0
 801ce86:	6078      	str	r0, [r7, #4]
 801ce88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801ce8a:	2300      	movs	r3, #0
 801ce8c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801ce8e:	683b      	ldr	r3, [r7, #0]
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	d101      	bne.n	801ce98 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801ce94:	2303      	movs	r3, #3
 801ce96:	e025      	b.n	801cee4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801ce98:	687b      	ldr	r3, [r7, #4]
 801ce9a:	683a      	ldr	r2, [r7, #0]
 801ce9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	32ae      	adds	r2, #174	; 0xae
 801ceaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ceae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	d00f      	beq.n	801ced4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ceba:	687b      	ldr	r3, [r7, #4]
 801cebc:	32ae      	adds	r2, #174	; 0xae
 801cebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cec4:	f107 020e 	add.w	r2, r7, #14
 801cec8:	4610      	mov	r0, r2
 801ceca:	4798      	blx	r3
 801cecc:	4602      	mov	r2, r0
 801cece:	687b      	ldr	r3, [r7, #4]
 801ced0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801ced4:	687b      	ldr	r3, [r7, #4]
 801ced6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801ceda:	1c5a      	adds	r2, r3, #1
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801cee2:	2300      	movs	r3, #0
}
 801cee4:	4618      	mov	r0, r3
 801cee6:	3710      	adds	r7, #16
 801cee8:	46bd      	mov	sp, r7
 801ceea:	bd80      	pop	{r7, pc}

0801ceec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801ceec:	b580      	push	{r7, lr}
 801ceee:	b082      	sub	sp, #8
 801cef0:	af00      	add	r7, sp, #0
 801cef2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801cef4:	6878      	ldr	r0, [r7, #4]
 801cef6:	f005 f9c9 	bl	802228c <USBD_LL_Start>
 801cefa:	4603      	mov	r3, r0
}
 801cefc:	4618      	mov	r0, r3
 801cefe:	3708      	adds	r7, #8
 801cf00:	46bd      	mov	sp, r7
 801cf02:	bd80      	pop	{r7, pc}

0801cf04 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801cf04:	b480      	push	{r7}
 801cf06:	b083      	sub	sp, #12
 801cf08:	af00      	add	r7, sp, #0
 801cf0a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801cf0c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801cf0e:	4618      	mov	r0, r3
 801cf10:	370c      	adds	r7, #12
 801cf12:	46bd      	mov	sp, r7
 801cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf18:	4770      	bx	lr

0801cf1a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801cf1a:	b580      	push	{r7, lr}
 801cf1c:	b084      	sub	sp, #16
 801cf1e:	af00      	add	r7, sp, #0
 801cf20:	6078      	str	r0, [r7, #4]
 801cf22:	460b      	mov	r3, r1
 801cf24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801cf26:	2300      	movs	r3, #0
 801cf28:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	d009      	beq.n	801cf48 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801cf3a:	681b      	ldr	r3, [r3, #0]
 801cf3c:	78fa      	ldrb	r2, [r7, #3]
 801cf3e:	4611      	mov	r1, r2
 801cf40:	6878      	ldr	r0, [r7, #4]
 801cf42:	4798      	blx	r3
 801cf44:	4603      	mov	r3, r0
 801cf46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801cf48:	7bfb      	ldrb	r3, [r7, #15]
}
 801cf4a:	4618      	mov	r0, r3
 801cf4c:	3710      	adds	r7, #16
 801cf4e:	46bd      	mov	sp, r7
 801cf50:	bd80      	pop	{r7, pc}

0801cf52 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801cf52:	b580      	push	{r7, lr}
 801cf54:	b084      	sub	sp, #16
 801cf56:	af00      	add	r7, sp, #0
 801cf58:	6078      	str	r0, [r7, #4]
 801cf5a:	460b      	mov	r3, r1
 801cf5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801cf5e:	2300      	movs	r3, #0
 801cf60:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801cf62:	687b      	ldr	r3, [r7, #4]
 801cf64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801cf68:	685b      	ldr	r3, [r3, #4]
 801cf6a:	78fa      	ldrb	r2, [r7, #3]
 801cf6c:	4611      	mov	r1, r2
 801cf6e:	6878      	ldr	r0, [r7, #4]
 801cf70:	4798      	blx	r3
 801cf72:	4603      	mov	r3, r0
 801cf74:	2b00      	cmp	r3, #0
 801cf76:	d001      	beq.n	801cf7c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801cf78:	2303      	movs	r3, #3
 801cf7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801cf7c:	7bfb      	ldrb	r3, [r7, #15]
}
 801cf7e:	4618      	mov	r0, r3
 801cf80:	3710      	adds	r7, #16
 801cf82:	46bd      	mov	sp, r7
 801cf84:	bd80      	pop	{r7, pc}

0801cf86 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801cf86:	b580      	push	{r7, lr}
 801cf88:	b084      	sub	sp, #16
 801cf8a:	af00      	add	r7, sp, #0
 801cf8c:	6078      	str	r0, [r7, #4]
 801cf8e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801cf96:	6839      	ldr	r1, [r7, #0]
 801cf98:	4618      	mov	r0, r3
 801cf9a:	f001 f90e 	bl	801e1ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	2201      	movs	r2, #1
 801cfa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801cfac:	461a      	mov	r2, r3
 801cfae:	687b      	ldr	r3, [r7, #4]
 801cfb0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801cfb4:	687b      	ldr	r3, [r7, #4]
 801cfb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801cfba:	f003 031f 	and.w	r3, r3, #31
 801cfbe:	2b02      	cmp	r3, #2
 801cfc0:	d01a      	beq.n	801cff8 <USBD_LL_SetupStage+0x72>
 801cfc2:	2b02      	cmp	r3, #2
 801cfc4:	d822      	bhi.n	801d00c <USBD_LL_SetupStage+0x86>
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d002      	beq.n	801cfd0 <USBD_LL_SetupStage+0x4a>
 801cfca:	2b01      	cmp	r3, #1
 801cfcc:	d00a      	beq.n	801cfe4 <USBD_LL_SetupStage+0x5e>
 801cfce:	e01d      	b.n	801d00c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801cfd0:	687b      	ldr	r3, [r7, #4]
 801cfd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801cfd6:	4619      	mov	r1, r3
 801cfd8:	6878      	ldr	r0, [r7, #4]
 801cfda:	f000 fb65 	bl	801d6a8 <USBD_StdDevReq>
 801cfde:	4603      	mov	r3, r0
 801cfe0:	73fb      	strb	r3, [r7, #15]
      break;
 801cfe2:	e020      	b.n	801d026 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801cfea:	4619      	mov	r1, r3
 801cfec:	6878      	ldr	r0, [r7, #4]
 801cfee:	f000 fbcd 	bl	801d78c <USBD_StdItfReq>
 801cff2:	4603      	mov	r3, r0
 801cff4:	73fb      	strb	r3, [r7, #15]
      break;
 801cff6:	e016      	b.n	801d026 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801cffe:	4619      	mov	r1, r3
 801d000:	6878      	ldr	r0, [r7, #4]
 801d002:	f000 fc2f 	bl	801d864 <USBD_StdEPReq>
 801d006:	4603      	mov	r3, r0
 801d008:	73fb      	strb	r3, [r7, #15]
      break;
 801d00a:	e00c      	b.n	801d026 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801d012:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801d016:	b2db      	uxtb	r3, r3
 801d018:	4619      	mov	r1, r3
 801d01a:	6878      	ldr	r0, [r7, #4]
 801d01c:	f005 f996 	bl	802234c <USBD_LL_StallEP>
 801d020:	4603      	mov	r3, r0
 801d022:	73fb      	strb	r3, [r7, #15]
      break;
 801d024:	bf00      	nop
  }

  return ret;
 801d026:	7bfb      	ldrb	r3, [r7, #15]
}
 801d028:	4618      	mov	r0, r3
 801d02a:	3710      	adds	r7, #16
 801d02c:	46bd      	mov	sp, r7
 801d02e:	bd80      	pop	{r7, pc}

0801d030 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801d030:	b580      	push	{r7, lr}
 801d032:	b086      	sub	sp, #24
 801d034:	af00      	add	r7, sp, #0
 801d036:	60f8      	str	r0, [r7, #12]
 801d038:	460b      	mov	r3, r1
 801d03a:	607a      	str	r2, [r7, #4]
 801d03c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801d03e:	2300      	movs	r3, #0
 801d040:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801d042:	7afb      	ldrb	r3, [r7, #11]
 801d044:	2b00      	cmp	r3, #0
 801d046:	d16e      	bne.n	801d126 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801d048:	68fb      	ldr	r3, [r7, #12]
 801d04a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801d04e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801d050:	68fb      	ldr	r3, [r7, #12]
 801d052:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801d056:	2b03      	cmp	r3, #3
 801d058:	f040 8098 	bne.w	801d18c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801d05c:	693b      	ldr	r3, [r7, #16]
 801d05e:	689a      	ldr	r2, [r3, #8]
 801d060:	693b      	ldr	r3, [r7, #16]
 801d062:	68db      	ldr	r3, [r3, #12]
 801d064:	429a      	cmp	r2, r3
 801d066:	d913      	bls.n	801d090 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801d068:	693b      	ldr	r3, [r7, #16]
 801d06a:	689a      	ldr	r2, [r3, #8]
 801d06c:	693b      	ldr	r3, [r7, #16]
 801d06e:	68db      	ldr	r3, [r3, #12]
 801d070:	1ad2      	subs	r2, r2, r3
 801d072:	693b      	ldr	r3, [r7, #16]
 801d074:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801d076:	693b      	ldr	r3, [r7, #16]
 801d078:	68da      	ldr	r2, [r3, #12]
 801d07a:	693b      	ldr	r3, [r7, #16]
 801d07c:	689b      	ldr	r3, [r3, #8]
 801d07e:	4293      	cmp	r3, r2
 801d080:	bf28      	it	cs
 801d082:	4613      	movcs	r3, r2
 801d084:	461a      	mov	r2, r3
 801d086:	6879      	ldr	r1, [r7, #4]
 801d088:	68f8      	ldr	r0, [r7, #12]
 801d08a:	f001 f98a 	bl	801e3a2 <USBD_CtlContinueRx>
 801d08e:	e07d      	b.n	801d18c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801d090:	68fb      	ldr	r3, [r7, #12]
 801d092:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801d096:	f003 031f 	and.w	r3, r3, #31
 801d09a:	2b02      	cmp	r3, #2
 801d09c:	d014      	beq.n	801d0c8 <USBD_LL_DataOutStage+0x98>
 801d09e:	2b02      	cmp	r3, #2
 801d0a0:	d81d      	bhi.n	801d0de <USBD_LL_DataOutStage+0xae>
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	d002      	beq.n	801d0ac <USBD_LL_DataOutStage+0x7c>
 801d0a6:	2b01      	cmp	r3, #1
 801d0a8:	d003      	beq.n	801d0b2 <USBD_LL_DataOutStage+0x82>
 801d0aa:	e018      	b.n	801d0de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801d0ac:	2300      	movs	r3, #0
 801d0ae:	75bb      	strb	r3, [r7, #22]
            break;
 801d0b0:	e018      	b.n	801d0e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801d0b2:	68fb      	ldr	r3, [r7, #12]
 801d0b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801d0b8:	b2db      	uxtb	r3, r3
 801d0ba:	4619      	mov	r1, r3
 801d0bc:	68f8      	ldr	r0, [r7, #12]
 801d0be:	f000 fa64 	bl	801d58a <USBD_CoreFindIF>
 801d0c2:	4603      	mov	r3, r0
 801d0c4:	75bb      	strb	r3, [r7, #22]
            break;
 801d0c6:	e00d      	b.n	801d0e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801d0c8:	68fb      	ldr	r3, [r7, #12]
 801d0ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801d0ce:	b2db      	uxtb	r3, r3
 801d0d0:	4619      	mov	r1, r3
 801d0d2:	68f8      	ldr	r0, [r7, #12]
 801d0d4:	f000 fa66 	bl	801d5a4 <USBD_CoreFindEP>
 801d0d8:	4603      	mov	r3, r0
 801d0da:	75bb      	strb	r3, [r7, #22]
            break;
 801d0dc:	e002      	b.n	801d0e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801d0de:	2300      	movs	r3, #0
 801d0e0:	75bb      	strb	r3, [r7, #22]
            break;
 801d0e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801d0e4:	7dbb      	ldrb	r3, [r7, #22]
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	d119      	bne.n	801d11e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d0ea:	68fb      	ldr	r3, [r7, #12]
 801d0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d0f0:	b2db      	uxtb	r3, r3
 801d0f2:	2b03      	cmp	r3, #3
 801d0f4:	d113      	bne.n	801d11e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801d0f6:	7dba      	ldrb	r2, [r7, #22]
 801d0f8:	68fb      	ldr	r3, [r7, #12]
 801d0fa:	32ae      	adds	r2, #174	; 0xae
 801d0fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d100:	691b      	ldr	r3, [r3, #16]
 801d102:	2b00      	cmp	r3, #0
 801d104:	d00b      	beq.n	801d11e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801d106:	7dba      	ldrb	r2, [r7, #22]
 801d108:	68fb      	ldr	r3, [r7, #12]
 801d10a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801d10e:	7dba      	ldrb	r2, [r7, #22]
 801d110:	68fb      	ldr	r3, [r7, #12]
 801d112:	32ae      	adds	r2, #174	; 0xae
 801d114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d118:	691b      	ldr	r3, [r3, #16]
 801d11a:	68f8      	ldr	r0, [r7, #12]
 801d11c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801d11e:	68f8      	ldr	r0, [r7, #12]
 801d120:	f001 f950 	bl	801e3c4 <USBD_CtlSendStatus>
 801d124:	e032      	b.n	801d18c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801d126:	7afb      	ldrb	r3, [r7, #11]
 801d128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d12c:	b2db      	uxtb	r3, r3
 801d12e:	4619      	mov	r1, r3
 801d130:	68f8      	ldr	r0, [r7, #12]
 801d132:	f000 fa37 	bl	801d5a4 <USBD_CoreFindEP>
 801d136:	4603      	mov	r3, r0
 801d138:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801d13a:	7dbb      	ldrb	r3, [r7, #22]
 801d13c:	2bff      	cmp	r3, #255	; 0xff
 801d13e:	d025      	beq.n	801d18c <USBD_LL_DataOutStage+0x15c>
 801d140:	7dbb      	ldrb	r3, [r7, #22]
 801d142:	2b00      	cmp	r3, #0
 801d144:	d122      	bne.n	801d18c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d146:	68fb      	ldr	r3, [r7, #12]
 801d148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d14c:	b2db      	uxtb	r3, r3
 801d14e:	2b03      	cmp	r3, #3
 801d150:	d117      	bne.n	801d182 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801d152:	7dba      	ldrb	r2, [r7, #22]
 801d154:	68fb      	ldr	r3, [r7, #12]
 801d156:	32ae      	adds	r2, #174	; 0xae
 801d158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d15c:	699b      	ldr	r3, [r3, #24]
 801d15e:	2b00      	cmp	r3, #0
 801d160:	d00f      	beq.n	801d182 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801d162:	7dba      	ldrb	r2, [r7, #22]
 801d164:	68fb      	ldr	r3, [r7, #12]
 801d166:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801d16a:	7dba      	ldrb	r2, [r7, #22]
 801d16c:	68fb      	ldr	r3, [r7, #12]
 801d16e:	32ae      	adds	r2, #174	; 0xae
 801d170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d174:	699b      	ldr	r3, [r3, #24]
 801d176:	7afa      	ldrb	r2, [r7, #11]
 801d178:	4611      	mov	r1, r2
 801d17a:	68f8      	ldr	r0, [r7, #12]
 801d17c:	4798      	blx	r3
 801d17e:	4603      	mov	r3, r0
 801d180:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801d182:	7dfb      	ldrb	r3, [r7, #23]
 801d184:	2b00      	cmp	r3, #0
 801d186:	d001      	beq.n	801d18c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801d188:	7dfb      	ldrb	r3, [r7, #23]
 801d18a:	e000      	b.n	801d18e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801d18c:	2300      	movs	r3, #0
}
 801d18e:	4618      	mov	r0, r3
 801d190:	3718      	adds	r7, #24
 801d192:	46bd      	mov	sp, r7
 801d194:	bd80      	pop	{r7, pc}

0801d196 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801d196:	b580      	push	{r7, lr}
 801d198:	b086      	sub	sp, #24
 801d19a:	af00      	add	r7, sp, #0
 801d19c:	60f8      	str	r0, [r7, #12]
 801d19e:	460b      	mov	r3, r1
 801d1a0:	607a      	str	r2, [r7, #4]
 801d1a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801d1a4:	7afb      	ldrb	r3, [r7, #11]
 801d1a6:	2b00      	cmp	r3, #0
 801d1a8:	d16f      	bne.n	801d28a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801d1aa:	68fb      	ldr	r3, [r7, #12]
 801d1ac:	3314      	adds	r3, #20
 801d1ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801d1b0:	68fb      	ldr	r3, [r7, #12]
 801d1b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801d1b6:	2b02      	cmp	r3, #2
 801d1b8:	d15a      	bne.n	801d270 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801d1ba:	693b      	ldr	r3, [r7, #16]
 801d1bc:	689a      	ldr	r2, [r3, #8]
 801d1be:	693b      	ldr	r3, [r7, #16]
 801d1c0:	68db      	ldr	r3, [r3, #12]
 801d1c2:	429a      	cmp	r2, r3
 801d1c4:	d914      	bls.n	801d1f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801d1c6:	693b      	ldr	r3, [r7, #16]
 801d1c8:	689a      	ldr	r2, [r3, #8]
 801d1ca:	693b      	ldr	r3, [r7, #16]
 801d1cc:	68db      	ldr	r3, [r3, #12]
 801d1ce:	1ad2      	subs	r2, r2, r3
 801d1d0:	693b      	ldr	r3, [r7, #16]
 801d1d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801d1d4:	693b      	ldr	r3, [r7, #16]
 801d1d6:	689b      	ldr	r3, [r3, #8]
 801d1d8:	461a      	mov	r2, r3
 801d1da:	6879      	ldr	r1, [r7, #4]
 801d1dc:	68f8      	ldr	r0, [r7, #12]
 801d1de:	f001 f8b2 	bl	801e346 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801d1e2:	2300      	movs	r3, #0
 801d1e4:	2200      	movs	r2, #0
 801d1e6:	2100      	movs	r1, #0
 801d1e8:	68f8      	ldr	r0, [r7, #12]
 801d1ea:	f005 f959 	bl	80224a0 <USBD_LL_PrepareReceive>
 801d1ee:	e03f      	b.n	801d270 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801d1f0:	693b      	ldr	r3, [r7, #16]
 801d1f2:	68da      	ldr	r2, [r3, #12]
 801d1f4:	693b      	ldr	r3, [r7, #16]
 801d1f6:	689b      	ldr	r3, [r3, #8]
 801d1f8:	429a      	cmp	r2, r3
 801d1fa:	d11c      	bne.n	801d236 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801d1fc:	693b      	ldr	r3, [r7, #16]
 801d1fe:	685a      	ldr	r2, [r3, #4]
 801d200:	693b      	ldr	r3, [r7, #16]
 801d202:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801d204:	429a      	cmp	r2, r3
 801d206:	d316      	bcc.n	801d236 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801d208:	693b      	ldr	r3, [r7, #16]
 801d20a:	685a      	ldr	r2, [r3, #4]
 801d20c:	68fb      	ldr	r3, [r7, #12]
 801d20e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801d212:	429a      	cmp	r2, r3
 801d214:	d20f      	bcs.n	801d236 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801d216:	2200      	movs	r2, #0
 801d218:	2100      	movs	r1, #0
 801d21a:	68f8      	ldr	r0, [r7, #12]
 801d21c:	f001 f893 	bl	801e346 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801d220:	68fb      	ldr	r3, [r7, #12]
 801d222:	2200      	movs	r2, #0
 801d224:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801d228:	2300      	movs	r3, #0
 801d22a:	2200      	movs	r2, #0
 801d22c:	2100      	movs	r1, #0
 801d22e:	68f8      	ldr	r0, [r7, #12]
 801d230:	f005 f936 	bl	80224a0 <USBD_LL_PrepareReceive>
 801d234:	e01c      	b.n	801d270 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d236:	68fb      	ldr	r3, [r7, #12]
 801d238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d23c:	b2db      	uxtb	r3, r3
 801d23e:	2b03      	cmp	r3, #3
 801d240:	d10f      	bne.n	801d262 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801d242:	68fb      	ldr	r3, [r7, #12]
 801d244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d248:	68db      	ldr	r3, [r3, #12]
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	d009      	beq.n	801d262 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801d24e:	68fb      	ldr	r3, [r7, #12]
 801d250:	2200      	movs	r2, #0
 801d252:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801d256:	68fb      	ldr	r3, [r7, #12]
 801d258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d25c:	68db      	ldr	r3, [r3, #12]
 801d25e:	68f8      	ldr	r0, [r7, #12]
 801d260:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801d262:	2180      	movs	r1, #128	; 0x80
 801d264:	68f8      	ldr	r0, [r7, #12]
 801d266:	f005 f871 	bl	802234c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801d26a:	68f8      	ldr	r0, [r7, #12]
 801d26c:	f001 f8bd 	bl	801e3ea <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801d270:	68fb      	ldr	r3, [r7, #12]
 801d272:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801d276:	2b00      	cmp	r3, #0
 801d278:	d03a      	beq.n	801d2f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801d27a:	68f8      	ldr	r0, [r7, #12]
 801d27c:	f7ff fe42 	bl	801cf04 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801d280:	68fb      	ldr	r3, [r7, #12]
 801d282:	2200      	movs	r2, #0
 801d284:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801d288:	e032      	b.n	801d2f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801d28a:	7afb      	ldrb	r3, [r7, #11]
 801d28c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801d290:	b2db      	uxtb	r3, r3
 801d292:	4619      	mov	r1, r3
 801d294:	68f8      	ldr	r0, [r7, #12]
 801d296:	f000 f985 	bl	801d5a4 <USBD_CoreFindEP>
 801d29a:	4603      	mov	r3, r0
 801d29c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801d29e:	7dfb      	ldrb	r3, [r7, #23]
 801d2a0:	2bff      	cmp	r3, #255	; 0xff
 801d2a2:	d025      	beq.n	801d2f0 <USBD_LL_DataInStage+0x15a>
 801d2a4:	7dfb      	ldrb	r3, [r7, #23]
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	d122      	bne.n	801d2f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d2aa:	68fb      	ldr	r3, [r7, #12]
 801d2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d2b0:	b2db      	uxtb	r3, r3
 801d2b2:	2b03      	cmp	r3, #3
 801d2b4:	d11c      	bne.n	801d2f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801d2b6:	7dfa      	ldrb	r2, [r7, #23]
 801d2b8:	68fb      	ldr	r3, [r7, #12]
 801d2ba:	32ae      	adds	r2, #174	; 0xae
 801d2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d2c0:	695b      	ldr	r3, [r3, #20]
 801d2c2:	2b00      	cmp	r3, #0
 801d2c4:	d014      	beq.n	801d2f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801d2c6:	7dfa      	ldrb	r2, [r7, #23]
 801d2c8:	68fb      	ldr	r3, [r7, #12]
 801d2ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801d2ce:	7dfa      	ldrb	r2, [r7, #23]
 801d2d0:	68fb      	ldr	r3, [r7, #12]
 801d2d2:	32ae      	adds	r2, #174	; 0xae
 801d2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d2d8:	695b      	ldr	r3, [r3, #20]
 801d2da:	7afa      	ldrb	r2, [r7, #11]
 801d2dc:	4611      	mov	r1, r2
 801d2de:	68f8      	ldr	r0, [r7, #12]
 801d2e0:	4798      	blx	r3
 801d2e2:	4603      	mov	r3, r0
 801d2e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801d2e6:	7dbb      	ldrb	r3, [r7, #22]
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d001      	beq.n	801d2f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801d2ec:	7dbb      	ldrb	r3, [r7, #22]
 801d2ee:	e000      	b.n	801d2f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801d2f0:	2300      	movs	r3, #0
}
 801d2f2:	4618      	mov	r0, r3
 801d2f4:	3718      	adds	r7, #24
 801d2f6:	46bd      	mov	sp, r7
 801d2f8:	bd80      	pop	{r7, pc}

0801d2fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801d2fa:	b580      	push	{r7, lr}
 801d2fc:	b084      	sub	sp, #16
 801d2fe:	af00      	add	r7, sp, #0
 801d300:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801d302:	2300      	movs	r3, #0
 801d304:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801d306:	687b      	ldr	r3, [r7, #4]
 801d308:	2201      	movs	r2, #1
 801d30a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	2200      	movs	r2, #0
 801d312:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	2200      	movs	r2, #0
 801d31a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801d31c:	687b      	ldr	r3, [r7, #4]
 801d31e:	2200      	movs	r2, #0
 801d320:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801d324:	687b      	ldr	r3, [r7, #4]
 801d326:	2200      	movs	r2, #0
 801d328:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801d32c:	687b      	ldr	r3, [r7, #4]
 801d32e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d332:	2b00      	cmp	r3, #0
 801d334:	d014      	beq.n	801d360 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d33c:	685b      	ldr	r3, [r3, #4]
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d00e      	beq.n	801d360 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d348:	685b      	ldr	r3, [r3, #4]
 801d34a:	687a      	ldr	r2, [r7, #4]
 801d34c:	6852      	ldr	r2, [r2, #4]
 801d34e:	b2d2      	uxtb	r2, r2
 801d350:	4611      	mov	r1, r2
 801d352:	6878      	ldr	r0, [r7, #4]
 801d354:	4798      	blx	r3
 801d356:	4603      	mov	r3, r0
 801d358:	2b00      	cmp	r3, #0
 801d35a:	d001      	beq.n	801d360 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801d35c:	2303      	movs	r3, #3
 801d35e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801d360:	2340      	movs	r3, #64	; 0x40
 801d362:	2200      	movs	r2, #0
 801d364:	2100      	movs	r1, #0
 801d366:	6878      	ldr	r0, [r7, #4]
 801d368:	f004 ffab 	bl	80222c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801d36c:	687b      	ldr	r3, [r7, #4]
 801d36e:	2201      	movs	r2, #1
 801d370:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801d374:	687b      	ldr	r3, [r7, #4]
 801d376:	2240      	movs	r2, #64	; 0x40
 801d378:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801d37c:	2340      	movs	r3, #64	; 0x40
 801d37e:	2200      	movs	r2, #0
 801d380:	2180      	movs	r1, #128	; 0x80
 801d382:	6878      	ldr	r0, [r7, #4]
 801d384:	f004 ff9d 	bl	80222c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	2201      	movs	r2, #1
 801d38c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801d38e:	687b      	ldr	r3, [r7, #4]
 801d390:	2240      	movs	r2, #64	; 0x40
 801d392:	621a      	str	r2, [r3, #32]

  return ret;
 801d394:	7bfb      	ldrb	r3, [r7, #15]
}
 801d396:	4618      	mov	r0, r3
 801d398:	3710      	adds	r7, #16
 801d39a:	46bd      	mov	sp, r7
 801d39c:	bd80      	pop	{r7, pc}

0801d39e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801d39e:	b480      	push	{r7}
 801d3a0:	b083      	sub	sp, #12
 801d3a2:	af00      	add	r7, sp, #0
 801d3a4:	6078      	str	r0, [r7, #4]
 801d3a6:	460b      	mov	r3, r1
 801d3a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	78fa      	ldrb	r2, [r7, #3]
 801d3ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801d3b0:	2300      	movs	r3, #0
}
 801d3b2:	4618      	mov	r0, r3
 801d3b4:	370c      	adds	r7, #12
 801d3b6:	46bd      	mov	sp, r7
 801d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3bc:	4770      	bx	lr

0801d3be <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801d3be:	b480      	push	{r7}
 801d3c0:	b083      	sub	sp, #12
 801d3c2:	af00      	add	r7, sp, #0
 801d3c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801d3c6:	687b      	ldr	r3, [r7, #4]
 801d3c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d3cc:	b2db      	uxtb	r3, r3
 801d3ce:	2b04      	cmp	r3, #4
 801d3d0:	d006      	beq.n	801d3e0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801d3d2:	687b      	ldr	r3, [r7, #4]
 801d3d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d3d8:	b2da      	uxtb	r2, r3
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801d3e0:	687b      	ldr	r3, [r7, #4]
 801d3e2:	2204      	movs	r2, #4
 801d3e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801d3e8:	2300      	movs	r3, #0
}
 801d3ea:	4618      	mov	r0, r3
 801d3ec:	370c      	adds	r7, #12
 801d3ee:	46bd      	mov	sp, r7
 801d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3f4:	4770      	bx	lr

0801d3f6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801d3f6:	b480      	push	{r7}
 801d3f8:	b083      	sub	sp, #12
 801d3fa:	af00      	add	r7, sp, #0
 801d3fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801d3fe:	687b      	ldr	r3, [r7, #4]
 801d400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d404:	b2db      	uxtb	r3, r3
 801d406:	2b04      	cmp	r3, #4
 801d408:	d106      	bne.n	801d418 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801d410:	b2da      	uxtb	r2, r3
 801d412:	687b      	ldr	r3, [r7, #4]
 801d414:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801d418:	2300      	movs	r3, #0
}
 801d41a:	4618      	mov	r0, r3
 801d41c:	370c      	adds	r7, #12
 801d41e:	46bd      	mov	sp, r7
 801d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d424:	4770      	bx	lr

0801d426 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801d426:	b580      	push	{r7, lr}
 801d428:	b082      	sub	sp, #8
 801d42a:	af00      	add	r7, sp, #0
 801d42c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d42e:	687b      	ldr	r3, [r7, #4]
 801d430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d434:	b2db      	uxtb	r3, r3
 801d436:	2b03      	cmp	r3, #3
 801d438:	d110      	bne.n	801d45c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d440:	2b00      	cmp	r3, #0
 801d442:	d00b      	beq.n	801d45c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801d444:	687b      	ldr	r3, [r7, #4]
 801d446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d44a:	69db      	ldr	r3, [r3, #28]
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	d005      	beq.n	801d45c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801d450:	687b      	ldr	r3, [r7, #4]
 801d452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d456:	69db      	ldr	r3, [r3, #28]
 801d458:	6878      	ldr	r0, [r7, #4]
 801d45a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801d45c:	2300      	movs	r3, #0
}
 801d45e:	4618      	mov	r0, r3
 801d460:	3708      	adds	r7, #8
 801d462:	46bd      	mov	sp, r7
 801d464:	bd80      	pop	{r7, pc}

0801d466 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801d466:	b580      	push	{r7, lr}
 801d468:	b082      	sub	sp, #8
 801d46a:	af00      	add	r7, sp, #0
 801d46c:	6078      	str	r0, [r7, #4]
 801d46e:	460b      	mov	r3, r1
 801d470:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801d472:	687b      	ldr	r3, [r7, #4]
 801d474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	32ae      	adds	r2, #174	; 0xae
 801d47c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d480:	2b00      	cmp	r3, #0
 801d482:	d101      	bne.n	801d488 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801d484:	2303      	movs	r3, #3
 801d486:	e01c      	b.n	801d4c2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d48e:	b2db      	uxtb	r3, r3
 801d490:	2b03      	cmp	r3, #3
 801d492:	d115      	bne.n	801d4c0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801d49a:	687b      	ldr	r3, [r7, #4]
 801d49c:	32ae      	adds	r2, #174	; 0xae
 801d49e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d4a2:	6a1b      	ldr	r3, [r3, #32]
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	d00b      	beq.n	801d4c0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801d4a8:	687b      	ldr	r3, [r7, #4]
 801d4aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801d4ae:	687b      	ldr	r3, [r7, #4]
 801d4b0:	32ae      	adds	r2, #174	; 0xae
 801d4b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d4b6:	6a1b      	ldr	r3, [r3, #32]
 801d4b8:	78fa      	ldrb	r2, [r7, #3]
 801d4ba:	4611      	mov	r1, r2
 801d4bc:	6878      	ldr	r0, [r7, #4]
 801d4be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801d4c0:	2300      	movs	r3, #0
}
 801d4c2:	4618      	mov	r0, r3
 801d4c4:	3708      	adds	r7, #8
 801d4c6:	46bd      	mov	sp, r7
 801d4c8:	bd80      	pop	{r7, pc}

0801d4ca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801d4ca:	b580      	push	{r7, lr}
 801d4cc:	b082      	sub	sp, #8
 801d4ce:	af00      	add	r7, sp, #0
 801d4d0:	6078      	str	r0, [r7, #4]
 801d4d2:	460b      	mov	r3, r1
 801d4d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801d4d6:	687b      	ldr	r3, [r7, #4]
 801d4d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	32ae      	adds	r2, #174	; 0xae
 801d4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d4e4:	2b00      	cmp	r3, #0
 801d4e6:	d101      	bne.n	801d4ec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801d4e8:	2303      	movs	r3, #3
 801d4ea:	e01c      	b.n	801d526 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d4ec:	687b      	ldr	r3, [r7, #4]
 801d4ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d4f2:	b2db      	uxtb	r3, r3
 801d4f4:	2b03      	cmp	r3, #3
 801d4f6:	d115      	bne.n	801d524 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801d4f8:	687b      	ldr	r3, [r7, #4]
 801d4fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801d4fe:	687b      	ldr	r3, [r7, #4]
 801d500:	32ae      	adds	r2, #174	; 0xae
 801d502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d508:	2b00      	cmp	r3, #0
 801d50a:	d00b      	beq.n	801d524 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801d50c:	687b      	ldr	r3, [r7, #4]
 801d50e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801d512:	687b      	ldr	r3, [r7, #4]
 801d514:	32ae      	adds	r2, #174	; 0xae
 801d516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d51c:	78fa      	ldrb	r2, [r7, #3]
 801d51e:	4611      	mov	r1, r2
 801d520:	6878      	ldr	r0, [r7, #4]
 801d522:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801d524:	2300      	movs	r3, #0
}
 801d526:	4618      	mov	r0, r3
 801d528:	3708      	adds	r7, #8
 801d52a:	46bd      	mov	sp, r7
 801d52c:	bd80      	pop	{r7, pc}

0801d52e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801d52e:	b480      	push	{r7}
 801d530:	b083      	sub	sp, #12
 801d532:	af00      	add	r7, sp, #0
 801d534:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801d536:	2300      	movs	r3, #0
}
 801d538:	4618      	mov	r0, r3
 801d53a:	370c      	adds	r7, #12
 801d53c:	46bd      	mov	sp, r7
 801d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d542:	4770      	bx	lr

0801d544 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801d544:	b580      	push	{r7, lr}
 801d546:	b084      	sub	sp, #16
 801d548:	af00      	add	r7, sp, #0
 801d54a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801d54c:	2300      	movs	r3, #0
 801d54e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	2201      	movs	r2, #1
 801d554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d55e:	2b00      	cmp	r3, #0
 801d560:	d00e      	beq.n	801d580 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d568:	685b      	ldr	r3, [r3, #4]
 801d56a:	687a      	ldr	r2, [r7, #4]
 801d56c:	6852      	ldr	r2, [r2, #4]
 801d56e:	b2d2      	uxtb	r2, r2
 801d570:	4611      	mov	r1, r2
 801d572:	6878      	ldr	r0, [r7, #4]
 801d574:	4798      	blx	r3
 801d576:	4603      	mov	r3, r0
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d001      	beq.n	801d580 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801d57c:	2303      	movs	r3, #3
 801d57e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801d580:	7bfb      	ldrb	r3, [r7, #15]
}
 801d582:	4618      	mov	r0, r3
 801d584:	3710      	adds	r7, #16
 801d586:	46bd      	mov	sp, r7
 801d588:	bd80      	pop	{r7, pc}

0801d58a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801d58a:	b480      	push	{r7}
 801d58c:	b083      	sub	sp, #12
 801d58e:	af00      	add	r7, sp, #0
 801d590:	6078      	str	r0, [r7, #4]
 801d592:	460b      	mov	r3, r1
 801d594:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801d596:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801d598:	4618      	mov	r0, r3
 801d59a:	370c      	adds	r7, #12
 801d59c:	46bd      	mov	sp, r7
 801d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5a2:	4770      	bx	lr

0801d5a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801d5a4:	b480      	push	{r7}
 801d5a6:	b083      	sub	sp, #12
 801d5a8:	af00      	add	r7, sp, #0
 801d5aa:	6078      	str	r0, [r7, #4]
 801d5ac:	460b      	mov	r3, r1
 801d5ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801d5b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801d5b2:	4618      	mov	r0, r3
 801d5b4:	370c      	adds	r7, #12
 801d5b6:	46bd      	mov	sp, r7
 801d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5bc:	4770      	bx	lr

0801d5be <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801d5be:	b580      	push	{r7, lr}
 801d5c0:	b086      	sub	sp, #24
 801d5c2:	af00      	add	r7, sp, #0
 801d5c4:	6078      	str	r0, [r7, #4]
 801d5c6:	460b      	mov	r3, r1
 801d5c8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801d5ce:	687b      	ldr	r3, [r7, #4]
 801d5d0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801d5d2:	2300      	movs	r3, #0
 801d5d4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801d5d6:	68fb      	ldr	r3, [r7, #12]
 801d5d8:	885b      	ldrh	r3, [r3, #2]
 801d5da:	b29a      	uxth	r2, r3
 801d5dc:	68fb      	ldr	r3, [r7, #12]
 801d5de:	781b      	ldrb	r3, [r3, #0]
 801d5e0:	b29b      	uxth	r3, r3
 801d5e2:	429a      	cmp	r2, r3
 801d5e4:	d920      	bls.n	801d628 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801d5e6:	68fb      	ldr	r3, [r7, #12]
 801d5e8:	781b      	ldrb	r3, [r3, #0]
 801d5ea:	b29b      	uxth	r3, r3
 801d5ec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801d5ee:	e013      	b.n	801d618 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801d5f0:	f107 030a 	add.w	r3, r7, #10
 801d5f4:	4619      	mov	r1, r3
 801d5f6:	6978      	ldr	r0, [r7, #20]
 801d5f8:	f000 f81b 	bl	801d632 <USBD_GetNextDesc>
 801d5fc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801d5fe:	697b      	ldr	r3, [r7, #20]
 801d600:	785b      	ldrb	r3, [r3, #1]
 801d602:	2b05      	cmp	r3, #5
 801d604:	d108      	bne.n	801d618 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801d606:	697b      	ldr	r3, [r7, #20]
 801d608:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801d60a:	693b      	ldr	r3, [r7, #16]
 801d60c:	789b      	ldrb	r3, [r3, #2]
 801d60e:	78fa      	ldrb	r2, [r7, #3]
 801d610:	429a      	cmp	r2, r3
 801d612:	d008      	beq.n	801d626 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801d614:	2300      	movs	r3, #0
 801d616:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801d618:	68fb      	ldr	r3, [r7, #12]
 801d61a:	885b      	ldrh	r3, [r3, #2]
 801d61c:	b29a      	uxth	r2, r3
 801d61e:	897b      	ldrh	r3, [r7, #10]
 801d620:	429a      	cmp	r2, r3
 801d622:	d8e5      	bhi.n	801d5f0 <USBD_GetEpDesc+0x32>
 801d624:	e000      	b.n	801d628 <USBD_GetEpDesc+0x6a>
          break;
 801d626:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801d628:	693b      	ldr	r3, [r7, #16]
}
 801d62a:	4618      	mov	r0, r3
 801d62c:	3718      	adds	r7, #24
 801d62e:	46bd      	mov	sp, r7
 801d630:	bd80      	pop	{r7, pc}

0801d632 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801d632:	b480      	push	{r7}
 801d634:	b085      	sub	sp, #20
 801d636:	af00      	add	r7, sp, #0
 801d638:	6078      	str	r0, [r7, #4]
 801d63a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801d63c:	687b      	ldr	r3, [r7, #4]
 801d63e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801d640:	683b      	ldr	r3, [r7, #0]
 801d642:	881a      	ldrh	r2, [r3, #0]
 801d644:	68fb      	ldr	r3, [r7, #12]
 801d646:	781b      	ldrb	r3, [r3, #0]
 801d648:	b29b      	uxth	r3, r3
 801d64a:	4413      	add	r3, r2
 801d64c:	b29a      	uxth	r2, r3
 801d64e:	683b      	ldr	r3, [r7, #0]
 801d650:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801d652:	68fb      	ldr	r3, [r7, #12]
 801d654:	781b      	ldrb	r3, [r3, #0]
 801d656:	461a      	mov	r2, r3
 801d658:	687b      	ldr	r3, [r7, #4]
 801d65a:	4413      	add	r3, r2
 801d65c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801d65e:	68fb      	ldr	r3, [r7, #12]
}
 801d660:	4618      	mov	r0, r3
 801d662:	3714      	adds	r7, #20
 801d664:	46bd      	mov	sp, r7
 801d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d66a:	4770      	bx	lr

0801d66c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801d66c:	b480      	push	{r7}
 801d66e:	b087      	sub	sp, #28
 801d670:	af00      	add	r7, sp, #0
 801d672:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801d678:	697b      	ldr	r3, [r7, #20]
 801d67a:	781b      	ldrb	r3, [r3, #0]
 801d67c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801d67e:	697b      	ldr	r3, [r7, #20]
 801d680:	3301      	adds	r3, #1
 801d682:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801d684:	697b      	ldr	r3, [r7, #20]
 801d686:	781b      	ldrb	r3, [r3, #0]
 801d688:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801d68a:	8a3b      	ldrh	r3, [r7, #16]
 801d68c:	021b      	lsls	r3, r3, #8
 801d68e:	b21a      	sxth	r2, r3
 801d690:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d694:	4313      	orrs	r3, r2
 801d696:	b21b      	sxth	r3, r3
 801d698:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801d69a:	89fb      	ldrh	r3, [r7, #14]
}
 801d69c:	4618      	mov	r0, r3
 801d69e:	371c      	adds	r7, #28
 801d6a0:	46bd      	mov	sp, r7
 801d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6a6:	4770      	bx	lr

0801d6a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d6a8:	b580      	push	{r7, lr}
 801d6aa:	b084      	sub	sp, #16
 801d6ac:	af00      	add	r7, sp, #0
 801d6ae:	6078      	str	r0, [r7, #4]
 801d6b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801d6b2:	2300      	movs	r3, #0
 801d6b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801d6b6:	683b      	ldr	r3, [r7, #0]
 801d6b8:	781b      	ldrb	r3, [r3, #0]
 801d6ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d6be:	2b40      	cmp	r3, #64	; 0x40
 801d6c0:	d005      	beq.n	801d6ce <USBD_StdDevReq+0x26>
 801d6c2:	2b40      	cmp	r3, #64	; 0x40
 801d6c4:	d857      	bhi.n	801d776 <USBD_StdDevReq+0xce>
 801d6c6:	2b00      	cmp	r3, #0
 801d6c8:	d00f      	beq.n	801d6ea <USBD_StdDevReq+0x42>
 801d6ca:	2b20      	cmp	r3, #32
 801d6cc:	d153      	bne.n	801d776 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801d6ce:	687b      	ldr	r3, [r7, #4]
 801d6d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801d6d4:	687b      	ldr	r3, [r7, #4]
 801d6d6:	32ae      	adds	r2, #174	; 0xae
 801d6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d6dc:	689b      	ldr	r3, [r3, #8]
 801d6de:	6839      	ldr	r1, [r7, #0]
 801d6e0:	6878      	ldr	r0, [r7, #4]
 801d6e2:	4798      	blx	r3
 801d6e4:	4603      	mov	r3, r0
 801d6e6:	73fb      	strb	r3, [r7, #15]
      break;
 801d6e8:	e04a      	b.n	801d780 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801d6ea:	683b      	ldr	r3, [r7, #0]
 801d6ec:	785b      	ldrb	r3, [r3, #1]
 801d6ee:	2b09      	cmp	r3, #9
 801d6f0:	d83b      	bhi.n	801d76a <USBD_StdDevReq+0xc2>
 801d6f2:	a201      	add	r2, pc, #4	; (adr r2, 801d6f8 <USBD_StdDevReq+0x50>)
 801d6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d6f8:	0801d74d 	.word	0x0801d74d
 801d6fc:	0801d761 	.word	0x0801d761
 801d700:	0801d76b 	.word	0x0801d76b
 801d704:	0801d757 	.word	0x0801d757
 801d708:	0801d76b 	.word	0x0801d76b
 801d70c:	0801d72b 	.word	0x0801d72b
 801d710:	0801d721 	.word	0x0801d721
 801d714:	0801d76b 	.word	0x0801d76b
 801d718:	0801d743 	.word	0x0801d743
 801d71c:	0801d735 	.word	0x0801d735
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801d720:	6839      	ldr	r1, [r7, #0]
 801d722:	6878      	ldr	r0, [r7, #4]
 801d724:	f000 fa3c 	bl	801dba0 <USBD_GetDescriptor>
          break;
 801d728:	e024      	b.n	801d774 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801d72a:	6839      	ldr	r1, [r7, #0]
 801d72c:	6878      	ldr	r0, [r7, #4]
 801d72e:	f000 fba1 	bl	801de74 <USBD_SetAddress>
          break;
 801d732:	e01f      	b.n	801d774 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801d734:	6839      	ldr	r1, [r7, #0]
 801d736:	6878      	ldr	r0, [r7, #4]
 801d738:	f000 fbe0 	bl	801defc <USBD_SetConfig>
 801d73c:	4603      	mov	r3, r0
 801d73e:	73fb      	strb	r3, [r7, #15]
          break;
 801d740:	e018      	b.n	801d774 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801d742:	6839      	ldr	r1, [r7, #0]
 801d744:	6878      	ldr	r0, [r7, #4]
 801d746:	f000 fc83 	bl	801e050 <USBD_GetConfig>
          break;
 801d74a:	e013      	b.n	801d774 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801d74c:	6839      	ldr	r1, [r7, #0]
 801d74e:	6878      	ldr	r0, [r7, #4]
 801d750:	f000 fcb4 	bl	801e0bc <USBD_GetStatus>
          break;
 801d754:	e00e      	b.n	801d774 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801d756:	6839      	ldr	r1, [r7, #0]
 801d758:	6878      	ldr	r0, [r7, #4]
 801d75a:	f000 fce3 	bl	801e124 <USBD_SetFeature>
          break;
 801d75e:	e009      	b.n	801d774 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801d760:	6839      	ldr	r1, [r7, #0]
 801d762:	6878      	ldr	r0, [r7, #4]
 801d764:	f000 fd07 	bl	801e176 <USBD_ClrFeature>
          break;
 801d768:	e004      	b.n	801d774 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801d76a:	6839      	ldr	r1, [r7, #0]
 801d76c:	6878      	ldr	r0, [r7, #4]
 801d76e:	f000 fd5e 	bl	801e22e <USBD_CtlError>
          break;
 801d772:	bf00      	nop
      }
      break;
 801d774:	e004      	b.n	801d780 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801d776:	6839      	ldr	r1, [r7, #0]
 801d778:	6878      	ldr	r0, [r7, #4]
 801d77a:	f000 fd58 	bl	801e22e <USBD_CtlError>
      break;
 801d77e:	bf00      	nop
  }

  return ret;
 801d780:	7bfb      	ldrb	r3, [r7, #15]
}
 801d782:	4618      	mov	r0, r3
 801d784:	3710      	adds	r7, #16
 801d786:	46bd      	mov	sp, r7
 801d788:	bd80      	pop	{r7, pc}
 801d78a:	bf00      	nop

0801d78c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d78c:	b580      	push	{r7, lr}
 801d78e:	b084      	sub	sp, #16
 801d790:	af00      	add	r7, sp, #0
 801d792:	6078      	str	r0, [r7, #4]
 801d794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801d796:	2300      	movs	r3, #0
 801d798:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801d79a:	683b      	ldr	r3, [r7, #0]
 801d79c:	781b      	ldrb	r3, [r3, #0]
 801d79e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d7a2:	2b40      	cmp	r3, #64	; 0x40
 801d7a4:	d005      	beq.n	801d7b2 <USBD_StdItfReq+0x26>
 801d7a6:	2b40      	cmp	r3, #64	; 0x40
 801d7a8:	d852      	bhi.n	801d850 <USBD_StdItfReq+0xc4>
 801d7aa:	2b00      	cmp	r3, #0
 801d7ac:	d001      	beq.n	801d7b2 <USBD_StdItfReq+0x26>
 801d7ae:	2b20      	cmp	r3, #32
 801d7b0:	d14e      	bne.n	801d850 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801d7b2:	687b      	ldr	r3, [r7, #4]
 801d7b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d7b8:	b2db      	uxtb	r3, r3
 801d7ba:	3b01      	subs	r3, #1
 801d7bc:	2b02      	cmp	r3, #2
 801d7be:	d840      	bhi.n	801d842 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801d7c0:	683b      	ldr	r3, [r7, #0]
 801d7c2:	889b      	ldrh	r3, [r3, #4]
 801d7c4:	b2db      	uxtb	r3, r3
 801d7c6:	2b01      	cmp	r3, #1
 801d7c8:	d836      	bhi.n	801d838 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801d7ca:	683b      	ldr	r3, [r7, #0]
 801d7cc:	889b      	ldrh	r3, [r3, #4]
 801d7ce:	b2db      	uxtb	r3, r3
 801d7d0:	4619      	mov	r1, r3
 801d7d2:	6878      	ldr	r0, [r7, #4]
 801d7d4:	f7ff fed9 	bl	801d58a <USBD_CoreFindIF>
 801d7d8:	4603      	mov	r3, r0
 801d7da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801d7dc:	7bbb      	ldrb	r3, [r7, #14]
 801d7de:	2bff      	cmp	r3, #255	; 0xff
 801d7e0:	d01d      	beq.n	801d81e <USBD_StdItfReq+0x92>
 801d7e2:	7bbb      	ldrb	r3, [r7, #14]
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	d11a      	bne.n	801d81e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801d7e8:	7bba      	ldrb	r2, [r7, #14]
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	32ae      	adds	r2, #174	; 0xae
 801d7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d7f2:	689b      	ldr	r3, [r3, #8]
 801d7f4:	2b00      	cmp	r3, #0
 801d7f6:	d00f      	beq.n	801d818 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801d7f8:	7bba      	ldrb	r2, [r7, #14]
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801d800:	7bba      	ldrb	r2, [r7, #14]
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	32ae      	adds	r2, #174	; 0xae
 801d806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d80a:	689b      	ldr	r3, [r3, #8]
 801d80c:	6839      	ldr	r1, [r7, #0]
 801d80e:	6878      	ldr	r0, [r7, #4]
 801d810:	4798      	blx	r3
 801d812:	4603      	mov	r3, r0
 801d814:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801d816:	e004      	b.n	801d822 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801d818:	2303      	movs	r3, #3
 801d81a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801d81c:	e001      	b.n	801d822 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801d81e:	2303      	movs	r3, #3
 801d820:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801d822:	683b      	ldr	r3, [r7, #0]
 801d824:	88db      	ldrh	r3, [r3, #6]
 801d826:	2b00      	cmp	r3, #0
 801d828:	d110      	bne.n	801d84c <USBD_StdItfReq+0xc0>
 801d82a:	7bfb      	ldrb	r3, [r7, #15]
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	d10d      	bne.n	801d84c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801d830:	6878      	ldr	r0, [r7, #4]
 801d832:	f000 fdc7 	bl	801e3c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801d836:	e009      	b.n	801d84c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801d838:	6839      	ldr	r1, [r7, #0]
 801d83a:	6878      	ldr	r0, [r7, #4]
 801d83c:	f000 fcf7 	bl	801e22e <USBD_CtlError>
          break;
 801d840:	e004      	b.n	801d84c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801d842:	6839      	ldr	r1, [r7, #0]
 801d844:	6878      	ldr	r0, [r7, #4]
 801d846:	f000 fcf2 	bl	801e22e <USBD_CtlError>
          break;
 801d84a:	e000      	b.n	801d84e <USBD_StdItfReq+0xc2>
          break;
 801d84c:	bf00      	nop
      }
      break;
 801d84e:	e004      	b.n	801d85a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801d850:	6839      	ldr	r1, [r7, #0]
 801d852:	6878      	ldr	r0, [r7, #4]
 801d854:	f000 fceb 	bl	801e22e <USBD_CtlError>
      break;
 801d858:	bf00      	nop
  }

  return ret;
 801d85a:	7bfb      	ldrb	r3, [r7, #15]
}
 801d85c:	4618      	mov	r0, r3
 801d85e:	3710      	adds	r7, #16
 801d860:	46bd      	mov	sp, r7
 801d862:	bd80      	pop	{r7, pc}

0801d864 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d864:	b580      	push	{r7, lr}
 801d866:	b084      	sub	sp, #16
 801d868:	af00      	add	r7, sp, #0
 801d86a:	6078      	str	r0, [r7, #4]
 801d86c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801d86e:	2300      	movs	r3, #0
 801d870:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801d872:	683b      	ldr	r3, [r7, #0]
 801d874:	889b      	ldrh	r3, [r3, #4]
 801d876:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801d878:	683b      	ldr	r3, [r7, #0]
 801d87a:	781b      	ldrb	r3, [r3, #0]
 801d87c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d880:	2b40      	cmp	r3, #64	; 0x40
 801d882:	d007      	beq.n	801d894 <USBD_StdEPReq+0x30>
 801d884:	2b40      	cmp	r3, #64	; 0x40
 801d886:	f200 817f 	bhi.w	801db88 <USBD_StdEPReq+0x324>
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d02a      	beq.n	801d8e4 <USBD_StdEPReq+0x80>
 801d88e:	2b20      	cmp	r3, #32
 801d890:	f040 817a 	bne.w	801db88 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801d894:	7bbb      	ldrb	r3, [r7, #14]
 801d896:	4619      	mov	r1, r3
 801d898:	6878      	ldr	r0, [r7, #4]
 801d89a:	f7ff fe83 	bl	801d5a4 <USBD_CoreFindEP>
 801d89e:	4603      	mov	r3, r0
 801d8a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801d8a2:	7b7b      	ldrb	r3, [r7, #13]
 801d8a4:	2bff      	cmp	r3, #255	; 0xff
 801d8a6:	f000 8174 	beq.w	801db92 <USBD_StdEPReq+0x32e>
 801d8aa:	7b7b      	ldrb	r3, [r7, #13]
 801d8ac:	2b00      	cmp	r3, #0
 801d8ae:	f040 8170 	bne.w	801db92 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801d8b2:	7b7a      	ldrb	r2, [r7, #13]
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801d8ba:	7b7a      	ldrb	r2, [r7, #13]
 801d8bc:	687b      	ldr	r3, [r7, #4]
 801d8be:	32ae      	adds	r2, #174	; 0xae
 801d8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d8c4:	689b      	ldr	r3, [r3, #8]
 801d8c6:	2b00      	cmp	r3, #0
 801d8c8:	f000 8163 	beq.w	801db92 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801d8cc:	7b7a      	ldrb	r2, [r7, #13]
 801d8ce:	687b      	ldr	r3, [r7, #4]
 801d8d0:	32ae      	adds	r2, #174	; 0xae
 801d8d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d8d6:	689b      	ldr	r3, [r3, #8]
 801d8d8:	6839      	ldr	r1, [r7, #0]
 801d8da:	6878      	ldr	r0, [r7, #4]
 801d8dc:	4798      	blx	r3
 801d8de:	4603      	mov	r3, r0
 801d8e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801d8e2:	e156      	b.n	801db92 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801d8e4:	683b      	ldr	r3, [r7, #0]
 801d8e6:	785b      	ldrb	r3, [r3, #1]
 801d8e8:	2b03      	cmp	r3, #3
 801d8ea:	d008      	beq.n	801d8fe <USBD_StdEPReq+0x9a>
 801d8ec:	2b03      	cmp	r3, #3
 801d8ee:	f300 8145 	bgt.w	801db7c <USBD_StdEPReq+0x318>
 801d8f2:	2b00      	cmp	r3, #0
 801d8f4:	f000 809b 	beq.w	801da2e <USBD_StdEPReq+0x1ca>
 801d8f8:	2b01      	cmp	r3, #1
 801d8fa:	d03c      	beq.n	801d976 <USBD_StdEPReq+0x112>
 801d8fc:	e13e      	b.n	801db7c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801d8fe:	687b      	ldr	r3, [r7, #4]
 801d900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d904:	b2db      	uxtb	r3, r3
 801d906:	2b02      	cmp	r3, #2
 801d908:	d002      	beq.n	801d910 <USBD_StdEPReq+0xac>
 801d90a:	2b03      	cmp	r3, #3
 801d90c:	d016      	beq.n	801d93c <USBD_StdEPReq+0xd8>
 801d90e:	e02c      	b.n	801d96a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801d910:	7bbb      	ldrb	r3, [r7, #14]
 801d912:	2b00      	cmp	r3, #0
 801d914:	d00d      	beq.n	801d932 <USBD_StdEPReq+0xce>
 801d916:	7bbb      	ldrb	r3, [r7, #14]
 801d918:	2b80      	cmp	r3, #128	; 0x80
 801d91a:	d00a      	beq.n	801d932 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801d91c:	7bbb      	ldrb	r3, [r7, #14]
 801d91e:	4619      	mov	r1, r3
 801d920:	6878      	ldr	r0, [r7, #4]
 801d922:	f004 fd13 	bl	802234c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801d926:	2180      	movs	r1, #128	; 0x80
 801d928:	6878      	ldr	r0, [r7, #4]
 801d92a:	f004 fd0f 	bl	802234c <USBD_LL_StallEP>
 801d92e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801d930:	e020      	b.n	801d974 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801d932:	6839      	ldr	r1, [r7, #0]
 801d934:	6878      	ldr	r0, [r7, #4]
 801d936:	f000 fc7a 	bl	801e22e <USBD_CtlError>
              break;
 801d93a:	e01b      	b.n	801d974 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801d93c:	683b      	ldr	r3, [r7, #0]
 801d93e:	885b      	ldrh	r3, [r3, #2]
 801d940:	2b00      	cmp	r3, #0
 801d942:	d10e      	bne.n	801d962 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801d944:	7bbb      	ldrb	r3, [r7, #14]
 801d946:	2b00      	cmp	r3, #0
 801d948:	d00b      	beq.n	801d962 <USBD_StdEPReq+0xfe>
 801d94a:	7bbb      	ldrb	r3, [r7, #14]
 801d94c:	2b80      	cmp	r3, #128	; 0x80
 801d94e:	d008      	beq.n	801d962 <USBD_StdEPReq+0xfe>
 801d950:	683b      	ldr	r3, [r7, #0]
 801d952:	88db      	ldrh	r3, [r3, #6]
 801d954:	2b00      	cmp	r3, #0
 801d956:	d104      	bne.n	801d962 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801d958:	7bbb      	ldrb	r3, [r7, #14]
 801d95a:	4619      	mov	r1, r3
 801d95c:	6878      	ldr	r0, [r7, #4]
 801d95e:	f004 fcf5 	bl	802234c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801d962:	6878      	ldr	r0, [r7, #4]
 801d964:	f000 fd2e 	bl	801e3c4 <USBD_CtlSendStatus>

              break;
 801d968:	e004      	b.n	801d974 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801d96a:	6839      	ldr	r1, [r7, #0]
 801d96c:	6878      	ldr	r0, [r7, #4]
 801d96e:	f000 fc5e 	bl	801e22e <USBD_CtlError>
              break;
 801d972:	bf00      	nop
          }
          break;
 801d974:	e107      	b.n	801db86 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801d976:	687b      	ldr	r3, [r7, #4]
 801d978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d97c:	b2db      	uxtb	r3, r3
 801d97e:	2b02      	cmp	r3, #2
 801d980:	d002      	beq.n	801d988 <USBD_StdEPReq+0x124>
 801d982:	2b03      	cmp	r3, #3
 801d984:	d016      	beq.n	801d9b4 <USBD_StdEPReq+0x150>
 801d986:	e04b      	b.n	801da20 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801d988:	7bbb      	ldrb	r3, [r7, #14]
 801d98a:	2b00      	cmp	r3, #0
 801d98c:	d00d      	beq.n	801d9aa <USBD_StdEPReq+0x146>
 801d98e:	7bbb      	ldrb	r3, [r7, #14]
 801d990:	2b80      	cmp	r3, #128	; 0x80
 801d992:	d00a      	beq.n	801d9aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801d994:	7bbb      	ldrb	r3, [r7, #14]
 801d996:	4619      	mov	r1, r3
 801d998:	6878      	ldr	r0, [r7, #4]
 801d99a:	f004 fcd7 	bl	802234c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801d99e:	2180      	movs	r1, #128	; 0x80
 801d9a0:	6878      	ldr	r0, [r7, #4]
 801d9a2:	f004 fcd3 	bl	802234c <USBD_LL_StallEP>
 801d9a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801d9a8:	e040      	b.n	801da2c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801d9aa:	6839      	ldr	r1, [r7, #0]
 801d9ac:	6878      	ldr	r0, [r7, #4]
 801d9ae:	f000 fc3e 	bl	801e22e <USBD_CtlError>
              break;
 801d9b2:	e03b      	b.n	801da2c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801d9b4:	683b      	ldr	r3, [r7, #0]
 801d9b6:	885b      	ldrh	r3, [r3, #2]
 801d9b8:	2b00      	cmp	r3, #0
 801d9ba:	d136      	bne.n	801da2a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801d9bc:	7bbb      	ldrb	r3, [r7, #14]
 801d9be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d9c2:	2b00      	cmp	r3, #0
 801d9c4:	d004      	beq.n	801d9d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801d9c6:	7bbb      	ldrb	r3, [r7, #14]
 801d9c8:	4619      	mov	r1, r3
 801d9ca:	6878      	ldr	r0, [r7, #4]
 801d9cc:	f004 fcdd 	bl	802238a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801d9d0:	6878      	ldr	r0, [r7, #4]
 801d9d2:	f000 fcf7 	bl	801e3c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801d9d6:	7bbb      	ldrb	r3, [r7, #14]
 801d9d8:	4619      	mov	r1, r3
 801d9da:	6878      	ldr	r0, [r7, #4]
 801d9dc:	f7ff fde2 	bl	801d5a4 <USBD_CoreFindEP>
 801d9e0:	4603      	mov	r3, r0
 801d9e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801d9e4:	7b7b      	ldrb	r3, [r7, #13]
 801d9e6:	2bff      	cmp	r3, #255	; 0xff
 801d9e8:	d01f      	beq.n	801da2a <USBD_StdEPReq+0x1c6>
 801d9ea:	7b7b      	ldrb	r3, [r7, #13]
 801d9ec:	2b00      	cmp	r3, #0
 801d9ee:	d11c      	bne.n	801da2a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801d9f0:	7b7a      	ldrb	r2, [r7, #13]
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801d9f8:	7b7a      	ldrb	r2, [r7, #13]
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	32ae      	adds	r2, #174	; 0xae
 801d9fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801da02:	689b      	ldr	r3, [r3, #8]
 801da04:	2b00      	cmp	r3, #0
 801da06:	d010      	beq.n	801da2a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801da08:	7b7a      	ldrb	r2, [r7, #13]
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	32ae      	adds	r2, #174	; 0xae
 801da0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801da12:	689b      	ldr	r3, [r3, #8]
 801da14:	6839      	ldr	r1, [r7, #0]
 801da16:	6878      	ldr	r0, [r7, #4]
 801da18:	4798      	blx	r3
 801da1a:	4603      	mov	r3, r0
 801da1c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801da1e:	e004      	b.n	801da2a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801da20:	6839      	ldr	r1, [r7, #0]
 801da22:	6878      	ldr	r0, [r7, #4]
 801da24:	f000 fc03 	bl	801e22e <USBD_CtlError>
              break;
 801da28:	e000      	b.n	801da2c <USBD_StdEPReq+0x1c8>
              break;
 801da2a:	bf00      	nop
          }
          break;
 801da2c:	e0ab      	b.n	801db86 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801da2e:	687b      	ldr	r3, [r7, #4]
 801da30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801da34:	b2db      	uxtb	r3, r3
 801da36:	2b02      	cmp	r3, #2
 801da38:	d002      	beq.n	801da40 <USBD_StdEPReq+0x1dc>
 801da3a:	2b03      	cmp	r3, #3
 801da3c:	d032      	beq.n	801daa4 <USBD_StdEPReq+0x240>
 801da3e:	e097      	b.n	801db70 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801da40:	7bbb      	ldrb	r3, [r7, #14]
 801da42:	2b00      	cmp	r3, #0
 801da44:	d007      	beq.n	801da56 <USBD_StdEPReq+0x1f2>
 801da46:	7bbb      	ldrb	r3, [r7, #14]
 801da48:	2b80      	cmp	r3, #128	; 0x80
 801da4a:	d004      	beq.n	801da56 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801da4c:	6839      	ldr	r1, [r7, #0]
 801da4e:	6878      	ldr	r0, [r7, #4]
 801da50:	f000 fbed 	bl	801e22e <USBD_CtlError>
                break;
 801da54:	e091      	b.n	801db7a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801da56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801da5a:	2b00      	cmp	r3, #0
 801da5c:	da0b      	bge.n	801da76 <USBD_StdEPReq+0x212>
 801da5e:	7bbb      	ldrb	r3, [r7, #14]
 801da60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801da64:	4613      	mov	r3, r2
 801da66:	009b      	lsls	r3, r3, #2
 801da68:	4413      	add	r3, r2
 801da6a:	009b      	lsls	r3, r3, #2
 801da6c:	3310      	adds	r3, #16
 801da6e:	687a      	ldr	r2, [r7, #4]
 801da70:	4413      	add	r3, r2
 801da72:	3304      	adds	r3, #4
 801da74:	e00b      	b.n	801da8e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801da76:	7bbb      	ldrb	r3, [r7, #14]
 801da78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801da7c:	4613      	mov	r3, r2
 801da7e:	009b      	lsls	r3, r3, #2
 801da80:	4413      	add	r3, r2
 801da82:	009b      	lsls	r3, r3, #2
 801da84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801da88:	687a      	ldr	r2, [r7, #4]
 801da8a:	4413      	add	r3, r2
 801da8c:	3304      	adds	r3, #4
 801da8e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801da90:	68bb      	ldr	r3, [r7, #8]
 801da92:	2200      	movs	r2, #0
 801da94:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801da96:	68bb      	ldr	r3, [r7, #8]
 801da98:	2202      	movs	r2, #2
 801da9a:	4619      	mov	r1, r3
 801da9c:	6878      	ldr	r0, [r7, #4]
 801da9e:	f000 fc37 	bl	801e310 <USBD_CtlSendData>
              break;
 801daa2:	e06a      	b.n	801db7a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801daa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801daa8:	2b00      	cmp	r3, #0
 801daaa:	da11      	bge.n	801dad0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801daac:	7bbb      	ldrb	r3, [r7, #14]
 801daae:	f003 020f 	and.w	r2, r3, #15
 801dab2:	6879      	ldr	r1, [r7, #4]
 801dab4:	4613      	mov	r3, r2
 801dab6:	009b      	lsls	r3, r3, #2
 801dab8:	4413      	add	r3, r2
 801daba:	009b      	lsls	r3, r3, #2
 801dabc:	440b      	add	r3, r1
 801dabe:	3324      	adds	r3, #36	; 0x24
 801dac0:	881b      	ldrh	r3, [r3, #0]
 801dac2:	2b00      	cmp	r3, #0
 801dac4:	d117      	bne.n	801daf6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801dac6:	6839      	ldr	r1, [r7, #0]
 801dac8:	6878      	ldr	r0, [r7, #4]
 801daca:	f000 fbb0 	bl	801e22e <USBD_CtlError>
                  break;
 801dace:	e054      	b.n	801db7a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801dad0:	7bbb      	ldrb	r3, [r7, #14]
 801dad2:	f003 020f 	and.w	r2, r3, #15
 801dad6:	6879      	ldr	r1, [r7, #4]
 801dad8:	4613      	mov	r3, r2
 801dada:	009b      	lsls	r3, r3, #2
 801dadc:	4413      	add	r3, r2
 801dade:	009b      	lsls	r3, r3, #2
 801dae0:	440b      	add	r3, r1
 801dae2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801dae6:	881b      	ldrh	r3, [r3, #0]
 801dae8:	2b00      	cmp	r3, #0
 801daea:	d104      	bne.n	801daf6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801daec:	6839      	ldr	r1, [r7, #0]
 801daee:	6878      	ldr	r0, [r7, #4]
 801daf0:	f000 fb9d 	bl	801e22e <USBD_CtlError>
                  break;
 801daf4:	e041      	b.n	801db7a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801daf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801dafa:	2b00      	cmp	r3, #0
 801dafc:	da0b      	bge.n	801db16 <USBD_StdEPReq+0x2b2>
 801dafe:	7bbb      	ldrb	r3, [r7, #14]
 801db00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801db04:	4613      	mov	r3, r2
 801db06:	009b      	lsls	r3, r3, #2
 801db08:	4413      	add	r3, r2
 801db0a:	009b      	lsls	r3, r3, #2
 801db0c:	3310      	adds	r3, #16
 801db0e:	687a      	ldr	r2, [r7, #4]
 801db10:	4413      	add	r3, r2
 801db12:	3304      	adds	r3, #4
 801db14:	e00b      	b.n	801db2e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801db16:	7bbb      	ldrb	r3, [r7, #14]
 801db18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801db1c:	4613      	mov	r3, r2
 801db1e:	009b      	lsls	r3, r3, #2
 801db20:	4413      	add	r3, r2
 801db22:	009b      	lsls	r3, r3, #2
 801db24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801db28:	687a      	ldr	r2, [r7, #4]
 801db2a:	4413      	add	r3, r2
 801db2c:	3304      	adds	r3, #4
 801db2e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801db30:	7bbb      	ldrb	r3, [r7, #14]
 801db32:	2b00      	cmp	r3, #0
 801db34:	d002      	beq.n	801db3c <USBD_StdEPReq+0x2d8>
 801db36:	7bbb      	ldrb	r3, [r7, #14]
 801db38:	2b80      	cmp	r3, #128	; 0x80
 801db3a:	d103      	bne.n	801db44 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801db3c:	68bb      	ldr	r3, [r7, #8]
 801db3e:	2200      	movs	r2, #0
 801db40:	601a      	str	r2, [r3, #0]
 801db42:	e00e      	b.n	801db62 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801db44:	7bbb      	ldrb	r3, [r7, #14]
 801db46:	4619      	mov	r1, r3
 801db48:	6878      	ldr	r0, [r7, #4]
 801db4a:	f004 fc3d 	bl	80223c8 <USBD_LL_IsStallEP>
 801db4e:	4603      	mov	r3, r0
 801db50:	2b00      	cmp	r3, #0
 801db52:	d003      	beq.n	801db5c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801db54:	68bb      	ldr	r3, [r7, #8]
 801db56:	2201      	movs	r2, #1
 801db58:	601a      	str	r2, [r3, #0]
 801db5a:	e002      	b.n	801db62 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801db5c:	68bb      	ldr	r3, [r7, #8]
 801db5e:	2200      	movs	r2, #0
 801db60:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801db62:	68bb      	ldr	r3, [r7, #8]
 801db64:	2202      	movs	r2, #2
 801db66:	4619      	mov	r1, r3
 801db68:	6878      	ldr	r0, [r7, #4]
 801db6a:	f000 fbd1 	bl	801e310 <USBD_CtlSendData>
              break;
 801db6e:	e004      	b.n	801db7a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801db70:	6839      	ldr	r1, [r7, #0]
 801db72:	6878      	ldr	r0, [r7, #4]
 801db74:	f000 fb5b 	bl	801e22e <USBD_CtlError>
              break;
 801db78:	bf00      	nop
          }
          break;
 801db7a:	e004      	b.n	801db86 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801db7c:	6839      	ldr	r1, [r7, #0]
 801db7e:	6878      	ldr	r0, [r7, #4]
 801db80:	f000 fb55 	bl	801e22e <USBD_CtlError>
          break;
 801db84:	bf00      	nop
      }
      break;
 801db86:	e005      	b.n	801db94 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801db88:	6839      	ldr	r1, [r7, #0]
 801db8a:	6878      	ldr	r0, [r7, #4]
 801db8c:	f000 fb4f 	bl	801e22e <USBD_CtlError>
      break;
 801db90:	e000      	b.n	801db94 <USBD_StdEPReq+0x330>
      break;
 801db92:	bf00      	nop
  }

  return ret;
 801db94:	7bfb      	ldrb	r3, [r7, #15]
}
 801db96:	4618      	mov	r0, r3
 801db98:	3710      	adds	r7, #16
 801db9a:	46bd      	mov	sp, r7
 801db9c:	bd80      	pop	{r7, pc}
	...

0801dba0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801dba0:	b580      	push	{r7, lr}
 801dba2:	b084      	sub	sp, #16
 801dba4:	af00      	add	r7, sp, #0
 801dba6:	6078      	str	r0, [r7, #4]
 801dba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801dbaa:	2300      	movs	r3, #0
 801dbac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801dbae:	2300      	movs	r3, #0
 801dbb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801dbb2:	2300      	movs	r3, #0
 801dbb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801dbb6:	683b      	ldr	r3, [r7, #0]
 801dbb8:	885b      	ldrh	r3, [r3, #2]
 801dbba:	0a1b      	lsrs	r3, r3, #8
 801dbbc:	b29b      	uxth	r3, r3
 801dbbe:	3b01      	subs	r3, #1
 801dbc0:	2b06      	cmp	r3, #6
 801dbc2:	f200 8128 	bhi.w	801de16 <USBD_GetDescriptor+0x276>
 801dbc6:	a201      	add	r2, pc, #4	; (adr r2, 801dbcc <USBD_GetDescriptor+0x2c>)
 801dbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dbcc:	0801dbe9 	.word	0x0801dbe9
 801dbd0:	0801dc01 	.word	0x0801dc01
 801dbd4:	0801dc41 	.word	0x0801dc41
 801dbd8:	0801de17 	.word	0x0801de17
 801dbdc:	0801de17 	.word	0x0801de17
 801dbe0:	0801ddb7 	.word	0x0801ddb7
 801dbe4:	0801dde3 	.word	0x0801dde3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801dbee:	681b      	ldr	r3, [r3, #0]
 801dbf0:	687a      	ldr	r2, [r7, #4]
 801dbf2:	7c12      	ldrb	r2, [r2, #16]
 801dbf4:	f107 0108 	add.w	r1, r7, #8
 801dbf8:	4610      	mov	r0, r2
 801dbfa:	4798      	blx	r3
 801dbfc:	60f8      	str	r0, [r7, #12]
      break;
 801dbfe:	e112      	b.n	801de26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	7c1b      	ldrb	r3, [r3, #16]
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	d10d      	bne.n	801dc24 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801dc0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc10:	f107 0208 	add.w	r2, r7, #8
 801dc14:	4610      	mov	r0, r2
 801dc16:	4798      	blx	r3
 801dc18:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801dc1a:	68fb      	ldr	r3, [r7, #12]
 801dc1c:	3301      	adds	r3, #1
 801dc1e:	2202      	movs	r2, #2
 801dc20:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801dc22:	e100      	b.n	801de26 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801dc24:	687b      	ldr	r3, [r7, #4]
 801dc26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801dc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc2c:	f107 0208 	add.w	r2, r7, #8
 801dc30:	4610      	mov	r0, r2
 801dc32:	4798      	blx	r3
 801dc34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801dc36:	68fb      	ldr	r3, [r7, #12]
 801dc38:	3301      	adds	r3, #1
 801dc3a:	2202      	movs	r2, #2
 801dc3c:	701a      	strb	r2, [r3, #0]
      break;
 801dc3e:	e0f2      	b.n	801de26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801dc40:	683b      	ldr	r3, [r7, #0]
 801dc42:	885b      	ldrh	r3, [r3, #2]
 801dc44:	b2db      	uxtb	r3, r3
 801dc46:	2b05      	cmp	r3, #5
 801dc48:	f200 80ac 	bhi.w	801dda4 <USBD_GetDescriptor+0x204>
 801dc4c:	a201      	add	r2, pc, #4	; (adr r2, 801dc54 <USBD_GetDescriptor+0xb4>)
 801dc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dc52:	bf00      	nop
 801dc54:	0801dc6d 	.word	0x0801dc6d
 801dc58:	0801dca1 	.word	0x0801dca1
 801dc5c:	0801dcd5 	.word	0x0801dcd5
 801dc60:	0801dd09 	.word	0x0801dd09
 801dc64:	0801dd3d 	.word	0x0801dd3d
 801dc68:	0801dd71 	.word	0x0801dd71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801dc6c:	687b      	ldr	r3, [r7, #4]
 801dc6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801dc72:	685b      	ldr	r3, [r3, #4]
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	d00b      	beq.n	801dc90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801dc78:	687b      	ldr	r3, [r7, #4]
 801dc7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801dc7e:	685b      	ldr	r3, [r3, #4]
 801dc80:	687a      	ldr	r2, [r7, #4]
 801dc82:	7c12      	ldrb	r2, [r2, #16]
 801dc84:	f107 0108 	add.w	r1, r7, #8
 801dc88:	4610      	mov	r0, r2
 801dc8a:	4798      	blx	r3
 801dc8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801dc8e:	e091      	b.n	801ddb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801dc90:	6839      	ldr	r1, [r7, #0]
 801dc92:	6878      	ldr	r0, [r7, #4]
 801dc94:	f000 facb 	bl	801e22e <USBD_CtlError>
            err++;
 801dc98:	7afb      	ldrb	r3, [r7, #11]
 801dc9a:	3301      	adds	r3, #1
 801dc9c:	72fb      	strb	r3, [r7, #11]
          break;
 801dc9e:	e089      	b.n	801ddb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801dca0:	687b      	ldr	r3, [r7, #4]
 801dca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801dca6:	689b      	ldr	r3, [r3, #8]
 801dca8:	2b00      	cmp	r3, #0
 801dcaa:	d00b      	beq.n	801dcc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801dcac:	687b      	ldr	r3, [r7, #4]
 801dcae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801dcb2:	689b      	ldr	r3, [r3, #8]
 801dcb4:	687a      	ldr	r2, [r7, #4]
 801dcb6:	7c12      	ldrb	r2, [r2, #16]
 801dcb8:	f107 0108 	add.w	r1, r7, #8
 801dcbc:	4610      	mov	r0, r2
 801dcbe:	4798      	blx	r3
 801dcc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801dcc2:	e077      	b.n	801ddb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801dcc4:	6839      	ldr	r1, [r7, #0]
 801dcc6:	6878      	ldr	r0, [r7, #4]
 801dcc8:	f000 fab1 	bl	801e22e <USBD_CtlError>
            err++;
 801dccc:	7afb      	ldrb	r3, [r7, #11]
 801dcce:	3301      	adds	r3, #1
 801dcd0:	72fb      	strb	r3, [r7, #11]
          break;
 801dcd2:	e06f      	b.n	801ddb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801dcda:	68db      	ldr	r3, [r3, #12]
 801dcdc:	2b00      	cmp	r3, #0
 801dcde:	d00b      	beq.n	801dcf8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801dce6:	68db      	ldr	r3, [r3, #12]
 801dce8:	687a      	ldr	r2, [r7, #4]
 801dcea:	7c12      	ldrb	r2, [r2, #16]
 801dcec:	f107 0108 	add.w	r1, r7, #8
 801dcf0:	4610      	mov	r0, r2
 801dcf2:	4798      	blx	r3
 801dcf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801dcf6:	e05d      	b.n	801ddb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801dcf8:	6839      	ldr	r1, [r7, #0]
 801dcfa:	6878      	ldr	r0, [r7, #4]
 801dcfc:	f000 fa97 	bl	801e22e <USBD_CtlError>
            err++;
 801dd00:	7afb      	ldrb	r3, [r7, #11]
 801dd02:	3301      	adds	r3, #1
 801dd04:	72fb      	strb	r3, [r7, #11]
          break;
 801dd06:	e055      	b.n	801ddb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801dd08:	687b      	ldr	r3, [r7, #4]
 801dd0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801dd0e:	691b      	ldr	r3, [r3, #16]
 801dd10:	2b00      	cmp	r3, #0
 801dd12:	d00b      	beq.n	801dd2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801dd14:	687b      	ldr	r3, [r7, #4]
 801dd16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801dd1a:	691b      	ldr	r3, [r3, #16]
 801dd1c:	687a      	ldr	r2, [r7, #4]
 801dd1e:	7c12      	ldrb	r2, [r2, #16]
 801dd20:	f107 0108 	add.w	r1, r7, #8
 801dd24:	4610      	mov	r0, r2
 801dd26:	4798      	blx	r3
 801dd28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801dd2a:	e043      	b.n	801ddb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801dd2c:	6839      	ldr	r1, [r7, #0]
 801dd2e:	6878      	ldr	r0, [r7, #4]
 801dd30:	f000 fa7d 	bl	801e22e <USBD_CtlError>
            err++;
 801dd34:	7afb      	ldrb	r3, [r7, #11]
 801dd36:	3301      	adds	r3, #1
 801dd38:	72fb      	strb	r3, [r7, #11]
          break;
 801dd3a:	e03b      	b.n	801ddb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801dd42:	695b      	ldr	r3, [r3, #20]
 801dd44:	2b00      	cmp	r3, #0
 801dd46:	d00b      	beq.n	801dd60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801dd48:	687b      	ldr	r3, [r7, #4]
 801dd4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801dd4e:	695b      	ldr	r3, [r3, #20]
 801dd50:	687a      	ldr	r2, [r7, #4]
 801dd52:	7c12      	ldrb	r2, [r2, #16]
 801dd54:	f107 0108 	add.w	r1, r7, #8
 801dd58:	4610      	mov	r0, r2
 801dd5a:	4798      	blx	r3
 801dd5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801dd5e:	e029      	b.n	801ddb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801dd60:	6839      	ldr	r1, [r7, #0]
 801dd62:	6878      	ldr	r0, [r7, #4]
 801dd64:	f000 fa63 	bl	801e22e <USBD_CtlError>
            err++;
 801dd68:	7afb      	ldrb	r3, [r7, #11]
 801dd6a:	3301      	adds	r3, #1
 801dd6c:	72fb      	strb	r3, [r7, #11]
          break;
 801dd6e:	e021      	b.n	801ddb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801dd70:	687b      	ldr	r3, [r7, #4]
 801dd72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801dd76:	699b      	ldr	r3, [r3, #24]
 801dd78:	2b00      	cmp	r3, #0
 801dd7a:	d00b      	beq.n	801dd94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801dd7c:	687b      	ldr	r3, [r7, #4]
 801dd7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801dd82:	699b      	ldr	r3, [r3, #24]
 801dd84:	687a      	ldr	r2, [r7, #4]
 801dd86:	7c12      	ldrb	r2, [r2, #16]
 801dd88:	f107 0108 	add.w	r1, r7, #8
 801dd8c:	4610      	mov	r0, r2
 801dd8e:	4798      	blx	r3
 801dd90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801dd92:	e00f      	b.n	801ddb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801dd94:	6839      	ldr	r1, [r7, #0]
 801dd96:	6878      	ldr	r0, [r7, #4]
 801dd98:	f000 fa49 	bl	801e22e <USBD_CtlError>
            err++;
 801dd9c:	7afb      	ldrb	r3, [r7, #11]
 801dd9e:	3301      	adds	r3, #1
 801dda0:	72fb      	strb	r3, [r7, #11]
          break;
 801dda2:	e007      	b.n	801ddb4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801dda4:	6839      	ldr	r1, [r7, #0]
 801dda6:	6878      	ldr	r0, [r7, #4]
 801dda8:	f000 fa41 	bl	801e22e <USBD_CtlError>
          err++;
 801ddac:	7afb      	ldrb	r3, [r7, #11]
 801ddae:	3301      	adds	r3, #1
 801ddb0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801ddb2:	bf00      	nop
      }
      break;
 801ddb4:	e037      	b.n	801de26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	7c1b      	ldrb	r3, [r3, #16]
 801ddba:	2b00      	cmp	r3, #0
 801ddbc:	d109      	bne.n	801ddd2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801ddbe:	687b      	ldr	r3, [r7, #4]
 801ddc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ddc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ddc6:	f107 0208 	add.w	r2, r7, #8
 801ddca:	4610      	mov	r0, r2
 801ddcc:	4798      	blx	r3
 801ddce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ddd0:	e029      	b.n	801de26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801ddd2:	6839      	ldr	r1, [r7, #0]
 801ddd4:	6878      	ldr	r0, [r7, #4]
 801ddd6:	f000 fa2a 	bl	801e22e <USBD_CtlError>
        err++;
 801ddda:	7afb      	ldrb	r3, [r7, #11]
 801dddc:	3301      	adds	r3, #1
 801ddde:	72fb      	strb	r3, [r7, #11]
      break;
 801dde0:	e021      	b.n	801de26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	7c1b      	ldrb	r3, [r3, #16]
 801dde6:	2b00      	cmp	r3, #0
 801dde8:	d10d      	bne.n	801de06 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801ddea:	687b      	ldr	r3, [r7, #4]
 801ddec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ddf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ddf2:	f107 0208 	add.w	r2, r7, #8
 801ddf6:	4610      	mov	r0, r2
 801ddf8:	4798      	blx	r3
 801ddfa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801ddfc:	68fb      	ldr	r3, [r7, #12]
 801ddfe:	3301      	adds	r3, #1
 801de00:	2207      	movs	r2, #7
 801de02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801de04:	e00f      	b.n	801de26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801de06:	6839      	ldr	r1, [r7, #0]
 801de08:	6878      	ldr	r0, [r7, #4]
 801de0a:	f000 fa10 	bl	801e22e <USBD_CtlError>
        err++;
 801de0e:	7afb      	ldrb	r3, [r7, #11]
 801de10:	3301      	adds	r3, #1
 801de12:	72fb      	strb	r3, [r7, #11]
      break;
 801de14:	e007      	b.n	801de26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801de16:	6839      	ldr	r1, [r7, #0]
 801de18:	6878      	ldr	r0, [r7, #4]
 801de1a:	f000 fa08 	bl	801e22e <USBD_CtlError>
      err++;
 801de1e:	7afb      	ldrb	r3, [r7, #11]
 801de20:	3301      	adds	r3, #1
 801de22:	72fb      	strb	r3, [r7, #11]
      break;
 801de24:	bf00      	nop
  }

  if (err != 0U)
 801de26:	7afb      	ldrb	r3, [r7, #11]
 801de28:	2b00      	cmp	r3, #0
 801de2a:	d11e      	bne.n	801de6a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801de2c:	683b      	ldr	r3, [r7, #0]
 801de2e:	88db      	ldrh	r3, [r3, #6]
 801de30:	2b00      	cmp	r3, #0
 801de32:	d016      	beq.n	801de62 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801de34:	893b      	ldrh	r3, [r7, #8]
 801de36:	2b00      	cmp	r3, #0
 801de38:	d00e      	beq.n	801de58 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801de3a:	683b      	ldr	r3, [r7, #0]
 801de3c:	88da      	ldrh	r2, [r3, #6]
 801de3e:	893b      	ldrh	r3, [r7, #8]
 801de40:	4293      	cmp	r3, r2
 801de42:	bf28      	it	cs
 801de44:	4613      	movcs	r3, r2
 801de46:	b29b      	uxth	r3, r3
 801de48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801de4a:	893b      	ldrh	r3, [r7, #8]
 801de4c:	461a      	mov	r2, r3
 801de4e:	68f9      	ldr	r1, [r7, #12]
 801de50:	6878      	ldr	r0, [r7, #4]
 801de52:	f000 fa5d 	bl	801e310 <USBD_CtlSendData>
 801de56:	e009      	b.n	801de6c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801de58:	6839      	ldr	r1, [r7, #0]
 801de5a:	6878      	ldr	r0, [r7, #4]
 801de5c:	f000 f9e7 	bl	801e22e <USBD_CtlError>
 801de60:	e004      	b.n	801de6c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801de62:	6878      	ldr	r0, [r7, #4]
 801de64:	f000 faae 	bl	801e3c4 <USBD_CtlSendStatus>
 801de68:	e000      	b.n	801de6c <USBD_GetDescriptor+0x2cc>
    return;
 801de6a:	bf00      	nop
  }
}
 801de6c:	3710      	adds	r7, #16
 801de6e:	46bd      	mov	sp, r7
 801de70:	bd80      	pop	{r7, pc}
 801de72:	bf00      	nop

0801de74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801de74:	b580      	push	{r7, lr}
 801de76:	b084      	sub	sp, #16
 801de78:	af00      	add	r7, sp, #0
 801de7a:	6078      	str	r0, [r7, #4]
 801de7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801de7e:	683b      	ldr	r3, [r7, #0]
 801de80:	889b      	ldrh	r3, [r3, #4]
 801de82:	2b00      	cmp	r3, #0
 801de84:	d131      	bne.n	801deea <USBD_SetAddress+0x76>
 801de86:	683b      	ldr	r3, [r7, #0]
 801de88:	88db      	ldrh	r3, [r3, #6]
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	d12d      	bne.n	801deea <USBD_SetAddress+0x76>
 801de8e:	683b      	ldr	r3, [r7, #0]
 801de90:	885b      	ldrh	r3, [r3, #2]
 801de92:	2b7f      	cmp	r3, #127	; 0x7f
 801de94:	d829      	bhi.n	801deea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801de96:	683b      	ldr	r3, [r7, #0]
 801de98:	885b      	ldrh	r3, [r3, #2]
 801de9a:	b2db      	uxtb	r3, r3
 801de9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dea0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801dea2:	687b      	ldr	r3, [r7, #4]
 801dea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801dea8:	b2db      	uxtb	r3, r3
 801deaa:	2b03      	cmp	r3, #3
 801deac:	d104      	bne.n	801deb8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801deae:	6839      	ldr	r1, [r7, #0]
 801deb0:	6878      	ldr	r0, [r7, #4]
 801deb2:	f000 f9bc 	bl	801e22e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801deb6:	e01d      	b.n	801def4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801deb8:	687b      	ldr	r3, [r7, #4]
 801deba:	7bfa      	ldrb	r2, [r7, #15]
 801debc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801dec0:	7bfb      	ldrb	r3, [r7, #15]
 801dec2:	4619      	mov	r1, r3
 801dec4:	6878      	ldr	r0, [r7, #4]
 801dec6:	f004 faab 	bl	8022420 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801deca:	6878      	ldr	r0, [r7, #4]
 801decc:	f000 fa7a 	bl	801e3c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801ded0:	7bfb      	ldrb	r3, [r7, #15]
 801ded2:	2b00      	cmp	r3, #0
 801ded4:	d004      	beq.n	801dee0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801ded6:	687b      	ldr	r3, [r7, #4]
 801ded8:	2202      	movs	r2, #2
 801deda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801dede:	e009      	b.n	801def4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801dee0:	687b      	ldr	r3, [r7, #4]
 801dee2:	2201      	movs	r2, #1
 801dee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801dee8:	e004      	b.n	801def4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801deea:	6839      	ldr	r1, [r7, #0]
 801deec:	6878      	ldr	r0, [r7, #4]
 801deee:	f000 f99e 	bl	801e22e <USBD_CtlError>
  }
}
 801def2:	bf00      	nop
 801def4:	bf00      	nop
 801def6:	3710      	adds	r7, #16
 801def8:	46bd      	mov	sp, r7
 801defa:	bd80      	pop	{r7, pc}

0801defc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801defc:	b580      	push	{r7, lr}
 801defe:	b084      	sub	sp, #16
 801df00:	af00      	add	r7, sp, #0
 801df02:	6078      	str	r0, [r7, #4]
 801df04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801df06:	2300      	movs	r3, #0
 801df08:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801df0a:	683b      	ldr	r3, [r7, #0]
 801df0c:	885b      	ldrh	r3, [r3, #2]
 801df0e:	b2da      	uxtb	r2, r3
 801df10:	4b4e      	ldr	r3, [pc, #312]	; (801e04c <USBD_SetConfig+0x150>)
 801df12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801df14:	4b4d      	ldr	r3, [pc, #308]	; (801e04c <USBD_SetConfig+0x150>)
 801df16:	781b      	ldrb	r3, [r3, #0]
 801df18:	2b01      	cmp	r3, #1
 801df1a:	d905      	bls.n	801df28 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801df1c:	6839      	ldr	r1, [r7, #0]
 801df1e:	6878      	ldr	r0, [r7, #4]
 801df20:	f000 f985 	bl	801e22e <USBD_CtlError>
    return USBD_FAIL;
 801df24:	2303      	movs	r3, #3
 801df26:	e08c      	b.n	801e042 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801df2e:	b2db      	uxtb	r3, r3
 801df30:	2b02      	cmp	r3, #2
 801df32:	d002      	beq.n	801df3a <USBD_SetConfig+0x3e>
 801df34:	2b03      	cmp	r3, #3
 801df36:	d029      	beq.n	801df8c <USBD_SetConfig+0x90>
 801df38:	e075      	b.n	801e026 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801df3a:	4b44      	ldr	r3, [pc, #272]	; (801e04c <USBD_SetConfig+0x150>)
 801df3c:	781b      	ldrb	r3, [r3, #0]
 801df3e:	2b00      	cmp	r3, #0
 801df40:	d020      	beq.n	801df84 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801df42:	4b42      	ldr	r3, [pc, #264]	; (801e04c <USBD_SetConfig+0x150>)
 801df44:	781b      	ldrb	r3, [r3, #0]
 801df46:	461a      	mov	r2, r3
 801df48:	687b      	ldr	r3, [r7, #4]
 801df4a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801df4c:	4b3f      	ldr	r3, [pc, #252]	; (801e04c <USBD_SetConfig+0x150>)
 801df4e:	781b      	ldrb	r3, [r3, #0]
 801df50:	4619      	mov	r1, r3
 801df52:	6878      	ldr	r0, [r7, #4]
 801df54:	f7fe ffe1 	bl	801cf1a <USBD_SetClassConfig>
 801df58:	4603      	mov	r3, r0
 801df5a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801df5c:	7bfb      	ldrb	r3, [r7, #15]
 801df5e:	2b00      	cmp	r3, #0
 801df60:	d008      	beq.n	801df74 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801df62:	6839      	ldr	r1, [r7, #0]
 801df64:	6878      	ldr	r0, [r7, #4]
 801df66:	f000 f962 	bl	801e22e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801df6a:	687b      	ldr	r3, [r7, #4]
 801df6c:	2202      	movs	r2, #2
 801df6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801df72:	e065      	b.n	801e040 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801df74:	6878      	ldr	r0, [r7, #4]
 801df76:	f000 fa25 	bl	801e3c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	2203      	movs	r2, #3
 801df7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801df82:	e05d      	b.n	801e040 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801df84:	6878      	ldr	r0, [r7, #4]
 801df86:	f000 fa1d 	bl	801e3c4 <USBD_CtlSendStatus>
      break;
 801df8a:	e059      	b.n	801e040 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801df8c:	4b2f      	ldr	r3, [pc, #188]	; (801e04c <USBD_SetConfig+0x150>)
 801df8e:	781b      	ldrb	r3, [r3, #0]
 801df90:	2b00      	cmp	r3, #0
 801df92:	d112      	bne.n	801dfba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801df94:	687b      	ldr	r3, [r7, #4]
 801df96:	2202      	movs	r2, #2
 801df98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801df9c:	4b2b      	ldr	r3, [pc, #172]	; (801e04c <USBD_SetConfig+0x150>)
 801df9e:	781b      	ldrb	r3, [r3, #0]
 801dfa0:	461a      	mov	r2, r3
 801dfa2:	687b      	ldr	r3, [r7, #4]
 801dfa4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801dfa6:	4b29      	ldr	r3, [pc, #164]	; (801e04c <USBD_SetConfig+0x150>)
 801dfa8:	781b      	ldrb	r3, [r3, #0]
 801dfaa:	4619      	mov	r1, r3
 801dfac:	6878      	ldr	r0, [r7, #4]
 801dfae:	f7fe ffd0 	bl	801cf52 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801dfb2:	6878      	ldr	r0, [r7, #4]
 801dfb4:	f000 fa06 	bl	801e3c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801dfb8:	e042      	b.n	801e040 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801dfba:	4b24      	ldr	r3, [pc, #144]	; (801e04c <USBD_SetConfig+0x150>)
 801dfbc:	781b      	ldrb	r3, [r3, #0]
 801dfbe:	461a      	mov	r2, r3
 801dfc0:	687b      	ldr	r3, [r7, #4]
 801dfc2:	685b      	ldr	r3, [r3, #4]
 801dfc4:	429a      	cmp	r2, r3
 801dfc6:	d02a      	beq.n	801e01e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	685b      	ldr	r3, [r3, #4]
 801dfcc:	b2db      	uxtb	r3, r3
 801dfce:	4619      	mov	r1, r3
 801dfd0:	6878      	ldr	r0, [r7, #4]
 801dfd2:	f7fe ffbe 	bl	801cf52 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801dfd6:	4b1d      	ldr	r3, [pc, #116]	; (801e04c <USBD_SetConfig+0x150>)
 801dfd8:	781b      	ldrb	r3, [r3, #0]
 801dfda:	461a      	mov	r2, r3
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801dfe0:	4b1a      	ldr	r3, [pc, #104]	; (801e04c <USBD_SetConfig+0x150>)
 801dfe2:	781b      	ldrb	r3, [r3, #0]
 801dfe4:	4619      	mov	r1, r3
 801dfe6:	6878      	ldr	r0, [r7, #4]
 801dfe8:	f7fe ff97 	bl	801cf1a <USBD_SetClassConfig>
 801dfec:	4603      	mov	r3, r0
 801dfee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801dff0:	7bfb      	ldrb	r3, [r7, #15]
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	d00f      	beq.n	801e016 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801dff6:	6839      	ldr	r1, [r7, #0]
 801dff8:	6878      	ldr	r0, [r7, #4]
 801dffa:	f000 f918 	bl	801e22e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801dffe:	687b      	ldr	r3, [r7, #4]
 801e000:	685b      	ldr	r3, [r3, #4]
 801e002:	b2db      	uxtb	r3, r3
 801e004:	4619      	mov	r1, r3
 801e006:	6878      	ldr	r0, [r7, #4]
 801e008:	f7fe ffa3 	bl	801cf52 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801e00c:	687b      	ldr	r3, [r7, #4]
 801e00e:	2202      	movs	r2, #2
 801e010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801e014:	e014      	b.n	801e040 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801e016:	6878      	ldr	r0, [r7, #4]
 801e018:	f000 f9d4 	bl	801e3c4 <USBD_CtlSendStatus>
      break;
 801e01c:	e010      	b.n	801e040 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801e01e:	6878      	ldr	r0, [r7, #4]
 801e020:	f000 f9d0 	bl	801e3c4 <USBD_CtlSendStatus>
      break;
 801e024:	e00c      	b.n	801e040 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801e026:	6839      	ldr	r1, [r7, #0]
 801e028:	6878      	ldr	r0, [r7, #4]
 801e02a:	f000 f900 	bl	801e22e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801e02e:	4b07      	ldr	r3, [pc, #28]	; (801e04c <USBD_SetConfig+0x150>)
 801e030:	781b      	ldrb	r3, [r3, #0]
 801e032:	4619      	mov	r1, r3
 801e034:	6878      	ldr	r0, [r7, #4]
 801e036:	f7fe ff8c 	bl	801cf52 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801e03a:	2303      	movs	r3, #3
 801e03c:	73fb      	strb	r3, [r7, #15]
      break;
 801e03e:	bf00      	nop
  }

  return ret;
 801e040:	7bfb      	ldrb	r3, [r7, #15]
}
 801e042:	4618      	mov	r0, r3
 801e044:	3710      	adds	r7, #16
 801e046:	46bd      	mov	sp, r7
 801e048:	bd80      	pop	{r7, pc}
 801e04a:	bf00      	nop
 801e04c:	2000d124 	.word	0x2000d124

0801e050 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e050:	b580      	push	{r7, lr}
 801e052:	b082      	sub	sp, #8
 801e054:	af00      	add	r7, sp, #0
 801e056:	6078      	str	r0, [r7, #4]
 801e058:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801e05a:	683b      	ldr	r3, [r7, #0]
 801e05c:	88db      	ldrh	r3, [r3, #6]
 801e05e:	2b01      	cmp	r3, #1
 801e060:	d004      	beq.n	801e06c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801e062:	6839      	ldr	r1, [r7, #0]
 801e064:	6878      	ldr	r0, [r7, #4]
 801e066:	f000 f8e2 	bl	801e22e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801e06a:	e023      	b.n	801e0b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801e06c:	687b      	ldr	r3, [r7, #4]
 801e06e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801e072:	b2db      	uxtb	r3, r3
 801e074:	2b02      	cmp	r3, #2
 801e076:	dc02      	bgt.n	801e07e <USBD_GetConfig+0x2e>
 801e078:	2b00      	cmp	r3, #0
 801e07a:	dc03      	bgt.n	801e084 <USBD_GetConfig+0x34>
 801e07c:	e015      	b.n	801e0aa <USBD_GetConfig+0x5a>
 801e07e:	2b03      	cmp	r3, #3
 801e080:	d00b      	beq.n	801e09a <USBD_GetConfig+0x4a>
 801e082:	e012      	b.n	801e0aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801e084:	687b      	ldr	r3, [r7, #4]
 801e086:	2200      	movs	r2, #0
 801e088:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801e08a:	687b      	ldr	r3, [r7, #4]
 801e08c:	3308      	adds	r3, #8
 801e08e:	2201      	movs	r2, #1
 801e090:	4619      	mov	r1, r3
 801e092:	6878      	ldr	r0, [r7, #4]
 801e094:	f000 f93c 	bl	801e310 <USBD_CtlSendData>
        break;
 801e098:	e00c      	b.n	801e0b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801e09a:	687b      	ldr	r3, [r7, #4]
 801e09c:	3304      	adds	r3, #4
 801e09e:	2201      	movs	r2, #1
 801e0a0:	4619      	mov	r1, r3
 801e0a2:	6878      	ldr	r0, [r7, #4]
 801e0a4:	f000 f934 	bl	801e310 <USBD_CtlSendData>
        break;
 801e0a8:	e004      	b.n	801e0b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801e0aa:	6839      	ldr	r1, [r7, #0]
 801e0ac:	6878      	ldr	r0, [r7, #4]
 801e0ae:	f000 f8be 	bl	801e22e <USBD_CtlError>
        break;
 801e0b2:	bf00      	nop
}
 801e0b4:	bf00      	nop
 801e0b6:	3708      	adds	r7, #8
 801e0b8:	46bd      	mov	sp, r7
 801e0ba:	bd80      	pop	{r7, pc}

0801e0bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e0bc:	b580      	push	{r7, lr}
 801e0be:	b082      	sub	sp, #8
 801e0c0:	af00      	add	r7, sp, #0
 801e0c2:	6078      	str	r0, [r7, #4]
 801e0c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801e0c6:	687b      	ldr	r3, [r7, #4]
 801e0c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801e0cc:	b2db      	uxtb	r3, r3
 801e0ce:	3b01      	subs	r3, #1
 801e0d0:	2b02      	cmp	r3, #2
 801e0d2:	d81e      	bhi.n	801e112 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801e0d4:	683b      	ldr	r3, [r7, #0]
 801e0d6:	88db      	ldrh	r3, [r3, #6]
 801e0d8:	2b02      	cmp	r3, #2
 801e0da:	d004      	beq.n	801e0e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801e0dc:	6839      	ldr	r1, [r7, #0]
 801e0de:	6878      	ldr	r0, [r7, #4]
 801e0e0:	f000 f8a5 	bl	801e22e <USBD_CtlError>
        break;
 801e0e4:	e01a      	b.n	801e11c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801e0e6:	687b      	ldr	r3, [r7, #4]
 801e0e8:	2201      	movs	r2, #1
 801e0ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801e0f2:	2b00      	cmp	r3, #0
 801e0f4:	d005      	beq.n	801e102 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801e0f6:	687b      	ldr	r3, [r7, #4]
 801e0f8:	68db      	ldr	r3, [r3, #12]
 801e0fa:	f043 0202 	orr.w	r2, r3, #2
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801e102:	687b      	ldr	r3, [r7, #4]
 801e104:	330c      	adds	r3, #12
 801e106:	2202      	movs	r2, #2
 801e108:	4619      	mov	r1, r3
 801e10a:	6878      	ldr	r0, [r7, #4]
 801e10c:	f000 f900 	bl	801e310 <USBD_CtlSendData>
      break;
 801e110:	e004      	b.n	801e11c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801e112:	6839      	ldr	r1, [r7, #0]
 801e114:	6878      	ldr	r0, [r7, #4]
 801e116:	f000 f88a 	bl	801e22e <USBD_CtlError>
      break;
 801e11a:	bf00      	nop
  }
}
 801e11c:	bf00      	nop
 801e11e:	3708      	adds	r7, #8
 801e120:	46bd      	mov	sp, r7
 801e122:	bd80      	pop	{r7, pc}

0801e124 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e124:	b580      	push	{r7, lr}
 801e126:	b082      	sub	sp, #8
 801e128:	af00      	add	r7, sp, #0
 801e12a:	6078      	str	r0, [r7, #4]
 801e12c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801e12e:	683b      	ldr	r3, [r7, #0]
 801e130:	885b      	ldrh	r3, [r3, #2]
 801e132:	2b01      	cmp	r3, #1
 801e134:	d107      	bne.n	801e146 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	2201      	movs	r2, #1
 801e13a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801e13e:	6878      	ldr	r0, [r7, #4]
 801e140:	f000 f940 	bl	801e3c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801e144:	e013      	b.n	801e16e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801e146:	683b      	ldr	r3, [r7, #0]
 801e148:	885b      	ldrh	r3, [r3, #2]
 801e14a:	2b02      	cmp	r3, #2
 801e14c:	d10b      	bne.n	801e166 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801e14e:	683b      	ldr	r3, [r7, #0]
 801e150:	889b      	ldrh	r3, [r3, #4]
 801e152:	0a1b      	lsrs	r3, r3, #8
 801e154:	b29b      	uxth	r3, r3
 801e156:	b2da      	uxtb	r2, r3
 801e158:	687b      	ldr	r3, [r7, #4]
 801e15a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801e15e:	6878      	ldr	r0, [r7, #4]
 801e160:	f000 f930 	bl	801e3c4 <USBD_CtlSendStatus>
}
 801e164:	e003      	b.n	801e16e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801e166:	6839      	ldr	r1, [r7, #0]
 801e168:	6878      	ldr	r0, [r7, #4]
 801e16a:	f000 f860 	bl	801e22e <USBD_CtlError>
}
 801e16e:	bf00      	nop
 801e170:	3708      	adds	r7, #8
 801e172:	46bd      	mov	sp, r7
 801e174:	bd80      	pop	{r7, pc}

0801e176 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e176:	b580      	push	{r7, lr}
 801e178:	b082      	sub	sp, #8
 801e17a:	af00      	add	r7, sp, #0
 801e17c:	6078      	str	r0, [r7, #4]
 801e17e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801e180:	687b      	ldr	r3, [r7, #4]
 801e182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801e186:	b2db      	uxtb	r3, r3
 801e188:	3b01      	subs	r3, #1
 801e18a:	2b02      	cmp	r3, #2
 801e18c:	d80b      	bhi.n	801e1a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801e18e:	683b      	ldr	r3, [r7, #0]
 801e190:	885b      	ldrh	r3, [r3, #2]
 801e192:	2b01      	cmp	r3, #1
 801e194:	d10c      	bne.n	801e1b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801e196:	687b      	ldr	r3, [r7, #4]
 801e198:	2200      	movs	r2, #0
 801e19a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801e19e:	6878      	ldr	r0, [r7, #4]
 801e1a0:	f000 f910 	bl	801e3c4 <USBD_CtlSendStatus>
      }
      break;
 801e1a4:	e004      	b.n	801e1b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801e1a6:	6839      	ldr	r1, [r7, #0]
 801e1a8:	6878      	ldr	r0, [r7, #4]
 801e1aa:	f000 f840 	bl	801e22e <USBD_CtlError>
      break;
 801e1ae:	e000      	b.n	801e1b2 <USBD_ClrFeature+0x3c>
      break;
 801e1b0:	bf00      	nop
  }
}
 801e1b2:	bf00      	nop
 801e1b4:	3708      	adds	r7, #8
 801e1b6:	46bd      	mov	sp, r7
 801e1b8:	bd80      	pop	{r7, pc}

0801e1ba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801e1ba:	b580      	push	{r7, lr}
 801e1bc:	b084      	sub	sp, #16
 801e1be:	af00      	add	r7, sp, #0
 801e1c0:	6078      	str	r0, [r7, #4]
 801e1c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801e1c4:	683b      	ldr	r3, [r7, #0]
 801e1c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801e1c8:	68fb      	ldr	r3, [r7, #12]
 801e1ca:	781a      	ldrb	r2, [r3, #0]
 801e1cc:	687b      	ldr	r3, [r7, #4]
 801e1ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801e1d0:	68fb      	ldr	r3, [r7, #12]
 801e1d2:	3301      	adds	r3, #1
 801e1d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801e1d6:	68fb      	ldr	r3, [r7, #12]
 801e1d8:	781a      	ldrb	r2, [r3, #0]
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801e1de:	68fb      	ldr	r3, [r7, #12]
 801e1e0:	3301      	adds	r3, #1
 801e1e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801e1e4:	68f8      	ldr	r0, [r7, #12]
 801e1e6:	f7ff fa41 	bl	801d66c <SWAPBYTE>
 801e1ea:	4603      	mov	r3, r0
 801e1ec:	461a      	mov	r2, r3
 801e1ee:	687b      	ldr	r3, [r7, #4]
 801e1f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801e1f2:	68fb      	ldr	r3, [r7, #12]
 801e1f4:	3301      	adds	r3, #1
 801e1f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801e1f8:	68fb      	ldr	r3, [r7, #12]
 801e1fa:	3301      	adds	r3, #1
 801e1fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801e1fe:	68f8      	ldr	r0, [r7, #12]
 801e200:	f7ff fa34 	bl	801d66c <SWAPBYTE>
 801e204:	4603      	mov	r3, r0
 801e206:	461a      	mov	r2, r3
 801e208:	687b      	ldr	r3, [r7, #4]
 801e20a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801e20c:	68fb      	ldr	r3, [r7, #12]
 801e20e:	3301      	adds	r3, #1
 801e210:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801e212:	68fb      	ldr	r3, [r7, #12]
 801e214:	3301      	adds	r3, #1
 801e216:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801e218:	68f8      	ldr	r0, [r7, #12]
 801e21a:	f7ff fa27 	bl	801d66c <SWAPBYTE>
 801e21e:	4603      	mov	r3, r0
 801e220:	461a      	mov	r2, r3
 801e222:	687b      	ldr	r3, [r7, #4]
 801e224:	80da      	strh	r2, [r3, #6]
}
 801e226:	bf00      	nop
 801e228:	3710      	adds	r7, #16
 801e22a:	46bd      	mov	sp, r7
 801e22c:	bd80      	pop	{r7, pc}

0801e22e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e22e:	b580      	push	{r7, lr}
 801e230:	b082      	sub	sp, #8
 801e232:	af00      	add	r7, sp, #0
 801e234:	6078      	str	r0, [r7, #4]
 801e236:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801e238:	2180      	movs	r1, #128	; 0x80
 801e23a:	6878      	ldr	r0, [r7, #4]
 801e23c:	f004 f886 	bl	802234c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801e240:	2100      	movs	r1, #0
 801e242:	6878      	ldr	r0, [r7, #4]
 801e244:	f004 f882 	bl	802234c <USBD_LL_StallEP>
}
 801e248:	bf00      	nop
 801e24a:	3708      	adds	r7, #8
 801e24c:	46bd      	mov	sp, r7
 801e24e:	bd80      	pop	{r7, pc}

0801e250 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801e250:	b580      	push	{r7, lr}
 801e252:	b086      	sub	sp, #24
 801e254:	af00      	add	r7, sp, #0
 801e256:	60f8      	str	r0, [r7, #12]
 801e258:	60b9      	str	r1, [r7, #8]
 801e25a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801e25c:	2300      	movs	r3, #0
 801e25e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801e260:	68fb      	ldr	r3, [r7, #12]
 801e262:	2b00      	cmp	r3, #0
 801e264:	d036      	beq.n	801e2d4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801e266:	68fb      	ldr	r3, [r7, #12]
 801e268:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801e26a:	6938      	ldr	r0, [r7, #16]
 801e26c:	f000 f836 	bl	801e2dc <USBD_GetLen>
 801e270:	4603      	mov	r3, r0
 801e272:	3301      	adds	r3, #1
 801e274:	b29b      	uxth	r3, r3
 801e276:	005b      	lsls	r3, r3, #1
 801e278:	b29a      	uxth	r2, r3
 801e27a:	687b      	ldr	r3, [r7, #4]
 801e27c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801e27e:	7dfb      	ldrb	r3, [r7, #23]
 801e280:	68ba      	ldr	r2, [r7, #8]
 801e282:	4413      	add	r3, r2
 801e284:	687a      	ldr	r2, [r7, #4]
 801e286:	7812      	ldrb	r2, [r2, #0]
 801e288:	701a      	strb	r2, [r3, #0]
  idx++;
 801e28a:	7dfb      	ldrb	r3, [r7, #23]
 801e28c:	3301      	adds	r3, #1
 801e28e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801e290:	7dfb      	ldrb	r3, [r7, #23]
 801e292:	68ba      	ldr	r2, [r7, #8]
 801e294:	4413      	add	r3, r2
 801e296:	2203      	movs	r2, #3
 801e298:	701a      	strb	r2, [r3, #0]
  idx++;
 801e29a:	7dfb      	ldrb	r3, [r7, #23]
 801e29c:	3301      	adds	r3, #1
 801e29e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801e2a0:	e013      	b.n	801e2ca <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801e2a2:	7dfb      	ldrb	r3, [r7, #23]
 801e2a4:	68ba      	ldr	r2, [r7, #8]
 801e2a6:	4413      	add	r3, r2
 801e2a8:	693a      	ldr	r2, [r7, #16]
 801e2aa:	7812      	ldrb	r2, [r2, #0]
 801e2ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801e2ae:	693b      	ldr	r3, [r7, #16]
 801e2b0:	3301      	adds	r3, #1
 801e2b2:	613b      	str	r3, [r7, #16]
    idx++;
 801e2b4:	7dfb      	ldrb	r3, [r7, #23]
 801e2b6:	3301      	adds	r3, #1
 801e2b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801e2ba:	7dfb      	ldrb	r3, [r7, #23]
 801e2bc:	68ba      	ldr	r2, [r7, #8]
 801e2be:	4413      	add	r3, r2
 801e2c0:	2200      	movs	r2, #0
 801e2c2:	701a      	strb	r2, [r3, #0]
    idx++;
 801e2c4:	7dfb      	ldrb	r3, [r7, #23]
 801e2c6:	3301      	adds	r3, #1
 801e2c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801e2ca:	693b      	ldr	r3, [r7, #16]
 801e2cc:	781b      	ldrb	r3, [r3, #0]
 801e2ce:	2b00      	cmp	r3, #0
 801e2d0:	d1e7      	bne.n	801e2a2 <USBD_GetString+0x52>
 801e2d2:	e000      	b.n	801e2d6 <USBD_GetString+0x86>
    return;
 801e2d4:	bf00      	nop
  }
}
 801e2d6:	3718      	adds	r7, #24
 801e2d8:	46bd      	mov	sp, r7
 801e2da:	bd80      	pop	{r7, pc}

0801e2dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801e2dc:	b480      	push	{r7}
 801e2de:	b085      	sub	sp, #20
 801e2e0:	af00      	add	r7, sp, #0
 801e2e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801e2e4:	2300      	movs	r3, #0
 801e2e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801e2e8:	687b      	ldr	r3, [r7, #4]
 801e2ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801e2ec:	e005      	b.n	801e2fa <USBD_GetLen+0x1e>
  {
    len++;
 801e2ee:	7bfb      	ldrb	r3, [r7, #15]
 801e2f0:	3301      	adds	r3, #1
 801e2f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801e2f4:	68bb      	ldr	r3, [r7, #8]
 801e2f6:	3301      	adds	r3, #1
 801e2f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801e2fa:	68bb      	ldr	r3, [r7, #8]
 801e2fc:	781b      	ldrb	r3, [r3, #0]
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	d1f5      	bne.n	801e2ee <USBD_GetLen+0x12>
  }

  return len;
 801e302:	7bfb      	ldrb	r3, [r7, #15]
}
 801e304:	4618      	mov	r0, r3
 801e306:	3714      	adds	r7, #20
 801e308:	46bd      	mov	sp, r7
 801e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e30e:	4770      	bx	lr

0801e310 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801e310:	b580      	push	{r7, lr}
 801e312:	b084      	sub	sp, #16
 801e314:	af00      	add	r7, sp, #0
 801e316:	60f8      	str	r0, [r7, #12]
 801e318:	60b9      	str	r1, [r7, #8]
 801e31a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801e31c:	68fb      	ldr	r3, [r7, #12]
 801e31e:	2202      	movs	r2, #2
 801e320:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801e324:	68fb      	ldr	r3, [r7, #12]
 801e326:	687a      	ldr	r2, [r7, #4]
 801e328:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801e32a:	68fb      	ldr	r3, [r7, #12]
 801e32c:	687a      	ldr	r2, [r7, #4]
 801e32e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801e330:	687b      	ldr	r3, [r7, #4]
 801e332:	68ba      	ldr	r2, [r7, #8]
 801e334:	2100      	movs	r1, #0
 801e336:	68f8      	ldr	r0, [r7, #12]
 801e338:	f004 f891 	bl	802245e <USBD_LL_Transmit>

  return USBD_OK;
 801e33c:	2300      	movs	r3, #0
}
 801e33e:	4618      	mov	r0, r3
 801e340:	3710      	adds	r7, #16
 801e342:	46bd      	mov	sp, r7
 801e344:	bd80      	pop	{r7, pc}

0801e346 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801e346:	b580      	push	{r7, lr}
 801e348:	b084      	sub	sp, #16
 801e34a:	af00      	add	r7, sp, #0
 801e34c:	60f8      	str	r0, [r7, #12]
 801e34e:	60b9      	str	r1, [r7, #8]
 801e350:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	68ba      	ldr	r2, [r7, #8]
 801e356:	2100      	movs	r1, #0
 801e358:	68f8      	ldr	r0, [r7, #12]
 801e35a:	f004 f880 	bl	802245e <USBD_LL_Transmit>

  return USBD_OK;
 801e35e:	2300      	movs	r3, #0
}
 801e360:	4618      	mov	r0, r3
 801e362:	3710      	adds	r7, #16
 801e364:	46bd      	mov	sp, r7
 801e366:	bd80      	pop	{r7, pc}

0801e368 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801e368:	b580      	push	{r7, lr}
 801e36a:	b084      	sub	sp, #16
 801e36c:	af00      	add	r7, sp, #0
 801e36e:	60f8      	str	r0, [r7, #12]
 801e370:	60b9      	str	r1, [r7, #8]
 801e372:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801e374:	68fb      	ldr	r3, [r7, #12]
 801e376:	2203      	movs	r2, #3
 801e378:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801e37c:	68fb      	ldr	r3, [r7, #12]
 801e37e:	687a      	ldr	r2, [r7, #4]
 801e380:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801e384:	68fb      	ldr	r3, [r7, #12]
 801e386:	687a      	ldr	r2, [r7, #4]
 801e388:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801e38c:	687b      	ldr	r3, [r7, #4]
 801e38e:	68ba      	ldr	r2, [r7, #8]
 801e390:	2100      	movs	r1, #0
 801e392:	68f8      	ldr	r0, [r7, #12]
 801e394:	f004 f884 	bl	80224a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801e398:	2300      	movs	r3, #0
}
 801e39a:	4618      	mov	r0, r3
 801e39c:	3710      	adds	r7, #16
 801e39e:	46bd      	mov	sp, r7
 801e3a0:	bd80      	pop	{r7, pc}

0801e3a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801e3a2:	b580      	push	{r7, lr}
 801e3a4:	b084      	sub	sp, #16
 801e3a6:	af00      	add	r7, sp, #0
 801e3a8:	60f8      	str	r0, [r7, #12]
 801e3aa:	60b9      	str	r1, [r7, #8]
 801e3ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801e3ae:	687b      	ldr	r3, [r7, #4]
 801e3b0:	68ba      	ldr	r2, [r7, #8]
 801e3b2:	2100      	movs	r1, #0
 801e3b4:	68f8      	ldr	r0, [r7, #12]
 801e3b6:	f004 f873 	bl	80224a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801e3ba:	2300      	movs	r3, #0
}
 801e3bc:	4618      	mov	r0, r3
 801e3be:	3710      	adds	r7, #16
 801e3c0:	46bd      	mov	sp, r7
 801e3c2:	bd80      	pop	{r7, pc}

0801e3c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801e3c4:	b580      	push	{r7, lr}
 801e3c6:	b082      	sub	sp, #8
 801e3c8:	af00      	add	r7, sp, #0
 801e3ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801e3cc:	687b      	ldr	r3, [r7, #4]
 801e3ce:	2204      	movs	r2, #4
 801e3d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801e3d4:	2300      	movs	r3, #0
 801e3d6:	2200      	movs	r2, #0
 801e3d8:	2100      	movs	r1, #0
 801e3da:	6878      	ldr	r0, [r7, #4]
 801e3dc:	f004 f83f 	bl	802245e <USBD_LL_Transmit>

  return USBD_OK;
 801e3e0:	2300      	movs	r3, #0
}
 801e3e2:	4618      	mov	r0, r3
 801e3e4:	3708      	adds	r7, #8
 801e3e6:	46bd      	mov	sp, r7
 801e3e8:	bd80      	pop	{r7, pc}

0801e3ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801e3ea:	b580      	push	{r7, lr}
 801e3ec:	b082      	sub	sp, #8
 801e3ee:	af00      	add	r7, sp, #0
 801e3f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801e3f2:	687b      	ldr	r3, [r7, #4]
 801e3f4:	2205      	movs	r2, #5
 801e3f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801e3fa:	2300      	movs	r3, #0
 801e3fc:	2200      	movs	r2, #0
 801e3fe:	2100      	movs	r1, #0
 801e400:	6878      	ldr	r0, [r7, #4]
 801e402:	f004 f84d 	bl	80224a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801e406:	2300      	movs	r3, #0
}
 801e408:	4618      	mov	r0, r3
 801e40a:	3708      	adds	r7, #8
 801e40c:	46bd      	mov	sp, r7
 801e40e:	bd80      	pop	{r7, pc}

0801e410 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801e410:	b480      	push	{r7}
 801e412:	b085      	sub	sp, #20
 801e414:	af00      	add	r7, sp, #0
 801e416:	4603      	mov	r3, r0
 801e418:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801e41a:	2300      	movs	r3, #0
 801e41c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801e41e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801e422:	2b84      	cmp	r3, #132	; 0x84
 801e424:	d005      	beq.n	801e432 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801e426:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801e42a:	68fb      	ldr	r3, [r7, #12]
 801e42c:	4413      	add	r3, r2
 801e42e:	3303      	adds	r3, #3
 801e430:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801e432:	68fb      	ldr	r3, [r7, #12]
}
 801e434:	4618      	mov	r0, r3
 801e436:	3714      	adds	r7, #20
 801e438:	46bd      	mov	sp, r7
 801e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e43e:	4770      	bx	lr

0801e440 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801e440:	b580      	push	{r7, lr}
 801e442:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801e444:	f001 fae8 	bl	801fa18 <vTaskStartScheduler>
  
  return osOK;
 801e448:	2300      	movs	r3, #0
}
 801e44a:	4618      	mov	r0, r3
 801e44c:	bd80      	pop	{r7, pc}

0801e44e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801e44e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e450:	b089      	sub	sp, #36	; 0x24
 801e452:	af04      	add	r7, sp, #16
 801e454:	6078      	str	r0, [r7, #4]
 801e456:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801e458:	687b      	ldr	r3, [r7, #4]
 801e45a:	695b      	ldr	r3, [r3, #20]
 801e45c:	2b00      	cmp	r3, #0
 801e45e:	d020      	beq.n	801e4a2 <osThreadCreate+0x54>
 801e460:	687b      	ldr	r3, [r7, #4]
 801e462:	699b      	ldr	r3, [r3, #24]
 801e464:	2b00      	cmp	r3, #0
 801e466:	d01c      	beq.n	801e4a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801e468:	687b      	ldr	r3, [r7, #4]
 801e46a:	685c      	ldr	r4, [r3, #4]
 801e46c:	687b      	ldr	r3, [r7, #4]
 801e46e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801e470:	687b      	ldr	r3, [r7, #4]
 801e472:	691e      	ldr	r6, [r3, #16]
 801e474:	687b      	ldr	r3, [r7, #4]
 801e476:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801e47a:	4618      	mov	r0, r3
 801e47c:	f7ff ffc8 	bl	801e410 <makeFreeRtosPriority>
 801e480:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 801e482:	687b      	ldr	r3, [r7, #4]
 801e484:	695b      	ldr	r3, [r3, #20]
 801e486:	687a      	ldr	r2, [r7, #4]
 801e488:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801e48a:	9202      	str	r2, [sp, #8]
 801e48c:	9301      	str	r3, [sp, #4]
 801e48e:	9100      	str	r1, [sp, #0]
 801e490:	683b      	ldr	r3, [r7, #0]
 801e492:	4632      	mov	r2, r6
 801e494:	4629      	mov	r1, r5
 801e496:	4620      	mov	r0, r4
 801e498:	f001 f86c 	bl	801f574 <xTaskCreateStatic>
 801e49c:	4603      	mov	r3, r0
 801e49e:	60fb      	str	r3, [r7, #12]
 801e4a0:	e01c      	b.n	801e4dc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801e4a2:	687b      	ldr	r3, [r7, #4]
 801e4a4:	685c      	ldr	r4, [r3, #4]
 801e4a6:	687b      	ldr	r3, [r7, #4]
 801e4a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801e4ae:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801e4b0:	687b      	ldr	r3, [r7, #4]
 801e4b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801e4b6:	4618      	mov	r0, r3
 801e4b8:	f7ff ffaa 	bl	801e410 <makeFreeRtosPriority>
 801e4bc:	4602      	mov	r2, r0
 801e4be:	f107 030c 	add.w	r3, r7, #12
 801e4c2:	9301      	str	r3, [sp, #4]
 801e4c4:	9200      	str	r2, [sp, #0]
 801e4c6:	683b      	ldr	r3, [r7, #0]
 801e4c8:	4632      	mov	r2, r6
 801e4ca:	4629      	mov	r1, r5
 801e4cc:	4620      	mov	r0, r4
 801e4ce:	f001 f8a7 	bl	801f620 <xTaskCreate>
 801e4d2:	4603      	mov	r3, r0
 801e4d4:	2b01      	cmp	r3, #1
 801e4d6:	d001      	beq.n	801e4dc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801e4d8:	2300      	movs	r3, #0
 801e4da:	e000      	b.n	801e4de <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801e4dc:	68fb      	ldr	r3, [r7, #12]
}
 801e4de:	4618      	mov	r0, r3
 801e4e0:	3714      	adds	r7, #20
 801e4e2:	46bd      	mov	sp, r7
 801e4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801e4e8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801e4e8:	b580      	push	{r7, lr}
 801e4ea:	b084      	sub	sp, #16
 801e4ec:	af00      	add	r7, sp, #0
 801e4ee:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	4a09      	ldr	r2, [pc, #36]	; (801e518 <osDelay+0x30>)
 801e4f4:	fba2 2303 	umull	r2, r3, r2, r3
 801e4f8:	099b      	lsrs	r3, r3, #6
 801e4fa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801e4fc:	68fb      	ldr	r3, [r7, #12]
 801e4fe:	2b00      	cmp	r3, #0
 801e500:	d001      	beq.n	801e506 <osDelay+0x1e>
 801e502:	68fb      	ldr	r3, [r7, #12]
 801e504:	e000      	b.n	801e508 <osDelay+0x20>
 801e506:	2301      	movs	r3, #1
 801e508:	4618      	mov	r0, r3
 801e50a:	f001 f9eb 	bl	801f8e4 <vTaskDelay>
  
  return osOK;
 801e50e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801e510:	4618      	mov	r0, r3
 801e512:	3710      	adds	r7, #16
 801e514:	46bd      	mov	sp, r7
 801e516:	bd80      	pop	{r7, pc}
 801e518:	10624dd3 	.word	0x10624dd3

0801e51c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801e51c:	b480      	push	{r7}
 801e51e:	b083      	sub	sp, #12
 801e520:	af00      	add	r7, sp, #0
 801e522:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801e524:	687b      	ldr	r3, [r7, #4]
 801e526:	f103 0208 	add.w	r2, r3, #8
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801e52e:	687b      	ldr	r3, [r7, #4]
 801e530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e534:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801e536:	687b      	ldr	r3, [r7, #4]
 801e538:	f103 0208 	add.w	r2, r3, #8
 801e53c:	687b      	ldr	r3, [r7, #4]
 801e53e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801e540:	687b      	ldr	r3, [r7, #4]
 801e542:	f103 0208 	add.w	r2, r3, #8
 801e546:	687b      	ldr	r3, [r7, #4]
 801e548:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801e54a:	687b      	ldr	r3, [r7, #4]
 801e54c:	2200      	movs	r2, #0
 801e54e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801e550:	bf00      	nop
 801e552:	370c      	adds	r7, #12
 801e554:	46bd      	mov	sp, r7
 801e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e55a:	4770      	bx	lr

0801e55c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801e55c:	b480      	push	{r7}
 801e55e:	b083      	sub	sp, #12
 801e560:	af00      	add	r7, sp, #0
 801e562:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801e564:	687b      	ldr	r3, [r7, #4]
 801e566:	2200      	movs	r2, #0
 801e568:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801e56a:	bf00      	nop
 801e56c:	370c      	adds	r7, #12
 801e56e:	46bd      	mov	sp, r7
 801e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e574:	4770      	bx	lr

0801e576 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801e576:	b480      	push	{r7}
 801e578:	b085      	sub	sp, #20
 801e57a:	af00      	add	r7, sp, #0
 801e57c:	6078      	str	r0, [r7, #4]
 801e57e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801e580:	687b      	ldr	r3, [r7, #4]
 801e582:	685b      	ldr	r3, [r3, #4]
 801e584:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801e586:	683b      	ldr	r3, [r7, #0]
 801e588:	68fa      	ldr	r2, [r7, #12]
 801e58a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801e58c:	68fb      	ldr	r3, [r7, #12]
 801e58e:	689a      	ldr	r2, [r3, #8]
 801e590:	683b      	ldr	r3, [r7, #0]
 801e592:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801e594:	68fb      	ldr	r3, [r7, #12]
 801e596:	689b      	ldr	r3, [r3, #8]
 801e598:	683a      	ldr	r2, [r7, #0]
 801e59a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801e59c:	68fb      	ldr	r3, [r7, #12]
 801e59e:	683a      	ldr	r2, [r7, #0]
 801e5a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801e5a2:	683b      	ldr	r3, [r7, #0]
 801e5a4:	687a      	ldr	r2, [r7, #4]
 801e5a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801e5a8:	687b      	ldr	r3, [r7, #4]
 801e5aa:	681b      	ldr	r3, [r3, #0]
 801e5ac:	1c5a      	adds	r2, r3, #1
 801e5ae:	687b      	ldr	r3, [r7, #4]
 801e5b0:	601a      	str	r2, [r3, #0]
}
 801e5b2:	bf00      	nop
 801e5b4:	3714      	adds	r7, #20
 801e5b6:	46bd      	mov	sp, r7
 801e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5bc:	4770      	bx	lr

0801e5be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801e5be:	b480      	push	{r7}
 801e5c0:	b085      	sub	sp, #20
 801e5c2:	af00      	add	r7, sp, #0
 801e5c4:	6078      	str	r0, [r7, #4]
 801e5c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801e5c8:	683b      	ldr	r3, [r7, #0]
 801e5ca:	681b      	ldr	r3, [r3, #0]
 801e5cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801e5ce:	68bb      	ldr	r3, [r7, #8]
 801e5d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e5d4:	d103      	bne.n	801e5de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801e5d6:	687b      	ldr	r3, [r7, #4]
 801e5d8:	691b      	ldr	r3, [r3, #16]
 801e5da:	60fb      	str	r3, [r7, #12]
 801e5dc:	e00c      	b.n	801e5f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801e5de:	687b      	ldr	r3, [r7, #4]
 801e5e0:	3308      	adds	r3, #8
 801e5e2:	60fb      	str	r3, [r7, #12]
 801e5e4:	e002      	b.n	801e5ec <vListInsert+0x2e>
 801e5e6:	68fb      	ldr	r3, [r7, #12]
 801e5e8:	685b      	ldr	r3, [r3, #4]
 801e5ea:	60fb      	str	r3, [r7, #12]
 801e5ec:	68fb      	ldr	r3, [r7, #12]
 801e5ee:	685b      	ldr	r3, [r3, #4]
 801e5f0:	681b      	ldr	r3, [r3, #0]
 801e5f2:	68ba      	ldr	r2, [r7, #8]
 801e5f4:	429a      	cmp	r2, r3
 801e5f6:	d2f6      	bcs.n	801e5e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801e5f8:	68fb      	ldr	r3, [r7, #12]
 801e5fa:	685a      	ldr	r2, [r3, #4]
 801e5fc:	683b      	ldr	r3, [r7, #0]
 801e5fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801e600:	683b      	ldr	r3, [r7, #0]
 801e602:	685b      	ldr	r3, [r3, #4]
 801e604:	683a      	ldr	r2, [r7, #0]
 801e606:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801e608:	683b      	ldr	r3, [r7, #0]
 801e60a:	68fa      	ldr	r2, [r7, #12]
 801e60c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801e60e:	68fb      	ldr	r3, [r7, #12]
 801e610:	683a      	ldr	r2, [r7, #0]
 801e612:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801e614:	683b      	ldr	r3, [r7, #0]
 801e616:	687a      	ldr	r2, [r7, #4]
 801e618:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801e61a:	687b      	ldr	r3, [r7, #4]
 801e61c:	681b      	ldr	r3, [r3, #0]
 801e61e:	1c5a      	adds	r2, r3, #1
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	601a      	str	r2, [r3, #0]
}
 801e624:	bf00      	nop
 801e626:	3714      	adds	r7, #20
 801e628:	46bd      	mov	sp, r7
 801e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e62e:	4770      	bx	lr

0801e630 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801e630:	b480      	push	{r7}
 801e632:	b085      	sub	sp, #20
 801e634:	af00      	add	r7, sp, #0
 801e636:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801e638:	687b      	ldr	r3, [r7, #4]
 801e63a:	691b      	ldr	r3, [r3, #16]
 801e63c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801e63e:	687b      	ldr	r3, [r7, #4]
 801e640:	685b      	ldr	r3, [r3, #4]
 801e642:	687a      	ldr	r2, [r7, #4]
 801e644:	6892      	ldr	r2, [r2, #8]
 801e646:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	689b      	ldr	r3, [r3, #8]
 801e64c:	687a      	ldr	r2, [r7, #4]
 801e64e:	6852      	ldr	r2, [r2, #4]
 801e650:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801e652:	68fb      	ldr	r3, [r7, #12]
 801e654:	685b      	ldr	r3, [r3, #4]
 801e656:	687a      	ldr	r2, [r7, #4]
 801e658:	429a      	cmp	r2, r3
 801e65a:	d103      	bne.n	801e664 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801e65c:	687b      	ldr	r3, [r7, #4]
 801e65e:	689a      	ldr	r2, [r3, #8]
 801e660:	68fb      	ldr	r3, [r7, #12]
 801e662:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	2200      	movs	r2, #0
 801e668:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801e66a:	68fb      	ldr	r3, [r7, #12]
 801e66c:	681b      	ldr	r3, [r3, #0]
 801e66e:	1e5a      	subs	r2, r3, #1
 801e670:	68fb      	ldr	r3, [r7, #12]
 801e672:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801e674:	68fb      	ldr	r3, [r7, #12]
 801e676:	681b      	ldr	r3, [r3, #0]
}
 801e678:	4618      	mov	r0, r3
 801e67a:	3714      	adds	r7, #20
 801e67c:	46bd      	mov	sp, r7
 801e67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e682:	4770      	bx	lr

0801e684 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801e684:	b580      	push	{r7, lr}
 801e686:	b084      	sub	sp, #16
 801e688:	af00      	add	r7, sp, #0
 801e68a:	6078      	str	r0, [r7, #4]
 801e68c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801e68e:	687b      	ldr	r3, [r7, #4]
 801e690:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801e692:	68fb      	ldr	r3, [r7, #12]
 801e694:	2b00      	cmp	r3, #0
 801e696:	d105      	bne.n	801e6a4 <xQueueGenericReset+0x20>
 801e698:	f240 1203 	movw	r2, #259	; 0x103
 801e69c:	492a      	ldr	r1, [pc, #168]	; (801e748 <xQueueGenericReset+0xc4>)
 801e69e:	482b      	ldr	r0, [pc, #172]	; (801e74c <xQueueGenericReset+0xc8>)
 801e6a0:	f7f2 fabc 	bl	8010c1c <assertFail>

	taskENTER_CRITICAL();
 801e6a4:	f002 ff94 	bl	80215d0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801e6a8:	68fb      	ldr	r3, [r7, #12]
 801e6aa:	681a      	ldr	r2, [r3, #0]
 801e6ac:	68fb      	ldr	r3, [r7, #12]
 801e6ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e6b0:	68f9      	ldr	r1, [r7, #12]
 801e6b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801e6b4:	fb01 f303 	mul.w	r3, r1, r3
 801e6b8:	441a      	add	r2, r3
 801e6ba:	68fb      	ldr	r3, [r7, #12]
 801e6bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801e6be:	68fb      	ldr	r3, [r7, #12]
 801e6c0:	2200      	movs	r2, #0
 801e6c2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801e6c4:	68fb      	ldr	r3, [r7, #12]
 801e6c6:	681a      	ldr	r2, [r3, #0]
 801e6c8:	68fb      	ldr	r3, [r7, #12]
 801e6ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801e6cc:	68fb      	ldr	r3, [r7, #12]
 801e6ce:	681a      	ldr	r2, [r3, #0]
 801e6d0:	68fb      	ldr	r3, [r7, #12]
 801e6d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e6d4:	3b01      	subs	r3, #1
 801e6d6:	68f9      	ldr	r1, [r7, #12]
 801e6d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801e6da:	fb01 f303 	mul.w	r3, r1, r3
 801e6de:	441a      	add	r2, r3
 801e6e0:	68fb      	ldr	r3, [r7, #12]
 801e6e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801e6e4:	68fb      	ldr	r3, [r7, #12]
 801e6e6:	22ff      	movs	r2, #255	; 0xff
 801e6e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801e6ec:	68fb      	ldr	r3, [r7, #12]
 801e6ee:	22ff      	movs	r2, #255	; 0xff
 801e6f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801e6f4:	683b      	ldr	r3, [r7, #0]
 801e6f6:	2b00      	cmp	r3, #0
 801e6f8:	d114      	bne.n	801e724 <xQueueGenericReset+0xa0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801e6fa:	68fb      	ldr	r3, [r7, #12]
 801e6fc:	691b      	ldr	r3, [r3, #16]
 801e6fe:	2b00      	cmp	r3, #0
 801e700:	d01a      	beq.n	801e738 <xQueueGenericReset+0xb4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801e702:	68fb      	ldr	r3, [r7, #12]
 801e704:	3310      	adds	r3, #16
 801e706:	4618      	mov	r0, r3
 801e708:	f001 fd16 	bl	8020138 <xTaskRemoveFromEventList>
 801e70c:	4603      	mov	r3, r0
 801e70e:	2b00      	cmp	r3, #0
 801e710:	d012      	beq.n	801e738 <xQueueGenericReset+0xb4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801e712:	4b0f      	ldr	r3, [pc, #60]	; (801e750 <xQueueGenericReset+0xcc>)
 801e714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e718:	601a      	str	r2, [r3, #0]
 801e71a:	f3bf 8f4f 	dsb	sy
 801e71e:	f3bf 8f6f 	isb	sy
 801e722:	e009      	b.n	801e738 <xQueueGenericReset+0xb4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801e724:	68fb      	ldr	r3, [r7, #12]
 801e726:	3310      	adds	r3, #16
 801e728:	4618      	mov	r0, r3
 801e72a:	f7ff fef7 	bl	801e51c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801e72e:	68fb      	ldr	r3, [r7, #12]
 801e730:	3324      	adds	r3, #36	; 0x24
 801e732:	4618      	mov	r0, r3
 801e734:	f7ff fef2 	bl	801e51c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801e738:	f002 ff78 	bl	802162c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801e73c:	2301      	movs	r3, #1
}
 801e73e:	4618      	mov	r0, r3
 801e740:	3710      	adds	r7, #16
 801e742:	46bd      	mov	sp, r7
 801e744:	bd80      	pop	{r7, pc}
 801e746:	bf00      	nop
 801e748:	0802cb80 	.word	0x0802cb80
 801e74c:	0802cbb4 	.word	0x0802cbb4
 801e750:	e000ed04 	.word	0xe000ed04

0801e754 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801e754:	b580      	push	{r7, lr}
 801e756:	b088      	sub	sp, #32
 801e758:	af02      	add	r7, sp, #8
 801e75a:	60f8      	str	r0, [r7, #12]
 801e75c:	60b9      	str	r1, [r7, #8]
 801e75e:	607a      	str	r2, [r7, #4]
 801e760:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801e762:	68fb      	ldr	r3, [r7, #12]
 801e764:	2b00      	cmp	r3, #0
 801e766:	d105      	bne.n	801e774 <xQueueGenericCreateStatic+0x20>
 801e768:	f44f 729d 	mov.w	r2, #314	; 0x13a
 801e76c:	4929      	ldr	r1, [pc, #164]	; (801e814 <xQueueGenericCreateStatic+0xc0>)
 801e76e:	482a      	ldr	r0, [pc, #168]	; (801e818 <xQueueGenericCreateStatic+0xc4>)
 801e770:	f7f2 fa54 	bl	8010c1c <assertFail>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801e774:	683b      	ldr	r3, [r7, #0]
 801e776:	2b00      	cmp	r3, #0
 801e778:	d105      	bne.n	801e786 <xQueueGenericCreateStatic+0x32>
 801e77a:	f44f 729f 	mov.w	r2, #318	; 0x13e
 801e77e:	4925      	ldr	r1, [pc, #148]	; (801e814 <xQueueGenericCreateStatic+0xc0>)
 801e780:	4826      	ldr	r0, [pc, #152]	; (801e81c <xQueueGenericCreateStatic+0xc8>)
 801e782:	f7f2 fa4b 	bl	8010c1c <assertFail>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801e786:	687b      	ldr	r3, [r7, #4]
 801e788:	2b00      	cmp	r3, #0
 801e78a:	d002      	beq.n	801e792 <xQueueGenericCreateStatic+0x3e>
 801e78c:	68bb      	ldr	r3, [r7, #8]
 801e78e:	2b00      	cmp	r3, #0
 801e790:	d001      	beq.n	801e796 <xQueueGenericCreateStatic+0x42>
 801e792:	2301      	movs	r3, #1
 801e794:	e000      	b.n	801e798 <xQueueGenericCreateStatic+0x44>
 801e796:	2300      	movs	r3, #0
 801e798:	2b00      	cmp	r3, #0
 801e79a:	d105      	bne.n	801e7a8 <xQueueGenericCreateStatic+0x54>
 801e79c:	f44f 72a1 	mov.w	r2, #322	; 0x142
 801e7a0:	491c      	ldr	r1, [pc, #112]	; (801e814 <xQueueGenericCreateStatic+0xc0>)
 801e7a2:	481f      	ldr	r0, [pc, #124]	; (801e820 <xQueueGenericCreateStatic+0xcc>)
 801e7a4:	f7f2 fa3a 	bl	8010c1c <assertFail>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801e7a8:	687b      	ldr	r3, [r7, #4]
 801e7aa:	2b00      	cmp	r3, #0
 801e7ac:	d102      	bne.n	801e7b4 <xQueueGenericCreateStatic+0x60>
 801e7ae:	68bb      	ldr	r3, [r7, #8]
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	d101      	bne.n	801e7b8 <xQueueGenericCreateStatic+0x64>
 801e7b4:	2301      	movs	r3, #1
 801e7b6:	e000      	b.n	801e7ba <xQueueGenericCreateStatic+0x66>
 801e7b8:	2300      	movs	r3, #0
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	d105      	bne.n	801e7ca <xQueueGenericCreateStatic+0x76>
 801e7be:	f240 1243 	movw	r2, #323	; 0x143
 801e7c2:	4914      	ldr	r1, [pc, #80]	; (801e814 <xQueueGenericCreateStatic+0xc0>)
 801e7c4:	4817      	ldr	r0, [pc, #92]	; (801e824 <xQueueGenericCreateStatic+0xd0>)
 801e7c6:	f7f2 fa29 	bl	8010c1c <assertFail>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801e7ca:	2350      	movs	r3, #80	; 0x50
 801e7cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 801e7ce:	693b      	ldr	r3, [r7, #16]
 801e7d0:	2b50      	cmp	r3, #80	; 0x50
 801e7d2:	d005      	beq.n	801e7e0 <xQueueGenericCreateStatic+0x8c>
 801e7d4:	f240 124b 	movw	r2, #331	; 0x14b
 801e7d8:	490e      	ldr	r1, [pc, #56]	; (801e814 <xQueueGenericCreateStatic+0xc0>)
 801e7da:	4813      	ldr	r0, [pc, #76]	; (801e828 <xQueueGenericCreateStatic+0xd4>)
 801e7dc:	f7f2 fa1e 	bl	8010c1c <assertFail>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801e7e0:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801e7e2:	683b      	ldr	r3, [r7, #0]
 801e7e4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 801e7e6:	697b      	ldr	r3, [r7, #20]
 801e7e8:	2b00      	cmp	r3, #0
 801e7ea:	d00d      	beq.n	801e808 <xQueueGenericCreateStatic+0xb4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801e7ec:	697b      	ldr	r3, [r7, #20]
 801e7ee:	2201      	movs	r2, #1
 801e7f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801e7f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 801e7f8:	697b      	ldr	r3, [r7, #20]
 801e7fa:	9300      	str	r3, [sp, #0]
 801e7fc:	4613      	mov	r3, r2
 801e7fe:	687a      	ldr	r2, [r7, #4]
 801e800:	68b9      	ldr	r1, [r7, #8]
 801e802:	68f8      	ldr	r0, [r7, #12]
 801e804:	f000 f84c 	bl	801e8a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801e808:	697b      	ldr	r3, [r7, #20]
	}
 801e80a:	4618      	mov	r0, r3
 801e80c:	3718      	adds	r7, #24
 801e80e:	46bd      	mov	sp, r7
 801e810:	bd80      	pop	{r7, pc}
 801e812:	bf00      	nop
 801e814:	0802cb80 	.word	0x0802cb80
 801e818:	0802cbbc 	.word	0x0802cbbc
 801e81c:	0802cbe0 	.word	0x0802cbe0
 801e820:	0802cbf8 	.word	0x0802cbf8
 801e824:	0802cc30 	.word	0x0802cc30
 801e828:	0802cc68 	.word	0x0802cc68

0801e82c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801e82c:	b580      	push	{r7, lr}
 801e82e:	b08a      	sub	sp, #40	; 0x28
 801e830:	af02      	add	r7, sp, #8
 801e832:	60f8      	str	r0, [r7, #12]
 801e834:	60b9      	str	r1, [r7, #8]
 801e836:	4613      	mov	r3, r2
 801e838:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801e83a:	68fb      	ldr	r3, [r7, #12]
 801e83c:	2b00      	cmp	r3, #0
 801e83e:	d105      	bne.n	801e84c <xQueueGenericCreate+0x20>
 801e840:	f44f 72bb 	mov.w	r2, #374	; 0x176
 801e844:	4914      	ldr	r1, [pc, #80]	; (801e898 <xQueueGenericCreate+0x6c>)
 801e846:	4815      	ldr	r0, [pc, #84]	; (801e89c <xQueueGenericCreate+0x70>)
 801e848:	f7f2 f9e8 	bl	8010c1c <assertFail>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e84c:	68fb      	ldr	r3, [r7, #12]
 801e84e:	68ba      	ldr	r2, [r7, #8]
 801e850:	fb02 f303 	mul.w	r3, r2, r3
 801e854:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801e856:	69fb      	ldr	r3, [r7, #28]
 801e858:	3350      	adds	r3, #80	; 0x50
 801e85a:	4618      	mov	r0, r3
 801e85c:	f002 ffc8 	bl	80217f0 <pvPortMalloc>
 801e860:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801e862:	69bb      	ldr	r3, [r7, #24]
 801e864:	2b00      	cmp	r3, #0
 801e866:	d011      	beq.n	801e88c <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801e868:	69bb      	ldr	r3, [r7, #24]
 801e86a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801e86c:	697b      	ldr	r3, [r7, #20]
 801e86e:	3350      	adds	r3, #80	; 0x50
 801e870:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801e872:	69bb      	ldr	r3, [r7, #24]
 801e874:	2200      	movs	r2, #0
 801e876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801e87a:	79fa      	ldrb	r2, [r7, #7]
 801e87c:	69bb      	ldr	r3, [r7, #24]
 801e87e:	9300      	str	r3, [sp, #0]
 801e880:	4613      	mov	r3, r2
 801e882:	697a      	ldr	r2, [r7, #20]
 801e884:	68b9      	ldr	r1, [r7, #8]
 801e886:	68f8      	ldr	r0, [r7, #12]
 801e888:	f000 f80a 	bl	801e8a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801e88c:	69bb      	ldr	r3, [r7, #24]
	}
 801e88e:	4618      	mov	r0, r3
 801e890:	3720      	adds	r7, #32
 801e892:	46bd      	mov	sp, r7
 801e894:	bd80      	pop	{r7, pc}
 801e896:	bf00      	nop
 801e898:	0802cb80 	.word	0x0802cb80
 801e89c:	0802cbbc 	.word	0x0802cbbc

0801e8a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801e8a0:	b580      	push	{r7, lr}
 801e8a2:	b084      	sub	sp, #16
 801e8a4:	af00      	add	r7, sp, #0
 801e8a6:	60f8      	str	r0, [r7, #12]
 801e8a8:	60b9      	str	r1, [r7, #8]
 801e8aa:	607a      	str	r2, [r7, #4]
 801e8ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801e8ae:	68bb      	ldr	r3, [r7, #8]
 801e8b0:	2b00      	cmp	r3, #0
 801e8b2:	d103      	bne.n	801e8bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801e8b4:	69bb      	ldr	r3, [r7, #24]
 801e8b6:	69ba      	ldr	r2, [r7, #24]
 801e8b8:	601a      	str	r2, [r3, #0]
 801e8ba:	e002      	b.n	801e8c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801e8bc:	69bb      	ldr	r3, [r7, #24]
 801e8be:	687a      	ldr	r2, [r7, #4]
 801e8c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801e8c2:	69bb      	ldr	r3, [r7, #24]
 801e8c4:	68fa      	ldr	r2, [r7, #12]
 801e8c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801e8c8:	69bb      	ldr	r3, [r7, #24]
 801e8ca:	68ba      	ldr	r2, [r7, #8]
 801e8cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801e8ce:	2101      	movs	r1, #1
 801e8d0:	69b8      	ldr	r0, [r7, #24]
 801e8d2:	f7ff fed7 	bl	801e684 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801e8d6:	69bb      	ldr	r3, [r7, #24]
 801e8d8:	78fa      	ldrb	r2, [r7, #3]
 801e8da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801e8de:	bf00      	nop
 801e8e0:	3710      	adds	r7, #16
 801e8e2:	46bd      	mov	sp, r7
 801e8e4:	bd80      	pop	{r7, pc}

0801e8e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801e8e6:	b580      	push	{r7, lr}
 801e8e8:	b082      	sub	sp, #8
 801e8ea:	af00      	add	r7, sp, #0
 801e8ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801e8ee:	687b      	ldr	r3, [r7, #4]
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	d00e      	beq.n	801e912 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801e8f4:	687b      	ldr	r3, [r7, #4]
 801e8f6:	2200      	movs	r2, #0
 801e8f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	2200      	movs	r2, #0
 801e8fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801e900:	687b      	ldr	r3, [r7, #4]
 801e902:	2200      	movs	r2, #0
 801e904:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801e906:	2300      	movs	r3, #0
 801e908:	2200      	movs	r2, #0
 801e90a:	2100      	movs	r1, #0
 801e90c:	6878      	ldr	r0, [r7, #4]
 801e90e:	f000 f837 	bl	801e980 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801e912:	bf00      	nop
 801e914:	3708      	adds	r7, #8
 801e916:	46bd      	mov	sp, r7
 801e918:	bd80      	pop	{r7, pc}

0801e91a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801e91a:	b580      	push	{r7, lr}
 801e91c:	b086      	sub	sp, #24
 801e91e:	af00      	add	r7, sp, #0
 801e920:	4603      	mov	r3, r0
 801e922:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801e924:	2301      	movs	r3, #1
 801e926:	617b      	str	r3, [r7, #20]
 801e928:	2300      	movs	r3, #0
 801e92a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801e92c:	79fb      	ldrb	r3, [r7, #7]
 801e92e:	461a      	mov	r2, r3
 801e930:	6939      	ldr	r1, [r7, #16]
 801e932:	6978      	ldr	r0, [r7, #20]
 801e934:	f7ff ff7a 	bl	801e82c <xQueueGenericCreate>
 801e938:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801e93a:	68f8      	ldr	r0, [r7, #12]
 801e93c:	f7ff ffd3 	bl	801e8e6 <prvInitialiseMutex>

		return xNewQueue;
 801e940:	68fb      	ldr	r3, [r7, #12]
	}
 801e942:	4618      	mov	r0, r3
 801e944:	3718      	adds	r7, #24
 801e946:	46bd      	mov	sp, r7
 801e948:	bd80      	pop	{r7, pc}

0801e94a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801e94a:	b580      	push	{r7, lr}
 801e94c:	b088      	sub	sp, #32
 801e94e:	af02      	add	r7, sp, #8
 801e950:	4603      	mov	r3, r0
 801e952:	6039      	str	r1, [r7, #0]
 801e954:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801e956:	2301      	movs	r3, #1
 801e958:	617b      	str	r3, [r7, #20]
 801e95a:	2300      	movs	r3, #0
 801e95c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801e95e:	79fb      	ldrb	r3, [r7, #7]
 801e960:	9300      	str	r3, [sp, #0]
 801e962:	683b      	ldr	r3, [r7, #0]
 801e964:	2200      	movs	r2, #0
 801e966:	6939      	ldr	r1, [r7, #16]
 801e968:	6978      	ldr	r0, [r7, #20]
 801e96a:	f7ff fef3 	bl	801e754 <xQueueGenericCreateStatic>
 801e96e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801e970:	68f8      	ldr	r0, [r7, #12]
 801e972:	f7ff ffb8 	bl	801e8e6 <prvInitialiseMutex>

		return xNewQueue;
 801e976:	68fb      	ldr	r3, [r7, #12]
	}
 801e978:	4618      	mov	r0, r3
 801e97a:	3718      	adds	r7, #24
 801e97c:	46bd      	mov	sp, r7
 801e97e:	bd80      	pop	{r7, pc}

0801e980 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801e980:	b580      	push	{r7, lr}
 801e982:	b08a      	sub	sp, #40	; 0x28
 801e984:	af00      	add	r7, sp, #0
 801e986:	60f8      	str	r0, [r7, #12]
 801e988:	60b9      	str	r1, [r7, #8]
 801e98a:	607a      	str	r2, [r7, #4]
 801e98c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801e98e:	2300      	movs	r3, #0
 801e990:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801e992:	68fb      	ldr	r3, [r7, #12]
 801e994:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801e996:	6a3b      	ldr	r3, [r7, #32]
 801e998:	2b00      	cmp	r3, #0
 801e99a:	d105      	bne.n	801e9a8 <xQueueGenericSend+0x28>
 801e99c:	f240 22ea 	movw	r2, #746	; 0x2ea
 801e9a0:	4977      	ldr	r1, [pc, #476]	; (801eb80 <xQueueGenericSend+0x200>)
 801e9a2:	4878      	ldr	r0, [pc, #480]	; (801eb84 <xQueueGenericSend+0x204>)
 801e9a4:	f7f2 f93a 	bl	8010c1c <assertFail>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801e9a8:	68bb      	ldr	r3, [r7, #8]
 801e9aa:	2b00      	cmp	r3, #0
 801e9ac:	d103      	bne.n	801e9b6 <xQueueGenericSend+0x36>
 801e9ae:	6a3b      	ldr	r3, [r7, #32]
 801e9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e9b2:	2b00      	cmp	r3, #0
 801e9b4:	d101      	bne.n	801e9ba <xQueueGenericSend+0x3a>
 801e9b6:	2301      	movs	r3, #1
 801e9b8:	e000      	b.n	801e9bc <xQueueGenericSend+0x3c>
 801e9ba:	2300      	movs	r3, #0
 801e9bc:	2b00      	cmp	r3, #0
 801e9be:	d105      	bne.n	801e9cc <xQueueGenericSend+0x4c>
 801e9c0:	f240 22eb 	movw	r2, #747	; 0x2eb
 801e9c4:	496e      	ldr	r1, [pc, #440]	; (801eb80 <xQueueGenericSend+0x200>)
 801e9c6:	4870      	ldr	r0, [pc, #448]	; (801eb88 <xQueueGenericSend+0x208>)
 801e9c8:	f7f2 f928 	bl	8010c1c <assertFail>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801e9cc:	683b      	ldr	r3, [r7, #0]
 801e9ce:	2b02      	cmp	r3, #2
 801e9d0:	d103      	bne.n	801e9da <xQueueGenericSend+0x5a>
 801e9d2:	6a3b      	ldr	r3, [r7, #32]
 801e9d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e9d6:	2b01      	cmp	r3, #1
 801e9d8:	d101      	bne.n	801e9de <xQueueGenericSend+0x5e>
 801e9da:	2301      	movs	r3, #1
 801e9dc:	e000      	b.n	801e9e0 <xQueueGenericSend+0x60>
 801e9de:	2300      	movs	r3, #0
 801e9e0:	2b00      	cmp	r3, #0
 801e9e2:	d105      	bne.n	801e9f0 <xQueueGenericSend+0x70>
 801e9e4:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 801e9e8:	4965      	ldr	r1, [pc, #404]	; (801eb80 <xQueueGenericSend+0x200>)
 801e9ea:	4868      	ldr	r0, [pc, #416]	; (801eb8c <xQueueGenericSend+0x20c>)
 801e9ec:	f7f2 f916 	bl	8010c1c <assertFail>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801e9f0:	f001 fe34 	bl	802065c <xTaskGetSchedulerState>
 801e9f4:	4603      	mov	r3, r0
 801e9f6:	2b00      	cmp	r3, #0
 801e9f8:	d102      	bne.n	801ea00 <xQueueGenericSend+0x80>
 801e9fa:	687b      	ldr	r3, [r7, #4]
 801e9fc:	2b00      	cmp	r3, #0
 801e9fe:	d101      	bne.n	801ea04 <xQueueGenericSend+0x84>
 801ea00:	2301      	movs	r3, #1
 801ea02:	e000      	b.n	801ea06 <xQueueGenericSend+0x86>
 801ea04:	2300      	movs	r3, #0
 801ea06:	2b00      	cmp	r3, #0
 801ea08:	d105      	bne.n	801ea16 <xQueueGenericSend+0x96>
 801ea0a:	f240 22ef 	movw	r2, #751	; 0x2ef
 801ea0e:	495c      	ldr	r1, [pc, #368]	; (801eb80 <xQueueGenericSend+0x200>)
 801ea10:	485f      	ldr	r0, [pc, #380]	; (801eb90 <xQueueGenericSend+0x210>)
 801ea12:	f7f2 f903 	bl	8010c1c <assertFail>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801ea16:	f002 fddb 	bl	80215d0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801ea1a:	6a3b      	ldr	r3, [r7, #32]
 801ea1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ea1e:	6a3b      	ldr	r3, [r7, #32]
 801ea20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ea22:	429a      	cmp	r2, r3
 801ea24:	d302      	bcc.n	801ea2c <xQueueGenericSend+0xac>
 801ea26:	683b      	ldr	r3, [r7, #0]
 801ea28:	2b02      	cmp	r3, #2
 801ea2a:	d12f      	bne.n	801ea8c <xQueueGenericSend+0x10c>
			{
				traceQUEUE_SEND( pxQueue );
 801ea2c:	6a3b      	ldr	r3, [r7, #32]
 801ea2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ea30:	4a58      	ldr	r2, [pc, #352]	; (801eb94 <xQueueGenericSend+0x214>)
 801ea32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ea36:	6013      	str	r3, [r2, #0]
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801ea38:	683a      	ldr	r2, [r7, #0]
 801ea3a:	68b9      	ldr	r1, [r7, #8]
 801ea3c:	6a38      	ldr	r0, [r7, #32]
 801ea3e:	f000 fc2b 	bl	801f298 <prvCopyDataToQueue>
 801ea42:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801ea44:	6a3b      	ldr	r3, [r7, #32]
 801ea46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ea48:	2b00      	cmp	r3, #0
 801ea4a:	d010      	beq.n	801ea6e <xQueueGenericSend+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801ea4c:	6a3b      	ldr	r3, [r7, #32]
 801ea4e:	3324      	adds	r3, #36	; 0x24
 801ea50:	4618      	mov	r0, r3
 801ea52:	f001 fb71 	bl	8020138 <xTaskRemoveFromEventList>
 801ea56:	4603      	mov	r3, r0
 801ea58:	2b00      	cmp	r3, #0
 801ea5a:	d013      	beq.n	801ea84 <xQueueGenericSend+0x104>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801ea5c:	4b4e      	ldr	r3, [pc, #312]	; (801eb98 <xQueueGenericSend+0x218>)
 801ea5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ea62:	601a      	str	r2, [r3, #0]
 801ea64:	f3bf 8f4f 	dsb	sy
 801ea68:	f3bf 8f6f 	isb	sy
 801ea6c:	e00a      	b.n	801ea84 <xQueueGenericSend+0x104>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801ea6e:	69fb      	ldr	r3, [r7, #28]
 801ea70:	2b00      	cmp	r3, #0
 801ea72:	d007      	beq.n	801ea84 <xQueueGenericSend+0x104>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801ea74:	4b48      	ldr	r3, [pc, #288]	; (801eb98 <xQueueGenericSend+0x218>)
 801ea76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ea7a:	601a      	str	r2, [r3, #0]
 801ea7c:	f3bf 8f4f 	dsb	sy
 801ea80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801ea84:	f002 fdd2 	bl	802162c <vPortExitCritical>
				return pdPASS;
 801ea88:	2301      	movs	r3, #1
 801ea8a:	e075      	b.n	801eb78 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801ea8c:	687b      	ldr	r3, [r7, #4]
 801ea8e:	2b00      	cmp	r3, #0
 801ea90:	d109      	bne.n	801eaa6 <xQueueGenericSend+0x126>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801ea92:	f002 fdcb 	bl	802162c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 801ea96:	6a3b      	ldr	r3, [r7, #32]
 801ea98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ea9a:	4a3e      	ldr	r2, [pc, #248]	; (801eb94 <xQueueGenericSend+0x214>)
 801ea9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801eaa0:	6013      	str	r3, [r2, #0]
					return errQUEUE_FULL;
 801eaa2:	2300      	movs	r3, #0
 801eaa4:	e068      	b.n	801eb78 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801eaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eaa8:	2b00      	cmp	r3, #0
 801eaaa:	d106      	bne.n	801eaba <xQueueGenericSend+0x13a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801eaac:	f107 0314 	add.w	r3, r7, #20
 801eab0:	4618      	mov	r0, r3
 801eab2:	f001 fba3 	bl	80201fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801eab6:	2301      	movs	r3, #1
 801eab8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801eaba:	f002 fdb7 	bl	802162c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801eabe:	f001 f825 	bl	801fb0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801eac2:	f002 fd85 	bl	80215d0 <vPortEnterCritical>
 801eac6:	6a3b      	ldr	r3, [r7, #32]
 801eac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801eacc:	b25b      	sxtb	r3, r3
 801eace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ead2:	d103      	bne.n	801eadc <xQueueGenericSend+0x15c>
 801ead4:	6a3b      	ldr	r3, [r7, #32]
 801ead6:	2200      	movs	r2, #0
 801ead8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801eadc:	6a3b      	ldr	r3, [r7, #32]
 801eade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801eae2:	b25b      	sxtb	r3, r3
 801eae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801eae8:	d103      	bne.n	801eaf2 <xQueueGenericSend+0x172>
 801eaea:	6a3b      	ldr	r3, [r7, #32]
 801eaec:	2200      	movs	r2, #0
 801eaee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801eaf2:	f002 fd9b 	bl	802162c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801eaf6:	1d3a      	adds	r2, r7, #4
 801eaf8:	f107 0314 	add.w	r3, r7, #20
 801eafc:	4611      	mov	r1, r2
 801eafe:	4618      	mov	r0, r3
 801eb00:	f001 fb92 	bl	8020228 <xTaskCheckForTimeOut>
 801eb04:	4603      	mov	r3, r0
 801eb06:	2b00      	cmp	r3, #0
 801eb08:	d12a      	bne.n	801eb60 <xQueueGenericSend+0x1e0>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801eb0a:	6a38      	ldr	r0, [r7, #32]
 801eb0c:	f000 fcbc 	bl	801f488 <prvIsQueueFull>
 801eb10:	4603      	mov	r3, r0
 801eb12:	2b00      	cmp	r3, #0
 801eb14:	d01e      	beq.n	801eb54 <xQueueGenericSend+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 801eb16:	6a3b      	ldr	r3, [r7, #32]
 801eb18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801eb1a:	4a1e      	ldr	r2, [pc, #120]	; (801eb94 <xQueueGenericSend+0x214>)
 801eb1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801eb20:	6013      	str	r3, [r2, #0]
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801eb22:	6a3b      	ldr	r3, [r7, #32]
 801eb24:	3310      	adds	r3, #16
 801eb26:	687a      	ldr	r2, [r7, #4]
 801eb28:	4611      	mov	r1, r2
 801eb2a:	4618      	mov	r0, r3
 801eb2c:	f001 fab6 	bl	802009c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801eb30:	6a38      	ldr	r0, [r7, #32]
 801eb32:	f000 fc41 	bl	801f3b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801eb36:	f000 fff7 	bl	801fb28 <xTaskResumeAll>
 801eb3a:	4603      	mov	r3, r0
 801eb3c:	2b00      	cmp	r3, #0
 801eb3e:	f47f af6a 	bne.w	801ea16 <xQueueGenericSend+0x96>
				{
					portYIELD_WITHIN_API();
 801eb42:	4b15      	ldr	r3, [pc, #84]	; (801eb98 <xQueueGenericSend+0x218>)
 801eb44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801eb48:	601a      	str	r2, [r3, #0]
 801eb4a:	f3bf 8f4f 	dsb	sy
 801eb4e:	f3bf 8f6f 	isb	sy
 801eb52:	e760      	b.n	801ea16 <xQueueGenericSend+0x96>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801eb54:	6a38      	ldr	r0, [r7, #32]
 801eb56:	f000 fc2f 	bl	801f3b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801eb5a:	f000 ffe5 	bl	801fb28 <xTaskResumeAll>
 801eb5e:	e75a      	b.n	801ea16 <xQueueGenericSend+0x96>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801eb60:	6a38      	ldr	r0, [r7, #32]
 801eb62:	f000 fc29 	bl	801f3b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801eb66:	f000 ffdf 	bl	801fb28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 801eb6a:	6a3b      	ldr	r3, [r7, #32]
 801eb6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801eb6e:	4a09      	ldr	r2, [pc, #36]	; (801eb94 <xQueueGenericSend+0x214>)
 801eb70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801eb74:	6013      	str	r3, [r2, #0]
			return errQUEUE_FULL;
 801eb76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801eb78:	4618      	mov	r0, r3
 801eb7a:	3728      	adds	r7, #40	; 0x28
 801eb7c:	46bd      	mov	sp, r7
 801eb7e:	bd80      	pop	{r7, pc}
 801eb80:	0802cb80 	.word	0x0802cb80
 801eb84:	0802cbb4 	.word	0x0802cbb4
 801eb88:	0802cc84 	.word	0x0802cc84
 801eb8c:	0802ccd4 	.word	0x0802ccd4
 801eb90:	0802cd1c 	.word	0x0802cd1c
 801eb94:	e000000c 	.word	0xe000000c
 801eb98:	e000ed04 	.word	0xe000ed04

0801eb9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801eb9c:	b580      	push	{r7, lr}
 801eb9e:	b08c      	sub	sp, #48	; 0x30
 801eba0:	af00      	add	r7, sp, #0
 801eba2:	60f8      	str	r0, [r7, #12]
 801eba4:	60b9      	str	r1, [r7, #8]
 801eba6:	607a      	str	r2, [r7, #4]
 801eba8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801ebaa:	68fb      	ldr	r3, [r7, #12]
 801ebac:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 801ebae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ebb0:	2b00      	cmp	r3, #0
 801ebb2:	d105      	bne.n	801ebc0 <xQueueGenericSendFromISR+0x24>
 801ebb4:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 801ebb8:	493e      	ldr	r1, [pc, #248]	; (801ecb4 <xQueueGenericSendFromISR+0x118>)
 801ebba:	483f      	ldr	r0, [pc, #252]	; (801ecb8 <xQueueGenericSendFromISR+0x11c>)
 801ebbc:	f7f2 f82e 	bl	8010c1c <assertFail>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801ebc0:	68bb      	ldr	r3, [r7, #8]
 801ebc2:	2b00      	cmp	r3, #0
 801ebc4:	d103      	bne.n	801ebce <xQueueGenericSendFromISR+0x32>
 801ebc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ebc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ebca:	2b00      	cmp	r3, #0
 801ebcc:	d101      	bne.n	801ebd2 <xQueueGenericSendFromISR+0x36>
 801ebce:	2301      	movs	r3, #1
 801ebd0:	e000      	b.n	801ebd4 <xQueueGenericSendFromISR+0x38>
 801ebd2:	2300      	movs	r3, #0
 801ebd4:	2b00      	cmp	r3, #0
 801ebd6:	d105      	bne.n	801ebe4 <xQueueGenericSendFromISR+0x48>
 801ebd8:	f240 32bd 	movw	r2, #957	; 0x3bd
 801ebdc:	4935      	ldr	r1, [pc, #212]	; (801ecb4 <xQueueGenericSendFromISR+0x118>)
 801ebde:	4837      	ldr	r0, [pc, #220]	; (801ecbc <xQueueGenericSendFromISR+0x120>)
 801ebe0:	f7f2 f81c 	bl	8010c1c <assertFail>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801ebe4:	683b      	ldr	r3, [r7, #0]
 801ebe6:	2b02      	cmp	r3, #2
 801ebe8:	d103      	bne.n	801ebf2 <xQueueGenericSendFromISR+0x56>
 801ebea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ebec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ebee:	2b01      	cmp	r3, #1
 801ebf0:	d101      	bne.n	801ebf6 <xQueueGenericSendFromISR+0x5a>
 801ebf2:	2301      	movs	r3, #1
 801ebf4:	e000      	b.n	801ebf8 <xQueueGenericSendFromISR+0x5c>
 801ebf6:	2300      	movs	r3, #0
 801ebf8:	2b00      	cmp	r3, #0
 801ebfa:	d105      	bne.n	801ec08 <xQueueGenericSendFromISR+0x6c>
 801ebfc:	f240 32be 	movw	r2, #958	; 0x3be
 801ec00:	492c      	ldr	r1, [pc, #176]	; (801ecb4 <xQueueGenericSendFromISR+0x118>)
 801ec02:	482f      	ldr	r0, [pc, #188]	; (801ecc0 <xQueueGenericSendFromISR+0x124>)
 801ec04:	f7f2 f80a 	bl	8010c1c <assertFail>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801ec08:	f002 fdb8 	bl	802177c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801ec0c:	f3ef 8211 	mrs	r2, BASEPRI
 801ec10:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ec14:	f383 8811 	msr	BASEPRI, r3
 801ec18:	f3bf 8f6f 	isb	sy
 801ec1c:	f3bf 8f4f 	dsb	sy
 801ec20:	61ba      	str	r2, [r7, #24]
 801ec22:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801ec24:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801ec26:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801ec28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ec2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ec2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ec2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ec30:	429a      	cmp	r2, r3
 801ec32:	d302      	bcc.n	801ec3a <xQueueGenericSendFromISR+0x9e>
 801ec34:	683b      	ldr	r3, [r7, #0]
 801ec36:	2b02      	cmp	r3, #2
 801ec38:	d12f      	bne.n	801ec9a <xQueueGenericSendFromISR+0xfe>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801ec3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ec3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ec40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801ec44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ec46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ec48:	61fb      	str	r3, [r7, #28]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801ec4a:	683a      	ldr	r2, [r7, #0]
 801ec4c:	68b9      	ldr	r1, [r7, #8]
 801ec4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ec50:	f000 fb22 	bl	801f298 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801ec54:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801ec58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ec5c:	d112      	bne.n	801ec84 <xQueueGenericSendFromISR+0xe8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801ec5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ec60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec62:	2b00      	cmp	r3, #0
 801ec64:	d016      	beq.n	801ec94 <xQueueGenericSendFromISR+0xf8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801ec66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ec68:	3324      	adds	r3, #36	; 0x24
 801ec6a:	4618      	mov	r0, r3
 801ec6c:	f001 fa64 	bl	8020138 <xTaskRemoveFromEventList>
 801ec70:	4603      	mov	r3, r0
 801ec72:	2b00      	cmp	r3, #0
 801ec74:	d00e      	beq.n	801ec94 <xQueueGenericSendFromISR+0xf8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801ec76:	687b      	ldr	r3, [r7, #4]
 801ec78:	2b00      	cmp	r3, #0
 801ec7a:	d00b      	beq.n	801ec94 <xQueueGenericSendFromISR+0xf8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801ec7c:	687b      	ldr	r3, [r7, #4]
 801ec7e:	2201      	movs	r2, #1
 801ec80:	601a      	str	r2, [r3, #0]
 801ec82:	e007      	b.n	801ec94 <xQueueGenericSendFromISR+0xf8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801ec84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ec88:	3301      	adds	r3, #1
 801ec8a:	b2db      	uxtb	r3, r3
 801ec8c:	b25a      	sxtb	r2, r3
 801ec8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ec90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801ec94:	2301      	movs	r3, #1
 801ec96:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 801ec98:	e001      	b.n	801ec9e <xQueueGenericSendFromISR+0x102>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801ec9a:	2300      	movs	r3, #0
 801ec9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ec9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eca0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801eca2:	693b      	ldr	r3, [r7, #16]
 801eca4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801eca8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801ecaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801ecac:	4618      	mov	r0, r3
 801ecae:	3730      	adds	r7, #48	; 0x30
 801ecb0:	46bd      	mov	sp, r7
 801ecb2:	bd80      	pop	{r7, pc}
 801ecb4:	0802cb80 	.word	0x0802cb80
 801ecb8:	0802cbb4 	.word	0x0802cbb4
 801ecbc:	0802cc84 	.word	0x0802cc84
 801ecc0:	0802ccd4 	.word	0x0802ccd4

0801ecc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801ecc4:	b580      	push	{r7, lr}
 801ecc6:	b08a      	sub	sp, #40	; 0x28
 801ecc8:	af00      	add	r7, sp, #0
 801ecca:	60f8      	str	r0, [r7, #12]
 801eccc:	60b9      	str	r1, [r7, #8]
 801ecce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801ecd0:	2300      	movs	r3, #0
 801ecd2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801ecd4:	68fb      	ldr	r3, [r7, #12]
 801ecd6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801ecd8:	6a3b      	ldr	r3, [r7, #32]
 801ecda:	2b00      	cmp	r3, #0
 801ecdc:	d105      	bne.n	801ecea <xQueueReceive+0x26>
 801ecde:	f240 5204 	movw	r2, #1284	; 0x504
 801ece2:	4962      	ldr	r1, [pc, #392]	; (801ee6c <xQueueReceive+0x1a8>)
 801ece4:	4862      	ldr	r0, [pc, #392]	; (801ee70 <xQueueReceive+0x1ac>)
 801ece6:	f7f1 ff99 	bl	8010c1c <assertFail>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801ecea:	68bb      	ldr	r3, [r7, #8]
 801ecec:	2b00      	cmp	r3, #0
 801ecee:	d103      	bne.n	801ecf8 <xQueueReceive+0x34>
 801ecf0:	6a3b      	ldr	r3, [r7, #32]
 801ecf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ecf4:	2b00      	cmp	r3, #0
 801ecf6:	d101      	bne.n	801ecfc <xQueueReceive+0x38>
 801ecf8:	2301      	movs	r3, #1
 801ecfa:	e000      	b.n	801ecfe <xQueueReceive+0x3a>
 801ecfc:	2300      	movs	r3, #0
 801ecfe:	2b00      	cmp	r3, #0
 801ed00:	d105      	bne.n	801ed0e <xQueueReceive+0x4a>
 801ed02:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 801ed06:	4959      	ldr	r1, [pc, #356]	; (801ee6c <xQueueReceive+0x1a8>)
 801ed08:	485a      	ldr	r0, [pc, #360]	; (801ee74 <xQueueReceive+0x1b0>)
 801ed0a:	f7f1 ff87 	bl	8010c1c <assertFail>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801ed0e:	f001 fca5 	bl	802065c <xTaskGetSchedulerState>
 801ed12:	4603      	mov	r3, r0
 801ed14:	2b00      	cmp	r3, #0
 801ed16:	d102      	bne.n	801ed1e <xQueueReceive+0x5a>
 801ed18:	687b      	ldr	r3, [r7, #4]
 801ed1a:	2b00      	cmp	r3, #0
 801ed1c:	d101      	bne.n	801ed22 <xQueueReceive+0x5e>
 801ed1e:	2301      	movs	r3, #1
 801ed20:	e000      	b.n	801ed24 <xQueueReceive+0x60>
 801ed22:	2300      	movs	r3, #0
 801ed24:	2b00      	cmp	r3, #0
 801ed26:	d105      	bne.n	801ed34 <xQueueReceive+0x70>
 801ed28:	f240 520d 	movw	r2, #1293	; 0x50d
 801ed2c:	494f      	ldr	r1, [pc, #316]	; (801ee6c <xQueueReceive+0x1a8>)
 801ed2e:	4852      	ldr	r0, [pc, #328]	; (801ee78 <xQueueReceive+0x1b4>)
 801ed30:	f7f1 ff74 	bl	8010c1c <assertFail>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801ed34:	f002 fc4c 	bl	80215d0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801ed38:	6a3b      	ldr	r3, [r7, #32]
 801ed3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ed3c:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801ed3e:	69fb      	ldr	r3, [r7, #28]
 801ed40:	2b00      	cmp	r3, #0
 801ed42:	d01f      	beq.n	801ed84 <xQueueReceive+0xc0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801ed44:	68b9      	ldr	r1, [r7, #8]
 801ed46:	6a38      	ldr	r0, [r7, #32]
 801ed48:	f000 fb10 	bl	801f36c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801ed4c:	69fb      	ldr	r3, [r7, #28]
 801ed4e:	1e5a      	subs	r2, r3, #1
 801ed50:	6a3b      	ldr	r3, [r7, #32]
 801ed52:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801ed54:	6a3b      	ldr	r3, [r7, #32]
 801ed56:	691b      	ldr	r3, [r3, #16]
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	d00f      	beq.n	801ed7c <xQueueReceive+0xb8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801ed5c:	6a3b      	ldr	r3, [r7, #32]
 801ed5e:	3310      	adds	r3, #16
 801ed60:	4618      	mov	r0, r3
 801ed62:	f001 f9e9 	bl	8020138 <xTaskRemoveFromEventList>
 801ed66:	4603      	mov	r3, r0
 801ed68:	2b00      	cmp	r3, #0
 801ed6a:	d007      	beq.n	801ed7c <xQueueReceive+0xb8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801ed6c:	4b43      	ldr	r3, [pc, #268]	; (801ee7c <xQueueReceive+0x1b8>)
 801ed6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ed72:	601a      	str	r2, [r3, #0]
 801ed74:	f3bf 8f4f 	dsb	sy
 801ed78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801ed7c:	f002 fc56 	bl	802162c <vPortExitCritical>
				return pdPASS;
 801ed80:	2301      	movs	r3, #1
 801ed82:	e06f      	b.n	801ee64 <xQueueReceive+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801ed84:	687b      	ldr	r3, [r7, #4]
 801ed86:	2b00      	cmp	r3, #0
 801ed88:	d103      	bne.n	801ed92 <xQueueReceive+0xce>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801ed8a:	f002 fc4f 	bl	802162c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801ed8e:	2300      	movs	r3, #0
 801ed90:	e068      	b.n	801ee64 <xQueueReceive+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801ed92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed94:	2b00      	cmp	r3, #0
 801ed96:	d106      	bne.n	801eda6 <xQueueReceive+0xe2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801ed98:	f107 0314 	add.w	r3, r7, #20
 801ed9c:	4618      	mov	r0, r3
 801ed9e:	f001 fa2d 	bl	80201fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801eda2:	2301      	movs	r3, #1
 801eda4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801eda6:	f002 fc41 	bl	802162c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801edaa:	f000 feaf 	bl	801fb0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801edae:	f002 fc0f 	bl	80215d0 <vPortEnterCritical>
 801edb2:	6a3b      	ldr	r3, [r7, #32]
 801edb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801edb8:	b25b      	sxtb	r3, r3
 801edba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801edbe:	d103      	bne.n	801edc8 <xQueueReceive+0x104>
 801edc0:	6a3b      	ldr	r3, [r7, #32]
 801edc2:	2200      	movs	r2, #0
 801edc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801edc8:	6a3b      	ldr	r3, [r7, #32]
 801edca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801edce:	b25b      	sxtb	r3, r3
 801edd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801edd4:	d103      	bne.n	801edde <xQueueReceive+0x11a>
 801edd6:	6a3b      	ldr	r3, [r7, #32]
 801edd8:	2200      	movs	r2, #0
 801edda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801edde:	f002 fc25 	bl	802162c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801ede2:	1d3a      	adds	r2, r7, #4
 801ede4:	f107 0314 	add.w	r3, r7, #20
 801ede8:	4611      	mov	r1, r2
 801edea:	4618      	mov	r0, r3
 801edec:	f001 fa1c 	bl	8020228 <xTaskCheckForTimeOut>
 801edf0:	4603      	mov	r3, r0
 801edf2:	2b00      	cmp	r3, #0
 801edf4:	d129      	bne.n	801ee4a <xQueueReceive+0x186>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801edf6:	6a38      	ldr	r0, [r7, #32]
 801edf8:	f000 fb30 	bl	801f45c <prvIsQueueEmpty>
 801edfc:	4603      	mov	r3, r0
 801edfe:	2b00      	cmp	r3, #0
 801ee00:	d01d      	beq.n	801ee3e <xQueueReceive+0x17a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 801ee02:	6a3b      	ldr	r3, [r7, #32]
 801ee04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ee06:	4a1e      	ldr	r2, [pc, #120]	; (801ee80 <xQueueReceive+0x1bc>)
 801ee08:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801ee0c:	6013      	str	r3, [r2, #0]
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801ee0e:	6a3b      	ldr	r3, [r7, #32]
 801ee10:	3324      	adds	r3, #36	; 0x24
 801ee12:	687a      	ldr	r2, [r7, #4]
 801ee14:	4611      	mov	r1, r2
 801ee16:	4618      	mov	r0, r3
 801ee18:	f001 f940 	bl	802009c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801ee1c:	6a38      	ldr	r0, [r7, #32]
 801ee1e:	f000 facb 	bl	801f3b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801ee22:	f000 fe81 	bl	801fb28 <xTaskResumeAll>
 801ee26:	4603      	mov	r3, r0
 801ee28:	2b00      	cmp	r3, #0
 801ee2a:	d183      	bne.n	801ed34 <xQueueReceive+0x70>
				{
					portYIELD_WITHIN_API();
 801ee2c:	4b13      	ldr	r3, [pc, #76]	; (801ee7c <xQueueReceive+0x1b8>)
 801ee2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ee32:	601a      	str	r2, [r3, #0]
 801ee34:	f3bf 8f4f 	dsb	sy
 801ee38:	f3bf 8f6f 	isb	sy
 801ee3c:	e77a      	b.n	801ed34 <xQueueReceive+0x70>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801ee3e:	6a38      	ldr	r0, [r7, #32]
 801ee40:	f000 faba 	bl	801f3b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801ee44:	f000 fe70 	bl	801fb28 <xTaskResumeAll>
 801ee48:	e774      	b.n	801ed34 <xQueueReceive+0x70>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801ee4a:	6a38      	ldr	r0, [r7, #32]
 801ee4c:	f000 fab4 	bl	801f3b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801ee50:	f000 fe6a 	bl	801fb28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801ee54:	6a38      	ldr	r0, [r7, #32]
 801ee56:	f000 fb01 	bl	801f45c <prvIsQueueEmpty>
 801ee5a:	4603      	mov	r3, r0
 801ee5c:	2b00      	cmp	r3, #0
 801ee5e:	f43f af69 	beq.w	801ed34 <xQueueReceive+0x70>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801ee62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801ee64:	4618      	mov	r0, r3
 801ee66:	3728      	adds	r7, #40	; 0x28
 801ee68:	46bd      	mov	sp, r7
 801ee6a:	bd80      	pop	{r7, pc}
 801ee6c:	0802cb80 	.word	0x0802cb80
 801ee70:	0802cdf8 	.word	0x0802cdf8
 801ee74:	0802ce04 	.word	0x0802ce04
 801ee78:	0802cd1c 	.word	0x0802cd1c
 801ee7c:	e000ed04 	.word	0xe000ed04
 801ee80:	e000000c 	.word	0xe000000c

0801ee84 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801ee84:	b580      	push	{r7, lr}
 801ee86:	b08a      	sub	sp, #40	; 0x28
 801ee88:	af00      	add	r7, sp, #0
 801ee8a:	6078      	str	r0, [r7, #4]
 801ee8c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801ee8e:	2300      	movs	r3, #0
 801ee90:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801ee92:	687b      	ldr	r3, [r7, #4]
 801ee94:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801ee96:	2300      	movs	r3, #0
 801ee98:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801ee9a:	69fb      	ldr	r3, [r7, #28]
 801ee9c:	2b00      	cmp	r3, #0
 801ee9e:	d105      	bne.n	801eeac <xQueueSemaphoreTake+0x28>
 801eea0:	f240 5295 	movw	r2, #1429	; 0x595
 801eea4:	4975      	ldr	r1, [pc, #468]	; (801f07c <xQueueSemaphoreTake+0x1f8>)
 801eea6:	4876      	ldr	r0, [pc, #472]	; (801f080 <xQueueSemaphoreTake+0x1fc>)
 801eea8:	f7f1 feb8 	bl	8010c1c <assertFail>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801eeac:	69fb      	ldr	r3, [r7, #28]
 801eeae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eeb0:	2b00      	cmp	r3, #0
 801eeb2:	d005      	beq.n	801eec0 <xQueueSemaphoreTake+0x3c>
 801eeb4:	f240 5299 	movw	r2, #1433	; 0x599
 801eeb8:	4970      	ldr	r1, [pc, #448]	; (801f07c <xQueueSemaphoreTake+0x1f8>)
 801eeba:	4872      	ldr	r0, [pc, #456]	; (801f084 <xQueueSemaphoreTake+0x200>)
 801eebc:	f7f1 feae 	bl	8010c1c <assertFail>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801eec0:	f001 fbcc 	bl	802065c <xTaskGetSchedulerState>
 801eec4:	4603      	mov	r3, r0
 801eec6:	2b00      	cmp	r3, #0
 801eec8:	d102      	bne.n	801eed0 <xQueueSemaphoreTake+0x4c>
 801eeca:	683b      	ldr	r3, [r7, #0]
 801eecc:	2b00      	cmp	r3, #0
 801eece:	d101      	bne.n	801eed4 <xQueueSemaphoreTake+0x50>
 801eed0:	2301      	movs	r3, #1
 801eed2:	e000      	b.n	801eed6 <xQueueSemaphoreTake+0x52>
 801eed4:	2300      	movs	r3, #0
 801eed6:	2b00      	cmp	r3, #0
 801eed8:	d105      	bne.n	801eee6 <xQueueSemaphoreTake+0x62>
 801eeda:	f240 529e 	movw	r2, #1438	; 0x59e
 801eede:	4967      	ldr	r1, [pc, #412]	; (801f07c <xQueueSemaphoreTake+0x1f8>)
 801eee0:	4869      	ldr	r0, [pc, #420]	; (801f088 <xQueueSemaphoreTake+0x204>)
 801eee2:	f7f1 fe9b 	bl	8010c1c <assertFail>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801eee6:	f002 fb73 	bl	80215d0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801eeea:	69fb      	ldr	r3, [r7, #28]
 801eeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eeee:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801eef0:	69bb      	ldr	r3, [r7, #24]
 801eef2:	2b00      	cmp	r3, #0
 801eef4:	d024      	beq.n	801ef40 <xQueueSemaphoreTake+0xbc>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801eef6:	69bb      	ldr	r3, [r7, #24]
 801eef8:	1e5a      	subs	r2, r3, #1
 801eefa:	69fb      	ldr	r3, [r7, #28]
 801eefc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801eefe:	69fb      	ldr	r3, [r7, #28]
 801ef00:	681b      	ldr	r3, [r3, #0]
 801ef02:	2b00      	cmp	r3, #0
 801ef04:	d104      	bne.n	801ef10 <xQueueSemaphoreTake+0x8c>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801ef06:	f001 fd49 	bl	802099c <pvTaskIncrementMutexHeldCount>
 801ef0a:	4602      	mov	r2, r0
 801ef0c:	69fb      	ldr	r3, [r7, #28]
 801ef0e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801ef10:	69fb      	ldr	r3, [r7, #28]
 801ef12:	691b      	ldr	r3, [r3, #16]
 801ef14:	2b00      	cmp	r3, #0
 801ef16:	d00f      	beq.n	801ef38 <xQueueSemaphoreTake+0xb4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801ef18:	69fb      	ldr	r3, [r7, #28]
 801ef1a:	3310      	adds	r3, #16
 801ef1c:	4618      	mov	r0, r3
 801ef1e:	f001 f90b 	bl	8020138 <xTaskRemoveFromEventList>
 801ef22:	4603      	mov	r3, r0
 801ef24:	2b00      	cmp	r3, #0
 801ef26:	d007      	beq.n	801ef38 <xQueueSemaphoreTake+0xb4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801ef28:	4b58      	ldr	r3, [pc, #352]	; (801f08c <xQueueSemaphoreTake+0x208>)
 801ef2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ef2e:	601a      	str	r2, [r3, #0]
 801ef30:	f3bf 8f4f 	dsb	sy
 801ef34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801ef38:	f002 fb78 	bl	802162c <vPortExitCritical>
				return pdPASS;
 801ef3c:	2301      	movs	r3, #1
 801ef3e:	e098      	b.n	801f072 <xQueueSemaphoreTake+0x1ee>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801ef40:	683b      	ldr	r3, [r7, #0]
 801ef42:	2b00      	cmp	r3, #0
 801ef44:	d10c      	bne.n	801ef60 <xQueueSemaphoreTake+0xdc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801ef46:	6a3b      	ldr	r3, [r7, #32]
 801ef48:	2b00      	cmp	r3, #0
 801ef4a:	d005      	beq.n	801ef58 <xQueueSemaphoreTake+0xd4>
 801ef4c:	f240 52e5 	movw	r2, #1509	; 0x5e5
 801ef50:	494a      	ldr	r1, [pc, #296]	; (801f07c <xQueueSemaphoreTake+0x1f8>)
 801ef52:	484f      	ldr	r0, [pc, #316]	; (801f090 <xQueueSemaphoreTake+0x20c>)
 801ef54:	f7f1 fe62 	bl	8010c1c <assertFail>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801ef58:	f002 fb68 	bl	802162c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801ef5c:	2300      	movs	r3, #0
 801ef5e:	e088      	b.n	801f072 <xQueueSemaphoreTake+0x1ee>
				}
				else if( xEntryTimeSet == pdFALSE )
 801ef60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef62:	2b00      	cmp	r3, #0
 801ef64:	d106      	bne.n	801ef74 <xQueueSemaphoreTake+0xf0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801ef66:	f107 030c 	add.w	r3, r7, #12
 801ef6a:	4618      	mov	r0, r3
 801ef6c:	f001 f946 	bl	80201fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801ef70:	2301      	movs	r3, #1
 801ef72:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801ef74:	f002 fb5a 	bl	802162c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801ef78:	f000 fdc8 	bl	801fb0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801ef7c:	f002 fb28 	bl	80215d0 <vPortEnterCritical>
 801ef80:	69fb      	ldr	r3, [r7, #28]
 801ef82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ef86:	b25b      	sxtb	r3, r3
 801ef88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ef8c:	d103      	bne.n	801ef96 <xQueueSemaphoreTake+0x112>
 801ef8e:	69fb      	ldr	r3, [r7, #28]
 801ef90:	2200      	movs	r2, #0
 801ef92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ef96:	69fb      	ldr	r3, [r7, #28]
 801ef98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ef9c:	b25b      	sxtb	r3, r3
 801ef9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801efa2:	d103      	bne.n	801efac <xQueueSemaphoreTake+0x128>
 801efa4:	69fb      	ldr	r3, [r7, #28]
 801efa6:	2200      	movs	r2, #0
 801efa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801efac:	f002 fb3e 	bl	802162c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801efb0:	463a      	mov	r2, r7
 801efb2:	f107 030c 	add.w	r3, r7, #12
 801efb6:	4611      	mov	r1, r2
 801efb8:	4618      	mov	r0, r3
 801efba:	f001 f935 	bl	8020228 <xTaskCheckForTimeOut>
 801efbe:	4603      	mov	r3, r0
 801efc0:	2b00      	cmp	r3, #0
 801efc2:	d138      	bne.n	801f036 <xQueueSemaphoreTake+0x1b2>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801efc4:	69f8      	ldr	r0, [r7, #28]
 801efc6:	f000 fa49 	bl	801f45c <prvIsQueueEmpty>
 801efca:	4603      	mov	r3, r0
 801efcc:	2b00      	cmp	r3, #0
 801efce:	d02c      	beq.n	801f02a <xQueueSemaphoreTake+0x1a6>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 801efd0:	69fb      	ldr	r3, [r7, #28]
 801efd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801efd4:	4a2f      	ldr	r2, [pc, #188]	; (801f094 <xQueueSemaphoreTake+0x210>)
 801efd6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801efda:	6013      	str	r3, [r2, #0]

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801efdc:	69fb      	ldr	r3, [r7, #28]
 801efde:	681b      	ldr	r3, [r3, #0]
 801efe0:	2b00      	cmp	r3, #0
 801efe2:	d109      	bne.n	801eff8 <xQueueSemaphoreTake+0x174>
					{
						taskENTER_CRITICAL();
 801efe4:	f002 faf4 	bl	80215d0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801efe8:	69fb      	ldr	r3, [r7, #28]
 801efea:	689b      	ldr	r3, [r3, #8]
 801efec:	4618      	mov	r0, r3
 801efee:	f001 fb53 	bl	8020698 <xTaskPriorityInherit>
 801eff2:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 801eff4:	f002 fb1a 	bl	802162c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801eff8:	69fb      	ldr	r3, [r7, #28]
 801effa:	3324      	adds	r3, #36	; 0x24
 801effc:	683a      	ldr	r2, [r7, #0]
 801effe:	4611      	mov	r1, r2
 801f000:	4618      	mov	r0, r3
 801f002:	f001 f84b 	bl	802009c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801f006:	69f8      	ldr	r0, [r7, #28]
 801f008:	f000 f9d6 	bl	801f3b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801f00c:	f000 fd8c 	bl	801fb28 <xTaskResumeAll>
 801f010:	4603      	mov	r3, r0
 801f012:	2b00      	cmp	r3, #0
 801f014:	f47f af67 	bne.w	801eee6 <xQueueSemaphoreTake+0x62>
				{
					portYIELD_WITHIN_API();
 801f018:	4b1c      	ldr	r3, [pc, #112]	; (801f08c <xQueueSemaphoreTake+0x208>)
 801f01a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f01e:	601a      	str	r2, [r3, #0]
 801f020:	f3bf 8f4f 	dsb	sy
 801f024:	f3bf 8f6f 	isb	sy
 801f028:	e75d      	b.n	801eee6 <xQueueSemaphoreTake+0x62>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801f02a:	69f8      	ldr	r0, [r7, #28]
 801f02c:	f000 f9c4 	bl	801f3b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801f030:	f000 fd7a 	bl	801fb28 <xTaskResumeAll>
 801f034:	e757      	b.n	801eee6 <xQueueSemaphoreTake+0x62>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801f036:	69f8      	ldr	r0, [r7, #28]
 801f038:	f000 f9be 	bl	801f3b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801f03c:	f000 fd74 	bl	801fb28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801f040:	69f8      	ldr	r0, [r7, #28]
 801f042:	f000 fa0b 	bl	801f45c <prvIsQueueEmpty>
 801f046:	4603      	mov	r3, r0
 801f048:	2b00      	cmp	r3, #0
 801f04a:	f43f af4c 	beq.w	801eee6 <xQueueSemaphoreTake+0x62>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801f04e:	6a3b      	ldr	r3, [r7, #32]
 801f050:	2b00      	cmp	r3, #0
 801f052:	d00d      	beq.n	801f070 <xQueueSemaphoreTake+0x1ec>
					{
						taskENTER_CRITICAL();
 801f054:	f002 fabc 	bl	80215d0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801f058:	69f8      	ldr	r0, [r7, #28]
 801f05a:	f000 f905 	bl	801f268 <prvGetDisinheritPriorityAfterTimeout>
 801f05e:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801f060:	69fb      	ldr	r3, [r7, #28]
 801f062:	689b      	ldr	r3, [r3, #8]
 801f064:	6979      	ldr	r1, [r7, #20]
 801f066:	4618      	mov	r0, r3
 801f068:	f001 fc0e 	bl	8020888 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801f06c:	f002 fade 	bl	802162c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801f070:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801f072:	4618      	mov	r0, r3
 801f074:	3728      	adds	r7, #40	; 0x28
 801f076:	46bd      	mov	sp, r7
 801f078:	bd80      	pop	{r7, pc}
 801f07a:	bf00      	nop
 801f07c:	0802cb80 	.word	0x0802cb80
 801f080:	0802cdf8 	.word	0x0802cdf8
 801f084:	0802cd74 	.word	0x0802cd74
 801f088:	0802cd1c 	.word	0x0802cd1c
 801f08c:	e000ed04 	.word	0xe000ed04
 801f090:	0802ce58 	.word	0x0802ce58
 801f094:	e000000c 	.word	0xe000000c

0801f098 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801f098:	b580      	push	{r7, lr}
 801f09a:	b08a      	sub	sp, #40	; 0x28
 801f09c:	af00      	add	r7, sp, #0
 801f09e:	60f8      	str	r0, [r7, #12]
 801f0a0:	60b9      	str	r1, [r7, #8]
 801f0a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801f0a4:	2300      	movs	r3, #0
 801f0a6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 801f0a8:	68fb      	ldr	r3, [r7, #12]
 801f0aa:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801f0ac:	6a3b      	ldr	r3, [r7, #32]
 801f0ae:	2b00      	cmp	r3, #0
 801f0b0:	d105      	bne.n	801f0be <xQueuePeek+0x26>
 801f0b2:	f240 626c 	movw	r2, #1644	; 0x66c
 801f0b6:	4960      	ldr	r1, [pc, #384]	; (801f238 <xQueuePeek+0x1a0>)
 801f0b8:	4860      	ldr	r0, [pc, #384]	; (801f23c <xQueuePeek+0x1a4>)
 801f0ba:	f7f1 fdaf 	bl	8010c1c <assertFail>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801f0be:	68bb      	ldr	r3, [r7, #8]
 801f0c0:	2b00      	cmp	r3, #0
 801f0c2:	d103      	bne.n	801f0cc <xQueuePeek+0x34>
 801f0c4:	6a3b      	ldr	r3, [r7, #32]
 801f0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f0c8:	2b00      	cmp	r3, #0
 801f0ca:	d101      	bne.n	801f0d0 <xQueuePeek+0x38>
 801f0cc:	2301      	movs	r3, #1
 801f0ce:	e000      	b.n	801f0d2 <xQueuePeek+0x3a>
 801f0d0:	2300      	movs	r3, #0
 801f0d2:	2b00      	cmp	r3, #0
 801f0d4:	d105      	bne.n	801f0e2 <xQueuePeek+0x4a>
 801f0d6:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 801f0da:	4957      	ldr	r1, [pc, #348]	; (801f238 <xQueuePeek+0x1a0>)
 801f0dc:	4858      	ldr	r0, [pc, #352]	; (801f240 <xQueuePeek+0x1a8>)
 801f0de:	f7f1 fd9d 	bl	8010c1c <assertFail>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801f0e2:	f001 fabb 	bl	802065c <xTaskGetSchedulerState>
 801f0e6:	4603      	mov	r3, r0
 801f0e8:	2b00      	cmp	r3, #0
 801f0ea:	d102      	bne.n	801f0f2 <xQueuePeek+0x5a>
 801f0ec:	687b      	ldr	r3, [r7, #4]
 801f0ee:	2b00      	cmp	r3, #0
 801f0f0:	d101      	bne.n	801f0f6 <xQueuePeek+0x5e>
 801f0f2:	2301      	movs	r3, #1
 801f0f4:	e000      	b.n	801f0f8 <xQueuePeek+0x60>
 801f0f6:	2300      	movs	r3, #0
 801f0f8:	2b00      	cmp	r3, #0
 801f0fa:	d105      	bne.n	801f108 <xQueuePeek+0x70>
 801f0fc:	f240 6275 	movw	r2, #1653	; 0x675
 801f100:	494d      	ldr	r1, [pc, #308]	; (801f238 <xQueuePeek+0x1a0>)
 801f102:	4850      	ldr	r0, [pc, #320]	; (801f244 <xQueuePeek+0x1ac>)
 801f104:	f7f1 fd8a 	bl	8010c1c <assertFail>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801f108:	f002 fa62 	bl	80215d0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801f10c:	6a3b      	ldr	r3, [r7, #32]
 801f10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f110:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801f112:	69fb      	ldr	r3, [r7, #28]
 801f114:	2b00      	cmp	r3, #0
 801f116:	d021      	beq.n	801f15c <xQueuePeek+0xc4>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 801f118:	6a3b      	ldr	r3, [r7, #32]
 801f11a:	68db      	ldr	r3, [r3, #12]
 801f11c:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801f11e:	68b9      	ldr	r1, [r7, #8]
 801f120:	6a38      	ldr	r0, [r7, #32]
 801f122:	f000 f923 	bl	801f36c <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 801f126:	6a3b      	ldr	r3, [r7, #32]
 801f128:	69ba      	ldr	r2, [r7, #24]
 801f12a:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801f12c:	6a3b      	ldr	r3, [r7, #32]
 801f12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f130:	2b00      	cmp	r3, #0
 801f132:	d00f      	beq.n	801f154 <xQueuePeek+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801f134:	6a3b      	ldr	r3, [r7, #32]
 801f136:	3324      	adds	r3, #36	; 0x24
 801f138:	4618      	mov	r0, r3
 801f13a:	f000 fffd 	bl	8020138 <xTaskRemoveFromEventList>
 801f13e:	4603      	mov	r3, r0
 801f140:	2b00      	cmp	r3, #0
 801f142:	d007      	beq.n	801f154 <xQueuePeek+0xbc>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 801f144:	4b40      	ldr	r3, [pc, #256]	; (801f248 <xQueuePeek+0x1b0>)
 801f146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f14a:	601a      	str	r2, [r3, #0]
 801f14c:	f3bf 8f4f 	dsb	sy
 801f150:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801f154:	f002 fa6a 	bl	802162c <vPortExitCritical>
				return pdPASS;
 801f158:	2301      	movs	r3, #1
 801f15a:	e069      	b.n	801f230 <xQueuePeek+0x198>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801f15c:	687b      	ldr	r3, [r7, #4]
 801f15e:	2b00      	cmp	r3, #0
 801f160:	d103      	bne.n	801f16a <xQueuePeek+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801f162:	f002 fa63 	bl	802162c <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801f166:	2300      	movs	r3, #0
 801f168:	e062      	b.n	801f230 <xQueuePeek+0x198>
				}
				else if( xEntryTimeSet == pdFALSE )
 801f16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f16c:	2b00      	cmp	r3, #0
 801f16e:	d106      	bne.n	801f17e <xQueuePeek+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801f170:	f107 0310 	add.w	r3, r7, #16
 801f174:	4618      	mov	r0, r3
 801f176:	f001 f841 	bl	80201fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801f17a:	2301      	movs	r3, #1
 801f17c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801f17e:	f002 fa55 	bl	802162c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801f182:	f000 fcc3 	bl	801fb0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801f186:	f002 fa23 	bl	80215d0 <vPortEnterCritical>
 801f18a:	6a3b      	ldr	r3, [r7, #32]
 801f18c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f190:	b25b      	sxtb	r3, r3
 801f192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f196:	d103      	bne.n	801f1a0 <xQueuePeek+0x108>
 801f198:	6a3b      	ldr	r3, [r7, #32]
 801f19a:	2200      	movs	r2, #0
 801f19c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f1a0:	6a3b      	ldr	r3, [r7, #32]
 801f1a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f1a6:	b25b      	sxtb	r3, r3
 801f1a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f1ac:	d103      	bne.n	801f1b6 <xQueuePeek+0x11e>
 801f1ae:	6a3b      	ldr	r3, [r7, #32]
 801f1b0:	2200      	movs	r2, #0
 801f1b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f1b6:	f002 fa39 	bl	802162c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801f1ba:	1d3a      	adds	r2, r7, #4
 801f1bc:	f107 0310 	add.w	r3, r7, #16
 801f1c0:	4611      	mov	r1, r2
 801f1c2:	4618      	mov	r0, r3
 801f1c4:	f001 f830 	bl	8020228 <xTaskCheckForTimeOut>
 801f1c8:	4603      	mov	r3, r0
 801f1ca:	2b00      	cmp	r3, #0
 801f1cc:	d123      	bne.n	801f216 <xQueuePeek+0x17e>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801f1ce:	6a38      	ldr	r0, [r7, #32]
 801f1d0:	f000 f944 	bl	801f45c <prvIsQueueEmpty>
 801f1d4:	4603      	mov	r3, r0
 801f1d6:	2b00      	cmp	r3, #0
 801f1d8:	d017      	beq.n	801f20a <xQueuePeek+0x172>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801f1da:	6a3b      	ldr	r3, [r7, #32]
 801f1dc:	3324      	adds	r3, #36	; 0x24
 801f1de:	687a      	ldr	r2, [r7, #4]
 801f1e0:	4611      	mov	r1, r2
 801f1e2:	4618      	mov	r0, r3
 801f1e4:	f000 ff5a 	bl	802009c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801f1e8:	6a38      	ldr	r0, [r7, #32]
 801f1ea:	f000 f8e5 	bl	801f3b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801f1ee:	f000 fc9b 	bl	801fb28 <xTaskResumeAll>
 801f1f2:	4603      	mov	r3, r0
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	d187      	bne.n	801f108 <xQueuePeek+0x70>
				{
					portYIELD_WITHIN_API();
 801f1f8:	4b13      	ldr	r3, [pc, #76]	; (801f248 <xQueuePeek+0x1b0>)
 801f1fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f1fe:	601a      	str	r2, [r3, #0]
 801f200:	f3bf 8f4f 	dsb	sy
 801f204:	f3bf 8f6f 	isb	sy
 801f208:	e77e      	b.n	801f108 <xQueuePeek+0x70>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 801f20a:	6a38      	ldr	r0, [r7, #32]
 801f20c:	f000 f8d4 	bl	801f3b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801f210:	f000 fc8a 	bl	801fb28 <xTaskResumeAll>
 801f214:	e778      	b.n	801f108 <xQueuePeek+0x70>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 801f216:	6a38      	ldr	r0, [r7, #32]
 801f218:	f000 f8ce 	bl	801f3b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801f21c:	f000 fc84 	bl	801fb28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801f220:	6a38      	ldr	r0, [r7, #32]
 801f222:	f000 f91b 	bl	801f45c <prvIsQueueEmpty>
 801f226:	4603      	mov	r3, r0
 801f228:	2b00      	cmp	r3, #0
 801f22a:	f43f af6d 	beq.w	801f108 <xQueuePeek+0x70>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801f22e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801f230:	4618      	mov	r0, r3
 801f232:	3728      	adds	r7, #40	; 0x28
 801f234:	46bd      	mov	sp, r7
 801f236:	bd80      	pop	{r7, pc}
 801f238:	0802cb80 	.word	0x0802cb80
 801f23c:	0802cdf8 	.word	0x0802cdf8
 801f240:	0802ce04 	.word	0x0802ce04
 801f244:	0802cd1c 	.word	0x0802cd1c
 801f248:	e000ed04 	.word	0xe000ed04

0801f24c <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 801f24c:	b480      	push	{r7}
 801f24e:	b083      	sub	sp, #12
 801f250:	af00      	add	r7, sp, #0
 801f252:	6078      	str	r0, [r7, #4]
 801f254:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 801f256:	687b      	ldr	r3, [r7, #4]
 801f258:	683a      	ldr	r2, [r7, #0]
 801f25a:	649a      	str	r2, [r3, #72]	; 0x48
	}
 801f25c:	bf00      	nop
 801f25e:	370c      	adds	r7, #12
 801f260:	46bd      	mov	sp, r7
 801f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f266:	4770      	bx	lr

0801f268 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801f268:	b480      	push	{r7}
 801f26a:	b085      	sub	sp, #20
 801f26c:	af00      	add	r7, sp, #0
 801f26e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801f270:	687b      	ldr	r3, [r7, #4]
 801f272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f274:	2b00      	cmp	r3, #0
 801f276:	d006      	beq.n	801f286 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801f278:	687b      	ldr	r3, [r7, #4]
 801f27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f27c:	681b      	ldr	r3, [r3, #0]
 801f27e:	f1c3 0314 	rsb	r3, r3, #20
 801f282:	60fb      	str	r3, [r7, #12]
 801f284:	e001      	b.n	801f28a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801f286:	2300      	movs	r3, #0
 801f288:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801f28a:	68fb      	ldr	r3, [r7, #12]
	}
 801f28c:	4618      	mov	r0, r3
 801f28e:	3714      	adds	r7, #20
 801f290:	46bd      	mov	sp, r7
 801f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f296:	4770      	bx	lr

0801f298 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801f298:	b580      	push	{r7, lr}
 801f29a:	b086      	sub	sp, #24
 801f29c:	af00      	add	r7, sp, #0
 801f29e:	60f8      	str	r0, [r7, #12]
 801f2a0:	60b9      	str	r1, [r7, #8]
 801f2a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801f2a4:	2300      	movs	r3, #0
 801f2a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801f2a8:	68fb      	ldr	r3, [r7, #12]
 801f2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f2ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801f2ae:	68fb      	ldr	r3, [r7, #12]
 801f2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f2b2:	2b00      	cmp	r3, #0
 801f2b4:	d10d      	bne.n	801f2d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801f2b6:	68fb      	ldr	r3, [r7, #12]
 801f2b8:	681b      	ldr	r3, [r3, #0]
 801f2ba:	2b00      	cmp	r3, #0
 801f2bc:	d14d      	bne.n	801f35a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801f2be:	68fb      	ldr	r3, [r7, #12]
 801f2c0:	689b      	ldr	r3, [r3, #8]
 801f2c2:	4618      	mov	r0, r3
 801f2c4:	f001 fa5e 	bl	8020784 <xTaskPriorityDisinherit>
 801f2c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801f2ca:	68fb      	ldr	r3, [r7, #12]
 801f2cc:	2200      	movs	r2, #0
 801f2ce:	609a      	str	r2, [r3, #8]
 801f2d0:	e043      	b.n	801f35a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801f2d2:	687b      	ldr	r3, [r7, #4]
 801f2d4:	2b00      	cmp	r3, #0
 801f2d6:	d119      	bne.n	801f30c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801f2d8:	68fb      	ldr	r3, [r7, #12]
 801f2da:	6858      	ldr	r0, [r3, #4]
 801f2dc:	68fb      	ldr	r3, [r7, #12]
 801f2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f2e0:	461a      	mov	r2, r3
 801f2e2:	68b9      	ldr	r1, [r7, #8]
 801f2e4:	f004 fc19 	bl	8023b1a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801f2e8:	68fb      	ldr	r3, [r7, #12]
 801f2ea:	685a      	ldr	r2, [r3, #4]
 801f2ec:	68fb      	ldr	r3, [r7, #12]
 801f2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f2f0:	441a      	add	r2, r3
 801f2f2:	68fb      	ldr	r3, [r7, #12]
 801f2f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801f2f6:	68fb      	ldr	r3, [r7, #12]
 801f2f8:	685a      	ldr	r2, [r3, #4]
 801f2fa:	68fb      	ldr	r3, [r7, #12]
 801f2fc:	689b      	ldr	r3, [r3, #8]
 801f2fe:	429a      	cmp	r2, r3
 801f300:	d32b      	bcc.n	801f35a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801f302:	68fb      	ldr	r3, [r7, #12]
 801f304:	681a      	ldr	r2, [r3, #0]
 801f306:	68fb      	ldr	r3, [r7, #12]
 801f308:	605a      	str	r2, [r3, #4]
 801f30a:	e026      	b.n	801f35a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801f30c:	68fb      	ldr	r3, [r7, #12]
 801f30e:	68d8      	ldr	r0, [r3, #12]
 801f310:	68fb      	ldr	r3, [r7, #12]
 801f312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f314:	461a      	mov	r2, r3
 801f316:	68b9      	ldr	r1, [r7, #8]
 801f318:	f004 fbff 	bl	8023b1a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801f31c:	68fb      	ldr	r3, [r7, #12]
 801f31e:	68da      	ldr	r2, [r3, #12]
 801f320:	68fb      	ldr	r3, [r7, #12]
 801f322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f324:	425b      	negs	r3, r3
 801f326:	441a      	add	r2, r3
 801f328:	68fb      	ldr	r3, [r7, #12]
 801f32a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801f32c:	68fb      	ldr	r3, [r7, #12]
 801f32e:	68da      	ldr	r2, [r3, #12]
 801f330:	68fb      	ldr	r3, [r7, #12]
 801f332:	681b      	ldr	r3, [r3, #0]
 801f334:	429a      	cmp	r2, r3
 801f336:	d207      	bcs.n	801f348 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801f338:	68fb      	ldr	r3, [r7, #12]
 801f33a:	689a      	ldr	r2, [r3, #8]
 801f33c:	68fb      	ldr	r3, [r7, #12]
 801f33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f340:	425b      	negs	r3, r3
 801f342:	441a      	add	r2, r3
 801f344:	68fb      	ldr	r3, [r7, #12]
 801f346:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	2b02      	cmp	r3, #2
 801f34c:	d105      	bne.n	801f35a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801f34e:	693b      	ldr	r3, [r7, #16]
 801f350:	2b00      	cmp	r3, #0
 801f352:	d002      	beq.n	801f35a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801f354:	693b      	ldr	r3, [r7, #16]
 801f356:	3b01      	subs	r3, #1
 801f358:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801f35a:	693b      	ldr	r3, [r7, #16]
 801f35c:	1c5a      	adds	r2, r3, #1
 801f35e:	68fb      	ldr	r3, [r7, #12]
 801f360:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801f362:	697b      	ldr	r3, [r7, #20]
}
 801f364:	4618      	mov	r0, r3
 801f366:	3718      	adds	r7, #24
 801f368:	46bd      	mov	sp, r7
 801f36a:	bd80      	pop	{r7, pc}

0801f36c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801f36c:	b580      	push	{r7, lr}
 801f36e:	b082      	sub	sp, #8
 801f370:	af00      	add	r7, sp, #0
 801f372:	6078      	str	r0, [r7, #4]
 801f374:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801f376:	687b      	ldr	r3, [r7, #4]
 801f378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	d018      	beq.n	801f3b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801f37e:	687b      	ldr	r3, [r7, #4]
 801f380:	68da      	ldr	r2, [r3, #12]
 801f382:	687b      	ldr	r3, [r7, #4]
 801f384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f386:	441a      	add	r2, r3
 801f388:	687b      	ldr	r3, [r7, #4]
 801f38a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801f38c:	687b      	ldr	r3, [r7, #4]
 801f38e:	68da      	ldr	r2, [r3, #12]
 801f390:	687b      	ldr	r3, [r7, #4]
 801f392:	689b      	ldr	r3, [r3, #8]
 801f394:	429a      	cmp	r2, r3
 801f396:	d303      	bcc.n	801f3a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801f398:	687b      	ldr	r3, [r7, #4]
 801f39a:	681a      	ldr	r2, [r3, #0]
 801f39c:	687b      	ldr	r3, [r7, #4]
 801f39e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801f3a0:	687b      	ldr	r3, [r7, #4]
 801f3a2:	68d9      	ldr	r1, [r3, #12]
 801f3a4:	687b      	ldr	r3, [r7, #4]
 801f3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f3a8:	461a      	mov	r2, r3
 801f3aa:	6838      	ldr	r0, [r7, #0]
 801f3ac:	f004 fbb5 	bl	8023b1a <memcpy>
	}
}
 801f3b0:	bf00      	nop
 801f3b2:	3708      	adds	r7, #8
 801f3b4:	46bd      	mov	sp, r7
 801f3b6:	bd80      	pop	{r7, pc}

0801f3b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801f3b8:	b580      	push	{r7, lr}
 801f3ba:	b084      	sub	sp, #16
 801f3bc:	af00      	add	r7, sp, #0
 801f3be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801f3c0:	f002 f906 	bl	80215d0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801f3c4:	687b      	ldr	r3, [r7, #4]
 801f3c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f3ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801f3cc:	e011      	b.n	801f3f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801f3ce:	687b      	ldr	r3, [r7, #4]
 801f3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3d2:	2b00      	cmp	r3, #0
 801f3d4:	d012      	beq.n	801f3fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801f3d6:	687b      	ldr	r3, [r7, #4]
 801f3d8:	3324      	adds	r3, #36	; 0x24
 801f3da:	4618      	mov	r0, r3
 801f3dc:	f000 feac 	bl	8020138 <xTaskRemoveFromEventList>
 801f3e0:	4603      	mov	r3, r0
 801f3e2:	2b00      	cmp	r3, #0
 801f3e4:	d001      	beq.n	801f3ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801f3e6:	f000 ff7d 	bl	80202e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801f3ea:	7bfb      	ldrb	r3, [r7, #15]
 801f3ec:	3b01      	subs	r3, #1
 801f3ee:	b2db      	uxtb	r3, r3
 801f3f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801f3f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f3f6:	2b00      	cmp	r3, #0
 801f3f8:	dce9      	bgt.n	801f3ce <prvUnlockQueue+0x16>
 801f3fa:	e000      	b.n	801f3fe <prvUnlockQueue+0x46>
					break;
 801f3fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801f3fe:	687b      	ldr	r3, [r7, #4]
 801f400:	22ff      	movs	r2, #255	; 0xff
 801f402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801f406:	f002 f911 	bl	802162c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801f40a:	f002 f8e1 	bl	80215d0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801f40e:	687b      	ldr	r3, [r7, #4]
 801f410:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f414:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801f416:	e011      	b.n	801f43c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801f418:	687b      	ldr	r3, [r7, #4]
 801f41a:	691b      	ldr	r3, [r3, #16]
 801f41c:	2b00      	cmp	r3, #0
 801f41e:	d012      	beq.n	801f446 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801f420:	687b      	ldr	r3, [r7, #4]
 801f422:	3310      	adds	r3, #16
 801f424:	4618      	mov	r0, r3
 801f426:	f000 fe87 	bl	8020138 <xTaskRemoveFromEventList>
 801f42a:	4603      	mov	r3, r0
 801f42c:	2b00      	cmp	r3, #0
 801f42e:	d001      	beq.n	801f434 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801f430:	f000 ff58 	bl	80202e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801f434:	7bbb      	ldrb	r3, [r7, #14]
 801f436:	3b01      	subs	r3, #1
 801f438:	b2db      	uxtb	r3, r3
 801f43a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801f43c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801f440:	2b00      	cmp	r3, #0
 801f442:	dce9      	bgt.n	801f418 <prvUnlockQueue+0x60>
 801f444:	e000      	b.n	801f448 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801f446:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801f448:	687b      	ldr	r3, [r7, #4]
 801f44a:	22ff      	movs	r2, #255	; 0xff
 801f44c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801f450:	f002 f8ec 	bl	802162c <vPortExitCritical>
}
 801f454:	bf00      	nop
 801f456:	3710      	adds	r7, #16
 801f458:	46bd      	mov	sp, r7
 801f45a:	bd80      	pop	{r7, pc}

0801f45c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801f45c:	b580      	push	{r7, lr}
 801f45e:	b084      	sub	sp, #16
 801f460:	af00      	add	r7, sp, #0
 801f462:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801f464:	f002 f8b4 	bl	80215d0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801f468:	687b      	ldr	r3, [r7, #4]
 801f46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f46c:	2b00      	cmp	r3, #0
 801f46e:	d102      	bne.n	801f476 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801f470:	2301      	movs	r3, #1
 801f472:	60fb      	str	r3, [r7, #12]
 801f474:	e001      	b.n	801f47a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801f476:	2300      	movs	r3, #0
 801f478:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801f47a:	f002 f8d7 	bl	802162c <vPortExitCritical>

	return xReturn;
 801f47e:	68fb      	ldr	r3, [r7, #12]
}
 801f480:	4618      	mov	r0, r3
 801f482:	3710      	adds	r7, #16
 801f484:	46bd      	mov	sp, r7
 801f486:	bd80      	pop	{r7, pc}

0801f488 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801f488:	b580      	push	{r7, lr}
 801f48a:	b084      	sub	sp, #16
 801f48c:	af00      	add	r7, sp, #0
 801f48e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801f490:	f002 f89e 	bl	80215d0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801f494:	687b      	ldr	r3, [r7, #4]
 801f496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f498:	687b      	ldr	r3, [r7, #4]
 801f49a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f49c:	429a      	cmp	r2, r3
 801f49e:	d102      	bne.n	801f4a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801f4a0:	2301      	movs	r3, #1
 801f4a2:	60fb      	str	r3, [r7, #12]
 801f4a4:	e001      	b.n	801f4aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801f4a6:	2300      	movs	r3, #0
 801f4a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801f4aa:	f002 f8bf 	bl	802162c <vPortExitCritical>

	return xReturn;
 801f4ae:	68fb      	ldr	r3, [r7, #12]
}
 801f4b0:	4618      	mov	r0, r3
 801f4b2:	3710      	adds	r7, #16
 801f4b4:	46bd      	mov	sp, r7
 801f4b6:	bd80      	pop	{r7, pc}

0801f4b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801f4b8:	b480      	push	{r7}
 801f4ba:	b085      	sub	sp, #20
 801f4bc:	af00      	add	r7, sp, #0
 801f4be:	6078      	str	r0, [r7, #4]
 801f4c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801f4c2:	2300      	movs	r3, #0
 801f4c4:	60fb      	str	r3, [r7, #12]
 801f4c6:	e014      	b.n	801f4f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801f4c8:	4a0f      	ldr	r2, [pc, #60]	; (801f508 <vQueueAddToRegistry+0x50>)
 801f4ca:	68fb      	ldr	r3, [r7, #12]
 801f4cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801f4d0:	2b00      	cmp	r3, #0
 801f4d2:	d10b      	bne.n	801f4ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801f4d4:	490c      	ldr	r1, [pc, #48]	; (801f508 <vQueueAddToRegistry+0x50>)
 801f4d6:	68fb      	ldr	r3, [r7, #12]
 801f4d8:	683a      	ldr	r2, [r7, #0]
 801f4da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801f4de:	4a0a      	ldr	r2, [pc, #40]	; (801f508 <vQueueAddToRegistry+0x50>)
 801f4e0:	68fb      	ldr	r3, [r7, #12]
 801f4e2:	00db      	lsls	r3, r3, #3
 801f4e4:	4413      	add	r3, r2
 801f4e6:	687a      	ldr	r2, [r7, #4]
 801f4e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801f4ea:	e006      	b.n	801f4fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801f4ec:	68fb      	ldr	r3, [r7, #12]
 801f4ee:	3301      	adds	r3, #1
 801f4f0:	60fb      	str	r3, [r7, #12]
 801f4f2:	68fb      	ldr	r3, [r7, #12]
 801f4f4:	2b09      	cmp	r3, #9
 801f4f6:	d9e7      	bls.n	801f4c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801f4f8:	bf00      	nop
 801f4fa:	bf00      	nop
 801f4fc:	3714      	adds	r7, #20
 801f4fe:	46bd      	mov	sp, r7
 801f500:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f504:	4770      	bx	lr
 801f506:	bf00      	nop
 801f508:	2000d128 	.word	0x2000d128

0801f50c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801f50c:	b580      	push	{r7, lr}
 801f50e:	b086      	sub	sp, #24
 801f510:	af00      	add	r7, sp, #0
 801f512:	60f8      	str	r0, [r7, #12]
 801f514:	60b9      	str	r1, [r7, #8]
 801f516:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801f518:	68fb      	ldr	r3, [r7, #12]
 801f51a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801f51c:	f002 f858 	bl	80215d0 <vPortEnterCritical>
 801f520:	697b      	ldr	r3, [r7, #20]
 801f522:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f526:	b25b      	sxtb	r3, r3
 801f528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f52c:	d103      	bne.n	801f536 <vQueueWaitForMessageRestricted+0x2a>
 801f52e:	697b      	ldr	r3, [r7, #20]
 801f530:	2200      	movs	r2, #0
 801f532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f536:	697b      	ldr	r3, [r7, #20]
 801f538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f53c:	b25b      	sxtb	r3, r3
 801f53e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f542:	d103      	bne.n	801f54c <vQueueWaitForMessageRestricted+0x40>
 801f544:	697b      	ldr	r3, [r7, #20]
 801f546:	2200      	movs	r2, #0
 801f548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f54c:	f002 f86e 	bl	802162c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801f550:	697b      	ldr	r3, [r7, #20]
 801f552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f554:	2b00      	cmp	r3, #0
 801f556:	d106      	bne.n	801f566 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801f558:	697b      	ldr	r3, [r7, #20]
 801f55a:	3324      	adds	r3, #36	; 0x24
 801f55c:	687a      	ldr	r2, [r7, #4]
 801f55e:	68b9      	ldr	r1, [r7, #8]
 801f560:	4618      	mov	r0, r3
 801f562:	f000 fdbf 	bl	80200e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801f566:	6978      	ldr	r0, [r7, #20]
 801f568:	f7ff ff26 	bl	801f3b8 <prvUnlockQueue>
	}
 801f56c:	bf00      	nop
 801f56e:	3718      	adds	r7, #24
 801f570:	46bd      	mov	sp, r7
 801f572:	bd80      	pop	{r7, pc}

0801f574 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801f574:	b580      	push	{r7, lr}
 801f576:	b08c      	sub	sp, #48	; 0x30
 801f578:	af04      	add	r7, sp, #16
 801f57a:	60f8      	str	r0, [r7, #12]
 801f57c:	60b9      	str	r1, [r7, #8]
 801f57e:	607a      	str	r2, [r7, #4]
 801f580:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801f582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f584:	2b00      	cmp	r3, #0
 801f586:	d105      	bne.n	801f594 <xTaskCreateStatic+0x20>
 801f588:	f44f 7214 	mov.w	r2, #592	; 0x250
 801f58c:	4920      	ldr	r1, [pc, #128]	; (801f610 <xTaskCreateStatic+0x9c>)
 801f58e:	4821      	ldr	r0, [pc, #132]	; (801f614 <xTaskCreateStatic+0xa0>)
 801f590:	f7f1 fb44 	bl	8010c1c <assertFail>
		configASSERT( pxTaskBuffer != NULL );
 801f594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f596:	2b00      	cmp	r3, #0
 801f598:	d105      	bne.n	801f5a6 <xTaskCreateStatic+0x32>
 801f59a:	f240 2251 	movw	r2, #593	; 0x251
 801f59e:	491c      	ldr	r1, [pc, #112]	; (801f610 <xTaskCreateStatic+0x9c>)
 801f5a0:	481d      	ldr	r0, [pc, #116]	; (801f618 <xTaskCreateStatic+0xa4>)
 801f5a2:	f7f1 fb3b 	bl	8010c1c <assertFail>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801f5a6:	23b8      	movs	r3, #184	; 0xb8
 801f5a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 801f5aa:	697b      	ldr	r3, [r7, #20]
 801f5ac:	2bb8      	cmp	r3, #184	; 0xb8
 801f5ae:	d005      	beq.n	801f5bc <xTaskCreateStatic+0x48>
 801f5b0:	f240 2259 	movw	r2, #601	; 0x259
 801f5b4:	4916      	ldr	r1, [pc, #88]	; (801f610 <xTaskCreateStatic+0x9c>)
 801f5b6:	4819      	ldr	r0, [pc, #100]	; (801f61c <xTaskCreateStatic+0xa8>)
 801f5b8:	f7f1 fb30 	bl	8010c1c <assertFail>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801f5bc:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801f5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f5c0:	2b00      	cmp	r3, #0
 801f5c2:	d01e      	beq.n	801f602 <xTaskCreateStatic+0x8e>
 801f5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5c6:	2b00      	cmp	r3, #0
 801f5c8:	d01b      	beq.n	801f602 <xTaskCreateStatic+0x8e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801f5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f5cc:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801f5ce:	69fb      	ldr	r3, [r7, #28]
 801f5d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f5d2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801f5d4:	69fb      	ldr	r3, [r7, #28]
 801f5d6:	2202      	movs	r2, #2
 801f5d8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801f5dc:	2300      	movs	r3, #0
 801f5de:	9303      	str	r3, [sp, #12]
 801f5e0:	69fb      	ldr	r3, [r7, #28]
 801f5e2:	9302      	str	r3, [sp, #8]
 801f5e4:	f107 0318 	add.w	r3, r7, #24
 801f5e8:	9301      	str	r3, [sp, #4]
 801f5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5ec:	9300      	str	r3, [sp, #0]
 801f5ee:	683b      	ldr	r3, [r7, #0]
 801f5f0:	687a      	ldr	r2, [r7, #4]
 801f5f2:	68b9      	ldr	r1, [r7, #8]
 801f5f4:	68f8      	ldr	r0, [r7, #12]
 801f5f6:	f000 f859 	bl	801f6ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801f5fa:	69f8      	ldr	r0, [r7, #28]
 801f5fc:	f000 f904 	bl	801f808 <prvAddNewTaskToReadyList>
 801f600:	e001      	b.n	801f606 <xTaskCreateStatic+0x92>
		}
		else
		{
			xReturn = NULL;
 801f602:	2300      	movs	r3, #0
 801f604:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801f606:	69bb      	ldr	r3, [r7, #24]
	}
 801f608:	4618      	mov	r0, r3
 801f60a:	3720      	adds	r7, #32
 801f60c:	46bd      	mov	sp, r7
 801f60e:	bd80      	pop	{r7, pc}
 801f610:	0802cee8 	.word	0x0802cee8
 801f614:	0802cf1c 	.word	0x0802cf1c
 801f618:	0802cf34 	.word	0x0802cf34
 801f61c:	0802cf4c 	.word	0x0802cf4c

0801f620 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801f620:	b580      	push	{r7, lr}
 801f622:	b08c      	sub	sp, #48	; 0x30
 801f624:	af04      	add	r7, sp, #16
 801f626:	60f8      	str	r0, [r7, #12]
 801f628:	60b9      	str	r1, [r7, #8]
 801f62a:	603b      	str	r3, [r7, #0]
 801f62c:	4613      	mov	r3, r2
 801f62e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801f630:	88fb      	ldrh	r3, [r7, #6]
 801f632:	009b      	lsls	r3, r3, #2
 801f634:	4618      	mov	r0, r3
 801f636:	f002 f8db 	bl	80217f0 <pvPortMalloc>
 801f63a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801f63c:	697b      	ldr	r3, [r7, #20]
 801f63e:	2b00      	cmp	r3, #0
 801f640:	d00e      	beq.n	801f660 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801f642:	20b8      	movs	r0, #184	; 0xb8
 801f644:	f002 f8d4 	bl	80217f0 <pvPortMalloc>
 801f648:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801f64a:	69fb      	ldr	r3, [r7, #28]
 801f64c:	2b00      	cmp	r3, #0
 801f64e:	d003      	beq.n	801f658 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801f650:	69fb      	ldr	r3, [r7, #28]
 801f652:	697a      	ldr	r2, [r7, #20]
 801f654:	631a      	str	r2, [r3, #48]	; 0x30
 801f656:	e005      	b.n	801f664 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801f658:	6978      	ldr	r0, [r7, #20]
 801f65a:	f002 f98b 	bl	8021974 <vPortFree>
 801f65e:	e001      	b.n	801f664 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801f660:	2300      	movs	r3, #0
 801f662:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801f664:	69fb      	ldr	r3, [r7, #28]
 801f666:	2b00      	cmp	r3, #0
 801f668:	d017      	beq.n	801f69a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801f66a:	69fb      	ldr	r3, [r7, #28]
 801f66c:	2200      	movs	r2, #0
 801f66e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801f672:	88fa      	ldrh	r2, [r7, #6]
 801f674:	2300      	movs	r3, #0
 801f676:	9303      	str	r3, [sp, #12]
 801f678:	69fb      	ldr	r3, [r7, #28]
 801f67a:	9302      	str	r3, [sp, #8]
 801f67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f67e:	9301      	str	r3, [sp, #4]
 801f680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f682:	9300      	str	r3, [sp, #0]
 801f684:	683b      	ldr	r3, [r7, #0]
 801f686:	68b9      	ldr	r1, [r7, #8]
 801f688:	68f8      	ldr	r0, [r7, #12]
 801f68a:	f000 f80f 	bl	801f6ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801f68e:	69f8      	ldr	r0, [r7, #28]
 801f690:	f000 f8ba 	bl	801f808 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801f694:	2301      	movs	r3, #1
 801f696:	61bb      	str	r3, [r7, #24]
 801f698:	e002      	b.n	801f6a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801f69a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f69e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801f6a0:	69bb      	ldr	r3, [r7, #24]
	}
 801f6a2:	4618      	mov	r0, r3
 801f6a4:	3720      	adds	r7, #32
 801f6a6:	46bd      	mov	sp, r7
 801f6a8:	bd80      	pop	{r7, pc}
	...

0801f6ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801f6ac:	b580      	push	{r7, lr}
 801f6ae:	b086      	sub	sp, #24
 801f6b0:	af00      	add	r7, sp, #0
 801f6b2:	60f8      	str	r0, [r7, #12]
 801f6b4:	60b9      	str	r1, [r7, #8]
 801f6b6:	607a      	str	r2, [r7, #4]
 801f6b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801f6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f6bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801f6be:	687b      	ldr	r3, [r7, #4]
 801f6c0:	009b      	lsls	r3, r3, #2
 801f6c2:	461a      	mov	r2, r3
 801f6c4:	21a5      	movs	r1, #165	; 0xa5
 801f6c6:	f004 f923 	bl	8023910 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801f6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f6cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801f6ce:	687b      	ldr	r3, [r7, #4]
 801f6d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801f6d4:	3b01      	subs	r3, #1
 801f6d6:	009b      	lsls	r3, r3, #2
 801f6d8:	4413      	add	r3, r2
 801f6da:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801f6dc:	693b      	ldr	r3, [r7, #16]
 801f6de:	f023 0307 	bic.w	r3, r3, #7
 801f6e2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801f6e4:	693b      	ldr	r3, [r7, #16]
 801f6e6:	f003 0307 	and.w	r3, r3, #7
 801f6ea:	2b00      	cmp	r3, #0
 801f6ec:	d005      	beq.n	801f6fa <prvInitialiseNewTask+0x4e>
 801f6ee:	f44f 7259 	mov.w	r2, #868	; 0x364
 801f6f2:	4940      	ldr	r1, [pc, #256]	; (801f7f4 <prvInitialiseNewTask+0x148>)
 801f6f4:	4840      	ldr	r0, [pc, #256]	; (801f7f8 <prvInitialiseNewTask+0x14c>)
 801f6f6:	f7f1 fa91 	bl	8010c1c <assertFail>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 801f6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f6fc:	693a      	ldr	r2, [r7, #16]
 801f6fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801f700:	68bb      	ldr	r3, [r7, #8]
 801f702:	2b00      	cmp	r3, #0
 801f704:	d01f      	beq.n	801f746 <prvInitialiseNewTask+0x9a>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801f706:	2300      	movs	r3, #0
 801f708:	617b      	str	r3, [r7, #20]
 801f70a:	e012      	b.n	801f732 <prvInitialiseNewTask+0x86>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801f70c:	68ba      	ldr	r2, [r7, #8]
 801f70e:	697b      	ldr	r3, [r7, #20]
 801f710:	4413      	add	r3, r2
 801f712:	7819      	ldrb	r1, [r3, #0]
 801f714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f716:	697b      	ldr	r3, [r7, #20]
 801f718:	4413      	add	r3, r2
 801f71a:	3334      	adds	r3, #52	; 0x34
 801f71c:	460a      	mov	r2, r1
 801f71e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801f720:	68ba      	ldr	r2, [r7, #8]
 801f722:	697b      	ldr	r3, [r7, #20]
 801f724:	4413      	add	r3, r2
 801f726:	781b      	ldrb	r3, [r3, #0]
 801f728:	2b00      	cmp	r3, #0
 801f72a:	d006      	beq.n	801f73a <prvInitialiseNewTask+0x8e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801f72c:	697b      	ldr	r3, [r7, #20]
 801f72e:	3301      	adds	r3, #1
 801f730:	617b      	str	r3, [r7, #20]
 801f732:	697b      	ldr	r3, [r7, #20]
 801f734:	2b0f      	cmp	r3, #15
 801f736:	d9e9      	bls.n	801f70c <prvInitialiseNewTask+0x60>
 801f738:	e000      	b.n	801f73c <prvInitialiseNewTask+0x90>
			{
				break;
 801f73a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801f73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f73e:	2200      	movs	r2, #0
 801f740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801f744:	e003      	b.n	801f74e <prvInitialiseNewTask+0xa2>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801f746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f748:	2200      	movs	r2, #0
 801f74a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801f74e:	6a3b      	ldr	r3, [r7, #32]
 801f750:	2b13      	cmp	r3, #19
 801f752:	d901      	bls.n	801f758 <prvInitialiseNewTask+0xac>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801f754:	2313      	movs	r3, #19
 801f756:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801f758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f75a:	6a3a      	ldr	r2, [r7, #32]
 801f75c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801f75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f760:	6a3a      	ldr	r2, [r7, #32]
 801f762:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 801f764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f766:	2200      	movs	r2, #0
 801f768:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801f76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f76c:	3304      	adds	r3, #4
 801f76e:	4618      	mov	r0, r3
 801f770:	f7fe fef4 	bl	801e55c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801f774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f776:	3318      	adds	r3, #24
 801f778:	4618      	mov	r0, r3
 801f77a:	f7fe feef 	bl	801e55c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801f77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f782:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801f784:	6a3b      	ldr	r3, [r7, #32]
 801f786:	f1c3 0214 	rsb	r2, r3, #20
 801f78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f78c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801f78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f792:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 801f794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f796:	2200      	movs	r2, #0
 801f798:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 801f79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f79c:	2200      	movs	r2, #0
 801f79e:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801f7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f7a2:	2200      	movs	r2, #0
 801f7a4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801f7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f7aa:	2200      	movs	r2, #0
 801f7ac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801f7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f7b2:	3360      	adds	r3, #96	; 0x60
 801f7b4:	224c      	movs	r2, #76	; 0x4c
 801f7b6:	2100      	movs	r1, #0
 801f7b8:	4618      	mov	r0, r3
 801f7ba:	f004 f8a9 	bl	8023910 <memset>
 801f7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f7c0:	4a0e      	ldr	r2, [pc, #56]	; (801f7fc <prvInitialiseNewTask+0x150>)
 801f7c2:	665a      	str	r2, [r3, #100]	; 0x64
 801f7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f7c6:	4a0e      	ldr	r2, [pc, #56]	; (801f800 <prvInitialiseNewTask+0x154>)
 801f7c8:	669a      	str	r2, [r3, #104]	; 0x68
 801f7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f7cc:	4a0d      	ldr	r2, [pc, #52]	; (801f804 <prvInitialiseNewTask+0x158>)
 801f7ce:	66da      	str	r2, [r3, #108]	; 0x6c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801f7d0:	683a      	ldr	r2, [r7, #0]
 801f7d2:	68f9      	ldr	r1, [r7, #12]
 801f7d4:	6938      	ldr	r0, [r7, #16]
 801f7d6:	f001 fdc9 	bl	802136c <pxPortInitialiseStack>
 801f7da:	4602      	mov	r2, r0
 801f7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f7de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801f7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f7e2:	2b00      	cmp	r3, #0
 801f7e4:	d002      	beq.n	801f7ec <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801f7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f7e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f7ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801f7ec:	bf00      	nop
 801f7ee:	3718      	adds	r7, #24
 801f7f0:	46bd      	mov	sp, r7
 801f7f2:	bd80      	pop	{r7, pc}
 801f7f4:	0802cee8 	.word	0x0802cee8
 801f7f8:	0802cf68 	.word	0x0802cf68
 801f7fc:	20012d88 	.word	0x20012d88
 801f800:	20012df0 	.word	0x20012df0
 801f804:	20012e58 	.word	0x20012e58

0801f808 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801f808:	b580      	push	{r7, lr}
 801f80a:	b082      	sub	sp, #8
 801f80c:	af00      	add	r7, sp, #0
 801f80e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801f810:	f001 fede 	bl	80215d0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801f814:	4b2c      	ldr	r3, [pc, #176]	; (801f8c8 <prvAddNewTaskToReadyList+0xc0>)
 801f816:	681b      	ldr	r3, [r3, #0]
 801f818:	3301      	adds	r3, #1
 801f81a:	4a2b      	ldr	r2, [pc, #172]	; (801f8c8 <prvAddNewTaskToReadyList+0xc0>)
 801f81c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801f81e:	4b2b      	ldr	r3, [pc, #172]	; (801f8cc <prvAddNewTaskToReadyList+0xc4>)
 801f820:	681b      	ldr	r3, [r3, #0]
 801f822:	2b00      	cmp	r3, #0
 801f824:	d109      	bne.n	801f83a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801f826:	4a29      	ldr	r2, [pc, #164]	; (801f8cc <prvAddNewTaskToReadyList+0xc4>)
 801f828:	687b      	ldr	r3, [r7, #4]
 801f82a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801f82c:	4b26      	ldr	r3, [pc, #152]	; (801f8c8 <prvAddNewTaskToReadyList+0xc0>)
 801f82e:	681b      	ldr	r3, [r3, #0]
 801f830:	2b01      	cmp	r3, #1
 801f832:	d110      	bne.n	801f856 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801f834:	f000 fd7c 	bl	8020330 <prvInitialiseTaskLists>
 801f838:	e00d      	b.n	801f856 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801f83a:	4b25      	ldr	r3, [pc, #148]	; (801f8d0 <prvAddNewTaskToReadyList+0xc8>)
 801f83c:	681b      	ldr	r3, [r3, #0]
 801f83e:	2b00      	cmp	r3, #0
 801f840:	d109      	bne.n	801f856 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801f842:	4b22      	ldr	r3, [pc, #136]	; (801f8cc <prvAddNewTaskToReadyList+0xc4>)
 801f844:	681b      	ldr	r3, [r3, #0]
 801f846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f848:	687b      	ldr	r3, [r7, #4]
 801f84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f84c:	429a      	cmp	r2, r3
 801f84e:	d802      	bhi.n	801f856 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801f850:	4a1e      	ldr	r2, [pc, #120]	; (801f8cc <prvAddNewTaskToReadyList+0xc4>)
 801f852:	687b      	ldr	r3, [r7, #4]
 801f854:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801f856:	4b1f      	ldr	r3, [pc, #124]	; (801f8d4 <prvAddNewTaskToReadyList+0xcc>)
 801f858:	681b      	ldr	r3, [r3, #0]
 801f85a:	3301      	adds	r3, #1
 801f85c:	4a1d      	ldr	r2, [pc, #116]	; (801f8d4 <prvAddNewTaskToReadyList+0xcc>)
 801f85e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801f860:	4b1c      	ldr	r3, [pc, #112]	; (801f8d4 <prvAddNewTaskToReadyList+0xcc>)
 801f862:	681a      	ldr	r2, [r3, #0]
 801f864:	687b      	ldr	r3, [r7, #4]
 801f866:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801f868:	687b      	ldr	r3, [r7, #4]
 801f86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f86c:	2201      	movs	r2, #1
 801f86e:	409a      	lsls	r2, r3
 801f870:	4b19      	ldr	r3, [pc, #100]	; (801f8d8 <prvAddNewTaskToReadyList+0xd0>)
 801f872:	681b      	ldr	r3, [r3, #0]
 801f874:	4313      	orrs	r3, r2
 801f876:	4a18      	ldr	r2, [pc, #96]	; (801f8d8 <prvAddNewTaskToReadyList+0xd0>)
 801f878:	6013      	str	r3, [r2, #0]
 801f87a:	687b      	ldr	r3, [r7, #4]
 801f87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f87e:	4613      	mov	r3, r2
 801f880:	009b      	lsls	r3, r3, #2
 801f882:	4413      	add	r3, r2
 801f884:	009b      	lsls	r3, r3, #2
 801f886:	4a15      	ldr	r2, [pc, #84]	; (801f8dc <prvAddNewTaskToReadyList+0xd4>)
 801f888:	441a      	add	r2, r3
 801f88a:	687b      	ldr	r3, [r7, #4]
 801f88c:	3304      	adds	r3, #4
 801f88e:	4619      	mov	r1, r3
 801f890:	4610      	mov	r0, r2
 801f892:	f7fe fe70 	bl	801e576 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801f896:	f001 fec9 	bl	802162c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801f89a:	4b0d      	ldr	r3, [pc, #52]	; (801f8d0 <prvAddNewTaskToReadyList+0xc8>)
 801f89c:	681b      	ldr	r3, [r3, #0]
 801f89e:	2b00      	cmp	r3, #0
 801f8a0:	d00e      	beq.n	801f8c0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801f8a2:	4b0a      	ldr	r3, [pc, #40]	; (801f8cc <prvAddNewTaskToReadyList+0xc4>)
 801f8a4:	681b      	ldr	r3, [r3, #0]
 801f8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f8a8:	687b      	ldr	r3, [r7, #4]
 801f8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f8ac:	429a      	cmp	r2, r3
 801f8ae:	d207      	bcs.n	801f8c0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801f8b0:	4b0b      	ldr	r3, [pc, #44]	; (801f8e0 <prvAddNewTaskToReadyList+0xd8>)
 801f8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f8b6:	601a      	str	r2, [r3, #0]
 801f8b8:	f3bf 8f4f 	dsb	sy
 801f8bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801f8c0:	bf00      	nop
 801f8c2:	3708      	adds	r7, #8
 801f8c4:	46bd      	mov	sp, r7
 801f8c6:	bd80      	pop	{r7, pc}
 801f8c8:	2000d380 	.word	0x2000d380
 801f8cc:	2000d178 	.word	0x2000d178
 801f8d0:	2000d38c 	.word	0x2000d38c
 801f8d4:	2000d39c 	.word	0x2000d39c
 801f8d8:	2000d388 	.word	0x2000d388
 801f8dc:	2000d17c 	.word	0x2000d17c
 801f8e0:	e000ed04 	.word	0xe000ed04

0801f8e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801f8e4:	b580      	push	{r7, lr}
 801f8e6:	b084      	sub	sp, #16
 801f8e8:	af00      	add	r7, sp, #0
 801f8ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801f8ec:	2300      	movs	r3, #0
 801f8ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801f8f0:	687b      	ldr	r3, [r7, #4]
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	d012      	beq.n	801f91c <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801f8f6:	4b11      	ldr	r3, [pc, #68]	; (801f93c <vTaskDelay+0x58>)
 801f8f8:	681b      	ldr	r3, [r3, #0]
 801f8fa:	2b00      	cmp	r3, #0
 801f8fc:	d005      	beq.n	801f90a <vTaskDelay+0x26>
 801f8fe:	f240 5244 	movw	r2, #1348	; 0x544
 801f902:	490f      	ldr	r1, [pc, #60]	; (801f940 <vTaskDelay+0x5c>)
 801f904:	480f      	ldr	r0, [pc, #60]	; (801f944 <vTaskDelay+0x60>)
 801f906:	f7f1 f989 	bl	8010c1c <assertFail>
			vTaskSuspendAll();
 801f90a:	f000 f8ff 	bl	801fb0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801f90e:	2100      	movs	r1, #0
 801f910:	6878      	ldr	r0, [r7, #4]
 801f912:	f001 f8c9 	bl	8020aa8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801f916:	f000 f907 	bl	801fb28 <xTaskResumeAll>
 801f91a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801f91c:	68fb      	ldr	r3, [r7, #12]
 801f91e:	2b00      	cmp	r3, #0
 801f920:	d107      	bne.n	801f932 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
 801f922:	4b09      	ldr	r3, [pc, #36]	; (801f948 <vTaskDelay+0x64>)
 801f924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f928:	601a      	str	r2, [r3, #0]
 801f92a:	f3bf 8f4f 	dsb	sy
 801f92e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801f932:	bf00      	nop
 801f934:	3710      	adds	r7, #16
 801f936:	46bd      	mov	sp, r7
 801f938:	bd80      	pop	{r7, pc}
 801f93a:	bf00      	nop
 801f93c:	2000d3a8 	.word	0x2000d3a8
 801f940:	0802cee8 	.word	0x0802cee8
 801f944:	0802cfd4 	.word	0x0802cfd4
 801f948:	e000ed04 	.word	0xe000ed04

0801f94c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 801f94c:	b580      	push	{r7, lr}
 801f94e:	b088      	sub	sp, #32
 801f950:	af00      	add	r7, sp, #0
 801f952:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 801f954:	687b      	ldr	r3, [r7, #4]
 801f956:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801f958:	69bb      	ldr	r3, [r7, #24]
 801f95a:	2b00      	cmp	r3, #0
 801f95c:	d105      	bne.n	801f96a <eTaskGetState+0x1e>
 801f95e:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 801f962:	4926      	ldr	r1, [pc, #152]	; (801f9fc <eTaskGetState+0xb0>)
 801f964:	4826      	ldr	r0, [pc, #152]	; (801fa00 <eTaskGetState+0xb4>)
 801f966:	f7f1 f959 	bl	8010c1c <assertFail>

		if( pxTCB == pxCurrentTCB )
 801f96a:	4b26      	ldr	r3, [pc, #152]	; (801fa04 <eTaskGetState+0xb8>)
 801f96c:	681b      	ldr	r3, [r3, #0]
 801f96e:	69ba      	ldr	r2, [r7, #24]
 801f970:	429a      	cmp	r2, r3
 801f972:	d102      	bne.n	801f97a <eTaskGetState+0x2e>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 801f974:	2300      	movs	r3, #0
 801f976:	77fb      	strb	r3, [r7, #31]
 801f978:	e03a      	b.n	801f9f0 <eTaskGetState+0xa4>
		}
		else
		{
			taskENTER_CRITICAL();
 801f97a:	f001 fe29 	bl	80215d0 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801f97e:	69bb      	ldr	r3, [r7, #24]
 801f980:	695b      	ldr	r3, [r3, #20]
 801f982:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 801f984:	4b20      	ldr	r3, [pc, #128]	; (801fa08 <eTaskGetState+0xbc>)
 801f986:	681b      	ldr	r3, [r3, #0]
 801f988:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801f98a:	4b20      	ldr	r3, [pc, #128]	; (801fa0c <eTaskGetState+0xc0>)
 801f98c:	681b      	ldr	r3, [r3, #0]
 801f98e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 801f990:	f001 fe4c 	bl	802162c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801f994:	697a      	ldr	r2, [r7, #20]
 801f996:	693b      	ldr	r3, [r7, #16]
 801f998:	429a      	cmp	r2, r3
 801f99a:	d003      	beq.n	801f9a4 <eTaskGetState+0x58>
 801f99c:	697a      	ldr	r2, [r7, #20]
 801f99e:	68fb      	ldr	r3, [r7, #12]
 801f9a0:	429a      	cmp	r2, r3
 801f9a2:	d102      	bne.n	801f9aa <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 801f9a4:	2302      	movs	r3, #2
 801f9a6:	77fb      	strb	r3, [r7, #31]
 801f9a8:	e022      	b.n	801f9f0 <eTaskGetState+0xa4>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 801f9aa:	697b      	ldr	r3, [r7, #20]
 801f9ac:	4a18      	ldr	r2, [pc, #96]	; (801fa10 <eTaskGetState+0xc4>)
 801f9ae:	4293      	cmp	r3, r2
 801f9b0:	d112      	bne.n	801f9d8 <eTaskGetState+0x8c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801f9b2:	69bb      	ldr	r3, [r7, #24]
 801f9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f9b6:	2b00      	cmp	r3, #0
 801f9b8:	d10b      	bne.n	801f9d2 <eTaskGetState+0x86>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801f9ba:	69bb      	ldr	r3, [r7, #24]
 801f9bc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 801f9c0:	b2db      	uxtb	r3, r3
 801f9c2:	2b01      	cmp	r3, #1
 801f9c4:	d102      	bne.n	801f9cc <eTaskGetState+0x80>
							{
								eReturn = eBlocked;
 801f9c6:	2302      	movs	r3, #2
 801f9c8:	77fb      	strb	r3, [r7, #31]
 801f9ca:	e011      	b.n	801f9f0 <eTaskGetState+0xa4>
							}
							else
							{
								eReturn = eSuspended;
 801f9cc:	2303      	movs	r3, #3
 801f9ce:	77fb      	strb	r3, [r7, #31]
 801f9d0:	e00e      	b.n	801f9f0 <eTaskGetState+0xa4>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801f9d2:	2302      	movs	r3, #2
 801f9d4:	77fb      	strb	r3, [r7, #31]
 801f9d6:	e00b      	b.n	801f9f0 <eTaskGetState+0xa4>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801f9d8:	697b      	ldr	r3, [r7, #20]
 801f9da:	4a0e      	ldr	r2, [pc, #56]	; (801fa14 <eTaskGetState+0xc8>)
 801f9dc:	4293      	cmp	r3, r2
 801f9de:	d002      	beq.n	801f9e6 <eTaskGetState+0x9a>
 801f9e0:	697b      	ldr	r3, [r7, #20]
 801f9e2:	2b00      	cmp	r3, #0
 801f9e4:	d102      	bne.n	801f9ec <eTaskGetState+0xa0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801f9e6:	2304      	movs	r3, #4
 801f9e8:	77fb      	strb	r3, [r7, #31]
 801f9ea:	e001      	b.n	801f9f0 <eTaskGetState+0xa4>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801f9ec:	2301      	movs	r3, #1
 801f9ee:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801f9f0:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801f9f2:	4618      	mov	r0, r3
 801f9f4:	3720      	adds	r7, #32
 801f9f6:	46bd      	mov	sp, r7
 801f9f8:	bd80      	pop	{r7, pc}
 801f9fa:	bf00      	nop
 801f9fc:	0802cee8 	.word	0x0802cee8
 801fa00:	0802d01c 	.word	0x0802d01c
 801fa04:	2000d178 	.word	0x2000d178
 801fa08:	2000d334 	.word	0x2000d334
 801fa0c:	2000d338 	.word	0x2000d338
 801fa10:	2000d368 	.word	0x2000d368
 801fa14:	2000d350 	.word	0x2000d350

0801fa18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801fa18:	b580      	push	{r7, lr}
 801fa1a:	b08a      	sub	sp, #40	; 0x28
 801fa1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801fa1e:	2300      	movs	r3, #0
 801fa20:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801fa22:	2300      	movs	r3, #0
 801fa24:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801fa26:	1d3a      	adds	r2, r7, #4
 801fa28:	f107 0108 	add.w	r1, r7, #8
 801fa2c:	f107 030c 	add.w	r3, r7, #12
 801fa30:	4618      	mov	r0, r3
 801fa32:	f7f4 fb8f 	bl	8014154 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801fa36:	6879      	ldr	r1, [r7, #4]
 801fa38:	68bb      	ldr	r3, [r7, #8]
 801fa3a:	68fa      	ldr	r2, [r7, #12]
 801fa3c:	9202      	str	r2, [sp, #8]
 801fa3e:	9301      	str	r3, [sp, #4]
 801fa40:	2300      	movs	r3, #0
 801fa42:	9300      	str	r3, [sp, #0]
 801fa44:	2300      	movs	r3, #0
 801fa46:	460a      	mov	r2, r1
 801fa48:	4925      	ldr	r1, [pc, #148]	; (801fae0 <vTaskStartScheduler+0xc8>)
 801fa4a:	4826      	ldr	r0, [pc, #152]	; (801fae4 <vTaskStartScheduler+0xcc>)
 801fa4c:	f7ff fd92 	bl	801f574 <xTaskCreateStatic>
 801fa50:	4603      	mov	r3, r0
 801fa52:	4a25      	ldr	r2, [pc, #148]	; (801fae8 <vTaskStartScheduler+0xd0>)
 801fa54:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801fa56:	4b24      	ldr	r3, [pc, #144]	; (801fae8 <vTaskStartScheduler+0xd0>)
 801fa58:	681b      	ldr	r3, [r3, #0]
 801fa5a:	2b00      	cmp	r3, #0
 801fa5c:	d002      	beq.n	801fa64 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 801fa5e:	2301      	movs	r3, #1
 801fa60:	617b      	str	r3, [r7, #20]
 801fa62:	e001      	b.n	801fa68 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 801fa64:	2300      	movs	r3, #0
 801fa66:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801fa68:	697b      	ldr	r3, [r7, #20]
 801fa6a:	2b01      	cmp	r3, #1
 801fa6c:	d102      	bne.n	801fa74 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 801fa6e:	f001 f881 	bl	8020b74 <xTimerCreateTimerTask>
 801fa72:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801fa74:	697b      	ldr	r3, [r7, #20]
 801fa76:	2b01      	cmp	r3, #1
 801fa78:	d123      	bne.n	801fac2 <vTaskStartScheduler+0xaa>
	__asm volatile
 801fa7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fa7e:	f383 8811 	msr	BASEPRI, r3
 801fa82:	f3bf 8f6f 	isb	sy
 801fa86:	f3bf 8f4f 	dsb	sy
 801fa8a:	613b      	str	r3, [r7, #16]
}
 801fa8c:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801fa8e:	4b17      	ldr	r3, [pc, #92]	; (801faec <vTaskStartScheduler+0xd4>)
 801fa90:	681b      	ldr	r3, [r3, #0]
 801fa92:	3360      	adds	r3, #96	; 0x60
 801fa94:	4a16      	ldr	r2, [pc, #88]	; (801faf0 <vTaskStartScheduler+0xd8>)
 801fa96:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801fa98:	4b16      	ldr	r3, [pc, #88]	; (801faf4 <vTaskStartScheduler+0xdc>)
 801fa9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801fa9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801faa0:	4b15      	ldr	r3, [pc, #84]	; (801faf8 <vTaskStartScheduler+0xe0>)
 801faa2:	2201      	movs	r2, #1
 801faa4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801faa6:	4b15      	ldr	r3, [pc, #84]	; (801fafc <vTaskStartScheduler+0xe4>)
 801faa8:	2200      	movs	r2, #0
 801faaa:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801faac:	f7f4 fb38 	bl	8014120 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();
 801fab0:	4b0e      	ldr	r3, [pc, #56]	; (801faec <vTaskStartScheduler+0xd4>)
 801fab2:	681b      	ldr	r3, [r3, #0]
 801fab4:	3334      	adds	r3, #52	; 0x34
 801fab6:	4a12      	ldr	r2, [pc, #72]	; (801fb00 <vTaskStartScheduler+0xe8>)
 801fab8:	681b      	ldr	r3, [r3, #0]
 801faba:	6013      	str	r3, [r2, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801fabc:	f001 fce0 	bl	8021480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801fac0:	e009      	b.n	801fad6 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801fac2:	697b      	ldr	r3, [r7, #20]
 801fac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801fac8:	d105      	bne.n	801fad6 <vTaskStartScheduler+0xbe>
 801faca:	f640 022a 	movw	r2, #2090	; 0x82a
 801face:	490d      	ldr	r1, [pc, #52]	; (801fb04 <vTaskStartScheduler+0xec>)
 801fad0:	480d      	ldr	r0, [pc, #52]	; (801fb08 <vTaskStartScheduler+0xf0>)
 801fad2:	f7f1 f8a3 	bl	8010c1c <assertFail>
}
 801fad6:	bf00      	nop
 801fad8:	3718      	adds	r7, #24
 801fada:	46bd      	mov	sp, r7
 801fadc:	bd80      	pop	{r7, pc}
 801fade:	bf00      	nop
 801fae0:	0802d068 	.word	0x0802d068
 801fae4:	080202fd 	.word	0x080202fd
 801fae8:	2000d3a4 	.word	0x2000d3a4
 801faec:	2000d178 	.word	0x2000d178
 801faf0:	20001038 	.word	0x20001038
 801faf4:	2000d3a0 	.word	0x2000d3a0
 801faf8:	2000d38c 	.word	0x2000d38c
 801fafc:	2000d384 	.word	0x2000d384
 801fb00:	e0000004 	.word	0xe0000004
 801fb04:	0802cee8 	.word	0x0802cee8
 801fb08:	0802d070 	.word	0x0802d070

0801fb0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801fb0c:	b480      	push	{r7}
 801fb0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801fb10:	4b04      	ldr	r3, [pc, #16]	; (801fb24 <vTaskSuspendAll+0x18>)
 801fb12:	681b      	ldr	r3, [r3, #0]
 801fb14:	3301      	adds	r3, #1
 801fb16:	4a03      	ldr	r2, [pc, #12]	; (801fb24 <vTaskSuspendAll+0x18>)
 801fb18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801fb1a:	bf00      	nop
 801fb1c:	46bd      	mov	sp, r7
 801fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb22:	4770      	bx	lr
 801fb24:	2000d3a8 	.word	0x2000d3a8

0801fb28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801fb28:	b580      	push	{r7, lr}
 801fb2a:	b084      	sub	sp, #16
 801fb2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801fb2e:	2300      	movs	r3, #0
 801fb30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801fb32:	2300      	movs	r3, #0
 801fb34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801fb36:	4b3f      	ldr	r3, [pc, #252]	; (801fc34 <xTaskResumeAll+0x10c>)
 801fb38:	681b      	ldr	r3, [r3, #0]
 801fb3a:	2b00      	cmp	r3, #0
 801fb3c:	d105      	bne.n	801fb4a <xTaskResumeAll+0x22>
 801fb3e:	f640 0299 	movw	r2, #2201	; 0x899
 801fb42:	493d      	ldr	r1, [pc, #244]	; (801fc38 <xTaskResumeAll+0x110>)
 801fb44:	483d      	ldr	r0, [pc, #244]	; (801fc3c <xTaskResumeAll+0x114>)
 801fb46:	f7f1 f869 	bl	8010c1c <assertFail>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801fb4a:	f001 fd41 	bl	80215d0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801fb4e:	4b39      	ldr	r3, [pc, #228]	; (801fc34 <xTaskResumeAll+0x10c>)
 801fb50:	681b      	ldr	r3, [r3, #0]
 801fb52:	3b01      	subs	r3, #1
 801fb54:	4a37      	ldr	r2, [pc, #220]	; (801fc34 <xTaskResumeAll+0x10c>)
 801fb56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801fb58:	4b36      	ldr	r3, [pc, #216]	; (801fc34 <xTaskResumeAll+0x10c>)
 801fb5a:	681b      	ldr	r3, [r3, #0]
 801fb5c:	2b00      	cmp	r3, #0
 801fb5e:	d161      	bne.n	801fc24 <xTaskResumeAll+0xfc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801fb60:	4b37      	ldr	r3, [pc, #220]	; (801fc40 <xTaskResumeAll+0x118>)
 801fb62:	681b      	ldr	r3, [r3, #0]
 801fb64:	2b00      	cmp	r3, #0
 801fb66:	d05d      	beq.n	801fc24 <xTaskResumeAll+0xfc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801fb68:	e02e      	b.n	801fbc8 <xTaskResumeAll+0xa0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801fb6a:	4b36      	ldr	r3, [pc, #216]	; (801fc44 <xTaskResumeAll+0x11c>)
 801fb6c:	68db      	ldr	r3, [r3, #12]
 801fb6e:	68db      	ldr	r3, [r3, #12]
 801fb70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801fb72:	68fb      	ldr	r3, [r7, #12]
 801fb74:	3318      	adds	r3, #24
 801fb76:	4618      	mov	r0, r3
 801fb78:	f7fe fd5a 	bl	801e630 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801fb7c:	68fb      	ldr	r3, [r7, #12]
 801fb7e:	3304      	adds	r3, #4
 801fb80:	4618      	mov	r0, r3
 801fb82:	f7fe fd55 	bl	801e630 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801fb86:	68fb      	ldr	r3, [r7, #12]
 801fb88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fb8a:	2201      	movs	r2, #1
 801fb8c:	409a      	lsls	r2, r3
 801fb8e:	4b2e      	ldr	r3, [pc, #184]	; (801fc48 <xTaskResumeAll+0x120>)
 801fb90:	681b      	ldr	r3, [r3, #0]
 801fb92:	4313      	orrs	r3, r2
 801fb94:	4a2c      	ldr	r2, [pc, #176]	; (801fc48 <xTaskResumeAll+0x120>)
 801fb96:	6013      	str	r3, [r2, #0]
 801fb98:	68fb      	ldr	r3, [r7, #12]
 801fb9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fb9c:	4613      	mov	r3, r2
 801fb9e:	009b      	lsls	r3, r3, #2
 801fba0:	4413      	add	r3, r2
 801fba2:	009b      	lsls	r3, r3, #2
 801fba4:	4a29      	ldr	r2, [pc, #164]	; (801fc4c <xTaskResumeAll+0x124>)
 801fba6:	441a      	add	r2, r3
 801fba8:	68fb      	ldr	r3, [r7, #12]
 801fbaa:	3304      	adds	r3, #4
 801fbac:	4619      	mov	r1, r3
 801fbae:	4610      	mov	r0, r2
 801fbb0:	f7fe fce1 	bl	801e576 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801fbb4:	68fb      	ldr	r3, [r7, #12]
 801fbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fbb8:	4b25      	ldr	r3, [pc, #148]	; (801fc50 <xTaskResumeAll+0x128>)
 801fbba:	681b      	ldr	r3, [r3, #0]
 801fbbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fbbe:	429a      	cmp	r2, r3
 801fbc0:	d302      	bcc.n	801fbc8 <xTaskResumeAll+0xa0>
					{
						xYieldPending = pdTRUE;
 801fbc2:	4b24      	ldr	r3, [pc, #144]	; (801fc54 <xTaskResumeAll+0x12c>)
 801fbc4:	2201      	movs	r2, #1
 801fbc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801fbc8:	4b1e      	ldr	r3, [pc, #120]	; (801fc44 <xTaskResumeAll+0x11c>)
 801fbca:	681b      	ldr	r3, [r3, #0]
 801fbcc:	2b00      	cmp	r3, #0
 801fbce:	d1cc      	bne.n	801fb6a <xTaskResumeAll+0x42>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801fbd0:	68fb      	ldr	r3, [r7, #12]
 801fbd2:	2b00      	cmp	r3, #0
 801fbd4:	d001      	beq.n	801fbda <xTaskResumeAll+0xb2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801fbd6:	f000 fd21 	bl	802061c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801fbda:	4b1f      	ldr	r3, [pc, #124]	; (801fc58 <xTaskResumeAll+0x130>)
 801fbdc:	681b      	ldr	r3, [r3, #0]
 801fbde:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801fbe0:	687b      	ldr	r3, [r7, #4]
 801fbe2:	2b00      	cmp	r3, #0
 801fbe4:	d010      	beq.n	801fc08 <xTaskResumeAll+0xe0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801fbe6:	f000 f8db 	bl	801fda0 <xTaskIncrementTick>
 801fbea:	4603      	mov	r3, r0
 801fbec:	2b00      	cmp	r3, #0
 801fbee:	d002      	beq.n	801fbf6 <xTaskResumeAll+0xce>
							{
								xYieldPending = pdTRUE;
 801fbf0:	4b18      	ldr	r3, [pc, #96]	; (801fc54 <xTaskResumeAll+0x12c>)
 801fbf2:	2201      	movs	r2, #1
 801fbf4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801fbf6:	687b      	ldr	r3, [r7, #4]
 801fbf8:	3b01      	subs	r3, #1
 801fbfa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801fbfc:	687b      	ldr	r3, [r7, #4]
 801fbfe:	2b00      	cmp	r3, #0
 801fc00:	d1f1      	bne.n	801fbe6 <xTaskResumeAll+0xbe>

						xPendedTicks = 0;
 801fc02:	4b15      	ldr	r3, [pc, #84]	; (801fc58 <xTaskResumeAll+0x130>)
 801fc04:	2200      	movs	r2, #0
 801fc06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801fc08:	4b12      	ldr	r3, [pc, #72]	; (801fc54 <xTaskResumeAll+0x12c>)
 801fc0a:	681b      	ldr	r3, [r3, #0]
 801fc0c:	2b00      	cmp	r3, #0
 801fc0e:	d009      	beq.n	801fc24 <xTaskResumeAll+0xfc>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801fc10:	2301      	movs	r3, #1
 801fc12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801fc14:	4b11      	ldr	r3, [pc, #68]	; (801fc5c <xTaskResumeAll+0x134>)
 801fc16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fc1a:	601a      	str	r2, [r3, #0]
 801fc1c:	f3bf 8f4f 	dsb	sy
 801fc20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801fc24:	f001 fd02 	bl	802162c <vPortExitCritical>

	return xAlreadyYielded;
 801fc28:	68bb      	ldr	r3, [r7, #8]
}
 801fc2a:	4618      	mov	r0, r3
 801fc2c:	3710      	adds	r7, #16
 801fc2e:	46bd      	mov	sp, r7
 801fc30:	bd80      	pop	{r7, pc}
 801fc32:	bf00      	nop
 801fc34:	2000d3a8 	.word	0x2000d3a8
 801fc38:	0802cee8 	.word	0x0802cee8
 801fc3c:	0802d0a4 	.word	0x0802d0a4
 801fc40:	2000d380 	.word	0x2000d380
 801fc44:	2000d33c 	.word	0x2000d33c
 801fc48:	2000d388 	.word	0x2000d388
 801fc4c:	2000d17c 	.word	0x2000d17c
 801fc50:	2000d178 	.word	0x2000d178
 801fc54:	2000d394 	.word	0x2000d394
 801fc58:	2000d390 	.word	0x2000d390
 801fc5c:	e000ed04 	.word	0xe000ed04

0801fc60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801fc60:	b480      	push	{r7}
 801fc62:	b083      	sub	sp, #12
 801fc64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801fc66:	4b05      	ldr	r3, [pc, #20]	; (801fc7c <xTaskGetTickCount+0x1c>)
 801fc68:	681b      	ldr	r3, [r3, #0]
 801fc6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801fc6c:	687b      	ldr	r3, [r7, #4]
}
 801fc6e:	4618      	mov	r0, r3
 801fc70:	370c      	adds	r7, #12
 801fc72:	46bd      	mov	sp, r7
 801fc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc78:	4770      	bx	lr
 801fc7a:	bf00      	nop
 801fc7c:	2000d384 	.word	0x2000d384

0801fc80 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 801fc80:	b580      	push	{r7, lr}
 801fc82:	b086      	sub	sp, #24
 801fc84:	af00      	add	r7, sp, #0
 801fc86:	60f8      	str	r0, [r7, #12]
 801fc88:	60b9      	str	r1, [r7, #8]
 801fc8a:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 801fc8c:	2300      	movs	r3, #0
 801fc8e:	617b      	str	r3, [r7, #20]
 801fc90:	2314      	movs	r3, #20
 801fc92:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 801fc94:	f7ff ff3a 	bl	801fb0c <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 801fc98:	4b3b      	ldr	r3, [pc, #236]	; (801fd88 <uxTaskGetSystemState+0x108>)
 801fc9a:	681b      	ldr	r3, [r3, #0]
 801fc9c:	68ba      	ldr	r2, [r7, #8]
 801fc9e:	429a      	cmp	r2, r3
 801fca0:	d36a      	bcc.n	801fd78 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 801fca2:	693b      	ldr	r3, [r7, #16]
 801fca4:	3b01      	subs	r3, #1
 801fca6:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 801fca8:	697a      	ldr	r2, [r7, #20]
 801fcaa:	4613      	mov	r3, r2
 801fcac:	00db      	lsls	r3, r3, #3
 801fcae:	4413      	add	r3, r2
 801fcb0:	009b      	lsls	r3, r3, #2
 801fcb2:	461a      	mov	r2, r3
 801fcb4:	68fb      	ldr	r3, [r7, #12]
 801fcb6:	1898      	adds	r0, r3, r2
 801fcb8:	693a      	ldr	r2, [r7, #16]
 801fcba:	4613      	mov	r3, r2
 801fcbc:	009b      	lsls	r3, r3, #2
 801fcbe:	4413      	add	r3, r2
 801fcc0:	009b      	lsls	r3, r3, #2
 801fcc2:	4a32      	ldr	r2, [pc, #200]	; (801fd8c <uxTaskGetSystemState+0x10c>)
 801fcc4:	4413      	add	r3, r2
 801fcc6:	2201      	movs	r2, #1
 801fcc8:	4619      	mov	r1, r3
 801fcca:	f000 fc05 	bl	80204d8 <prvListTasksWithinSingleList>
 801fcce:	4602      	mov	r2, r0
 801fcd0:	697b      	ldr	r3, [r7, #20]
 801fcd2:	4413      	add	r3, r2
 801fcd4:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801fcd6:	693b      	ldr	r3, [r7, #16]
 801fcd8:	2b00      	cmp	r3, #0
 801fcda:	d1e2      	bne.n	801fca2 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 801fcdc:	697a      	ldr	r2, [r7, #20]
 801fcde:	4613      	mov	r3, r2
 801fce0:	00db      	lsls	r3, r3, #3
 801fce2:	4413      	add	r3, r2
 801fce4:	009b      	lsls	r3, r3, #2
 801fce6:	461a      	mov	r2, r3
 801fce8:	68fb      	ldr	r3, [r7, #12]
 801fcea:	4413      	add	r3, r2
 801fcec:	4a28      	ldr	r2, [pc, #160]	; (801fd90 <uxTaskGetSystemState+0x110>)
 801fcee:	6811      	ldr	r1, [r2, #0]
 801fcf0:	2202      	movs	r2, #2
 801fcf2:	4618      	mov	r0, r3
 801fcf4:	f000 fbf0 	bl	80204d8 <prvListTasksWithinSingleList>
 801fcf8:	4602      	mov	r2, r0
 801fcfa:	697b      	ldr	r3, [r7, #20]
 801fcfc:	4413      	add	r3, r2
 801fcfe:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 801fd00:	697a      	ldr	r2, [r7, #20]
 801fd02:	4613      	mov	r3, r2
 801fd04:	00db      	lsls	r3, r3, #3
 801fd06:	4413      	add	r3, r2
 801fd08:	009b      	lsls	r3, r3, #2
 801fd0a:	461a      	mov	r2, r3
 801fd0c:	68fb      	ldr	r3, [r7, #12]
 801fd0e:	4413      	add	r3, r2
 801fd10:	4a20      	ldr	r2, [pc, #128]	; (801fd94 <uxTaskGetSystemState+0x114>)
 801fd12:	6811      	ldr	r1, [r2, #0]
 801fd14:	2202      	movs	r2, #2
 801fd16:	4618      	mov	r0, r3
 801fd18:	f000 fbde 	bl	80204d8 <prvListTasksWithinSingleList>
 801fd1c:	4602      	mov	r2, r0
 801fd1e:	697b      	ldr	r3, [r7, #20]
 801fd20:	4413      	add	r3, r2
 801fd22:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 801fd24:	697a      	ldr	r2, [r7, #20]
 801fd26:	4613      	mov	r3, r2
 801fd28:	00db      	lsls	r3, r3, #3
 801fd2a:	4413      	add	r3, r2
 801fd2c:	009b      	lsls	r3, r3, #2
 801fd2e:	461a      	mov	r2, r3
 801fd30:	68fb      	ldr	r3, [r7, #12]
 801fd32:	4413      	add	r3, r2
 801fd34:	2204      	movs	r2, #4
 801fd36:	4918      	ldr	r1, [pc, #96]	; (801fd98 <uxTaskGetSystemState+0x118>)
 801fd38:	4618      	mov	r0, r3
 801fd3a:	f000 fbcd 	bl	80204d8 <prvListTasksWithinSingleList>
 801fd3e:	4602      	mov	r2, r0
 801fd40:	697b      	ldr	r3, [r7, #20]
 801fd42:	4413      	add	r3, r2
 801fd44:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 801fd46:	697a      	ldr	r2, [r7, #20]
 801fd48:	4613      	mov	r3, r2
 801fd4a:	00db      	lsls	r3, r3, #3
 801fd4c:	4413      	add	r3, r2
 801fd4e:	009b      	lsls	r3, r3, #2
 801fd50:	461a      	mov	r2, r3
 801fd52:	68fb      	ldr	r3, [r7, #12]
 801fd54:	4413      	add	r3, r2
 801fd56:	2203      	movs	r2, #3
 801fd58:	4910      	ldr	r1, [pc, #64]	; (801fd9c <uxTaskGetSystemState+0x11c>)
 801fd5a:	4618      	mov	r0, r3
 801fd5c:	f000 fbbc 	bl	80204d8 <prvListTasksWithinSingleList>
 801fd60:	4602      	mov	r2, r0
 801fd62:	697b      	ldr	r3, [r7, #20]
 801fd64:	4413      	add	r3, r2
 801fd66:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 801fd68:	687b      	ldr	r3, [r7, #4]
 801fd6a:	2b00      	cmp	r3, #0
 801fd6c:	d004      	beq.n	801fd78 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 801fd6e:	f7f4 f9de 	bl	801412e <getRunTimeCounterValue>
 801fd72:	4602      	mov	r2, r0
 801fd74:	687b      	ldr	r3, [r7, #4]
 801fd76:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 801fd78:	f7ff fed6 	bl	801fb28 <xTaskResumeAll>

		return uxTask;
 801fd7c:	697b      	ldr	r3, [r7, #20]
	}
 801fd7e:	4618      	mov	r0, r3
 801fd80:	3718      	adds	r7, #24
 801fd82:	46bd      	mov	sp, r7
 801fd84:	bd80      	pop	{r7, pc}
 801fd86:	bf00      	nop
 801fd88:	2000d380 	.word	0x2000d380
 801fd8c:	2000d17c 	.word	0x2000d17c
 801fd90:	2000d334 	.word	0x2000d334
 801fd94:	2000d338 	.word	0x2000d338
 801fd98:	2000d350 	.word	0x2000d350
 801fd9c:	2000d368 	.word	0x2000d368

0801fda0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801fda0:	b580      	push	{r7, lr}
 801fda2:	b086      	sub	sp, #24
 801fda4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801fda6:	2300      	movs	r3, #0
 801fda8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 801fdaa:	4a4e      	ldr	r2, [pc, #312]	; (801fee4 <xTaskIncrementTick+0x144>)
 801fdac:	4b4e      	ldr	r3, [pc, #312]	; (801fee8 <xTaskIncrementTick+0x148>)
 801fdae:	681b      	ldr	r3, [r3, #0]
 801fdb0:	6013      	str	r3, [r2, #0]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801fdb2:	4b4e      	ldr	r3, [pc, #312]	; (801feec <xTaskIncrementTick+0x14c>)
 801fdb4:	681b      	ldr	r3, [r3, #0]
 801fdb6:	2b00      	cmp	r3, #0
 801fdb8:	f040 8089 	bne.w	801fece <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801fdbc:	4b4a      	ldr	r3, [pc, #296]	; (801fee8 <xTaskIncrementTick+0x148>)
 801fdbe:	681b      	ldr	r3, [r3, #0]
 801fdc0:	3301      	adds	r3, #1
 801fdc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801fdc4:	4a48      	ldr	r2, [pc, #288]	; (801fee8 <xTaskIncrementTick+0x148>)
 801fdc6:	693b      	ldr	r3, [r7, #16]
 801fdc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801fdca:	693b      	ldr	r3, [r7, #16]
 801fdcc:	2b00      	cmp	r3, #0
 801fdce:	d11b      	bne.n	801fe08 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801fdd0:	4b47      	ldr	r3, [pc, #284]	; (801fef0 <xTaskIncrementTick+0x150>)
 801fdd2:	681b      	ldr	r3, [r3, #0]
 801fdd4:	681b      	ldr	r3, [r3, #0]
 801fdd6:	2b00      	cmp	r3, #0
 801fdd8:	d005      	beq.n	801fde6 <xTaskIncrementTick+0x46>
 801fdda:	f640 22a9 	movw	r2, #2729	; 0xaa9
 801fdde:	4945      	ldr	r1, [pc, #276]	; (801fef4 <xTaskIncrementTick+0x154>)
 801fde0:	4845      	ldr	r0, [pc, #276]	; (801fef8 <xTaskIncrementTick+0x158>)
 801fde2:	f7f0 ff1b 	bl	8010c1c <assertFail>
 801fde6:	4b42      	ldr	r3, [pc, #264]	; (801fef0 <xTaskIncrementTick+0x150>)
 801fde8:	681b      	ldr	r3, [r3, #0]
 801fdea:	60fb      	str	r3, [r7, #12]
 801fdec:	4b43      	ldr	r3, [pc, #268]	; (801fefc <xTaskIncrementTick+0x15c>)
 801fdee:	681b      	ldr	r3, [r3, #0]
 801fdf0:	4a3f      	ldr	r2, [pc, #252]	; (801fef0 <xTaskIncrementTick+0x150>)
 801fdf2:	6013      	str	r3, [r2, #0]
 801fdf4:	4a41      	ldr	r2, [pc, #260]	; (801fefc <xTaskIncrementTick+0x15c>)
 801fdf6:	68fb      	ldr	r3, [r7, #12]
 801fdf8:	6013      	str	r3, [r2, #0]
 801fdfa:	4b41      	ldr	r3, [pc, #260]	; (801ff00 <xTaskIncrementTick+0x160>)
 801fdfc:	681b      	ldr	r3, [r3, #0]
 801fdfe:	3301      	adds	r3, #1
 801fe00:	4a3f      	ldr	r2, [pc, #252]	; (801ff00 <xTaskIncrementTick+0x160>)
 801fe02:	6013      	str	r3, [r2, #0]
 801fe04:	f000 fc0a 	bl	802061c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801fe08:	4b3e      	ldr	r3, [pc, #248]	; (801ff04 <xTaskIncrementTick+0x164>)
 801fe0a:	681b      	ldr	r3, [r3, #0]
 801fe0c:	693a      	ldr	r2, [r7, #16]
 801fe0e:	429a      	cmp	r2, r3
 801fe10:	d348      	bcc.n	801fea4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801fe12:	4b37      	ldr	r3, [pc, #220]	; (801fef0 <xTaskIncrementTick+0x150>)
 801fe14:	681b      	ldr	r3, [r3, #0]
 801fe16:	681b      	ldr	r3, [r3, #0]
 801fe18:	2b00      	cmp	r3, #0
 801fe1a:	d104      	bne.n	801fe26 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801fe1c:	4b39      	ldr	r3, [pc, #228]	; (801ff04 <xTaskIncrementTick+0x164>)
 801fe1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801fe22:	601a      	str	r2, [r3, #0]
					break;
 801fe24:	e03e      	b.n	801fea4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801fe26:	4b32      	ldr	r3, [pc, #200]	; (801fef0 <xTaskIncrementTick+0x150>)
 801fe28:	681b      	ldr	r3, [r3, #0]
 801fe2a:	68db      	ldr	r3, [r3, #12]
 801fe2c:	68db      	ldr	r3, [r3, #12]
 801fe2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801fe30:	68bb      	ldr	r3, [r7, #8]
 801fe32:	685b      	ldr	r3, [r3, #4]
 801fe34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801fe36:	693a      	ldr	r2, [r7, #16]
 801fe38:	687b      	ldr	r3, [r7, #4]
 801fe3a:	429a      	cmp	r2, r3
 801fe3c:	d203      	bcs.n	801fe46 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801fe3e:	4a31      	ldr	r2, [pc, #196]	; (801ff04 <xTaskIncrementTick+0x164>)
 801fe40:	687b      	ldr	r3, [r7, #4]
 801fe42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801fe44:	e02e      	b.n	801fea4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801fe46:	68bb      	ldr	r3, [r7, #8]
 801fe48:	3304      	adds	r3, #4
 801fe4a:	4618      	mov	r0, r3
 801fe4c:	f7fe fbf0 	bl	801e630 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801fe50:	68bb      	ldr	r3, [r7, #8]
 801fe52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe54:	2b00      	cmp	r3, #0
 801fe56:	d004      	beq.n	801fe62 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801fe58:	68bb      	ldr	r3, [r7, #8]
 801fe5a:	3318      	adds	r3, #24
 801fe5c:	4618      	mov	r0, r3
 801fe5e:	f7fe fbe7 	bl	801e630 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801fe62:	68bb      	ldr	r3, [r7, #8]
 801fe64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe66:	2201      	movs	r2, #1
 801fe68:	409a      	lsls	r2, r3
 801fe6a:	4b27      	ldr	r3, [pc, #156]	; (801ff08 <xTaskIncrementTick+0x168>)
 801fe6c:	681b      	ldr	r3, [r3, #0]
 801fe6e:	4313      	orrs	r3, r2
 801fe70:	4a25      	ldr	r2, [pc, #148]	; (801ff08 <xTaskIncrementTick+0x168>)
 801fe72:	6013      	str	r3, [r2, #0]
 801fe74:	68bb      	ldr	r3, [r7, #8]
 801fe76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fe78:	4613      	mov	r3, r2
 801fe7a:	009b      	lsls	r3, r3, #2
 801fe7c:	4413      	add	r3, r2
 801fe7e:	009b      	lsls	r3, r3, #2
 801fe80:	4a22      	ldr	r2, [pc, #136]	; (801ff0c <xTaskIncrementTick+0x16c>)
 801fe82:	441a      	add	r2, r3
 801fe84:	68bb      	ldr	r3, [r7, #8]
 801fe86:	3304      	adds	r3, #4
 801fe88:	4619      	mov	r1, r3
 801fe8a:	4610      	mov	r0, r2
 801fe8c:	f7fe fb73 	bl	801e576 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801fe90:	68bb      	ldr	r3, [r7, #8]
 801fe92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fe94:	4b1e      	ldr	r3, [pc, #120]	; (801ff10 <xTaskIncrementTick+0x170>)
 801fe96:	681b      	ldr	r3, [r3, #0]
 801fe98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe9a:	429a      	cmp	r2, r3
 801fe9c:	d3b9      	bcc.n	801fe12 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801fe9e:	2301      	movs	r3, #1
 801fea0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801fea2:	e7b6      	b.n	801fe12 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801fea4:	4b1a      	ldr	r3, [pc, #104]	; (801ff10 <xTaskIncrementTick+0x170>)
 801fea6:	681b      	ldr	r3, [r3, #0]
 801fea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801feaa:	4918      	ldr	r1, [pc, #96]	; (801ff0c <xTaskIncrementTick+0x16c>)
 801feac:	4613      	mov	r3, r2
 801feae:	009b      	lsls	r3, r3, #2
 801feb0:	4413      	add	r3, r2
 801feb2:	009b      	lsls	r3, r3, #2
 801feb4:	440b      	add	r3, r1
 801feb6:	681b      	ldr	r3, [r3, #0]
 801feb8:	2b01      	cmp	r3, #1
 801feba:	d901      	bls.n	801fec0 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 801febc:	2301      	movs	r3, #1
 801febe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801fec0:	4b14      	ldr	r3, [pc, #80]	; (801ff14 <xTaskIncrementTick+0x174>)
 801fec2:	681b      	ldr	r3, [r3, #0]
 801fec4:	2b00      	cmp	r3, #0
 801fec6:	d007      	beq.n	801fed8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 801fec8:	2301      	movs	r3, #1
 801feca:	617b      	str	r3, [r7, #20]
 801fecc:	e004      	b.n	801fed8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801fece:	4b12      	ldr	r3, [pc, #72]	; (801ff18 <xTaskIncrementTick+0x178>)
 801fed0:	681b      	ldr	r3, [r3, #0]
 801fed2:	3301      	adds	r3, #1
 801fed4:	4a10      	ldr	r2, [pc, #64]	; (801ff18 <xTaskIncrementTick+0x178>)
 801fed6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801fed8:	697b      	ldr	r3, [r7, #20]
}
 801feda:	4618      	mov	r0, r3
 801fedc:	3718      	adds	r7, #24
 801fede:	46bd      	mov	sp, r7
 801fee0:	bd80      	pop	{r7, pc}
 801fee2:	bf00      	nop
 801fee4:	e0000008 	.word	0xe0000008
 801fee8:	2000d384 	.word	0x2000d384
 801feec:	2000d3a8 	.word	0x2000d3a8
 801fef0:	2000d334 	.word	0x2000d334
 801fef4:	0802cee8 	.word	0x0802cee8
 801fef8:	0802d0f0 	.word	0x0802d0f0
 801fefc:	2000d338 	.word	0x2000d338
 801ff00:	2000d398 	.word	0x2000d398
 801ff04:	2000d3a0 	.word	0x2000d3a0
 801ff08:	2000d388 	.word	0x2000d388
 801ff0c:	2000d17c 	.word	0x2000d17c
 801ff10:	2000d178 	.word	0x2000d178
 801ff14:	2000d394 	.word	0x2000d394
 801ff18:	2000d390 	.word	0x2000d390

0801ff1c <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 801ff1c:	b580      	push	{r7, lr}
 801ff1e:	b084      	sub	sp, #16
 801ff20:	af00      	add	r7, sp, #0
 801ff22:	6078      	str	r0, [r7, #4]
 801ff24:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 801ff26:	687b      	ldr	r3, [r7, #4]
 801ff28:	2b00      	cmp	r3, #0
 801ff2a:	d103      	bne.n	801ff34 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 801ff2c:	4b08      	ldr	r3, [pc, #32]	; (801ff50 <vTaskSetApplicationTaskTag+0x34>)
 801ff2e:	681b      	ldr	r3, [r3, #0]
 801ff30:	60fb      	str	r3, [r7, #12]
 801ff32:	e001      	b.n	801ff38 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 801ff34:	687b      	ldr	r3, [r7, #4]
 801ff36:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 801ff38:	f001 fb4a 	bl	80215d0 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 801ff3c:	68fb      	ldr	r3, [r7, #12]
 801ff3e:	683a      	ldr	r2, [r7, #0]
 801ff40:	659a      	str	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 801ff42:	f001 fb73 	bl	802162c <vPortExitCritical>
	}
 801ff46:	bf00      	nop
 801ff48:	3710      	adds	r7, #16
 801ff4a:	46bd      	mov	sp, r7
 801ff4c:	bd80      	pop	{r7, pc}
 801ff4e:	bf00      	nop
 801ff50:	2000d178 	.word	0x2000d178

0801ff54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801ff54:	b580      	push	{r7, lr}
 801ff56:	b084      	sub	sp, #16
 801ff58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801ff5a:	4b44      	ldr	r3, [pc, #272]	; (802006c <vTaskSwitchContext+0x118>)
 801ff5c:	681b      	ldr	r3, [r3, #0]
 801ff5e:	2b00      	cmp	r3, #0
 801ff60:	d003      	beq.n	801ff6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801ff62:	4b43      	ldr	r3, [pc, #268]	; (8020070 <vTaskSwitchContext+0x11c>)
 801ff64:	2201      	movs	r2, #1
 801ff66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801ff68:	e07b      	b.n	8020062 <vTaskSwitchContext+0x10e>
		xYieldPending = pdFALSE;
 801ff6a:	4b41      	ldr	r3, [pc, #260]	; (8020070 <vTaskSwitchContext+0x11c>)
 801ff6c:	2200      	movs	r2, #0
 801ff6e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 801ff70:	f7f4 f8dd 	bl	801412e <getRunTimeCounterValue>
 801ff74:	4603      	mov	r3, r0
 801ff76:	4a3f      	ldr	r2, [pc, #252]	; (8020074 <vTaskSwitchContext+0x120>)
 801ff78:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 801ff7a:	4b3e      	ldr	r3, [pc, #248]	; (8020074 <vTaskSwitchContext+0x120>)
 801ff7c:	681a      	ldr	r2, [r3, #0]
 801ff7e:	4b3e      	ldr	r3, [pc, #248]	; (8020078 <vTaskSwitchContext+0x124>)
 801ff80:	681b      	ldr	r3, [r3, #0]
 801ff82:	429a      	cmp	r2, r3
 801ff84:	d909      	bls.n	801ff9a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 801ff86:	4b3d      	ldr	r3, [pc, #244]	; (802007c <vTaskSwitchContext+0x128>)
 801ff88:	681b      	ldr	r3, [r3, #0]
 801ff8a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801ff8c:	4a39      	ldr	r2, [pc, #228]	; (8020074 <vTaskSwitchContext+0x120>)
 801ff8e:	6810      	ldr	r0, [r2, #0]
 801ff90:	4a39      	ldr	r2, [pc, #228]	; (8020078 <vTaskSwitchContext+0x124>)
 801ff92:	6812      	ldr	r2, [r2, #0]
 801ff94:	1a82      	subs	r2, r0, r2
 801ff96:	440a      	add	r2, r1
 801ff98:	65da      	str	r2, [r3, #92]	; 0x5c
			ulTaskSwitchedInTime = ulTotalRunTime;
 801ff9a:	4b36      	ldr	r3, [pc, #216]	; (8020074 <vTaskSwitchContext+0x120>)
 801ff9c:	681b      	ldr	r3, [r3, #0]
 801ff9e:	4a36      	ldr	r2, [pc, #216]	; (8020078 <vTaskSwitchContext+0x124>)
 801ffa0:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801ffa2:	4b36      	ldr	r3, [pc, #216]	; (802007c <vTaskSwitchContext+0x128>)
 801ffa4:	681b      	ldr	r3, [r3, #0]
 801ffa6:	681a      	ldr	r2, [r3, #0]
 801ffa8:	4b34      	ldr	r3, [pc, #208]	; (802007c <vTaskSwitchContext+0x128>)
 801ffaa:	681b      	ldr	r3, [r3, #0]
 801ffac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ffae:	429a      	cmp	r2, r3
 801ffb0:	d808      	bhi.n	801ffc4 <vTaskSwitchContext+0x70>
 801ffb2:	4b32      	ldr	r3, [pc, #200]	; (802007c <vTaskSwitchContext+0x128>)
 801ffb4:	681a      	ldr	r2, [r3, #0]
 801ffb6:	4b31      	ldr	r3, [pc, #196]	; (802007c <vTaskSwitchContext+0x128>)
 801ffb8:	681b      	ldr	r3, [r3, #0]
 801ffba:	3334      	adds	r3, #52	; 0x34
 801ffbc:	4619      	mov	r1, r3
 801ffbe:	4610      	mov	r0, r2
 801ffc0:	f7f4 f8bd 	bl	801413e <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 801ffc4:	4b2d      	ldr	r3, [pc, #180]	; (802007c <vTaskSwitchContext+0x128>)
 801ffc6:	681b      	ldr	r3, [r3, #0]
 801ffc8:	4a2d      	ldr	r2, [pc, #180]	; (8020080 <vTaskSwitchContext+0x12c>)
 801ffca:	6812      	ldr	r2, [r2, #0]
 801ffcc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ffd0:	4b2c      	ldr	r3, [pc, #176]	; (8020084 <vTaskSwitchContext+0x130>)
 801ffd2:	681b      	ldr	r3, [r3, #0]
 801ffd4:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801ffd6:	687b      	ldr	r3, [r7, #4]
 801ffd8:	fab3 f383 	clz	r3, r3
 801ffdc:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 801ffde:	78fb      	ldrb	r3, [r7, #3]
 801ffe0:	f1c3 031f 	rsb	r3, r3, #31
 801ffe4:	60fb      	str	r3, [r7, #12]
 801ffe6:	4928      	ldr	r1, [pc, #160]	; (8020088 <vTaskSwitchContext+0x134>)
 801ffe8:	68fa      	ldr	r2, [r7, #12]
 801ffea:	4613      	mov	r3, r2
 801ffec:	009b      	lsls	r3, r3, #2
 801ffee:	4413      	add	r3, r2
 801fff0:	009b      	lsls	r3, r3, #2
 801fff2:	440b      	add	r3, r1
 801fff4:	681b      	ldr	r3, [r3, #0]
 801fff6:	2b00      	cmp	r3, #0
 801fff8:	d105      	bne.n	8020006 <vTaskSwitchContext+0xb2>
 801fffa:	f640 32e1 	movw	r2, #3041	; 0xbe1
 801fffe:	4923      	ldr	r1, [pc, #140]	; (802008c <vTaskSwitchContext+0x138>)
 8020000:	4823      	ldr	r0, [pc, #140]	; (8020090 <vTaskSwitchContext+0x13c>)
 8020002:	f7f0 fe0b 	bl	8010c1c <assertFail>
 8020006:	68fa      	ldr	r2, [r7, #12]
 8020008:	4613      	mov	r3, r2
 802000a:	009b      	lsls	r3, r3, #2
 802000c:	4413      	add	r3, r2
 802000e:	009b      	lsls	r3, r3, #2
 8020010:	4a1d      	ldr	r2, [pc, #116]	; (8020088 <vTaskSwitchContext+0x134>)
 8020012:	4413      	add	r3, r2
 8020014:	60bb      	str	r3, [r7, #8]
 8020016:	68bb      	ldr	r3, [r7, #8]
 8020018:	685b      	ldr	r3, [r3, #4]
 802001a:	685a      	ldr	r2, [r3, #4]
 802001c:	68bb      	ldr	r3, [r7, #8]
 802001e:	605a      	str	r2, [r3, #4]
 8020020:	68bb      	ldr	r3, [r7, #8]
 8020022:	685a      	ldr	r2, [r3, #4]
 8020024:	68bb      	ldr	r3, [r7, #8]
 8020026:	3308      	adds	r3, #8
 8020028:	429a      	cmp	r2, r3
 802002a:	d104      	bne.n	8020036 <vTaskSwitchContext+0xe2>
 802002c:	68bb      	ldr	r3, [r7, #8]
 802002e:	685b      	ldr	r3, [r3, #4]
 8020030:	685a      	ldr	r2, [r3, #4]
 8020032:	68bb      	ldr	r3, [r7, #8]
 8020034:	605a      	str	r2, [r3, #4]
 8020036:	68bb      	ldr	r3, [r7, #8]
 8020038:	685b      	ldr	r3, [r3, #4]
 802003a:	68db      	ldr	r3, [r3, #12]
 802003c:	4a0f      	ldr	r2, [pc, #60]	; (802007c <vTaskSwitchContext+0x128>)
 802003e:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8020040:	4b0e      	ldr	r3, [pc, #56]	; (802007c <vTaskSwitchContext+0x128>)
 8020042:	681b      	ldr	r3, [r3, #0]
 8020044:	3334      	adds	r3, #52	; 0x34
 8020046:	4a13      	ldr	r2, [pc, #76]	; (8020094 <vTaskSwitchContext+0x140>)
 8020048:	681b      	ldr	r3, [r3, #0]
 802004a:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 802004c:	4b0b      	ldr	r3, [pc, #44]	; (802007c <vTaskSwitchContext+0x128>)
 802004e:	681b      	ldr	r3, [r3, #0]
 8020050:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8020054:	4a0a      	ldr	r2, [pc, #40]	; (8020080 <vTaskSwitchContext+0x12c>)
 8020056:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8020058:	4b08      	ldr	r3, [pc, #32]	; (802007c <vTaskSwitchContext+0x128>)
 802005a:	681b      	ldr	r3, [r3, #0]
 802005c:	3360      	adds	r3, #96	; 0x60
 802005e:	4a0e      	ldr	r2, [pc, #56]	; (8020098 <vTaskSwitchContext+0x144>)
 8020060:	6013      	str	r3, [r2, #0]
}
 8020062:	bf00      	nop
 8020064:	3710      	adds	r7, #16
 8020066:	46bd      	mov	sp, r7
 8020068:	bd80      	pop	{r7, pc}
 802006a:	bf00      	nop
 802006c:	2000d3a8 	.word	0x2000d3a8
 8020070:	2000d394 	.word	0x2000d394
 8020074:	2000d3b0 	.word	0x2000d3b0
 8020078:	2000d3ac 	.word	0x2000d3ac
 802007c:	2000d178 	.word	0x2000d178
 8020080:	2000d37c 	.word	0x2000d37c
 8020084:	2000d388 	.word	0x2000d388
 8020088:	2000d17c 	.word	0x2000d17c
 802008c:	0802cee8 	.word	0x0802cee8
 8020090:	0802d11c 	.word	0x0802d11c
 8020094:	e0000004 	.word	0xe0000004
 8020098:	20001038 	.word	0x20001038

0802009c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 802009c:	b580      	push	{r7, lr}
 802009e:	b082      	sub	sp, #8
 80200a0:	af00      	add	r7, sp, #0
 80200a2:	6078      	str	r0, [r7, #4]
 80200a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80200a6:	687b      	ldr	r3, [r7, #4]
 80200a8:	2b00      	cmp	r3, #0
 80200aa:	d105      	bne.n	80200b8 <vTaskPlaceOnEventList+0x1c>
 80200ac:	f640 32fa 	movw	r2, #3066	; 0xbfa
 80200b0:	4909      	ldr	r1, [pc, #36]	; (80200d8 <vTaskPlaceOnEventList+0x3c>)
 80200b2:	480a      	ldr	r0, [pc, #40]	; (80200dc <vTaskPlaceOnEventList+0x40>)
 80200b4:	f7f0 fdb2 	bl	8010c1c <assertFail>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80200b8:	4b09      	ldr	r3, [pc, #36]	; (80200e0 <vTaskPlaceOnEventList+0x44>)
 80200ba:	681b      	ldr	r3, [r3, #0]
 80200bc:	3318      	adds	r3, #24
 80200be:	4619      	mov	r1, r3
 80200c0:	6878      	ldr	r0, [r7, #4]
 80200c2:	f7fe fa7c 	bl	801e5be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80200c6:	2101      	movs	r1, #1
 80200c8:	6838      	ldr	r0, [r7, #0]
 80200ca:	f000 fced 	bl	8020aa8 <prvAddCurrentTaskToDelayedList>
}
 80200ce:	bf00      	nop
 80200d0:	3708      	adds	r7, #8
 80200d2:	46bd      	mov	sp, r7
 80200d4:	bd80      	pop	{r7, pc}
 80200d6:	bf00      	nop
 80200d8:	0802cee8 	.word	0x0802cee8
 80200dc:	0802d164 	.word	0x0802d164
 80200e0:	2000d178 	.word	0x2000d178

080200e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80200e4:	b580      	push	{r7, lr}
 80200e6:	b084      	sub	sp, #16
 80200e8:	af00      	add	r7, sp, #0
 80200ea:	60f8      	str	r0, [r7, #12]
 80200ec:	60b9      	str	r1, [r7, #8]
 80200ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80200f0:	68fb      	ldr	r3, [r7, #12]
 80200f2:	2b00      	cmp	r3, #0
 80200f4:	d105      	bne.n	8020102 <vTaskPlaceOnEventListRestricted+0x1e>
 80200f6:	f640 4225 	movw	r2, #3109	; 0xc25
 80200fa:	490c      	ldr	r1, [pc, #48]	; (802012c <vTaskPlaceOnEventListRestricted+0x48>)
 80200fc:	480c      	ldr	r0, [pc, #48]	; (8020130 <vTaskPlaceOnEventListRestricted+0x4c>)
 80200fe:	f7f0 fd8d 	bl	8010c1c <assertFail>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8020102:	4b0c      	ldr	r3, [pc, #48]	; (8020134 <vTaskPlaceOnEventListRestricted+0x50>)
 8020104:	681b      	ldr	r3, [r3, #0]
 8020106:	3318      	adds	r3, #24
 8020108:	4619      	mov	r1, r3
 802010a:	68f8      	ldr	r0, [r7, #12]
 802010c:	f7fe fa33 	bl	801e576 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8020110:	687b      	ldr	r3, [r7, #4]
 8020112:	2b00      	cmp	r3, #0
 8020114:	d002      	beq.n	802011c <vTaskPlaceOnEventListRestricted+0x38>
		{
			xTicksToWait = portMAX_DELAY;
 8020116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802011a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 802011c:	6879      	ldr	r1, [r7, #4]
 802011e:	68b8      	ldr	r0, [r7, #8]
 8020120:	f000 fcc2 	bl	8020aa8 <prvAddCurrentTaskToDelayedList>
	}
 8020124:	bf00      	nop
 8020126:	3710      	adds	r7, #16
 8020128:	46bd      	mov	sp, r7
 802012a:	bd80      	pop	{r7, pc}
 802012c:	0802cee8 	.word	0x0802cee8
 8020130:	0802d164 	.word	0x0802d164
 8020134:	2000d178 	.word	0x2000d178

08020138 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8020138:	b580      	push	{r7, lr}
 802013a:	b084      	sub	sp, #16
 802013c:	af00      	add	r7, sp, #0
 802013e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020140:	687b      	ldr	r3, [r7, #4]
 8020142:	68db      	ldr	r3, [r3, #12]
 8020144:	68db      	ldr	r3, [r3, #12]
 8020146:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8020148:	68bb      	ldr	r3, [r7, #8]
 802014a:	2b00      	cmp	r3, #0
 802014c:	d105      	bne.n	802015a <xTaskRemoveFromEventList+0x22>
 802014e:	f640 4255 	movw	r2, #3157	; 0xc55
 8020152:	4922      	ldr	r1, [pc, #136]	; (80201dc <xTaskRemoveFromEventList+0xa4>)
 8020154:	4822      	ldr	r0, [pc, #136]	; (80201e0 <xTaskRemoveFromEventList+0xa8>)
 8020156:	f7f0 fd61 	bl	8010c1c <assertFail>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 802015a:	68bb      	ldr	r3, [r7, #8]
 802015c:	3318      	adds	r3, #24
 802015e:	4618      	mov	r0, r3
 8020160:	f7fe fa66 	bl	801e630 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8020164:	4b1f      	ldr	r3, [pc, #124]	; (80201e4 <xTaskRemoveFromEventList+0xac>)
 8020166:	681b      	ldr	r3, [r3, #0]
 8020168:	2b00      	cmp	r3, #0
 802016a:	d11c      	bne.n	80201a6 <xTaskRemoveFromEventList+0x6e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 802016c:	68bb      	ldr	r3, [r7, #8]
 802016e:	3304      	adds	r3, #4
 8020170:	4618      	mov	r0, r3
 8020172:	f7fe fa5d 	bl	801e630 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8020176:	68bb      	ldr	r3, [r7, #8]
 8020178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802017a:	2201      	movs	r2, #1
 802017c:	409a      	lsls	r2, r3
 802017e:	4b1a      	ldr	r3, [pc, #104]	; (80201e8 <xTaskRemoveFromEventList+0xb0>)
 8020180:	681b      	ldr	r3, [r3, #0]
 8020182:	4313      	orrs	r3, r2
 8020184:	4a18      	ldr	r2, [pc, #96]	; (80201e8 <xTaskRemoveFromEventList+0xb0>)
 8020186:	6013      	str	r3, [r2, #0]
 8020188:	68bb      	ldr	r3, [r7, #8]
 802018a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802018c:	4613      	mov	r3, r2
 802018e:	009b      	lsls	r3, r3, #2
 8020190:	4413      	add	r3, r2
 8020192:	009b      	lsls	r3, r3, #2
 8020194:	4a15      	ldr	r2, [pc, #84]	; (80201ec <xTaskRemoveFromEventList+0xb4>)
 8020196:	441a      	add	r2, r3
 8020198:	68bb      	ldr	r3, [r7, #8]
 802019a:	3304      	adds	r3, #4
 802019c:	4619      	mov	r1, r3
 802019e:	4610      	mov	r0, r2
 80201a0:	f7fe f9e9 	bl	801e576 <vListInsertEnd>
 80201a4:	e005      	b.n	80201b2 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80201a6:	68bb      	ldr	r3, [r7, #8]
 80201a8:	3318      	adds	r3, #24
 80201aa:	4619      	mov	r1, r3
 80201ac:	4810      	ldr	r0, [pc, #64]	; (80201f0 <xTaskRemoveFromEventList+0xb8>)
 80201ae:	f7fe f9e2 	bl	801e576 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80201b2:	68bb      	ldr	r3, [r7, #8]
 80201b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80201b6:	4b0f      	ldr	r3, [pc, #60]	; (80201f4 <xTaskRemoveFromEventList+0xbc>)
 80201b8:	681b      	ldr	r3, [r3, #0]
 80201ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80201bc:	429a      	cmp	r2, r3
 80201be:	d905      	bls.n	80201cc <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80201c0:	2301      	movs	r3, #1
 80201c2:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80201c4:	4b0c      	ldr	r3, [pc, #48]	; (80201f8 <xTaskRemoveFromEventList+0xc0>)
 80201c6:	2201      	movs	r2, #1
 80201c8:	601a      	str	r2, [r3, #0]
 80201ca:	e001      	b.n	80201d0 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 80201cc:	2300      	movs	r3, #0
 80201ce:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80201d0:	68fb      	ldr	r3, [r7, #12]
}
 80201d2:	4618      	mov	r0, r3
 80201d4:	3710      	adds	r7, #16
 80201d6:	46bd      	mov	sp, r7
 80201d8:	bd80      	pop	{r7, pc}
 80201da:	bf00      	nop
 80201dc:	0802cee8 	.word	0x0802cee8
 80201e0:	0802d18c 	.word	0x0802d18c
 80201e4:	2000d3a8 	.word	0x2000d3a8
 80201e8:	2000d388 	.word	0x2000d388
 80201ec:	2000d17c 	.word	0x2000d17c
 80201f0:	2000d33c 	.word	0x2000d33c
 80201f4:	2000d178 	.word	0x2000d178
 80201f8:	2000d394 	.word	0x2000d394

080201fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80201fc:	b480      	push	{r7}
 80201fe:	b083      	sub	sp, #12
 8020200:	af00      	add	r7, sp, #0
 8020202:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8020204:	4b06      	ldr	r3, [pc, #24]	; (8020220 <vTaskInternalSetTimeOutState+0x24>)
 8020206:	681a      	ldr	r2, [r3, #0]
 8020208:	687b      	ldr	r3, [r7, #4]
 802020a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 802020c:	4b05      	ldr	r3, [pc, #20]	; (8020224 <vTaskInternalSetTimeOutState+0x28>)
 802020e:	681a      	ldr	r2, [r3, #0]
 8020210:	687b      	ldr	r3, [r7, #4]
 8020212:	605a      	str	r2, [r3, #4]
}
 8020214:	bf00      	nop
 8020216:	370c      	adds	r7, #12
 8020218:	46bd      	mov	sp, r7
 802021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802021e:	4770      	bx	lr
 8020220:	2000d398 	.word	0x2000d398
 8020224:	2000d384 	.word	0x2000d384

08020228 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8020228:	b580      	push	{r7, lr}
 802022a:	b086      	sub	sp, #24
 802022c:	af00      	add	r7, sp, #0
 802022e:	6078      	str	r0, [r7, #4]
 8020230:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8020232:	687b      	ldr	r3, [r7, #4]
 8020234:	2b00      	cmp	r3, #0
 8020236:	d105      	bne.n	8020244 <xTaskCheckForTimeOut+0x1c>
 8020238:	f640 42ce 	movw	r2, #3278	; 0xcce
 802023c:	4924      	ldr	r1, [pc, #144]	; (80202d0 <xTaskCheckForTimeOut+0xa8>)
 802023e:	4825      	ldr	r0, [pc, #148]	; (80202d4 <xTaskCheckForTimeOut+0xac>)
 8020240:	f7f0 fcec 	bl	8010c1c <assertFail>
	configASSERT( pxTicksToWait );
 8020244:	683b      	ldr	r3, [r7, #0]
 8020246:	2b00      	cmp	r3, #0
 8020248:	d105      	bne.n	8020256 <xTaskCheckForTimeOut+0x2e>
 802024a:	f640 42cf 	movw	r2, #3279	; 0xccf
 802024e:	4920      	ldr	r1, [pc, #128]	; (80202d0 <xTaskCheckForTimeOut+0xa8>)
 8020250:	4821      	ldr	r0, [pc, #132]	; (80202d8 <xTaskCheckForTimeOut+0xb0>)
 8020252:	f7f0 fce3 	bl	8010c1c <assertFail>

	taskENTER_CRITICAL();
 8020256:	f001 f9bb 	bl	80215d0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 802025a:	4b20      	ldr	r3, [pc, #128]	; (80202dc <xTaskCheckForTimeOut+0xb4>)
 802025c:	681b      	ldr	r3, [r3, #0]
 802025e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8020260:	687b      	ldr	r3, [r7, #4]
 8020262:	685b      	ldr	r3, [r3, #4]
 8020264:	693a      	ldr	r2, [r7, #16]
 8020266:	1ad3      	subs	r3, r2, r3
 8020268:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 802026a:	683b      	ldr	r3, [r7, #0]
 802026c:	681b      	ldr	r3, [r3, #0]
 802026e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020272:	d102      	bne.n	802027a <xTaskCheckForTimeOut+0x52>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8020274:	2300      	movs	r3, #0
 8020276:	617b      	str	r3, [r7, #20]
 8020278:	e023      	b.n	80202c2 <xTaskCheckForTimeOut+0x9a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 802027a:	687b      	ldr	r3, [r7, #4]
 802027c:	681a      	ldr	r2, [r3, #0]
 802027e:	4b18      	ldr	r3, [pc, #96]	; (80202e0 <xTaskCheckForTimeOut+0xb8>)
 8020280:	681b      	ldr	r3, [r3, #0]
 8020282:	429a      	cmp	r2, r3
 8020284:	d007      	beq.n	8020296 <xTaskCheckForTimeOut+0x6e>
 8020286:	687b      	ldr	r3, [r7, #4]
 8020288:	685b      	ldr	r3, [r3, #4]
 802028a:	693a      	ldr	r2, [r7, #16]
 802028c:	429a      	cmp	r2, r3
 802028e:	d302      	bcc.n	8020296 <xTaskCheckForTimeOut+0x6e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8020290:	2301      	movs	r3, #1
 8020292:	617b      	str	r3, [r7, #20]
 8020294:	e015      	b.n	80202c2 <xTaskCheckForTimeOut+0x9a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8020296:	683b      	ldr	r3, [r7, #0]
 8020298:	681b      	ldr	r3, [r3, #0]
 802029a:	68fa      	ldr	r2, [r7, #12]
 802029c:	429a      	cmp	r2, r3
 802029e:	d20b      	bcs.n	80202b8 <xTaskCheckForTimeOut+0x90>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80202a0:	683b      	ldr	r3, [r7, #0]
 80202a2:	681a      	ldr	r2, [r3, #0]
 80202a4:	68fb      	ldr	r3, [r7, #12]
 80202a6:	1ad2      	subs	r2, r2, r3
 80202a8:	683b      	ldr	r3, [r7, #0]
 80202aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80202ac:	6878      	ldr	r0, [r7, #4]
 80202ae:	f7ff ffa5 	bl	80201fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80202b2:	2300      	movs	r3, #0
 80202b4:	617b      	str	r3, [r7, #20]
 80202b6:	e004      	b.n	80202c2 <xTaskCheckForTimeOut+0x9a>
		}
		else
		{
			*pxTicksToWait = 0;
 80202b8:	683b      	ldr	r3, [r7, #0]
 80202ba:	2200      	movs	r2, #0
 80202bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80202be:	2301      	movs	r3, #1
 80202c0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80202c2:	f001 f9b3 	bl	802162c <vPortExitCritical>

	return xReturn;
 80202c6:	697b      	ldr	r3, [r7, #20]
}
 80202c8:	4618      	mov	r0, r3
 80202ca:	3718      	adds	r7, #24
 80202cc:	46bd      	mov	sp, r7
 80202ce:	bd80      	pop	{r7, pc}
 80202d0:	0802cee8 	.word	0x0802cee8
 80202d4:	0802d1bc 	.word	0x0802d1bc
 80202d8:	0802d1c8 	.word	0x0802d1c8
 80202dc:	2000d384 	.word	0x2000d384
 80202e0:	2000d398 	.word	0x2000d398

080202e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80202e4:	b480      	push	{r7}
 80202e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80202e8:	4b03      	ldr	r3, [pc, #12]	; (80202f8 <vTaskMissedYield+0x14>)
 80202ea:	2201      	movs	r2, #1
 80202ec:	601a      	str	r2, [r3, #0]
}
 80202ee:	bf00      	nop
 80202f0:	46bd      	mov	sp, r7
 80202f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202f6:	4770      	bx	lr
 80202f8:	2000d394 	.word	0x2000d394

080202fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80202fc:	b580      	push	{r7, lr}
 80202fe:	b082      	sub	sp, #8
 8020300:	af00      	add	r7, sp, #0
 8020302:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8020304:	f000 f854 	bl	80203b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8020308:	4b07      	ldr	r3, [pc, #28]	; (8020328 <prvIdleTask+0x2c>)
 802030a:	681b      	ldr	r3, [r3, #0]
 802030c:	2b01      	cmp	r3, #1
 802030e:	d907      	bls.n	8020320 <prvIdleTask+0x24>
			{
				taskYIELD();
 8020310:	4b06      	ldr	r3, [pc, #24]	; (802032c <prvIdleTask+0x30>)
 8020312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020316:	601a      	str	r2, [r3, #0]
 8020318:	f3bf 8f4f 	dsb	sy
 802031c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8020320:	f7f4 ff8c 	bl	801523c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8020324:	e7ee      	b.n	8020304 <prvIdleTask+0x8>
 8020326:	bf00      	nop
 8020328:	2000d17c 	.word	0x2000d17c
 802032c:	e000ed04 	.word	0xe000ed04

08020330 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8020330:	b580      	push	{r7, lr}
 8020332:	b082      	sub	sp, #8
 8020334:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8020336:	2300      	movs	r3, #0
 8020338:	607b      	str	r3, [r7, #4]
 802033a:	e00c      	b.n	8020356 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 802033c:	687a      	ldr	r2, [r7, #4]
 802033e:	4613      	mov	r3, r2
 8020340:	009b      	lsls	r3, r3, #2
 8020342:	4413      	add	r3, r2
 8020344:	009b      	lsls	r3, r3, #2
 8020346:	4a12      	ldr	r2, [pc, #72]	; (8020390 <prvInitialiseTaskLists+0x60>)
 8020348:	4413      	add	r3, r2
 802034a:	4618      	mov	r0, r3
 802034c:	f7fe f8e6 	bl	801e51c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8020350:	687b      	ldr	r3, [r7, #4]
 8020352:	3301      	adds	r3, #1
 8020354:	607b      	str	r3, [r7, #4]
 8020356:	687b      	ldr	r3, [r7, #4]
 8020358:	2b13      	cmp	r3, #19
 802035a:	d9ef      	bls.n	802033c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 802035c:	480d      	ldr	r0, [pc, #52]	; (8020394 <prvInitialiseTaskLists+0x64>)
 802035e:	f7fe f8dd 	bl	801e51c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8020362:	480d      	ldr	r0, [pc, #52]	; (8020398 <prvInitialiseTaskLists+0x68>)
 8020364:	f7fe f8da 	bl	801e51c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8020368:	480c      	ldr	r0, [pc, #48]	; (802039c <prvInitialiseTaskLists+0x6c>)
 802036a:	f7fe f8d7 	bl	801e51c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 802036e:	480c      	ldr	r0, [pc, #48]	; (80203a0 <prvInitialiseTaskLists+0x70>)
 8020370:	f7fe f8d4 	bl	801e51c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8020374:	480b      	ldr	r0, [pc, #44]	; (80203a4 <prvInitialiseTaskLists+0x74>)
 8020376:	f7fe f8d1 	bl	801e51c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 802037a:	4b0b      	ldr	r3, [pc, #44]	; (80203a8 <prvInitialiseTaskLists+0x78>)
 802037c:	4a05      	ldr	r2, [pc, #20]	; (8020394 <prvInitialiseTaskLists+0x64>)
 802037e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8020380:	4b0a      	ldr	r3, [pc, #40]	; (80203ac <prvInitialiseTaskLists+0x7c>)
 8020382:	4a05      	ldr	r2, [pc, #20]	; (8020398 <prvInitialiseTaskLists+0x68>)
 8020384:	601a      	str	r2, [r3, #0]
}
 8020386:	bf00      	nop
 8020388:	3708      	adds	r7, #8
 802038a:	46bd      	mov	sp, r7
 802038c:	bd80      	pop	{r7, pc}
 802038e:	bf00      	nop
 8020390:	2000d17c 	.word	0x2000d17c
 8020394:	2000d30c 	.word	0x2000d30c
 8020398:	2000d320 	.word	0x2000d320
 802039c:	2000d33c 	.word	0x2000d33c
 80203a0:	2000d350 	.word	0x2000d350
 80203a4:	2000d368 	.word	0x2000d368
 80203a8:	2000d334 	.word	0x2000d334
 80203ac:	2000d338 	.word	0x2000d338

080203b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80203b0:	b580      	push	{r7, lr}
 80203b2:	b082      	sub	sp, #8
 80203b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80203b6:	e019      	b.n	80203ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80203b8:	f001 f90a 	bl	80215d0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80203bc:	4b10      	ldr	r3, [pc, #64]	; (8020400 <prvCheckTasksWaitingTermination+0x50>)
 80203be:	68db      	ldr	r3, [r3, #12]
 80203c0:	68db      	ldr	r3, [r3, #12]
 80203c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80203c4:	687b      	ldr	r3, [r7, #4]
 80203c6:	3304      	adds	r3, #4
 80203c8:	4618      	mov	r0, r3
 80203ca:	f7fe f931 	bl	801e630 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80203ce:	4b0d      	ldr	r3, [pc, #52]	; (8020404 <prvCheckTasksWaitingTermination+0x54>)
 80203d0:	681b      	ldr	r3, [r3, #0]
 80203d2:	3b01      	subs	r3, #1
 80203d4:	4a0b      	ldr	r2, [pc, #44]	; (8020404 <prvCheckTasksWaitingTermination+0x54>)
 80203d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80203d8:	4b0b      	ldr	r3, [pc, #44]	; (8020408 <prvCheckTasksWaitingTermination+0x58>)
 80203da:	681b      	ldr	r3, [r3, #0]
 80203dc:	3b01      	subs	r3, #1
 80203de:	4a0a      	ldr	r2, [pc, #40]	; (8020408 <prvCheckTasksWaitingTermination+0x58>)
 80203e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80203e2:	f001 f923 	bl	802162c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80203e6:	6878      	ldr	r0, [r7, #4]
 80203e8:	f000 f8e4 	bl	80205b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80203ec:	4b06      	ldr	r3, [pc, #24]	; (8020408 <prvCheckTasksWaitingTermination+0x58>)
 80203ee:	681b      	ldr	r3, [r3, #0]
 80203f0:	2b00      	cmp	r3, #0
 80203f2:	d1e1      	bne.n	80203b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80203f4:	bf00      	nop
 80203f6:	bf00      	nop
 80203f8:	3708      	adds	r7, #8
 80203fa:	46bd      	mov	sp, r7
 80203fc:	bd80      	pop	{r7, pc}
 80203fe:	bf00      	nop
 8020400:	2000d350 	.word	0x2000d350
 8020404:	2000d380 	.word	0x2000d380
 8020408:	2000d364 	.word	0x2000d364

0802040c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 802040c:	b580      	push	{r7, lr}
 802040e:	b086      	sub	sp, #24
 8020410:	af00      	add	r7, sp, #0
 8020412:	60f8      	str	r0, [r7, #12]
 8020414:	60b9      	str	r1, [r7, #8]
 8020416:	607a      	str	r2, [r7, #4]
 8020418:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 802041a:	68fb      	ldr	r3, [r7, #12]
 802041c:	2b00      	cmp	r3, #0
 802041e:	d102      	bne.n	8020426 <vTaskGetInfo+0x1a>
 8020420:	4b2c      	ldr	r3, [pc, #176]	; (80204d4 <vTaskGetInfo+0xc8>)
 8020422:	681b      	ldr	r3, [r3, #0]
 8020424:	e000      	b.n	8020428 <vTaskGetInfo+0x1c>
 8020426:	68fb      	ldr	r3, [r7, #12]
 8020428:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 802042a:	68bb      	ldr	r3, [r7, #8]
 802042c:	697a      	ldr	r2, [r7, #20]
 802042e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8020430:	697b      	ldr	r3, [r7, #20]
 8020432:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8020436:	68bb      	ldr	r3, [r7, #8]
 8020438:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 802043a:	697b      	ldr	r3, [r7, #20]
 802043c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802043e:	68bb      	ldr	r3, [r7, #8]
 8020440:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8020442:	697b      	ldr	r3, [r7, #20]
 8020444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020446:	68bb      	ldr	r3, [r7, #8]
 8020448:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 802044a:	697b      	ldr	r3, [r7, #20]
 802044c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802044e:	68bb      	ldr	r3, [r7, #8]
 8020450:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8020452:	697b      	ldr	r3, [r7, #20]
 8020454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8020456:	68bb      	ldr	r3, [r7, #8]
 8020458:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 802045a:	697b      	ldr	r3, [r7, #20]
 802045c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802045e:	68bb      	ldr	r3, [r7, #8]
 8020460:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8020462:	78fb      	ldrb	r3, [r7, #3]
 8020464:	2b05      	cmp	r3, #5
 8020466:	d01a      	beq.n	802049e <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8020468:	4b1a      	ldr	r3, [pc, #104]	; (80204d4 <vTaskGetInfo+0xc8>)
 802046a:	681b      	ldr	r3, [r3, #0]
 802046c:	697a      	ldr	r2, [r7, #20]
 802046e:	429a      	cmp	r2, r3
 8020470:	d103      	bne.n	802047a <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8020472:	68bb      	ldr	r3, [r7, #8]
 8020474:	2200      	movs	r2, #0
 8020476:	731a      	strb	r2, [r3, #12]
 8020478:	e018      	b.n	80204ac <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 802047a:	68bb      	ldr	r3, [r7, #8]
 802047c:	78fa      	ldrb	r2, [r7, #3]
 802047e:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8020480:	78fb      	ldrb	r3, [r7, #3]
 8020482:	2b03      	cmp	r3, #3
 8020484:	d112      	bne.n	80204ac <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8020486:	f7ff fb41 	bl	801fb0c <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 802048a:	697b      	ldr	r3, [r7, #20]
 802048c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802048e:	2b00      	cmp	r3, #0
 8020490:	d002      	beq.n	8020498 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8020492:	68bb      	ldr	r3, [r7, #8]
 8020494:	2202      	movs	r2, #2
 8020496:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8020498:	f7ff fb46 	bl	801fb28 <xTaskResumeAll>
 802049c:	e006      	b.n	80204ac <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 802049e:	6978      	ldr	r0, [r7, #20]
 80204a0:	f7ff fa54 	bl	801f94c <eTaskGetState>
 80204a4:	4603      	mov	r3, r0
 80204a6:	461a      	mov	r2, r3
 80204a8:	68bb      	ldr	r3, [r7, #8]
 80204aa:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 80204ac:	687b      	ldr	r3, [r7, #4]
 80204ae:	2b00      	cmp	r3, #0
 80204b0:	d009      	beq.n	80204c6 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80204b2:	697b      	ldr	r3, [r7, #20]
 80204b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80204b6:	4618      	mov	r0, r3
 80204b8:	f000 f860 	bl	802057c <prvTaskCheckFreeStackSpace>
 80204bc:	4603      	mov	r3, r0
 80204be:	461a      	mov	r2, r3
 80204c0:	68bb      	ldr	r3, [r7, #8]
 80204c2:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 80204c4:	e002      	b.n	80204cc <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 80204c6:	68bb      	ldr	r3, [r7, #8]
 80204c8:	2200      	movs	r2, #0
 80204ca:	841a      	strh	r2, [r3, #32]
	}
 80204cc:	bf00      	nop
 80204ce:	3718      	adds	r7, #24
 80204d0:	46bd      	mov	sp, r7
 80204d2:	bd80      	pop	{r7, pc}
 80204d4:	2000d178 	.word	0x2000d178

080204d8 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 80204d8:	b580      	push	{r7, lr}
 80204da:	b08a      	sub	sp, #40	; 0x28
 80204dc:	af00      	add	r7, sp, #0
 80204de:	60f8      	str	r0, [r7, #12]
 80204e0:	60b9      	str	r1, [r7, #8]
 80204e2:	4613      	mov	r3, r2
 80204e4:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80204e6:	2300      	movs	r3, #0
 80204e8:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80204ea:	68bb      	ldr	r3, [r7, #8]
 80204ec:	681b      	ldr	r3, [r3, #0]
 80204ee:	2b00      	cmp	r3, #0
 80204f0:	d03f      	beq.n	8020572 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80204f2:	68bb      	ldr	r3, [r7, #8]
 80204f4:	623b      	str	r3, [r7, #32]
 80204f6:	6a3b      	ldr	r3, [r7, #32]
 80204f8:	685b      	ldr	r3, [r3, #4]
 80204fa:	685a      	ldr	r2, [r3, #4]
 80204fc:	6a3b      	ldr	r3, [r7, #32]
 80204fe:	605a      	str	r2, [r3, #4]
 8020500:	6a3b      	ldr	r3, [r7, #32]
 8020502:	685a      	ldr	r2, [r3, #4]
 8020504:	6a3b      	ldr	r3, [r7, #32]
 8020506:	3308      	adds	r3, #8
 8020508:	429a      	cmp	r2, r3
 802050a:	d104      	bne.n	8020516 <prvListTasksWithinSingleList+0x3e>
 802050c:	6a3b      	ldr	r3, [r7, #32]
 802050e:	685b      	ldr	r3, [r3, #4]
 8020510:	685a      	ldr	r2, [r3, #4]
 8020512:	6a3b      	ldr	r3, [r7, #32]
 8020514:	605a      	str	r2, [r3, #4]
 8020516:	6a3b      	ldr	r3, [r7, #32]
 8020518:	685b      	ldr	r3, [r3, #4]
 802051a:	68db      	ldr	r3, [r3, #12]
 802051c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802051e:	68bb      	ldr	r3, [r7, #8]
 8020520:	61bb      	str	r3, [r7, #24]
 8020522:	69bb      	ldr	r3, [r7, #24]
 8020524:	685b      	ldr	r3, [r3, #4]
 8020526:	685a      	ldr	r2, [r3, #4]
 8020528:	69bb      	ldr	r3, [r7, #24]
 802052a:	605a      	str	r2, [r3, #4]
 802052c:	69bb      	ldr	r3, [r7, #24]
 802052e:	685a      	ldr	r2, [r3, #4]
 8020530:	69bb      	ldr	r3, [r7, #24]
 8020532:	3308      	adds	r3, #8
 8020534:	429a      	cmp	r2, r3
 8020536:	d104      	bne.n	8020542 <prvListTasksWithinSingleList+0x6a>
 8020538:	69bb      	ldr	r3, [r7, #24]
 802053a:	685b      	ldr	r3, [r3, #4]
 802053c:	685a      	ldr	r2, [r3, #4]
 802053e:	69bb      	ldr	r3, [r7, #24]
 8020540:	605a      	str	r2, [r3, #4]
 8020542:	69bb      	ldr	r3, [r7, #24]
 8020544:	685b      	ldr	r3, [r3, #4]
 8020546:	68db      	ldr	r3, [r3, #12]
 8020548:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 802054a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802054c:	4613      	mov	r3, r2
 802054e:	00db      	lsls	r3, r3, #3
 8020550:	4413      	add	r3, r2
 8020552:	009b      	lsls	r3, r3, #2
 8020554:	461a      	mov	r2, r3
 8020556:	68fb      	ldr	r3, [r7, #12]
 8020558:	1899      	adds	r1, r3, r2
 802055a:	79fb      	ldrb	r3, [r7, #7]
 802055c:	2201      	movs	r2, #1
 802055e:	6978      	ldr	r0, [r7, #20]
 8020560:	f7ff ff54 	bl	802040c <vTaskGetInfo>
				uxTask++;
 8020564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020566:	3301      	adds	r3, #1
 8020568:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 802056a:	697a      	ldr	r2, [r7, #20]
 802056c:	69fb      	ldr	r3, [r7, #28]
 802056e:	429a      	cmp	r2, r3
 8020570:	d1d5      	bne.n	802051e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8020572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8020574:	4618      	mov	r0, r3
 8020576:	3728      	adds	r7, #40	; 0x28
 8020578:	46bd      	mov	sp, r7
 802057a:	bd80      	pop	{r7, pc}

0802057c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 802057c:	b480      	push	{r7}
 802057e:	b085      	sub	sp, #20
 8020580:	af00      	add	r7, sp, #0
 8020582:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8020584:	2300      	movs	r3, #0
 8020586:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8020588:	e005      	b.n	8020596 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 802058a:	687b      	ldr	r3, [r7, #4]
 802058c:	3301      	adds	r3, #1
 802058e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8020590:	68fb      	ldr	r3, [r7, #12]
 8020592:	3301      	adds	r3, #1
 8020594:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8020596:	687b      	ldr	r3, [r7, #4]
 8020598:	781b      	ldrb	r3, [r3, #0]
 802059a:	2ba5      	cmp	r3, #165	; 0xa5
 802059c:	d0f5      	beq.n	802058a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 802059e:	68fb      	ldr	r3, [r7, #12]
 80205a0:	089b      	lsrs	r3, r3, #2
 80205a2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80205a4:	68fb      	ldr	r3, [r7, #12]
 80205a6:	b29b      	uxth	r3, r3
	}
 80205a8:	4618      	mov	r0, r3
 80205aa:	3714      	adds	r7, #20
 80205ac:	46bd      	mov	sp, r7
 80205ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205b2:	4770      	bx	lr

080205b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80205b4:	b580      	push	{r7, lr}
 80205b6:	b082      	sub	sp, #8
 80205b8:	af00      	add	r7, sp, #0
 80205ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80205bc:	687b      	ldr	r3, [r7, #4]
 80205be:	3360      	adds	r3, #96	; 0x60
 80205c0:	4618      	mov	r0, r3
 80205c2:	f003 f9f1 	bl	80239a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80205c6:	687b      	ldr	r3, [r7, #4]
 80205c8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80205cc:	2b00      	cmp	r3, #0
 80205ce:	d108      	bne.n	80205e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80205d0:	687b      	ldr	r3, [r7, #4]
 80205d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80205d4:	4618      	mov	r0, r3
 80205d6:	f001 f9cd 	bl	8021974 <vPortFree>
				vPortFree( pxTCB );
 80205da:	6878      	ldr	r0, [r7, #4]
 80205dc:	f001 f9ca 	bl	8021974 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80205e0:	e013      	b.n	802060a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80205e2:	687b      	ldr	r3, [r7, #4]
 80205e4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80205e8:	2b01      	cmp	r3, #1
 80205ea:	d103      	bne.n	80205f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80205ec:	6878      	ldr	r0, [r7, #4]
 80205ee:	f001 f9c1 	bl	8021974 <vPortFree>
	}
 80205f2:	e00a      	b.n	802060a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80205f4:	687b      	ldr	r3, [r7, #4]
 80205f6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80205fa:	2b02      	cmp	r3, #2
 80205fc:	d005      	beq.n	802060a <prvDeleteTCB+0x56>
 80205fe:	f640 725d 	movw	r2, #3933	; 0xf5d
 8020602:	4904      	ldr	r1, [pc, #16]	; (8020614 <prvDeleteTCB+0x60>)
 8020604:	4804      	ldr	r0, [pc, #16]	; (8020618 <prvDeleteTCB+0x64>)
 8020606:	f7f0 fb09 	bl	8010c1c <assertFail>
	}
 802060a:	bf00      	nop
 802060c:	3708      	adds	r7, #8
 802060e:	46bd      	mov	sp, r7
 8020610:	bd80      	pop	{r7, pc}
 8020612:	bf00      	nop
 8020614:	0802cee8 	.word	0x0802cee8
 8020618:	0802d1d8 	.word	0x0802d1d8

0802061c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 802061c:	b480      	push	{r7}
 802061e:	b083      	sub	sp, #12
 8020620:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8020622:	4b0c      	ldr	r3, [pc, #48]	; (8020654 <prvResetNextTaskUnblockTime+0x38>)
 8020624:	681b      	ldr	r3, [r3, #0]
 8020626:	681b      	ldr	r3, [r3, #0]
 8020628:	2b00      	cmp	r3, #0
 802062a:	d104      	bne.n	8020636 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 802062c:	4b0a      	ldr	r3, [pc, #40]	; (8020658 <prvResetNextTaskUnblockTime+0x3c>)
 802062e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020632:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8020634:	e008      	b.n	8020648 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020636:	4b07      	ldr	r3, [pc, #28]	; (8020654 <prvResetNextTaskUnblockTime+0x38>)
 8020638:	681b      	ldr	r3, [r3, #0]
 802063a:	68db      	ldr	r3, [r3, #12]
 802063c:	68db      	ldr	r3, [r3, #12]
 802063e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8020640:	687b      	ldr	r3, [r7, #4]
 8020642:	685b      	ldr	r3, [r3, #4]
 8020644:	4a04      	ldr	r2, [pc, #16]	; (8020658 <prvResetNextTaskUnblockTime+0x3c>)
 8020646:	6013      	str	r3, [r2, #0]
}
 8020648:	bf00      	nop
 802064a:	370c      	adds	r7, #12
 802064c:	46bd      	mov	sp, r7
 802064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020652:	4770      	bx	lr
 8020654:	2000d334 	.word	0x2000d334
 8020658:	2000d3a0 	.word	0x2000d3a0

0802065c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 802065c:	b480      	push	{r7}
 802065e:	b083      	sub	sp, #12
 8020660:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8020662:	4b0b      	ldr	r3, [pc, #44]	; (8020690 <xTaskGetSchedulerState+0x34>)
 8020664:	681b      	ldr	r3, [r3, #0]
 8020666:	2b00      	cmp	r3, #0
 8020668:	d102      	bne.n	8020670 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 802066a:	2301      	movs	r3, #1
 802066c:	607b      	str	r3, [r7, #4]
 802066e:	e008      	b.n	8020682 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8020670:	4b08      	ldr	r3, [pc, #32]	; (8020694 <xTaskGetSchedulerState+0x38>)
 8020672:	681b      	ldr	r3, [r3, #0]
 8020674:	2b00      	cmp	r3, #0
 8020676:	d102      	bne.n	802067e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8020678:	2302      	movs	r3, #2
 802067a:	607b      	str	r3, [r7, #4]
 802067c:	e001      	b.n	8020682 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 802067e:	2300      	movs	r3, #0
 8020680:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8020682:	687b      	ldr	r3, [r7, #4]
	}
 8020684:	4618      	mov	r0, r3
 8020686:	370c      	adds	r7, #12
 8020688:	46bd      	mov	sp, r7
 802068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802068e:	4770      	bx	lr
 8020690:	2000d38c 	.word	0x2000d38c
 8020694:	2000d3a8 	.word	0x2000d3a8

08020698 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8020698:	b580      	push	{r7, lr}
 802069a:	b084      	sub	sp, #16
 802069c:	af00      	add	r7, sp, #0
 802069e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80206a0:	687b      	ldr	r3, [r7, #4]
 80206a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80206a4:	2300      	movs	r3, #0
 80206a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80206a8:	687b      	ldr	r3, [r7, #4]
 80206aa:	2b00      	cmp	r3, #0
 80206ac:	d05e      	beq.n	802076c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80206ae:	68bb      	ldr	r3, [r7, #8]
 80206b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80206b2:	4b31      	ldr	r3, [pc, #196]	; (8020778 <xTaskPriorityInherit+0xe0>)
 80206b4:	681b      	ldr	r3, [r3, #0]
 80206b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80206b8:	429a      	cmp	r2, r3
 80206ba:	d24e      	bcs.n	802075a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80206bc:	68bb      	ldr	r3, [r7, #8]
 80206be:	699b      	ldr	r3, [r3, #24]
 80206c0:	2b00      	cmp	r3, #0
 80206c2:	db06      	blt.n	80206d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80206c4:	4b2c      	ldr	r3, [pc, #176]	; (8020778 <xTaskPriorityInherit+0xe0>)
 80206c6:	681b      	ldr	r3, [r3, #0]
 80206c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80206ca:	f1c3 0214 	rsb	r2, r3, #20
 80206ce:	68bb      	ldr	r3, [r7, #8]
 80206d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80206d2:	68bb      	ldr	r3, [r7, #8]
 80206d4:	6959      	ldr	r1, [r3, #20]
 80206d6:	68bb      	ldr	r3, [r7, #8]
 80206d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80206da:	4613      	mov	r3, r2
 80206dc:	009b      	lsls	r3, r3, #2
 80206de:	4413      	add	r3, r2
 80206e0:	009b      	lsls	r3, r3, #2
 80206e2:	4a26      	ldr	r2, [pc, #152]	; (802077c <xTaskPriorityInherit+0xe4>)
 80206e4:	4413      	add	r3, r2
 80206e6:	4299      	cmp	r1, r3
 80206e8:	d12f      	bne.n	802074a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80206ea:	68bb      	ldr	r3, [r7, #8]
 80206ec:	3304      	adds	r3, #4
 80206ee:	4618      	mov	r0, r3
 80206f0:	f7fd ff9e 	bl	801e630 <uxListRemove>
 80206f4:	4603      	mov	r3, r0
 80206f6:	2b00      	cmp	r3, #0
 80206f8:	d10a      	bne.n	8020710 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80206fa:	68bb      	ldr	r3, [r7, #8]
 80206fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80206fe:	2201      	movs	r2, #1
 8020700:	fa02 f303 	lsl.w	r3, r2, r3
 8020704:	43da      	mvns	r2, r3
 8020706:	4b1e      	ldr	r3, [pc, #120]	; (8020780 <xTaskPriorityInherit+0xe8>)
 8020708:	681b      	ldr	r3, [r3, #0]
 802070a:	4013      	ands	r3, r2
 802070c:	4a1c      	ldr	r2, [pc, #112]	; (8020780 <xTaskPriorityInherit+0xe8>)
 802070e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8020710:	4b19      	ldr	r3, [pc, #100]	; (8020778 <xTaskPriorityInherit+0xe0>)
 8020712:	681b      	ldr	r3, [r3, #0]
 8020714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020716:	68bb      	ldr	r3, [r7, #8]
 8020718:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 802071a:	68bb      	ldr	r3, [r7, #8]
 802071c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802071e:	2201      	movs	r2, #1
 8020720:	409a      	lsls	r2, r3
 8020722:	4b17      	ldr	r3, [pc, #92]	; (8020780 <xTaskPriorityInherit+0xe8>)
 8020724:	681b      	ldr	r3, [r3, #0]
 8020726:	4313      	orrs	r3, r2
 8020728:	4a15      	ldr	r2, [pc, #84]	; (8020780 <xTaskPriorityInherit+0xe8>)
 802072a:	6013      	str	r3, [r2, #0]
 802072c:	68bb      	ldr	r3, [r7, #8]
 802072e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020730:	4613      	mov	r3, r2
 8020732:	009b      	lsls	r3, r3, #2
 8020734:	4413      	add	r3, r2
 8020736:	009b      	lsls	r3, r3, #2
 8020738:	4a10      	ldr	r2, [pc, #64]	; (802077c <xTaskPriorityInherit+0xe4>)
 802073a:	441a      	add	r2, r3
 802073c:	68bb      	ldr	r3, [r7, #8]
 802073e:	3304      	adds	r3, #4
 8020740:	4619      	mov	r1, r3
 8020742:	4610      	mov	r0, r2
 8020744:	f7fd ff17 	bl	801e576 <vListInsertEnd>
 8020748:	e004      	b.n	8020754 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 802074a:	4b0b      	ldr	r3, [pc, #44]	; (8020778 <xTaskPriorityInherit+0xe0>)
 802074c:	681b      	ldr	r3, [r3, #0]
 802074e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020750:	68bb      	ldr	r3, [r7, #8]
 8020752:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8020754:	2301      	movs	r3, #1
 8020756:	60fb      	str	r3, [r7, #12]
 8020758:	e008      	b.n	802076c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 802075a:	68bb      	ldr	r3, [r7, #8]
 802075c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802075e:	4b06      	ldr	r3, [pc, #24]	; (8020778 <xTaskPriorityInherit+0xe0>)
 8020760:	681b      	ldr	r3, [r3, #0]
 8020762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020764:	429a      	cmp	r2, r3
 8020766:	d201      	bcs.n	802076c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8020768:	2301      	movs	r3, #1
 802076a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 802076c:	68fb      	ldr	r3, [r7, #12]
	}
 802076e:	4618      	mov	r0, r3
 8020770:	3710      	adds	r7, #16
 8020772:	46bd      	mov	sp, r7
 8020774:	bd80      	pop	{r7, pc}
 8020776:	bf00      	nop
 8020778:	2000d178 	.word	0x2000d178
 802077c:	2000d17c 	.word	0x2000d17c
 8020780:	2000d388 	.word	0x2000d388

08020784 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8020784:	b580      	push	{r7, lr}
 8020786:	b084      	sub	sp, #16
 8020788:	af00      	add	r7, sp, #0
 802078a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 802078c:	687b      	ldr	r3, [r7, #4]
 802078e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8020790:	2300      	movs	r3, #0
 8020792:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8020794:	687b      	ldr	r3, [r7, #4]
 8020796:	2b00      	cmp	r3, #0
 8020798:	d064      	beq.n	8020864 <xTaskPriorityDisinherit+0xe0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 802079a:	4b35      	ldr	r3, [pc, #212]	; (8020870 <xTaskPriorityDisinherit+0xec>)
 802079c:	681b      	ldr	r3, [r3, #0]
 802079e:	68ba      	ldr	r2, [r7, #8]
 80207a0:	429a      	cmp	r2, r3
 80207a2:	d005      	beq.n	80207b0 <xTaskPriorityDisinherit+0x2c>
 80207a4:	f241 0213 	movw	r2, #4115	; 0x1013
 80207a8:	4932      	ldr	r1, [pc, #200]	; (8020874 <xTaskPriorityDisinherit+0xf0>)
 80207aa:	4833      	ldr	r0, [pc, #204]	; (8020878 <xTaskPriorityDisinherit+0xf4>)
 80207ac:	f7f0 fa36 	bl	8010c1c <assertFail>
			configASSERT( pxTCB->uxMutexesHeld );
 80207b0:	68bb      	ldr	r3, [r7, #8]
 80207b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	d105      	bne.n	80207c4 <xTaskPriorityDisinherit+0x40>
 80207b8:	f241 0214 	movw	r2, #4116	; 0x1014
 80207bc:	492d      	ldr	r1, [pc, #180]	; (8020874 <xTaskPriorityDisinherit+0xf0>)
 80207be:	482f      	ldr	r0, [pc, #188]	; (802087c <xTaskPriorityDisinherit+0xf8>)
 80207c0:	f7f0 fa2c 	bl	8010c1c <assertFail>
			( pxTCB->uxMutexesHeld )--;
 80207c4:	68bb      	ldr	r3, [r7, #8]
 80207c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80207c8:	1e5a      	subs	r2, r3, #1
 80207ca:	68bb      	ldr	r3, [r7, #8]
 80207cc:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80207ce:	68bb      	ldr	r3, [r7, #8]
 80207d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80207d2:	68bb      	ldr	r3, [r7, #8]
 80207d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80207d6:	429a      	cmp	r2, r3
 80207d8:	d044      	beq.n	8020864 <xTaskPriorityDisinherit+0xe0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80207da:	68bb      	ldr	r3, [r7, #8]
 80207dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80207de:	2b00      	cmp	r3, #0
 80207e0:	d140      	bne.n	8020864 <xTaskPriorityDisinherit+0xe0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80207e2:	68bb      	ldr	r3, [r7, #8]
 80207e4:	3304      	adds	r3, #4
 80207e6:	4618      	mov	r0, r3
 80207e8:	f7fd ff22 	bl	801e630 <uxListRemove>
 80207ec:	4603      	mov	r3, r0
 80207ee:	2b00      	cmp	r3, #0
 80207f0:	d115      	bne.n	802081e <xTaskPriorityDisinherit+0x9a>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80207f2:	68bb      	ldr	r3, [r7, #8]
 80207f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80207f6:	4922      	ldr	r1, [pc, #136]	; (8020880 <xTaskPriorityDisinherit+0xfc>)
 80207f8:	4613      	mov	r3, r2
 80207fa:	009b      	lsls	r3, r3, #2
 80207fc:	4413      	add	r3, r2
 80207fe:	009b      	lsls	r3, r3, #2
 8020800:	440b      	add	r3, r1
 8020802:	681b      	ldr	r3, [r3, #0]
 8020804:	2b00      	cmp	r3, #0
 8020806:	d10a      	bne.n	802081e <xTaskPriorityDisinherit+0x9a>
 8020808:	68bb      	ldr	r3, [r7, #8]
 802080a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802080c:	2201      	movs	r2, #1
 802080e:	fa02 f303 	lsl.w	r3, r2, r3
 8020812:	43da      	mvns	r2, r3
 8020814:	4b1b      	ldr	r3, [pc, #108]	; (8020884 <xTaskPriorityDisinherit+0x100>)
 8020816:	681b      	ldr	r3, [r3, #0]
 8020818:	4013      	ands	r3, r2
 802081a:	4a1a      	ldr	r2, [pc, #104]	; (8020884 <xTaskPriorityDisinherit+0x100>)
 802081c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 802081e:	68bb      	ldr	r3, [r7, #8]
 8020820:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8020822:	68bb      	ldr	r3, [r7, #8]
 8020824:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020826:	68bb      	ldr	r3, [r7, #8]
 8020828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802082a:	f1c3 0214 	rsb	r2, r3, #20
 802082e:	68bb      	ldr	r3, [r7, #8]
 8020830:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8020832:	68bb      	ldr	r3, [r7, #8]
 8020834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020836:	2201      	movs	r2, #1
 8020838:	409a      	lsls	r2, r3
 802083a:	4b12      	ldr	r3, [pc, #72]	; (8020884 <xTaskPriorityDisinherit+0x100>)
 802083c:	681b      	ldr	r3, [r3, #0]
 802083e:	4313      	orrs	r3, r2
 8020840:	4a10      	ldr	r2, [pc, #64]	; (8020884 <xTaskPriorityDisinherit+0x100>)
 8020842:	6013      	str	r3, [r2, #0]
 8020844:	68bb      	ldr	r3, [r7, #8]
 8020846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020848:	4613      	mov	r3, r2
 802084a:	009b      	lsls	r3, r3, #2
 802084c:	4413      	add	r3, r2
 802084e:	009b      	lsls	r3, r3, #2
 8020850:	4a0b      	ldr	r2, [pc, #44]	; (8020880 <xTaskPriorityDisinherit+0xfc>)
 8020852:	441a      	add	r2, r3
 8020854:	68bb      	ldr	r3, [r7, #8]
 8020856:	3304      	adds	r3, #4
 8020858:	4619      	mov	r1, r3
 802085a:	4610      	mov	r0, r2
 802085c:	f7fd fe8b 	bl	801e576 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8020860:	2301      	movs	r3, #1
 8020862:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8020864:	68fb      	ldr	r3, [r7, #12]
	}
 8020866:	4618      	mov	r0, r3
 8020868:	3710      	adds	r7, #16
 802086a:	46bd      	mov	sp, r7
 802086c:	bd80      	pop	{r7, pc}
 802086e:	bf00      	nop
 8020870:	2000d178 	.word	0x2000d178
 8020874:	0802cee8 	.word	0x0802cee8
 8020878:	0802d220 	.word	0x0802d220
 802087c:	0802d238 	.word	0x0802d238
 8020880:	2000d17c 	.word	0x2000d17c
 8020884:	2000d388 	.word	0x2000d388

08020888 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8020888:	b580      	push	{r7, lr}
 802088a:	b086      	sub	sp, #24
 802088c:	af00      	add	r7, sp, #0
 802088e:	6078      	str	r0, [r7, #4]
 8020890:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8020892:	687b      	ldr	r3, [r7, #4]
 8020894:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8020896:	2301      	movs	r3, #1
 8020898:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 802089a:	687b      	ldr	r3, [r7, #4]
 802089c:	2b00      	cmp	r3, #0
 802089e:	d06d      	beq.n	802097c <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80208a0:	693b      	ldr	r3, [r7, #16]
 80208a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80208a4:	2b00      	cmp	r3, #0
 80208a6:	d105      	bne.n	80208b4 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 80208a8:	f241 0262 	movw	r2, #4194	; 0x1062
 80208ac:	4935      	ldr	r1, [pc, #212]	; (8020984 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80208ae:	4836      	ldr	r0, [pc, #216]	; (8020988 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80208b0:	f7f0 f9b4 	bl	8010c1c <assertFail>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80208b4:	693b      	ldr	r3, [r7, #16]
 80208b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80208b8:	683a      	ldr	r2, [r7, #0]
 80208ba:	429a      	cmp	r2, r3
 80208bc:	d902      	bls.n	80208c4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80208be:	683b      	ldr	r3, [r7, #0]
 80208c0:	617b      	str	r3, [r7, #20]
 80208c2:	e002      	b.n	80208ca <vTaskPriorityDisinheritAfterTimeout+0x42>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80208c4:	693b      	ldr	r3, [r7, #16]
 80208c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80208c8:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80208ca:	693b      	ldr	r3, [r7, #16]
 80208cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80208ce:	697a      	ldr	r2, [r7, #20]
 80208d0:	429a      	cmp	r2, r3
 80208d2:	d053      	beq.n	802097c <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80208d4:	693b      	ldr	r3, [r7, #16]
 80208d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80208d8:	68fa      	ldr	r2, [r7, #12]
 80208da:	429a      	cmp	r2, r3
 80208dc:	d14e      	bne.n	802097c <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80208de:	4b2b      	ldr	r3, [pc, #172]	; (802098c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80208e0:	681b      	ldr	r3, [r3, #0]
 80208e2:	693a      	ldr	r2, [r7, #16]
 80208e4:	429a      	cmp	r2, r3
 80208e6:	d105      	bne.n	80208f4 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 80208e8:	f241 027d 	movw	r2, #4221	; 0x107d
 80208ec:	4925      	ldr	r1, [pc, #148]	; (8020984 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80208ee:	4828      	ldr	r0, [pc, #160]	; (8020990 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80208f0:	f7f0 f994 	bl	8010c1c <assertFail>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80208f4:	693b      	ldr	r3, [r7, #16]
 80208f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80208f8:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 80208fa:	693b      	ldr	r3, [r7, #16]
 80208fc:	697a      	ldr	r2, [r7, #20]
 80208fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8020900:	693b      	ldr	r3, [r7, #16]
 8020902:	699b      	ldr	r3, [r3, #24]
 8020904:	2b00      	cmp	r3, #0
 8020906:	db04      	blt.n	8020912 <vTaskPriorityDisinheritAfterTimeout+0x8a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020908:	697b      	ldr	r3, [r7, #20]
 802090a:	f1c3 0214 	rsb	r2, r3, #20
 802090e:	693b      	ldr	r3, [r7, #16]
 8020910:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8020912:	693b      	ldr	r3, [r7, #16]
 8020914:	6959      	ldr	r1, [r3, #20]
 8020916:	68ba      	ldr	r2, [r7, #8]
 8020918:	4613      	mov	r3, r2
 802091a:	009b      	lsls	r3, r3, #2
 802091c:	4413      	add	r3, r2
 802091e:	009b      	lsls	r3, r3, #2
 8020920:	4a1c      	ldr	r2, [pc, #112]	; (8020994 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8020922:	4413      	add	r3, r2
 8020924:	4299      	cmp	r1, r3
 8020926:	d129      	bne.n	802097c <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8020928:	693b      	ldr	r3, [r7, #16]
 802092a:	3304      	adds	r3, #4
 802092c:	4618      	mov	r0, r3
 802092e:	f7fd fe7f 	bl	801e630 <uxListRemove>
 8020932:	4603      	mov	r3, r0
 8020934:	2b00      	cmp	r3, #0
 8020936:	d10a      	bne.n	802094e <vTaskPriorityDisinheritAfterTimeout+0xc6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8020938:	693b      	ldr	r3, [r7, #16]
 802093a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802093c:	2201      	movs	r2, #1
 802093e:	fa02 f303 	lsl.w	r3, r2, r3
 8020942:	43da      	mvns	r2, r3
 8020944:	4b14      	ldr	r3, [pc, #80]	; (8020998 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8020946:	681b      	ldr	r3, [r3, #0]
 8020948:	4013      	ands	r3, r2
 802094a:	4a13      	ldr	r2, [pc, #76]	; (8020998 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 802094c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 802094e:	693b      	ldr	r3, [r7, #16]
 8020950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020952:	2201      	movs	r2, #1
 8020954:	409a      	lsls	r2, r3
 8020956:	4b10      	ldr	r3, [pc, #64]	; (8020998 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8020958:	681b      	ldr	r3, [r3, #0]
 802095a:	4313      	orrs	r3, r2
 802095c:	4a0e      	ldr	r2, [pc, #56]	; (8020998 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 802095e:	6013      	str	r3, [r2, #0]
 8020960:	693b      	ldr	r3, [r7, #16]
 8020962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020964:	4613      	mov	r3, r2
 8020966:	009b      	lsls	r3, r3, #2
 8020968:	4413      	add	r3, r2
 802096a:	009b      	lsls	r3, r3, #2
 802096c:	4a09      	ldr	r2, [pc, #36]	; (8020994 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 802096e:	441a      	add	r2, r3
 8020970:	693b      	ldr	r3, [r7, #16]
 8020972:	3304      	adds	r3, #4
 8020974:	4619      	mov	r1, r3
 8020976:	4610      	mov	r0, r2
 8020978:	f7fd fdfd 	bl	801e576 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 802097c:	bf00      	nop
 802097e:	3718      	adds	r7, #24
 8020980:	46bd      	mov	sp, r7
 8020982:	bd80      	pop	{r7, pc}
 8020984:	0802cee8 	.word	0x0802cee8
 8020988:	0802d238 	.word	0x0802d238
 802098c:	2000d178 	.word	0x2000d178
 8020990:	0802d250 	.word	0x0802d250
 8020994:	2000d17c 	.word	0x2000d17c
 8020998:	2000d388 	.word	0x2000d388

0802099c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 802099c:	b480      	push	{r7}
 802099e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80209a0:	4b07      	ldr	r3, [pc, #28]	; (80209c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80209a2:	681b      	ldr	r3, [r3, #0]
 80209a4:	2b00      	cmp	r3, #0
 80209a6:	d004      	beq.n	80209b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80209a8:	4b05      	ldr	r3, [pc, #20]	; (80209c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80209aa:	681b      	ldr	r3, [r3, #0]
 80209ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80209ae:	3201      	adds	r2, #1
 80209b0:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 80209b2:	4b03      	ldr	r3, [pc, #12]	; (80209c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80209b4:	681b      	ldr	r3, [r3, #0]
	}
 80209b6:	4618      	mov	r0, r3
 80209b8:	46bd      	mov	sp, r7
 80209ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209be:	4770      	bx	lr
 80209c0:	2000d178 	.word	0x2000d178

080209c4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80209c4:	b580      	push	{r7, lr}
 80209c6:	b084      	sub	sp, #16
 80209c8:	af00      	add	r7, sp, #0
 80209ca:	6078      	str	r0, [r7, #4]
 80209cc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80209ce:	f000 fdff 	bl	80215d0 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80209d2:	4b20      	ldr	r3, [pc, #128]	; (8020a54 <ulTaskNotifyTake+0x90>)
 80209d4:	681b      	ldr	r3, [r3, #0]
 80209d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80209da:	2b00      	cmp	r3, #0
 80209dc:	d113      	bne.n	8020a06 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80209de:	4b1d      	ldr	r3, [pc, #116]	; (8020a54 <ulTaskNotifyTake+0x90>)
 80209e0:	681b      	ldr	r3, [r3, #0]
 80209e2:	2201      	movs	r2, #1
 80209e4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 80209e8:	683b      	ldr	r3, [r7, #0]
 80209ea:	2b00      	cmp	r3, #0
 80209ec:	d00b      	beq.n	8020a06 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80209ee:	2101      	movs	r1, #1
 80209f0:	6838      	ldr	r0, [r7, #0]
 80209f2:	f000 f859 	bl	8020aa8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80209f6:	4b18      	ldr	r3, [pc, #96]	; (8020a58 <ulTaskNotifyTake+0x94>)
 80209f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80209fc:	601a      	str	r2, [r3, #0]
 80209fe:	f3bf 8f4f 	dsb	sy
 8020a02:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8020a06:	f000 fe11 	bl	802162c <vPortExitCritical>

		taskENTER_CRITICAL();
 8020a0a:	f000 fde1 	bl	80215d0 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8020a0e:	4b11      	ldr	r3, [pc, #68]	; (8020a54 <ulTaskNotifyTake+0x90>)
 8020a10:	681b      	ldr	r3, [r3, #0]
 8020a12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8020a16:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8020a18:	68fb      	ldr	r3, [r7, #12]
 8020a1a:	2b00      	cmp	r3, #0
 8020a1c:	d00e      	beq.n	8020a3c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8020a1e:	687b      	ldr	r3, [r7, #4]
 8020a20:	2b00      	cmp	r3, #0
 8020a22:	d005      	beq.n	8020a30 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8020a24:	4b0b      	ldr	r3, [pc, #44]	; (8020a54 <ulTaskNotifyTake+0x90>)
 8020a26:	681b      	ldr	r3, [r3, #0]
 8020a28:	2200      	movs	r2, #0
 8020a2a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8020a2e:	e005      	b.n	8020a3c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8020a30:	4b08      	ldr	r3, [pc, #32]	; (8020a54 <ulTaskNotifyTake+0x90>)
 8020a32:	681b      	ldr	r3, [r3, #0]
 8020a34:	68fa      	ldr	r2, [r7, #12]
 8020a36:	3a01      	subs	r2, #1
 8020a38:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8020a3c:	4b05      	ldr	r3, [pc, #20]	; (8020a54 <ulTaskNotifyTake+0x90>)
 8020a3e:	681b      	ldr	r3, [r3, #0]
 8020a40:	2200      	movs	r2, #0
 8020a42:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8020a46:	f000 fdf1 	bl	802162c <vPortExitCritical>

		return ulReturn;
 8020a4a:	68fb      	ldr	r3, [r7, #12]
	}
 8020a4c:	4618      	mov	r0, r3
 8020a4e:	3710      	adds	r7, #16
 8020a50:	46bd      	mov	sp, r7
 8020a52:	bd80      	pop	{r7, pc}
 8020a54:	2000d178 	.word	0x2000d178
 8020a58:	e000ed04 	.word	0xe000ed04

08020a5c <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
 8020a5c:	b580      	push	{r7, lr}
 8020a5e:	b084      	sub	sp, #16
 8020a60:	af00      	add	r7, sp, #0
 8020a62:	6078      	str	r0, [r7, #4]
 8020a64:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8020a66:	687b      	ldr	r3, [r7, #4]
 8020a68:	2b00      	cmp	r3, #0
 8020a6a:	d102      	bne.n	8020a72 <ulTaskNotifyValueClear+0x16>
 8020a6c:	4b0d      	ldr	r3, [pc, #52]	; (8020aa4 <ulTaskNotifyValueClear+0x48>)
 8020a6e:	681b      	ldr	r3, [r3, #0]
 8020a70:	e000      	b.n	8020a74 <ulTaskNotifyValueClear+0x18>
 8020a72:	687b      	ldr	r3, [r7, #4]
 8020a74:	60fb      	str	r3, [r7, #12]

		taskENTER_CRITICAL();
 8020a76:	f000 fdab 	bl	80215d0 <vPortEnterCritical>
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8020a7a:	4b0a      	ldr	r3, [pc, #40]	; (8020aa4 <ulTaskNotifyValueClear+0x48>)
 8020a7c:	681b      	ldr	r3, [r3, #0]
 8020a7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8020a82:	60bb      	str	r3, [r7, #8]
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 8020a84:	68fb      	ldr	r3, [r7, #12]
 8020a86:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8020a8a:	683b      	ldr	r3, [r7, #0]
 8020a8c:	43db      	mvns	r3, r3
 8020a8e:	401a      	ands	r2, r3
 8020a90:	68fb      	ldr	r3, [r7, #12]
 8020a92:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 8020a96:	f000 fdc9 	bl	802162c <vPortExitCritical>

		return ulReturn;
 8020a9a:	68bb      	ldr	r3, [r7, #8]
	}
 8020a9c:	4618      	mov	r0, r3
 8020a9e:	3710      	adds	r7, #16
 8020aa0:	46bd      	mov	sp, r7
 8020aa2:	bd80      	pop	{r7, pc}
 8020aa4:	2000d178 	.word	0x2000d178

08020aa8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8020aa8:	b580      	push	{r7, lr}
 8020aaa:	b084      	sub	sp, #16
 8020aac:	af00      	add	r7, sp, #0
 8020aae:	6078      	str	r0, [r7, #4]
 8020ab0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8020ab2:	4b29      	ldr	r3, [pc, #164]	; (8020b58 <prvAddCurrentTaskToDelayedList+0xb0>)
 8020ab4:	681b      	ldr	r3, [r3, #0]
 8020ab6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8020ab8:	4b28      	ldr	r3, [pc, #160]	; (8020b5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8020aba:	681b      	ldr	r3, [r3, #0]
 8020abc:	3304      	adds	r3, #4
 8020abe:	4618      	mov	r0, r3
 8020ac0:	f7fd fdb6 	bl	801e630 <uxListRemove>
 8020ac4:	4603      	mov	r3, r0
 8020ac6:	2b00      	cmp	r3, #0
 8020ac8:	d10b      	bne.n	8020ae2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8020aca:	4b24      	ldr	r3, [pc, #144]	; (8020b5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8020acc:	681b      	ldr	r3, [r3, #0]
 8020ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020ad0:	2201      	movs	r2, #1
 8020ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8020ad6:	43da      	mvns	r2, r3
 8020ad8:	4b21      	ldr	r3, [pc, #132]	; (8020b60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8020ada:	681b      	ldr	r3, [r3, #0]
 8020adc:	4013      	ands	r3, r2
 8020ade:	4a20      	ldr	r2, [pc, #128]	; (8020b60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8020ae0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8020ae2:	687b      	ldr	r3, [r7, #4]
 8020ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020ae8:	d10a      	bne.n	8020b00 <prvAddCurrentTaskToDelayedList+0x58>
 8020aea:	683b      	ldr	r3, [r7, #0]
 8020aec:	2b00      	cmp	r3, #0
 8020aee:	d007      	beq.n	8020b00 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8020af0:	4b1a      	ldr	r3, [pc, #104]	; (8020b5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8020af2:	681b      	ldr	r3, [r3, #0]
 8020af4:	3304      	adds	r3, #4
 8020af6:	4619      	mov	r1, r3
 8020af8:	481a      	ldr	r0, [pc, #104]	; (8020b64 <prvAddCurrentTaskToDelayedList+0xbc>)
 8020afa:	f7fd fd3c 	bl	801e576 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8020afe:	e026      	b.n	8020b4e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8020b00:	68fa      	ldr	r2, [r7, #12]
 8020b02:	687b      	ldr	r3, [r7, #4]
 8020b04:	4413      	add	r3, r2
 8020b06:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8020b08:	4b14      	ldr	r3, [pc, #80]	; (8020b5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8020b0a:	681b      	ldr	r3, [r3, #0]
 8020b0c:	68ba      	ldr	r2, [r7, #8]
 8020b0e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8020b10:	68ba      	ldr	r2, [r7, #8]
 8020b12:	68fb      	ldr	r3, [r7, #12]
 8020b14:	429a      	cmp	r2, r3
 8020b16:	d209      	bcs.n	8020b2c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8020b18:	4b13      	ldr	r3, [pc, #76]	; (8020b68 <prvAddCurrentTaskToDelayedList+0xc0>)
 8020b1a:	681a      	ldr	r2, [r3, #0]
 8020b1c:	4b0f      	ldr	r3, [pc, #60]	; (8020b5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8020b1e:	681b      	ldr	r3, [r3, #0]
 8020b20:	3304      	adds	r3, #4
 8020b22:	4619      	mov	r1, r3
 8020b24:	4610      	mov	r0, r2
 8020b26:	f7fd fd4a 	bl	801e5be <vListInsert>
}
 8020b2a:	e010      	b.n	8020b4e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8020b2c:	4b0f      	ldr	r3, [pc, #60]	; (8020b6c <prvAddCurrentTaskToDelayedList+0xc4>)
 8020b2e:	681a      	ldr	r2, [r3, #0]
 8020b30:	4b0a      	ldr	r3, [pc, #40]	; (8020b5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8020b32:	681b      	ldr	r3, [r3, #0]
 8020b34:	3304      	adds	r3, #4
 8020b36:	4619      	mov	r1, r3
 8020b38:	4610      	mov	r0, r2
 8020b3a:	f7fd fd40 	bl	801e5be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8020b3e:	4b0c      	ldr	r3, [pc, #48]	; (8020b70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8020b40:	681b      	ldr	r3, [r3, #0]
 8020b42:	68ba      	ldr	r2, [r7, #8]
 8020b44:	429a      	cmp	r2, r3
 8020b46:	d202      	bcs.n	8020b4e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8020b48:	4a09      	ldr	r2, [pc, #36]	; (8020b70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8020b4a:	68bb      	ldr	r3, [r7, #8]
 8020b4c:	6013      	str	r3, [r2, #0]
}
 8020b4e:	bf00      	nop
 8020b50:	3710      	adds	r7, #16
 8020b52:	46bd      	mov	sp, r7
 8020b54:	bd80      	pop	{r7, pc}
 8020b56:	bf00      	nop
 8020b58:	2000d384 	.word	0x2000d384
 8020b5c:	2000d178 	.word	0x2000d178
 8020b60:	2000d388 	.word	0x2000d388
 8020b64:	2000d368 	.word	0x2000d368
 8020b68:	2000d338 	.word	0x2000d338
 8020b6c:	2000d334 	.word	0x2000d334
 8020b70:	2000d3a0 	.word	0x2000d3a0

08020b74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8020b74:	b580      	push	{r7, lr}
 8020b76:	b088      	sub	sp, #32
 8020b78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8020b7a:	2300      	movs	r3, #0
 8020b7c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8020b7e:	f000 fb95 	bl	80212ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8020b82:	4b19      	ldr	r3, [pc, #100]	; (8020be8 <xTimerCreateTimerTask+0x74>)
 8020b84:	681b      	ldr	r3, [r3, #0]
 8020b86:	2b00      	cmp	r3, #0
 8020b88:	d020      	beq.n	8020bcc <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8020b8a:	2300      	movs	r3, #0
 8020b8c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8020b8e:	2300      	movs	r3, #0
 8020b90:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8020b92:	463a      	mov	r2, r7
 8020b94:	1d39      	adds	r1, r7, #4
 8020b96:	f107 0308 	add.w	r3, r7, #8
 8020b9a:	4618      	mov	r0, r3
 8020b9c:	f7f3 faf4 	bl	8014188 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8020ba0:	6839      	ldr	r1, [r7, #0]
 8020ba2:	687b      	ldr	r3, [r7, #4]
 8020ba4:	68ba      	ldr	r2, [r7, #8]
 8020ba6:	9202      	str	r2, [sp, #8]
 8020ba8:	9301      	str	r3, [sp, #4]
 8020baa:	2301      	movs	r3, #1
 8020bac:	9300      	str	r3, [sp, #0]
 8020bae:	2300      	movs	r3, #0
 8020bb0:	460a      	mov	r2, r1
 8020bb2:	490e      	ldr	r1, [pc, #56]	; (8020bec <xTimerCreateTimerTask+0x78>)
 8020bb4:	480e      	ldr	r0, [pc, #56]	; (8020bf0 <xTimerCreateTimerTask+0x7c>)
 8020bb6:	f7fe fcdd 	bl	801f574 <xTaskCreateStatic>
 8020bba:	4603      	mov	r3, r0
 8020bbc:	4a0d      	ldr	r2, [pc, #52]	; (8020bf4 <xTimerCreateTimerTask+0x80>)
 8020bbe:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8020bc0:	4b0c      	ldr	r3, [pc, #48]	; (8020bf4 <xTimerCreateTimerTask+0x80>)
 8020bc2:	681b      	ldr	r3, [r3, #0]
 8020bc4:	2b00      	cmp	r3, #0
 8020bc6:	d001      	beq.n	8020bcc <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8020bc8:	2301      	movs	r3, #1
 8020bca:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8020bcc:	68fb      	ldr	r3, [r7, #12]
 8020bce:	2b00      	cmp	r3, #0
 8020bd0:	d105      	bne.n	8020bde <xTimerCreateTimerTask+0x6a>
 8020bd2:	f240 1213 	movw	r2, #275	; 0x113
 8020bd6:	4908      	ldr	r1, [pc, #32]	; (8020bf8 <xTimerCreateTimerTask+0x84>)
 8020bd8:	4808      	ldr	r0, [pc, #32]	; (8020bfc <xTimerCreateTimerTask+0x88>)
 8020bda:	f7f0 f81f 	bl	8010c1c <assertFail>
	return xReturn;
 8020bde:	68fb      	ldr	r3, [r7, #12]
}
 8020be0:	4618      	mov	r0, r3
 8020be2:	3710      	adds	r7, #16
 8020be4:	46bd      	mov	sp, r7
 8020be6:	bd80      	pop	{r7, pc}
 8020be8:	2000d3e4 	.word	0x2000d3e4
 8020bec:	0802d300 	.word	0x0802d300
 8020bf0:	08020e5d 	.word	0x08020e5d
 8020bf4:	2000d3e8 	.word	0x2000d3e8
 8020bf8:	0802d308 	.word	0x0802d308
 8020bfc:	0802d33c 	.word	0x0802d33c

08020c00 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8020c00:	b580      	push	{r7, lr}
 8020c02:	b088      	sub	sp, #32
 8020c04:	af02      	add	r7, sp, #8
 8020c06:	60f8      	str	r0, [r7, #12]
 8020c08:	60b9      	str	r1, [r7, #8]
 8020c0a:	607a      	str	r2, [r7, #4]
 8020c0c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8020c0e:	202c      	movs	r0, #44	; 0x2c
 8020c10:	f000 fdee 	bl	80217f0 <pvPortMalloc>
 8020c14:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8020c16:	697b      	ldr	r3, [r7, #20]
 8020c18:	2b00      	cmp	r3, #0
 8020c1a:	d00d      	beq.n	8020c38 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8020c1c:	697b      	ldr	r3, [r7, #20]
 8020c1e:	2200      	movs	r2, #0
 8020c20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8020c24:	697b      	ldr	r3, [r7, #20]
 8020c26:	9301      	str	r3, [sp, #4]
 8020c28:	6a3b      	ldr	r3, [r7, #32]
 8020c2a:	9300      	str	r3, [sp, #0]
 8020c2c:	683b      	ldr	r3, [r7, #0]
 8020c2e:	687a      	ldr	r2, [r7, #4]
 8020c30:	68b9      	ldr	r1, [r7, #8]
 8020c32:	68f8      	ldr	r0, [r7, #12]
 8020c34:	f000 f840 	bl	8020cb8 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8020c38:	697b      	ldr	r3, [r7, #20]
	}
 8020c3a:	4618      	mov	r0, r3
 8020c3c:	3718      	adds	r7, #24
 8020c3e:	46bd      	mov	sp, r7
 8020c40:	bd80      	pop	{r7, pc}
	...

08020c44 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8020c44:	b580      	push	{r7, lr}
 8020c46:	b088      	sub	sp, #32
 8020c48:	af02      	add	r7, sp, #8
 8020c4a:	60f8      	str	r0, [r7, #12]
 8020c4c:	60b9      	str	r1, [r7, #8]
 8020c4e:	607a      	str	r2, [r7, #4]
 8020c50:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8020c52:	232c      	movs	r3, #44	; 0x2c
 8020c54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8020c56:	693b      	ldr	r3, [r7, #16]
 8020c58:	2b2c      	cmp	r3, #44	; 0x2c
 8020c5a:	d005      	beq.n	8020c68 <xTimerCreateStatic+0x24>
 8020c5c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8020c60:	4912      	ldr	r1, [pc, #72]	; (8020cac <xTimerCreateStatic+0x68>)
 8020c62:	4813      	ldr	r0, [pc, #76]	; (8020cb0 <xTimerCreateStatic+0x6c>)
 8020c64:	f7ef ffda 	bl	8010c1c <assertFail>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8020c68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8020c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c6c:	2b00      	cmp	r3, #0
 8020c6e:	d105      	bne.n	8020c7c <xTimerCreateStatic+0x38>
 8020c70:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8020c74:	490d      	ldr	r1, [pc, #52]	; (8020cac <xTimerCreateStatic+0x68>)
 8020c76:	480f      	ldr	r0, [pc, #60]	; (8020cb4 <xTimerCreateStatic+0x70>)
 8020c78:	f7ef ffd0 	bl	8010c1c <assertFail>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8020c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c7e:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8020c80:	697b      	ldr	r3, [r7, #20]
 8020c82:	2b00      	cmp	r3, #0
 8020c84:	d00d      	beq.n	8020ca2 <xTimerCreateStatic+0x5e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8020c86:	697b      	ldr	r3, [r7, #20]
 8020c88:	2202      	movs	r2, #2
 8020c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8020c8e:	697b      	ldr	r3, [r7, #20]
 8020c90:	9301      	str	r3, [sp, #4]
 8020c92:	6a3b      	ldr	r3, [r7, #32]
 8020c94:	9300      	str	r3, [sp, #0]
 8020c96:	683b      	ldr	r3, [r7, #0]
 8020c98:	687a      	ldr	r2, [r7, #4]
 8020c9a:	68b9      	ldr	r1, [r7, #8]
 8020c9c:	68f8      	ldr	r0, [r7, #12]
 8020c9e:	f000 f80b 	bl	8020cb8 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8020ca2:	697b      	ldr	r3, [r7, #20]
	}
 8020ca4:	4618      	mov	r0, r3
 8020ca6:	3718      	adds	r7, #24
 8020ca8:	46bd      	mov	sp, r7
 8020caa:	bd80      	pop	{r7, pc}
 8020cac:	0802d308 	.word	0x0802d308
 8020cb0:	0802d344 	.word	0x0802d344
 8020cb4:	0802d360 	.word	0x0802d360

08020cb8 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8020cb8:	b580      	push	{r7, lr}
 8020cba:	b084      	sub	sp, #16
 8020cbc:	af00      	add	r7, sp, #0
 8020cbe:	60f8      	str	r0, [r7, #12]
 8020cc0:	60b9      	str	r1, [r7, #8]
 8020cc2:	607a      	str	r2, [r7, #4]
 8020cc4:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8020cc6:	68bb      	ldr	r3, [r7, #8]
 8020cc8:	2b00      	cmp	r3, #0
 8020cca:	d105      	bne.n	8020cd8 <prvInitialiseNewTimer+0x20>
 8020ccc:	f240 1265 	movw	r2, #357	; 0x165
 8020cd0:	4914      	ldr	r1, [pc, #80]	; (8020d24 <prvInitialiseNewTimer+0x6c>)
 8020cd2:	4815      	ldr	r0, [pc, #84]	; (8020d28 <prvInitialiseNewTimer+0x70>)
 8020cd4:	f7ef ffa2 	bl	8010c1c <assertFail>

	if( pxNewTimer != NULL )
 8020cd8:	69fb      	ldr	r3, [r7, #28]
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	d01e      	beq.n	8020d1c <prvInitialiseNewTimer+0x64>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8020cde:	f000 fae5 	bl	80212ac <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8020ce2:	69fb      	ldr	r3, [r7, #28]
 8020ce4:	68fa      	ldr	r2, [r7, #12]
 8020ce6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8020ce8:	69fb      	ldr	r3, [r7, #28]
 8020cea:	68ba      	ldr	r2, [r7, #8]
 8020cec:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8020cee:	69fb      	ldr	r3, [r7, #28]
 8020cf0:	683a      	ldr	r2, [r7, #0]
 8020cf2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8020cf4:	69fb      	ldr	r3, [r7, #28]
 8020cf6:	69ba      	ldr	r2, [r7, #24]
 8020cf8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8020cfa:	69fb      	ldr	r3, [r7, #28]
 8020cfc:	3304      	adds	r3, #4
 8020cfe:	4618      	mov	r0, r3
 8020d00:	f7fd fc2c 	bl	801e55c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8020d04:	687b      	ldr	r3, [r7, #4]
 8020d06:	2b00      	cmp	r3, #0
 8020d08:	d008      	beq.n	8020d1c <prvInitialiseNewTimer+0x64>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8020d0a:	69fb      	ldr	r3, [r7, #28]
 8020d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020d10:	f043 0304 	orr.w	r3, r3, #4
 8020d14:	b2da      	uxtb	r2, r3
 8020d16:	69fb      	ldr	r3, [r7, #28]
 8020d18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8020d1c:	bf00      	nop
 8020d1e:	3710      	adds	r7, #16
 8020d20:	46bd      	mov	sp, r7
 8020d22:	bd80      	pop	{r7, pc}
 8020d24:	0802d308 	.word	0x0802d308
 8020d28:	0802d370 	.word	0x0802d370

08020d2c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8020d2c:	b580      	push	{r7, lr}
 8020d2e:	b08a      	sub	sp, #40	; 0x28
 8020d30:	af00      	add	r7, sp, #0
 8020d32:	60f8      	str	r0, [r7, #12]
 8020d34:	60b9      	str	r1, [r7, #8]
 8020d36:	607a      	str	r2, [r7, #4]
 8020d38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8020d3a:	2300      	movs	r3, #0
 8020d3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8020d3e:	68fb      	ldr	r3, [r7, #12]
 8020d40:	2b00      	cmp	r3, #0
 8020d42:	d105      	bne.n	8020d50 <xTimerGenericCommand+0x24>
 8020d44:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8020d48:	491b      	ldr	r1, [pc, #108]	; (8020db8 <xTimerGenericCommand+0x8c>)
 8020d4a:	481c      	ldr	r0, [pc, #112]	; (8020dbc <xTimerGenericCommand+0x90>)
 8020d4c:	f7ef ff66 	bl	8010c1c <assertFail>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8020d50:	4b1b      	ldr	r3, [pc, #108]	; (8020dc0 <xTimerGenericCommand+0x94>)
 8020d52:	681b      	ldr	r3, [r3, #0]
 8020d54:	2b00      	cmp	r3, #0
 8020d56:	d02a      	beq.n	8020dae <xTimerGenericCommand+0x82>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8020d58:	68bb      	ldr	r3, [r7, #8]
 8020d5a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8020d5c:	687b      	ldr	r3, [r7, #4]
 8020d5e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8020d60:	68fb      	ldr	r3, [r7, #12]
 8020d62:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8020d64:	68bb      	ldr	r3, [r7, #8]
 8020d66:	2b05      	cmp	r3, #5
 8020d68:	dc18      	bgt.n	8020d9c <xTimerGenericCommand+0x70>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8020d6a:	f7ff fc77 	bl	802065c <xTaskGetSchedulerState>
 8020d6e:	4603      	mov	r3, r0
 8020d70:	2b02      	cmp	r3, #2
 8020d72:	d109      	bne.n	8020d88 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8020d74:	4b12      	ldr	r3, [pc, #72]	; (8020dc0 <xTimerGenericCommand+0x94>)
 8020d76:	6818      	ldr	r0, [r3, #0]
 8020d78:	f107 0114 	add.w	r1, r7, #20
 8020d7c:	2300      	movs	r3, #0
 8020d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020d80:	f7fd fdfe 	bl	801e980 <xQueueGenericSend>
 8020d84:	6278      	str	r0, [r7, #36]	; 0x24
 8020d86:	e012      	b.n	8020dae <xTimerGenericCommand+0x82>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8020d88:	4b0d      	ldr	r3, [pc, #52]	; (8020dc0 <xTimerGenericCommand+0x94>)
 8020d8a:	6818      	ldr	r0, [r3, #0]
 8020d8c:	f107 0114 	add.w	r1, r7, #20
 8020d90:	2300      	movs	r3, #0
 8020d92:	2200      	movs	r2, #0
 8020d94:	f7fd fdf4 	bl	801e980 <xQueueGenericSend>
 8020d98:	6278      	str	r0, [r7, #36]	; 0x24
 8020d9a:	e008      	b.n	8020dae <xTimerGenericCommand+0x82>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8020d9c:	4b08      	ldr	r3, [pc, #32]	; (8020dc0 <xTimerGenericCommand+0x94>)
 8020d9e:	6818      	ldr	r0, [r3, #0]
 8020da0:	f107 0114 	add.w	r1, r7, #20
 8020da4:	2300      	movs	r3, #0
 8020da6:	683a      	ldr	r2, [r7, #0]
 8020da8:	f7fd fef8 	bl	801eb9c <xQueueGenericSendFromISR>
 8020dac:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8020dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020db0:	4618      	mov	r0, r3
 8020db2:	3728      	adds	r7, #40	; 0x28
 8020db4:	46bd      	mov	sp, r7
 8020db6:	bd80      	pop	{r7, pc}
 8020db8:	0802d308 	.word	0x0802d308
 8020dbc:	0802d38c 	.word	0x0802d38c
 8020dc0:	2000d3e4 	.word	0x2000d3e4

08020dc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8020dc4:	b580      	push	{r7, lr}
 8020dc6:	b086      	sub	sp, #24
 8020dc8:	af02      	add	r7, sp, #8
 8020dca:	6078      	str	r0, [r7, #4]
 8020dcc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020dce:	4b20      	ldr	r3, [pc, #128]	; (8020e50 <prvProcessExpiredTimer+0x8c>)
 8020dd0:	681b      	ldr	r3, [r3, #0]
 8020dd2:	68db      	ldr	r3, [r3, #12]
 8020dd4:	68db      	ldr	r3, [r3, #12]
 8020dd6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8020dd8:	68fb      	ldr	r3, [r7, #12]
 8020dda:	3304      	adds	r3, #4
 8020ddc:	4618      	mov	r0, r3
 8020dde:	f7fd fc27 	bl	801e630 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8020de2:	68fb      	ldr	r3, [r7, #12]
 8020de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020de8:	f003 0304 	and.w	r3, r3, #4
 8020dec:	2b00      	cmp	r3, #0
 8020dee:	d01e      	beq.n	8020e2e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8020df0:	68fb      	ldr	r3, [r7, #12]
 8020df2:	699a      	ldr	r2, [r3, #24]
 8020df4:	687b      	ldr	r3, [r7, #4]
 8020df6:	18d1      	adds	r1, r2, r3
 8020df8:	687b      	ldr	r3, [r7, #4]
 8020dfa:	683a      	ldr	r2, [r7, #0]
 8020dfc:	68f8      	ldr	r0, [r7, #12]
 8020dfe:	f000 f8d1 	bl	8020fa4 <prvInsertTimerInActiveList>
 8020e02:	4603      	mov	r3, r0
 8020e04:	2b00      	cmp	r3, #0
 8020e06:	d01b      	beq.n	8020e40 <prvProcessExpiredTimer+0x7c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8020e08:	2300      	movs	r3, #0
 8020e0a:	9300      	str	r3, [sp, #0]
 8020e0c:	2300      	movs	r3, #0
 8020e0e:	687a      	ldr	r2, [r7, #4]
 8020e10:	2100      	movs	r1, #0
 8020e12:	68f8      	ldr	r0, [r7, #12]
 8020e14:	f7ff ff8a 	bl	8020d2c <xTimerGenericCommand>
 8020e18:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8020e1a:	68bb      	ldr	r3, [r7, #8]
 8020e1c:	2b00      	cmp	r3, #0
 8020e1e:	d10f      	bne.n	8020e40 <prvProcessExpiredTimer+0x7c>
 8020e20:	f240 2211 	movw	r2, #529	; 0x211
 8020e24:	490b      	ldr	r1, [pc, #44]	; (8020e54 <prvProcessExpiredTimer+0x90>)
 8020e26:	480c      	ldr	r0, [pc, #48]	; (8020e58 <prvProcessExpiredTimer+0x94>)
 8020e28:	f7ef fef8 	bl	8010c1c <assertFail>
 8020e2c:	e008      	b.n	8020e40 <prvProcessExpiredTimer+0x7c>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8020e2e:	68fb      	ldr	r3, [r7, #12]
 8020e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020e34:	f023 0301 	bic.w	r3, r3, #1
 8020e38:	b2da      	uxtb	r2, r3
 8020e3a:	68fb      	ldr	r3, [r7, #12]
 8020e3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8020e40:	68fb      	ldr	r3, [r7, #12]
 8020e42:	6a1b      	ldr	r3, [r3, #32]
 8020e44:	68f8      	ldr	r0, [r7, #12]
 8020e46:	4798      	blx	r3
}
 8020e48:	bf00      	nop
 8020e4a:	3710      	adds	r7, #16
 8020e4c:	46bd      	mov	sp, r7
 8020e4e:	bd80      	pop	{r7, pc}
 8020e50:	2000d3dc 	.word	0x2000d3dc
 8020e54:	0802d308 	.word	0x0802d308
 8020e58:	0802d3b4 	.word	0x0802d3b4

08020e5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8020e5c:	b580      	push	{r7, lr}
 8020e5e:	b084      	sub	sp, #16
 8020e60:	af00      	add	r7, sp, #0
 8020e62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8020e64:	f107 0308 	add.w	r3, r7, #8
 8020e68:	4618      	mov	r0, r3
 8020e6a:	f000 f857 	bl	8020f1c <prvGetNextExpireTime>
 8020e6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8020e70:	68bb      	ldr	r3, [r7, #8]
 8020e72:	4619      	mov	r1, r3
 8020e74:	68f8      	ldr	r0, [r7, #12]
 8020e76:	f000 f803 	bl	8020e80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8020e7a:	f000 f8d5 	bl	8021028 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8020e7e:	e7f1      	b.n	8020e64 <prvTimerTask+0x8>

08020e80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8020e80:	b580      	push	{r7, lr}
 8020e82:	b084      	sub	sp, #16
 8020e84:	af00      	add	r7, sp, #0
 8020e86:	6078      	str	r0, [r7, #4]
 8020e88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8020e8a:	f7fe fe3f 	bl	801fb0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8020e8e:	f107 0308 	add.w	r3, r7, #8
 8020e92:	4618      	mov	r0, r3
 8020e94:	f000 f866 	bl	8020f64 <prvSampleTimeNow>
 8020e98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8020e9a:	68bb      	ldr	r3, [r7, #8]
 8020e9c:	2b00      	cmp	r3, #0
 8020e9e:	d130      	bne.n	8020f02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8020ea0:	683b      	ldr	r3, [r7, #0]
 8020ea2:	2b00      	cmp	r3, #0
 8020ea4:	d10a      	bne.n	8020ebc <prvProcessTimerOrBlockTask+0x3c>
 8020ea6:	687a      	ldr	r2, [r7, #4]
 8020ea8:	68fb      	ldr	r3, [r7, #12]
 8020eaa:	429a      	cmp	r2, r3
 8020eac:	d806      	bhi.n	8020ebc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8020eae:	f7fe fe3b 	bl	801fb28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8020eb2:	68f9      	ldr	r1, [r7, #12]
 8020eb4:	6878      	ldr	r0, [r7, #4]
 8020eb6:	f7ff ff85 	bl	8020dc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8020eba:	e024      	b.n	8020f06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8020ebc:	683b      	ldr	r3, [r7, #0]
 8020ebe:	2b00      	cmp	r3, #0
 8020ec0:	d008      	beq.n	8020ed4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8020ec2:	4b13      	ldr	r3, [pc, #76]	; (8020f10 <prvProcessTimerOrBlockTask+0x90>)
 8020ec4:	681b      	ldr	r3, [r3, #0]
 8020ec6:	681b      	ldr	r3, [r3, #0]
 8020ec8:	2b00      	cmp	r3, #0
 8020eca:	d101      	bne.n	8020ed0 <prvProcessTimerOrBlockTask+0x50>
 8020ecc:	2301      	movs	r3, #1
 8020ece:	e000      	b.n	8020ed2 <prvProcessTimerOrBlockTask+0x52>
 8020ed0:	2300      	movs	r3, #0
 8020ed2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8020ed4:	4b0f      	ldr	r3, [pc, #60]	; (8020f14 <prvProcessTimerOrBlockTask+0x94>)
 8020ed6:	6818      	ldr	r0, [r3, #0]
 8020ed8:	687a      	ldr	r2, [r7, #4]
 8020eda:	68fb      	ldr	r3, [r7, #12]
 8020edc:	1ad3      	subs	r3, r2, r3
 8020ede:	683a      	ldr	r2, [r7, #0]
 8020ee0:	4619      	mov	r1, r3
 8020ee2:	f7fe fb13 	bl	801f50c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8020ee6:	f7fe fe1f 	bl	801fb28 <xTaskResumeAll>
 8020eea:	4603      	mov	r3, r0
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	d10a      	bne.n	8020f06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8020ef0:	4b09      	ldr	r3, [pc, #36]	; (8020f18 <prvProcessTimerOrBlockTask+0x98>)
 8020ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020ef6:	601a      	str	r2, [r3, #0]
 8020ef8:	f3bf 8f4f 	dsb	sy
 8020efc:	f3bf 8f6f 	isb	sy
}
 8020f00:	e001      	b.n	8020f06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8020f02:	f7fe fe11 	bl	801fb28 <xTaskResumeAll>
}
 8020f06:	bf00      	nop
 8020f08:	3710      	adds	r7, #16
 8020f0a:	46bd      	mov	sp, r7
 8020f0c:	bd80      	pop	{r7, pc}
 8020f0e:	bf00      	nop
 8020f10:	2000d3e0 	.word	0x2000d3e0
 8020f14:	2000d3e4 	.word	0x2000d3e4
 8020f18:	e000ed04 	.word	0xe000ed04

08020f1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8020f1c:	b480      	push	{r7}
 8020f1e:	b085      	sub	sp, #20
 8020f20:	af00      	add	r7, sp, #0
 8020f22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8020f24:	4b0e      	ldr	r3, [pc, #56]	; (8020f60 <prvGetNextExpireTime+0x44>)
 8020f26:	681b      	ldr	r3, [r3, #0]
 8020f28:	681b      	ldr	r3, [r3, #0]
 8020f2a:	2b00      	cmp	r3, #0
 8020f2c:	d101      	bne.n	8020f32 <prvGetNextExpireTime+0x16>
 8020f2e:	2201      	movs	r2, #1
 8020f30:	e000      	b.n	8020f34 <prvGetNextExpireTime+0x18>
 8020f32:	2200      	movs	r2, #0
 8020f34:	687b      	ldr	r3, [r7, #4]
 8020f36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8020f38:	687b      	ldr	r3, [r7, #4]
 8020f3a:	681b      	ldr	r3, [r3, #0]
 8020f3c:	2b00      	cmp	r3, #0
 8020f3e:	d105      	bne.n	8020f4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8020f40:	4b07      	ldr	r3, [pc, #28]	; (8020f60 <prvGetNextExpireTime+0x44>)
 8020f42:	681b      	ldr	r3, [r3, #0]
 8020f44:	68db      	ldr	r3, [r3, #12]
 8020f46:	681b      	ldr	r3, [r3, #0]
 8020f48:	60fb      	str	r3, [r7, #12]
 8020f4a:	e001      	b.n	8020f50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8020f4c:	2300      	movs	r3, #0
 8020f4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8020f50:	68fb      	ldr	r3, [r7, #12]
}
 8020f52:	4618      	mov	r0, r3
 8020f54:	3714      	adds	r7, #20
 8020f56:	46bd      	mov	sp, r7
 8020f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f5c:	4770      	bx	lr
 8020f5e:	bf00      	nop
 8020f60:	2000d3dc 	.word	0x2000d3dc

08020f64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8020f64:	b580      	push	{r7, lr}
 8020f66:	b084      	sub	sp, #16
 8020f68:	af00      	add	r7, sp, #0
 8020f6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8020f6c:	f7fe fe78 	bl	801fc60 <xTaskGetTickCount>
 8020f70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8020f72:	4b0b      	ldr	r3, [pc, #44]	; (8020fa0 <prvSampleTimeNow+0x3c>)
 8020f74:	681b      	ldr	r3, [r3, #0]
 8020f76:	68fa      	ldr	r2, [r7, #12]
 8020f78:	429a      	cmp	r2, r3
 8020f7a:	d205      	bcs.n	8020f88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8020f7c:	f000 f932 	bl	80211e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8020f80:	687b      	ldr	r3, [r7, #4]
 8020f82:	2201      	movs	r2, #1
 8020f84:	601a      	str	r2, [r3, #0]
 8020f86:	e002      	b.n	8020f8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8020f88:	687b      	ldr	r3, [r7, #4]
 8020f8a:	2200      	movs	r2, #0
 8020f8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8020f8e:	4a04      	ldr	r2, [pc, #16]	; (8020fa0 <prvSampleTimeNow+0x3c>)
 8020f90:	68fb      	ldr	r3, [r7, #12]
 8020f92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8020f94:	68fb      	ldr	r3, [r7, #12]
}
 8020f96:	4618      	mov	r0, r3
 8020f98:	3710      	adds	r7, #16
 8020f9a:	46bd      	mov	sp, r7
 8020f9c:	bd80      	pop	{r7, pc}
 8020f9e:	bf00      	nop
 8020fa0:	2000d3ec 	.word	0x2000d3ec

08020fa4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8020fa4:	b580      	push	{r7, lr}
 8020fa6:	b086      	sub	sp, #24
 8020fa8:	af00      	add	r7, sp, #0
 8020faa:	60f8      	str	r0, [r7, #12]
 8020fac:	60b9      	str	r1, [r7, #8]
 8020fae:	607a      	str	r2, [r7, #4]
 8020fb0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8020fb2:	2300      	movs	r3, #0
 8020fb4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8020fb6:	68fb      	ldr	r3, [r7, #12]
 8020fb8:	68ba      	ldr	r2, [r7, #8]
 8020fba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8020fbc:	68fb      	ldr	r3, [r7, #12]
 8020fbe:	68fa      	ldr	r2, [r7, #12]
 8020fc0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8020fc2:	68ba      	ldr	r2, [r7, #8]
 8020fc4:	687b      	ldr	r3, [r7, #4]
 8020fc6:	429a      	cmp	r2, r3
 8020fc8:	d812      	bhi.n	8020ff0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020fca:	687a      	ldr	r2, [r7, #4]
 8020fcc:	683b      	ldr	r3, [r7, #0]
 8020fce:	1ad2      	subs	r2, r2, r3
 8020fd0:	68fb      	ldr	r3, [r7, #12]
 8020fd2:	699b      	ldr	r3, [r3, #24]
 8020fd4:	429a      	cmp	r2, r3
 8020fd6:	d302      	bcc.n	8020fde <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8020fd8:	2301      	movs	r3, #1
 8020fda:	617b      	str	r3, [r7, #20]
 8020fdc:	e01b      	b.n	8021016 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8020fde:	4b10      	ldr	r3, [pc, #64]	; (8021020 <prvInsertTimerInActiveList+0x7c>)
 8020fe0:	681a      	ldr	r2, [r3, #0]
 8020fe2:	68fb      	ldr	r3, [r7, #12]
 8020fe4:	3304      	adds	r3, #4
 8020fe6:	4619      	mov	r1, r3
 8020fe8:	4610      	mov	r0, r2
 8020fea:	f7fd fae8 	bl	801e5be <vListInsert>
 8020fee:	e012      	b.n	8021016 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8020ff0:	687a      	ldr	r2, [r7, #4]
 8020ff2:	683b      	ldr	r3, [r7, #0]
 8020ff4:	429a      	cmp	r2, r3
 8020ff6:	d206      	bcs.n	8021006 <prvInsertTimerInActiveList+0x62>
 8020ff8:	68ba      	ldr	r2, [r7, #8]
 8020ffa:	683b      	ldr	r3, [r7, #0]
 8020ffc:	429a      	cmp	r2, r3
 8020ffe:	d302      	bcc.n	8021006 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8021000:	2301      	movs	r3, #1
 8021002:	617b      	str	r3, [r7, #20]
 8021004:	e007      	b.n	8021016 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8021006:	4b07      	ldr	r3, [pc, #28]	; (8021024 <prvInsertTimerInActiveList+0x80>)
 8021008:	681a      	ldr	r2, [r3, #0]
 802100a:	68fb      	ldr	r3, [r7, #12]
 802100c:	3304      	adds	r3, #4
 802100e:	4619      	mov	r1, r3
 8021010:	4610      	mov	r0, r2
 8021012:	f7fd fad4 	bl	801e5be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8021016:	697b      	ldr	r3, [r7, #20]
}
 8021018:	4618      	mov	r0, r3
 802101a:	3718      	adds	r7, #24
 802101c:	46bd      	mov	sp, r7
 802101e:	bd80      	pop	{r7, pc}
 8021020:	2000d3e0 	.word	0x2000d3e0
 8021024:	2000d3dc 	.word	0x2000d3dc

08021028 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8021028:	b580      	push	{r7, lr}
 802102a:	b08c      	sub	sp, #48	; 0x30
 802102c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802102e:	e0bd      	b.n	80211ac <prvProcessReceivedCommands+0x184>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8021030:	68bb      	ldr	r3, [r7, #8]
 8021032:	2b00      	cmp	r3, #0
 8021034:	da14      	bge.n	8021060 <prvProcessReceivedCommands+0x38>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8021036:	f107 0308 	add.w	r3, r7, #8
 802103a:	3304      	adds	r3, #4
 802103c:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 802103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021040:	2b00      	cmp	r3, #0
 8021042:	d105      	bne.n	8021050 <prvProcessReceivedCommands+0x28>
 8021044:	f240 22f1 	movw	r2, #753	; 0x2f1
 8021048:	4961      	ldr	r1, [pc, #388]	; (80211d0 <prvProcessReceivedCommands+0x1a8>)
 802104a:	4862      	ldr	r0, [pc, #392]	; (80211d4 <prvProcessReceivedCommands+0x1ac>)
 802104c:	f7ef fde6 	bl	8010c1c <assertFail>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8021050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021052:	681b      	ldr	r3, [r3, #0]
 8021054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021056:	6850      	ldr	r0, [r2, #4]
 8021058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802105a:	6892      	ldr	r2, [r2, #8]
 802105c:	4611      	mov	r1, r2
 802105e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8021060:	68bb      	ldr	r3, [r7, #8]
 8021062:	2b00      	cmp	r3, #0
 8021064:	f2c0 80a2 	blt.w	80211ac <prvProcessReceivedCommands+0x184>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8021068:	693b      	ldr	r3, [r7, #16]
 802106a:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 802106c:	6a3b      	ldr	r3, [r7, #32]
 802106e:	695b      	ldr	r3, [r3, #20]
 8021070:	2b00      	cmp	r3, #0
 8021072:	d004      	beq.n	802107e <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8021074:	6a3b      	ldr	r3, [r7, #32]
 8021076:	3304      	adds	r3, #4
 8021078:	4618      	mov	r0, r3
 802107a:	f7fd fad9 	bl	801e630 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802107e:	1d3b      	adds	r3, r7, #4
 8021080:	4618      	mov	r0, r3
 8021082:	f7ff ff6f 	bl	8020f64 <prvSampleTimeNow>
 8021086:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8021088:	68bb      	ldr	r3, [r7, #8]
 802108a:	2b09      	cmp	r3, #9
 802108c:	f200 808d 	bhi.w	80211aa <prvProcessReceivedCommands+0x182>
 8021090:	a201      	add	r2, pc, #4	; (adr r2, 8021098 <prvProcessReceivedCommands+0x70>)
 8021092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021096:	bf00      	nop
 8021098:	080210c1 	.word	0x080210c1
 802109c:	080210c1 	.word	0x080210c1
 80210a0:	080210c1 	.word	0x080210c1
 80210a4:	0802112d 	.word	0x0802112d
 80210a8:	08021141 	.word	0x08021141
 80210ac:	08021181 	.word	0x08021181
 80210b0:	080210c1 	.word	0x080210c1
 80210b4:	080210c1 	.word	0x080210c1
 80210b8:	0802112d 	.word	0x0802112d
 80210bc:	08021141 	.word	0x08021141
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80210c0:	6a3b      	ldr	r3, [r7, #32]
 80210c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80210c6:	f043 0301 	orr.w	r3, r3, #1
 80210ca:	b2da      	uxtb	r2, r3
 80210cc:	6a3b      	ldr	r3, [r7, #32]
 80210ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80210d2:	68fa      	ldr	r2, [r7, #12]
 80210d4:	6a3b      	ldr	r3, [r7, #32]
 80210d6:	699b      	ldr	r3, [r3, #24]
 80210d8:	18d1      	adds	r1, r2, r3
 80210da:	68fb      	ldr	r3, [r7, #12]
 80210dc:	69fa      	ldr	r2, [r7, #28]
 80210de:	6a38      	ldr	r0, [r7, #32]
 80210e0:	f7ff ff60 	bl	8020fa4 <prvInsertTimerInActiveList>
 80210e4:	4603      	mov	r3, r0
 80210e6:	2b00      	cmp	r3, #0
 80210e8:	d060      	beq.n	80211ac <prvProcessReceivedCommands+0x184>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80210ea:	6a3b      	ldr	r3, [r7, #32]
 80210ec:	6a1b      	ldr	r3, [r3, #32]
 80210ee:	6a38      	ldr	r0, [r7, #32]
 80210f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80210f2:	6a3b      	ldr	r3, [r7, #32]
 80210f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80210f8:	f003 0304 	and.w	r3, r3, #4
 80210fc:	2b00      	cmp	r3, #0
 80210fe:	d055      	beq.n	80211ac <prvProcessReceivedCommands+0x184>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8021100:	68fa      	ldr	r2, [r7, #12]
 8021102:	6a3b      	ldr	r3, [r7, #32]
 8021104:	699b      	ldr	r3, [r3, #24]
 8021106:	441a      	add	r2, r3
 8021108:	2300      	movs	r3, #0
 802110a:	9300      	str	r3, [sp, #0]
 802110c:	2300      	movs	r3, #0
 802110e:	2100      	movs	r1, #0
 8021110:	6a38      	ldr	r0, [r7, #32]
 8021112:	f7ff fe0b 	bl	8020d2c <xTimerGenericCommand>
 8021116:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8021118:	69bb      	ldr	r3, [r7, #24]
 802111a:	2b00      	cmp	r3, #0
 802111c:	d146      	bne.n	80211ac <prvProcessReceivedCommands+0x184>
 802111e:	f44f 724b 	mov.w	r2, #812	; 0x32c
 8021122:	492b      	ldr	r1, [pc, #172]	; (80211d0 <prvProcessReceivedCommands+0x1a8>)
 8021124:	482c      	ldr	r0, [pc, #176]	; (80211d8 <prvProcessReceivedCommands+0x1b0>)
 8021126:	f7ef fd79 	bl	8010c1c <assertFail>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 802112a:	e03f      	b.n	80211ac <prvProcessReceivedCommands+0x184>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802112c:	6a3b      	ldr	r3, [r7, #32]
 802112e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021132:	f023 0301 	bic.w	r3, r3, #1
 8021136:	b2da      	uxtb	r2, r3
 8021138:	6a3b      	ldr	r3, [r7, #32]
 802113a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 802113e:	e035      	b.n	80211ac <prvProcessReceivedCommands+0x184>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8021140:	6a3b      	ldr	r3, [r7, #32]
 8021142:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021146:	f043 0301 	orr.w	r3, r3, #1
 802114a:	b2da      	uxtb	r2, r3
 802114c:	6a3b      	ldr	r3, [r7, #32]
 802114e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8021152:	68fa      	ldr	r2, [r7, #12]
 8021154:	6a3b      	ldr	r3, [r7, #32]
 8021156:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8021158:	6a3b      	ldr	r3, [r7, #32]
 802115a:	699b      	ldr	r3, [r3, #24]
 802115c:	2b00      	cmp	r3, #0
 802115e:	d105      	bne.n	802116c <prvProcessReceivedCommands+0x144>
 8021160:	f44f 7251 	mov.w	r2, #836	; 0x344
 8021164:	491a      	ldr	r1, [pc, #104]	; (80211d0 <prvProcessReceivedCommands+0x1a8>)
 8021166:	481d      	ldr	r0, [pc, #116]	; (80211dc <prvProcessReceivedCommands+0x1b4>)
 8021168:	f7ef fd58 	bl	8010c1c <assertFail>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 802116c:	6a3b      	ldr	r3, [r7, #32]
 802116e:	699a      	ldr	r2, [r3, #24]
 8021170:	69fb      	ldr	r3, [r7, #28]
 8021172:	18d1      	adds	r1, r2, r3
 8021174:	69fb      	ldr	r3, [r7, #28]
 8021176:	69fa      	ldr	r2, [r7, #28]
 8021178:	6a38      	ldr	r0, [r7, #32]
 802117a:	f7ff ff13 	bl	8020fa4 <prvInsertTimerInActiveList>
					break;
 802117e:	e015      	b.n	80211ac <prvProcessReceivedCommands+0x184>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8021180:	6a3b      	ldr	r3, [r7, #32]
 8021182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021186:	f003 0302 	and.w	r3, r3, #2
 802118a:	2b00      	cmp	r3, #0
 802118c:	d103      	bne.n	8021196 <prvProcessReceivedCommands+0x16e>
						{
							vPortFree( pxTimer );
 802118e:	6a38      	ldr	r0, [r7, #32]
 8021190:	f000 fbf0 	bl	8021974 <vPortFree>
 8021194:	e00a      	b.n	80211ac <prvProcessReceivedCommands+0x184>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8021196:	6a3b      	ldr	r3, [r7, #32]
 8021198:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802119c:	f023 0301 	bic.w	r3, r3, #1
 80211a0:	b2da      	uxtb	r2, r3
 80211a2:	6a3b      	ldr	r3, [r7, #32]
 80211a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80211a8:	e000      	b.n	80211ac <prvProcessReceivedCommands+0x184>

				default	:
					/* Don't expect to get here. */
					break;
 80211aa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80211ac:	4b0c      	ldr	r3, [pc, #48]	; (80211e0 <prvProcessReceivedCommands+0x1b8>)
 80211ae:	681b      	ldr	r3, [r3, #0]
 80211b0:	f107 0108 	add.w	r1, r7, #8
 80211b4:	2200      	movs	r2, #0
 80211b6:	4618      	mov	r0, r3
 80211b8:	f7fd fd84 	bl	801ecc4 <xQueueReceive>
 80211bc:	4603      	mov	r3, r0
 80211be:	2b00      	cmp	r3, #0
 80211c0:	f47f af36 	bne.w	8021030 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80211c4:	bf00      	nop
 80211c6:	bf00      	nop
 80211c8:	3728      	adds	r7, #40	; 0x28
 80211ca:	46bd      	mov	sp, r7
 80211cc:	bd80      	pop	{r7, pc}
 80211ce:	bf00      	nop
 80211d0:	0802d308 	.word	0x0802d308
 80211d4:	0802d3bc 	.word	0x0802d3bc
 80211d8:	0802d3b4 	.word	0x0802d3b4
 80211dc:	0802d3c8 	.word	0x0802d3c8
 80211e0:	2000d3e4 	.word	0x2000d3e4

080211e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80211e4:	b580      	push	{r7, lr}
 80211e6:	b088      	sub	sp, #32
 80211e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80211ea:	e043      	b.n	8021274 <prvSwitchTimerLists+0x90>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80211ec:	4b2b      	ldr	r3, [pc, #172]	; (802129c <prvSwitchTimerLists+0xb8>)
 80211ee:	681b      	ldr	r3, [r3, #0]
 80211f0:	68db      	ldr	r3, [r3, #12]
 80211f2:	681b      	ldr	r3, [r3, #0]
 80211f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80211f6:	4b29      	ldr	r3, [pc, #164]	; (802129c <prvSwitchTimerLists+0xb8>)
 80211f8:	681b      	ldr	r3, [r3, #0]
 80211fa:	68db      	ldr	r3, [r3, #12]
 80211fc:	68db      	ldr	r3, [r3, #12]
 80211fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8021200:	68fb      	ldr	r3, [r7, #12]
 8021202:	3304      	adds	r3, #4
 8021204:	4618      	mov	r0, r3
 8021206:	f7fd fa13 	bl	801e630 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802120a:	68fb      	ldr	r3, [r7, #12]
 802120c:	6a1b      	ldr	r3, [r3, #32]
 802120e:	68f8      	ldr	r0, [r7, #12]
 8021210:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8021212:	68fb      	ldr	r3, [r7, #12]
 8021214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021218:	f003 0304 	and.w	r3, r3, #4
 802121c:	2b00      	cmp	r3, #0
 802121e:	d029      	beq.n	8021274 <prvSwitchTimerLists+0x90>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8021220:	68fb      	ldr	r3, [r7, #12]
 8021222:	699b      	ldr	r3, [r3, #24]
 8021224:	693a      	ldr	r2, [r7, #16]
 8021226:	4413      	add	r3, r2
 8021228:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 802122a:	68ba      	ldr	r2, [r7, #8]
 802122c:	693b      	ldr	r3, [r7, #16]
 802122e:	429a      	cmp	r2, r3
 8021230:	d90e      	bls.n	8021250 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8021232:	68fb      	ldr	r3, [r7, #12]
 8021234:	68ba      	ldr	r2, [r7, #8]
 8021236:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8021238:	68fb      	ldr	r3, [r7, #12]
 802123a:	68fa      	ldr	r2, [r7, #12]
 802123c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802123e:	4b17      	ldr	r3, [pc, #92]	; (802129c <prvSwitchTimerLists+0xb8>)
 8021240:	681a      	ldr	r2, [r3, #0]
 8021242:	68fb      	ldr	r3, [r7, #12]
 8021244:	3304      	adds	r3, #4
 8021246:	4619      	mov	r1, r3
 8021248:	4610      	mov	r0, r2
 802124a:	f7fd f9b8 	bl	801e5be <vListInsert>
 802124e:	e011      	b.n	8021274 <prvSwitchTimerLists+0x90>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8021250:	2300      	movs	r3, #0
 8021252:	9300      	str	r3, [sp, #0]
 8021254:	2300      	movs	r3, #0
 8021256:	693a      	ldr	r2, [r7, #16]
 8021258:	2100      	movs	r1, #0
 802125a:	68f8      	ldr	r0, [r7, #12]
 802125c:	f7ff fd66 	bl	8020d2c <xTimerGenericCommand>
 8021260:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8021262:	687b      	ldr	r3, [r7, #4]
 8021264:	2b00      	cmp	r3, #0
 8021266:	d105      	bne.n	8021274 <prvSwitchTimerLists+0x90>
 8021268:	f240 329d 	movw	r2, #925	; 0x39d
 802126c:	490c      	ldr	r1, [pc, #48]	; (80212a0 <prvSwitchTimerLists+0xbc>)
 802126e:	480d      	ldr	r0, [pc, #52]	; (80212a4 <prvSwitchTimerLists+0xc0>)
 8021270:	f7ef fcd4 	bl	8010c1c <assertFail>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8021274:	4b09      	ldr	r3, [pc, #36]	; (802129c <prvSwitchTimerLists+0xb8>)
 8021276:	681b      	ldr	r3, [r3, #0]
 8021278:	681b      	ldr	r3, [r3, #0]
 802127a:	2b00      	cmp	r3, #0
 802127c:	d1b6      	bne.n	80211ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 802127e:	4b07      	ldr	r3, [pc, #28]	; (802129c <prvSwitchTimerLists+0xb8>)
 8021280:	681b      	ldr	r3, [r3, #0]
 8021282:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8021284:	4b08      	ldr	r3, [pc, #32]	; (80212a8 <prvSwitchTimerLists+0xc4>)
 8021286:	681b      	ldr	r3, [r3, #0]
 8021288:	4a04      	ldr	r2, [pc, #16]	; (802129c <prvSwitchTimerLists+0xb8>)
 802128a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 802128c:	4a06      	ldr	r2, [pc, #24]	; (80212a8 <prvSwitchTimerLists+0xc4>)
 802128e:	697b      	ldr	r3, [r7, #20]
 8021290:	6013      	str	r3, [r2, #0]
}
 8021292:	bf00      	nop
 8021294:	3718      	adds	r7, #24
 8021296:	46bd      	mov	sp, r7
 8021298:	bd80      	pop	{r7, pc}
 802129a:	bf00      	nop
 802129c:	2000d3dc 	.word	0x2000d3dc
 80212a0:	0802d308 	.word	0x0802d308
 80212a4:	0802d3b4 	.word	0x0802d3b4
 80212a8:	2000d3e0 	.word	0x2000d3e0

080212ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80212ac:	b580      	push	{r7, lr}
 80212ae:	b082      	sub	sp, #8
 80212b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80212b2:	f000 f98d 	bl	80215d0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80212b6:	4b15      	ldr	r3, [pc, #84]	; (802130c <prvCheckForValidListAndQueue+0x60>)
 80212b8:	681b      	ldr	r3, [r3, #0]
 80212ba:	2b00      	cmp	r3, #0
 80212bc:	d120      	bne.n	8021300 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80212be:	4814      	ldr	r0, [pc, #80]	; (8021310 <prvCheckForValidListAndQueue+0x64>)
 80212c0:	f7fd f92c 	bl	801e51c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80212c4:	4813      	ldr	r0, [pc, #76]	; (8021314 <prvCheckForValidListAndQueue+0x68>)
 80212c6:	f7fd f929 	bl	801e51c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80212ca:	4b13      	ldr	r3, [pc, #76]	; (8021318 <prvCheckForValidListAndQueue+0x6c>)
 80212cc:	4a10      	ldr	r2, [pc, #64]	; (8021310 <prvCheckForValidListAndQueue+0x64>)
 80212ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80212d0:	4b12      	ldr	r3, [pc, #72]	; (802131c <prvCheckForValidListAndQueue+0x70>)
 80212d2:	4a10      	ldr	r2, [pc, #64]	; (8021314 <prvCheckForValidListAndQueue+0x68>)
 80212d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80212d6:	2300      	movs	r3, #0
 80212d8:	9300      	str	r3, [sp, #0]
 80212da:	4b11      	ldr	r3, [pc, #68]	; (8021320 <prvCheckForValidListAndQueue+0x74>)
 80212dc:	4a11      	ldr	r2, [pc, #68]	; (8021324 <prvCheckForValidListAndQueue+0x78>)
 80212de:	2110      	movs	r1, #16
 80212e0:	2014      	movs	r0, #20
 80212e2:	f7fd fa37 	bl	801e754 <xQueueGenericCreateStatic>
 80212e6:	4603      	mov	r3, r0
 80212e8:	4a08      	ldr	r2, [pc, #32]	; (802130c <prvCheckForValidListAndQueue+0x60>)
 80212ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80212ec:	4b07      	ldr	r3, [pc, #28]	; (802130c <prvCheckForValidListAndQueue+0x60>)
 80212ee:	681b      	ldr	r3, [r3, #0]
 80212f0:	2b00      	cmp	r3, #0
 80212f2:	d005      	beq.n	8021300 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80212f4:	4b05      	ldr	r3, [pc, #20]	; (802130c <prvCheckForValidListAndQueue+0x60>)
 80212f6:	681b      	ldr	r3, [r3, #0]
 80212f8:	490b      	ldr	r1, [pc, #44]	; (8021328 <prvCheckForValidListAndQueue+0x7c>)
 80212fa:	4618      	mov	r0, r3
 80212fc:	f7fe f8dc 	bl	801f4b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8021300:	f000 f994 	bl	802162c <vPortExitCritical>
}
 8021304:	bf00      	nop
 8021306:	46bd      	mov	sp, r7
 8021308:	bd80      	pop	{r7, pc}
 802130a:	bf00      	nop
 802130c:	2000d3e4 	.word	0x2000d3e4
 8021310:	2000d3b4 	.word	0x2000d3b4
 8021314:	2000d3c8 	.word	0x2000d3c8
 8021318:	2000d3dc 	.word	0x2000d3dc
 802131c:	2000d3e0 	.word	0x2000d3e0
 8021320:	2000d530 	.word	0x2000d530
 8021324:	2000d3f0 	.word	0x2000d3f0
 8021328:	0802d3f0 	.word	0x0802d3f0

0802132c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 802132c:	b580      	push	{r7, lr}
 802132e:	b084      	sub	sp, #16
 8021330:	af00      	add	r7, sp, #0
 8021332:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8021334:	687b      	ldr	r3, [r7, #4]
 8021336:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 8021338:	687b      	ldr	r3, [r7, #4]
 802133a:	2b00      	cmp	r3, #0
 802133c:	d105      	bne.n	802134a <pvTimerGetTimerID+0x1e>
 802133e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8021342:	4908      	ldr	r1, [pc, #32]	; (8021364 <pvTimerGetTimerID+0x38>)
 8021344:	4808      	ldr	r0, [pc, #32]	; (8021368 <pvTimerGetTimerID+0x3c>)
 8021346:	f7ef fc69 	bl	8010c1c <assertFail>

	taskENTER_CRITICAL();
 802134a:	f000 f941 	bl	80215d0 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 802134e:	68fb      	ldr	r3, [r7, #12]
 8021350:	69db      	ldr	r3, [r3, #28]
 8021352:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8021354:	f000 f96a 	bl	802162c <vPortExitCritical>

	return pvReturn;
 8021358:	68bb      	ldr	r3, [r7, #8]
}
 802135a:	4618      	mov	r0, r3
 802135c:	3710      	adds	r7, #16
 802135e:	46bd      	mov	sp, r7
 8021360:	bd80      	pop	{r7, pc}
 8021362:	bf00      	nop
 8021364:	0802d308 	.word	0x0802d308
 8021368:	0802d38c 	.word	0x0802d38c

0802136c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 802136c:	b480      	push	{r7}
 802136e:	b085      	sub	sp, #20
 8021370:	af00      	add	r7, sp, #0
 8021372:	60f8      	str	r0, [r7, #12]
 8021374:	60b9      	str	r1, [r7, #8]
 8021376:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8021378:	68fb      	ldr	r3, [r7, #12]
 802137a:	3b04      	subs	r3, #4
 802137c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 802137e:	68fb      	ldr	r3, [r7, #12]
 8021380:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8021384:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8021386:	68fb      	ldr	r3, [r7, #12]
 8021388:	3b04      	subs	r3, #4
 802138a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 802138c:	68bb      	ldr	r3, [r7, #8]
 802138e:	f023 0201 	bic.w	r2, r3, #1
 8021392:	68fb      	ldr	r3, [r7, #12]
 8021394:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8021396:	68fb      	ldr	r3, [r7, #12]
 8021398:	3b04      	subs	r3, #4
 802139a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 802139c:	4a0c      	ldr	r2, [pc, #48]	; (80213d0 <pxPortInitialiseStack+0x64>)
 802139e:	68fb      	ldr	r3, [r7, #12]
 80213a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80213a2:	68fb      	ldr	r3, [r7, #12]
 80213a4:	3b14      	subs	r3, #20
 80213a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80213a8:	687a      	ldr	r2, [r7, #4]
 80213aa:	68fb      	ldr	r3, [r7, #12]
 80213ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80213ae:	68fb      	ldr	r3, [r7, #12]
 80213b0:	3b04      	subs	r3, #4
 80213b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80213b4:	68fb      	ldr	r3, [r7, #12]
 80213b6:	f06f 0202 	mvn.w	r2, #2
 80213ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80213bc:	68fb      	ldr	r3, [r7, #12]
 80213be:	3b20      	subs	r3, #32
 80213c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80213c2:	68fb      	ldr	r3, [r7, #12]
}
 80213c4:	4618      	mov	r0, r3
 80213c6:	3714      	adds	r7, #20
 80213c8:	46bd      	mov	sp, r7
 80213ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213ce:	4770      	bx	lr
 80213d0:	080213d5 	.word	0x080213d5

080213d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80213d4:	b580      	push	{r7, lr}
 80213d6:	b082      	sub	sp, #8
 80213d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80213da:	2300      	movs	r3, #0
 80213dc:	603b      	str	r3, [r7, #0]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80213de:	4b0e      	ldr	r3, [pc, #56]	; (8021418 <prvTaskExitError+0x44>)
 80213e0:	681b      	ldr	r3, [r3, #0]
 80213e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80213e6:	d004      	beq.n	80213f2 <prvTaskExitError+0x1e>
 80213e8:	22e3      	movs	r2, #227	; 0xe3
 80213ea:	490c      	ldr	r1, [pc, #48]	; (802141c <prvTaskExitError+0x48>)
 80213ec:	480c      	ldr	r0, [pc, #48]	; (8021420 <prvTaskExitError+0x4c>)
 80213ee:	f7ef fc15 	bl	8010c1c <assertFail>
	__asm volatile
 80213f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80213f6:	f383 8811 	msr	BASEPRI, r3
 80213fa:	f3bf 8f6f 	isb	sy
 80213fe:	f3bf 8f4f 	dsb	sy
 8021402:	607b      	str	r3, [r7, #4]
}
 8021404:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8021406:	bf00      	nop
 8021408:	683b      	ldr	r3, [r7, #0]
 802140a:	2b00      	cmp	r3, #0
 802140c:	d0fc      	beq.n	8021408 <prvTaskExitError+0x34>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 802140e:	bf00      	nop
 8021410:	bf00      	nop
 8021412:	3708      	adds	r7, #8
 8021414:	46bd      	mov	sp, r7
 8021416:	bd80      	pop	{r7, pc}
 8021418:	20000f78 	.word	0x20000f78
 802141c:	0802d404 	.word	0x0802d404
 8021420:	0802d44c 	.word	0x0802d44c
	...

08021430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8021430:	4b07      	ldr	r3, [pc, #28]	; (8021450 <pxCurrentTCBConst2>)
 8021432:	6819      	ldr	r1, [r3, #0]
 8021434:	6808      	ldr	r0, [r1, #0]
 8021436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802143a:	f380 8809 	msr	PSP, r0
 802143e:	f3bf 8f6f 	isb	sy
 8021442:	f04f 0000 	mov.w	r0, #0
 8021446:	f380 8811 	msr	BASEPRI, r0
 802144a:	4770      	bx	lr
 802144c:	f3af 8000 	nop.w

08021450 <pxCurrentTCBConst2>:
 8021450:	2000d178 	.word	0x2000d178
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8021454:	bf00      	nop
 8021456:	bf00      	nop

08021458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8021458:	4808      	ldr	r0, [pc, #32]	; (802147c <prvPortStartFirstTask+0x24>)
 802145a:	6800      	ldr	r0, [r0, #0]
 802145c:	6800      	ldr	r0, [r0, #0]
 802145e:	f380 8808 	msr	MSP, r0
 8021462:	f04f 0000 	mov.w	r0, #0
 8021466:	f380 8814 	msr	CONTROL, r0
 802146a:	b662      	cpsie	i
 802146c:	b661      	cpsie	f
 802146e:	f3bf 8f4f 	dsb	sy
 8021472:	f3bf 8f6f 	isb	sy
 8021476:	df00      	svc	0
 8021478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802147a:	bf00      	nop
 802147c:	e000ed08 	.word	0xe000ed08

08021480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8021480:	b580      	push	{r7, lr}
 8021482:	b084      	sub	sp, #16
 8021484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8021486:	4b44      	ldr	r3, [pc, #272]	; (8021598 <xPortStartScheduler+0x118>)
 8021488:	681b      	ldr	r3, [r3, #0]
 802148a:	4a44      	ldr	r2, [pc, #272]	; (802159c <xPortStartScheduler+0x11c>)
 802148c:	4293      	cmp	r3, r2
 802148e:	d105      	bne.n	802149c <xPortStartScheduler+0x1c>
 8021490:	f44f 7294 	mov.w	r2, #296	; 0x128
 8021494:	4942      	ldr	r1, [pc, #264]	; (80215a0 <xPortStartScheduler+0x120>)
 8021496:	4843      	ldr	r0, [pc, #268]	; (80215a4 <xPortStartScheduler+0x124>)
 8021498:	f7ef fbc0 	bl	8010c1c <assertFail>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 802149c:	4b3e      	ldr	r3, [pc, #248]	; (8021598 <xPortStartScheduler+0x118>)
 802149e:	681b      	ldr	r3, [r3, #0]
 80214a0:	4a41      	ldr	r2, [pc, #260]	; (80215a8 <xPortStartScheduler+0x128>)
 80214a2:	4293      	cmp	r3, r2
 80214a4:	d105      	bne.n	80214b2 <xPortStartScheduler+0x32>
 80214a6:	f240 1229 	movw	r2, #297	; 0x129
 80214aa:	493d      	ldr	r1, [pc, #244]	; (80215a0 <xPortStartScheduler+0x120>)
 80214ac:	483f      	ldr	r0, [pc, #252]	; (80215ac <xPortStartScheduler+0x12c>)
 80214ae:	f7ef fbb5 	bl	8010c1c <assertFail>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80214b2:	4b3f      	ldr	r3, [pc, #252]	; (80215b0 <xPortStartScheduler+0x130>)
 80214b4:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80214b6:	68fb      	ldr	r3, [r7, #12]
 80214b8:	781b      	ldrb	r3, [r3, #0]
 80214ba:	b2db      	uxtb	r3, r3
 80214bc:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80214be:	68fb      	ldr	r3, [r7, #12]
 80214c0:	22ff      	movs	r2, #255	; 0xff
 80214c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80214c4:	68fb      	ldr	r3, [r7, #12]
 80214c6:	781b      	ldrb	r3, [r3, #0]
 80214c8:	b2db      	uxtb	r3, r3
 80214ca:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80214cc:	79fb      	ldrb	r3, [r7, #7]
 80214ce:	b2db      	uxtb	r3, r3
 80214d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80214d4:	b2da      	uxtb	r2, r3
 80214d6:	4b37      	ldr	r3, [pc, #220]	; (80215b4 <xPortStartScheduler+0x134>)
 80214d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80214da:	4b37      	ldr	r3, [pc, #220]	; (80215b8 <xPortStartScheduler+0x138>)
 80214dc:	2207      	movs	r2, #7
 80214de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80214e0:	e009      	b.n	80214f6 <xPortStartScheduler+0x76>
		{
			ulMaxPRIGROUPValue--;
 80214e2:	4b35      	ldr	r3, [pc, #212]	; (80215b8 <xPortStartScheduler+0x138>)
 80214e4:	681b      	ldr	r3, [r3, #0]
 80214e6:	3b01      	subs	r3, #1
 80214e8:	4a33      	ldr	r2, [pc, #204]	; (80215b8 <xPortStartScheduler+0x138>)
 80214ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80214ec:	79fb      	ldrb	r3, [r7, #7]
 80214ee:	b2db      	uxtb	r3, r3
 80214f0:	005b      	lsls	r3, r3, #1
 80214f2:	b2db      	uxtb	r3, r3
 80214f4:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80214f6:	79fb      	ldrb	r3, [r7, #7]
 80214f8:	b2db      	uxtb	r3, r3
 80214fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80214fe:	2b80      	cmp	r3, #128	; 0x80
 8021500:	d0ef      	beq.n	80214e2 <xPortStartScheduler+0x62>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8021502:	4b2d      	ldr	r3, [pc, #180]	; (80215b8 <xPortStartScheduler+0x138>)
 8021504:	681b      	ldr	r3, [r3, #0]
 8021506:	f1c3 0307 	rsb	r3, r3, #7
 802150a:	2b04      	cmp	r3, #4
 802150c:	d005      	beq.n	802151a <xPortStartScheduler+0x9a>
 802150e:	f240 1251 	movw	r2, #337	; 0x151
 8021512:	4923      	ldr	r1, [pc, #140]	; (80215a0 <xPortStartScheduler+0x120>)
 8021514:	4829      	ldr	r0, [pc, #164]	; (80215bc <xPortStartScheduler+0x13c>)
 8021516:	f7ef fb81 	bl	8010c1c <assertFail>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 802151a:	4b27      	ldr	r3, [pc, #156]	; (80215b8 <xPortStartScheduler+0x138>)
 802151c:	681b      	ldr	r3, [r3, #0]
 802151e:	f1c3 0307 	rsb	r3, r3, #7
 8021522:	2b04      	cmp	r3, #4
 8021524:	d005      	beq.n	8021532 <xPortStartScheduler+0xb2>
 8021526:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 802152a:	491d      	ldr	r1, [pc, #116]	; (80215a0 <xPortStartScheduler+0x120>)
 802152c:	4824      	ldr	r0, [pc, #144]	; (80215c0 <xPortStartScheduler+0x140>)
 802152e:	f7ef fb75 	bl	8010c1c <assertFail>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8021532:	4b21      	ldr	r3, [pc, #132]	; (80215b8 <xPortStartScheduler+0x138>)
 8021534:	681b      	ldr	r3, [r3, #0]
 8021536:	021b      	lsls	r3, r3, #8
 8021538:	4a1f      	ldr	r2, [pc, #124]	; (80215b8 <xPortStartScheduler+0x138>)
 802153a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 802153c:	4b1e      	ldr	r3, [pc, #120]	; (80215b8 <xPortStartScheduler+0x138>)
 802153e:	681b      	ldr	r3, [r3, #0]
 8021540:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8021544:	4a1c      	ldr	r2, [pc, #112]	; (80215b8 <xPortStartScheduler+0x138>)
 8021546:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8021548:	68bb      	ldr	r3, [r7, #8]
 802154a:	b2da      	uxtb	r2, r3
 802154c:	68fb      	ldr	r3, [r7, #12]
 802154e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8021550:	4b1c      	ldr	r3, [pc, #112]	; (80215c4 <xPortStartScheduler+0x144>)
 8021552:	681b      	ldr	r3, [r3, #0]
 8021554:	4a1b      	ldr	r2, [pc, #108]	; (80215c4 <xPortStartScheduler+0x144>)
 8021556:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802155a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 802155c:	4b19      	ldr	r3, [pc, #100]	; (80215c4 <xPortStartScheduler+0x144>)
 802155e:	681b      	ldr	r3, [r3, #0]
 8021560:	4a18      	ldr	r2, [pc, #96]	; (80215c4 <xPortStartScheduler+0x144>)
 8021562:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8021566:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8021568:	f000 f8e0 	bl	802172c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 802156c:	4b16      	ldr	r3, [pc, #88]	; (80215c8 <xPortStartScheduler+0x148>)
 802156e:	2200      	movs	r2, #0
 8021570:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8021572:	f000 f8f9 	bl	8021768 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8021576:	4b15      	ldr	r3, [pc, #84]	; (80215cc <xPortStartScheduler+0x14c>)
 8021578:	681b      	ldr	r3, [r3, #0]
 802157a:	4a14      	ldr	r2, [pc, #80]	; (80215cc <xPortStartScheduler+0x14c>)
 802157c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8021580:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8021582:	f7ff ff69 	bl	8021458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8021586:	f7fe fce5 	bl	801ff54 <vTaskSwitchContext>
	prvTaskExitError();
 802158a:	f7ff ff23 	bl	80213d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 802158e:	2300      	movs	r3, #0
}
 8021590:	4618      	mov	r0, r3
 8021592:	3710      	adds	r7, #16
 8021594:	46bd      	mov	sp, r7
 8021596:	bd80      	pop	{r7, pc}
 8021598:	e000ed00 	.word	0xe000ed00
 802159c:	410fc271 	.word	0x410fc271
 80215a0:	0802d404 	.word	0x0802d404
 80215a4:	0802d468 	.word	0x0802d468
 80215a8:	410fc270 	.word	0x410fc270
 80215ac:	0802d48c 	.word	0x0802d48c
 80215b0:	e000e400 	.word	0xe000e400
 80215b4:	2000d580 	.word	0x2000d580
 80215b8:	2000d584 	.word	0x2000d584
 80215bc:	0802d4b0 	.word	0x0802d4b0
 80215c0:	0802d4f4 	.word	0x0802d4f4
 80215c4:	e000ed20 	.word	0xe000ed20
 80215c8:	20000f78 	.word	0x20000f78
 80215cc:	e000ef34 	.word	0xe000ef34

080215d0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80215d0:	b580      	push	{r7, lr}
 80215d2:	b082      	sub	sp, #8
 80215d4:	af00      	add	r7, sp, #0
	__asm volatile
 80215d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80215da:	f383 8811 	msr	BASEPRI, r3
 80215de:	f3bf 8f6f 	isb	sy
 80215e2:	f3bf 8f4f 	dsb	sy
 80215e6:	607b      	str	r3, [r7, #4]
}
 80215e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80215ea:	4b0c      	ldr	r3, [pc, #48]	; (802161c <vPortEnterCritical+0x4c>)
 80215ec:	681b      	ldr	r3, [r3, #0]
 80215ee:	3301      	adds	r3, #1
 80215f0:	4a0a      	ldr	r2, [pc, #40]	; (802161c <vPortEnterCritical+0x4c>)
 80215f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80215f4:	4b09      	ldr	r3, [pc, #36]	; (802161c <vPortEnterCritical+0x4c>)
 80215f6:	681b      	ldr	r3, [r3, #0]
 80215f8:	2b01      	cmp	r3, #1
 80215fa:	d10a      	bne.n	8021612 <vPortEnterCritical+0x42>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80215fc:	4b08      	ldr	r3, [pc, #32]	; (8021620 <vPortEnterCritical+0x50>)
 80215fe:	681b      	ldr	r3, [r3, #0]
 8021600:	b2db      	uxtb	r3, r3
 8021602:	2b00      	cmp	r3, #0
 8021604:	d005      	beq.n	8021612 <vPortEnterCritical+0x42>
 8021606:	f240 129f 	movw	r2, #415	; 0x19f
 802160a:	4906      	ldr	r1, [pc, #24]	; (8021624 <vPortEnterCritical+0x54>)
 802160c:	4806      	ldr	r0, [pc, #24]	; (8021628 <vPortEnterCritical+0x58>)
 802160e:	f7ef fb05 	bl	8010c1c <assertFail>
	}
}
 8021612:	bf00      	nop
 8021614:	3708      	adds	r7, #8
 8021616:	46bd      	mov	sp, r7
 8021618:	bd80      	pop	{r7, pc}
 802161a:	bf00      	nop
 802161c:	20000f78 	.word	0x20000f78
 8021620:	e000ed04 	.word	0xe000ed04
 8021624:	0802d404 	.word	0x0802d404
 8021628:	0802d554 	.word	0x0802d554

0802162c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 802162c:	b580      	push	{r7, lr}
 802162e:	b082      	sub	sp, #8
 8021630:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8021632:	4b0e      	ldr	r3, [pc, #56]	; (802166c <vPortExitCritical+0x40>)
 8021634:	681b      	ldr	r3, [r3, #0]
 8021636:	2b00      	cmp	r3, #0
 8021638:	d105      	bne.n	8021646 <vPortExitCritical+0x1a>
 802163a:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 802163e:	490c      	ldr	r1, [pc, #48]	; (8021670 <vPortExitCritical+0x44>)
 8021640:	480c      	ldr	r0, [pc, #48]	; (8021674 <vPortExitCritical+0x48>)
 8021642:	f7ef faeb 	bl	8010c1c <assertFail>
	uxCriticalNesting--;
 8021646:	4b09      	ldr	r3, [pc, #36]	; (802166c <vPortExitCritical+0x40>)
 8021648:	681b      	ldr	r3, [r3, #0]
 802164a:	3b01      	subs	r3, #1
 802164c:	4a07      	ldr	r2, [pc, #28]	; (802166c <vPortExitCritical+0x40>)
 802164e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8021650:	4b06      	ldr	r3, [pc, #24]	; (802166c <vPortExitCritical+0x40>)
 8021652:	681b      	ldr	r3, [r3, #0]
 8021654:	2b00      	cmp	r3, #0
 8021656:	d105      	bne.n	8021664 <vPortExitCritical+0x38>
 8021658:	2300      	movs	r3, #0
 802165a:	607b      	str	r3, [r7, #4]
	__asm volatile
 802165c:	687b      	ldr	r3, [r7, #4]
 802165e:	f383 8811 	msr	BASEPRI, r3
}
 8021662:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8021664:	bf00      	nop
 8021666:	3708      	adds	r7, #8
 8021668:	46bd      	mov	sp, r7
 802166a:	bd80      	pop	{r7, pc}
 802166c:	20000f78 	.word	0x20000f78
 8021670:	0802d404 	.word	0x0802d404
 8021674:	0802d58c 	.word	0x0802d58c
	...

08021680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8021680:	f3ef 8009 	mrs	r0, PSP
 8021684:	f3bf 8f6f 	isb	sy
 8021688:	4b15      	ldr	r3, [pc, #84]	; (80216e0 <pxCurrentTCBConst>)
 802168a:	681a      	ldr	r2, [r3, #0]
 802168c:	f01e 0f10 	tst.w	lr, #16
 8021690:	bf08      	it	eq
 8021692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8021696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802169a:	6010      	str	r0, [r2, #0]
 802169c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80216a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80216a4:	f380 8811 	msr	BASEPRI, r0
 80216a8:	f3bf 8f4f 	dsb	sy
 80216ac:	f3bf 8f6f 	isb	sy
 80216b0:	f7fe fc50 	bl	801ff54 <vTaskSwitchContext>
 80216b4:	f04f 0000 	mov.w	r0, #0
 80216b8:	f380 8811 	msr	BASEPRI, r0
 80216bc:	bc09      	pop	{r0, r3}
 80216be:	6819      	ldr	r1, [r3, #0]
 80216c0:	6808      	ldr	r0, [r1, #0]
 80216c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216c6:	f01e 0f10 	tst.w	lr, #16
 80216ca:	bf08      	it	eq
 80216cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80216d0:	f380 8809 	msr	PSP, r0
 80216d4:	f3bf 8f6f 	isb	sy
 80216d8:	4770      	bx	lr
 80216da:	bf00      	nop
 80216dc:	f3af 8000 	nop.w

080216e0 <pxCurrentTCBConst>:
 80216e0:	2000d178 	.word	0x2000d178
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80216e4:	bf00      	nop
 80216e6:	bf00      	nop

080216e8 <tickFreeRTOS>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80216e8:	b580      	push	{r7, lr}
 80216ea:	b082      	sub	sp, #8
 80216ec:	af00      	add	r7, sp, #0
	__asm volatile
 80216ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80216f2:	f383 8811 	msr	BASEPRI, r3
 80216f6:	f3bf 8f6f 	isb	sy
 80216fa:	f3bf 8f4f 	dsb	sy
 80216fe:	607b      	str	r3, [r7, #4]
}
 8021700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8021702:	f7fe fb4d 	bl	801fda0 <xTaskIncrementTick>
 8021706:	4603      	mov	r3, r0
 8021708:	2b00      	cmp	r3, #0
 802170a:	d003      	beq.n	8021714 <tickFreeRTOS+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 802170c:	4b06      	ldr	r3, [pc, #24]	; (8021728 <tickFreeRTOS+0x40>)
 802170e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021712:	601a      	str	r2, [r3, #0]
 8021714:	2300      	movs	r3, #0
 8021716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8021718:	683b      	ldr	r3, [r7, #0]
 802171a:	f383 8811 	msr	BASEPRI, r3
}
 802171e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8021720:	bf00      	nop
 8021722:	3708      	adds	r7, #8
 8021724:	46bd      	mov	sp, r7
 8021726:	bd80      	pop	{r7, pc}
 8021728:	e000ed04 	.word	0xe000ed04

0802172c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 802172c:	b480      	push	{r7}
 802172e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8021730:	4b09      	ldr	r3, [pc, #36]	; (8021758 <vPortSetupTimerInterrupt+0x2c>)
 8021732:	2200      	movs	r2, #0
 8021734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8021736:	4b09      	ldr	r3, [pc, #36]	; (802175c <vPortSetupTimerInterrupt+0x30>)
 8021738:	2200      	movs	r2, #0
 802173a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 802173c:	4b08      	ldr	r3, [pc, #32]	; (8021760 <vPortSetupTimerInterrupt+0x34>)
 802173e:	681b      	ldr	r3, [r3, #0]
 8021740:	4a08      	ldr	r2, [pc, #32]	; (8021764 <vPortSetupTimerInterrupt+0x38>)
 8021742:	3b01      	subs	r3, #1
 8021744:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8021746:	4b04      	ldr	r3, [pc, #16]	; (8021758 <vPortSetupTimerInterrupt+0x2c>)
 8021748:	2207      	movs	r2, #7
 802174a:	601a      	str	r2, [r3, #0]
}
 802174c:	bf00      	nop
 802174e:	46bd      	mov	sp, r7
 8021750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021754:	4770      	bx	lr
 8021756:	bf00      	nop
 8021758:	e000e010 	.word	0xe000e010
 802175c:	e000e018 	.word	0xe000e018
 8021760:	20000ee0 	.word	0x20000ee0
 8021764:	e000e014 	.word	0xe000e014

08021768 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8021768:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8021778 <vPortEnableVFP+0x10>
 802176c:	6801      	ldr	r1, [r0, #0]
 802176e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8021772:	6001      	str	r1, [r0, #0]
 8021774:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8021776:	bf00      	nop
 8021778:	e000ed88 	.word	0xe000ed88

0802177c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 802177c:	b580      	push	{r7, lr}
 802177e:	b082      	sub	sp, #8
 8021780:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8021782:	f3ef 8305 	mrs	r3, IPSR
 8021786:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8021788:	687b      	ldr	r3, [r7, #4]
 802178a:	2b0f      	cmp	r3, #15
 802178c:	d90f      	bls.n	80217ae <vPortValidateInterruptPriority+0x32>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 802178e:	4a11      	ldr	r2, [pc, #68]	; (80217d4 <vPortValidateInterruptPriority+0x58>)
 8021790:	687b      	ldr	r3, [r7, #4]
 8021792:	4413      	add	r3, r2
 8021794:	781b      	ldrb	r3, [r3, #0]
 8021796:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8021798:	4b0f      	ldr	r3, [pc, #60]	; (80217d8 <vPortValidateInterruptPriority+0x5c>)
 802179a:	781b      	ldrb	r3, [r3, #0]
 802179c:	78fa      	ldrb	r2, [r7, #3]
 802179e:	429a      	cmp	r2, r3
 80217a0:	d205      	bcs.n	80217ae <vPortValidateInterruptPriority+0x32>
 80217a2:	f240 22f2 	movw	r2, #754	; 0x2f2
 80217a6:	490d      	ldr	r1, [pc, #52]	; (80217dc <vPortValidateInterruptPriority+0x60>)
 80217a8:	480d      	ldr	r0, [pc, #52]	; (80217e0 <vPortValidateInterruptPriority+0x64>)
 80217aa:	f7ef fa37 	bl	8010c1c <assertFail>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80217ae:	4b0d      	ldr	r3, [pc, #52]	; (80217e4 <vPortValidateInterruptPriority+0x68>)
 80217b0:	681b      	ldr	r3, [r3, #0]
 80217b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80217b6:	4b0c      	ldr	r3, [pc, #48]	; (80217e8 <vPortValidateInterruptPriority+0x6c>)
 80217b8:	681b      	ldr	r3, [r3, #0]
 80217ba:	429a      	cmp	r2, r3
 80217bc:	d905      	bls.n	80217ca <vPortValidateInterruptPriority+0x4e>
 80217be:	f240 3202 	movw	r2, #770	; 0x302
 80217c2:	4906      	ldr	r1, [pc, #24]	; (80217dc <vPortValidateInterruptPriority+0x60>)
 80217c4:	4809      	ldr	r0, [pc, #36]	; (80217ec <vPortValidateInterruptPriority+0x70>)
 80217c6:	f7ef fa29 	bl	8010c1c <assertFail>
	}
 80217ca:	bf00      	nop
 80217cc:	3708      	adds	r7, #8
 80217ce:	46bd      	mov	sp, r7
 80217d0:	bd80      	pop	{r7, pc}
 80217d2:	bf00      	nop
 80217d4:	e000e3f0 	.word	0xe000e3f0
 80217d8:	2000d580 	.word	0x2000d580
 80217dc:	0802d404 	.word	0x0802d404
 80217e0:	0802d5a0 	.word	0x0802d5a0
 80217e4:	e000ed0c 	.word	0xe000ed0c
 80217e8:	2000d584 	.word	0x2000d584
 80217ec:	0802d5cc 	.word	0x0802d5cc

080217f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80217f0:	b580      	push	{r7, lr}
 80217f2:	b086      	sub	sp, #24
 80217f4:	af00      	add	r7, sp, #0
 80217f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80217f8:	2300      	movs	r3, #0
 80217fa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80217fc:	f7fe f986 	bl	801fb0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8021800:	4b52      	ldr	r3, [pc, #328]	; (802194c <pvPortMalloc+0x15c>)
 8021802:	681b      	ldr	r3, [r3, #0]
 8021804:	2b00      	cmp	r3, #0
 8021806:	d101      	bne.n	802180c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8021808:	f000 f912 	bl	8021a30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 802180c:	4b50      	ldr	r3, [pc, #320]	; (8021950 <pvPortMalloc+0x160>)
 802180e:	681a      	ldr	r2, [r3, #0]
 8021810:	687b      	ldr	r3, [r7, #4]
 8021812:	4013      	ands	r3, r2
 8021814:	2b00      	cmp	r3, #0
 8021816:	f040 8087 	bne.w	8021928 <pvPortMalloc+0x138>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 802181a:	687b      	ldr	r3, [r7, #4]
 802181c:	2b00      	cmp	r3, #0
 802181e:	d017      	beq.n	8021850 <pvPortMalloc+0x60>
			{
				xWantedSize += xHeapStructSize;
 8021820:	2208      	movs	r2, #8
 8021822:	687b      	ldr	r3, [r7, #4]
 8021824:	4413      	add	r3, r2
 8021826:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8021828:	687b      	ldr	r3, [r7, #4]
 802182a:	f003 0307 	and.w	r3, r3, #7
 802182e:	2b00      	cmp	r3, #0
 8021830:	d00e      	beq.n	8021850 <pvPortMalloc+0x60>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8021832:	687b      	ldr	r3, [r7, #4]
 8021834:	f023 0307 	bic.w	r3, r3, #7
 8021838:	3308      	adds	r3, #8
 802183a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 802183c:	687b      	ldr	r3, [r7, #4]
 802183e:	f003 0307 	and.w	r3, r3, #7
 8021842:	2b00      	cmp	r3, #0
 8021844:	d004      	beq.n	8021850 <pvPortMalloc+0x60>
 8021846:	2297      	movs	r2, #151	; 0x97
 8021848:	4942      	ldr	r1, [pc, #264]	; (8021954 <pvPortMalloc+0x164>)
 802184a:	4843      	ldr	r0, [pc, #268]	; (8021958 <pvPortMalloc+0x168>)
 802184c:	f7ef f9e6 	bl	8010c1c <assertFail>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8021850:	687b      	ldr	r3, [r7, #4]
 8021852:	2b00      	cmp	r3, #0
 8021854:	d068      	beq.n	8021928 <pvPortMalloc+0x138>
 8021856:	4b41      	ldr	r3, [pc, #260]	; (802195c <pvPortMalloc+0x16c>)
 8021858:	681b      	ldr	r3, [r3, #0]
 802185a:	687a      	ldr	r2, [r7, #4]
 802185c:	429a      	cmp	r2, r3
 802185e:	d863      	bhi.n	8021928 <pvPortMalloc+0x138>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8021860:	4b3f      	ldr	r3, [pc, #252]	; (8021960 <pvPortMalloc+0x170>)
 8021862:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8021864:	4b3e      	ldr	r3, [pc, #248]	; (8021960 <pvPortMalloc+0x170>)
 8021866:	681b      	ldr	r3, [r3, #0]
 8021868:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802186a:	e004      	b.n	8021876 <pvPortMalloc+0x86>
				{
					pxPreviousBlock = pxBlock;
 802186c:	697b      	ldr	r3, [r7, #20]
 802186e:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8021870:	697b      	ldr	r3, [r7, #20]
 8021872:	681b      	ldr	r3, [r3, #0]
 8021874:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8021876:	697b      	ldr	r3, [r7, #20]
 8021878:	685b      	ldr	r3, [r3, #4]
 802187a:	687a      	ldr	r2, [r7, #4]
 802187c:	429a      	cmp	r2, r3
 802187e:	d903      	bls.n	8021888 <pvPortMalloc+0x98>
 8021880:	697b      	ldr	r3, [r7, #20]
 8021882:	681b      	ldr	r3, [r3, #0]
 8021884:	2b00      	cmp	r3, #0
 8021886:	d1f1      	bne.n	802186c <pvPortMalloc+0x7c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8021888:	4b30      	ldr	r3, [pc, #192]	; (802194c <pvPortMalloc+0x15c>)
 802188a:	681b      	ldr	r3, [r3, #0]
 802188c:	697a      	ldr	r2, [r7, #20]
 802188e:	429a      	cmp	r2, r3
 8021890:	d04a      	beq.n	8021928 <pvPortMalloc+0x138>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8021892:	693b      	ldr	r3, [r7, #16]
 8021894:	681b      	ldr	r3, [r3, #0]
 8021896:	2208      	movs	r2, #8
 8021898:	4413      	add	r3, r2
 802189a:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 802189c:	697b      	ldr	r3, [r7, #20]
 802189e:	681a      	ldr	r2, [r3, #0]
 80218a0:	693b      	ldr	r3, [r7, #16]
 80218a2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80218a4:	697b      	ldr	r3, [r7, #20]
 80218a6:	685a      	ldr	r2, [r3, #4]
 80218a8:	687b      	ldr	r3, [r7, #4]
 80218aa:	1ad2      	subs	r2, r2, r3
 80218ac:	2308      	movs	r3, #8
 80218ae:	005b      	lsls	r3, r3, #1
 80218b0:	429a      	cmp	r2, r3
 80218b2:	d919      	bls.n	80218e8 <pvPortMalloc+0xf8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80218b4:	697a      	ldr	r2, [r7, #20]
 80218b6:	687b      	ldr	r3, [r7, #4]
 80218b8:	4413      	add	r3, r2
 80218ba:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80218bc:	68bb      	ldr	r3, [r7, #8]
 80218be:	f003 0307 	and.w	r3, r3, #7
 80218c2:	2b00      	cmp	r3, #0
 80218c4:	d004      	beq.n	80218d0 <pvPortMalloc+0xe0>
 80218c6:	22c4      	movs	r2, #196	; 0xc4
 80218c8:	4922      	ldr	r1, [pc, #136]	; (8021954 <pvPortMalloc+0x164>)
 80218ca:	4826      	ldr	r0, [pc, #152]	; (8021964 <pvPortMalloc+0x174>)
 80218cc:	f7ef f9a6 	bl	8010c1c <assertFail>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80218d0:	697b      	ldr	r3, [r7, #20]
 80218d2:	685a      	ldr	r2, [r3, #4]
 80218d4:	687b      	ldr	r3, [r7, #4]
 80218d6:	1ad2      	subs	r2, r2, r3
 80218d8:	68bb      	ldr	r3, [r7, #8]
 80218da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80218dc:	697b      	ldr	r3, [r7, #20]
 80218de:	687a      	ldr	r2, [r7, #4]
 80218e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80218e2:	68b8      	ldr	r0, [r7, #8]
 80218e4:	f000 f906 	bl	8021af4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80218e8:	4b1c      	ldr	r3, [pc, #112]	; (802195c <pvPortMalloc+0x16c>)
 80218ea:	681a      	ldr	r2, [r3, #0]
 80218ec:	697b      	ldr	r3, [r7, #20]
 80218ee:	685b      	ldr	r3, [r3, #4]
 80218f0:	1ad3      	subs	r3, r2, r3
 80218f2:	4a1a      	ldr	r2, [pc, #104]	; (802195c <pvPortMalloc+0x16c>)
 80218f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80218f6:	4b19      	ldr	r3, [pc, #100]	; (802195c <pvPortMalloc+0x16c>)
 80218f8:	681a      	ldr	r2, [r3, #0]
 80218fa:	4b1b      	ldr	r3, [pc, #108]	; (8021968 <pvPortMalloc+0x178>)
 80218fc:	681b      	ldr	r3, [r3, #0]
 80218fe:	429a      	cmp	r2, r3
 8021900:	d203      	bcs.n	802190a <pvPortMalloc+0x11a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8021902:	4b16      	ldr	r3, [pc, #88]	; (802195c <pvPortMalloc+0x16c>)
 8021904:	681b      	ldr	r3, [r3, #0]
 8021906:	4a18      	ldr	r2, [pc, #96]	; (8021968 <pvPortMalloc+0x178>)
 8021908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 802190a:	697b      	ldr	r3, [r7, #20]
 802190c:	685a      	ldr	r2, [r3, #4]
 802190e:	4b10      	ldr	r3, [pc, #64]	; (8021950 <pvPortMalloc+0x160>)
 8021910:	681b      	ldr	r3, [r3, #0]
 8021912:	431a      	orrs	r2, r3
 8021914:	697b      	ldr	r3, [r7, #20]
 8021916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8021918:	697b      	ldr	r3, [r7, #20]
 802191a:	2200      	movs	r2, #0
 802191c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 802191e:	4b13      	ldr	r3, [pc, #76]	; (802196c <pvPortMalloc+0x17c>)
 8021920:	681b      	ldr	r3, [r3, #0]
 8021922:	3301      	adds	r3, #1
 8021924:	4a11      	ldr	r2, [pc, #68]	; (802196c <pvPortMalloc+0x17c>)
 8021926:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8021928:	f7fe f8fe 	bl	801fb28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 802192c:	68fb      	ldr	r3, [r7, #12]
 802192e:	f003 0307 	and.w	r3, r3, #7
 8021932:	2b00      	cmp	r3, #0
 8021934:	d005      	beq.n	8021942 <pvPortMalloc+0x152>
 8021936:	f240 1205 	movw	r2, #261	; 0x105
 802193a:	4906      	ldr	r1, [pc, #24]	; (8021954 <pvPortMalloc+0x164>)
 802193c:	480c      	ldr	r0, [pc, #48]	; (8021970 <pvPortMalloc+0x180>)
 802193e:	f7ef f96d 	bl	8010c1c <assertFail>
	return pvReturn;
 8021942:	68fb      	ldr	r3, [r7, #12]
}
 8021944:	4618      	mov	r0, r3
 8021946:	3718      	adds	r7, #24
 8021948:	46bd      	mov	sp, r7
 802194a:	bd80      	pop	{r7, pc}
 802194c:	20011190 	.word	0x20011190
 8021950:	200111a4 	.word	0x200111a4
 8021954:	0802d610 	.word	0x0802d610
 8021958:	0802d658 	.word	0x0802d658
 802195c:	20011194 	.word	0x20011194
 8021960:	20011188 	.word	0x20011188
 8021964:	0802d688 	.word	0x0802d688
 8021968:	20011198 	.word	0x20011198
 802196c:	2001119c 	.word	0x2001119c
 8021970:	0802d6cc 	.word	0x0802d6cc

08021974 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8021974:	b580      	push	{r7, lr}
 8021976:	b084      	sub	sp, #16
 8021978:	af00      	add	r7, sp, #0
 802197a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 802197c:	687b      	ldr	r3, [r7, #4]
 802197e:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8021980:	687b      	ldr	r3, [r7, #4]
 8021982:	2b00      	cmp	r3, #0
 8021984:	d043      	beq.n	8021a0e <vPortFree+0x9a>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8021986:	2308      	movs	r3, #8
 8021988:	425b      	negs	r3, r3
 802198a:	68fa      	ldr	r2, [r7, #12]
 802198c:	4413      	add	r3, r2
 802198e:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8021990:	68fb      	ldr	r3, [r7, #12]
 8021992:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8021994:	68bb      	ldr	r3, [r7, #8]
 8021996:	685a      	ldr	r2, [r3, #4]
 8021998:	4b1f      	ldr	r3, [pc, #124]	; (8021a18 <vPortFree+0xa4>)
 802199a:	681b      	ldr	r3, [r3, #0]
 802199c:	4013      	ands	r3, r2
 802199e:	2b00      	cmp	r3, #0
 80219a0:	d105      	bne.n	80219ae <vPortFree+0x3a>
 80219a2:	f240 1219 	movw	r2, #281	; 0x119
 80219a6:	491d      	ldr	r1, [pc, #116]	; (8021a1c <vPortFree+0xa8>)
 80219a8:	481d      	ldr	r0, [pc, #116]	; (8021a20 <vPortFree+0xac>)
 80219aa:	f7ef f937 	bl	8010c1c <assertFail>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80219ae:	68bb      	ldr	r3, [r7, #8]
 80219b0:	681b      	ldr	r3, [r3, #0]
 80219b2:	2b00      	cmp	r3, #0
 80219b4:	d005      	beq.n	80219c2 <vPortFree+0x4e>
 80219b6:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80219ba:	4918      	ldr	r1, [pc, #96]	; (8021a1c <vPortFree+0xa8>)
 80219bc:	4819      	ldr	r0, [pc, #100]	; (8021a24 <vPortFree+0xb0>)
 80219be:	f7ef f92d 	bl	8010c1c <assertFail>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80219c2:	68bb      	ldr	r3, [r7, #8]
 80219c4:	685a      	ldr	r2, [r3, #4]
 80219c6:	4b14      	ldr	r3, [pc, #80]	; (8021a18 <vPortFree+0xa4>)
 80219c8:	681b      	ldr	r3, [r3, #0]
 80219ca:	4013      	ands	r3, r2
 80219cc:	2b00      	cmp	r3, #0
 80219ce:	d01e      	beq.n	8021a0e <vPortFree+0x9a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80219d0:	68bb      	ldr	r3, [r7, #8]
 80219d2:	681b      	ldr	r3, [r3, #0]
 80219d4:	2b00      	cmp	r3, #0
 80219d6:	d11a      	bne.n	8021a0e <vPortFree+0x9a>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80219d8:	68bb      	ldr	r3, [r7, #8]
 80219da:	685a      	ldr	r2, [r3, #4]
 80219dc:	4b0e      	ldr	r3, [pc, #56]	; (8021a18 <vPortFree+0xa4>)
 80219de:	681b      	ldr	r3, [r3, #0]
 80219e0:	43db      	mvns	r3, r3
 80219e2:	401a      	ands	r2, r3
 80219e4:	68bb      	ldr	r3, [r7, #8]
 80219e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80219e8:	f7fe f890 	bl	801fb0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80219ec:	68bb      	ldr	r3, [r7, #8]
 80219ee:	685a      	ldr	r2, [r3, #4]
 80219f0:	4b0d      	ldr	r3, [pc, #52]	; (8021a28 <vPortFree+0xb4>)
 80219f2:	681b      	ldr	r3, [r3, #0]
 80219f4:	4413      	add	r3, r2
 80219f6:	4a0c      	ldr	r2, [pc, #48]	; (8021a28 <vPortFree+0xb4>)
 80219f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80219fa:	68b8      	ldr	r0, [r7, #8]
 80219fc:	f000 f87a 	bl	8021af4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8021a00:	4b0a      	ldr	r3, [pc, #40]	; (8021a2c <vPortFree+0xb8>)
 8021a02:	681b      	ldr	r3, [r3, #0]
 8021a04:	3301      	adds	r3, #1
 8021a06:	4a09      	ldr	r2, [pc, #36]	; (8021a2c <vPortFree+0xb8>)
 8021a08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8021a0a:	f7fe f88d 	bl	801fb28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8021a0e:	bf00      	nop
 8021a10:	3710      	adds	r7, #16
 8021a12:	46bd      	mov	sp, r7
 8021a14:	bd80      	pop	{r7, pc}
 8021a16:	bf00      	nop
 8021a18:	200111a4 	.word	0x200111a4
 8021a1c:	0802d610 	.word	0x0802d610
 8021a20:	0802d714 	.word	0x0802d714
 8021a24:	0802d748 	.word	0x0802d748
 8021a28:	20011194 	.word	0x20011194
 8021a2c:	200111a0 	.word	0x200111a0

08021a30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8021a30:	b480      	push	{r7}
 8021a32:	b085      	sub	sp, #20
 8021a34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8021a36:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8021a3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8021a3c:	4b27      	ldr	r3, [pc, #156]	; (8021adc <prvHeapInit+0xac>)
 8021a3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8021a40:	68fb      	ldr	r3, [r7, #12]
 8021a42:	f003 0307 	and.w	r3, r3, #7
 8021a46:	2b00      	cmp	r3, #0
 8021a48:	d00c      	beq.n	8021a64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8021a4a:	68fb      	ldr	r3, [r7, #12]
 8021a4c:	3307      	adds	r3, #7
 8021a4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8021a50:	68fb      	ldr	r3, [r7, #12]
 8021a52:	f023 0307 	bic.w	r3, r3, #7
 8021a56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8021a58:	68ba      	ldr	r2, [r7, #8]
 8021a5a:	68fb      	ldr	r3, [r7, #12]
 8021a5c:	1ad3      	subs	r3, r2, r3
 8021a5e:	4a1f      	ldr	r2, [pc, #124]	; (8021adc <prvHeapInit+0xac>)
 8021a60:	4413      	add	r3, r2
 8021a62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8021a64:	68fb      	ldr	r3, [r7, #12]
 8021a66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8021a68:	4a1d      	ldr	r2, [pc, #116]	; (8021ae0 <prvHeapInit+0xb0>)
 8021a6a:	687b      	ldr	r3, [r7, #4]
 8021a6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8021a6e:	4b1c      	ldr	r3, [pc, #112]	; (8021ae0 <prvHeapInit+0xb0>)
 8021a70:	2200      	movs	r2, #0
 8021a72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8021a74:	687b      	ldr	r3, [r7, #4]
 8021a76:	68ba      	ldr	r2, [r7, #8]
 8021a78:	4413      	add	r3, r2
 8021a7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8021a7c:	2208      	movs	r2, #8
 8021a7e:	68fb      	ldr	r3, [r7, #12]
 8021a80:	1a9b      	subs	r3, r3, r2
 8021a82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8021a84:	68fb      	ldr	r3, [r7, #12]
 8021a86:	f023 0307 	bic.w	r3, r3, #7
 8021a8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8021a8c:	68fb      	ldr	r3, [r7, #12]
 8021a8e:	4a15      	ldr	r2, [pc, #84]	; (8021ae4 <prvHeapInit+0xb4>)
 8021a90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8021a92:	4b14      	ldr	r3, [pc, #80]	; (8021ae4 <prvHeapInit+0xb4>)
 8021a94:	681b      	ldr	r3, [r3, #0]
 8021a96:	2200      	movs	r2, #0
 8021a98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8021a9a:	4b12      	ldr	r3, [pc, #72]	; (8021ae4 <prvHeapInit+0xb4>)
 8021a9c:	681b      	ldr	r3, [r3, #0]
 8021a9e:	2200      	movs	r2, #0
 8021aa0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8021aa2:	687b      	ldr	r3, [r7, #4]
 8021aa4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8021aa6:	683b      	ldr	r3, [r7, #0]
 8021aa8:	68fa      	ldr	r2, [r7, #12]
 8021aaa:	1ad2      	subs	r2, r2, r3
 8021aac:	683b      	ldr	r3, [r7, #0]
 8021aae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8021ab0:	4b0c      	ldr	r3, [pc, #48]	; (8021ae4 <prvHeapInit+0xb4>)
 8021ab2:	681a      	ldr	r2, [r3, #0]
 8021ab4:	683b      	ldr	r3, [r7, #0]
 8021ab6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8021ab8:	683b      	ldr	r3, [r7, #0]
 8021aba:	685b      	ldr	r3, [r3, #4]
 8021abc:	4a0a      	ldr	r2, [pc, #40]	; (8021ae8 <prvHeapInit+0xb8>)
 8021abe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8021ac0:	683b      	ldr	r3, [r7, #0]
 8021ac2:	685b      	ldr	r3, [r3, #4]
 8021ac4:	4a09      	ldr	r2, [pc, #36]	; (8021aec <prvHeapInit+0xbc>)
 8021ac6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8021ac8:	4b09      	ldr	r3, [pc, #36]	; (8021af0 <prvHeapInit+0xc0>)
 8021aca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8021ace:	601a      	str	r2, [r3, #0]
}
 8021ad0:	bf00      	nop
 8021ad2:	3714      	adds	r7, #20
 8021ad4:	46bd      	mov	sp, r7
 8021ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ada:	4770      	bx	lr
 8021adc:	2000d588 	.word	0x2000d588
 8021ae0:	20011188 	.word	0x20011188
 8021ae4:	20011190 	.word	0x20011190
 8021ae8:	20011198 	.word	0x20011198
 8021aec:	20011194 	.word	0x20011194
 8021af0:	200111a4 	.word	0x200111a4

08021af4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8021af4:	b480      	push	{r7}
 8021af6:	b085      	sub	sp, #20
 8021af8:	af00      	add	r7, sp, #0
 8021afa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8021afc:	4b28      	ldr	r3, [pc, #160]	; (8021ba0 <prvInsertBlockIntoFreeList+0xac>)
 8021afe:	60fb      	str	r3, [r7, #12]
 8021b00:	e002      	b.n	8021b08 <prvInsertBlockIntoFreeList+0x14>
 8021b02:	68fb      	ldr	r3, [r7, #12]
 8021b04:	681b      	ldr	r3, [r3, #0]
 8021b06:	60fb      	str	r3, [r7, #12]
 8021b08:	68fb      	ldr	r3, [r7, #12]
 8021b0a:	681b      	ldr	r3, [r3, #0]
 8021b0c:	687a      	ldr	r2, [r7, #4]
 8021b0e:	429a      	cmp	r2, r3
 8021b10:	d8f7      	bhi.n	8021b02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8021b12:	68fb      	ldr	r3, [r7, #12]
 8021b14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8021b16:	68fb      	ldr	r3, [r7, #12]
 8021b18:	685b      	ldr	r3, [r3, #4]
 8021b1a:	68ba      	ldr	r2, [r7, #8]
 8021b1c:	4413      	add	r3, r2
 8021b1e:	687a      	ldr	r2, [r7, #4]
 8021b20:	429a      	cmp	r2, r3
 8021b22:	d108      	bne.n	8021b36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8021b24:	68fb      	ldr	r3, [r7, #12]
 8021b26:	685a      	ldr	r2, [r3, #4]
 8021b28:	687b      	ldr	r3, [r7, #4]
 8021b2a:	685b      	ldr	r3, [r3, #4]
 8021b2c:	441a      	add	r2, r3
 8021b2e:	68fb      	ldr	r3, [r7, #12]
 8021b30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8021b32:	68fb      	ldr	r3, [r7, #12]
 8021b34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8021b36:	687b      	ldr	r3, [r7, #4]
 8021b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8021b3a:	687b      	ldr	r3, [r7, #4]
 8021b3c:	685b      	ldr	r3, [r3, #4]
 8021b3e:	68ba      	ldr	r2, [r7, #8]
 8021b40:	441a      	add	r2, r3
 8021b42:	68fb      	ldr	r3, [r7, #12]
 8021b44:	681b      	ldr	r3, [r3, #0]
 8021b46:	429a      	cmp	r2, r3
 8021b48:	d118      	bne.n	8021b7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8021b4a:	68fb      	ldr	r3, [r7, #12]
 8021b4c:	681a      	ldr	r2, [r3, #0]
 8021b4e:	4b15      	ldr	r3, [pc, #84]	; (8021ba4 <prvInsertBlockIntoFreeList+0xb0>)
 8021b50:	681b      	ldr	r3, [r3, #0]
 8021b52:	429a      	cmp	r2, r3
 8021b54:	d00d      	beq.n	8021b72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8021b56:	687b      	ldr	r3, [r7, #4]
 8021b58:	685a      	ldr	r2, [r3, #4]
 8021b5a:	68fb      	ldr	r3, [r7, #12]
 8021b5c:	681b      	ldr	r3, [r3, #0]
 8021b5e:	685b      	ldr	r3, [r3, #4]
 8021b60:	441a      	add	r2, r3
 8021b62:	687b      	ldr	r3, [r7, #4]
 8021b64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8021b66:	68fb      	ldr	r3, [r7, #12]
 8021b68:	681b      	ldr	r3, [r3, #0]
 8021b6a:	681a      	ldr	r2, [r3, #0]
 8021b6c:	687b      	ldr	r3, [r7, #4]
 8021b6e:	601a      	str	r2, [r3, #0]
 8021b70:	e008      	b.n	8021b84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8021b72:	4b0c      	ldr	r3, [pc, #48]	; (8021ba4 <prvInsertBlockIntoFreeList+0xb0>)
 8021b74:	681a      	ldr	r2, [r3, #0]
 8021b76:	687b      	ldr	r3, [r7, #4]
 8021b78:	601a      	str	r2, [r3, #0]
 8021b7a:	e003      	b.n	8021b84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8021b7c:	68fb      	ldr	r3, [r7, #12]
 8021b7e:	681a      	ldr	r2, [r3, #0]
 8021b80:	687b      	ldr	r3, [r7, #4]
 8021b82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8021b84:	68fa      	ldr	r2, [r7, #12]
 8021b86:	687b      	ldr	r3, [r7, #4]
 8021b88:	429a      	cmp	r2, r3
 8021b8a:	d002      	beq.n	8021b92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8021b8c:	68fb      	ldr	r3, [r7, #12]
 8021b8e:	687a      	ldr	r2, [r7, #4]
 8021b90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021b92:	bf00      	nop
 8021b94:	3714      	adds	r7, #20
 8021b96:	46bd      	mov	sp, r7
 8021b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b9c:	4770      	bx	lr
 8021b9e:	bf00      	nop
 8021ba0:	20011188 	.word	0x20011188
 8021ba4:	20011190 	.word	0x20011190

08021ba8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8021ba8:	b580      	push	{r7, lr}
 8021baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8021bac:	2200      	movs	r2, #0
 8021bae:	4912      	ldr	r1, [pc, #72]	; (8021bf8 <MX_USB_DEVICE_Init+0x50>)
 8021bb0:	4812      	ldr	r0, [pc, #72]	; (8021bfc <MX_USB_DEVICE_Init+0x54>)
 8021bb2:	f7fb f935 	bl	801ce20 <USBD_Init>
 8021bb6:	4603      	mov	r3, r0
 8021bb8:	2b00      	cmp	r3, #0
 8021bba:	d001      	beq.n	8021bc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8021bbc:	f7f2 ff6a 	bl	8014a94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8021bc0:	490f      	ldr	r1, [pc, #60]	; (8021c00 <MX_USB_DEVICE_Init+0x58>)
 8021bc2:	480e      	ldr	r0, [pc, #56]	; (8021bfc <MX_USB_DEVICE_Init+0x54>)
 8021bc4:	f7fb f95c 	bl	801ce80 <USBD_RegisterClass>
 8021bc8:	4603      	mov	r3, r0
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	d001      	beq.n	8021bd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8021bce:	f7f2 ff61 	bl	8014a94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8021bd2:	490c      	ldr	r1, [pc, #48]	; (8021c04 <MX_USB_DEVICE_Init+0x5c>)
 8021bd4:	4809      	ldr	r0, [pc, #36]	; (8021bfc <MX_USB_DEVICE_Init+0x54>)
 8021bd6:	f7fb f893 	bl	801cd00 <USBD_CDC_RegisterInterface>
 8021bda:	4603      	mov	r3, r0
 8021bdc:	2b00      	cmp	r3, #0
 8021bde:	d001      	beq.n	8021be4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8021be0:	f7f2 ff58 	bl	8014a94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8021be4:	4805      	ldr	r0, [pc, #20]	; (8021bfc <MX_USB_DEVICE_Init+0x54>)
 8021be6:	f7fb f981 	bl	801ceec <USBD_Start>
 8021bea:	4603      	mov	r3, r0
 8021bec:	2b00      	cmp	r3, #0
 8021bee:	d001      	beq.n	8021bf4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8021bf0:	f7f2 ff50 	bl	8014a94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8021bf4:	bf00      	nop
 8021bf6:	bd80      	pop	{r7, pc}
 8021bf8:	20000f90 	.word	0x20000f90
 8021bfc:	200111a8 	.word	0x200111a8
 8021c00:	20000ef8 	.word	0x20000ef8
 8021c04:	20000f7c 	.word	0x20000f7c

08021c08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8021c08:	b580      	push	{r7, lr}
 8021c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8021c0c:	2200      	movs	r2, #0
 8021c0e:	4905      	ldr	r1, [pc, #20]	; (8021c24 <CDC_Init_FS+0x1c>)
 8021c10:	4805      	ldr	r0, [pc, #20]	; (8021c28 <CDC_Init_FS+0x20>)
 8021c12:	f7fb f88f 	bl	801cd34 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8021c16:	4905      	ldr	r1, [pc, #20]	; (8021c2c <CDC_Init_FS+0x24>)
 8021c18:	4803      	ldr	r0, [pc, #12]	; (8021c28 <CDC_Init_FS+0x20>)
 8021c1a:	f7fb f8ad 	bl	801cd78 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8021c1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8021c20:	4618      	mov	r0, r3
 8021c22:	bd80      	pop	{r7, pc}
 8021c24:	20011c84 	.word	0x20011c84
 8021c28:	200111a8 	.word	0x200111a8
 8021c2c:	20011484 	.word	0x20011484

08021c30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8021c30:	b480      	push	{r7}
 8021c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8021c34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8021c36:	4618      	mov	r0, r3
 8021c38:	46bd      	mov	sp, r7
 8021c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c3e:	4770      	bx	lr

08021c40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8021c40:	b480      	push	{r7}
 8021c42:	b083      	sub	sp, #12
 8021c44:	af00      	add	r7, sp, #0
 8021c46:	4603      	mov	r3, r0
 8021c48:	6039      	str	r1, [r7, #0]
 8021c4a:	71fb      	strb	r3, [r7, #7]
 8021c4c:	4613      	mov	r3, r2
 8021c4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8021c50:	79fb      	ldrb	r3, [r7, #7]
 8021c52:	2b23      	cmp	r3, #35	; 0x23
 8021c54:	d84a      	bhi.n	8021cec <CDC_Control_FS+0xac>
 8021c56:	a201      	add	r2, pc, #4	; (adr r2, 8021c5c <CDC_Control_FS+0x1c>)
 8021c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021c5c:	08021ced 	.word	0x08021ced
 8021c60:	08021ced 	.word	0x08021ced
 8021c64:	08021ced 	.word	0x08021ced
 8021c68:	08021ced 	.word	0x08021ced
 8021c6c:	08021ced 	.word	0x08021ced
 8021c70:	08021ced 	.word	0x08021ced
 8021c74:	08021ced 	.word	0x08021ced
 8021c78:	08021ced 	.word	0x08021ced
 8021c7c:	08021ced 	.word	0x08021ced
 8021c80:	08021ced 	.word	0x08021ced
 8021c84:	08021ced 	.word	0x08021ced
 8021c88:	08021ced 	.word	0x08021ced
 8021c8c:	08021ced 	.word	0x08021ced
 8021c90:	08021ced 	.word	0x08021ced
 8021c94:	08021ced 	.word	0x08021ced
 8021c98:	08021ced 	.word	0x08021ced
 8021c9c:	08021ced 	.word	0x08021ced
 8021ca0:	08021ced 	.word	0x08021ced
 8021ca4:	08021ced 	.word	0x08021ced
 8021ca8:	08021ced 	.word	0x08021ced
 8021cac:	08021ced 	.word	0x08021ced
 8021cb0:	08021ced 	.word	0x08021ced
 8021cb4:	08021ced 	.word	0x08021ced
 8021cb8:	08021ced 	.word	0x08021ced
 8021cbc:	08021ced 	.word	0x08021ced
 8021cc0:	08021ced 	.word	0x08021ced
 8021cc4:	08021ced 	.word	0x08021ced
 8021cc8:	08021ced 	.word	0x08021ced
 8021ccc:	08021ced 	.word	0x08021ced
 8021cd0:	08021ced 	.word	0x08021ced
 8021cd4:	08021ced 	.word	0x08021ced
 8021cd8:	08021ced 	.word	0x08021ced
 8021cdc:	08021ced 	.word	0x08021ced
 8021ce0:	08021ced 	.word	0x08021ced
 8021ce4:	08021ced 	.word	0x08021ced
 8021ce8:	08021ced 	.word	0x08021ced
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8021cec:	bf00      	nop
  }

  return (USBD_OK);
 8021cee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8021cf0:	4618      	mov	r0, r3
 8021cf2:	370c      	adds	r7, #12
 8021cf4:	46bd      	mov	sp, r7
 8021cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cfa:	4770      	bx	lr

08021cfc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8021cfc:	b580      	push	{r7, lr}
 8021cfe:	b082      	sub	sp, #8
 8021d00:	af00      	add	r7, sp, #0
 8021d02:	6078      	str	r0, [r7, #4]
 8021d04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8021d06:	6879      	ldr	r1, [r7, #4]
 8021d08:	4805      	ldr	r0, [pc, #20]	; (8021d20 <CDC_Receive_FS+0x24>)
 8021d0a:	f7fb f835 	bl	801cd78 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8021d0e:	4804      	ldr	r0, [pc, #16]	; (8021d20 <CDC_Receive_FS+0x24>)
 8021d10:	f7fb f850 	bl	801cdb4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8021d14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8021d16:	4618      	mov	r0, r3
 8021d18:	3708      	adds	r7, #8
 8021d1a:	46bd      	mov	sp, r7
 8021d1c:	bd80      	pop	{r7, pc}
 8021d1e:	bf00      	nop
 8021d20:	200111a8 	.word	0x200111a8

08021d24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8021d24:	b480      	push	{r7}
 8021d26:	b087      	sub	sp, #28
 8021d28:	af00      	add	r7, sp, #0
 8021d2a:	60f8      	str	r0, [r7, #12]
 8021d2c:	60b9      	str	r1, [r7, #8]
 8021d2e:	4613      	mov	r3, r2
 8021d30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8021d32:	2300      	movs	r3, #0
 8021d34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8021d36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8021d3a:	4618      	mov	r0, r3
 8021d3c:	371c      	adds	r7, #28
 8021d3e:	46bd      	mov	sp, r7
 8021d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d44:	4770      	bx	lr
	...

08021d48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021d48:	b480      	push	{r7}
 8021d4a:	b083      	sub	sp, #12
 8021d4c:	af00      	add	r7, sp, #0
 8021d4e:	4603      	mov	r3, r0
 8021d50:	6039      	str	r1, [r7, #0]
 8021d52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8021d54:	683b      	ldr	r3, [r7, #0]
 8021d56:	2212      	movs	r2, #18
 8021d58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8021d5a:	4b03      	ldr	r3, [pc, #12]	; (8021d68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8021d5c:	4618      	mov	r0, r3
 8021d5e:	370c      	adds	r7, #12
 8021d60:	46bd      	mov	sp, r7
 8021d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d66:	4770      	bx	lr
 8021d68:	20000fac 	.word	0x20000fac

08021d6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021d6c:	b480      	push	{r7}
 8021d6e:	b083      	sub	sp, #12
 8021d70:	af00      	add	r7, sp, #0
 8021d72:	4603      	mov	r3, r0
 8021d74:	6039      	str	r1, [r7, #0]
 8021d76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8021d78:	683b      	ldr	r3, [r7, #0]
 8021d7a:	2204      	movs	r2, #4
 8021d7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8021d7e:	4b03      	ldr	r3, [pc, #12]	; (8021d8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8021d80:	4618      	mov	r0, r3
 8021d82:	370c      	adds	r7, #12
 8021d84:	46bd      	mov	sp, r7
 8021d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d8a:	4770      	bx	lr
 8021d8c:	20000fc0 	.word	0x20000fc0

08021d90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021d90:	b580      	push	{r7, lr}
 8021d92:	b082      	sub	sp, #8
 8021d94:	af00      	add	r7, sp, #0
 8021d96:	4603      	mov	r3, r0
 8021d98:	6039      	str	r1, [r7, #0]
 8021d9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8021d9c:	79fb      	ldrb	r3, [r7, #7]
 8021d9e:	2b00      	cmp	r3, #0
 8021da0:	d105      	bne.n	8021dae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8021da2:	683a      	ldr	r2, [r7, #0]
 8021da4:	4907      	ldr	r1, [pc, #28]	; (8021dc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8021da6:	4808      	ldr	r0, [pc, #32]	; (8021dc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8021da8:	f7fc fa52 	bl	801e250 <USBD_GetString>
 8021dac:	e004      	b.n	8021db8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8021dae:	683a      	ldr	r2, [r7, #0]
 8021db0:	4904      	ldr	r1, [pc, #16]	; (8021dc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8021db2:	4805      	ldr	r0, [pc, #20]	; (8021dc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8021db4:	f7fc fa4c 	bl	801e250 <USBD_GetString>
  }
  return USBD_StrDesc;
 8021db8:	4b02      	ldr	r3, [pc, #8]	; (8021dc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8021dba:	4618      	mov	r0, r3
 8021dbc:	3708      	adds	r7, #8
 8021dbe:	46bd      	mov	sp, r7
 8021dc0:	bd80      	pop	{r7, pc}
 8021dc2:	bf00      	nop
 8021dc4:	20012484 	.word	0x20012484
 8021dc8:	0802d768 	.word	0x0802d768

08021dcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021dcc:	b580      	push	{r7, lr}
 8021dce:	b082      	sub	sp, #8
 8021dd0:	af00      	add	r7, sp, #0
 8021dd2:	4603      	mov	r3, r0
 8021dd4:	6039      	str	r1, [r7, #0]
 8021dd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8021dd8:	683a      	ldr	r2, [r7, #0]
 8021dda:	4904      	ldr	r1, [pc, #16]	; (8021dec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8021ddc:	4804      	ldr	r0, [pc, #16]	; (8021df0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8021dde:	f7fc fa37 	bl	801e250 <USBD_GetString>
  return USBD_StrDesc;
 8021de2:	4b02      	ldr	r3, [pc, #8]	; (8021dec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8021de4:	4618      	mov	r0, r3
 8021de6:	3708      	adds	r7, #8
 8021de8:	46bd      	mov	sp, r7
 8021dea:	bd80      	pop	{r7, pc}
 8021dec:	20012484 	.word	0x20012484
 8021df0:	0802d780 	.word	0x0802d780

08021df4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021df4:	b580      	push	{r7, lr}
 8021df6:	b082      	sub	sp, #8
 8021df8:	af00      	add	r7, sp, #0
 8021dfa:	4603      	mov	r3, r0
 8021dfc:	6039      	str	r1, [r7, #0]
 8021dfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8021e00:	683b      	ldr	r3, [r7, #0]
 8021e02:	221a      	movs	r2, #26
 8021e04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8021e06:	f000 f843 	bl	8021e90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8021e0a:	4b02      	ldr	r3, [pc, #8]	; (8021e14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8021e0c:	4618      	mov	r0, r3
 8021e0e:	3708      	adds	r7, #8
 8021e10:	46bd      	mov	sp, r7
 8021e12:	bd80      	pop	{r7, pc}
 8021e14:	20000fc4 	.word	0x20000fc4

08021e18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021e18:	b580      	push	{r7, lr}
 8021e1a:	b082      	sub	sp, #8
 8021e1c:	af00      	add	r7, sp, #0
 8021e1e:	4603      	mov	r3, r0
 8021e20:	6039      	str	r1, [r7, #0]
 8021e22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8021e24:	79fb      	ldrb	r3, [r7, #7]
 8021e26:	2b00      	cmp	r3, #0
 8021e28:	d105      	bne.n	8021e36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8021e2a:	683a      	ldr	r2, [r7, #0]
 8021e2c:	4907      	ldr	r1, [pc, #28]	; (8021e4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8021e2e:	4808      	ldr	r0, [pc, #32]	; (8021e50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8021e30:	f7fc fa0e 	bl	801e250 <USBD_GetString>
 8021e34:	e004      	b.n	8021e40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8021e36:	683a      	ldr	r2, [r7, #0]
 8021e38:	4904      	ldr	r1, [pc, #16]	; (8021e4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8021e3a:	4805      	ldr	r0, [pc, #20]	; (8021e50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8021e3c:	f7fc fa08 	bl	801e250 <USBD_GetString>
  }
  return USBD_StrDesc;
 8021e40:	4b02      	ldr	r3, [pc, #8]	; (8021e4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8021e42:	4618      	mov	r0, r3
 8021e44:	3708      	adds	r7, #8
 8021e46:	46bd      	mov	sp, r7
 8021e48:	bd80      	pop	{r7, pc}
 8021e4a:	bf00      	nop
 8021e4c:	20012484 	.word	0x20012484
 8021e50:	0802d794 	.word	0x0802d794

08021e54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021e54:	b580      	push	{r7, lr}
 8021e56:	b082      	sub	sp, #8
 8021e58:	af00      	add	r7, sp, #0
 8021e5a:	4603      	mov	r3, r0
 8021e5c:	6039      	str	r1, [r7, #0]
 8021e5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8021e60:	79fb      	ldrb	r3, [r7, #7]
 8021e62:	2b00      	cmp	r3, #0
 8021e64:	d105      	bne.n	8021e72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8021e66:	683a      	ldr	r2, [r7, #0]
 8021e68:	4907      	ldr	r1, [pc, #28]	; (8021e88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8021e6a:	4808      	ldr	r0, [pc, #32]	; (8021e8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8021e6c:	f7fc f9f0 	bl	801e250 <USBD_GetString>
 8021e70:	e004      	b.n	8021e7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8021e72:	683a      	ldr	r2, [r7, #0]
 8021e74:	4904      	ldr	r1, [pc, #16]	; (8021e88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8021e76:	4805      	ldr	r0, [pc, #20]	; (8021e8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8021e78:	f7fc f9ea 	bl	801e250 <USBD_GetString>
  }
  return USBD_StrDesc;
 8021e7c:	4b02      	ldr	r3, [pc, #8]	; (8021e88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8021e7e:	4618      	mov	r0, r3
 8021e80:	3708      	adds	r7, #8
 8021e82:	46bd      	mov	sp, r7
 8021e84:	bd80      	pop	{r7, pc}
 8021e86:	bf00      	nop
 8021e88:	20012484 	.word	0x20012484
 8021e8c:	0802d7a0 	.word	0x0802d7a0

08021e90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8021e90:	b580      	push	{r7, lr}
 8021e92:	b084      	sub	sp, #16
 8021e94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8021e96:	4b0f      	ldr	r3, [pc, #60]	; (8021ed4 <Get_SerialNum+0x44>)
 8021e98:	681b      	ldr	r3, [r3, #0]
 8021e9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8021e9c:	4b0e      	ldr	r3, [pc, #56]	; (8021ed8 <Get_SerialNum+0x48>)
 8021e9e:	681b      	ldr	r3, [r3, #0]
 8021ea0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8021ea2:	4b0e      	ldr	r3, [pc, #56]	; (8021edc <Get_SerialNum+0x4c>)
 8021ea4:	681b      	ldr	r3, [r3, #0]
 8021ea6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8021ea8:	68fa      	ldr	r2, [r7, #12]
 8021eaa:	687b      	ldr	r3, [r7, #4]
 8021eac:	4413      	add	r3, r2
 8021eae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8021eb0:	68fb      	ldr	r3, [r7, #12]
 8021eb2:	2b00      	cmp	r3, #0
 8021eb4:	d009      	beq.n	8021eca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8021eb6:	2208      	movs	r2, #8
 8021eb8:	4909      	ldr	r1, [pc, #36]	; (8021ee0 <Get_SerialNum+0x50>)
 8021eba:	68f8      	ldr	r0, [r7, #12]
 8021ebc:	f000 f814 	bl	8021ee8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8021ec0:	2204      	movs	r2, #4
 8021ec2:	4908      	ldr	r1, [pc, #32]	; (8021ee4 <Get_SerialNum+0x54>)
 8021ec4:	68b8      	ldr	r0, [r7, #8]
 8021ec6:	f000 f80f 	bl	8021ee8 <IntToUnicode>
  }
}
 8021eca:	bf00      	nop
 8021ecc:	3710      	adds	r7, #16
 8021ece:	46bd      	mov	sp, r7
 8021ed0:	bd80      	pop	{r7, pc}
 8021ed2:	bf00      	nop
 8021ed4:	1fff7a10 	.word	0x1fff7a10
 8021ed8:	1fff7a14 	.word	0x1fff7a14
 8021edc:	1fff7a18 	.word	0x1fff7a18
 8021ee0:	20000fc6 	.word	0x20000fc6
 8021ee4:	20000fd6 	.word	0x20000fd6

08021ee8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8021ee8:	b480      	push	{r7}
 8021eea:	b087      	sub	sp, #28
 8021eec:	af00      	add	r7, sp, #0
 8021eee:	60f8      	str	r0, [r7, #12]
 8021ef0:	60b9      	str	r1, [r7, #8]
 8021ef2:	4613      	mov	r3, r2
 8021ef4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8021ef6:	2300      	movs	r3, #0
 8021ef8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8021efa:	2300      	movs	r3, #0
 8021efc:	75fb      	strb	r3, [r7, #23]
 8021efe:	e027      	b.n	8021f50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8021f00:	68fb      	ldr	r3, [r7, #12]
 8021f02:	0f1b      	lsrs	r3, r3, #28
 8021f04:	2b09      	cmp	r3, #9
 8021f06:	d80b      	bhi.n	8021f20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8021f08:	68fb      	ldr	r3, [r7, #12]
 8021f0a:	0f1b      	lsrs	r3, r3, #28
 8021f0c:	b2da      	uxtb	r2, r3
 8021f0e:	7dfb      	ldrb	r3, [r7, #23]
 8021f10:	005b      	lsls	r3, r3, #1
 8021f12:	4619      	mov	r1, r3
 8021f14:	68bb      	ldr	r3, [r7, #8]
 8021f16:	440b      	add	r3, r1
 8021f18:	3230      	adds	r2, #48	; 0x30
 8021f1a:	b2d2      	uxtb	r2, r2
 8021f1c:	701a      	strb	r2, [r3, #0]
 8021f1e:	e00a      	b.n	8021f36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8021f20:	68fb      	ldr	r3, [r7, #12]
 8021f22:	0f1b      	lsrs	r3, r3, #28
 8021f24:	b2da      	uxtb	r2, r3
 8021f26:	7dfb      	ldrb	r3, [r7, #23]
 8021f28:	005b      	lsls	r3, r3, #1
 8021f2a:	4619      	mov	r1, r3
 8021f2c:	68bb      	ldr	r3, [r7, #8]
 8021f2e:	440b      	add	r3, r1
 8021f30:	3237      	adds	r2, #55	; 0x37
 8021f32:	b2d2      	uxtb	r2, r2
 8021f34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8021f36:	68fb      	ldr	r3, [r7, #12]
 8021f38:	011b      	lsls	r3, r3, #4
 8021f3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8021f3c:	7dfb      	ldrb	r3, [r7, #23]
 8021f3e:	005b      	lsls	r3, r3, #1
 8021f40:	3301      	adds	r3, #1
 8021f42:	68ba      	ldr	r2, [r7, #8]
 8021f44:	4413      	add	r3, r2
 8021f46:	2200      	movs	r2, #0
 8021f48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8021f4a:	7dfb      	ldrb	r3, [r7, #23]
 8021f4c:	3301      	adds	r3, #1
 8021f4e:	75fb      	strb	r3, [r7, #23]
 8021f50:	7dfa      	ldrb	r2, [r7, #23]
 8021f52:	79fb      	ldrb	r3, [r7, #7]
 8021f54:	429a      	cmp	r2, r3
 8021f56:	d3d3      	bcc.n	8021f00 <IntToUnicode+0x18>
  }
}
 8021f58:	bf00      	nop
 8021f5a:	bf00      	nop
 8021f5c:	371c      	adds	r7, #28
 8021f5e:	46bd      	mov	sp, r7
 8021f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f64:	4770      	bx	lr
	...

08021f68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8021f68:	b580      	push	{r7, lr}
 8021f6a:	b08a      	sub	sp, #40	; 0x28
 8021f6c:	af00      	add	r7, sp, #0
 8021f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021f70:	f107 0314 	add.w	r3, r7, #20
 8021f74:	2200      	movs	r2, #0
 8021f76:	601a      	str	r2, [r3, #0]
 8021f78:	605a      	str	r2, [r3, #4]
 8021f7a:	609a      	str	r2, [r3, #8]
 8021f7c:	60da      	str	r2, [r3, #12]
 8021f7e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8021f80:	687b      	ldr	r3, [r7, #4]
 8021f82:	681b      	ldr	r3, [r3, #0]
 8021f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8021f88:	d13a      	bne.n	8022000 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021f8a:	2300      	movs	r3, #0
 8021f8c:	613b      	str	r3, [r7, #16]
 8021f8e:	4b1e      	ldr	r3, [pc, #120]	; (8022008 <HAL_PCD_MspInit+0xa0>)
 8021f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f92:	4a1d      	ldr	r2, [pc, #116]	; (8022008 <HAL_PCD_MspInit+0xa0>)
 8021f94:	f043 0301 	orr.w	r3, r3, #1
 8021f98:	6313      	str	r3, [r2, #48]	; 0x30
 8021f9a:	4b1b      	ldr	r3, [pc, #108]	; (8022008 <HAL_PCD_MspInit+0xa0>)
 8021f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f9e:	f003 0301 	and.w	r3, r3, #1
 8021fa2:	613b      	str	r3, [r7, #16]
 8021fa4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8021fa6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8021faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021fac:	2302      	movs	r3, #2
 8021fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021fb0:	2300      	movs	r3, #0
 8021fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021fb4:	2303      	movs	r3, #3
 8021fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8021fb8:	230a      	movs	r3, #10
 8021fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021fbc:	f107 0314 	add.w	r3, r7, #20
 8021fc0:	4619      	mov	r1, r3
 8021fc2:	4812      	ldr	r0, [pc, #72]	; (802200c <HAL_PCD_MspInit+0xa4>)
 8021fc4:	f7f4 fb3e 	bl	8016644 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8021fc8:	4b0f      	ldr	r3, [pc, #60]	; (8022008 <HAL_PCD_MspInit+0xa0>)
 8021fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021fcc:	4a0e      	ldr	r2, [pc, #56]	; (8022008 <HAL_PCD_MspInit+0xa0>)
 8021fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021fd2:	6353      	str	r3, [r2, #52]	; 0x34
 8021fd4:	2300      	movs	r3, #0
 8021fd6:	60fb      	str	r3, [r7, #12]
 8021fd8:	4b0b      	ldr	r3, [pc, #44]	; (8022008 <HAL_PCD_MspInit+0xa0>)
 8021fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021fdc:	4a0a      	ldr	r2, [pc, #40]	; (8022008 <HAL_PCD_MspInit+0xa0>)
 8021fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021fe2:	6453      	str	r3, [r2, #68]	; 0x44
 8021fe4:	4b08      	ldr	r3, [pc, #32]	; (8022008 <HAL_PCD_MspInit+0xa0>)
 8021fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021fec:	60fb      	str	r3, [r7, #12]
 8021fee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8021ff0:	2200      	movs	r2, #0
 8021ff2:	2105      	movs	r1, #5
 8021ff4:	2043      	movs	r0, #67	; 0x43
 8021ff6:	f7f3 fede 	bl	8015db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8021ffa:	2043      	movs	r0, #67	; 0x43
 8021ffc:	f7f3 fef7 	bl	8015dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8022000:	bf00      	nop
 8022002:	3728      	adds	r7, #40	; 0x28
 8022004:	46bd      	mov	sp, r7
 8022006:	bd80      	pop	{r7, pc}
 8022008:	40023800 	.word	0x40023800
 802200c:	40020000 	.word	0x40020000

08022010 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022010:	b580      	push	{r7, lr}
 8022012:	b082      	sub	sp, #8
 8022014:	af00      	add	r7, sp, #0
 8022016:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8022018:	687b      	ldr	r3, [r7, #4]
 802201a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 802201e:	687b      	ldr	r3, [r7, #4]
 8022020:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8022024:	4619      	mov	r1, r3
 8022026:	4610      	mov	r0, r2
 8022028:	f7fa ffad 	bl	801cf86 <USBD_LL_SetupStage>
}
 802202c:	bf00      	nop
 802202e:	3708      	adds	r7, #8
 8022030:	46bd      	mov	sp, r7
 8022032:	bd80      	pop	{r7, pc}

08022034 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022034:	b580      	push	{r7, lr}
 8022036:	b082      	sub	sp, #8
 8022038:	af00      	add	r7, sp, #0
 802203a:	6078      	str	r0, [r7, #4]
 802203c:	460b      	mov	r3, r1
 802203e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8022040:	687b      	ldr	r3, [r7, #4]
 8022042:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8022046:	78fa      	ldrb	r2, [r7, #3]
 8022048:	6879      	ldr	r1, [r7, #4]
 802204a:	4613      	mov	r3, r2
 802204c:	00db      	lsls	r3, r3, #3
 802204e:	4413      	add	r3, r2
 8022050:	009b      	lsls	r3, r3, #2
 8022052:	440b      	add	r3, r1
 8022054:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8022058:	681a      	ldr	r2, [r3, #0]
 802205a:	78fb      	ldrb	r3, [r7, #3]
 802205c:	4619      	mov	r1, r3
 802205e:	f7fa ffe7 	bl	801d030 <USBD_LL_DataOutStage>
}
 8022062:	bf00      	nop
 8022064:	3708      	adds	r7, #8
 8022066:	46bd      	mov	sp, r7
 8022068:	bd80      	pop	{r7, pc}

0802206a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802206a:	b580      	push	{r7, lr}
 802206c:	b082      	sub	sp, #8
 802206e:	af00      	add	r7, sp, #0
 8022070:	6078      	str	r0, [r7, #4]
 8022072:	460b      	mov	r3, r1
 8022074:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8022076:	687b      	ldr	r3, [r7, #4]
 8022078:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 802207c:	78fa      	ldrb	r2, [r7, #3]
 802207e:	6879      	ldr	r1, [r7, #4]
 8022080:	4613      	mov	r3, r2
 8022082:	00db      	lsls	r3, r3, #3
 8022084:	4413      	add	r3, r2
 8022086:	009b      	lsls	r3, r3, #2
 8022088:	440b      	add	r3, r1
 802208a:	3320      	adds	r3, #32
 802208c:	681a      	ldr	r2, [r3, #0]
 802208e:	78fb      	ldrb	r3, [r7, #3]
 8022090:	4619      	mov	r1, r3
 8022092:	f7fb f880 	bl	801d196 <USBD_LL_DataInStage>
}
 8022096:	bf00      	nop
 8022098:	3708      	adds	r7, #8
 802209a:	46bd      	mov	sp, r7
 802209c:	bd80      	pop	{r7, pc}

0802209e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802209e:	b580      	push	{r7, lr}
 80220a0:	b082      	sub	sp, #8
 80220a2:	af00      	add	r7, sp, #0
 80220a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80220a6:	687b      	ldr	r3, [r7, #4]
 80220a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80220ac:	4618      	mov	r0, r3
 80220ae:	f7fb f9ba 	bl	801d426 <USBD_LL_SOF>
}
 80220b2:	bf00      	nop
 80220b4:	3708      	adds	r7, #8
 80220b6:	46bd      	mov	sp, r7
 80220b8:	bd80      	pop	{r7, pc}

080220ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80220ba:	b580      	push	{r7, lr}
 80220bc:	b084      	sub	sp, #16
 80220be:	af00      	add	r7, sp, #0
 80220c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80220c2:	2301      	movs	r3, #1
 80220c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80220c6:	687b      	ldr	r3, [r7, #4]
 80220c8:	79db      	ldrb	r3, [r3, #7]
 80220ca:	2b00      	cmp	r3, #0
 80220cc:	d102      	bne.n	80220d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80220ce:	2300      	movs	r3, #0
 80220d0:	73fb      	strb	r3, [r7, #15]
 80220d2:	e008      	b.n	80220e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80220d4:	687b      	ldr	r3, [r7, #4]
 80220d6:	79db      	ldrb	r3, [r3, #7]
 80220d8:	2b02      	cmp	r3, #2
 80220da:	d102      	bne.n	80220e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80220dc:	2301      	movs	r3, #1
 80220de:	73fb      	strb	r3, [r7, #15]
 80220e0:	e001      	b.n	80220e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80220e2:	f7f2 fcd7 	bl	8014a94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80220e6:	687b      	ldr	r3, [r7, #4]
 80220e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80220ec:	7bfa      	ldrb	r2, [r7, #15]
 80220ee:	4611      	mov	r1, r2
 80220f0:	4618      	mov	r0, r3
 80220f2:	f7fb f954 	bl	801d39e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80220f6:	687b      	ldr	r3, [r7, #4]
 80220f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80220fc:	4618      	mov	r0, r3
 80220fe:	f7fb f8fc 	bl	801d2fa <USBD_LL_Reset>
}
 8022102:	bf00      	nop
 8022104:	3710      	adds	r7, #16
 8022106:	46bd      	mov	sp, r7
 8022108:	bd80      	pop	{r7, pc}
	...

0802210c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802210c:	b580      	push	{r7, lr}
 802210e:	b082      	sub	sp, #8
 8022110:	af00      	add	r7, sp, #0
 8022112:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8022114:	687b      	ldr	r3, [r7, #4]
 8022116:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 802211a:	4618      	mov	r0, r3
 802211c:	f7fb f94f 	bl	801d3be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022120:	687b      	ldr	r3, [r7, #4]
 8022122:	681b      	ldr	r3, [r3, #0]
 8022124:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022128:	681b      	ldr	r3, [r3, #0]
 802212a:	687a      	ldr	r2, [r7, #4]
 802212c:	6812      	ldr	r2, [r2, #0]
 802212e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022132:	f043 0301 	orr.w	r3, r3, #1
 8022136:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8022138:	687b      	ldr	r3, [r7, #4]
 802213a:	7adb      	ldrb	r3, [r3, #11]
 802213c:	2b00      	cmp	r3, #0
 802213e:	d005      	beq.n	802214c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022140:	4b04      	ldr	r3, [pc, #16]	; (8022154 <HAL_PCD_SuspendCallback+0x48>)
 8022142:	691b      	ldr	r3, [r3, #16]
 8022144:	4a03      	ldr	r2, [pc, #12]	; (8022154 <HAL_PCD_SuspendCallback+0x48>)
 8022146:	f043 0306 	orr.w	r3, r3, #6
 802214a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 802214c:	bf00      	nop
 802214e:	3708      	adds	r7, #8
 8022150:	46bd      	mov	sp, r7
 8022152:	bd80      	pop	{r7, pc}
 8022154:	e000ed00 	.word	0xe000ed00

08022158 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022158:	b580      	push	{r7, lr}
 802215a:	b082      	sub	sp, #8
 802215c:	af00      	add	r7, sp, #0
 802215e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8022160:	687b      	ldr	r3, [r7, #4]
 8022162:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8022166:	4618      	mov	r0, r3
 8022168:	f7fb f945 	bl	801d3f6 <USBD_LL_Resume>
}
 802216c:	bf00      	nop
 802216e:	3708      	adds	r7, #8
 8022170:	46bd      	mov	sp, r7
 8022172:	bd80      	pop	{r7, pc}

08022174 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022174:	b580      	push	{r7, lr}
 8022176:	b082      	sub	sp, #8
 8022178:	af00      	add	r7, sp, #0
 802217a:	6078      	str	r0, [r7, #4]
 802217c:	460b      	mov	r3, r1
 802217e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022180:	687b      	ldr	r3, [r7, #4]
 8022182:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8022186:	78fa      	ldrb	r2, [r7, #3]
 8022188:	4611      	mov	r1, r2
 802218a:	4618      	mov	r0, r3
 802218c:	f7fb f99d 	bl	801d4ca <USBD_LL_IsoOUTIncomplete>
}
 8022190:	bf00      	nop
 8022192:	3708      	adds	r7, #8
 8022194:	46bd      	mov	sp, r7
 8022196:	bd80      	pop	{r7, pc}

08022198 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022198:	b580      	push	{r7, lr}
 802219a:	b082      	sub	sp, #8
 802219c:	af00      	add	r7, sp, #0
 802219e:	6078      	str	r0, [r7, #4]
 80221a0:	460b      	mov	r3, r1
 80221a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80221a4:	687b      	ldr	r3, [r7, #4]
 80221a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80221aa:	78fa      	ldrb	r2, [r7, #3]
 80221ac:	4611      	mov	r1, r2
 80221ae:	4618      	mov	r0, r3
 80221b0:	f7fb f959 	bl	801d466 <USBD_LL_IsoINIncomplete>
}
 80221b4:	bf00      	nop
 80221b6:	3708      	adds	r7, #8
 80221b8:	46bd      	mov	sp, r7
 80221ba:	bd80      	pop	{r7, pc}

080221bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80221bc:	b580      	push	{r7, lr}
 80221be:	b082      	sub	sp, #8
 80221c0:	af00      	add	r7, sp, #0
 80221c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80221c4:	687b      	ldr	r3, [r7, #4]
 80221c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80221ca:	4618      	mov	r0, r3
 80221cc:	f7fb f9af 	bl	801d52e <USBD_LL_DevConnected>
}
 80221d0:	bf00      	nop
 80221d2:	3708      	adds	r7, #8
 80221d4:	46bd      	mov	sp, r7
 80221d6:	bd80      	pop	{r7, pc}

080221d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80221d8:	b580      	push	{r7, lr}
 80221da:	b082      	sub	sp, #8
 80221dc:	af00      	add	r7, sp, #0
 80221de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80221e0:	687b      	ldr	r3, [r7, #4]
 80221e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80221e6:	4618      	mov	r0, r3
 80221e8:	f7fb f9ac 	bl	801d544 <USBD_LL_DevDisconnected>
}
 80221ec:	bf00      	nop
 80221ee:	3708      	adds	r7, #8
 80221f0:	46bd      	mov	sp, r7
 80221f2:	bd80      	pop	{r7, pc}

080221f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80221f4:	b580      	push	{r7, lr}
 80221f6:	b082      	sub	sp, #8
 80221f8:	af00      	add	r7, sp, #0
 80221fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80221fc:	687b      	ldr	r3, [r7, #4]
 80221fe:	781b      	ldrb	r3, [r3, #0]
 8022200:	2b00      	cmp	r3, #0
 8022202:	d13c      	bne.n	802227e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8022204:	4a20      	ldr	r2, [pc, #128]	; (8022288 <USBD_LL_Init+0x94>)
 8022206:	687b      	ldr	r3, [r7, #4]
 8022208:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 802220c:	687b      	ldr	r3, [r7, #4]
 802220e:	4a1e      	ldr	r2, [pc, #120]	; (8022288 <USBD_LL_Init+0x94>)
 8022210:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8022214:	4b1c      	ldr	r3, [pc, #112]	; (8022288 <USBD_LL_Init+0x94>)
 8022216:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 802221a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 802221c:	4b1a      	ldr	r3, [pc, #104]	; (8022288 <USBD_LL_Init+0x94>)
 802221e:	2204      	movs	r2, #4
 8022220:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8022222:	4b19      	ldr	r3, [pc, #100]	; (8022288 <USBD_LL_Init+0x94>)
 8022224:	2202      	movs	r2, #2
 8022226:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8022228:	4b17      	ldr	r3, [pc, #92]	; (8022288 <USBD_LL_Init+0x94>)
 802222a:	2200      	movs	r2, #0
 802222c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 802222e:	4b16      	ldr	r3, [pc, #88]	; (8022288 <USBD_LL_Init+0x94>)
 8022230:	2202      	movs	r2, #2
 8022232:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8022234:	4b14      	ldr	r3, [pc, #80]	; (8022288 <USBD_LL_Init+0x94>)
 8022236:	2200      	movs	r2, #0
 8022238:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 802223a:	4b13      	ldr	r3, [pc, #76]	; (8022288 <USBD_LL_Init+0x94>)
 802223c:	2200      	movs	r2, #0
 802223e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8022240:	4b11      	ldr	r3, [pc, #68]	; (8022288 <USBD_LL_Init+0x94>)
 8022242:	2200      	movs	r2, #0
 8022244:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8022246:	4b10      	ldr	r3, [pc, #64]	; (8022288 <USBD_LL_Init+0x94>)
 8022248:	2200      	movs	r2, #0
 802224a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 802224c:	4b0e      	ldr	r3, [pc, #56]	; (8022288 <USBD_LL_Init+0x94>)
 802224e:	2200      	movs	r2, #0
 8022250:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8022252:	480d      	ldr	r0, [pc, #52]	; (8022288 <USBD_LL_Init+0x94>)
 8022254:	f7f4 fbab 	bl	80169ae <HAL_PCD_Init>
 8022258:	4603      	mov	r3, r0
 802225a:	2b00      	cmp	r3, #0
 802225c:	d001      	beq.n	8022262 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 802225e:	f7f2 fc19 	bl	8014a94 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8022262:	2180      	movs	r1, #128	; 0x80
 8022264:	4808      	ldr	r0, [pc, #32]	; (8022288 <USBD_LL_Init+0x94>)
 8022266:	f7f5 fdd6 	bl	8017e16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 802226a:	2240      	movs	r2, #64	; 0x40
 802226c:	2100      	movs	r1, #0
 802226e:	4806      	ldr	r0, [pc, #24]	; (8022288 <USBD_LL_Init+0x94>)
 8022270:	f7f5 fd8a 	bl	8017d88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8022274:	2280      	movs	r2, #128	; 0x80
 8022276:	2101      	movs	r1, #1
 8022278:	4803      	ldr	r0, [pc, #12]	; (8022288 <USBD_LL_Init+0x94>)
 802227a:	f7f5 fd85 	bl	8017d88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 802227e:	2300      	movs	r3, #0
}
 8022280:	4618      	mov	r0, r3
 8022282:	3708      	adds	r7, #8
 8022284:	46bd      	mov	sp, r7
 8022286:	bd80      	pop	{r7, pc}
 8022288:	20012684 	.word	0x20012684

0802228c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 802228c:	b580      	push	{r7, lr}
 802228e:	b084      	sub	sp, #16
 8022290:	af00      	add	r7, sp, #0
 8022292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022294:	2300      	movs	r3, #0
 8022296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022298:	2300      	movs	r3, #0
 802229a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 802229c:	687b      	ldr	r3, [r7, #4]
 802229e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80222a2:	4618      	mov	r0, r3
 80222a4:	f7f4 fc92 	bl	8016bcc <HAL_PCD_Start>
 80222a8:	4603      	mov	r3, r0
 80222aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80222ac:	7bfb      	ldrb	r3, [r7, #15]
 80222ae:	4618      	mov	r0, r3
 80222b0:	f000 f942 	bl	8022538 <USBD_Get_USB_Status>
 80222b4:	4603      	mov	r3, r0
 80222b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80222b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80222ba:	4618      	mov	r0, r3
 80222bc:	3710      	adds	r7, #16
 80222be:	46bd      	mov	sp, r7
 80222c0:	bd80      	pop	{r7, pc}

080222c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80222c2:	b580      	push	{r7, lr}
 80222c4:	b084      	sub	sp, #16
 80222c6:	af00      	add	r7, sp, #0
 80222c8:	6078      	str	r0, [r7, #4]
 80222ca:	4608      	mov	r0, r1
 80222cc:	4611      	mov	r1, r2
 80222ce:	461a      	mov	r2, r3
 80222d0:	4603      	mov	r3, r0
 80222d2:	70fb      	strb	r3, [r7, #3]
 80222d4:	460b      	mov	r3, r1
 80222d6:	70bb      	strb	r3, [r7, #2]
 80222d8:	4613      	mov	r3, r2
 80222da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80222dc:	2300      	movs	r3, #0
 80222de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80222e0:	2300      	movs	r3, #0
 80222e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80222e4:	687b      	ldr	r3, [r7, #4]
 80222e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80222ea:	78bb      	ldrb	r3, [r7, #2]
 80222ec:	883a      	ldrh	r2, [r7, #0]
 80222ee:	78f9      	ldrb	r1, [r7, #3]
 80222f0:	f7f5 f966 	bl	80175c0 <HAL_PCD_EP_Open>
 80222f4:	4603      	mov	r3, r0
 80222f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80222f8:	7bfb      	ldrb	r3, [r7, #15]
 80222fa:	4618      	mov	r0, r3
 80222fc:	f000 f91c 	bl	8022538 <USBD_Get_USB_Status>
 8022300:	4603      	mov	r3, r0
 8022302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022304:	7bbb      	ldrb	r3, [r7, #14]
}
 8022306:	4618      	mov	r0, r3
 8022308:	3710      	adds	r7, #16
 802230a:	46bd      	mov	sp, r7
 802230c:	bd80      	pop	{r7, pc}

0802230e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802230e:	b580      	push	{r7, lr}
 8022310:	b084      	sub	sp, #16
 8022312:	af00      	add	r7, sp, #0
 8022314:	6078      	str	r0, [r7, #4]
 8022316:	460b      	mov	r3, r1
 8022318:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802231a:	2300      	movs	r3, #0
 802231c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802231e:	2300      	movs	r3, #0
 8022320:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8022322:	687b      	ldr	r3, [r7, #4]
 8022324:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8022328:	78fa      	ldrb	r2, [r7, #3]
 802232a:	4611      	mov	r1, r2
 802232c:	4618      	mov	r0, r3
 802232e:	f7f5 f9af 	bl	8017690 <HAL_PCD_EP_Close>
 8022332:	4603      	mov	r3, r0
 8022334:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022336:	7bfb      	ldrb	r3, [r7, #15]
 8022338:	4618      	mov	r0, r3
 802233a:	f000 f8fd 	bl	8022538 <USBD_Get_USB_Status>
 802233e:	4603      	mov	r3, r0
 8022340:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022342:	7bbb      	ldrb	r3, [r7, #14]
}
 8022344:	4618      	mov	r0, r3
 8022346:	3710      	adds	r7, #16
 8022348:	46bd      	mov	sp, r7
 802234a:	bd80      	pop	{r7, pc}

0802234c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802234c:	b580      	push	{r7, lr}
 802234e:	b084      	sub	sp, #16
 8022350:	af00      	add	r7, sp, #0
 8022352:	6078      	str	r0, [r7, #4]
 8022354:	460b      	mov	r3, r1
 8022356:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022358:	2300      	movs	r3, #0
 802235a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802235c:	2300      	movs	r3, #0
 802235e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8022360:	687b      	ldr	r3, [r7, #4]
 8022362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8022366:	78fa      	ldrb	r2, [r7, #3]
 8022368:	4611      	mov	r1, r2
 802236a:	4618      	mov	r0, r3
 802236c:	f7f5 fa67 	bl	801783e <HAL_PCD_EP_SetStall>
 8022370:	4603      	mov	r3, r0
 8022372:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022374:	7bfb      	ldrb	r3, [r7, #15]
 8022376:	4618      	mov	r0, r3
 8022378:	f000 f8de 	bl	8022538 <USBD_Get_USB_Status>
 802237c:	4603      	mov	r3, r0
 802237e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022380:	7bbb      	ldrb	r3, [r7, #14]
}
 8022382:	4618      	mov	r0, r3
 8022384:	3710      	adds	r7, #16
 8022386:	46bd      	mov	sp, r7
 8022388:	bd80      	pop	{r7, pc}

0802238a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802238a:	b580      	push	{r7, lr}
 802238c:	b084      	sub	sp, #16
 802238e:	af00      	add	r7, sp, #0
 8022390:	6078      	str	r0, [r7, #4]
 8022392:	460b      	mov	r3, r1
 8022394:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022396:	2300      	movs	r3, #0
 8022398:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802239a:	2300      	movs	r3, #0
 802239c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802239e:	687b      	ldr	r3, [r7, #4]
 80223a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80223a4:	78fa      	ldrb	r2, [r7, #3]
 80223a6:	4611      	mov	r1, r2
 80223a8:	4618      	mov	r0, r3
 80223aa:	f7f5 faab 	bl	8017904 <HAL_PCD_EP_ClrStall>
 80223ae:	4603      	mov	r3, r0
 80223b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80223b2:	7bfb      	ldrb	r3, [r7, #15]
 80223b4:	4618      	mov	r0, r3
 80223b6:	f000 f8bf 	bl	8022538 <USBD_Get_USB_Status>
 80223ba:	4603      	mov	r3, r0
 80223bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80223be:	7bbb      	ldrb	r3, [r7, #14]
}
 80223c0:	4618      	mov	r0, r3
 80223c2:	3710      	adds	r7, #16
 80223c4:	46bd      	mov	sp, r7
 80223c6:	bd80      	pop	{r7, pc}

080223c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80223c8:	b480      	push	{r7}
 80223ca:	b085      	sub	sp, #20
 80223cc:	af00      	add	r7, sp, #0
 80223ce:	6078      	str	r0, [r7, #4]
 80223d0:	460b      	mov	r3, r1
 80223d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80223d4:	687b      	ldr	r3, [r7, #4]
 80223d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80223da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80223dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80223e0:	2b00      	cmp	r3, #0
 80223e2:	da0b      	bge.n	80223fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80223e4:	78fb      	ldrb	r3, [r7, #3]
 80223e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80223ea:	68f9      	ldr	r1, [r7, #12]
 80223ec:	4613      	mov	r3, r2
 80223ee:	00db      	lsls	r3, r3, #3
 80223f0:	4413      	add	r3, r2
 80223f2:	009b      	lsls	r3, r3, #2
 80223f4:	440b      	add	r3, r1
 80223f6:	3316      	adds	r3, #22
 80223f8:	781b      	ldrb	r3, [r3, #0]
 80223fa:	e00b      	b.n	8022414 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80223fc:	78fb      	ldrb	r3, [r7, #3]
 80223fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022402:	68f9      	ldr	r1, [r7, #12]
 8022404:	4613      	mov	r3, r2
 8022406:	00db      	lsls	r3, r3, #3
 8022408:	4413      	add	r3, r2
 802240a:	009b      	lsls	r3, r3, #2
 802240c:	440b      	add	r3, r1
 802240e:	f203 2356 	addw	r3, r3, #598	; 0x256
 8022412:	781b      	ldrb	r3, [r3, #0]
  }
}
 8022414:	4618      	mov	r0, r3
 8022416:	3714      	adds	r7, #20
 8022418:	46bd      	mov	sp, r7
 802241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802241e:	4770      	bx	lr

08022420 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8022420:	b580      	push	{r7, lr}
 8022422:	b084      	sub	sp, #16
 8022424:	af00      	add	r7, sp, #0
 8022426:	6078      	str	r0, [r7, #4]
 8022428:	460b      	mov	r3, r1
 802242a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802242c:	2300      	movs	r3, #0
 802242e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022430:	2300      	movs	r3, #0
 8022432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8022434:	687b      	ldr	r3, [r7, #4]
 8022436:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802243a:	78fa      	ldrb	r2, [r7, #3]
 802243c:	4611      	mov	r1, r2
 802243e:	4618      	mov	r0, r3
 8022440:	f7f5 f89a 	bl	8017578 <HAL_PCD_SetAddress>
 8022444:	4603      	mov	r3, r0
 8022446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022448:	7bfb      	ldrb	r3, [r7, #15]
 802244a:	4618      	mov	r0, r3
 802244c:	f000 f874 	bl	8022538 <USBD_Get_USB_Status>
 8022450:	4603      	mov	r3, r0
 8022452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022454:	7bbb      	ldrb	r3, [r7, #14]
}
 8022456:	4618      	mov	r0, r3
 8022458:	3710      	adds	r7, #16
 802245a:	46bd      	mov	sp, r7
 802245c:	bd80      	pop	{r7, pc}

0802245e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 802245e:	b580      	push	{r7, lr}
 8022460:	b086      	sub	sp, #24
 8022462:	af00      	add	r7, sp, #0
 8022464:	60f8      	str	r0, [r7, #12]
 8022466:	607a      	str	r2, [r7, #4]
 8022468:	603b      	str	r3, [r7, #0]
 802246a:	460b      	mov	r3, r1
 802246c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802246e:	2300      	movs	r3, #0
 8022470:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022472:	2300      	movs	r3, #0
 8022474:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8022476:	68fb      	ldr	r3, [r7, #12]
 8022478:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 802247c:	7af9      	ldrb	r1, [r7, #11]
 802247e:	683b      	ldr	r3, [r7, #0]
 8022480:	687a      	ldr	r2, [r7, #4]
 8022482:	f7f5 f9a2 	bl	80177ca <HAL_PCD_EP_Transmit>
 8022486:	4603      	mov	r3, r0
 8022488:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802248a:	7dfb      	ldrb	r3, [r7, #23]
 802248c:	4618      	mov	r0, r3
 802248e:	f000 f853 	bl	8022538 <USBD_Get_USB_Status>
 8022492:	4603      	mov	r3, r0
 8022494:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8022496:	7dbb      	ldrb	r3, [r7, #22]
}
 8022498:	4618      	mov	r0, r3
 802249a:	3718      	adds	r7, #24
 802249c:	46bd      	mov	sp, r7
 802249e:	bd80      	pop	{r7, pc}

080224a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80224a0:	b580      	push	{r7, lr}
 80224a2:	b086      	sub	sp, #24
 80224a4:	af00      	add	r7, sp, #0
 80224a6:	60f8      	str	r0, [r7, #12]
 80224a8:	607a      	str	r2, [r7, #4]
 80224aa:	603b      	str	r3, [r7, #0]
 80224ac:	460b      	mov	r3, r1
 80224ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80224b0:	2300      	movs	r3, #0
 80224b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80224b4:	2300      	movs	r3, #0
 80224b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80224b8:	68fb      	ldr	r3, [r7, #12]
 80224ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80224be:	7af9      	ldrb	r1, [r7, #11]
 80224c0:	683b      	ldr	r3, [r7, #0]
 80224c2:	687a      	ldr	r2, [r7, #4]
 80224c4:	f7f5 f92e 	bl	8017724 <HAL_PCD_EP_Receive>
 80224c8:	4603      	mov	r3, r0
 80224ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80224cc:	7dfb      	ldrb	r3, [r7, #23]
 80224ce:	4618      	mov	r0, r3
 80224d0:	f000 f832 	bl	8022538 <USBD_Get_USB_Status>
 80224d4:	4603      	mov	r3, r0
 80224d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80224d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80224da:	4618      	mov	r0, r3
 80224dc:	3718      	adds	r7, #24
 80224de:	46bd      	mov	sp, r7
 80224e0:	bd80      	pop	{r7, pc}

080224e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80224e2:	b580      	push	{r7, lr}
 80224e4:	b082      	sub	sp, #8
 80224e6:	af00      	add	r7, sp, #0
 80224e8:	6078      	str	r0, [r7, #4]
 80224ea:	460b      	mov	r3, r1
 80224ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80224ee:	687b      	ldr	r3, [r7, #4]
 80224f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80224f4:	78fa      	ldrb	r2, [r7, #3]
 80224f6:	4611      	mov	r1, r2
 80224f8:	4618      	mov	r0, r3
 80224fa:	f7f5 f94e 	bl	801779a <HAL_PCD_EP_GetRxCount>
 80224fe:	4603      	mov	r3, r0
}
 8022500:	4618      	mov	r0, r3
 8022502:	3708      	adds	r7, #8
 8022504:	46bd      	mov	sp, r7
 8022506:	bd80      	pop	{r7, pc}

08022508 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8022508:	b480      	push	{r7}
 802250a:	b083      	sub	sp, #12
 802250c:	af00      	add	r7, sp, #0
 802250e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8022510:	4b03      	ldr	r3, [pc, #12]	; (8022520 <USBD_static_malloc+0x18>)
}
 8022512:	4618      	mov	r0, r3
 8022514:	370c      	adds	r7, #12
 8022516:	46bd      	mov	sp, r7
 8022518:	f85d 7b04 	ldr.w	r7, [sp], #4
 802251c:	4770      	bx	lr
 802251e:	bf00      	nop
 8022520:	20012b68 	.word	0x20012b68

08022524 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8022524:	b480      	push	{r7}
 8022526:	b083      	sub	sp, #12
 8022528:	af00      	add	r7, sp, #0
 802252a:	6078      	str	r0, [r7, #4]

}
 802252c:	bf00      	nop
 802252e:	370c      	adds	r7, #12
 8022530:	46bd      	mov	sp, r7
 8022532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022536:	4770      	bx	lr

08022538 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8022538:	b480      	push	{r7}
 802253a:	b085      	sub	sp, #20
 802253c:	af00      	add	r7, sp, #0
 802253e:	4603      	mov	r3, r0
 8022540:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022542:	2300      	movs	r3, #0
 8022544:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8022546:	79fb      	ldrb	r3, [r7, #7]
 8022548:	2b03      	cmp	r3, #3
 802254a:	d817      	bhi.n	802257c <USBD_Get_USB_Status+0x44>
 802254c:	a201      	add	r2, pc, #4	; (adr r2, 8022554 <USBD_Get_USB_Status+0x1c>)
 802254e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022552:	bf00      	nop
 8022554:	08022565 	.word	0x08022565
 8022558:	0802256b 	.word	0x0802256b
 802255c:	08022571 	.word	0x08022571
 8022560:	08022577 	.word	0x08022577
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8022564:	2300      	movs	r3, #0
 8022566:	73fb      	strb	r3, [r7, #15]
    break;
 8022568:	e00b      	b.n	8022582 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 802256a:	2303      	movs	r3, #3
 802256c:	73fb      	strb	r3, [r7, #15]
    break;
 802256e:	e008      	b.n	8022582 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8022570:	2301      	movs	r3, #1
 8022572:	73fb      	strb	r3, [r7, #15]
    break;
 8022574:	e005      	b.n	8022582 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8022576:	2303      	movs	r3, #3
 8022578:	73fb      	strb	r3, [r7, #15]
    break;
 802257a:	e002      	b.n	8022582 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 802257c:	2303      	movs	r3, #3
 802257e:	73fb      	strb	r3, [r7, #15]
    break;
 8022580:	bf00      	nop
  }
  return usb_status;
 8022582:	7bfb      	ldrb	r3, [r7, #15]
}
 8022584:	4618      	mov	r0, r3
 8022586:	3714      	adds	r7, #20
 8022588:	46bd      	mov	sp, r7
 802258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802258e:	4770      	bx	lr

08022590 <arm_mat_trans_f32>:
 8022590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022594:	8802      	ldrh	r2, [r0, #0]
 8022596:	884b      	ldrh	r3, [r1, #2]
 8022598:	f8d0 c004 	ldr.w	ip, [r0, #4]
 802259c:	684f      	ldr	r7, [r1, #4]
 802259e:	8840      	ldrh	r0, [r0, #2]
 80225a0:	4293      	cmp	r3, r2
 80225a2:	b083      	sub	sp, #12
 80225a4:	d14c      	bne.n	8022640 <arm_mat_trans_f32+0xb0>
 80225a6:	f8b1 e000 	ldrh.w	lr, [r1]
 80225aa:	4586      	cmp	lr, r0
 80225ac:	d148      	bne.n	8022640 <arm_mat_trans_f32+0xb0>
 80225ae:	ea4f 089e 	mov.w	r8, lr, lsr #2
 80225b2:	009c      	lsls	r4, r3, #2
 80225b4:	f00e 0e03 	and.w	lr, lr, #3
 80225b8:	fb08 f904 	mul.w	r9, r8, r4
 80225bc:	ea4f 028e 	mov.w	r2, lr, lsl #2
 80225c0:	011d      	lsls	r5, r3, #4
 80225c2:	00db      	lsls	r3, r3, #3
 80225c4:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80225c8:	eb07 0a04 	add.w	sl, r7, r4
 80225cc:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 80225d0:	9201      	str	r2, [sp, #4]
 80225d2:	9300      	str	r3, [sp, #0]
 80225d4:	463b      	mov	r3, r7
 80225d6:	f1b8 0f00 	cmp.w	r8, #0
 80225da:	d01d      	beq.n	8022618 <arm_mat_trans_f32+0x88>
 80225dc:	9900      	ldr	r1, [sp, #0]
 80225de:	f10c 0210 	add.w	r2, ip, #16
 80225e2:	4439      	add	r1, r7
 80225e4:	4640      	mov	r0, r8
 80225e6:	f852 6c10 	ldr.w	r6, [r2, #-16]
 80225ea:	601e      	str	r6, [r3, #0]
 80225ec:	ed52 7a03 	vldr	s15, [r2, #-12]
 80225f0:	191e      	adds	r6, r3, r4
 80225f2:	edc6 7a00 	vstr	s15, [r6]
 80225f6:	f852 6c08 	ldr.w	r6, [r2, #-8]
 80225fa:	600e      	str	r6, [r1, #0]
 80225fc:	ed52 7a01 	vldr	s15, [r2, #-4]
 8022600:	190e      	adds	r6, r1, r4
 8022602:	3801      	subs	r0, #1
 8022604:	442b      	add	r3, r5
 8022606:	f102 0210 	add.w	r2, r2, #16
 802260a:	edc6 7a00 	vstr	s15, [r6]
 802260e:	4429      	add	r1, r5
 8022610:	d1e9      	bne.n	80225e6 <arm_mat_trans_f32+0x56>
 8022612:	44dc      	add	ip, fp
 8022614:	eb09 0307 	add.w	r3, r9, r7
 8022618:	f1be 0f00 	cmp.w	lr, #0
 802261c:	d009      	beq.n	8022632 <arm_mat_trans_f32+0xa2>
 802261e:	4672      	mov	r2, lr
 8022620:	4661      	mov	r1, ip
 8022622:	f851 0b04 	ldr.w	r0, [r1], #4
 8022626:	6018      	str	r0, [r3, #0]
 8022628:	3a01      	subs	r2, #1
 802262a:	4423      	add	r3, r4
 802262c:	d1f9      	bne.n	8022622 <arm_mat_trans_f32+0x92>
 802262e:	9b01      	ldr	r3, [sp, #4]
 8022630:	449c      	add	ip, r3
 8022632:	3704      	adds	r7, #4
 8022634:	4557      	cmp	r7, sl
 8022636:	d1cd      	bne.n	80225d4 <arm_mat_trans_f32+0x44>
 8022638:	2000      	movs	r0, #0
 802263a:	b003      	add	sp, #12
 802263c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022640:	f06f 0002 	mvn.w	r0, #2
 8022644:	e7f9      	b.n	802263a <arm_mat_trans_f32+0xaa>
 8022646:	bf00      	nop

08022648 <arm_mat_scale_f32>:
 8022648:	b470      	push	{r4, r5, r6}
 802264a:	e9d1 3500 	ldrd	r3, r5, [r1]
 802264e:	6802      	ldr	r2, [r0, #0]
 8022650:	6846      	ldr	r6, [r0, #4]
 8022652:	429a      	cmp	r2, r3
 8022654:	d147      	bne.n	80226e6 <arm_mat_scale_f32+0x9e>
 8022656:	8803      	ldrh	r3, [r0, #0]
 8022658:	8840      	ldrh	r0, [r0, #2]
 802265a:	fb00 f003 	mul.w	r0, r0, r3
 802265e:	0884      	lsrs	r4, r0, #2
 8022660:	d025      	beq.n	80226ae <arm_mat_scale_f32+0x66>
 8022662:	f106 0210 	add.w	r2, r6, #16
 8022666:	f105 0310 	add.w	r3, r5, #16
 802266a:	4621      	mov	r1, r4
 802266c:	ed52 7a04 	vldr	s15, [r2, #-16]
 8022670:	ee67 7a80 	vmul.f32	s15, s15, s0
 8022674:	3901      	subs	r1, #1
 8022676:	ed43 7a04 	vstr	s15, [r3, #-16]
 802267a:	ed52 7a03 	vldr	s15, [r2, #-12]
 802267e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8022682:	f102 0210 	add.w	r2, r2, #16
 8022686:	ed43 7a03 	vstr	s15, [r3, #-12]
 802268a:	ed52 7a06 	vldr	s15, [r2, #-24]	; 0xffffffe8
 802268e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8022692:	f103 0310 	add.w	r3, r3, #16
 8022696:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 802269a:	ed52 7a05 	vldr	s15, [r2, #-20]	; 0xffffffec
 802269e:	ee67 7a80 	vmul.f32	s15, s15, s0
 80226a2:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80226a6:	d1e1      	bne.n	802266c <arm_mat_scale_f32+0x24>
 80226a8:	0124      	lsls	r4, r4, #4
 80226aa:	4426      	add	r6, r4
 80226ac:	4425      	add	r5, r4
 80226ae:	f010 0003 	ands.w	r0, r0, #3
 80226b2:	d015      	beq.n	80226e0 <arm_mat_scale_f32+0x98>
 80226b4:	edd6 7a00 	vldr	s15, [r6]
 80226b8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80226bc:	3801      	subs	r0, #1
 80226be:	edc5 7a00 	vstr	s15, [r5]
 80226c2:	d00d      	beq.n	80226e0 <arm_mat_scale_f32+0x98>
 80226c4:	edd6 7a01 	vldr	s15, [r6, #4]
 80226c8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80226cc:	2801      	cmp	r0, #1
 80226ce:	edc5 7a01 	vstr	s15, [r5, #4]
 80226d2:	d005      	beq.n	80226e0 <arm_mat_scale_f32+0x98>
 80226d4:	edd6 7a02 	vldr	s15, [r6, #8]
 80226d8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80226dc:	ed85 0a02 	vstr	s0, [r5, #8]
 80226e0:	2000      	movs	r0, #0
 80226e2:	bc70      	pop	{r4, r5, r6}
 80226e4:	4770      	bx	lr
 80226e6:	f06f 0002 	mvn.w	r0, #2
 80226ea:	e7fa      	b.n	80226e2 <arm_mat_scale_f32+0x9a>

080226ec <arm_mat_mult_f32>:
 80226ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226f0:	8845      	ldrh	r5, [r0, #2]
 80226f2:	880b      	ldrh	r3, [r1, #0]
 80226f4:	8806      	ldrh	r6, [r0, #0]
 80226f6:	6847      	ldr	r7, [r0, #4]
 80226f8:	6854      	ldr	r4, [r2, #4]
 80226fa:	6848      	ldr	r0, [r1, #4]
 80226fc:	b08b      	sub	sp, #44	; 0x2c
 80226fe:	42ab      	cmp	r3, r5
 8022700:	9109      	str	r1, [sp, #36]	; 0x24
 8022702:	9604      	str	r6, [sp, #16]
 8022704:	8849      	ldrh	r1, [r1, #2]
 8022706:	f040 808a 	bne.w	802281e <arm_mat_mult_f32+0x132>
 802270a:	8815      	ldrh	r5, [r2, #0]
 802270c:	42b5      	cmp	r5, r6
 802270e:	f040 8086 	bne.w	802281e <arm_mat_mult_f32+0x132>
 8022712:	8852      	ldrh	r2, [r2, #2]
 8022714:	428a      	cmp	r2, r1
 8022716:	f040 8082 	bne.w	802281e <arm_mat_mult_f32+0x132>
 802271a:	ea4f 0893 	mov.w	r8, r3, lsr #2
 802271e:	1d01      	adds	r1, r0, #4
 8022720:	0116      	lsls	r6, r2, #4
 8022722:	9108      	str	r1, [sp, #32]
 8022724:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8022728:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 802272c:	9101      	str	r1, [sp, #4]
 802272e:	fb06 f108 	mul.w	r1, r6, r8
 8022732:	0095      	lsls	r5, r2, #2
 8022734:	9103      	str	r1, [sp, #12]
 8022736:	00d2      	lsls	r2, r2, #3
 8022738:	ea4f 018c 	mov.w	r1, ip, lsl #2
 802273c:	f003 0903 	and.w	r9, r3, #3
 8022740:	009b      	lsls	r3, r3, #2
 8022742:	f107 0b10 	add.w	fp, r7, #16
 8022746:	eb04 0a05 	add.w	sl, r4, r5
 802274a:	9107      	str	r1, [sp, #28]
 802274c:	9202      	str	r2, [sp, #8]
 802274e:	9306      	str	r3, [sp, #24]
 8022750:	f1ab 0310 	sub.w	r3, fp, #16
 8022754:	9305      	str	r3, [sp, #20]
 8022756:	9b07      	ldr	r3, [sp, #28]
 8022758:	f8dd e020 	ldr.w	lr, [sp, #32]
 802275c:	eb03 0c0a 	add.w	ip, r3, sl
 8022760:	eddf 7a31 	vldr	s15, [pc, #196]	; 8022828 <arm_mat_mult_f32+0x13c>
 8022764:	f1b8 0f00 	cmp.w	r8, #0
 8022768:	d053      	beq.n	8022812 <arm_mat_mult_f32+0x126>
 802276a:	9b02      	ldr	r3, [sp, #8]
 802276c:	4644      	mov	r4, r8
 802276e:	18c1      	adds	r1, r0, r3
 8022770:	4602      	mov	r2, r0
 8022772:	465b      	mov	r3, fp
 8022774:	ed92 6a00 	vldr	s12, [r2]
 8022778:	ed13 7a04 	vldr	s14, [r3, #-16]
 802277c:	ed53 4a03 	vldr	s9, [r3, #-12]
 8022780:	ed53 6a02 	vldr	s13, [r3, #-8]
 8022784:	ed91 5a00 	vldr	s10, [r1]
 8022788:	ed53 5a01 	vldr	s11, [r3, #-4]
 802278c:	1957      	adds	r7, r2, r5
 802278e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8022792:	ed97 6a00 	vldr	s12, [r7]
 8022796:	ee77 7a27 	vadd.f32	s15, s14, s15
 802279a:	ee26 6a24 	vmul.f32	s12, s12, s9
 802279e:	194f      	adds	r7, r1, r5
 80227a0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80227a4:	ee26 7a85 	vmul.f32	s14, s13, s10
 80227a8:	edd7 7a00 	vldr	s15, [r7]
 80227ac:	ee37 7a06 	vadd.f32	s14, s14, s12
 80227b0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80227b4:	3c01      	subs	r4, #1
 80227b6:	4432      	add	r2, r6
 80227b8:	4431      	add	r1, r6
 80227ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80227be:	f103 0310 	add.w	r3, r3, #16
 80227c2:	d1d7      	bne.n	8022774 <arm_mat_mult_f32+0x88>
 80227c4:	9b03      	ldr	r3, [sp, #12]
 80227c6:	9a01      	ldr	r2, [sp, #4]
 80227c8:	4418      	add	r0, r3
 80227ca:	f1b9 0f00 	cmp.w	r9, #0
 80227ce:	d00b      	beq.n	80227e8 <arm_mat_mult_f32+0xfc>
 80227d0:	464b      	mov	r3, r9
 80227d2:	edd0 6a00 	vldr	s13, [r0]
 80227d6:	ecb2 7a01 	vldmia	r2!, {s14}
 80227da:	ee27 7a26 	vmul.f32	s14, s14, s13
 80227de:	3b01      	subs	r3, #1
 80227e0:	4428      	add	r0, r5
 80227e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80227e6:	d1f4      	bne.n	80227d2 <arm_mat_mult_f32+0xe6>
 80227e8:	ecec 7a01 	vstmia	ip!, {s15}
 80227ec:	45d4      	cmp	ip, sl
 80227ee:	4670      	mov	r0, lr
 80227f0:	f10e 0e04 	add.w	lr, lr, #4
 80227f4:	d1b4      	bne.n	8022760 <arm_mat_mult_f32+0x74>
 80227f6:	9a01      	ldr	r2, [sp, #4]
 80227f8:	9b06      	ldr	r3, [sp, #24]
 80227fa:	4611      	mov	r1, r2
 80227fc:	4419      	add	r1, r3
 80227fe:	449b      	add	fp, r3
 8022800:	9b04      	ldr	r3, [sp, #16]
 8022802:	9101      	str	r1, [sp, #4]
 8022804:	3b01      	subs	r3, #1
 8022806:	44aa      	add	sl, r5
 8022808:	9304      	str	r3, [sp, #16]
 802280a:	d004      	beq.n	8022816 <arm_mat_mult_f32+0x12a>
 802280c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802280e:	6858      	ldr	r0, [r3, #4]
 8022810:	e79e      	b.n	8022750 <arm_mat_mult_f32+0x64>
 8022812:	9a05      	ldr	r2, [sp, #20]
 8022814:	e7d9      	b.n	80227ca <arm_mat_mult_f32+0xde>
 8022816:	4618      	mov	r0, r3
 8022818:	b00b      	add	sp, #44	; 0x2c
 802281a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802281e:	f06f 0002 	mvn.w	r0, #2
 8022822:	b00b      	add	sp, #44	; 0x2c
 8022824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022828:	00000000 	.word	0x00000000

0802282c <arm_mat_inverse_f32>:
 802282c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022830:	8843      	ldrh	r3, [r0, #2]
 8022832:	8804      	ldrh	r4, [r0, #0]
 8022834:	684e      	ldr	r6, [r1, #4]
 8022836:	f8d0 9004 	ldr.w	r9, [r0, #4]
 802283a:	b087      	sub	sp, #28
 802283c:	429c      	cmp	r4, r3
 802283e:	9301      	str	r3, [sp, #4]
 8022840:	9603      	str	r6, [sp, #12]
 8022842:	f040 80ea 	bne.w	8022a1a <arm_mat_inverse_f32+0x1ee>
 8022846:	880a      	ldrh	r2, [r1, #0]
 8022848:	884b      	ldrh	r3, [r1, #2]
 802284a:	4293      	cmp	r3, r2
 802284c:	f040 80e5 	bne.w	8022a1a <arm_mat_inverse_f32+0x1ee>
 8022850:	429c      	cmp	r4, r3
 8022852:	f040 80e2 	bne.w	8022a1a <arm_mat_inverse_f32+0x1ee>
 8022856:	9005      	str	r0, [sp, #20]
 8022858:	b30c      	cbz	r4, 802289e <arm_mat_inverse_f32+0x72>
 802285a:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 802285e:	1e67      	subs	r7, r4, #1
 8022860:	f846 bb04 	str.w	fp, [r6], #4
 8022864:	d01b      	beq.n	802289e <arm_mat_inverse_f32+0x72>
 8022866:	f04f 0801 	mov.w	r8, #1
 802286a:	00ba      	lsls	r2, r7, #2
 802286c:	eb06 0a02 	add.w	sl, r6, r2
 8022870:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8022874:	4630      	mov	r0, r6
 8022876:	2100      	movs	r1, #0
 8022878:	f001 f84a 	bl	8023910 <memset>
 802287c:	eb0a 0605 	add.w	r6, sl, r5
 8022880:	462a      	mov	r2, r5
 8022882:	2100      	movs	r1, #0
 8022884:	4650      	mov	r0, sl
 8022886:	f1b8 0f00 	cmp.w	r8, #0
 802288a:	f000 80cb 	beq.w	8022a24 <arm_mat_inverse_f32+0x1f8>
 802288e:	f001 f83f 	bl	8023910 <memset>
 8022892:	3f01      	subs	r7, #1
 8022894:	f108 0801 	add.w	r8, r8, #1
 8022898:	f846 bb04 	str.w	fp, [r6], #4
 802289c:	d1e5      	bne.n	802286a <arm_mat_inverse_f32+0x3e>
 802289e:	9b01      	ldr	r3, [sp, #4]
 80228a0:	2b00      	cmp	r3, #0
 80228a2:	f000 80b5 	beq.w	8022a10 <arm_mat_inverse_f32+0x1e4>
 80228a6:	009d      	lsls	r5, r3, #2
 80228a8:	eb09 0205 	add.w	r2, r9, r5
 80228ac:	46cc      	mov	ip, r9
 80228ae:	9202      	str	r2, [sp, #8]
 80228b0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80228b4:	1d2a      	adds	r2, r5, #4
 80228b6:	9204      	str	r2, [sp, #16]
 80228b8:	462f      	mov	r7, r5
 80228ba:	469e      	mov	lr, r3
 80228bc:	2600      	movs	r6, #0
 80228be:	9b02      	ldr	r3, [sp, #8]
 80228c0:	eddc 6a00 	vldr	s13, [ip]
 80228c4:	42b4      	cmp	r4, r6
 80228c6:	eba3 0b07 	sub.w	fp, r3, r7
 80228ca:	f000 80a1 	beq.w	8022a10 <arm_mat_inverse_f32+0x1e4>
 80228ce:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8022a34 <arm_mat_inverse_f32+0x208>
 80228d2:	4632      	mov	r2, r6
 80228d4:	4663      	mov	r3, ip
 80228d6:	e00b      	b.n	80228f0 <arm_mat_inverse_f32+0xc4>
 80228d8:	eef4 7a47 	vcmp.f32	s15, s14
 80228dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228e0:	f102 0201 	add.w	r2, r2, #1
 80228e4:	bfc8      	it	gt
 80228e6:	eeb0 7a67 	vmovgt.f32	s14, s15
 80228ea:	42a2      	cmp	r2, r4
 80228ec:	442b      	add	r3, r5
 80228ee:	d014      	beq.n	802291a <arm_mat_inverse_f32+0xee>
 80228f0:	edd3 7a00 	vldr	s15, [r3]
 80228f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80228f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228fc:	eeb1 6a67 	vneg.f32	s12, s15
 8022900:	dcea      	bgt.n	80228d8 <arm_mat_inverse_f32+0xac>
 8022902:	eeb4 6a47 	vcmp.f32	s12, s14
 8022906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802290a:	f102 0201 	add.w	r2, r2, #1
 802290e:	bfc8      	it	gt
 8022910:	eeb0 7a46 	vmovgt.f32	s14, s12
 8022914:	42a2      	cmp	r2, r4
 8022916:	442b      	add	r3, r5
 8022918:	d1ea      	bne.n	80228f0 <arm_mat_inverse_f32+0xc4>
 802291a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802291e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022922:	d075      	beq.n	8022a10 <arm_mat_inverse_f32+0x1e4>
 8022924:	eef5 6a40 	vcmp.f32	s13, #0.0
 8022928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802292c:	d070      	beq.n	8022a10 <arm_mat_inverse_f32+0x1e4>
 802292e:	4672      	mov	r2, lr
 8022930:	4663      	mov	r3, ip
 8022932:	ed93 7a00 	vldr	s14, [r3]
 8022936:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802293a:	3a01      	subs	r2, #1
 802293c:	ece3 7a01 	vstmia	r3!, {s15}
 8022940:	d1f7      	bne.n	8022932 <arm_mat_inverse_f32+0x106>
 8022942:	9901      	ldr	r1, [sp, #4]
 8022944:	464b      	mov	r3, r9
 8022946:	ed93 7a00 	vldr	s14, [r3]
 802294a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802294e:	3901      	subs	r1, #1
 8022950:	ece3 7a01 	vstmia	r3!, {s15}
 8022954:	d1f7      	bne.n	8022946 <arm_mat_inverse_f32+0x11a>
 8022956:	9803      	ldr	r0, [sp, #12]
 8022958:	ea4f 0886 	mov.w	r8, r6, lsl #2
 802295c:	42b1      	cmp	r1, r6
 802295e:	d039      	beq.n	80229d4 <arm_mat_inverse_f32+0x1a8>
 8022960:	eddb 6a00 	vldr	s13, [fp]
 8022964:	465a      	mov	r2, fp
 8022966:	4673      	mov	r3, lr
 8022968:	46e2      	mov	sl, ip
 802296a:	ecba 7a01 	vldmia	sl!, {s14}
 802296e:	edd2 7a00 	vldr	s15, [r2]
 8022972:	ee26 7a87 	vmul.f32	s14, s13, s14
 8022976:	3b01      	subs	r3, #1
 8022978:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802297c:	ece2 7a01 	vstmia	r2!, {s15}
 8022980:	d1f3      	bne.n	802296a <arm_mat_inverse_f32+0x13e>
 8022982:	9b01      	ldr	r3, [sp, #4]
 8022984:	44bb      	add	fp, r7
 8022986:	4602      	mov	r2, r0
 8022988:	46ca      	mov	sl, r9
 802298a:	ecba 7a01 	vldmia	sl!, {s14}
 802298e:	edd2 7a00 	vldr	s15, [r2]
 8022992:	ee26 7a87 	vmul.f32	s14, s13, s14
 8022996:	3b01      	subs	r3, #1
 8022998:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802299c:	ece2 7a01 	vstmia	r2!, {s15}
 80229a0:	d1f3      	bne.n	802298a <arm_mat_inverse_f32+0x15e>
 80229a2:	4428      	add	r0, r5
 80229a4:	3101      	adds	r1, #1
 80229a6:	428c      	cmp	r4, r1
 80229a8:	44c3      	add	fp, r8
 80229aa:	d1d7      	bne.n	802295c <arm_mat_inverse_f32+0x130>
 80229ac:	9b04      	ldr	r3, [sp, #16]
 80229ae:	f1be 0e01 	subs.w	lr, lr, #1
 80229b2:	f106 0601 	add.w	r6, r6, #1
 80229b6:	449c      	add	ip, r3
 80229b8:	f1a7 0704 	sub.w	r7, r7, #4
 80229bc:	44a9      	add	r9, r5
 80229be:	f47f af7e 	bne.w	80228be <arm_mat_inverse_f32+0x92>
 80229c2:	eef5 6a40 	vcmp.f32	s13, #0.0
 80229c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80229ca:	d006      	beq.n	80229da <arm_mat_inverse_f32+0x1ae>
 80229cc:	2000      	movs	r0, #0
 80229ce:	b007      	add	sp, #28
 80229d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229d4:	44bb      	add	fp, r7
 80229d6:	4428      	add	r0, r5
 80229d8:	e7e4      	b.n	80229a4 <arm_mat_inverse_f32+0x178>
 80229da:	9b05      	ldr	r3, [sp, #20]
 80229dc:	9a01      	ldr	r2, [sp, #4]
 80229de:	685b      	ldr	r3, [r3, #4]
 80229e0:	edd3 7a00 	vldr	s15, [r3]
 80229e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80229e8:	fb02 f204 	mul.w	r2, r2, r4
 80229ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80229f0:	4614      	mov	r4, r2
 80229f2:	bf08      	it	eq
 80229f4:	3304      	addeq	r3, #4
 80229f6:	d007      	beq.n	8022a08 <arm_mat_inverse_f32+0x1dc>
 80229f8:	e7e8      	b.n	80229cc <arm_mat_inverse_f32+0x1a0>
 80229fa:	ecf3 7a01 	vldmia	r3!, {s15}
 80229fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8022a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a06:	d1e1      	bne.n	80229cc <arm_mat_inverse_f32+0x1a0>
 8022a08:	f10e 0e01 	add.w	lr, lr, #1
 8022a0c:	4574      	cmp	r4, lr
 8022a0e:	d1f4      	bne.n	80229fa <arm_mat_inverse_f32+0x1ce>
 8022a10:	f06f 0004 	mvn.w	r0, #4
 8022a14:	b007      	add	sp, #28
 8022a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a1a:	f06f 0002 	mvn.w	r0, #2
 8022a1e:	b007      	add	sp, #28
 8022a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a24:	4656      	mov	r6, sl
 8022a26:	3f01      	subs	r7, #1
 8022a28:	f846 bb04 	str.w	fp, [r6], #4
 8022a2c:	f47f af1b 	bne.w	8022866 <arm_mat_inverse_f32+0x3a>
 8022a30:	e735      	b.n	802289e <arm_mat_inverse_f32+0x72>
 8022a32:	bf00      	nop
 8022a34:	00000000 	.word	0x00000000

08022a38 <arm_sin_f32>:
 8022a38:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8022ab8 <arm_sin_f32+0x80>
 8022a3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8022a40:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8022a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a48:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8022a4c:	d504      	bpl.n	8022a58 <arm_sin_f32+0x20>
 8022a4e:	ee17 3a90 	vmov	r3, s15
 8022a52:	3b01      	subs	r3, #1
 8022a54:	ee07 3a90 	vmov	s15, r3
 8022a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022a5c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8022abc <arm_sin_f32+0x84>
 8022a60:	ee30 0a67 	vsub.f32	s0, s0, s15
 8022a64:	ee20 0a07 	vmul.f32	s0, s0, s14
 8022a68:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8022a6c:	ee17 3a90 	vmov	r3, s15
 8022a70:	b29b      	uxth	r3, r3
 8022a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022a76:	d21a      	bcs.n	8022aae <arm_sin_f32+0x76>
 8022a78:	ee07 3a90 	vmov	s15, r3
 8022a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022a80:	1c59      	adds	r1, r3, #1
 8022a82:	ee30 0a67 	vsub.f32	s0, s0, s15
 8022a86:	4a0e      	ldr	r2, [pc, #56]	; (8022ac0 <arm_sin_f32+0x88>)
 8022a88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022a8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022a90:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8022a94:	ed93 7a00 	vldr	s14, [r3]
 8022a98:	edd2 6a00 	vldr	s13, [r2]
 8022a9c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8022aa0:	ee20 0a26 	vmul.f32	s0, s0, s13
 8022aa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022aa8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8022aac:	4770      	bx	lr
 8022aae:	ee30 0a47 	vsub.f32	s0, s0, s14
 8022ab2:	2101      	movs	r1, #1
 8022ab4:	2300      	movs	r3, #0
 8022ab6:	e7e6      	b.n	8022a86 <arm_sin_f32+0x4e>
 8022ab8:	3e22f983 	.word	0x3e22f983
 8022abc:	44000000 	.word	0x44000000
 8022ac0:	0802d954 	.word	0x0802d954

08022ac4 <arm_cos_f32>:
 8022ac4:	eddf 7a21 	vldr	s15, [pc, #132]	; 8022b4c <arm_cos_f32+0x88>
 8022ac8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8022acc:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8022ad0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8022ad4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8022ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022adc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8022ae0:	d504      	bpl.n	8022aec <arm_cos_f32+0x28>
 8022ae2:	ee17 3a90 	vmov	r3, s15
 8022ae6:	3b01      	subs	r3, #1
 8022ae8:	ee07 3a90 	vmov	s15, r3
 8022aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022af0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8022b50 <arm_cos_f32+0x8c>
 8022af4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8022af8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8022afc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8022b00:	ee17 3a90 	vmov	r3, s15
 8022b04:	b29b      	uxth	r3, r3
 8022b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022b0a:	d21a      	bcs.n	8022b42 <arm_cos_f32+0x7e>
 8022b0c:	ee07 3a90 	vmov	s15, r3
 8022b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022b14:	1c59      	adds	r1, r3, #1
 8022b16:	ee30 0a67 	vsub.f32	s0, s0, s15
 8022b1a:	4a0e      	ldr	r2, [pc, #56]	; (8022b54 <arm_cos_f32+0x90>)
 8022b1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022b20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022b24:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8022b28:	ed93 7a00 	vldr	s14, [r3]
 8022b2c:	edd2 6a00 	vldr	s13, [r2]
 8022b30:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8022b34:	ee20 0a26 	vmul.f32	s0, s0, s13
 8022b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022b3c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8022b40:	4770      	bx	lr
 8022b42:	ee30 0a47 	vsub.f32	s0, s0, s14
 8022b46:	2101      	movs	r1, #1
 8022b48:	2300      	movs	r3, #0
 8022b4a:	e7e6      	b.n	8022b1a <arm_cos_f32+0x56>
 8022b4c:	3e22f983 	.word	0x3e22f983
 8022b50:	44000000 	.word	0x44000000
 8022b54:	0802d954 	.word	0x0802d954

08022b58 <__cvt>:
 8022b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022b5c:	ec55 4b10 	vmov	r4, r5, d0
 8022b60:	2d00      	cmp	r5, #0
 8022b62:	460e      	mov	r6, r1
 8022b64:	4619      	mov	r1, r3
 8022b66:	462b      	mov	r3, r5
 8022b68:	bfbb      	ittet	lt
 8022b6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8022b6e:	461d      	movlt	r5, r3
 8022b70:	2300      	movge	r3, #0
 8022b72:	232d      	movlt	r3, #45	; 0x2d
 8022b74:	700b      	strb	r3, [r1, #0]
 8022b76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022b78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8022b7c:	4691      	mov	r9, r2
 8022b7e:	f023 0820 	bic.w	r8, r3, #32
 8022b82:	bfbc      	itt	lt
 8022b84:	4622      	movlt	r2, r4
 8022b86:	4614      	movlt	r4, r2
 8022b88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8022b8c:	d005      	beq.n	8022b9a <__cvt+0x42>
 8022b8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8022b92:	d100      	bne.n	8022b96 <__cvt+0x3e>
 8022b94:	3601      	adds	r6, #1
 8022b96:	2102      	movs	r1, #2
 8022b98:	e000      	b.n	8022b9c <__cvt+0x44>
 8022b9a:	2103      	movs	r1, #3
 8022b9c:	ab03      	add	r3, sp, #12
 8022b9e:	9301      	str	r3, [sp, #4]
 8022ba0:	ab02      	add	r3, sp, #8
 8022ba2:	9300      	str	r3, [sp, #0]
 8022ba4:	ec45 4b10 	vmov	d0, r4, r5
 8022ba8:	4653      	mov	r3, sl
 8022baa:	4632      	mov	r2, r6
 8022bac:	f001 f858 	bl	8023c60 <_dtoa_r>
 8022bb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8022bb4:	4607      	mov	r7, r0
 8022bb6:	d102      	bne.n	8022bbe <__cvt+0x66>
 8022bb8:	f019 0f01 	tst.w	r9, #1
 8022bbc:	d022      	beq.n	8022c04 <__cvt+0xac>
 8022bbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8022bc2:	eb07 0906 	add.w	r9, r7, r6
 8022bc6:	d110      	bne.n	8022bea <__cvt+0x92>
 8022bc8:	783b      	ldrb	r3, [r7, #0]
 8022bca:	2b30      	cmp	r3, #48	; 0x30
 8022bcc:	d10a      	bne.n	8022be4 <__cvt+0x8c>
 8022bce:	2200      	movs	r2, #0
 8022bd0:	2300      	movs	r3, #0
 8022bd2:	4620      	mov	r0, r4
 8022bd4:	4629      	mov	r1, r5
 8022bd6:	f7dd ff87 	bl	8000ae8 <__aeabi_dcmpeq>
 8022bda:	b918      	cbnz	r0, 8022be4 <__cvt+0x8c>
 8022bdc:	f1c6 0601 	rsb	r6, r6, #1
 8022be0:	f8ca 6000 	str.w	r6, [sl]
 8022be4:	f8da 3000 	ldr.w	r3, [sl]
 8022be8:	4499      	add	r9, r3
 8022bea:	2200      	movs	r2, #0
 8022bec:	2300      	movs	r3, #0
 8022bee:	4620      	mov	r0, r4
 8022bf0:	4629      	mov	r1, r5
 8022bf2:	f7dd ff79 	bl	8000ae8 <__aeabi_dcmpeq>
 8022bf6:	b108      	cbz	r0, 8022bfc <__cvt+0xa4>
 8022bf8:	f8cd 900c 	str.w	r9, [sp, #12]
 8022bfc:	2230      	movs	r2, #48	; 0x30
 8022bfe:	9b03      	ldr	r3, [sp, #12]
 8022c00:	454b      	cmp	r3, r9
 8022c02:	d307      	bcc.n	8022c14 <__cvt+0xbc>
 8022c04:	9b03      	ldr	r3, [sp, #12]
 8022c06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022c08:	1bdb      	subs	r3, r3, r7
 8022c0a:	4638      	mov	r0, r7
 8022c0c:	6013      	str	r3, [r2, #0]
 8022c0e:	b004      	add	sp, #16
 8022c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c14:	1c59      	adds	r1, r3, #1
 8022c16:	9103      	str	r1, [sp, #12]
 8022c18:	701a      	strb	r2, [r3, #0]
 8022c1a:	e7f0      	b.n	8022bfe <__cvt+0xa6>

08022c1c <__exponent>:
 8022c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022c1e:	4603      	mov	r3, r0
 8022c20:	2900      	cmp	r1, #0
 8022c22:	bfb8      	it	lt
 8022c24:	4249      	neglt	r1, r1
 8022c26:	f803 2b02 	strb.w	r2, [r3], #2
 8022c2a:	bfb4      	ite	lt
 8022c2c:	222d      	movlt	r2, #45	; 0x2d
 8022c2e:	222b      	movge	r2, #43	; 0x2b
 8022c30:	2909      	cmp	r1, #9
 8022c32:	7042      	strb	r2, [r0, #1]
 8022c34:	dd2a      	ble.n	8022c8c <__exponent+0x70>
 8022c36:	f10d 0207 	add.w	r2, sp, #7
 8022c3a:	4617      	mov	r7, r2
 8022c3c:	260a      	movs	r6, #10
 8022c3e:	4694      	mov	ip, r2
 8022c40:	fb91 f5f6 	sdiv	r5, r1, r6
 8022c44:	fb06 1415 	mls	r4, r6, r5, r1
 8022c48:	3430      	adds	r4, #48	; 0x30
 8022c4a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8022c4e:	460c      	mov	r4, r1
 8022c50:	2c63      	cmp	r4, #99	; 0x63
 8022c52:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8022c56:	4629      	mov	r1, r5
 8022c58:	dcf1      	bgt.n	8022c3e <__exponent+0x22>
 8022c5a:	3130      	adds	r1, #48	; 0x30
 8022c5c:	f1ac 0402 	sub.w	r4, ip, #2
 8022c60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8022c64:	1c41      	adds	r1, r0, #1
 8022c66:	4622      	mov	r2, r4
 8022c68:	42ba      	cmp	r2, r7
 8022c6a:	d30a      	bcc.n	8022c82 <__exponent+0x66>
 8022c6c:	f10d 0209 	add.w	r2, sp, #9
 8022c70:	eba2 020c 	sub.w	r2, r2, ip
 8022c74:	42bc      	cmp	r4, r7
 8022c76:	bf88      	it	hi
 8022c78:	2200      	movhi	r2, #0
 8022c7a:	4413      	add	r3, r2
 8022c7c:	1a18      	subs	r0, r3, r0
 8022c7e:	b003      	add	sp, #12
 8022c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022c82:	f812 5b01 	ldrb.w	r5, [r2], #1
 8022c86:	f801 5f01 	strb.w	r5, [r1, #1]!
 8022c8a:	e7ed      	b.n	8022c68 <__exponent+0x4c>
 8022c8c:	2330      	movs	r3, #48	; 0x30
 8022c8e:	3130      	adds	r1, #48	; 0x30
 8022c90:	7083      	strb	r3, [r0, #2]
 8022c92:	70c1      	strb	r1, [r0, #3]
 8022c94:	1d03      	adds	r3, r0, #4
 8022c96:	e7f1      	b.n	8022c7c <__exponent+0x60>

08022c98 <_printf_float>:
 8022c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c9c:	ed2d 8b02 	vpush	{d8}
 8022ca0:	b08d      	sub	sp, #52	; 0x34
 8022ca2:	460c      	mov	r4, r1
 8022ca4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8022ca8:	4616      	mov	r6, r2
 8022caa:	461f      	mov	r7, r3
 8022cac:	4605      	mov	r5, r0
 8022cae:	f000 fe67 	bl	8023980 <_localeconv_r>
 8022cb2:	f8d0 a000 	ldr.w	sl, [r0]
 8022cb6:	4650      	mov	r0, sl
 8022cb8:	f7dd faea 	bl	8000290 <strlen>
 8022cbc:	2300      	movs	r3, #0
 8022cbe:	930a      	str	r3, [sp, #40]	; 0x28
 8022cc0:	6823      	ldr	r3, [r4, #0]
 8022cc2:	9305      	str	r3, [sp, #20]
 8022cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8022cc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8022ccc:	3307      	adds	r3, #7
 8022cce:	f023 0307 	bic.w	r3, r3, #7
 8022cd2:	f103 0208 	add.w	r2, r3, #8
 8022cd6:	f8c8 2000 	str.w	r2, [r8]
 8022cda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8022cde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022ce2:	9307      	str	r3, [sp, #28]
 8022ce4:	f8cd 8018 	str.w	r8, [sp, #24]
 8022ce8:	ee08 0a10 	vmov	s16, r0
 8022cec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8022cf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022cf4:	4b9e      	ldr	r3, [pc, #632]	; (8022f70 <_printf_float+0x2d8>)
 8022cf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022cfa:	f7dd ff27 	bl	8000b4c <__aeabi_dcmpun>
 8022cfe:	bb88      	cbnz	r0, 8022d64 <_printf_float+0xcc>
 8022d00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022d04:	4b9a      	ldr	r3, [pc, #616]	; (8022f70 <_printf_float+0x2d8>)
 8022d06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022d0a:	f7dd ff01 	bl	8000b10 <__aeabi_dcmple>
 8022d0e:	bb48      	cbnz	r0, 8022d64 <_printf_float+0xcc>
 8022d10:	2200      	movs	r2, #0
 8022d12:	2300      	movs	r3, #0
 8022d14:	4640      	mov	r0, r8
 8022d16:	4649      	mov	r1, r9
 8022d18:	f7dd fef0 	bl	8000afc <__aeabi_dcmplt>
 8022d1c:	b110      	cbz	r0, 8022d24 <_printf_float+0x8c>
 8022d1e:	232d      	movs	r3, #45	; 0x2d
 8022d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022d24:	4a93      	ldr	r2, [pc, #588]	; (8022f74 <_printf_float+0x2dc>)
 8022d26:	4b94      	ldr	r3, [pc, #592]	; (8022f78 <_printf_float+0x2e0>)
 8022d28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8022d2c:	bf94      	ite	ls
 8022d2e:	4690      	movls	r8, r2
 8022d30:	4698      	movhi	r8, r3
 8022d32:	2303      	movs	r3, #3
 8022d34:	6123      	str	r3, [r4, #16]
 8022d36:	9b05      	ldr	r3, [sp, #20]
 8022d38:	f023 0304 	bic.w	r3, r3, #4
 8022d3c:	6023      	str	r3, [r4, #0]
 8022d3e:	f04f 0900 	mov.w	r9, #0
 8022d42:	9700      	str	r7, [sp, #0]
 8022d44:	4633      	mov	r3, r6
 8022d46:	aa0b      	add	r2, sp, #44	; 0x2c
 8022d48:	4621      	mov	r1, r4
 8022d4a:	4628      	mov	r0, r5
 8022d4c:	f000 f9da 	bl	8023104 <_printf_common>
 8022d50:	3001      	adds	r0, #1
 8022d52:	f040 8090 	bne.w	8022e76 <_printf_float+0x1de>
 8022d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022d5a:	b00d      	add	sp, #52	; 0x34
 8022d5c:	ecbd 8b02 	vpop	{d8}
 8022d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d64:	4642      	mov	r2, r8
 8022d66:	464b      	mov	r3, r9
 8022d68:	4640      	mov	r0, r8
 8022d6a:	4649      	mov	r1, r9
 8022d6c:	f7dd feee 	bl	8000b4c <__aeabi_dcmpun>
 8022d70:	b140      	cbz	r0, 8022d84 <_printf_float+0xec>
 8022d72:	464b      	mov	r3, r9
 8022d74:	2b00      	cmp	r3, #0
 8022d76:	bfbc      	itt	lt
 8022d78:	232d      	movlt	r3, #45	; 0x2d
 8022d7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8022d7e:	4a7f      	ldr	r2, [pc, #508]	; (8022f7c <_printf_float+0x2e4>)
 8022d80:	4b7f      	ldr	r3, [pc, #508]	; (8022f80 <_printf_float+0x2e8>)
 8022d82:	e7d1      	b.n	8022d28 <_printf_float+0x90>
 8022d84:	6863      	ldr	r3, [r4, #4]
 8022d86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8022d8a:	9206      	str	r2, [sp, #24]
 8022d8c:	1c5a      	adds	r2, r3, #1
 8022d8e:	d13f      	bne.n	8022e10 <_printf_float+0x178>
 8022d90:	2306      	movs	r3, #6
 8022d92:	6063      	str	r3, [r4, #4]
 8022d94:	9b05      	ldr	r3, [sp, #20]
 8022d96:	6861      	ldr	r1, [r4, #4]
 8022d98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8022d9c:	2300      	movs	r3, #0
 8022d9e:	9303      	str	r3, [sp, #12]
 8022da0:	ab0a      	add	r3, sp, #40	; 0x28
 8022da2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8022da6:	ab09      	add	r3, sp, #36	; 0x24
 8022da8:	ec49 8b10 	vmov	d0, r8, r9
 8022dac:	9300      	str	r3, [sp, #0]
 8022dae:	6022      	str	r2, [r4, #0]
 8022db0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8022db4:	4628      	mov	r0, r5
 8022db6:	f7ff fecf 	bl	8022b58 <__cvt>
 8022dba:	9b06      	ldr	r3, [sp, #24]
 8022dbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022dbe:	2b47      	cmp	r3, #71	; 0x47
 8022dc0:	4680      	mov	r8, r0
 8022dc2:	d108      	bne.n	8022dd6 <_printf_float+0x13e>
 8022dc4:	1cc8      	adds	r0, r1, #3
 8022dc6:	db02      	blt.n	8022dce <_printf_float+0x136>
 8022dc8:	6863      	ldr	r3, [r4, #4]
 8022dca:	4299      	cmp	r1, r3
 8022dcc:	dd41      	ble.n	8022e52 <_printf_float+0x1ba>
 8022dce:	f1ab 0302 	sub.w	r3, fp, #2
 8022dd2:	fa5f fb83 	uxtb.w	fp, r3
 8022dd6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8022dda:	d820      	bhi.n	8022e1e <_printf_float+0x186>
 8022ddc:	3901      	subs	r1, #1
 8022dde:	465a      	mov	r2, fp
 8022de0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8022de4:	9109      	str	r1, [sp, #36]	; 0x24
 8022de6:	f7ff ff19 	bl	8022c1c <__exponent>
 8022dea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022dec:	1813      	adds	r3, r2, r0
 8022dee:	2a01      	cmp	r2, #1
 8022df0:	4681      	mov	r9, r0
 8022df2:	6123      	str	r3, [r4, #16]
 8022df4:	dc02      	bgt.n	8022dfc <_printf_float+0x164>
 8022df6:	6822      	ldr	r2, [r4, #0]
 8022df8:	07d2      	lsls	r2, r2, #31
 8022dfa:	d501      	bpl.n	8022e00 <_printf_float+0x168>
 8022dfc:	3301      	adds	r3, #1
 8022dfe:	6123      	str	r3, [r4, #16]
 8022e00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8022e04:	2b00      	cmp	r3, #0
 8022e06:	d09c      	beq.n	8022d42 <_printf_float+0xaa>
 8022e08:	232d      	movs	r3, #45	; 0x2d
 8022e0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022e0e:	e798      	b.n	8022d42 <_printf_float+0xaa>
 8022e10:	9a06      	ldr	r2, [sp, #24]
 8022e12:	2a47      	cmp	r2, #71	; 0x47
 8022e14:	d1be      	bne.n	8022d94 <_printf_float+0xfc>
 8022e16:	2b00      	cmp	r3, #0
 8022e18:	d1bc      	bne.n	8022d94 <_printf_float+0xfc>
 8022e1a:	2301      	movs	r3, #1
 8022e1c:	e7b9      	b.n	8022d92 <_printf_float+0xfa>
 8022e1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8022e22:	d118      	bne.n	8022e56 <_printf_float+0x1be>
 8022e24:	2900      	cmp	r1, #0
 8022e26:	6863      	ldr	r3, [r4, #4]
 8022e28:	dd0b      	ble.n	8022e42 <_printf_float+0x1aa>
 8022e2a:	6121      	str	r1, [r4, #16]
 8022e2c:	b913      	cbnz	r3, 8022e34 <_printf_float+0x19c>
 8022e2e:	6822      	ldr	r2, [r4, #0]
 8022e30:	07d0      	lsls	r0, r2, #31
 8022e32:	d502      	bpl.n	8022e3a <_printf_float+0x1a2>
 8022e34:	3301      	adds	r3, #1
 8022e36:	440b      	add	r3, r1
 8022e38:	6123      	str	r3, [r4, #16]
 8022e3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8022e3c:	f04f 0900 	mov.w	r9, #0
 8022e40:	e7de      	b.n	8022e00 <_printf_float+0x168>
 8022e42:	b913      	cbnz	r3, 8022e4a <_printf_float+0x1b2>
 8022e44:	6822      	ldr	r2, [r4, #0]
 8022e46:	07d2      	lsls	r2, r2, #31
 8022e48:	d501      	bpl.n	8022e4e <_printf_float+0x1b6>
 8022e4a:	3302      	adds	r3, #2
 8022e4c:	e7f4      	b.n	8022e38 <_printf_float+0x1a0>
 8022e4e:	2301      	movs	r3, #1
 8022e50:	e7f2      	b.n	8022e38 <_printf_float+0x1a0>
 8022e52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8022e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e58:	4299      	cmp	r1, r3
 8022e5a:	db05      	blt.n	8022e68 <_printf_float+0x1d0>
 8022e5c:	6823      	ldr	r3, [r4, #0]
 8022e5e:	6121      	str	r1, [r4, #16]
 8022e60:	07d8      	lsls	r0, r3, #31
 8022e62:	d5ea      	bpl.n	8022e3a <_printf_float+0x1a2>
 8022e64:	1c4b      	adds	r3, r1, #1
 8022e66:	e7e7      	b.n	8022e38 <_printf_float+0x1a0>
 8022e68:	2900      	cmp	r1, #0
 8022e6a:	bfd4      	ite	le
 8022e6c:	f1c1 0202 	rsble	r2, r1, #2
 8022e70:	2201      	movgt	r2, #1
 8022e72:	4413      	add	r3, r2
 8022e74:	e7e0      	b.n	8022e38 <_printf_float+0x1a0>
 8022e76:	6823      	ldr	r3, [r4, #0]
 8022e78:	055a      	lsls	r2, r3, #21
 8022e7a:	d407      	bmi.n	8022e8c <_printf_float+0x1f4>
 8022e7c:	6923      	ldr	r3, [r4, #16]
 8022e7e:	4642      	mov	r2, r8
 8022e80:	4631      	mov	r1, r6
 8022e82:	4628      	mov	r0, r5
 8022e84:	47b8      	blx	r7
 8022e86:	3001      	adds	r0, #1
 8022e88:	d12c      	bne.n	8022ee4 <_printf_float+0x24c>
 8022e8a:	e764      	b.n	8022d56 <_printf_float+0xbe>
 8022e8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8022e90:	f240 80e0 	bls.w	8023054 <_printf_float+0x3bc>
 8022e94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8022e98:	2200      	movs	r2, #0
 8022e9a:	2300      	movs	r3, #0
 8022e9c:	f7dd fe24 	bl	8000ae8 <__aeabi_dcmpeq>
 8022ea0:	2800      	cmp	r0, #0
 8022ea2:	d034      	beq.n	8022f0e <_printf_float+0x276>
 8022ea4:	4a37      	ldr	r2, [pc, #220]	; (8022f84 <_printf_float+0x2ec>)
 8022ea6:	2301      	movs	r3, #1
 8022ea8:	4631      	mov	r1, r6
 8022eaa:	4628      	mov	r0, r5
 8022eac:	47b8      	blx	r7
 8022eae:	3001      	adds	r0, #1
 8022eb0:	f43f af51 	beq.w	8022d56 <_printf_float+0xbe>
 8022eb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8022eb8:	429a      	cmp	r2, r3
 8022eba:	db02      	blt.n	8022ec2 <_printf_float+0x22a>
 8022ebc:	6823      	ldr	r3, [r4, #0]
 8022ebe:	07d8      	lsls	r0, r3, #31
 8022ec0:	d510      	bpl.n	8022ee4 <_printf_float+0x24c>
 8022ec2:	ee18 3a10 	vmov	r3, s16
 8022ec6:	4652      	mov	r2, sl
 8022ec8:	4631      	mov	r1, r6
 8022eca:	4628      	mov	r0, r5
 8022ecc:	47b8      	blx	r7
 8022ece:	3001      	adds	r0, #1
 8022ed0:	f43f af41 	beq.w	8022d56 <_printf_float+0xbe>
 8022ed4:	f04f 0800 	mov.w	r8, #0
 8022ed8:	f104 091a 	add.w	r9, r4, #26
 8022edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ede:	3b01      	subs	r3, #1
 8022ee0:	4543      	cmp	r3, r8
 8022ee2:	dc09      	bgt.n	8022ef8 <_printf_float+0x260>
 8022ee4:	6823      	ldr	r3, [r4, #0]
 8022ee6:	079b      	lsls	r3, r3, #30
 8022ee8:	f100 8107 	bmi.w	80230fa <_printf_float+0x462>
 8022eec:	68e0      	ldr	r0, [r4, #12]
 8022eee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022ef0:	4298      	cmp	r0, r3
 8022ef2:	bfb8      	it	lt
 8022ef4:	4618      	movlt	r0, r3
 8022ef6:	e730      	b.n	8022d5a <_printf_float+0xc2>
 8022ef8:	2301      	movs	r3, #1
 8022efa:	464a      	mov	r2, r9
 8022efc:	4631      	mov	r1, r6
 8022efe:	4628      	mov	r0, r5
 8022f00:	47b8      	blx	r7
 8022f02:	3001      	adds	r0, #1
 8022f04:	f43f af27 	beq.w	8022d56 <_printf_float+0xbe>
 8022f08:	f108 0801 	add.w	r8, r8, #1
 8022f0c:	e7e6      	b.n	8022edc <_printf_float+0x244>
 8022f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f10:	2b00      	cmp	r3, #0
 8022f12:	dc39      	bgt.n	8022f88 <_printf_float+0x2f0>
 8022f14:	4a1b      	ldr	r2, [pc, #108]	; (8022f84 <_printf_float+0x2ec>)
 8022f16:	2301      	movs	r3, #1
 8022f18:	4631      	mov	r1, r6
 8022f1a:	4628      	mov	r0, r5
 8022f1c:	47b8      	blx	r7
 8022f1e:	3001      	adds	r0, #1
 8022f20:	f43f af19 	beq.w	8022d56 <_printf_float+0xbe>
 8022f24:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8022f28:	4313      	orrs	r3, r2
 8022f2a:	d102      	bne.n	8022f32 <_printf_float+0x29a>
 8022f2c:	6823      	ldr	r3, [r4, #0]
 8022f2e:	07d9      	lsls	r1, r3, #31
 8022f30:	d5d8      	bpl.n	8022ee4 <_printf_float+0x24c>
 8022f32:	ee18 3a10 	vmov	r3, s16
 8022f36:	4652      	mov	r2, sl
 8022f38:	4631      	mov	r1, r6
 8022f3a:	4628      	mov	r0, r5
 8022f3c:	47b8      	blx	r7
 8022f3e:	3001      	adds	r0, #1
 8022f40:	f43f af09 	beq.w	8022d56 <_printf_float+0xbe>
 8022f44:	f04f 0900 	mov.w	r9, #0
 8022f48:	f104 0a1a 	add.w	sl, r4, #26
 8022f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f4e:	425b      	negs	r3, r3
 8022f50:	454b      	cmp	r3, r9
 8022f52:	dc01      	bgt.n	8022f58 <_printf_float+0x2c0>
 8022f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f56:	e792      	b.n	8022e7e <_printf_float+0x1e6>
 8022f58:	2301      	movs	r3, #1
 8022f5a:	4652      	mov	r2, sl
 8022f5c:	4631      	mov	r1, r6
 8022f5e:	4628      	mov	r0, r5
 8022f60:	47b8      	blx	r7
 8022f62:	3001      	adds	r0, #1
 8022f64:	f43f aef7 	beq.w	8022d56 <_printf_float+0xbe>
 8022f68:	f109 0901 	add.w	r9, r9, #1
 8022f6c:	e7ee      	b.n	8022f4c <_printf_float+0x2b4>
 8022f6e:	bf00      	nop
 8022f70:	7fefffff 	.word	0x7fefffff
 8022f74:	0802e259 	.word	0x0802e259
 8022f78:	0802e25d 	.word	0x0802e25d
 8022f7c:	0802e261 	.word	0x0802e261
 8022f80:	0802e265 	.word	0x0802e265
 8022f84:	0802e269 	.word	0x0802e269
 8022f88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022f8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022f8c:	429a      	cmp	r2, r3
 8022f8e:	bfa8      	it	ge
 8022f90:	461a      	movge	r2, r3
 8022f92:	2a00      	cmp	r2, #0
 8022f94:	4691      	mov	r9, r2
 8022f96:	dc37      	bgt.n	8023008 <_printf_float+0x370>
 8022f98:	f04f 0b00 	mov.w	fp, #0
 8022f9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8022fa0:	f104 021a 	add.w	r2, r4, #26
 8022fa4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022fa6:	9305      	str	r3, [sp, #20]
 8022fa8:	eba3 0309 	sub.w	r3, r3, r9
 8022fac:	455b      	cmp	r3, fp
 8022fae:	dc33      	bgt.n	8023018 <_printf_float+0x380>
 8022fb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8022fb4:	429a      	cmp	r2, r3
 8022fb6:	db3b      	blt.n	8023030 <_printf_float+0x398>
 8022fb8:	6823      	ldr	r3, [r4, #0]
 8022fba:	07da      	lsls	r2, r3, #31
 8022fbc:	d438      	bmi.n	8023030 <_printf_float+0x398>
 8022fbe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8022fc2:	eba2 0903 	sub.w	r9, r2, r3
 8022fc6:	9b05      	ldr	r3, [sp, #20]
 8022fc8:	1ad2      	subs	r2, r2, r3
 8022fca:	4591      	cmp	r9, r2
 8022fcc:	bfa8      	it	ge
 8022fce:	4691      	movge	r9, r2
 8022fd0:	f1b9 0f00 	cmp.w	r9, #0
 8022fd4:	dc35      	bgt.n	8023042 <_printf_float+0x3aa>
 8022fd6:	f04f 0800 	mov.w	r8, #0
 8022fda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8022fde:	f104 0a1a 	add.w	sl, r4, #26
 8022fe2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8022fe6:	1a9b      	subs	r3, r3, r2
 8022fe8:	eba3 0309 	sub.w	r3, r3, r9
 8022fec:	4543      	cmp	r3, r8
 8022fee:	f77f af79 	ble.w	8022ee4 <_printf_float+0x24c>
 8022ff2:	2301      	movs	r3, #1
 8022ff4:	4652      	mov	r2, sl
 8022ff6:	4631      	mov	r1, r6
 8022ff8:	4628      	mov	r0, r5
 8022ffa:	47b8      	blx	r7
 8022ffc:	3001      	adds	r0, #1
 8022ffe:	f43f aeaa 	beq.w	8022d56 <_printf_float+0xbe>
 8023002:	f108 0801 	add.w	r8, r8, #1
 8023006:	e7ec      	b.n	8022fe2 <_printf_float+0x34a>
 8023008:	4613      	mov	r3, r2
 802300a:	4631      	mov	r1, r6
 802300c:	4642      	mov	r2, r8
 802300e:	4628      	mov	r0, r5
 8023010:	47b8      	blx	r7
 8023012:	3001      	adds	r0, #1
 8023014:	d1c0      	bne.n	8022f98 <_printf_float+0x300>
 8023016:	e69e      	b.n	8022d56 <_printf_float+0xbe>
 8023018:	2301      	movs	r3, #1
 802301a:	4631      	mov	r1, r6
 802301c:	4628      	mov	r0, r5
 802301e:	9205      	str	r2, [sp, #20]
 8023020:	47b8      	blx	r7
 8023022:	3001      	adds	r0, #1
 8023024:	f43f ae97 	beq.w	8022d56 <_printf_float+0xbe>
 8023028:	9a05      	ldr	r2, [sp, #20]
 802302a:	f10b 0b01 	add.w	fp, fp, #1
 802302e:	e7b9      	b.n	8022fa4 <_printf_float+0x30c>
 8023030:	ee18 3a10 	vmov	r3, s16
 8023034:	4652      	mov	r2, sl
 8023036:	4631      	mov	r1, r6
 8023038:	4628      	mov	r0, r5
 802303a:	47b8      	blx	r7
 802303c:	3001      	adds	r0, #1
 802303e:	d1be      	bne.n	8022fbe <_printf_float+0x326>
 8023040:	e689      	b.n	8022d56 <_printf_float+0xbe>
 8023042:	9a05      	ldr	r2, [sp, #20]
 8023044:	464b      	mov	r3, r9
 8023046:	4442      	add	r2, r8
 8023048:	4631      	mov	r1, r6
 802304a:	4628      	mov	r0, r5
 802304c:	47b8      	blx	r7
 802304e:	3001      	adds	r0, #1
 8023050:	d1c1      	bne.n	8022fd6 <_printf_float+0x33e>
 8023052:	e680      	b.n	8022d56 <_printf_float+0xbe>
 8023054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023056:	2a01      	cmp	r2, #1
 8023058:	dc01      	bgt.n	802305e <_printf_float+0x3c6>
 802305a:	07db      	lsls	r3, r3, #31
 802305c:	d53a      	bpl.n	80230d4 <_printf_float+0x43c>
 802305e:	2301      	movs	r3, #1
 8023060:	4642      	mov	r2, r8
 8023062:	4631      	mov	r1, r6
 8023064:	4628      	mov	r0, r5
 8023066:	47b8      	blx	r7
 8023068:	3001      	adds	r0, #1
 802306a:	f43f ae74 	beq.w	8022d56 <_printf_float+0xbe>
 802306e:	ee18 3a10 	vmov	r3, s16
 8023072:	4652      	mov	r2, sl
 8023074:	4631      	mov	r1, r6
 8023076:	4628      	mov	r0, r5
 8023078:	47b8      	blx	r7
 802307a:	3001      	adds	r0, #1
 802307c:	f43f ae6b 	beq.w	8022d56 <_printf_float+0xbe>
 8023080:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8023084:	2200      	movs	r2, #0
 8023086:	2300      	movs	r3, #0
 8023088:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 802308c:	f7dd fd2c 	bl	8000ae8 <__aeabi_dcmpeq>
 8023090:	b9d8      	cbnz	r0, 80230ca <_printf_float+0x432>
 8023092:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8023096:	f108 0201 	add.w	r2, r8, #1
 802309a:	4631      	mov	r1, r6
 802309c:	4628      	mov	r0, r5
 802309e:	47b8      	blx	r7
 80230a0:	3001      	adds	r0, #1
 80230a2:	d10e      	bne.n	80230c2 <_printf_float+0x42a>
 80230a4:	e657      	b.n	8022d56 <_printf_float+0xbe>
 80230a6:	2301      	movs	r3, #1
 80230a8:	4652      	mov	r2, sl
 80230aa:	4631      	mov	r1, r6
 80230ac:	4628      	mov	r0, r5
 80230ae:	47b8      	blx	r7
 80230b0:	3001      	adds	r0, #1
 80230b2:	f43f ae50 	beq.w	8022d56 <_printf_float+0xbe>
 80230b6:	f108 0801 	add.w	r8, r8, #1
 80230ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80230bc:	3b01      	subs	r3, #1
 80230be:	4543      	cmp	r3, r8
 80230c0:	dcf1      	bgt.n	80230a6 <_printf_float+0x40e>
 80230c2:	464b      	mov	r3, r9
 80230c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80230c8:	e6da      	b.n	8022e80 <_printf_float+0x1e8>
 80230ca:	f04f 0800 	mov.w	r8, #0
 80230ce:	f104 0a1a 	add.w	sl, r4, #26
 80230d2:	e7f2      	b.n	80230ba <_printf_float+0x422>
 80230d4:	2301      	movs	r3, #1
 80230d6:	4642      	mov	r2, r8
 80230d8:	e7df      	b.n	802309a <_printf_float+0x402>
 80230da:	2301      	movs	r3, #1
 80230dc:	464a      	mov	r2, r9
 80230de:	4631      	mov	r1, r6
 80230e0:	4628      	mov	r0, r5
 80230e2:	47b8      	blx	r7
 80230e4:	3001      	adds	r0, #1
 80230e6:	f43f ae36 	beq.w	8022d56 <_printf_float+0xbe>
 80230ea:	f108 0801 	add.w	r8, r8, #1
 80230ee:	68e3      	ldr	r3, [r4, #12]
 80230f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80230f2:	1a5b      	subs	r3, r3, r1
 80230f4:	4543      	cmp	r3, r8
 80230f6:	dcf0      	bgt.n	80230da <_printf_float+0x442>
 80230f8:	e6f8      	b.n	8022eec <_printf_float+0x254>
 80230fa:	f04f 0800 	mov.w	r8, #0
 80230fe:	f104 0919 	add.w	r9, r4, #25
 8023102:	e7f4      	b.n	80230ee <_printf_float+0x456>

08023104 <_printf_common>:
 8023104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023108:	4616      	mov	r6, r2
 802310a:	4699      	mov	r9, r3
 802310c:	688a      	ldr	r2, [r1, #8]
 802310e:	690b      	ldr	r3, [r1, #16]
 8023110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023114:	4293      	cmp	r3, r2
 8023116:	bfb8      	it	lt
 8023118:	4613      	movlt	r3, r2
 802311a:	6033      	str	r3, [r6, #0]
 802311c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023120:	4607      	mov	r7, r0
 8023122:	460c      	mov	r4, r1
 8023124:	b10a      	cbz	r2, 802312a <_printf_common+0x26>
 8023126:	3301      	adds	r3, #1
 8023128:	6033      	str	r3, [r6, #0]
 802312a:	6823      	ldr	r3, [r4, #0]
 802312c:	0699      	lsls	r1, r3, #26
 802312e:	bf42      	ittt	mi
 8023130:	6833      	ldrmi	r3, [r6, #0]
 8023132:	3302      	addmi	r3, #2
 8023134:	6033      	strmi	r3, [r6, #0]
 8023136:	6825      	ldr	r5, [r4, #0]
 8023138:	f015 0506 	ands.w	r5, r5, #6
 802313c:	d106      	bne.n	802314c <_printf_common+0x48>
 802313e:	f104 0a19 	add.w	sl, r4, #25
 8023142:	68e3      	ldr	r3, [r4, #12]
 8023144:	6832      	ldr	r2, [r6, #0]
 8023146:	1a9b      	subs	r3, r3, r2
 8023148:	42ab      	cmp	r3, r5
 802314a:	dc26      	bgt.n	802319a <_printf_common+0x96>
 802314c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023150:	1e13      	subs	r3, r2, #0
 8023152:	6822      	ldr	r2, [r4, #0]
 8023154:	bf18      	it	ne
 8023156:	2301      	movne	r3, #1
 8023158:	0692      	lsls	r2, r2, #26
 802315a:	d42b      	bmi.n	80231b4 <_printf_common+0xb0>
 802315c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023160:	4649      	mov	r1, r9
 8023162:	4638      	mov	r0, r7
 8023164:	47c0      	blx	r8
 8023166:	3001      	adds	r0, #1
 8023168:	d01e      	beq.n	80231a8 <_printf_common+0xa4>
 802316a:	6823      	ldr	r3, [r4, #0]
 802316c:	6922      	ldr	r2, [r4, #16]
 802316e:	f003 0306 	and.w	r3, r3, #6
 8023172:	2b04      	cmp	r3, #4
 8023174:	bf02      	ittt	eq
 8023176:	68e5      	ldreq	r5, [r4, #12]
 8023178:	6833      	ldreq	r3, [r6, #0]
 802317a:	1aed      	subeq	r5, r5, r3
 802317c:	68a3      	ldr	r3, [r4, #8]
 802317e:	bf0c      	ite	eq
 8023180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023184:	2500      	movne	r5, #0
 8023186:	4293      	cmp	r3, r2
 8023188:	bfc4      	itt	gt
 802318a:	1a9b      	subgt	r3, r3, r2
 802318c:	18ed      	addgt	r5, r5, r3
 802318e:	2600      	movs	r6, #0
 8023190:	341a      	adds	r4, #26
 8023192:	42b5      	cmp	r5, r6
 8023194:	d11a      	bne.n	80231cc <_printf_common+0xc8>
 8023196:	2000      	movs	r0, #0
 8023198:	e008      	b.n	80231ac <_printf_common+0xa8>
 802319a:	2301      	movs	r3, #1
 802319c:	4652      	mov	r2, sl
 802319e:	4649      	mov	r1, r9
 80231a0:	4638      	mov	r0, r7
 80231a2:	47c0      	blx	r8
 80231a4:	3001      	adds	r0, #1
 80231a6:	d103      	bne.n	80231b0 <_printf_common+0xac>
 80231a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80231ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80231b0:	3501      	adds	r5, #1
 80231b2:	e7c6      	b.n	8023142 <_printf_common+0x3e>
 80231b4:	18e1      	adds	r1, r4, r3
 80231b6:	1c5a      	adds	r2, r3, #1
 80231b8:	2030      	movs	r0, #48	; 0x30
 80231ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80231be:	4422      	add	r2, r4
 80231c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80231c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80231c8:	3302      	adds	r3, #2
 80231ca:	e7c7      	b.n	802315c <_printf_common+0x58>
 80231cc:	2301      	movs	r3, #1
 80231ce:	4622      	mov	r2, r4
 80231d0:	4649      	mov	r1, r9
 80231d2:	4638      	mov	r0, r7
 80231d4:	47c0      	blx	r8
 80231d6:	3001      	adds	r0, #1
 80231d8:	d0e6      	beq.n	80231a8 <_printf_common+0xa4>
 80231da:	3601      	adds	r6, #1
 80231dc:	e7d9      	b.n	8023192 <_printf_common+0x8e>
	...

080231e0 <_printf_i>:
 80231e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80231e4:	7e0f      	ldrb	r7, [r1, #24]
 80231e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80231e8:	2f78      	cmp	r7, #120	; 0x78
 80231ea:	4691      	mov	r9, r2
 80231ec:	4680      	mov	r8, r0
 80231ee:	460c      	mov	r4, r1
 80231f0:	469a      	mov	sl, r3
 80231f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80231f6:	d807      	bhi.n	8023208 <_printf_i+0x28>
 80231f8:	2f62      	cmp	r7, #98	; 0x62
 80231fa:	d80a      	bhi.n	8023212 <_printf_i+0x32>
 80231fc:	2f00      	cmp	r7, #0
 80231fe:	f000 80d4 	beq.w	80233aa <_printf_i+0x1ca>
 8023202:	2f58      	cmp	r7, #88	; 0x58
 8023204:	f000 80c0 	beq.w	8023388 <_printf_i+0x1a8>
 8023208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802320c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023210:	e03a      	b.n	8023288 <_printf_i+0xa8>
 8023212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023216:	2b15      	cmp	r3, #21
 8023218:	d8f6      	bhi.n	8023208 <_printf_i+0x28>
 802321a:	a101      	add	r1, pc, #4	; (adr r1, 8023220 <_printf_i+0x40>)
 802321c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023220:	08023279 	.word	0x08023279
 8023224:	0802328d 	.word	0x0802328d
 8023228:	08023209 	.word	0x08023209
 802322c:	08023209 	.word	0x08023209
 8023230:	08023209 	.word	0x08023209
 8023234:	08023209 	.word	0x08023209
 8023238:	0802328d 	.word	0x0802328d
 802323c:	08023209 	.word	0x08023209
 8023240:	08023209 	.word	0x08023209
 8023244:	08023209 	.word	0x08023209
 8023248:	08023209 	.word	0x08023209
 802324c:	08023391 	.word	0x08023391
 8023250:	080232b9 	.word	0x080232b9
 8023254:	0802334b 	.word	0x0802334b
 8023258:	08023209 	.word	0x08023209
 802325c:	08023209 	.word	0x08023209
 8023260:	080233b3 	.word	0x080233b3
 8023264:	08023209 	.word	0x08023209
 8023268:	080232b9 	.word	0x080232b9
 802326c:	08023209 	.word	0x08023209
 8023270:	08023209 	.word	0x08023209
 8023274:	08023353 	.word	0x08023353
 8023278:	682b      	ldr	r3, [r5, #0]
 802327a:	1d1a      	adds	r2, r3, #4
 802327c:	681b      	ldr	r3, [r3, #0]
 802327e:	602a      	str	r2, [r5, #0]
 8023280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023288:	2301      	movs	r3, #1
 802328a:	e09f      	b.n	80233cc <_printf_i+0x1ec>
 802328c:	6820      	ldr	r0, [r4, #0]
 802328e:	682b      	ldr	r3, [r5, #0]
 8023290:	0607      	lsls	r7, r0, #24
 8023292:	f103 0104 	add.w	r1, r3, #4
 8023296:	6029      	str	r1, [r5, #0]
 8023298:	d501      	bpl.n	802329e <_printf_i+0xbe>
 802329a:	681e      	ldr	r6, [r3, #0]
 802329c:	e003      	b.n	80232a6 <_printf_i+0xc6>
 802329e:	0646      	lsls	r6, r0, #25
 80232a0:	d5fb      	bpl.n	802329a <_printf_i+0xba>
 80232a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80232a6:	2e00      	cmp	r6, #0
 80232a8:	da03      	bge.n	80232b2 <_printf_i+0xd2>
 80232aa:	232d      	movs	r3, #45	; 0x2d
 80232ac:	4276      	negs	r6, r6
 80232ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80232b2:	485a      	ldr	r0, [pc, #360]	; (802341c <_printf_i+0x23c>)
 80232b4:	230a      	movs	r3, #10
 80232b6:	e012      	b.n	80232de <_printf_i+0xfe>
 80232b8:	682b      	ldr	r3, [r5, #0]
 80232ba:	6820      	ldr	r0, [r4, #0]
 80232bc:	1d19      	adds	r1, r3, #4
 80232be:	6029      	str	r1, [r5, #0]
 80232c0:	0605      	lsls	r5, r0, #24
 80232c2:	d501      	bpl.n	80232c8 <_printf_i+0xe8>
 80232c4:	681e      	ldr	r6, [r3, #0]
 80232c6:	e002      	b.n	80232ce <_printf_i+0xee>
 80232c8:	0641      	lsls	r1, r0, #25
 80232ca:	d5fb      	bpl.n	80232c4 <_printf_i+0xe4>
 80232cc:	881e      	ldrh	r6, [r3, #0]
 80232ce:	4853      	ldr	r0, [pc, #332]	; (802341c <_printf_i+0x23c>)
 80232d0:	2f6f      	cmp	r7, #111	; 0x6f
 80232d2:	bf0c      	ite	eq
 80232d4:	2308      	moveq	r3, #8
 80232d6:	230a      	movne	r3, #10
 80232d8:	2100      	movs	r1, #0
 80232da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80232de:	6865      	ldr	r5, [r4, #4]
 80232e0:	60a5      	str	r5, [r4, #8]
 80232e2:	2d00      	cmp	r5, #0
 80232e4:	bfa2      	ittt	ge
 80232e6:	6821      	ldrge	r1, [r4, #0]
 80232e8:	f021 0104 	bicge.w	r1, r1, #4
 80232ec:	6021      	strge	r1, [r4, #0]
 80232ee:	b90e      	cbnz	r6, 80232f4 <_printf_i+0x114>
 80232f0:	2d00      	cmp	r5, #0
 80232f2:	d04b      	beq.n	802338c <_printf_i+0x1ac>
 80232f4:	4615      	mov	r5, r2
 80232f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80232fa:	fb03 6711 	mls	r7, r3, r1, r6
 80232fe:	5dc7      	ldrb	r7, [r0, r7]
 8023300:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8023304:	4637      	mov	r7, r6
 8023306:	42bb      	cmp	r3, r7
 8023308:	460e      	mov	r6, r1
 802330a:	d9f4      	bls.n	80232f6 <_printf_i+0x116>
 802330c:	2b08      	cmp	r3, #8
 802330e:	d10b      	bne.n	8023328 <_printf_i+0x148>
 8023310:	6823      	ldr	r3, [r4, #0]
 8023312:	07de      	lsls	r6, r3, #31
 8023314:	d508      	bpl.n	8023328 <_printf_i+0x148>
 8023316:	6923      	ldr	r3, [r4, #16]
 8023318:	6861      	ldr	r1, [r4, #4]
 802331a:	4299      	cmp	r1, r3
 802331c:	bfde      	ittt	le
 802331e:	2330      	movle	r3, #48	; 0x30
 8023320:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023324:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8023328:	1b52      	subs	r2, r2, r5
 802332a:	6122      	str	r2, [r4, #16]
 802332c:	f8cd a000 	str.w	sl, [sp]
 8023330:	464b      	mov	r3, r9
 8023332:	aa03      	add	r2, sp, #12
 8023334:	4621      	mov	r1, r4
 8023336:	4640      	mov	r0, r8
 8023338:	f7ff fee4 	bl	8023104 <_printf_common>
 802333c:	3001      	adds	r0, #1
 802333e:	d14a      	bne.n	80233d6 <_printf_i+0x1f6>
 8023340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023344:	b004      	add	sp, #16
 8023346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802334a:	6823      	ldr	r3, [r4, #0]
 802334c:	f043 0320 	orr.w	r3, r3, #32
 8023350:	6023      	str	r3, [r4, #0]
 8023352:	4833      	ldr	r0, [pc, #204]	; (8023420 <_printf_i+0x240>)
 8023354:	2778      	movs	r7, #120	; 0x78
 8023356:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802335a:	6823      	ldr	r3, [r4, #0]
 802335c:	6829      	ldr	r1, [r5, #0]
 802335e:	061f      	lsls	r7, r3, #24
 8023360:	f851 6b04 	ldr.w	r6, [r1], #4
 8023364:	d402      	bmi.n	802336c <_printf_i+0x18c>
 8023366:	065f      	lsls	r7, r3, #25
 8023368:	bf48      	it	mi
 802336a:	b2b6      	uxthmi	r6, r6
 802336c:	07df      	lsls	r7, r3, #31
 802336e:	bf48      	it	mi
 8023370:	f043 0320 	orrmi.w	r3, r3, #32
 8023374:	6029      	str	r1, [r5, #0]
 8023376:	bf48      	it	mi
 8023378:	6023      	strmi	r3, [r4, #0]
 802337a:	b91e      	cbnz	r6, 8023384 <_printf_i+0x1a4>
 802337c:	6823      	ldr	r3, [r4, #0]
 802337e:	f023 0320 	bic.w	r3, r3, #32
 8023382:	6023      	str	r3, [r4, #0]
 8023384:	2310      	movs	r3, #16
 8023386:	e7a7      	b.n	80232d8 <_printf_i+0xf8>
 8023388:	4824      	ldr	r0, [pc, #144]	; (802341c <_printf_i+0x23c>)
 802338a:	e7e4      	b.n	8023356 <_printf_i+0x176>
 802338c:	4615      	mov	r5, r2
 802338e:	e7bd      	b.n	802330c <_printf_i+0x12c>
 8023390:	682b      	ldr	r3, [r5, #0]
 8023392:	6826      	ldr	r6, [r4, #0]
 8023394:	6961      	ldr	r1, [r4, #20]
 8023396:	1d18      	adds	r0, r3, #4
 8023398:	6028      	str	r0, [r5, #0]
 802339a:	0635      	lsls	r5, r6, #24
 802339c:	681b      	ldr	r3, [r3, #0]
 802339e:	d501      	bpl.n	80233a4 <_printf_i+0x1c4>
 80233a0:	6019      	str	r1, [r3, #0]
 80233a2:	e002      	b.n	80233aa <_printf_i+0x1ca>
 80233a4:	0670      	lsls	r0, r6, #25
 80233a6:	d5fb      	bpl.n	80233a0 <_printf_i+0x1c0>
 80233a8:	8019      	strh	r1, [r3, #0]
 80233aa:	2300      	movs	r3, #0
 80233ac:	6123      	str	r3, [r4, #16]
 80233ae:	4615      	mov	r5, r2
 80233b0:	e7bc      	b.n	802332c <_printf_i+0x14c>
 80233b2:	682b      	ldr	r3, [r5, #0]
 80233b4:	1d1a      	adds	r2, r3, #4
 80233b6:	602a      	str	r2, [r5, #0]
 80233b8:	681d      	ldr	r5, [r3, #0]
 80233ba:	6862      	ldr	r2, [r4, #4]
 80233bc:	2100      	movs	r1, #0
 80233be:	4628      	mov	r0, r5
 80233c0:	f7dc ff16 	bl	80001f0 <memchr>
 80233c4:	b108      	cbz	r0, 80233ca <_printf_i+0x1ea>
 80233c6:	1b40      	subs	r0, r0, r5
 80233c8:	6060      	str	r0, [r4, #4]
 80233ca:	6863      	ldr	r3, [r4, #4]
 80233cc:	6123      	str	r3, [r4, #16]
 80233ce:	2300      	movs	r3, #0
 80233d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80233d4:	e7aa      	b.n	802332c <_printf_i+0x14c>
 80233d6:	6923      	ldr	r3, [r4, #16]
 80233d8:	462a      	mov	r2, r5
 80233da:	4649      	mov	r1, r9
 80233dc:	4640      	mov	r0, r8
 80233de:	47d0      	blx	sl
 80233e0:	3001      	adds	r0, #1
 80233e2:	d0ad      	beq.n	8023340 <_printf_i+0x160>
 80233e4:	6823      	ldr	r3, [r4, #0]
 80233e6:	079b      	lsls	r3, r3, #30
 80233e8:	d413      	bmi.n	8023412 <_printf_i+0x232>
 80233ea:	68e0      	ldr	r0, [r4, #12]
 80233ec:	9b03      	ldr	r3, [sp, #12]
 80233ee:	4298      	cmp	r0, r3
 80233f0:	bfb8      	it	lt
 80233f2:	4618      	movlt	r0, r3
 80233f4:	e7a6      	b.n	8023344 <_printf_i+0x164>
 80233f6:	2301      	movs	r3, #1
 80233f8:	4632      	mov	r2, r6
 80233fa:	4649      	mov	r1, r9
 80233fc:	4640      	mov	r0, r8
 80233fe:	47d0      	blx	sl
 8023400:	3001      	adds	r0, #1
 8023402:	d09d      	beq.n	8023340 <_printf_i+0x160>
 8023404:	3501      	adds	r5, #1
 8023406:	68e3      	ldr	r3, [r4, #12]
 8023408:	9903      	ldr	r1, [sp, #12]
 802340a:	1a5b      	subs	r3, r3, r1
 802340c:	42ab      	cmp	r3, r5
 802340e:	dcf2      	bgt.n	80233f6 <_printf_i+0x216>
 8023410:	e7eb      	b.n	80233ea <_printf_i+0x20a>
 8023412:	2500      	movs	r5, #0
 8023414:	f104 0619 	add.w	r6, r4, #25
 8023418:	e7f5      	b.n	8023406 <_printf_i+0x226>
 802341a:	bf00      	nop
 802341c:	0802e26b 	.word	0x0802e26b
 8023420:	0802e27c 	.word	0x0802e27c

08023424 <__sflush_r>:
 8023424:	898a      	ldrh	r2, [r1, #12]
 8023426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802342a:	4605      	mov	r5, r0
 802342c:	0710      	lsls	r0, r2, #28
 802342e:	460c      	mov	r4, r1
 8023430:	d458      	bmi.n	80234e4 <__sflush_r+0xc0>
 8023432:	684b      	ldr	r3, [r1, #4]
 8023434:	2b00      	cmp	r3, #0
 8023436:	dc05      	bgt.n	8023444 <__sflush_r+0x20>
 8023438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802343a:	2b00      	cmp	r3, #0
 802343c:	dc02      	bgt.n	8023444 <__sflush_r+0x20>
 802343e:	2000      	movs	r0, #0
 8023440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023446:	2e00      	cmp	r6, #0
 8023448:	d0f9      	beq.n	802343e <__sflush_r+0x1a>
 802344a:	2300      	movs	r3, #0
 802344c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023450:	682f      	ldr	r7, [r5, #0]
 8023452:	6a21      	ldr	r1, [r4, #32]
 8023454:	602b      	str	r3, [r5, #0]
 8023456:	d032      	beq.n	80234be <__sflush_r+0x9a>
 8023458:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802345a:	89a3      	ldrh	r3, [r4, #12]
 802345c:	075a      	lsls	r2, r3, #29
 802345e:	d505      	bpl.n	802346c <__sflush_r+0x48>
 8023460:	6863      	ldr	r3, [r4, #4]
 8023462:	1ac0      	subs	r0, r0, r3
 8023464:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023466:	b10b      	cbz	r3, 802346c <__sflush_r+0x48>
 8023468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802346a:	1ac0      	subs	r0, r0, r3
 802346c:	2300      	movs	r3, #0
 802346e:	4602      	mov	r2, r0
 8023470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023472:	6a21      	ldr	r1, [r4, #32]
 8023474:	4628      	mov	r0, r5
 8023476:	47b0      	blx	r6
 8023478:	1c43      	adds	r3, r0, #1
 802347a:	89a3      	ldrh	r3, [r4, #12]
 802347c:	d106      	bne.n	802348c <__sflush_r+0x68>
 802347e:	6829      	ldr	r1, [r5, #0]
 8023480:	291d      	cmp	r1, #29
 8023482:	d82b      	bhi.n	80234dc <__sflush_r+0xb8>
 8023484:	4a29      	ldr	r2, [pc, #164]	; (802352c <__sflush_r+0x108>)
 8023486:	410a      	asrs	r2, r1
 8023488:	07d6      	lsls	r6, r2, #31
 802348a:	d427      	bmi.n	80234dc <__sflush_r+0xb8>
 802348c:	2200      	movs	r2, #0
 802348e:	6062      	str	r2, [r4, #4]
 8023490:	04d9      	lsls	r1, r3, #19
 8023492:	6922      	ldr	r2, [r4, #16]
 8023494:	6022      	str	r2, [r4, #0]
 8023496:	d504      	bpl.n	80234a2 <__sflush_r+0x7e>
 8023498:	1c42      	adds	r2, r0, #1
 802349a:	d101      	bne.n	80234a0 <__sflush_r+0x7c>
 802349c:	682b      	ldr	r3, [r5, #0]
 802349e:	b903      	cbnz	r3, 80234a2 <__sflush_r+0x7e>
 80234a0:	6560      	str	r0, [r4, #84]	; 0x54
 80234a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80234a4:	602f      	str	r7, [r5, #0]
 80234a6:	2900      	cmp	r1, #0
 80234a8:	d0c9      	beq.n	802343e <__sflush_r+0x1a>
 80234aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80234ae:	4299      	cmp	r1, r3
 80234b0:	d002      	beq.n	80234b8 <__sflush_r+0x94>
 80234b2:	4628      	mov	r0, r5
 80234b4:	f001 f9c6 	bl	8024844 <_free_r>
 80234b8:	2000      	movs	r0, #0
 80234ba:	6360      	str	r0, [r4, #52]	; 0x34
 80234bc:	e7c0      	b.n	8023440 <__sflush_r+0x1c>
 80234be:	2301      	movs	r3, #1
 80234c0:	4628      	mov	r0, r5
 80234c2:	47b0      	blx	r6
 80234c4:	1c41      	adds	r1, r0, #1
 80234c6:	d1c8      	bne.n	802345a <__sflush_r+0x36>
 80234c8:	682b      	ldr	r3, [r5, #0]
 80234ca:	2b00      	cmp	r3, #0
 80234cc:	d0c5      	beq.n	802345a <__sflush_r+0x36>
 80234ce:	2b1d      	cmp	r3, #29
 80234d0:	d001      	beq.n	80234d6 <__sflush_r+0xb2>
 80234d2:	2b16      	cmp	r3, #22
 80234d4:	d101      	bne.n	80234da <__sflush_r+0xb6>
 80234d6:	602f      	str	r7, [r5, #0]
 80234d8:	e7b1      	b.n	802343e <__sflush_r+0x1a>
 80234da:	89a3      	ldrh	r3, [r4, #12]
 80234dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80234e0:	81a3      	strh	r3, [r4, #12]
 80234e2:	e7ad      	b.n	8023440 <__sflush_r+0x1c>
 80234e4:	690f      	ldr	r7, [r1, #16]
 80234e6:	2f00      	cmp	r7, #0
 80234e8:	d0a9      	beq.n	802343e <__sflush_r+0x1a>
 80234ea:	0793      	lsls	r3, r2, #30
 80234ec:	680e      	ldr	r6, [r1, #0]
 80234ee:	bf08      	it	eq
 80234f0:	694b      	ldreq	r3, [r1, #20]
 80234f2:	600f      	str	r7, [r1, #0]
 80234f4:	bf18      	it	ne
 80234f6:	2300      	movne	r3, #0
 80234f8:	eba6 0807 	sub.w	r8, r6, r7
 80234fc:	608b      	str	r3, [r1, #8]
 80234fe:	f1b8 0f00 	cmp.w	r8, #0
 8023502:	dd9c      	ble.n	802343e <__sflush_r+0x1a>
 8023504:	6a21      	ldr	r1, [r4, #32]
 8023506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023508:	4643      	mov	r3, r8
 802350a:	463a      	mov	r2, r7
 802350c:	4628      	mov	r0, r5
 802350e:	47b0      	blx	r6
 8023510:	2800      	cmp	r0, #0
 8023512:	dc06      	bgt.n	8023522 <__sflush_r+0xfe>
 8023514:	89a3      	ldrh	r3, [r4, #12]
 8023516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802351a:	81a3      	strh	r3, [r4, #12]
 802351c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023520:	e78e      	b.n	8023440 <__sflush_r+0x1c>
 8023522:	4407      	add	r7, r0
 8023524:	eba8 0800 	sub.w	r8, r8, r0
 8023528:	e7e9      	b.n	80234fe <__sflush_r+0xda>
 802352a:	bf00      	nop
 802352c:	dfbffffe 	.word	0xdfbffffe

08023530 <_fflush_r>:
 8023530:	b538      	push	{r3, r4, r5, lr}
 8023532:	690b      	ldr	r3, [r1, #16]
 8023534:	4605      	mov	r5, r0
 8023536:	460c      	mov	r4, r1
 8023538:	b913      	cbnz	r3, 8023540 <_fflush_r+0x10>
 802353a:	2500      	movs	r5, #0
 802353c:	4628      	mov	r0, r5
 802353e:	bd38      	pop	{r3, r4, r5, pc}
 8023540:	b118      	cbz	r0, 802354a <_fflush_r+0x1a>
 8023542:	6a03      	ldr	r3, [r0, #32]
 8023544:	b90b      	cbnz	r3, 802354a <_fflush_r+0x1a>
 8023546:	f000 f8bb 	bl	80236c0 <__sinit>
 802354a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802354e:	2b00      	cmp	r3, #0
 8023550:	d0f3      	beq.n	802353a <_fflush_r+0xa>
 8023552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023554:	07d0      	lsls	r0, r2, #31
 8023556:	d404      	bmi.n	8023562 <_fflush_r+0x32>
 8023558:	0599      	lsls	r1, r3, #22
 802355a:	d402      	bmi.n	8023562 <_fflush_r+0x32>
 802355c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802355e:	f000 fada 	bl	8023b16 <__retarget_lock_acquire_recursive>
 8023562:	4628      	mov	r0, r5
 8023564:	4621      	mov	r1, r4
 8023566:	f7ff ff5d 	bl	8023424 <__sflush_r>
 802356a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802356c:	07da      	lsls	r2, r3, #31
 802356e:	4605      	mov	r5, r0
 8023570:	d4e4      	bmi.n	802353c <_fflush_r+0xc>
 8023572:	89a3      	ldrh	r3, [r4, #12]
 8023574:	059b      	lsls	r3, r3, #22
 8023576:	d4e1      	bmi.n	802353c <_fflush_r+0xc>
 8023578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802357a:	f000 facd 	bl	8023b18 <__retarget_lock_release_recursive>
 802357e:	e7dd      	b.n	802353c <_fflush_r+0xc>

08023580 <fflush>:
 8023580:	4601      	mov	r1, r0
 8023582:	b920      	cbnz	r0, 802358e <fflush+0xe>
 8023584:	4a04      	ldr	r2, [pc, #16]	; (8023598 <fflush+0x18>)
 8023586:	4905      	ldr	r1, [pc, #20]	; (802359c <fflush+0x1c>)
 8023588:	4805      	ldr	r0, [pc, #20]	; (80235a0 <fflush+0x20>)
 802358a:	f000 b8b1 	b.w	80236f0 <_fwalk_sglue>
 802358e:	4b05      	ldr	r3, [pc, #20]	; (80235a4 <fflush+0x24>)
 8023590:	6818      	ldr	r0, [r3, #0]
 8023592:	f7ff bfcd 	b.w	8023530 <_fflush_r>
 8023596:	bf00      	nop
 8023598:	20000fe0 	.word	0x20000fe0
 802359c:	08023531 	.word	0x08023531
 80235a0:	20000fec 	.word	0x20000fec
 80235a4:	20001038 	.word	0x20001038

080235a8 <std>:
 80235a8:	2300      	movs	r3, #0
 80235aa:	b510      	push	{r4, lr}
 80235ac:	4604      	mov	r4, r0
 80235ae:	e9c0 3300 	strd	r3, r3, [r0]
 80235b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80235b6:	6083      	str	r3, [r0, #8]
 80235b8:	8181      	strh	r1, [r0, #12]
 80235ba:	6643      	str	r3, [r0, #100]	; 0x64
 80235bc:	81c2      	strh	r2, [r0, #14]
 80235be:	6183      	str	r3, [r0, #24]
 80235c0:	4619      	mov	r1, r3
 80235c2:	2208      	movs	r2, #8
 80235c4:	305c      	adds	r0, #92	; 0x5c
 80235c6:	f000 f9a3 	bl	8023910 <memset>
 80235ca:	4b0d      	ldr	r3, [pc, #52]	; (8023600 <std+0x58>)
 80235cc:	6263      	str	r3, [r4, #36]	; 0x24
 80235ce:	4b0d      	ldr	r3, [pc, #52]	; (8023604 <std+0x5c>)
 80235d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80235d2:	4b0d      	ldr	r3, [pc, #52]	; (8023608 <std+0x60>)
 80235d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80235d6:	4b0d      	ldr	r3, [pc, #52]	; (802360c <std+0x64>)
 80235d8:	6323      	str	r3, [r4, #48]	; 0x30
 80235da:	4b0d      	ldr	r3, [pc, #52]	; (8023610 <std+0x68>)
 80235dc:	6224      	str	r4, [r4, #32]
 80235de:	429c      	cmp	r4, r3
 80235e0:	d006      	beq.n	80235f0 <std+0x48>
 80235e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80235e6:	4294      	cmp	r4, r2
 80235e8:	d002      	beq.n	80235f0 <std+0x48>
 80235ea:	33d0      	adds	r3, #208	; 0xd0
 80235ec:	429c      	cmp	r4, r3
 80235ee:	d105      	bne.n	80235fc <std+0x54>
 80235f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80235f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80235f8:	f000 ba8c 	b.w	8023b14 <__retarget_lock_init_recursive>
 80235fc:	bd10      	pop	{r4, pc}
 80235fe:	bf00      	nop
 8023600:	08023761 	.word	0x08023761
 8023604:	08023783 	.word	0x08023783
 8023608:	080237bb 	.word	0x080237bb
 802360c:	080237df 	.word	0x080237df
 8023610:	20012d88 	.word	0x20012d88

08023614 <stdio_exit_handler>:
 8023614:	4a02      	ldr	r2, [pc, #8]	; (8023620 <stdio_exit_handler+0xc>)
 8023616:	4903      	ldr	r1, [pc, #12]	; (8023624 <stdio_exit_handler+0x10>)
 8023618:	4803      	ldr	r0, [pc, #12]	; (8023628 <stdio_exit_handler+0x14>)
 802361a:	f000 b869 	b.w	80236f0 <_fwalk_sglue>
 802361e:	bf00      	nop
 8023620:	20000fe0 	.word	0x20000fe0
 8023624:	08023531 	.word	0x08023531
 8023628:	20000fec 	.word	0x20000fec

0802362c <cleanup_stdio>:
 802362c:	6841      	ldr	r1, [r0, #4]
 802362e:	4b0c      	ldr	r3, [pc, #48]	; (8023660 <cleanup_stdio+0x34>)
 8023630:	4299      	cmp	r1, r3
 8023632:	b510      	push	{r4, lr}
 8023634:	4604      	mov	r4, r0
 8023636:	d001      	beq.n	802363c <cleanup_stdio+0x10>
 8023638:	f7ff ff7a 	bl	8023530 <_fflush_r>
 802363c:	68a1      	ldr	r1, [r4, #8]
 802363e:	4b09      	ldr	r3, [pc, #36]	; (8023664 <cleanup_stdio+0x38>)
 8023640:	4299      	cmp	r1, r3
 8023642:	d002      	beq.n	802364a <cleanup_stdio+0x1e>
 8023644:	4620      	mov	r0, r4
 8023646:	f7ff ff73 	bl	8023530 <_fflush_r>
 802364a:	68e1      	ldr	r1, [r4, #12]
 802364c:	4b06      	ldr	r3, [pc, #24]	; (8023668 <cleanup_stdio+0x3c>)
 802364e:	4299      	cmp	r1, r3
 8023650:	d004      	beq.n	802365c <cleanup_stdio+0x30>
 8023652:	4620      	mov	r0, r4
 8023654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023658:	f7ff bf6a 	b.w	8023530 <_fflush_r>
 802365c:	bd10      	pop	{r4, pc}
 802365e:	bf00      	nop
 8023660:	20012d88 	.word	0x20012d88
 8023664:	20012df0 	.word	0x20012df0
 8023668:	20012e58 	.word	0x20012e58

0802366c <global_stdio_init.part.0>:
 802366c:	b510      	push	{r4, lr}
 802366e:	4b0b      	ldr	r3, [pc, #44]	; (802369c <global_stdio_init.part.0+0x30>)
 8023670:	4c0b      	ldr	r4, [pc, #44]	; (80236a0 <global_stdio_init.part.0+0x34>)
 8023672:	4a0c      	ldr	r2, [pc, #48]	; (80236a4 <global_stdio_init.part.0+0x38>)
 8023674:	601a      	str	r2, [r3, #0]
 8023676:	4620      	mov	r0, r4
 8023678:	2200      	movs	r2, #0
 802367a:	2104      	movs	r1, #4
 802367c:	f7ff ff94 	bl	80235a8 <std>
 8023680:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8023684:	2201      	movs	r2, #1
 8023686:	2109      	movs	r1, #9
 8023688:	f7ff ff8e 	bl	80235a8 <std>
 802368c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8023690:	2202      	movs	r2, #2
 8023692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023696:	2112      	movs	r1, #18
 8023698:	f7ff bf86 	b.w	80235a8 <std>
 802369c:	20012ec0 	.word	0x20012ec0
 80236a0:	20012d88 	.word	0x20012d88
 80236a4:	08023615 	.word	0x08023615

080236a8 <__sfp_lock_acquire>:
 80236a8:	4801      	ldr	r0, [pc, #4]	; (80236b0 <__sfp_lock_acquire+0x8>)
 80236aa:	f000 ba34 	b.w	8023b16 <__retarget_lock_acquire_recursive>
 80236ae:	bf00      	nop
 80236b0:	20012ec9 	.word	0x20012ec9

080236b4 <__sfp_lock_release>:
 80236b4:	4801      	ldr	r0, [pc, #4]	; (80236bc <__sfp_lock_release+0x8>)
 80236b6:	f000 ba2f 	b.w	8023b18 <__retarget_lock_release_recursive>
 80236ba:	bf00      	nop
 80236bc:	20012ec9 	.word	0x20012ec9

080236c0 <__sinit>:
 80236c0:	b510      	push	{r4, lr}
 80236c2:	4604      	mov	r4, r0
 80236c4:	f7ff fff0 	bl	80236a8 <__sfp_lock_acquire>
 80236c8:	6a23      	ldr	r3, [r4, #32]
 80236ca:	b11b      	cbz	r3, 80236d4 <__sinit+0x14>
 80236cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80236d0:	f7ff bff0 	b.w	80236b4 <__sfp_lock_release>
 80236d4:	4b04      	ldr	r3, [pc, #16]	; (80236e8 <__sinit+0x28>)
 80236d6:	6223      	str	r3, [r4, #32]
 80236d8:	4b04      	ldr	r3, [pc, #16]	; (80236ec <__sinit+0x2c>)
 80236da:	681b      	ldr	r3, [r3, #0]
 80236dc:	2b00      	cmp	r3, #0
 80236de:	d1f5      	bne.n	80236cc <__sinit+0xc>
 80236e0:	f7ff ffc4 	bl	802366c <global_stdio_init.part.0>
 80236e4:	e7f2      	b.n	80236cc <__sinit+0xc>
 80236e6:	bf00      	nop
 80236e8:	0802362d 	.word	0x0802362d
 80236ec:	20012ec0 	.word	0x20012ec0

080236f0 <_fwalk_sglue>:
 80236f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80236f4:	4607      	mov	r7, r0
 80236f6:	4688      	mov	r8, r1
 80236f8:	4614      	mov	r4, r2
 80236fa:	2600      	movs	r6, #0
 80236fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023700:	f1b9 0901 	subs.w	r9, r9, #1
 8023704:	d505      	bpl.n	8023712 <_fwalk_sglue+0x22>
 8023706:	6824      	ldr	r4, [r4, #0]
 8023708:	2c00      	cmp	r4, #0
 802370a:	d1f7      	bne.n	80236fc <_fwalk_sglue+0xc>
 802370c:	4630      	mov	r0, r6
 802370e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023712:	89ab      	ldrh	r3, [r5, #12]
 8023714:	2b01      	cmp	r3, #1
 8023716:	d907      	bls.n	8023728 <_fwalk_sglue+0x38>
 8023718:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802371c:	3301      	adds	r3, #1
 802371e:	d003      	beq.n	8023728 <_fwalk_sglue+0x38>
 8023720:	4629      	mov	r1, r5
 8023722:	4638      	mov	r0, r7
 8023724:	47c0      	blx	r8
 8023726:	4306      	orrs	r6, r0
 8023728:	3568      	adds	r5, #104	; 0x68
 802372a:	e7e9      	b.n	8023700 <_fwalk_sglue+0x10>

0802372c <iprintf>:
 802372c:	b40f      	push	{r0, r1, r2, r3}
 802372e:	b507      	push	{r0, r1, r2, lr}
 8023730:	4906      	ldr	r1, [pc, #24]	; (802374c <iprintf+0x20>)
 8023732:	ab04      	add	r3, sp, #16
 8023734:	6808      	ldr	r0, [r1, #0]
 8023736:	f853 2b04 	ldr.w	r2, [r3], #4
 802373a:	6881      	ldr	r1, [r0, #8]
 802373c:	9301      	str	r3, [sp, #4]
 802373e:	f001 fd27 	bl	8025190 <_vfiprintf_r>
 8023742:	b003      	add	sp, #12
 8023744:	f85d eb04 	ldr.w	lr, [sp], #4
 8023748:	b004      	add	sp, #16
 802374a:	4770      	bx	lr
 802374c:	20001038 	.word	0x20001038

08023750 <putchar>:
 8023750:	4b02      	ldr	r3, [pc, #8]	; (802375c <putchar+0xc>)
 8023752:	4601      	mov	r1, r0
 8023754:	6818      	ldr	r0, [r3, #0]
 8023756:	6882      	ldr	r2, [r0, #8]
 8023758:	f001 be96 	b.w	8025488 <_putc_r>
 802375c:	20001038 	.word	0x20001038

08023760 <__sread>:
 8023760:	b510      	push	{r4, lr}
 8023762:	460c      	mov	r4, r1
 8023764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023768:	f000 f986 	bl	8023a78 <_read_r>
 802376c:	2800      	cmp	r0, #0
 802376e:	bfab      	itete	ge
 8023770:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023772:	89a3      	ldrhlt	r3, [r4, #12]
 8023774:	181b      	addge	r3, r3, r0
 8023776:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802377a:	bfac      	ite	ge
 802377c:	6563      	strge	r3, [r4, #84]	; 0x54
 802377e:	81a3      	strhlt	r3, [r4, #12]
 8023780:	bd10      	pop	{r4, pc}

08023782 <__swrite>:
 8023782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023786:	461f      	mov	r7, r3
 8023788:	898b      	ldrh	r3, [r1, #12]
 802378a:	05db      	lsls	r3, r3, #23
 802378c:	4605      	mov	r5, r0
 802378e:	460c      	mov	r4, r1
 8023790:	4616      	mov	r6, r2
 8023792:	d505      	bpl.n	80237a0 <__swrite+0x1e>
 8023794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023798:	2302      	movs	r3, #2
 802379a:	2200      	movs	r2, #0
 802379c:	f000 f95a 	bl	8023a54 <_lseek_r>
 80237a0:	89a3      	ldrh	r3, [r4, #12]
 80237a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80237a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80237aa:	81a3      	strh	r3, [r4, #12]
 80237ac:	4632      	mov	r2, r6
 80237ae:	463b      	mov	r3, r7
 80237b0:	4628      	mov	r0, r5
 80237b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80237b6:	f000 b971 	b.w	8023a9c <_write_r>

080237ba <__sseek>:
 80237ba:	b510      	push	{r4, lr}
 80237bc:	460c      	mov	r4, r1
 80237be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80237c2:	f000 f947 	bl	8023a54 <_lseek_r>
 80237c6:	1c43      	adds	r3, r0, #1
 80237c8:	89a3      	ldrh	r3, [r4, #12]
 80237ca:	bf15      	itete	ne
 80237cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80237ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80237d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80237d6:	81a3      	strheq	r3, [r4, #12]
 80237d8:	bf18      	it	ne
 80237da:	81a3      	strhne	r3, [r4, #12]
 80237dc:	bd10      	pop	{r4, pc}

080237de <__sclose>:
 80237de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80237e2:	f000 b8d1 	b.w	8023988 <_close_r>

080237e6 <__swbuf_r>:
 80237e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80237e8:	460e      	mov	r6, r1
 80237ea:	4614      	mov	r4, r2
 80237ec:	4605      	mov	r5, r0
 80237ee:	b118      	cbz	r0, 80237f8 <__swbuf_r+0x12>
 80237f0:	6a03      	ldr	r3, [r0, #32]
 80237f2:	b90b      	cbnz	r3, 80237f8 <__swbuf_r+0x12>
 80237f4:	f7ff ff64 	bl	80236c0 <__sinit>
 80237f8:	69a3      	ldr	r3, [r4, #24]
 80237fa:	60a3      	str	r3, [r4, #8]
 80237fc:	89a3      	ldrh	r3, [r4, #12]
 80237fe:	071a      	lsls	r2, r3, #28
 8023800:	d525      	bpl.n	802384e <__swbuf_r+0x68>
 8023802:	6923      	ldr	r3, [r4, #16]
 8023804:	b31b      	cbz	r3, 802384e <__swbuf_r+0x68>
 8023806:	6823      	ldr	r3, [r4, #0]
 8023808:	6922      	ldr	r2, [r4, #16]
 802380a:	1a98      	subs	r0, r3, r2
 802380c:	6963      	ldr	r3, [r4, #20]
 802380e:	b2f6      	uxtb	r6, r6
 8023810:	4283      	cmp	r3, r0
 8023812:	4637      	mov	r7, r6
 8023814:	dc04      	bgt.n	8023820 <__swbuf_r+0x3a>
 8023816:	4621      	mov	r1, r4
 8023818:	4628      	mov	r0, r5
 802381a:	f7ff fe89 	bl	8023530 <_fflush_r>
 802381e:	b9e0      	cbnz	r0, 802385a <__swbuf_r+0x74>
 8023820:	68a3      	ldr	r3, [r4, #8]
 8023822:	3b01      	subs	r3, #1
 8023824:	60a3      	str	r3, [r4, #8]
 8023826:	6823      	ldr	r3, [r4, #0]
 8023828:	1c5a      	adds	r2, r3, #1
 802382a:	6022      	str	r2, [r4, #0]
 802382c:	701e      	strb	r6, [r3, #0]
 802382e:	6962      	ldr	r2, [r4, #20]
 8023830:	1c43      	adds	r3, r0, #1
 8023832:	429a      	cmp	r2, r3
 8023834:	d004      	beq.n	8023840 <__swbuf_r+0x5a>
 8023836:	89a3      	ldrh	r3, [r4, #12]
 8023838:	07db      	lsls	r3, r3, #31
 802383a:	d506      	bpl.n	802384a <__swbuf_r+0x64>
 802383c:	2e0a      	cmp	r6, #10
 802383e:	d104      	bne.n	802384a <__swbuf_r+0x64>
 8023840:	4621      	mov	r1, r4
 8023842:	4628      	mov	r0, r5
 8023844:	f7ff fe74 	bl	8023530 <_fflush_r>
 8023848:	b938      	cbnz	r0, 802385a <__swbuf_r+0x74>
 802384a:	4638      	mov	r0, r7
 802384c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802384e:	4621      	mov	r1, r4
 8023850:	4628      	mov	r0, r5
 8023852:	f000 f805 	bl	8023860 <__swsetup_r>
 8023856:	2800      	cmp	r0, #0
 8023858:	d0d5      	beq.n	8023806 <__swbuf_r+0x20>
 802385a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 802385e:	e7f4      	b.n	802384a <__swbuf_r+0x64>

08023860 <__swsetup_r>:
 8023860:	b538      	push	{r3, r4, r5, lr}
 8023862:	4b2a      	ldr	r3, [pc, #168]	; (802390c <__swsetup_r+0xac>)
 8023864:	4605      	mov	r5, r0
 8023866:	6818      	ldr	r0, [r3, #0]
 8023868:	460c      	mov	r4, r1
 802386a:	b118      	cbz	r0, 8023874 <__swsetup_r+0x14>
 802386c:	6a03      	ldr	r3, [r0, #32]
 802386e:	b90b      	cbnz	r3, 8023874 <__swsetup_r+0x14>
 8023870:	f7ff ff26 	bl	80236c0 <__sinit>
 8023874:	89a3      	ldrh	r3, [r4, #12]
 8023876:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802387a:	0718      	lsls	r0, r3, #28
 802387c:	d422      	bmi.n	80238c4 <__swsetup_r+0x64>
 802387e:	06d9      	lsls	r1, r3, #27
 8023880:	d407      	bmi.n	8023892 <__swsetup_r+0x32>
 8023882:	2309      	movs	r3, #9
 8023884:	602b      	str	r3, [r5, #0]
 8023886:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802388a:	81a3      	strh	r3, [r4, #12]
 802388c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023890:	e034      	b.n	80238fc <__swsetup_r+0x9c>
 8023892:	0758      	lsls	r0, r3, #29
 8023894:	d512      	bpl.n	80238bc <__swsetup_r+0x5c>
 8023896:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023898:	b141      	cbz	r1, 80238ac <__swsetup_r+0x4c>
 802389a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802389e:	4299      	cmp	r1, r3
 80238a0:	d002      	beq.n	80238a8 <__swsetup_r+0x48>
 80238a2:	4628      	mov	r0, r5
 80238a4:	f000 ffce 	bl	8024844 <_free_r>
 80238a8:	2300      	movs	r3, #0
 80238aa:	6363      	str	r3, [r4, #52]	; 0x34
 80238ac:	89a3      	ldrh	r3, [r4, #12]
 80238ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80238b2:	81a3      	strh	r3, [r4, #12]
 80238b4:	2300      	movs	r3, #0
 80238b6:	6063      	str	r3, [r4, #4]
 80238b8:	6923      	ldr	r3, [r4, #16]
 80238ba:	6023      	str	r3, [r4, #0]
 80238bc:	89a3      	ldrh	r3, [r4, #12]
 80238be:	f043 0308 	orr.w	r3, r3, #8
 80238c2:	81a3      	strh	r3, [r4, #12]
 80238c4:	6923      	ldr	r3, [r4, #16]
 80238c6:	b94b      	cbnz	r3, 80238dc <__swsetup_r+0x7c>
 80238c8:	89a3      	ldrh	r3, [r4, #12]
 80238ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80238ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80238d2:	d003      	beq.n	80238dc <__swsetup_r+0x7c>
 80238d4:	4621      	mov	r1, r4
 80238d6:	4628      	mov	r0, r5
 80238d8:	f001 fd9a 	bl	8025410 <__smakebuf_r>
 80238dc:	89a0      	ldrh	r0, [r4, #12]
 80238de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80238e2:	f010 0301 	ands.w	r3, r0, #1
 80238e6:	d00a      	beq.n	80238fe <__swsetup_r+0x9e>
 80238e8:	2300      	movs	r3, #0
 80238ea:	60a3      	str	r3, [r4, #8]
 80238ec:	6963      	ldr	r3, [r4, #20]
 80238ee:	425b      	negs	r3, r3
 80238f0:	61a3      	str	r3, [r4, #24]
 80238f2:	6923      	ldr	r3, [r4, #16]
 80238f4:	b943      	cbnz	r3, 8023908 <__swsetup_r+0xa8>
 80238f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80238fa:	d1c4      	bne.n	8023886 <__swsetup_r+0x26>
 80238fc:	bd38      	pop	{r3, r4, r5, pc}
 80238fe:	0781      	lsls	r1, r0, #30
 8023900:	bf58      	it	pl
 8023902:	6963      	ldrpl	r3, [r4, #20]
 8023904:	60a3      	str	r3, [r4, #8]
 8023906:	e7f4      	b.n	80238f2 <__swsetup_r+0x92>
 8023908:	2000      	movs	r0, #0
 802390a:	e7f7      	b.n	80238fc <__swsetup_r+0x9c>
 802390c:	20001038 	.word	0x20001038

08023910 <memset>:
 8023910:	4402      	add	r2, r0
 8023912:	4603      	mov	r3, r0
 8023914:	4293      	cmp	r3, r2
 8023916:	d100      	bne.n	802391a <memset+0xa>
 8023918:	4770      	bx	lr
 802391a:	f803 1b01 	strb.w	r1, [r3], #1
 802391e:	e7f9      	b.n	8023914 <memset+0x4>

08023920 <strcat>:
 8023920:	b510      	push	{r4, lr}
 8023922:	4602      	mov	r2, r0
 8023924:	7814      	ldrb	r4, [r2, #0]
 8023926:	4613      	mov	r3, r2
 8023928:	3201      	adds	r2, #1
 802392a:	2c00      	cmp	r4, #0
 802392c:	d1fa      	bne.n	8023924 <strcat+0x4>
 802392e:	3b01      	subs	r3, #1
 8023930:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023934:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023938:	2a00      	cmp	r2, #0
 802393a:	d1f9      	bne.n	8023930 <strcat+0x10>
 802393c:	bd10      	pop	{r4, pc}

0802393e <strchr>:
 802393e:	b2c9      	uxtb	r1, r1
 8023940:	4603      	mov	r3, r0
 8023942:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023946:	b11a      	cbz	r2, 8023950 <strchr+0x12>
 8023948:	428a      	cmp	r2, r1
 802394a:	d1f9      	bne.n	8023940 <strchr+0x2>
 802394c:	4618      	mov	r0, r3
 802394e:	4770      	bx	lr
 8023950:	2900      	cmp	r1, #0
 8023952:	bf18      	it	ne
 8023954:	2300      	movne	r3, #0
 8023956:	e7f9      	b.n	802394c <strchr+0xe>

08023958 <strncpy>:
 8023958:	b510      	push	{r4, lr}
 802395a:	3901      	subs	r1, #1
 802395c:	4603      	mov	r3, r0
 802395e:	b132      	cbz	r2, 802396e <strncpy+0x16>
 8023960:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023964:	f803 4b01 	strb.w	r4, [r3], #1
 8023968:	3a01      	subs	r2, #1
 802396a:	2c00      	cmp	r4, #0
 802396c:	d1f7      	bne.n	802395e <strncpy+0x6>
 802396e:	441a      	add	r2, r3
 8023970:	2100      	movs	r1, #0
 8023972:	4293      	cmp	r3, r2
 8023974:	d100      	bne.n	8023978 <strncpy+0x20>
 8023976:	bd10      	pop	{r4, pc}
 8023978:	f803 1b01 	strb.w	r1, [r3], #1
 802397c:	e7f9      	b.n	8023972 <strncpy+0x1a>
	...

08023980 <_localeconv_r>:
 8023980:	4800      	ldr	r0, [pc, #0]	; (8023984 <_localeconv_r+0x4>)
 8023982:	4770      	bx	lr
 8023984:	2000112c 	.word	0x2000112c

08023988 <_close_r>:
 8023988:	b538      	push	{r3, r4, r5, lr}
 802398a:	4d06      	ldr	r5, [pc, #24]	; (80239a4 <_close_r+0x1c>)
 802398c:	2300      	movs	r3, #0
 802398e:	4604      	mov	r4, r0
 8023990:	4608      	mov	r0, r1
 8023992:	602b      	str	r3, [r5, #0]
 8023994:	f7f1 fbd5 	bl	8015142 <_close>
 8023998:	1c43      	adds	r3, r0, #1
 802399a:	d102      	bne.n	80239a2 <_close_r+0x1a>
 802399c:	682b      	ldr	r3, [r5, #0]
 802399e:	b103      	cbz	r3, 80239a2 <_close_r+0x1a>
 80239a0:	6023      	str	r3, [r4, #0]
 80239a2:	bd38      	pop	{r3, r4, r5, pc}
 80239a4:	20012ec4 	.word	0x20012ec4

080239a8 <_reclaim_reent>:
 80239a8:	4b29      	ldr	r3, [pc, #164]	; (8023a50 <_reclaim_reent+0xa8>)
 80239aa:	681b      	ldr	r3, [r3, #0]
 80239ac:	4283      	cmp	r3, r0
 80239ae:	b570      	push	{r4, r5, r6, lr}
 80239b0:	4604      	mov	r4, r0
 80239b2:	d04b      	beq.n	8023a4c <_reclaim_reent+0xa4>
 80239b4:	69c3      	ldr	r3, [r0, #28]
 80239b6:	b143      	cbz	r3, 80239ca <_reclaim_reent+0x22>
 80239b8:	68db      	ldr	r3, [r3, #12]
 80239ba:	2b00      	cmp	r3, #0
 80239bc:	d144      	bne.n	8023a48 <_reclaim_reent+0xa0>
 80239be:	69e3      	ldr	r3, [r4, #28]
 80239c0:	6819      	ldr	r1, [r3, #0]
 80239c2:	b111      	cbz	r1, 80239ca <_reclaim_reent+0x22>
 80239c4:	4620      	mov	r0, r4
 80239c6:	f000 ff3d 	bl	8024844 <_free_r>
 80239ca:	6961      	ldr	r1, [r4, #20]
 80239cc:	b111      	cbz	r1, 80239d4 <_reclaim_reent+0x2c>
 80239ce:	4620      	mov	r0, r4
 80239d0:	f000 ff38 	bl	8024844 <_free_r>
 80239d4:	69e1      	ldr	r1, [r4, #28]
 80239d6:	b111      	cbz	r1, 80239de <_reclaim_reent+0x36>
 80239d8:	4620      	mov	r0, r4
 80239da:	f000 ff33 	bl	8024844 <_free_r>
 80239de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80239e0:	b111      	cbz	r1, 80239e8 <_reclaim_reent+0x40>
 80239e2:	4620      	mov	r0, r4
 80239e4:	f000 ff2e 	bl	8024844 <_free_r>
 80239e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80239ea:	b111      	cbz	r1, 80239f2 <_reclaim_reent+0x4a>
 80239ec:	4620      	mov	r0, r4
 80239ee:	f000 ff29 	bl	8024844 <_free_r>
 80239f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80239f4:	b111      	cbz	r1, 80239fc <_reclaim_reent+0x54>
 80239f6:	4620      	mov	r0, r4
 80239f8:	f000 ff24 	bl	8024844 <_free_r>
 80239fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80239fe:	b111      	cbz	r1, 8023a06 <_reclaim_reent+0x5e>
 8023a00:	4620      	mov	r0, r4
 8023a02:	f000 ff1f 	bl	8024844 <_free_r>
 8023a06:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8023a08:	b111      	cbz	r1, 8023a10 <_reclaim_reent+0x68>
 8023a0a:	4620      	mov	r0, r4
 8023a0c:	f000 ff1a 	bl	8024844 <_free_r>
 8023a10:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8023a12:	b111      	cbz	r1, 8023a1a <_reclaim_reent+0x72>
 8023a14:	4620      	mov	r0, r4
 8023a16:	f000 ff15 	bl	8024844 <_free_r>
 8023a1a:	6a23      	ldr	r3, [r4, #32]
 8023a1c:	b1b3      	cbz	r3, 8023a4c <_reclaim_reent+0xa4>
 8023a1e:	4620      	mov	r0, r4
 8023a20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023a24:	4718      	bx	r3
 8023a26:	5949      	ldr	r1, [r1, r5]
 8023a28:	b941      	cbnz	r1, 8023a3c <_reclaim_reent+0x94>
 8023a2a:	3504      	adds	r5, #4
 8023a2c:	69e3      	ldr	r3, [r4, #28]
 8023a2e:	2d80      	cmp	r5, #128	; 0x80
 8023a30:	68d9      	ldr	r1, [r3, #12]
 8023a32:	d1f8      	bne.n	8023a26 <_reclaim_reent+0x7e>
 8023a34:	4620      	mov	r0, r4
 8023a36:	f000 ff05 	bl	8024844 <_free_r>
 8023a3a:	e7c0      	b.n	80239be <_reclaim_reent+0x16>
 8023a3c:	680e      	ldr	r6, [r1, #0]
 8023a3e:	4620      	mov	r0, r4
 8023a40:	f000 ff00 	bl	8024844 <_free_r>
 8023a44:	4631      	mov	r1, r6
 8023a46:	e7ef      	b.n	8023a28 <_reclaim_reent+0x80>
 8023a48:	2500      	movs	r5, #0
 8023a4a:	e7ef      	b.n	8023a2c <_reclaim_reent+0x84>
 8023a4c:	bd70      	pop	{r4, r5, r6, pc}
 8023a4e:	bf00      	nop
 8023a50:	20001038 	.word	0x20001038

08023a54 <_lseek_r>:
 8023a54:	b538      	push	{r3, r4, r5, lr}
 8023a56:	4d07      	ldr	r5, [pc, #28]	; (8023a74 <_lseek_r+0x20>)
 8023a58:	4604      	mov	r4, r0
 8023a5a:	4608      	mov	r0, r1
 8023a5c:	4611      	mov	r1, r2
 8023a5e:	2200      	movs	r2, #0
 8023a60:	602a      	str	r2, [r5, #0]
 8023a62:	461a      	mov	r2, r3
 8023a64:	f7f1 fb94 	bl	8015190 <_lseek>
 8023a68:	1c43      	adds	r3, r0, #1
 8023a6a:	d102      	bne.n	8023a72 <_lseek_r+0x1e>
 8023a6c:	682b      	ldr	r3, [r5, #0]
 8023a6e:	b103      	cbz	r3, 8023a72 <_lseek_r+0x1e>
 8023a70:	6023      	str	r3, [r4, #0]
 8023a72:	bd38      	pop	{r3, r4, r5, pc}
 8023a74:	20012ec4 	.word	0x20012ec4

08023a78 <_read_r>:
 8023a78:	b538      	push	{r3, r4, r5, lr}
 8023a7a:	4d07      	ldr	r5, [pc, #28]	; (8023a98 <_read_r+0x20>)
 8023a7c:	4604      	mov	r4, r0
 8023a7e:	4608      	mov	r0, r1
 8023a80:	4611      	mov	r1, r2
 8023a82:	2200      	movs	r2, #0
 8023a84:	602a      	str	r2, [r5, #0]
 8023a86:	461a      	mov	r2, r3
 8023a88:	f7f1 fb22 	bl	80150d0 <_read>
 8023a8c:	1c43      	adds	r3, r0, #1
 8023a8e:	d102      	bne.n	8023a96 <_read_r+0x1e>
 8023a90:	682b      	ldr	r3, [r5, #0]
 8023a92:	b103      	cbz	r3, 8023a96 <_read_r+0x1e>
 8023a94:	6023      	str	r3, [r4, #0]
 8023a96:	bd38      	pop	{r3, r4, r5, pc}
 8023a98:	20012ec4 	.word	0x20012ec4

08023a9c <_write_r>:
 8023a9c:	b538      	push	{r3, r4, r5, lr}
 8023a9e:	4d07      	ldr	r5, [pc, #28]	; (8023abc <_write_r+0x20>)
 8023aa0:	4604      	mov	r4, r0
 8023aa2:	4608      	mov	r0, r1
 8023aa4:	4611      	mov	r1, r2
 8023aa6:	2200      	movs	r2, #0
 8023aa8:	602a      	str	r2, [r5, #0]
 8023aaa:	461a      	mov	r2, r3
 8023aac:	f7f1 fb2d 	bl	801510a <_write>
 8023ab0:	1c43      	adds	r3, r0, #1
 8023ab2:	d102      	bne.n	8023aba <_write_r+0x1e>
 8023ab4:	682b      	ldr	r3, [r5, #0]
 8023ab6:	b103      	cbz	r3, 8023aba <_write_r+0x1e>
 8023ab8:	6023      	str	r3, [r4, #0]
 8023aba:	bd38      	pop	{r3, r4, r5, pc}
 8023abc:	20012ec4 	.word	0x20012ec4

08023ac0 <__errno>:
 8023ac0:	4b01      	ldr	r3, [pc, #4]	; (8023ac8 <__errno+0x8>)
 8023ac2:	6818      	ldr	r0, [r3, #0]
 8023ac4:	4770      	bx	lr
 8023ac6:	bf00      	nop
 8023ac8:	20001038 	.word	0x20001038

08023acc <__libc_init_array>:
 8023acc:	b570      	push	{r4, r5, r6, lr}
 8023ace:	4d0d      	ldr	r5, [pc, #52]	; (8023b04 <__libc_init_array+0x38>)
 8023ad0:	4c0d      	ldr	r4, [pc, #52]	; (8023b08 <__libc_init_array+0x3c>)
 8023ad2:	1b64      	subs	r4, r4, r5
 8023ad4:	10a4      	asrs	r4, r4, #2
 8023ad6:	2600      	movs	r6, #0
 8023ad8:	42a6      	cmp	r6, r4
 8023ada:	d109      	bne.n	8023af0 <__libc_init_array+0x24>
 8023adc:	4d0b      	ldr	r5, [pc, #44]	; (8023b0c <__libc_init_array+0x40>)
 8023ade:	4c0c      	ldr	r4, [pc, #48]	; (8023b10 <__libc_init_array+0x44>)
 8023ae0:	f003 fc8e 	bl	8027400 <_init>
 8023ae4:	1b64      	subs	r4, r4, r5
 8023ae6:	10a4      	asrs	r4, r4, #2
 8023ae8:	2600      	movs	r6, #0
 8023aea:	42a6      	cmp	r6, r4
 8023aec:	d105      	bne.n	8023afa <__libc_init_array+0x2e>
 8023aee:	bd70      	pop	{r4, r5, r6, pc}
 8023af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8023af4:	4798      	blx	r3
 8023af6:	3601      	adds	r6, #1
 8023af8:	e7ee      	b.n	8023ad8 <__libc_init_array+0xc>
 8023afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8023afe:	4798      	blx	r3
 8023b00:	3601      	adds	r6, #1
 8023b02:	e7f2      	b.n	8023aea <__libc_init_array+0x1e>
 8023b04:	0802e8fc 	.word	0x0802e8fc
 8023b08:	0802e8fc 	.word	0x0802e8fc
 8023b0c:	0802e8fc 	.word	0x0802e8fc
 8023b10:	0802e900 	.word	0x0802e900

08023b14 <__retarget_lock_init_recursive>:
 8023b14:	4770      	bx	lr

08023b16 <__retarget_lock_acquire_recursive>:
 8023b16:	4770      	bx	lr

08023b18 <__retarget_lock_release_recursive>:
 8023b18:	4770      	bx	lr

08023b1a <memcpy>:
 8023b1a:	440a      	add	r2, r1
 8023b1c:	4291      	cmp	r1, r2
 8023b1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8023b22:	d100      	bne.n	8023b26 <memcpy+0xc>
 8023b24:	4770      	bx	lr
 8023b26:	b510      	push	{r4, lr}
 8023b28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023b2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023b30:	4291      	cmp	r1, r2
 8023b32:	d1f9      	bne.n	8023b28 <memcpy+0xe>
 8023b34:	bd10      	pop	{r4, pc}

08023b36 <copysignf>:
 8023b36:	ee10 3a10 	vmov	r3, s0
 8023b3a:	ee10 2a90 	vmov	r2, s1
 8023b3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023b42:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8023b46:	4313      	orrs	r3, r2
 8023b48:	ee00 3a10 	vmov	s0, r3
 8023b4c:	4770      	bx	lr

08023b4e <quorem>:
 8023b4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b52:	6903      	ldr	r3, [r0, #16]
 8023b54:	690c      	ldr	r4, [r1, #16]
 8023b56:	42a3      	cmp	r3, r4
 8023b58:	4607      	mov	r7, r0
 8023b5a:	db7e      	blt.n	8023c5a <quorem+0x10c>
 8023b5c:	3c01      	subs	r4, #1
 8023b5e:	f101 0814 	add.w	r8, r1, #20
 8023b62:	f100 0514 	add.w	r5, r0, #20
 8023b66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8023b6a:	9301      	str	r3, [sp, #4]
 8023b6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8023b70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8023b74:	3301      	adds	r3, #1
 8023b76:	429a      	cmp	r2, r3
 8023b78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8023b7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8023b80:	fbb2 f6f3 	udiv	r6, r2, r3
 8023b84:	d331      	bcc.n	8023bea <quorem+0x9c>
 8023b86:	f04f 0e00 	mov.w	lr, #0
 8023b8a:	4640      	mov	r0, r8
 8023b8c:	46ac      	mov	ip, r5
 8023b8e:	46f2      	mov	sl, lr
 8023b90:	f850 2b04 	ldr.w	r2, [r0], #4
 8023b94:	b293      	uxth	r3, r2
 8023b96:	fb06 e303 	mla	r3, r6, r3, lr
 8023b9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8023b9e:	0c1a      	lsrs	r2, r3, #16
 8023ba0:	b29b      	uxth	r3, r3
 8023ba2:	ebaa 0303 	sub.w	r3, sl, r3
 8023ba6:	f8dc a000 	ldr.w	sl, [ip]
 8023baa:	fa13 f38a 	uxtah	r3, r3, sl
 8023bae:	fb06 220e 	mla	r2, r6, lr, r2
 8023bb2:	9300      	str	r3, [sp, #0]
 8023bb4:	9b00      	ldr	r3, [sp, #0]
 8023bb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8023bba:	b292      	uxth	r2, r2
 8023bbc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8023bc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8023bc4:	f8bd 3000 	ldrh.w	r3, [sp]
 8023bc8:	4581      	cmp	r9, r0
 8023bca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023bce:	f84c 3b04 	str.w	r3, [ip], #4
 8023bd2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8023bd6:	d2db      	bcs.n	8023b90 <quorem+0x42>
 8023bd8:	f855 300b 	ldr.w	r3, [r5, fp]
 8023bdc:	b92b      	cbnz	r3, 8023bea <quorem+0x9c>
 8023bde:	9b01      	ldr	r3, [sp, #4]
 8023be0:	3b04      	subs	r3, #4
 8023be2:	429d      	cmp	r5, r3
 8023be4:	461a      	mov	r2, r3
 8023be6:	d32c      	bcc.n	8023c42 <quorem+0xf4>
 8023be8:	613c      	str	r4, [r7, #16]
 8023bea:	4638      	mov	r0, r7
 8023bec:	f001 f9a6 	bl	8024f3c <__mcmp>
 8023bf0:	2800      	cmp	r0, #0
 8023bf2:	db22      	blt.n	8023c3a <quorem+0xec>
 8023bf4:	3601      	adds	r6, #1
 8023bf6:	4629      	mov	r1, r5
 8023bf8:	2000      	movs	r0, #0
 8023bfa:	f858 2b04 	ldr.w	r2, [r8], #4
 8023bfe:	f8d1 c000 	ldr.w	ip, [r1]
 8023c02:	b293      	uxth	r3, r2
 8023c04:	1ac3      	subs	r3, r0, r3
 8023c06:	0c12      	lsrs	r2, r2, #16
 8023c08:	fa13 f38c 	uxtah	r3, r3, ip
 8023c0c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8023c10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8023c14:	b29b      	uxth	r3, r3
 8023c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023c1a:	45c1      	cmp	r9, r8
 8023c1c:	f841 3b04 	str.w	r3, [r1], #4
 8023c20:	ea4f 4022 	mov.w	r0, r2, asr #16
 8023c24:	d2e9      	bcs.n	8023bfa <quorem+0xac>
 8023c26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8023c2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8023c2e:	b922      	cbnz	r2, 8023c3a <quorem+0xec>
 8023c30:	3b04      	subs	r3, #4
 8023c32:	429d      	cmp	r5, r3
 8023c34:	461a      	mov	r2, r3
 8023c36:	d30a      	bcc.n	8023c4e <quorem+0x100>
 8023c38:	613c      	str	r4, [r7, #16]
 8023c3a:	4630      	mov	r0, r6
 8023c3c:	b003      	add	sp, #12
 8023c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c42:	6812      	ldr	r2, [r2, #0]
 8023c44:	3b04      	subs	r3, #4
 8023c46:	2a00      	cmp	r2, #0
 8023c48:	d1ce      	bne.n	8023be8 <quorem+0x9a>
 8023c4a:	3c01      	subs	r4, #1
 8023c4c:	e7c9      	b.n	8023be2 <quorem+0x94>
 8023c4e:	6812      	ldr	r2, [r2, #0]
 8023c50:	3b04      	subs	r3, #4
 8023c52:	2a00      	cmp	r2, #0
 8023c54:	d1f0      	bne.n	8023c38 <quorem+0xea>
 8023c56:	3c01      	subs	r4, #1
 8023c58:	e7eb      	b.n	8023c32 <quorem+0xe4>
 8023c5a:	2000      	movs	r0, #0
 8023c5c:	e7ee      	b.n	8023c3c <quorem+0xee>
	...

08023c60 <_dtoa_r>:
 8023c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c64:	ed2d 8b04 	vpush	{d8-d9}
 8023c68:	69c5      	ldr	r5, [r0, #28]
 8023c6a:	b093      	sub	sp, #76	; 0x4c
 8023c6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8023c70:	ec57 6b10 	vmov	r6, r7, d0
 8023c74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8023c78:	9107      	str	r1, [sp, #28]
 8023c7a:	4604      	mov	r4, r0
 8023c7c:	920a      	str	r2, [sp, #40]	; 0x28
 8023c7e:	930d      	str	r3, [sp, #52]	; 0x34
 8023c80:	b975      	cbnz	r5, 8023ca0 <_dtoa_r+0x40>
 8023c82:	2010      	movs	r0, #16
 8023c84:	f000 fe2a 	bl	80248dc <malloc>
 8023c88:	4602      	mov	r2, r0
 8023c8a:	61e0      	str	r0, [r4, #28]
 8023c8c:	b920      	cbnz	r0, 8023c98 <_dtoa_r+0x38>
 8023c8e:	4bae      	ldr	r3, [pc, #696]	; (8023f48 <_dtoa_r+0x2e8>)
 8023c90:	21ef      	movs	r1, #239	; 0xef
 8023c92:	48ae      	ldr	r0, [pc, #696]	; (8023f4c <_dtoa_r+0x2ec>)
 8023c94:	f001 fc5e 	bl	8025554 <__assert_func>
 8023c98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8023c9c:	6005      	str	r5, [r0, #0]
 8023c9e:	60c5      	str	r5, [r0, #12]
 8023ca0:	69e3      	ldr	r3, [r4, #28]
 8023ca2:	6819      	ldr	r1, [r3, #0]
 8023ca4:	b151      	cbz	r1, 8023cbc <_dtoa_r+0x5c>
 8023ca6:	685a      	ldr	r2, [r3, #4]
 8023ca8:	604a      	str	r2, [r1, #4]
 8023caa:	2301      	movs	r3, #1
 8023cac:	4093      	lsls	r3, r2
 8023cae:	608b      	str	r3, [r1, #8]
 8023cb0:	4620      	mov	r0, r4
 8023cb2:	f000 ff07 	bl	8024ac4 <_Bfree>
 8023cb6:	69e3      	ldr	r3, [r4, #28]
 8023cb8:	2200      	movs	r2, #0
 8023cba:	601a      	str	r2, [r3, #0]
 8023cbc:	1e3b      	subs	r3, r7, #0
 8023cbe:	bfbb      	ittet	lt
 8023cc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8023cc4:	9303      	strlt	r3, [sp, #12]
 8023cc6:	2300      	movge	r3, #0
 8023cc8:	2201      	movlt	r2, #1
 8023cca:	bfac      	ite	ge
 8023ccc:	f8c8 3000 	strge.w	r3, [r8]
 8023cd0:	f8c8 2000 	strlt.w	r2, [r8]
 8023cd4:	4b9e      	ldr	r3, [pc, #632]	; (8023f50 <_dtoa_r+0x2f0>)
 8023cd6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8023cda:	ea33 0308 	bics.w	r3, r3, r8
 8023cde:	d11b      	bne.n	8023d18 <_dtoa_r+0xb8>
 8023ce0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023ce2:	f242 730f 	movw	r3, #9999	; 0x270f
 8023ce6:	6013      	str	r3, [r2, #0]
 8023ce8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8023cec:	4333      	orrs	r3, r6
 8023cee:	f000 8593 	beq.w	8024818 <_dtoa_r+0xbb8>
 8023cf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023cf4:	b963      	cbnz	r3, 8023d10 <_dtoa_r+0xb0>
 8023cf6:	4b97      	ldr	r3, [pc, #604]	; (8023f54 <_dtoa_r+0x2f4>)
 8023cf8:	e027      	b.n	8023d4a <_dtoa_r+0xea>
 8023cfa:	4b97      	ldr	r3, [pc, #604]	; (8023f58 <_dtoa_r+0x2f8>)
 8023cfc:	9300      	str	r3, [sp, #0]
 8023cfe:	3308      	adds	r3, #8
 8023d00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023d02:	6013      	str	r3, [r2, #0]
 8023d04:	9800      	ldr	r0, [sp, #0]
 8023d06:	b013      	add	sp, #76	; 0x4c
 8023d08:	ecbd 8b04 	vpop	{d8-d9}
 8023d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d10:	4b90      	ldr	r3, [pc, #576]	; (8023f54 <_dtoa_r+0x2f4>)
 8023d12:	9300      	str	r3, [sp, #0]
 8023d14:	3303      	adds	r3, #3
 8023d16:	e7f3      	b.n	8023d00 <_dtoa_r+0xa0>
 8023d18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023d1c:	2200      	movs	r2, #0
 8023d1e:	ec51 0b17 	vmov	r0, r1, d7
 8023d22:	eeb0 8a47 	vmov.f32	s16, s14
 8023d26:	eef0 8a67 	vmov.f32	s17, s15
 8023d2a:	2300      	movs	r3, #0
 8023d2c:	f7dc fedc 	bl	8000ae8 <__aeabi_dcmpeq>
 8023d30:	4681      	mov	r9, r0
 8023d32:	b160      	cbz	r0, 8023d4e <_dtoa_r+0xee>
 8023d34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023d36:	2301      	movs	r3, #1
 8023d38:	6013      	str	r3, [r2, #0]
 8023d3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023d3c:	2b00      	cmp	r3, #0
 8023d3e:	f000 8568 	beq.w	8024812 <_dtoa_r+0xbb2>
 8023d42:	4b86      	ldr	r3, [pc, #536]	; (8023f5c <_dtoa_r+0x2fc>)
 8023d44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023d46:	6013      	str	r3, [r2, #0]
 8023d48:	3b01      	subs	r3, #1
 8023d4a:	9300      	str	r3, [sp, #0]
 8023d4c:	e7da      	b.n	8023d04 <_dtoa_r+0xa4>
 8023d4e:	aa10      	add	r2, sp, #64	; 0x40
 8023d50:	a911      	add	r1, sp, #68	; 0x44
 8023d52:	4620      	mov	r0, r4
 8023d54:	eeb0 0a48 	vmov.f32	s0, s16
 8023d58:	eef0 0a68 	vmov.f32	s1, s17
 8023d5c:	f001 f994 	bl	8025088 <__d2b>
 8023d60:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8023d64:	4682      	mov	sl, r0
 8023d66:	2d00      	cmp	r5, #0
 8023d68:	d07f      	beq.n	8023e6a <_dtoa_r+0x20a>
 8023d6a:	ee18 3a90 	vmov	r3, s17
 8023d6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8023d72:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8023d76:	ec51 0b18 	vmov	r0, r1, d8
 8023d7a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8023d7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8023d82:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8023d86:	4619      	mov	r1, r3
 8023d88:	2200      	movs	r2, #0
 8023d8a:	4b75      	ldr	r3, [pc, #468]	; (8023f60 <_dtoa_r+0x300>)
 8023d8c:	f7dc fa8c 	bl	80002a8 <__aeabi_dsub>
 8023d90:	a367      	add	r3, pc, #412	; (adr r3, 8023f30 <_dtoa_r+0x2d0>)
 8023d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d96:	f7dc fc3f 	bl	8000618 <__aeabi_dmul>
 8023d9a:	a367      	add	r3, pc, #412	; (adr r3, 8023f38 <_dtoa_r+0x2d8>)
 8023d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023da0:	f7dc fa84 	bl	80002ac <__adddf3>
 8023da4:	4606      	mov	r6, r0
 8023da6:	4628      	mov	r0, r5
 8023da8:	460f      	mov	r7, r1
 8023daa:	f7dc fbcb 	bl	8000544 <__aeabi_i2d>
 8023dae:	a364      	add	r3, pc, #400	; (adr r3, 8023f40 <_dtoa_r+0x2e0>)
 8023db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023db4:	f7dc fc30 	bl	8000618 <__aeabi_dmul>
 8023db8:	4602      	mov	r2, r0
 8023dba:	460b      	mov	r3, r1
 8023dbc:	4630      	mov	r0, r6
 8023dbe:	4639      	mov	r1, r7
 8023dc0:	f7dc fa74 	bl	80002ac <__adddf3>
 8023dc4:	4606      	mov	r6, r0
 8023dc6:	460f      	mov	r7, r1
 8023dc8:	f7dc fed6 	bl	8000b78 <__aeabi_d2iz>
 8023dcc:	2200      	movs	r2, #0
 8023dce:	4683      	mov	fp, r0
 8023dd0:	2300      	movs	r3, #0
 8023dd2:	4630      	mov	r0, r6
 8023dd4:	4639      	mov	r1, r7
 8023dd6:	f7dc fe91 	bl	8000afc <__aeabi_dcmplt>
 8023dda:	b148      	cbz	r0, 8023df0 <_dtoa_r+0x190>
 8023ddc:	4658      	mov	r0, fp
 8023dde:	f7dc fbb1 	bl	8000544 <__aeabi_i2d>
 8023de2:	4632      	mov	r2, r6
 8023de4:	463b      	mov	r3, r7
 8023de6:	f7dc fe7f 	bl	8000ae8 <__aeabi_dcmpeq>
 8023dea:	b908      	cbnz	r0, 8023df0 <_dtoa_r+0x190>
 8023dec:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8023df0:	f1bb 0f16 	cmp.w	fp, #22
 8023df4:	d857      	bhi.n	8023ea6 <_dtoa_r+0x246>
 8023df6:	4b5b      	ldr	r3, [pc, #364]	; (8023f64 <_dtoa_r+0x304>)
 8023df8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8023dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e00:	ec51 0b18 	vmov	r0, r1, d8
 8023e04:	f7dc fe7a 	bl	8000afc <__aeabi_dcmplt>
 8023e08:	2800      	cmp	r0, #0
 8023e0a:	d04e      	beq.n	8023eaa <_dtoa_r+0x24a>
 8023e0c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8023e10:	2300      	movs	r3, #0
 8023e12:	930c      	str	r3, [sp, #48]	; 0x30
 8023e14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023e16:	1b5b      	subs	r3, r3, r5
 8023e18:	1e5a      	subs	r2, r3, #1
 8023e1a:	bf45      	ittet	mi
 8023e1c:	f1c3 0301 	rsbmi	r3, r3, #1
 8023e20:	9305      	strmi	r3, [sp, #20]
 8023e22:	2300      	movpl	r3, #0
 8023e24:	2300      	movmi	r3, #0
 8023e26:	9206      	str	r2, [sp, #24]
 8023e28:	bf54      	ite	pl
 8023e2a:	9305      	strpl	r3, [sp, #20]
 8023e2c:	9306      	strmi	r3, [sp, #24]
 8023e2e:	f1bb 0f00 	cmp.w	fp, #0
 8023e32:	db3c      	blt.n	8023eae <_dtoa_r+0x24e>
 8023e34:	9b06      	ldr	r3, [sp, #24]
 8023e36:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8023e3a:	445b      	add	r3, fp
 8023e3c:	9306      	str	r3, [sp, #24]
 8023e3e:	2300      	movs	r3, #0
 8023e40:	9308      	str	r3, [sp, #32]
 8023e42:	9b07      	ldr	r3, [sp, #28]
 8023e44:	2b09      	cmp	r3, #9
 8023e46:	d868      	bhi.n	8023f1a <_dtoa_r+0x2ba>
 8023e48:	2b05      	cmp	r3, #5
 8023e4a:	bfc4      	itt	gt
 8023e4c:	3b04      	subgt	r3, #4
 8023e4e:	9307      	strgt	r3, [sp, #28]
 8023e50:	9b07      	ldr	r3, [sp, #28]
 8023e52:	f1a3 0302 	sub.w	r3, r3, #2
 8023e56:	bfcc      	ite	gt
 8023e58:	2500      	movgt	r5, #0
 8023e5a:	2501      	movle	r5, #1
 8023e5c:	2b03      	cmp	r3, #3
 8023e5e:	f200 8085 	bhi.w	8023f6c <_dtoa_r+0x30c>
 8023e62:	e8df f003 	tbb	[pc, r3]
 8023e66:	3b2e      	.short	0x3b2e
 8023e68:	5839      	.short	0x5839
 8023e6a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8023e6e:	441d      	add	r5, r3
 8023e70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8023e74:	2b20      	cmp	r3, #32
 8023e76:	bfc1      	itttt	gt
 8023e78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8023e7c:	fa08 f803 	lslgt.w	r8, r8, r3
 8023e80:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8023e84:	fa26 f303 	lsrgt.w	r3, r6, r3
 8023e88:	bfd6      	itet	le
 8023e8a:	f1c3 0320 	rsble	r3, r3, #32
 8023e8e:	ea48 0003 	orrgt.w	r0, r8, r3
 8023e92:	fa06 f003 	lslle.w	r0, r6, r3
 8023e96:	f7dc fb45 	bl	8000524 <__aeabi_ui2d>
 8023e9a:	2201      	movs	r2, #1
 8023e9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8023ea0:	3d01      	subs	r5, #1
 8023ea2:	920e      	str	r2, [sp, #56]	; 0x38
 8023ea4:	e76f      	b.n	8023d86 <_dtoa_r+0x126>
 8023ea6:	2301      	movs	r3, #1
 8023ea8:	e7b3      	b.n	8023e12 <_dtoa_r+0x1b2>
 8023eaa:	900c      	str	r0, [sp, #48]	; 0x30
 8023eac:	e7b2      	b.n	8023e14 <_dtoa_r+0x1b4>
 8023eae:	9b05      	ldr	r3, [sp, #20]
 8023eb0:	eba3 030b 	sub.w	r3, r3, fp
 8023eb4:	9305      	str	r3, [sp, #20]
 8023eb6:	f1cb 0300 	rsb	r3, fp, #0
 8023eba:	9308      	str	r3, [sp, #32]
 8023ebc:	2300      	movs	r3, #0
 8023ebe:	930b      	str	r3, [sp, #44]	; 0x2c
 8023ec0:	e7bf      	b.n	8023e42 <_dtoa_r+0x1e2>
 8023ec2:	2300      	movs	r3, #0
 8023ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8023ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ec8:	2b00      	cmp	r3, #0
 8023eca:	dc52      	bgt.n	8023f72 <_dtoa_r+0x312>
 8023ecc:	2301      	movs	r3, #1
 8023ece:	9301      	str	r3, [sp, #4]
 8023ed0:	9304      	str	r3, [sp, #16]
 8023ed2:	461a      	mov	r2, r3
 8023ed4:	920a      	str	r2, [sp, #40]	; 0x28
 8023ed6:	e00b      	b.n	8023ef0 <_dtoa_r+0x290>
 8023ed8:	2301      	movs	r3, #1
 8023eda:	e7f3      	b.n	8023ec4 <_dtoa_r+0x264>
 8023edc:	2300      	movs	r3, #0
 8023ede:	9309      	str	r3, [sp, #36]	; 0x24
 8023ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ee2:	445b      	add	r3, fp
 8023ee4:	9301      	str	r3, [sp, #4]
 8023ee6:	3301      	adds	r3, #1
 8023ee8:	2b01      	cmp	r3, #1
 8023eea:	9304      	str	r3, [sp, #16]
 8023eec:	bfb8      	it	lt
 8023eee:	2301      	movlt	r3, #1
 8023ef0:	69e0      	ldr	r0, [r4, #28]
 8023ef2:	2100      	movs	r1, #0
 8023ef4:	2204      	movs	r2, #4
 8023ef6:	f102 0614 	add.w	r6, r2, #20
 8023efa:	429e      	cmp	r6, r3
 8023efc:	d93d      	bls.n	8023f7a <_dtoa_r+0x31a>
 8023efe:	6041      	str	r1, [r0, #4]
 8023f00:	4620      	mov	r0, r4
 8023f02:	f000 fd9f 	bl	8024a44 <_Balloc>
 8023f06:	9000      	str	r0, [sp, #0]
 8023f08:	2800      	cmp	r0, #0
 8023f0a:	d139      	bne.n	8023f80 <_dtoa_r+0x320>
 8023f0c:	4b16      	ldr	r3, [pc, #88]	; (8023f68 <_dtoa_r+0x308>)
 8023f0e:	4602      	mov	r2, r0
 8023f10:	f240 11af 	movw	r1, #431	; 0x1af
 8023f14:	e6bd      	b.n	8023c92 <_dtoa_r+0x32>
 8023f16:	2301      	movs	r3, #1
 8023f18:	e7e1      	b.n	8023ede <_dtoa_r+0x27e>
 8023f1a:	2501      	movs	r5, #1
 8023f1c:	2300      	movs	r3, #0
 8023f1e:	9307      	str	r3, [sp, #28]
 8023f20:	9509      	str	r5, [sp, #36]	; 0x24
 8023f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023f26:	9301      	str	r3, [sp, #4]
 8023f28:	9304      	str	r3, [sp, #16]
 8023f2a:	2200      	movs	r2, #0
 8023f2c:	2312      	movs	r3, #18
 8023f2e:	e7d1      	b.n	8023ed4 <_dtoa_r+0x274>
 8023f30:	636f4361 	.word	0x636f4361
 8023f34:	3fd287a7 	.word	0x3fd287a7
 8023f38:	8b60c8b3 	.word	0x8b60c8b3
 8023f3c:	3fc68a28 	.word	0x3fc68a28
 8023f40:	509f79fb 	.word	0x509f79fb
 8023f44:	3fd34413 	.word	0x3fd34413
 8023f48:	0802e29a 	.word	0x0802e29a
 8023f4c:	0802e2b1 	.word	0x0802e2b1
 8023f50:	7ff00000 	.word	0x7ff00000
 8023f54:	0802e296 	.word	0x0802e296
 8023f58:	0802e28d 	.word	0x0802e28d
 8023f5c:	0802e26a 	.word	0x0802e26a
 8023f60:	3ff80000 	.word	0x3ff80000
 8023f64:	0802e3a0 	.word	0x0802e3a0
 8023f68:	0802e309 	.word	0x0802e309
 8023f6c:	2301      	movs	r3, #1
 8023f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8023f70:	e7d7      	b.n	8023f22 <_dtoa_r+0x2c2>
 8023f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f74:	9301      	str	r3, [sp, #4]
 8023f76:	9304      	str	r3, [sp, #16]
 8023f78:	e7ba      	b.n	8023ef0 <_dtoa_r+0x290>
 8023f7a:	3101      	adds	r1, #1
 8023f7c:	0052      	lsls	r2, r2, #1
 8023f7e:	e7ba      	b.n	8023ef6 <_dtoa_r+0x296>
 8023f80:	69e3      	ldr	r3, [r4, #28]
 8023f82:	9a00      	ldr	r2, [sp, #0]
 8023f84:	601a      	str	r2, [r3, #0]
 8023f86:	9b04      	ldr	r3, [sp, #16]
 8023f88:	2b0e      	cmp	r3, #14
 8023f8a:	f200 80a8 	bhi.w	80240de <_dtoa_r+0x47e>
 8023f8e:	2d00      	cmp	r5, #0
 8023f90:	f000 80a5 	beq.w	80240de <_dtoa_r+0x47e>
 8023f94:	f1bb 0f00 	cmp.w	fp, #0
 8023f98:	dd38      	ble.n	802400c <_dtoa_r+0x3ac>
 8023f9a:	4bc0      	ldr	r3, [pc, #768]	; (802429c <_dtoa_r+0x63c>)
 8023f9c:	f00b 020f 	and.w	r2, fp, #15
 8023fa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023fa4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8023fa8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8023fac:	ea4f 182b 	mov.w	r8, fp, asr #4
 8023fb0:	d019      	beq.n	8023fe6 <_dtoa_r+0x386>
 8023fb2:	4bbb      	ldr	r3, [pc, #748]	; (80242a0 <_dtoa_r+0x640>)
 8023fb4:	ec51 0b18 	vmov	r0, r1, d8
 8023fb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8023fbc:	f7dc fc56 	bl	800086c <__aeabi_ddiv>
 8023fc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023fc4:	f008 080f 	and.w	r8, r8, #15
 8023fc8:	2503      	movs	r5, #3
 8023fca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80242a0 <_dtoa_r+0x640>
 8023fce:	f1b8 0f00 	cmp.w	r8, #0
 8023fd2:	d10a      	bne.n	8023fea <_dtoa_r+0x38a>
 8023fd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023fd8:	4632      	mov	r2, r6
 8023fda:	463b      	mov	r3, r7
 8023fdc:	f7dc fc46 	bl	800086c <__aeabi_ddiv>
 8023fe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023fe4:	e02b      	b.n	802403e <_dtoa_r+0x3de>
 8023fe6:	2502      	movs	r5, #2
 8023fe8:	e7ef      	b.n	8023fca <_dtoa_r+0x36a>
 8023fea:	f018 0f01 	tst.w	r8, #1
 8023fee:	d008      	beq.n	8024002 <_dtoa_r+0x3a2>
 8023ff0:	4630      	mov	r0, r6
 8023ff2:	4639      	mov	r1, r7
 8023ff4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8023ff8:	f7dc fb0e 	bl	8000618 <__aeabi_dmul>
 8023ffc:	3501      	adds	r5, #1
 8023ffe:	4606      	mov	r6, r0
 8024000:	460f      	mov	r7, r1
 8024002:	ea4f 0868 	mov.w	r8, r8, asr #1
 8024006:	f109 0908 	add.w	r9, r9, #8
 802400a:	e7e0      	b.n	8023fce <_dtoa_r+0x36e>
 802400c:	f000 809f 	beq.w	802414e <_dtoa_r+0x4ee>
 8024010:	f1cb 0600 	rsb	r6, fp, #0
 8024014:	4ba1      	ldr	r3, [pc, #644]	; (802429c <_dtoa_r+0x63c>)
 8024016:	4fa2      	ldr	r7, [pc, #648]	; (80242a0 <_dtoa_r+0x640>)
 8024018:	f006 020f 	and.w	r2, r6, #15
 802401c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8024020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024024:	ec51 0b18 	vmov	r0, r1, d8
 8024028:	f7dc faf6 	bl	8000618 <__aeabi_dmul>
 802402c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024030:	1136      	asrs	r6, r6, #4
 8024032:	2300      	movs	r3, #0
 8024034:	2502      	movs	r5, #2
 8024036:	2e00      	cmp	r6, #0
 8024038:	d17e      	bne.n	8024138 <_dtoa_r+0x4d8>
 802403a:	2b00      	cmp	r3, #0
 802403c:	d1d0      	bne.n	8023fe0 <_dtoa_r+0x380>
 802403e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024040:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8024044:	2b00      	cmp	r3, #0
 8024046:	f000 8084 	beq.w	8024152 <_dtoa_r+0x4f2>
 802404a:	4b96      	ldr	r3, [pc, #600]	; (80242a4 <_dtoa_r+0x644>)
 802404c:	2200      	movs	r2, #0
 802404e:	4640      	mov	r0, r8
 8024050:	4649      	mov	r1, r9
 8024052:	f7dc fd53 	bl	8000afc <__aeabi_dcmplt>
 8024056:	2800      	cmp	r0, #0
 8024058:	d07b      	beq.n	8024152 <_dtoa_r+0x4f2>
 802405a:	9b04      	ldr	r3, [sp, #16]
 802405c:	2b00      	cmp	r3, #0
 802405e:	d078      	beq.n	8024152 <_dtoa_r+0x4f2>
 8024060:	9b01      	ldr	r3, [sp, #4]
 8024062:	2b00      	cmp	r3, #0
 8024064:	dd39      	ble.n	80240da <_dtoa_r+0x47a>
 8024066:	4b90      	ldr	r3, [pc, #576]	; (80242a8 <_dtoa_r+0x648>)
 8024068:	2200      	movs	r2, #0
 802406a:	4640      	mov	r0, r8
 802406c:	4649      	mov	r1, r9
 802406e:	f7dc fad3 	bl	8000618 <__aeabi_dmul>
 8024072:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024076:	9e01      	ldr	r6, [sp, #4]
 8024078:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 802407c:	3501      	adds	r5, #1
 802407e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8024082:	4628      	mov	r0, r5
 8024084:	f7dc fa5e 	bl	8000544 <__aeabi_i2d>
 8024088:	4642      	mov	r2, r8
 802408a:	464b      	mov	r3, r9
 802408c:	f7dc fac4 	bl	8000618 <__aeabi_dmul>
 8024090:	4b86      	ldr	r3, [pc, #536]	; (80242ac <_dtoa_r+0x64c>)
 8024092:	2200      	movs	r2, #0
 8024094:	f7dc f90a 	bl	80002ac <__adddf3>
 8024098:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 802409c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80240a0:	9303      	str	r3, [sp, #12]
 80240a2:	2e00      	cmp	r6, #0
 80240a4:	d158      	bne.n	8024158 <_dtoa_r+0x4f8>
 80240a6:	4b82      	ldr	r3, [pc, #520]	; (80242b0 <_dtoa_r+0x650>)
 80240a8:	2200      	movs	r2, #0
 80240aa:	4640      	mov	r0, r8
 80240ac:	4649      	mov	r1, r9
 80240ae:	f7dc f8fb 	bl	80002a8 <__aeabi_dsub>
 80240b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80240b6:	4680      	mov	r8, r0
 80240b8:	4689      	mov	r9, r1
 80240ba:	f7dc fd3d 	bl	8000b38 <__aeabi_dcmpgt>
 80240be:	2800      	cmp	r0, #0
 80240c0:	f040 8296 	bne.w	80245f0 <_dtoa_r+0x990>
 80240c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80240c8:	4640      	mov	r0, r8
 80240ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80240ce:	4649      	mov	r1, r9
 80240d0:	f7dc fd14 	bl	8000afc <__aeabi_dcmplt>
 80240d4:	2800      	cmp	r0, #0
 80240d6:	f040 8289 	bne.w	80245ec <_dtoa_r+0x98c>
 80240da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80240de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80240e0:	2b00      	cmp	r3, #0
 80240e2:	f2c0 814e 	blt.w	8024382 <_dtoa_r+0x722>
 80240e6:	f1bb 0f0e 	cmp.w	fp, #14
 80240ea:	f300 814a 	bgt.w	8024382 <_dtoa_r+0x722>
 80240ee:	4b6b      	ldr	r3, [pc, #428]	; (802429c <_dtoa_r+0x63c>)
 80240f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80240f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80240f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80240fa:	2b00      	cmp	r3, #0
 80240fc:	f280 80dc 	bge.w	80242b8 <_dtoa_r+0x658>
 8024100:	9b04      	ldr	r3, [sp, #16]
 8024102:	2b00      	cmp	r3, #0
 8024104:	f300 80d8 	bgt.w	80242b8 <_dtoa_r+0x658>
 8024108:	f040 826f 	bne.w	80245ea <_dtoa_r+0x98a>
 802410c:	4b68      	ldr	r3, [pc, #416]	; (80242b0 <_dtoa_r+0x650>)
 802410e:	2200      	movs	r2, #0
 8024110:	4640      	mov	r0, r8
 8024112:	4649      	mov	r1, r9
 8024114:	f7dc fa80 	bl	8000618 <__aeabi_dmul>
 8024118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802411c:	f7dc fd02 	bl	8000b24 <__aeabi_dcmpge>
 8024120:	9e04      	ldr	r6, [sp, #16]
 8024122:	4637      	mov	r7, r6
 8024124:	2800      	cmp	r0, #0
 8024126:	f040 8245 	bne.w	80245b4 <_dtoa_r+0x954>
 802412a:	9d00      	ldr	r5, [sp, #0]
 802412c:	2331      	movs	r3, #49	; 0x31
 802412e:	f805 3b01 	strb.w	r3, [r5], #1
 8024132:	f10b 0b01 	add.w	fp, fp, #1
 8024136:	e241      	b.n	80245bc <_dtoa_r+0x95c>
 8024138:	07f2      	lsls	r2, r6, #31
 802413a:	d505      	bpl.n	8024148 <_dtoa_r+0x4e8>
 802413c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8024140:	f7dc fa6a 	bl	8000618 <__aeabi_dmul>
 8024144:	3501      	adds	r5, #1
 8024146:	2301      	movs	r3, #1
 8024148:	1076      	asrs	r6, r6, #1
 802414a:	3708      	adds	r7, #8
 802414c:	e773      	b.n	8024036 <_dtoa_r+0x3d6>
 802414e:	2502      	movs	r5, #2
 8024150:	e775      	b.n	802403e <_dtoa_r+0x3de>
 8024152:	9e04      	ldr	r6, [sp, #16]
 8024154:	465f      	mov	r7, fp
 8024156:	e792      	b.n	802407e <_dtoa_r+0x41e>
 8024158:	9900      	ldr	r1, [sp, #0]
 802415a:	4b50      	ldr	r3, [pc, #320]	; (802429c <_dtoa_r+0x63c>)
 802415c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024160:	4431      	add	r1, r6
 8024162:	9102      	str	r1, [sp, #8]
 8024164:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024166:	eeb0 9a47 	vmov.f32	s18, s14
 802416a:	eef0 9a67 	vmov.f32	s19, s15
 802416e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8024172:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8024176:	2900      	cmp	r1, #0
 8024178:	d044      	beq.n	8024204 <_dtoa_r+0x5a4>
 802417a:	494e      	ldr	r1, [pc, #312]	; (80242b4 <_dtoa_r+0x654>)
 802417c:	2000      	movs	r0, #0
 802417e:	f7dc fb75 	bl	800086c <__aeabi_ddiv>
 8024182:	ec53 2b19 	vmov	r2, r3, d9
 8024186:	f7dc f88f 	bl	80002a8 <__aeabi_dsub>
 802418a:	9d00      	ldr	r5, [sp, #0]
 802418c:	ec41 0b19 	vmov	d9, r0, r1
 8024190:	4649      	mov	r1, r9
 8024192:	4640      	mov	r0, r8
 8024194:	f7dc fcf0 	bl	8000b78 <__aeabi_d2iz>
 8024198:	4606      	mov	r6, r0
 802419a:	f7dc f9d3 	bl	8000544 <__aeabi_i2d>
 802419e:	4602      	mov	r2, r0
 80241a0:	460b      	mov	r3, r1
 80241a2:	4640      	mov	r0, r8
 80241a4:	4649      	mov	r1, r9
 80241a6:	f7dc f87f 	bl	80002a8 <__aeabi_dsub>
 80241aa:	3630      	adds	r6, #48	; 0x30
 80241ac:	f805 6b01 	strb.w	r6, [r5], #1
 80241b0:	ec53 2b19 	vmov	r2, r3, d9
 80241b4:	4680      	mov	r8, r0
 80241b6:	4689      	mov	r9, r1
 80241b8:	f7dc fca0 	bl	8000afc <__aeabi_dcmplt>
 80241bc:	2800      	cmp	r0, #0
 80241be:	d164      	bne.n	802428a <_dtoa_r+0x62a>
 80241c0:	4642      	mov	r2, r8
 80241c2:	464b      	mov	r3, r9
 80241c4:	4937      	ldr	r1, [pc, #220]	; (80242a4 <_dtoa_r+0x644>)
 80241c6:	2000      	movs	r0, #0
 80241c8:	f7dc f86e 	bl	80002a8 <__aeabi_dsub>
 80241cc:	ec53 2b19 	vmov	r2, r3, d9
 80241d0:	f7dc fc94 	bl	8000afc <__aeabi_dcmplt>
 80241d4:	2800      	cmp	r0, #0
 80241d6:	f040 80b6 	bne.w	8024346 <_dtoa_r+0x6e6>
 80241da:	9b02      	ldr	r3, [sp, #8]
 80241dc:	429d      	cmp	r5, r3
 80241de:	f43f af7c 	beq.w	80240da <_dtoa_r+0x47a>
 80241e2:	4b31      	ldr	r3, [pc, #196]	; (80242a8 <_dtoa_r+0x648>)
 80241e4:	ec51 0b19 	vmov	r0, r1, d9
 80241e8:	2200      	movs	r2, #0
 80241ea:	f7dc fa15 	bl	8000618 <__aeabi_dmul>
 80241ee:	4b2e      	ldr	r3, [pc, #184]	; (80242a8 <_dtoa_r+0x648>)
 80241f0:	ec41 0b19 	vmov	d9, r0, r1
 80241f4:	2200      	movs	r2, #0
 80241f6:	4640      	mov	r0, r8
 80241f8:	4649      	mov	r1, r9
 80241fa:	f7dc fa0d 	bl	8000618 <__aeabi_dmul>
 80241fe:	4680      	mov	r8, r0
 8024200:	4689      	mov	r9, r1
 8024202:	e7c5      	b.n	8024190 <_dtoa_r+0x530>
 8024204:	ec51 0b17 	vmov	r0, r1, d7
 8024208:	f7dc fa06 	bl	8000618 <__aeabi_dmul>
 802420c:	9b02      	ldr	r3, [sp, #8]
 802420e:	9d00      	ldr	r5, [sp, #0]
 8024210:	930f      	str	r3, [sp, #60]	; 0x3c
 8024212:	ec41 0b19 	vmov	d9, r0, r1
 8024216:	4649      	mov	r1, r9
 8024218:	4640      	mov	r0, r8
 802421a:	f7dc fcad 	bl	8000b78 <__aeabi_d2iz>
 802421e:	4606      	mov	r6, r0
 8024220:	f7dc f990 	bl	8000544 <__aeabi_i2d>
 8024224:	3630      	adds	r6, #48	; 0x30
 8024226:	4602      	mov	r2, r0
 8024228:	460b      	mov	r3, r1
 802422a:	4640      	mov	r0, r8
 802422c:	4649      	mov	r1, r9
 802422e:	f7dc f83b 	bl	80002a8 <__aeabi_dsub>
 8024232:	f805 6b01 	strb.w	r6, [r5], #1
 8024236:	9b02      	ldr	r3, [sp, #8]
 8024238:	429d      	cmp	r5, r3
 802423a:	4680      	mov	r8, r0
 802423c:	4689      	mov	r9, r1
 802423e:	f04f 0200 	mov.w	r2, #0
 8024242:	d124      	bne.n	802428e <_dtoa_r+0x62e>
 8024244:	4b1b      	ldr	r3, [pc, #108]	; (80242b4 <_dtoa_r+0x654>)
 8024246:	ec51 0b19 	vmov	r0, r1, d9
 802424a:	f7dc f82f 	bl	80002ac <__adddf3>
 802424e:	4602      	mov	r2, r0
 8024250:	460b      	mov	r3, r1
 8024252:	4640      	mov	r0, r8
 8024254:	4649      	mov	r1, r9
 8024256:	f7dc fc6f 	bl	8000b38 <__aeabi_dcmpgt>
 802425a:	2800      	cmp	r0, #0
 802425c:	d173      	bne.n	8024346 <_dtoa_r+0x6e6>
 802425e:	ec53 2b19 	vmov	r2, r3, d9
 8024262:	4914      	ldr	r1, [pc, #80]	; (80242b4 <_dtoa_r+0x654>)
 8024264:	2000      	movs	r0, #0
 8024266:	f7dc f81f 	bl	80002a8 <__aeabi_dsub>
 802426a:	4602      	mov	r2, r0
 802426c:	460b      	mov	r3, r1
 802426e:	4640      	mov	r0, r8
 8024270:	4649      	mov	r1, r9
 8024272:	f7dc fc43 	bl	8000afc <__aeabi_dcmplt>
 8024276:	2800      	cmp	r0, #0
 8024278:	f43f af2f 	beq.w	80240da <_dtoa_r+0x47a>
 802427c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802427e:	1e6b      	subs	r3, r5, #1
 8024280:	930f      	str	r3, [sp, #60]	; 0x3c
 8024282:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8024286:	2b30      	cmp	r3, #48	; 0x30
 8024288:	d0f8      	beq.n	802427c <_dtoa_r+0x61c>
 802428a:	46bb      	mov	fp, r7
 802428c:	e04a      	b.n	8024324 <_dtoa_r+0x6c4>
 802428e:	4b06      	ldr	r3, [pc, #24]	; (80242a8 <_dtoa_r+0x648>)
 8024290:	f7dc f9c2 	bl	8000618 <__aeabi_dmul>
 8024294:	4680      	mov	r8, r0
 8024296:	4689      	mov	r9, r1
 8024298:	e7bd      	b.n	8024216 <_dtoa_r+0x5b6>
 802429a:	bf00      	nop
 802429c:	0802e3a0 	.word	0x0802e3a0
 80242a0:	0802e378 	.word	0x0802e378
 80242a4:	3ff00000 	.word	0x3ff00000
 80242a8:	40240000 	.word	0x40240000
 80242ac:	401c0000 	.word	0x401c0000
 80242b0:	40140000 	.word	0x40140000
 80242b4:	3fe00000 	.word	0x3fe00000
 80242b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80242bc:	9d00      	ldr	r5, [sp, #0]
 80242be:	4642      	mov	r2, r8
 80242c0:	464b      	mov	r3, r9
 80242c2:	4630      	mov	r0, r6
 80242c4:	4639      	mov	r1, r7
 80242c6:	f7dc fad1 	bl	800086c <__aeabi_ddiv>
 80242ca:	f7dc fc55 	bl	8000b78 <__aeabi_d2iz>
 80242ce:	9001      	str	r0, [sp, #4]
 80242d0:	f7dc f938 	bl	8000544 <__aeabi_i2d>
 80242d4:	4642      	mov	r2, r8
 80242d6:	464b      	mov	r3, r9
 80242d8:	f7dc f99e 	bl	8000618 <__aeabi_dmul>
 80242dc:	4602      	mov	r2, r0
 80242de:	460b      	mov	r3, r1
 80242e0:	4630      	mov	r0, r6
 80242e2:	4639      	mov	r1, r7
 80242e4:	f7db ffe0 	bl	80002a8 <__aeabi_dsub>
 80242e8:	9e01      	ldr	r6, [sp, #4]
 80242ea:	9f04      	ldr	r7, [sp, #16]
 80242ec:	3630      	adds	r6, #48	; 0x30
 80242ee:	f805 6b01 	strb.w	r6, [r5], #1
 80242f2:	9e00      	ldr	r6, [sp, #0]
 80242f4:	1bae      	subs	r6, r5, r6
 80242f6:	42b7      	cmp	r7, r6
 80242f8:	4602      	mov	r2, r0
 80242fa:	460b      	mov	r3, r1
 80242fc:	d134      	bne.n	8024368 <_dtoa_r+0x708>
 80242fe:	f7db ffd5 	bl	80002ac <__adddf3>
 8024302:	4642      	mov	r2, r8
 8024304:	464b      	mov	r3, r9
 8024306:	4606      	mov	r6, r0
 8024308:	460f      	mov	r7, r1
 802430a:	f7dc fc15 	bl	8000b38 <__aeabi_dcmpgt>
 802430e:	b9c8      	cbnz	r0, 8024344 <_dtoa_r+0x6e4>
 8024310:	4642      	mov	r2, r8
 8024312:	464b      	mov	r3, r9
 8024314:	4630      	mov	r0, r6
 8024316:	4639      	mov	r1, r7
 8024318:	f7dc fbe6 	bl	8000ae8 <__aeabi_dcmpeq>
 802431c:	b110      	cbz	r0, 8024324 <_dtoa_r+0x6c4>
 802431e:	9b01      	ldr	r3, [sp, #4]
 8024320:	07db      	lsls	r3, r3, #31
 8024322:	d40f      	bmi.n	8024344 <_dtoa_r+0x6e4>
 8024324:	4651      	mov	r1, sl
 8024326:	4620      	mov	r0, r4
 8024328:	f000 fbcc 	bl	8024ac4 <_Bfree>
 802432c:	2300      	movs	r3, #0
 802432e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024330:	702b      	strb	r3, [r5, #0]
 8024332:	f10b 0301 	add.w	r3, fp, #1
 8024336:	6013      	str	r3, [r2, #0]
 8024338:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802433a:	2b00      	cmp	r3, #0
 802433c:	f43f ace2 	beq.w	8023d04 <_dtoa_r+0xa4>
 8024340:	601d      	str	r5, [r3, #0]
 8024342:	e4df      	b.n	8023d04 <_dtoa_r+0xa4>
 8024344:	465f      	mov	r7, fp
 8024346:	462b      	mov	r3, r5
 8024348:	461d      	mov	r5, r3
 802434a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802434e:	2a39      	cmp	r2, #57	; 0x39
 8024350:	d106      	bne.n	8024360 <_dtoa_r+0x700>
 8024352:	9a00      	ldr	r2, [sp, #0]
 8024354:	429a      	cmp	r2, r3
 8024356:	d1f7      	bne.n	8024348 <_dtoa_r+0x6e8>
 8024358:	9900      	ldr	r1, [sp, #0]
 802435a:	2230      	movs	r2, #48	; 0x30
 802435c:	3701      	adds	r7, #1
 802435e:	700a      	strb	r2, [r1, #0]
 8024360:	781a      	ldrb	r2, [r3, #0]
 8024362:	3201      	adds	r2, #1
 8024364:	701a      	strb	r2, [r3, #0]
 8024366:	e790      	b.n	802428a <_dtoa_r+0x62a>
 8024368:	4ba3      	ldr	r3, [pc, #652]	; (80245f8 <_dtoa_r+0x998>)
 802436a:	2200      	movs	r2, #0
 802436c:	f7dc f954 	bl	8000618 <__aeabi_dmul>
 8024370:	2200      	movs	r2, #0
 8024372:	2300      	movs	r3, #0
 8024374:	4606      	mov	r6, r0
 8024376:	460f      	mov	r7, r1
 8024378:	f7dc fbb6 	bl	8000ae8 <__aeabi_dcmpeq>
 802437c:	2800      	cmp	r0, #0
 802437e:	d09e      	beq.n	80242be <_dtoa_r+0x65e>
 8024380:	e7d0      	b.n	8024324 <_dtoa_r+0x6c4>
 8024382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024384:	2a00      	cmp	r2, #0
 8024386:	f000 80ca 	beq.w	802451e <_dtoa_r+0x8be>
 802438a:	9a07      	ldr	r2, [sp, #28]
 802438c:	2a01      	cmp	r2, #1
 802438e:	f300 80ad 	bgt.w	80244ec <_dtoa_r+0x88c>
 8024392:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024394:	2a00      	cmp	r2, #0
 8024396:	f000 80a5 	beq.w	80244e4 <_dtoa_r+0x884>
 802439a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802439e:	9e08      	ldr	r6, [sp, #32]
 80243a0:	9d05      	ldr	r5, [sp, #20]
 80243a2:	9a05      	ldr	r2, [sp, #20]
 80243a4:	441a      	add	r2, r3
 80243a6:	9205      	str	r2, [sp, #20]
 80243a8:	9a06      	ldr	r2, [sp, #24]
 80243aa:	2101      	movs	r1, #1
 80243ac:	441a      	add	r2, r3
 80243ae:	4620      	mov	r0, r4
 80243b0:	9206      	str	r2, [sp, #24]
 80243b2:	f000 fc3d 	bl	8024c30 <__i2b>
 80243b6:	4607      	mov	r7, r0
 80243b8:	b165      	cbz	r5, 80243d4 <_dtoa_r+0x774>
 80243ba:	9b06      	ldr	r3, [sp, #24]
 80243bc:	2b00      	cmp	r3, #0
 80243be:	dd09      	ble.n	80243d4 <_dtoa_r+0x774>
 80243c0:	42ab      	cmp	r3, r5
 80243c2:	9a05      	ldr	r2, [sp, #20]
 80243c4:	bfa8      	it	ge
 80243c6:	462b      	movge	r3, r5
 80243c8:	1ad2      	subs	r2, r2, r3
 80243ca:	9205      	str	r2, [sp, #20]
 80243cc:	9a06      	ldr	r2, [sp, #24]
 80243ce:	1aed      	subs	r5, r5, r3
 80243d0:	1ad3      	subs	r3, r2, r3
 80243d2:	9306      	str	r3, [sp, #24]
 80243d4:	9b08      	ldr	r3, [sp, #32]
 80243d6:	b1f3      	cbz	r3, 8024416 <_dtoa_r+0x7b6>
 80243d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80243da:	2b00      	cmp	r3, #0
 80243dc:	f000 80a3 	beq.w	8024526 <_dtoa_r+0x8c6>
 80243e0:	2e00      	cmp	r6, #0
 80243e2:	dd10      	ble.n	8024406 <_dtoa_r+0x7a6>
 80243e4:	4639      	mov	r1, r7
 80243e6:	4632      	mov	r2, r6
 80243e8:	4620      	mov	r0, r4
 80243ea:	f000 fce1 	bl	8024db0 <__pow5mult>
 80243ee:	4652      	mov	r2, sl
 80243f0:	4601      	mov	r1, r0
 80243f2:	4607      	mov	r7, r0
 80243f4:	4620      	mov	r0, r4
 80243f6:	f000 fc31 	bl	8024c5c <__multiply>
 80243fa:	4651      	mov	r1, sl
 80243fc:	4680      	mov	r8, r0
 80243fe:	4620      	mov	r0, r4
 8024400:	f000 fb60 	bl	8024ac4 <_Bfree>
 8024404:	46c2      	mov	sl, r8
 8024406:	9b08      	ldr	r3, [sp, #32]
 8024408:	1b9a      	subs	r2, r3, r6
 802440a:	d004      	beq.n	8024416 <_dtoa_r+0x7b6>
 802440c:	4651      	mov	r1, sl
 802440e:	4620      	mov	r0, r4
 8024410:	f000 fcce 	bl	8024db0 <__pow5mult>
 8024414:	4682      	mov	sl, r0
 8024416:	2101      	movs	r1, #1
 8024418:	4620      	mov	r0, r4
 802441a:	f000 fc09 	bl	8024c30 <__i2b>
 802441e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024420:	2b00      	cmp	r3, #0
 8024422:	4606      	mov	r6, r0
 8024424:	f340 8081 	ble.w	802452a <_dtoa_r+0x8ca>
 8024428:	461a      	mov	r2, r3
 802442a:	4601      	mov	r1, r0
 802442c:	4620      	mov	r0, r4
 802442e:	f000 fcbf 	bl	8024db0 <__pow5mult>
 8024432:	9b07      	ldr	r3, [sp, #28]
 8024434:	2b01      	cmp	r3, #1
 8024436:	4606      	mov	r6, r0
 8024438:	dd7a      	ble.n	8024530 <_dtoa_r+0x8d0>
 802443a:	f04f 0800 	mov.w	r8, #0
 802443e:	6933      	ldr	r3, [r6, #16]
 8024440:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8024444:	6918      	ldr	r0, [r3, #16]
 8024446:	f000 fba5 	bl	8024b94 <__hi0bits>
 802444a:	f1c0 0020 	rsb	r0, r0, #32
 802444e:	9b06      	ldr	r3, [sp, #24]
 8024450:	4418      	add	r0, r3
 8024452:	f010 001f 	ands.w	r0, r0, #31
 8024456:	f000 8094 	beq.w	8024582 <_dtoa_r+0x922>
 802445a:	f1c0 0320 	rsb	r3, r0, #32
 802445e:	2b04      	cmp	r3, #4
 8024460:	f340 8085 	ble.w	802456e <_dtoa_r+0x90e>
 8024464:	9b05      	ldr	r3, [sp, #20]
 8024466:	f1c0 001c 	rsb	r0, r0, #28
 802446a:	4403      	add	r3, r0
 802446c:	9305      	str	r3, [sp, #20]
 802446e:	9b06      	ldr	r3, [sp, #24]
 8024470:	4403      	add	r3, r0
 8024472:	4405      	add	r5, r0
 8024474:	9306      	str	r3, [sp, #24]
 8024476:	9b05      	ldr	r3, [sp, #20]
 8024478:	2b00      	cmp	r3, #0
 802447a:	dd05      	ble.n	8024488 <_dtoa_r+0x828>
 802447c:	4651      	mov	r1, sl
 802447e:	461a      	mov	r2, r3
 8024480:	4620      	mov	r0, r4
 8024482:	f000 fcef 	bl	8024e64 <__lshift>
 8024486:	4682      	mov	sl, r0
 8024488:	9b06      	ldr	r3, [sp, #24]
 802448a:	2b00      	cmp	r3, #0
 802448c:	dd05      	ble.n	802449a <_dtoa_r+0x83a>
 802448e:	4631      	mov	r1, r6
 8024490:	461a      	mov	r2, r3
 8024492:	4620      	mov	r0, r4
 8024494:	f000 fce6 	bl	8024e64 <__lshift>
 8024498:	4606      	mov	r6, r0
 802449a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802449c:	2b00      	cmp	r3, #0
 802449e:	d072      	beq.n	8024586 <_dtoa_r+0x926>
 80244a0:	4631      	mov	r1, r6
 80244a2:	4650      	mov	r0, sl
 80244a4:	f000 fd4a 	bl	8024f3c <__mcmp>
 80244a8:	2800      	cmp	r0, #0
 80244aa:	da6c      	bge.n	8024586 <_dtoa_r+0x926>
 80244ac:	2300      	movs	r3, #0
 80244ae:	4651      	mov	r1, sl
 80244b0:	220a      	movs	r2, #10
 80244b2:	4620      	mov	r0, r4
 80244b4:	f000 fb28 	bl	8024b08 <__multadd>
 80244b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80244ba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80244be:	4682      	mov	sl, r0
 80244c0:	2b00      	cmp	r3, #0
 80244c2:	f000 81b0 	beq.w	8024826 <_dtoa_r+0xbc6>
 80244c6:	2300      	movs	r3, #0
 80244c8:	4639      	mov	r1, r7
 80244ca:	220a      	movs	r2, #10
 80244cc:	4620      	mov	r0, r4
 80244ce:	f000 fb1b 	bl	8024b08 <__multadd>
 80244d2:	9b01      	ldr	r3, [sp, #4]
 80244d4:	2b00      	cmp	r3, #0
 80244d6:	4607      	mov	r7, r0
 80244d8:	f300 8096 	bgt.w	8024608 <_dtoa_r+0x9a8>
 80244dc:	9b07      	ldr	r3, [sp, #28]
 80244de:	2b02      	cmp	r3, #2
 80244e0:	dc59      	bgt.n	8024596 <_dtoa_r+0x936>
 80244e2:	e091      	b.n	8024608 <_dtoa_r+0x9a8>
 80244e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80244e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80244ea:	e758      	b.n	802439e <_dtoa_r+0x73e>
 80244ec:	9b04      	ldr	r3, [sp, #16]
 80244ee:	1e5e      	subs	r6, r3, #1
 80244f0:	9b08      	ldr	r3, [sp, #32]
 80244f2:	42b3      	cmp	r3, r6
 80244f4:	bfbf      	itttt	lt
 80244f6:	9b08      	ldrlt	r3, [sp, #32]
 80244f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80244fa:	9608      	strlt	r6, [sp, #32]
 80244fc:	1af3      	sublt	r3, r6, r3
 80244fe:	bfb4      	ite	lt
 8024500:	18d2      	addlt	r2, r2, r3
 8024502:	1b9e      	subge	r6, r3, r6
 8024504:	9b04      	ldr	r3, [sp, #16]
 8024506:	bfbc      	itt	lt
 8024508:	920b      	strlt	r2, [sp, #44]	; 0x2c
 802450a:	2600      	movlt	r6, #0
 802450c:	2b00      	cmp	r3, #0
 802450e:	bfb7      	itett	lt
 8024510:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8024514:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8024518:	1a9d      	sublt	r5, r3, r2
 802451a:	2300      	movlt	r3, #0
 802451c:	e741      	b.n	80243a2 <_dtoa_r+0x742>
 802451e:	9e08      	ldr	r6, [sp, #32]
 8024520:	9d05      	ldr	r5, [sp, #20]
 8024522:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024524:	e748      	b.n	80243b8 <_dtoa_r+0x758>
 8024526:	9a08      	ldr	r2, [sp, #32]
 8024528:	e770      	b.n	802440c <_dtoa_r+0x7ac>
 802452a:	9b07      	ldr	r3, [sp, #28]
 802452c:	2b01      	cmp	r3, #1
 802452e:	dc19      	bgt.n	8024564 <_dtoa_r+0x904>
 8024530:	9b02      	ldr	r3, [sp, #8]
 8024532:	b9bb      	cbnz	r3, 8024564 <_dtoa_r+0x904>
 8024534:	9b03      	ldr	r3, [sp, #12]
 8024536:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802453a:	b99b      	cbnz	r3, 8024564 <_dtoa_r+0x904>
 802453c:	9b03      	ldr	r3, [sp, #12]
 802453e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024542:	0d1b      	lsrs	r3, r3, #20
 8024544:	051b      	lsls	r3, r3, #20
 8024546:	b183      	cbz	r3, 802456a <_dtoa_r+0x90a>
 8024548:	9b05      	ldr	r3, [sp, #20]
 802454a:	3301      	adds	r3, #1
 802454c:	9305      	str	r3, [sp, #20]
 802454e:	9b06      	ldr	r3, [sp, #24]
 8024550:	3301      	adds	r3, #1
 8024552:	9306      	str	r3, [sp, #24]
 8024554:	f04f 0801 	mov.w	r8, #1
 8024558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802455a:	2b00      	cmp	r3, #0
 802455c:	f47f af6f 	bne.w	802443e <_dtoa_r+0x7de>
 8024560:	2001      	movs	r0, #1
 8024562:	e774      	b.n	802444e <_dtoa_r+0x7ee>
 8024564:	f04f 0800 	mov.w	r8, #0
 8024568:	e7f6      	b.n	8024558 <_dtoa_r+0x8f8>
 802456a:	4698      	mov	r8, r3
 802456c:	e7f4      	b.n	8024558 <_dtoa_r+0x8f8>
 802456e:	d082      	beq.n	8024476 <_dtoa_r+0x816>
 8024570:	9a05      	ldr	r2, [sp, #20]
 8024572:	331c      	adds	r3, #28
 8024574:	441a      	add	r2, r3
 8024576:	9205      	str	r2, [sp, #20]
 8024578:	9a06      	ldr	r2, [sp, #24]
 802457a:	441a      	add	r2, r3
 802457c:	441d      	add	r5, r3
 802457e:	9206      	str	r2, [sp, #24]
 8024580:	e779      	b.n	8024476 <_dtoa_r+0x816>
 8024582:	4603      	mov	r3, r0
 8024584:	e7f4      	b.n	8024570 <_dtoa_r+0x910>
 8024586:	9b04      	ldr	r3, [sp, #16]
 8024588:	2b00      	cmp	r3, #0
 802458a:	dc37      	bgt.n	80245fc <_dtoa_r+0x99c>
 802458c:	9b07      	ldr	r3, [sp, #28]
 802458e:	2b02      	cmp	r3, #2
 8024590:	dd34      	ble.n	80245fc <_dtoa_r+0x99c>
 8024592:	9b04      	ldr	r3, [sp, #16]
 8024594:	9301      	str	r3, [sp, #4]
 8024596:	9b01      	ldr	r3, [sp, #4]
 8024598:	b963      	cbnz	r3, 80245b4 <_dtoa_r+0x954>
 802459a:	4631      	mov	r1, r6
 802459c:	2205      	movs	r2, #5
 802459e:	4620      	mov	r0, r4
 80245a0:	f000 fab2 	bl	8024b08 <__multadd>
 80245a4:	4601      	mov	r1, r0
 80245a6:	4606      	mov	r6, r0
 80245a8:	4650      	mov	r0, sl
 80245aa:	f000 fcc7 	bl	8024f3c <__mcmp>
 80245ae:	2800      	cmp	r0, #0
 80245b0:	f73f adbb 	bgt.w	802412a <_dtoa_r+0x4ca>
 80245b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80245b6:	9d00      	ldr	r5, [sp, #0]
 80245b8:	ea6f 0b03 	mvn.w	fp, r3
 80245bc:	f04f 0800 	mov.w	r8, #0
 80245c0:	4631      	mov	r1, r6
 80245c2:	4620      	mov	r0, r4
 80245c4:	f000 fa7e 	bl	8024ac4 <_Bfree>
 80245c8:	2f00      	cmp	r7, #0
 80245ca:	f43f aeab 	beq.w	8024324 <_dtoa_r+0x6c4>
 80245ce:	f1b8 0f00 	cmp.w	r8, #0
 80245d2:	d005      	beq.n	80245e0 <_dtoa_r+0x980>
 80245d4:	45b8      	cmp	r8, r7
 80245d6:	d003      	beq.n	80245e0 <_dtoa_r+0x980>
 80245d8:	4641      	mov	r1, r8
 80245da:	4620      	mov	r0, r4
 80245dc:	f000 fa72 	bl	8024ac4 <_Bfree>
 80245e0:	4639      	mov	r1, r7
 80245e2:	4620      	mov	r0, r4
 80245e4:	f000 fa6e 	bl	8024ac4 <_Bfree>
 80245e8:	e69c      	b.n	8024324 <_dtoa_r+0x6c4>
 80245ea:	2600      	movs	r6, #0
 80245ec:	4637      	mov	r7, r6
 80245ee:	e7e1      	b.n	80245b4 <_dtoa_r+0x954>
 80245f0:	46bb      	mov	fp, r7
 80245f2:	4637      	mov	r7, r6
 80245f4:	e599      	b.n	802412a <_dtoa_r+0x4ca>
 80245f6:	bf00      	nop
 80245f8:	40240000 	.word	0x40240000
 80245fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245fe:	2b00      	cmp	r3, #0
 8024600:	f000 80c8 	beq.w	8024794 <_dtoa_r+0xb34>
 8024604:	9b04      	ldr	r3, [sp, #16]
 8024606:	9301      	str	r3, [sp, #4]
 8024608:	2d00      	cmp	r5, #0
 802460a:	dd05      	ble.n	8024618 <_dtoa_r+0x9b8>
 802460c:	4639      	mov	r1, r7
 802460e:	462a      	mov	r2, r5
 8024610:	4620      	mov	r0, r4
 8024612:	f000 fc27 	bl	8024e64 <__lshift>
 8024616:	4607      	mov	r7, r0
 8024618:	f1b8 0f00 	cmp.w	r8, #0
 802461c:	d05b      	beq.n	80246d6 <_dtoa_r+0xa76>
 802461e:	6879      	ldr	r1, [r7, #4]
 8024620:	4620      	mov	r0, r4
 8024622:	f000 fa0f 	bl	8024a44 <_Balloc>
 8024626:	4605      	mov	r5, r0
 8024628:	b928      	cbnz	r0, 8024636 <_dtoa_r+0x9d6>
 802462a:	4b83      	ldr	r3, [pc, #524]	; (8024838 <_dtoa_r+0xbd8>)
 802462c:	4602      	mov	r2, r0
 802462e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8024632:	f7ff bb2e 	b.w	8023c92 <_dtoa_r+0x32>
 8024636:	693a      	ldr	r2, [r7, #16]
 8024638:	3202      	adds	r2, #2
 802463a:	0092      	lsls	r2, r2, #2
 802463c:	f107 010c 	add.w	r1, r7, #12
 8024640:	300c      	adds	r0, #12
 8024642:	f7ff fa6a 	bl	8023b1a <memcpy>
 8024646:	2201      	movs	r2, #1
 8024648:	4629      	mov	r1, r5
 802464a:	4620      	mov	r0, r4
 802464c:	f000 fc0a 	bl	8024e64 <__lshift>
 8024650:	9b00      	ldr	r3, [sp, #0]
 8024652:	3301      	adds	r3, #1
 8024654:	9304      	str	r3, [sp, #16]
 8024656:	e9dd 2300 	ldrd	r2, r3, [sp]
 802465a:	4413      	add	r3, r2
 802465c:	9308      	str	r3, [sp, #32]
 802465e:	9b02      	ldr	r3, [sp, #8]
 8024660:	f003 0301 	and.w	r3, r3, #1
 8024664:	46b8      	mov	r8, r7
 8024666:	9306      	str	r3, [sp, #24]
 8024668:	4607      	mov	r7, r0
 802466a:	9b04      	ldr	r3, [sp, #16]
 802466c:	4631      	mov	r1, r6
 802466e:	3b01      	subs	r3, #1
 8024670:	4650      	mov	r0, sl
 8024672:	9301      	str	r3, [sp, #4]
 8024674:	f7ff fa6b 	bl	8023b4e <quorem>
 8024678:	4641      	mov	r1, r8
 802467a:	9002      	str	r0, [sp, #8]
 802467c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8024680:	4650      	mov	r0, sl
 8024682:	f000 fc5b 	bl	8024f3c <__mcmp>
 8024686:	463a      	mov	r2, r7
 8024688:	9005      	str	r0, [sp, #20]
 802468a:	4631      	mov	r1, r6
 802468c:	4620      	mov	r0, r4
 802468e:	f000 fc71 	bl	8024f74 <__mdiff>
 8024692:	68c2      	ldr	r2, [r0, #12]
 8024694:	4605      	mov	r5, r0
 8024696:	bb02      	cbnz	r2, 80246da <_dtoa_r+0xa7a>
 8024698:	4601      	mov	r1, r0
 802469a:	4650      	mov	r0, sl
 802469c:	f000 fc4e 	bl	8024f3c <__mcmp>
 80246a0:	4602      	mov	r2, r0
 80246a2:	4629      	mov	r1, r5
 80246a4:	4620      	mov	r0, r4
 80246a6:	9209      	str	r2, [sp, #36]	; 0x24
 80246a8:	f000 fa0c 	bl	8024ac4 <_Bfree>
 80246ac:	9b07      	ldr	r3, [sp, #28]
 80246ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80246b0:	9d04      	ldr	r5, [sp, #16]
 80246b2:	ea43 0102 	orr.w	r1, r3, r2
 80246b6:	9b06      	ldr	r3, [sp, #24]
 80246b8:	4319      	orrs	r1, r3
 80246ba:	d110      	bne.n	80246de <_dtoa_r+0xa7e>
 80246bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80246c0:	d029      	beq.n	8024716 <_dtoa_r+0xab6>
 80246c2:	9b05      	ldr	r3, [sp, #20]
 80246c4:	2b00      	cmp	r3, #0
 80246c6:	dd02      	ble.n	80246ce <_dtoa_r+0xa6e>
 80246c8:	9b02      	ldr	r3, [sp, #8]
 80246ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80246ce:	9b01      	ldr	r3, [sp, #4]
 80246d0:	f883 9000 	strb.w	r9, [r3]
 80246d4:	e774      	b.n	80245c0 <_dtoa_r+0x960>
 80246d6:	4638      	mov	r0, r7
 80246d8:	e7ba      	b.n	8024650 <_dtoa_r+0x9f0>
 80246da:	2201      	movs	r2, #1
 80246dc:	e7e1      	b.n	80246a2 <_dtoa_r+0xa42>
 80246de:	9b05      	ldr	r3, [sp, #20]
 80246e0:	2b00      	cmp	r3, #0
 80246e2:	db04      	blt.n	80246ee <_dtoa_r+0xa8e>
 80246e4:	9907      	ldr	r1, [sp, #28]
 80246e6:	430b      	orrs	r3, r1
 80246e8:	9906      	ldr	r1, [sp, #24]
 80246ea:	430b      	orrs	r3, r1
 80246ec:	d120      	bne.n	8024730 <_dtoa_r+0xad0>
 80246ee:	2a00      	cmp	r2, #0
 80246f0:	dded      	ble.n	80246ce <_dtoa_r+0xa6e>
 80246f2:	4651      	mov	r1, sl
 80246f4:	2201      	movs	r2, #1
 80246f6:	4620      	mov	r0, r4
 80246f8:	f000 fbb4 	bl	8024e64 <__lshift>
 80246fc:	4631      	mov	r1, r6
 80246fe:	4682      	mov	sl, r0
 8024700:	f000 fc1c 	bl	8024f3c <__mcmp>
 8024704:	2800      	cmp	r0, #0
 8024706:	dc03      	bgt.n	8024710 <_dtoa_r+0xab0>
 8024708:	d1e1      	bne.n	80246ce <_dtoa_r+0xa6e>
 802470a:	f019 0f01 	tst.w	r9, #1
 802470e:	d0de      	beq.n	80246ce <_dtoa_r+0xa6e>
 8024710:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8024714:	d1d8      	bne.n	80246c8 <_dtoa_r+0xa68>
 8024716:	9a01      	ldr	r2, [sp, #4]
 8024718:	2339      	movs	r3, #57	; 0x39
 802471a:	7013      	strb	r3, [r2, #0]
 802471c:	462b      	mov	r3, r5
 802471e:	461d      	mov	r5, r3
 8024720:	3b01      	subs	r3, #1
 8024722:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8024726:	2a39      	cmp	r2, #57	; 0x39
 8024728:	d06c      	beq.n	8024804 <_dtoa_r+0xba4>
 802472a:	3201      	adds	r2, #1
 802472c:	701a      	strb	r2, [r3, #0]
 802472e:	e747      	b.n	80245c0 <_dtoa_r+0x960>
 8024730:	2a00      	cmp	r2, #0
 8024732:	dd07      	ble.n	8024744 <_dtoa_r+0xae4>
 8024734:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8024738:	d0ed      	beq.n	8024716 <_dtoa_r+0xab6>
 802473a:	9a01      	ldr	r2, [sp, #4]
 802473c:	f109 0301 	add.w	r3, r9, #1
 8024740:	7013      	strb	r3, [r2, #0]
 8024742:	e73d      	b.n	80245c0 <_dtoa_r+0x960>
 8024744:	9b04      	ldr	r3, [sp, #16]
 8024746:	9a08      	ldr	r2, [sp, #32]
 8024748:	f803 9c01 	strb.w	r9, [r3, #-1]
 802474c:	4293      	cmp	r3, r2
 802474e:	d043      	beq.n	80247d8 <_dtoa_r+0xb78>
 8024750:	4651      	mov	r1, sl
 8024752:	2300      	movs	r3, #0
 8024754:	220a      	movs	r2, #10
 8024756:	4620      	mov	r0, r4
 8024758:	f000 f9d6 	bl	8024b08 <__multadd>
 802475c:	45b8      	cmp	r8, r7
 802475e:	4682      	mov	sl, r0
 8024760:	f04f 0300 	mov.w	r3, #0
 8024764:	f04f 020a 	mov.w	r2, #10
 8024768:	4641      	mov	r1, r8
 802476a:	4620      	mov	r0, r4
 802476c:	d107      	bne.n	802477e <_dtoa_r+0xb1e>
 802476e:	f000 f9cb 	bl	8024b08 <__multadd>
 8024772:	4680      	mov	r8, r0
 8024774:	4607      	mov	r7, r0
 8024776:	9b04      	ldr	r3, [sp, #16]
 8024778:	3301      	adds	r3, #1
 802477a:	9304      	str	r3, [sp, #16]
 802477c:	e775      	b.n	802466a <_dtoa_r+0xa0a>
 802477e:	f000 f9c3 	bl	8024b08 <__multadd>
 8024782:	4639      	mov	r1, r7
 8024784:	4680      	mov	r8, r0
 8024786:	2300      	movs	r3, #0
 8024788:	220a      	movs	r2, #10
 802478a:	4620      	mov	r0, r4
 802478c:	f000 f9bc 	bl	8024b08 <__multadd>
 8024790:	4607      	mov	r7, r0
 8024792:	e7f0      	b.n	8024776 <_dtoa_r+0xb16>
 8024794:	9b04      	ldr	r3, [sp, #16]
 8024796:	9301      	str	r3, [sp, #4]
 8024798:	9d00      	ldr	r5, [sp, #0]
 802479a:	4631      	mov	r1, r6
 802479c:	4650      	mov	r0, sl
 802479e:	f7ff f9d6 	bl	8023b4e <quorem>
 80247a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80247a6:	9b00      	ldr	r3, [sp, #0]
 80247a8:	f805 9b01 	strb.w	r9, [r5], #1
 80247ac:	1aea      	subs	r2, r5, r3
 80247ae:	9b01      	ldr	r3, [sp, #4]
 80247b0:	4293      	cmp	r3, r2
 80247b2:	dd07      	ble.n	80247c4 <_dtoa_r+0xb64>
 80247b4:	4651      	mov	r1, sl
 80247b6:	2300      	movs	r3, #0
 80247b8:	220a      	movs	r2, #10
 80247ba:	4620      	mov	r0, r4
 80247bc:	f000 f9a4 	bl	8024b08 <__multadd>
 80247c0:	4682      	mov	sl, r0
 80247c2:	e7ea      	b.n	802479a <_dtoa_r+0xb3a>
 80247c4:	9b01      	ldr	r3, [sp, #4]
 80247c6:	2b00      	cmp	r3, #0
 80247c8:	bfc8      	it	gt
 80247ca:	461d      	movgt	r5, r3
 80247cc:	9b00      	ldr	r3, [sp, #0]
 80247ce:	bfd8      	it	le
 80247d0:	2501      	movle	r5, #1
 80247d2:	441d      	add	r5, r3
 80247d4:	f04f 0800 	mov.w	r8, #0
 80247d8:	4651      	mov	r1, sl
 80247da:	2201      	movs	r2, #1
 80247dc:	4620      	mov	r0, r4
 80247de:	f000 fb41 	bl	8024e64 <__lshift>
 80247e2:	4631      	mov	r1, r6
 80247e4:	4682      	mov	sl, r0
 80247e6:	f000 fba9 	bl	8024f3c <__mcmp>
 80247ea:	2800      	cmp	r0, #0
 80247ec:	dc96      	bgt.n	802471c <_dtoa_r+0xabc>
 80247ee:	d102      	bne.n	80247f6 <_dtoa_r+0xb96>
 80247f0:	f019 0f01 	tst.w	r9, #1
 80247f4:	d192      	bne.n	802471c <_dtoa_r+0xabc>
 80247f6:	462b      	mov	r3, r5
 80247f8:	461d      	mov	r5, r3
 80247fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80247fe:	2a30      	cmp	r2, #48	; 0x30
 8024800:	d0fa      	beq.n	80247f8 <_dtoa_r+0xb98>
 8024802:	e6dd      	b.n	80245c0 <_dtoa_r+0x960>
 8024804:	9a00      	ldr	r2, [sp, #0]
 8024806:	429a      	cmp	r2, r3
 8024808:	d189      	bne.n	802471e <_dtoa_r+0xabe>
 802480a:	f10b 0b01 	add.w	fp, fp, #1
 802480e:	2331      	movs	r3, #49	; 0x31
 8024810:	e796      	b.n	8024740 <_dtoa_r+0xae0>
 8024812:	4b0a      	ldr	r3, [pc, #40]	; (802483c <_dtoa_r+0xbdc>)
 8024814:	f7ff ba99 	b.w	8023d4a <_dtoa_r+0xea>
 8024818:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802481a:	2b00      	cmp	r3, #0
 802481c:	f47f aa6d 	bne.w	8023cfa <_dtoa_r+0x9a>
 8024820:	4b07      	ldr	r3, [pc, #28]	; (8024840 <_dtoa_r+0xbe0>)
 8024822:	f7ff ba92 	b.w	8023d4a <_dtoa_r+0xea>
 8024826:	9b01      	ldr	r3, [sp, #4]
 8024828:	2b00      	cmp	r3, #0
 802482a:	dcb5      	bgt.n	8024798 <_dtoa_r+0xb38>
 802482c:	9b07      	ldr	r3, [sp, #28]
 802482e:	2b02      	cmp	r3, #2
 8024830:	f73f aeb1 	bgt.w	8024596 <_dtoa_r+0x936>
 8024834:	e7b0      	b.n	8024798 <_dtoa_r+0xb38>
 8024836:	bf00      	nop
 8024838:	0802e309 	.word	0x0802e309
 802483c:	0802e269 	.word	0x0802e269
 8024840:	0802e28d 	.word	0x0802e28d

08024844 <_free_r>:
 8024844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024846:	2900      	cmp	r1, #0
 8024848:	d044      	beq.n	80248d4 <_free_r+0x90>
 802484a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802484e:	9001      	str	r0, [sp, #4]
 8024850:	2b00      	cmp	r3, #0
 8024852:	f1a1 0404 	sub.w	r4, r1, #4
 8024856:	bfb8      	it	lt
 8024858:	18e4      	addlt	r4, r4, r3
 802485a:	f000 f8e7 	bl	8024a2c <__malloc_lock>
 802485e:	4a1e      	ldr	r2, [pc, #120]	; (80248d8 <_free_r+0x94>)
 8024860:	9801      	ldr	r0, [sp, #4]
 8024862:	6813      	ldr	r3, [r2, #0]
 8024864:	b933      	cbnz	r3, 8024874 <_free_r+0x30>
 8024866:	6063      	str	r3, [r4, #4]
 8024868:	6014      	str	r4, [r2, #0]
 802486a:	b003      	add	sp, #12
 802486c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024870:	f000 b8e2 	b.w	8024a38 <__malloc_unlock>
 8024874:	42a3      	cmp	r3, r4
 8024876:	d908      	bls.n	802488a <_free_r+0x46>
 8024878:	6825      	ldr	r5, [r4, #0]
 802487a:	1961      	adds	r1, r4, r5
 802487c:	428b      	cmp	r3, r1
 802487e:	bf01      	itttt	eq
 8024880:	6819      	ldreq	r1, [r3, #0]
 8024882:	685b      	ldreq	r3, [r3, #4]
 8024884:	1949      	addeq	r1, r1, r5
 8024886:	6021      	streq	r1, [r4, #0]
 8024888:	e7ed      	b.n	8024866 <_free_r+0x22>
 802488a:	461a      	mov	r2, r3
 802488c:	685b      	ldr	r3, [r3, #4]
 802488e:	b10b      	cbz	r3, 8024894 <_free_r+0x50>
 8024890:	42a3      	cmp	r3, r4
 8024892:	d9fa      	bls.n	802488a <_free_r+0x46>
 8024894:	6811      	ldr	r1, [r2, #0]
 8024896:	1855      	adds	r5, r2, r1
 8024898:	42a5      	cmp	r5, r4
 802489a:	d10b      	bne.n	80248b4 <_free_r+0x70>
 802489c:	6824      	ldr	r4, [r4, #0]
 802489e:	4421      	add	r1, r4
 80248a0:	1854      	adds	r4, r2, r1
 80248a2:	42a3      	cmp	r3, r4
 80248a4:	6011      	str	r1, [r2, #0]
 80248a6:	d1e0      	bne.n	802486a <_free_r+0x26>
 80248a8:	681c      	ldr	r4, [r3, #0]
 80248aa:	685b      	ldr	r3, [r3, #4]
 80248ac:	6053      	str	r3, [r2, #4]
 80248ae:	440c      	add	r4, r1
 80248b0:	6014      	str	r4, [r2, #0]
 80248b2:	e7da      	b.n	802486a <_free_r+0x26>
 80248b4:	d902      	bls.n	80248bc <_free_r+0x78>
 80248b6:	230c      	movs	r3, #12
 80248b8:	6003      	str	r3, [r0, #0]
 80248ba:	e7d6      	b.n	802486a <_free_r+0x26>
 80248bc:	6825      	ldr	r5, [r4, #0]
 80248be:	1961      	adds	r1, r4, r5
 80248c0:	428b      	cmp	r3, r1
 80248c2:	bf04      	itt	eq
 80248c4:	6819      	ldreq	r1, [r3, #0]
 80248c6:	685b      	ldreq	r3, [r3, #4]
 80248c8:	6063      	str	r3, [r4, #4]
 80248ca:	bf04      	itt	eq
 80248cc:	1949      	addeq	r1, r1, r5
 80248ce:	6021      	streq	r1, [r4, #0]
 80248d0:	6054      	str	r4, [r2, #4]
 80248d2:	e7ca      	b.n	802486a <_free_r+0x26>
 80248d4:	b003      	add	sp, #12
 80248d6:	bd30      	pop	{r4, r5, pc}
 80248d8:	20012ecc 	.word	0x20012ecc

080248dc <malloc>:
 80248dc:	4b02      	ldr	r3, [pc, #8]	; (80248e8 <malloc+0xc>)
 80248de:	4601      	mov	r1, r0
 80248e0:	6818      	ldr	r0, [r3, #0]
 80248e2:	f000 b823 	b.w	802492c <_malloc_r>
 80248e6:	bf00      	nop
 80248e8:	20001038 	.word	0x20001038

080248ec <sbrk_aligned>:
 80248ec:	b570      	push	{r4, r5, r6, lr}
 80248ee:	4e0e      	ldr	r6, [pc, #56]	; (8024928 <sbrk_aligned+0x3c>)
 80248f0:	460c      	mov	r4, r1
 80248f2:	6831      	ldr	r1, [r6, #0]
 80248f4:	4605      	mov	r5, r0
 80248f6:	b911      	cbnz	r1, 80248fe <sbrk_aligned+0x12>
 80248f8:	f000 fe1c 	bl	8025534 <_sbrk_r>
 80248fc:	6030      	str	r0, [r6, #0]
 80248fe:	4621      	mov	r1, r4
 8024900:	4628      	mov	r0, r5
 8024902:	f000 fe17 	bl	8025534 <_sbrk_r>
 8024906:	1c43      	adds	r3, r0, #1
 8024908:	d00a      	beq.n	8024920 <sbrk_aligned+0x34>
 802490a:	1cc4      	adds	r4, r0, #3
 802490c:	f024 0403 	bic.w	r4, r4, #3
 8024910:	42a0      	cmp	r0, r4
 8024912:	d007      	beq.n	8024924 <sbrk_aligned+0x38>
 8024914:	1a21      	subs	r1, r4, r0
 8024916:	4628      	mov	r0, r5
 8024918:	f000 fe0c 	bl	8025534 <_sbrk_r>
 802491c:	3001      	adds	r0, #1
 802491e:	d101      	bne.n	8024924 <sbrk_aligned+0x38>
 8024920:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8024924:	4620      	mov	r0, r4
 8024926:	bd70      	pop	{r4, r5, r6, pc}
 8024928:	20012ed0 	.word	0x20012ed0

0802492c <_malloc_r>:
 802492c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024930:	1ccd      	adds	r5, r1, #3
 8024932:	f025 0503 	bic.w	r5, r5, #3
 8024936:	3508      	adds	r5, #8
 8024938:	2d0c      	cmp	r5, #12
 802493a:	bf38      	it	cc
 802493c:	250c      	movcc	r5, #12
 802493e:	2d00      	cmp	r5, #0
 8024940:	4607      	mov	r7, r0
 8024942:	db01      	blt.n	8024948 <_malloc_r+0x1c>
 8024944:	42a9      	cmp	r1, r5
 8024946:	d905      	bls.n	8024954 <_malloc_r+0x28>
 8024948:	230c      	movs	r3, #12
 802494a:	603b      	str	r3, [r7, #0]
 802494c:	2600      	movs	r6, #0
 802494e:	4630      	mov	r0, r6
 8024950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024954:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8024a28 <_malloc_r+0xfc>
 8024958:	f000 f868 	bl	8024a2c <__malloc_lock>
 802495c:	f8d8 3000 	ldr.w	r3, [r8]
 8024960:	461c      	mov	r4, r3
 8024962:	bb5c      	cbnz	r4, 80249bc <_malloc_r+0x90>
 8024964:	4629      	mov	r1, r5
 8024966:	4638      	mov	r0, r7
 8024968:	f7ff ffc0 	bl	80248ec <sbrk_aligned>
 802496c:	1c43      	adds	r3, r0, #1
 802496e:	4604      	mov	r4, r0
 8024970:	d155      	bne.n	8024a1e <_malloc_r+0xf2>
 8024972:	f8d8 4000 	ldr.w	r4, [r8]
 8024976:	4626      	mov	r6, r4
 8024978:	2e00      	cmp	r6, #0
 802497a:	d145      	bne.n	8024a08 <_malloc_r+0xdc>
 802497c:	2c00      	cmp	r4, #0
 802497e:	d048      	beq.n	8024a12 <_malloc_r+0xe6>
 8024980:	6823      	ldr	r3, [r4, #0]
 8024982:	4631      	mov	r1, r6
 8024984:	4638      	mov	r0, r7
 8024986:	eb04 0903 	add.w	r9, r4, r3
 802498a:	f000 fdd3 	bl	8025534 <_sbrk_r>
 802498e:	4581      	cmp	r9, r0
 8024990:	d13f      	bne.n	8024a12 <_malloc_r+0xe6>
 8024992:	6821      	ldr	r1, [r4, #0]
 8024994:	1a6d      	subs	r5, r5, r1
 8024996:	4629      	mov	r1, r5
 8024998:	4638      	mov	r0, r7
 802499a:	f7ff ffa7 	bl	80248ec <sbrk_aligned>
 802499e:	3001      	adds	r0, #1
 80249a0:	d037      	beq.n	8024a12 <_malloc_r+0xe6>
 80249a2:	6823      	ldr	r3, [r4, #0]
 80249a4:	442b      	add	r3, r5
 80249a6:	6023      	str	r3, [r4, #0]
 80249a8:	f8d8 3000 	ldr.w	r3, [r8]
 80249ac:	2b00      	cmp	r3, #0
 80249ae:	d038      	beq.n	8024a22 <_malloc_r+0xf6>
 80249b0:	685a      	ldr	r2, [r3, #4]
 80249b2:	42a2      	cmp	r2, r4
 80249b4:	d12b      	bne.n	8024a0e <_malloc_r+0xe2>
 80249b6:	2200      	movs	r2, #0
 80249b8:	605a      	str	r2, [r3, #4]
 80249ba:	e00f      	b.n	80249dc <_malloc_r+0xb0>
 80249bc:	6822      	ldr	r2, [r4, #0]
 80249be:	1b52      	subs	r2, r2, r5
 80249c0:	d41f      	bmi.n	8024a02 <_malloc_r+0xd6>
 80249c2:	2a0b      	cmp	r2, #11
 80249c4:	d917      	bls.n	80249f6 <_malloc_r+0xca>
 80249c6:	1961      	adds	r1, r4, r5
 80249c8:	42a3      	cmp	r3, r4
 80249ca:	6025      	str	r5, [r4, #0]
 80249cc:	bf18      	it	ne
 80249ce:	6059      	strne	r1, [r3, #4]
 80249d0:	6863      	ldr	r3, [r4, #4]
 80249d2:	bf08      	it	eq
 80249d4:	f8c8 1000 	streq.w	r1, [r8]
 80249d8:	5162      	str	r2, [r4, r5]
 80249da:	604b      	str	r3, [r1, #4]
 80249dc:	4638      	mov	r0, r7
 80249de:	f104 060b 	add.w	r6, r4, #11
 80249e2:	f000 f829 	bl	8024a38 <__malloc_unlock>
 80249e6:	f026 0607 	bic.w	r6, r6, #7
 80249ea:	1d23      	adds	r3, r4, #4
 80249ec:	1af2      	subs	r2, r6, r3
 80249ee:	d0ae      	beq.n	802494e <_malloc_r+0x22>
 80249f0:	1b9b      	subs	r3, r3, r6
 80249f2:	50a3      	str	r3, [r4, r2]
 80249f4:	e7ab      	b.n	802494e <_malloc_r+0x22>
 80249f6:	42a3      	cmp	r3, r4
 80249f8:	6862      	ldr	r2, [r4, #4]
 80249fa:	d1dd      	bne.n	80249b8 <_malloc_r+0x8c>
 80249fc:	f8c8 2000 	str.w	r2, [r8]
 8024a00:	e7ec      	b.n	80249dc <_malloc_r+0xb0>
 8024a02:	4623      	mov	r3, r4
 8024a04:	6864      	ldr	r4, [r4, #4]
 8024a06:	e7ac      	b.n	8024962 <_malloc_r+0x36>
 8024a08:	4634      	mov	r4, r6
 8024a0a:	6876      	ldr	r6, [r6, #4]
 8024a0c:	e7b4      	b.n	8024978 <_malloc_r+0x4c>
 8024a0e:	4613      	mov	r3, r2
 8024a10:	e7cc      	b.n	80249ac <_malloc_r+0x80>
 8024a12:	230c      	movs	r3, #12
 8024a14:	603b      	str	r3, [r7, #0]
 8024a16:	4638      	mov	r0, r7
 8024a18:	f000 f80e 	bl	8024a38 <__malloc_unlock>
 8024a1c:	e797      	b.n	802494e <_malloc_r+0x22>
 8024a1e:	6025      	str	r5, [r4, #0]
 8024a20:	e7dc      	b.n	80249dc <_malloc_r+0xb0>
 8024a22:	605b      	str	r3, [r3, #4]
 8024a24:	deff      	udf	#255	; 0xff
 8024a26:	bf00      	nop
 8024a28:	20012ecc 	.word	0x20012ecc

08024a2c <__malloc_lock>:
 8024a2c:	4801      	ldr	r0, [pc, #4]	; (8024a34 <__malloc_lock+0x8>)
 8024a2e:	f7ff b872 	b.w	8023b16 <__retarget_lock_acquire_recursive>
 8024a32:	bf00      	nop
 8024a34:	20012ec8 	.word	0x20012ec8

08024a38 <__malloc_unlock>:
 8024a38:	4801      	ldr	r0, [pc, #4]	; (8024a40 <__malloc_unlock+0x8>)
 8024a3a:	f7ff b86d 	b.w	8023b18 <__retarget_lock_release_recursive>
 8024a3e:	bf00      	nop
 8024a40:	20012ec8 	.word	0x20012ec8

08024a44 <_Balloc>:
 8024a44:	b570      	push	{r4, r5, r6, lr}
 8024a46:	69c6      	ldr	r6, [r0, #28]
 8024a48:	4604      	mov	r4, r0
 8024a4a:	460d      	mov	r5, r1
 8024a4c:	b976      	cbnz	r6, 8024a6c <_Balloc+0x28>
 8024a4e:	2010      	movs	r0, #16
 8024a50:	f7ff ff44 	bl	80248dc <malloc>
 8024a54:	4602      	mov	r2, r0
 8024a56:	61e0      	str	r0, [r4, #28]
 8024a58:	b920      	cbnz	r0, 8024a64 <_Balloc+0x20>
 8024a5a:	4b18      	ldr	r3, [pc, #96]	; (8024abc <_Balloc+0x78>)
 8024a5c:	4818      	ldr	r0, [pc, #96]	; (8024ac0 <_Balloc+0x7c>)
 8024a5e:	216b      	movs	r1, #107	; 0x6b
 8024a60:	f000 fd78 	bl	8025554 <__assert_func>
 8024a64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8024a68:	6006      	str	r6, [r0, #0]
 8024a6a:	60c6      	str	r6, [r0, #12]
 8024a6c:	69e6      	ldr	r6, [r4, #28]
 8024a6e:	68f3      	ldr	r3, [r6, #12]
 8024a70:	b183      	cbz	r3, 8024a94 <_Balloc+0x50>
 8024a72:	69e3      	ldr	r3, [r4, #28]
 8024a74:	68db      	ldr	r3, [r3, #12]
 8024a76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8024a7a:	b9b8      	cbnz	r0, 8024aac <_Balloc+0x68>
 8024a7c:	2101      	movs	r1, #1
 8024a7e:	fa01 f605 	lsl.w	r6, r1, r5
 8024a82:	1d72      	adds	r2, r6, #5
 8024a84:	0092      	lsls	r2, r2, #2
 8024a86:	4620      	mov	r0, r4
 8024a88:	f000 fd82 	bl	8025590 <_calloc_r>
 8024a8c:	b160      	cbz	r0, 8024aa8 <_Balloc+0x64>
 8024a8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8024a92:	e00e      	b.n	8024ab2 <_Balloc+0x6e>
 8024a94:	2221      	movs	r2, #33	; 0x21
 8024a96:	2104      	movs	r1, #4
 8024a98:	4620      	mov	r0, r4
 8024a9a:	f000 fd79 	bl	8025590 <_calloc_r>
 8024a9e:	69e3      	ldr	r3, [r4, #28]
 8024aa0:	60f0      	str	r0, [r6, #12]
 8024aa2:	68db      	ldr	r3, [r3, #12]
 8024aa4:	2b00      	cmp	r3, #0
 8024aa6:	d1e4      	bne.n	8024a72 <_Balloc+0x2e>
 8024aa8:	2000      	movs	r0, #0
 8024aaa:	bd70      	pop	{r4, r5, r6, pc}
 8024aac:	6802      	ldr	r2, [r0, #0]
 8024aae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8024ab2:	2300      	movs	r3, #0
 8024ab4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024ab8:	e7f7      	b.n	8024aaa <_Balloc+0x66>
 8024aba:	bf00      	nop
 8024abc:	0802e29a 	.word	0x0802e29a
 8024ac0:	0802e31a 	.word	0x0802e31a

08024ac4 <_Bfree>:
 8024ac4:	b570      	push	{r4, r5, r6, lr}
 8024ac6:	69c6      	ldr	r6, [r0, #28]
 8024ac8:	4605      	mov	r5, r0
 8024aca:	460c      	mov	r4, r1
 8024acc:	b976      	cbnz	r6, 8024aec <_Bfree+0x28>
 8024ace:	2010      	movs	r0, #16
 8024ad0:	f7ff ff04 	bl	80248dc <malloc>
 8024ad4:	4602      	mov	r2, r0
 8024ad6:	61e8      	str	r0, [r5, #28]
 8024ad8:	b920      	cbnz	r0, 8024ae4 <_Bfree+0x20>
 8024ada:	4b09      	ldr	r3, [pc, #36]	; (8024b00 <_Bfree+0x3c>)
 8024adc:	4809      	ldr	r0, [pc, #36]	; (8024b04 <_Bfree+0x40>)
 8024ade:	218f      	movs	r1, #143	; 0x8f
 8024ae0:	f000 fd38 	bl	8025554 <__assert_func>
 8024ae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8024ae8:	6006      	str	r6, [r0, #0]
 8024aea:	60c6      	str	r6, [r0, #12]
 8024aec:	b13c      	cbz	r4, 8024afe <_Bfree+0x3a>
 8024aee:	69eb      	ldr	r3, [r5, #28]
 8024af0:	6862      	ldr	r2, [r4, #4]
 8024af2:	68db      	ldr	r3, [r3, #12]
 8024af4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024af8:	6021      	str	r1, [r4, #0]
 8024afa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8024afe:	bd70      	pop	{r4, r5, r6, pc}
 8024b00:	0802e29a 	.word	0x0802e29a
 8024b04:	0802e31a 	.word	0x0802e31a

08024b08 <__multadd>:
 8024b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024b0c:	690d      	ldr	r5, [r1, #16]
 8024b0e:	4607      	mov	r7, r0
 8024b10:	460c      	mov	r4, r1
 8024b12:	461e      	mov	r6, r3
 8024b14:	f101 0c14 	add.w	ip, r1, #20
 8024b18:	2000      	movs	r0, #0
 8024b1a:	f8dc 3000 	ldr.w	r3, [ip]
 8024b1e:	b299      	uxth	r1, r3
 8024b20:	fb02 6101 	mla	r1, r2, r1, r6
 8024b24:	0c1e      	lsrs	r6, r3, #16
 8024b26:	0c0b      	lsrs	r3, r1, #16
 8024b28:	fb02 3306 	mla	r3, r2, r6, r3
 8024b2c:	b289      	uxth	r1, r1
 8024b2e:	3001      	adds	r0, #1
 8024b30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024b34:	4285      	cmp	r5, r0
 8024b36:	f84c 1b04 	str.w	r1, [ip], #4
 8024b3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8024b3e:	dcec      	bgt.n	8024b1a <__multadd+0x12>
 8024b40:	b30e      	cbz	r6, 8024b86 <__multadd+0x7e>
 8024b42:	68a3      	ldr	r3, [r4, #8]
 8024b44:	42ab      	cmp	r3, r5
 8024b46:	dc19      	bgt.n	8024b7c <__multadd+0x74>
 8024b48:	6861      	ldr	r1, [r4, #4]
 8024b4a:	4638      	mov	r0, r7
 8024b4c:	3101      	adds	r1, #1
 8024b4e:	f7ff ff79 	bl	8024a44 <_Balloc>
 8024b52:	4680      	mov	r8, r0
 8024b54:	b928      	cbnz	r0, 8024b62 <__multadd+0x5a>
 8024b56:	4602      	mov	r2, r0
 8024b58:	4b0c      	ldr	r3, [pc, #48]	; (8024b8c <__multadd+0x84>)
 8024b5a:	480d      	ldr	r0, [pc, #52]	; (8024b90 <__multadd+0x88>)
 8024b5c:	21ba      	movs	r1, #186	; 0xba
 8024b5e:	f000 fcf9 	bl	8025554 <__assert_func>
 8024b62:	6922      	ldr	r2, [r4, #16]
 8024b64:	3202      	adds	r2, #2
 8024b66:	f104 010c 	add.w	r1, r4, #12
 8024b6a:	0092      	lsls	r2, r2, #2
 8024b6c:	300c      	adds	r0, #12
 8024b6e:	f7fe ffd4 	bl	8023b1a <memcpy>
 8024b72:	4621      	mov	r1, r4
 8024b74:	4638      	mov	r0, r7
 8024b76:	f7ff ffa5 	bl	8024ac4 <_Bfree>
 8024b7a:	4644      	mov	r4, r8
 8024b7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8024b80:	3501      	adds	r5, #1
 8024b82:	615e      	str	r6, [r3, #20]
 8024b84:	6125      	str	r5, [r4, #16]
 8024b86:	4620      	mov	r0, r4
 8024b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024b8c:	0802e309 	.word	0x0802e309
 8024b90:	0802e31a 	.word	0x0802e31a

08024b94 <__hi0bits>:
 8024b94:	0c03      	lsrs	r3, r0, #16
 8024b96:	041b      	lsls	r3, r3, #16
 8024b98:	b9d3      	cbnz	r3, 8024bd0 <__hi0bits+0x3c>
 8024b9a:	0400      	lsls	r0, r0, #16
 8024b9c:	2310      	movs	r3, #16
 8024b9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8024ba2:	bf04      	itt	eq
 8024ba4:	0200      	lsleq	r0, r0, #8
 8024ba6:	3308      	addeq	r3, #8
 8024ba8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8024bac:	bf04      	itt	eq
 8024bae:	0100      	lsleq	r0, r0, #4
 8024bb0:	3304      	addeq	r3, #4
 8024bb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8024bb6:	bf04      	itt	eq
 8024bb8:	0080      	lsleq	r0, r0, #2
 8024bba:	3302      	addeq	r3, #2
 8024bbc:	2800      	cmp	r0, #0
 8024bbe:	db05      	blt.n	8024bcc <__hi0bits+0x38>
 8024bc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8024bc4:	f103 0301 	add.w	r3, r3, #1
 8024bc8:	bf08      	it	eq
 8024bca:	2320      	moveq	r3, #32
 8024bcc:	4618      	mov	r0, r3
 8024bce:	4770      	bx	lr
 8024bd0:	2300      	movs	r3, #0
 8024bd2:	e7e4      	b.n	8024b9e <__hi0bits+0xa>

08024bd4 <__lo0bits>:
 8024bd4:	6803      	ldr	r3, [r0, #0]
 8024bd6:	f013 0207 	ands.w	r2, r3, #7
 8024bda:	d00c      	beq.n	8024bf6 <__lo0bits+0x22>
 8024bdc:	07d9      	lsls	r1, r3, #31
 8024bde:	d422      	bmi.n	8024c26 <__lo0bits+0x52>
 8024be0:	079a      	lsls	r2, r3, #30
 8024be2:	bf49      	itett	mi
 8024be4:	085b      	lsrmi	r3, r3, #1
 8024be6:	089b      	lsrpl	r3, r3, #2
 8024be8:	6003      	strmi	r3, [r0, #0]
 8024bea:	2201      	movmi	r2, #1
 8024bec:	bf5c      	itt	pl
 8024bee:	6003      	strpl	r3, [r0, #0]
 8024bf0:	2202      	movpl	r2, #2
 8024bf2:	4610      	mov	r0, r2
 8024bf4:	4770      	bx	lr
 8024bf6:	b299      	uxth	r1, r3
 8024bf8:	b909      	cbnz	r1, 8024bfe <__lo0bits+0x2a>
 8024bfa:	0c1b      	lsrs	r3, r3, #16
 8024bfc:	2210      	movs	r2, #16
 8024bfe:	b2d9      	uxtb	r1, r3
 8024c00:	b909      	cbnz	r1, 8024c06 <__lo0bits+0x32>
 8024c02:	3208      	adds	r2, #8
 8024c04:	0a1b      	lsrs	r3, r3, #8
 8024c06:	0719      	lsls	r1, r3, #28
 8024c08:	bf04      	itt	eq
 8024c0a:	091b      	lsreq	r3, r3, #4
 8024c0c:	3204      	addeq	r2, #4
 8024c0e:	0799      	lsls	r1, r3, #30
 8024c10:	bf04      	itt	eq
 8024c12:	089b      	lsreq	r3, r3, #2
 8024c14:	3202      	addeq	r2, #2
 8024c16:	07d9      	lsls	r1, r3, #31
 8024c18:	d403      	bmi.n	8024c22 <__lo0bits+0x4e>
 8024c1a:	085b      	lsrs	r3, r3, #1
 8024c1c:	f102 0201 	add.w	r2, r2, #1
 8024c20:	d003      	beq.n	8024c2a <__lo0bits+0x56>
 8024c22:	6003      	str	r3, [r0, #0]
 8024c24:	e7e5      	b.n	8024bf2 <__lo0bits+0x1e>
 8024c26:	2200      	movs	r2, #0
 8024c28:	e7e3      	b.n	8024bf2 <__lo0bits+0x1e>
 8024c2a:	2220      	movs	r2, #32
 8024c2c:	e7e1      	b.n	8024bf2 <__lo0bits+0x1e>
	...

08024c30 <__i2b>:
 8024c30:	b510      	push	{r4, lr}
 8024c32:	460c      	mov	r4, r1
 8024c34:	2101      	movs	r1, #1
 8024c36:	f7ff ff05 	bl	8024a44 <_Balloc>
 8024c3a:	4602      	mov	r2, r0
 8024c3c:	b928      	cbnz	r0, 8024c4a <__i2b+0x1a>
 8024c3e:	4b05      	ldr	r3, [pc, #20]	; (8024c54 <__i2b+0x24>)
 8024c40:	4805      	ldr	r0, [pc, #20]	; (8024c58 <__i2b+0x28>)
 8024c42:	f240 1145 	movw	r1, #325	; 0x145
 8024c46:	f000 fc85 	bl	8025554 <__assert_func>
 8024c4a:	2301      	movs	r3, #1
 8024c4c:	6144      	str	r4, [r0, #20]
 8024c4e:	6103      	str	r3, [r0, #16]
 8024c50:	bd10      	pop	{r4, pc}
 8024c52:	bf00      	nop
 8024c54:	0802e309 	.word	0x0802e309
 8024c58:	0802e31a 	.word	0x0802e31a

08024c5c <__multiply>:
 8024c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c60:	4691      	mov	r9, r2
 8024c62:	690a      	ldr	r2, [r1, #16]
 8024c64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8024c68:	429a      	cmp	r2, r3
 8024c6a:	bfb8      	it	lt
 8024c6c:	460b      	movlt	r3, r1
 8024c6e:	460c      	mov	r4, r1
 8024c70:	bfbc      	itt	lt
 8024c72:	464c      	movlt	r4, r9
 8024c74:	4699      	movlt	r9, r3
 8024c76:	6927      	ldr	r7, [r4, #16]
 8024c78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8024c7c:	68a3      	ldr	r3, [r4, #8]
 8024c7e:	6861      	ldr	r1, [r4, #4]
 8024c80:	eb07 060a 	add.w	r6, r7, sl
 8024c84:	42b3      	cmp	r3, r6
 8024c86:	b085      	sub	sp, #20
 8024c88:	bfb8      	it	lt
 8024c8a:	3101      	addlt	r1, #1
 8024c8c:	f7ff feda 	bl	8024a44 <_Balloc>
 8024c90:	b930      	cbnz	r0, 8024ca0 <__multiply+0x44>
 8024c92:	4602      	mov	r2, r0
 8024c94:	4b44      	ldr	r3, [pc, #272]	; (8024da8 <__multiply+0x14c>)
 8024c96:	4845      	ldr	r0, [pc, #276]	; (8024dac <__multiply+0x150>)
 8024c98:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8024c9c:	f000 fc5a 	bl	8025554 <__assert_func>
 8024ca0:	f100 0514 	add.w	r5, r0, #20
 8024ca4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8024ca8:	462b      	mov	r3, r5
 8024caa:	2200      	movs	r2, #0
 8024cac:	4543      	cmp	r3, r8
 8024cae:	d321      	bcc.n	8024cf4 <__multiply+0x98>
 8024cb0:	f104 0314 	add.w	r3, r4, #20
 8024cb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8024cb8:	f109 0314 	add.w	r3, r9, #20
 8024cbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8024cc0:	9202      	str	r2, [sp, #8]
 8024cc2:	1b3a      	subs	r2, r7, r4
 8024cc4:	3a15      	subs	r2, #21
 8024cc6:	f022 0203 	bic.w	r2, r2, #3
 8024cca:	3204      	adds	r2, #4
 8024ccc:	f104 0115 	add.w	r1, r4, #21
 8024cd0:	428f      	cmp	r7, r1
 8024cd2:	bf38      	it	cc
 8024cd4:	2204      	movcc	r2, #4
 8024cd6:	9201      	str	r2, [sp, #4]
 8024cd8:	9a02      	ldr	r2, [sp, #8]
 8024cda:	9303      	str	r3, [sp, #12]
 8024cdc:	429a      	cmp	r2, r3
 8024cde:	d80c      	bhi.n	8024cfa <__multiply+0x9e>
 8024ce0:	2e00      	cmp	r6, #0
 8024ce2:	dd03      	ble.n	8024cec <__multiply+0x90>
 8024ce4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8024ce8:	2b00      	cmp	r3, #0
 8024cea:	d05b      	beq.n	8024da4 <__multiply+0x148>
 8024cec:	6106      	str	r6, [r0, #16]
 8024cee:	b005      	add	sp, #20
 8024cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024cf4:	f843 2b04 	str.w	r2, [r3], #4
 8024cf8:	e7d8      	b.n	8024cac <__multiply+0x50>
 8024cfa:	f8b3 a000 	ldrh.w	sl, [r3]
 8024cfe:	f1ba 0f00 	cmp.w	sl, #0
 8024d02:	d024      	beq.n	8024d4e <__multiply+0xf2>
 8024d04:	f104 0e14 	add.w	lr, r4, #20
 8024d08:	46a9      	mov	r9, r5
 8024d0a:	f04f 0c00 	mov.w	ip, #0
 8024d0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8024d12:	f8d9 1000 	ldr.w	r1, [r9]
 8024d16:	fa1f fb82 	uxth.w	fp, r2
 8024d1a:	b289      	uxth	r1, r1
 8024d1c:	fb0a 110b 	mla	r1, sl, fp, r1
 8024d20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8024d24:	f8d9 2000 	ldr.w	r2, [r9]
 8024d28:	4461      	add	r1, ip
 8024d2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8024d2e:	fb0a c20b 	mla	r2, sl, fp, ip
 8024d32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8024d36:	b289      	uxth	r1, r1
 8024d38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8024d3c:	4577      	cmp	r7, lr
 8024d3e:	f849 1b04 	str.w	r1, [r9], #4
 8024d42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8024d46:	d8e2      	bhi.n	8024d0e <__multiply+0xb2>
 8024d48:	9a01      	ldr	r2, [sp, #4]
 8024d4a:	f845 c002 	str.w	ip, [r5, r2]
 8024d4e:	9a03      	ldr	r2, [sp, #12]
 8024d50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8024d54:	3304      	adds	r3, #4
 8024d56:	f1b9 0f00 	cmp.w	r9, #0
 8024d5a:	d021      	beq.n	8024da0 <__multiply+0x144>
 8024d5c:	6829      	ldr	r1, [r5, #0]
 8024d5e:	f104 0c14 	add.w	ip, r4, #20
 8024d62:	46ae      	mov	lr, r5
 8024d64:	f04f 0a00 	mov.w	sl, #0
 8024d68:	f8bc b000 	ldrh.w	fp, [ip]
 8024d6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8024d70:	fb09 220b 	mla	r2, r9, fp, r2
 8024d74:	4452      	add	r2, sl
 8024d76:	b289      	uxth	r1, r1
 8024d78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8024d7c:	f84e 1b04 	str.w	r1, [lr], #4
 8024d80:	f85c 1b04 	ldr.w	r1, [ip], #4
 8024d84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8024d88:	f8be 1000 	ldrh.w	r1, [lr]
 8024d8c:	fb09 110a 	mla	r1, r9, sl, r1
 8024d90:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8024d94:	4567      	cmp	r7, ip
 8024d96:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8024d9a:	d8e5      	bhi.n	8024d68 <__multiply+0x10c>
 8024d9c:	9a01      	ldr	r2, [sp, #4]
 8024d9e:	50a9      	str	r1, [r5, r2]
 8024da0:	3504      	adds	r5, #4
 8024da2:	e799      	b.n	8024cd8 <__multiply+0x7c>
 8024da4:	3e01      	subs	r6, #1
 8024da6:	e79b      	b.n	8024ce0 <__multiply+0x84>
 8024da8:	0802e309 	.word	0x0802e309
 8024dac:	0802e31a 	.word	0x0802e31a

08024db0 <__pow5mult>:
 8024db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024db4:	4615      	mov	r5, r2
 8024db6:	f012 0203 	ands.w	r2, r2, #3
 8024dba:	4606      	mov	r6, r0
 8024dbc:	460f      	mov	r7, r1
 8024dbe:	d007      	beq.n	8024dd0 <__pow5mult+0x20>
 8024dc0:	4c25      	ldr	r4, [pc, #148]	; (8024e58 <__pow5mult+0xa8>)
 8024dc2:	3a01      	subs	r2, #1
 8024dc4:	2300      	movs	r3, #0
 8024dc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8024dca:	f7ff fe9d 	bl	8024b08 <__multadd>
 8024dce:	4607      	mov	r7, r0
 8024dd0:	10ad      	asrs	r5, r5, #2
 8024dd2:	d03d      	beq.n	8024e50 <__pow5mult+0xa0>
 8024dd4:	69f4      	ldr	r4, [r6, #28]
 8024dd6:	b97c      	cbnz	r4, 8024df8 <__pow5mult+0x48>
 8024dd8:	2010      	movs	r0, #16
 8024dda:	f7ff fd7f 	bl	80248dc <malloc>
 8024dde:	4602      	mov	r2, r0
 8024de0:	61f0      	str	r0, [r6, #28]
 8024de2:	b928      	cbnz	r0, 8024df0 <__pow5mult+0x40>
 8024de4:	4b1d      	ldr	r3, [pc, #116]	; (8024e5c <__pow5mult+0xac>)
 8024de6:	481e      	ldr	r0, [pc, #120]	; (8024e60 <__pow5mult+0xb0>)
 8024de8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8024dec:	f000 fbb2 	bl	8025554 <__assert_func>
 8024df0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8024df4:	6004      	str	r4, [r0, #0]
 8024df6:	60c4      	str	r4, [r0, #12]
 8024df8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8024dfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8024e00:	b94c      	cbnz	r4, 8024e16 <__pow5mult+0x66>
 8024e02:	f240 2171 	movw	r1, #625	; 0x271
 8024e06:	4630      	mov	r0, r6
 8024e08:	f7ff ff12 	bl	8024c30 <__i2b>
 8024e0c:	2300      	movs	r3, #0
 8024e0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8024e12:	4604      	mov	r4, r0
 8024e14:	6003      	str	r3, [r0, #0]
 8024e16:	f04f 0900 	mov.w	r9, #0
 8024e1a:	07eb      	lsls	r3, r5, #31
 8024e1c:	d50a      	bpl.n	8024e34 <__pow5mult+0x84>
 8024e1e:	4639      	mov	r1, r7
 8024e20:	4622      	mov	r2, r4
 8024e22:	4630      	mov	r0, r6
 8024e24:	f7ff ff1a 	bl	8024c5c <__multiply>
 8024e28:	4639      	mov	r1, r7
 8024e2a:	4680      	mov	r8, r0
 8024e2c:	4630      	mov	r0, r6
 8024e2e:	f7ff fe49 	bl	8024ac4 <_Bfree>
 8024e32:	4647      	mov	r7, r8
 8024e34:	106d      	asrs	r5, r5, #1
 8024e36:	d00b      	beq.n	8024e50 <__pow5mult+0xa0>
 8024e38:	6820      	ldr	r0, [r4, #0]
 8024e3a:	b938      	cbnz	r0, 8024e4c <__pow5mult+0x9c>
 8024e3c:	4622      	mov	r2, r4
 8024e3e:	4621      	mov	r1, r4
 8024e40:	4630      	mov	r0, r6
 8024e42:	f7ff ff0b 	bl	8024c5c <__multiply>
 8024e46:	6020      	str	r0, [r4, #0]
 8024e48:	f8c0 9000 	str.w	r9, [r0]
 8024e4c:	4604      	mov	r4, r0
 8024e4e:	e7e4      	b.n	8024e1a <__pow5mult+0x6a>
 8024e50:	4638      	mov	r0, r7
 8024e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024e56:	bf00      	nop
 8024e58:	0802e468 	.word	0x0802e468
 8024e5c:	0802e29a 	.word	0x0802e29a
 8024e60:	0802e31a 	.word	0x0802e31a

08024e64 <__lshift>:
 8024e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024e68:	460c      	mov	r4, r1
 8024e6a:	6849      	ldr	r1, [r1, #4]
 8024e6c:	6923      	ldr	r3, [r4, #16]
 8024e6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8024e72:	68a3      	ldr	r3, [r4, #8]
 8024e74:	4607      	mov	r7, r0
 8024e76:	4691      	mov	r9, r2
 8024e78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8024e7c:	f108 0601 	add.w	r6, r8, #1
 8024e80:	42b3      	cmp	r3, r6
 8024e82:	db0b      	blt.n	8024e9c <__lshift+0x38>
 8024e84:	4638      	mov	r0, r7
 8024e86:	f7ff fddd 	bl	8024a44 <_Balloc>
 8024e8a:	4605      	mov	r5, r0
 8024e8c:	b948      	cbnz	r0, 8024ea2 <__lshift+0x3e>
 8024e8e:	4602      	mov	r2, r0
 8024e90:	4b28      	ldr	r3, [pc, #160]	; (8024f34 <__lshift+0xd0>)
 8024e92:	4829      	ldr	r0, [pc, #164]	; (8024f38 <__lshift+0xd4>)
 8024e94:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8024e98:	f000 fb5c 	bl	8025554 <__assert_func>
 8024e9c:	3101      	adds	r1, #1
 8024e9e:	005b      	lsls	r3, r3, #1
 8024ea0:	e7ee      	b.n	8024e80 <__lshift+0x1c>
 8024ea2:	2300      	movs	r3, #0
 8024ea4:	f100 0114 	add.w	r1, r0, #20
 8024ea8:	f100 0210 	add.w	r2, r0, #16
 8024eac:	4618      	mov	r0, r3
 8024eae:	4553      	cmp	r3, sl
 8024eb0:	db33      	blt.n	8024f1a <__lshift+0xb6>
 8024eb2:	6920      	ldr	r0, [r4, #16]
 8024eb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8024eb8:	f104 0314 	add.w	r3, r4, #20
 8024ebc:	f019 091f 	ands.w	r9, r9, #31
 8024ec0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8024ec4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8024ec8:	d02b      	beq.n	8024f22 <__lshift+0xbe>
 8024eca:	f1c9 0e20 	rsb	lr, r9, #32
 8024ece:	468a      	mov	sl, r1
 8024ed0:	2200      	movs	r2, #0
 8024ed2:	6818      	ldr	r0, [r3, #0]
 8024ed4:	fa00 f009 	lsl.w	r0, r0, r9
 8024ed8:	4310      	orrs	r0, r2
 8024eda:	f84a 0b04 	str.w	r0, [sl], #4
 8024ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8024ee2:	459c      	cmp	ip, r3
 8024ee4:	fa22 f20e 	lsr.w	r2, r2, lr
 8024ee8:	d8f3      	bhi.n	8024ed2 <__lshift+0x6e>
 8024eea:	ebac 0304 	sub.w	r3, ip, r4
 8024eee:	3b15      	subs	r3, #21
 8024ef0:	f023 0303 	bic.w	r3, r3, #3
 8024ef4:	3304      	adds	r3, #4
 8024ef6:	f104 0015 	add.w	r0, r4, #21
 8024efa:	4584      	cmp	ip, r0
 8024efc:	bf38      	it	cc
 8024efe:	2304      	movcc	r3, #4
 8024f00:	50ca      	str	r2, [r1, r3]
 8024f02:	b10a      	cbz	r2, 8024f08 <__lshift+0xa4>
 8024f04:	f108 0602 	add.w	r6, r8, #2
 8024f08:	3e01      	subs	r6, #1
 8024f0a:	4638      	mov	r0, r7
 8024f0c:	612e      	str	r6, [r5, #16]
 8024f0e:	4621      	mov	r1, r4
 8024f10:	f7ff fdd8 	bl	8024ac4 <_Bfree>
 8024f14:	4628      	mov	r0, r5
 8024f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024f1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8024f1e:	3301      	adds	r3, #1
 8024f20:	e7c5      	b.n	8024eae <__lshift+0x4a>
 8024f22:	3904      	subs	r1, #4
 8024f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8024f28:	f841 2f04 	str.w	r2, [r1, #4]!
 8024f2c:	459c      	cmp	ip, r3
 8024f2e:	d8f9      	bhi.n	8024f24 <__lshift+0xc0>
 8024f30:	e7ea      	b.n	8024f08 <__lshift+0xa4>
 8024f32:	bf00      	nop
 8024f34:	0802e309 	.word	0x0802e309
 8024f38:	0802e31a 	.word	0x0802e31a

08024f3c <__mcmp>:
 8024f3c:	b530      	push	{r4, r5, lr}
 8024f3e:	6902      	ldr	r2, [r0, #16]
 8024f40:	690c      	ldr	r4, [r1, #16]
 8024f42:	1b12      	subs	r2, r2, r4
 8024f44:	d10e      	bne.n	8024f64 <__mcmp+0x28>
 8024f46:	f100 0314 	add.w	r3, r0, #20
 8024f4a:	3114      	adds	r1, #20
 8024f4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8024f50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8024f54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8024f58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8024f5c:	42a5      	cmp	r5, r4
 8024f5e:	d003      	beq.n	8024f68 <__mcmp+0x2c>
 8024f60:	d305      	bcc.n	8024f6e <__mcmp+0x32>
 8024f62:	2201      	movs	r2, #1
 8024f64:	4610      	mov	r0, r2
 8024f66:	bd30      	pop	{r4, r5, pc}
 8024f68:	4283      	cmp	r3, r0
 8024f6a:	d3f3      	bcc.n	8024f54 <__mcmp+0x18>
 8024f6c:	e7fa      	b.n	8024f64 <__mcmp+0x28>
 8024f6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024f72:	e7f7      	b.n	8024f64 <__mcmp+0x28>

08024f74 <__mdiff>:
 8024f74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f78:	460c      	mov	r4, r1
 8024f7a:	4606      	mov	r6, r0
 8024f7c:	4611      	mov	r1, r2
 8024f7e:	4620      	mov	r0, r4
 8024f80:	4690      	mov	r8, r2
 8024f82:	f7ff ffdb 	bl	8024f3c <__mcmp>
 8024f86:	1e05      	subs	r5, r0, #0
 8024f88:	d110      	bne.n	8024fac <__mdiff+0x38>
 8024f8a:	4629      	mov	r1, r5
 8024f8c:	4630      	mov	r0, r6
 8024f8e:	f7ff fd59 	bl	8024a44 <_Balloc>
 8024f92:	b930      	cbnz	r0, 8024fa2 <__mdiff+0x2e>
 8024f94:	4b3a      	ldr	r3, [pc, #232]	; (8025080 <__mdiff+0x10c>)
 8024f96:	4602      	mov	r2, r0
 8024f98:	f240 2137 	movw	r1, #567	; 0x237
 8024f9c:	4839      	ldr	r0, [pc, #228]	; (8025084 <__mdiff+0x110>)
 8024f9e:	f000 fad9 	bl	8025554 <__assert_func>
 8024fa2:	2301      	movs	r3, #1
 8024fa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8024fa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fac:	bfa4      	itt	ge
 8024fae:	4643      	movge	r3, r8
 8024fb0:	46a0      	movge	r8, r4
 8024fb2:	4630      	mov	r0, r6
 8024fb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8024fb8:	bfa6      	itte	ge
 8024fba:	461c      	movge	r4, r3
 8024fbc:	2500      	movge	r5, #0
 8024fbe:	2501      	movlt	r5, #1
 8024fc0:	f7ff fd40 	bl	8024a44 <_Balloc>
 8024fc4:	b920      	cbnz	r0, 8024fd0 <__mdiff+0x5c>
 8024fc6:	4b2e      	ldr	r3, [pc, #184]	; (8025080 <__mdiff+0x10c>)
 8024fc8:	4602      	mov	r2, r0
 8024fca:	f240 2145 	movw	r1, #581	; 0x245
 8024fce:	e7e5      	b.n	8024f9c <__mdiff+0x28>
 8024fd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8024fd4:	6926      	ldr	r6, [r4, #16]
 8024fd6:	60c5      	str	r5, [r0, #12]
 8024fd8:	f104 0914 	add.w	r9, r4, #20
 8024fdc:	f108 0514 	add.w	r5, r8, #20
 8024fe0:	f100 0e14 	add.w	lr, r0, #20
 8024fe4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8024fe8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8024fec:	f108 0210 	add.w	r2, r8, #16
 8024ff0:	46f2      	mov	sl, lr
 8024ff2:	2100      	movs	r1, #0
 8024ff4:	f859 3b04 	ldr.w	r3, [r9], #4
 8024ff8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8024ffc:	fa11 f88b 	uxtah	r8, r1, fp
 8025000:	b299      	uxth	r1, r3
 8025002:	0c1b      	lsrs	r3, r3, #16
 8025004:	eba8 0801 	sub.w	r8, r8, r1
 8025008:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802500c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8025010:	fa1f f888 	uxth.w	r8, r8
 8025014:	1419      	asrs	r1, r3, #16
 8025016:	454e      	cmp	r6, r9
 8025018:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802501c:	f84a 3b04 	str.w	r3, [sl], #4
 8025020:	d8e8      	bhi.n	8024ff4 <__mdiff+0x80>
 8025022:	1b33      	subs	r3, r6, r4
 8025024:	3b15      	subs	r3, #21
 8025026:	f023 0303 	bic.w	r3, r3, #3
 802502a:	3304      	adds	r3, #4
 802502c:	3415      	adds	r4, #21
 802502e:	42a6      	cmp	r6, r4
 8025030:	bf38      	it	cc
 8025032:	2304      	movcc	r3, #4
 8025034:	441d      	add	r5, r3
 8025036:	4473      	add	r3, lr
 8025038:	469e      	mov	lr, r3
 802503a:	462e      	mov	r6, r5
 802503c:	4566      	cmp	r6, ip
 802503e:	d30e      	bcc.n	802505e <__mdiff+0xea>
 8025040:	f10c 0203 	add.w	r2, ip, #3
 8025044:	1b52      	subs	r2, r2, r5
 8025046:	f022 0203 	bic.w	r2, r2, #3
 802504a:	3d03      	subs	r5, #3
 802504c:	45ac      	cmp	ip, r5
 802504e:	bf38      	it	cc
 8025050:	2200      	movcc	r2, #0
 8025052:	4413      	add	r3, r2
 8025054:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8025058:	b17a      	cbz	r2, 802507a <__mdiff+0x106>
 802505a:	6107      	str	r7, [r0, #16]
 802505c:	e7a4      	b.n	8024fa8 <__mdiff+0x34>
 802505e:	f856 8b04 	ldr.w	r8, [r6], #4
 8025062:	fa11 f288 	uxtah	r2, r1, r8
 8025066:	1414      	asrs	r4, r2, #16
 8025068:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802506c:	b292      	uxth	r2, r2
 802506e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8025072:	f84e 2b04 	str.w	r2, [lr], #4
 8025076:	1421      	asrs	r1, r4, #16
 8025078:	e7e0      	b.n	802503c <__mdiff+0xc8>
 802507a:	3f01      	subs	r7, #1
 802507c:	e7ea      	b.n	8025054 <__mdiff+0xe0>
 802507e:	bf00      	nop
 8025080:	0802e309 	.word	0x0802e309
 8025084:	0802e31a 	.word	0x0802e31a

08025088 <__d2b>:
 8025088:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802508c:	460f      	mov	r7, r1
 802508e:	2101      	movs	r1, #1
 8025090:	ec59 8b10 	vmov	r8, r9, d0
 8025094:	4616      	mov	r6, r2
 8025096:	f7ff fcd5 	bl	8024a44 <_Balloc>
 802509a:	4604      	mov	r4, r0
 802509c:	b930      	cbnz	r0, 80250ac <__d2b+0x24>
 802509e:	4602      	mov	r2, r0
 80250a0:	4b24      	ldr	r3, [pc, #144]	; (8025134 <__d2b+0xac>)
 80250a2:	4825      	ldr	r0, [pc, #148]	; (8025138 <__d2b+0xb0>)
 80250a4:	f240 310f 	movw	r1, #783	; 0x30f
 80250a8:	f000 fa54 	bl	8025554 <__assert_func>
 80250ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80250b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80250b4:	bb2d      	cbnz	r5, 8025102 <__d2b+0x7a>
 80250b6:	9301      	str	r3, [sp, #4]
 80250b8:	f1b8 0300 	subs.w	r3, r8, #0
 80250bc:	d026      	beq.n	802510c <__d2b+0x84>
 80250be:	4668      	mov	r0, sp
 80250c0:	9300      	str	r3, [sp, #0]
 80250c2:	f7ff fd87 	bl	8024bd4 <__lo0bits>
 80250c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80250ca:	b1e8      	cbz	r0, 8025108 <__d2b+0x80>
 80250cc:	f1c0 0320 	rsb	r3, r0, #32
 80250d0:	fa02 f303 	lsl.w	r3, r2, r3
 80250d4:	430b      	orrs	r3, r1
 80250d6:	40c2      	lsrs	r2, r0
 80250d8:	6163      	str	r3, [r4, #20]
 80250da:	9201      	str	r2, [sp, #4]
 80250dc:	9b01      	ldr	r3, [sp, #4]
 80250de:	61a3      	str	r3, [r4, #24]
 80250e0:	2b00      	cmp	r3, #0
 80250e2:	bf14      	ite	ne
 80250e4:	2202      	movne	r2, #2
 80250e6:	2201      	moveq	r2, #1
 80250e8:	6122      	str	r2, [r4, #16]
 80250ea:	b1bd      	cbz	r5, 802511c <__d2b+0x94>
 80250ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80250f0:	4405      	add	r5, r0
 80250f2:	603d      	str	r5, [r7, #0]
 80250f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80250f8:	6030      	str	r0, [r6, #0]
 80250fa:	4620      	mov	r0, r4
 80250fc:	b003      	add	sp, #12
 80250fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8025106:	e7d6      	b.n	80250b6 <__d2b+0x2e>
 8025108:	6161      	str	r1, [r4, #20]
 802510a:	e7e7      	b.n	80250dc <__d2b+0x54>
 802510c:	a801      	add	r0, sp, #4
 802510e:	f7ff fd61 	bl	8024bd4 <__lo0bits>
 8025112:	9b01      	ldr	r3, [sp, #4]
 8025114:	6163      	str	r3, [r4, #20]
 8025116:	3020      	adds	r0, #32
 8025118:	2201      	movs	r2, #1
 802511a:	e7e5      	b.n	80250e8 <__d2b+0x60>
 802511c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8025120:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8025124:	6038      	str	r0, [r7, #0]
 8025126:	6918      	ldr	r0, [r3, #16]
 8025128:	f7ff fd34 	bl	8024b94 <__hi0bits>
 802512c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8025130:	e7e2      	b.n	80250f8 <__d2b+0x70>
 8025132:	bf00      	nop
 8025134:	0802e309 	.word	0x0802e309
 8025138:	0802e31a 	.word	0x0802e31a

0802513c <__sfputc_r>:
 802513c:	6893      	ldr	r3, [r2, #8]
 802513e:	3b01      	subs	r3, #1
 8025140:	2b00      	cmp	r3, #0
 8025142:	b410      	push	{r4}
 8025144:	6093      	str	r3, [r2, #8]
 8025146:	da08      	bge.n	802515a <__sfputc_r+0x1e>
 8025148:	6994      	ldr	r4, [r2, #24]
 802514a:	42a3      	cmp	r3, r4
 802514c:	db01      	blt.n	8025152 <__sfputc_r+0x16>
 802514e:	290a      	cmp	r1, #10
 8025150:	d103      	bne.n	802515a <__sfputc_r+0x1e>
 8025152:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025156:	f7fe bb46 	b.w	80237e6 <__swbuf_r>
 802515a:	6813      	ldr	r3, [r2, #0]
 802515c:	1c58      	adds	r0, r3, #1
 802515e:	6010      	str	r0, [r2, #0]
 8025160:	7019      	strb	r1, [r3, #0]
 8025162:	4608      	mov	r0, r1
 8025164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025168:	4770      	bx	lr

0802516a <__sfputs_r>:
 802516a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802516c:	4606      	mov	r6, r0
 802516e:	460f      	mov	r7, r1
 8025170:	4614      	mov	r4, r2
 8025172:	18d5      	adds	r5, r2, r3
 8025174:	42ac      	cmp	r4, r5
 8025176:	d101      	bne.n	802517c <__sfputs_r+0x12>
 8025178:	2000      	movs	r0, #0
 802517a:	e007      	b.n	802518c <__sfputs_r+0x22>
 802517c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025180:	463a      	mov	r2, r7
 8025182:	4630      	mov	r0, r6
 8025184:	f7ff ffda 	bl	802513c <__sfputc_r>
 8025188:	1c43      	adds	r3, r0, #1
 802518a:	d1f3      	bne.n	8025174 <__sfputs_r+0xa>
 802518c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025190 <_vfiprintf_r>:
 8025190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025194:	460d      	mov	r5, r1
 8025196:	b09d      	sub	sp, #116	; 0x74
 8025198:	4614      	mov	r4, r2
 802519a:	4698      	mov	r8, r3
 802519c:	4606      	mov	r6, r0
 802519e:	b118      	cbz	r0, 80251a8 <_vfiprintf_r+0x18>
 80251a0:	6a03      	ldr	r3, [r0, #32]
 80251a2:	b90b      	cbnz	r3, 80251a8 <_vfiprintf_r+0x18>
 80251a4:	f7fe fa8c 	bl	80236c0 <__sinit>
 80251a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80251aa:	07d9      	lsls	r1, r3, #31
 80251ac:	d405      	bmi.n	80251ba <_vfiprintf_r+0x2a>
 80251ae:	89ab      	ldrh	r3, [r5, #12]
 80251b0:	059a      	lsls	r2, r3, #22
 80251b2:	d402      	bmi.n	80251ba <_vfiprintf_r+0x2a>
 80251b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80251b6:	f7fe fcae 	bl	8023b16 <__retarget_lock_acquire_recursive>
 80251ba:	89ab      	ldrh	r3, [r5, #12]
 80251bc:	071b      	lsls	r3, r3, #28
 80251be:	d501      	bpl.n	80251c4 <_vfiprintf_r+0x34>
 80251c0:	692b      	ldr	r3, [r5, #16]
 80251c2:	b99b      	cbnz	r3, 80251ec <_vfiprintf_r+0x5c>
 80251c4:	4629      	mov	r1, r5
 80251c6:	4630      	mov	r0, r6
 80251c8:	f7fe fb4a 	bl	8023860 <__swsetup_r>
 80251cc:	b170      	cbz	r0, 80251ec <_vfiprintf_r+0x5c>
 80251ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80251d0:	07dc      	lsls	r4, r3, #31
 80251d2:	d504      	bpl.n	80251de <_vfiprintf_r+0x4e>
 80251d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80251d8:	b01d      	add	sp, #116	; 0x74
 80251da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80251de:	89ab      	ldrh	r3, [r5, #12]
 80251e0:	0598      	lsls	r0, r3, #22
 80251e2:	d4f7      	bmi.n	80251d4 <_vfiprintf_r+0x44>
 80251e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80251e6:	f7fe fc97 	bl	8023b18 <__retarget_lock_release_recursive>
 80251ea:	e7f3      	b.n	80251d4 <_vfiprintf_r+0x44>
 80251ec:	2300      	movs	r3, #0
 80251ee:	9309      	str	r3, [sp, #36]	; 0x24
 80251f0:	2320      	movs	r3, #32
 80251f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80251f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80251fa:	2330      	movs	r3, #48	; 0x30
 80251fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80253b0 <_vfiprintf_r+0x220>
 8025200:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025204:	f04f 0901 	mov.w	r9, #1
 8025208:	4623      	mov	r3, r4
 802520a:	469a      	mov	sl, r3
 802520c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025210:	b10a      	cbz	r2, 8025216 <_vfiprintf_r+0x86>
 8025212:	2a25      	cmp	r2, #37	; 0x25
 8025214:	d1f9      	bne.n	802520a <_vfiprintf_r+0x7a>
 8025216:	ebba 0b04 	subs.w	fp, sl, r4
 802521a:	d00b      	beq.n	8025234 <_vfiprintf_r+0xa4>
 802521c:	465b      	mov	r3, fp
 802521e:	4622      	mov	r2, r4
 8025220:	4629      	mov	r1, r5
 8025222:	4630      	mov	r0, r6
 8025224:	f7ff ffa1 	bl	802516a <__sfputs_r>
 8025228:	3001      	adds	r0, #1
 802522a:	f000 80a9 	beq.w	8025380 <_vfiprintf_r+0x1f0>
 802522e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025230:	445a      	add	r2, fp
 8025232:	9209      	str	r2, [sp, #36]	; 0x24
 8025234:	f89a 3000 	ldrb.w	r3, [sl]
 8025238:	2b00      	cmp	r3, #0
 802523a:	f000 80a1 	beq.w	8025380 <_vfiprintf_r+0x1f0>
 802523e:	2300      	movs	r3, #0
 8025240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025248:	f10a 0a01 	add.w	sl, sl, #1
 802524c:	9304      	str	r3, [sp, #16]
 802524e:	9307      	str	r3, [sp, #28]
 8025250:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025254:	931a      	str	r3, [sp, #104]	; 0x68
 8025256:	4654      	mov	r4, sl
 8025258:	2205      	movs	r2, #5
 802525a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802525e:	4854      	ldr	r0, [pc, #336]	; (80253b0 <_vfiprintf_r+0x220>)
 8025260:	f7da ffc6 	bl	80001f0 <memchr>
 8025264:	9a04      	ldr	r2, [sp, #16]
 8025266:	b9d8      	cbnz	r0, 80252a0 <_vfiprintf_r+0x110>
 8025268:	06d1      	lsls	r1, r2, #27
 802526a:	bf44      	itt	mi
 802526c:	2320      	movmi	r3, #32
 802526e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025272:	0713      	lsls	r3, r2, #28
 8025274:	bf44      	itt	mi
 8025276:	232b      	movmi	r3, #43	; 0x2b
 8025278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802527c:	f89a 3000 	ldrb.w	r3, [sl]
 8025280:	2b2a      	cmp	r3, #42	; 0x2a
 8025282:	d015      	beq.n	80252b0 <_vfiprintf_r+0x120>
 8025284:	9a07      	ldr	r2, [sp, #28]
 8025286:	4654      	mov	r4, sl
 8025288:	2000      	movs	r0, #0
 802528a:	f04f 0c0a 	mov.w	ip, #10
 802528e:	4621      	mov	r1, r4
 8025290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025294:	3b30      	subs	r3, #48	; 0x30
 8025296:	2b09      	cmp	r3, #9
 8025298:	d94d      	bls.n	8025336 <_vfiprintf_r+0x1a6>
 802529a:	b1b0      	cbz	r0, 80252ca <_vfiprintf_r+0x13a>
 802529c:	9207      	str	r2, [sp, #28]
 802529e:	e014      	b.n	80252ca <_vfiprintf_r+0x13a>
 80252a0:	eba0 0308 	sub.w	r3, r0, r8
 80252a4:	fa09 f303 	lsl.w	r3, r9, r3
 80252a8:	4313      	orrs	r3, r2
 80252aa:	9304      	str	r3, [sp, #16]
 80252ac:	46a2      	mov	sl, r4
 80252ae:	e7d2      	b.n	8025256 <_vfiprintf_r+0xc6>
 80252b0:	9b03      	ldr	r3, [sp, #12]
 80252b2:	1d19      	adds	r1, r3, #4
 80252b4:	681b      	ldr	r3, [r3, #0]
 80252b6:	9103      	str	r1, [sp, #12]
 80252b8:	2b00      	cmp	r3, #0
 80252ba:	bfbb      	ittet	lt
 80252bc:	425b      	neglt	r3, r3
 80252be:	f042 0202 	orrlt.w	r2, r2, #2
 80252c2:	9307      	strge	r3, [sp, #28]
 80252c4:	9307      	strlt	r3, [sp, #28]
 80252c6:	bfb8      	it	lt
 80252c8:	9204      	strlt	r2, [sp, #16]
 80252ca:	7823      	ldrb	r3, [r4, #0]
 80252cc:	2b2e      	cmp	r3, #46	; 0x2e
 80252ce:	d10c      	bne.n	80252ea <_vfiprintf_r+0x15a>
 80252d0:	7863      	ldrb	r3, [r4, #1]
 80252d2:	2b2a      	cmp	r3, #42	; 0x2a
 80252d4:	d134      	bne.n	8025340 <_vfiprintf_r+0x1b0>
 80252d6:	9b03      	ldr	r3, [sp, #12]
 80252d8:	1d1a      	adds	r2, r3, #4
 80252da:	681b      	ldr	r3, [r3, #0]
 80252dc:	9203      	str	r2, [sp, #12]
 80252de:	2b00      	cmp	r3, #0
 80252e0:	bfb8      	it	lt
 80252e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80252e6:	3402      	adds	r4, #2
 80252e8:	9305      	str	r3, [sp, #20]
 80252ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80253c0 <_vfiprintf_r+0x230>
 80252ee:	7821      	ldrb	r1, [r4, #0]
 80252f0:	2203      	movs	r2, #3
 80252f2:	4650      	mov	r0, sl
 80252f4:	f7da ff7c 	bl	80001f0 <memchr>
 80252f8:	b138      	cbz	r0, 802530a <_vfiprintf_r+0x17a>
 80252fa:	9b04      	ldr	r3, [sp, #16]
 80252fc:	eba0 000a 	sub.w	r0, r0, sl
 8025300:	2240      	movs	r2, #64	; 0x40
 8025302:	4082      	lsls	r2, r0
 8025304:	4313      	orrs	r3, r2
 8025306:	3401      	adds	r4, #1
 8025308:	9304      	str	r3, [sp, #16]
 802530a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802530e:	4829      	ldr	r0, [pc, #164]	; (80253b4 <_vfiprintf_r+0x224>)
 8025310:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025314:	2206      	movs	r2, #6
 8025316:	f7da ff6b 	bl	80001f0 <memchr>
 802531a:	2800      	cmp	r0, #0
 802531c:	d03f      	beq.n	802539e <_vfiprintf_r+0x20e>
 802531e:	4b26      	ldr	r3, [pc, #152]	; (80253b8 <_vfiprintf_r+0x228>)
 8025320:	bb1b      	cbnz	r3, 802536a <_vfiprintf_r+0x1da>
 8025322:	9b03      	ldr	r3, [sp, #12]
 8025324:	3307      	adds	r3, #7
 8025326:	f023 0307 	bic.w	r3, r3, #7
 802532a:	3308      	adds	r3, #8
 802532c:	9303      	str	r3, [sp, #12]
 802532e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025330:	443b      	add	r3, r7
 8025332:	9309      	str	r3, [sp, #36]	; 0x24
 8025334:	e768      	b.n	8025208 <_vfiprintf_r+0x78>
 8025336:	fb0c 3202 	mla	r2, ip, r2, r3
 802533a:	460c      	mov	r4, r1
 802533c:	2001      	movs	r0, #1
 802533e:	e7a6      	b.n	802528e <_vfiprintf_r+0xfe>
 8025340:	2300      	movs	r3, #0
 8025342:	3401      	adds	r4, #1
 8025344:	9305      	str	r3, [sp, #20]
 8025346:	4619      	mov	r1, r3
 8025348:	f04f 0c0a 	mov.w	ip, #10
 802534c:	4620      	mov	r0, r4
 802534e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025352:	3a30      	subs	r2, #48	; 0x30
 8025354:	2a09      	cmp	r2, #9
 8025356:	d903      	bls.n	8025360 <_vfiprintf_r+0x1d0>
 8025358:	2b00      	cmp	r3, #0
 802535a:	d0c6      	beq.n	80252ea <_vfiprintf_r+0x15a>
 802535c:	9105      	str	r1, [sp, #20]
 802535e:	e7c4      	b.n	80252ea <_vfiprintf_r+0x15a>
 8025360:	fb0c 2101 	mla	r1, ip, r1, r2
 8025364:	4604      	mov	r4, r0
 8025366:	2301      	movs	r3, #1
 8025368:	e7f0      	b.n	802534c <_vfiprintf_r+0x1bc>
 802536a:	ab03      	add	r3, sp, #12
 802536c:	9300      	str	r3, [sp, #0]
 802536e:	462a      	mov	r2, r5
 8025370:	4b12      	ldr	r3, [pc, #72]	; (80253bc <_vfiprintf_r+0x22c>)
 8025372:	a904      	add	r1, sp, #16
 8025374:	4630      	mov	r0, r6
 8025376:	f7fd fc8f 	bl	8022c98 <_printf_float>
 802537a:	4607      	mov	r7, r0
 802537c:	1c78      	adds	r0, r7, #1
 802537e:	d1d6      	bne.n	802532e <_vfiprintf_r+0x19e>
 8025380:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025382:	07d9      	lsls	r1, r3, #31
 8025384:	d405      	bmi.n	8025392 <_vfiprintf_r+0x202>
 8025386:	89ab      	ldrh	r3, [r5, #12]
 8025388:	059a      	lsls	r2, r3, #22
 802538a:	d402      	bmi.n	8025392 <_vfiprintf_r+0x202>
 802538c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802538e:	f7fe fbc3 	bl	8023b18 <__retarget_lock_release_recursive>
 8025392:	89ab      	ldrh	r3, [r5, #12]
 8025394:	065b      	lsls	r3, r3, #25
 8025396:	f53f af1d 	bmi.w	80251d4 <_vfiprintf_r+0x44>
 802539a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802539c:	e71c      	b.n	80251d8 <_vfiprintf_r+0x48>
 802539e:	ab03      	add	r3, sp, #12
 80253a0:	9300      	str	r3, [sp, #0]
 80253a2:	462a      	mov	r2, r5
 80253a4:	4b05      	ldr	r3, [pc, #20]	; (80253bc <_vfiprintf_r+0x22c>)
 80253a6:	a904      	add	r1, sp, #16
 80253a8:	4630      	mov	r0, r6
 80253aa:	f7fd ff19 	bl	80231e0 <_printf_i>
 80253ae:	e7e4      	b.n	802537a <_vfiprintf_r+0x1ea>
 80253b0:	0802e474 	.word	0x0802e474
 80253b4:	0802e47e 	.word	0x0802e47e
 80253b8:	08022c99 	.word	0x08022c99
 80253bc:	0802516b 	.word	0x0802516b
 80253c0:	0802e47a 	.word	0x0802e47a

080253c4 <__swhatbuf_r>:
 80253c4:	b570      	push	{r4, r5, r6, lr}
 80253c6:	460c      	mov	r4, r1
 80253c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80253cc:	2900      	cmp	r1, #0
 80253ce:	b096      	sub	sp, #88	; 0x58
 80253d0:	4615      	mov	r5, r2
 80253d2:	461e      	mov	r6, r3
 80253d4:	da0d      	bge.n	80253f2 <__swhatbuf_r+0x2e>
 80253d6:	89a3      	ldrh	r3, [r4, #12]
 80253d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80253dc:	f04f 0100 	mov.w	r1, #0
 80253e0:	bf0c      	ite	eq
 80253e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80253e6:	2340      	movne	r3, #64	; 0x40
 80253e8:	2000      	movs	r0, #0
 80253ea:	6031      	str	r1, [r6, #0]
 80253ec:	602b      	str	r3, [r5, #0]
 80253ee:	b016      	add	sp, #88	; 0x58
 80253f0:	bd70      	pop	{r4, r5, r6, pc}
 80253f2:	466a      	mov	r2, sp
 80253f4:	f000 f87c 	bl	80254f0 <_fstat_r>
 80253f8:	2800      	cmp	r0, #0
 80253fa:	dbec      	blt.n	80253d6 <__swhatbuf_r+0x12>
 80253fc:	9901      	ldr	r1, [sp, #4]
 80253fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8025402:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8025406:	4259      	negs	r1, r3
 8025408:	4159      	adcs	r1, r3
 802540a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802540e:	e7eb      	b.n	80253e8 <__swhatbuf_r+0x24>

08025410 <__smakebuf_r>:
 8025410:	898b      	ldrh	r3, [r1, #12]
 8025412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025414:	079d      	lsls	r5, r3, #30
 8025416:	4606      	mov	r6, r0
 8025418:	460c      	mov	r4, r1
 802541a:	d507      	bpl.n	802542c <__smakebuf_r+0x1c>
 802541c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025420:	6023      	str	r3, [r4, #0]
 8025422:	6123      	str	r3, [r4, #16]
 8025424:	2301      	movs	r3, #1
 8025426:	6163      	str	r3, [r4, #20]
 8025428:	b002      	add	sp, #8
 802542a:	bd70      	pop	{r4, r5, r6, pc}
 802542c:	ab01      	add	r3, sp, #4
 802542e:	466a      	mov	r2, sp
 8025430:	f7ff ffc8 	bl	80253c4 <__swhatbuf_r>
 8025434:	9900      	ldr	r1, [sp, #0]
 8025436:	4605      	mov	r5, r0
 8025438:	4630      	mov	r0, r6
 802543a:	f7ff fa77 	bl	802492c <_malloc_r>
 802543e:	b948      	cbnz	r0, 8025454 <__smakebuf_r+0x44>
 8025440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025444:	059a      	lsls	r2, r3, #22
 8025446:	d4ef      	bmi.n	8025428 <__smakebuf_r+0x18>
 8025448:	f023 0303 	bic.w	r3, r3, #3
 802544c:	f043 0302 	orr.w	r3, r3, #2
 8025450:	81a3      	strh	r3, [r4, #12]
 8025452:	e7e3      	b.n	802541c <__smakebuf_r+0xc>
 8025454:	89a3      	ldrh	r3, [r4, #12]
 8025456:	6020      	str	r0, [r4, #0]
 8025458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802545c:	81a3      	strh	r3, [r4, #12]
 802545e:	9b00      	ldr	r3, [sp, #0]
 8025460:	6163      	str	r3, [r4, #20]
 8025462:	9b01      	ldr	r3, [sp, #4]
 8025464:	6120      	str	r0, [r4, #16]
 8025466:	b15b      	cbz	r3, 8025480 <__smakebuf_r+0x70>
 8025468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802546c:	4630      	mov	r0, r6
 802546e:	f000 f851 	bl	8025514 <_isatty_r>
 8025472:	b128      	cbz	r0, 8025480 <__smakebuf_r+0x70>
 8025474:	89a3      	ldrh	r3, [r4, #12]
 8025476:	f023 0303 	bic.w	r3, r3, #3
 802547a:	f043 0301 	orr.w	r3, r3, #1
 802547e:	81a3      	strh	r3, [r4, #12]
 8025480:	89a3      	ldrh	r3, [r4, #12]
 8025482:	431d      	orrs	r5, r3
 8025484:	81a5      	strh	r5, [r4, #12]
 8025486:	e7cf      	b.n	8025428 <__smakebuf_r+0x18>

08025488 <_putc_r>:
 8025488:	b570      	push	{r4, r5, r6, lr}
 802548a:	460d      	mov	r5, r1
 802548c:	4614      	mov	r4, r2
 802548e:	4606      	mov	r6, r0
 8025490:	b118      	cbz	r0, 802549a <_putc_r+0x12>
 8025492:	6a03      	ldr	r3, [r0, #32]
 8025494:	b90b      	cbnz	r3, 802549a <_putc_r+0x12>
 8025496:	f7fe f913 	bl	80236c0 <__sinit>
 802549a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802549c:	07d8      	lsls	r0, r3, #31
 802549e:	d405      	bmi.n	80254ac <_putc_r+0x24>
 80254a0:	89a3      	ldrh	r3, [r4, #12]
 80254a2:	0599      	lsls	r1, r3, #22
 80254a4:	d402      	bmi.n	80254ac <_putc_r+0x24>
 80254a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80254a8:	f7fe fb35 	bl	8023b16 <__retarget_lock_acquire_recursive>
 80254ac:	68a3      	ldr	r3, [r4, #8]
 80254ae:	3b01      	subs	r3, #1
 80254b0:	2b00      	cmp	r3, #0
 80254b2:	60a3      	str	r3, [r4, #8]
 80254b4:	da05      	bge.n	80254c2 <_putc_r+0x3a>
 80254b6:	69a2      	ldr	r2, [r4, #24]
 80254b8:	4293      	cmp	r3, r2
 80254ba:	db12      	blt.n	80254e2 <_putc_r+0x5a>
 80254bc:	b2eb      	uxtb	r3, r5
 80254be:	2b0a      	cmp	r3, #10
 80254c0:	d00f      	beq.n	80254e2 <_putc_r+0x5a>
 80254c2:	6823      	ldr	r3, [r4, #0]
 80254c4:	1c5a      	adds	r2, r3, #1
 80254c6:	6022      	str	r2, [r4, #0]
 80254c8:	701d      	strb	r5, [r3, #0]
 80254ca:	b2ed      	uxtb	r5, r5
 80254cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80254ce:	07da      	lsls	r2, r3, #31
 80254d0:	d405      	bmi.n	80254de <_putc_r+0x56>
 80254d2:	89a3      	ldrh	r3, [r4, #12]
 80254d4:	059b      	lsls	r3, r3, #22
 80254d6:	d402      	bmi.n	80254de <_putc_r+0x56>
 80254d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80254da:	f7fe fb1d 	bl	8023b18 <__retarget_lock_release_recursive>
 80254de:	4628      	mov	r0, r5
 80254e0:	bd70      	pop	{r4, r5, r6, pc}
 80254e2:	4629      	mov	r1, r5
 80254e4:	4622      	mov	r2, r4
 80254e6:	4630      	mov	r0, r6
 80254e8:	f7fe f97d 	bl	80237e6 <__swbuf_r>
 80254ec:	4605      	mov	r5, r0
 80254ee:	e7ed      	b.n	80254cc <_putc_r+0x44>

080254f0 <_fstat_r>:
 80254f0:	b538      	push	{r3, r4, r5, lr}
 80254f2:	4d07      	ldr	r5, [pc, #28]	; (8025510 <_fstat_r+0x20>)
 80254f4:	2300      	movs	r3, #0
 80254f6:	4604      	mov	r4, r0
 80254f8:	4608      	mov	r0, r1
 80254fa:	4611      	mov	r1, r2
 80254fc:	602b      	str	r3, [r5, #0]
 80254fe:	f7ef fe2c 	bl	801515a <_fstat>
 8025502:	1c43      	adds	r3, r0, #1
 8025504:	d102      	bne.n	802550c <_fstat_r+0x1c>
 8025506:	682b      	ldr	r3, [r5, #0]
 8025508:	b103      	cbz	r3, 802550c <_fstat_r+0x1c>
 802550a:	6023      	str	r3, [r4, #0]
 802550c:	bd38      	pop	{r3, r4, r5, pc}
 802550e:	bf00      	nop
 8025510:	20012ec4 	.word	0x20012ec4

08025514 <_isatty_r>:
 8025514:	b538      	push	{r3, r4, r5, lr}
 8025516:	4d06      	ldr	r5, [pc, #24]	; (8025530 <_isatty_r+0x1c>)
 8025518:	2300      	movs	r3, #0
 802551a:	4604      	mov	r4, r0
 802551c:	4608      	mov	r0, r1
 802551e:	602b      	str	r3, [r5, #0]
 8025520:	f7ef fe2b 	bl	801517a <_isatty>
 8025524:	1c43      	adds	r3, r0, #1
 8025526:	d102      	bne.n	802552e <_isatty_r+0x1a>
 8025528:	682b      	ldr	r3, [r5, #0]
 802552a:	b103      	cbz	r3, 802552e <_isatty_r+0x1a>
 802552c:	6023      	str	r3, [r4, #0]
 802552e:	bd38      	pop	{r3, r4, r5, pc}
 8025530:	20012ec4 	.word	0x20012ec4

08025534 <_sbrk_r>:
 8025534:	b538      	push	{r3, r4, r5, lr}
 8025536:	4d06      	ldr	r5, [pc, #24]	; (8025550 <_sbrk_r+0x1c>)
 8025538:	2300      	movs	r3, #0
 802553a:	4604      	mov	r4, r0
 802553c:	4608      	mov	r0, r1
 802553e:	602b      	str	r3, [r5, #0]
 8025540:	f7ef fe34 	bl	80151ac <_sbrk>
 8025544:	1c43      	adds	r3, r0, #1
 8025546:	d102      	bne.n	802554e <_sbrk_r+0x1a>
 8025548:	682b      	ldr	r3, [r5, #0]
 802554a:	b103      	cbz	r3, 802554e <_sbrk_r+0x1a>
 802554c:	6023      	str	r3, [r4, #0]
 802554e:	bd38      	pop	{r3, r4, r5, pc}
 8025550:	20012ec4 	.word	0x20012ec4

08025554 <__assert_func>:
 8025554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025556:	4614      	mov	r4, r2
 8025558:	461a      	mov	r2, r3
 802555a:	4b09      	ldr	r3, [pc, #36]	; (8025580 <__assert_func+0x2c>)
 802555c:	681b      	ldr	r3, [r3, #0]
 802555e:	4605      	mov	r5, r0
 8025560:	68d8      	ldr	r0, [r3, #12]
 8025562:	b14c      	cbz	r4, 8025578 <__assert_func+0x24>
 8025564:	4b07      	ldr	r3, [pc, #28]	; (8025584 <__assert_func+0x30>)
 8025566:	9100      	str	r1, [sp, #0]
 8025568:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802556c:	4906      	ldr	r1, [pc, #24]	; (8025588 <__assert_func+0x34>)
 802556e:	462b      	mov	r3, r5
 8025570:	f000 f844 	bl	80255fc <fiprintf>
 8025574:	f000 f854 	bl	8025620 <abort>
 8025578:	4b04      	ldr	r3, [pc, #16]	; (802558c <__assert_func+0x38>)
 802557a:	461c      	mov	r4, r3
 802557c:	e7f3      	b.n	8025566 <__assert_func+0x12>
 802557e:	bf00      	nop
 8025580:	20001038 	.word	0x20001038
 8025584:	0802e48f 	.word	0x0802e48f
 8025588:	0802e49c 	.word	0x0802e49c
 802558c:	0802e4ca 	.word	0x0802e4ca

08025590 <_calloc_r>:
 8025590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025592:	fba1 2402 	umull	r2, r4, r1, r2
 8025596:	b94c      	cbnz	r4, 80255ac <_calloc_r+0x1c>
 8025598:	4611      	mov	r1, r2
 802559a:	9201      	str	r2, [sp, #4]
 802559c:	f7ff f9c6 	bl	802492c <_malloc_r>
 80255a0:	9a01      	ldr	r2, [sp, #4]
 80255a2:	4605      	mov	r5, r0
 80255a4:	b930      	cbnz	r0, 80255b4 <_calloc_r+0x24>
 80255a6:	4628      	mov	r0, r5
 80255a8:	b003      	add	sp, #12
 80255aa:	bd30      	pop	{r4, r5, pc}
 80255ac:	220c      	movs	r2, #12
 80255ae:	6002      	str	r2, [r0, #0]
 80255b0:	2500      	movs	r5, #0
 80255b2:	e7f8      	b.n	80255a6 <_calloc_r+0x16>
 80255b4:	4621      	mov	r1, r4
 80255b6:	f7fe f9ab 	bl	8023910 <memset>
 80255ba:	e7f4      	b.n	80255a6 <_calloc_r+0x16>

080255bc <__ascii_mbtowc>:
 80255bc:	b082      	sub	sp, #8
 80255be:	b901      	cbnz	r1, 80255c2 <__ascii_mbtowc+0x6>
 80255c0:	a901      	add	r1, sp, #4
 80255c2:	b142      	cbz	r2, 80255d6 <__ascii_mbtowc+0x1a>
 80255c4:	b14b      	cbz	r3, 80255da <__ascii_mbtowc+0x1e>
 80255c6:	7813      	ldrb	r3, [r2, #0]
 80255c8:	600b      	str	r3, [r1, #0]
 80255ca:	7812      	ldrb	r2, [r2, #0]
 80255cc:	1e10      	subs	r0, r2, #0
 80255ce:	bf18      	it	ne
 80255d0:	2001      	movne	r0, #1
 80255d2:	b002      	add	sp, #8
 80255d4:	4770      	bx	lr
 80255d6:	4610      	mov	r0, r2
 80255d8:	e7fb      	b.n	80255d2 <__ascii_mbtowc+0x16>
 80255da:	f06f 0001 	mvn.w	r0, #1
 80255de:	e7f8      	b.n	80255d2 <__ascii_mbtowc+0x16>

080255e0 <__ascii_wctomb>:
 80255e0:	b149      	cbz	r1, 80255f6 <__ascii_wctomb+0x16>
 80255e2:	2aff      	cmp	r2, #255	; 0xff
 80255e4:	bf85      	ittet	hi
 80255e6:	238a      	movhi	r3, #138	; 0x8a
 80255e8:	6003      	strhi	r3, [r0, #0]
 80255ea:	700a      	strbls	r2, [r1, #0]
 80255ec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80255f0:	bf98      	it	ls
 80255f2:	2001      	movls	r0, #1
 80255f4:	4770      	bx	lr
 80255f6:	4608      	mov	r0, r1
 80255f8:	4770      	bx	lr
	...

080255fc <fiprintf>:
 80255fc:	b40e      	push	{r1, r2, r3}
 80255fe:	b503      	push	{r0, r1, lr}
 8025600:	4601      	mov	r1, r0
 8025602:	ab03      	add	r3, sp, #12
 8025604:	4805      	ldr	r0, [pc, #20]	; (802561c <fiprintf+0x20>)
 8025606:	f853 2b04 	ldr.w	r2, [r3], #4
 802560a:	6800      	ldr	r0, [r0, #0]
 802560c:	9301      	str	r3, [sp, #4]
 802560e:	f7ff fdbf 	bl	8025190 <_vfiprintf_r>
 8025612:	b002      	add	sp, #8
 8025614:	f85d eb04 	ldr.w	lr, [sp], #4
 8025618:	b003      	add	sp, #12
 802561a:	4770      	bx	lr
 802561c:	20001038 	.word	0x20001038

08025620 <abort>:
 8025620:	b508      	push	{r3, lr}
 8025622:	2006      	movs	r0, #6
 8025624:	f000 f82c 	bl	8025680 <raise>
 8025628:	2001      	movs	r0, #1
 802562a:	f7ef fd47 	bl	80150bc <_exit>

0802562e <_raise_r>:
 802562e:	291f      	cmp	r1, #31
 8025630:	b538      	push	{r3, r4, r5, lr}
 8025632:	4604      	mov	r4, r0
 8025634:	460d      	mov	r5, r1
 8025636:	d904      	bls.n	8025642 <_raise_r+0x14>
 8025638:	2316      	movs	r3, #22
 802563a:	6003      	str	r3, [r0, #0]
 802563c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025640:	bd38      	pop	{r3, r4, r5, pc}
 8025642:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8025644:	b112      	cbz	r2, 802564c <_raise_r+0x1e>
 8025646:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802564a:	b94b      	cbnz	r3, 8025660 <_raise_r+0x32>
 802564c:	4620      	mov	r0, r4
 802564e:	f000 f831 	bl	80256b4 <_getpid_r>
 8025652:	462a      	mov	r2, r5
 8025654:	4601      	mov	r1, r0
 8025656:	4620      	mov	r0, r4
 8025658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802565c:	f000 b818 	b.w	8025690 <_kill_r>
 8025660:	2b01      	cmp	r3, #1
 8025662:	d00a      	beq.n	802567a <_raise_r+0x4c>
 8025664:	1c59      	adds	r1, r3, #1
 8025666:	d103      	bne.n	8025670 <_raise_r+0x42>
 8025668:	2316      	movs	r3, #22
 802566a:	6003      	str	r3, [r0, #0]
 802566c:	2001      	movs	r0, #1
 802566e:	e7e7      	b.n	8025640 <_raise_r+0x12>
 8025670:	2400      	movs	r4, #0
 8025672:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025676:	4628      	mov	r0, r5
 8025678:	4798      	blx	r3
 802567a:	2000      	movs	r0, #0
 802567c:	e7e0      	b.n	8025640 <_raise_r+0x12>
	...

08025680 <raise>:
 8025680:	4b02      	ldr	r3, [pc, #8]	; (802568c <raise+0xc>)
 8025682:	4601      	mov	r1, r0
 8025684:	6818      	ldr	r0, [r3, #0]
 8025686:	f7ff bfd2 	b.w	802562e <_raise_r>
 802568a:	bf00      	nop
 802568c:	20001038 	.word	0x20001038

08025690 <_kill_r>:
 8025690:	b538      	push	{r3, r4, r5, lr}
 8025692:	4d07      	ldr	r5, [pc, #28]	; (80256b0 <_kill_r+0x20>)
 8025694:	2300      	movs	r3, #0
 8025696:	4604      	mov	r4, r0
 8025698:	4608      	mov	r0, r1
 802569a:	4611      	mov	r1, r2
 802569c:	602b      	str	r3, [r5, #0]
 802569e:	f7ef fcfd 	bl	801509c <_kill>
 80256a2:	1c43      	adds	r3, r0, #1
 80256a4:	d102      	bne.n	80256ac <_kill_r+0x1c>
 80256a6:	682b      	ldr	r3, [r5, #0]
 80256a8:	b103      	cbz	r3, 80256ac <_kill_r+0x1c>
 80256aa:	6023      	str	r3, [r4, #0]
 80256ac:	bd38      	pop	{r3, r4, r5, pc}
 80256ae:	bf00      	nop
 80256b0:	20012ec4 	.word	0x20012ec4

080256b4 <_getpid_r>:
 80256b4:	f7ef bcea 	b.w	801508c <_getpid>

080256b8 <acosf>:
 80256b8:	b508      	push	{r3, lr}
 80256ba:	ed2d 8b02 	vpush	{d8}
 80256be:	eeb0 8a40 	vmov.f32	s16, s0
 80256c2:	f000 fbd9 	bl	8025e78 <__ieee754_acosf>
 80256c6:	eeb4 8a48 	vcmp.f32	s16, s16
 80256ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80256ce:	eef0 8a40 	vmov.f32	s17, s0
 80256d2:	d615      	bvs.n	8025700 <acosf+0x48>
 80256d4:	eeb0 0a48 	vmov.f32	s0, s16
 80256d8:	f000 f922 	bl	8025920 <fabsf>
 80256dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80256e0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80256e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80256e8:	dd0a      	ble.n	8025700 <acosf+0x48>
 80256ea:	f7fe f9e9 	bl	8023ac0 <__errno>
 80256ee:	ecbd 8b02 	vpop	{d8}
 80256f2:	2321      	movs	r3, #33	; 0x21
 80256f4:	6003      	str	r3, [r0, #0]
 80256f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80256fa:	4804      	ldr	r0, [pc, #16]	; (802570c <acosf+0x54>)
 80256fc:	f000 b998 	b.w	8025a30 <nanf>
 8025700:	eeb0 0a68 	vmov.f32	s0, s17
 8025704:	ecbd 8b02 	vpop	{d8}
 8025708:	bd08      	pop	{r3, pc}
 802570a:	bf00      	nop
 802570c:	0802e4ca 	.word	0x0802e4ca

08025710 <asinf>:
 8025710:	b508      	push	{r3, lr}
 8025712:	ed2d 8b02 	vpush	{d8}
 8025716:	eeb0 8a40 	vmov.f32	s16, s0
 802571a:	f000 fca5 	bl	8026068 <__ieee754_asinf>
 802571e:	eeb4 8a48 	vcmp.f32	s16, s16
 8025722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025726:	eef0 8a40 	vmov.f32	s17, s0
 802572a:	d615      	bvs.n	8025758 <asinf+0x48>
 802572c:	eeb0 0a48 	vmov.f32	s0, s16
 8025730:	f000 f8f6 	bl	8025920 <fabsf>
 8025734:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8025738:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802573c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025740:	dd0a      	ble.n	8025758 <asinf+0x48>
 8025742:	f7fe f9bd 	bl	8023ac0 <__errno>
 8025746:	ecbd 8b02 	vpop	{d8}
 802574a:	2321      	movs	r3, #33	; 0x21
 802574c:	6003      	str	r3, [r0, #0]
 802574e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8025752:	4804      	ldr	r0, [pc, #16]	; (8025764 <asinf+0x54>)
 8025754:	f000 b96c 	b.w	8025a30 <nanf>
 8025758:	eeb0 0a68 	vmov.f32	s0, s17
 802575c:	ecbd 8b02 	vpop	{d8}
 8025760:	bd08      	pop	{r3, pc}
 8025762:	bf00      	nop
 8025764:	0802e4ca 	.word	0x0802e4ca

08025768 <atan2f>:
 8025768:	f000 bd64 	b.w	8026234 <__ieee754_atan2f>

0802576c <fmodf>:
 802576c:	b508      	push	{r3, lr}
 802576e:	ed2d 8b02 	vpush	{d8}
 8025772:	eef0 8a40 	vmov.f32	s17, s0
 8025776:	eeb0 8a60 	vmov.f32	s16, s1
 802577a:	f000 fdfb 	bl	8026374 <__ieee754_fmodf>
 802577e:	eef4 8a48 	vcmp.f32	s17, s16
 8025782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025786:	d60c      	bvs.n	80257a2 <fmodf+0x36>
 8025788:	eddf 8a07 	vldr	s17, [pc, #28]	; 80257a8 <fmodf+0x3c>
 802578c:	eeb4 8a68 	vcmp.f32	s16, s17
 8025790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025794:	d105      	bne.n	80257a2 <fmodf+0x36>
 8025796:	f7fe f993 	bl	8023ac0 <__errno>
 802579a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802579e:	2321      	movs	r3, #33	; 0x21
 80257a0:	6003      	str	r3, [r0, #0]
 80257a2:	ecbd 8b02 	vpop	{d8}
 80257a6:	bd08      	pop	{r3, pc}
 80257a8:	00000000 	.word	0x00000000

080257ac <powf>:
 80257ac:	b508      	push	{r3, lr}
 80257ae:	ed2d 8b04 	vpush	{d8-d9}
 80257b2:	eeb0 8a60 	vmov.f32	s16, s1
 80257b6:	eeb0 9a40 	vmov.f32	s18, s0
 80257ba:	f000 fe5d 	bl	8026478 <__ieee754_powf>
 80257be:	eeb4 8a48 	vcmp.f32	s16, s16
 80257c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80257c6:	eef0 8a40 	vmov.f32	s17, s0
 80257ca:	d63e      	bvs.n	802584a <powf+0x9e>
 80257cc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80257d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80257d4:	d112      	bne.n	80257fc <powf+0x50>
 80257d6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80257da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80257de:	d039      	beq.n	8025854 <powf+0xa8>
 80257e0:	eeb0 0a48 	vmov.f32	s0, s16
 80257e4:	f000 f916 	bl	8025a14 <finitef>
 80257e8:	b378      	cbz	r0, 802584a <powf+0x9e>
 80257ea:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80257ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80257f2:	d52a      	bpl.n	802584a <powf+0x9e>
 80257f4:	f7fe f964 	bl	8023ac0 <__errno>
 80257f8:	2322      	movs	r3, #34	; 0x22
 80257fa:	e014      	b.n	8025826 <powf+0x7a>
 80257fc:	f000 f90a 	bl	8025a14 <finitef>
 8025800:	b998      	cbnz	r0, 802582a <powf+0x7e>
 8025802:	eeb0 0a49 	vmov.f32	s0, s18
 8025806:	f000 f905 	bl	8025a14 <finitef>
 802580a:	b170      	cbz	r0, 802582a <powf+0x7e>
 802580c:	eeb0 0a48 	vmov.f32	s0, s16
 8025810:	f000 f900 	bl	8025a14 <finitef>
 8025814:	b148      	cbz	r0, 802582a <powf+0x7e>
 8025816:	eef4 8a68 	vcmp.f32	s17, s17
 802581a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802581e:	d7e9      	bvc.n	80257f4 <powf+0x48>
 8025820:	f7fe f94e 	bl	8023ac0 <__errno>
 8025824:	2321      	movs	r3, #33	; 0x21
 8025826:	6003      	str	r3, [r0, #0]
 8025828:	e00f      	b.n	802584a <powf+0x9e>
 802582a:	eef5 8a40 	vcmp.f32	s17, #0.0
 802582e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025832:	d10a      	bne.n	802584a <powf+0x9e>
 8025834:	eeb0 0a49 	vmov.f32	s0, s18
 8025838:	f000 f8ec 	bl	8025a14 <finitef>
 802583c:	b128      	cbz	r0, 802584a <powf+0x9e>
 802583e:	eeb0 0a48 	vmov.f32	s0, s16
 8025842:	f000 f8e7 	bl	8025a14 <finitef>
 8025846:	2800      	cmp	r0, #0
 8025848:	d1d4      	bne.n	80257f4 <powf+0x48>
 802584a:	eeb0 0a68 	vmov.f32	s0, s17
 802584e:	ecbd 8b04 	vpop	{d8-d9}
 8025852:	bd08      	pop	{r3, pc}
 8025854:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8025858:	e7f7      	b.n	802584a <powf+0x9e>
	...

0802585c <sqrtf>:
 802585c:	b508      	push	{r3, lr}
 802585e:	ed2d 8b02 	vpush	{d8}
 8025862:	eeb0 8a40 	vmov.f32	s16, s0
 8025866:	f000 f93b 	bl	8025ae0 <__ieee754_sqrtf>
 802586a:	eeb4 8a48 	vcmp.f32	s16, s16
 802586e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025872:	d60c      	bvs.n	802588e <sqrtf+0x32>
 8025874:	eddf 8a07 	vldr	s17, [pc, #28]	; 8025894 <sqrtf+0x38>
 8025878:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802587c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025880:	d505      	bpl.n	802588e <sqrtf+0x32>
 8025882:	f7fe f91d 	bl	8023ac0 <__errno>
 8025886:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802588a:	2321      	movs	r3, #33	; 0x21
 802588c:	6003      	str	r3, [r0, #0]
 802588e:	ecbd 8b02 	vpop	{d8}
 8025892:	bd08      	pop	{r3, pc}
 8025894:	00000000 	.word	0x00000000

08025898 <cosf>:
 8025898:	ee10 3a10 	vmov	r3, s0
 802589c:	b507      	push	{r0, r1, r2, lr}
 802589e:	4a1e      	ldr	r2, [pc, #120]	; (8025918 <cosf+0x80>)
 80258a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80258a4:	4293      	cmp	r3, r2
 80258a6:	dc06      	bgt.n	80258b6 <cosf+0x1e>
 80258a8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 802591c <cosf+0x84>
 80258ac:	b003      	add	sp, #12
 80258ae:	f85d eb04 	ldr.w	lr, [sp], #4
 80258b2:	f000 b95b 	b.w	8025b6c <__kernel_cosf>
 80258b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80258ba:	db04      	blt.n	80258c6 <cosf+0x2e>
 80258bc:	ee30 0a40 	vsub.f32	s0, s0, s0
 80258c0:	b003      	add	sp, #12
 80258c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80258c6:	4668      	mov	r0, sp
 80258c8:	f001 f8a0 	bl	8026a0c <__ieee754_rem_pio2f>
 80258cc:	f000 0003 	and.w	r0, r0, #3
 80258d0:	2801      	cmp	r0, #1
 80258d2:	d009      	beq.n	80258e8 <cosf+0x50>
 80258d4:	2802      	cmp	r0, #2
 80258d6:	d010      	beq.n	80258fa <cosf+0x62>
 80258d8:	b9b0      	cbnz	r0, 8025908 <cosf+0x70>
 80258da:	eddd 0a01 	vldr	s1, [sp, #4]
 80258de:	ed9d 0a00 	vldr	s0, [sp]
 80258e2:	f000 f943 	bl	8025b6c <__kernel_cosf>
 80258e6:	e7eb      	b.n	80258c0 <cosf+0x28>
 80258e8:	eddd 0a01 	vldr	s1, [sp, #4]
 80258ec:	ed9d 0a00 	vldr	s0, [sp]
 80258f0:	f000 f99a 	bl	8025c28 <__kernel_sinf>
 80258f4:	eeb1 0a40 	vneg.f32	s0, s0
 80258f8:	e7e2      	b.n	80258c0 <cosf+0x28>
 80258fa:	eddd 0a01 	vldr	s1, [sp, #4]
 80258fe:	ed9d 0a00 	vldr	s0, [sp]
 8025902:	f000 f933 	bl	8025b6c <__kernel_cosf>
 8025906:	e7f5      	b.n	80258f4 <cosf+0x5c>
 8025908:	eddd 0a01 	vldr	s1, [sp, #4]
 802590c:	ed9d 0a00 	vldr	s0, [sp]
 8025910:	2001      	movs	r0, #1
 8025912:	f000 f989 	bl	8025c28 <__kernel_sinf>
 8025916:	e7d3      	b.n	80258c0 <cosf+0x28>
 8025918:	3f490fd8 	.word	0x3f490fd8
 802591c:	00000000 	.word	0x00000000

08025920 <fabsf>:
 8025920:	ee10 3a10 	vmov	r3, s0
 8025924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025928:	ee00 3a10 	vmov	s0, r3
 802592c:	4770      	bx	lr
	...

08025930 <sinf>:
 8025930:	ee10 3a10 	vmov	r3, s0
 8025934:	b507      	push	{r0, r1, r2, lr}
 8025936:	4a1f      	ldr	r2, [pc, #124]	; (80259b4 <sinf+0x84>)
 8025938:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802593c:	4293      	cmp	r3, r2
 802593e:	dc07      	bgt.n	8025950 <sinf+0x20>
 8025940:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80259b8 <sinf+0x88>
 8025944:	2000      	movs	r0, #0
 8025946:	b003      	add	sp, #12
 8025948:	f85d eb04 	ldr.w	lr, [sp], #4
 802594c:	f000 b96c 	b.w	8025c28 <__kernel_sinf>
 8025950:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8025954:	db04      	blt.n	8025960 <sinf+0x30>
 8025956:	ee30 0a40 	vsub.f32	s0, s0, s0
 802595a:	b003      	add	sp, #12
 802595c:	f85d fb04 	ldr.w	pc, [sp], #4
 8025960:	4668      	mov	r0, sp
 8025962:	f001 f853 	bl	8026a0c <__ieee754_rem_pio2f>
 8025966:	f000 0003 	and.w	r0, r0, #3
 802596a:	2801      	cmp	r0, #1
 802596c:	d00a      	beq.n	8025984 <sinf+0x54>
 802596e:	2802      	cmp	r0, #2
 8025970:	d00f      	beq.n	8025992 <sinf+0x62>
 8025972:	b9c0      	cbnz	r0, 80259a6 <sinf+0x76>
 8025974:	eddd 0a01 	vldr	s1, [sp, #4]
 8025978:	ed9d 0a00 	vldr	s0, [sp]
 802597c:	2001      	movs	r0, #1
 802597e:	f000 f953 	bl	8025c28 <__kernel_sinf>
 8025982:	e7ea      	b.n	802595a <sinf+0x2a>
 8025984:	eddd 0a01 	vldr	s1, [sp, #4]
 8025988:	ed9d 0a00 	vldr	s0, [sp]
 802598c:	f000 f8ee 	bl	8025b6c <__kernel_cosf>
 8025990:	e7e3      	b.n	802595a <sinf+0x2a>
 8025992:	eddd 0a01 	vldr	s1, [sp, #4]
 8025996:	ed9d 0a00 	vldr	s0, [sp]
 802599a:	2001      	movs	r0, #1
 802599c:	f000 f944 	bl	8025c28 <__kernel_sinf>
 80259a0:	eeb1 0a40 	vneg.f32	s0, s0
 80259a4:	e7d9      	b.n	802595a <sinf+0x2a>
 80259a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80259aa:	ed9d 0a00 	vldr	s0, [sp]
 80259ae:	f000 f8dd 	bl	8025b6c <__kernel_cosf>
 80259b2:	e7f5      	b.n	80259a0 <sinf+0x70>
 80259b4:	3f490fd8 	.word	0x3f490fd8
 80259b8:	00000000 	.word	0x00000000

080259bc <tanf>:
 80259bc:	ee10 3a10 	vmov	r3, s0
 80259c0:	b507      	push	{r0, r1, r2, lr}
 80259c2:	4a12      	ldr	r2, [pc, #72]	; (8025a0c <tanf+0x50>)
 80259c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80259c8:	4293      	cmp	r3, r2
 80259ca:	dc07      	bgt.n	80259dc <tanf+0x20>
 80259cc:	eddf 0a10 	vldr	s1, [pc, #64]	; 8025a10 <tanf+0x54>
 80259d0:	2001      	movs	r0, #1
 80259d2:	b003      	add	sp, #12
 80259d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80259d8:	f000 b96e 	b.w	8025cb8 <__kernel_tanf>
 80259dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80259e0:	db04      	blt.n	80259ec <tanf+0x30>
 80259e2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80259e6:	b003      	add	sp, #12
 80259e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80259ec:	4668      	mov	r0, sp
 80259ee:	f001 f80d 	bl	8026a0c <__ieee754_rem_pio2f>
 80259f2:	0040      	lsls	r0, r0, #1
 80259f4:	f000 0002 	and.w	r0, r0, #2
 80259f8:	eddd 0a01 	vldr	s1, [sp, #4]
 80259fc:	ed9d 0a00 	vldr	s0, [sp]
 8025a00:	f1c0 0001 	rsb	r0, r0, #1
 8025a04:	f000 f958 	bl	8025cb8 <__kernel_tanf>
 8025a08:	e7ed      	b.n	80259e6 <tanf+0x2a>
 8025a0a:	bf00      	nop
 8025a0c:	3f490fda 	.word	0x3f490fda
 8025a10:	00000000 	.word	0x00000000

08025a14 <finitef>:
 8025a14:	b082      	sub	sp, #8
 8025a16:	ed8d 0a01 	vstr	s0, [sp, #4]
 8025a1a:	9801      	ldr	r0, [sp, #4]
 8025a1c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8025a20:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8025a24:	bfac      	ite	ge
 8025a26:	2000      	movge	r0, #0
 8025a28:	2001      	movlt	r0, #1
 8025a2a:	b002      	add	sp, #8
 8025a2c:	4770      	bx	lr
	...

08025a30 <nanf>:
 8025a30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025a38 <nanf+0x8>
 8025a34:	4770      	bx	lr
 8025a36:	bf00      	nop
 8025a38:	7fc00000 	.word	0x7fc00000

08025a3c <fmaxf>:
 8025a3c:	b508      	push	{r3, lr}
 8025a3e:	ed2d 8b02 	vpush	{d8}
 8025a42:	eeb0 8a40 	vmov.f32	s16, s0
 8025a46:	eef0 8a60 	vmov.f32	s17, s1
 8025a4a:	f000 f82d 	bl	8025aa8 <__fpclassifyf>
 8025a4e:	b148      	cbz	r0, 8025a64 <fmaxf+0x28>
 8025a50:	eeb0 0a68 	vmov.f32	s0, s17
 8025a54:	f000 f828 	bl	8025aa8 <__fpclassifyf>
 8025a58:	b130      	cbz	r0, 8025a68 <fmaxf+0x2c>
 8025a5a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8025a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a62:	dc01      	bgt.n	8025a68 <fmaxf+0x2c>
 8025a64:	eeb0 8a68 	vmov.f32	s16, s17
 8025a68:	eeb0 0a48 	vmov.f32	s0, s16
 8025a6c:	ecbd 8b02 	vpop	{d8}
 8025a70:	bd08      	pop	{r3, pc}

08025a72 <fminf>:
 8025a72:	b508      	push	{r3, lr}
 8025a74:	ed2d 8b02 	vpush	{d8}
 8025a78:	eeb0 8a40 	vmov.f32	s16, s0
 8025a7c:	eef0 8a60 	vmov.f32	s17, s1
 8025a80:	f000 f812 	bl	8025aa8 <__fpclassifyf>
 8025a84:	b148      	cbz	r0, 8025a9a <fminf+0x28>
 8025a86:	eeb0 0a68 	vmov.f32	s0, s17
 8025a8a:	f000 f80d 	bl	8025aa8 <__fpclassifyf>
 8025a8e:	b130      	cbz	r0, 8025a9e <fminf+0x2c>
 8025a90:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8025a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a98:	d401      	bmi.n	8025a9e <fminf+0x2c>
 8025a9a:	eeb0 8a68 	vmov.f32	s16, s17
 8025a9e:	eeb0 0a48 	vmov.f32	s0, s16
 8025aa2:	ecbd 8b02 	vpop	{d8}
 8025aa6:	bd08      	pop	{r3, pc}

08025aa8 <__fpclassifyf>:
 8025aa8:	ee10 3a10 	vmov	r3, s0
 8025aac:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8025ab0:	d00d      	beq.n	8025ace <__fpclassifyf+0x26>
 8025ab2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8025ab6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8025aba:	d30a      	bcc.n	8025ad2 <__fpclassifyf+0x2a>
 8025abc:	4b07      	ldr	r3, [pc, #28]	; (8025adc <__fpclassifyf+0x34>)
 8025abe:	1e42      	subs	r2, r0, #1
 8025ac0:	429a      	cmp	r2, r3
 8025ac2:	d908      	bls.n	8025ad6 <__fpclassifyf+0x2e>
 8025ac4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8025ac8:	4258      	negs	r0, r3
 8025aca:	4158      	adcs	r0, r3
 8025acc:	4770      	bx	lr
 8025ace:	2002      	movs	r0, #2
 8025ad0:	4770      	bx	lr
 8025ad2:	2004      	movs	r0, #4
 8025ad4:	4770      	bx	lr
 8025ad6:	2003      	movs	r0, #3
 8025ad8:	4770      	bx	lr
 8025ada:	bf00      	nop
 8025adc:	007ffffe 	.word	0x007ffffe

08025ae0 <__ieee754_sqrtf>:
 8025ae0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8025ae4:	4770      	bx	lr
	...

08025ae8 <floorf>:
 8025ae8:	ee10 3a10 	vmov	r3, s0
 8025aec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8025af0:	3a7f      	subs	r2, #127	; 0x7f
 8025af2:	2a16      	cmp	r2, #22
 8025af4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8025af8:	dc2a      	bgt.n	8025b50 <floorf+0x68>
 8025afa:	2a00      	cmp	r2, #0
 8025afc:	da11      	bge.n	8025b22 <floorf+0x3a>
 8025afe:	eddf 7a18 	vldr	s15, [pc, #96]	; 8025b60 <floorf+0x78>
 8025b02:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025b06:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b0e:	dd05      	ble.n	8025b1c <floorf+0x34>
 8025b10:	2b00      	cmp	r3, #0
 8025b12:	da23      	bge.n	8025b5c <floorf+0x74>
 8025b14:	4a13      	ldr	r2, [pc, #76]	; (8025b64 <floorf+0x7c>)
 8025b16:	2900      	cmp	r1, #0
 8025b18:	bf18      	it	ne
 8025b1a:	4613      	movne	r3, r2
 8025b1c:	ee00 3a10 	vmov	s0, r3
 8025b20:	4770      	bx	lr
 8025b22:	4911      	ldr	r1, [pc, #68]	; (8025b68 <floorf+0x80>)
 8025b24:	4111      	asrs	r1, r2
 8025b26:	420b      	tst	r3, r1
 8025b28:	d0fa      	beq.n	8025b20 <floorf+0x38>
 8025b2a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8025b60 <floorf+0x78>
 8025b2e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025b32:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b3a:	ddef      	ble.n	8025b1c <floorf+0x34>
 8025b3c:	2b00      	cmp	r3, #0
 8025b3e:	bfbe      	ittt	lt
 8025b40:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8025b44:	fa40 f202 	asrlt.w	r2, r0, r2
 8025b48:	189b      	addlt	r3, r3, r2
 8025b4a:	ea23 0301 	bic.w	r3, r3, r1
 8025b4e:	e7e5      	b.n	8025b1c <floorf+0x34>
 8025b50:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8025b54:	d3e4      	bcc.n	8025b20 <floorf+0x38>
 8025b56:	ee30 0a00 	vadd.f32	s0, s0, s0
 8025b5a:	4770      	bx	lr
 8025b5c:	2300      	movs	r3, #0
 8025b5e:	e7dd      	b.n	8025b1c <floorf+0x34>
 8025b60:	7149f2ca 	.word	0x7149f2ca
 8025b64:	bf800000 	.word	0xbf800000
 8025b68:	007fffff 	.word	0x007fffff

08025b6c <__kernel_cosf>:
 8025b6c:	ee10 3a10 	vmov	r3, s0
 8025b70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025b74:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8025b78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8025b7c:	da05      	bge.n	8025b8a <__kernel_cosf+0x1e>
 8025b7e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8025b82:	ee17 2a90 	vmov	r2, s15
 8025b86:	2a00      	cmp	r2, #0
 8025b88:	d03b      	beq.n	8025c02 <__kernel_cosf+0x96>
 8025b8a:	ee20 7a00 	vmul.f32	s14, s0, s0
 8025b8e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8025c08 <__kernel_cosf+0x9c>
 8025b92:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8025c0c <__kernel_cosf+0xa0>
 8025b96:	4a1e      	ldr	r2, [pc, #120]	; (8025c10 <__kernel_cosf+0xa4>)
 8025b98:	eea7 6a27 	vfma.f32	s12, s14, s15
 8025b9c:	4293      	cmp	r3, r2
 8025b9e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8025c14 <__kernel_cosf+0xa8>
 8025ba2:	eee6 7a07 	vfma.f32	s15, s12, s14
 8025ba6:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8025c18 <__kernel_cosf+0xac>
 8025baa:	eea7 6a87 	vfma.f32	s12, s15, s14
 8025bae:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8025c1c <__kernel_cosf+0xb0>
 8025bb2:	eee6 7a07 	vfma.f32	s15, s12, s14
 8025bb6:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8025c20 <__kernel_cosf+0xb4>
 8025bba:	eea7 6a87 	vfma.f32	s12, s15, s14
 8025bbe:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8025bc2:	ee26 6a07 	vmul.f32	s12, s12, s14
 8025bc6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8025bca:	eee7 0a06 	vfma.f32	s1, s14, s12
 8025bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025bd2:	dc04      	bgt.n	8025bde <__kernel_cosf+0x72>
 8025bd4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8025bd8:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8025bdc:	4770      	bx	lr
 8025bde:	4a11      	ldr	r2, [pc, #68]	; (8025c24 <__kernel_cosf+0xb8>)
 8025be0:	4293      	cmp	r3, r2
 8025be2:	bfda      	itte	le
 8025be4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8025be8:	ee07 3a10 	vmovle	s14, r3
 8025bec:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8025bf0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025bf4:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8025bf8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8025bfc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8025c00:	4770      	bx	lr
 8025c02:	eeb0 0a66 	vmov.f32	s0, s13
 8025c06:	4770      	bx	lr
 8025c08:	ad47d74e 	.word	0xad47d74e
 8025c0c:	310f74f6 	.word	0x310f74f6
 8025c10:	3e999999 	.word	0x3e999999
 8025c14:	b493f27c 	.word	0xb493f27c
 8025c18:	37d00d01 	.word	0x37d00d01
 8025c1c:	bab60b61 	.word	0xbab60b61
 8025c20:	3d2aaaab 	.word	0x3d2aaaab
 8025c24:	3f480000 	.word	0x3f480000

08025c28 <__kernel_sinf>:
 8025c28:	ee10 3a10 	vmov	r3, s0
 8025c2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025c30:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8025c34:	da04      	bge.n	8025c40 <__kernel_sinf+0x18>
 8025c36:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8025c3a:	ee17 3a90 	vmov	r3, s15
 8025c3e:	b35b      	cbz	r3, 8025c98 <__kernel_sinf+0x70>
 8025c40:	ee20 7a00 	vmul.f32	s14, s0, s0
 8025c44:	eddf 7a15 	vldr	s15, [pc, #84]	; 8025c9c <__kernel_sinf+0x74>
 8025c48:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8025ca0 <__kernel_sinf+0x78>
 8025c4c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8025c50:	eddf 7a14 	vldr	s15, [pc, #80]	; 8025ca4 <__kernel_sinf+0x7c>
 8025c54:	eee6 7a07 	vfma.f32	s15, s12, s14
 8025c58:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8025ca8 <__kernel_sinf+0x80>
 8025c5c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8025c60:	eddf 7a12 	vldr	s15, [pc, #72]	; 8025cac <__kernel_sinf+0x84>
 8025c64:	ee60 6a07 	vmul.f32	s13, s0, s14
 8025c68:	eee6 7a07 	vfma.f32	s15, s12, s14
 8025c6c:	b930      	cbnz	r0, 8025c7c <__kernel_sinf+0x54>
 8025c6e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8025cb0 <__kernel_sinf+0x88>
 8025c72:	eea7 6a27 	vfma.f32	s12, s14, s15
 8025c76:	eea6 0a26 	vfma.f32	s0, s12, s13
 8025c7a:	4770      	bx	lr
 8025c7c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8025c80:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8025c84:	eee0 7a86 	vfma.f32	s15, s1, s12
 8025c88:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8025c8c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8025cb4 <__kernel_sinf+0x8c>
 8025c90:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8025c94:	ee30 0a60 	vsub.f32	s0, s0, s1
 8025c98:	4770      	bx	lr
 8025c9a:	bf00      	nop
 8025c9c:	2f2ec9d3 	.word	0x2f2ec9d3
 8025ca0:	b2d72f34 	.word	0xb2d72f34
 8025ca4:	3638ef1b 	.word	0x3638ef1b
 8025ca8:	b9500d01 	.word	0xb9500d01
 8025cac:	3c088889 	.word	0x3c088889
 8025cb0:	be2aaaab 	.word	0xbe2aaaab
 8025cb4:	3e2aaaab 	.word	0x3e2aaaab

08025cb8 <__kernel_tanf>:
 8025cb8:	b508      	push	{r3, lr}
 8025cba:	ee10 3a10 	vmov	r3, s0
 8025cbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8025cc2:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8025cc6:	eef0 7a40 	vmov.f32	s15, s0
 8025cca:	da17      	bge.n	8025cfc <__kernel_tanf+0x44>
 8025ccc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8025cd0:	ee17 1a10 	vmov	r1, s14
 8025cd4:	bb41      	cbnz	r1, 8025d28 <__kernel_tanf+0x70>
 8025cd6:	1c43      	adds	r3, r0, #1
 8025cd8:	4313      	orrs	r3, r2
 8025cda:	d108      	bne.n	8025cee <__kernel_tanf+0x36>
 8025cdc:	f7ff fe20 	bl	8025920 <fabsf>
 8025ce0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025ce4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8025cec:	bd08      	pop	{r3, pc}
 8025cee:	2801      	cmp	r0, #1
 8025cf0:	d0fa      	beq.n	8025ce8 <__kernel_tanf+0x30>
 8025cf2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8025cf6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025cfa:	e7f5      	b.n	8025ce8 <__kernel_tanf+0x30>
 8025cfc:	494c      	ldr	r1, [pc, #304]	; (8025e30 <__kernel_tanf+0x178>)
 8025cfe:	428a      	cmp	r2, r1
 8025d00:	db12      	blt.n	8025d28 <__kernel_tanf+0x70>
 8025d02:	2b00      	cmp	r3, #0
 8025d04:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8025e34 <__kernel_tanf+0x17c>
 8025d08:	bfb8      	it	lt
 8025d0a:	eef1 7a40 	vneglt.f32	s15, s0
 8025d0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8025d12:	eddf 7a49 	vldr	s15, [pc, #292]	; 8025e38 <__kernel_tanf+0x180>
 8025d16:	bfb8      	it	lt
 8025d18:	eef1 0a60 	vneglt.f32	s1, s1
 8025d1c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8025d20:	eddf 0a46 	vldr	s1, [pc, #280]	; 8025e3c <__kernel_tanf+0x184>
 8025d24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025d28:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8025d2c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8025e40 <__kernel_tanf+0x188>
 8025d30:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8025e44 <__kernel_tanf+0x18c>
 8025d34:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8025e48 <__kernel_tanf+0x190>
 8025d38:	493d      	ldr	r1, [pc, #244]	; (8025e30 <__kernel_tanf+0x178>)
 8025d3a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8025d3e:	428a      	cmp	r2, r1
 8025d40:	eea7 6a25 	vfma.f32	s12, s14, s11
 8025d44:	eddf 5a41 	vldr	s11, [pc, #260]	; 8025e4c <__kernel_tanf+0x194>
 8025d48:	eee6 5a07 	vfma.f32	s11, s12, s14
 8025d4c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8025e50 <__kernel_tanf+0x198>
 8025d50:	eea5 6a87 	vfma.f32	s12, s11, s14
 8025d54:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8025e54 <__kernel_tanf+0x19c>
 8025d58:	eee6 5a07 	vfma.f32	s11, s12, s14
 8025d5c:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8025e58 <__kernel_tanf+0x1a0>
 8025d60:	eea5 6a87 	vfma.f32	s12, s11, s14
 8025d64:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8025e5c <__kernel_tanf+0x1a4>
 8025d68:	eee7 5a05 	vfma.f32	s11, s14, s10
 8025d6c:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8025e60 <__kernel_tanf+0x1a8>
 8025d70:	eea5 5a87 	vfma.f32	s10, s11, s14
 8025d74:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8025e64 <__kernel_tanf+0x1ac>
 8025d78:	eee5 5a07 	vfma.f32	s11, s10, s14
 8025d7c:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8025e68 <__kernel_tanf+0x1b0>
 8025d80:	eea5 5a87 	vfma.f32	s10, s11, s14
 8025d84:	eddf 5a39 	vldr	s11, [pc, #228]	; 8025e6c <__kernel_tanf+0x1b4>
 8025d88:	eee5 5a07 	vfma.f32	s11, s10, s14
 8025d8c:	eeb0 7a46 	vmov.f32	s14, s12
 8025d90:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8025d94:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8025d98:	eeb0 6a60 	vmov.f32	s12, s1
 8025d9c:	eea7 6a05 	vfma.f32	s12, s14, s10
 8025da0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8025e70 <__kernel_tanf+0x1b8>
 8025da4:	eee6 0a26 	vfma.f32	s1, s12, s13
 8025da8:	eee5 0a07 	vfma.f32	s1, s10, s14
 8025dac:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8025db0:	db1d      	blt.n	8025dee <__kernel_tanf+0x136>
 8025db2:	ee07 0a10 	vmov	s14, r0
 8025db6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8025dba:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8025dbe:	ee76 6a87 	vadd.f32	s13, s13, s14
 8025dc2:	179b      	asrs	r3, r3, #30
 8025dc4:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8025dc8:	f003 0302 	and.w	r3, r3, #2
 8025dcc:	f1c3 0301 	rsb	r3, r3, #1
 8025dd0:	ee76 6a60 	vsub.f32	s13, s12, s1
 8025dd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8025dd8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8025ddc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8025de0:	ee07 3a90 	vmov	s15, r3
 8025de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025de8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8025dec:	e77c      	b.n	8025ce8 <__kernel_tanf+0x30>
 8025dee:	2801      	cmp	r0, #1
 8025df0:	d01b      	beq.n	8025e2a <__kernel_tanf+0x172>
 8025df2:	4b20      	ldr	r3, [pc, #128]	; (8025e74 <__kernel_tanf+0x1bc>)
 8025df4:	ee16 2a90 	vmov	r2, s13
 8025df8:	401a      	ands	r2, r3
 8025dfa:	ee05 2a90 	vmov	s11, r2
 8025dfe:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8025e02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025e06:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8025e0a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8025e0e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8025e12:	ee16 2a10 	vmov	r2, s12
 8025e16:	4013      	ands	r3, r2
 8025e18:	ee07 3a90 	vmov	s15, r3
 8025e1c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8025e20:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8025e24:	eee7 7a06 	vfma.f32	s15, s14, s12
 8025e28:	e75e      	b.n	8025ce8 <__kernel_tanf+0x30>
 8025e2a:	eef0 7a66 	vmov.f32	s15, s13
 8025e2e:	e75b      	b.n	8025ce8 <__kernel_tanf+0x30>
 8025e30:	3f2ca140 	.word	0x3f2ca140
 8025e34:	3f490fda 	.word	0x3f490fda
 8025e38:	33222168 	.word	0x33222168
 8025e3c:	00000000 	.word	0x00000000
 8025e40:	b79bae5f 	.word	0xb79bae5f
 8025e44:	38a3f445 	.word	0x38a3f445
 8025e48:	37d95384 	.word	0x37d95384
 8025e4c:	3a1a26c8 	.word	0x3a1a26c8
 8025e50:	3b6b6916 	.word	0x3b6b6916
 8025e54:	3cb327a4 	.word	0x3cb327a4
 8025e58:	3e088889 	.word	0x3e088889
 8025e5c:	3895c07a 	.word	0x3895c07a
 8025e60:	398137b9 	.word	0x398137b9
 8025e64:	3abede48 	.word	0x3abede48
 8025e68:	3c11371f 	.word	0x3c11371f
 8025e6c:	3d5d0dd1 	.word	0x3d5d0dd1
 8025e70:	3eaaaaab 	.word	0x3eaaaaab
 8025e74:	fffff000 	.word	0xfffff000

08025e78 <__ieee754_acosf>:
 8025e78:	b508      	push	{r3, lr}
 8025e7a:	ee10 3a10 	vmov	r3, s0
 8025e7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8025e82:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8025e86:	ed2d 8b0c 	vpush	{d8-d13}
 8025e8a:	d10a      	bne.n	8025ea2 <__ieee754_acosf+0x2a>
 8025e8c:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8026024 <__ieee754_acosf+0x1ac>
 8025e90:	eddf 7a65 	vldr	s15, [pc, #404]	; 8026028 <__ieee754_acosf+0x1b0>
 8025e94:	2b00      	cmp	r3, #0
 8025e96:	bfd8      	it	le
 8025e98:	eeb0 0a67 	vmovle.f32	s0, s15
 8025e9c:	ecbd 8b0c 	vpop	{d8-d13}
 8025ea0:	bd08      	pop	{r3, pc}
 8025ea2:	dd04      	ble.n	8025eae <__ieee754_acosf+0x36>
 8025ea4:	ee30 8a40 	vsub.f32	s16, s0, s0
 8025ea8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8025eac:	e7f6      	b.n	8025e9c <__ieee754_acosf+0x24>
 8025eae:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8025eb2:	da3c      	bge.n	8025f2e <__ieee754_acosf+0xb6>
 8025eb4:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8025eb8:	f340 80b1 	ble.w	802601e <__ieee754_acosf+0x1a6>
 8025ebc:	ee60 7a00 	vmul.f32	s15, s0, s0
 8025ec0:	eddf 6a5a 	vldr	s13, [pc, #360]	; 802602c <__ieee754_acosf+0x1b4>
 8025ec4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8026030 <__ieee754_acosf+0x1b8>
 8025ec8:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8026034 <__ieee754_acosf+0x1bc>
 8025ecc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8025ed0:	eddf 6a59 	vldr	s13, [pc, #356]	; 8026038 <__ieee754_acosf+0x1c0>
 8025ed4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8025ed8:	ed9f 7a58 	vldr	s14, [pc, #352]	; 802603c <__ieee754_acosf+0x1c4>
 8025edc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8025ee0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8026040 <__ieee754_acosf+0x1c8>
 8025ee4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8025ee8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8026044 <__ieee754_acosf+0x1cc>
 8025eec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8025ef0:	eddf 6a55 	vldr	s13, [pc, #340]	; 8026048 <__ieee754_acosf+0x1d0>
 8025ef4:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8025ef8:	eddf 6a54 	vldr	s13, [pc, #336]	; 802604c <__ieee754_acosf+0x1d4>
 8025efc:	eee6 6a27 	vfma.f32	s13, s12, s15
 8025f00:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8026050 <__ieee754_acosf+0x1d8>
 8025f04:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8025f08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8025f0c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8025f10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025f14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8025f18:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8026054 <__ieee754_acosf+0x1dc>
 8025f1c:	eea0 7a67 	vfms.f32	s14, s0, s15
 8025f20:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8026058 <__ieee754_acosf+0x1e0>
 8025f24:	ee30 7a47 	vsub.f32	s14, s0, s14
 8025f28:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8025f2c:	e7b6      	b.n	8025e9c <__ieee754_acosf+0x24>
 8025f2e:	2b00      	cmp	r3, #0
 8025f30:	eddf da3e 	vldr	s27, [pc, #248]	; 802602c <__ieee754_acosf+0x1b4>
 8025f34:	eddf ca3e 	vldr	s25, [pc, #248]	; 8026030 <__ieee754_acosf+0x1b8>
 8025f38:	ed9f ca3f 	vldr	s24, [pc, #252]	; 8026038 <__ieee754_acosf+0x1c0>
 8025f3c:	eddf ba3f 	vldr	s23, [pc, #252]	; 802603c <__ieee754_acosf+0x1c4>
 8025f40:	ed9f ba3f 	vldr	s22, [pc, #252]	; 8026040 <__ieee754_acosf+0x1c8>
 8025f44:	eddf 8a3f 	vldr	s17, [pc, #252]	; 8026044 <__ieee754_acosf+0x1cc>
 8025f48:	ed9f da3f 	vldr	s26, [pc, #252]	; 8026048 <__ieee754_acosf+0x1d0>
 8025f4c:	eddf aa39 	vldr	s21, [pc, #228]	; 8026034 <__ieee754_acosf+0x1bc>
 8025f50:	ed9f aa3e 	vldr	s20, [pc, #248]	; 802604c <__ieee754_acosf+0x1d4>
 8025f54:	eddf 9a3e 	vldr	s19, [pc, #248]	; 8026050 <__ieee754_acosf+0x1d8>
 8025f58:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8025f5c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8025f60:	da28      	bge.n	8025fb4 <__ieee754_acosf+0x13c>
 8025f62:	ee30 0a09 	vadd.f32	s0, s0, s18
 8025f66:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025f6a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8025f6e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8025f72:	eeac ca80 	vfma.f32	s24, s25, s0
 8025f76:	eeaa aa80 	vfma.f32	s20, s21, s0
 8025f7a:	eeec ba00 	vfma.f32	s23, s24, s0
 8025f7e:	eeea 9a00 	vfma.f32	s19, s20, s0
 8025f82:	eeab ba80 	vfma.f32	s22, s23, s0
 8025f86:	eea9 9a80 	vfma.f32	s18, s19, s0
 8025f8a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8025f8e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8025f92:	f7ff fda5 	bl	8025ae0 <__ieee754_sqrtf>
 8025f96:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8025f9a:	eddf 7a30 	vldr	s15, [pc, #192]	; 802605c <__ieee754_acosf+0x1e4>
 8025f9e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8025fa2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8025fa6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8025faa:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8026060 <__ieee754_acosf+0x1e8>
 8025fae:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8025fb2:	e773      	b.n	8025e9c <__ieee754_acosf+0x24>
 8025fb4:	ee39 8a40 	vsub.f32	s16, s18, s0
 8025fb8:	ee28 8a27 	vmul.f32	s16, s16, s15
 8025fbc:	eeb0 0a48 	vmov.f32	s0, s16
 8025fc0:	f7ff fd8e 	bl	8025ae0 <__ieee754_sqrtf>
 8025fc4:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8025fc8:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8025fcc:	eeac ca88 	vfma.f32	s24, s25, s16
 8025fd0:	eeaa aa88 	vfma.f32	s20, s21, s16
 8025fd4:	eeec ba08 	vfma.f32	s23, s24, s16
 8025fd8:	ee10 3a10 	vmov	r3, s0
 8025fdc:	eeab ba88 	vfma.f32	s22, s23, s16
 8025fe0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8025fe4:	f023 030f 	bic.w	r3, r3, #15
 8025fe8:	eeea 9a08 	vfma.f32	s19, s20, s16
 8025fec:	ee07 3a90 	vmov	s15, r3
 8025ff0:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8025ff4:	eeb0 6a48 	vmov.f32	s12, s16
 8025ff8:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8025ffc:	eea9 9a88 	vfma.f32	s18, s19, s16
 8026000:	ee70 6a27 	vadd.f32	s13, s0, s15
 8026004:	ee68 8a88 	vmul.f32	s17, s17, s16
 8026008:	ee86 7a26 	vdiv.f32	s14, s12, s13
 802600c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8026010:	eea0 7a26 	vfma.f32	s14, s0, s13
 8026014:	ee37 0a87 	vadd.f32	s0, s15, s14
 8026018:	ee30 0a00 	vadd.f32	s0, s0, s0
 802601c:	e73e      	b.n	8025e9c <__ieee754_acosf+0x24>
 802601e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8026064 <__ieee754_acosf+0x1ec>
 8026022:	e73b      	b.n	8025e9c <__ieee754_acosf+0x24>
 8026024:	00000000 	.word	0x00000000
 8026028:	40490fdb 	.word	0x40490fdb
 802602c:	3811ef08 	.word	0x3811ef08
 8026030:	3a4f7f04 	.word	0x3a4f7f04
 8026034:	bf303361 	.word	0xbf303361
 8026038:	bd241146 	.word	0xbd241146
 802603c:	3e4e0aa8 	.word	0x3e4e0aa8
 8026040:	bea6b090 	.word	0xbea6b090
 8026044:	3e2aaaab 	.word	0x3e2aaaab
 8026048:	3d9dc62e 	.word	0x3d9dc62e
 802604c:	4001572d 	.word	0x4001572d
 8026050:	c019d139 	.word	0xc019d139
 8026054:	33a22168 	.word	0x33a22168
 8026058:	3fc90fda 	.word	0x3fc90fda
 802605c:	b3a22168 	.word	0xb3a22168
 8026060:	40490fda 	.word	0x40490fda
 8026064:	3fc90fdb 	.word	0x3fc90fdb

08026068 <__ieee754_asinf>:
 8026068:	b538      	push	{r3, r4, r5, lr}
 802606a:	ee10 5a10 	vmov	r5, s0
 802606e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8026072:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8026076:	ed2d 8b04 	vpush	{d8-d9}
 802607a:	d10c      	bne.n	8026096 <__ieee754_asinf+0x2e>
 802607c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80261f4 <__ieee754_asinf+0x18c>
 8026080:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80261f8 <__ieee754_asinf+0x190>
 8026084:	ee60 7a27 	vmul.f32	s15, s0, s15
 8026088:	eee0 7a07 	vfma.f32	s15, s0, s14
 802608c:	eeb0 0a67 	vmov.f32	s0, s15
 8026090:	ecbd 8b04 	vpop	{d8-d9}
 8026094:	bd38      	pop	{r3, r4, r5, pc}
 8026096:	dd04      	ble.n	80260a2 <__ieee754_asinf+0x3a>
 8026098:	ee70 7a40 	vsub.f32	s15, s0, s0
 802609c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80260a0:	e7f6      	b.n	8026090 <__ieee754_asinf+0x28>
 80260a2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80260a6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80260aa:	da0b      	bge.n	80260c4 <__ieee754_asinf+0x5c>
 80260ac:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80260b0:	da52      	bge.n	8026158 <__ieee754_asinf+0xf0>
 80260b2:	eddf 7a52 	vldr	s15, [pc, #328]	; 80261fc <__ieee754_asinf+0x194>
 80260b6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80260ba:	eef4 7ae8 	vcmpe.f32	s15, s17
 80260be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80260c2:	dce5      	bgt.n	8026090 <__ieee754_asinf+0x28>
 80260c4:	f7ff fc2c 	bl	8025920 <fabsf>
 80260c8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80260cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80260d0:	ee20 8a27 	vmul.f32	s16, s0, s15
 80260d4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8026200 <__ieee754_asinf+0x198>
 80260d8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8026204 <__ieee754_asinf+0x19c>
 80260dc:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8026208 <__ieee754_asinf+0x1a0>
 80260e0:	eea8 7a27 	vfma.f32	s14, s16, s15
 80260e4:	eddf 7a49 	vldr	s15, [pc, #292]	; 802620c <__ieee754_asinf+0x1a4>
 80260e8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80260ec:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8026210 <__ieee754_asinf+0x1a8>
 80260f0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80260f4:	eddf 7a47 	vldr	s15, [pc, #284]	; 8026214 <__ieee754_asinf+0x1ac>
 80260f8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80260fc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8026218 <__ieee754_asinf+0x1b0>
 8026100:	eea7 9a88 	vfma.f32	s18, s15, s16
 8026104:	eddf 7a45 	vldr	s15, [pc, #276]	; 802621c <__ieee754_asinf+0x1b4>
 8026108:	eee8 7a07 	vfma.f32	s15, s16, s14
 802610c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8026220 <__ieee754_asinf+0x1b8>
 8026110:	eea7 7a88 	vfma.f32	s14, s15, s16
 8026114:	eddf 7a43 	vldr	s15, [pc, #268]	; 8026224 <__ieee754_asinf+0x1bc>
 8026118:	eee7 7a08 	vfma.f32	s15, s14, s16
 802611c:	eeb0 0a48 	vmov.f32	s0, s16
 8026120:	eee7 8a88 	vfma.f32	s17, s15, s16
 8026124:	f7ff fcdc 	bl	8025ae0 <__ieee754_sqrtf>
 8026128:	4b3f      	ldr	r3, [pc, #252]	; (8026228 <__ieee754_asinf+0x1c0>)
 802612a:	ee29 9a08 	vmul.f32	s18, s18, s16
 802612e:	429c      	cmp	r4, r3
 8026130:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8026134:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8026138:	dd3d      	ble.n	80261b6 <__ieee754_asinf+0x14e>
 802613a:	eea0 0a06 	vfma.f32	s0, s0, s12
 802613e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 802622c <__ieee754_asinf+0x1c4>
 8026142:	eee0 7a26 	vfma.f32	s15, s0, s13
 8026146:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80261f8 <__ieee754_asinf+0x190>
 802614a:	ee30 0a67 	vsub.f32	s0, s0, s15
 802614e:	2d00      	cmp	r5, #0
 8026150:	bfd8      	it	le
 8026152:	eeb1 0a40 	vnegle.f32	s0, s0
 8026156:	e79b      	b.n	8026090 <__ieee754_asinf+0x28>
 8026158:	ee60 7a00 	vmul.f32	s15, s0, s0
 802615c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8026204 <__ieee754_asinf+0x19c>
 8026160:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8026200 <__ieee754_asinf+0x198>
 8026164:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8026218 <__ieee754_asinf+0x1b0>
 8026168:	eea7 7aa6 	vfma.f32	s14, s15, s13
 802616c:	eddf 6a27 	vldr	s13, [pc, #156]	; 802620c <__ieee754_asinf+0x1a4>
 8026170:	eee7 6a27 	vfma.f32	s13, s14, s15
 8026174:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8026210 <__ieee754_asinf+0x1a8>
 8026178:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802617c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8026214 <__ieee754_asinf+0x1ac>
 8026180:	eee7 6a27 	vfma.f32	s13, s14, s15
 8026184:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8026208 <__ieee754_asinf+0x1a0>
 8026188:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802618c:	eddf 6a23 	vldr	s13, [pc, #140]	; 802621c <__ieee754_asinf+0x1b4>
 8026190:	eee7 6a86 	vfma.f32	s13, s15, s12
 8026194:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8026220 <__ieee754_asinf+0x1b8>
 8026198:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802619c:	eddf 6a21 	vldr	s13, [pc, #132]	; 8026224 <__ieee754_asinf+0x1bc>
 80261a0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80261a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80261a8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80261ac:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80261b0:	eea0 0a27 	vfma.f32	s0, s0, s15
 80261b4:	e76c      	b.n	8026090 <__ieee754_asinf+0x28>
 80261b6:	ee10 3a10 	vmov	r3, s0
 80261ba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80261be:	f023 030f 	bic.w	r3, r3, #15
 80261c2:	ee07 3a10 	vmov	s14, r3
 80261c6:	eea7 8a47 	vfms.f32	s16, s14, s14
 80261ca:	ee70 7a07 	vadd.f32	s15, s0, s14
 80261ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 80261d2:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80261d6:	eddf 7a07 	vldr	s15, [pc, #28]	; 80261f4 <__ieee754_asinf+0x18c>
 80261da:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80261de:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80261e2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8026230 <__ieee754_asinf+0x1c8>
 80261e6:	eeb0 6a40 	vmov.f32	s12, s0
 80261ea:	eea7 6a66 	vfms.f32	s12, s14, s13
 80261ee:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80261f2:	e7aa      	b.n	802614a <__ieee754_asinf+0xe2>
 80261f4:	b33bbd2e 	.word	0xb33bbd2e
 80261f8:	3fc90fdb 	.word	0x3fc90fdb
 80261fc:	7149f2ca 	.word	0x7149f2ca
 8026200:	3a4f7f04 	.word	0x3a4f7f04
 8026204:	3811ef08 	.word	0x3811ef08
 8026208:	3e2aaaab 	.word	0x3e2aaaab
 802620c:	bd241146 	.word	0xbd241146
 8026210:	3e4e0aa8 	.word	0x3e4e0aa8
 8026214:	bea6b090 	.word	0xbea6b090
 8026218:	3d9dc62e 	.word	0x3d9dc62e
 802621c:	bf303361 	.word	0xbf303361
 8026220:	4001572d 	.word	0x4001572d
 8026224:	c019d139 	.word	0xc019d139
 8026228:	3f799999 	.word	0x3f799999
 802622c:	333bbd2e 	.word	0x333bbd2e
 8026230:	3f490fdb 	.word	0x3f490fdb

08026234 <__ieee754_atan2f>:
 8026234:	ee10 2a90 	vmov	r2, s1
 8026238:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 802623c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8026240:	b510      	push	{r4, lr}
 8026242:	eef0 7a40 	vmov.f32	s15, s0
 8026246:	dc06      	bgt.n	8026256 <__ieee754_atan2f+0x22>
 8026248:	ee10 0a10 	vmov	r0, s0
 802624c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8026250:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8026254:	dd04      	ble.n	8026260 <__ieee754_atan2f+0x2c>
 8026256:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802625a:	eeb0 0a67 	vmov.f32	s0, s15
 802625e:	bd10      	pop	{r4, pc}
 8026260:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8026264:	d103      	bne.n	802626e <__ieee754_atan2f+0x3a>
 8026266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802626a:	f000 bcfb 	b.w	8026c64 <atanf>
 802626e:	1794      	asrs	r4, r2, #30
 8026270:	f004 0402 	and.w	r4, r4, #2
 8026274:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8026278:	b943      	cbnz	r3, 802628c <__ieee754_atan2f+0x58>
 802627a:	2c02      	cmp	r4, #2
 802627c:	d05e      	beq.n	802633c <__ieee754_atan2f+0x108>
 802627e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8026350 <__ieee754_atan2f+0x11c>
 8026282:	2c03      	cmp	r4, #3
 8026284:	bf08      	it	eq
 8026286:	eef0 7a47 	vmoveq.f32	s15, s14
 802628a:	e7e6      	b.n	802625a <__ieee754_atan2f+0x26>
 802628c:	b941      	cbnz	r1, 80262a0 <__ieee754_atan2f+0x6c>
 802628e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8026354 <__ieee754_atan2f+0x120>
 8026292:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8026358 <__ieee754_atan2f+0x124>
 8026296:	2800      	cmp	r0, #0
 8026298:	bfb8      	it	lt
 802629a:	eef0 7a47 	vmovlt.f32	s15, s14
 802629e:	e7dc      	b.n	802625a <__ieee754_atan2f+0x26>
 80262a0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80262a4:	d110      	bne.n	80262c8 <__ieee754_atan2f+0x94>
 80262a6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80262aa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80262ae:	d107      	bne.n	80262c0 <__ieee754_atan2f+0x8c>
 80262b0:	2c02      	cmp	r4, #2
 80262b2:	d846      	bhi.n	8026342 <__ieee754_atan2f+0x10e>
 80262b4:	4b29      	ldr	r3, [pc, #164]	; (802635c <__ieee754_atan2f+0x128>)
 80262b6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80262ba:	edd3 7a00 	vldr	s15, [r3]
 80262be:	e7cc      	b.n	802625a <__ieee754_atan2f+0x26>
 80262c0:	2c02      	cmp	r4, #2
 80262c2:	d841      	bhi.n	8026348 <__ieee754_atan2f+0x114>
 80262c4:	4b26      	ldr	r3, [pc, #152]	; (8026360 <__ieee754_atan2f+0x12c>)
 80262c6:	e7f6      	b.n	80262b6 <__ieee754_atan2f+0x82>
 80262c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80262cc:	d0df      	beq.n	802628e <__ieee754_atan2f+0x5a>
 80262ce:	1a5b      	subs	r3, r3, r1
 80262d0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80262d4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80262d8:	da1a      	bge.n	8026310 <__ieee754_atan2f+0xdc>
 80262da:	2a00      	cmp	r2, #0
 80262dc:	da01      	bge.n	80262e2 <__ieee754_atan2f+0xae>
 80262de:	313c      	adds	r1, #60	; 0x3c
 80262e0:	db19      	blt.n	8026316 <__ieee754_atan2f+0xe2>
 80262e2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80262e6:	f7ff fb1b 	bl	8025920 <fabsf>
 80262ea:	f000 fcbb 	bl	8026c64 <atanf>
 80262ee:	eef0 7a40 	vmov.f32	s15, s0
 80262f2:	2c01      	cmp	r4, #1
 80262f4:	d012      	beq.n	802631c <__ieee754_atan2f+0xe8>
 80262f6:	2c02      	cmp	r4, #2
 80262f8:	d017      	beq.n	802632a <__ieee754_atan2f+0xf6>
 80262fa:	2c00      	cmp	r4, #0
 80262fc:	d0ad      	beq.n	802625a <__ieee754_atan2f+0x26>
 80262fe:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8026364 <__ieee754_atan2f+0x130>
 8026302:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026306:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8026368 <__ieee754_atan2f+0x134>
 802630a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802630e:	e7a4      	b.n	802625a <__ieee754_atan2f+0x26>
 8026310:	eddf 7a10 	vldr	s15, [pc, #64]	; 8026354 <__ieee754_atan2f+0x120>
 8026314:	e7ed      	b.n	80262f2 <__ieee754_atan2f+0xbe>
 8026316:	eddf 7a15 	vldr	s15, [pc, #84]	; 802636c <__ieee754_atan2f+0x138>
 802631a:	e7ea      	b.n	80262f2 <__ieee754_atan2f+0xbe>
 802631c:	ee17 3a90 	vmov	r3, s15
 8026320:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8026324:	ee07 3a90 	vmov	s15, r3
 8026328:	e797      	b.n	802625a <__ieee754_atan2f+0x26>
 802632a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8026364 <__ieee754_atan2f+0x130>
 802632e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026332:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8026368 <__ieee754_atan2f+0x134>
 8026336:	ee77 7a67 	vsub.f32	s15, s14, s15
 802633a:	e78e      	b.n	802625a <__ieee754_atan2f+0x26>
 802633c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8026368 <__ieee754_atan2f+0x134>
 8026340:	e78b      	b.n	802625a <__ieee754_atan2f+0x26>
 8026342:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8026370 <__ieee754_atan2f+0x13c>
 8026346:	e788      	b.n	802625a <__ieee754_atan2f+0x26>
 8026348:	eddf 7a08 	vldr	s15, [pc, #32]	; 802636c <__ieee754_atan2f+0x138>
 802634c:	e785      	b.n	802625a <__ieee754_atan2f+0x26>
 802634e:	bf00      	nop
 8026350:	c0490fdb 	.word	0xc0490fdb
 8026354:	3fc90fdb 	.word	0x3fc90fdb
 8026358:	bfc90fdb 	.word	0xbfc90fdb
 802635c:	0802e4cc 	.word	0x0802e4cc
 8026360:	0802e4d8 	.word	0x0802e4d8
 8026364:	33bbbd2e 	.word	0x33bbbd2e
 8026368:	40490fdb 	.word	0x40490fdb
 802636c:	00000000 	.word	0x00000000
 8026370:	3f490fdb 	.word	0x3f490fdb

08026374 <__ieee754_fmodf>:
 8026374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026376:	ee10 4a90 	vmov	r4, s1
 802637a:	f034 4000 	bics.w	r0, r4, #2147483648	; 0x80000000
 802637e:	d009      	beq.n	8026394 <__ieee754_fmodf+0x20>
 8026380:	ee10 3a10 	vmov	r3, s0
 8026384:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8026388:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 802638c:	da02      	bge.n	8026394 <__ieee754_fmodf+0x20>
 802638e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8026392:	dd04      	ble.n	802639e <__ieee754_fmodf+0x2a>
 8026394:	ee60 0a20 	vmul.f32	s1, s0, s1
 8026398:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 802639c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802639e:	4286      	cmp	r6, r0
 80263a0:	dbfc      	blt.n	802639c <__ieee754_fmodf+0x28>
 80263a2:	f003 4500 	and.w	r5, r3, #2147483648	; 0x80000000
 80263a6:	d105      	bne.n	80263b4 <__ieee754_fmodf+0x40>
 80263a8:	4b32      	ldr	r3, [pc, #200]	; (8026474 <__ieee754_fmodf+0x100>)
 80263aa:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 80263ae:	ed93 0a00 	vldr	s0, [r3]
 80263b2:	e7f3      	b.n	802639c <__ieee754_fmodf+0x28>
 80263b4:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80263b8:	d140      	bne.n	802643c <__ieee754_fmodf+0xc8>
 80263ba:	0232      	lsls	r2, r6, #8
 80263bc:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80263c0:	2a00      	cmp	r2, #0
 80263c2:	dc38      	bgt.n	8026436 <__ieee754_fmodf+0xc2>
 80263c4:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
 80263c8:	d13e      	bne.n	8026448 <__ieee754_fmodf+0xd4>
 80263ca:	0207      	lsls	r7, r0, #8
 80263cc:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 80263d0:	2f00      	cmp	r7, #0
 80263d2:	da36      	bge.n	8026442 <__ieee754_fmodf+0xce>
 80263d4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80263d8:	bfb9      	ittee	lt
 80263da:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80263de:	1a5b      	sublt	r3, r3, r1
 80263e0:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 80263e4:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 80263e8:	bfb8      	it	lt
 80263ea:	fa06 f303 	lsllt.w	r3, r6, r3
 80263ee:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80263f2:	bfb5      	itete	lt
 80263f4:	f06f 047d 	mvnlt.w	r4, #125	; 0x7d
 80263f8:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 80263fc:	1aa4      	sublt	r4, r4, r2
 80263fe:	f444 0000 	orrge.w	r0, r4, #8388608	; 0x800000
 8026402:	bfb8      	it	lt
 8026404:	40a0      	lsllt	r0, r4
 8026406:	1a89      	subs	r1, r1, r2
 8026408:	1a1c      	subs	r4, r3, r0
 802640a:	bb01      	cbnz	r1, 802644e <__ieee754_fmodf+0xda>
 802640c:	ea13 0324 	ands.w	r3, r3, r4, asr #32
 8026410:	bf38      	it	cc
 8026412:	4623      	movcc	r3, r4
 8026414:	2b00      	cmp	r3, #0
 8026416:	d0c7      	beq.n	80263a8 <__ieee754_fmodf+0x34>
 8026418:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802641c:	db1f      	blt.n	802645e <__ieee754_fmodf+0xea>
 802641e:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8026422:	db1f      	blt.n	8026464 <__ieee754_fmodf+0xf0>
 8026424:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8026428:	327f      	adds	r2, #127	; 0x7f
 802642a:	432b      	orrs	r3, r5
 802642c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8026430:	ee00 3a10 	vmov	s0, r3
 8026434:	e7b2      	b.n	802639c <__ieee754_fmodf+0x28>
 8026436:	3901      	subs	r1, #1
 8026438:	0052      	lsls	r2, r2, #1
 802643a:	e7c1      	b.n	80263c0 <__ieee754_fmodf+0x4c>
 802643c:	15f1      	asrs	r1, r6, #23
 802643e:	397f      	subs	r1, #127	; 0x7f
 8026440:	e7c0      	b.n	80263c4 <__ieee754_fmodf+0x50>
 8026442:	3a01      	subs	r2, #1
 8026444:	007f      	lsls	r7, r7, #1
 8026446:	e7c3      	b.n	80263d0 <__ieee754_fmodf+0x5c>
 8026448:	15c2      	asrs	r2, r0, #23
 802644a:	3a7f      	subs	r2, #127	; 0x7f
 802644c:	e7c2      	b.n	80263d4 <__ieee754_fmodf+0x60>
 802644e:	2c00      	cmp	r4, #0
 8026450:	da02      	bge.n	8026458 <__ieee754_fmodf+0xe4>
 8026452:	005b      	lsls	r3, r3, #1
 8026454:	3901      	subs	r1, #1
 8026456:	e7d7      	b.n	8026408 <__ieee754_fmodf+0x94>
 8026458:	d0a6      	beq.n	80263a8 <__ieee754_fmodf+0x34>
 802645a:	0063      	lsls	r3, r4, #1
 802645c:	e7fa      	b.n	8026454 <__ieee754_fmodf+0xe0>
 802645e:	005b      	lsls	r3, r3, #1
 8026460:	3a01      	subs	r2, #1
 8026462:	e7d9      	b.n	8026418 <__ieee754_fmodf+0xa4>
 8026464:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8026468:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 802646c:	3282      	adds	r2, #130	; 0x82
 802646e:	4113      	asrs	r3, r2
 8026470:	432b      	orrs	r3, r5
 8026472:	e7dd      	b.n	8026430 <__ieee754_fmodf+0xbc>
 8026474:	0802e4e4 	.word	0x0802e4e4

08026478 <__ieee754_powf>:
 8026478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802647c:	ee10 4a90 	vmov	r4, s1
 8026480:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8026484:	ed2d 8b02 	vpush	{d8}
 8026488:	ee10 7a10 	vmov	r7, s0
 802648c:	eeb0 8a40 	vmov.f32	s16, s0
 8026490:	eef0 8a60 	vmov.f32	s17, s1
 8026494:	d10c      	bne.n	80264b0 <__ieee754_powf+0x38>
 8026496:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 802649a:	007f      	lsls	r7, r7, #1
 802649c:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 80264a0:	f240 8292 	bls.w	80269c8 <__ieee754_powf+0x550>
 80264a4:	ee38 0a28 	vadd.f32	s0, s16, s17
 80264a8:	ecbd 8b02 	vpop	{d8}
 80264ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80264b0:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 80264b4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80264b8:	dcf4      	bgt.n	80264a4 <__ieee754_powf+0x2c>
 80264ba:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80264be:	dd08      	ble.n	80264d2 <__ieee754_powf+0x5a>
 80264c0:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80264c4:	d1ee      	bne.n	80264a4 <__ieee754_powf+0x2c>
 80264c6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80264ca:	0064      	lsls	r4, r4, #1
 80264cc:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80264d0:	e7e6      	b.n	80264a0 <__ieee754_powf+0x28>
 80264d2:	2f00      	cmp	r7, #0
 80264d4:	da20      	bge.n	8026518 <__ieee754_powf+0xa0>
 80264d6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 80264da:	da2d      	bge.n	8026538 <__ieee754_powf+0xc0>
 80264dc:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80264e0:	f2c0 827b 	blt.w	80269da <__ieee754_powf+0x562>
 80264e4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 80264e8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80264ec:	fa48 f603 	asr.w	r6, r8, r3
 80264f0:	fa06 f303 	lsl.w	r3, r6, r3
 80264f4:	4543      	cmp	r3, r8
 80264f6:	f040 8270 	bne.w	80269da <__ieee754_powf+0x562>
 80264fa:	f006 0601 	and.w	r6, r6, #1
 80264fe:	f1c6 0602 	rsb	r6, r6, #2
 8026502:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8026506:	d11f      	bne.n	8026548 <__ieee754_powf+0xd0>
 8026508:	2c00      	cmp	r4, #0
 802650a:	f280 8263 	bge.w	80269d4 <__ieee754_powf+0x55c>
 802650e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8026512:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8026516:	e7c7      	b.n	80264a8 <__ieee754_powf+0x30>
 8026518:	2600      	movs	r6, #0
 802651a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 802651e:	d1f0      	bne.n	8026502 <__ieee754_powf+0x8a>
 8026520:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8026524:	f000 8250 	beq.w	80269c8 <__ieee754_powf+0x550>
 8026528:	dd08      	ble.n	802653c <__ieee754_powf+0xc4>
 802652a:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8026830 <__ieee754_powf+0x3b8>
 802652e:	2c00      	cmp	r4, #0
 8026530:	bfa8      	it	ge
 8026532:	eeb0 0a68 	vmovge.f32	s0, s17
 8026536:	e7b7      	b.n	80264a8 <__ieee754_powf+0x30>
 8026538:	2602      	movs	r6, #2
 802653a:	e7ee      	b.n	802651a <__ieee754_powf+0xa2>
 802653c:	2c00      	cmp	r4, #0
 802653e:	f280 8246 	bge.w	80269ce <__ieee754_powf+0x556>
 8026542:	eeb1 0a68 	vneg.f32	s0, s17
 8026546:	e7af      	b.n	80264a8 <__ieee754_powf+0x30>
 8026548:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 802654c:	d102      	bne.n	8026554 <__ieee754_powf+0xdc>
 802654e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8026552:	e7a9      	b.n	80264a8 <__ieee754_powf+0x30>
 8026554:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8026558:	eeb0 0a48 	vmov.f32	s0, s16
 802655c:	d107      	bne.n	802656e <__ieee754_powf+0xf6>
 802655e:	2f00      	cmp	r7, #0
 8026560:	db05      	blt.n	802656e <__ieee754_powf+0xf6>
 8026562:	ecbd 8b02 	vpop	{d8}
 8026566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802656a:	f7ff bab9 	b.w	8025ae0 <__ieee754_sqrtf>
 802656e:	f7ff f9d7 	bl	8025920 <fabsf>
 8026572:	b125      	cbz	r5, 802657e <__ieee754_powf+0x106>
 8026574:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8026578:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 802657c:	d115      	bne.n	80265aa <__ieee754_powf+0x132>
 802657e:	2c00      	cmp	r4, #0
 8026580:	bfbc      	itt	lt
 8026582:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8026586:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 802658a:	2f00      	cmp	r7, #0
 802658c:	da8c      	bge.n	80264a8 <__ieee754_powf+0x30>
 802658e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8026592:	4335      	orrs	r5, r6
 8026594:	d104      	bne.n	80265a0 <__ieee754_powf+0x128>
 8026596:	ee70 7a40 	vsub.f32	s15, s0, s0
 802659a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 802659e:	e783      	b.n	80264a8 <__ieee754_powf+0x30>
 80265a0:	2e01      	cmp	r6, #1
 80265a2:	d181      	bne.n	80264a8 <__ieee754_powf+0x30>
 80265a4:	eeb1 0a40 	vneg.f32	s0, s0
 80265a8:	e77e      	b.n	80264a8 <__ieee754_powf+0x30>
 80265aa:	0ff8      	lsrs	r0, r7, #31
 80265ac:	3801      	subs	r0, #1
 80265ae:	ea56 0300 	orrs.w	r3, r6, r0
 80265b2:	d104      	bne.n	80265be <__ieee754_powf+0x146>
 80265b4:	ee38 8a48 	vsub.f32	s16, s16, s16
 80265b8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80265bc:	e774      	b.n	80264a8 <__ieee754_powf+0x30>
 80265be:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 80265c2:	dd73      	ble.n	80266ac <__ieee754_powf+0x234>
 80265c4:	4b9b      	ldr	r3, [pc, #620]	; (8026834 <__ieee754_powf+0x3bc>)
 80265c6:	429d      	cmp	r5, r3
 80265c8:	dc08      	bgt.n	80265dc <__ieee754_powf+0x164>
 80265ca:	2c00      	cmp	r4, #0
 80265cc:	da0b      	bge.n	80265e6 <__ieee754_powf+0x16e>
 80265ce:	2000      	movs	r0, #0
 80265d0:	ecbd 8b02 	vpop	{d8}
 80265d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80265d8:	f000 bc9a 	b.w	8026f10 <__math_oflowf>
 80265dc:	4b96      	ldr	r3, [pc, #600]	; (8026838 <__ieee754_powf+0x3c0>)
 80265de:	429d      	cmp	r5, r3
 80265e0:	dd08      	ble.n	80265f4 <__ieee754_powf+0x17c>
 80265e2:	2c00      	cmp	r4, #0
 80265e4:	dcf3      	bgt.n	80265ce <__ieee754_powf+0x156>
 80265e6:	2000      	movs	r0, #0
 80265e8:	ecbd 8b02 	vpop	{d8}
 80265ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80265f0:	f000 bc88 	b.w	8026f04 <__math_uflowf>
 80265f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80265f8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80265fc:	eddf 6a8f 	vldr	s13, [pc, #572]	; 802683c <__ieee754_powf+0x3c4>
 8026600:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8026604:	eee0 6a67 	vfms.f32	s13, s0, s15
 8026608:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802660c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8026610:	ee20 7a00 	vmul.f32	s14, s0, s0
 8026614:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026618:	eddf 7a89 	vldr	s15, [pc, #548]	; 8026840 <__ieee754_powf+0x3c8>
 802661c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8026620:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8026844 <__ieee754_powf+0x3cc>
 8026624:	eee0 7a07 	vfma.f32	s15, s0, s14
 8026628:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8026848 <__ieee754_powf+0x3d0>
 802662c:	eef0 6a67 	vmov.f32	s13, s15
 8026630:	eee0 6a07 	vfma.f32	s13, s0, s14
 8026634:	ee16 3a90 	vmov	r3, s13
 8026638:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 802663c:	f023 030f 	bic.w	r3, r3, #15
 8026640:	ee06 3a90 	vmov	s13, r3
 8026644:	eee0 6a47 	vfms.f32	s13, s0, s14
 8026648:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802664c:	3e01      	subs	r6, #1
 802664e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8026652:	4306      	orrs	r6, r0
 8026654:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8026658:	f024 040f 	bic.w	r4, r4, #15
 802665c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8026660:	bf08      	it	eq
 8026662:	eeb0 8a47 	vmoveq.f32	s16, s14
 8026666:	ee07 4a10 	vmov	s14, r4
 802666a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 802666e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8026672:	ee07 3a90 	vmov	s15, r3
 8026676:	eee7 0a27 	vfma.f32	s1, s14, s15
 802667a:	ee07 4a10 	vmov	s14, r4
 802667e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8026682:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8026686:	ee17 1a10 	vmov	r1, s14
 802668a:	2900      	cmp	r1, #0
 802668c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8026690:	f340 817c 	ble.w	802698c <__ieee754_powf+0x514>
 8026694:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8026698:	f340 80f8 	ble.w	802688c <__ieee754_powf+0x414>
 802669c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80266a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266a4:	bf4c      	ite	mi
 80266a6:	2001      	movmi	r0, #1
 80266a8:	2000      	movpl	r0, #0
 80266aa:	e791      	b.n	80265d0 <__ieee754_powf+0x158>
 80266ac:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 80266b0:	bf01      	itttt	eq
 80266b2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 802684c <__ieee754_powf+0x3d4>
 80266b6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80266ba:	f06f 0317 	mvneq.w	r3, #23
 80266be:	ee17 5a90 	vmoveq	r5, s15
 80266c2:	ea4f 52e5 	mov.w	r2, r5, asr #23
 80266c6:	bf18      	it	ne
 80266c8:	2300      	movne	r3, #0
 80266ca:	3a7f      	subs	r2, #127	; 0x7f
 80266cc:	441a      	add	r2, r3
 80266ce:	4b60      	ldr	r3, [pc, #384]	; (8026850 <__ieee754_powf+0x3d8>)
 80266d0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80266d4:	429d      	cmp	r5, r3
 80266d6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 80266da:	dd06      	ble.n	80266ea <__ieee754_powf+0x272>
 80266dc:	4b5d      	ldr	r3, [pc, #372]	; (8026854 <__ieee754_powf+0x3dc>)
 80266de:	429d      	cmp	r5, r3
 80266e0:	f340 80a4 	ble.w	802682c <__ieee754_powf+0x3b4>
 80266e4:	3201      	adds	r2, #1
 80266e6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80266ea:	2500      	movs	r5, #0
 80266ec:	4b5a      	ldr	r3, [pc, #360]	; (8026858 <__ieee754_powf+0x3e0>)
 80266ee:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80266f2:	ee07 1a10 	vmov	s14, r1
 80266f6:	edd3 5a00 	vldr	s11, [r3]
 80266fa:	4b58      	ldr	r3, [pc, #352]	; (802685c <__ieee754_powf+0x3e4>)
 80266fc:	ee75 7a87 	vadd.f32	s15, s11, s14
 8026700:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8026704:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8026708:	1049      	asrs	r1, r1, #1
 802670a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 802670e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8026712:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8026716:	ee37 6a65 	vsub.f32	s12, s14, s11
 802671a:	ee07 1a90 	vmov	s15, r1
 802671e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8026722:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8026726:	ee15 7a10 	vmov	r7, s10
 802672a:	401f      	ands	r7, r3
 802672c:	ee06 7a90 	vmov	s13, r7
 8026730:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8026734:	ee37 7a65 	vsub.f32	s14, s14, s11
 8026738:	ee65 7a05 	vmul.f32	s15, s10, s10
 802673c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8026740:	eddf 5a47 	vldr	s11, [pc, #284]	; 8026860 <__ieee754_powf+0x3e8>
 8026744:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8026864 <__ieee754_powf+0x3ec>
 8026748:	eee7 5a87 	vfma.f32	s11, s15, s14
 802674c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8026868 <__ieee754_powf+0x3f0>
 8026750:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8026754:	eddf 5a39 	vldr	s11, [pc, #228]	; 802683c <__ieee754_powf+0x3c4>
 8026758:	eee7 5a27 	vfma.f32	s11, s14, s15
 802675c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 802686c <__ieee754_powf+0x3f4>
 8026760:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8026764:	eddf 5a42 	vldr	s11, [pc, #264]	; 8026870 <__ieee754_powf+0x3f8>
 8026768:	ee26 6a24 	vmul.f32	s12, s12, s9
 802676c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8026770:	ee35 7a26 	vadd.f32	s14, s10, s13
 8026774:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8026778:	ee27 7a06 	vmul.f32	s14, s14, s12
 802677c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8026780:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8026784:	eef0 5a67 	vmov.f32	s11, s15
 8026788:	eee6 5aa6 	vfma.f32	s11, s13, s13
 802678c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8026790:	ee15 1a90 	vmov	r1, s11
 8026794:	4019      	ands	r1, r3
 8026796:	ee05 1a90 	vmov	s11, r1
 802679a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 802679e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80267a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80267a6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80267aa:	eee6 7a25 	vfma.f32	s15, s12, s11
 80267ae:	eeb0 6a67 	vmov.f32	s12, s15
 80267b2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80267b6:	ee16 1a10 	vmov	r1, s12
 80267ba:	4019      	ands	r1, r3
 80267bc:	ee07 1a10 	vmov	s14, r1
 80267c0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80267c4:	ee06 1a10 	vmov	s12, r1
 80267c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80267cc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8026874 <__ieee754_powf+0x3fc>
 80267d0:	4929      	ldr	r1, [pc, #164]	; (8026878 <__ieee754_powf+0x400>)
 80267d2:	eddf 5a2a 	vldr	s11, [pc, #168]	; 802687c <__ieee754_powf+0x404>
 80267d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80267da:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8026880 <__ieee754_powf+0x408>
 80267de:	eee6 7a07 	vfma.f32	s15, s12, s14
 80267e2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80267e6:	ed91 7a00 	vldr	s14, [r1]
 80267ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80267ee:	ee07 2a10 	vmov	s14, r2
 80267f2:	eef0 6a67 	vmov.f32	s13, s15
 80267f6:	4a23      	ldr	r2, [pc, #140]	; (8026884 <__ieee754_powf+0x40c>)
 80267f8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80267fc:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8026800:	ed92 5a00 	vldr	s10, [r2]
 8026804:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026808:	ee76 6a85 	vadd.f32	s13, s13, s10
 802680c:	ee76 6a87 	vadd.f32	s13, s13, s14
 8026810:	ee16 2a90 	vmov	r2, s13
 8026814:	4013      	ands	r3, r2
 8026816:	ee06 3a90 	vmov	s13, r3
 802681a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 802681e:	ee37 7a45 	vsub.f32	s14, s14, s10
 8026822:	eea6 7a65 	vfms.f32	s14, s12, s11
 8026826:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802682a:	e70f      	b.n	802664c <__ieee754_powf+0x1d4>
 802682c:	2501      	movs	r5, #1
 802682e:	e75d      	b.n	80266ec <__ieee754_powf+0x274>
 8026830:	00000000 	.word	0x00000000
 8026834:	3f7ffff3 	.word	0x3f7ffff3
 8026838:	3f800007 	.word	0x3f800007
 802683c:	3eaaaaab 	.word	0x3eaaaaab
 8026840:	3fb8aa3b 	.word	0x3fb8aa3b
 8026844:	36eca570 	.word	0x36eca570
 8026848:	3fb8aa00 	.word	0x3fb8aa00
 802684c:	4b800000 	.word	0x4b800000
 8026850:	001cc471 	.word	0x001cc471
 8026854:	005db3d6 	.word	0x005db3d6
 8026858:	0802e4ec 	.word	0x0802e4ec
 802685c:	fffff000 	.word	0xfffff000
 8026860:	3e6c3255 	.word	0x3e6c3255
 8026864:	3e53f142 	.word	0x3e53f142
 8026868:	3e8ba305 	.word	0x3e8ba305
 802686c:	3edb6db7 	.word	0x3edb6db7
 8026870:	3f19999a 	.word	0x3f19999a
 8026874:	3f76384f 	.word	0x3f76384f
 8026878:	0802e4fc 	.word	0x0802e4fc
 802687c:	3f763800 	.word	0x3f763800
 8026880:	369dc3a0 	.word	0x369dc3a0
 8026884:	0802e4f4 	.word	0x0802e4f4
 8026888:	3338aa3c 	.word	0x3338aa3c
 802688c:	f040 8093 	bne.w	80269b6 <__ieee754_powf+0x53e>
 8026890:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8026888 <__ieee754_powf+0x410>
 8026894:	ee37 7a67 	vsub.f32	s14, s14, s15
 8026898:	ee70 6aa6 	vadd.f32	s13, s1, s13
 802689c:	eef4 6ac7 	vcmpe.f32	s13, s14
 80268a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80268a4:	f73f aefa 	bgt.w	802669c <__ieee754_powf+0x224>
 80268a8:	15db      	asrs	r3, r3, #23
 80268aa:	3b7e      	subs	r3, #126	; 0x7e
 80268ac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80268b0:	4118      	asrs	r0, r3
 80268b2:	4408      	add	r0, r1
 80268b4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80268b8:	4a49      	ldr	r2, [pc, #292]	; (80269e0 <__ieee754_powf+0x568>)
 80268ba:	3b7f      	subs	r3, #127	; 0x7f
 80268bc:	411a      	asrs	r2, r3
 80268be:	4002      	ands	r2, r0
 80268c0:	ee07 2a10 	vmov	s14, r2
 80268c4:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80268c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80268cc:	f1c3 0317 	rsb	r3, r3, #23
 80268d0:	4118      	asrs	r0, r3
 80268d2:	2900      	cmp	r1, #0
 80268d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80268d8:	bfb8      	it	lt
 80268da:	4240      	neglt	r0, r0
 80268dc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80268e0:	eddf 6a40 	vldr	s13, [pc, #256]	; 80269e4 <__ieee754_powf+0x56c>
 80268e4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80269e8 <__ieee754_powf+0x570>
 80268e8:	ee17 3a10 	vmov	r3, s14
 80268ec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80268f0:	f023 030f 	bic.w	r3, r3, #15
 80268f4:	ee07 3a10 	vmov	s14, r3
 80268f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80268fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8026900:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8026904:	eddf 7a39 	vldr	s15, [pc, #228]	; 80269ec <__ieee754_powf+0x574>
 8026908:	ee67 7a27 	vmul.f32	s15, s14, s15
 802690c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8026910:	eef0 6a67 	vmov.f32	s13, s15
 8026914:	eee7 6a06 	vfma.f32	s13, s14, s12
 8026918:	eef0 5a66 	vmov.f32	s11, s13
 802691c:	eee7 5a46 	vfms.f32	s11, s14, s12
 8026920:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8026924:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8026928:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80269f0 <__ieee754_powf+0x578>
 802692c:	eddf 5a31 	vldr	s11, [pc, #196]	; 80269f4 <__ieee754_powf+0x57c>
 8026930:	eea7 6a25 	vfma.f32	s12, s14, s11
 8026934:	eddf 5a30 	vldr	s11, [pc, #192]	; 80269f8 <__ieee754_powf+0x580>
 8026938:	eee6 5a07 	vfma.f32	s11, s12, s14
 802693c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80269fc <__ieee754_powf+0x584>
 8026940:	eea5 6a87 	vfma.f32	s12, s11, s14
 8026944:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8026a00 <__ieee754_powf+0x588>
 8026948:	eee6 5a07 	vfma.f32	s11, s12, s14
 802694c:	eeb0 6a66 	vmov.f32	s12, s13
 8026950:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8026954:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8026958:	ee66 5a86 	vmul.f32	s11, s13, s12
 802695c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8026960:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8026964:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8026968:	ee77 7a67 	vsub.f32	s15, s14, s15
 802696c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8026970:	ee30 0a67 	vsub.f32	s0, s0, s15
 8026974:	ee10 3a10 	vmov	r3, s0
 8026978:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 802697c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8026980:	da1f      	bge.n	80269c2 <__ieee754_powf+0x54a>
 8026982:	f000 fa43 	bl	8026e0c <scalbnf>
 8026986:	ee20 0a08 	vmul.f32	s0, s0, s16
 802698a:	e58d      	b.n	80264a8 <__ieee754_powf+0x30>
 802698c:	4a1d      	ldr	r2, [pc, #116]	; (8026a04 <__ieee754_powf+0x58c>)
 802698e:	4293      	cmp	r3, r2
 8026990:	dd07      	ble.n	80269a2 <__ieee754_powf+0x52a>
 8026992:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8026996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802699a:	bf4c      	ite	mi
 802699c:	2001      	movmi	r0, #1
 802699e:	2000      	movpl	r0, #0
 80269a0:	e622      	b.n	80265e8 <__ieee754_powf+0x170>
 80269a2:	d108      	bne.n	80269b6 <__ieee754_powf+0x53e>
 80269a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80269a8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80269ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80269b0:	f6ff af7a 	blt.w	80268a8 <__ieee754_powf+0x430>
 80269b4:	e7ed      	b.n	8026992 <__ieee754_powf+0x51a>
 80269b6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80269ba:	f73f af75 	bgt.w	80268a8 <__ieee754_powf+0x430>
 80269be:	2000      	movs	r0, #0
 80269c0:	e78c      	b.n	80268dc <__ieee754_powf+0x464>
 80269c2:	ee00 3a10 	vmov	s0, r3
 80269c6:	e7de      	b.n	8026986 <__ieee754_powf+0x50e>
 80269c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80269cc:	e56c      	b.n	80264a8 <__ieee754_powf+0x30>
 80269ce:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8026a08 <__ieee754_powf+0x590>
 80269d2:	e569      	b.n	80264a8 <__ieee754_powf+0x30>
 80269d4:	eeb0 0a48 	vmov.f32	s0, s16
 80269d8:	e566      	b.n	80264a8 <__ieee754_powf+0x30>
 80269da:	2600      	movs	r6, #0
 80269dc:	e591      	b.n	8026502 <__ieee754_powf+0x8a>
 80269de:	bf00      	nop
 80269e0:	ff800000 	.word	0xff800000
 80269e4:	3f317218 	.word	0x3f317218
 80269e8:	3f317200 	.word	0x3f317200
 80269ec:	35bfbe8c 	.word	0x35bfbe8c
 80269f0:	b5ddea0e 	.word	0xb5ddea0e
 80269f4:	3331bb4c 	.word	0x3331bb4c
 80269f8:	388ab355 	.word	0x388ab355
 80269fc:	bb360b61 	.word	0xbb360b61
 8026a00:	3e2aaaab 	.word	0x3e2aaaab
 8026a04:	43160000 	.word	0x43160000
 8026a08:	00000000 	.word	0x00000000

08026a0c <__ieee754_rem_pio2f>:
 8026a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026a0e:	ee10 6a10 	vmov	r6, s0
 8026a12:	4b86      	ldr	r3, [pc, #536]	; (8026c2c <__ieee754_rem_pio2f+0x220>)
 8026a14:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8026a18:	429d      	cmp	r5, r3
 8026a1a:	b087      	sub	sp, #28
 8026a1c:	4604      	mov	r4, r0
 8026a1e:	dc05      	bgt.n	8026a2c <__ieee754_rem_pio2f+0x20>
 8026a20:	2300      	movs	r3, #0
 8026a22:	ed80 0a00 	vstr	s0, [r0]
 8026a26:	6043      	str	r3, [r0, #4]
 8026a28:	2000      	movs	r0, #0
 8026a2a:	e020      	b.n	8026a6e <__ieee754_rem_pio2f+0x62>
 8026a2c:	4b80      	ldr	r3, [pc, #512]	; (8026c30 <__ieee754_rem_pio2f+0x224>)
 8026a2e:	429d      	cmp	r5, r3
 8026a30:	dc38      	bgt.n	8026aa4 <__ieee754_rem_pio2f+0x98>
 8026a32:	2e00      	cmp	r6, #0
 8026a34:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8026c34 <__ieee754_rem_pio2f+0x228>
 8026a38:	4b7f      	ldr	r3, [pc, #508]	; (8026c38 <__ieee754_rem_pio2f+0x22c>)
 8026a3a:	f025 050f 	bic.w	r5, r5, #15
 8026a3e:	dd18      	ble.n	8026a72 <__ieee754_rem_pio2f+0x66>
 8026a40:	429d      	cmp	r5, r3
 8026a42:	ee70 7a47 	vsub.f32	s15, s0, s14
 8026a46:	bf09      	itett	eq
 8026a48:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8026c3c <__ieee754_rem_pio2f+0x230>
 8026a4c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8026c40 <__ieee754_rem_pio2f+0x234>
 8026a50:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8026a54:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8026c44 <__ieee754_rem_pio2f+0x238>
 8026a58:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8026a5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8026a60:	edc0 6a00 	vstr	s13, [r0]
 8026a64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026a68:	edc0 7a01 	vstr	s15, [r0, #4]
 8026a6c:	2001      	movs	r0, #1
 8026a6e:	b007      	add	sp, #28
 8026a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026a72:	429d      	cmp	r5, r3
 8026a74:	ee70 7a07 	vadd.f32	s15, s0, s14
 8026a78:	bf09      	itett	eq
 8026a7a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8026c3c <__ieee754_rem_pio2f+0x230>
 8026a7e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8026c40 <__ieee754_rem_pio2f+0x234>
 8026a82:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8026a86:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8026c44 <__ieee754_rem_pio2f+0x238>
 8026a8a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8026a8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8026a92:	edc0 6a00 	vstr	s13, [r0]
 8026a96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026a9a:	edc0 7a01 	vstr	s15, [r0, #4]
 8026a9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8026aa2:	e7e4      	b.n	8026a6e <__ieee754_rem_pio2f+0x62>
 8026aa4:	4b68      	ldr	r3, [pc, #416]	; (8026c48 <__ieee754_rem_pio2f+0x23c>)
 8026aa6:	429d      	cmp	r5, r3
 8026aa8:	dc71      	bgt.n	8026b8e <__ieee754_rem_pio2f+0x182>
 8026aaa:	f7fe ff39 	bl	8025920 <fabsf>
 8026aae:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8026c4c <__ieee754_rem_pio2f+0x240>
 8026ab2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8026ab6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8026aba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8026abe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8026ac2:	ee17 0a90 	vmov	r0, s15
 8026ac6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8026c34 <__ieee754_rem_pio2f+0x228>
 8026aca:	eea7 0a67 	vfms.f32	s0, s14, s15
 8026ace:	281f      	cmp	r0, #31
 8026ad0:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8026c40 <__ieee754_rem_pio2f+0x234>
 8026ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026ad8:	eeb1 6a47 	vneg.f32	s12, s14
 8026adc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8026ae0:	ee16 2a90 	vmov	r2, s13
 8026ae4:	dc1c      	bgt.n	8026b20 <__ieee754_rem_pio2f+0x114>
 8026ae6:	495a      	ldr	r1, [pc, #360]	; (8026c50 <__ieee754_rem_pio2f+0x244>)
 8026ae8:	1e47      	subs	r7, r0, #1
 8026aea:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8026aee:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8026af2:	428b      	cmp	r3, r1
 8026af4:	d014      	beq.n	8026b20 <__ieee754_rem_pio2f+0x114>
 8026af6:	6022      	str	r2, [r4, #0]
 8026af8:	ed94 7a00 	vldr	s14, [r4]
 8026afc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8026b00:	2e00      	cmp	r6, #0
 8026b02:	ee30 0a67 	vsub.f32	s0, s0, s15
 8026b06:	ed84 0a01 	vstr	s0, [r4, #4]
 8026b0a:	dab0      	bge.n	8026a6e <__ieee754_rem_pio2f+0x62>
 8026b0c:	eeb1 7a47 	vneg.f32	s14, s14
 8026b10:	eeb1 0a40 	vneg.f32	s0, s0
 8026b14:	ed84 7a00 	vstr	s14, [r4]
 8026b18:	ed84 0a01 	vstr	s0, [r4, #4]
 8026b1c:	4240      	negs	r0, r0
 8026b1e:	e7a6      	b.n	8026a6e <__ieee754_rem_pio2f+0x62>
 8026b20:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8026b24:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8026b28:	2908      	cmp	r1, #8
 8026b2a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8026b2e:	dde2      	ble.n	8026af6 <__ieee754_rem_pio2f+0xea>
 8026b30:	eddf 5a42 	vldr	s11, [pc, #264]	; 8026c3c <__ieee754_rem_pio2f+0x230>
 8026b34:	eef0 6a40 	vmov.f32	s13, s0
 8026b38:	eee6 6a25 	vfma.f32	s13, s12, s11
 8026b3c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8026b40:	eee6 7a25 	vfma.f32	s15, s12, s11
 8026b44:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8026c44 <__ieee754_rem_pio2f+0x238>
 8026b48:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8026b4c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8026b50:	ee15 2a90 	vmov	r2, s11
 8026b54:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8026b58:	1a5b      	subs	r3, r3, r1
 8026b5a:	2b19      	cmp	r3, #25
 8026b5c:	dc04      	bgt.n	8026b68 <__ieee754_rem_pio2f+0x15c>
 8026b5e:	edc4 5a00 	vstr	s11, [r4]
 8026b62:	eeb0 0a66 	vmov.f32	s0, s13
 8026b66:	e7c7      	b.n	8026af8 <__ieee754_rem_pio2f+0xec>
 8026b68:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8026c54 <__ieee754_rem_pio2f+0x248>
 8026b6c:	eeb0 0a66 	vmov.f32	s0, s13
 8026b70:	eea6 0a25 	vfma.f32	s0, s12, s11
 8026b74:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8026b78:	eddf 6a37 	vldr	s13, [pc, #220]	; 8026c58 <__ieee754_rem_pio2f+0x24c>
 8026b7c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8026b80:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8026b84:	ee30 7a67 	vsub.f32	s14, s0, s15
 8026b88:	ed84 7a00 	vstr	s14, [r4]
 8026b8c:	e7b4      	b.n	8026af8 <__ieee754_rem_pio2f+0xec>
 8026b8e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8026b92:	db06      	blt.n	8026ba2 <__ieee754_rem_pio2f+0x196>
 8026b94:	ee70 7a40 	vsub.f32	s15, s0, s0
 8026b98:	edc0 7a01 	vstr	s15, [r0, #4]
 8026b9c:	edc0 7a00 	vstr	s15, [r0]
 8026ba0:	e742      	b.n	8026a28 <__ieee754_rem_pio2f+0x1c>
 8026ba2:	15ea      	asrs	r2, r5, #23
 8026ba4:	3a86      	subs	r2, #134	; 0x86
 8026ba6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8026baa:	ee07 3a90 	vmov	s15, r3
 8026bae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8026bb2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8026c5c <__ieee754_rem_pio2f+0x250>
 8026bb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026bba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026bbe:	ed8d 7a03 	vstr	s14, [sp, #12]
 8026bc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8026bc6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8026bca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026bce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026bd2:	ed8d 7a04 	vstr	s14, [sp, #16]
 8026bd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8026bda:	eef5 7a40 	vcmp.f32	s15, #0.0
 8026bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026be2:	edcd 7a05 	vstr	s15, [sp, #20]
 8026be6:	d11e      	bne.n	8026c26 <__ieee754_rem_pio2f+0x21a>
 8026be8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8026bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026bf0:	bf14      	ite	ne
 8026bf2:	2302      	movne	r3, #2
 8026bf4:	2301      	moveq	r3, #1
 8026bf6:	491a      	ldr	r1, [pc, #104]	; (8026c60 <__ieee754_rem_pio2f+0x254>)
 8026bf8:	9101      	str	r1, [sp, #4]
 8026bfa:	2102      	movs	r1, #2
 8026bfc:	9100      	str	r1, [sp, #0]
 8026bfe:	a803      	add	r0, sp, #12
 8026c00:	4621      	mov	r1, r4
 8026c02:	f000 f98b 	bl	8026f1c <__kernel_rem_pio2f>
 8026c06:	2e00      	cmp	r6, #0
 8026c08:	f6bf af31 	bge.w	8026a6e <__ieee754_rem_pio2f+0x62>
 8026c0c:	edd4 7a00 	vldr	s15, [r4]
 8026c10:	eef1 7a67 	vneg.f32	s15, s15
 8026c14:	edc4 7a00 	vstr	s15, [r4]
 8026c18:	edd4 7a01 	vldr	s15, [r4, #4]
 8026c1c:	eef1 7a67 	vneg.f32	s15, s15
 8026c20:	edc4 7a01 	vstr	s15, [r4, #4]
 8026c24:	e77a      	b.n	8026b1c <__ieee754_rem_pio2f+0x110>
 8026c26:	2303      	movs	r3, #3
 8026c28:	e7e5      	b.n	8026bf6 <__ieee754_rem_pio2f+0x1ea>
 8026c2a:	bf00      	nop
 8026c2c:	3f490fd8 	.word	0x3f490fd8
 8026c30:	4016cbe3 	.word	0x4016cbe3
 8026c34:	3fc90f80 	.word	0x3fc90f80
 8026c38:	3fc90fd0 	.word	0x3fc90fd0
 8026c3c:	37354400 	.word	0x37354400
 8026c40:	37354443 	.word	0x37354443
 8026c44:	2e85a308 	.word	0x2e85a308
 8026c48:	43490f80 	.word	0x43490f80
 8026c4c:	3f22f984 	.word	0x3f22f984
 8026c50:	0802e504 	.word	0x0802e504
 8026c54:	2e85a300 	.word	0x2e85a300
 8026c58:	248d3132 	.word	0x248d3132
 8026c5c:	43800000 	.word	0x43800000
 8026c60:	0802e584 	.word	0x0802e584

08026c64 <atanf>:
 8026c64:	b538      	push	{r3, r4, r5, lr}
 8026c66:	ee10 5a10 	vmov	r5, s0
 8026c6a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8026c6e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8026c72:	eef0 7a40 	vmov.f32	s15, s0
 8026c76:	db10      	blt.n	8026c9a <atanf+0x36>
 8026c78:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8026c7c:	dd04      	ble.n	8026c88 <atanf+0x24>
 8026c7e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8026c82:	eeb0 0a67 	vmov.f32	s0, s15
 8026c86:	bd38      	pop	{r3, r4, r5, pc}
 8026c88:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8026dc0 <atanf+0x15c>
 8026c8c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8026dc4 <atanf+0x160>
 8026c90:	2d00      	cmp	r5, #0
 8026c92:	bfd8      	it	le
 8026c94:	eef0 7a47 	vmovle.f32	s15, s14
 8026c98:	e7f3      	b.n	8026c82 <atanf+0x1e>
 8026c9a:	4b4b      	ldr	r3, [pc, #300]	; (8026dc8 <atanf+0x164>)
 8026c9c:	429c      	cmp	r4, r3
 8026c9e:	dc10      	bgt.n	8026cc2 <atanf+0x5e>
 8026ca0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8026ca4:	da0a      	bge.n	8026cbc <atanf+0x58>
 8026ca6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8026dcc <atanf+0x168>
 8026caa:	ee30 7a07 	vadd.f32	s14, s0, s14
 8026cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8026cb2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8026cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cba:	dce2      	bgt.n	8026c82 <atanf+0x1e>
 8026cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8026cc0:	e013      	b.n	8026cea <atanf+0x86>
 8026cc2:	f7fe fe2d 	bl	8025920 <fabsf>
 8026cc6:	4b42      	ldr	r3, [pc, #264]	; (8026dd0 <atanf+0x16c>)
 8026cc8:	429c      	cmp	r4, r3
 8026cca:	dc4f      	bgt.n	8026d6c <atanf+0x108>
 8026ccc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8026cd0:	429c      	cmp	r4, r3
 8026cd2:	dc41      	bgt.n	8026d58 <atanf+0xf4>
 8026cd4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8026cd8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8026cdc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8026ce0:	2300      	movs	r3, #0
 8026ce2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8026ce6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026cea:	1c5a      	adds	r2, r3, #1
 8026cec:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8026cf0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8026dd4 <atanf+0x170>
 8026cf4:	eddf 5a38 	vldr	s11, [pc, #224]	; 8026dd8 <atanf+0x174>
 8026cf8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8026ddc <atanf+0x178>
 8026cfc:	ee66 6a06 	vmul.f32	s13, s12, s12
 8026d00:	eee6 5a87 	vfma.f32	s11, s13, s14
 8026d04:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8026de0 <atanf+0x17c>
 8026d08:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8026d0c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8026de4 <atanf+0x180>
 8026d10:	eee7 5a26 	vfma.f32	s11, s14, s13
 8026d14:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8026de8 <atanf+0x184>
 8026d18:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8026d1c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8026dec <atanf+0x188>
 8026d20:	eee7 5a26 	vfma.f32	s11, s14, s13
 8026d24:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8026df0 <atanf+0x18c>
 8026d28:	eea6 5a87 	vfma.f32	s10, s13, s14
 8026d2c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8026df4 <atanf+0x190>
 8026d30:	eea5 7a26 	vfma.f32	s14, s10, s13
 8026d34:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8026df8 <atanf+0x194>
 8026d38:	eea7 5a26 	vfma.f32	s10, s14, s13
 8026d3c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8026dfc <atanf+0x198>
 8026d40:	eea5 7a26 	vfma.f32	s14, s10, s13
 8026d44:	ee27 7a26 	vmul.f32	s14, s14, s13
 8026d48:	eea5 7a86 	vfma.f32	s14, s11, s12
 8026d4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8026d50:	d121      	bne.n	8026d96 <atanf+0x132>
 8026d52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026d56:	e794      	b.n	8026c82 <atanf+0x1e>
 8026d58:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8026d5c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8026d60:	ee30 0a27 	vadd.f32	s0, s0, s15
 8026d64:	2301      	movs	r3, #1
 8026d66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026d6a:	e7be      	b.n	8026cea <atanf+0x86>
 8026d6c:	4b24      	ldr	r3, [pc, #144]	; (8026e00 <atanf+0x19c>)
 8026d6e:	429c      	cmp	r4, r3
 8026d70:	dc0b      	bgt.n	8026d8a <atanf+0x126>
 8026d72:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8026d76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026d7a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8026d7e:	2302      	movs	r3, #2
 8026d80:	ee70 6a67 	vsub.f32	s13, s0, s15
 8026d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8026d88:	e7af      	b.n	8026cea <atanf+0x86>
 8026d8a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8026d8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026d92:	2303      	movs	r3, #3
 8026d94:	e7a9      	b.n	8026cea <atanf+0x86>
 8026d96:	4a1b      	ldr	r2, [pc, #108]	; (8026e04 <atanf+0x1a0>)
 8026d98:	491b      	ldr	r1, [pc, #108]	; (8026e08 <atanf+0x1a4>)
 8026d9a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8026d9e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8026da2:	edd3 6a00 	vldr	s13, [r3]
 8026da6:	ee37 7a66 	vsub.f32	s14, s14, s13
 8026daa:	2d00      	cmp	r5, #0
 8026dac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8026db0:	edd2 7a00 	vldr	s15, [r2]
 8026db4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026db8:	bfb8      	it	lt
 8026dba:	eef1 7a67 	vneglt.f32	s15, s15
 8026dbe:	e760      	b.n	8026c82 <atanf+0x1e>
 8026dc0:	3fc90fdb 	.word	0x3fc90fdb
 8026dc4:	bfc90fdb 	.word	0xbfc90fdb
 8026dc8:	3edfffff 	.word	0x3edfffff
 8026dcc:	7149f2ca 	.word	0x7149f2ca
 8026dd0:	3f97ffff 	.word	0x3f97ffff
 8026dd4:	3c8569d7 	.word	0x3c8569d7
 8026dd8:	3d4bda59 	.word	0x3d4bda59
 8026ddc:	bd6ef16b 	.word	0xbd6ef16b
 8026de0:	3d886b35 	.word	0x3d886b35
 8026de4:	3dba2e6e 	.word	0x3dba2e6e
 8026de8:	3e124925 	.word	0x3e124925
 8026dec:	3eaaaaab 	.word	0x3eaaaaab
 8026df0:	bd15a221 	.word	0xbd15a221
 8026df4:	bd9d8795 	.word	0xbd9d8795
 8026df8:	bde38e38 	.word	0xbde38e38
 8026dfc:	be4ccccd 	.word	0xbe4ccccd
 8026e00:	401bffff 	.word	0x401bffff
 8026e04:	0802e89c 	.word	0x0802e89c
 8026e08:	0802e8ac 	.word	0x0802e8ac

08026e0c <scalbnf>:
 8026e0c:	ee10 3a10 	vmov	r3, s0
 8026e10:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8026e14:	d02b      	beq.n	8026e6e <scalbnf+0x62>
 8026e16:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8026e1a:	d302      	bcc.n	8026e22 <scalbnf+0x16>
 8026e1c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8026e20:	4770      	bx	lr
 8026e22:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8026e26:	d123      	bne.n	8026e70 <scalbnf+0x64>
 8026e28:	4b24      	ldr	r3, [pc, #144]	; (8026ebc <scalbnf+0xb0>)
 8026e2a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8026ec0 <scalbnf+0xb4>
 8026e2e:	4298      	cmp	r0, r3
 8026e30:	ee20 0a27 	vmul.f32	s0, s0, s15
 8026e34:	db17      	blt.n	8026e66 <scalbnf+0x5a>
 8026e36:	ee10 3a10 	vmov	r3, s0
 8026e3a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8026e3e:	3a19      	subs	r2, #25
 8026e40:	f24c 3150 	movw	r1, #50000	; 0xc350
 8026e44:	4288      	cmp	r0, r1
 8026e46:	dd15      	ble.n	8026e74 <scalbnf+0x68>
 8026e48:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8026ec4 <scalbnf+0xb8>
 8026e4c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8026ec8 <scalbnf+0xbc>
 8026e50:	ee10 3a10 	vmov	r3, s0
 8026e54:	eeb0 7a67 	vmov.f32	s14, s15
 8026e58:	2b00      	cmp	r3, #0
 8026e5a:	bfb8      	it	lt
 8026e5c:	eef0 7a66 	vmovlt.f32	s15, s13
 8026e60:	ee27 0a87 	vmul.f32	s0, s15, s14
 8026e64:	4770      	bx	lr
 8026e66:	eddf 7a19 	vldr	s15, [pc, #100]	; 8026ecc <scalbnf+0xc0>
 8026e6a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8026e6e:	4770      	bx	lr
 8026e70:	0dd2      	lsrs	r2, r2, #23
 8026e72:	e7e5      	b.n	8026e40 <scalbnf+0x34>
 8026e74:	4410      	add	r0, r2
 8026e76:	28fe      	cmp	r0, #254	; 0xfe
 8026e78:	dce6      	bgt.n	8026e48 <scalbnf+0x3c>
 8026e7a:	2800      	cmp	r0, #0
 8026e7c:	dd06      	ble.n	8026e8c <scalbnf+0x80>
 8026e7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8026e82:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8026e86:	ee00 3a10 	vmov	s0, r3
 8026e8a:	4770      	bx	lr
 8026e8c:	f110 0f16 	cmn.w	r0, #22
 8026e90:	da09      	bge.n	8026ea6 <scalbnf+0x9a>
 8026e92:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8026ecc <scalbnf+0xc0>
 8026e96:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8026ed0 <scalbnf+0xc4>
 8026e9a:	ee10 3a10 	vmov	r3, s0
 8026e9e:	eeb0 7a67 	vmov.f32	s14, s15
 8026ea2:	2b00      	cmp	r3, #0
 8026ea4:	e7d9      	b.n	8026e5a <scalbnf+0x4e>
 8026ea6:	3019      	adds	r0, #25
 8026ea8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8026eac:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8026eb0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8026ed4 <scalbnf+0xc8>
 8026eb4:	ee07 3a90 	vmov	s15, r3
 8026eb8:	e7d7      	b.n	8026e6a <scalbnf+0x5e>
 8026eba:	bf00      	nop
 8026ebc:	ffff3cb0 	.word	0xffff3cb0
 8026ec0:	4c000000 	.word	0x4c000000
 8026ec4:	7149f2ca 	.word	0x7149f2ca
 8026ec8:	f149f2ca 	.word	0xf149f2ca
 8026ecc:	0da24260 	.word	0x0da24260
 8026ed0:	8da24260 	.word	0x8da24260
 8026ed4:	33000000 	.word	0x33000000

08026ed8 <with_errnof>:
 8026ed8:	b513      	push	{r0, r1, r4, lr}
 8026eda:	4604      	mov	r4, r0
 8026edc:	ed8d 0a01 	vstr	s0, [sp, #4]
 8026ee0:	f7fc fdee 	bl	8023ac0 <__errno>
 8026ee4:	ed9d 0a01 	vldr	s0, [sp, #4]
 8026ee8:	6004      	str	r4, [r0, #0]
 8026eea:	b002      	add	sp, #8
 8026eec:	bd10      	pop	{r4, pc}

08026eee <xflowf>:
 8026eee:	b130      	cbz	r0, 8026efe <xflowf+0x10>
 8026ef0:	eef1 7a40 	vneg.f32	s15, s0
 8026ef4:	ee27 0a80 	vmul.f32	s0, s15, s0
 8026ef8:	2022      	movs	r0, #34	; 0x22
 8026efa:	f7ff bfed 	b.w	8026ed8 <with_errnof>
 8026efe:	eef0 7a40 	vmov.f32	s15, s0
 8026f02:	e7f7      	b.n	8026ef4 <xflowf+0x6>

08026f04 <__math_uflowf>:
 8026f04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8026f0c <__math_uflowf+0x8>
 8026f08:	f7ff bff1 	b.w	8026eee <xflowf>
 8026f0c:	10000000 	.word	0x10000000

08026f10 <__math_oflowf>:
 8026f10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8026f18 <__math_oflowf+0x8>
 8026f14:	f7ff bfeb 	b.w	8026eee <xflowf>
 8026f18:	70000000 	.word	0x70000000

08026f1c <__kernel_rem_pio2f>:
 8026f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f20:	ed2d 8b04 	vpush	{d8-d9}
 8026f24:	b0d9      	sub	sp, #356	; 0x164
 8026f26:	4688      	mov	r8, r1
 8026f28:	9002      	str	r0, [sp, #8]
 8026f2a:	49b8      	ldr	r1, [pc, #736]	; (802720c <__kernel_rem_pio2f+0x2f0>)
 8026f2c:	9866      	ldr	r0, [sp, #408]	; 0x198
 8026f2e:	9301      	str	r3, [sp, #4]
 8026f30:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8026f34:	9901      	ldr	r1, [sp, #4]
 8026f36:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8026f38:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8026f3c:	1d11      	adds	r1, r2, #4
 8026f3e:	db25      	blt.n	8026f8c <__kernel_rem_pio2f+0x70>
 8026f40:	1ed0      	subs	r0, r2, #3
 8026f42:	bf48      	it	mi
 8026f44:	1d10      	addmi	r0, r2, #4
 8026f46:	10c0      	asrs	r0, r0, #3
 8026f48:	1c45      	adds	r5, r0, #1
 8026f4a:	00e9      	lsls	r1, r5, #3
 8026f4c:	eba0 070b 	sub.w	r7, r0, fp
 8026f50:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 802721c <__kernel_rem_pio2f+0x300>
 8026f54:	9103      	str	r1, [sp, #12]
 8026f56:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8026f5a:	eb0a 0c0b 	add.w	ip, sl, fp
 8026f5e:	ae1c      	add	r6, sp, #112	; 0x70
 8026f60:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8026f64:	2400      	movs	r4, #0
 8026f66:	4564      	cmp	r4, ip
 8026f68:	dd12      	ble.n	8026f90 <__kernel_rem_pio2f+0x74>
 8026f6a:	9901      	ldr	r1, [sp, #4]
 8026f6c:	ac1c      	add	r4, sp, #112	; 0x70
 8026f6e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8026f72:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8026f76:	f04f 0c00 	mov.w	ip, #0
 8026f7a:	45d4      	cmp	ip, sl
 8026f7c:	dc27      	bgt.n	8026fce <__kernel_rem_pio2f+0xb2>
 8026f7e:	f8dd e008 	ldr.w	lr, [sp, #8]
 8026f82:	eddf 7aa6 	vldr	s15, [pc, #664]	; 802721c <__kernel_rem_pio2f+0x300>
 8026f86:	4627      	mov	r7, r4
 8026f88:	2600      	movs	r6, #0
 8026f8a:	e016      	b.n	8026fba <__kernel_rem_pio2f+0x9e>
 8026f8c:	2000      	movs	r0, #0
 8026f8e:	e7db      	b.n	8026f48 <__kernel_rem_pio2f+0x2c>
 8026f90:	42e7      	cmn	r7, r4
 8026f92:	bf5d      	ittte	pl
 8026f94:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8026f98:	ee07 1a90 	vmovpl	s15, r1
 8026f9c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8026fa0:	eef0 7a47 	vmovmi.f32	s15, s14
 8026fa4:	ece6 7a01 	vstmia	r6!, {s15}
 8026fa8:	3401      	adds	r4, #1
 8026faa:	e7dc      	b.n	8026f66 <__kernel_rem_pio2f+0x4a>
 8026fac:	ecfe 6a01 	vldmia	lr!, {s13}
 8026fb0:	ed97 7a00 	vldr	s14, [r7]
 8026fb4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8026fb8:	3601      	adds	r6, #1
 8026fba:	455e      	cmp	r6, fp
 8026fbc:	f1a7 0704 	sub.w	r7, r7, #4
 8026fc0:	ddf4      	ble.n	8026fac <__kernel_rem_pio2f+0x90>
 8026fc2:	ece9 7a01 	vstmia	r9!, {s15}
 8026fc6:	f10c 0c01 	add.w	ip, ip, #1
 8026fca:	3404      	adds	r4, #4
 8026fcc:	e7d5      	b.n	8026f7a <__kernel_rem_pio2f+0x5e>
 8026fce:	a908      	add	r1, sp, #32
 8026fd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8026fd4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8026fd8:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8027218 <__kernel_rem_pio2f+0x2fc>
 8026fdc:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8027214 <__kernel_rem_pio2f+0x2f8>
 8026fe0:	9105      	str	r1, [sp, #20]
 8026fe2:	9304      	str	r3, [sp, #16]
 8026fe4:	4656      	mov	r6, sl
 8026fe6:	00b3      	lsls	r3, r6, #2
 8026fe8:	9306      	str	r3, [sp, #24]
 8026fea:	ab58      	add	r3, sp, #352	; 0x160
 8026fec:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8026ff0:	ac08      	add	r4, sp, #32
 8026ff2:	ab44      	add	r3, sp, #272	; 0x110
 8026ff4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8026ff8:	46a4      	mov	ip, r4
 8026ffa:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8026ffe:	4637      	mov	r7, r6
 8027000:	2f00      	cmp	r7, #0
 8027002:	f1a0 0004 	sub.w	r0, r0, #4
 8027006:	dc4a      	bgt.n	802709e <__kernel_rem_pio2f+0x182>
 8027008:	4628      	mov	r0, r5
 802700a:	9207      	str	r2, [sp, #28]
 802700c:	f7ff fefe 	bl	8026e0c <scalbnf>
 8027010:	eeb0 8a40 	vmov.f32	s16, s0
 8027014:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8027018:	ee28 0a00 	vmul.f32	s0, s16, s0
 802701c:	f7fe fd64 	bl	8025ae8 <floorf>
 8027020:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8027024:	eea0 8a67 	vfms.f32	s16, s0, s15
 8027028:	2d00      	cmp	r5, #0
 802702a:	9a07      	ldr	r2, [sp, #28]
 802702c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8027030:	ee17 9a90 	vmov	r9, s15
 8027034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027038:	ee38 8a67 	vsub.f32	s16, s16, s15
 802703c:	dd41      	ble.n	80270c2 <__kernel_rem_pio2f+0x1a6>
 802703e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8027042:	ab08      	add	r3, sp, #32
 8027044:	f1c5 0e08 	rsb	lr, r5, #8
 8027048:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 802704c:	fa47 f00e 	asr.w	r0, r7, lr
 8027050:	4481      	add	r9, r0
 8027052:	fa00 f00e 	lsl.w	r0, r0, lr
 8027056:	1a3f      	subs	r7, r7, r0
 8027058:	f1c5 0007 	rsb	r0, r5, #7
 802705c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8027060:	4107      	asrs	r7, r0
 8027062:	2f00      	cmp	r7, #0
 8027064:	dd3c      	ble.n	80270e0 <__kernel_rem_pio2f+0x1c4>
 8027066:	f04f 0e00 	mov.w	lr, #0
 802706a:	f109 0901 	add.w	r9, r9, #1
 802706e:	4671      	mov	r1, lr
 8027070:	4576      	cmp	r6, lr
 8027072:	dc67      	bgt.n	8027144 <__kernel_rem_pio2f+0x228>
 8027074:	2d00      	cmp	r5, #0
 8027076:	dd03      	ble.n	8027080 <__kernel_rem_pio2f+0x164>
 8027078:	2d01      	cmp	r5, #1
 802707a:	d074      	beq.n	8027166 <__kernel_rem_pio2f+0x24a>
 802707c:	2d02      	cmp	r5, #2
 802707e:	d07b      	beq.n	8027178 <__kernel_rem_pio2f+0x25c>
 8027080:	2f02      	cmp	r7, #2
 8027082:	d12d      	bne.n	80270e0 <__kernel_rem_pio2f+0x1c4>
 8027084:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027088:	ee30 8a48 	vsub.f32	s16, s0, s16
 802708c:	b341      	cbz	r1, 80270e0 <__kernel_rem_pio2f+0x1c4>
 802708e:	4628      	mov	r0, r5
 8027090:	9207      	str	r2, [sp, #28]
 8027092:	f7ff febb 	bl	8026e0c <scalbnf>
 8027096:	9a07      	ldr	r2, [sp, #28]
 8027098:	ee38 8a40 	vsub.f32	s16, s16, s0
 802709c:	e020      	b.n	80270e0 <__kernel_rem_pio2f+0x1c4>
 802709e:	ee60 7a28 	vmul.f32	s15, s0, s17
 80270a2:	3f01      	subs	r7, #1
 80270a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80270a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80270ac:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80270b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80270b4:	ecac 0a01 	vstmia	ip!, {s0}
 80270b8:	ed90 0a00 	vldr	s0, [r0]
 80270bc:	ee37 0a80 	vadd.f32	s0, s15, s0
 80270c0:	e79e      	b.n	8027000 <__kernel_rem_pio2f+0xe4>
 80270c2:	d105      	bne.n	80270d0 <__kernel_rem_pio2f+0x1b4>
 80270c4:	1e70      	subs	r0, r6, #1
 80270c6:	ab08      	add	r3, sp, #32
 80270c8:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80270cc:	11ff      	asrs	r7, r7, #7
 80270ce:	e7c8      	b.n	8027062 <__kernel_rem_pio2f+0x146>
 80270d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80270d4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80270d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80270dc:	da30      	bge.n	8027140 <__kernel_rem_pio2f+0x224>
 80270de:	2700      	movs	r7, #0
 80270e0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80270e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80270e8:	f040 809a 	bne.w	8027220 <__kernel_rem_pio2f+0x304>
 80270ec:	1e74      	subs	r4, r6, #1
 80270ee:	46a4      	mov	ip, r4
 80270f0:	2100      	movs	r1, #0
 80270f2:	45d4      	cmp	ip, sl
 80270f4:	da47      	bge.n	8027186 <__kernel_rem_pio2f+0x26a>
 80270f6:	2900      	cmp	r1, #0
 80270f8:	d063      	beq.n	80271c2 <__kernel_rem_pio2f+0x2a6>
 80270fa:	ab08      	add	r3, sp, #32
 80270fc:	3d08      	subs	r5, #8
 80270fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8027102:	2b00      	cmp	r3, #0
 8027104:	d07f      	beq.n	8027206 <__kernel_rem_pio2f+0x2ea>
 8027106:	4628      	mov	r0, r5
 8027108:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802710c:	f7ff fe7e 	bl	8026e0c <scalbnf>
 8027110:	1c63      	adds	r3, r4, #1
 8027112:	aa44      	add	r2, sp, #272	; 0x110
 8027114:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8027218 <__kernel_rem_pio2f+0x2fc>
 8027118:	0099      	lsls	r1, r3, #2
 802711a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802711e:	4623      	mov	r3, r4
 8027120:	2b00      	cmp	r3, #0
 8027122:	f280 80ad 	bge.w	8027280 <__kernel_rem_pio2f+0x364>
 8027126:	4623      	mov	r3, r4
 8027128:	2b00      	cmp	r3, #0
 802712a:	f2c0 80cb 	blt.w	80272c4 <__kernel_rem_pio2f+0x3a8>
 802712e:	aa44      	add	r2, sp, #272	; 0x110
 8027130:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8027134:	4e36      	ldr	r6, [pc, #216]	; (8027210 <__kernel_rem_pio2f+0x2f4>)
 8027136:	eddf 7a39 	vldr	s15, [pc, #228]	; 802721c <__kernel_rem_pio2f+0x300>
 802713a:	2000      	movs	r0, #0
 802713c:	1ae2      	subs	r2, r4, r3
 802713e:	e0b6      	b.n	80272ae <__kernel_rem_pio2f+0x392>
 8027140:	2702      	movs	r7, #2
 8027142:	e790      	b.n	8027066 <__kernel_rem_pio2f+0x14a>
 8027144:	6820      	ldr	r0, [r4, #0]
 8027146:	b949      	cbnz	r1, 802715c <__kernel_rem_pio2f+0x240>
 8027148:	b118      	cbz	r0, 8027152 <__kernel_rem_pio2f+0x236>
 802714a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802714e:	6020      	str	r0, [r4, #0]
 8027150:	2001      	movs	r0, #1
 8027152:	f10e 0e01 	add.w	lr, lr, #1
 8027156:	3404      	adds	r4, #4
 8027158:	4601      	mov	r1, r0
 802715a:	e789      	b.n	8027070 <__kernel_rem_pio2f+0x154>
 802715c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8027160:	6020      	str	r0, [r4, #0]
 8027162:	4608      	mov	r0, r1
 8027164:	e7f5      	b.n	8027152 <__kernel_rem_pio2f+0x236>
 8027166:	1e74      	subs	r4, r6, #1
 8027168:	ab08      	add	r3, sp, #32
 802716a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802716e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8027172:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8027176:	e783      	b.n	8027080 <__kernel_rem_pio2f+0x164>
 8027178:	1e74      	subs	r4, r6, #1
 802717a:	ab08      	add	r3, sp, #32
 802717c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8027180:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8027184:	e7f5      	b.n	8027172 <__kernel_rem_pio2f+0x256>
 8027186:	ab08      	add	r3, sp, #32
 8027188:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 802718c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8027190:	4301      	orrs	r1, r0
 8027192:	e7ae      	b.n	80270f2 <__kernel_rem_pio2f+0x1d6>
 8027194:	3001      	adds	r0, #1
 8027196:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 802719a:	2f00      	cmp	r7, #0
 802719c:	d0fa      	beq.n	8027194 <__kernel_rem_pio2f+0x278>
 802719e:	9b06      	ldr	r3, [sp, #24]
 80271a0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80271a4:	eb0d 0403 	add.w	r4, sp, r3
 80271a8:	9b01      	ldr	r3, [sp, #4]
 80271aa:	18f7      	adds	r7, r6, r3
 80271ac:	ab1c      	add	r3, sp, #112	; 0x70
 80271ae:	f106 0c01 	add.w	ip, r6, #1
 80271b2:	3c4c      	subs	r4, #76	; 0x4c
 80271b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80271b8:	4430      	add	r0, r6
 80271ba:	4560      	cmp	r0, ip
 80271bc:	da04      	bge.n	80271c8 <__kernel_rem_pio2f+0x2ac>
 80271be:	4606      	mov	r6, r0
 80271c0:	e711      	b.n	8026fe6 <__kernel_rem_pio2f+0xca>
 80271c2:	9c05      	ldr	r4, [sp, #20]
 80271c4:	2001      	movs	r0, #1
 80271c6:	e7e6      	b.n	8027196 <__kernel_rem_pio2f+0x27a>
 80271c8:	9b04      	ldr	r3, [sp, #16]
 80271ca:	f8dd e008 	ldr.w	lr, [sp, #8]
 80271ce:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80271d2:	9306      	str	r3, [sp, #24]
 80271d4:	ee07 3a90 	vmov	s15, r3
 80271d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80271dc:	2600      	movs	r6, #0
 80271de:	ece7 7a01 	vstmia	r7!, {s15}
 80271e2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802721c <__kernel_rem_pio2f+0x300>
 80271e6:	46b9      	mov	r9, r7
 80271e8:	455e      	cmp	r6, fp
 80271ea:	dd04      	ble.n	80271f6 <__kernel_rem_pio2f+0x2da>
 80271ec:	ece4 7a01 	vstmia	r4!, {s15}
 80271f0:	f10c 0c01 	add.w	ip, ip, #1
 80271f4:	e7e1      	b.n	80271ba <__kernel_rem_pio2f+0x29e>
 80271f6:	ecfe 6a01 	vldmia	lr!, {s13}
 80271fa:	ed39 7a01 	vldmdb	r9!, {s14}
 80271fe:	3601      	adds	r6, #1
 8027200:	eee6 7a87 	vfma.f32	s15, s13, s14
 8027204:	e7f0      	b.n	80271e8 <__kernel_rem_pio2f+0x2cc>
 8027206:	3c01      	subs	r4, #1
 8027208:	e777      	b.n	80270fa <__kernel_rem_pio2f+0x1de>
 802720a:	bf00      	nop
 802720c:	0802e8e8 	.word	0x0802e8e8
 8027210:	0802e8bc 	.word	0x0802e8bc
 8027214:	43800000 	.word	0x43800000
 8027218:	3b800000 	.word	0x3b800000
 802721c:	00000000 	.word	0x00000000
 8027220:	9b03      	ldr	r3, [sp, #12]
 8027222:	eeb0 0a48 	vmov.f32	s0, s16
 8027226:	1a98      	subs	r0, r3, r2
 8027228:	f7ff fdf0 	bl	8026e0c <scalbnf>
 802722c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8027214 <__kernel_rem_pio2f+0x2f8>
 8027230:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8027234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027238:	db19      	blt.n	802726e <__kernel_rem_pio2f+0x352>
 802723a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8027218 <__kernel_rem_pio2f+0x2fc>
 802723e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8027242:	aa08      	add	r2, sp, #32
 8027244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027248:	1c74      	adds	r4, r6, #1
 802724a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802724e:	3508      	adds	r5, #8
 8027250:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8027254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027258:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802725c:	ee10 3a10 	vmov	r3, s0
 8027260:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8027264:	ee17 3a90 	vmov	r3, s15
 8027268:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802726c:	e74b      	b.n	8027106 <__kernel_rem_pio2f+0x1ea>
 802726e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8027272:	aa08      	add	r2, sp, #32
 8027274:	ee10 3a10 	vmov	r3, s0
 8027278:	4634      	mov	r4, r6
 802727a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802727e:	e742      	b.n	8027106 <__kernel_rem_pio2f+0x1ea>
 8027280:	a808      	add	r0, sp, #32
 8027282:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8027286:	9001      	str	r0, [sp, #4]
 8027288:	ee07 0a90 	vmov	s15, r0
 802728c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027290:	3b01      	subs	r3, #1
 8027292:	ee67 7a80 	vmul.f32	s15, s15, s0
 8027296:	ee20 0a07 	vmul.f32	s0, s0, s14
 802729a:	ed62 7a01 	vstmdb	r2!, {s15}
 802729e:	e73f      	b.n	8027120 <__kernel_rem_pio2f+0x204>
 80272a0:	ecf6 6a01 	vldmia	r6!, {s13}
 80272a4:	ecb5 7a01 	vldmia	r5!, {s14}
 80272a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80272ac:	3001      	adds	r0, #1
 80272ae:	4550      	cmp	r0, sl
 80272b0:	dc01      	bgt.n	80272b6 <__kernel_rem_pio2f+0x39a>
 80272b2:	4290      	cmp	r0, r2
 80272b4:	ddf4      	ble.n	80272a0 <__kernel_rem_pio2f+0x384>
 80272b6:	a858      	add	r0, sp, #352	; 0x160
 80272b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80272bc:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 80272c0:	3b01      	subs	r3, #1
 80272c2:	e731      	b.n	8027128 <__kernel_rem_pio2f+0x20c>
 80272c4:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80272c6:	2b02      	cmp	r3, #2
 80272c8:	dc09      	bgt.n	80272de <__kernel_rem_pio2f+0x3c2>
 80272ca:	2b00      	cmp	r3, #0
 80272cc:	dc2b      	bgt.n	8027326 <__kernel_rem_pio2f+0x40a>
 80272ce:	d044      	beq.n	802735a <__kernel_rem_pio2f+0x43e>
 80272d0:	f009 0007 	and.w	r0, r9, #7
 80272d4:	b059      	add	sp, #356	; 0x164
 80272d6:	ecbd 8b04 	vpop	{d8-d9}
 80272da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80272de:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80272e0:	2b03      	cmp	r3, #3
 80272e2:	d1f5      	bne.n	80272d0 <__kernel_rem_pio2f+0x3b4>
 80272e4:	aa30      	add	r2, sp, #192	; 0xc0
 80272e6:	1f0b      	subs	r3, r1, #4
 80272e8:	4413      	add	r3, r2
 80272ea:	461a      	mov	r2, r3
 80272ec:	4620      	mov	r0, r4
 80272ee:	2800      	cmp	r0, #0
 80272f0:	f1a2 0204 	sub.w	r2, r2, #4
 80272f4:	dc52      	bgt.n	802739c <__kernel_rem_pio2f+0x480>
 80272f6:	4622      	mov	r2, r4
 80272f8:	2a01      	cmp	r2, #1
 80272fa:	f1a3 0304 	sub.w	r3, r3, #4
 80272fe:	dc5d      	bgt.n	80273bc <__kernel_rem_pio2f+0x4a0>
 8027300:	ab30      	add	r3, sp, #192	; 0xc0
 8027302:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 802721c <__kernel_rem_pio2f+0x300>
 8027306:	440b      	add	r3, r1
 8027308:	2c01      	cmp	r4, #1
 802730a:	dc67      	bgt.n	80273dc <__kernel_rem_pio2f+0x4c0>
 802730c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8027310:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8027314:	2f00      	cmp	r7, #0
 8027316:	d167      	bne.n	80273e8 <__kernel_rem_pio2f+0x4cc>
 8027318:	edc8 6a00 	vstr	s13, [r8]
 802731c:	ed88 7a01 	vstr	s14, [r8, #4]
 8027320:	edc8 7a02 	vstr	s15, [r8, #8]
 8027324:	e7d4      	b.n	80272d0 <__kernel_rem_pio2f+0x3b4>
 8027326:	ab30      	add	r3, sp, #192	; 0xc0
 8027328:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 802721c <__kernel_rem_pio2f+0x300>
 802732c:	440b      	add	r3, r1
 802732e:	4622      	mov	r2, r4
 8027330:	2a00      	cmp	r2, #0
 8027332:	da24      	bge.n	802737e <__kernel_rem_pio2f+0x462>
 8027334:	b34f      	cbz	r7, 802738a <__kernel_rem_pio2f+0x46e>
 8027336:	eef1 7a47 	vneg.f32	s15, s14
 802733a:	edc8 7a00 	vstr	s15, [r8]
 802733e:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8027342:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027346:	aa31      	add	r2, sp, #196	; 0xc4
 8027348:	2301      	movs	r3, #1
 802734a:	429c      	cmp	r4, r3
 802734c:	da20      	bge.n	8027390 <__kernel_rem_pio2f+0x474>
 802734e:	b10f      	cbz	r7, 8027354 <__kernel_rem_pio2f+0x438>
 8027350:	eef1 7a67 	vneg.f32	s15, s15
 8027354:	edc8 7a01 	vstr	s15, [r8, #4]
 8027358:	e7ba      	b.n	80272d0 <__kernel_rem_pio2f+0x3b4>
 802735a:	ab30      	add	r3, sp, #192	; 0xc0
 802735c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 802721c <__kernel_rem_pio2f+0x300>
 8027360:	440b      	add	r3, r1
 8027362:	2c00      	cmp	r4, #0
 8027364:	da05      	bge.n	8027372 <__kernel_rem_pio2f+0x456>
 8027366:	b10f      	cbz	r7, 802736c <__kernel_rem_pio2f+0x450>
 8027368:	eef1 7a67 	vneg.f32	s15, s15
 802736c:	edc8 7a00 	vstr	s15, [r8]
 8027370:	e7ae      	b.n	80272d0 <__kernel_rem_pio2f+0x3b4>
 8027372:	ed33 7a01 	vldmdb	r3!, {s14}
 8027376:	3c01      	subs	r4, #1
 8027378:	ee77 7a87 	vadd.f32	s15, s15, s14
 802737c:	e7f1      	b.n	8027362 <__kernel_rem_pio2f+0x446>
 802737e:	ed73 7a01 	vldmdb	r3!, {s15}
 8027382:	3a01      	subs	r2, #1
 8027384:	ee37 7a27 	vadd.f32	s14, s14, s15
 8027388:	e7d2      	b.n	8027330 <__kernel_rem_pio2f+0x414>
 802738a:	eef0 7a47 	vmov.f32	s15, s14
 802738e:	e7d4      	b.n	802733a <__kernel_rem_pio2f+0x41e>
 8027390:	ecb2 7a01 	vldmia	r2!, {s14}
 8027394:	3301      	adds	r3, #1
 8027396:	ee77 7a87 	vadd.f32	s15, s15, s14
 802739a:	e7d6      	b.n	802734a <__kernel_rem_pio2f+0x42e>
 802739c:	edd2 7a00 	vldr	s15, [r2]
 80273a0:	edd2 6a01 	vldr	s13, [r2, #4]
 80273a4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80273a8:	3801      	subs	r0, #1
 80273aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80273ae:	ed82 7a00 	vstr	s14, [r2]
 80273b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80273b6:	edc2 7a01 	vstr	s15, [r2, #4]
 80273ba:	e798      	b.n	80272ee <__kernel_rem_pio2f+0x3d2>
 80273bc:	edd3 7a00 	vldr	s15, [r3]
 80273c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80273c4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80273c8:	3a01      	subs	r2, #1
 80273ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80273ce:	ed83 7a00 	vstr	s14, [r3]
 80273d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80273d6:	edc3 7a01 	vstr	s15, [r3, #4]
 80273da:	e78d      	b.n	80272f8 <__kernel_rem_pio2f+0x3dc>
 80273dc:	ed33 7a01 	vldmdb	r3!, {s14}
 80273e0:	3c01      	subs	r4, #1
 80273e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80273e6:	e78f      	b.n	8027308 <__kernel_rem_pio2f+0x3ec>
 80273e8:	eef1 6a66 	vneg.f32	s13, s13
 80273ec:	eeb1 7a47 	vneg.f32	s14, s14
 80273f0:	edc8 6a00 	vstr	s13, [r8]
 80273f4:	ed88 7a01 	vstr	s14, [r8, #4]
 80273f8:	eef1 7a67 	vneg.f32	s15, s15
 80273fc:	e790      	b.n	8027320 <__kernel_rem_pio2f+0x404>
 80273fe:	bf00      	nop

08027400 <_init>:
 8027400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027402:	bf00      	nop
 8027404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027406:	bc08      	pop	{r3}
 8027408:	469e      	mov	lr, r3
 802740a:	4770      	bx	lr

0802740c <_fini>:
 802740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802740e:	bf00      	nop
 8027410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027412:	bc08      	pop	{r3}
 8027414:	469e      	mov	lr, r3
 8027416:	4770      	bx	lr

08027418 <__params_cppm>:
 8027418:	0081 0000 99d4 0802 0000 0000 0000 0000     ................
 8027428:	0000 0000 0116 0000 99dc 0802 0018 2000     ............... 
	...
 8027440:	0116 0000 99e8 0802 001c 2000 0000 0000     ........... ....
 8027450:	0000 0000 0116 0000 99f4 0802 0024 2000     ............$.. 
	...
 8027468:	0116 0000 9a00 0802 0020 2000 0000 0000     ........ .. ....
 8027478:	0000 0000 0116 0000 9a08 0802 0028 2000     ............(.. 
	...
 8027490:	0080 0000 9a10 0802 0000 0000 0000 0000     ................
 80274a0:	0000 0000                                   ....

080274a4 <__params_hlCommander>:
 80274a4:	0081 0000 9a24 0802 0000 0000 0000 0000     ....$...........
 80274b4:	0000 0000 0026 0000 9a30 0802 0030 2000     ....&...0...0.. 
	...
 80274cc:	0026 0000 9a38 0802 0034 2000 0000 0000     &...8...4.. ....
 80274dc:	0000 0000 0028 0000 9a40 0802 7a28 2000     ....(...@...(z. 
	...
 80274f4:	0080 0000 9a4c 0802 0000 0000 0000 0000     ....L...........
 8027504:	0000 0000                                   ....

08027508 <__params_flightmode>:
 8027508:	0081 0000 9a90 0802 0000 0000 0000 0000     ................
 8027518:	0000 0000 0028 0000 9a9c 0802 7f95 2000     ....(.......... 
	...
 8027530:	0028 0000 9aa4 0802 7f96 2000 0000 0000     (.......... ....
 8027540:	0000 0000 0028 0000 9aac 0802 7f97 2000     ....(.......... 
	...
 8027558:	0008 0000 9ab4 0802 003a 2000 0000 0000     ........:.. ....
 8027568:	0000 0000 0028 0000 9abc 0802 0038 2000     ....(.......8.. 
	...
 8027580:	0028 0000 9acc 0802 0039 2000 0000 0000     (.......9.. ....
 8027590:	0000 0000 0028 0000 9adc 0802 7f94 2000     ....(.......... 
	...
 80275a8:	0080 0000 9ae8 0802 0000 0000 0000 0000     ................
 80275b8:	0000 0000                                   ....

080275bc <__params_locSrv>:
 80275bc:	0081 0000 9b74 0802 0000 0000 0000 0000     ....t...........
 80275cc:	0000 0000 0028 0000 9bc4 0802 7fd4 2000     ....(.......... 
	...
 80275e4:	0028 0000 9bd8 0802 7fd5 2000 0000 0000     (.......... ....
 80275f4:	0000 0000 0026 0000 9be8 0802 003c 2000     ....&.......<.. 
	...
 802760c:	0026 0000 9bf8 0802 0040 2000 0000 0000     &.......@.. ....
 802761c:	0000 0000 0080 0000 9b98 0802 0000 0000     ................
	...

08027634 <__params_crtpsrv>:
 8027634:	0081 0000 9c28 0802 0000 0000 0000 0000     ....(...........
 8027644:	0000 0000 0009 0000 9c30 0802 7fe2 2000     ........0...... 
	...
 802765c:	0080 0000 9c3c 0802 0000 0000 0000 0000     ....<...........
 802766c:	0000 0000                                   ....

08027670 <__params_syslink>:
 8027670:	0081 0000 9ea8 0802 0000 0000 0000 0000     ................
 8027680:	0000 0000 0008 0000 9eb0 0802 8154 2000     ............T.. 
	...
 8027698:	0080 0000 9eb8 0802 0000 0000 0000 0000     ................
 80276a8:	0000 0000                                   ....

080276ac <__params_led>:
 80276ac:	0081 0000 9f70 0802 0000 0000 0000 0000     ....p...........
 80276bc:	0000 0000 0008 0000 9f74 0802 819f 2000     ........t...... 
 80276cc:	49e5 0800 0000 0000 0080 0000 9f7c 0802     .I..........|...
	...

080276e8 <__params_memTst>:
 80276e8:	0081 0000 a090 0802 0000 0000 0000 0000     ................
 80276f8:	0000 0000 0008 0000 a098 0802 81bc 2000     ............... 
	...
 8027710:	0080 0000 a0a0 0802 0000 0000 0000 0000     ................
 8027720:	0000 0000                                   ....

08027724 <__params_pm>:
 8027724:	0081 0000 a0bc 0802 0000 0000 0000 0000     ................
 8027734:	0000 0000 0136 0000 a11c 0802 02a4 2000     ....6.......... 
	...
 802774c:	0136 0000 a128 0802 02a0 2000 0000 0000     6...(...... ....
 802775c:	0000 0000 0080 0000 a114 0802 0000 0000     ................
	...

08027774 <__params_powerDist>:
 8027774:	0081 0000 a13c 0802 0000 0000 0000 0000     ....<...........
 8027784:	0000 0000 013a 0000 a148 0802 846c 2000     ....:...H...l.. 
	...
 802779c:	0080 0000 a154 0802 0000 0000 0000 0000     ....T...........
 80277ac:	0000 0000                                   ....

080277b0 <__params_quadSysId>:
 80277b0:	0081 0000 a164 0802 0000 0000 0000 0000     ....d...........
 80277c0:	0000 0000 0006 0000 a170 0802 02ac 2000     ........p...... 
	...
 80277d8:	0006 0000 a180 0802 02b0 2000 0000 0000     ........... ....
 80277e8:	0000 0000 0006 0000 a190 0802 02b4 2000     ............... 
	...
 8027800:	0006 0000 a1a0 0802 02a8 2000 0000 0000     ........... ....
 8027810:	0000 0000 0080 0000 a1ac 0802 0000 0000     ................
	...

08027828 <__params_sound>:
 8027828:	0081 0000 a208 0802 0000 0000 0000 0000     ................
 8027838:	0000 0000 0138 0000 a210 0802 8478 2000     ....8.......x.. 
	...
 8027850:	006a 0000 a218 0802 8470 2000 0000 0000     j.......p.. ....
 8027860:	0000 0000 0029 0000 a220 0802 02b8 2000     ....)... ...... 
	...
 8027878:	0080 0000 a228 0802 0000 0000 0000 0000     ....(...........
 8027888:	0000 0000                                   ....

0802788c <__params_system>:
 802788c:	0081 0000 a294 0802 0000 0000 0000 0000     ................
 802789c:	0000 0000 0008 0000 a29c 0802 8481 2000     ............... 
 80278ac:	58f9 0800 0000 0000 0008 0000 a2ac 0802     .X..............
 80278bc:	8482 2000 5919 0800 0000 0000 0080 0000     ... .Y..........
 80278cc:	a2bc 0802 0000 0000 0000 0000 0000 0000     ................

080278dc <__params_pid_attitude>:
 80278dc:	0081 0000 a7fc 0802 0000 0000 0000 0000     ................
 80278ec:	0000 0000 0116 0000 a8cc 0802 0414 2000     ............... 
	...
 8027904:	0116 0000 a8d4 0802 0418 2000 0000 0000     ........... ....
 8027914:	0000 0000 0116 0000 a8dc 0802 041c 2000     ............... 
	...
 802792c:	0116 0000 a8e4 0802 0420 2000 0000 0000     ........ .. ....
 802793c:	0000 0000 0116 0000 a8f0 0802 0474 2000     ............t.. 
	...
 8027954:	0116 0000 a8fc 0802 0478 2000 0000 0000     ........x.. ....
 8027964:	0000 0000 0116 0000 a908 0802 047c 2000     ............|.. 
	...
 802797c:	0116 0000 a914 0802 0480 2000 0000 0000     ........... ....
 802798c:	0000 0000 0116 0000 a920 0802 04d4 2000     ........ ...... 
	...
 80279a4:	0116 0000 a928 0802 04d8 2000 0000 0000     ....(...... ....
 80279b4:	0000 0000 0116 0000 a930 0802 04dc 2000     ........0...... 
	...
 80279cc:	0116 0000 a938 0802 04e0 2000 0000 0000     ....8...... ....
 80279dc:	0000 0000 0116 0000 a940 0802 914c 2000     ........@...L.. 
	...
 80279f4:	0110 0000 a94c 0802 9148 2000 0000 0000     ....L...H.. ....
 8027a04:	0000 0000 0116 0000 a958 0802 02d0 2000     ........X...... 
	...
 8027a1c:	0080 0000 a89c 0802 0000 0000 0000 0000     ................
 8027a2c:	0000 0000                                   ....

08027a30 <__params_pid_rate>:
 8027a30:	0081 0000 a8b0 0802 0000 0000 0000 0000     ................
 8027a40:	0000 0000 0116 0000 a8cc 0802 02f4 2000     ............... 
	...
 8027a58:	0116 0000 a8d4 0802 02f8 2000 0000 0000     ........... ....
 8027a68:	0000 0000 0116 0000 a8dc 0802 02fc 2000     ............... 
	...
 8027a80:	0116 0000 a8e4 0802 0300 2000 0000 0000     ........... ....
 8027a90:	0000 0000 0116 0000 a8f0 0802 0354 2000     ............T.. 
	...
 8027aa8:	0116 0000 a8fc 0802 0358 2000 0000 0000     ........X.. ....
 8027ab8:	0000 0000 0116 0000 a908 0802 035c 2000     ............\.. 
	...
 8027ad0:	0116 0000 a914 0802 0360 2000 0000 0000     ........`.. ....
 8027ae0:	0000 0000 0116 0000 a920 0802 03b4 2000     ........ ...... 
	...
 8027af8:	0116 0000 a928 0802 03b8 2000 0000 0000     ....(...... ....
 8027b08:	0000 0000 0116 0000 a930 0802 03bc 2000     ........0...... 
	...
 8027b20:	0116 0000 a938 0802 03c0 2000 0000 0000     ....8...... ....
 8027b30:	0000 0000 0110 0000 a964 0802 9149 2000     ........d...I.. 
	...
 8027b48:	0116 0000 a970 0802 02d4 2000 0000 0000     ....p...... ....
 8027b58:	0000 0000 0116 0000 a97c 0802 02d8 2000     ........|...... 
	...
 8027b70:	0116 0000 a988 0802 02dc 2000 0000 0000     ........... ....
 8027b80:	0000 0000 0080 0000 a8bc 0802 0000 0000     ................
	...

08027b98 <__params_commander>:
 8027b98:	0081 0000 a9f0 0802 0000 0000 0000 0000     ................
 8027ba8:	0000 0000 0028 0000 a9fc 0802 91a8 2000     ....(.......... 
	...
 8027bc0:	0080 0000 aa08 0802 0000 0000 0000 0000     ................
 8027bd0:	0000 0000                                   ....

08027bd4 <__params_ctrlAtt>:
 8027bd4:	0081 0000 aa18 0802 0000 0000 0000 0000     ................
 8027be4:	0000 0000 0006 0000 aa20 0802 0520 2000     ........ ... .. 
	...
 8027bfc:	0006 0000 aa28 0802 0524 2000 0000 0000     ....(...$.. ....
 8027c0c:	0000 0000 0006 0000 aa30 0802 0528 2000     ........0...(.. 
	...
 8027c24:	0006 0000 aa38 0802 052c 2000 0000 0000     ....8...,.. ....
 8027c34:	0000 0000 0006 0000 aa40 0802 0530 2000     ........@...0.. 
	...
 8027c4c:	0006 0000 aa48 0802 0534 2000 0000 0000     ....H...4.. ....
 8027c5c:	0000 0000 0006 0000 aa58 0802 0538 2000     ........X...8.. 
	...
 8027c74:	0080 0000 aa68 0802 0000 0000 0000 0000     ....h...........
 8027c84:	0000 0000                                   ....

08027c88 <__params_ctrlINDI>:
 8027c88:	0081 0000 aa78 0802 0000 0000 0000 0000     ....x...........
 8027c98:	0000 0000 0006 0000 aa84 0802 053c 2000     ............<.. 
	...
 8027cb0:	0006 0000 aa98 0802 0540 2000 0000 0000     ........@.. ....
 8027cc0:	0000 0000 0006 0000 aaac 0802 0648 2000     ............H.. 
	...
 8027cd8:	0006 0000 aab4 0802 064c 2000 0000 0000     ........L.. ....
 8027ce8:	0000 0000 0006 0000 aabc 0802 0650 2000     ............P.. 
	...
 8027d00:	0006 0000 aac4 0802 0654 2000 0000 0000     ........T.. ....
 8027d10:	0000 0000 0006 0000 aac8 0802 0658 2000     ............X.. 
	...
 8027d28:	0006 0000 aad4 0802 065c 2000 0000 0000     ........\.. ....
 8027d38:	0000 0000 0006 0000 aae0 0802 0660 2000     ............`.. 
	...
 8027d50:	0006 0000 aaec 0802 0664 2000 0000 0000     ........d.. ....
 8027d60:	0000 0000 0006 0000 aaf8 0802 0668 2000     ............h.. 
	...
 8027d78:	0006 0000 ab04 0802 066c 2000 0000 0000     ........l.. ....
 8027d88:	0000 0000 0006 0000 ab10 0802 0670 2000     ............p.. 
	...
 8027da0:	0006 0000 ab1c 0802 0674 2000 0000 0000     ........t.. ....
 8027db0:	0000 0000 0006 0000 ab28 0802 0678 2000     ........(...x.. 
	...
 8027dc8:	0006 0000 ab34 0802 067c 2000 0000 0000     ....4...|.. ....
 8027dd8:	0000 0000 0006 0000 ab40 0802 0680 2000     ........@...... 
	...
 8027df0:	0008 0000 ab50 0802 0544 2000 0000 0000     ....P...D.. ....
 8027e00:	0000 0000 0080 0000 ab60 0802 0000 0000     ........`.......
	...

08027e18 <__params_ctrlMel>:
 8027e18:	0081 0000 ac8c 0802 0000 0000 0000 0000     ................
 8027e28:	0000 0000 0136 0000 ac94 0802 068c 2000     ....6.......... 
	...
 8027e40:	0136 0000 ac9c 0802 0690 2000 0000 0000     6.......... ....
 8027e50:	0000 0000 0136 0000 aca4 0802 0694 2000     ....6.......... 
	...
 8027e68:	0116 0000 acac 0802 0698 2000 0000 0000     ........... ....
 8027e78:	0000 0000 0136 0000 acb8 0802 069c 2000     ....6.......... 
	...
 8027e90:	0136 0000 acc0 0802 06a0 2000 0000 0000     6.......... ....
 8027ea0:	0000 0000 0136 0000 acc8 0802 06a4 2000     ....6.......... 
	...
 8027eb8:	0116 0000 acd0 0802 06a8 2000 0000 0000     ........... ....
 8027ec8:	0000 0000 0136 0000 acdc 0802 0684 2000     ....6.......... 
	...
 8027ee0:	0136 0000 ace4 0802 0688 2000 0000 0000     6.......... ....
 8027ef0:	0000 0000 0136 0000 acf0 0802 06ac 2000     ....6.......... 
	...
 8027f08:	0136 0000 acf8 0802 06bc 2000 0000 0000     6.......... ....
 8027f18:	0000 0000 0136 0000 ad00 0802 06b0 2000     ....6.......... 
	...
 8027f30:	0136 0000 ad08 0802 06c0 2000 0000 0000     6.......... ....
 8027f40:	0000 0000 0136 0000 ad10 0802 06b4 2000     ....6.......... 
	...
 8027f58:	0136 0000 ad18 0802 06c4 2000 0000 0000     6.......... ....
 8027f68:	0000 0000 0136 0000 ad20 0802 06cc 2000     ....6... ...... 
	...
 8027f80:	0116 0000 ad2c 0802 06b8 2000 0000 0000     ....,...... ....
 8027f90:	0000 0000 0116 0000 ad3c 0802 06c8 2000     ........<...... 
	...
 8027fa8:	0080 0000 ad48 0802 0000 0000 0000 0000     ....H...........
 8027fb8:	0000 0000                                   ....

08027fbc <__params_kalman>:
 8027fbc:	0081 0000 b090 0802 0000 0000 0000 0000     ................
 8027fcc:	0000 0000 0028 0000 b184 0802 9304 2000     ....(.......... 
	...
 8027fe4:	0028 0000 b194 0802 9295 2000 0000 0000     (.......... ....
 8027ff4:	0000 0000 0028 0000 b1a0 0802 9294 2000     ....(.......... 
	...
 802800c:	0136 0000 b1ac 0802 931c 2000 0000 0000     6.......... ....
 802801c:	0000 0000 0136 0000 b1b8 0802 9320 2000     ....6....... .. 
	...
 8028034:	0136 0000 b1c0 0802 9324 2000 0000 0000     6.......$.. ....
 8028044:	0000 0000 0136 0000 b1c8 0802 9328 2000     ....6.......(.. 
	...
 802805c:	0136 0000 b1d0 0802 932c 2000 0000 0000     6.......,.. ....
 802806c:	0000 0000 0136 0000 b1d8 0802 9330 2000     ....6.......0.. 
	...
 8028084:	0136 0000 b1e0 0802 9334 2000 0000 0000     6.......4.. ....
 8028094:	0000 0000 0136 0000 b1f4 0802 9338 2000     ....6.......8.. 
	...
 80280ac:	0026 0000 b200 0802 933c 2000 0000 0000     &.......<.. ....
 80280bc:	0000 0000 0026 0000 b20c 0802 9340 2000     ....&.......@.. 
	...
 80280d4:	0026 0000 b218 0802 9344 2000 0000 0000     &.......D.. ....
 80280e4:	0000 0000 0026 0000 b224 0802 9348 2000     ....&...$...H.. 
	...
 80280fc:	0080 0000 b154 0802 0000 0000 0000 0000     ....T...........
 802810c:	0000 0000                                   ....

08028110 <__params_ukf>:
 8028110:	0081 0000 b308 0802 0000 0000 0000 0000     ................
 8028120:	0000 0000 0008 0000 b2f8 0802 0895 2000     ............... 
	...
 8028138:	0008 0000 b4ec 0802 0894 2000 0000 0000     ........... ....
 8028148:	0000 0000 0006 0000 b4fc 0802 085c 2000     ............\.. 
	...
 8028160:	0006 0000 b50c 0802 0860 2000 0000 0000     ........`.. ....
 8028170:	0000 0000 0006 0000 b51c 0802 0864 2000     ............d.. 
	...
 8028188:	0006 0000 b52c 0802 0868 2000 0000 0000     ....,...h.. ....
 8028198:	0000 0000 0006 0000 b53c 0802 086c 2000     ........<...l.. 
	...
 80281b0:	0006 0000 b54c 0802 0870 2000 0000 0000     ....L...p.. ....
 80281c0:	0000 0000 0006 0000 b55c 0802 942c 2000     ........\...,.. 
	...
 80281d8:	0006 0000 b56c 0802 9430 2000 0000 0000     ....l...0.. ....
 80281e8:	0000 0000 0006 0000 b57c 0802 0874 2000     ........|...t.. 
	...
 8028200:	0006 0000 b58c 0802 0878 2000 0000 0000     ........x.. ....
 8028210:	0000 0000 0006 0000 b59c 0802 087c 2000     ............|.. 
	...
 8028228:	0006 0000 b5a8 0802 0880 2000 0000 0000     ........... ....
 8028238:	0000 0000 0006 0000 b5b8 0802 0884 2000     ............... 
	...
 8028250:	0006 0000 b5c8 0802 0888 2000 0000 0000     ........... ....
 8028260:	0000 0000 0006 0000 b5d8 0802 088c 2000     ............... 
	...
 8028278:	0006 0000 b5e8 0802 0890 2000 0000 0000     ........... ....
 8028288:	0000 0000 0006 0000 b5fc 0802 0858 2000     ............X.. 
	...
 80282a0:	0080 0000 b4e0 0802 0000 0000 0000 0000     ................
 80282b0:	0000 0000                                   ....

080282b4 <__params_kalman>:
 80282b4:	0081 0000 b6e8 0802 0000 0000 0000 0000     ................
 80282c4:	0000 0000 0026 0000 b6f0 0802 0900 2000     ....&.......... 
	...
 80282dc:	0026 0000 b6f8 0802 0904 2000 0000 0000     &.......... ....
 80282ec:	0000 0000 0080 0000 b700 0802 0000 0000     ................
	...

08028304 <__params_posCtrlIndi>:
 8028304:	0081 0000 b934 0802 0000 0000 0000 0000     ....4...........
 8028314:	0000 0000 0006 0000 b940 0802 09c8 2000     ........@...... 
	...
 802832c:	0006 0000 b948 0802 09cc 2000 0000 0000     ....H...... ....
 802833c:	0000 0000 0006 0000 b950 0802 09d0 2000     ........P...... 
	...
 8028354:	0006 0000 b958 0802 09d4 2000 0000 0000     ....X...... ....
 8028364:	0000 0000 0006 0000 b960 0802 09d8 2000     ........`...... 
	...
 802837c:	0006 0000 b968 0802 09dc 2000 0000 0000     ....h...... ....
 802838c:	0000 0000 0006 0000 b970 0802 09e0 2000     ........p...... 
	...
 80283a4:	0080 0000 b97c 0802 0000 0000 0000 0000     ....|...........
 80283b4:	0000 0000                                   ....

080283b8 <__params_velCtlPid>:
 80283b8:	0081 0000 bbfc 0802 0000 0000 0000 0000     ................
 80283c8:	0000 0000 0116 0000 bc08 0802 0bc4 2000     ............... 
	...
 80283e0:	0116 0000 bc10 0802 0bc8 2000 0000 0000     ........... ....
 80283f0:	0000 0000 0116 0000 bc18 0802 0bcc 2000     ............... 
	...
 8028408:	0116 0000 bc20 0802 0bd0 2000 0000 0000     .... ...... ....
 8028418:	0000 0000 0116 0000 bc28 0802 0c30 2000     ........(...0.. 
	...
 8028430:	0116 0000 bc30 0802 0c34 2000 0000 0000     ....0...4.. ....
 8028440:	0000 0000 0116 0000 bc38 0802 0c38 2000     ........8...8.. 
	...
 8028458:	0116 0000 bc40 0802 0c3c 2000 0000 0000     ....@...<.. ....
 8028468:	0000 0000 0116 0000 bc48 0802 0c9c 2000     ........H...... 
	...
 8028480:	0116 0000 bc50 0802 0ca0 2000 0000 0000     ....P...... ....
 8028490:	0000 0000 0116 0000 bc58 0802 0ca4 2000     ........X...... 
	...
 80284a8:	0116 0000 bc60 0802 0ca8 2000 0000 0000     ....`...... ....
 80284b8:	0000 0000 0080 0000 bc68 0802 0000 0000     ........h.......
	...

080284d0 <__params_posCtlPid>:
 80284d0:	0081 0000 bc78 0802 0000 0000 0000 0000     ....x...........
 80284e0:	0000 0000 0116 0000 bc84 0802 0d08 2000     ............... 
	...
 80284f8:	0116 0000 bc88 0802 0d0c 2000 0000 0000     ........... ....
 8028508:	0000 0000 0116 0000 bc8c 0802 0d10 2000     ............... 
	...
 8028520:	0116 0000 bc90 0802 0d14 2000 0000 0000     ........... ....
 8028530:	0000 0000 0116 0000 bc98 0802 0d74 2000     ............t.. 
	...
 8028548:	0116 0000 bc9c 0802 0d78 2000 0000 0000     ........x.. ....
 8028558:	0000 0000 0116 0000 bca0 0802 0d7c 2000     ............|.. 
	...
 8028570:	0116 0000 bca4 0802 0d80 2000 0000 0000     ........... ....
 8028580:	0000 0000 0116 0000 bcac 0802 0de0 2000     ............... 
	...
 8028598:	0116 0000 bcb0 0802 0de4 2000 0000 0000     ........... ....
 80285a8:	0000 0000 0116 0000 bcb4 0802 0de8 2000     ............... 
	...
 80285c0:	0116 0000 bcb8 0802 0dec 2000 0000 0000     ........... ....
 80285d0:	0000 0000 0119 0000 bcc0 0802 0e38 2000     ............8.. 
	...
 80285e8:	0119 0000 bccc 0802 0e3a 2000 0000 0000     ........:.. ....
 80285f8:	0000 0000 0116 0000 bcd8 0802 0b84 2000     ............... 
	...
 8028610:	0116 0000 bce0 0802 0b88 2000 0000 0000     ........... ....
 8028620:	0000 0000 0116 0000 bce8 0802 0b8c 2000     ............... 
	...
 8028638:	0116 0000 bcf0 0802 0b90 2000 0000 0000     ........... ....
 8028648:	0000 0000 0116 0000 bcf8 0802 0b94 2000     ............... 
	...
 8028660:	0080 0000 bd00 0802 0000 0000 0000 0000     ................
 8028670:	0000 0000                                   ....

08028674 <__params_posEstAlt>:
 8028674:	0081 0000 bd10 0802 0000 0000 0000 0000     ................
 8028684:	0000 0000 0136 0000 bd4c 0802 0e48 2000     ....6...L...H.. 
	...
 802869c:	0136 0000 bd58 0802 0e44 2000 0000 0000     6...X...D.. ....
 80286ac:	0000 0000 0116 0000 bd64 0802 0e4c 2000     ........d...L.. 
	...
 80286c4:	0116 0000 bd70 0802 0e54 2000 0000 0000     ....p...T.. ....
 80286d4:	0000 0000 0136 0000 bd7c 0802 0e50 2000     ....6...|...P.. 
	...
 80286ec:	0080 0000 bd3c 0802 0000 0000 0000 0000     ....<...........
 80286fc:	0000 0000                                   ....

08028700 <__params_stabilizer>:
 8028700:	0081 0000 be48 0802 0000 0000 0000 0000     ....H...........
 8028710:	0000 0000 0028 0000 be54 0802 aa0e 2000     ....(...T...... 
	...
 8028728:	0080 0000 be5c 0802 0000 0000 0000 0000     ....\...........
 8028738:	0000 0000                                   ....

0802873c <__params_system>:
 802873c:	0081 0000 be6c 0802 0000 0000 0000 0000     ....l...........
 802874c:	0000 0000 0020 0000 be74 0802 aa0f 2000     .... ...t...... 
	...
 8028764:	0080 0000 be78 0802 0000 0000 0000 0000     ....x...........
 8028774:	0000 0000                                   ....

08028778 <__params_supervisor>:
 8028778:	0081 0000 be84 0802 0000 0000 0000 0000     ................
 8028788:	0000 0000 0008 0000 bea8 0802 aa20 2000     ............ .. 
	...
 80287a0:	0080 0000 be98 0802 0000 0000 0000 0000     ................
 80287b0:	0000 0000                                   ....

080287b4 <__params_system>:
 80287b4:	0081 0000 c370 0802 0000 0000 0000 0000     ....p...........
 80287c4:	0000 0000 0028 0000 c378 0802 c26e 2000     ....(...x...n.. 
	...
 80287dc:	0080 0000 c384 0802 0000 0000 0000 0000     ................
 80287ec:	0000 0000                                   ....

080287f0 <__params_usec>:
 80287f0:	0081 0000 c3b8 0802 0000 0000 0000 0000     ................
 8028800:	0000 0000 0008 0000 c3c0 0802 c2a5 2000     ............... 
 8028810:	4069 0801 0000 0000 0080 0000 c3c8 0802     i@..............
	...

0802882c <__params_firmware>:
 802882c:	0081 0000 c3fc 0802 0000 0000 0000 0000     ................
 802883c:	0000 0000 006a 0000 c408 0802 d92c 0802     ....j.......,...
	...
 8028854:	0069 0000 c414 0802 d930 0802 0000 0000     i.......0.......
 8028864:	0000 0000 0068 0000 c420 0802 d928 0802     ....h... ...(...
	...
 802887c:	0080 0000 c42c 0802 0000 0000 0000 0000     ....,...........
 802888c:	0000 0000                                   ....

08028890 <__logs_ext_pos>:
 8028890:	0081 0000 9b50 0802 0000 0000 0007 0000     ....P...........
 80288a0:	9b58 0802 7f9c 2000 0007 0000 9b5c 0802     X...... ....\...
 80288b0:	7fa0 2000 0007 0000 9b60 0802 7fa4 2000     ... ....`...... 
 80288c0:	0080 0000 9b64 0802 0000 0000               ....d.......

080288cc <__logs_locSrv>:
 80288cc:	0081 0000 9b74 0802 0000 0000 0027 0000     ....t.......'...
 80288dc:	9b7c 0802 7fb0 2000 0027 0000 9b80 0802     |...... '.......
 80288ec:	7fb4 2000 0027 0000 9b84 0802 7fb8 2000     ... '.......... 
 80288fc:	0027 0000 9b88 0802 7fbc 2000 0027 0000     '.......... '...
 802890c:	9b8c 0802 7fc0 2000 0027 0000 9b90 0802     ....... '.......
 802891c:	7fc4 2000 0027 0000 9b94 0802 7fc8 2000     ... '.......... 
 802892c:	0080 0000 9b98 0802 0000 0000               ............

08028938 <__logs_locSrvZ>:
 8028938:	0081 0000 9ba4 0802 0000 0000 0022 0000     ............"...
 8028948:	9bac 0802 7fd8 2000 0080 0000 9bb4 0802     ....... ........
 8028958:	0000 0000                                   ....

0802895c <__logs_radio>:
 802895c:	0081 0000 9d14 0802 0000 0000 0021 0000     ............!...
 802896c:	9d1c 0802 8075 2000 0021 0000 9d24 0802     ....u.. !...$...
 802897c:	8076 2000 0080 0000 9d30 0802 0000 0000     v.. ....0.......

0802898c <__logs_memTst>:
 802898c:	0081 0000 a090 0802 0000 0000 0003 0000     ................
 802899c:	a0ac 0802 81b8 2000 0080 0000 a0a0 0802     ....... ........
 80289ac:	0000 0000                                   ....

080289b0 <__logs_pm>:
 80289b0:	0081 0000 a0bc 0802 0000 0000 0027 0000     ............'...
 80289c0:	a0c0 0802 8214 2000 0002 0000 a0c8 0802     ....... ........
 80289d0:	8218 2000 0007 0000 a0d0 0802 8220 2000     ... ........ .. 
 80289e0:	0002 0000 a0d8 0802 8224 2000 0007 0000     ........$.. ....
 80289f0:	a0e4 0802 822c 2000 0007 0000 a0ec 0802     ....,.. ........
 8028a00:	8249 2000 0024 0000 a0fc 0802 8241 2000     I.. $.......A.. 
 8028a10:	0021 0000 a104 0802 824d 2000 0080 0000     !.......M.. ....
 8028a20:	a114 0802 0000 0000                         ........

08028a28 <__logs_pid_attitude>:
 8028a28:	0081 0000 a7fc 0802 0000 0000 0007 0000     ................
 8028a38:	a80c 0802 0424 2000 0007 0000 a818 0802     ....$.. ........
 8028a48:	0428 2000 0007 0000 a824 0802 042c 2000     (.. ....$...,.. 
 8028a58:	0007 0000 a830 0802 0430 2000 0007 0000     ....0...0.. ....
 8028a68:	a83c 0802 0484 2000 0007 0000 a848 0802     <...... ....H...
 8028a78:	0488 2000 0007 0000 a854 0802 048c 2000     ... ....T...... 
 8028a88:	0007 0000 a860 0802 0490 2000 0007 0000     ....`...... ....
 8028a98:	a86c 0802 04e4 2000 0007 0000 a878 0802     l...... ....x...
 8028aa8:	04e8 2000 0007 0000 a884 0802 04ec 2000     ... ........... 
 8028ab8:	0007 0000 a890 0802 04f0 2000 0080 0000     ........... ....
 8028ac8:	a89c 0802 0000 0000                         ........

08028ad0 <__logs_pid_rate>:
 8028ad0:	0081 0000 a8b0 0802 0000 0000 0007 0000     ................
 8028ae0:	a80c 0802 0304 2000 0007 0000 a818 0802     ....... ........
 8028af0:	0308 2000 0007 0000 a824 0802 030c 2000     ... ....$...... 
 8028b00:	0007 0000 a830 0802 0310 2000 0007 0000     ....0...... ....
 8028b10:	a83c 0802 0364 2000 0007 0000 a848 0802     <...d.. ....H...
 8028b20:	0368 2000 0007 0000 a854 0802 036c 2000     h.. ....T...l.. 
 8028b30:	0007 0000 a860 0802 0370 2000 0007 0000     ....`...p.. ....
 8028b40:	a86c 0802 03c4 2000 0007 0000 a878 0802     l...... ....x...
 8028b50:	03c8 2000 0007 0000 a884 0802 03cc 2000     ... ........... 
 8028b60:	0007 0000 a890 0802 03d0 2000 0080 0000     ........... ....
 8028b70:	a8bc 0802 0000 0000                         ........

08028b78 <__logs_ctrlINDI>:
 8028b78:	0081 0000 aa78 0802 0000 0000 0007 0000     ....x...........
 8028b88:	ab70 0802 0548 2000 0007 0000 ab7c 0802     p...H.. ....|...
 8028b98:	0564 2000 0007 0000 ab88 0802 0568 2000     d.. ........h.. 
 8028ba8:	0007 0000 ab94 0802 056c 2000 0007 0000     ........l.. ....
 8028bb8:	ab9c 0802 91c4 2000 0007 0000 aba4 0802     ....... ........
 8028bc8:	91c4 2000 0007 0000 abac 0802 91c4 2000     ... ........... 
 8028bd8:	0007 0000 abb4 0802 0570 2000 0007 0000     ........p.. ....
 8028be8:	abc0 0802 0574 2000 0007 0000 abcc 0802     ....t.. ........
 8028bf8:	0578 2000 0007 0000 abd8 0802 0558 2000     x.. ........X.. 
 8028c08:	0007 0000 abe0 0802 055c 2000 0007 0000     ........\.. ....
 8028c18:	abe8 0802 0560 2000 0007 0000 abf0 0802     ....`.. ........
 8028c28:	054c 2000 0007 0000 ac00 0802 0550 2000     L.. ........P.. 
 8028c38:	0007 0000 ac10 0802 0554 2000 0007 0000     ........T.. ....
 8028c48:	ac20 0802 057c 2000 0007 0000 ac2c 0802      ...|.. ....,...
 8028c58:	0580 2000 0007 0000 ac38 0802 0584 2000     ... ....8...... 
 8028c68:	0007 0000 ac44 0802 05a0 2000 0007 0000     ....D...... ....
 8028c78:	ac4c 0802 05c0 2000 0007 0000 ac54 0802     L...... ....T...
 8028c88:	05e0 2000 0007 0000 ac5c 0802 0600 2000     ... ....\...... 
 8028c98:	0007 0000 ac68 0802 0620 2000 0007 0000     ....h... .. ....
 8028ca8:	ac74 0802 0640 2000 0007 0000 ac80 0802     t...@.. ........
 8028cb8:	91b8 2000 0007 0000 ac84 0802 91bc 2000     ... ........... 
 8028cc8:	0007 0000 ac88 0802 91c0 2000 0080 0000     ........... ....
 8028cd8:	ab60 0802 0000 0000                         `.......

08028ce0 <__logs_ctrlMel>:
 8028ce0:	0081 0000 ac8c 0802 0000 0000 0007 0000     ................
 8028cf0:	ad58 0802 0704 2000 0007 0000 ad64 0802     X...... ....d...
 8028d00:	0708 2000 0007 0000 ad70 0802 070c 2000     ... ....p...... 
 8028d10:	0007 0000 ad7c 0802 0710 2000 0007 0000     ....|...... ....
 8028d20:	ad84 0802 0714 2000 0007 0000 ad8c 0802     ....... ........
 8028d30:	0718 2000 0007 0000 ad94 0802 071c 2000     ... ........... 
 8028d40:	0007 0000 ad9c 0802 0720 2000 0007 0000     ........ .. ....
 8028d50:	ada4 0802 06f8 2000 0007 0000 ada8 0802     ....... ........
 8028d60:	06fc 2000 0007 0000 adac 0802 0700 2000     ... ........... 
 8028d70:	0007 0000 adb0 0802 06d0 2000 0007 0000     ........... ....
 8028d80:	adb8 0802 06d4 2000 0007 0000 adc0 0802     ....... ........
 8028d90:	06d8 2000 0080 0000 ad48 0802 0000 0000     ... ....H.......

08028da0 <__logs_controller>:
 8028da0:	0081 0000 adc8 0802 0000 0000 0007 0000     ................
 8028db0:	add4 0802 91f4 2000 0007 0000 ade0 0802     ....... ........
 8028dc0:	91f8 2000 0007 0000 adec 0802 91fc 2000     ... ........... 
 8028dd0:	0007 0000 adf8 0802 9200 2000 0007 0000     ........... ....
 8028de0:	ae00 0802 9204 2000 0007 0000 ae08 0802     ....... ........
 8028df0:	9208 2000 0007 0000 ae10 0802 920c 2000     ... ........... 
 8028e00:	0007 0000 ae18 0802 9210 2000 0007 0000     ........... ....
 8028e10:	ae20 0802 91f0 2000 0007 0000 ae30 0802      ...... ....0...
 8028e20:	91d4 2000 0007 0000 ae38 0802 91d8 2000     ... ....8...... 
 8028e30:	0007 0000 ae40 0802 91dc 2000 0007 0000     ....@...... ....
 8028e40:	ae44 0802 91e4 2000 0007 0000 ae50 0802     D...... ....P...
 8028e50:	91e8 2000 0007 0000 ae5c 0802 91ec 2000     ... ....\...... 
 8028e60:	0080 0000 ae64 0802 0000 0000               ....d.......

08028e6c <__logs_estimator>:
 8028e6c:	0081 0000 afd0 0802 0000 0000 0047 0000     ............G...
 8028e7c:	afdc 0802 0724 2000 0047 0000 afe4 0802     ....$.. G.......
 8028e8c:	0740 2000 0080 0000 afec 0802 0000 0000     @.. ............

08028e9c <__logs_kalman>:
 8028e9c:	0081 0000 b090 0802 0000 0000 0007 0000     ................
 8028eac:	b098 0802 36dc 2000 0007 0000 b0a0 0802     .....6. ........
 8028ebc:	36e0 2000 0007 0000 b0a8 0802 36e4 2000     .6. .........6. 
 8028ecc:	0007 0000 b0b0 0802 36e8 2000 0007 0000     .........6. ....
 8028edc:	b0b8 0802 36ec 2000 0007 0000 b0c0 0802     .....6. ........
 8028eec:	36f0 2000 0007 0000 b0c8 0802 36f4 2000     .6. .........6. 
 8028efc:	0007 0000 b0d0 0802 36f8 2000 0007 0000     .........6. ....
 8028f0c:	b0d8 0802 36fc 2000 0007 0000 b0e0 0802     .....6. ........
 8028f1c:	3734 2000 0007 0000 b0e8 0802 375c 2000     47. ........\7. 
 8028f2c:	0007 0000 b0f0 0802 3784 2000 0007 0000     .........7. ....
 8028f3c:	b0f8 0802 37ac 2000 0007 0000 b100 0802     .....7. ........
 8028f4c:	37d4 2000 0007 0000 b108 0802 37fc 2000     .7. .........7. 
 8028f5c:	0007 0000 b110 0802 3824 2000 0007 0000     ........$8. ....
 8028f6c:	b118 0802 384c 2000 0007 0000 b120 0802     ....L8. .... ...
 8028f7c:	3874 2000 0007 0000 b128 0802 3700 2000     t8. ....(....7. 
 8028f8c:	0007 0000 b12c 0802 3704 2000 0007 0000     ....,....7. ....
 8028f9c:	b130 0802 3708 2000 0007 0000 b134 0802     0....7. ....4...
 8028fac:	370c 2000 0047 0000 b138 0802 075c 2000     .7. G...8...\.. 
 8028fbc:	0047 0000 b144 0802 0778 2000 0047 0000     G...D...x.. G...
 8028fcc:	b14c 0802 0794 2000 0080 0000 b154 0802     L...... ....T...
 8028fdc:	0000 0000                                   ....

08028fe0 <__logs_outlierf>:
 8028fe0:	0081 0000 b160 0802 0000 0000 0006 0000     ....`...........
 8028ff0:	b16c 0802 9300 2000 0080 0000 b174 0802     l...... ....t...
 8029000:	0000 0000                                   ....

08029004 <__logs_nav_ukf_states>:
 8029004:	0081 0000 b330 0802 0000 0000 0080 0000     ....0...........
 8029014:	b340 0802 0000 0000                         @.......

0802901c <__logs_navFilter>:
 802901c:	0081 0000 b354 0802 0000 0000 0007 0000     ....T...........
 802902c:	b360 0802 93bc 2000 0007 0000 b368 0802     `...... ....h...
 802903c:	93c0 2000 0007 0000 b370 0802 93c4 2000     ... ....p...... 
 802904c:	0007 0000 b378 0802 9448 2000 0007 0000     ....x...H.. ....
 802905c:	b380 0802 944c 2000 0007 0000 b388 0802     ....L.. ........
 802906c:	9450 2000 0007 0000 b390 0802 9454 2000     P.. ........T.. 
 802907c:	0007 0000 b398 0802 9458 2000 0007 0000     ........X.. ....
 802908c:	b3a0 0802 945c 2000 0007 0000 b3a8 0802     ....\.. ........
 802909c:	9460 2000 0007 0000 b3ac 0802 9464 2000     `.. ........d.. 
 80290ac:	0007 0000 b3b4 0802 9468 2000 0007 0000     ........h.. ....
 80290bc:	b3b8 0802 9488 2000 0007 0000 b3bc 0802     ....... ........
 80290cc:	948c 2000 0007 0000 b3c0 0802 9490 2000     ... ........... 
 80290dc:	0003 0000 b3c8 0802 9444 2000 0007 0000     ........D.. ....
 80290ec:	b3d4 0802 93e4 2000 0007 0000 b3dc 0802     ....... ........
 80290fc:	9424 2000 0001 0000 b3ec 0802 9428 2000     $.. ........(.. 
 802910c:	0080 0000 b3f8 0802 0000 0000               ............

08029118 <__logs_sensorFilter>:
 8029118:	0081 0000 b408 0802 0000 0000 0007 0000     ................
 8029128:	b418 0802 9474 2000 0007 0000 b420 0802     ....t.. .... ...
 8029138:	9478 2000 0007 0000 b428 0802 946c 2000     x.. ....(...l.. 
 8029148:	0007 0000 b434 0802 9470 2000 0007 0000     ....4...p.. ....
 8029158:	b440 0802 947c 2000 0007 0000 b44c 0802     @...|.. ....L...
 8029168:	9480 2000 0007 0000 b458 0802 9484 2000     ... ....X...... 
 8029178:	0007 0000 b464 0802 9438 2000 0007 0000     ....d...8.. ....
 8029188:	b474 0802 943c 2000 0007 0000 b484 0802     t...<.. ........
 8029198:	9434 2000 0007 0000 b490 0802 9440 2000     4.. ........@.. 
 80291a8:	0080 0000 b498 0802 0000 0000               ............

080291b4 <__logs_ukf>:
 80291b4:	0081 0000 b308 0802 0000 0000 0047 0000     ............G...
 80291c4:	b4ac 0802 07b0 2000 0047 0000 b4b8 0802     ....... G.......
 80291d4:	07cc 2000 0047 0000 b4c0 0802 07e8 2000     ... G.......... 
 80291e4:	0047 0000 b4c8 0802 0804 2000 0047 0000     G.......... G...
 80291f4:	b4d0 0802 0820 2000 0047 0000 b4d8 0802     .... .. G.......
 8029204:	083c 2000 0080 0000 b4e0 0802 0000 0000     <.. ............

08029214 <__logs_kalman_pred>:
 8029214:	0081 0000 b7f4 0802 0000 0000 0007 0000     ................
 8029224:	b800 0802 9f8c 2000 0007 0000 b808 0802     ....... ........
 8029234:	9f90 2000 0007 0000 b810 0802 9f94 2000     ... ........... 
 8029244:	0007 0000 b818 0802 9f98 2000 0080 0000     ........... ....
 8029254:	b820 0802 0000 0000                          .......

0802925c <__logs_posCtrlIndi>:
 802925c:	0081 0000 b934 0802 0000 0000 0007 0000     ....4...........
 802926c:	b990 0802 a95c 2000 0007 0000 b99c 0802     ....\.. ........
 802927c:	a960 2000 0007 0000 b9a8 0802 a964 2000     `.. ........d.. 
 802928c:	0007 0000 b9b4 0802 a950 2000 0007 0000     ........P.. ....
 802929c:	b9bc 0802 a954 2000 0007 0000 b9c4 0802     ....T.. ........
 80292ac:	a958 2000 0007 0000 b9cc 0802 a968 2000     X.. ........h.. 
 80292bc:	0007 0000 b9d8 0802 a96c 2000 0007 0000     ........l.. ....
 80292cc:	b9e4 0802 a970 2000 0007 0000 b9f0 0802     ....p.. ........
 80292dc:	0b48 2000 0007 0000 b9fc 0802 0b4c 2000     H.. ........L.. 
 80292ec:	0007 0000 ba08 0802 0b50 2000 0007 0000     ........P.. ....
 80292fc:	ba14 0802 0b54 2000 0007 0000 ba20 0802     ....T.. .... ...
 802930c:	0b58 2000 0007 0000 ba2c 0802 0b5c 2000     X.. ....,...\.. 
 802931c:	0007 0000 ba38 0802 0b0c 2000 0007 0000     ....8...... ....
 802932c:	ba44 0802 0b10 2000 0007 0000 ba50 0802     D...... ....P...
 802933c:	0b14 2000 0007 0000 ba5c 0802 0b24 2000     ... ....\...$.. 
 802934c:	0007 0000 ba64 0802 0b28 2000 0007 0000     ....d...(.. ....
 802935c:	ba6c 0802 0b2c 2000 0007 0000 ba74 0802     l...,.. ....t...
 802936c:	0b30 2000 0007 0000 ba7c 0802 0b34 2000     0.. ....|...4.. 
 802937c:	0007 0000 ba84 0802 0b38 2000 0007 0000     ........8.. ....
 802938c:	ba8c 0802 0b3c 2000 0007 0000 ba94 0802     ....<.. ........
 802939c:	0b40 2000 0007 0000 ba9c 0802 0b44 2000     @.. ........D.. 
 80293ac:	0007 0000 baa4 0802 0b18 2000 0007 0000     ........... ....
 80293bc:	bab0 0802 0b1c 2000 0007 0000 babc 0802     ....... ........
 80293cc:	0b20 2000 0007 0000 bac8 0802 0b6c 2000      .. ........l.. 
 80293dc:	0007 0000 bad4 0802 0b70 2000 0007 0000     ........p.. ....
 80293ec:	bae0 0802 0b74 2000 0007 0000 bae8 0802     ....t.. ........
 80293fc:	0b78 2000 0007 0000 baf0 0802 0b7c 2000     x.. ........|.. 
 802940c:	0007 0000 bafc 0802 0b80 2000 0007 0000     ........... ....
 802941c:	bb0c 0802 0b60 2000 0007 0000 bb14 0802     ....`.. ........
 802942c:	0b64 2000 0080 0000 b97c 0802 0000 0000     d.. ....|.......

0802943c <__logs_posCtl>:
 802943c:	0081 0000 bb20 0802 0000 0000 0007 0000     .... ...........
 802944c:	bb28 0802 0bb0 2000 0007 0000 bb34 0802     (...... ....4...
 802945c:	0c1c 2000 0007 0000 bb40 0802 0c88 2000     ... ....@...... 
 802946c:	0007 0000 bb4c 0802 0cf4 2000 0007 0000     ....L...... ....
 802947c:	bb54 0802 0d60 2000 0007 0000 bb5c 0802     T...`.. ....\...
 802948c:	0dcc 2000 0007 0000 bb64 0802 a97c 2000     ... ....d...|.. 
 802949c:	0007 0000 bb6c 0802 a980 2000 0007 0000     ....l...... ....
 80294ac:	bb74 0802 a974 2000 0007 0000 bb7c 0802     t...t.. ....|...
 80294bc:	a978 2000 0007 0000 bb84 0802 0d18 2000     x.. ........... 
 80294cc:	0007 0000 bb88 0802 0d1c 2000 0007 0000     ........... ....
 80294dc:	bb8c 0802 0d20 2000 0007 0000 bb90 0802     .... .. ........
 80294ec:	0d24 2000 0007 0000 bb94 0802 0d84 2000     $.. ........... 
 80294fc:	0007 0000 bb98 0802 0d88 2000 0007 0000     ........... ....
 802950c:	bb9c 0802 0d8c 2000 0007 0000 bba0 0802     ....... ........
 802951c:	0d90 2000 0007 0000 bba4 0802 0df0 2000     ... ........... 
 802952c:	0007 0000 bba8 0802 0df4 2000 0007 0000     ........... ....
 802953c:	bbac 0802 0df8 2000 0007 0000 bbb0 0802     ....... ........
 802954c:	0dfc 2000 0007 0000 bbb4 0802 0bd4 2000     ... ........... 
 802955c:	0007 0000 bbb8 0802 0bd8 2000 0007 0000     ........... ....
 802956c:	bbbc 0802 0bdc 2000 0007 0000 bbc0 0802     ....... ........
 802957c:	0be0 2000 0007 0000 bbc8 0802 0c40 2000     ... ........@.. 
 802958c:	0007 0000 bbcc 0802 0c44 2000 0007 0000     ........D.. ....
 802959c:	bbd0 0802 0c48 2000 0007 0000 bbd4 0802     ....H.. ........
 80295ac:	0c4c 2000 0007 0000 bbdc 0802 0cac 2000     L.. ........... 
 80295bc:	0007 0000 bbe0 0802 0cb0 2000 0007 0000     ........... ....
 80295cc:	bbe4 0802 0cb4 2000 0007 0000 bbe8 0802     ....... ........
 80295dc:	0cb8 2000 0080 0000 bbf0 0802 0000 0000     ... ............

080295ec <__logs_posEstAlt>:
 80295ec:	0081 0000 bd10 0802 0000 0000 0007 0000     ................
 80295fc:	bd1c 0802 0e3c 2000 0007 0000 bd28 0802     ....<.. ....(...
 802960c:	0e58 2000 0007 0000 bd30 0802 0e40 2000     X.. ....0...@.. 
 802961c:	0080 0000 bd3c 0802 0000 0000               ....<.......

08029628 <__logs_sys>:
 8029628:	0081 0000 be18 0802 0000 0000 0021 0000     ............!...
 8029638:	be1c 0802 aa08 2000 0021 0000 be24 0802     ....... !...$...
 8029648:	aa09 2000 0021 0000 be30 0802 aa0a 2000     ... !...0...... 
 8029658:	0080 0000 be3c 0802 0000 0000               ....<.......

08029664 <__logs_supervisor>:
 8029664:	0081 0000 be84 0802 0000 0000 0002 0000     ................
 8029674:	be90 0802 aa0c 2000 0080 0000 be98 0802     ....... ........
 8029684:	0000 0000                                   ....

08029688 <eventTrigger_estTDOA>:
 8029688:	ae8c 0802 d87c 0802 0003 0000 9218 2000     ....|.......... 
 8029698:	0006 0000                                   ....

0802969c <eventTrigger_estPosition>:
 802969c:	ae9c 0802 d894 0802 0001 0000 9220 2000     ............ .. 
 80296ac:	0001 0000                                   ....

080296b0 <eventTrigger_estPose>:
 80296b0:	aea8 0802 0000 0000 0000 0000 0000 0000     ................
 80296c0:	0000 0000                                   ....

080296c4 <eventTrigger_estDistance>:
 80296c4:	aec0 0802 d89c 0802 0002 0000 9224 2000     ............$.. 
 80296d4:	0005 0000                                   ....

080296d8 <eventTrigger_estTOF>:
 80296d8:	aecc 0802 0000 0000 0000 0000 0000 0000     ................
 80296e8:	0000 0000                                   ....

080296ec <eventTrigger_estAbsoluteHeight>:
 80296ec:	aed4 0802 0000 0000 0000 0000 0000 0000     ................
 80296fc:	0000 0000                                   ....

08029700 <eventTrigger_estFlow>:
 8029700:	aee8 0802 0000 0000 0000 0000 0000 0000     ................
 8029710:	0000 0000                                   ....

08029714 <eventTrigger_estYawError>:
 8029714:	aefc 0802 d8ac 0802 0001 0000 922c 2000     ............,.. 
 8029724:	0004 0000                                   ....

08029728 <eventTrigger_estSweepAngle>:
 8029728:	af3c 0802 d8b4 0802 0005 0000 9230 2000     <...........0.. 
 8029738:	000b 0000                                   ....

0802973c <eventTrigger_estGyroscope>:
 802973c:	af4c 0802 0000 0000 0000 0000 0000 0000     L...............
 802974c:	0000 0000                                   ....

08029750 <eventTrigger_estAcceleration>:
 8029750:	af5c 0802 0000 0000 0000 0000 0000 0000     \...............
 8029760:	0000 0000                                   ....

08029764 <eventTrigger_estBarometer>:
 8029764:	af6c 0802 0000 0000 0000 0000 0000 0000     l...............
 8029774:	0000 0000                                   ....
