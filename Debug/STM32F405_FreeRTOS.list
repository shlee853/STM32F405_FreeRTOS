
STM32F405_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a780  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c8c  0800a910  0800a910  0001a910  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b59c  0800b59c  0002036c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b59c  0800b59c  0001b59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5a4  0800b5a4  0002036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5a4  0800b5a4  0001b5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5a8  0800b5a8  0001b5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800b5ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmbss       000000b4  20000290  0800b83c  00020290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .nzds         00000028  20000344  0800b8f0  00020344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ccmram       00000000  10000000  10000000  0002036c  2**0
                  CONTENTS
 12 .bss          000053cc  2000036c  2000036c  0002036c  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  20005738  20005738  0002036c  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  0002036c  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  0002039c  2**0
                  CONTENTS, READONLY
 16 .debug_info   0001dd83  00000000  00000000  000203df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00004fa2  00000000  00000000  0003e162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001928  00000000  00000000  00043108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001339  00000000  00000000  00044a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000aa61  00000000  00000000  00045d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0001e5b9  00000000  00000000  000507ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000e0bed  00000000  00000000  0006ed83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  000077e0  00000000  00000000  0014f970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  00157150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000036c 	.word	0x2000036c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8f8 	.word	0x0800a8f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000370 	.word	0x20000370
 80001cc:	0800a8f8 	.word	0x0800a8f8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	601a      	str	r2, [r3, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f023 0210 	bic.w	r2, r3, #16
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	605a      	str	r2, [r3, #4]
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d101      	bne.n	8000f22 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e000      	b.n	8000f24 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d101      	bne.n	8000f48 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f44:	2301      	movs	r3, #1
 8000f46:	e000      	b.n	8000f4a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	330c      	adds	r3, #12
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b2db      	uxtb	r3, r3
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	330c      	adds	r3, #12
 8000f82:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	78fa      	ldrb	r2, [r7, #3]
 8000f88:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f8a:	bf00      	nop
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	40023800 	.word	0x40023800

08000fc8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fd4:	4907      	ldr	r1, [pc, #28]	; (8000ff4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	619a      	str	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	041a      	lsls	r2, r3, #16
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	619a      	str	r2, [r3, #24]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b090      	sub	sp, #64	; 0x40
 8001038:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	2228      	movs	r2, #40	; 0x28
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f007 fdac 	bl	8008ba0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001058:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800105c:	f7ff ffb4 	bl	8000fc8 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001060:	2001      	movs	r0, #1
 8001062:	f7ff ff99 	bl	8000f98 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001066:	2004      	movs	r0, #4
 8001068:	f7ff ff96 	bl	8000f98 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800106c:	23e0      	movs	r3, #224	; 0xe0
 800106e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001070:	2302      	movs	r3, #2
 8001072:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001080:	2305      	movs	r3, #5
 8001082:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	463b      	mov	r3, r7
 8001086:	4619      	mov	r1, r3
 8001088:	4825      	ldr	r0, [pc, #148]	; (8001120 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800108a:	f003 ffb2 	bl	8004ff2 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001092:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001096:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800109c:	2302      	movs	r3, #2
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010a0:	2301      	movs	r3, #1
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80010aa:	2310      	movs	r3, #16
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010ae:	2300      	movs	r3, #0
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010b6:	230a      	movs	r3, #10
 80010b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 80010ba:	f107 0318 	add.w	r3, r7, #24
 80010be:	4619      	mov	r1, r3
 80010c0:	4818      	ldr	r0, [pc, #96]	; (8001124 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80010c2:	f004 f83a 	bl	800513a <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80010c6:	2100      	movs	r1, #0
 80010c8:	4816      	ldr	r0, [pc, #88]	; (8001124 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80010ca:	f7ff ff0b 	bl	8000ee4 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80010ce:	2110      	movs	r1, #16
 80010d0:	4813      	ldr	r0, [pc, #76]	; (8001120 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80010d2:	f7ff ff9f 	bl	8001014 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80010d6:	2310      	movs	r3, #16
 80010d8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010da:	2301      	movs	r3, #1
 80010dc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 80010ea:	463b      	mov	r3, r7
 80010ec:	4619      	mov	r1, r3
 80010ee:	480c      	ldr	r0, [pc, #48]	; (8001120 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80010f0:	f003 ff7f 	bl	8004ff2 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80010f4:	2310      	movs	r3, #16
 80010f6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	4808      	ldr	r0, [pc, #32]	; (8001128 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001106:	f003 ff74 	bl	8004ff2 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800110c:	f7ff feda 	bl	8000ec4 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001110:	2110      	movs	r1, #16
 8001112:	4803      	ldr	r0, [pc, #12]	; (8001120 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001114:	f7ff ff70 	bl	8000ff8 <LL_GPIO_SetOutputPin>
}
 8001118:	bf00      	nop
 800111a:	3740      	adds	r7, #64	; 0x40
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40020000 	.word	0x40020000
 8001124:	40013000 	.word	0x40013000
 8001128:	40020800 	.word	0x40020800

0800112c <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8001136:	bf00      	nop
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <SPI1_SendByte+0x40>)
 800113a:	f7ff fef9 	bl	8000f30 <LL_SPI_IsActiveFlag_TXE>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0f9      	beq.n	8001138 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4619      	mov	r1, r3
 8001148:	4808      	ldr	r0, [pc, #32]	; (800116c <SPI1_SendByte+0x40>)
 800114a:	f7ff ff12 	bl	8000f72 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 800114e:	bf00      	nop
 8001150:	4806      	ldr	r0, [pc, #24]	; (800116c <SPI1_SendByte+0x40>)
 8001152:	f7ff feda 	bl	8000f0a <LL_SPI_IsActiveFlag_RXNE>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f9      	beq.n	8001150 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <SPI1_SendByte+0x40>)
 800115e:	f7ff fefa 	bl	8000f56 <LL_SPI_ReceiveData8>
 8001162:	4603      	mov	r3, r0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40013000 	.word	0x40013000

08001170 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 800117a:	2110      	movs	r1, #16
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <ICM20602_Readbyte+0x3c>)
 800117e:	f7ff ff49 	bl	8001014 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ffce 	bl	800112c <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff ffcb 	bl	800112c <SPI1_SendByte>
 8001196:	4603      	mov	r3, r0
 8001198:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800119a:	2110      	movs	r1, #16
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <ICM20602_Readbyte+0x3c>)
 800119e:	f7ff ff2b 	bl	8000ff8 <LL_GPIO_SetOutputPin>
	
	return val;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40020000 	.word	0x40020000

080011b0 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	460a      	mov	r2, r1
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	4613      	mov	r3, r2
 80011be:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80011c0:	2110      	movs	r1, #16
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <ICM20602_Writebyte+0x40>)
 80011c4:	f7ff ff26 	bl	8001014 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ffab 	bl	800112c <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80011d6:	79bb      	ldrb	r3, [r7, #6]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ffa7 	bl	800112c <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80011de:	2110      	movs	r1, #16
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <ICM20602_Writebyte+0x40>)
 80011e2:	f7ff ff09 	bl	8000ff8 <LL_GPIO_SetOutputPin>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40020000 	.word	0x40020000

080011f4 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001208:	463b      	mov	r3, r7
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001210:	f7ff ff10 	bl	8001034 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8001214:	4833      	ldr	r0, [pc, #204]	; (80012e4 <ICM20602_Initialization+0xf0>)
 8001216:	f007 fb75 	bl	8008904 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 800121a:	2075      	movs	r0, #117	; 0x75
 800121c:	f7ff ffa8 	bl	8001170 <ICM20602_Readbyte>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	2b12      	cmp	r3, #18
 8001228:	d105      	bne.n	8001236 <ICM20602_Initialization+0x42>
	{
		printf("\r\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	4619      	mov	r1, r3
 800122e:	482e      	ldr	r0, [pc, #184]	; (80012e8 <ICM20602_Initialization+0xf4>)
 8001230:	f007 fb68 	bl	8008904 <iprintf>
 8001234:	e012      	b.n	800125c <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	2b12      	cmp	r3, #18
 800123a:	d00f      	beq.n	800125c <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 800123c:	2075      	movs	r0, #117	; 0x75
 800123e:	f7ff ff97 	bl	8001170 <ICM20602_Readbyte>
 8001242:	4603      	mov	r3, r0
 8001244:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	2b12      	cmp	r3, #18
 800124a:	d007      	beq.n	800125c <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	2212      	movs	r2, #18
 8001250:	4619      	mov	r1, r3
 8001252:	4826      	ldr	r0, [pc, #152]	; (80012ec <ICM20602_Initialization+0xf8>)
 8001254:	f007 fb56 	bl	8008904 <iprintf>
			return 1; //ERROR
 8001258:	2301      	movs	r3, #1
 800125a:	e03f      	b.n	80012dc <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 800125c:	2180      	movs	r1, #128	; 0x80
 800125e:	206b      	movs	r0, #107	; 0x6b
 8001260:	f7ff ffa6 	bl	80011b0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001264:	2032      	movs	r0, #50	; 0x32
 8001266:	f001 fa13 	bl	8002690 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 800126a:	2101      	movs	r1, #1
 800126c:	206b      	movs	r0, #107	; 0x6b
 800126e:	f7ff ff9f 	bl	80011b0 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);;
 8001272:	2032      	movs	r0, #50	; 0x32
 8001274:	f001 fa0c 	bl	8002690 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 8001278:	2100      	movs	r1, #0
 800127a:	206c      	movs	r0, #108	; 0x6c
 800127c:	f7ff ff98 	bl	80011b0 <ICM20602_Writebyte>
	HAL_Delay(50);;
 8001280:	2032      	movs	r0, #50	; 0x32
 8001282:	f001 fa05 	bl	8002690 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8001286:	2100      	movs	r1, #0
 8001288:	2019      	movs	r0, #25
 800128a:	f7ff ff91 	bl	80011b0 <ICM20602_Writebyte>
	HAL_Delay(50);;
 800128e:	2032      	movs	r0, #50	; 0x32
 8001290:	f001 f9fe 	bl	8002690 <HAL_Delay>
	
	// Gyro DLPF Config
//	ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001294:	2105      	movs	r1, #5
 8001296:	201a      	movs	r0, #26
 8001298:	f7ff ff8a 	bl	80011b0 <ICM20602_Writebyte>
	HAL_Delay(50);;
 800129c:	2032      	movs	r0, #50	; 0x32
 800129e:	f001 f9f7 	bl	8002690 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 80012a2:	2118      	movs	r1, #24
 80012a4:	201b      	movs	r0, #27
 80012a6:	f7ff ff83 	bl	80011b0 <ICM20602_Writebyte>
	HAL_Delay(50);;
 80012aa:	2032      	movs	r0, #50	; 0x32
 80012ac:	f001 f9f0 	bl	8002690 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80012b0:	2118      	movs	r1, #24
 80012b2:	201c      	movs	r0, #28
 80012b4:	f7ff ff7c 	bl	80011b0 <ICM20602_Writebyte>
	HAL_Delay(50);;
 80012b8:	2032      	movs	r0, #50	; 0x32
 80012ba:	f001 f9e9 	bl	8002690 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80012be:	2103      	movs	r1, #3
 80012c0:	201d      	movs	r0, #29
 80012c2:	f7ff ff75 	bl	80011b0 <ICM20602_Writebyte>
	HAL_Delay(50);;
 80012c6:	2032      	movs	r0, #50	; 0x32
 80012c8:	f001 f9e2 	bl	8002690 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80012cc:	2101      	movs	r1, #1
 80012ce:	2038      	movs	r0, #56	; 0x38
 80012d0:	f7ff ff6e 	bl	80011b0 <ICM20602_Writebyte>
	HAL_Delay(50);;
 80012d4:	2032      	movs	r0, #50	; 0x32
 80012d6:	f001 f9db 	bl	8002690 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	0800a910 	.word	0x0800a910
 80012e8:	0800a928 	.word	0x0800a928
 80012ec:	0800a94c 	.word	0x0800a94c

080012f0 <branch_to_bootloader>:
 * Based from the micropython machine_bootloader function.
 * 
 * @param r0 The register to utilize
 * @param bl_addr The bootloader address to jump to
 */
static void branch_to_bootloader(uint32_t r0, uint32_t bl_addr){
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
    __asm volatile (
 80012fa:	680a      	ldr	r2, [r1, #0]
 80012fc:	f382 8808 	msr	MSP, r2
 8001300:	684a      	ldr	r2, [r1, #4]
 8001302:	4710      	bx	r2
        "msr msp, r2\n"         // get stack pointer
        "ldr r2, [r1, #4]\n"    // get address of destination
        "bx r2\n"               // branch to bootloader
        );
    //unreachable code
    while(1);
 8001304:	e7fe      	b.n	8001304 <branch_to_bootloader+0x14>
	...

08001308 <check_enter_bootloader>:
}

void check_enter_bootloader(){
 8001308:	b5b0      	push	{r4, r5, r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
    uint64_t bl_state = *BL_STATE_PTR;
 800130e:	491d      	ldr	r1, [pc, #116]	; (8001384 <check_enter_bootloader+0x7c>)
 8001310:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001314:	e9c7 0100 	strd	r0, r1, [r7]
    //set to invalid for next boot
    *BL_STATE_PTR = BL_STATE_INVALID;
 8001318:	4c1a      	ldr	r4, [pc, #104]	; (8001384 <check_enter_bootloader+0x7c>)
 800131a:	f04f 0000 	mov.w	r0, #0
 800131e:	f04f 0100 	mov.w	r1, #0
 8001322:	e9c4 0100 	strd	r0, r1, [r4]

    if(BL_STATE_GET_KEY(bl_state) == BL_STATE_KEY && (RCC->CSR & RCC_CSR_SFTRSTF)){
 8001326:	e9d7 4500 	ldrd	r4, r5, [r7]
 800132a:	f04f 0000 	mov.w	r0, #0
 800132e:	f04f 0100 	mov.w	r1, #0
 8001332:	0028      	movs	r0, r5
 8001334:	2100      	movs	r1, #0
 8001336:	f3c0 020b 	ubfx	r2, r0, #0, #12
 800133a:	2300      	movs	r3, #0
 800133c:	4912      	ldr	r1, [pc, #72]	; (8001388 <check_enter_bootloader+0x80>)
 800133e:	4411      	add	r1, r2
 8001340:	430b      	orrs	r3, r1
 8001342:	d11a      	bne.n	800137a <check_enter_bootloader+0x72>
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <check_enter_bootloader+0x84>)
 8001346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d014      	beq.n	800137a <check_enter_bootloader+0x72>

        //remap memory to system flash
//        SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SystemFlash);
    		//위 함수를 아래 함수로 대체
        assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap_SystemFlash));
        SYSCFG->MEMRMP = SYSCFG_MemoryRemap_SystemFlash;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <check_enter_bootloader+0x88>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]

        branch_to_bootloader(BL_STATE_GET_REG(bl_state), BL_STATE_GET_ADDR(bl_state));
 8001356:	683c      	ldr	r4, [r7, #0]
 8001358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	000a      	movs	r2, r1
 8001366:	2300      	movs	r3, #0
 8001368:	4613      	mov	r3, r2
 800136a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800136e:	f023 030f 	bic.w	r3, r3, #15
 8001372:	4619      	mov	r1, r3
 8001374:	4620      	mov	r0, r4
 8001376:	f7ff ffbb 	bl	80012f0 <branch_to_bootloader>
    }
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bdb0      	pop	{r4, r5, r7, pc}
 8001382:	bf00      	nop
 8001384:	2001c000 	.word	0x2001c000
 8001388:	fffffa5b 	.word	0xfffffa5b
 800138c:	40023800 	.word	0x40023800
 8001390:	40013800 	.word	0x40013800

08001394 <ledSetForce>:
    ledSet(i, ledLastState[i]);
  }
}

static void ledSetForce(led_t led, bool value)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	460a      	mov	r2, r1
 800139e:	71fb      	strb	r3, [r7, #7]
 80013a0:	4613      	mov	r3, r2
 80013a2:	71bb      	strb	r3, [r7, #6]
  if (led > LED_NUM)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d832      	bhi.n	8001410 <ledSetForce+0x7c>
  {
    return;
  }

  if (led_polarity[led] == LED_POL_NEG)
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	4a1a      	ldr	r2, [pc, #104]	; (8001418 <ledSetForce+0x84>)
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d10d      	bne.n	80013d2 <ledSetForce+0x3e>
  {
    value = !value;
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	bf14      	ite	ne
 80013bc:	2301      	movne	r3, #1
 80013be:	2300      	moveq	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	f083 0301 	eor.w	r3, r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	71bb      	strb	r3, [r7, #6]
 80013ca:	79bb      	ldrb	r3, [r7, #6]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	71bb      	strb	r3, [r7, #6]
    syslinkSendPacket(&slp);
  }
  else
  {
  */
    if (value)
 80013d2:	79bb      	ldrb	r3, [r7, #6]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00d      	beq.n	80013f4 <ledSetForce+0x60>
    {
      HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_SET);
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4a10      	ldr	r2, [pc, #64]	; (800141c <ledSetForce+0x88>)
 80013dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <ledSetForce+0x8c>)
 80013e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	2201      	movs	r2, #1
 80013ec:	4619      	mov	r1, r3
 80013ee:	f001 fcb3 	bl	8002d58 <HAL_GPIO_WritePin>
 80013f2:	e00e      	b.n	8001412 <ledSetForce+0x7e>
    }
    else
    {
        HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_RESET);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	4a09      	ldr	r2, [pc, #36]	; (800141c <ledSetForce+0x88>)
 80013f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <ledSetForce+0x8c>)
 8001400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001404:	b29b      	uxth	r3, r3
 8001406:	2200      	movs	r2, #0
 8001408:	4619      	mov	r1, r3
 800140a:	f001 fca5 	bl	8002d58 <HAL_GPIO_WritePin>
 800140e:	e000      	b.n	8001412 <ledSetForce+0x7e>
    return;
 8001410:	bf00      	nop
    }

//  }

}
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000030 	.word	0x20000030
 800141c:	20000000 	.word	0x20000000
 8001420:	20000018 	.word	0x20000018

08001424 <ledInit>:
    ledSetSwitch(LED_LEDSEQ);
  }
}

void ledInit(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
  int i;

  if(isInit)
 800142a:	4b32      	ldr	r3, [pc, #200]	; (80014f4 <ledInit+0xd0>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d15b      	bne.n	80014ea <ledInit+0xc6>
    return;

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <ledInit+0xd4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a2b      	ldr	r2, [pc, #172]	; (80014f8 <ledInit+0xd4>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <ledInit+0xd4>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <ledInit+0xd4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a24      	ldr	r2, [pc, #144]	; (80014f8 <ledInit+0xd4>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <ledInit+0xd4>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]

  for (i = 0; i < LED_NUM; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
 800147e:	e02a      	b.n	80014d6 <ledInit+0xb2>
  {
    //Initialize the LED pins as an output
	HAL_GPIO_WritePin(led_port[i], led_pin[i], GPIO_PIN_RESET);
 8001480:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <ledInit+0xd8>)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001488:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <ledInit+0xdc>)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001490:	b29b      	uxth	r3, r3
 8001492:	2200      	movs	r2, #0
 8001494:	4619      	mov	r1, r3
 8001496:	f001 fc5f 	bl	8002d58 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = led_pin[i];
 800149a:	4a19      	ldr	r2, [pc, #100]	; (8001500 <ledInit+0xdc>)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80014a8:	2301      	movs	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(led_port[i], &GPIO_InitStruct);
 80014b0:	4a12      	ldr	r2, [pc, #72]	; (80014fc <ledInit+0xd8>)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b8:	f107 0208 	add.w	r2, r7, #8
 80014bc:	4611      	mov	r1, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f001 faae 	bl	8002a20 <HAL_GPIO_Init>
    //Turn off the LED:s
    ledSet(i, 0);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f81c 	bl	8001508 <ledSet>
  for (i = 0; i < LED_NUM; i++)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	3301      	adds	r3, #1
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	2b05      	cmp	r3, #5
 80014da:	ddd1      	ble.n	8001480 <ledInit+0x5c>
  }

  ledSwitchState = LED_LEDSEQ;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <ledInit+0xe0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
  isInit = true;
 80014e2:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <ledInit+0xd0>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
 80014e8:	e000      	b.n	80014ec <ledInit+0xc8>
    return;
 80014ea:	bf00      	nop
}
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000388 	.word	0x20000388
 80014f8:	40023800 	.word	0x40023800
 80014fc:	20000000 	.word	0x20000000
 8001500:	20000018 	.word	0x20000018
 8001504:	20000392 	.word	0x20000392

08001508 <ledSet>:
    //Turn on the LED:s
    ledSet(i, 1);
  }
}
void ledSet(led_t led, bool value)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	460a      	mov	r2, r1
 8001512:	71fb      	strb	r3, [r7, #7]
 8001514:	4613      	mov	r3, r2
 8001516:	71bb      	strb	r3, [r7, #6]
  ASSERT(led < LED_NUM);
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b05      	cmp	r3, #5
 800151c:	d904      	bls.n	8001528 <ledSet+0x20>
 800151e:	22e4      	movs	r2, #228	; 0xe4
 8001520:	490a      	ldr	r1, [pc, #40]	; (800154c <ledSet+0x44>)
 8001522:	480b      	ldr	r0, [pc, #44]	; (8001550 <ledSet+0x48>)
 8001524:	f000 f99a 	bl	800185c <assertFail>
  if (ledSwitchState == LED_LEDSEQ)
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <ledSet+0x4c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d105      	bne.n	800153c <ledSet+0x34>
  {
    ledSetForce(led, value);
 8001530:	79ba      	ldrb	r2, [r7, #6]
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff2c 	bl	8001394 <ledSetForce>
  }

  ledLastState[led] = value;
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	79b9      	ldrb	r1, [r7, #6]
 8001540:	4a05      	ldr	r2, [pc, #20]	; (8001558 <ledSet+0x50>)
 8001542:	54d1      	strb	r1, [r2, r3]
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	0800a978 	.word	0x0800a978
 8001550:	0800a994 	.word	0x0800a994
 8001554:	20000392 	.word	0x20000392
 8001558:	2000038c 	.word	0x2000038c

0800155c <ledShowFaultPattern>:

void ledShowFaultPattern(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  ledSet(LED_GREEN_L, 0);
 8001560:	2100      	movs	r1, #0
 8001562:	2001      	movs	r0, #1
 8001564:	f7ff ffd0 	bl	8001508 <ledSet>
  ledSet(LED_GREEN_R, 0);
 8001568:	2100      	movs	r1, #0
 800156a:	2003      	movs	r0, #3
 800156c:	f7ff ffcc 	bl	8001508 <ledSet>
  ledSet(LED_RED_L, 1);
 8001570:	2101      	movs	r1, #1
 8001572:	2002      	movs	r0, #2
 8001574:	f7ff ffc8 	bl	8001508 <ledSet>
  ledSet(LED_RED_R, 1);
 8001578:	2101      	movs	r1, #1
 800157a:	2004      	movs	r0, #4
 800157c:	f7ff ffc4 	bl	8001508 <ledSet>
  ledSet(LED_BLUE_L, 0);
 8001580:	2100      	movs	r1, #0
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff ffc0 	bl	8001508 <ledSet>
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}

0800158c <systemLaunch>:
/* Private functions */
static void systemTask(void *arg);

/* Public functions */
void systemLaunch(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 8001592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001596:	461a      	mov	r2, r3
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <systemLaunch+0x28>)
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <systemLaunch+0x2c>)
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	2302      	movs	r3, #2
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	2300      	movs	r3, #0
 80015a6:	4905      	ldr	r1, [pc, #20]	; (80015bc <systemLaunch+0x30>)
 80015a8:	4805      	ldr	r0, [pc, #20]	; (80015c0 <systemLaunch+0x34>)
 80015aa:	f004 fc3d 	bl	8005e28 <xTaskCreateStatic>
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000290 	.word	0x20000290
 80015b8:	2000039c 	.word	0x2000039c
 80015bc:	0800a9bc 	.word	0x0800a9bc
 80015c0:	080015c5 	.word	0x080015c5

080015c4 <systemTask>:


/* Private functions implementation */

void systemTask(void *arg)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  bool pass = true;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]

  uint32_t ld = SysTick->LOAD;
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <systemTask+0x70>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	60bb      	str	r3, [r7, #8]
  time1 = DWT->CYCCNT;
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <systemTask+0x74>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4a18      	ldr	r2, [pc, #96]	; (800163c <systemTask+0x78>)
 80015dc:	6013      	str	r3, [r2, #0]
  delay_us(10);	// 1ms
 80015de:	200a      	movs	r0, #10
 80015e0:	f000 fda4 	bl	800212c <delay_us>
  time2 = DWT->CYCCNT;
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <systemTask+0x74>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4a15      	ldr	r2, [pc, #84]	; (8001640 <systemTask+0x7c>)
 80015ea:	6013      	str	r3, [r2, #0]
  printf("delay = %.2f(us)\n",(float)(time2-time1)/CLOCK_PER_USEC);
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <systemTask+0x7c>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <systemTask+0x78>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015fe:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001644 <systemTask+0x80>
 8001602:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001606:	ee16 0a90 	vmov	r0, s13
 800160a:	f7fe ffad 	bl	8000568 <__aeabi_f2d>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	480d      	ldr	r0, [pc, #52]	; (8001648 <systemTask+0x84>)
 8001614:	f007 f976 	bl	8008904 <iprintf>


  ledInit();
 8001618:	f7ff ff04 	bl	8001424 <ledInit>
  ledSet(CHG_LED, SET);
 800161c:	2101      	movs	r1, #1
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff ff72 	bl	8001508 <ledSet>


#ifdef CONFIG_DEBUG_QUEUE_MONITOR
  queueMonitorInit();
 8001624:	f000 f960 	bl	80018e8 <queueMonitorInit>
//  usecTimerInit(); 	// main에서 생성
//  i2cdevInit(I2C3_DEV);
//  i2cdevInit(I2C1_DEV);
//  passthroughInit();

  ICM20602_Initialization();
 8001628:	f7ff fde4 	bl	80011f4 <ICM20602_Initialization>

}
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	e000e010 	.word	0xe000e010
 8001638:	e0001000 	.word	0xe0001000
 800163c:	20000394 	.word	0x20000394
 8001640:	20000398 	.word	0x20000398
 8001644:	43280000 	.word	0x43280000
 8001648:	0800a9c4 	.word	0x0800a9c4

0800164c <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f897 	bl	800178c <platformGetListOfConfigurations>
 800165e:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4619      	mov	r1, r3
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f000 f855 	bl	8001714 <platformInitConfiguration>
 800166a:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <platformInit+0x2c>
  }

//  platformInitHardware();	// NVIC, EXINT 초기화로 대체
  return 0;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b30      	cmp	r3, #48	; 0x30
 8001690:	d104      	bne.n	800169c <platformParseDeviceTypeString+0x1c>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3301      	adds	r3, #1
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b3b      	cmp	r3, #59	; 0x3b
 800169a:	d001      	beq.n	80016a0 <platformParseDeviceTypeString+0x20>
    return 1;
 800169c:	2301      	movs	r3, #1
 800169e:	e034      	b.n	800170a <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 80016a0:	2302      	movs	r3, #2
 80016a2:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	3304      	adds	r3, #4
 80016a8:	60fb      	str	r3, [r7, #12]
  int end = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	e00e      	b.n	80016d2 <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00c      	beq.n	80016da <platformParseDeviceTypeString+0x5a>
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b3b      	cmp	r3, #59	; 0x3b
 80016ca:	d006      	beq.n	80016da <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	3301      	adds	r3, #1
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	ddec      	ble.n	80016b4 <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	429a      	cmp	r2, r3
 80016e0:	dd01      	ble.n	80016e6 <platformParseDeviceTypeString+0x66>
    return 1;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e011      	b.n	800170a <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	4413      	add	r3, r2
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	4619      	mov	r1, r3
 80016f8:	6838      	ldr	r0, [r7, #0]
 80016fa:	f007 fb3a 	bl	8008d72 <memcpy>
  deviceType[length] = '\0';
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	4413      	add	r3, r2
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
  return 0;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b090      	sub	sp, #64	; 0x40
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f852 	bl	80017cc <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 8001728:	f107 020c 	add.w	r2, r7, #12
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ffa4 	bl	8001680 <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 8001738:	2300      	movs	r3, #0
 800173a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800173c:	e01a      	b.n	8001774 <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 800173e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001740:	4613      	mov	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 8001750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001752:	f107 020c 	add.w	r2, r7, #12
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fd39 	bl	80001d0 <strcmp>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d104      	bne.n	800176e <platformInitConfiguration+0x5a>
      active_config = config;
 8001764:	4a08      	ldr	r2, [pc, #32]	; (8001788 <platformInitConfiguration+0x74>)
 8001766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001768:	6013      	str	r3, [r2, #0]
      return 0;
 800176a:	2300      	movs	r3, #0
 800176c:	e007      	b.n	800177e <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 800176e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001770:	3301      	adds	r3, #1
 8001772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001774:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	dbe0      	blt.n	800173e <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 800177c:	2301      	movs	r3, #1
}
 800177e:	4618      	mov	r0, r3
 8001780:	3740      	adds	r7, #64	; 0x40
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000079c 	.word	0x2000079c

0800178c <platformGetListOfConfigurations>:
  //  .motorMap = motorMapCF21Brushless,
  },
#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2203      	movs	r2, #3
 8001798:	601a      	str	r2, [r3, #0]
  return configs;
 800179a:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <platformGetListOfConfigurations+0x1c>)
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	20000048 	.word	0x20000048

080017ac <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;CF20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80017ba:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80017be:	015b      	lsls	r3, r3, #5
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  char* block = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	e00d      	b.n	80017fa <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 80017de:	6938      	ldr	r0, [r7, #16]
 80017e0:	f7ff ffe4 	bl	80017ac <getAddressOfOtpMemoryBlock>
 80017e4:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	617b      	str	r3, [r7, #20]
      break;
 80017f2:	e005      	b.n	8001800 <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	3301      	adds	r3, #1
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	2b0f      	cmp	r3, #15
 80017fe:	ddee      	ble.n	80017de <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <platformGetDeviceTypeString+0x42>
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2bff      	cmp	r3, #255	; 0xff
 800180c:	d101      	bne.n	8001812 <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 800180e:	4b07      	ldr	r3, [pc, #28]	; (800182c <platformGetDeviceTypeString+0x60>)
 8001810:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 8001812:	2220      	movs	r2, #32
 8001814:	6979      	ldr	r1, [r7, #20]
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f007 f9ca 	bl	8008bb0 <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3320      	adds	r3, #32
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
}
 8001824:	bf00      	nop
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	0800a9d8 	.word	0x0800a9d8

08001830 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001834:	f3bf 8f4f 	dsb	sy
}
 8001838:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <__NVIC_SystemReset+0x24>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001842:	4904      	ldr	r1, [pc, #16]	; (8001854 <__NVIC_SystemReset+0x24>)
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <__NVIC_SystemReset+0x28>)
 8001846:	4313      	orrs	r3, r2
 8001848:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800184a:	f3bf 8f4f 	dsb	sy
}
 800184e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <__NVIC_SystemReset+0x20>
 8001854:	e000ed00 	.word	0xe000ed00
 8001858:	05fa0004 	.word	0x05fa0004

0800185c <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800186c:	f383 8811 	msr	BASEPRI, r3
 8001870:	f3bf 8f6f 	isb	sy
 8001874:	f3bf 8f4f 	dsb	sy
 8001878:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800187a:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	68b8      	ldr	r0, [r7, #8]
 8001880:	f000 f810 	bl	80018a4 <storeAssertFileData>
//  DEBUG_PRINT("Assert failed %s:%d\n", file, line);
//  motorsStop();
  ledShowFaultPattern();
 8001884:	f7ff fe6a 	bl	800155c <ledShowFaultPattern>

  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <assertFail+0x44>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <assertFail+0x3c>
  {
    // Only reset if debugger is not connected
    NVIC_SystemReset();
 8001894:	f7ff ffcc 	bl	8001830 <__NVIC_SystemReset>
  }
}
 8001898:	bf00      	nop
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	e000edf0 	.word	0xe000edf0

080018a4 <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <storeAssertFileData+0x38>)
 80018b0:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <storeAssertFileData+0x3c>)
 80018b2:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <storeAssertFileData+0x38>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <storeAssertFileData+0x38>)
 80018bc:	791a      	ldrb	r2, [r3, #4]
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <storeAssertFileData+0x40>)
 80018c0:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 80018c2:	4a06      	ldr	r2, [pc, #24]	; (80018dc <storeAssertFileData+0x38>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <storeAssertFileData+0x38>)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	60d3      	str	r3, [r2, #12]
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000344 	.word	0x20000344
 80018e0:	2f8a001f 	.word	0x2f8a001f
 80018e4:	200007a0 	.word	0x200007a0

080018e8 <queueMonitorInit>:
static int getMaxWaiting(xQueueHandle* xQueue, int prevPeak);
static void resetCounters();

unsigned char ucQueueGetQueueNumber( xQueueHandle xQueue );

void queueMonitorInit() {
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <queueMonitorInit+0x6c>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	f083 0301 	eor.w	r3, r3, #1
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d104      	bne.n	8001906 <queueMonitorInit+0x1e>
 80018fc:	2248      	movs	r2, #72	; 0x48
 80018fe:	4916      	ldr	r1, [pc, #88]	; (8001958 <queueMonitorInit+0x70>)
 8001900:	4816      	ldr	r0, [pc, #88]	; (800195c <queueMonitorInit+0x74>)
 8001902:	f7ff ffab 	bl	800185c <assertFail>
  timer = xTimerCreateStatic( "queueMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <queueMonitorInit+0x78>)
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <queueMonitorInit+0x7c>)
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2300      	movs	r3, #0
 8001910:	2201      	movs	r2, #1
 8001912:	f242 7110 	movw	r1, #10000	; 0x2710
 8001916:	4814      	ldr	r0, [pc, #80]	; (8001968 <queueMonitorInit+0x80>)
 8001918:	f005 fa5a 	bl	8006dd0 <xTimerCreateStatic>
 800191c:	4603      	mov	r3, r0
 800191e:	4a13      	ldr	r2, [pc, #76]	; (800196c <queueMonitorInit+0x84>)
 8001920:	6013      	str	r3, [r2, #0]
  xTimerStart(timer, 100);
 8001922:	4b12      	ldr	r3, [pc, #72]	; (800196c <queueMonitorInit+0x84>)
 8001924:	681c      	ldr	r4, [r3, #0]
 8001926:	f004 fd8b 	bl	8006440 <xTaskGetTickCount>
 800192a:	4602      	mov	r2, r0
 800192c:	2364      	movs	r3, #100	; 0x64
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2300      	movs	r3, #0
 8001932:	2101      	movs	r1, #1
 8001934:	4620      	mov	r0, r4
 8001936:	f005 fac5 	bl	8006ec4 <xTimerGenericCommand>

  data[0].fileName = "Na";
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <queueMonitorInit+0x88>)
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <queueMonitorInit+0x8c>)
 800193e:	601a      	str	r2, [r3, #0]
  data[0].queueName = "Na";
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <queueMonitorInit+0x88>)
 8001942:	4a0c      	ldr	r2, [pc, #48]	; (8001974 <queueMonitorInit+0x8c>)
 8001944:	605a      	str	r2, [r3, #4]

  initialized = true;
 8001946:	4b03      	ldr	r3, [pc, #12]	; (8001954 <queueMonitorInit+0x6c>)
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
}
 800194c:	bf00      	nop
 800194e:	3704      	adds	r7, #4
 8001950:	46bd      	mov	sp, r7
 8001952:	bd90      	pop	{r4, r7, pc}
 8001954:	20000964 	.word	0x20000964
 8001958:	0800a9e0 	.word	0x0800a9e0
 800195c:	0800aa04 	.word	0x0800aa04
 8001960:	20000938 	.word	0x20000938
 8001964:	08001a8d 	.word	0x08001a8d
 8001968:	0800aa14 	.word	0x0800aa14
 800196c:	20000934 	.word	0x20000934
 8001970:	200007a4 	.word	0x200007a4
 8001974:	0800aa28 	.word	0x0800aa28

08001978 <debugPrint>:
    return waiting;
  }
  return prevPeak;
}

static void debugPrint() {
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
  int i = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	e013      	b.n	80019b0 <debugPrint+0x38>
    Data* queueData = &data[i];
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4a0d      	ldr	r2, [pc, #52]	; (80019c8 <debugPrint+0x50>)
 8001994:	4413      	add	r3, r2
 8001996:	603b      	str	r3, [r7, #0]
    if (filter(queueData)) {
 8001998:	6838      	ldr	r0, [r7, #0]
 800199a:	f000 f819 	bl	80019d0 <filter>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <debugPrint+0x32>
      debugPrintQueue(queueData);
 80019a4:	6838      	ldr	r0, [r7, #0]
 80019a6:	f000 f827 	bl	80019f8 <debugPrintQueue>
  for (i = 0; i < nrOfQueues; i++) {
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3301      	adds	r3, #1
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <debugPrint+0x54>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4293      	cmp	r3, r2
 80019ba:	dbe5      	blt.n	8001988 <debugPrint+0x10>
    }
  }

  if (RESET_COUNTERS_AFTER_DISPLAY) {
    resetCounters();
 80019bc:	f000 f838 	bl	8001a30 <resetCounters>
  }
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200007a4 	.word	0x200007a4
 80019cc:	200000b7 	.word	0x200000b7

080019d0 <filter>:

static bool filter(Data* queueData) {
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  bool doDisplay = false;
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]
  if (DISPLAY_ONLY_OVERFLOW_QUEUES) {
    doDisplay = (queueData->fullCount != 0);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf14      	ite	ne
 80019e4:	2301      	movne	r3, #1
 80019e6:	2300      	moveq	r3, #0
 80019e8:	73fb      	strb	r3, [r7, #15]
  } else {
    doDisplay = true;
  }
  return doDisplay;
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <debugPrintQueue>:

static void debugPrintQueue(Data* queueData) {
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	6078      	str	r0, [r7, #4]
  printf("%s:%s, sent: %i, peak: %i, full: %i\n",queueData->fileName, queueData->queueName, queueData->sendCount,queueData->maxWaiting, queueData->fullCount);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6819      	ldr	r1, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6858      	ldr	r0, [r3, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689c      	ldr	r4, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6912      	ldr	r2, [r2, #16]
 8001a14:	9201      	str	r2, [sp, #4]
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	4623      	mov	r3, r4
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	4803      	ldr	r0, [pc, #12]	; (8001a2c <debugPrintQueue+0x34>)
 8001a1e:	f006 ff71 	bl	8008904 <iprintf>
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	0800aa74 	.word	0x0800aa74

08001a30 <resetCounters>:

static void resetCounters() {
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
  int i = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	e013      	b.n	8001a68 <resetCounters+0x38>
    Data* queueData = &data[i];
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <resetCounters+0x54>)
 8001a4c:	4413      	add	r3, r2
 8001a4e:	603b      	str	r3, [r7, #0]

    queueData->sendCount = 0;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
    queueData->maxWaiting = 0;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	60da      	str	r2, [r3, #12]
    queueData->fullCount = 0;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  for (i = 0; i < nrOfQueues; i++) {
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3301      	adds	r3, #1
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <resetCounters+0x58>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4293      	cmp	r3, r2
 8001a72:	dbe5      	blt.n	8001a40 <resetCounters+0x10>
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	200007a4 	.word	0x200007a4
 8001a88:	200000b7 	.word	0x200000b7

08001a8c <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  debugPrint();
 8001a94:	f7ff ff70 	bl	8001978 <debugPrint>
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_write>:
//#include "stm32f4xx_hal_def.h"

extern UART_HandleTypeDef huart6;

int _write(int file, char* p, int len)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
		if(HAL_UART_Transmit(&huart6, p, len , 10 )!= 0)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	230a      	movs	r3, #10
 8001ab2:	68b9      	ldr	r1, [r7, #8]
 8001ab4:	4806      	ldr	r0, [pc, #24]	; (8001ad0 <_write+0x30>)
 8001ab6:	f002 f99f 	bl	8003df8 <HAL_UART_Transmit>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <_write+0x26>
			//		while(!LL_USART_IsActiveFlag_TXE(USART6));0
			//		usDelay(100);	// 문자 1개 출력당 약 100us 소요, Float, int형 차이 없음
			return -1;
 8001ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ac4:	e000      	b.n	8001ac8 <_write+0x28>
		return len;
 8001ac6:	687b      	ldr	r3, [r7, #4]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20001518 	.word	0x20001518

08001ad4 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
return 0;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <vApplicationGetIdleTaskMemory+0x30>)
 8001b1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2280      	movs	r2, #128	; 0x80
 8001b24:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000968 	.word	0x20000968
 8001b38:	20000a1c 	.word	0x20000a1c

08001b3c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <vApplicationGetTimerTaskMemory+0x2c>)
 8001b4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <vApplicationGetTimerTaskMemory+0x30>)
 8001b52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b5a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	20000c1c 	.word	0x20000c1c
 8001b6c:	20000cd0 	.word	0x20000cd0

08001b70 <LL_SPI_SetStandard>:
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f023 0210 	bic.w	r2, r3, #16
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	605a      	str	r2, [r3, #4]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <LL_AHB1_GRP1_EnableClock>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba4:	4907      	ldr	r1, [pc, #28]	; (8001bc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	40023800 	.word	0x40023800

08001bc8 <LL_APB2_GRP1_EnableClock>:
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bd4:	4907      	ldr	r1, [pc, #28]	; (8001bf4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001bde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4013      	ands	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001be6:	68fb      	ldr	r3, [r7, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bfe:	f000 fcd5 	bl	80025ac <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c02:	f000 f875 	bl	8001cf0 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c06:	f000 f98f 	bl	8001f28 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001c0a:	f000 f963 	bl	8001ed4 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 8001c0e:	f000 f92b 	bl	8001e68 <MX_TIM7_Init>
  MX_SPI1_Init();
 8001c12:	f000 f8d7 	bl	8001dc4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

//  InitTick(168000000, 1000000U);			//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8001c16:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <main+0xcc>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <main+0xcc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 0220 	orr.w	r2, r2, #32
 8001c24:	60da      	str	r2, [r3, #12]

  freertos_IntroTitle();
 8001c26:	f000 fa0b 	bl	8002040 <freertos_IntroTitle>
  printf("[TASK]main\n");
 8001c2a:	4827      	ldr	r0, [pc, #156]	; (8001cc8 <main+0xd0>)
 8001c2c:	f006 fed8 	bl	80089e0 <puts>


  check_enter_bootloader();
 8001c30:	f7ff fb6a 	bl	8001308 <check_enter_bootloader>

  int err = platformInit();
 8001c34:	f7ff fd0a 	bl	800164c <platformInit>
 8001c38:	6278      	str	r0, [r7, #36]	; 0x24
  if (err != 0) {
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d000      	beq.n	8001c42 <main+0x4a>
  	    // The firmware is running on the wrong hardware. Halt
  	    while(1);
 8001c40:	e7fe      	b.n	8001c40 <main+0x48>
  }

  HAL_TIM_Base_Start_IT(&htim7);
 8001c42:	4822      	ldr	r0, [pc, #136]	; (8001ccc <main+0xd4>)
 8001c44:	f001 fd8a 	bl	800375c <HAL_TIM_Base_Start_IT>
  t1 = DWT->CYCCNT;
 8001c48:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <main+0xd8>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4a21      	ldr	r2, [pc, #132]	; (8001cd4 <main+0xdc>)
 8001c4e:	6013      	str	r3, [r2, #0]
  //  delay_us(1);	// 1ms
  delay_us(10);	// 1ms
 8001c50:	200a      	movs	r0, #10
 8001c52:	f000 fa6b 	bl	800212c <delay_us>
  t2 = DWT->CYCCNT;
 8001c56:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <main+0xd8>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4a1f      	ldr	r2, [pc, #124]	; (8001cd8 <main+0xe0>)
 8001c5c:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Stop_IT(&htim7);
 8001c5e:	481b      	ldr	r0, [pc, #108]	; (8001ccc <main+0xd4>)
 8001c60:	f001 fdec 	bl	800383c <HAL_TIM_Base_Stop_IT>
  printf("delay = %.2f(us)\n",(float)(t2-t1)/CLOCK_PER_USEC);
 8001c64:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <main+0xe0>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <main+0xdc>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c76:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001cdc <main+0xe4>
 8001c7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c7e:	ee16 0a90 	vmov	r0, s13
 8001c82:	f7fe fc71 	bl	8000568 <__aeabi_f2d>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4815      	ldr	r0, [pc, #84]	; (8001ce0 <main+0xe8>)
 8001c8c:	f006 fe3a 	bl	8008904 <iprintf>
  uint32_t ld = SysTick->LOAD;
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <main+0xec>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	623b      	str	r3, [r7, #32]


  systemLaunch();
 8001c96:	f7ff fc79 	bl	800158c <systemLaunch>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001c9a:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <main+0xf0>)
 8001c9c:	1d3c      	adds	r4, r7, #4
 8001c9e:	461d      	mov	r5, r3
 8001ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ca4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ca8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f003 fab3 	bl	800521c <osThreadCreate>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4a0c      	ldr	r2, [pc, #48]	; (8001cec <main+0xf4>)
 8001cba:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001cbc:	f003 faa7 	bl	800520e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <main+0xc8>
 8001cc2:	bf00      	nop
 8001cc4:	20001518 	.word	0x20001518
 8001cc8:	0800aa9c 	.word	0x0800aa9c
 8001ccc:	200014d0 	.word	0x200014d0
 8001cd0:	e0001000 	.word	0xe0001000
 8001cd4:	20001564 	.word	0x20001564
 8001cd8:	20001568 	.word	0x20001568
 8001cdc:	43280000 	.word	0x43280000
 8001ce0:	0800aaa8 	.word	0x0800aaa8
 8001ce4:	e000e010 	.word	0xe000e010
 8001ce8:	0800aac8 	.word	0x0800aac8
 8001cec:	20001560 	.word	0x20001560

08001cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b094      	sub	sp, #80	; 0x50
 8001cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cf6:	f107 0320 	add.w	r3, r7, #32
 8001cfa:	2230      	movs	r2, #48	; 0x30
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f006 ff4e 	bl	8008ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d04:	f107 030c 	add.w	r3, r7, #12
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <SystemClock_Config+0xcc>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	4a27      	ldr	r2, [pc, #156]	; (8001dbc <SystemClock_Config+0xcc>)
 8001d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d22:	6413      	str	r3, [r2, #64]	; 0x40
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <SystemClock_Config+0xcc>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d30:	2300      	movs	r3, #0
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <SystemClock_Config+0xd0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a21      	ldr	r2, [pc, #132]	; (8001dc0 <SystemClock_Config+0xd0>)
 8001d3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <SystemClock_Config+0xd0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d56:	2302      	movs	r3, #2
 8001d58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d60:	2304      	movs	r3, #4
 8001d62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d64:	23a8      	movs	r3, #168	; 0xa8
 8001d66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d70:	f107 0320 	add.w	r3, r7, #32
 8001d74:	4618      	mov	r0, r3
 8001d76:	f001 f809 	bl	8002d8c <HAL_RCC_OscConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d80:	f000 f9fe 	bl	8002180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d84:	230f      	movs	r3, #15
 8001d86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	2105      	movs	r1, #5
 8001da2:	4618      	mov	r0, r3
 8001da4:	f001 fa6a 	bl	800327c <HAL_RCC_ClockConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001dae:	f000 f9e7 	bl	8002180 <Error_Handler>
  }
}
 8001db2:	bf00      	nop
 8001db4:	3750      	adds	r7, #80	; 0x50
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40007000 	.word	0x40007000

08001dc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b090      	sub	sp, #64	; 0x40
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001dca:	f107 0318 	add.w	r3, r7, #24
 8001dce:	2228      	movs	r2, #40	; 0x28
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f006 fee4 	bl	8008ba0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	463b      	mov	r3, r7
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
 8001de4:	611a      	str	r2, [r3, #16]
 8001de6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001de8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001dec:	f7ff feec 	bl	8001bc8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001df0:	2001      	movs	r0, #1
 8001df2:	f7ff fed1 	bl	8001b98 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001df6:	23e0      	movs	r3, #224	; 0xe0
 8001df8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001e0a:	2305      	movs	r3, #5
 8001e0c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	463b      	mov	r3, r7
 8001e10:	4619      	mov	r1, r3
 8001e12:	4813      	ldr	r0, [pc, #76]	; (8001e60 <MX_SPI1_Init+0x9c>)
 8001e14:	f003 f8ed 	bl	8004ff2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001e1c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001e20:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001e26:	2302      	movs	r3, #2
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8001e34:	2310      	movs	r3, #16
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001e40:	230a      	movs	r3, #10
 8001e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001e44:	f107 0318 	add.w	r3, r7, #24
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4806      	ldr	r0, [pc, #24]	; (8001e64 <MX_SPI1_Init+0xa0>)
 8001e4c:	f003 f975 	bl	800513a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001e50:	2100      	movs	r1, #0
 8001e52:	4804      	ldr	r0, [pc, #16]	; (8001e64 <MX_SPI1_Init+0xa0>)
 8001e54:	f7ff fe8c 	bl	8001b70 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e58:	bf00      	nop
 8001e5a:	3740      	adds	r7, #64	; 0x40
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40020000 	.word	0x40020000
 8001e64:	40013000 	.word	0x40013000

08001e68 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e6e:	463b      	mov	r3, r7
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <MX_TIM7_Init+0x64>)
 8001e78:	4a15      	ldr	r2, [pc, #84]	; (8001ed0 <MX_TIM7_Init+0x68>)
 8001e7a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8001e7c:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <MX_TIM7_Init+0x64>)
 8001e7e:	2253      	movs	r2, #83	; 0x53
 8001e80:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <MX_TIM7_Init+0x64>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001e88:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <MX_TIM7_Init+0x64>)
 8001e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e8e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e90:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <MX_TIM7_Init+0x64>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e96:	480d      	ldr	r0, [pc, #52]	; (8001ecc <MX_TIM7_Init+0x64>)
 8001e98:	f001 fc10 	bl	80036bc <HAL_TIM_Base_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001ea2:	f000 f96d 	bl	8002180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001eae:	463b      	mov	r3, r7
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4806      	ldr	r0, [pc, #24]	; (8001ecc <MX_TIM7_Init+0x64>)
 8001eb4:	f001 fec0 	bl	8003c38 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001ebe:	f000 f95f 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200014d0 	.word	0x200014d0
 8001ed0:	40001400 	.word	0x40001400

08001ed4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <MX_USART6_UART_Init+0x4c>)
 8001eda:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <MX_USART6_UART_Init+0x50>)
 8001edc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <MX_USART6_UART_Init+0x4c>)
 8001ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ee4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <MX_USART6_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <MX_USART6_UART_Init+0x4c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <MX_USART6_UART_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <MX_USART6_UART_Init+0x4c>)
 8001efa:	220c      	movs	r2, #12
 8001efc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <MX_USART6_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <MX_USART6_UART_Init+0x4c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f0a:	4805      	ldr	r0, [pc, #20]	; (8001f20 <MX_USART6_UART_Init+0x4c>)
 8001f0c:	f001 ff24 	bl	8003d58 <HAL_UART_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f16:	f000 f933 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20001518 	.word	0x20001518
 8001f24:	40011400 	.word	0x40011400

08001f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	4b36      	ldr	r3, [pc, #216]	; (800201c <MX_GPIO_Init+0xf4>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a35      	ldr	r2, [pc, #212]	; (800201c <MX_GPIO_Init+0xf4>)
 8001f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b33      	ldr	r3, [pc, #204]	; (800201c <MX_GPIO_Init+0xf4>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b2f      	ldr	r3, [pc, #188]	; (800201c <MX_GPIO_Init+0xf4>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a2e      	ldr	r2, [pc, #184]	; (800201c <MX_GPIO_Init+0xf4>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b2c      	ldr	r3, [pc, #176]	; (800201c <MX_GPIO_Init+0xf4>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	4b28      	ldr	r3, [pc, #160]	; (800201c <MX_GPIO_Init+0xf4>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a27      	ldr	r2, [pc, #156]	; (800201c <MX_GPIO_Init+0xf4>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b25      	ldr	r3, [pc, #148]	; (800201c <MX_GPIO_Init+0xf4>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	4b21      	ldr	r3, [pc, #132]	; (800201c <MX_GPIO_Init+0xf4>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a20      	ldr	r2, [pc, #128]	; (800201c <MX_GPIO_Init+0xf4>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	; (800201c <MX_GPIO_Init+0xf4>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_PIN_GPIO_Port, SPI1_NSS_PIN_Pin, GPIO_PIN_SET);
 8001fae:	2201      	movs	r2, #1
 8001fb0:	2110      	movs	r1, #16
 8001fb2:	481b      	ldr	r0, [pc, #108]	; (8002020 <MX_GPIO_Init+0xf8>)
 8001fb4:	f000 fed0 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2120      	movs	r1, #32
 8001fbc:	4819      	ldr	r0, [pc, #100]	; (8002024 <MX_GPIO_Init+0xfc>)
 8001fbe:	f000 fecb 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_PIN_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_PIN_Pin;
 8001fc2:	2310      	movs	r3, #16
 8001fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_PIN_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4811      	ldr	r0, [pc, #68]	; (8002020 <MX_GPIO_Init+0xf8>)
 8001fda:	f000 fd21 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_INT_Pin */
  GPIO_InitStruct.Pin = SPI1_INT_Pin;
 8001fde:	2310      	movs	r3, #16
 8001fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fe2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_INT_GPIO_Port, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	480d      	ldr	r0, [pc, #52]	; (8002028 <MX_GPIO_Init+0x100>)
 8001ff4:	f000 fd14 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001ff8:	2320      	movs	r3, #32
 8001ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4619      	mov	r1, r3
 800200e:	4805      	ldr	r0, [pc, #20]	; (8002024 <MX_GPIO_Init+0xfc>)
 8002010:	f000 fd06 	bl	8002a20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002014:	bf00      	nop
 8002016:	3728      	adds	r7, #40	; 0x28
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40023800 	.word	0x40023800
 8002020:	40020000 	.word	0x40020000
 8002024:	40020400 	.word	0x40020400
 8002028:	40020800 	.word	0x40020800

0800202c <OSVersion>:

/* USER CODE BEGIN 4 */

char* OSVersion(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 8002030:	4b02      	ldr	r3, [pc, #8]	; (800203c <OSVersion+0x10>)
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	0800aae4 	.word	0x0800aae4

08002040 <freertos_IntroTitle>:


void freertos_IntroTitle(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 8002044:	4823      	ldr	r0, [pc, #140]	; (80020d4 <freertos_IntroTitle+0x94>)
 8002046:	f006 fccb 	bl	80089e0 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 800204a:	4823      	ldr	r0, [pc, #140]	; (80020d8 <freertos_IntroTitle+0x98>)
 800204c:	f006 fcc8 	bl	80089e0 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 8002050:	4822      	ldr	r0, [pc, #136]	; (80020dc <freertos_IntroTitle+0x9c>)
 8002052:	f006 fcc5 	bl	80089e0 <puts>
  printf("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 8002056:	4822      	ldr	r0, [pc, #136]	; (80020e0 <freertos_IntroTitle+0xa0>)
 8002058:	f006 fcc2 	bl	80089e0 <puts>
  printf("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 800205c:	4821      	ldr	r0, [pc, #132]	; (80020e4 <freertos_IntroTitle+0xa4>)
 800205e:	f006 fcbf 	bl	80089e0 <puts>
  printf("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 8002062:	4821      	ldr	r0, [pc, #132]	; (80020e8 <freertos_IntroTitle+0xa8>)
 8002064:	f006 fcbc 	bl	80089e0 <puts>
  printf("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 8002068:	4820      	ldr	r0, [pc, #128]	; (80020ec <freertos_IntroTitle+0xac>)
 800206a:	f006 fcb9 	bl	80089e0 <puts>
  printf("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 800206e:	4820      	ldr	r0, [pc, #128]	; (80020f0 <freertos_IntroTitle+0xb0>)
 8002070:	f006 fcb6 	bl	80089e0 <puts>
  printf("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 8002074:	481f      	ldr	r0, [pc, #124]	; (80020f4 <freertos_IntroTitle+0xb4>)
 8002076:	f006 fcb3 	bl	80089e0 <puts>
  printf("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 800207a:	481f      	ldr	r0, [pc, #124]	; (80020f8 <freertos_IntroTitle+0xb8>)
 800207c:	f006 fcb0 	bl	80089e0 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 8002080:	481e      	ldr	r0, [pc, #120]	; (80020fc <freertos_IntroTitle+0xbc>)
 8002082:	f006 fcad 	bl	80089e0 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 8002086:	481e      	ldr	r0, [pc, #120]	; (8002100 <freertos_IntroTitle+0xc0>)
 8002088:	f006 fcaa 	bl	80089e0 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 800208c:	481d      	ldr	r0, [pc, #116]	; (8002104 <freertos_IntroTitle+0xc4>)
 800208e:	f006 fca7 	bl	80089e0 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 8002092:	481d      	ldr	r0, [pc, #116]	; (8002108 <freertos_IntroTitle+0xc8>)
 8002094:	f006 fca4 	bl	80089e0 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 8002098:	481c      	ldr	r0, [pc, #112]	; (800210c <freertos_IntroTitle+0xcc>)
 800209a:	f006 fca1 	bl	80089e0 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 800209e:	481c      	ldr	r0, [pc, #112]	; (8002110 <freertos_IntroTitle+0xd0>)
 80020a0:	f006 fc9e 	bl	80089e0 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 80020a4:	481b      	ldr	r0, [pc, #108]	; (8002114 <freertos_IntroTitle+0xd4>)
 80020a6:	f006 fc9b 	bl	80089e0 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 80020aa:	481b      	ldr	r0, [pc, #108]	; (8002118 <freertos_IntroTitle+0xd8>)
 80020ac:	f006 fc98 	bl	80089e0 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 80020b0:	481a      	ldr	r0, [pc, #104]	; (800211c <freertos_IntroTitle+0xdc>)
 80020b2:	f006 fc95 	bl	80089e0 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 80020b6:	f7ff ffb9 	bl	800202c <OSVersion>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4619      	mov	r1, r3
 80020be:	4818      	ldr	r0, [pc, #96]	; (8002120 <freertos_IntroTitle+0xe0>)
 80020c0:	f006 fc20 	bl	8008904 <iprintf>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 80020c4:	4817      	ldr	r0, [pc, #92]	; (8002124 <freertos_IntroTitle+0xe4>)
 80020c6:	f006 fc8b 	bl	80089e0 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   Copyright guileschool.com\n");
 80020ca:	4817      	ldr	r0, [pc, #92]	; (8002128 <freertos_IntroTitle+0xe8>)
 80020cc:	f006 fc88 	bl	80089e0 <puts>
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	0800aaec 	.word	0x0800aaec
 80020d8:	0800ab2c 	.word	0x0800ab2c
 80020dc:	0800ab80 	.word	0x0800ab80
 80020e0:	0800abd4 	.word	0x0800abd4
 80020e4:	0800ac28 	.word	0x0800ac28
 80020e8:	0800ac7c 	.word	0x0800ac7c
 80020ec:	0800acd0 	.word	0x0800acd0
 80020f0:	0800ad24 	.word	0x0800ad24
 80020f4:	0800ad78 	.word	0x0800ad78
 80020f8:	0800adcc 	.word	0x0800adcc
 80020fc:	0800ae20 	.word	0x0800ae20
 8002100:	0800ae74 	.word	0x0800ae74
 8002104:	0800aec8 	.word	0x0800aec8
 8002108:	0800af1c 	.word	0x0800af1c
 800210c:	0800af70 	.word	0x0800af70
 8002110:	0800afc4 	.word	0x0800afc4
 8002114:	0800b018 	.word	0x0800b018
 8002118:	0800b06c 	.word	0x0800b06c
 800211c:	0800b0b4 	.word	0x0800b0b4
 8002120:	0800b0e0 	.word	0x0800b0e0
 8002124:	0800b124 	.word	0x0800b124
 8002128:	0800b150 	.word	0x0800b150

0800212c <delay_us>:
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; 				// 시간 측정 초기화
  DWT->CYCCNT = 0;   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

void delay_us (uint16_t us)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	80fb      	strh	r3, [r7, #6]

	HAL_TIM_Base_Start_IT(&htim7);
 8002136:	480a      	ldr	r0, [pc, #40]	; (8002160 <delay_us+0x34>)
 8002138:	f001 fb10 	bl	800375c <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim7,0);  // set the counter value a 0
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <delay_us+0x34>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2200      	movs	r2, #0
 8002142:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 8002144:	bf00      	nop
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <delay_us+0x34>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	429a      	cmp	r2, r3
 8002150:	d3f9      	bcc.n	8002146 <delay_us+0x1a>
	HAL_TIM_Base_Stop_IT(&htim7);
 8002152:	4803      	ldr	r0, [pc, #12]	; (8002160 <delay_us+0x34>)
 8002154:	f001 fb72 	bl	800383c <HAL_TIM_Base_Stop_IT>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	200014d0 	.word	0x200014d0

08002164 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	printf("[TASK] StartDefaultTask!\n");
 800216c:	4803      	ldr	r0, [pc, #12]	; (800217c <StartDefaultTask+0x18>)
 800216e:	f006 fc37 	bl	80089e0 <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002172:	2001      	movs	r0, #1
 8002174:	f003 f89e 	bl	80052b4 <osDelay>
 8002178:	e7fb      	b.n	8002172 <StartDefaultTask+0xe>
 800217a:	bf00      	nop
 800217c:	0800b1b8 	.word	0x0800b1b8

08002180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002184:	b672      	cpsid	i
}
 8002186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002188:	e7fe      	b.n	8002188 <Error_Handler+0x8>
	...

0800218c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <HAL_MspInit+0x64>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	4a15      	ldr	r2, [pc, #84]	; (80021f0 <HAL_MspInit+0x64>)
 800219c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a0:	6453      	str	r3, [r2, #68]	; 0x44
 80021a2:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <HAL_MspInit+0x64>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_MspInit+0x64>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <HAL_MspInit+0x64>)
 80021b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <HAL_MspInit+0x64>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	210f      	movs	r1, #15
 80021ce:	f06f 0001 	mvn.w	r0, #1
 80021d2:	f000 fb5c 	bl	800288e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2105      	movs	r1, #5
 80021da:	2005      	movs	r0, #5
 80021dc:	f000 fb57 	bl	800288e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80021e0:	2005      	movs	r0, #5
 80021e2:	f000 fb70 	bl	80028c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800

080021f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0e      	ldr	r2, [pc, #56]	; (800223c <HAL_TIM_Base_MspInit+0x48>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d115      	bne.n	8002232 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_TIM_Base_MspInit+0x4c>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <HAL_TIM_Base_MspInit+0x4c>)
 8002210:	f043 0320 	orr.w	r3, r3, #32
 8002214:	6413      	str	r3, [r2, #64]	; 0x40
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_TIM_Base_MspInit+0x4c>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2105      	movs	r1, #5
 8002226:	2037      	movs	r0, #55	; 0x37
 8002228:	f000 fb31 	bl	800288e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800222c:	2037      	movs	r0, #55	; 0x37
 800222e:	f000 fb4a 	bl	80028c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40001400 	.word	0x40001400
 8002240:	40023800 	.word	0x40023800

08002244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <HAL_UART_MspInit+0x94>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d133      	bne.n	80022ce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <HAL_UART_MspInit+0x98>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	4a1b      	ldr	r2, [pc, #108]	; (80022dc <HAL_UART_MspInit+0x98>)
 8002270:	f043 0320 	orr.w	r3, r3, #32
 8002274:	6453      	str	r3, [r2, #68]	; 0x44
 8002276:	4b19      	ldr	r3, [pc, #100]	; (80022dc <HAL_UART_MspInit+0x98>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f003 0320 	and.w	r3, r3, #32
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <HAL_UART_MspInit+0x98>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a14      	ldr	r2, [pc, #80]	; (80022dc <HAL_UART_MspInit+0x98>)
 800228c:	f043 0304 	orr.w	r3, r3, #4
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_UART_MspInit+0x98>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = UART6_TX_DEBUG_Pin|UART6_RX_DEBUG_Pin;
 800229e:	23c0      	movs	r3, #192	; 0xc0
 80022a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022aa:	2303      	movs	r3, #3
 80022ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80022ae:	2308      	movs	r3, #8
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	4619      	mov	r1, r3
 80022b8:	4809      	ldr	r0, [pc, #36]	; (80022e0 <HAL_UART_MspInit+0x9c>)
 80022ba:	f000 fbb1 	bl	8002a20 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2105      	movs	r1, #5
 80022c2:	2047      	movs	r0, #71	; 0x47
 80022c4:	f000 fae3 	bl	800288e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80022c8:	2047      	movs	r0, #71	; 0x47
 80022ca:	f000 fafc 	bl	80028c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80022ce:	bf00      	nop
 80022d0:	3728      	adds	r7, #40	; 0x28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40011400 	.word	0x40011400
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40020800 	.word	0x40020800

080022e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022e8:	e7fe      	b.n	80022e8 <NMI_Handler+0x4>

080022ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ee:	e7fe      	b.n	80022ee <HardFault_Handler+0x4>

080022f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <MemManage_Handler+0x4>

080022f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022fa:	e7fe      	b.n	80022fa <BusFault_Handler+0x4>

080022fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <UsageFault_Handler+0x4>

08002302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <SysTick_Handler+0x2c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <SysTick_Handler+0x16>

		TimingDelay--;
 800231c:	4b07      	ldr	r3, [pc, #28]	; (800233c <SysTick_Handler+0x2c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	3b01      	subs	r3, #1
 8002322:	4a06      	ldr	r2, [pc, #24]	; (800233c <SysTick_Handler+0x2c>)
 8002324:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002326:	f000 f993 	bl	8002650 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800232a:	f004 fbff 	bl	8006b2c <xTaskGetSchedulerState>
 800232e:	4603      	mov	r3, r0
 8002330:	2b01      	cmp	r3, #1
 8002332:	d001      	beq.n	8002338 <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002334:	f005 fa88 	bl	8007848 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20001570 	.word	0x20001570

08002340 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <TIM7_IRQHandler+0x10>)
 8002356:	f001 faa0 	bl	800389a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200014d0 	.word	0x200014d0

08002364 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)!=RESET)&&(__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_RXNE)!=RESET) ){
 800236a:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <USART6_IRQHandler+0x54>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0320 	and.w	r3, r3, #32
 8002374:	2b20      	cmp	r3, #32
 8002376:	d117      	bne.n	80023a8 <USART6_IRQHandler+0x44>
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <USART6_IRQHandler+0x54>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	2b00      	cmp	r3, #0
 8002384:	d010      	beq.n	80023a8 <USART6_IRQHandler+0x44>
			g_rx_buffer = (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF);	// 데이터 1바이트 수신
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <USART6_IRQHandler+0x54>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <USART6_IRQHandler+0x58>)
 8002390:	701a      	strb	r2, [r3, #0]
		  __HAL_UART_CLEAR_PEFLAG(&huart6);
 8002392:	2300      	movs	r3, #0
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <USART6_IRQHandler+0x54>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <USART6_IRQHandler+0x54>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
	}


  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80023a8:	4803      	ldr	r0, [pc, #12]	; (80023b8 <USART6_IRQHandler+0x54>)
 80023aa:	f001 fdb1 	bl	8003f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20001518 	.word	0x20001518
 80023bc:	2000156c 	.word	0x2000156c

080023c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return 1;
 80023c4:	2301      	movs	r3, #1
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <_kill>:

int _kill(int pid, int sig)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023da:	f006 fc9d 	bl	8008d18 <__errno>
 80023de:	4603      	mov	r3, r0
 80023e0:	2216      	movs	r2, #22
 80023e2:	601a      	str	r2, [r3, #0]
  return -1;
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <_exit>:

void _exit (int status)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ffe7 	bl	80023d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002402:	e7fe      	b.n	8002402 <_exit+0x12>

08002404 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	e00a      	b.n	800242c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002416:	f3af 8000 	nop.w
 800241a:	4601      	mov	r1, r0
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	60ba      	str	r2, [r7, #8]
 8002422:	b2ca      	uxtb	r2, r1
 8002424:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3301      	adds	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	429a      	cmp	r2, r3
 8002432:	dbf0      	blt.n	8002416 <_read+0x12>
  }

  return len;
 8002434:	687b      	ldr	r3, [r7, #4]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <_close>:
  }
  return len;
}

int _close(int file)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002466:	605a      	str	r2, [r3, #4]
  return 0;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <_isatty>:

int _isatty(int file)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800247e:	2301      	movs	r3, #1
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b0:	4a14      	ldr	r2, [pc, #80]	; (8002504 <_sbrk+0x5c>)
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <_sbrk+0x60>)
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <_sbrk+0x64>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <_sbrk+0x64>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <_sbrk+0x68>)
 80024c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d207      	bcs.n	80024e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d8:	f006 fc1e 	bl	8008d18 <__errno>
 80024dc:	4603      	mov	r3, r0
 80024de:	220c      	movs	r2, #12
 80024e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024e6:	e009      	b.n	80024fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <_sbrk+0x64>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	4a05      	ldr	r2, [pc, #20]	; (800250c <_sbrk+0x64>)
 80024f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fa:	68fb      	ldr	r3, [r7, #12]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20020000 	.word	0x20020000
 8002508:	00000400 	.word	0x00000400
 800250c:	20001574 	.word	0x20001574
 8002510:	20005738 	.word	0x20005738

08002514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <SystemInit+0x20>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	4a05      	ldr	r2, [pc, #20]	; (8002534 <SystemInit+0x20>)
 8002520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <vApplicationIdleHook>:
	}
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook (void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
	printf("."); fflush(stdout);
 800253c:	202e      	movs	r0, #46	; 0x2e
 800253e:	f006 f9f3 	bl	8008928 <putchar>
 8002542:	4b04      	ldr	r3, [pc, #16]	; (8002554 <vApplicationIdleHook+0x1c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4618      	mov	r0, r3
 800254a:	f006 f905 	bl	8008758 <fflush>
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000120 	.word	0x20000120

08002558 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002590 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800255c:	f7ff ffda 	bl	8002514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002560:	480c      	ldr	r0, [pc, #48]	; (8002594 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002562:	490d      	ldr	r1, [pc, #52]	; (8002598 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002564:	4a0d      	ldr	r2, [pc, #52]	; (800259c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002568:	e002      	b.n	8002570 <LoopCopyDataInit>

0800256a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800256a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800256c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800256e:	3304      	adds	r3, #4

08002570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002574:	d3f9      	bcc.n	800256a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002576:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002578:	4c0a      	ldr	r4, [pc, #40]	; (80025a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800257a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800257c:	e001      	b.n	8002582 <LoopFillZerobss>

0800257e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800257e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002580:	3204      	adds	r2, #4

08002582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002584:	d3fb      	bcc.n	800257e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002586:	f006 fbcd 	bl	8008d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800258a:	f7ff fb35 	bl	8001bf8 <main>
  bx  lr    
 800258e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002590:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002598:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 800259c:	0800b5ac 	.word	0x0800b5ac
  ldr r2, =_sbss
 80025a0:	2000036c 	.word	0x2000036c
  ldr r4, =_ebss
 80025a4:	20005738 	.word	0x20005738

080025a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025a8:	e7fe      	b.n	80025a8 <ADC_IRQHandler>
	...

080025ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025b0:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <HAL_Init+0x40>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0d      	ldr	r2, [pc, #52]	; (80025ec <HAL_Init+0x40>)
 80025b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <HAL_Init+0x40>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <HAL_Init+0x40>)
 80025c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <HAL_Init+0x40>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a07      	ldr	r2, [pc, #28]	; (80025ec <HAL_Init+0x40>)
 80025ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d4:	2003      	movs	r0, #3
 80025d6:	f000 f94f 	bl	8002878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025da:	200f      	movs	r0, #15
 80025dc:	f000 f808 	bl	80025f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e0:	f7ff fdd4 	bl	800218c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023c00 	.word	0x40023c00

080025f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025f8:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_InitTick+0x54>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_InitTick+0x58>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	4619      	mov	r1, r3
 8002602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002606:	fbb3 f3f1 	udiv	r3, r3, r1
 800260a:	fbb2 f3f3 	udiv	r3, r2, r3
 800260e:	4618      	mov	r0, r3
 8002610:	f000 f967 	bl	80028e2 <HAL_SYSTICK_Config>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e00e      	b.n	800263c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b0f      	cmp	r3, #15
 8002622:	d80a      	bhi.n	800263a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002624:	2200      	movs	r2, #0
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800262c:	f000 f92f 	bl	800288e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002630:	4a06      	ldr	r2, [pc, #24]	; (800264c <HAL_InitTick+0x5c>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	e000      	b.n	800263c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200000b8 	.word	0x200000b8
 8002648:	200000c0 	.word	0x200000c0
 800264c:	200000bc 	.word	0x200000bc

08002650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_IncTick+0x20>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_IncTick+0x24>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4413      	add	r3, r2
 8002660:	4a04      	ldr	r2, [pc, #16]	; (8002674 <HAL_IncTick+0x24>)
 8002662:	6013      	str	r3, [r2, #0]
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	200000c0 	.word	0x200000c0
 8002674:	20001578 	.word	0x20001578

08002678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return uwTick;
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <HAL_GetTick+0x14>)
 800267e:	681b      	ldr	r3, [r3, #0]
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20001578 	.word	0x20001578

08002690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002698:	f7ff ffee 	bl	8002678 <HAL_GetTick>
 800269c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026a8:	d005      	beq.n	80026b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_Delay+0x44>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4413      	add	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026b6:	bf00      	nop
 80026b8:	f7ff ffde 	bl	8002678 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d8f7      	bhi.n	80026b8 <HAL_Delay+0x28>
  {
  }
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200000c0 	.word	0x200000c0

080026d8 <__NVIC_SetPriorityGrouping>:
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <__NVIC_SetPriorityGrouping+0x44>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026f4:	4013      	ands	r3, r2
 80026f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800270a:	4a04      	ldr	r2, [pc, #16]	; (800271c <__NVIC_SetPriorityGrouping+0x44>)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	60d3      	str	r3, [r2, #12]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <__NVIC_GetPriorityGrouping>:
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <__NVIC_GetPriorityGrouping+0x18>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	0a1b      	lsrs	r3, r3, #8
 800272a:	f003 0307 	and.w	r3, r3, #7
}
 800272e:	4618      	mov	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <__NVIC_EnableIRQ>:
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274a:	2b00      	cmp	r3, #0
 800274c:	db0b      	blt.n	8002766 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	f003 021f 	and.w	r2, r3, #31
 8002754:	4907      	ldr	r1, [pc, #28]	; (8002774 <__NVIC_EnableIRQ+0x38>)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	2001      	movs	r0, #1
 800275e:	fa00 f202 	lsl.w	r2, r0, r2
 8002762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	e000e100 	.word	0xe000e100

08002778 <__NVIC_SetPriority>:
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	6039      	str	r1, [r7, #0]
 8002782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002788:	2b00      	cmp	r3, #0
 800278a:	db0a      	blt.n	80027a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	b2da      	uxtb	r2, r3
 8002790:	490c      	ldr	r1, [pc, #48]	; (80027c4 <__NVIC_SetPriority+0x4c>)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	0112      	lsls	r2, r2, #4
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	440b      	add	r3, r1
 800279c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027a0:	e00a      	b.n	80027b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4908      	ldr	r1, [pc, #32]	; (80027c8 <__NVIC_SetPriority+0x50>)
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	3b04      	subs	r3, #4
 80027b0:	0112      	lsls	r2, r2, #4
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	440b      	add	r3, r1
 80027b6:	761a      	strb	r2, [r3, #24]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000e100 	.word	0xe000e100
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <NVIC_EncodePriority>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b089      	sub	sp, #36	; 0x24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f1c3 0307 	rsb	r3, r3, #7
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	bf28      	it	cs
 80027ea:	2304      	movcs	r3, #4
 80027ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3304      	adds	r3, #4
 80027f2:	2b06      	cmp	r3, #6
 80027f4:	d902      	bls.n	80027fc <NVIC_EncodePriority+0x30>
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3b03      	subs	r3, #3
 80027fa:	e000      	b.n	80027fe <NVIC_EncodePriority+0x32>
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43da      	mvns	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	401a      	ands	r2, r3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	fa01 f303 	lsl.w	r3, r1, r3
 800281e:	43d9      	mvns	r1, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002824:	4313      	orrs	r3, r2
}
 8002826:	4618      	mov	r0, r3
 8002828:	3724      	adds	r7, #36	; 0x24
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002844:	d301      	bcc.n	800284a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002846:	2301      	movs	r3, #1
 8002848:	e00f      	b.n	800286a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800284a:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <SysTick_Config+0x40>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3b01      	subs	r3, #1
 8002850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002852:	210f      	movs	r1, #15
 8002854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002858:	f7ff ff8e 	bl	8002778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <SysTick_Config+0x40>)
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002862:	4b04      	ldr	r3, [pc, #16]	; (8002874 <SysTick_Config+0x40>)
 8002864:	2207      	movs	r2, #7
 8002866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	e000e010 	.word	0xe000e010

08002878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ff29 	bl	80026d8 <__NVIC_SetPriorityGrouping>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800288e:	b580      	push	{r7, lr}
 8002890:	b086      	sub	sp, #24
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a0:	f7ff ff3e 	bl	8002720 <__NVIC_GetPriorityGrouping>
 80028a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	6978      	ldr	r0, [r7, #20]
 80028ac:	f7ff ff8e 	bl	80027cc <NVIC_EncodePriority>
 80028b0:	4602      	mov	r2, r0
 80028b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff5d 	bl	8002778 <__NVIC_SetPriority>
}
 80028be:	bf00      	nop
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff31 	bl	800273c <__NVIC_EnableIRQ>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff ffa2 	bl	8002834 <SysTick_Config>
 80028f0:	4603      	mov	r3, r0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002908:	f7ff feb6 	bl	8002678 <HAL_GetTick>
 800290c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d008      	beq.n	800292c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2280      	movs	r2, #128	; 0x80
 800291e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e052      	b.n	80029d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0216 	bic.w	r2, r2, #22
 800293a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800294a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	2b00      	cmp	r3, #0
 8002952:	d103      	bne.n	800295c <HAL_DMA_Abort+0x62>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0208 	bic.w	r2, r2, #8
 800296a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297c:	e013      	b.n	80029a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800297e:	f7ff fe7b 	bl	8002678 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b05      	cmp	r3, #5
 800298a:	d90c      	bls.n	80029a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2203      	movs	r2, #3
 8002996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e015      	b.n	80029d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1e4      	bne.n	800297e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	223f      	movs	r2, #63	; 0x3f
 80029ba:	409a      	lsls	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d004      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2280      	movs	r2, #128	; 0x80
 80029f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e00c      	b.n	8002a12 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2205      	movs	r2, #5
 80029fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0201 	bic.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	e16b      	b.n	8002d14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	f040 815a 	bne.w	8002d0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d005      	beq.n	8002a72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d130      	bne.n	8002ad4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 0201 	and.w	r2, r3, #1
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d017      	beq.n	8002b10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	2203      	movs	r2, #3
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d123      	bne.n	8002b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	08da      	lsrs	r2, r3, #3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3208      	adds	r2, #8
 8002b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	220f      	movs	r2, #15
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	08da      	lsrs	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3208      	adds	r2, #8
 8002b5e:	69b9      	ldr	r1, [r7, #24]
 8002b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	2203      	movs	r2, #3
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0203 	and.w	r2, r3, #3
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80b4 	beq.w	8002d0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	4b60      	ldr	r3, [pc, #384]	; (8002d2c <HAL_GPIO_Init+0x30c>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	4a5f      	ldr	r2, [pc, #380]	; (8002d2c <HAL_GPIO_Init+0x30c>)
 8002bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb6:	4b5d      	ldr	r3, [pc, #372]	; (8002d2c <HAL_GPIO_Init+0x30c>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bc2:	4a5b      	ldr	r2, [pc, #364]	; (8002d30 <HAL_GPIO_Init+0x310>)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	089b      	lsrs	r3, r3, #2
 8002bc8:	3302      	adds	r3, #2
 8002bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	220f      	movs	r2, #15
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a52      	ldr	r2, [pc, #328]	; (8002d34 <HAL_GPIO_Init+0x314>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d02b      	beq.n	8002c46 <HAL_GPIO_Init+0x226>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a51      	ldr	r2, [pc, #324]	; (8002d38 <HAL_GPIO_Init+0x318>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d025      	beq.n	8002c42 <HAL_GPIO_Init+0x222>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a50      	ldr	r2, [pc, #320]	; (8002d3c <HAL_GPIO_Init+0x31c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d01f      	beq.n	8002c3e <HAL_GPIO_Init+0x21e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a4f      	ldr	r2, [pc, #316]	; (8002d40 <HAL_GPIO_Init+0x320>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d019      	beq.n	8002c3a <HAL_GPIO_Init+0x21a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a4e      	ldr	r2, [pc, #312]	; (8002d44 <HAL_GPIO_Init+0x324>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_GPIO_Init+0x216>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4d      	ldr	r2, [pc, #308]	; (8002d48 <HAL_GPIO_Init+0x328>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00d      	beq.n	8002c32 <HAL_GPIO_Init+0x212>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a4c      	ldr	r2, [pc, #304]	; (8002d4c <HAL_GPIO_Init+0x32c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d007      	beq.n	8002c2e <HAL_GPIO_Init+0x20e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a4b      	ldr	r2, [pc, #300]	; (8002d50 <HAL_GPIO_Init+0x330>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d101      	bne.n	8002c2a <HAL_GPIO_Init+0x20a>
 8002c26:	2307      	movs	r3, #7
 8002c28:	e00e      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c2a:	2308      	movs	r3, #8
 8002c2c:	e00c      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c2e:	2306      	movs	r3, #6
 8002c30:	e00a      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c32:	2305      	movs	r3, #5
 8002c34:	e008      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c36:	2304      	movs	r3, #4
 8002c38:	e006      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e004      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e002      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c46:	2300      	movs	r3, #0
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	f002 0203 	and.w	r2, r2, #3
 8002c4e:	0092      	lsls	r2, r2, #2
 8002c50:	4093      	lsls	r3, r2
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c58:	4935      	ldr	r1, [pc, #212]	; (8002d30 <HAL_GPIO_Init+0x310>)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	3302      	adds	r3, #2
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c66:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c8a:	4a32      	ldr	r2, [pc, #200]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c90:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cb4:	4a27      	ldr	r2, [pc, #156]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cba:	4b26      	ldr	r3, [pc, #152]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cde:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d08:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3301      	adds	r3, #1
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b0f      	cmp	r3, #15
 8002d18:	f67f ae90 	bls.w	8002a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
 8002d20:	3724      	adds	r7, #36	; 0x24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40013800 	.word	0x40013800
 8002d34:	40020000 	.word	0x40020000
 8002d38:	40020400 	.word	0x40020400
 8002d3c:	40020800 	.word	0x40020800
 8002d40:	40020c00 	.word	0x40020c00
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40021400 	.word	0x40021400
 8002d4c:	40021800 	.word	0x40021800
 8002d50:	40021c00 	.word	0x40021c00
 8002d54:	40013c00 	.word	0x40013c00

08002d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	807b      	strh	r3, [r7, #2]
 8002d64:	4613      	mov	r3, r2
 8002d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d68:	787b      	ldrb	r3, [r7, #1]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d74:	e003      	b.n	8002d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d76:	887b      	ldrh	r3, [r7, #2]
 8002d78:	041a      	lsls	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	619a      	str	r2, [r3, #24]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e267      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d075      	beq.n	8002e96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002daa:	4b88      	ldr	r3, [pc, #544]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d00c      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002db6:	4b85      	ldr	r3, [pc, #532]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d112      	bne.n	8002de8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dc2:	4b82      	ldr	r3, [pc, #520]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dce:	d10b      	bne.n	8002de8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd0:	4b7e      	ldr	r3, [pc, #504]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d05b      	beq.n	8002e94 <HAL_RCC_OscConfig+0x108>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d157      	bne.n	8002e94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e242      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df0:	d106      	bne.n	8002e00 <HAL_RCC_OscConfig+0x74>
 8002df2:	4b76      	ldr	r3, [pc, #472]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a75      	ldr	r2, [pc, #468]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e01d      	b.n	8002e3c <HAL_RCC_OscConfig+0xb0>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x98>
 8002e0a:	4b70      	ldr	r3, [pc, #448]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a6f      	ldr	r2, [pc, #444]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	4b6d      	ldr	r3, [pc, #436]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a6c      	ldr	r2, [pc, #432]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	e00b      	b.n	8002e3c <HAL_RCC_OscConfig+0xb0>
 8002e24:	4b69      	ldr	r3, [pc, #420]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a68      	ldr	r2, [pc, #416]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	4b66      	ldr	r3, [pc, #408]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a65      	ldr	r2, [pc, #404]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d013      	beq.n	8002e6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7ff fc18 	bl	8002678 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e4c:	f7ff fc14 	bl	8002678 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	; 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e207      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5e:	4b5b      	ldr	r3, [pc, #364]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0xc0>
 8002e6a:	e014      	b.n	8002e96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6c:	f7ff fc04 	bl	8002678 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e74:	f7ff fc00 	bl	8002678 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b64      	cmp	r3, #100	; 0x64
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e1f3      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e86:	4b51      	ldr	r3, [pc, #324]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0xe8>
 8002e92:	e000      	b.n	8002e96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d063      	beq.n	8002f6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ea2:	4b4a      	ldr	r3, [pc, #296]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eae:	4b47      	ldr	r3, [pc, #284]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d11c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eba:	4b44      	ldr	r3, [pc, #272]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d116      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec6:	4b41      	ldr	r3, [pc, #260]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <HAL_RCC_OscConfig+0x152>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d001      	beq.n	8002ede <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e1c7      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ede:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4937      	ldr	r1, [pc, #220]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef2:	e03a      	b.n	8002f6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d020      	beq.n	8002f3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002efc:	4b34      	ldr	r3, [pc, #208]	; (8002fd0 <HAL_RCC_OscConfig+0x244>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f02:	f7ff fbb9 	bl	8002678 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f0a:	f7ff fbb5 	bl	8002678 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e1a8      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1c:	4b2b      	ldr	r3, [pc, #172]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f0      	beq.n	8002f0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f28:	4b28      	ldr	r3, [pc, #160]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4925      	ldr	r1, [pc, #148]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	600b      	str	r3, [r1, #0]
 8002f3c:	e015      	b.n	8002f6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f3e:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <HAL_RCC_OscConfig+0x244>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7ff fb98 	bl	8002678 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f4c:	f7ff fb94 	bl	8002678 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e187      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5e:	4b1b      	ldr	r3, [pc, #108]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d036      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d016      	beq.n	8002fac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7e:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <HAL_RCC_OscConfig+0x248>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f84:	f7ff fb78 	bl	8002678 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f8c:	f7ff fb74 	bl	8002678 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e167      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <HAL_RCC_OscConfig+0x240>)
 8002fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0x200>
 8002faa:	e01b      	b.n	8002fe4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_RCC_OscConfig+0x248>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb2:	f7ff fb61 	bl	8002678 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb8:	e00e      	b.n	8002fd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fba:	f7ff fb5d 	bl	8002678 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d907      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e150      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	42470000 	.word	0x42470000
 8002fd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd8:	4b88      	ldr	r3, [pc, #544]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8002fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1ea      	bne.n	8002fba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 8097 	beq.w	8003120 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff6:	4b81      	ldr	r3, [pc, #516]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10f      	bne.n	8003022 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	4b7d      	ldr	r3, [pc, #500]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	4a7c      	ldr	r2, [pc, #496]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 800300c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003010:	6413      	str	r3, [r2, #64]	; 0x40
 8003012:	4b7a      	ldr	r3, [pc, #488]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301e:	2301      	movs	r3, #1
 8003020:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003022:	4b77      	ldr	r3, [pc, #476]	; (8003200 <HAL_RCC_OscConfig+0x474>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d118      	bne.n	8003060 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800302e:	4b74      	ldr	r3, [pc, #464]	; (8003200 <HAL_RCC_OscConfig+0x474>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a73      	ldr	r2, [pc, #460]	; (8003200 <HAL_RCC_OscConfig+0x474>)
 8003034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303a:	f7ff fb1d 	bl	8002678 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003042:	f7ff fb19 	bl	8002678 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e10c      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003054:	4b6a      	ldr	r3, [pc, #424]	; (8003200 <HAL_RCC_OscConfig+0x474>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d106      	bne.n	8003076 <HAL_RCC_OscConfig+0x2ea>
 8003068:	4b64      	ldr	r3, [pc, #400]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	4a63      	ldr	r2, [pc, #396]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	6713      	str	r3, [r2, #112]	; 0x70
 8003074:	e01c      	b.n	80030b0 <HAL_RCC_OscConfig+0x324>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b05      	cmp	r3, #5
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0x30c>
 800307e:	4b5f      	ldr	r3, [pc, #380]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	4a5e      	ldr	r2, [pc, #376]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8003084:	f043 0304 	orr.w	r3, r3, #4
 8003088:	6713      	str	r3, [r2, #112]	; 0x70
 800308a:	4b5c      	ldr	r3, [pc, #368]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	4a5b      	ldr	r2, [pc, #364]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	6713      	str	r3, [r2, #112]	; 0x70
 8003096:	e00b      	b.n	80030b0 <HAL_RCC_OscConfig+0x324>
 8003098:	4b58      	ldr	r3, [pc, #352]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309c:	4a57      	ldr	r2, [pc, #348]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	6713      	str	r3, [r2, #112]	; 0x70
 80030a4:	4b55      	ldr	r3, [pc, #340]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a8:	4a54      	ldr	r2, [pc, #336]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 80030aa:	f023 0304 	bic.w	r3, r3, #4
 80030ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d015      	beq.n	80030e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b8:	f7ff fade 	bl	8002678 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c0:	f7ff fada 	bl	8002678 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e0cb      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d6:	4b49      	ldr	r3, [pc, #292]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0ee      	beq.n	80030c0 <HAL_RCC_OscConfig+0x334>
 80030e2:	e014      	b.n	800310e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e4:	f7ff fac8 	bl	8002678 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ea:	e00a      	b.n	8003102 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ec:	f7ff fac4 	bl	8002678 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e0b5      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003102:	4b3e      	ldr	r3, [pc, #248]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1ee      	bne.n	80030ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800310e:	7dfb      	ldrb	r3, [r7, #23]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d105      	bne.n	8003120 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003114:	4b39      	ldr	r3, [pc, #228]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	4a38      	ldr	r2, [pc, #224]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 800311a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80a1 	beq.w	800326c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800312a:	4b34      	ldr	r3, [pc, #208]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b08      	cmp	r3, #8
 8003134:	d05c      	beq.n	80031f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d141      	bne.n	80031c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313e:	4b31      	ldr	r3, [pc, #196]	; (8003204 <HAL_RCC_OscConfig+0x478>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7ff fa98 	bl	8002678 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314c:	f7ff fa94 	bl	8002678 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e087      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	4b27      	ldr	r3, [pc, #156]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69da      	ldr	r2, [r3, #28]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	019b      	lsls	r3, r3, #6
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	085b      	lsrs	r3, r3, #1
 8003182:	3b01      	subs	r3, #1
 8003184:	041b      	lsls	r3, r3, #16
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	061b      	lsls	r3, r3, #24
 800318e:	491b      	ldr	r1, [pc, #108]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003194:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <HAL_RCC_OscConfig+0x478>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319a:	f7ff fa6d 	bl	8002678 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a2:	f7ff fa69 	bl	8002678 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e05c      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b4:	4b11      	ldr	r3, [pc, #68]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x416>
 80031c0:	e054      	b.n	800326c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c2:	4b10      	ldr	r3, [pc, #64]	; (8003204 <HAL_RCC_OscConfig+0x478>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7ff fa56 	bl	8002678 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d0:	f7ff fa52 	bl	8002678 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e045      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_RCC_OscConfig+0x470>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x444>
 80031ee:	e03d      	b.n	800326c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d107      	bne.n	8003208 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e038      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
 80031fc:	40023800 	.word	0x40023800
 8003200:	40007000 	.word	0x40007000
 8003204:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003208:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <HAL_RCC_OscConfig+0x4ec>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d028      	beq.n	8003268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003220:	429a      	cmp	r2, r3
 8003222:	d121      	bne.n	8003268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d11a      	bne.n	8003268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003238:	4013      	ands	r3, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800323e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003240:	4293      	cmp	r3, r2
 8003242:	d111      	bne.n	8003268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	3b01      	subs	r3, #1
 8003252:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d107      	bne.n	8003268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40023800 	.word	0x40023800

0800327c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0cc      	b.n	800342a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003290:	4b68      	ldr	r3, [pc, #416]	; (8003434 <HAL_RCC_ClockConfig+0x1b8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d90c      	bls.n	80032b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b65      	ldr	r3, [pc, #404]	; (8003434 <HAL_RCC_ClockConfig+0x1b8>)
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a6:	4b63      	ldr	r3, [pc, #396]	; (8003434 <HAL_RCC_ClockConfig+0x1b8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d001      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0b8      	b.n	800342a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d020      	beq.n	8003306 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d0:	4b59      	ldr	r3, [pc, #356]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	4a58      	ldr	r2, [pc, #352]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032e8:	4b53      	ldr	r3, [pc, #332]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	4a52      	ldr	r2, [pc, #328]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f4:	4b50      	ldr	r3, [pc, #320]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	494d      	ldr	r1, [pc, #308]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	4313      	orrs	r3, r2
 8003304:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d044      	beq.n	800339c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d107      	bne.n	800332a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	4b47      	ldr	r3, [pc, #284]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d119      	bne.n	800335a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e07f      	b.n	800342a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d003      	beq.n	800333a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003336:	2b03      	cmp	r3, #3
 8003338:	d107      	bne.n	800334a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333a:	4b3f      	ldr	r3, [pc, #252]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e06f      	b.n	800342a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334a:	4b3b      	ldr	r3, [pc, #236]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e067      	b.n	800342a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800335a:	4b37      	ldr	r3, [pc, #220]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f023 0203 	bic.w	r2, r3, #3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4934      	ldr	r1, [pc, #208]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	4313      	orrs	r3, r2
 800336a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800336c:	f7ff f984 	bl	8002678 <HAL_GetTick>
 8003370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003372:	e00a      	b.n	800338a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003374:	f7ff f980 	bl	8002678 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003382:	4293      	cmp	r3, r2
 8003384:	d901      	bls.n	800338a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e04f      	b.n	800342a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338a:	4b2b      	ldr	r3, [pc, #172]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 020c 	and.w	r2, r3, #12
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	429a      	cmp	r2, r3
 800339a:	d1eb      	bne.n	8003374 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800339c:	4b25      	ldr	r3, [pc, #148]	; (8003434 <HAL_RCC_ClockConfig+0x1b8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d20c      	bcs.n	80033c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033aa:	4b22      	ldr	r3, [pc, #136]	; (8003434 <HAL_RCC_ClockConfig+0x1b8>)
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b20      	ldr	r3, [pc, #128]	; (8003434 <HAL_RCC_ClockConfig+0x1b8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e032      	b.n	800342a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d0:	4b19      	ldr	r3, [pc, #100]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	4916      	ldr	r1, [pc, #88]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d009      	beq.n	8003402 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ee:	4b12      	ldr	r3, [pc, #72]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	490e      	ldr	r1, [pc, #56]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003402:	f000 f821 	bl	8003448 <HAL_RCC_GetSysClockFreq>
 8003406:	4602      	mov	r2, r0
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	490a      	ldr	r1, [pc, #40]	; (800343c <HAL_RCC_ClockConfig+0x1c0>)
 8003414:	5ccb      	ldrb	r3, [r1, r3]
 8003416:	fa22 f303 	lsr.w	r3, r2, r3
 800341a:	4a09      	ldr	r2, [pc, #36]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 800341c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800341e:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff f8e4 	bl	80025f0 <HAL_InitTick>

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40023c00 	.word	0x40023c00
 8003438:	40023800 	.word	0x40023800
 800343c:	0800b214 	.word	0x0800b214
 8003440:	200000b8 	.word	0x200000b8
 8003444:	200000bc 	.word	0x200000bc

08003448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800344c:	b094      	sub	sp, #80	; 0x50
 800344e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	647b      	str	r3, [r7, #68]	; 0x44
 8003454:	2300      	movs	r3, #0
 8003456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003458:	2300      	movs	r3, #0
 800345a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003460:	4b79      	ldr	r3, [pc, #484]	; (8003648 <HAL_RCC_GetSysClockFreq+0x200>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 030c 	and.w	r3, r3, #12
 8003468:	2b08      	cmp	r3, #8
 800346a:	d00d      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x40>
 800346c:	2b08      	cmp	r3, #8
 800346e:	f200 80e1 	bhi.w	8003634 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0x34>
 8003476:	2b04      	cmp	r3, #4
 8003478:	d003      	beq.n	8003482 <HAL_RCC_GetSysClockFreq+0x3a>
 800347a:	e0db      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800347c:	4b73      	ldr	r3, [pc, #460]	; (800364c <HAL_RCC_GetSysClockFreq+0x204>)
 800347e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003480:	e0db      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003482:	4b73      	ldr	r3, [pc, #460]	; (8003650 <HAL_RCC_GetSysClockFreq+0x208>)
 8003484:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003486:	e0d8      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003488:	4b6f      	ldr	r3, [pc, #444]	; (8003648 <HAL_RCC_GetSysClockFreq+0x200>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003490:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003492:	4b6d      	ldr	r3, [pc, #436]	; (8003648 <HAL_RCC_GetSysClockFreq+0x200>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d063      	beq.n	8003566 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800349e:	4b6a      	ldr	r3, [pc, #424]	; (8003648 <HAL_RCC_GetSysClockFreq+0x200>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	099b      	lsrs	r3, r3, #6
 80034a4:	2200      	movs	r2, #0
 80034a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80034a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b0:	633b      	str	r3, [r7, #48]	; 0x30
 80034b2:	2300      	movs	r3, #0
 80034b4:	637b      	str	r3, [r7, #52]	; 0x34
 80034b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034ba:	4622      	mov	r2, r4
 80034bc:	462b      	mov	r3, r5
 80034be:	f04f 0000 	mov.w	r0, #0
 80034c2:	f04f 0100 	mov.w	r1, #0
 80034c6:	0159      	lsls	r1, r3, #5
 80034c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034cc:	0150      	lsls	r0, r2, #5
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4621      	mov	r1, r4
 80034d4:	1a51      	subs	r1, r2, r1
 80034d6:	6139      	str	r1, [r7, #16]
 80034d8:	4629      	mov	r1, r5
 80034da:	eb63 0301 	sbc.w	r3, r3, r1
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034ec:	4659      	mov	r1, fp
 80034ee:	018b      	lsls	r3, r1, #6
 80034f0:	4651      	mov	r1, sl
 80034f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034f6:	4651      	mov	r1, sl
 80034f8:	018a      	lsls	r2, r1, #6
 80034fa:	4651      	mov	r1, sl
 80034fc:	ebb2 0801 	subs.w	r8, r2, r1
 8003500:	4659      	mov	r1, fp
 8003502:	eb63 0901 	sbc.w	r9, r3, r1
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003512:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003516:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800351a:	4690      	mov	r8, r2
 800351c:	4699      	mov	r9, r3
 800351e:	4623      	mov	r3, r4
 8003520:	eb18 0303 	adds.w	r3, r8, r3
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	462b      	mov	r3, r5
 8003528:	eb49 0303 	adc.w	r3, r9, r3
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800353a:	4629      	mov	r1, r5
 800353c:	024b      	lsls	r3, r1, #9
 800353e:	4621      	mov	r1, r4
 8003540:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003544:	4621      	mov	r1, r4
 8003546:	024a      	lsls	r2, r1, #9
 8003548:	4610      	mov	r0, r2
 800354a:	4619      	mov	r1, r3
 800354c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800354e:	2200      	movs	r2, #0
 8003550:	62bb      	str	r3, [r7, #40]	; 0x28
 8003552:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003554:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003558:	f7fd fb36 	bl	8000bc8 <__aeabi_uldivmod>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4613      	mov	r3, r2
 8003562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003564:	e058      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003566:	4b38      	ldr	r3, [pc, #224]	; (8003648 <HAL_RCC_GetSysClockFreq+0x200>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	099b      	lsrs	r3, r3, #6
 800356c:	2200      	movs	r2, #0
 800356e:	4618      	mov	r0, r3
 8003570:	4611      	mov	r1, r2
 8003572:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003576:	623b      	str	r3, [r7, #32]
 8003578:	2300      	movs	r3, #0
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
 800357c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003580:	4642      	mov	r2, r8
 8003582:	464b      	mov	r3, r9
 8003584:	f04f 0000 	mov.w	r0, #0
 8003588:	f04f 0100 	mov.w	r1, #0
 800358c:	0159      	lsls	r1, r3, #5
 800358e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003592:	0150      	lsls	r0, r2, #5
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4641      	mov	r1, r8
 800359a:	ebb2 0a01 	subs.w	sl, r2, r1
 800359e:	4649      	mov	r1, r9
 80035a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035b8:	ebb2 040a 	subs.w	r4, r2, sl
 80035bc:	eb63 050b 	sbc.w	r5, r3, fp
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	00eb      	lsls	r3, r5, #3
 80035ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ce:	00e2      	lsls	r2, r4, #3
 80035d0:	4614      	mov	r4, r2
 80035d2:	461d      	mov	r5, r3
 80035d4:	4643      	mov	r3, r8
 80035d6:	18e3      	adds	r3, r4, r3
 80035d8:	603b      	str	r3, [r7, #0]
 80035da:	464b      	mov	r3, r9
 80035dc:	eb45 0303 	adc.w	r3, r5, r3
 80035e0:	607b      	str	r3, [r7, #4]
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ee:	4629      	mov	r1, r5
 80035f0:	028b      	lsls	r3, r1, #10
 80035f2:	4621      	mov	r1, r4
 80035f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035f8:	4621      	mov	r1, r4
 80035fa:	028a      	lsls	r2, r1, #10
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003602:	2200      	movs	r2, #0
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	61fa      	str	r2, [r7, #28]
 8003608:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800360c:	f7fd fadc 	bl	8000bc8 <__aeabi_uldivmod>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4613      	mov	r3, r2
 8003616:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_RCC_GetSysClockFreq+0x200>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	0c1b      	lsrs	r3, r3, #16
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	3301      	adds	r3, #1
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003628:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800362a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800362c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003630:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003632:	e002      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_GetSysClockFreq+0x204>)
 8003636:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800363a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800363c:	4618      	mov	r0, r3
 800363e:	3750      	adds	r7, #80	; 0x50
 8003640:	46bd      	mov	sp, r7
 8003642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800
 800364c:	00f42400 	.word	0x00f42400
 8003650:	007a1200 	.word	0x007a1200

08003654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <HAL_RCC_GetHCLKFreq+0x14>)
 800365a:	681b      	ldr	r3, [r3, #0]
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	200000b8 	.word	0x200000b8

0800366c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003670:	f7ff fff0 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 8003674:	4602      	mov	r2, r0
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	0a9b      	lsrs	r3, r3, #10
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	4903      	ldr	r1, [pc, #12]	; (8003690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003682:	5ccb      	ldrb	r3, [r1, r3]
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003688:	4618      	mov	r0, r3
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40023800 	.word	0x40023800
 8003690:	0800b224 	.word	0x0800b224

08003694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003698:	f7ff ffdc 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 800369c:	4602      	mov	r2, r0
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	0b5b      	lsrs	r3, r3, #13
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	4903      	ldr	r1, [pc, #12]	; (80036b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036aa:	5ccb      	ldrb	r3, [r1, r3]
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40023800 	.word	0x40023800
 80036b8:	0800b224 	.word	0x0800b224

080036bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e041      	b.n	8003752 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fe fd86 	bl	80021f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3304      	adds	r3, #4
 80036f8:	4619      	mov	r1, r3
 80036fa:	4610      	mov	r0, r2
 80036fc:	f000 f9f0 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b01      	cmp	r3, #1
 800376e:	d001      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e04e      	b.n	8003812 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a23      	ldr	r2, [pc, #140]	; (8003820 <HAL_TIM_Base_Start_IT+0xc4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d022      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x80>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379e:	d01d      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x80>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1f      	ldr	r2, [pc, #124]	; (8003824 <HAL_TIM_Base_Start_IT+0xc8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d018      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x80>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1e      	ldr	r2, [pc, #120]	; (8003828 <HAL_TIM_Base_Start_IT+0xcc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d013      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x80>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1c      	ldr	r2, [pc, #112]	; (800382c <HAL_TIM_Base_Start_IT+0xd0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00e      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x80>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a1b      	ldr	r2, [pc, #108]	; (8003830 <HAL_TIM_Base_Start_IT+0xd4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d009      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x80>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a19      	ldr	r2, [pc, #100]	; (8003834 <HAL_TIM_Base_Start_IT+0xd8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d004      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x80>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a18      	ldr	r2, [pc, #96]	; (8003838 <HAL_TIM_Base_Start_IT+0xdc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d111      	bne.n	8003800 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b06      	cmp	r3, #6
 80037ec:	d010      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0201 	orr.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037fe:	e007      	b.n	8003810 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40010000 	.word	0x40010000
 8003824:	40000400 	.word	0x40000400
 8003828:	40000800 	.word	0x40000800
 800382c:	40000c00 	.word	0x40000c00
 8003830:	40010400 	.word	0x40010400
 8003834:	40014000 	.word	0x40014000
 8003838:	40001800 	.word	0x40001800

0800383c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6a1a      	ldr	r2, [r3, #32]
 800385a:	f241 1311 	movw	r3, #4369	; 0x1111
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10f      	bne.n	8003884 <HAL_TIM_Base_Stop_IT+0x48>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6a1a      	ldr	r2, [r3, #32]
 800386a:	f240 4344 	movw	r3, #1092	; 0x444
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d107      	bne.n	8003884 <HAL_TIM_Base_Stop_IT+0x48>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d020      	beq.n	80038fe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d01b      	beq.n	80038fe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f06f 0202 	mvn.w	r2, #2
 80038ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f8dc 	bl	8003aa2 <HAL_TIM_IC_CaptureCallback>
 80038ea:	e005      	b.n	80038f8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f8ce 	bl	8003a8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f8df 	bl	8003ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d020      	beq.n	800394a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	d01b      	beq.n	800394a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f06f 0204 	mvn.w	r2, #4
 800391a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f8b6 	bl	8003aa2 <HAL_TIM_IC_CaptureCallback>
 8003936:	e005      	b.n	8003944 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f8a8 	bl	8003a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f8b9 	bl	8003ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d020      	beq.n	8003996 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d01b      	beq.n	8003996 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f06f 0208 	mvn.w	r2, #8
 8003966:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2204      	movs	r2, #4
 800396c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f890 	bl	8003aa2 <HAL_TIM_IC_CaptureCallback>
 8003982:	e005      	b.n	8003990 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f882 	bl	8003a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f893 	bl	8003ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	2b00      	cmp	r3, #0
 800399e:	d020      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d01b      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f06f 0210 	mvn.w	r2, #16
 80039b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2208      	movs	r2, #8
 80039b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f86a 	bl	8003aa2 <HAL_TIM_IC_CaptureCallback>
 80039ce:	e005      	b.n	80039dc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f85c 	bl	8003a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f86d 	bl	8003ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00c      	beq.n	8003a06 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f06f 0201 	mvn.w	r2, #1
 80039fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f83a 	bl	8003a7a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00c      	beq.n	8003a2a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f98d 	bl	8003d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00c      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f83e 	bl	8003aca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00c      	beq.n	8003a72 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f06f 0220 	mvn.w	r2, #32
 8003a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f95f 	bl	8003d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
	...

08003ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a46      	ldr	r2, [pc, #280]	; (8003c0c <TIM_Base_SetConfig+0x12c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d013      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afe:	d00f      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a43      	ldr	r2, [pc, #268]	; (8003c10 <TIM_Base_SetConfig+0x130>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00b      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a42      	ldr	r2, [pc, #264]	; (8003c14 <TIM_Base_SetConfig+0x134>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d007      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a41      	ldr	r2, [pc, #260]	; (8003c18 <TIM_Base_SetConfig+0x138>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a40      	ldr	r2, [pc, #256]	; (8003c1c <TIM_Base_SetConfig+0x13c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d108      	bne.n	8003b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a35      	ldr	r2, [pc, #212]	; (8003c0c <TIM_Base_SetConfig+0x12c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d02b      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b40:	d027      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a32      	ldr	r2, [pc, #200]	; (8003c10 <TIM_Base_SetConfig+0x130>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d023      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a31      	ldr	r2, [pc, #196]	; (8003c14 <TIM_Base_SetConfig+0x134>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d01f      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a30      	ldr	r2, [pc, #192]	; (8003c18 <TIM_Base_SetConfig+0x138>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d01b      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a2f      	ldr	r2, [pc, #188]	; (8003c1c <TIM_Base_SetConfig+0x13c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d017      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a2e      	ldr	r2, [pc, #184]	; (8003c20 <TIM_Base_SetConfig+0x140>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d013      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a2d      	ldr	r2, [pc, #180]	; (8003c24 <TIM_Base_SetConfig+0x144>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00f      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a2c      	ldr	r2, [pc, #176]	; (8003c28 <TIM_Base_SetConfig+0x148>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00b      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a2b      	ldr	r2, [pc, #172]	; (8003c2c <TIM_Base_SetConfig+0x14c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a2a      	ldr	r2, [pc, #168]	; (8003c30 <TIM_Base_SetConfig+0x150>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d003      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a29      	ldr	r2, [pc, #164]	; (8003c34 <TIM_Base_SetConfig+0x154>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d108      	bne.n	8003ba4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a10      	ldr	r2, [pc, #64]	; (8003c0c <TIM_Base_SetConfig+0x12c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_Base_SetConfig+0xf8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a12      	ldr	r2, [pc, #72]	; (8003c1c <TIM_Base_SetConfig+0x13c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d103      	bne.n	8003be0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d105      	bne.n	8003bfe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f023 0201 	bic.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	611a      	str	r2, [r3, #16]
  }
}
 8003bfe:	bf00      	nop
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40010000 	.word	0x40010000
 8003c10:	40000400 	.word	0x40000400
 8003c14:	40000800 	.word	0x40000800
 8003c18:	40000c00 	.word	0x40000c00
 8003c1c:	40010400 	.word	0x40010400
 8003c20:	40014000 	.word	0x40014000
 8003c24:	40014400 	.word	0x40014400
 8003c28:	40014800 	.word	0x40014800
 8003c2c:	40001800 	.word	0x40001800
 8003c30:	40001c00 	.word	0x40001c00
 8003c34:	40002000 	.word	0x40002000

08003c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e05a      	b.n	8003d06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a21      	ldr	r2, [pc, #132]	; (8003d14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d022      	beq.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9c:	d01d      	beq.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1d      	ldr	r2, [pc, #116]	; (8003d18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d018      	beq.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1b      	ldr	r2, [pc, #108]	; (8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d013      	beq.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1a      	ldr	r2, [pc, #104]	; (8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00e      	beq.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a18      	ldr	r2, [pc, #96]	; (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d009      	beq.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a17      	ldr	r2, [pc, #92]	; (8003d28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d004      	beq.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40010000 	.word	0x40010000
 8003d18:	40000400 	.word	0x40000400
 8003d1c:	40000800 	.word	0x40000800
 8003d20:	40000c00 	.word	0x40000c00
 8003d24:	40010400 	.word	0x40010400
 8003d28:	40014000 	.word	0x40014000
 8003d2c:	40001800 	.word	0x40001800

08003d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e042      	b.n	8003df0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d106      	bne.n	8003d84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7fe fa60 	bl	8002244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2224      	movs	r2, #36	; 0x24
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fd69 	bl	8004874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695a      	ldr	r2, [r3, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08a      	sub	sp, #40	; 0x28
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	4613      	mov	r3, r2
 8003e06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	d175      	bne.n	8003f04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <HAL_UART_Transmit+0x2c>
 8003e1e:	88fb      	ldrh	r3, [r7, #6]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e06e      	b.n	8003f06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2221      	movs	r2, #33	; 0x21
 8003e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e36:	f7fe fc1f 	bl	8002678 <HAL_GetTick>
 8003e3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	88fa      	ldrh	r2, [r7, #6]
 8003e40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	88fa      	ldrh	r2, [r7, #6]
 8003e46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e50:	d108      	bne.n	8003e64 <HAL_UART_Transmit+0x6c>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d104      	bne.n	8003e64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	e003      	b.n	8003e6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e6c:	e02e      	b.n	8003ecc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2200      	movs	r2, #0
 8003e76:	2180      	movs	r1, #128	; 0x80
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 fb05 	bl	8004488 <UART_WaitOnFlagUntilTimeout>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e03a      	b.n	8003f06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10b      	bne.n	8003eae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ea4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	3302      	adds	r3, #2
 8003eaa:	61bb      	str	r3, [r7, #24]
 8003eac:	e007      	b.n	8003ebe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	781a      	ldrb	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1cb      	bne.n	8003e6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2200      	movs	r2, #0
 8003ede:	2140      	movs	r1, #64	; 0x40
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 fad1 	bl	8004488 <UART_WaitOnFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e006      	b.n	8003f06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	e000      	b.n	8003f06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f04:	2302      	movs	r3, #2
  }
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3720      	adds	r7, #32
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b0ba      	sub	sp, #232	; 0xe8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10f      	bne.n	8003f76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <HAL_UART_IRQHandler+0x66>
 8003f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fbc2 	bl	80046f8 <UART_Receive_IT>
      return;
 8003f74:	e25b      	b.n	800442e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 80de 	beq.w	800413c <HAL_UART_IRQHandler+0x22c>
 8003f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d106      	bne.n	8003f9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80d1 	beq.w	800413c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <HAL_UART_IRQHandler+0xae>
 8003fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	f043 0201 	orr.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00b      	beq.n	8003fe2 <HAL_UART_IRQHandler+0xd2>
 8003fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	f043 0202 	orr.w	r2, r3, #2
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <HAL_UART_IRQHandler+0xf6>
 8003fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	f043 0204 	orr.w	r2, r3, #4
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d011      	beq.n	8004036 <HAL_UART_IRQHandler+0x126>
 8004012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d105      	bne.n	800402a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800401e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	f043 0208 	orr.w	r2, r3, #8
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 81f2 	beq.w	8004424 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_UART_IRQHandler+0x14e>
 800404c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 fb4d 	bl	80046f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b40      	cmp	r3, #64	; 0x40
 800406a:	bf0c      	ite	eq
 800406c:	2301      	moveq	r3, #1
 800406e:	2300      	movne	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d103      	bne.n	800408a <HAL_UART_IRQHandler+0x17a>
 8004082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004086:	2b00      	cmp	r3, #0
 8004088:	d04f      	beq.n	800412a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fa55 	bl	800453a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b40      	cmp	r3, #64	; 0x40
 800409c:	d141      	bne.n	8004122 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3314      	adds	r3, #20
 80040a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3314      	adds	r3, #20
 80040c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1d9      	bne.n	800409e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d013      	beq.n	800411a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f6:	4a7e      	ldr	r2, [pc, #504]	; (80042f0 <HAL_UART_IRQHandler+0x3e0>)
 80040f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe fc6b 	bl	80029da <HAL_DMA_Abort_IT>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d016      	beq.n	8004138 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004114:	4610      	mov	r0, r2
 8004116:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004118:	e00e      	b.n	8004138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f99e 	bl	800445c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004120:	e00a      	b.n	8004138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f99a 	bl	800445c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004128:	e006      	b.n	8004138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f996 	bl	800445c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004136:	e175      	b.n	8004424 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004138:	bf00      	nop
    return;
 800413a:	e173      	b.n	8004424 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	2b01      	cmp	r3, #1
 8004142:	f040 814f 	bne.w	80043e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 8148 	beq.w	80043e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 8141 	beq.w	80043e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004162:	2300      	movs	r3, #0
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004182:	2b40      	cmp	r3, #64	; 0x40
 8004184:	f040 80b6 	bne.w	80042f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004194:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 8145 	beq.w	8004428 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041a6:	429a      	cmp	r2, r3
 80041a8:	f080 813e 	bcs.w	8004428 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041be:	f000 8088 	beq.w	80042d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	330c      	adds	r3, #12
 80041c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	330c      	adds	r3, #12
 80041ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80041ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004206:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1d9      	bne.n	80041c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3314      	adds	r3, #20
 8004214:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800421e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3314      	adds	r3, #20
 800422e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004232:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004236:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800423a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e1      	bne.n	800420e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3314      	adds	r3, #20
 8004250:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800425a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800425c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3314      	adds	r3, #20
 800426a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800426e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004270:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004274:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800427c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e3      	bne.n	800424a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a2:	f023 0310 	bic.w	r3, r3, #16
 80042a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	330c      	adds	r3, #12
 80042b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80042b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80042b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e3      	bne.n	8004290 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fe fb14 	bl	80028fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2202      	movs	r2, #2
 80042d6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	4619      	mov	r1, r3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f8c1 	bl	8004470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042ee:	e09b      	b.n	8004428 <HAL_UART_IRQHandler+0x518>
 80042f0:	08004601 	.word	0x08004601
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 808e 	beq.w	800442c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8089 	beq.w	800442c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	330c      	adds	r3, #12
 8004320:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800432a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004330:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	330c      	adds	r3, #12
 800433a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800433e:	647a      	str	r2, [r7, #68]	; 0x44
 8004340:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004344:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800434c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e3      	bne.n	800431a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3314      	adds	r3, #20
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	623b      	str	r3, [r7, #32]
   return(result);
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	f023 0301 	bic.w	r3, r3, #1
 8004368:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3314      	adds	r3, #20
 8004372:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004376:	633a      	str	r2, [r7, #48]	; 0x30
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800437c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e3      	bne.n	8004352 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	330c      	adds	r3, #12
 800439e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0310 	bic.w	r3, r3, #16
 80043ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	330c      	adds	r3, #12
 80043b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043bc:	61fa      	str	r2, [r7, #28]
 80043be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	69b9      	ldr	r1, [r7, #24]
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	617b      	str	r3, [r7, #20]
   return(result);
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e3      	bne.n	8004398 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043da:	4619      	mov	r1, r3
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f847 	bl	8004470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043e2:	e023      	b.n	800442c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d009      	beq.n	8004404 <HAL_UART_IRQHandler+0x4f4>
 80043f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f913 	bl	8004628 <UART_Transmit_IT>
    return;
 8004402:	e014      	b.n	800442e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00e      	beq.n	800442e <HAL_UART_IRQHandler+0x51e>
 8004410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d008      	beq.n	800442e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f953 	bl	80046c8 <UART_EndTransmit_IT>
    return;
 8004422:	e004      	b.n	800442e <HAL_UART_IRQHandler+0x51e>
    return;
 8004424:	bf00      	nop
 8004426:	e002      	b.n	800442e <HAL_UART_IRQHandler+0x51e>
      return;
 8004428:	bf00      	nop
 800442a:	e000      	b.n	800442e <HAL_UART_IRQHandler+0x51e>
      return;
 800442c:	bf00      	nop
  }
}
 800442e:	37e8      	adds	r7, #232	; 0xe8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	4613      	mov	r3, r2
 8004496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004498:	e03b      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a0:	d037      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a2:	f7fe f8e9 	bl	8002678 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	6a3a      	ldr	r2, [r7, #32]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d302      	bcc.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e03a      	b.n	8004532 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d023      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0x8a>
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b80      	cmp	r3, #128	; 0x80
 80044ce:	d020      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0x8a>
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b40      	cmp	r3, #64	; 0x40
 80044d4:	d01d      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d116      	bne.n	8004512 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f81d 	bl	800453a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2208      	movs	r2, #8
 8004504:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e00f      	b.n	8004532 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	bf0c      	ite	eq
 8004522:	2301      	moveq	r3, #1
 8004524:	2300      	movne	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	429a      	cmp	r2, r3
 800452e:	d0b4      	beq.n	800449a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800453a:	b480      	push	{r7}
 800453c:	b095      	sub	sp, #84	; 0x54
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	330c      	adds	r3, #12
 8004548:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004558:	64fb      	str	r3, [r7, #76]	; 0x4c
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	330c      	adds	r3, #12
 8004560:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004562:	643a      	str	r2, [r7, #64]	; 0x40
 8004564:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004568:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e5      	bne.n	8004542 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3314      	adds	r3, #20
 800457c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	e853 3f00 	ldrex	r3, [r3]
 8004584:	61fb      	str	r3, [r7, #28]
   return(result);
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	64bb      	str	r3, [r7, #72]	; 0x48
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3314      	adds	r3, #20
 8004594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004596:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004598:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800459c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800459e:	e841 2300 	strex	r3, r2, [r1]
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1e5      	bne.n	8004576 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d119      	bne.n	80045e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	330c      	adds	r3, #12
 80045b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	e853 3f00 	ldrex	r3, [r3]
 80045c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f023 0310 	bic.w	r3, r3, #16
 80045c8:	647b      	str	r3, [r7, #68]	; 0x44
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	330c      	adds	r3, #12
 80045d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045d2:	61ba      	str	r2, [r7, #24]
 80045d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	6979      	ldr	r1, [r7, #20]
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	613b      	str	r3, [r7, #16]
   return(result);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1e5      	bne.n	80045b2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045f4:	bf00      	nop
 80045f6:	3754      	adds	r7, #84	; 0x54
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f7ff ff1e 	bl	800445c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b21      	cmp	r3, #33	; 0x21
 800463a:	d13e      	bne.n	80046ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004644:	d114      	bne.n	8004670 <UART_Transmit_IT+0x48>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d110      	bne.n	8004670 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	461a      	mov	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004662:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	1c9a      	adds	r2, r3, #2
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	621a      	str	r2, [r3, #32]
 800466e:	e008      	b.n	8004682 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	1c59      	adds	r1, r3, #1
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6211      	str	r1, [r2, #32]
 800467a:	781a      	ldrb	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004686:	b29b      	uxth	r3, r3
 8004688:	3b01      	subs	r3, #1
 800468a:	b29b      	uxth	r3, r3
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	4619      	mov	r1, r3
 8004690:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10f      	bne.n	80046b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e000      	b.n	80046bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046ba:	2302      	movs	r3, #2
  }
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff fea3 	bl	8004434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08c      	sub	sp, #48	; 0x30
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b22      	cmp	r3, #34	; 0x22
 800470a:	f040 80ae 	bne.w	800486a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004716:	d117      	bne.n	8004748 <UART_Receive_IT+0x50>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d113      	bne.n	8004748 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004720:	2300      	movs	r3, #0
 8004722:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	b29b      	uxth	r3, r3
 8004732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004736:	b29a      	uxth	r2, r3
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	1c9a      	adds	r2, r3, #2
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	629a      	str	r2, [r3, #40]	; 0x28
 8004746:	e026      	b.n	8004796 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800474e:	2300      	movs	r3, #0
 8004750:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475a:	d007      	beq.n	800476c <UART_Receive_IT+0x74>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10a      	bne.n	800477a <UART_Receive_IT+0x82>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d106      	bne.n	800477a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	b2da      	uxtb	r2, r3
 8004774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004776:	701a      	strb	r2, [r3, #0]
 8004778:	e008      	b.n	800478c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	b2db      	uxtb	r3, r3
 8004782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004786:	b2da      	uxtb	r2, r3
 8004788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800479a:	b29b      	uxth	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	b29b      	uxth	r3, r3
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	4619      	mov	r1, r3
 80047a4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d15d      	bne.n	8004866 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68da      	ldr	r2, [r3, #12]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0220 	bic.w	r2, r2, #32
 80047b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695a      	ldr	r2, [r3, #20]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0201 	bic.w	r2, r2, #1
 80047d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d135      	bne.n	800485c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	330c      	adds	r3, #12
 80047fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	613b      	str	r3, [r7, #16]
   return(result);
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f023 0310 	bic.w	r3, r3, #16
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	330c      	adds	r3, #12
 8004814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004816:	623a      	str	r2, [r7, #32]
 8004818:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	69f9      	ldr	r1, [r7, #28]
 800481c:	6a3a      	ldr	r2, [r7, #32]
 800481e:	e841 2300 	strex	r3, r2, [r1]
 8004822:	61bb      	str	r3, [r7, #24]
   return(result);
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e5      	bne.n	80047f6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b10      	cmp	r3, #16
 8004836:	d10a      	bne.n	800484e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004838:	2300      	movs	r3, #0
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004852:	4619      	mov	r1, r3
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff fe0b 	bl	8004470 <HAL_UARTEx_RxEventCallback>
 800485a:	e002      	b.n	8004862 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff fdf3 	bl	8004448 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	e002      	b.n	800486c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	e000      	b.n	800486c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800486a:	2302      	movs	r3, #2
  }
}
 800486c:	4618      	mov	r0, r3
 800486e:	3730      	adds	r7, #48	; 0x30
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004878:	b0c0      	sub	sp, #256	; 0x100
 800487a:	af00      	add	r7, sp, #0
 800487c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004890:	68d9      	ldr	r1, [r3, #12]
 8004892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	ea40 0301 	orr.w	r3, r0, r1
 800489c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800489e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048cc:	f021 010c 	bic.w	r1, r1, #12
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048da:	430b      	orrs	r3, r1
 80048dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ee:	6999      	ldr	r1, [r3, #24]
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	ea40 0301 	orr.w	r3, r0, r1
 80048fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4b8f      	ldr	r3, [pc, #572]	; (8004b40 <UART_SetConfig+0x2cc>)
 8004904:	429a      	cmp	r2, r3
 8004906:	d005      	beq.n	8004914 <UART_SetConfig+0xa0>
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b8d      	ldr	r3, [pc, #564]	; (8004b44 <UART_SetConfig+0x2d0>)
 8004910:	429a      	cmp	r2, r3
 8004912:	d104      	bne.n	800491e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004914:	f7fe febe 	bl	8003694 <HAL_RCC_GetPCLK2Freq>
 8004918:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800491c:	e003      	b.n	8004926 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800491e:	f7fe fea5 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8004922:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004930:	f040 810c 	bne.w	8004b4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004938:	2200      	movs	r2, #0
 800493a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800493e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004942:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004946:	4622      	mov	r2, r4
 8004948:	462b      	mov	r3, r5
 800494a:	1891      	adds	r1, r2, r2
 800494c:	65b9      	str	r1, [r7, #88]	; 0x58
 800494e:	415b      	adcs	r3, r3
 8004950:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004952:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004956:	4621      	mov	r1, r4
 8004958:	eb12 0801 	adds.w	r8, r2, r1
 800495c:	4629      	mov	r1, r5
 800495e:	eb43 0901 	adc.w	r9, r3, r1
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800496e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004976:	4690      	mov	r8, r2
 8004978:	4699      	mov	r9, r3
 800497a:	4623      	mov	r3, r4
 800497c:	eb18 0303 	adds.w	r3, r8, r3
 8004980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004984:	462b      	mov	r3, r5
 8004986:	eb49 0303 	adc.w	r3, r9, r3
 800498a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800499a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800499e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049a2:	460b      	mov	r3, r1
 80049a4:	18db      	adds	r3, r3, r3
 80049a6:	653b      	str	r3, [r7, #80]	; 0x50
 80049a8:	4613      	mov	r3, r2
 80049aa:	eb42 0303 	adc.w	r3, r2, r3
 80049ae:	657b      	str	r3, [r7, #84]	; 0x54
 80049b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049b8:	f7fc f906 	bl	8000bc8 <__aeabi_uldivmod>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4b61      	ldr	r3, [pc, #388]	; (8004b48 <UART_SetConfig+0x2d4>)
 80049c2:	fba3 2302 	umull	r2, r3, r3, r2
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	011c      	lsls	r4, r3, #4
 80049ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049dc:	4642      	mov	r2, r8
 80049de:	464b      	mov	r3, r9
 80049e0:	1891      	adds	r1, r2, r2
 80049e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80049e4:	415b      	adcs	r3, r3
 80049e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049ec:	4641      	mov	r1, r8
 80049ee:	eb12 0a01 	adds.w	sl, r2, r1
 80049f2:	4649      	mov	r1, r9
 80049f4:	eb43 0b01 	adc.w	fp, r3, r1
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a0c:	4692      	mov	sl, r2
 8004a0e:	469b      	mov	fp, r3
 8004a10:	4643      	mov	r3, r8
 8004a12:	eb1a 0303 	adds.w	r3, sl, r3
 8004a16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	eb4b 0303 	adc.w	r3, fp, r3
 8004a20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	18db      	adds	r3, r3, r3
 8004a3c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a3e:	4613      	mov	r3, r2
 8004a40:	eb42 0303 	adc.w	r3, r2, r3
 8004a44:	647b      	str	r3, [r7, #68]	; 0x44
 8004a46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a4e:	f7fc f8bb 	bl	8000bc8 <__aeabi_uldivmod>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4611      	mov	r1, r2
 8004a58:	4b3b      	ldr	r3, [pc, #236]	; (8004b48 <UART_SetConfig+0x2d4>)
 8004a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	2264      	movs	r2, #100	; 0x64
 8004a62:	fb02 f303 	mul.w	r3, r2, r3
 8004a66:	1acb      	subs	r3, r1, r3
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a6e:	4b36      	ldr	r3, [pc, #216]	; (8004b48 <UART_SetConfig+0x2d4>)
 8004a70:	fba3 2302 	umull	r2, r3, r3, r2
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a7c:	441c      	add	r4, r3
 8004a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a90:	4642      	mov	r2, r8
 8004a92:	464b      	mov	r3, r9
 8004a94:	1891      	adds	r1, r2, r2
 8004a96:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a98:	415b      	adcs	r3, r3
 8004a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004aa0:	4641      	mov	r1, r8
 8004aa2:	1851      	adds	r1, r2, r1
 8004aa4:	6339      	str	r1, [r7, #48]	; 0x30
 8004aa6:	4649      	mov	r1, r9
 8004aa8:	414b      	adcs	r3, r1
 8004aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ab8:	4659      	mov	r1, fp
 8004aba:	00cb      	lsls	r3, r1, #3
 8004abc:	4651      	mov	r1, sl
 8004abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ac2:	4651      	mov	r1, sl
 8004ac4:	00ca      	lsls	r2, r1, #3
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4603      	mov	r3, r0
 8004acc:	4642      	mov	r2, r8
 8004ace:	189b      	adds	r3, r3, r2
 8004ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ad4:	464b      	mov	r3, r9
 8004ad6:	460a      	mov	r2, r1
 8004ad8:	eb42 0303 	adc.w	r3, r2, r3
 8004adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004aec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004af0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004af4:	460b      	mov	r3, r1
 8004af6:	18db      	adds	r3, r3, r3
 8004af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004afa:	4613      	mov	r3, r2
 8004afc:	eb42 0303 	adc.w	r3, r2, r3
 8004b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b0a:	f7fc f85d 	bl	8000bc8 <__aeabi_uldivmod>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <UART_SetConfig+0x2d4>)
 8004b14:	fba3 1302 	umull	r1, r3, r3, r2
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	2164      	movs	r1, #100	; 0x64
 8004b1c:	fb01 f303 	mul.w	r3, r1, r3
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	3332      	adds	r3, #50	; 0x32
 8004b26:	4a08      	ldr	r2, [pc, #32]	; (8004b48 <UART_SetConfig+0x2d4>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	095b      	lsrs	r3, r3, #5
 8004b2e:	f003 0207 	and.w	r2, r3, #7
 8004b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4422      	add	r2, r4
 8004b3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b3c:	e106      	b.n	8004d4c <UART_SetConfig+0x4d8>
 8004b3e:	bf00      	nop
 8004b40:	40011000 	.word	0x40011000
 8004b44:	40011400 	.word	0x40011400
 8004b48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b50:	2200      	movs	r2, #0
 8004b52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b5e:	4642      	mov	r2, r8
 8004b60:	464b      	mov	r3, r9
 8004b62:	1891      	adds	r1, r2, r2
 8004b64:	6239      	str	r1, [r7, #32]
 8004b66:	415b      	adcs	r3, r3
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b6e:	4641      	mov	r1, r8
 8004b70:	1854      	adds	r4, r2, r1
 8004b72:	4649      	mov	r1, r9
 8004b74:	eb43 0501 	adc.w	r5, r3, r1
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	00eb      	lsls	r3, r5, #3
 8004b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b86:	00e2      	lsls	r2, r4, #3
 8004b88:	4614      	mov	r4, r2
 8004b8a:	461d      	mov	r5, r3
 8004b8c:	4643      	mov	r3, r8
 8004b8e:	18e3      	adds	r3, r4, r3
 8004b90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b94:	464b      	mov	r3, r9
 8004b96:	eb45 0303 	adc.w	r3, r5, r3
 8004b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004baa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bba:	4629      	mov	r1, r5
 8004bbc:	008b      	lsls	r3, r1, #2
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	008a      	lsls	r2, r1, #2
 8004bc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004bcc:	f7fb fffc 	bl	8000bc8 <__aeabi_uldivmod>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4b60      	ldr	r3, [pc, #384]	; (8004d58 <UART_SetConfig+0x4e4>)
 8004bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	011c      	lsls	r4, r3, #4
 8004bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004be2:	2200      	movs	r2, #0
 8004be4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004be8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004bec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004bf0:	4642      	mov	r2, r8
 8004bf2:	464b      	mov	r3, r9
 8004bf4:	1891      	adds	r1, r2, r2
 8004bf6:	61b9      	str	r1, [r7, #24]
 8004bf8:	415b      	adcs	r3, r3
 8004bfa:	61fb      	str	r3, [r7, #28]
 8004bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c00:	4641      	mov	r1, r8
 8004c02:	1851      	adds	r1, r2, r1
 8004c04:	6139      	str	r1, [r7, #16]
 8004c06:	4649      	mov	r1, r9
 8004c08:	414b      	adcs	r3, r1
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c18:	4659      	mov	r1, fp
 8004c1a:	00cb      	lsls	r3, r1, #3
 8004c1c:	4651      	mov	r1, sl
 8004c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c22:	4651      	mov	r1, sl
 8004c24:	00ca      	lsls	r2, r1, #3
 8004c26:	4610      	mov	r0, r2
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4642      	mov	r2, r8
 8004c2e:	189b      	adds	r3, r3, r2
 8004c30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c34:	464b      	mov	r3, r9
 8004c36:	460a      	mov	r2, r1
 8004c38:	eb42 0303 	adc.w	r3, r2, r3
 8004c3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c58:	4649      	mov	r1, r9
 8004c5a:	008b      	lsls	r3, r1, #2
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c62:	4641      	mov	r1, r8
 8004c64:	008a      	lsls	r2, r1, #2
 8004c66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c6a:	f7fb ffad 	bl	8000bc8 <__aeabi_uldivmod>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4611      	mov	r1, r2
 8004c74:	4b38      	ldr	r3, [pc, #224]	; (8004d58 <UART_SetConfig+0x4e4>)
 8004c76:	fba3 2301 	umull	r2, r3, r3, r1
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	2264      	movs	r2, #100	; 0x64
 8004c7e:	fb02 f303 	mul.w	r3, r2, r3
 8004c82:	1acb      	subs	r3, r1, r3
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	3332      	adds	r3, #50	; 0x32
 8004c88:	4a33      	ldr	r2, [pc, #204]	; (8004d58 <UART_SetConfig+0x4e4>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c94:	441c      	add	r4, r3
 8004c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	673b      	str	r3, [r7, #112]	; 0x70
 8004c9e:	677a      	str	r2, [r7, #116]	; 0x74
 8004ca0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	464b      	mov	r3, r9
 8004ca8:	1891      	adds	r1, r2, r2
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	415b      	adcs	r3, r3
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cb4:	4641      	mov	r1, r8
 8004cb6:	1851      	adds	r1, r2, r1
 8004cb8:	6039      	str	r1, [r7, #0]
 8004cba:	4649      	mov	r1, r9
 8004cbc:	414b      	adcs	r3, r1
 8004cbe:	607b      	str	r3, [r7, #4]
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ccc:	4659      	mov	r1, fp
 8004cce:	00cb      	lsls	r3, r1, #3
 8004cd0:	4651      	mov	r1, sl
 8004cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cd6:	4651      	mov	r1, sl
 8004cd8:	00ca      	lsls	r2, r1, #3
 8004cda:	4610      	mov	r0, r2
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4603      	mov	r3, r0
 8004ce0:	4642      	mov	r2, r8
 8004ce2:	189b      	adds	r3, r3, r2
 8004ce4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	460a      	mov	r2, r1
 8004cea:	eb42 0303 	adc.w	r3, r2, r3
 8004cee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	663b      	str	r3, [r7, #96]	; 0x60
 8004cfa:	667a      	str	r2, [r7, #100]	; 0x64
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d08:	4649      	mov	r1, r9
 8004d0a:	008b      	lsls	r3, r1, #2
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d12:	4641      	mov	r1, r8
 8004d14:	008a      	lsls	r2, r1, #2
 8004d16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d1a:	f7fb ff55 	bl	8000bc8 <__aeabi_uldivmod>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4b0d      	ldr	r3, [pc, #52]	; (8004d58 <UART_SetConfig+0x4e4>)
 8004d24:	fba3 1302 	umull	r1, r3, r3, r2
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	2164      	movs	r1, #100	; 0x64
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	3332      	adds	r3, #50	; 0x32
 8004d36:	4a08      	ldr	r2, [pc, #32]	; (8004d58 <UART_SetConfig+0x4e4>)
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	f003 020f 	and.w	r2, r3, #15
 8004d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4422      	add	r2, r4
 8004d4a:	609a      	str	r2, [r3, #8]
}
 8004d4c:	bf00      	nop
 8004d4e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d52:	46bd      	mov	sp, r7
 8004d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d58:	51eb851f 	.word	0x51eb851f

08004d5c <LL_GPIO_SetPinMode>:
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b08b      	sub	sp, #44	; 0x2c
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	fa93 f3a3 	rbit	r3, r3
 8004d76:	613b      	str	r3, [r7, #16]
  return result;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8004d82:	2320      	movs	r3, #32
 8004d84:	e003      	b.n	8004d8e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	fab3 f383 	clz	r3, r3
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	2103      	movs	r1, #3
 8004d92:	fa01 f303 	lsl.w	r3, r1, r3
 8004d96:	43db      	mvns	r3, r3
 8004d98:	401a      	ands	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	fa93 f3a3 	rbit	r3, r3
 8004da4:	61fb      	str	r3, [r7, #28]
  return result;
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004db0:	2320      	movs	r3, #32
 8004db2:	e003      	b.n	8004dbc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	fab3 f383 	clz	r3, r3
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	601a      	str	r2, [r3, #0]
}
 8004dca:	bf00      	nop
 8004dcc:	372c      	adds	r7, #44	; 0x2c
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <LL_GPIO_SetPinOutputType>:
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b085      	sub	sp, #20
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	43db      	mvns	r3, r3
 8004dea:	401a      	ands	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	fb01 f303 	mul.w	r3, r1, r3
 8004df4:	431a      	orrs	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	605a      	str	r2, [r3, #4]
}
 8004dfa:	bf00      	nop
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <LL_GPIO_SetPinSpeed>:
{
 8004e06:	b480      	push	{r7}
 8004e08:	b08b      	sub	sp, #44	; 0x2c
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	fa93 f3a3 	rbit	r3, r3
 8004e20:	613b      	str	r3, [r7, #16]
  return result;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8004e2c:	2320      	movs	r3, #32
 8004e2e:	e003      	b.n	8004e38 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	fab3 f383 	clz	r3, r3
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	2103      	movs	r1, #3
 8004e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e40:	43db      	mvns	r3, r3
 8004e42:	401a      	ands	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	fa93 f3a3 	rbit	r3, r3
 8004e4e:	61fb      	str	r3, [r7, #28]
  return result;
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8004e5a:	2320      	movs	r3, #32
 8004e5c:	e003      	b.n	8004e66 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	fab3 f383 	clz	r3, r3
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	609a      	str	r2, [r3, #8]
}
 8004e74:	bf00      	nop
 8004e76:	372c      	adds	r7, #44	; 0x2c
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <LL_GPIO_SetPinPull>:
{
 8004e80:	b480      	push	{r7}
 8004e82:	b08b      	sub	sp, #44	; 0x2c
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	fa93 f3a3 	rbit	r3, r3
 8004e9a:	613b      	str	r3, [r7, #16]
  return result;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004ea6:	2320      	movs	r3, #32
 8004ea8:	e003      	b.n	8004eb2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	fab3 f383 	clz	r3, r3
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	2103      	movs	r1, #3
 8004eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eba:	43db      	mvns	r3, r3
 8004ebc:	401a      	ands	r2, r3
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	fa93 f3a3 	rbit	r3, r3
 8004ec8:	61fb      	str	r3, [r7, #28]
  return result;
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004ed4:	2320      	movs	r3, #32
 8004ed6:	e003      	b.n	8004ee0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	fab3 f383 	clz	r3, r3
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	60da      	str	r2, [r3, #12]
}
 8004eee:	bf00      	nop
 8004ef0:	372c      	adds	r7, #44	; 0x2c
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <LL_GPIO_SetAFPin_0_7>:
{
 8004efa:	b480      	push	{r7}
 8004efc:	b08b      	sub	sp, #44	; 0x2c
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a1a      	ldr	r2, [r3, #32]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	fa93 f3a3 	rbit	r3, r3
 8004f14:	613b      	str	r3, [r7, #16]
  return result;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004f20:	2320      	movs	r3, #32
 8004f22:	e003      	b.n	8004f2c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	fab3 f383 	clz	r3, r3
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	210f      	movs	r1, #15
 8004f30:	fa01 f303 	lsl.w	r3, r1, r3
 8004f34:	43db      	mvns	r3, r3
 8004f36:	401a      	ands	r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	fa93 f3a3 	rbit	r3, r3
 8004f42:	61fb      	str	r3, [r7, #28]
  return result;
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8004f4e:	2320      	movs	r3, #32
 8004f50:	e003      	b.n	8004f5a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	fab3 f383 	clz	r3, r3
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f62:	431a      	orrs	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	621a      	str	r2, [r3, #32]
}
 8004f68:	bf00      	nop
 8004f6a:	372c      	adds	r7, #44	; 0x2c
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <LL_GPIO_SetAFPin_8_15>:
{
 8004f74:	b480      	push	{r7}
 8004f76:	b08b      	sub	sp, #44	; 0x2c
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	0a1b      	lsrs	r3, r3, #8
 8004f88:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	fa93 f3a3 	rbit	r3, r3
 8004f90:	613b      	str	r3, [r7, #16]
  return result;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004f9c:	2320      	movs	r3, #32
 8004f9e:	e003      	b.n	8004fa8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	fab3 f383 	clz	r3, r3
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	210f      	movs	r1, #15
 8004fac:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	401a      	ands	r2, r3
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	0a1b      	lsrs	r3, r3, #8
 8004fb8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	fa93 f3a3 	rbit	r3, r3
 8004fc0:	61fb      	str	r3, [r7, #28]
  return result;
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004fcc:	2320      	movs	r3, #32
 8004fce:	e003      	b.n	8004fd8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	fab3 f383 	clz	r3, r3
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004fe6:	bf00      	nop
 8004fe8:	372c      	adds	r7, #44	; 0x2c
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b08a      	sub	sp, #40	; 0x28
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 8005000:	2300      	movs	r3, #0
 8005002:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	fa93 f3a3 	rbit	r3, r3
 8005010:	617b      	str	r3, [r7, #20]
  return result;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <LL_GPIO_Init+0x2e>
    return 32U;
 800501c:	2320      	movs	r3, #32
 800501e:	e003      	b.n	8005028 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	fab3 f383 	clz	r3, r3
 8005026:	b2db      	uxtb	r3, r3
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800502a:	e057      	b.n	80050dc <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	2101      	movs	r1, #1
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	fa01 f303 	lsl.w	r3, r1, r3
 8005038:	4013      	ands	r3, r2
 800503a:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d049      	beq.n	80050d6 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d003      	beq.n	8005052 <LL_GPIO_Init+0x60>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d10d      	bne.n	800506e <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	461a      	mov	r2, r3
 8005058:	6a39      	ldr	r1, [r7, #32]
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7ff fed3 	bl	8004e06 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	461a      	mov	r2, r3
 8005066:	6a39      	ldr	r1, [r7, #32]
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7ff feb4 	bl	8004dd6 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	461a      	mov	r2, r3
 8005074:	6a39      	ldr	r1, [r7, #32]
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7ff ff02 	bl	8004e80 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d121      	bne.n	80050c8 <LL_GPIO_Init+0xd6>
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	fa93 f3a3 	rbit	r3, r3
 800508e:	60bb      	str	r3, [r7, #8]
  return result;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <LL_GPIO_Init+0xac>
    return 32U;
 800509a:	2320      	movs	r3, #32
 800509c:	e003      	b.n	80050a6 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	fab3 f383 	clz	r3, r3
 80050a4:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80050a6:	2b07      	cmp	r3, #7
 80050a8:	d807      	bhi.n	80050ba <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	461a      	mov	r2, r3
 80050b0:	6a39      	ldr	r1, [r7, #32]
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff ff21 	bl	8004efa <LL_GPIO_SetAFPin_0_7>
 80050b8:	e006      	b.n	80050c8 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	461a      	mov	r2, r3
 80050c0:	6a39      	ldr	r1, [r7, #32]
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff ff56 	bl	8004f74 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	461a      	mov	r2, r3
 80050ce:	6a39      	ldr	r1, [r7, #32]
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff fe43 	bl	8004d5c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	3301      	adds	r3, #1
 80050da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	fa22 f303 	lsr.w	r3, r2, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1a0      	bne.n	800502c <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3728      	adds	r7, #40	; 0x28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <LL_SPI_IsEnabled>:
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d101      	bne.n	800510c <LL_SPI_IsEnabled+0x18>
 8005108:	2301      	movs	r3, #1
 800510a:	e000      	b.n	800510e <LL_SPI_IsEnabled+0x1a>
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <LL_SPI_SetCRCPolynomial>:
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	b29b      	uxth	r3, r3
 8005128:	461a      	mov	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	611a      	str	r2, [r3, #16]
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b084      	sub	sp, #16
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff ffd3 	bl	80050f4 <LL_SPI_IsEnabled>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d139      	bne.n	80051c8 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800515c:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	6811      	ldr	r1, [r2, #0]
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	6852      	ldr	r2, [r2, #4]
 8005168:	4311      	orrs	r1, r2
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	6892      	ldr	r2, [r2, #8]
 800516e:	4311      	orrs	r1, r2
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	68d2      	ldr	r2, [r2, #12]
 8005174:	4311      	orrs	r1, r2
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	6912      	ldr	r2, [r2, #16]
 800517a:	4311      	orrs	r1, r2
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	6952      	ldr	r2, [r2, #20]
 8005180:	4311      	orrs	r1, r2
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	6992      	ldr	r2, [r2, #24]
 8005186:	4311      	orrs	r1, r2
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	69d2      	ldr	r2, [r2, #28]
 800518c:	4311      	orrs	r1, r2
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	6a12      	ldr	r2, [r2, #32]
 8005192:	430a      	orrs	r2, r1
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f023 0204 	bic.w	r2, r3, #4
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	0c1b      	lsrs	r3, r3, #16
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b6:	d105      	bne.n	80051c4 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	4619      	mov	r1, r3
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff ffab 	bl	800511a <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80051c4:	2300      	movs	r3, #0
 80051c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	61da      	str	r2, [r3, #28]
  return status;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80051de:	b480      	push	{r7}
 80051e0:	b085      	sub	sp, #20
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	4603      	mov	r3, r0
 80051e6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80051ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051f0:	2b84      	cmp	r3, #132	; 0x84
 80051f2:	d005      	beq.n	8005200 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80051f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	3303      	adds	r3, #3
 80051fe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005200:	68fb      	ldr	r3, [r7, #12]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005212:	f000 fff9 	bl	8006208 <vTaskStartScheduler>
  
  return osOK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	bd80      	pop	{r7, pc}

0800521c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800521c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800521e:	b089      	sub	sp, #36	; 0x24
 8005220:	af04      	add	r7, sp, #16
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d020      	beq.n	8005270 <osThreadCreate+0x54>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d01c      	beq.n	8005270 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685c      	ldr	r4, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691e      	ldr	r6, [r3, #16]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff ffc8 	bl	80051de <makeFreeRtosPriority>
 800524e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005258:	9202      	str	r2, [sp, #8]
 800525a:	9301      	str	r3, [sp, #4]
 800525c:	9100      	str	r1, [sp, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	4632      	mov	r2, r6
 8005262:	4629      	mov	r1, r5
 8005264:	4620      	mov	r0, r4
 8005266:	f000 fddf 	bl	8005e28 <xTaskCreateStatic>
 800526a:	4603      	mov	r3, r0
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	e01c      	b.n	80052aa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685c      	ldr	r4, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800527c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff ffaa 	bl	80051de <makeFreeRtosPriority>
 800528a:	4602      	mov	r2, r0
 800528c:	f107 030c 	add.w	r3, r7, #12
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	9200      	str	r2, [sp, #0]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	4632      	mov	r2, r6
 8005298:	4629      	mov	r1, r5
 800529a:	4620      	mov	r0, r4
 800529c:	f000 fe21 	bl	8005ee2 <xTaskCreate>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d001      	beq.n	80052aa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	e000      	b.n	80052ac <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80052aa:	68fb      	ldr	r3, [r7, #12]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052b4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a09      	ldr	r2, [pc, #36]	; (80052e4 <osDelay+0x30>)
 80052c0:	fba2 2303 	umull	r2, r3, r2, r3
 80052c4:	099b      	lsrs	r3, r3, #6
 80052c6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <osDelay+0x1e>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	e000      	b.n	80052d4 <osDelay+0x20>
 80052d2:	2301      	movs	r3, #1
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 ff63 	bl	80061a0 <vTaskDelay>
  
  return osOK;
 80052da:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	10624dd3 	.word	0x10624dd3

080052e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f103 0208 	add.w	r2, r3, #8
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005300:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f103 0208 	add.w	r2, r3, #8
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f103 0208 	add.w	r2, r3, #8
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005342:	b480      	push	{r7}
 8005344:	b085      	sub	sp, #20
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	601a      	str	r2, [r3, #0]
}
 800537e:	bf00      	nop
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800538a:	b480      	push	{r7}
 800538c:	b085      	sub	sp, #20
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053a0:	d103      	bne.n	80053aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	e00c      	b.n	80053c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3308      	adds	r3, #8
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	e002      	b.n	80053b8 <vListInsert+0x2e>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d2f6      	bcs.n	80053b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	601a      	str	r2, [r3, #0]
}
 80053f0:	bf00      	nop
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6892      	ldr	r2, [r2, #8]
 8005412:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6852      	ldr	r2, [r2, #4]
 800541c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	429a      	cmp	r2, r3
 8005426:	d103      	bne.n	8005430 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	1e5a      	subs	r2, r3, #1
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <xQueueGenericReset+0x2a>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	60bb      	str	r3, [r7, #8]
}
 8005476:	bf00      	nop
 8005478:	e7fe      	b.n	8005478 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800547a:	f002 f953 	bl	8007724 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005486:	68f9      	ldr	r1, [r7, #12]
 8005488:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800548a:	fb01 f303 	mul.w	r3, r1, r3
 800548e:	441a      	add	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054aa:	3b01      	subs	r3, #1
 80054ac:	68f9      	ldr	r1, [r7, #12]
 80054ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054b0:	fb01 f303 	mul.w	r3, r1, r3
 80054b4:	441a      	add	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	22ff      	movs	r2, #255	; 0xff
 80054be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	22ff      	movs	r2, #255	; 0xff
 80054c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d114      	bne.n	80054fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01a      	beq.n	800550e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3310      	adds	r3, #16
 80054dc:	4618      	mov	r0, r3
 80054de:	f001 f963 	bl	80067a8 <xTaskRemoveFromEventList>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d012      	beq.n	800550e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80054e8:	4b0c      	ldr	r3, [pc, #48]	; (800551c <xQueueGenericReset+0xcc>)
 80054ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	e009      	b.n	800550e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3310      	adds	r3, #16
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff fef2 	bl	80052e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3324      	adds	r3, #36	; 0x24
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff feed 	bl	80052e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800550e:	f002 f939 	bl	8007784 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005512:	2301      	movs	r3, #1
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	e000ed04 	.word	0xe000ed04

08005520 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08e      	sub	sp, #56	; 0x38
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005546:	bf00      	nop
 8005548:	e7fe      	b.n	8005548 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <xQueueGenericCreateStatic+0x52>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <xQueueGenericCreateStatic+0x56>
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <xQueueGenericCreateStatic+0x58>
 8005576:	2300      	movs	r3, #0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	623b      	str	r3, [r7, #32]
}
 800558e:	bf00      	nop
 8005590:	e7fe      	b.n	8005590 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d102      	bne.n	800559e <xQueueGenericCreateStatic+0x7e>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <xQueueGenericCreateStatic+0x82>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <xQueueGenericCreateStatic+0x84>
 80055a2:	2300      	movs	r3, #0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10a      	bne.n	80055be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	f383 8811 	msr	BASEPRI, r3
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	61fb      	str	r3, [r7, #28]
}
 80055ba:	bf00      	nop
 80055bc:	e7fe      	b.n	80055bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055be:	2350      	movs	r3, #80	; 0x50
 80055c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2b50      	cmp	r3, #80	; 0x50
 80055c6:	d00a      	beq.n	80055de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	61bb      	str	r3, [r7, #24]
}
 80055da:	bf00      	nop
 80055dc:	e7fe      	b.n	80055dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80055de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80055e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00d      	beq.n	8005606 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80055ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80055f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	4613      	mov	r3, r2
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	68b9      	ldr	r1, [r7, #8]
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 f805 	bl	8005610 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005608:	4618      	mov	r0, r3
 800560a:	3730      	adds	r7, #48	; 0x30
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d103      	bne.n	800562c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	e002      	b.n	8005632 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800563e:	2101      	movs	r1, #1
 8005640:	69b8      	ldr	r0, [r7, #24]
 8005642:	f7ff ff05 	bl	8005450 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	78fa      	ldrb	r2, [r7, #3]
 800564a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800564e:	bf00      	nop
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08e      	sub	sp, #56	; 0x38
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005666:	2300      	movs	r3, #0
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10a      	bne.n	800568a <xQueueGenericSend+0x32>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005686:	bf00      	nop
 8005688:	e7fe      	b.n	8005688 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d103      	bne.n	8005698 <xQueueGenericSend+0x40>
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <xQueueGenericSend+0x44>
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <xQueueGenericSend+0x46>
 800569c:	2300      	movs	r3, #0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10a      	bne.n	80056b8 <xQueueGenericSend+0x60>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056b4:	bf00      	nop
 80056b6:	e7fe      	b.n	80056b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d103      	bne.n	80056c6 <xQueueGenericSend+0x6e>
 80056be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d101      	bne.n	80056ca <xQueueGenericSend+0x72>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <xQueueGenericSend+0x74>
 80056ca:	2300      	movs	r3, #0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10a      	bne.n	80056e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	623b      	str	r3, [r7, #32]
}
 80056e2:	bf00      	nop
 80056e4:	e7fe      	b.n	80056e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056e6:	f001 fa21 	bl	8006b2c <xTaskGetSchedulerState>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d102      	bne.n	80056f6 <xQueueGenericSend+0x9e>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <xQueueGenericSend+0xa2>
 80056f6:	2301      	movs	r3, #1
 80056f8:	e000      	b.n	80056fc <xQueueGenericSend+0xa4>
 80056fa:	2300      	movs	r3, #0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10a      	bne.n	8005716 <xQueueGenericSend+0xbe>
	__asm volatile
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	61fb      	str	r3, [r7, #28]
}
 8005712:	bf00      	nop
 8005714:	e7fe      	b.n	8005714 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005716:	f002 f805 	bl	8007724 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005722:	429a      	cmp	r2, r3
 8005724:	d302      	bcc.n	800572c <xQueueGenericSend+0xd4>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d129      	bne.n	8005780 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	68b9      	ldr	r1, [r7, #8]
 8005730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005732:	f000 fa0b 	bl	8005b4c <prvCopyDataToQueue>
 8005736:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	2b00      	cmp	r3, #0
 800573e:	d010      	beq.n	8005762 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005742:	3324      	adds	r3, #36	; 0x24
 8005744:	4618      	mov	r0, r3
 8005746:	f001 f82f 	bl	80067a8 <xTaskRemoveFromEventList>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d013      	beq.n	8005778 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005750:	4b3f      	ldr	r3, [pc, #252]	; (8005850 <xQueueGenericSend+0x1f8>)
 8005752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	e00a      	b.n	8005778 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005764:	2b00      	cmp	r3, #0
 8005766:	d007      	beq.n	8005778 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005768:	4b39      	ldr	r3, [pc, #228]	; (8005850 <xQueueGenericSend+0x1f8>)
 800576a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005778:	f002 f804 	bl	8007784 <vPortExitCritical>
				return pdPASS;
 800577c:	2301      	movs	r3, #1
 800577e:	e063      	b.n	8005848 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d103      	bne.n	800578e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005786:	f001 fffd 	bl	8007784 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800578a:	2300      	movs	r3, #0
 800578c:	e05c      	b.n	8005848 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800578e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005790:	2b00      	cmp	r3, #0
 8005792:	d106      	bne.n	80057a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005794:	f107 0314 	add.w	r3, r7, #20
 8005798:	4618      	mov	r0, r3
 800579a:	f001 f867 	bl	800686c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800579e:	2301      	movs	r3, #1
 80057a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057a2:	f001 ffef 	bl	8007784 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057a6:	f000 fda1 	bl	80062ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057aa:	f001 ffbb 	bl	8007724 <vPortEnterCritical>
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057b4:	b25b      	sxtb	r3, r3
 80057b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057ba:	d103      	bne.n	80057c4 <xQueueGenericSend+0x16c>
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057ca:	b25b      	sxtb	r3, r3
 80057cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057d0:	d103      	bne.n	80057da <xQueueGenericSend+0x182>
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057da:	f001 ffd3 	bl	8007784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057de:	1d3a      	adds	r2, r7, #4
 80057e0:	f107 0314 	add.w	r3, r7, #20
 80057e4:	4611      	mov	r1, r2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f001 f856 	bl	8006898 <xTaskCheckForTimeOut>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d124      	bne.n	800583c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057f4:	f000 faa2 	bl	8005d3c <prvIsQueueFull>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d018      	beq.n	8005830 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	3310      	adds	r3, #16
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	4611      	mov	r1, r2
 8005806:	4618      	mov	r0, r3
 8005808:	f000 ff7e 	bl	8006708 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800580c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800580e:	f000 fa2d 	bl	8005c6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005812:	f000 fd79 	bl	8006308 <xTaskResumeAll>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	f47f af7c 	bne.w	8005716 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800581e:	4b0c      	ldr	r3, [pc, #48]	; (8005850 <xQueueGenericSend+0x1f8>)
 8005820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	e772      	b.n	8005716 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005832:	f000 fa1b 	bl	8005c6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005836:	f000 fd67 	bl	8006308 <xTaskResumeAll>
 800583a:	e76c      	b.n	8005716 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800583c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800583e:	f000 fa15 	bl	8005c6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005842:	f000 fd61 	bl	8006308 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005846:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005848:	4618      	mov	r0, r3
 800584a:	3738      	adds	r7, #56	; 0x38
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	e000ed04 	.word	0xe000ed04

08005854 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b090      	sub	sp, #64	; 0x40
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10a      	bne.n	8005882 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800587e:	bf00      	nop
 8005880:	e7fe      	b.n	8005880 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d103      	bne.n	8005890 <xQueueGenericSendFromISR+0x3c>
 8005888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <xQueueGenericSendFromISR+0x40>
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <xQueueGenericSendFromISR+0x42>
 8005894:	2300      	movs	r3, #0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10a      	bne.n	80058b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058ac:	bf00      	nop
 80058ae:	e7fe      	b.n	80058ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d103      	bne.n	80058be <xQueueGenericSendFromISR+0x6a>
 80058b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d101      	bne.n	80058c2 <xQueueGenericSendFromISR+0x6e>
 80058be:	2301      	movs	r3, #1
 80058c0:	e000      	b.n	80058c4 <xQueueGenericSendFromISR+0x70>
 80058c2:	2300      	movs	r3, #0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	623b      	str	r3, [r7, #32]
}
 80058da:	bf00      	nop
 80058dc:	e7fe      	b.n	80058dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058de:	f001 fffd 	bl	80078dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058e2:	f3ef 8211 	mrs	r2, BASEPRI
 80058e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	61fa      	str	r2, [r7, #28]
 80058f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005906:	429a      	cmp	r2, r3
 8005908:	d302      	bcc.n	8005910 <xQueueGenericSendFromISR+0xbc>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b02      	cmp	r3, #2
 800590e:	d12f      	bne.n	8005970 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005912:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005926:	f000 f911 	bl	8005b4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800592a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800592e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005932:	d112      	bne.n	800595a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	2b00      	cmp	r3, #0
 800593a:	d016      	beq.n	800596a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	3324      	adds	r3, #36	; 0x24
 8005940:	4618      	mov	r0, r3
 8005942:	f000 ff31 	bl	80067a8 <xTaskRemoveFromEventList>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00e      	beq.n	800596a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00b      	beq.n	800596a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	e007      	b.n	800596a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800595a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800595e:	3301      	adds	r3, #1
 8005960:	b2db      	uxtb	r3, r3
 8005962:	b25a      	sxtb	r2, r3
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800596a:	2301      	movs	r3, #1
 800596c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800596e:	e001      	b.n	8005974 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005970:	2300      	movs	r3, #0
 8005972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005976:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800597e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005982:	4618      	mov	r0, r3
 8005984:	3740      	adds	r7, #64	; 0x40
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
	...

0800598c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08c      	sub	sp, #48	; 0x30
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005998:	2300      	movs	r3, #0
 800599a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10a      	bne.n	80059bc <xQueueReceive+0x30>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	623b      	str	r3, [r7, #32]
}
 80059b8:	bf00      	nop
 80059ba:	e7fe      	b.n	80059ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d103      	bne.n	80059ca <xQueueReceive+0x3e>
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <xQueueReceive+0x42>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <xQueueReceive+0x44>
 80059ce:	2300      	movs	r3, #0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <xQueueReceive+0x5e>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	61fb      	str	r3, [r7, #28]
}
 80059e6:	bf00      	nop
 80059e8:	e7fe      	b.n	80059e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059ea:	f001 f89f 	bl	8006b2c <xTaskGetSchedulerState>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <xQueueReceive+0x6e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <xQueueReceive+0x72>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <xQueueReceive+0x74>
 80059fe:	2300      	movs	r3, #0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <xQueueReceive+0x8e>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	61bb      	str	r3, [r7, #24]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a1a:	f001 fe83 	bl	8007724 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d01f      	beq.n	8005a6a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a2e:	f000 f8f7 	bl	8005c20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	1e5a      	subs	r2, r3, #1
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00f      	beq.n	8005a62 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	3310      	adds	r3, #16
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 feae 	bl	80067a8 <xTaskRemoveFromEventList>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d007      	beq.n	8005a62 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a52:	4b3d      	ldr	r3, [pc, #244]	; (8005b48 <xQueueReceive+0x1bc>)
 8005a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a62:	f001 fe8f 	bl	8007784 <vPortExitCritical>
				return pdPASS;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e069      	b.n	8005b3e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d103      	bne.n	8005a78 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a70:	f001 fe88 	bl	8007784 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a74:	2300      	movs	r3, #0
 8005a76:	e062      	b.n	8005b3e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a7e:	f107 0310 	add.w	r3, r7, #16
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fef2 	bl	800686c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a8c:	f001 fe7a 	bl	8007784 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a90:	f000 fc2c 	bl	80062ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a94:	f001 fe46 	bl	8007724 <vPortEnterCritical>
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a9e:	b25b      	sxtb	r3, r3
 8005aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aa4:	d103      	bne.n	8005aae <xQueueReceive+0x122>
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ab4:	b25b      	sxtb	r3, r3
 8005ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aba:	d103      	bne.n	8005ac4 <xQueueReceive+0x138>
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ac4:	f001 fe5e 	bl	8007784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ac8:	1d3a      	adds	r2, r7, #4
 8005aca:	f107 0310 	add.w	r3, r7, #16
 8005ace:	4611      	mov	r1, r2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fee1 	bl	8006898 <xTaskCheckForTimeOut>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d123      	bne.n	8005b24 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ade:	f000 f917 	bl	8005d10 <prvIsQueueEmpty>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d017      	beq.n	8005b18 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aea:	3324      	adds	r3, #36	; 0x24
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	4611      	mov	r1, r2
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fe09 	bl	8006708 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005af8:	f000 f8b8 	bl	8005c6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005afc:	f000 fc04 	bl	8006308 <xTaskResumeAll>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d189      	bne.n	8005a1a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b06:	4b10      	ldr	r3, [pc, #64]	; (8005b48 <xQueueReceive+0x1bc>)
 8005b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	e780      	b.n	8005a1a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b1a:	f000 f8a7 	bl	8005c6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b1e:	f000 fbf3 	bl	8006308 <xTaskResumeAll>
 8005b22:	e77a      	b.n	8005a1a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b26:	f000 f8a1 	bl	8005c6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b2a:	f000 fbed 	bl	8006308 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b30:	f000 f8ee 	bl	8005d10 <prvIsQueueEmpty>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f43f af6f 	beq.w	8005a1a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3730      	adds	r7, #48	; 0x30
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	e000ed04 	.word	0xe000ed04

08005b4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10d      	bne.n	8005b86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d14d      	bne.n	8005c0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fff6 	bl	8006b68 <xTaskPriorityDisinherit>
 8005b7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	609a      	str	r2, [r3, #8]
 8005b84:	e043      	b.n	8005c0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d119      	bne.n	8005bc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6858      	ldr	r0, [r3, #4]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b94:	461a      	mov	r2, r3
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	f003 f8eb 	bl	8008d72 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	441a      	add	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d32b      	bcc.n	8005c0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	605a      	str	r2, [r3, #4]
 8005bbe:	e026      	b.n	8005c0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	68d8      	ldr	r0, [r3, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc8:	461a      	mov	r2, r3
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	f003 f8d1 	bl	8008d72 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	425b      	negs	r3, r3
 8005bda:	441a      	add	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d207      	bcs.n	8005bfc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf4:	425b      	negs	r3, r3
 8005bf6:	441a      	add	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d105      	bne.n	8005c0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c16:	697b      	ldr	r3, [r7, #20]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d018      	beq.n	8005c64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	441a      	add	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d303      	bcc.n	8005c54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68d9      	ldr	r1, [r3, #12]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	6838      	ldr	r0, [r7, #0]
 8005c60:	f003 f887 	bl	8008d72 <memcpy>
	}
}
 8005c64:	bf00      	nop
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c74:	f001 fd56 	bl	8007724 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c80:	e011      	b.n	8005ca6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d012      	beq.n	8005cb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3324      	adds	r3, #36	; 0x24
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fd8a 	bl	80067a8 <xTaskRemoveFromEventList>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c9a:	f000 fe5f 	bl	800695c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	dce9      	bgt.n	8005c82 <prvUnlockQueue+0x16>
 8005cae:	e000      	b.n	8005cb2 <prvUnlockQueue+0x46>
					break;
 8005cb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	22ff      	movs	r2, #255	; 0xff
 8005cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005cba:	f001 fd63 	bl	8007784 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005cbe:	f001 fd31 	bl	8007724 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cca:	e011      	b.n	8005cf0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d012      	beq.n	8005cfa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3310      	adds	r3, #16
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fd65 	bl	80067a8 <xTaskRemoveFromEventList>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ce4:	f000 fe3a 	bl	800695c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ce8:	7bbb      	ldrb	r3, [r7, #14]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	dce9      	bgt.n	8005ccc <prvUnlockQueue+0x60>
 8005cf8:	e000      	b.n	8005cfc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005cfa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	22ff      	movs	r2, #255	; 0xff
 8005d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d04:	f001 fd3e 	bl	8007784 <vPortExitCritical>
}
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d18:	f001 fd04 	bl	8007724 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d102      	bne.n	8005d2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d24:	2301      	movs	r3, #1
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	e001      	b.n	8005d2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d2e:	f001 fd29 	bl	8007784 <vPortExitCritical>

	return xReturn;
 8005d32:	68fb      	ldr	r3, [r7, #12]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d44:	f001 fcee 	bl	8007724 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d102      	bne.n	8005d5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d54:	2301      	movs	r3, #1
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	e001      	b.n	8005d5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d5e:	f001 fd11 	bl	8007784 <vPortExitCritical>

	return xReturn;
 8005d62:	68fb      	ldr	r3, [r7, #12]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	e014      	b.n	8005da6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d7c:	4a0f      	ldr	r2, [pc, #60]	; (8005dbc <vQueueAddToRegistry+0x50>)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10b      	bne.n	8005da0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d88:	490c      	ldr	r1, [pc, #48]	; (8005dbc <vQueueAddToRegistry+0x50>)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d92:	4a0a      	ldr	r2, [pc, #40]	; (8005dbc <vQueueAddToRegistry+0x50>)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	4413      	add	r3, r2
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d9e:	e006      	b.n	8005dae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3301      	adds	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b07      	cmp	r3, #7
 8005daa:	d9e7      	bls.n	8005d7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005dac:	bf00      	nop
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	2000157c 	.word	0x2000157c

08005dc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005dd0:	f001 fca8 	bl	8007724 <vPortEnterCritical>
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dda:	b25b      	sxtb	r3, r3
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005de0:	d103      	bne.n	8005dea <vQueueWaitForMessageRestricted+0x2a>
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005df0:	b25b      	sxtb	r3, r3
 8005df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005df6:	d103      	bne.n	8005e00 <vQueueWaitForMessageRestricted+0x40>
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e00:	f001 fcc0 	bl	8007784 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d106      	bne.n	8005e1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	3324      	adds	r3, #36	; 0x24
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	68b9      	ldr	r1, [r7, #8]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fc9b 	bl	8006750 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e1a:	6978      	ldr	r0, [r7, #20]
 8005e1c:	f7ff ff26 	bl	8005c6c <prvUnlockQueue>
	}
 8005e20:	bf00      	nop
 8005e22:	3718      	adds	r7, #24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08e      	sub	sp, #56	; 0x38
 8005e2c:	af04      	add	r7, sp, #16
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	623b      	str	r3, [r7, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	e7fe      	b.n	8005e50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10a      	bne.n	8005e6e <xTaskCreateStatic+0x46>
	__asm volatile
 8005e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	61fb      	str	r3, [r7, #28]
}
 8005e6a:	bf00      	nop
 8005e6c:	e7fe      	b.n	8005e6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e6e:	23b4      	movs	r3, #180	; 0xb4
 8005e70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	2bb4      	cmp	r3, #180	; 0xb4
 8005e76:	d00a      	beq.n	8005e8e <xTaskCreateStatic+0x66>
	__asm volatile
 8005e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	61bb      	str	r3, [r7, #24]
}
 8005e8a:	bf00      	nop
 8005e8c:	e7fe      	b.n	8005e8c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d01e      	beq.n	8005ed4 <xTaskCreateStatic+0xac>
 8005e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01b      	beq.n	8005ed4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ea4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005eae:	2300      	movs	r3, #0
 8005eb0:	9303      	str	r3, [sp, #12]
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	9302      	str	r3, [sp, #8]
 8005eb6:	f107 0314 	add.w	r3, r7, #20
 8005eba:	9301      	str	r3, [sp, #4]
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	68b9      	ldr	r1, [r7, #8]
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 f850 	bl	8005f6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ecc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ece:	f000 f8f9 	bl	80060c4 <prvAddNewTaskToReadyList>
 8005ed2:	e001      	b.n	8005ed8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ed8:	697b      	ldr	r3, [r7, #20]
	}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3728      	adds	r7, #40	; 0x28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b08c      	sub	sp, #48	; 0x30
 8005ee6:	af04      	add	r7, sp, #16
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	603b      	str	r3, [r7, #0]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ef2:	88fb      	ldrh	r3, [r7, #6]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f001 fd30 	bl	800795c <pvPortMalloc>
 8005efc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00e      	beq.n	8005f22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f04:	20b4      	movs	r0, #180	; 0xb4
 8005f06:	f001 fd29 	bl	800795c <pvPortMalloc>
 8005f0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	631a      	str	r2, [r3, #48]	; 0x30
 8005f18:	e005      	b.n	8005f26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f1a:	6978      	ldr	r0, [r7, #20]
 8005f1c:	f001 fdea 	bl	8007af4 <vPortFree>
 8005f20:	e001      	b.n	8005f26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d017      	beq.n	8005f5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f34:	88fa      	ldrh	r2, [r7, #6]
 8005f36:	2300      	movs	r3, #0
 8005f38:	9303      	str	r3, [sp, #12]
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	9302      	str	r3, [sp, #8]
 8005f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f80e 	bl	8005f6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f50:	69f8      	ldr	r0, [r7, #28]
 8005f52:	f000 f8b7 	bl	80060c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f56:	2301      	movs	r3, #1
 8005f58:	61bb      	str	r3, [r7, #24]
 8005f5a:	e002      	b.n	8005f62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f62:	69bb      	ldr	r3, [r7, #24]
	}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3720      	adds	r7, #32
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	461a      	mov	r2, r3
 8005f84:	21a5      	movs	r1, #165	; 0xa5
 8005f86:	f002 fe0b 	bl	8008ba0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f94:	3b01      	subs	r3, #1
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	f023 0307 	bic.w	r3, r3, #7
 8005fa2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	617b      	str	r3, [r7, #20]
}
 8005fc0:	bf00      	nop
 8005fc2:	e7fe      	b.n	8005fc2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d01f      	beq.n	800600a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61fb      	str	r3, [r7, #28]
 8005fce:	e012      	b.n	8005ff6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	7819      	ldrb	r1, [r3, #0]
 8005fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	4413      	add	r3, r2
 8005fde:	3334      	adds	r3, #52	; 0x34
 8005fe0:	460a      	mov	r2, r1
 8005fe2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	4413      	add	r3, r2
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d006      	beq.n	8005ffe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	61fb      	str	r3, [r7, #28]
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	2b0f      	cmp	r3, #15
 8005ffa:	d9e9      	bls.n	8005fd0 <prvInitialiseNewTask+0x64>
 8005ffc:	e000      	b.n	8006000 <prvInitialiseNewTask+0x94>
			{
				break;
 8005ffe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006008:	e003      	b.n	8006012 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	2b13      	cmp	r3, #19
 8006016:	d901      	bls.n	800601c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006018:	2313      	movs	r3, #19
 800601a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800601c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006020:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006026:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602a:	2200      	movs	r2, #0
 800602c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	3304      	adds	r3, #4
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff f978 	bl	8005328 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	3318      	adds	r3, #24
 800603c:	4618      	mov	r0, r3
 800603e:	f7ff f973 	bl	8005328 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006046:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	f1c3 0214 	rsb	r2, r3, #20
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006056:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	2200      	movs	r2, #0
 800605c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	2200      	movs	r2, #0
 8006062:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006066:	2200      	movs	r2, #0
 8006068:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	2200      	movs	r2, #0
 8006070:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	335c      	adds	r3, #92	; 0x5c
 8006078:	224c      	movs	r2, #76	; 0x4c
 800607a:	2100      	movs	r1, #0
 800607c:	4618      	mov	r0, r3
 800607e:	f002 fd8f 	bl	8008ba0 <memset>
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	4a0c      	ldr	r2, [pc, #48]	; (80060b8 <prvInitialiseNewTask+0x14c>)
 8006086:	661a      	str	r2, [r3, #96]	; 0x60
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	4a0c      	ldr	r2, [pc, #48]	; (80060bc <prvInitialiseNewTask+0x150>)
 800608c:	665a      	str	r2, [r3, #100]	; 0x64
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	4a0b      	ldr	r2, [pc, #44]	; (80060c0 <prvInitialiseNewTask+0x154>)
 8006092:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	68f9      	ldr	r1, [r7, #12]
 8006098:	69b8      	ldr	r0, [r7, #24]
 800609a:	f001 fa19 	bl	80074d0 <pxPortInitialiseStack>
 800609e:	4602      	mov	r2, r0
 80060a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060b0:	bf00      	nop
 80060b2:	3720      	adds	r7, #32
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	200055ec 	.word	0x200055ec
 80060bc:	20005654 	.word	0x20005654
 80060c0:	200056bc 	.word	0x200056bc

080060c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060cc:	f001 fb2a 	bl	8007724 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060d0:	4b2c      	ldr	r3, [pc, #176]	; (8006184 <prvAddNewTaskToReadyList+0xc0>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3301      	adds	r3, #1
 80060d6:	4a2b      	ldr	r2, [pc, #172]	; (8006184 <prvAddNewTaskToReadyList+0xc0>)
 80060d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060da:	4b2b      	ldr	r3, [pc, #172]	; (8006188 <prvAddNewTaskToReadyList+0xc4>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d109      	bne.n	80060f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060e2:	4a29      	ldr	r2, [pc, #164]	; (8006188 <prvAddNewTaskToReadyList+0xc4>)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060e8:	4b26      	ldr	r3, [pc, #152]	; (8006184 <prvAddNewTaskToReadyList+0xc0>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d110      	bne.n	8006112 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060f0:	f000 fc5a 	bl	80069a8 <prvInitialiseTaskLists>
 80060f4:	e00d      	b.n	8006112 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060f6:	4b25      	ldr	r3, [pc, #148]	; (800618c <prvAddNewTaskToReadyList+0xc8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d109      	bne.n	8006112 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060fe:	4b22      	ldr	r3, [pc, #136]	; (8006188 <prvAddNewTaskToReadyList+0xc4>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	429a      	cmp	r2, r3
 800610a:	d802      	bhi.n	8006112 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800610c:	4a1e      	ldr	r2, [pc, #120]	; (8006188 <prvAddNewTaskToReadyList+0xc4>)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006112:	4b1f      	ldr	r3, [pc, #124]	; (8006190 <prvAddNewTaskToReadyList+0xcc>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3301      	adds	r3, #1
 8006118:	4a1d      	ldr	r2, [pc, #116]	; (8006190 <prvAddNewTaskToReadyList+0xcc>)
 800611a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800611c:	4b1c      	ldr	r3, [pc, #112]	; (8006190 <prvAddNewTaskToReadyList+0xcc>)
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	2201      	movs	r2, #1
 800612a:	409a      	lsls	r2, r3
 800612c:	4b19      	ldr	r3, [pc, #100]	; (8006194 <prvAddNewTaskToReadyList+0xd0>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4313      	orrs	r3, r2
 8006132:	4a18      	ldr	r2, [pc, #96]	; (8006194 <prvAddNewTaskToReadyList+0xd0>)
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613a:	4613      	mov	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4a15      	ldr	r2, [pc, #84]	; (8006198 <prvAddNewTaskToReadyList+0xd4>)
 8006144:	441a      	add	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3304      	adds	r3, #4
 800614a:	4619      	mov	r1, r3
 800614c:	4610      	mov	r0, r2
 800614e:	f7ff f8f8 	bl	8005342 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006152:	f001 fb17 	bl	8007784 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006156:	4b0d      	ldr	r3, [pc, #52]	; (800618c <prvAddNewTaskToReadyList+0xc8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00e      	beq.n	800617c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800615e:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <prvAddNewTaskToReadyList+0xc4>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	429a      	cmp	r2, r3
 800616a:	d207      	bcs.n	800617c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800616c:	4b0b      	ldr	r3, [pc, #44]	; (800619c <prvAddNewTaskToReadyList+0xd8>)
 800616e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	200017c4 	.word	0x200017c4
 8006188:	200015bc 	.word	0x200015bc
 800618c:	200017d0 	.word	0x200017d0
 8006190:	200017e0 	.word	0x200017e0
 8006194:	200017cc 	.word	0x200017cc
 8006198:	200015c0 	.word	0x200015c0
 800619c:	e000ed04 	.word	0xe000ed04

080061a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061a8:	2300      	movs	r3, #0
 80061aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d017      	beq.n	80061e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061b2:	4b13      	ldr	r3, [pc, #76]	; (8006200 <vTaskDelay+0x60>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <vTaskDelay+0x30>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	60bb      	str	r3, [r7, #8]
}
 80061cc:	bf00      	nop
 80061ce:	e7fe      	b.n	80061ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061d0:	f000 f88c 	bl	80062ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061d4:	2100      	movs	r1, #0
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fd4c 	bl	8006c74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061dc:	f000 f894 	bl	8006308 <xTaskResumeAll>
 80061e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d107      	bne.n	80061f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80061e8:	4b06      	ldr	r3, [pc, #24]	; (8006204 <vTaskDelay+0x64>)
 80061ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061f8:	bf00      	nop
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	200017ec 	.word	0x200017ec
 8006204:	e000ed04 	.word	0xe000ed04

08006208 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08a      	sub	sp, #40	; 0x28
 800620c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800620e:	2300      	movs	r3, #0
 8006210:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006212:	2300      	movs	r3, #0
 8006214:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006216:	463a      	mov	r2, r7
 8006218:	1d39      	adds	r1, r7, #4
 800621a:	f107 0308 	add.w	r3, r7, #8
 800621e:	4618      	mov	r0, r3
 8006220:	f7fb fc72 	bl	8001b08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	9202      	str	r2, [sp, #8]
 800622c:	9301      	str	r3, [sp, #4]
 800622e:	2300      	movs	r3, #0
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	2300      	movs	r3, #0
 8006234:	460a      	mov	r2, r1
 8006236:	4925      	ldr	r1, [pc, #148]	; (80062cc <vTaskStartScheduler+0xc4>)
 8006238:	4825      	ldr	r0, [pc, #148]	; (80062d0 <vTaskStartScheduler+0xc8>)
 800623a:	f7ff fdf5 	bl	8005e28 <xTaskCreateStatic>
 800623e:	4603      	mov	r3, r0
 8006240:	4a24      	ldr	r2, [pc, #144]	; (80062d4 <vTaskStartScheduler+0xcc>)
 8006242:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006244:	4b23      	ldr	r3, [pc, #140]	; (80062d4 <vTaskStartScheduler+0xcc>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800624c:	2301      	movs	r3, #1
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	e001      	b.n	8006256 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006252:	2300      	movs	r3, #0
 8006254:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d102      	bne.n	8006262 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800625c:	f000 fd70 	bl	8006d40 <xTimerCreateTimerTask>
 8006260:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d11d      	bne.n	80062a4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	613b      	str	r3, [r7, #16]
}
 800627a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800627c:	4b16      	ldr	r3, [pc, #88]	; (80062d8 <vTaskStartScheduler+0xd0>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	335c      	adds	r3, #92	; 0x5c
 8006282:	4a16      	ldr	r2, [pc, #88]	; (80062dc <vTaskStartScheduler+0xd4>)
 8006284:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006286:	4b16      	ldr	r3, [pc, #88]	; (80062e0 <vTaskStartScheduler+0xd8>)
 8006288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800628c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800628e:	4b15      	ldr	r3, [pc, #84]	; (80062e4 <vTaskStartScheduler+0xdc>)
 8006290:	2201      	movs	r2, #1
 8006292:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006294:	4b14      	ldr	r3, [pc, #80]	; (80062e8 <vTaskStartScheduler+0xe0>)
 8006296:	2200      	movs	r2, #0
 8006298:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800629a:	f7fb fc1b 	bl	8001ad4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800629e:	f001 f99f 	bl	80075e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062a2:	e00e      	b.n	80062c2 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062aa:	d10a      	bne.n	80062c2 <vTaskStartScheduler+0xba>
	__asm volatile
 80062ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b0:	f383 8811 	msr	BASEPRI, r3
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	60fb      	str	r3, [r7, #12]
}
 80062be:	bf00      	nop
 80062c0:	e7fe      	b.n	80062c0 <vTaskStartScheduler+0xb8>
}
 80062c2:	bf00      	nop
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	0800b1d4 	.word	0x0800b1d4
 80062d0:	08006975 	.word	0x08006975
 80062d4:	200017e8 	.word	0x200017e8
 80062d8:	200015bc 	.word	0x200015bc
 80062dc:	20000120 	.word	0x20000120
 80062e0:	200017e4 	.word	0x200017e4
 80062e4:	200017d0 	.word	0x200017d0
 80062e8:	200017c8 	.word	0x200017c8

080062ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062ec:	b480      	push	{r7}
 80062ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062f0:	4b04      	ldr	r3, [pc, #16]	; (8006304 <vTaskSuspendAll+0x18>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3301      	adds	r3, #1
 80062f6:	4a03      	ldr	r2, [pc, #12]	; (8006304 <vTaskSuspendAll+0x18>)
 80062f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062fa:	bf00      	nop
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	200017ec 	.word	0x200017ec

08006308 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006312:	2300      	movs	r3, #0
 8006314:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006316:	4b41      	ldr	r3, [pc, #260]	; (800641c <xTaskResumeAll+0x114>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10a      	bne.n	8006334 <xTaskResumeAll+0x2c>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	603b      	str	r3, [r7, #0]
}
 8006330:	bf00      	nop
 8006332:	e7fe      	b.n	8006332 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006334:	f001 f9f6 	bl	8007724 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006338:	4b38      	ldr	r3, [pc, #224]	; (800641c <xTaskResumeAll+0x114>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3b01      	subs	r3, #1
 800633e:	4a37      	ldr	r2, [pc, #220]	; (800641c <xTaskResumeAll+0x114>)
 8006340:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006342:	4b36      	ldr	r3, [pc, #216]	; (800641c <xTaskResumeAll+0x114>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d161      	bne.n	800640e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800634a:	4b35      	ldr	r3, [pc, #212]	; (8006420 <xTaskResumeAll+0x118>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d05d      	beq.n	800640e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006352:	e02e      	b.n	80063b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006354:	4b33      	ldr	r3, [pc, #204]	; (8006424 <xTaskResumeAll+0x11c>)
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	3318      	adds	r3, #24
 8006360:	4618      	mov	r0, r3
 8006362:	f7ff f84b 	bl	80053fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	3304      	adds	r3, #4
 800636a:	4618      	mov	r0, r3
 800636c:	f7ff f846 	bl	80053fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	2201      	movs	r2, #1
 8006376:	409a      	lsls	r2, r3
 8006378:	4b2b      	ldr	r3, [pc, #172]	; (8006428 <xTaskResumeAll+0x120>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4313      	orrs	r3, r2
 800637e:	4a2a      	ldr	r2, [pc, #168]	; (8006428 <xTaskResumeAll+0x120>)
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006386:	4613      	mov	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4a27      	ldr	r2, [pc, #156]	; (800642c <xTaskResumeAll+0x124>)
 8006390:	441a      	add	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3304      	adds	r3, #4
 8006396:	4619      	mov	r1, r3
 8006398:	4610      	mov	r0, r2
 800639a:	f7fe ffd2 	bl	8005342 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a2:	4b23      	ldr	r3, [pc, #140]	; (8006430 <xTaskResumeAll+0x128>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d302      	bcc.n	80063b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80063ac:	4b21      	ldr	r3, [pc, #132]	; (8006434 <xTaskResumeAll+0x12c>)
 80063ae:	2201      	movs	r2, #1
 80063b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063b2:	4b1c      	ldr	r3, [pc, #112]	; (8006424 <xTaskResumeAll+0x11c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1cc      	bne.n	8006354 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063c0:	f000 fb94 	bl	8006aec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80063c4:	4b1c      	ldr	r3, [pc, #112]	; (8006438 <xTaskResumeAll+0x130>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d010      	beq.n	80063f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063d0:	f000 f846 	bl	8006460 <xTaskIncrementTick>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80063da:	4b16      	ldr	r3, [pc, #88]	; (8006434 <xTaskResumeAll+0x12c>)
 80063dc:	2201      	movs	r2, #1
 80063de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1f1      	bne.n	80063d0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80063ec:	4b12      	ldr	r3, [pc, #72]	; (8006438 <xTaskResumeAll+0x130>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063f2:	4b10      	ldr	r3, [pc, #64]	; (8006434 <xTaskResumeAll+0x12c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d009      	beq.n	800640e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063fa:	2301      	movs	r3, #1
 80063fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063fe:	4b0f      	ldr	r3, [pc, #60]	; (800643c <xTaskResumeAll+0x134>)
 8006400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800640e:	f001 f9b9 	bl	8007784 <vPortExitCritical>

	return xAlreadyYielded;
 8006412:	68bb      	ldr	r3, [r7, #8]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	200017ec 	.word	0x200017ec
 8006420:	200017c4 	.word	0x200017c4
 8006424:	20001780 	.word	0x20001780
 8006428:	200017cc 	.word	0x200017cc
 800642c:	200015c0 	.word	0x200015c0
 8006430:	200015bc 	.word	0x200015bc
 8006434:	200017d8 	.word	0x200017d8
 8006438:	200017d4 	.word	0x200017d4
 800643c:	e000ed04 	.word	0xe000ed04

08006440 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006446:	4b05      	ldr	r3, [pc, #20]	; (800645c <xTaskGetTickCount+0x1c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800644c:	687b      	ldr	r3, [r7, #4]
}
 800644e:	4618      	mov	r0, r3
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	200017c8 	.word	0x200017c8

08006460 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006466:	2300      	movs	r3, #0
 8006468:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800646a:	4b4e      	ldr	r3, [pc, #312]	; (80065a4 <xTaskIncrementTick+0x144>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	f040 808e 	bne.w	8006590 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006474:	4b4c      	ldr	r3, [pc, #304]	; (80065a8 <xTaskIncrementTick+0x148>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3301      	adds	r3, #1
 800647a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800647c:	4a4a      	ldr	r2, [pc, #296]	; (80065a8 <xTaskIncrementTick+0x148>)
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d120      	bne.n	80064ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006488:	4b48      	ldr	r3, [pc, #288]	; (80065ac <xTaskIncrementTick+0x14c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	603b      	str	r3, [r7, #0]
}
 80064a4:	bf00      	nop
 80064a6:	e7fe      	b.n	80064a6 <xTaskIncrementTick+0x46>
 80064a8:	4b40      	ldr	r3, [pc, #256]	; (80065ac <xTaskIncrementTick+0x14c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	4b40      	ldr	r3, [pc, #256]	; (80065b0 <xTaskIncrementTick+0x150>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a3e      	ldr	r2, [pc, #248]	; (80065ac <xTaskIncrementTick+0x14c>)
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	4a3e      	ldr	r2, [pc, #248]	; (80065b0 <xTaskIncrementTick+0x150>)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	4b3d      	ldr	r3, [pc, #244]	; (80065b4 <xTaskIncrementTick+0x154>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3301      	adds	r3, #1
 80064c2:	4a3c      	ldr	r2, [pc, #240]	; (80065b4 <xTaskIncrementTick+0x154>)
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	f000 fb11 	bl	8006aec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064ca:	4b3b      	ldr	r3, [pc, #236]	; (80065b8 <xTaskIncrementTick+0x158>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d348      	bcc.n	8006566 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064d4:	4b35      	ldr	r3, [pc, #212]	; (80065ac <xTaskIncrementTick+0x14c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d104      	bne.n	80064e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064de:	4b36      	ldr	r3, [pc, #216]	; (80065b8 <xTaskIncrementTick+0x158>)
 80064e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064e4:	601a      	str	r2, [r3, #0]
					break;
 80064e6:	e03e      	b.n	8006566 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064e8:	4b30      	ldr	r3, [pc, #192]	; (80065ac <xTaskIncrementTick+0x14c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d203      	bcs.n	8006508 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006500:	4a2d      	ldr	r2, [pc, #180]	; (80065b8 <xTaskIncrementTick+0x158>)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006506:	e02e      	b.n	8006566 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	3304      	adds	r3, #4
 800650c:	4618      	mov	r0, r3
 800650e:	f7fe ff75 	bl	80053fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006516:	2b00      	cmp	r3, #0
 8006518:	d004      	beq.n	8006524 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	3318      	adds	r3, #24
 800651e:	4618      	mov	r0, r3
 8006520:	f7fe ff6c 	bl	80053fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006528:	2201      	movs	r2, #1
 800652a:	409a      	lsls	r2, r3
 800652c:	4b23      	ldr	r3, [pc, #140]	; (80065bc <xTaskIncrementTick+0x15c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4313      	orrs	r3, r2
 8006532:	4a22      	ldr	r2, [pc, #136]	; (80065bc <xTaskIncrementTick+0x15c>)
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653a:	4613      	mov	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4a1f      	ldr	r2, [pc, #124]	; (80065c0 <xTaskIncrementTick+0x160>)
 8006544:	441a      	add	r2, r3
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	3304      	adds	r3, #4
 800654a:	4619      	mov	r1, r3
 800654c:	4610      	mov	r0, r2
 800654e:	f7fe fef8 	bl	8005342 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006556:	4b1b      	ldr	r3, [pc, #108]	; (80065c4 <xTaskIncrementTick+0x164>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	429a      	cmp	r2, r3
 800655e:	d3b9      	bcc.n	80064d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006560:	2301      	movs	r3, #1
 8006562:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006564:	e7b6      	b.n	80064d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006566:	4b17      	ldr	r3, [pc, #92]	; (80065c4 <xTaskIncrementTick+0x164>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656c:	4914      	ldr	r1, [pc, #80]	; (80065c0 <xTaskIncrementTick+0x160>)
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	440b      	add	r3, r1
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d901      	bls.n	8006582 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800657e:	2301      	movs	r3, #1
 8006580:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006582:	4b11      	ldr	r3, [pc, #68]	; (80065c8 <xTaskIncrementTick+0x168>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d007      	beq.n	800659a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800658a:	2301      	movs	r3, #1
 800658c:	617b      	str	r3, [r7, #20]
 800658e:	e004      	b.n	800659a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006590:	4b0e      	ldr	r3, [pc, #56]	; (80065cc <xTaskIncrementTick+0x16c>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3301      	adds	r3, #1
 8006596:	4a0d      	ldr	r2, [pc, #52]	; (80065cc <xTaskIncrementTick+0x16c>)
 8006598:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800659a:	697b      	ldr	r3, [r7, #20]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	200017ec 	.word	0x200017ec
 80065a8:	200017c8 	.word	0x200017c8
 80065ac:	20001778 	.word	0x20001778
 80065b0:	2000177c 	.word	0x2000177c
 80065b4:	200017dc 	.word	0x200017dc
 80065b8:	200017e4 	.word	0x200017e4
 80065bc:	200017cc 	.word	0x200017cc
 80065c0:	200015c0 	.word	0x200015c0
 80065c4:	200015bc 	.word	0x200015bc
 80065c8:	200017d8 	.word	0x200017d8
 80065cc:	200017d4 	.word	0x200017d4

080065d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065d6:	4b43      	ldr	r3, [pc, #268]	; (80066e4 <vTaskSwitchContext+0x114>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065de:	4b42      	ldr	r3, [pc, #264]	; (80066e8 <vTaskSwitchContext+0x118>)
 80065e0:	2201      	movs	r2, #1
 80065e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065e4:	e07a      	b.n	80066dc <vTaskSwitchContext+0x10c>
		xYieldPending = pdFALSE;
 80065e6:	4b40      	ldr	r3, [pc, #256]	; (80066e8 <vTaskSwitchContext+0x118>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80065ec:	f7fb fa79 	bl	8001ae2 <getRunTimeCounterValue>
 80065f0:	4603      	mov	r3, r0
 80065f2:	4a3e      	ldr	r2, [pc, #248]	; (80066ec <vTaskSwitchContext+0x11c>)
 80065f4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80065f6:	4b3d      	ldr	r3, [pc, #244]	; (80066ec <vTaskSwitchContext+0x11c>)
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	4b3d      	ldr	r3, [pc, #244]	; (80066f0 <vTaskSwitchContext+0x120>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d909      	bls.n	8006616 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006602:	4b3c      	ldr	r3, [pc, #240]	; (80066f4 <vTaskSwitchContext+0x124>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8006608:	4a38      	ldr	r2, [pc, #224]	; (80066ec <vTaskSwitchContext+0x11c>)
 800660a:	6810      	ldr	r0, [r2, #0]
 800660c:	4a38      	ldr	r2, [pc, #224]	; (80066f0 <vTaskSwitchContext+0x120>)
 800660e:	6812      	ldr	r2, [r2, #0]
 8006610:	1a82      	subs	r2, r0, r2
 8006612:	440a      	add	r2, r1
 8006614:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8006616:	4b35      	ldr	r3, [pc, #212]	; (80066ec <vTaskSwitchContext+0x11c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a35      	ldr	r2, [pc, #212]	; (80066f0 <vTaskSwitchContext+0x120>)
 800661c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800661e:	4b35      	ldr	r3, [pc, #212]	; (80066f4 <vTaskSwitchContext+0x124>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	4b33      	ldr	r3, [pc, #204]	; (80066f4 <vTaskSwitchContext+0x124>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662a:	429a      	cmp	r2, r3
 800662c:	d808      	bhi.n	8006640 <vTaskSwitchContext+0x70>
 800662e:	4b31      	ldr	r3, [pc, #196]	; (80066f4 <vTaskSwitchContext+0x124>)
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	4b30      	ldr	r3, [pc, #192]	; (80066f4 <vTaskSwitchContext+0x124>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3334      	adds	r3, #52	; 0x34
 8006638:	4619      	mov	r1, r3
 800663a:	4610      	mov	r0, r2
 800663c:	f7fb fa59 	bl	8001af2 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 8006640:	4b2c      	ldr	r3, [pc, #176]	; (80066f4 <vTaskSwitchContext+0x124>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a2c      	ldr	r2, [pc, #176]	; (80066f8 <vTaskSwitchContext+0x128>)
 8006646:	6812      	ldr	r2, [r2, #0]
 8006648:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800664c:	4b2b      	ldr	r3, [pc, #172]	; (80066fc <vTaskSwitchContext+0x12c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	fab3 f383 	clz	r3, r3
 8006658:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800665a:	7afb      	ldrb	r3, [r7, #11]
 800665c:	f1c3 031f 	rsb	r3, r3, #31
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	4927      	ldr	r1, [pc, #156]	; (8006700 <vTaskSwitchContext+0x130>)
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	4613      	mov	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	440b      	add	r3, r1
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10a      	bne.n	800668c <vTaskSwitchContext+0xbc>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	607b      	str	r3, [r7, #4]
}
 8006688:	bf00      	nop
 800668a:	e7fe      	b.n	800668a <vTaskSwitchContext+0xba>
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4613      	mov	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4a1a      	ldr	r2, [pc, #104]	; (8006700 <vTaskSwitchContext+0x130>)
 8006698:	4413      	add	r3, r2
 800669a:	613b      	str	r3, [r7, #16]
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	605a      	str	r2, [r3, #4]
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	3308      	adds	r3, #8
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d104      	bne.n	80066bc <vTaskSwitchContext+0xec>
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	605a      	str	r2, [r3, #4]
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	4a0c      	ldr	r2, [pc, #48]	; (80066f4 <vTaskSwitchContext+0x124>)
 80066c4:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 80066c6:	4b0b      	ldr	r3, [pc, #44]	; (80066f4 <vTaskSwitchContext+0x124>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066ce:	4a0a      	ldr	r2, [pc, #40]	; (80066f8 <vTaskSwitchContext+0x128>)
 80066d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066d2:	4b08      	ldr	r3, [pc, #32]	; (80066f4 <vTaskSwitchContext+0x124>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	335c      	adds	r3, #92	; 0x5c
 80066d8:	4a0a      	ldr	r2, [pc, #40]	; (8006704 <vTaskSwitchContext+0x134>)
 80066da:	6013      	str	r3, [r2, #0]
}
 80066dc:	bf00      	nop
 80066de:	3718      	adds	r7, #24
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	200017ec 	.word	0x200017ec
 80066e8:	200017d8 	.word	0x200017d8
 80066ec:	200017f4 	.word	0x200017f4
 80066f0:	200017f0 	.word	0x200017f0
 80066f4:	200015bc 	.word	0x200015bc
 80066f8:	200017c0 	.word	0x200017c0
 80066fc:	200017cc 	.word	0x200017cc
 8006700:	200015c0 	.word	0x200015c0
 8006704:	20000120 	.word	0x20000120

08006708 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	60fb      	str	r3, [r7, #12]
}
 800672a:	bf00      	nop
 800672c:	e7fe      	b.n	800672c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800672e:	4b07      	ldr	r3, [pc, #28]	; (800674c <vTaskPlaceOnEventList+0x44>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3318      	adds	r3, #24
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7fe fe27 	bl	800538a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800673c:	2101      	movs	r1, #1
 800673e:	6838      	ldr	r0, [r7, #0]
 8006740:	f000 fa98 	bl	8006c74 <prvAddCurrentTaskToDelayedList>
}
 8006744:	bf00      	nop
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	200015bc 	.word	0x200015bc

08006750 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10a      	bne.n	8006778 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	617b      	str	r3, [r7, #20]
}
 8006774:	bf00      	nop
 8006776:	e7fe      	b.n	8006776 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006778:	4b0a      	ldr	r3, [pc, #40]	; (80067a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3318      	adds	r3, #24
 800677e:	4619      	mov	r1, r3
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f7fe fdde 	bl	8005342 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800678c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006790:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006792:	6879      	ldr	r1, [r7, #4]
 8006794:	68b8      	ldr	r0, [r7, #8]
 8006796:	f000 fa6d 	bl	8006c74 <prvAddCurrentTaskToDelayedList>
	}
 800679a:	bf00      	nop
 800679c:	3718      	adds	r7, #24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	200015bc 	.word	0x200015bc

080067a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10a      	bne.n	80067d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	60fb      	str	r3, [r7, #12]
}
 80067d0:	bf00      	nop
 80067d2:	e7fe      	b.n	80067d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	3318      	adds	r3, #24
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fe fe0f 	bl	80053fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067de:	4b1d      	ldr	r3, [pc, #116]	; (8006854 <xTaskRemoveFromEventList+0xac>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d11c      	bne.n	8006820 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	3304      	adds	r3, #4
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fe fe06 	bl	80053fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	2201      	movs	r2, #1
 80067f6:	409a      	lsls	r2, r3
 80067f8:	4b17      	ldr	r3, [pc, #92]	; (8006858 <xTaskRemoveFromEventList+0xb0>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	4a16      	ldr	r2, [pc, #88]	; (8006858 <xTaskRemoveFromEventList+0xb0>)
 8006800:	6013      	str	r3, [r2, #0]
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006806:	4613      	mov	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4a13      	ldr	r2, [pc, #76]	; (800685c <xTaskRemoveFromEventList+0xb4>)
 8006810:	441a      	add	r2, r3
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	3304      	adds	r3, #4
 8006816:	4619      	mov	r1, r3
 8006818:	4610      	mov	r0, r2
 800681a:	f7fe fd92 	bl	8005342 <vListInsertEnd>
 800681e:	e005      	b.n	800682c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	3318      	adds	r3, #24
 8006824:	4619      	mov	r1, r3
 8006826:	480e      	ldr	r0, [pc, #56]	; (8006860 <xTaskRemoveFromEventList+0xb8>)
 8006828:	f7fe fd8b 	bl	8005342 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006830:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <xTaskRemoveFromEventList+0xbc>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006836:	429a      	cmp	r2, r3
 8006838:	d905      	bls.n	8006846 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800683a:	2301      	movs	r3, #1
 800683c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800683e:	4b0a      	ldr	r3, [pc, #40]	; (8006868 <xTaskRemoveFromEventList+0xc0>)
 8006840:	2201      	movs	r2, #1
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	e001      	b.n	800684a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006846:	2300      	movs	r3, #0
 8006848:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800684a:	697b      	ldr	r3, [r7, #20]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	200017ec 	.word	0x200017ec
 8006858:	200017cc 	.word	0x200017cc
 800685c:	200015c0 	.word	0x200015c0
 8006860:	20001780 	.word	0x20001780
 8006864:	200015bc 	.word	0x200015bc
 8006868:	200017d8 	.word	0x200017d8

0800686c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006874:	4b06      	ldr	r3, [pc, #24]	; (8006890 <vTaskInternalSetTimeOutState+0x24>)
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800687c:	4b05      	ldr	r3, [pc, #20]	; (8006894 <vTaskInternalSetTimeOutState+0x28>)
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	605a      	str	r2, [r3, #4]
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	200017dc 	.word	0x200017dc
 8006894:	200017c8 	.word	0x200017c8

08006898 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b088      	sub	sp, #32
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10a      	bne.n	80068be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	613b      	str	r3, [r7, #16]
}
 80068ba:	bf00      	nop
 80068bc:	e7fe      	b.n	80068bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10a      	bne.n	80068da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	60fb      	str	r3, [r7, #12]
}
 80068d6:	bf00      	nop
 80068d8:	e7fe      	b.n	80068d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80068da:	f000 ff23 	bl	8007724 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068de:	4b1d      	ldr	r3, [pc, #116]	; (8006954 <xTaskCheckForTimeOut+0xbc>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068f6:	d102      	bne.n	80068fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80068f8:	2300      	movs	r3, #0
 80068fa:	61fb      	str	r3, [r7, #28]
 80068fc:	e023      	b.n	8006946 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	4b15      	ldr	r3, [pc, #84]	; (8006958 <xTaskCheckForTimeOut+0xc0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	429a      	cmp	r2, r3
 8006908:	d007      	beq.n	800691a <xTaskCheckForTimeOut+0x82>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	429a      	cmp	r2, r3
 8006912:	d302      	bcc.n	800691a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006914:	2301      	movs	r3, #1
 8006916:	61fb      	str	r3, [r7, #28]
 8006918:	e015      	b.n	8006946 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	429a      	cmp	r2, r3
 8006922:	d20b      	bcs.n	800693c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	1ad2      	subs	r2, r2, r3
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff ff9b 	bl	800686c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006936:	2300      	movs	r3, #0
 8006938:	61fb      	str	r3, [r7, #28]
 800693a:	e004      	b.n	8006946 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006942:	2301      	movs	r3, #1
 8006944:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006946:	f000 ff1d 	bl	8007784 <vPortExitCritical>

	return xReturn;
 800694a:	69fb      	ldr	r3, [r7, #28]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3720      	adds	r7, #32
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	200017c8 	.word	0x200017c8
 8006958:	200017dc 	.word	0x200017dc

0800695c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006960:	4b03      	ldr	r3, [pc, #12]	; (8006970 <vTaskMissedYield+0x14>)
 8006962:	2201      	movs	r2, #1
 8006964:	601a      	str	r2, [r3, #0]
}
 8006966:	bf00      	nop
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	200017d8 	.word	0x200017d8

08006974 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800697c:	f000 f854 	bl	8006a28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006980:	4b07      	ldr	r3, [pc, #28]	; (80069a0 <prvIdleTask+0x2c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d907      	bls.n	8006998 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006988:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <prvIdleTask+0x30>)
 800698a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8006998:	f7fb fdce 	bl	8002538 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800699c:	e7ee      	b.n	800697c <prvIdleTask+0x8>
 800699e:	bf00      	nop
 80069a0:	200015c0 	.word	0x200015c0
 80069a4:	e000ed04 	.word	0xe000ed04

080069a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069ae:	2300      	movs	r3, #0
 80069b0:	607b      	str	r3, [r7, #4]
 80069b2:	e00c      	b.n	80069ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	4613      	mov	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4a12      	ldr	r2, [pc, #72]	; (8006a08 <prvInitialiseTaskLists+0x60>)
 80069c0:	4413      	add	r3, r2
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fe fc90 	bl	80052e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3301      	adds	r3, #1
 80069cc:	607b      	str	r3, [r7, #4]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b13      	cmp	r3, #19
 80069d2:	d9ef      	bls.n	80069b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069d4:	480d      	ldr	r0, [pc, #52]	; (8006a0c <prvInitialiseTaskLists+0x64>)
 80069d6:	f7fe fc87 	bl	80052e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069da:	480d      	ldr	r0, [pc, #52]	; (8006a10 <prvInitialiseTaskLists+0x68>)
 80069dc:	f7fe fc84 	bl	80052e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069e0:	480c      	ldr	r0, [pc, #48]	; (8006a14 <prvInitialiseTaskLists+0x6c>)
 80069e2:	f7fe fc81 	bl	80052e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069e6:	480c      	ldr	r0, [pc, #48]	; (8006a18 <prvInitialiseTaskLists+0x70>)
 80069e8:	f7fe fc7e 	bl	80052e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069ec:	480b      	ldr	r0, [pc, #44]	; (8006a1c <prvInitialiseTaskLists+0x74>)
 80069ee:	f7fe fc7b 	bl	80052e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069f2:	4b0b      	ldr	r3, [pc, #44]	; (8006a20 <prvInitialiseTaskLists+0x78>)
 80069f4:	4a05      	ldr	r2, [pc, #20]	; (8006a0c <prvInitialiseTaskLists+0x64>)
 80069f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069f8:	4b0a      	ldr	r3, [pc, #40]	; (8006a24 <prvInitialiseTaskLists+0x7c>)
 80069fa:	4a05      	ldr	r2, [pc, #20]	; (8006a10 <prvInitialiseTaskLists+0x68>)
 80069fc:	601a      	str	r2, [r3, #0]
}
 80069fe:	bf00      	nop
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	200015c0 	.word	0x200015c0
 8006a0c:	20001750 	.word	0x20001750
 8006a10:	20001764 	.word	0x20001764
 8006a14:	20001780 	.word	0x20001780
 8006a18:	20001794 	.word	0x20001794
 8006a1c:	200017ac 	.word	0x200017ac
 8006a20:	20001778 	.word	0x20001778
 8006a24:	2000177c 	.word	0x2000177c

08006a28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a2e:	e019      	b.n	8006a64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a30:	f000 fe78 	bl	8007724 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a34:	4b10      	ldr	r3, [pc, #64]	; (8006a78 <prvCheckTasksWaitingTermination+0x50>)
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fe fcdb 	bl	80053fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a46:	4b0d      	ldr	r3, [pc, #52]	; (8006a7c <prvCheckTasksWaitingTermination+0x54>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	4a0b      	ldr	r2, [pc, #44]	; (8006a7c <prvCheckTasksWaitingTermination+0x54>)
 8006a4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a50:	4b0b      	ldr	r3, [pc, #44]	; (8006a80 <prvCheckTasksWaitingTermination+0x58>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3b01      	subs	r3, #1
 8006a56:	4a0a      	ldr	r2, [pc, #40]	; (8006a80 <prvCheckTasksWaitingTermination+0x58>)
 8006a58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a5a:	f000 fe93 	bl	8007784 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f810 	bl	8006a84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a64:	4b06      	ldr	r3, [pc, #24]	; (8006a80 <prvCheckTasksWaitingTermination+0x58>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e1      	bne.n	8006a30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a6c:	bf00      	nop
 8006a6e:	bf00      	nop
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20001794 	.word	0x20001794
 8006a7c:	200017c4 	.word	0x200017c4
 8006a80:	200017a8 	.word	0x200017a8

08006a84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	335c      	adds	r3, #92	; 0x5c
 8006a90:	4618      	mov	r0, r3
 8006a92:	f002 f8b5 	bl	8008c00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d108      	bne.n	8006ab2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f001 f825 	bl	8007af4 <vPortFree>
				vPortFree( pxTCB );
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f001 f822 	bl	8007af4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ab0:	e018      	b.n	8006ae4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d103      	bne.n	8006ac4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 f819 	bl	8007af4 <vPortFree>
	}
 8006ac2:	e00f      	b.n	8006ae4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d00a      	beq.n	8006ae4 <prvDeleteTCB+0x60>
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	60fb      	str	r3, [r7, #12]
}
 8006ae0:	bf00      	nop
 8006ae2:	e7fe      	b.n	8006ae2 <prvDeleteTCB+0x5e>
	}
 8006ae4:	bf00      	nop
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006af2:	4b0c      	ldr	r3, [pc, #48]	; (8006b24 <prvResetNextTaskUnblockTime+0x38>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d104      	bne.n	8006b06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006afc:	4b0a      	ldr	r3, [pc, #40]	; (8006b28 <prvResetNextTaskUnblockTime+0x3c>)
 8006afe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b04:	e008      	b.n	8006b18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b06:	4b07      	ldr	r3, [pc, #28]	; (8006b24 <prvResetNextTaskUnblockTime+0x38>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	4a04      	ldr	r2, [pc, #16]	; (8006b28 <prvResetNextTaskUnblockTime+0x3c>)
 8006b16:	6013      	str	r3, [r2, #0]
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	20001778 	.word	0x20001778
 8006b28:	200017e4 	.word	0x200017e4

08006b2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b32:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <xTaskGetSchedulerState+0x34>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d102      	bne.n	8006b40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	607b      	str	r3, [r7, #4]
 8006b3e:	e008      	b.n	8006b52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b40:	4b08      	ldr	r3, [pc, #32]	; (8006b64 <xTaskGetSchedulerState+0x38>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d102      	bne.n	8006b4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	607b      	str	r3, [r7, #4]
 8006b4c:	e001      	b.n	8006b52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b52:	687b      	ldr	r3, [r7, #4]
	}
 8006b54:	4618      	mov	r0, r3
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	200017d0 	.word	0x200017d0
 8006b64:	200017ec 	.word	0x200017ec

08006b68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b74:	2300      	movs	r3, #0
 8006b76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d06e      	beq.n	8006c5c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b7e:	4b3a      	ldr	r3, [pc, #232]	; (8006c68 <xTaskPriorityDisinherit+0x100>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d00a      	beq.n	8006b9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8c:	f383 8811 	msr	BASEPRI, r3
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	60fb      	str	r3, [r7, #12]
}
 8006b9a:	bf00      	nop
 8006b9c:	e7fe      	b.n	8006b9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10a      	bne.n	8006bbc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	60bb      	str	r3, [r7, #8]
}
 8006bb8:	bf00      	nop
 8006bba:	e7fe      	b.n	8006bba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc0:	1e5a      	subs	r2, r3, #1
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d044      	beq.n	8006c5c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d140      	bne.n	8006c5c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	3304      	adds	r3, #4
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe fc0c 	bl	80053fc <uxListRemove>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d115      	bne.n	8006c16 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bee:	491f      	ldr	r1, [pc, #124]	; (8006c6c <xTaskPriorityDisinherit+0x104>)
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	440b      	add	r3, r1
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10a      	bne.n	8006c16 <xTaskPriorityDisinherit+0xae>
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c04:	2201      	movs	r2, #1
 8006c06:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0a:	43da      	mvns	r2, r3
 8006c0c:	4b18      	ldr	r3, [pc, #96]	; (8006c70 <xTaskPriorityDisinherit+0x108>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4013      	ands	r3, r2
 8006c12:	4a17      	ldr	r2, [pc, #92]	; (8006c70 <xTaskPriorityDisinherit+0x108>)
 8006c14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c22:	f1c3 0214 	rsb	r2, r3, #20
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2e:	2201      	movs	r2, #1
 8006c30:	409a      	lsls	r2, r3
 8006c32:	4b0f      	ldr	r3, [pc, #60]	; (8006c70 <xTaskPriorityDisinherit+0x108>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	4a0d      	ldr	r2, [pc, #52]	; (8006c70 <xTaskPriorityDisinherit+0x108>)
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c40:	4613      	mov	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4a08      	ldr	r2, [pc, #32]	; (8006c6c <xTaskPriorityDisinherit+0x104>)
 8006c4a:	441a      	add	r2, r3
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	3304      	adds	r3, #4
 8006c50:	4619      	mov	r1, r3
 8006c52:	4610      	mov	r0, r2
 8006c54:	f7fe fb75 	bl	8005342 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c5c:	697b      	ldr	r3, [r7, #20]
	}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	200015bc 	.word	0x200015bc
 8006c6c:	200015c0 	.word	0x200015c0
 8006c70:	200017cc 	.word	0x200017cc

08006c74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c7e:	4b29      	ldr	r3, [pc, #164]	; (8006d24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c84:	4b28      	ldr	r3, [pc, #160]	; (8006d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3304      	adds	r3, #4
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fe fbb6 	bl	80053fc <uxListRemove>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10b      	bne.n	8006cae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006c96:	4b24      	ldr	r3, [pc, #144]	; (8006d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca2:	43da      	mvns	r2, r3
 8006ca4:	4b21      	ldr	r3, [pc, #132]	; (8006d2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	4a20      	ldr	r2, [pc, #128]	; (8006d2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006cac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cb4:	d10a      	bne.n	8006ccc <prvAddCurrentTaskToDelayedList+0x58>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d007      	beq.n	8006ccc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cbc:	4b1a      	ldr	r3, [pc, #104]	; (8006d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	481a      	ldr	r0, [pc, #104]	; (8006d30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006cc6:	f7fe fb3c 	bl	8005342 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006cca:	e026      	b.n	8006d1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cd4:	4b14      	ldr	r3, [pc, #80]	; (8006d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d209      	bcs.n	8006cf8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ce4:	4b13      	ldr	r3, [pc, #76]	; (8006d34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	4b0f      	ldr	r3, [pc, #60]	; (8006d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3304      	adds	r3, #4
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	f7fe fb4a 	bl	800538a <vListInsert>
}
 8006cf6:	e010      	b.n	8006d1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cf8:	4b0f      	ldr	r3, [pc, #60]	; (8006d38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	4b0a      	ldr	r3, [pc, #40]	; (8006d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3304      	adds	r3, #4
 8006d02:	4619      	mov	r1, r3
 8006d04:	4610      	mov	r0, r2
 8006d06:	f7fe fb40 	bl	800538a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d0a:	4b0c      	ldr	r3, [pc, #48]	; (8006d3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d202      	bcs.n	8006d1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006d14:	4a09      	ldr	r2, [pc, #36]	; (8006d3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	6013      	str	r3, [r2, #0]
}
 8006d1a:	bf00      	nop
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	200017c8 	.word	0x200017c8
 8006d28:	200015bc 	.word	0x200015bc
 8006d2c:	200017cc 	.word	0x200017cc
 8006d30:	200017ac 	.word	0x200017ac
 8006d34:	2000177c 	.word	0x2000177c
 8006d38:	20001778 	.word	0x20001778
 8006d3c:	200017e4 	.word	0x200017e4

08006d40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b08a      	sub	sp, #40	; 0x28
 8006d44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d4a:	f000 fb81 	bl	8007450 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d4e:	4b1c      	ldr	r3, [pc, #112]	; (8006dc0 <xTimerCreateTimerTask+0x80>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d021      	beq.n	8006d9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d5e:	1d3a      	adds	r2, r7, #4
 8006d60:	f107 0108 	add.w	r1, r7, #8
 8006d64:	f107 030c 	add.w	r3, r7, #12
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fa fee7 	bl	8001b3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d6e:	6879      	ldr	r1, [r7, #4]
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	9202      	str	r2, [sp, #8]
 8006d76:	9301      	str	r3, [sp, #4]
 8006d78:	2301      	movs	r3, #1
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	460a      	mov	r2, r1
 8006d80:	4910      	ldr	r1, [pc, #64]	; (8006dc4 <xTimerCreateTimerTask+0x84>)
 8006d82:	4811      	ldr	r0, [pc, #68]	; (8006dc8 <xTimerCreateTimerTask+0x88>)
 8006d84:	f7ff f850 	bl	8005e28 <xTaskCreateStatic>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	4a10      	ldr	r2, [pc, #64]	; (8006dcc <xTimerCreateTimerTask+0x8c>)
 8006d8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d8e:	4b0f      	ldr	r3, [pc, #60]	; (8006dcc <xTimerCreateTimerTask+0x8c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d96:	2301      	movs	r3, #1
 8006d98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10a      	bne.n	8006db6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	613b      	str	r3, [r7, #16]
}
 8006db2:	bf00      	nop
 8006db4:	e7fe      	b.n	8006db4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006db6:	697b      	ldr	r3, [r7, #20]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	20001828 	.word	0x20001828
 8006dc4:	0800b204 	.word	0x0800b204
 8006dc8:	08006ff9 	.word	0x08006ff9
 8006dcc:	2000182c 	.word	0x2000182c

08006dd0 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08a      	sub	sp, #40	; 0x28
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
 8006ddc:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006dde:	232c      	movs	r3, #44	; 0x2c
 8006de0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	2b2c      	cmp	r3, #44	; 0x2c
 8006de6:	d00a      	beq.n	8006dfe <xTimerCreateStatic+0x2e>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	61bb      	str	r3, [r7, #24]
}
 8006dfa:	bf00      	nop
 8006dfc:	e7fe      	b.n	8006dfc <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006dfe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10a      	bne.n	8006e1c <xTimerCreateStatic+0x4c>
	__asm volatile
 8006e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	617b      	str	r3, [r7, #20]
}
 8006e18:	bf00      	nop
 8006e1a:	e7fe      	b.n	8006e1a <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1e:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00d      	beq.n	8006e42 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	2202      	movs	r2, #2
 8006e2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	9301      	str	r3, [sp, #4]
 8006e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	68b9      	ldr	r1, [r7, #8]
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 f805 	bl	8006e4c <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006e42:	69fb      	ldr	r3, [r7, #28]
	}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3720      	adds	r7, #32
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10a      	bne.n	8006e76 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	617b      	str	r3, [r7, #20]
}
 8006e72:	bf00      	nop
 8006e74:	e7fe      	b.n	8006e74 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d01e      	beq.n	8006eba <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006e7c:	f000 fae8 	bl	8007450 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	6a3a      	ldr	r2, [r7, #32]
 8006e96:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe fa43 	bl	8005328 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d008      	beq.n	8006eba <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006eae:	f043 0304 	orr.w	r3, r3, #4
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006eba:	bf00      	nop
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08a      	sub	sp, #40	; 0x28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
 8006ed0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10a      	bne.n	8006ef2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	623b      	str	r3, [r7, #32]
}
 8006eee:	bf00      	nop
 8006ef0:	e7fe      	b.n	8006ef0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ef2:	4b1a      	ldr	r3, [pc, #104]	; (8006f5c <xTimerGenericCommand+0x98>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d02a      	beq.n	8006f50 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	2b05      	cmp	r3, #5
 8006f0a:	dc18      	bgt.n	8006f3e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f0c:	f7ff fe0e 	bl	8006b2c <xTaskGetSchedulerState>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d109      	bne.n	8006f2a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f16:	4b11      	ldr	r3, [pc, #68]	; (8006f5c <xTimerGenericCommand+0x98>)
 8006f18:	6818      	ldr	r0, [r3, #0]
 8006f1a:	f107 0110 	add.w	r1, r7, #16
 8006f1e:	2300      	movs	r3, #0
 8006f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f22:	f7fe fb99 	bl	8005658 <xQueueGenericSend>
 8006f26:	6278      	str	r0, [r7, #36]	; 0x24
 8006f28:	e012      	b.n	8006f50 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006f2a:	4b0c      	ldr	r3, [pc, #48]	; (8006f5c <xTimerGenericCommand+0x98>)
 8006f2c:	6818      	ldr	r0, [r3, #0]
 8006f2e:	f107 0110 	add.w	r1, r7, #16
 8006f32:	2300      	movs	r3, #0
 8006f34:	2200      	movs	r2, #0
 8006f36:	f7fe fb8f 	bl	8005658 <xQueueGenericSend>
 8006f3a:	6278      	str	r0, [r7, #36]	; 0x24
 8006f3c:	e008      	b.n	8006f50 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f3e:	4b07      	ldr	r3, [pc, #28]	; (8006f5c <xTimerGenericCommand+0x98>)
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	f107 0110 	add.w	r1, r7, #16
 8006f46:	2300      	movs	r3, #0
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	f7fe fc83 	bl	8005854 <xQueueGenericSendFromISR>
 8006f4e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3728      	adds	r7, #40	; 0x28
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20001828 	.word	0x20001828

08006f60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b088      	sub	sp, #32
 8006f64:	af02      	add	r7, sp, #8
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f6a:	4b22      	ldr	r3, [pc, #136]	; (8006ff4 <prvProcessExpiredTimer+0x94>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	3304      	adds	r3, #4
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fe fa3f 	bl	80053fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d022      	beq.n	8006fd2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	699a      	ldr	r2, [r3, #24]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	18d1      	adds	r1, r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	6978      	ldr	r0, [r7, #20]
 8006f9a:	f000 f8d1 	bl	8007140 <prvInsertTimerInActiveList>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01f      	beq.n	8006fe4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	2300      	movs	r3, #0
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	2100      	movs	r1, #0
 8006fae:	6978      	ldr	r0, [r7, #20]
 8006fb0:	f7ff ff88 	bl	8006ec4 <xTimerGenericCommand>
 8006fb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d113      	bne.n	8006fe4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	60fb      	str	r3, [r7, #12]
}
 8006fce:	bf00      	nop
 8006fd0:	e7fe      	b.n	8006fd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fd8:	f023 0301 	bic.w	r3, r3, #1
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	6978      	ldr	r0, [r7, #20]
 8006fea:	4798      	blx	r3
}
 8006fec:	bf00      	nop
 8006fee:	3718      	adds	r7, #24
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	20001820 	.word	0x20001820

08006ff8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007000:	f107 0308 	add.w	r3, r7, #8
 8007004:	4618      	mov	r0, r3
 8007006:	f000 f857 	bl	80070b8 <prvGetNextExpireTime>
 800700a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	4619      	mov	r1, r3
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f000 f803 	bl	800701c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007016:	f000 f8d5 	bl	80071c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800701a:	e7f1      	b.n	8007000 <prvTimerTask+0x8>

0800701c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007026:	f7ff f961 	bl	80062ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800702a:	f107 0308 	add.w	r3, r7, #8
 800702e:	4618      	mov	r0, r3
 8007030:	f000 f866 	bl	8007100 <prvSampleTimeNow>
 8007034:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d130      	bne.n	800709e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10a      	bne.n	8007058 <prvProcessTimerOrBlockTask+0x3c>
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	429a      	cmp	r2, r3
 8007048:	d806      	bhi.n	8007058 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800704a:	f7ff f95d 	bl	8006308 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800704e:	68f9      	ldr	r1, [r7, #12]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7ff ff85 	bl	8006f60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007056:	e024      	b.n	80070a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d008      	beq.n	8007070 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800705e:	4b13      	ldr	r3, [pc, #76]	; (80070ac <prvProcessTimerOrBlockTask+0x90>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d101      	bne.n	800706c <prvProcessTimerOrBlockTask+0x50>
 8007068:	2301      	movs	r3, #1
 800706a:	e000      	b.n	800706e <prvProcessTimerOrBlockTask+0x52>
 800706c:	2300      	movs	r3, #0
 800706e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007070:	4b0f      	ldr	r3, [pc, #60]	; (80070b0 <prvProcessTimerOrBlockTask+0x94>)
 8007072:	6818      	ldr	r0, [r3, #0]
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	4619      	mov	r1, r3
 800707e:	f7fe fe9f 	bl	8005dc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007082:	f7ff f941 	bl	8006308 <xTaskResumeAll>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10a      	bne.n	80070a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800708c:	4b09      	ldr	r3, [pc, #36]	; (80070b4 <prvProcessTimerOrBlockTask+0x98>)
 800708e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	f3bf 8f6f 	isb	sy
}
 800709c:	e001      	b.n	80070a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800709e:	f7ff f933 	bl	8006308 <xTaskResumeAll>
}
 80070a2:	bf00      	nop
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20001824 	.word	0x20001824
 80070b0:	20001828 	.word	0x20001828
 80070b4:	e000ed04 	.word	0xe000ed04

080070b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80070c0:	4b0e      	ldr	r3, [pc, #56]	; (80070fc <prvGetNextExpireTime+0x44>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <prvGetNextExpireTime+0x16>
 80070ca:	2201      	movs	r2, #1
 80070cc:	e000      	b.n	80070d0 <prvGetNextExpireTime+0x18>
 80070ce:	2200      	movs	r2, #0
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d105      	bne.n	80070e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070dc:	4b07      	ldr	r3, [pc, #28]	; (80070fc <prvGetNextExpireTime+0x44>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	e001      	b.n	80070ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80070ec:	68fb      	ldr	r3, [r7, #12]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	20001820 	.word	0x20001820

08007100 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007108:	f7ff f99a 	bl	8006440 <xTaskGetTickCount>
 800710c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800710e:	4b0b      	ldr	r3, [pc, #44]	; (800713c <prvSampleTimeNow+0x3c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	429a      	cmp	r2, r3
 8007116:	d205      	bcs.n	8007124 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007118:	f000 f936 	bl	8007388 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	e002      	b.n	800712a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800712a:	4a04      	ldr	r2, [pc, #16]	; (800713c <prvSampleTimeNow+0x3c>)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007130:	68fb      	ldr	r3, [r7, #12]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	20001830 	.word	0x20001830

08007140 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
 800714c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800714e:	2300      	movs	r3, #0
 8007150:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	429a      	cmp	r2, r3
 8007164:	d812      	bhi.n	800718c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	1ad2      	subs	r2, r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	429a      	cmp	r2, r3
 8007172:	d302      	bcc.n	800717a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007174:	2301      	movs	r3, #1
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	e01b      	b.n	80071b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800717a:	4b10      	ldr	r3, [pc, #64]	; (80071bc <prvInsertTimerInActiveList+0x7c>)
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3304      	adds	r3, #4
 8007182:	4619      	mov	r1, r3
 8007184:	4610      	mov	r0, r2
 8007186:	f7fe f900 	bl	800538a <vListInsert>
 800718a:	e012      	b.n	80071b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d206      	bcs.n	80071a2 <prvInsertTimerInActiveList+0x62>
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	429a      	cmp	r2, r3
 800719a:	d302      	bcc.n	80071a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800719c:	2301      	movs	r3, #1
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	e007      	b.n	80071b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071a2:	4b07      	ldr	r3, [pc, #28]	; (80071c0 <prvInsertTimerInActiveList+0x80>)
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3304      	adds	r3, #4
 80071aa:	4619      	mov	r1, r3
 80071ac:	4610      	mov	r0, r2
 80071ae:	f7fe f8ec 	bl	800538a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80071b2:	697b      	ldr	r3, [r7, #20]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	20001824 	.word	0x20001824
 80071c0:	20001820 	.word	0x20001820

080071c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b08e      	sub	sp, #56	; 0x38
 80071c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071ca:	e0ca      	b.n	8007362 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	da18      	bge.n	8007204 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80071d2:	1d3b      	adds	r3, r7, #4
 80071d4:	3304      	adds	r3, #4
 80071d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80071d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10a      	bne.n	80071f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	61fb      	str	r3, [r7, #28]
}
 80071f0:	bf00      	nop
 80071f2:	e7fe      	b.n	80071f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80071f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071fa:	6850      	ldr	r0, [r2, #4]
 80071fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071fe:	6892      	ldr	r2, [r2, #8]
 8007200:	4611      	mov	r1, r2
 8007202:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	f2c0 80ab 	blt.w	8007362 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d004      	beq.n	8007222 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	3304      	adds	r3, #4
 800721c:	4618      	mov	r0, r3
 800721e:	f7fe f8ed 	bl	80053fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007222:	463b      	mov	r3, r7
 8007224:	4618      	mov	r0, r3
 8007226:	f7ff ff6b 	bl	8007100 <prvSampleTimeNow>
 800722a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b09      	cmp	r3, #9
 8007230:	f200 8096 	bhi.w	8007360 <prvProcessReceivedCommands+0x19c>
 8007234:	a201      	add	r2, pc, #4	; (adr r2, 800723c <prvProcessReceivedCommands+0x78>)
 8007236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723a:	bf00      	nop
 800723c:	08007265 	.word	0x08007265
 8007240:	08007265 	.word	0x08007265
 8007244:	08007265 	.word	0x08007265
 8007248:	080072d9 	.word	0x080072d9
 800724c:	080072ed 	.word	0x080072ed
 8007250:	08007337 	.word	0x08007337
 8007254:	08007265 	.word	0x08007265
 8007258:	08007265 	.word	0x08007265
 800725c:	080072d9 	.word	0x080072d9
 8007260:	080072ed 	.word	0x080072ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800726a:	f043 0301 	orr.w	r3, r3, #1
 800726e:	b2da      	uxtb	r2, r3
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	18d1      	adds	r1, r2, r3
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007284:	f7ff ff5c 	bl	8007140 <prvInsertTimerInActiveList>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d069      	beq.n	8007362 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800728e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007294:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800729c:	f003 0304 	and.w	r3, r3, #4
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d05e      	beq.n	8007362 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	441a      	add	r2, r3
 80072ac:	2300      	movs	r3, #0
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	2300      	movs	r3, #0
 80072b2:	2100      	movs	r1, #0
 80072b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072b6:	f7ff fe05 	bl	8006ec4 <xTimerGenericCommand>
 80072ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d14f      	bne.n	8007362 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80072c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c6:	f383 8811 	msr	BASEPRI, r3
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	61bb      	str	r3, [r7, #24]
}
 80072d4:	bf00      	nop
 80072d6:	e7fe      	b.n	80072d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072de:	f023 0301 	bic.w	r3, r3, #1
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80072ea:	e03a      	b.n	8007362 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072f2:	f043 0301 	orr.w	r3, r3, #1
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007302:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10a      	bne.n	8007322 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800730c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	617b      	str	r3, [r7, #20]
}
 800731e:	bf00      	nop
 8007320:	e7fe      	b.n	8007320 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007324:	699a      	ldr	r2, [r3, #24]
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	18d1      	adds	r1, r2, r3
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800732e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007330:	f7ff ff06 	bl	8007140 <prvInsertTimerInActiveList>
					break;
 8007334:	e015      	b.n	8007362 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007338:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d103      	bne.n	800734c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007346:	f000 fbd5 	bl	8007af4 <vPortFree>
 800734a:	e00a      	b.n	8007362 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800734c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007352:	f023 0301 	bic.w	r3, r3, #1
 8007356:	b2da      	uxtb	r2, r3
 8007358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800735e:	e000      	b.n	8007362 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007360:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007362:	4b08      	ldr	r3, [pc, #32]	; (8007384 <prvProcessReceivedCommands+0x1c0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	1d39      	adds	r1, r7, #4
 8007368:	2200      	movs	r2, #0
 800736a:	4618      	mov	r0, r3
 800736c:	f7fe fb0e 	bl	800598c <xQueueReceive>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	f47f af2a 	bne.w	80071cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007378:	bf00      	nop
 800737a:	bf00      	nop
 800737c:	3730      	adds	r7, #48	; 0x30
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	20001828 	.word	0x20001828

08007388 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b088      	sub	sp, #32
 800738c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800738e:	e048      	b.n	8007422 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007390:	4b2d      	ldr	r3, [pc, #180]	; (8007448 <prvSwitchTimerLists+0xc0>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800739a:	4b2b      	ldr	r3, [pc, #172]	; (8007448 <prvSwitchTimerLists+0xc0>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	3304      	adds	r3, #4
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7fe f827 	bl	80053fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073bc:	f003 0304 	and.w	r3, r3, #4
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d02e      	beq.n	8007422 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	4413      	add	r3, r2
 80073cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d90e      	bls.n	80073f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073e2:	4b19      	ldr	r3, [pc, #100]	; (8007448 <prvSwitchTimerLists+0xc0>)
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3304      	adds	r3, #4
 80073ea:	4619      	mov	r1, r3
 80073ec:	4610      	mov	r0, r2
 80073ee:	f7fd ffcc 	bl	800538a <vListInsert>
 80073f2:	e016      	b.n	8007422 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073f4:	2300      	movs	r3, #0
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	2300      	movs	r3, #0
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	2100      	movs	r1, #0
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f7ff fd60 	bl	8006ec4 <xTimerGenericCommand>
 8007404:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10a      	bne.n	8007422 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	603b      	str	r3, [r7, #0]
}
 800741e:	bf00      	nop
 8007420:	e7fe      	b.n	8007420 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007422:	4b09      	ldr	r3, [pc, #36]	; (8007448 <prvSwitchTimerLists+0xc0>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1b1      	bne.n	8007390 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800742c:	4b06      	ldr	r3, [pc, #24]	; (8007448 <prvSwitchTimerLists+0xc0>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007432:	4b06      	ldr	r3, [pc, #24]	; (800744c <prvSwitchTimerLists+0xc4>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a04      	ldr	r2, [pc, #16]	; (8007448 <prvSwitchTimerLists+0xc0>)
 8007438:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800743a:	4a04      	ldr	r2, [pc, #16]	; (800744c <prvSwitchTimerLists+0xc4>)
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	6013      	str	r3, [r2, #0]
}
 8007440:	bf00      	nop
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	20001820 	.word	0x20001820
 800744c:	20001824 	.word	0x20001824

08007450 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007456:	f000 f965 	bl	8007724 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800745a:	4b15      	ldr	r3, [pc, #84]	; (80074b0 <prvCheckForValidListAndQueue+0x60>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d120      	bne.n	80074a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007462:	4814      	ldr	r0, [pc, #80]	; (80074b4 <prvCheckForValidListAndQueue+0x64>)
 8007464:	f7fd ff40 	bl	80052e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007468:	4813      	ldr	r0, [pc, #76]	; (80074b8 <prvCheckForValidListAndQueue+0x68>)
 800746a:	f7fd ff3d 	bl	80052e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800746e:	4b13      	ldr	r3, [pc, #76]	; (80074bc <prvCheckForValidListAndQueue+0x6c>)
 8007470:	4a10      	ldr	r2, [pc, #64]	; (80074b4 <prvCheckForValidListAndQueue+0x64>)
 8007472:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007474:	4b12      	ldr	r3, [pc, #72]	; (80074c0 <prvCheckForValidListAndQueue+0x70>)
 8007476:	4a10      	ldr	r2, [pc, #64]	; (80074b8 <prvCheckForValidListAndQueue+0x68>)
 8007478:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800747a:	2300      	movs	r3, #0
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	4b11      	ldr	r3, [pc, #68]	; (80074c4 <prvCheckForValidListAndQueue+0x74>)
 8007480:	4a11      	ldr	r2, [pc, #68]	; (80074c8 <prvCheckForValidListAndQueue+0x78>)
 8007482:	2110      	movs	r1, #16
 8007484:	2014      	movs	r0, #20
 8007486:	f7fe f84b 	bl	8005520 <xQueueGenericCreateStatic>
 800748a:	4603      	mov	r3, r0
 800748c:	4a08      	ldr	r2, [pc, #32]	; (80074b0 <prvCheckForValidListAndQueue+0x60>)
 800748e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007490:	4b07      	ldr	r3, [pc, #28]	; (80074b0 <prvCheckForValidListAndQueue+0x60>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d005      	beq.n	80074a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007498:	4b05      	ldr	r3, [pc, #20]	; (80074b0 <prvCheckForValidListAndQueue+0x60>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	490b      	ldr	r1, [pc, #44]	; (80074cc <prvCheckForValidListAndQueue+0x7c>)
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe fc64 	bl	8005d6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074a4:	f000 f96e 	bl	8007784 <vPortExitCritical>
}
 80074a8:	bf00      	nop
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	20001828 	.word	0x20001828
 80074b4:	200017f8 	.word	0x200017f8
 80074b8:	2000180c 	.word	0x2000180c
 80074bc:	20001820 	.word	0x20001820
 80074c0:	20001824 	.word	0x20001824
 80074c4:	20001974 	.word	0x20001974
 80074c8:	20001834 	.word	0x20001834
 80074cc:	0800b20c 	.word	0x0800b20c

080074d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3b04      	subs	r3, #4
 80074e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3b04      	subs	r3, #4
 80074ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f023 0201 	bic.w	r2, r3, #1
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3b04      	subs	r3, #4
 80074fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007500:	4a0c      	ldr	r2, [pc, #48]	; (8007534 <pxPortInitialiseStack+0x64>)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	3b14      	subs	r3, #20
 800750a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3b04      	subs	r3, #4
 8007516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f06f 0202 	mvn.w	r2, #2
 800751e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	3b20      	subs	r3, #32
 8007524:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007526:	68fb      	ldr	r3, [r7, #12]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	08007539 	.word	0x08007539

08007538 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800753e:	2300      	movs	r3, #0
 8007540:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007542:	4b12      	ldr	r3, [pc, #72]	; (800758c <prvTaskExitError+0x54>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800754a:	d00a      	beq.n	8007562 <prvTaskExitError+0x2a>
	__asm volatile
 800754c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	60fb      	str	r3, [r7, #12]
}
 800755e:	bf00      	nop
 8007560:	e7fe      	b.n	8007560 <prvTaskExitError+0x28>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	60bb      	str	r3, [r7, #8]
}
 8007574:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007576:	bf00      	nop
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d0fc      	beq.n	8007578 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800757e:	bf00      	nop
 8007580:	bf00      	nop
 8007582:	3714      	adds	r7, #20
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	200000c4 	.word	0x200000c4

08007590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007590:	4b07      	ldr	r3, [pc, #28]	; (80075b0 <pxCurrentTCBConst2>)
 8007592:	6819      	ldr	r1, [r3, #0]
 8007594:	6808      	ldr	r0, [r1, #0]
 8007596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759a:	f380 8809 	msr	PSP, r0
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f04f 0000 	mov.w	r0, #0
 80075a6:	f380 8811 	msr	BASEPRI, r0
 80075aa:	4770      	bx	lr
 80075ac:	f3af 8000 	nop.w

080075b0 <pxCurrentTCBConst2>:
 80075b0:	200015bc 	.word	0x200015bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80075b4:	bf00      	nop
 80075b6:	bf00      	nop

080075b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80075b8:	4808      	ldr	r0, [pc, #32]	; (80075dc <prvPortStartFirstTask+0x24>)
 80075ba:	6800      	ldr	r0, [r0, #0]
 80075bc:	6800      	ldr	r0, [r0, #0]
 80075be:	f380 8808 	msr	MSP, r0
 80075c2:	f04f 0000 	mov.w	r0, #0
 80075c6:	f380 8814 	msr	CONTROL, r0
 80075ca:	b662      	cpsie	i
 80075cc:	b661      	cpsie	f
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	df00      	svc	0
 80075d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075da:	bf00      	nop
 80075dc:	e000ed08 	.word	0xe000ed08

080075e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075e6:	4b46      	ldr	r3, [pc, #280]	; (8007700 <xPortStartScheduler+0x120>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a46      	ldr	r2, [pc, #280]	; (8007704 <xPortStartScheduler+0x124>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d10a      	bne.n	8007606 <xPortStartScheduler+0x26>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	613b      	str	r3, [r7, #16]
}
 8007602:	bf00      	nop
 8007604:	e7fe      	b.n	8007604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007606:	4b3e      	ldr	r3, [pc, #248]	; (8007700 <xPortStartScheduler+0x120>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a3f      	ldr	r2, [pc, #252]	; (8007708 <xPortStartScheduler+0x128>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d10a      	bne.n	8007626 <xPortStartScheduler+0x46>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	60fb      	str	r3, [r7, #12]
}
 8007622:	bf00      	nop
 8007624:	e7fe      	b.n	8007624 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007626:	4b39      	ldr	r3, [pc, #228]	; (800770c <xPortStartScheduler+0x12c>)
 8007628:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	b2db      	uxtb	r3, r3
 8007630:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	22ff      	movs	r2, #255	; 0xff
 8007636:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	b2db      	uxtb	r3, r3
 800763e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007640:	78fb      	ldrb	r3, [r7, #3]
 8007642:	b2db      	uxtb	r3, r3
 8007644:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007648:	b2da      	uxtb	r2, r3
 800764a:	4b31      	ldr	r3, [pc, #196]	; (8007710 <xPortStartScheduler+0x130>)
 800764c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800764e:	4b31      	ldr	r3, [pc, #196]	; (8007714 <xPortStartScheduler+0x134>)
 8007650:	2207      	movs	r2, #7
 8007652:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007654:	e009      	b.n	800766a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007656:	4b2f      	ldr	r3, [pc, #188]	; (8007714 <xPortStartScheduler+0x134>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3b01      	subs	r3, #1
 800765c:	4a2d      	ldr	r2, [pc, #180]	; (8007714 <xPortStartScheduler+0x134>)
 800765e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007660:	78fb      	ldrb	r3, [r7, #3]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	005b      	lsls	r3, r3, #1
 8007666:	b2db      	uxtb	r3, r3
 8007668:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800766a:	78fb      	ldrb	r3, [r7, #3]
 800766c:	b2db      	uxtb	r3, r3
 800766e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007672:	2b80      	cmp	r3, #128	; 0x80
 8007674:	d0ef      	beq.n	8007656 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007676:	4b27      	ldr	r3, [pc, #156]	; (8007714 <xPortStartScheduler+0x134>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f1c3 0307 	rsb	r3, r3, #7
 800767e:	2b04      	cmp	r3, #4
 8007680:	d00a      	beq.n	8007698 <xPortStartScheduler+0xb8>
	__asm volatile
 8007682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007686:	f383 8811 	msr	BASEPRI, r3
 800768a:	f3bf 8f6f 	isb	sy
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	60bb      	str	r3, [r7, #8]
}
 8007694:	bf00      	nop
 8007696:	e7fe      	b.n	8007696 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007698:	4b1e      	ldr	r3, [pc, #120]	; (8007714 <xPortStartScheduler+0x134>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	021b      	lsls	r3, r3, #8
 800769e:	4a1d      	ldr	r2, [pc, #116]	; (8007714 <xPortStartScheduler+0x134>)
 80076a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076a2:	4b1c      	ldr	r3, [pc, #112]	; (8007714 <xPortStartScheduler+0x134>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076aa:	4a1a      	ldr	r2, [pc, #104]	; (8007714 <xPortStartScheduler+0x134>)
 80076ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076b6:	4b18      	ldr	r3, [pc, #96]	; (8007718 <xPortStartScheduler+0x138>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a17      	ldr	r2, [pc, #92]	; (8007718 <xPortStartScheduler+0x138>)
 80076bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076c2:	4b15      	ldr	r3, [pc, #84]	; (8007718 <xPortStartScheduler+0x138>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a14      	ldr	r2, [pc, #80]	; (8007718 <xPortStartScheduler+0x138>)
 80076c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80076cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076ce:	f000 f8dd 	bl	800788c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076d2:	4b12      	ldr	r3, [pc, #72]	; (800771c <xPortStartScheduler+0x13c>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80076d8:	f000 f8f6 	bl	80078c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80076dc:	4b10      	ldr	r3, [pc, #64]	; (8007720 <xPortStartScheduler+0x140>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a0f      	ldr	r2, [pc, #60]	; (8007720 <xPortStartScheduler+0x140>)
 80076e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80076e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076e8:	f7ff ff66 	bl	80075b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076ec:	f7fe ff70 	bl	80065d0 <vTaskSwitchContext>
	prvTaskExitError();
 80076f0:	f7ff ff22 	bl	8007538 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	e000ed00 	.word	0xe000ed00
 8007704:	410fc271 	.word	0x410fc271
 8007708:	410fc270 	.word	0x410fc270
 800770c:	e000e400 	.word	0xe000e400
 8007710:	200019c4 	.word	0x200019c4
 8007714:	200019c8 	.word	0x200019c8
 8007718:	e000ed20 	.word	0xe000ed20
 800771c:	200000c4 	.word	0x200000c4
 8007720:	e000ef34 	.word	0xe000ef34

08007724 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	607b      	str	r3, [r7, #4]
}
 800773c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800773e:	4b0f      	ldr	r3, [pc, #60]	; (800777c <vPortEnterCritical+0x58>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3301      	adds	r3, #1
 8007744:	4a0d      	ldr	r2, [pc, #52]	; (800777c <vPortEnterCritical+0x58>)
 8007746:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007748:	4b0c      	ldr	r3, [pc, #48]	; (800777c <vPortEnterCritical+0x58>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d10f      	bne.n	8007770 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007750:	4b0b      	ldr	r3, [pc, #44]	; (8007780 <vPortEnterCritical+0x5c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00a      	beq.n	8007770 <vPortEnterCritical+0x4c>
	__asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	603b      	str	r3, [r7, #0]
}
 800776c:	bf00      	nop
 800776e:	e7fe      	b.n	800776e <vPortEnterCritical+0x4a>
	}
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	200000c4 	.word	0x200000c4
 8007780:	e000ed04 	.word	0xe000ed04

08007784 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800778a:	4b12      	ldr	r3, [pc, #72]	; (80077d4 <vPortExitCritical+0x50>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10a      	bne.n	80077a8 <vPortExitCritical+0x24>
	__asm volatile
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	607b      	str	r3, [r7, #4]
}
 80077a4:	bf00      	nop
 80077a6:	e7fe      	b.n	80077a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80077a8:	4b0a      	ldr	r3, [pc, #40]	; (80077d4 <vPortExitCritical+0x50>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	4a09      	ldr	r2, [pc, #36]	; (80077d4 <vPortExitCritical+0x50>)
 80077b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077b2:	4b08      	ldr	r3, [pc, #32]	; (80077d4 <vPortExitCritical+0x50>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d105      	bne.n	80077c6 <vPortExitCritical+0x42>
 80077ba:	2300      	movs	r3, #0
 80077bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	f383 8811 	msr	BASEPRI, r3
}
 80077c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80077c6:	bf00      	nop
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	200000c4 	.word	0x200000c4
	...

080077e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077e0:	f3ef 8009 	mrs	r0, PSP
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	4b15      	ldr	r3, [pc, #84]	; (8007840 <pxCurrentTCBConst>)
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	f01e 0f10 	tst.w	lr, #16
 80077f0:	bf08      	it	eq
 80077f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fa:	6010      	str	r0, [r2, #0]
 80077fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007800:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007804:	f380 8811 	msr	BASEPRI, r0
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f7fe fede 	bl	80065d0 <vTaskSwitchContext>
 8007814:	f04f 0000 	mov.w	r0, #0
 8007818:	f380 8811 	msr	BASEPRI, r0
 800781c:	bc09      	pop	{r0, r3}
 800781e:	6819      	ldr	r1, [r3, #0]
 8007820:	6808      	ldr	r0, [r1, #0]
 8007822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007826:	f01e 0f10 	tst.w	lr, #16
 800782a:	bf08      	it	eq
 800782c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007830:	f380 8809 	msr	PSP, r0
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	f3af 8000 	nop.w

08007840 <pxCurrentTCBConst>:
 8007840:	200015bc 	.word	0x200015bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop

08007848 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	607b      	str	r3, [r7, #4]
}
 8007860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007862:	f7fe fdfd 	bl	8006460 <xTaskIncrementTick>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800786c:	4b06      	ldr	r3, [pc, #24]	; (8007888 <xPortSysTickHandler+0x40>)
 800786e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	2300      	movs	r3, #0
 8007876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	f383 8811 	msr	BASEPRI, r3
}
 800787e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007880:	bf00      	nop
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	e000ed04 	.word	0xe000ed04

0800788c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800788c:	b480      	push	{r7}
 800788e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007890:	4b09      	ldr	r3, [pc, #36]	; (80078b8 <vPortSetupTimerInterrupt+0x2c>)
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007896:	4b09      	ldr	r3, [pc, #36]	; (80078bc <vPortSetupTimerInterrupt+0x30>)
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800789c:	4b08      	ldr	r3, [pc, #32]	; (80078c0 <vPortSetupTimerInterrupt+0x34>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a08      	ldr	r2, [pc, #32]	; (80078c4 <vPortSetupTimerInterrupt+0x38>)
 80078a2:	3b01      	subs	r3, #1
 80078a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80078a6:	4b04      	ldr	r3, [pc, #16]	; (80078b8 <vPortSetupTimerInterrupt+0x2c>)
 80078a8:	2207      	movs	r2, #7
 80078aa:	601a      	str	r2, [r3, #0]
}
 80078ac:	bf00      	nop
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	e000e010 	.word	0xe000e010
 80078bc:	e000e018 	.word	0xe000e018
 80078c0:	200000b8 	.word	0x200000b8
 80078c4:	e000e014 	.word	0xe000e014

080078c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80078c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80078d8 <vPortEnableVFP+0x10>
 80078cc:	6801      	ldr	r1, [r0, #0]
 80078ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80078d2:	6001      	str	r1, [r0, #0]
 80078d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80078d6:	bf00      	nop
 80078d8:	e000ed88 	.word	0xe000ed88

080078dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80078e2:	f3ef 8305 	mrs	r3, IPSR
 80078e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b0f      	cmp	r3, #15
 80078ec:	d914      	bls.n	8007918 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80078ee:	4a17      	ldr	r2, [pc, #92]	; (800794c <vPortValidateInterruptPriority+0x70>)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4413      	add	r3, r2
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80078f8:	4b15      	ldr	r3, [pc, #84]	; (8007950 <vPortValidateInterruptPriority+0x74>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	7afa      	ldrb	r2, [r7, #11]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d20a      	bcs.n	8007918 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	607b      	str	r3, [r7, #4]
}
 8007914:	bf00      	nop
 8007916:	e7fe      	b.n	8007916 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007918:	4b0e      	ldr	r3, [pc, #56]	; (8007954 <vPortValidateInterruptPriority+0x78>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007920:	4b0d      	ldr	r3, [pc, #52]	; (8007958 <vPortValidateInterruptPriority+0x7c>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	429a      	cmp	r2, r3
 8007926:	d90a      	bls.n	800793e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	603b      	str	r3, [r7, #0]
}
 800793a:	bf00      	nop
 800793c:	e7fe      	b.n	800793c <vPortValidateInterruptPriority+0x60>
	}
 800793e:	bf00      	nop
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	e000e3f0 	.word	0xe000e3f0
 8007950:	200019c4 	.word	0x200019c4
 8007954:	e000ed0c 	.word	0xe000ed0c
 8007958:	200019c8 	.word	0x200019c8

0800795c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b08a      	sub	sp, #40	; 0x28
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007964:	2300      	movs	r3, #0
 8007966:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007968:	f7fe fcc0 	bl	80062ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800796c:	4b5b      	ldr	r3, [pc, #364]	; (8007adc <pvPortMalloc+0x180>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007974:	f000 f920 	bl	8007bb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007978:	4b59      	ldr	r3, [pc, #356]	; (8007ae0 <pvPortMalloc+0x184>)
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4013      	ands	r3, r2
 8007980:	2b00      	cmp	r3, #0
 8007982:	f040 8093 	bne.w	8007aac <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d01d      	beq.n	80079c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800798c:	2208      	movs	r2, #8
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4413      	add	r3, r2
 8007992:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f003 0307 	and.w	r3, r3, #7
 800799a:	2b00      	cmp	r3, #0
 800799c:	d014      	beq.n	80079c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f023 0307 	bic.w	r3, r3, #7
 80079a4:	3308      	adds	r3, #8
 80079a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00a      	beq.n	80079c8 <pvPortMalloc+0x6c>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	617b      	str	r3, [r7, #20]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d06e      	beq.n	8007aac <pvPortMalloc+0x150>
 80079ce:	4b45      	ldr	r3, [pc, #276]	; (8007ae4 <pvPortMalloc+0x188>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d869      	bhi.n	8007aac <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80079d8:	4b43      	ldr	r3, [pc, #268]	; (8007ae8 <pvPortMalloc+0x18c>)
 80079da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80079dc:	4b42      	ldr	r3, [pc, #264]	; (8007ae8 <pvPortMalloc+0x18c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079e2:	e004      	b.n	80079ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d903      	bls.n	8007a00 <pvPortMalloc+0xa4>
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1f1      	bne.n	80079e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a00:	4b36      	ldr	r3, [pc, #216]	; (8007adc <pvPortMalloc+0x180>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d050      	beq.n	8007aac <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2208      	movs	r2, #8
 8007a10:	4413      	add	r3, r2
 8007a12:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	1ad2      	subs	r2, r2, r3
 8007a24:	2308      	movs	r3, #8
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d91f      	bls.n	8007a6c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4413      	add	r3, r2
 8007a32:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	f003 0307 	and.w	r3, r3, #7
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00a      	beq.n	8007a54 <pvPortMalloc+0xf8>
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	613b      	str	r3, [r7, #16]
}
 8007a50:	bf00      	nop
 8007a52:	e7fe      	b.n	8007a52 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	1ad2      	subs	r2, r2, r3
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a66:	69b8      	ldr	r0, [r7, #24]
 8007a68:	f000 f908 	bl	8007c7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a6c:	4b1d      	ldr	r3, [pc, #116]	; (8007ae4 <pvPortMalloc+0x188>)
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	4a1b      	ldr	r2, [pc, #108]	; (8007ae4 <pvPortMalloc+0x188>)
 8007a78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a7a:	4b1a      	ldr	r3, [pc, #104]	; (8007ae4 <pvPortMalloc+0x188>)
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	4b1b      	ldr	r3, [pc, #108]	; (8007aec <pvPortMalloc+0x190>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d203      	bcs.n	8007a8e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a86:	4b17      	ldr	r3, [pc, #92]	; (8007ae4 <pvPortMalloc+0x188>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a18      	ldr	r2, [pc, #96]	; (8007aec <pvPortMalloc+0x190>)
 8007a8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	4b13      	ldr	r3, [pc, #76]	; (8007ae0 <pvPortMalloc+0x184>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	431a      	orrs	r2, r3
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007aa2:	4b13      	ldr	r3, [pc, #76]	; (8007af0 <pvPortMalloc+0x194>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	4a11      	ldr	r2, [pc, #68]	; (8007af0 <pvPortMalloc+0x194>)
 8007aaa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007aac:	f7fe fc2c 	bl	8006308 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <pvPortMalloc+0x174>
	__asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	60fb      	str	r3, [r7, #12]
}
 8007acc:	bf00      	nop
 8007ace:	e7fe      	b.n	8007ace <pvPortMalloc+0x172>
	return pvReturn;
 8007ad0:	69fb      	ldr	r3, [r7, #28]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3728      	adds	r7, #40	; 0x28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	200055d4 	.word	0x200055d4
 8007ae0:	200055e8 	.word	0x200055e8
 8007ae4:	200055d8 	.word	0x200055d8
 8007ae8:	200055cc 	.word	0x200055cc
 8007aec:	200055dc 	.word	0x200055dc
 8007af0:	200055e0 	.word	0x200055e0

08007af4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d04d      	beq.n	8007ba2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b06:	2308      	movs	r3, #8
 8007b08:	425b      	negs	r3, r3
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	4b24      	ldr	r3, [pc, #144]	; (8007bac <vPortFree+0xb8>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10a      	bne.n	8007b38 <vPortFree+0x44>
	__asm volatile
 8007b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	60fb      	str	r3, [r7, #12]
}
 8007b34:	bf00      	nop
 8007b36:	e7fe      	b.n	8007b36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00a      	beq.n	8007b56 <vPortFree+0x62>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	60bb      	str	r3, [r7, #8]
}
 8007b52:	bf00      	nop
 8007b54:	e7fe      	b.n	8007b54 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	685a      	ldr	r2, [r3, #4]
 8007b5a:	4b14      	ldr	r3, [pc, #80]	; (8007bac <vPortFree+0xb8>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4013      	ands	r3, r2
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d01e      	beq.n	8007ba2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d11a      	bne.n	8007ba2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	4b0e      	ldr	r3, [pc, #56]	; (8007bac <vPortFree+0xb8>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	43db      	mvns	r3, r3
 8007b76:	401a      	ands	r2, r3
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b7c:	f7fe fbb6 	bl	80062ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	4b0a      	ldr	r3, [pc, #40]	; (8007bb0 <vPortFree+0xbc>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4413      	add	r3, r2
 8007b8a:	4a09      	ldr	r2, [pc, #36]	; (8007bb0 <vPortFree+0xbc>)
 8007b8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b8e:	6938      	ldr	r0, [r7, #16]
 8007b90:	f000 f874 	bl	8007c7c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b94:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <vPortFree+0xc0>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	4a06      	ldr	r2, [pc, #24]	; (8007bb4 <vPortFree+0xc0>)
 8007b9c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007b9e:	f7fe fbb3 	bl	8006308 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ba2:	bf00      	nop
 8007ba4:	3718      	adds	r7, #24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	200055e8 	.word	0x200055e8
 8007bb0:	200055d8 	.word	0x200055d8
 8007bb4:	200055e4 	.word	0x200055e4

08007bb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007bbe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007bc2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007bc4:	4b27      	ldr	r3, [pc, #156]	; (8007c64 <prvHeapInit+0xac>)
 8007bc6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f003 0307 	and.w	r3, r3, #7
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00c      	beq.n	8007bec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	3307      	adds	r3, #7
 8007bd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f023 0307 	bic.w	r3, r3, #7
 8007bde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	4a1f      	ldr	r2, [pc, #124]	; (8007c64 <prvHeapInit+0xac>)
 8007be8:	4413      	add	r3, r2
 8007bea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007bf0:	4a1d      	ldr	r2, [pc, #116]	; (8007c68 <prvHeapInit+0xb0>)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007bf6:	4b1c      	ldr	r3, [pc, #112]	; (8007c68 <prvHeapInit+0xb0>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	4413      	add	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c04:	2208      	movs	r2, #8
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	1a9b      	subs	r3, r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f023 0307 	bic.w	r3, r3, #7
 8007c12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4a15      	ldr	r2, [pc, #84]	; (8007c6c <prvHeapInit+0xb4>)
 8007c18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c1a:	4b14      	ldr	r3, [pc, #80]	; (8007c6c <prvHeapInit+0xb4>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c22:	4b12      	ldr	r3, [pc, #72]	; (8007c6c <prvHeapInit+0xb4>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2200      	movs	r2, #0
 8007c28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	1ad2      	subs	r2, r2, r3
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c38:	4b0c      	ldr	r3, [pc, #48]	; (8007c6c <prvHeapInit+0xb4>)
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	4a0a      	ldr	r2, [pc, #40]	; (8007c70 <prvHeapInit+0xb8>)
 8007c46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	4a09      	ldr	r2, [pc, #36]	; (8007c74 <prvHeapInit+0xbc>)
 8007c4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c50:	4b09      	ldr	r3, [pc, #36]	; (8007c78 <prvHeapInit+0xc0>)
 8007c52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c56:	601a      	str	r2, [r3, #0]
}
 8007c58:	bf00      	nop
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	200019cc 	.word	0x200019cc
 8007c68:	200055cc 	.word	0x200055cc
 8007c6c:	200055d4 	.word	0x200055d4
 8007c70:	200055dc 	.word	0x200055dc
 8007c74:	200055d8 	.word	0x200055d8
 8007c78:	200055e8 	.word	0x200055e8

08007c7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c84:	4b28      	ldr	r3, [pc, #160]	; (8007d28 <prvInsertBlockIntoFreeList+0xac>)
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	e002      	b.n	8007c90 <prvInsertBlockIntoFreeList+0x14>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d8f7      	bhi.n	8007c8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d108      	bne.n	8007cbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	441a      	add	r2, r3
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	441a      	add	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d118      	bne.n	8007d04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	4b15      	ldr	r3, [pc, #84]	; (8007d2c <prvInsertBlockIntoFreeList+0xb0>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d00d      	beq.n	8007cfa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	441a      	add	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	601a      	str	r2, [r3, #0]
 8007cf8:	e008      	b.n	8007d0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007cfa:	4b0c      	ldr	r3, [pc, #48]	; (8007d2c <prvInsertBlockIntoFreeList+0xb0>)
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	e003      	b.n	8007d0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d002      	beq.n	8007d1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d1a:	bf00      	nop
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	200055cc 	.word	0x200055cc
 8007d2c:	200055d4 	.word	0x200055d4

08007d30 <__cvt>:
 8007d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d34:	ec55 4b10 	vmov	r4, r5, d0
 8007d38:	2d00      	cmp	r5, #0
 8007d3a:	460e      	mov	r6, r1
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	462b      	mov	r3, r5
 8007d40:	bfbb      	ittet	lt
 8007d42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d46:	461d      	movlt	r5, r3
 8007d48:	2300      	movge	r3, #0
 8007d4a:	232d      	movlt	r3, #45	; 0x2d
 8007d4c:	700b      	strb	r3, [r1, #0]
 8007d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d54:	4691      	mov	r9, r2
 8007d56:	f023 0820 	bic.w	r8, r3, #32
 8007d5a:	bfbc      	itt	lt
 8007d5c:	4622      	movlt	r2, r4
 8007d5e:	4614      	movlt	r4, r2
 8007d60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d64:	d005      	beq.n	8007d72 <__cvt+0x42>
 8007d66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d6a:	d100      	bne.n	8007d6e <__cvt+0x3e>
 8007d6c:	3601      	adds	r6, #1
 8007d6e:	2102      	movs	r1, #2
 8007d70:	e000      	b.n	8007d74 <__cvt+0x44>
 8007d72:	2103      	movs	r1, #3
 8007d74:	ab03      	add	r3, sp, #12
 8007d76:	9301      	str	r3, [sp, #4]
 8007d78:	ab02      	add	r3, sp, #8
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	ec45 4b10 	vmov	d0, r4, r5
 8007d80:	4653      	mov	r3, sl
 8007d82:	4632      	mov	r2, r6
 8007d84:	f001 f88c 	bl	8008ea0 <_dtoa_r>
 8007d88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007d8c:	4607      	mov	r7, r0
 8007d8e:	d102      	bne.n	8007d96 <__cvt+0x66>
 8007d90:	f019 0f01 	tst.w	r9, #1
 8007d94:	d022      	beq.n	8007ddc <__cvt+0xac>
 8007d96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d9a:	eb07 0906 	add.w	r9, r7, r6
 8007d9e:	d110      	bne.n	8007dc2 <__cvt+0x92>
 8007da0:	783b      	ldrb	r3, [r7, #0]
 8007da2:	2b30      	cmp	r3, #48	; 0x30
 8007da4:	d10a      	bne.n	8007dbc <__cvt+0x8c>
 8007da6:	2200      	movs	r2, #0
 8007da8:	2300      	movs	r3, #0
 8007daa:	4620      	mov	r0, r4
 8007dac:	4629      	mov	r1, r5
 8007dae:	f7f8 fe9b 	bl	8000ae8 <__aeabi_dcmpeq>
 8007db2:	b918      	cbnz	r0, 8007dbc <__cvt+0x8c>
 8007db4:	f1c6 0601 	rsb	r6, r6, #1
 8007db8:	f8ca 6000 	str.w	r6, [sl]
 8007dbc:	f8da 3000 	ldr.w	r3, [sl]
 8007dc0:	4499      	add	r9, r3
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	4629      	mov	r1, r5
 8007dca:	f7f8 fe8d 	bl	8000ae8 <__aeabi_dcmpeq>
 8007dce:	b108      	cbz	r0, 8007dd4 <__cvt+0xa4>
 8007dd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007dd4:	2230      	movs	r2, #48	; 0x30
 8007dd6:	9b03      	ldr	r3, [sp, #12]
 8007dd8:	454b      	cmp	r3, r9
 8007dda:	d307      	bcc.n	8007dec <__cvt+0xbc>
 8007ddc:	9b03      	ldr	r3, [sp, #12]
 8007dde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007de0:	1bdb      	subs	r3, r3, r7
 8007de2:	4638      	mov	r0, r7
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	b004      	add	sp, #16
 8007de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dec:	1c59      	adds	r1, r3, #1
 8007dee:	9103      	str	r1, [sp, #12]
 8007df0:	701a      	strb	r2, [r3, #0]
 8007df2:	e7f0      	b.n	8007dd6 <__cvt+0xa6>

08007df4 <__exponent>:
 8007df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007df6:	4603      	mov	r3, r0
 8007df8:	2900      	cmp	r1, #0
 8007dfa:	bfb8      	it	lt
 8007dfc:	4249      	neglt	r1, r1
 8007dfe:	f803 2b02 	strb.w	r2, [r3], #2
 8007e02:	bfb4      	ite	lt
 8007e04:	222d      	movlt	r2, #45	; 0x2d
 8007e06:	222b      	movge	r2, #43	; 0x2b
 8007e08:	2909      	cmp	r1, #9
 8007e0a:	7042      	strb	r2, [r0, #1]
 8007e0c:	dd2a      	ble.n	8007e64 <__exponent+0x70>
 8007e0e:	f10d 0207 	add.w	r2, sp, #7
 8007e12:	4617      	mov	r7, r2
 8007e14:	260a      	movs	r6, #10
 8007e16:	4694      	mov	ip, r2
 8007e18:	fb91 f5f6 	sdiv	r5, r1, r6
 8007e1c:	fb06 1415 	mls	r4, r6, r5, r1
 8007e20:	3430      	adds	r4, #48	; 0x30
 8007e22:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007e26:	460c      	mov	r4, r1
 8007e28:	2c63      	cmp	r4, #99	; 0x63
 8007e2a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007e2e:	4629      	mov	r1, r5
 8007e30:	dcf1      	bgt.n	8007e16 <__exponent+0x22>
 8007e32:	3130      	adds	r1, #48	; 0x30
 8007e34:	f1ac 0402 	sub.w	r4, ip, #2
 8007e38:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007e3c:	1c41      	adds	r1, r0, #1
 8007e3e:	4622      	mov	r2, r4
 8007e40:	42ba      	cmp	r2, r7
 8007e42:	d30a      	bcc.n	8007e5a <__exponent+0x66>
 8007e44:	f10d 0209 	add.w	r2, sp, #9
 8007e48:	eba2 020c 	sub.w	r2, r2, ip
 8007e4c:	42bc      	cmp	r4, r7
 8007e4e:	bf88      	it	hi
 8007e50:	2200      	movhi	r2, #0
 8007e52:	4413      	add	r3, r2
 8007e54:	1a18      	subs	r0, r3, r0
 8007e56:	b003      	add	sp, #12
 8007e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e5a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007e5e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007e62:	e7ed      	b.n	8007e40 <__exponent+0x4c>
 8007e64:	2330      	movs	r3, #48	; 0x30
 8007e66:	3130      	adds	r1, #48	; 0x30
 8007e68:	7083      	strb	r3, [r0, #2]
 8007e6a:	70c1      	strb	r1, [r0, #3]
 8007e6c:	1d03      	adds	r3, r0, #4
 8007e6e:	e7f1      	b.n	8007e54 <__exponent+0x60>

08007e70 <_printf_float>:
 8007e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	ed2d 8b02 	vpush	{d8}
 8007e78:	b08d      	sub	sp, #52	; 0x34
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007e80:	4616      	mov	r6, r2
 8007e82:	461f      	mov	r7, r3
 8007e84:	4605      	mov	r5, r0
 8007e86:	f000 fea7 	bl	8008bd8 <_localeconv_r>
 8007e8a:	f8d0 a000 	ldr.w	sl, [r0]
 8007e8e:	4650      	mov	r0, sl
 8007e90:	f7f8 f9fe 	bl	8000290 <strlen>
 8007e94:	2300      	movs	r3, #0
 8007e96:	930a      	str	r3, [sp, #40]	; 0x28
 8007e98:	6823      	ldr	r3, [r4, #0]
 8007e9a:	9305      	str	r3, [sp, #20]
 8007e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8007ea0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007ea4:	3307      	adds	r3, #7
 8007ea6:	f023 0307 	bic.w	r3, r3, #7
 8007eaa:	f103 0208 	add.w	r2, r3, #8
 8007eae:	f8c8 2000 	str.w	r2, [r8]
 8007eb2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007eb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007eba:	9307      	str	r3, [sp, #28]
 8007ebc:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ec0:	ee08 0a10 	vmov	s16, r0
 8007ec4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007ec8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ecc:	4b9e      	ldr	r3, [pc, #632]	; (8008148 <_printf_float+0x2d8>)
 8007ece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ed2:	f7f8 fe3b 	bl	8000b4c <__aeabi_dcmpun>
 8007ed6:	bb88      	cbnz	r0, 8007f3c <_printf_float+0xcc>
 8007ed8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007edc:	4b9a      	ldr	r3, [pc, #616]	; (8008148 <_printf_float+0x2d8>)
 8007ede:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ee2:	f7f8 fe15 	bl	8000b10 <__aeabi_dcmple>
 8007ee6:	bb48      	cbnz	r0, 8007f3c <_printf_float+0xcc>
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2300      	movs	r3, #0
 8007eec:	4640      	mov	r0, r8
 8007eee:	4649      	mov	r1, r9
 8007ef0:	f7f8 fe04 	bl	8000afc <__aeabi_dcmplt>
 8007ef4:	b110      	cbz	r0, 8007efc <_printf_float+0x8c>
 8007ef6:	232d      	movs	r3, #45	; 0x2d
 8007ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007efc:	4a93      	ldr	r2, [pc, #588]	; (800814c <_printf_float+0x2dc>)
 8007efe:	4b94      	ldr	r3, [pc, #592]	; (8008150 <_printf_float+0x2e0>)
 8007f00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f04:	bf94      	ite	ls
 8007f06:	4690      	movls	r8, r2
 8007f08:	4698      	movhi	r8, r3
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	6123      	str	r3, [r4, #16]
 8007f0e:	9b05      	ldr	r3, [sp, #20]
 8007f10:	f023 0304 	bic.w	r3, r3, #4
 8007f14:	6023      	str	r3, [r4, #0]
 8007f16:	f04f 0900 	mov.w	r9, #0
 8007f1a:	9700      	str	r7, [sp, #0]
 8007f1c:	4633      	mov	r3, r6
 8007f1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f20:	4621      	mov	r1, r4
 8007f22:	4628      	mov	r0, r5
 8007f24:	f000 f9da 	bl	80082dc <_printf_common>
 8007f28:	3001      	adds	r0, #1
 8007f2a:	f040 8090 	bne.w	800804e <_printf_float+0x1de>
 8007f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f32:	b00d      	add	sp, #52	; 0x34
 8007f34:	ecbd 8b02 	vpop	{d8}
 8007f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f3c:	4642      	mov	r2, r8
 8007f3e:	464b      	mov	r3, r9
 8007f40:	4640      	mov	r0, r8
 8007f42:	4649      	mov	r1, r9
 8007f44:	f7f8 fe02 	bl	8000b4c <__aeabi_dcmpun>
 8007f48:	b140      	cbz	r0, 8007f5c <_printf_float+0xec>
 8007f4a:	464b      	mov	r3, r9
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	bfbc      	itt	lt
 8007f50:	232d      	movlt	r3, #45	; 0x2d
 8007f52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f56:	4a7f      	ldr	r2, [pc, #508]	; (8008154 <_printf_float+0x2e4>)
 8007f58:	4b7f      	ldr	r3, [pc, #508]	; (8008158 <_printf_float+0x2e8>)
 8007f5a:	e7d1      	b.n	8007f00 <_printf_float+0x90>
 8007f5c:	6863      	ldr	r3, [r4, #4]
 8007f5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f62:	9206      	str	r2, [sp, #24]
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	d13f      	bne.n	8007fe8 <_printf_float+0x178>
 8007f68:	2306      	movs	r3, #6
 8007f6a:	6063      	str	r3, [r4, #4]
 8007f6c:	9b05      	ldr	r3, [sp, #20]
 8007f6e:	6861      	ldr	r1, [r4, #4]
 8007f70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f74:	2300      	movs	r3, #0
 8007f76:	9303      	str	r3, [sp, #12]
 8007f78:	ab0a      	add	r3, sp, #40	; 0x28
 8007f7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007f7e:	ab09      	add	r3, sp, #36	; 0x24
 8007f80:	ec49 8b10 	vmov	d0, r8, r9
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	6022      	str	r2, [r4, #0]
 8007f88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	f7ff fecf 	bl	8007d30 <__cvt>
 8007f92:	9b06      	ldr	r3, [sp, #24]
 8007f94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f96:	2b47      	cmp	r3, #71	; 0x47
 8007f98:	4680      	mov	r8, r0
 8007f9a:	d108      	bne.n	8007fae <_printf_float+0x13e>
 8007f9c:	1cc8      	adds	r0, r1, #3
 8007f9e:	db02      	blt.n	8007fa6 <_printf_float+0x136>
 8007fa0:	6863      	ldr	r3, [r4, #4]
 8007fa2:	4299      	cmp	r1, r3
 8007fa4:	dd41      	ble.n	800802a <_printf_float+0x1ba>
 8007fa6:	f1ab 0302 	sub.w	r3, fp, #2
 8007faa:	fa5f fb83 	uxtb.w	fp, r3
 8007fae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007fb2:	d820      	bhi.n	8007ff6 <_printf_float+0x186>
 8007fb4:	3901      	subs	r1, #1
 8007fb6:	465a      	mov	r2, fp
 8007fb8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007fbc:	9109      	str	r1, [sp, #36]	; 0x24
 8007fbe:	f7ff ff19 	bl	8007df4 <__exponent>
 8007fc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fc4:	1813      	adds	r3, r2, r0
 8007fc6:	2a01      	cmp	r2, #1
 8007fc8:	4681      	mov	r9, r0
 8007fca:	6123      	str	r3, [r4, #16]
 8007fcc:	dc02      	bgt.n	8007fd4 <_printf_float+0x164>
 8007fce:	6822      	ldr	r2, [r4, #0]
 8007fd0:	07d2      	lsls	r2, r2, #31
 8007fd2:	d501      	bpl.n	8007fd8 <_printf_float+0x168>
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	6123      	str	r3, [r4, #16]
 8007fd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d09c      	beq.n	8007f1a <_printf_float+0xaa>
 8007fe0:	232d      	movs	r3, #45	; 0x2d
 8007fe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fe6:	e798      	b.n	8007f1a <_printf_float+0xaa>
 8007fe8:	9a06      	ldr	r2, [sp, #24]
 8007fea:	2a47      	cmp	r2, #71	; 0x47
 8007fec:	d1be      	bne.n	8007f6c <_printf_float+0xfc>
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1bc      	bne.n	8007f6c <_printf_float+0xfc>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e7b9      	b.n	8007f6a <_printf_float+0xfa>
 8007ff6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007ffa:	d118      	bne.n	800802e <_printf_float+0x1be>
 8007ffc:	2900      	cmp	r1, #0
 8007ffe:	6863      	ldr	r3, [r4, #4]
 8008000:	dd0b      	ble.n	800801a <_printf_float+0x1aa>
 8008002:	6121      	str	r1, [r4, #16]
 8008004:	b913      	cbnz	r3, 800800c <_printf_float+0x19c>
 8008006:	6822      	ldr	r2, [r4, #0]
 8008008:	07d0      	lsls	r0, r2, #31
 800800a:	d502      	bpl.n	8008012 <_printf_float+0x1a2>
 800800c:	3301      	adds	r3, #1
 800800e:	440b      	add	r3, r1
 8008010:	6123      	str	r3, [r4, #16]
 8008012:	65a1      	str	r1, [r4, #88]	; 0x58
 8008014:	f04f 0900 	mov.w	r9, #0
 8008018:	e7de      	b.n	8007fd8 <_printf_float+0x168>
 800801a:	b913      	cbnz	r3, 8008022 <_printf_float+0x1b2>
 800801c:	6822      	ldr	r2, [r4, #0]
 800801e:	07d2      	lsls	r2, r2, #31
 8008020:	d501      	bpl.n	8008026 <_printf_float+0x1b6>
 8008022:	3302      	adds	r3, #2
 8008024:	e7f4      	b.n	8008010 <_printf_float+0x1a0>
 8008026:	2301      	movs	r3, #1
 8008028:	e7f2      	b.n	8008010 <_printf_float+0x1a0>
 800802a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800802e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008030:	4299      	cmp	r1, r3
 8008032:	db05      	blt.n	8008040 <_printf_float+0x1d0>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	6121      	str	r1, [r4, #16]
 8008038:	07d8      	lsls	r0, r3, #31
 800803a:	d5ea      	bpl.n	8008012 <_printf_float+0x1a2>
 800803c:	1c4b      	adds	r3, r1, #1
 800803e:	e7e7      	b.n	8008010 <_printf_float+0x1a0>
 8008040:	2900      	cmp	r1, #0
 8008042:	bfd4      	ite	le
 8008044:	f1c1 0202 	rsble	r2, r1, #2
 8008048:	2201      	movgt	r2, #1
 800804a:	4413      	add	r3, r2
 800804c:	e7e0      	b.n	8008010 <_printf_float+0x1a0>
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	055a      	lsls	r2, r3, #21
 8008052:	d407      	bmi.n	8008064 <_printf_float+0x1f4>
 8008054:	6923      	ldr	r3, [r4, #16]
 8008056:	4642      	mov	r2, r8
 8008058:	4631      	mov	r1, r6
 800805a:	4628      	mov	r0, r5
 800805c:	47b8      	blx	r7
 800805e:	3001      	adds	r0, #1
 8008060:	d12c      	bne.n	80080bc <_printf_float+0x24c>
 8008062:	e764      	b.n	8007f2e <_printf_float+0xbe>
 8008064:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008068:	f240 80e0 	bls.w	800822c <_printf_float+0x3bc>
 800806c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008070:	2200      	movs	r2, #0
 8008072:	2300      	movs	r3, #0
 8008074:	f7f8 fd38 	bl	8000ae8 <__aeabi_dcmpeq>
 8008078:	2800      	cmp	r0, #0
 800807a:	d034      	beq.n	80080e6 <_printf_float+0x276>
 800807c:	4a37      	ldr	r2, [pc, #220]	; (800815c <_printf_float+0x2ec>)
 800807e:	2301      	movs	r3, #1
 8008080:	4631      	mov	r1, r6
 8008082:	4628      	mov	r0, r5
 8008084:	47b8      	blx	r7
 8008086:	3001      	adds	r0, #1
 8008088:	f43f af51 	beq.w	8007f2e <_printf_float+0xbe>
 800808c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008090:	429a      	cmp	r2, r3
 8008092:	db02      	blt.n	800809a <_printf_float+0x22a>
 8008094:	6823      	ldr	r3, [r4, #0]
 8008096:	07d8      	lsls	r0, r3, #31
 8008098:	d510      	bpl.n	80080bc <_printf_float+0x24c>
 800809a:	ee18 3a10 	vmov	r3, s16
 800809e:	4652      	mov	r2, sl
 80080a0:	4631      	mov	r1, r6
 80080a2:	4628      	mov	r0, r5
 80080a4:	47b8      	blx	r7
 80080a6:	3001      	adds	r0, #1
 80080a8:	f43f af41 	beq.w	8007f2e <_printf_float+0xbe>
 80080ac:	f04f 0800 	mov.w	r8, #0
 80080b0:	f104 091a 	add.w	r9, r4, #26
 80080b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080b6:	3b01      	subs	r3, #1
 80080b8:	4543      	cmp	r3, r8
 80080ba:	dc09      	bgt.n	80080d0 <_printf_float+0x260>
 80080bc:	6823      	ldr	r3, [r4, #0]
 80080be:	079b      	lsls	r3, r3, #30
 80080c0:	f100 8107 	bmi.w	80082d2 <_printf_float+0x462>
 80080c4:	68e0      	ldr	r0, [r4, #12]
 80080c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080c8:	4298      	cmp	r0, r3
 80080ca:	bfb8      	it	lt
 80080cc:	4618      	movlt	r0, r3
 80080ce:	e730      	b.n	8007f32 <_printf_float+0xc2>
 80080d0:	2301      	movs	r3, #1
 80080d2:	464a      	mov	r2, r9
 80080d4:	4631      	mov	r1, r6
 80080d6:	4628      	mov	r0, r5
 80080d8:	47b8      	blx	r7
 80080da:	3001      	adds	r0, #1
 80080dc:	f43f af27 	beq.w	8007f2e <_printf_float+0xbe>
 80080e0:	f108 0801 	add.w	r8, r8, #1
 80080e4:	e7e6      	b.n	80080b4 <_printf_float+0x244>
 80080e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	dc39      	bgt.n	8008160 <_printf_float+0x2f0>
 80080ec:	4a1b      	ldr	r2, [pc, #108]	; (800815c <_printf_float+0x2ec>)
 80080ee:	2301      	movs	r3, #1
 80080f0:	4631      	mov	r1, r6
 80080f2:	4628      	mov	r0, r5
 80080f4:	47b8      	blx	r7
 80080f6:	3001      	adds	r0, #1
 80080f8:	f43f af19 	beq.w	8007f2e <_printf_float+0xbe>
 80080fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008100:	4313      	orrs	r3, r2
 8008102:	d102      	bne.n	800810a <_printf_float+0x29a>
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	07d9      	lsls	r1, r3, #31
 8008108:	d5d8      	bpl.n	80080bc <_printf_float+0x24c>
 800810a:	ee18 3a10 	vmov	r3, s16
 800810e:	4652      	mov	r2, sl
 8008110:	4631      	mov	r1, r6
 8008112:	4628      	mov	r0, r5
 8008114:	47b8      	blx	r7
 8008116:	3001      	adds	r0, #1
 8008118:	f43f af09 	beq.w	8007f2e <_printf_float+0xbe>
 800811c:	f04f 0900 	mov.w	r9, #0
 8008120:	f104 0a1a 	add.w	sl, r4, #26
 8008124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008126:	425b      	negs	r3, r3
 8008128:	454b      	cmp	r3, r9
 800812a:	dc01      	bgt.n	8008130 <_printf_float+0x2c0>
 800812c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800812e:	e792      	b.n	8008056 <_printf_float+0x1e6>
 8008130:	2301      	movs	r3, #1
 8008132:	4652      	mov	r2, sl
 8008134:	4631      	mov	r1, r6
 8008136:	4628      	mov	r0, r5
 8008138:	47b8      	blx	r7
 800813a:	3001      	adds	r0, #1
 800813c:	f43f aef7 	beq.w	8007f2e <_printf_float+0xbe>
 8008140:	f109 0901 	add.w	r9, r9, #1
 8008144:	e7ee      	b.n	8008124 <_printf_float+0x2b4>
 8008146:	bf00      	nop
 8008148:	7fefffff 	.word	0x7fefffff
 800814c:	0800b32d 	.word	0x0800b32d
 8008150:	0800b331 	.word	0x0800b331
 8008154:	0800b335 	.word	0x0800b335
 8008158:	0800b339 	.word	0x0800b339
 800815c:	0800b33d 	.word	0x0800b33d
 8008160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008162:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008164:	429a      	cmp	r2, r3
 8008166:	bfa8      	it	ge
 8008168:	461a      	movge	r2, r3
 800816a:	2a00      	cmp	r2, #0
 800816c:	4691      	mov	r9, r2
 800816e:	dc37      	bgt.n	80081e0 <_printf_float+0x370>
 8008170:	f04f 0b00 	mov.w	fp, #0
 8008174:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008178:	f104 021a 	add.w	r2, r4, #26
 800817c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800817e:	9305      	str	r3, [sp, #20]
 8008180:	eba3 0309 	sub.w	r3, r3, r9
 8008184:	455b      	cmp	r3, fp
 8008186:	dc33      	bgt.n	80081f0 <_printf_float+0x380>
 8008188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800818c:	429a      	cmp	r2, r3
 800818e:	db3b      	blt.n	8008208 <_printf_float+0x398>
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	07da      	lsls	r2, r3, #31
 8008194:	d438      	bmi.n	8008208 <_printf_float+0x398>
 8008196:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800819a:	eba2 0903 	sub.w	r9, r2, r3
 800819e:	9b05      	ldr	r3, [sp, #20]
 80081a0:	1ad2      	subs	r2, r2, r3
 80081a2:	4591      	cmp	r9, r2
 80081a4:	bfa8      	it	ge
 80081a6:	4691      	movge	r9, r2
 80081a8:	f1b9 0f00 	cmp.w	r9, #0
 80081ac:	dc35      	bgt.n	800821a <_printf_float+0x3aa>
 80081ae:	f04f 0800 	mov.w	r8, #0
 80081b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081b6:	f104 0a1a 	add.w	sl, r4, #26
 80081ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081be:	1a9b      	subs	r3, r3, r2
 80081c0:	eba3 0309 	sub.w	r3, r3, r9
 80081c4:	4543      	cmp	r3, r8
 80081c6:	f77f af79 	ble.w	80080bc <_printf_float+0x24c>
 80081ca:	2301      	movs	r3, #1
 80081cc:	4652      	mov	r2, sl
 80081ce:	4631      	mov	r1, r6
 80081d0:	4628      	mov	r0, r5
 80081d2:	47b8      	blx	r7
 80081d4:	3001      	adds	r0, #1
 80081d6:	f43f aeaa 	beq.w	8007f2e <_printf_float+0xbe>
 80081da:	f108 0801 	add.w	r8, r8, #1
 80081de:	e7ec      	b.n	80081ba <_printf_float+0x34a>
 80081e0:	4613      	mov	r3, r2
 80081e2:	4631      	mov	r1, r6
 80081e4:	4642      	mov	r2, r8
 80081e6:	4628      	mov	r0, r5
 80081e8:	47b8      	blx	r7
 80081ea:	3001      	adds	r0, #1
 80081ec:	d1c0      	bne.n	8008170 <_printf_float+0x300>
 80081ee:	e69e      	b.n	8007f2e <_printf_float+0xbe>
 80081f0:	2301      	movs	r3, #1
 80081f2:	4631      	mov	r1, r6
 80081f4:	4628      	mov	r0, r5
 80081f6:	9205      	str	r2, [sp, #20]
 80081f8:	47b8      	blx	r7
 80081fa:	3001      	adds	r0, #1
 80081fc:	f43f ae97 	beq.w	8007f2e <_printf_float+0xbe>
 8008200:	9a05      	ldr	r2, [sp, #20]
 8008202:	f10b 0b01 	add.w	fp, fp, #1
 8008206:	e7b9      	b.n	800817c <_printf_float+0x30c>
 8008208:	ee18 3a10 	vmov	r3, s16
 800820c:	4652      	mov	r2, sl
 800820e:	4631      	mov	r1, r6
 8008210:	4628      	mov	r0, r5
 8008212:	47b8      	blx	r7
 8008214:	3001      	adds	r0, #1
 8008216:	d1be      	bne.n	8008196 <_printf_float+0x326>
 8008218:	e689      	b.n	8007f2e <_printf_float+0xbe>
 800821a:	9a05      	ldr	r2, [sp, #20]
 800821c:	464b      	mov	r3, r9
 800821e:	4442      	add	r2, r8
 8008220:	4631      	mov	r1, r6
 8008222:	4628      	mov	r0, r5
 8008224:	47b8      	blx	r7
 8008226:	3001      	adds	r0, #1
 8008228:	d1c1      	bne.n	80081ae <_printf_float+0x33e>
 800822a:	e680      	b.n	8007f2e <_printf_float+0xbe>
 800822c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800822e:	2a01      	cmp	r2, #1
 8008230:	dc01      	bgt.n	8008236 <_printf_float+0x3c6>
 8008232:	07db      	lsls	r3, r3, #31
 8008234:	d53a      	bpl.n	80082ac <_printf_float+0x43c>
 8008236:	2301      	movs	r3, #1
 8008238:	4642      	mov	r2, r8
 800823a:	4631      	mov	r1, r6
 800823c:	4628      	mov	r0, r5
 800823e:	47b8      	blx	r7
 8008240:	3001      	adds	r0, #1
 8008242:	f43f ae74 	beq.w	8007f2e <_printf_float+0xbe>
 8008246:	ee18 3a10 	vmov	r3, s16
 800824a:	4652      	mov	r2, sl
 800824c:	4631      	mov	r1, r6
 800824e:	4628      	mov	r0, r5
 8008250:	47b8      	blx	r7
 8008252:	3001      	adds	r0, #1
 8008254:	f43f ae6b 	beq.w	8007f2e <_printf_float+0xbe>
 8008258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800825c:	2200      	movs	r2, #0
 800825e:	2300      	movs	r3, #0
 8008260:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008264:	f7f8 fc40 	bl	8000ae8 <__aeabi_dcmpeq>
 8008268:	b9d8      	cbnz	r0, 80082a2 <_printf_float+0x432>
 800826a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800826e:	f108 0201 	add.w	r2, r8, #1
 8008272:	4631      	mov	r1, r6
 8008274:	4628      	mov	r0, r5
 8008276:	47b8      	blx	r7
 8008278:	3001      	adds	r0, #1
 800827a:	d10e      	bne.n	800829a <_printf_float+0x42a>
 800827c:	e657      	b.n	8007f2e <_printf_float+0xbe>
 800827e:	2301      	movs	r3, #1
 8008280:	4652      	mov	r2, sl
 8008282:	4631      	mov	r1, r6
 8008284:	4628      	mov	r0, r5
 8008286:	47b8      	blx	r7
 8008288:	3001      	adds	r0, #1
 800828a:	f43f ae50 	beq.w	8007f2e <_printf_float+0xbe>
 800828e:	f108 0801 	add.w	r8, r8, #1
 8008292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008294:	3b01      	subs	r3, #1
 8008296:	4543      	cmp	r3, r8
 8008298:	dcf1      	bgt.n	800827e <_printf_float+0x40e>
 800829a:	464b      	mov	r3, r9
 800829c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082a0:	e6da      	b.n	8008058 <_printf_float+0x1e8>
 80082a2:	f04f 0800 	mov.w	r8, #0
 80082a6:	f104 0a1a 	add.w	sl, r4, #26
 80082aa:	e7f2      	b.n	8008292 <_printf_float+0x422>
 80082ac:	2301      	movs	r3, #1
 80082ae:	4642      	mov	r2, r8
 80082b0:	e7df      	b.n	8008272 <_printf_float+0x402>
 80082b2:	2301      	movs	r3, #1
 80082b4:	464a      	mov	r2, r9
 80082b6:	4631      	mov	r1, r6
 80082b8:	4628      	mov	r0, r5
 80082ba:	47b8      	blx	r7
 80082bc:	3001      	adds	r0, #1
 80082be:	f43f ae36 	beq.w	8007f2e <_printf_float+0xbe>
 80082c2:	f108 0801 	add.w	r8, r8, #1
 80082c6:	68e3      	ldr	r3, [r4, #12]
 80082c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082ca:	1a5b      	subs	r3, r3, r1
 80082cc:	4543      	cmp	r3, r8
 80082ce:	dcf0      	bgt.n	80082b2 <_printf_float+0x442>
 80082d0:	e6f8      	b.n	80080c4 <_printf_float+0x254>
 80082d2:	f04f 0800 	mov.w	r8, #0
 80082d6:	f104 0919 	add.w	r9, r4, #25
 80082da:	e7f4      	b.n	80082c6 <_printf_float+0x456>

080082dc <_printf_common>:
 80082dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e0:	4616      	mov	r6, r2
 80082e2:	4699      	mov	r9, r3
 80082e4:	688a      	ldr	r2, [r1, #8]
 80082e6:	690b      	ldr	r3, [r1, #16]
 80082e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082ec:	4293      	cmp	r3, r2
 80082ee:	bfb8      	it	lt
 80082f0:	4613      	movlt	r3, r2
 80082f2:	6033      	str	r3, [r6, #0]
 80082f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082f8:	4607      	mov	r7, r0
 80082fa:	460c      	mov	r4, r1
 80082fc:	b10a      	cbz	r2, 8008302 <_printf_common+0x26>
 80082fe:	3301      	adds	r3, #1
 8008300:	6033      	str	r3, [r6, #0]
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	0699      	lsls	r1, r3, #26
 8008306:	bf42      	ittt	mi
 8008308:	6833      	ldrmi	r3, [r6, #0]
 800830a:	3302      	addmi	r3, #2
 800830c:	6033      	strmi	r3, [r6, #0]
 800830e:	6825      	ldr	r5, [r4, #0]
 8008310:	f015 0506 	ands.w	r5, r5, #6
 8008314:	d106      	bne.n	8008324 <_printf_common+0x48>
 8008316:	f104 0a19 	add.w	sl, r4, #25
 800831a:	68e3      	ldr	r3, [r4, #12]
 800831c:	6832      	ldr	r2, [r6, #0]
 800831e:	1a9b      	subs	r3, r3, r2
 8008320:	42ab      	cmp	r3, r5
 8008322:	dc26      	bgt.n	8008372 <_printf_common+0x96>
 8008324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008328:	1e13      	subs	r3, r2, #0
 800832a:	6822      	ldr	r2, [r4, #0]
 800832c:	bf18      	it	ne
 800832e:	2301      	movne	r3, #1
 8008330:	0692      	lsls	r2, r2, #26
 8008332:	d42b      	bmi.n	800838c <_printf_common+0xb0>
 8008334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008338:	4649      	mov	r1, r9
 800833a:	4638      	mov	r0, r7
 800833c:	47c0      	blx	r8
 800833e:	3001      	adds	r0, #1
 8008340:	d01e      	beq.n	8008380 <_printf_common+0xa4>
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	6922      	ldr	r2, [r4, #16]
 8008346:	f003 0306 	and.w	r3, r3, #6
 800834a:	2b04      	cmp	r3, #4
 800834c:	bf02      	ittt	eq
 800834e:	68e5      	ldreq	r5, [r4, #12]
 8008350:	6833      	ldreq	r3, [r6, #0]
 8008352:	1aed      	subeq	r5, r5, r3
 8008354:	68a3      	ldr	r3, [r4, #8]
 8008356:	bf0c      	ite	eq
 8008358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800835c:	2500      	movne	r5, #0
 800835e:	4293      	cmp	r3, r2
 8008360:	bfc4      	itt	gt
 8008362:	1a9b      	subgt	r3, r3, r2
 8008364:	18ed      	addgt	r5, r5, r3
 8008366:	2600      	movs	r6, #0
 8008368:	341a      	adds	r4, #26
 800836a:	42b5      	cmp	r5, r6
 800836c:	d11a      	bne.n	80083a4 <_printf_common+0xc8>
 800836e:	2000      	movs	r0, #0
 8008370:	e008      	b.n	8008384 <_printf_common+0xa8>
 8008372:	2301      	movs	r3, #1
 8008374:	4652      	mov	r2, sl
 8008376:	4649      	mov	r1, r9
 8008378:	4638      	mov	r0, r7
 800837a:	47c0      	blx	r8
 800837c:	3001      	adds	r0, #1
 800837e:	d103      	bne.n	8008388 <_printf_common+0xac>
 8008380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008388:	3501      	adds	r5, #1
 800838a:	e7c6      	b.n	800831a <_printf_common+0x3e>
 800838c:	18e1      	adds	r1, r4, r3
 800838e:	1c5a      	adds	r2, r3, #1
 8008390:	2030      	movs	r0, #48	; 0x30
 8008392:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008396:	4422      	add	r2, r4
 8008398:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800839c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083a0:	3302      	adds	r3, #2
 80083a2:	e7c7      	b.n	8008334 <_printf_common+0x58>
 80083a4:	2301      	movs	r3, #1
 80083a6:	4622      	mov	r2, r4
 80083a8:	4649      	mov	r1, r9
 80083aa:	4638      	mov	r0, r7
 80083ac:	47c0      	blx	r8
 80083ae:	3001      	adds	r0, #1
 80083b0:	d0e6      	beq.n	8008380 <_printf_common+0xa4>
 80083b2:	3601      	adds	r6, #1
 80083b4:	e7d9      	b.n	800836a <_printf_common+0x8e>
	...

080083b8 <_printf_i>:
 80083b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083bc:	7e0f      	ldrb	r7, [r1, #24]
 80083be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083c0:	2f78      	cmp	r7, #120	; 0x78
 80083c2:	4691      	mov	r9, r2
 80083c4:	4680      	mov	r8, r0
 80083c6:	460c      	mov	r4, r1
 80083c8:	469a      	mov	sl, r3
 80083ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083ce:	d807      	bhi.n	80083e0 <_printf_i+0x28>
 80083d0:	2f62      	cmp	r7, #98	; 0x62
 80083d2:	d80a      	bhi.n	80083ea <_printf_i+0x32>
 80083d4:	2f00      	cmp	r7, #0
 80083d6:	f000 80d4 	beq.w	8008582 <_printf_i+0x1ca>
 80083da:	2f58      	cmp	r7, #88	; 0x58
 80083dc:	f000 80c0 	beq.w	8008560 <_printf_i+0x1a8>
 80083e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083e8:	e03a      	b.n	8008460 <_printf_i+0xa8>
 80083ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083ee:	2b15      	cmp	r3, #21
 80083f0:	d8f6      	bhi.n	80083e0 <_printf_i+0x28>
 80083f2:	a101      	add	r1, pc, #4	; (adr r1, 80083f8 <_printf_i+0x40>)
 80083f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083f8:	08008451 	.word	0x08008451
 80083fc:	08008465 	.word	0x08008465
 8008400:	080083e1 	.word	0x080083e1
 8008404:	080083e1 	.word	0x080083e1
 8008408:	080083e1 	.word	0x080083e1
 800840c:	080083e1 	.word	0x080083e1
 8008410:	08008465 	.word	0x08008465
 8008414:	080083e1 	.word	0x080083e1
 8008418:	080083e1 	.word	0x080083e1
 800841c:	080083e1 	.word	0x080083e1
 8008420:	080083e1 	.word	0x080083e1
 8008424:	08008569 	.word	0x08008569
 8008428:	08008491 	.word	0x08008491
 800842c:	08008523 	.word	0x08008523
 8008430:	080083e1 	.word	0x080083e1
 8008434:	080083e1 	.word	0x080083e1
 8008438:	0800858b 	.word	0x0800858b
 800843c:	080083e1 	.word	0x080083e1
 8008440:	08008491 	.word	0x08008491
 8008444:	080083e1 	.word	0x080083e1
 8008448:	080083e1 	.word	0x080083e1
 800844c:	0800852b 	.word	0x0800852b
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	1d1a      	adds	r2, r3, #4
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	602a      	str	r2, [r5, #0]
 8008458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800845c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008460:	2301      	movs	r3, #1
 8008462:	e09f      	b.n	80085a4 <_printf_i+0x1ec>
 8008464:	6820      	ldr	r0, [r4, #0]
 8008466:	682b      	ldr	r3, [r5, #0]
 8008468:	0607      	lsls	r7, r0, #24
 800846a:	f103 0104 	add.w	r1, r3, #4
 800846e:	6029      	str	r1, [r5, #0]
 8008470:	d501      	bpl.n	8008476 <_printf_i+0xbe>
 8008472:	681e      	ldr	r6, [r3, #0]
 8008474:	e003      	b.n	800847e <_printf_i+0xc6>
 8008476:	0646      	lsls	r6, r0, #25
 8008478:	d5fb      	bpl.n	8008472 <_printf_i+0xba>
 800847a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800847e:	2e00      	cmp	r6, #0
 8008480:	da03      	bge.n	800848a <_printf_i+0xd2>
 8008482:	232d      	movs	r3, #45	; 0x2d
 8008484:	4276      	negs	r6, r6
 8008486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800848a:	485a      	ldr	r0, [pc, #360]	; (80085f4 <_printf_i+0x23c>)
 800848c:	230a      	movs	r3, #10
 800848e:	e012      	b.n	80084b6 <_printf_i+0xfe>
 8008490:	682b      	ldr	r3, [r5, #0]
 8008492:	6820      	ldr	r0, [r4, #0]
 8008494:	1d19      	adds	r1, r3, #4
 8008496:	6029      	str	r1, [r5, #0]
 8008498:	0605      	lsls	r5, r0, #24
 800849a:	d501      	bpl.n	80084a0 <_printf_i+0xe8>
 800849c:	681e      	ldr	r6, [r3, #0]
 800849e:	e002      	b.n	80084a6 <_printf_i+0xee>
 80084a0:	0641      	lsls	r1, r0, #25
 80084a2:	d5fb      	bpl.n	800849c <_printf_i+0xe4>
 80084a4:	881e      	ldrh	r6, [r3, #0]
 80084a6:	4853      	ldr	r0, [pc, #332]	; (80085f4 <_printf_i+0x23c>)
 80084a8:	2f6f      	cmp	r7, #111	; 0x6f
 80084aa:	bf0c      	ite	eq
 80084ac:	2308      	moveq	r3, #8
 80084ae:	230a      	movne	r3, #10
 80084b0:	2100      	movs	r1, #0
 80084b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084b6:	6865      	ldr	r5, [r4, #4]
 80084b8:	60a5      	str	r5, [r4, #8]
 80084ba:	2d00      	cmp	r5, #0
 80084bc:	bfa2      	ittt	ge
 80084be:	6821      	ldrge	r1, [r4, #0]
 80084c0:	f021 0104 	bicge.w	r1, r1, #4
 80084c4:	6021      	strge	r1, [r4, #0]
 80084c6:	b90e      	cbnz	r6, 80084cc <_printf_i+0x114>
 80084c8:	2d00      	cmp	r5, #0
 80084ca:	d04b      	beq.n	8008564 <_printf_i+0x1ac>
 80084cc:	4615      	mov	r5, r2
 80084ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80084d2:	fb03 6711 	mls	r7, r3, r1, r6
 80084d6:	5dc7      	ldrb	r7, [r0, r7]
 80084d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084dc:	4637      	mov	r7, r6
 80084de:	42bb      	cmp	r3, r7
 80084e0:	460e      	mov	r6, r1
 80084e2:	d9f4      	bls.n	80084ce <_printf_i+0x116>
 80084e4:	2b08      	cmp	r3, #8
 80084e6:	d10b      	bne.n	8008500 <_printf_i+0x148>
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	07de      	lsls	r6, r3, #31
 80084ec:	d508      	bpl.n	8008500 <_printf_i+0x148>
 80084ee:	6923      	ldr	r3, [r4, #16]
 80084f0:	6861      	ldr	r1, [r4, #4]
 80084f2:	4299      	cmp	r1, r3
 80084f4:	bfde      	ittt	le
 80084f6:	2330      	movle	r3, #48	; 0x30
 80084f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008500:	1b52      	subs	r2, r2, r5
 8008502:	6122      	str	r2, [r4, #16]
 8008504:	f8cd a000 	str.w	sl, [sp]
 8008508:	464b      	mov	r3, r9
 800850a:	aa03      	add	r2, sp, #12
 800850c:	4621      	mov	r1, r4
 800850e:	4640      	mov	r0, r8
 8008510:	f7ff fee4 	bl	80082dc <_printf_common>
 8008514:	3001      	adds	r0, #1
 8008516:	d14a      	bne.n	80085ae <_printf_i+0x1f6>
 8008518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800851c:	b004      	add	sp, #16
 800851e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	f043 0320 	orr.w	r3, r3, #32
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	4833      	ldr	r0, [pc, #204]	; (80085f8 <_printf_i+0x240>)
 800852c:	2778      	movs	r7, #120	; 0x78
 800852e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	6829      	ldr	r1, [r5, #0]
 8008536:	061f      	lsls	r7, r3, #24
 8008538:	f851 6b04 	ldr.w	r6, [r1], #4
 800853c:	d402      	bmi.n	8008544 <_printf_i+0x18c>
 800853e:	065f      	lsls	r7, r3, #25
 8008540:	bf48      	it	mi
 8008542:	b2b6      	uxthmi	r6, r6
 8008544:	07df      	lsls	r7, r3, #31
 8008546:	bf48      	it	mi
 8008548:	f043 0320 	orrmi.w	r3, r3, #32
 800854c:	6029      	str	r1, [r5, #0]
 800854e:	bf48      	it	mi
 8008550:	6023      	strmi	r3, [r4, #0]
 8008552:	b91e      	cbnz	r6, 800855c <_printf_i+0x1a4>
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	f023 0320 	bic.w	r3, r3, #32
 800855a:	6023      	str	r3, [r4, #0]
 800855c:	2310      	movs	r3, #16
 800855e:	e7a7      	b.n	80084b0 <_printf_i+0xf8>
 8008560:	4824      	ldr	r0, [pc, #144]	; (80085f4 <_printf_i+0x23c>)
 8008562:	e7e4      	b.n	800852e <_printf_i+0x176>
 8008564:	4615      	mov	r5, r2
 8008566:	e7bd      	b.n	80084e4 <_printf_i+0x12c>
 8008568:	682b      	ldr	r3, [r5, #0]
 800856a:	6826      	ldr	r6, [r4, #0]
 800856c:	6961      	ldr	r1, [r4, #20]
 800856e:	1d18      	adds	r0, r3, #4
 8008570:	6028      	str	r0, [r5, #0]
 8008572:	0635      	lsls	r5, r6, #24
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	d501      	bpl.n	800857c <_printf_i+0x1c4>
 8008578:	6019      	str	r1, [r3, #0]
 800857a:	e002      	b.n	8008582 <_printf_i+0x1ca>
 800857c:	0670      	lsls	r0, r6, #25
 800857e:	d5fb      	bpl.n	8008578 <_printf_i+0x1c0>
 8008580:	8019      	strh	r1, [r3, #0]
 8008582:	2300      	movs	r3, #0
 8008584:	6123      	str	r3, [r4, #16]
 8008586:	4615      	mov	r5, r2
 8008588:	e7bc      	b.n	8008504 <_printf_i+0x14c>
 800858a:	682b      	ldr	r3, [r5, #0]
 800858c:	1d1a      	adds	r2, r3, #4
 800858e:	602a      	str	r2, [r5, #0]
 8008590:	681d      	ldr	r5, [r3, #0]
 8008592:	6862      	ldr	r2, [r4, #4]
 8008594:	2100      	movs	r1, #0
 8008596:	4628      	mov	r0, r5
 8008598:	f7f7 fe2a 	bl	80001f0 <memchr>
 800859c:	b108      	cbz	r0, 80085a2 <_printf_i+0x1ea>
 800859e:	1b40      	subs	r0, r0, r5
 80085a0:	6060      	str	r0, [r4, #4]
 80085a2:	6863      	ldr	r3, [r4, #4]
 80085a4:	6123      	str	r3, [r4, #16]
 80085a6:	2300      	movs	r3, #0
 80085a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085ac:	e7aa      	b.n	8008504 <_printf_i+0x14c>
 80085ae:	6923      	ldr	r3, [r4, #16]
 80085b0:	462a      	mov	r2, r5
 80085b2:	4649      	mov	r1, r9
 80085b4:	4640      	mov	r0, r8
 80085b6:	47d0      	blx	sl
 80085b8:	3001      	adds	r0, #1
 80085ba:	d0ad      	beq.n	8008518 <_printf_i+0x160>
 80085bc:	6823      	ldr	r3, [r4, #0]
 80085be:	079b      	lsls	r3, r3, #30
 80085c0:	d413      	bmi.n	80085ea <_printf_i+0x232>
 80085c2:	68e0      	ldr	r0, [r4, #12]
 80085c4:	9b03      	ldr	r3, [sp, #12]
 80085c6:	4298      	cmp	r0, r3
 80085c8:	bfb8      	it	lt
 80085ca:	4618      	movlt	r0, r3
 80085cc:	e7a6      	b.n	800851c <_printf_i+0x164>
 80085ce:	2301      	movs	r3, #1
 80085d0:	4632      	mov	r2, r6
 80085d2:	4649      	mov	r1, r9
 80085d4:	4640      	mov	r0, r8
 80085d6:	47d0      	blx	sl
 80085d8:	3001      	adds	r0, #1
 80085da:	d09d      	beq.n	8008518 <_printf_i+0x160>
 80085dc:	3501      	adds	r5, #1
 80085de:	68e3      	ldr	r3, [r4, #12]
 80085e0:	9903      	ldr	r1, [sp, #12]
 80085e2:	1a5b      	subs	r3, r3, r1
 80085e4:	42ab      	cmp	r3, r5
 80085e6:	dcf2      	bgt.n	80085ce <_printf_i+0x216>
 80085e8:	e7eb      	b.n	80085c2 <_printf_i+0x20a>
 80085ea:	2500      	movs	r5, #0
 80085ec:	f104 0619 	add.w	r6, r4, #25
 80085f0:	e7f5      	b.n	80085de <_printf_i+0x226>
 80085f2:	bf00      	nop
 80085f4:	0800b33f 	.word	0x0800b33f
 80085f8:	0800b350 	.word	0x0800b350

080085fc <__sflush_r>:
 80085fc:	898a      	ldrh	r2, [r1, #12]
 80085fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008602:	4605      	mov	r5, r0
 8008604:	0710      	lsls	r0, r2, #28
 8008606:	460c      	mov	r4, r1
 8008608:	d458      	bmi.n	80086bc <__sflush_r+0xc0>
 800860a:	684b      	ldr	r3, [r1, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	dc05      	bgt.n	800861c <__sflush_r+0x20>
 8008610:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008612:	2b00      	cmp	r3, #0
 8008614:	dc02      	bgt.n	800861c <__sflush_r+0x20>
 8008616:	2000      	movs	r0, #0
 8008618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800861c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800861e:	2e00      	cmp	r6, #0
 8008620:	d0f9      	beq.n	8008616 <__sflush_r+0x1a>
 8008622:	2300      	movs	r3, #0
 8008624:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008628:	682f      	ldr	r7, [r5, #0]
 800862a:	6a21      	ldr	r1, [r4, #32]
 800862c:	602b      	str	r3, [r5, #0]
 800862e:	d032      	beq.n	8008696 <__sflush_r+0x9a>
 8008630:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008632:	89a3      	ldrh	r3, [r4, #12]
 8008634:	075a      	lsls	r2, r3, #29
 8008636:	d505      	bpl.n	8008644 <__sflush_r+0x48>
 8008638:	6863      	ldr	r3, [r4, #4]
 800863a:	1ac0      	subs	r0, r0, r3
 800863c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800863e:	b10b      	cbz	r3, 8008644 <__sflush_r+0x48>
 8008640:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008642:	1ac0      	subs	r0, r0, r3
 8008644:	2300      	movs	r3, #0
 8008646:	4602      	mov	r2, r0
 8008648:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800864a:	6a21      	ldr	r1, [r4, #32]
 800864c:	4628      	mov	r0, r5
 800864e:	47b0      	blx	r6
 8008650:	1c43      	adds	r3, r0, #1
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	d106      	bne.n	8008664 <__sflush_r+0x68>
 8008656:	6829      	ldr	r1, [r5, #0]
 8008658:	291d      	cmp	r1, #29
 800865a:	d82b      	bhi.n	80086b4 <__sflush_r+0xb8>
 800865c:	4a29      	ldr	r2, [pc, #164]	; (8008704 <__sflush_r+0x108>)
 800865e:	410a      	asrs	r2, r1
 8008660:	07d6      	lsls	r6, r2, #31
 8008662:	d427      	bmi.n	80086b4 <__sflush_r+0xb8>
 8008664:	2200      	movs	r2, #0
 8008666:	6062      	str	r2, [r4, #4]
 8008668:	04d9      	lsls	r1, r3, #19
 800866a:	6922      	ldr	r2, [r4, #16]
 800866c:	6022      	str	r2, [r4, #0]
 800866e:	d504      	bpl.n	800867a <__sflush_r+0x7e>
 8008670:	1c42      	adds	r2, r0, #1
 8008672:	d101      	bne.n	8008678 <__sflush_r+0x7c>
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	b903      	cbnz	r3, 800867a <__sflush_r+0x7e>
 8008678:	6560      	str	r0, [r4, #84]	; 0x54
 800867a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800867c:	602f      	str	r7, [r5, #0]
 800867e:	2900      	cmp	r1, #0
 8008680:	d0c9      	beq.n	8008616 <__sflush_r+0x1a>
 8008682:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008686:	4299      	cmp	r1, r3
 8008688:	d002      	beq.n	8008690 <__sflush_r+0x94>
 800868a:	4628      	mov	r0, r5
 800868c:	f001 f9fa 	bl	8009a84 <_free_r>
 8008690:	2000      	movs	r0, #0
 8008692:	6360      	str	r0, [r4, #52]	; 0x34
 8008694:	e7c0      	b.n	8008618 <__sflush_r+0x1c>
 8008696:	2301      	movs	r3, #1
 8008698:	4628      	mov	r0, r5
 800869a:	47b0      	blx	r6
 800869c:	1c41      	adds	r1, r0, #1
 800869e:	d1c8      	bne.n	8008632 <__sflush_r+0x36>
 80086a0:	682b      	ldr	r3, [r5, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d0c5      	beq.n	8008632 <__sflush_r+0x36>
 80086a6:	2b1d      	cmp	r3, #29
 80086a8:	d001      	beq.n	80086ae <__sflush_r+0xb2>
 80086aa:	2b16      	cmp	r3, #22
 80086ac:	d101      	bne.n	80086b2 <__sflush_r+0xb6>
 80086ae:	602f      	str	r7, [r5, #0]
 80086b0:	e7b1      	b.n	8008616 <__sflush_r+0x1a>
 80086b2:	89a3      	ldrh	r3, [r4, #12]
 80086b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086b8:	81a3      	strh	r3, [r4, #12]
 80086ba:	e7ad      	b.n	8008618 <__sflush_r+0x1c>
 80086bc:	690f      	ldr	r7, [r1, #16]
 80086be:	2f00      	cmp	r7, #0
 80086c0:	d0a9      	beq.n	8008616 <__sflush_r+0x1a>
 80086c2:	0793      	lsls	r3, r2, #30
 80086c4:	680e      	ldr	r6, [r1, #0]
 80086c6:	bf08      	it	eq
 80086c8:	694b      	ldreq	r3, [r1, #20]
 80086ca:	600f      	str	r7, [r1, #0]
 80086cc:	bf18      	it	ne
 80086ce:	2300      	movne	r3, #0
 80086d0:	eba6 0807 	sub.w	r8, r6, r7
 80086d4:	608b      	str	r3, [r1, #8]
 80086d6:	f1b8 0f00 	cmp.w	r8, #0
 80086da:	dd9c      	ble.n	8008616 <__sflush_r+0x1a>
 80086dc:	6a21      	ldr	r1, [r4, #32]
 80086de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80086e0:	4643      	mov	r3, r8
 80086e2:	463a      	mov	r2, r7
 80086e4:	4628      	mov	r0, r5
 80086e6:	47b0      	blx	r6
 80086e8:	2800      	cmp	r0, #0
 80086ea:	dc06      	bgt.n	80086fa <__sflush_r+0xfe>
 80086ec:	89a3      	ldrh	r3, [r4, #12]
 80086ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086f2:	81a3      	strh	r3, [r4, #12]
 80086f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086f8:	e78e      	b.n	8008618 <__sflush_r+0x1c>
 80086fa:	4407      	add	r7, r0
 80086fc:	eba8 0800 	sub.w	r8, r8, r0
 8008700:	e7e9      	b.n	80086d6 <__sflush_r+0xda>
 8008702:	bf00      	nop
 8008704:	dfbffffe 	.word	0xdfbffffe

08008708 <_fflush_r>:
 8008708:	b538      	push	{r3, r4, r5, lr}
 800870a:	690b      	ldr	r3, [r1, #16]
 800870c:	4605      	mov	r5, r0
 800870e:	460c      	mov	r4, r1
 8008710:	b913      	cbnz	r3, 8008718 <_fflush_r+0x10>
 8008712:	2500      	movs	r5, #0
 8008714:	4628      	mov	r0, r5
 8008716:	bd38      	pop	{r3, r4, r5, pc}
 8008718:	b118      	cbz	r0, 8008722 <_fflush_r+0x1a>
 800871a:	6a03      	ldr	r3, [r0, #32]
 800871c:	b90b      	cbnz	r3, 8008722 <_fflush_r+0x1a>
 800871e:	f000 f8bb 	bl	8008898 <__sinit>
 8008722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d0f3      	beq.n	8008712 <_fflush_r+0xa>
 800872a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800872c:	07d0      	lsls	r0, r2, #31
 800872e:	d404      	bmi.n	800873a <_fflush_r+0x32>
 8008730:	0599      	lsls	r1, r3, #22
 8008732:	d402      	bmi.n	800873a <_fflush_r+0x32>
 8008734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008736:	f000 fb1a 	bl	8008d6e <__retarget_lock_acquire_recursive>
 800873a:	4628      	mov	r0, r5
 800873c:	4621      	mov	r1, r4
 800873e:	f7ff ff5d 	bl	80085fc <__sflush_r>
 8008742:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008744:	07da      	lsls	r2, r3, #31
 8008746:	4605      	mov	r5, r0
 8008748:	d4e4      	bmi.n	8008714 <_fflush_r+0xc>
 800874a:	89a3      	ldrh	r3, [r4, #12]
 800874c:	059b      	lsls	r3, r3, #22
 800874e:	d4e1      	bmi.n	8008714 <_fflush_r+0xc>
 8008750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008752:	f000 fb0d 	bl	8008d70 <__retarget_lock_release_recursive>
 8008756:	e7dd      	b.n	8008714 <_fflush_r+0xc>

08008758 <fflush>:
 8008758:	4601      	mov	r1, r0
 800875a:	b920      	cbnz	r0, 8008766 <fflush+0xe>
 800875c:	4a04      	ldr	r2, [pc, #16]	; (8008770 <fflush+0x18>)
 800875e:	4905      	ldr	r1, [pc, #20]	; (8008774 <fflush+0x1c>)
 8008760:	4805      	ldr	r0, [pc, #20]	; (8008778 <fflush+0x20>)
 8008762:	f000 b8b1 	b.w	80088c8 <_fwalk_sglue>
 8008766:	4b05      	ldr	r3, [pc, #20]	; (800877c <fflush+0x24>)
 8008768:	6818      	ldr	r0, [r3, #0]
 800876a:	f7ff bfcd 	b.w	8008708 <_fflush_r>
 800876e:	bf00      	nop
 8008770:	200000c8 	.word	0x200000c8
 8008774:	08008709 	.word	0x08008709
 8008778:	200000d4 	.word	0x200000d4
 800877c:	20000120 	.word	0x20000120

08008780 <std>:
 8008780:	2300      	movs	r3, #0
 8008782:	b510      	push	{r4, lr}
 8008784:	4604      	mov	r4, r0
 8008786:	e9c0 3300 	strd	r3, r3, [r0]
 800878a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800878e:	6083      	str	r3, [r0, #8]
 8008790:	8181      	strh	r1, [r0, #12]
 8008792:	6643      	str	r3, [r0, #100]	; 0x64
 8008794:	81c2      	strh	r2, [r0, #14]
 8008796:	6183      	str	r3, [r0, #24]
 8008798:	4619      	mov	r1, r3
 800879a:	2208      	movs	r2, #8
 800879c:	305c      	adds	r0, #92	; 0x5c
 800879e:	f000 f9ff 	bl	8008ba0 <memset>
 80087a2:	4b0d      	ldr	r3, [pc, #52]	; (80087d8 <std+0x58>)
 80087a4:	6263      	str	r3, [r4, #36]	; 0x24
 80087a6:	4b0d      	ldr	r3, [pc, #52]	; (80087dc <std+0x5c>)
 80087a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80087aa:	4b0d      	ldr	r3, [pc, #52]	; (80087e0 <std+0x60>)
 80087ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087ae:	4b0d      	ldr	r3, [pc, #52]	; (80087e4 <std+0x64>)
 80087b0:	6323      	str	r3, [r4, #48]	; 0x30
 80087b2:	4b0d      	ldr	r3, [pc, #52]	; (80087e8 <std+0x68>)
 80087b4:	6224      	str	r4, [r4, #32]
 80087b6:	429c      	cmp	r4, r3
 80087b8:	d006      	beq.n	80087c8 <std+0x48>
 80087ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80087be:	4294      	cmp	r4, r2
 80087c0:	d002      	beq.n	80087c8 <std+0x48>
 80087c2:	33d0      	adds	r3, #208	; 0xd0
 80087c4:	429c      	cmp	r4, r3
 80087c6:	d105      	bne.n	80087d4 <std+0x54>
 80087c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087d0:	f000 bacc 	b.w	8008d6c <__retarget_lock_init_recursive>
 80087d4:	bd10      	pop	{r4, pc}
 80087d6:	bf00      	nop
 80087d8:	080089f1 	.word	0x080089f1
 80087dc:	08008a13 	.word	0x08008a13
 80087e0:	08008a4b 	.word	0x08008a4b
 80087e4:	08008a6f 	.word	0x08008a6f
 80087e8:	200055ec 	.word	0x200055ec

080087ec <stdio_exit_handler>:
 80087ec:	4a02      	ldr	r2, [pc, #8]	; (80087f8 <stdio_exit_handler+0xc>)
 80087ee:	4903      	ldr	r1, [pc, #12]	; (80087fc <stdio_exit_handler+0x10>)
 80087f0:	4803      	ldr	r0, [pc, #12]	; (8008800 <stdio_exit_handler+0x14>)
 80087f2:	f000 b869 	b.w	80088c8 <_fwalk_sglue>
 80087f6:	bf00      	nop
 80087f8:	200000c8 	.word	0x200000c8
 80087fc:	08008709 	.word	0x08008709
 8008800:	200000d4 	.word	0x200000d4

08008804 <cleanup_stdio>:
 8008804:	6841      	ldr	r1, [r0, #4]
 8008806:	4b0c      	ldr	r3, [pc, #48]	; (8008838 <cleanup_stdio+0x34>)
 8008808:	4299      	cmp	r1, r3
 800880a:	b510      	push	{r4, lr}
 800880c:	4604      	mov	r4, r0
 800880e:	d001      	beq.n	8008814 <cleanup_stdio+0x10>
 8008810:	f7ff ff7a 	bl	8008708 <_fflush_r>
 8008814:	68a1      	ldr	r1, [r4, #8]
 8008816:	4b09      	ldr	r3, [pc, #36]	; (800883c <cleanup_stdio+0x38>)
 8008818:	4299      	cmp	r1, r3
 800881a:	d002      	beq.n	8008822 <cleanup_stdio+0x1e>
 800881c:	4620      	mov	r0, r4
 800881e:	f7ff ff73 	bl	8008708 <_fflush_r>
 8008822:	68e1      	ldr	r1, [r4, #12]
 8008824:	4b06      	ldr	r3, [pc, #24]	; (8008840 <cleanup_stdio+0x3c>)
 8008826:	4299      	cmp	r1, r3
 8008828:	d004      	beq.n	8008834 <cleanup_stdio+0x30>
 800882a:	4620      	mov	r0, r4
 800882c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008830:	f7ff bf6a 	b.w	8008708 <_fflush_r>
 8008834:	bd10      	pop	{r4, pc}
 8008836:	bf00      	nop
 8008838:	200055ec 	.word	0x200055ec
 800883c:	20005654 	.word	0x20005654
 8008840:	200056bc 	.word	0x200056bc

08008844 <global_stdio_init.part.0>:
 8008844:	b510      	push	{r4, lr}
 8008846:	4b0b      	ldr	r3, [pc, #44]	; (8008874 <global_stdio_init.part.0+0x30>)
 8008848:	4c0b      	ldr	r4, [pc, #44]	; (8008878 <global_stdio_init.part.0+0x34>)
 800884a:	4a0c      	ldr	r2, [pc, #48]	; (800887c <global_stdio_init.part.0+0x38>)
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	4620      	mov	r0, r4
 8008850:	2200      	movs	r2, #0
 8008852:	2104      	movs	r1, #4
 8008854:	f7ff ff94 	bl	8008780 <std>
 8008858:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800885c:	2201      	movs	r2, #1
 800885e:	2109      	movs	r1, #9
 8008860:	f7ff ff8e 	bl	8008780 <std>
 8008864:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008868:	2202      	movs	r2, #2
 800886a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800886e:	2112      	movs	r1, #18
 8008870:	f7ff bf86 	b.w	8008780 <std>
 8008874:	20005724 	.word	0x20005724
 8008878:	200055ec 	.word	0x200055ec
 800887c:	080087ed 	.word	0x080087ed

08008880 <__sfp_lock_acquire>:
 8008880:	4801      	ldr	r0, [pc, #4]	; (8008888 <__sfp_lock_acquire+0x8>)
 8008882:	f000 ba74 	b.w	8008d6e <__retarget_lock_acquire_recursive>
 8008886:	bf00      	nop
 8008888:	2000572d 	.word	0x2000572d

0800888c <__sfp_lock_release>:
 800888c:	4801      	ldr	r0, [pc, #4]	; (8008894 <__sfp_lock_release+0x8>)
 800888e:	f000 ba6f 	b.w	8008d70 <__retarget_lock_release_recursive>
 8008892:	bf00      	nop
 8008894:	2000572d 	.word	0x2000572d

08008898 <__sinit>:
 8008898:	b510      	push	{r4, lr}
 800889a:	4604      	mov	r4, r0
 800889c:	f7ff fff0 	bl	8008880 <__sfp_lock_acquire>
 80088a0:	6a23      	ldr	r3, [r4, #32]
 80088a2:	b11b      	cbz	r3, 80088ac <__sinit+0x14>
 80088a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088a8:	f7ff bff0 	b.w	800888c <__sfp_lock_release>
 80088ac:	4b04      	ldr	r3, [pc, #16]	; (80088c0 <__sinit+0x28>)
 80088ae:	6223      	str	r3, [r4, #32]
 80088b0:	4b04      	ldr	r3, [pc, #16]	; (80088c4 <__sinit+0x2c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1f5      	bne.n	80088a4 <__sinit+0xc>
 80088b8:	f7ff ffc4 	bl	8008844 <global_stdio_init.part.0>
 80088bc:	e7f2      	b.n	80088a4 <__sinit+0xc>
 80088be:	bf00      	nop
 80088c0:	08008805 	.word	0x08008805
 80088c4:	20005724 	.word	0x20005724

080088c8 <_fwalk_sglue>:
 80088c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088cc:	4607      	mov	r7, r0
 80088ce:	4688      	mov	r8, r1
 80088d0:	4614      	mov	r4, r2
 80088d2:	2600      	movs	r6, #0
 80088d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088d8:	f1b9 0901 	subs.w	r9, r9, #1
 80088dc:	d505      	bpl.n	80088ea <_fwalk_sglue+0x22>
 80088de:	6824      	ldr	r4, [r4, #0]
 80088e0:	2c00      	cmp	r4, #0
 80088e2:	d1f7      	bne.n	80088d4 <_fwalk_sglue+0xc>
 80088e4:	4630      	mov	r0, r6
 80088e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ea:	89ab      	ldrh	r3, [r5, #12]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d907      	bls.n	8008900 <_fwalk_sglue+0x38>
 80088f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088f4:	3301      	adds	r3, #1
 80088f6:	d003      	beq.n	8008900 <_fwalk_sglue+0x38>
 80088f8:	4629      	mov	r1, r5
 80088fa:	4638      	mov	r0, r7
 80088fc:	47c0      	blx	r8
 80088fe:	4306      	orrs	r6, r0
 8008900:	3568      	adds	r5, #104	; 0x68
 8008902:	e7e9      	b.n	80088d8 <_fwalk_sglue+0x10>

08008904 <iprintf>:
 8008904:	b40f      	push	{r0, r1, r2, r3}
 8008906:	b507      	push	{r0, r1, r2, lr}
 8008908:	4906      	ldr	r1, [pc, #24]	; (8008924 <iprintf+0x20>)
 800890a:	ab04      	add	r3, sp, #16
 800890c:	6808      	ldr	r0, [r1, #0]
 800890e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008912:	6881      	ldr	r1, [r0, #8]
 8008914:	9301      	str	r3, [sp, #4]
 8008916:	f001 fd5b 	bl	800a3d0 <_vfiprintf_r>
 800891a:	b003      	add	sp, #12
 800891c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008920:	b004      	add	sp, #16
 8008922:	4770      	bx	lr
 8008924:	20000120 	.word	0x20000120

08008928 <putchar>:
 8008928:	4b02      	ldr	r3, [pc, #8]	; (8008934 <putchar+0xc>)
 800892a:	4601      	mov	r1, r0
 800892c:	6818      	ldr	r0, [r3, #0]
 800892e:	6882      	ldr	r2, [r0, #8]
 8008930:	f001 beca 	b.w	800a6c8 <_putc_r>
 8008934:	20000120 	.word	0x20000120

08008938 <_puts_r>:
 8008938:	6a03      	ldr	r3, [r0, #32]
 800893a:	b570      	push	{r4, r5, r6, lr}
 800893c:	6884      	ldr	r4, [r0, #8]
 800893e:	4605      	mov	r5, r0
 8008940:	460e      	mov	r6, r1
 8008942:	b90b      	cbnz	r3, 8008948 <_puts_r+0x10>
 8008944:	f7ff ffa8 	bl	8008898 <__sinit>
 8008948:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800894a:	07db      	lsls	r3, r3, #31
 800894c:	d405      	bmi.n	800895a <_puts_r+0x22>
 800894e:	89a3      	ldrh	r3, [r4, #12]
 8008950:	0598      	lsls	r0, r3, #22
 8008952:	d402      	bmi.n	800895a <_puts_r+0x22>
 8008954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008956:	f000 fa0a 	bl	8008d6e <__retarget_lock_acquire_recursive>
 800895a:	89a3      	ldrh	r3, [r4, #12]
 800895c:	0719      	lsls	r1, r3, #28
 800895e:	d513      	bpl.n	8008988 <_puts_r+0x50>
 8008960:	6923      	ldr	r3, [r4, #16]
 8008962:	b18b      	cbz	r3, 8008988 <_puts_r+0x50>
 8008964:	3e01      	subs	r6, #1
 8008966:	68a3      	ldr	r3, [r4, #8]
 8008968:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800896c:	3b01      	subs	r3, #1
 800896e:	60a3      	str	r3, [r4, #8]
 8008970:	b9e9      	cbnz	r1, 80089ae <_puts_r+0x76>
 8008972:	2b00      	cmp	r3, #0
 8008974:	da2e      	bge.n	80089d4 <_puts_r+0x9c>
 8008976:	4622      	mov	r2, r4
 8008978:	210a      	movs	r1, #10
 800897a:	4628      	mov	r0, r5
 800897c:	f000 f87b 	bl	8008a76 <__swbuf_r>
 8008980:	3001      	adds	r0, #1
 8008982:	d007      	beq.n	8008994 <_puts_r+0x5c>
 8008984:	250a      	movs	r5, #10
 8008986:	e007      	b.n	8008998 <_puts_r+0x60>
 8008988:	4621      	mov	r1, r4
 800898a:	4628      	mov	r0, r5
 800898c:	f000 f8b0 	bl	8008af0 <__swsetup_r>
 8008990:	2800      	cmp	r0, #0
 8008992:	d0e7      	beq.n	8008964 <_puts_r+0x2c>
 8008994:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008998:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800899a:	07da      	lsls	r2, r3, #31
 800899c:	d405      	bmi.n	80089aa <_puts_r+0x72>
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	059b      	lsls	r3, r3, #22
 80089a2:	d402      	bmi.n	80089aa <_puts_r+0x72>
 80089a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089a6:	f000 f9e3 	bl	8008d70 <__retarget_lock_release_recursive>
 80089aa:	4628      	mov	r0, r5
 80089ac:	bd70      	pop	{r4, r5, r6, pc}
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	da04      	bge.n	80089bc <_puts_r+0x84>
 80089b2:	69a2      	ldr	r2, [r4, #24]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	dc06      	bgt.n	80089c6 <_puts_r+0x8e>
 80089b8:	290a      	cmp	r1, #10
 80089ba:	d004      	beq.n	80089c6 <_puts_r+0x8e>
 80089bc:	6823      	ldr	r3, [r4, #0]
 80089be:	1c5a      	adds	r2, r3, #1
 80089c0:	6022      	str	r2, [r4, #0]
 80089c2:	7019      	strb	r1, [r3, #0]
 80089c4:	e7cf      	b.n	8008966 <_puts_r+0x2e>
 80089c6:	4622      	mov	r2, r4
 80089c8:	4628      	mov	r0, r5
 80089ca:	f000 f854 	bl	8008a76 <__swbuf_r>
 80089ce:	3001      	adds	r0, #1
 80089d0:	d1c9      	bne.n	8008966 <_puts_r+0x2e>
 80089d2:	e7df      	b.n	8008994 <_puts_r+0x5c>
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	250a      	movs	r5, #10
 80089d8:	1c5a      	adds	r2, r3, #1
 80089da:	6022      	str	r2, [r4, #0]
 80089dc:	701d      	strb	r5, [r3, #0]
 80089de:	e7db      	b.n	8008998 <_puts_r+0x60>

080089e0 <puts>:
 80089e0:	4b02      	ldr	r3, [pc, #8]	; (80089ec <puts+0xc>)
 80089e2:	4601      	mov	r1, r0
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	f7ff bfa7 	b.w	8008938 <_puts_r>
 80089ea:	bf00      	nop
 80089ec:	20000120 	.word	0x20000120

080089f0 <__sread>:
 80089f0:	b510      	push	{r4, lr}
 80089f2:	460c      	mov	r4, r1
 80089f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f8:	f000 f96a 	bl	8008cd0 <_read_r>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	bfab      	itete	ge
 8008a00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a02:	89a3      	ldrhlt	r3, [r4, #12]
 8008a04:	181b      	addge	r3, r3, r0
 8008a06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a0a:	bfac      	ite	ge
 8008a0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a0e:	81a3      	strhlt	r3, [r4, #12]
 8008a10:	bd10      	pop	{r4, pc}

08008a12 <__swrite>:
 8008a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a16:	461f      	mov	r7, r3
 8008a18:	898b      	ldrh	r3, [r1, #12]
 8008a1a:	05db      	lsls	r3, r3, #23
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	4616      	mov	r6, r2
 8008a22:	d505      	bpl.n	8008a30 <__swrite+0x1e>
 8008a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a28:	2302      	movs	r3, #2
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f000 f93e 	bl	8008cac <_lseek_r>
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a3a:	81a3      	strh	r3, [r4, #12]
 8008a3c:	4632      	mov	r2, r6
 8008a3e:	463b      	mov	r3, r7
 8008a40:	4628      	mov	r0, r5
 8008a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a46:	f000 b955 	b.w	8008cf4 <_write_r>

08008a4a <__sseek>:
 8008a4a:	b510      	push	{r4, lr}
 8008a4c:	460c      	mov	r4, r1
 8008a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a52:	f000 f92b 	bl	8008cac <_lseek_r>
 8008a56:	1c43      	adds	r3, r0, #1
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	bf15      	itete	ne
 8008a5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a66:	81a3      	strheq	r3, [r4, #12]
 8008a68:	bf18      	it	ne
 8008a6a:	81a3      	strhne	r3, [r4, #12]
 8008a6c:	bd10      	pop	{r4, pc}

08008a6e <__sclose>:
 8008a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a72:	f000 b8b5 	b.w	8008be0 <_close_r>

08008a76 <__swbuf_r>:
 8008a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a78:	460e      	mov	r6, r1
 8008a7a:	4614      	mov	r4, r2
 8008a7c:	4605      	mov	r5, r0
 8008a7e:	b118      	cbz	r0, 8008a88 <__swbuf_r+0x12>
 8008a80:	6a03      	ldr	r3, [r0, #32]
 8008a82:	b90b      	cbnz	r3, 8008a88 <__swbuf_r+0x12>
 8008a84:	f7ff ff08 	bl	8008898 <__sinit>
 8008a88:	69a3      	ldr	r3, [r4, #24]
 8008a8a:	60a3      	str	r3, [r4, #8]
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	071a      	lsls	r2, r3, #28
 8008a90:	d525      	bpl.n	8008ade <__swbuf_r+0x68>
 8008a92:	6923      	ldr	r3, [r4, #16]
 8008a94:	b31b      	cbz	r3, 8008ade <__swbuf_r+0x68>
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	6922      	ldr	r2, [r4, #16]
 8008a9a:	1a98      	subs	r0, r3, r2
 8008a9c:	6963      	ldr	r3, [r4, #20]
 8008a9e:	b2f6      	uxtb	r6, r6
 8008aa0:	4283      	cmp	r3, r0
 8008aa2:	4637      	mov	r7, r6
 8008aa4:	dc04      	bgt.n	8008ab0 <__swbuf_r+0x3a>
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	f7ff fe2d 	bl	8008708 <_fflush_r>
 8008aae:	b9e0      	cbnz	r0, 8008aea <__swbuf_r+0x74>
 8008ab0:	68a3      	ldr	r3, [r4, #8]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	60a3      	str	r3, [r4, #8]
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	1c5a      	adds	r2, r3, #1
 8008aba:	6022      	str	r2, [r4, #0]
 8008abc:	701e      	strb	r6, [r3, #0]
 8008abe:	6962      	ldr	r2, [r4, #20]
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d004      	beq.n	8008ad0 <__swbuf_r+0x5a>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	07db      	lsls	r3, r3, #31
 8008aca:	d506      	bpl.n	8008ada <__swbuf_r+0x64>
 8008acc:	2e0a      	cmp	r6, #10
 8008ace:	d104      	bne.n	8008ada <__swbuf_r+0x64>
 8008ad0:	4621      	mov	r1, r4
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	f7ff fe18 	bl	8008708 <_fflush_r>
 8008ad8:	b938      	cbnz	r0, 8008aea <__swbuf_r+0x74>
 8008ada:	4638      	mov	r0, r7
 8008adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ade:	4621      	mov	r1, r4
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	f000 f805 	bl	8008af0 <__swsetup_r>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d0d5      	beq.n	8008a96 <__swbuf_r+0x20>
 8008aea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008aee:	e7f4      	b.n	8008ada <__swbuf_r+0x64>

08008af0 <__swsetup_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	4b2a      	ldr	r3, [pc, #168]	; (8008b9c <__swsetup_r+0xac>)
 8008af4:	4605      	mov	r5, r0
 8008af6:	6818      	ldr	r0, [r3, #0]
 8008af8:	460c      	mov	r4, r1
 8008afa:	b118      	cbz	r0, 8008b04 <__swsetup_r+0x14>
 8008afc:	6a03      	ldr	r3, [r0, #32]
 8008afe:	b90b      	cbnz	r3, 8008b04 <__swsetup_r+0x14>
 8008b00:	f7ff feca 	bl	8008898 <__sinit>
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b0a:	0718      	lsls	r0, r3, #28
 8008b0c:	d422      	bmi.n	8008b54 <__swsetup_r+0x64>
 8008b0e:	06d9      	lsls	r1, r3, #27
 8008b10:	d407      	bmi.n	8008b22 <__swsetup_r+0x32>
 8008b12:	2309      	movs	r3, #9
 8008b14:	602b      	str	r3, [r5, #0]
 8008b16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b1a:	81a3      	strh	r3, [r4, #12]
 8008b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b20:	e034      	b.n	8008b8c <__swsetup_r+0x9c>
 8008b22:	0758      	lsls	r0, r3, #29
 8008b24:	d512      	bpl.n	8008b4c <__swsetup_r+0x5c>
 8008b26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b28:	b141      	cbz	r1, 8008b3c <__swsetup_r+0x4c>
 8008b2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b2e:	4299      	cmp	r1, r3
 8008b30:	d002      	beq.n	8008b38 <__swsetup_r+0x48>
 8008b32:	4628      	mov	r0, r5
 8008b34:	f000 ffa6 	bl	8009a84 <_free_r>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	6363      	str	r3, [r4, #52]	; 0x34
 8008b3c:	89a3      	ldrh	r3, [r4, #12]
 8008b3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b42:	81a3      	strh	r3, [r4, #12]
 8008b44:	2300      	movs	r3, #0
 8008b46:	6063      	str	r3, [r4, #4]
 8008b48:	6923      	ldr	r3, [r4, #16]
 8008b4a:	6023      	str	r3, [r4, #0]
 8008b4c:	89a3      	ldrh	r3, [r4, #12]
 8008b4e:	f043 0308 	orr.w	r3, r3, #8
 8008b52:	81a3      	strh	r3, [r4, #12]
 8008b54:	6923      	ldr	r3, [r4, #16]
 8008b56:	b94b      	cbnz	r3, 8008b6c <__swsetup_r+0x7c>
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b62:	d003      	beq.n	8008b6c <__swsetup_r+0x7c>
 8008b64:	4621      	mov	r1, r4
 8008b66:	4628      	mov	r0, r5
 8008b68:	f001 fd72 	bl	800a650 <__smakebuf_r>
 8008b6c:	89a0      	ldrh	r0, [r4, #12]
 8008b6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b72:	f010 0301 	ands.w	r3, r0, #1
 8008b76:	d00a      	beq.n	8008b8e <__swsetup_r+0x9e>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	60a3      	str	r3, [r4, #8]
 8008b7c:	6963      	ldr	r3, [r4, #20]
 8008b7e:	425b      	negs	r3, r3
 8008b80:	61a3      	str	r3, [r4, #24]
 8008b82:	6923      	ldr	r3, [r4, #16]
 8008b84:	b943      	cbnz	r3, 8008b98 <__swsetup_r+0xa8>
 8008b86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b8a:	d1c4      	bne.n	8008b16 <__swsetup_r+0x26>
 8008b8c:	bd38      	pop	{r3, r4, r5, pc}
 8008b8e:	0781      	lsls	r1, r0, #30
 8008b90:	bf58      	it	pl
 8008b92:	6963      	ldrpl	r3, [r4, #20]
 8008b94:	60a3      	str	r3, [r4, #8]
 8008b96:	e7f4      	b.n	8008b82 <__swsetup_r+0x92>
 8008b98:	2000      	movs	r0, #0
 8008b9a:	e7f7      	b.n	8008b8c <__swsetup_r+0x9c>
 8008b9c:	20000120 	.word	0x20000120

08008ba0 <memset>:
 8008ba0:	4402      	add	r2, r0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d100      	bne.n	8008baa <memset+0xa>
 8008ba8:	4770      	bx	lr
 8008baa:	f803 1b01 	strb.w	r1, [r3], #1
 8008bae:	e7f9      	b.n	8008ba4 <memset+0x4>

08008bb0 <strncpy>:
 8008bb0:	b510      	push	{r4, lr}
 8008bb2:	3901      	subs	r1, #1
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	b132      	cbz	r2, 8008bc6 <strncpy+0x16>
 8008bb8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008bbc:	f803 4b01 	strb.w	r4, [r3], #1
 8008bc0:	3a01      	subs	r2, #1
 8008bc2:	2c00      	cmp	r4, #0
 8008bc4:	d1f7      	bne.n	8008bb6 <strncpy+0x6>
 8008bc6:	441a      	add	r2, r3
 8008bc8:	2100      	movs	r1, #0
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d100      	bne.n	8008bd0 <strncpy+0x20>
 8008bce:	bd10      	pop	{r4, pc}
 8008bd0:	f803 1b01 	strb.w	r1, [r3], #1
 8008bd4:	e7f9      	b.n	8008bca <strncpy+0x1a>
	...

08008bd8 <_localeconv_r>:
 8008bd8:	4800      	ldr	r0, [pc, #0]	; (8008bdc <_localeconv_r+0x4>)
 8008bda:	4770      	bx	lr
 8008bdc:	20000214 	.word	0x20000214

08008be0 <_close_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4d06      	ldr	r5, [pc, #24]	; (8008bfc <_close_r+0x1c>)
 8008be4:	2300      	movs	r3, #0
 8008be6:	4604      	mov	r4, r0
 8008be8:	4608      	mov	r0, r1
 8008bea:	602b      	str	r3, [r5, #0]
 8008bec:	f7f9 fc27 	bl	800243e <_close>
 8008bf0:	1c43      	adds	r3, r0, #1
 8008bf2:	d102      	bne.n	8008bfa <_close_r+0x1a>
 8008bf4:	682b      	ldr	r3, [r5, #0]
 8008bf6:	b103      	cbz	r3, 8008bfa <_close_r+0x1a>
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	bd38      	pop	{r3, r4, r5, pc}
 8008bfc:	20005728 	.word	0x20005728

08008c00 <_reclaim_reent>:
 8008c00:	4b29      	ldr	r3, [pc, #164]	; (8008ca8 <_reclaim_reent+0xa8>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4283      	cmp	r3, r0
 8008c06:	b570      	push	{r4, r5, r6, lr}
 8008c08:	4604      	mov	r4, r0
 8008c0a:	d04b      	beq.n	8008ca4 <_reclaim_reent+0xa4>
 8008c0c:	69c3      	ldr	r3, [r0, #28]
 8008c0e:	b143      	cbz	r3, 8008c22 <_reclaim_reent+0x22>
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d144      	bne.n	8008ca0 <_reclaim_reent+0xa0>
 8008c16:	69e3      	ldr	r3, [r4, #28]
 8008c18:	6819      	ldr	r1, [r3, #0]
 8008c1a:	b111      	cbz	r1, 8008c22 <_reclaim_reent+0x22>
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f000 ff31 	bl	8009a84 <_free_r>
 8008c22:	6961      	ldr	r1, [r4, #20]
 8008c24:	b111      	cbz	r1, 8008c2c <_reclaim_reent+0x2c>
 8008c26:	4620      	mov	r0, r4
 8008c28:	f000 ff2c 	bl	8009a84 <_free_r>
 8008c2c:	69e1      	ldr	r1, [r4, #28]
 8008c2e:	b111      	cbz	r1, 8008c36 <_reclaim_reent+0x36>
 8008c30:	4620      	mov	r0, r4
 8008c32:	f000 ff27 	bl	8009a84 <_free_r>
 8008c36:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008c38:	b111      	cbz	r1, 8008c40 <_reclaim_reent+0x40>
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f000 ff22 	bl	8009a84 <_free_r>
 8008c40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c42:	b111      	cbz	r1, 8008c4a <_reclaim_reent+0x4a>
 8008c44:	4620      	mov	r0, r4
 8008c46:	f000 ff1d 	bl	8009a84 <_free_r>
 8008c4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008c4c:	b111      	cbz	r1, 8008c54 <_reclaim_reent+0x54>
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f000 ff18 	bl	8009a84 <_free_r>
 8008c54:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008c56:	b111      	cbz	r1, 8008c5e <_reclaim_reent+0x5e>
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f000 ff13 	bl	8009a84 <_free_r>
 8008c5e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008c60:	b111      	cbz	r1, 8008c68 <_reclaim_reent+0x68>
 8008c62:	4620      	mov	r0, r4
 8008c64:	f000 ff0e 	bl	8009a84 <_free_r>
 8008c68:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008c6a:	b111      	cbz	r1, 8008c72 <_reclaim_reent+0x72>
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f000 ff09 	bl	8009a84 <_free_r>
 8008c72:	6a23      	ldr	r3, [r4, #32]
 8008c74:	b1b3      	cbz	r3, 8008ca4 <_reclaim_reent+0xa4>
 8008c76:	4620      	mov	r0, r4
 8008c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c7c:	4718      	bx	r3
 8008c7e:	5949      	ldr	r1, [r1, r5]
 8008c80:	b941      	cbnz	r1, 8008c94 <_reclaim_reent+0x94>
 8008c82:	3504      	adds	r5, #4
 8008c84:	69e3      	ldr	r3, [r4, #28]
 8008c86:	2d80      	cmp	r5, #128	; 0x80
 8008c88:	68d9      	ldr	r1, [r3, #12]
 8008c8a:	d1f8      	bne.n	8008c7e <_reclaim_reent+0x7e>
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f000 fef9 	bl	8009a84 <_free_r>
 8008c92:	e7c0      	b.n	8008c16 <_reclaim_reent+0x16>
 8008c94:	680e      	ldr	r6, [r1, #0]
 8008c96:	4620      	mov	r0, r4
 8008c98:	f000 fef4 	bl	8009a84 <_free_r>
 8008c9c:	4631      	mov	r1, r6
 8008c9e:	e7ef      	b.n	8008c80 <_reclaim_reent+0x80>
 8008ca0:	2500      	movs	r5, #0
 8008ca2:	e7ef      	b.n	8008c84 <_reclaim_reent+0x84>
 8008ca4:	bd70      	pop	{r4, r5, r6, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20000120 	.word	0x20000120

08008cac <_lseek_r>:
 8008cac:	b538      	push	{r3, r4, r5, lr}
 8008cae:	4d07      	ldr	r5, [pc, #28]	; (8008ccc <_lseek_r+0x20>)
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	4608      	mov	r0, r1
 8008cb4:	4611      	mov	r1, r2
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	602a      	str	r2, [r5, #0]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	f7f9 fbe6 	bl	800248c <_lseek>
 8008cc0:	1c43      	adds	r3, r0, #1
 8008cc2:	d102      	bne.n	8008cca <_lseek_r+0x1e>
 8008cc4:	682b      	ldr	r3, [r5, #0]
 8008cc6:	b103      	cbz	r3, 8008cca <_lseek_r+0x1e>
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	bd38      	pop	{r3, r4, r5, pc}
 8008ccc:	20005728 	.word	0x20005728

08008cd0 <_read_r>:
 8008cd0:	b538      	push	{r3, r4, r5, lr}
 8008cd2:	4d07      	ldr	r5, [pc, #28]	; (8008cf0 <_read_r+0x20>)
 8008cd4:	4604      	mov	r4, r0
 8008cd6:	4608      	mov	r0, r1
 8008cd8:	4611      	mov	r1, r2
 8008cda:	2200      	movs	r2, #0
 8008cdc:	602a      	str	r2, [r5, #0]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	f7f9 fb90 	bl	8002404 <_read>
 8008ce4:	1c43      	adds	r3, r0, #1
 8008ce6:	d102      	bne.n	8008cee <_read_r+0x1e>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	b103      	cbz	r3, 8008cee <_read_r+0x1e>
 8008cec:	6023      	str	r3, [r4, #0]
 8008cee:	bd38      	pop	{r3, r4, r5, pc}
 8008cf0:	20005728 	.word	0x20005728

08008cf4 <_write_r>:
 8008cf4:	b538      	push	{r3, r4, r5, lr}
 8008cf6:	4d07      	ldr	r5, [pc, #28]	; (8008d14 <_write_r+0x20>)
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	4608      	mov	r0, r1
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	2200      	movs	r2, #0
 8008d00:	602a      	str	r2, [r5, #0]
 8008d02:	461a      	mov	r2, r3
 8008d04:	f7f8 fecc 	bl	8001aa0 <_write>
 8008d08:	1c43      	adds	r3, r0, #1
 8008d0a:	d102      	bne.n	8008d12 <_write_r+0x1e>
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	b103      	cbz	r3, 8008d12 <_write_r+0x1e>
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	bd38      	pop	{r3, r4, r5, pc}
 8008d14:	20005728 	.word	0x20005728

08008d18 <__errno>:
 8008d18:	4b01      	ldr	r3, [pc, #4]	; (8008d20 <__errno+0x8>)
 8008d1a:	6818      	ldr	r0, [r3, #0]
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	20000120 	.word	0x20000120

08008d24 <__libc_init_array>:
 8008d24:	b570      	push	{r4, r5, r6, lr}
 8008d26:	4d0d      	ldr	r5, [pc, #52]	; (8008d5c <__libc_init_array+0x38>)
 8008d28:	4c0d      	ldr	r4, [pc, #52]	; (8008d60 <__libc_init_array+0x3c>)
 8008d2a:	1b64      	subs	r4, r4, r5
 8008d2c:	10a4      	asrs	r4, r4, #2
 8008d2e:	2600      	movs	r6, #0
 8008d30:	42a6      	cmp	r6, r4
 8008d32:	d109      	bne.n	8008d48 <__libc_init_array+0x24>
 8008d34:	4d0b      	ldr	r5, [pc, #44]	; (8008d64 <__libc_init_array+0x40>)
 8008d36:	4c0c      	ldr	r4, [pc, #48]	; (8008d68 <__libc_init_array+0x44>)
 8008d38:	f001 fdde 	bl	800a8f8 <_init>
 8008d3c:	1b64      	subs	r4, r4, r5
 8008d3e:	10a4      	asrs	r4, r4, #2
 8008d40:	2600      	movs	r6, #0
 8008d42:	42a6      	cmp	r6, r4
 8008d44:	d105      	bne.n	8008d52 <__libc_init_array+0x2e>
 8008d46:	bd70      	pop	{r4, r5, r6, pc}
 8008d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d4c:	4798      	blx	r3
 8008d4e:	3601      	adds	r6, #1
 8008d50:	e7ee      	b.n	8008d30 <__libc_init_array+0xc>
 8008d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d56:	4798      	blx	r3
 8008d58:	3601      	adds	r6, #1
 8008d5a:	e7f2      	b.n	8008d42 <__libc_init_array+0x1e>
 8008d5c:	0800b5a4 	.word	0x0800b5a4
 8008d60:	0800b5a4 	.word	0x0800b5a4
 8008d64:	0800b5a4 	.word	0x0800b5a4
 8008d68:	0800b5a8 	.word	0x0800b5a8

08008d6c <__retarget_lock_init_recursive>:
 8008d6c:	4770      	bx	lr

08008d6e <__retarget_lock_acquire_recursive>:
 8008d6e:	4770      	bx	lr

08008d70 <__retarget_lock_release_recursive>:
 8008d70:	4770      	bx	lr

08008d72 <memcpy>:
 8008d72:	440a      	add	r2, r1
 8008d74:	4291      	cmp	r1, r2
 8008d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008d7a:	d100      	bne.n	8008d7e <memcpy+0xc>
 8008d7c:	4770      	bx	lr
 8008d7e:	b510      	push	{r4, lr}
 8008d80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d88:	4291      	cmp	r1, r2
 8008d8a:	d1f9      	bne.n	8008d80 <memcpy+0xe>
 8008d8c:	bd10      	pop	{r4, pc}

08008d8e <quorem>:
 8008d8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d92:	6903      	ldr	r3, [r0, #16]
 8008d94:	690c      	ldr	r4, [r1, #16]
 8008d96:	42a3      	cmp	r3, r4
 8008d98:	4607      	mov	r7, r0
 8008d9a:	db7e      	blt.n	8008e9a <quorem+0x10c>
 8008d9c:	3c01      	subs	r4, #1
 8008d9e:	f101 0814 	add.w	r8, r1, #20
 8008da2:	f100 0514 	add.w	r5, r0, #20
 8008da6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008daa:	9301      	str	r3, [sp, #4]
 8008dac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008db0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008db4:	3301      	adds	r3, #1
 8008db6:	429a      	cmp	r2, r3
 8008db8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008dbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008dc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008dc4:	d331      	bcc.n	8008e2a <quorem+0x9c>
 8008dc6:	f04f 0e00 	mov.w	lr, #0
 8008dca:	4640      	mov	r0, r8
 8008dcc:	46ac      	mov	ip, r5
 8008dce:	46f2      	mov	sl, lr
 8008dd0:	f850 2b04 	ldr.w	r2, [r0], #4
 8008dd4:	b293      	uxth	r3, r2
 8008dd6:	fb06 e303 	mla	r3, r6, r3, lr
 8008dda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008dde:	0c1a      	lsrs	r2, r3, #16
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	ebaa 0303 	sub.w	r3, sl, r3
 8008de6:	f8dc a000 	ldr.w	sl, [ip]
 8008dea:	fa13 f38a 	uxtah	r3, r3, sl
 8008dee:	fb06 220e 	mla	r2, r6, lr, r2
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	9b00      	ldr	r3, [sp, #0]
 8008df6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008dfa:	b292      	uxth	r2, r2
 8008dfc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008e00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e04:	f8bd 3000 	ldrh.w	r3, [sp]
 8008e08:	4581      	cmp	r9, r0
 8008e0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e0e:	f84c 3b04 	str.w	r3, [ip], #4
 8008e12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008e16:	d2db      	bcs.n	8008dd0 <quorem+0x42>
 8008e18:	f855 300b 	ldr.w	r3, [r5, fp]
 8008e1c:	b92b      	cbnz	r3, 8008e2a <quorem+0x9c>
 8008e1e:	9b01      	ldr	r3, [sp, #4]
 8008e20:	3b04      	subs	r3, #4
 8008e22:	429d      	cmp	r5, r3
 8008e24:	461a      	mov	r2, r3
 8008e26:	d32c      	bcc.n	8008e82 <quorem+0xf4>
 8008e28:	613c      	str	r4, [r7, #16]
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	f001 f9a6 	bl	800a17c <__mcmp>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	db22      	blt.n	8008e7a <quorem+0xec>
 8008e34:	3601      	adds	r6, #1
 8008e36:	4629      	mov	r1, r5
 8008e38:	2000      	movs	r0, #0
 8008e3a:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e3e:	f8d1 c000 	ldr.w	ip, [r1]
 8008e42:	b293      	uxth	r3, r2
 8008e44:	1ac3      	subs	r3, r0, r3
 8008e46:	0c12      	lsrs	r2, r2, #16
 8008e48:	fa13 f38c 	uxtah	r3, r3, ip
 8008e4c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008e50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e5a:	45c1      	cmp	r9, r8
 8008e5c:	f841 3b04 	str.w	r3, [r1], #4
 8008e60:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008e64:	d2e9      	bcs.n	8008e3a <quorem+0xac>
 8008e66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e6e:	b922      	cbnz	r2, 8008e7a <quorem+0xec>
 8008e70:	3b04      	subs	r3, #4
 8008e72:	429d      	cmp	r5, r3
 8008e74:	461a      	mov	r2, r3
 8008e76:	d30a      	bcc.n	8008e8e <quorem+0x100>
 8008e78:	613c      	str	r4, [r7, #16]
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	b003      	add	sp, #12
 8008e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e82:	6812      	ldr	r2, [r2, #0]
 8008e84:	3b04      	subs	r3, #4
 8008e86:	2a00      	cmp	r2, #0
 8008e88:	d1ce      	bne.n	8008e28 <quorem+0x9a>
 8008e8a:	3c01      	subs	r4, #1
 8008e8c:	e7c9      	b.n	8008e22 <quorem+0x94>
 8008e8e:	6812      	ldr	r2, [r2, #0]
 8008e90:	3b04      	subs	r3, #4
 8008e92:	2a00      	cmp	r2, #0
 8008e94:	d1f0      	bne.n	8008e78 <quorem+0xea>
 8008e96:	3c01      	subs	r4, #1
 8008e98:	e7eb      	b.n	8008e72 <quorem+0xe4>
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	e7ee      	b.n	8008e7c <quorem+0xee>
	...

08008ea0 <_dtoa_r>:
 8008ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea4:	ed2d 8b04 	vpush	{d8-d9}
 8008ea8:	69c5      	ldr	r5, [r0, #28]
 8008eaa:	b093      	sub	sp, #76	; 0x4c
 8008eac:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008eb0:	ec57 6b10 	vmov	r6, r7, d0
 8008eb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008eb8:	9107      	str	r1, [sp, #28]
 8008eba:	4604      	mov	r4, r0
 8008ebc:	920a      	str	r2, [sp, #40]	; 0x28
 8008ebe:	930d      	str	r3, [sp, #52]	; 0x34
 8008ec0:	b975      	cbnz	r5, 8008ee0 <_dtoa_r+0x40>
 8008ec2:	2010      	movs	r0, #16
 8008ec4:	f000 fe2a 	bl	8009b1c <malloc>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	61e0      	str	r0, [r4, #28]
 8008ecc:	b920      	cbnz	r0, 8008ed8 <_dtoa_r+0x38>
 8008ece:	4bae      	ldr	r3, [pc, #696]	; (8009188 <_dtoa_r+0x2e8>)
 8008ed0:	21ef      	movs	r1, #239	; 0xef
 8008ed2:	48ae      	ldr	r0, [pc, #696]	; (800918c <_dtoa_r+0x2ec>)
 8008ed4:	f001 fc5e 	bl	800a794 <__assert_func>
 8008ed8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008edc:	6005      	str	r5, [r0, #0]
 8008ede:	60c5      	str	r5, [r0, #12]
 8008ee0:	69e3      	ldr	r3, [r4, #28]
 8008ee2:	6819      	ldr	r1, [r3, #0]
 8008ee4:	b151      	cbz	r1, 8008efc <_dtoa_r+0x5c>
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	604a      	str	r2, [r1, #4]
 8008eea:	2301      	movs	r3, #1
 8008eec:	4093      	lsls	r3, r2
 8008eee:	608b      	str	r3, [r1, #8]
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f000 ff07 	bl	8009d04 <_Bfree>
 8008ef6:	69e3      	ldr	r3, [r4, #28]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	601a      	str	r2, [r3, #0]
 8008efc:	1e3b      	subs	r3, r7, #0
 8008efe:	bfbb      	ittet	lt
 8008f00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f04:	9303      	strlt	r3, [sp, #12]
 8008f06:	2300      	movge	r3, #0
 8008f08:	2201      	movlt	r2, #1
 8008f0a:	bfac      	ite	ge
 8008f0c:	f8c8 3000 	strge.w	r3, [r8]
 8008f10:	f8c8 2000 	strlt.w	r2, [r8]
 8008f14:	4b9e      	ldr	r3, [pc, #632]	; (8009190 <_dtoa_r+0x2f0>)
 8008f16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008f1a:	ea33 0308 	bics.w	r3, r3, r8
 8008f1e:	d11b      	bne.n	8008f58 <_dtoa_r+0xb8>
 8008f20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f22:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f26:	6013      	str	r3, [r2, #0]
 8008f28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008f2c:	4333      	orrs	r3, r6
 8008f2e:	f000 8593 	beq.w	8009a58 <_dtoa_r+0xbb8>
 8008f32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f34:	b963      	cbnz	r3, 8008f50 <_dtoa_r+0xb0>
 8008f36:	4b97      	ldr	r3, [pc, #604]	; (8009194 <_dtoa_r+0x2f4>)
 8008f38:	e027      	b.n	8008f8a <_dtoa_r+0xea>
 8008f3a:	4b97      	ldr	r3, [pc, #604]	; (8009198 <_dtoa_r+0x2f8>)
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	3308      	adds	r3, #8
 8008f40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f42:	6013      	str	r3, [r2, #0]
 8008f44:	9800      	ldr	r0, [sp, #0]
 8008f46:	b013      	add	sp, #76	; 0x4c
 8008f48:	ecbd 8b04 	vpop	{d8-d9}
 8008f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f50:	4b90      	ldr	r3, [pc, #576]	; (8009194 <_dtoa_r+0x2f4>)
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	3303      	adds	r3, #3
 8008f56:	e7f3      	b.n	8008f40 <_dtoa_r+0xa0>
 8008f58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	ec51 0b17 	vmov	r0, r1, d7
 8008f62:	eeb0 8a47 	vmov.f32	s16, s14
 8008f66:	eef0 8a67 	vmov.f32	s17, s15
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	f7f7 fdbc 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f70:	4681      	mov	r9, r0
 8008f72:	b160      	cbz	r0, 8008f8e <_dtoa_r+0xee>
 8008f74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f76:	2301      	movs	r3, #1
 8008f78:	6013      	str	r3, [r2, #0]
 8008f7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f000 8568 	beq.w	8009a52 <_dtoa_r+0xbb2>
 8008f82:	4b86      	ldr	r3, [pc, #536]	; (800919c <_dtoa_r+0x2fc>)
 8008f84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f86:	6013      	str	r3, [r2, #0]
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	e7da      	b.n	8008f44 <_dtoa_r+0xa4>
 8008f8e:	aa10      	add	r2, sp, #64	; 0x40
 8008f90:	a911      	add	r1, sp, #68	; 0x44
 8008f92:	4620      	mov	r0, r4
 8008f94:	eeb0 0a48 	vmov.f32	s0, s16
 8008f98:	eef0 0a68 	vmov.f32	s1, s17
 8008f9c:	f001 f994 	bl	800a2c8 <__d2b>
 8008fa0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008fa4:	4682      	mov	sl, r0
 8008fa6:	2d00      	cmp	r5, #0
 8008fa8:	d07f      	beq.n	80090aa <_dtoa_r+0x20a>
 8008faa:	ee18 3a90 	vmov	r3, s17
 8008fae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fb2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008fb6:	ec51 0b18 	vmov	r0, r1, d8
 8008fba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008fbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008fc2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	2200      	movs	r2, #0
 8008fca:	4b75      	ldr	r3, [pc, #468]	; (80091a0 <_dtoa_r+0x300>)
 8008fcc:	f7f7 f96c 	bl	80002a8 <__aeabi_dsub>
 8008fd0:	a367      	add	r3, pc, #412	; (adr r3, 8009170 <_dtoa_r+0x2d0>)
 8008fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd6:	f7f7 fb1f 	bl	8000618 <__aeabi_dmul>
 8008fda:	a367      	add	r3, pc, #412	; (adr r3, 8009178 <_dtoa_r+0x2d8>)
 8008fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe0:	f7f7 f964 	bl	80002ac <__adddf3>
 8008fe4:	4606      	mov	r6, r0
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	460f      	mov	r7, r1
 8008fea:	f7f7 faab 	bl	8000544 <__aeabi_i2d>
 8008fee:	a364      	add	r3, pc, #400	; (adr r3, 8009180 <_dtoa_r+0x2e0>)
 8008ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff4:	f7f7 fb10 	bl	8000618 <__aeabi_dmul>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	4639      	mov	r1, r7
 8009000:	f7f7 f954 	bl	80002ac <__adddf3>
 8009004:	4606      	mov	r6, r0
 8009006:	460f      	mov	r7, r1
 8009008:	f7f7 fdb6 	bl	8000b78 <__aeabi_d2iz>
 800900c:	2200      	movs	r2, #0
 800900e:	4683      	mov	fp, r0
 8009010:	2300      	movs	r3, #0
 8009012:	4630      	mov	r0, r6
 8009014:	4639      	mov	r1, r7
 8009016:	f7f7 fd71 	bl	8000afc <__aeabi_dcmplt>
 800901a:	b148      	cbz	r0, 8009030 <_dtoa_r+0x190>
 800901c:	4658      	mov	r0, fp
 800901e:	f7f7 fa91 	bl	8000544 <__aeabi_i2d>
 8009022:	4632      	mov	r2, r6
 8009024:	463b      	mov	r3, r7
 8009026:	f7f7 fd5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800902a:	b908      	cbnz	r0, 8009030 <_dtoa_r+0x190>
 800902c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009030:	f1bb 0f16 	cmp.w	fp, #22
 8009034:	d857      	bhi.n	80090e6 <_dtoa_r+0x246>
 8009036:	4b5b      	ldr	r3, [pc, #364]	; (80091a4 <_dtoa_r+0x304>)
 8009038:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800903c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009040:	ec51 0b18 	vmov	r0, r1, d8
 8009044:	f7f7 fd5a 	bl	8000afc <__aeabi_dcmplt>
 8009048:	2800      	cmp	r0, #0
 800904a:	d04e      	beq.n	80090ea <_dtoa_r+0x24a>
 800904c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009050:	2300      	movs	r3, #0
 8009052:	930c      	str	r3, [sp, #48]	; 0x30
 8009054:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009056:	1b5b      	subs	r3, r3, r5
 8009058:	1e5a      	subs	r2, r3, #1
 800905a:	bf45      	ittet	mi
 800905c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009060:	9305      	strmi	r3, [sp, #20]
 8009062:	2300      	movpl	r3, #0
 8009064:	2300      	movmi	r3, #0
 8009066:	9206      	str	r2, [sp, #24]
 8009068:	bf54      	ite	pl
 800906a:	9305      	strpl	r3, [sp, #20]
 800906c:	9306      	strmi	r3, [sp, #24]
 800906e:	f1bb 0f00 	cmp.w	fp, #0
 8009072:	db3c      	blt.n	80090ee <_dtoa_r+0x24e>
 8009074:	9b06      	ldr	r3, [sp, #24]
 8009076:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800907a:	445b      	add	r3, fp
 800907c:	9306      	str	r3, [sp, #24]
 800907e:	2300      	movs	r3, #0
 8009080:	9308      	str	r3, [sp, #32]
 8009082:	9b07      	ldr	r3, [sp, #28]
 8009084:	2b09      	cmp	r3, #9
 8009086:	d868      	bhi.n	800915a <_dtoa_r+0x2ba>
 8009088:	2b05      	cmp	r3, #5
 800908a:	bfc4      	itt	gt
 800908c:	3b04      	subgt	r3, #4
 800908e:	9307      	strgt	r3, [sp, #28]
 8009090:	9b07      	ldr	r3, [sp, #28]
 8009092:	f1a3 0302 	sub.w	r3, r3, #2
 8009096:	bfcc      	ite	gt
 8009098:	2500      	movgt	r5, #0
 800909a:	2501      	movle	r5, #1
 800909c:	2b03      	cmp	r3, #3
 800909e:	f200 8085 	bhi.w	80091ac <_dtoa_r+0x30c>
 80090a2:	e8df f003 	tbb	[pc, r3]
 80090a6:	3b2e      	.short	0x3b2e
 80090a8:	5839      	.short	0x5839
 80090aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80090ae:	441d      	add	r5, r3
 80090b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80090b4:	2b20      	cmp	r3, #32
 80090b6:	bfc1      	itttt	gt
 80090b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80090bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80090c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80090c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80090c8:	bfd6      	itet	le
 80090ca:	f1c3 0320 	rsble	r3, r3, #32
 80090ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80090d2:	fa06 f003 	lslle.w	r0, r6, r3
 80090d6:	f7f7 fa25 	bl	8000524 <__aeabi_ui2d>
 80090da:	2201      	movs	r2, #1
 80090dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80090e0:	3d01      	subs	r5, #1
 80090e2:	920e      	str	r2, [sp, #56]	; 0x38
 80090e4:	e76f      	b.n	8008fc6 <_dtoa_r+0x126>
 80090e6:	2301      	movs	r3, #1
 80090e8:	e7b3      	b.n	8009052 <_dtoa_r+0x1b2>
 80090ea:	900c      	str	r0, [sp, #48]	; 0x30
 80090ec:	e7b2      	b.n	8009054 <_dtoa_r+0x1b4>
 80090ee:	9b05      	ldr	r3, [sp, #20]
 80090f0:	eba3 030b 	sub.w	r3, r3, fp
 80090f4:	9305      	str	r3, [sp, #20]
 80090f6:	f1cb 0300 	rsb	r3, fp, #0
 80090fa:	9308      	str	r3, [sp, #32]
 80090fc:	2300      	movs	r3, #0
 80090fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009100:	e7bf      	b.n	8009082 <_dtoa_r+0x1e2>
 8009102:	2300      	movs	r3, #0
 8009104:	9309      	str	r3, [sp, #36]	; 0x24
 8009106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009108:	2b00      	cmp	r3, #0
 800910a:	dc52      	bgt.n	80091b2 <_dtoa_r+0x312>
 800910c:	2301      	movs	r3, #1
 800910e:	9301      	str	r3, [sp, #4]
 8009110:	9304      	str	r3, [sp, #16]
 8009112:	461a      	mov	r2, r3
 8009114:	920a      	str	r2, [sp, #40]	; 0x28
 8009116:	e00b      	b.n	8009130 <_dtoa_r+0x290>
 8009118:	2301      	movs	r3, #1
 800911a:	e7f3      	b.n	8009104 <_dtoa_r+0x264>
 800911c:	2300      	movs	r3, #0
 800911e:	9309      	str	r3, [sp, #36]	; 0x24
 8009120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009122:	445b      	add	r3, fp
 8009124:	9301      	str	r3, [sp, #4]
 8009126:	3301      	adds	r3, #1
 8009128:	2b01      	cmp	r3, #1
 800912a:	9304      	str	r3, [sp, #16]
 800912c:	bfb8      	it	lt
 800912e:	2301      	movlt	r3, #1
 8009130:	69e0      	ldr	r0, [r4, #28]
 8009132:	2100      	movs	r1, #0
 8009134:	2204      	movs	r2, #4
 8009136:	f102 0614 	add.w	r6, r2, #20
 800913a:	429e      	cmp	r6, r3
 800913c:	d93d      	bls.n	80091ba <_dtoa_r+0x31a>
 800913e:	6041      	str	r1, [r0, #4]
 8009140:	4620      	mov	r0, r4
 8009142:	f000 fd9f 	bl	8009c84 <_Balloc>
 8009146:	9000      	str	r0, [sp, #0]
 8009148:	2800      	cmp	r0, #0
 800914a:	d139      	bne.n	80091c0 <_dtoa_r+0x320>
 800914c:	4b16      	ldr	r3, [pc, #88]	; (80091a8 <_dtoa_r+0x308>)
 800914e:	4602      	mov	r2, r0
 8009150:	f240 11af 	movw	r1, #431	; 0x1af
 8009154:	e6bd      	b.n	8008ed2 <_dtoa_r+0x32>
 8009156:	2301      	movs	r3, #1
 8009158:	e7e1      	b.n	800911e <_dtoa_r+0x27e>
 800915a:	2501      	movs	r5, #1
 800915c:	2300      	movs	r3, #0
 800915e:	9307      	str	r3, [sp, #28]
 8009160:	9509      	str	r5, [sp, #36]	; 0x24
 8009162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009166:	9301      	str	r3, [sp, #4]
 8009168:	9304      	str	r3, [sp, #16]
 800916a:	2200      	movs	r2, #0
 800916c:	2312      	movs	r3, #18
 800916e:	e7d1      	b.n	8009114 <_dtoa_r+0x274>
 8009170:	636f4361 	.word	0x636f4361
 8009174:	3fd287a7 	.word	0x3fd287a7
 8009178:	8b60c8b3 	.word	0x8b60c8b3
 800917c:	3fc68a28 	.word	0x3fc68a28
 8009180:	509f79fb 	.word	0x509f79fb
 8009184:	3fd34413 	.word	0x3fd34413
 8009188:	0800b36e 	.word	0x0800b36e
 800918c:	0800b385 	.word	0x0800b385
 8009190:	7ff00000 	.word	0x7ff00000
 8009194:	0800b36a 	.word	0x0800b36a
 8009198:	0800b361 	.word	0x0800b361
 800919c:	0800b33e 	.word	0x0800b33e
 80091a0:	3ff80000 	.word	0x3ff80000
 80091a4:	0800b470 	.word	0x0800b470
 80091a8:	0800b3dd 	.word	0x0800b3dd
 80091ac:	2301      	movs	r3, #1
 80091ae:	9309      	str	r3, [sp, #36]	; 0x24
 80091b0:	e7d7      	b.n	8009162 <_dtoa_r+0x2c2>
 80091b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091b4:	9301      	str	r3, [sp, #4]
 80091b6:	9304      	str	r3, [sp, #16]
 80091b8:	e7ba      	b.n	8009130 <_dtoa_r+0x290>
 80091ba:	3101      	adds	r1, #1
 80091bc:	0052      	lsls	r2, r2, #1
 80091be:	e7ba      	b.n	8009136 <_dtoa_r+0x296>
 80091c0:	69e3      	ldr	r3, [r4, #28]
 80091c2:	9a00      	ldr	r2, [sp, #0]
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	9b04      	ldr	r3, [sp, #16]
 80091c8:	2b0e      	cmp	r3, #14
 80091ca:	f200 80a8 	bhi.w	800931e <_dtoa_r+0x47e>
 80091ce:	2d00      	cmp	r5, #0
 80091d0:	f000 80a5 	beq.w	800931e <_dtoa_r+0x47e>
 80091d4:	f1bb 0f00 	cmp.w	fp, #0
 80091d8:	dd38      	ble.n	800924c <_dtoa_r+0x3ac>
 80091da:	4bc0      	ldr	r3, [pc, #768]	; (80094dc <_dtoa_r+0x63c>)
 80091dc:	f00b 020f 	and.w	r2, fp, #15
 80091e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80091e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80091ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 80091f0:	d019      	beq.n	8009226 <_dtoa_r+0x386>
 80091f2:	4bbb      	ldr	r3, [pc, #748]	; (80094e0 <_dtoa_r+0x640>)
 80091f4:	ec51 0b18 	vmov	r0, r1, d8
 80091f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091fc:	f7f7 fb36 	bl	800086c <__aeabi_ddiv>
 8009200:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009204:	f008 080f 	and.w	r8, r8, #15
 8009208:	2503      	movs	r5, #3
 800920a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80094e0 <_dtoa_r+0x640>
 800920e:	f1b8 0f00 	cmp.w	r8, #0
 8009212:	d10a      	bne.n	800922a <_dtoa_r+0x38a>
 8009214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009218:	4632      	mov	r2, r6
 800921a:	463b      	mov	r3, r7
 800921c:	f7f7 fb26 	bl	800086c <__aeabi_ddiv>
 8009220:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009224:	e02b      	b.n	800927e <_dtoa_r+0x3de>
 8009226:	2502      	movs	r5, #2
 8009228:	e7ef      	b.n	800920a <_dtoa_r+0x36a>
 800922a:	f018 0f01 	tst.w	r8, #1
 800922e:	d008      	beq.n	8009242 <_dtoa_r+0x3a2>
 8009230:	4630      	mov	r0, r6
 8009232:	4639      	mov	r1, r7
 8009234:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009238:	f7f7 f9ee 	bl	8000618 <__aeabi_dmul>
 800923c:	3501      	adds	r5, #1
 800923e:	4606      	mov	r6, r0
 8009240:	460f      	mov	r7, r1
 8009242:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009246:	f109 0908 	add.w	r9, r9, #8
 800924a:	e7e0      	b.n	800920e <_dtoa_r+0x36e>
 800924c:	f000 809f 	beq.w	800938e <_dtoa_r+0x4ee>
 8009250:	f1cb 0600 	rsb	r6, fp, #0
 8009254:	4ba1      	ldr	r3, [pc, #644]	; (80094dc <_dtoa_r+0x63c>)
 8009256:	4fa2      	ldr	r7, [pc, #648]	; (80094e0 <_dtoa_r+0x640>)
 8009258:	f006 020f 	and.w	r2, r6, #15
 800925c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009264:	ec51 0b18 	vmov	r0, r1, d8
 8009268:	f7f7 f9d6 	bl	8000618 <__aeabi_dmul>
 800926c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009270:	1136      	asrs	r6, r6, #4
 8009272:	2300      	movs	r3, #0
 8009274:	2502      	movs	r5, #2
 8009276:	2e00      	cmp	r6, #0
 8009278:	d17e      	bne.n	8009378 <_dtoa_r+0x4d8>
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1d0      	bne.n	8009220 <_dtoa_r+0x380>
 800927e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009280:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 8084 	beq.w	8009392 <_dtoa_r+0x4f2>
 800928a:	4b96      	ldr	r3, [pc, #600]	; (80094e4 <_dtoa_r+0x644>)
 800928c:	2200      	movs	r2, #0
 800928e:	4640      	mov	r0, r8
 8009290:	4649      	mov	r1, r9
 8009292:	f7f7 fc33 	bl	8000afc <__aeabi_dcmplt>
 8009296:	2800      	cmp	r0, #0
 8009298:	d07b      	beq.n	8009392 <_dtoa_r+0x4f2>
 800929a:	9b04      	ldr	r3, [sp, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d078      	beq.n	8009392 <_dtoa_r+0x4f2>
 80092a0:	9b01      	ldr	r3, [sp, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	dd39      	ble.n	800931a <_dtoa_r+0x47a>
 80092a6:	4b90      	ldr	r3, [pc, #576]	; (80094e8 <_dtoa_r+0x648>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	4640      	mov	r0, r8
 80092ac:	4649      	mov	r1, r9
 80092ae:	f7f7 f9b3 	bl	8000618 <__aeabi_dmul>
 80092b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092b6:	9e01      	ldr	r6, [sp, #4]
 80092b8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80092bc:	3501      	adds	r5, #1
 80092be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80092c2:	4628      	mov	r0, r5
 80092c4:	f7f7 f93e 	bl	8000544 <__aeabi_i2d>
 80092c8:	4642      	mov	r2, r8
 80092ca:	464b      	mov	r3, r9
 80092cc:	f7f7 f9a4 	bl	8000618 <__aeabi_dmul>
 80092d0:	4b86      	ldr	r3, [pc, #536]	; (80094ec <_dtoa_r+0x64c>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	f7f6 ffea 	bl	80002ac <__adddf3>
 80092d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80092dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092e0:	9303      	str	r3, [sp, #12]
 80092e2:	2e00      	cmp	r6, #0
 80092e4:	d158      	bne.n	8009398 <_dtoa_r+0x4f8>
 80092e6:	4b82      	ldr	r3, [pc, #520]	; (80094f0 <_dtoa_r+0x650>)
 80092e8:	2200      	movs	r2, #0
 80092ea:	4640      	mov	r0, r8
 80092ec:	4649      	mov	r1, r9
 80092ee:	f7f6 ffdb 	bl	80002a8 <__aeabi_dsub>
 80092f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092f6:	4680      	mov	r8, r0
 80092f8:	4689      	mov	r9, r1
 80092fa:	f7f7 fc1d 	bl	8000b38 <__aeabi_dcmpgt>
 80092fe:	2800      	cmp	r0, #0
 8009300:	f040 8296 	bne.w	8009830 <_dtoa_r+0x990>
 8009304:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009308:	4640      	mov	r0, r8
 800930a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800930e:	4649      	mov	r1, r9
 8009310:	f7f7 fbf4 	bl	8000afc <__aeabi_dcmplt>
 8009314:	2800      	cmp	r0, #0
 8009316:	f040 8289 	bne.w	800982c <_dtoa_r+0x98c>
 800931a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800931e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009320:	2b00      	cmp	r3, #0
 8009322:	f2c0 814e 	blt.w	80095c2 <_dtoa_r+0x722>
 8009326:	f1bb 0f0e 	cmp.w	fp, #14
 800932a:	f300 814a 	bgt.w	80095c2 <_dtoa_r+0x722>
 800932e:	4b6b      	ldr	r3, [pc, #428]	; (80094dc <_dtoa_r+0x63c>)
 8009330:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009334:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800933a:	2b00      	cmp	r3, #0
 800933c:	f280 80dc 	bge.w	80094f8 <_dtoa_r+0x658>
 8009340:	9b04      	ldr	r3, [sp, #16]
 8009342:	2b00      	cmp	r3, #0
 8009344:	f300 80d8 	bgt.w	80094f8 <_dtoa_r+0x658>
 8009348:	f040 826f 	bne.w	800982a <_dtoa_r+0x98a>
 800934c:	4b68      	ldr	r3, [pc, #416]	; (80094f0 <_dtoa_r+0x650>)
 800934e:	2200      	movs	r2, #0
 8009350:	4640      	mov	r0, r8
 8009352:	4649      	mov	r1, r9
 8009354:	f7f7 f960 	bl	8000618 <__aeabi_dmul>
 8009358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800935c:	f7f7 fbe2 	bl	8000b24 <__aeabi_dcmpge>
 8009360:	9e04      	ldr	r6, [sp, #16]
 8009362:	4637      	mov	r7, r6
 8009364:	2800      	cmp	r0, #0
 8009366:	f040 8245 	bne.w	80097f4 <_dtoa_r+0x954>
 800936a:	9d00      	ldr	r5, [sp, #0]
 800936c:	2331      	movs	r3, #49	; 0x31
 800936e:	f805 3b01 	strb.w	r3, [r5], #1
 8009372:	f10b 0b01 	add.w	fp, fp, #1
 8009376:	e241      	b.n	80097fc <_dtoa_r+0x95c>
 8009378:	07f2      	lsls	r2, r6, #31
 800937a:	d505      	bpl.n	8009388 <_dtoa_r+0x4e8>
 800937c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009380:	f7f7 f94a 	bl	8000618 <__aeabi_dmul>
 8009384:	3501      	adds	r5, #1
 8009386:	2301      	movs	r3, #1
 8009388:	1076      	asrs	r6, r6, #1
 800938a:	3708      	adds	r7, #8
 800938c:	e773      	b.n	8009276 <_dtoa_r+0x3d6>
 800938e:	2502      	movs	r5, #2
 8009390:	e775      	b.n	800927e <_dtoa_r+0x3de>
 8009392:	9e04      	ldr	r6, [sp, #16]
 8009394:	465f      	mov	r7, fp
 8009396:	e792      	b.n	80092be <_dtoa_r+0x41e>
 8009398:	9900      	ldr	r1, [sp, #0]
 800939a:	4b50      	ldr	r3, [pc, #320]	; (80094dc <_dtoa_r+0x63c>)
 800939c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093a0:	4431      	add	r1, r6
 80093a2:	9102      	str	r1, [sp, #8]
 80093a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093a6:	eeb0 9a47 	vmov.f32	s18, s14
 80093aa:	eef0 9a67 	vmov.f32	s19, s15
 80093ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80093b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80093b6:	2900      	cmp	r1, #0
 80093b8:	d044      	beq.n	8009444 <_dtoa_r+0x5a4>
 80093ba:	494e      	ldr	r1, [pc, #312]	; (80094f4 <_dtoa_r+0x654>)
 80093bc:	2000      	movs	r0, #0
 80093be:	f7f7 fa55 	bl	800086c <__aeabi_ddiv>
 80093c2:	ec53 2b19 	vmov	r2, r3, d9
 80093c6:	f7f6 ff6f 	bl	80002a8 <__aeabi_dsub>
 80093ca:	9d00      	ldr	r5, [sp, #0]
 80093cc:	ec41 0b19 	vmov	d9, r0, r1
 80093d0:	4649      	mov	r1, r9
 80093d2:	4640      	mov	r0, r8
 80093d4:	f7f7 fbd0 	bl	8000b78 <__aeabi_d2iz>
 80093d8:	4606      	mov	r6, r0
 80093da:	f7f7 f8b3 	bl	8000544 <__aeabi_i2d>
 80093de:	4602      	mov	r2, r0
 80093e0:	460b      	mov	r3, r1
 80093e2:	4640      	mov	r0, r8
 80093e4:	4649      	mov	r1, r9
 80093e6:	f7f6 ff5f 	bl	80002a8 <__aeabi_dsub>
 80093ea:	3630      	adds	r6, #48	; 0x30
 80093ec:	f805 6b01 	strb.w	r6, [r5], #1
 80093f0:	ec53 2b19 	vmov	r2, r3, d9
 80093f4:	4680      	mov	r8, r0
 80093f6:	4689      	mov	r9, r1
 80093f8:	f7f7 fb80 	bl	8000afc <__aeabi_dcmplt>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d164      	bne.n	80094ca <_dtoa_r+0x62a>
 8009400:	4642      	mov	r2, r8
 8009402:	464b      	mov	r3, r9
 8009404:	4937      	ldr	r1, [pc, #220]	; (80094e4 <_dtoa_r+0x644>)
 8009406:	2000      	movs	r0, #0
 8009408:	f7f6 ff4e 	bl	80002a8 <__aeabi_dsub>
 800940c:	ec53 2b19 	vmov	r2, r3, d9
 8009410:	f7f7 fb74 	bl	8000afc <__aeabi_dcmplt>
 8009414:	2800      	cmp	r0, #0
 8009416:	f040 80b6 	bne.w	8009586 <_dtoa_r+0x6e6>
 800941a:	9b02      	ldr	r3, [sp, #8]
 800941c:	429d      	cmp	r5, r3
 800941e:	f43f af7c 	beq.w	800931a <_dtoa_r+0x47a>
 8009422:	4b31      	ldr	r3, [pc, #196]	; (80094e8 <_dtoa_r+0x648>)
 8009424:	ec51 0b19 	vmov	r0, r1, d9
 8009428:	2200      	movs	r2, #0
 800942a:	f7f7 f8f5 	bl	8000618 <__aeabi_dmul>
 800942e:	4b2e      	ldr	r3, [pc, #184]	; (80094e8 <_dtoa_r+0x648>)
 8009430:	ec41 0b19 	vmov	d9, r0, r1
 8009434:	2200      	movs	r2, #0
 8009436:	4640      	mov	r0, r8
 8009438:	4649      	mov	r1, r9
 800943a:	f7f7 f8ed 	bl	8000618 <__aeabi_dmul>
 800943e:	4680      	mov	r8, r0
 8009440:	4689      	mov	r9, r1
 8009442:	e7c5      	b.n	80093d0 <_dtoa_r+0x530>
 8009444:	ec51 0b17 	vmov	r0, r1, d7
 8009448:	f7f7 f8e6 	bl	8000618 <__aeabi_dmul>
 800944c:	9b02      	ldr	r3, [sp, #8]
 800944e:	9d00      	ldr	r5, [sp, #0]
 8009450:	930f      	str	r3, [sp, #60]	; 0x3c
 8009452:	ec41 0b19 	vmov	d9, r0, r1
 8009456:	4649      	mov	r1, r9
 8009458:	4640      	mov	r0, r8
 800945a:	f7f7 fb8d 	bl	8000b78 <__aeabi_d2iz>
 800945e:	4606      	mov	r6, r0
 8009460:	f7f7 f870 	bl	8000544 <__aeabi_i2d>
 8009464:	3630      	adds	r6, #48	; 0x30
 8009466:	4602      	mov	r2, r0
 8009468:	460b      	mov	r3, r1
 800946a:	4640      	mov	r0, r8
 800946c:	4649      	mov	r1, r9
 800946e:	f7f6 ff1b 	bl	80002a8 <__aeabi_dsub>
 8009472:	f805 6b01 	strb.w	r6, [r5], #1
 8009476:	9b02      	ldr	r3, [sp, #8]
 8009478:	429d      	cmp	r5, r3
 800947a:	4680      	mov	r8, r0
 800947c:	4689      	mov	r9, r1
 800947e:	f04f 0200 	mov.w	r2, #0
 8009482:	d124      	bne.n	80094ce <_dtoa_r+0x62e>
 8009484:	4b1b      	ldr	r3, [pc, #108]	; (80094f4 <_dtoa_r+0x654>)
 8009486:	ec51 0b19 	vmov	r0, r1, d9
 800948a:	f7f6 ff0f 	bl	80002ac <__adddf3>
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	4640      	mov	r0, r8
 8009494:	4649      	mov	r1, r9
 8009496:	f7f7 fb4f 	bl	8000b38 <__aeabi_dcmpgt>
 800949a:	2800      	cmp	r0, #0
 800949c:	d173      	bne.n	8009586 <_dtoa_r+0x6e6>
 800949e:	ec53 2b19 	vmov	r2, r3, d9
 80094a2:	4914      	ldr	r1, [pc, #80]	; (80094f4 <_dtoa_r+0x654>)
 80094a4:	2000      	movs	r0, #0
 80094a6:	f7f6 feff 	bl	80002a8 <__aeabi_dsub>
 80094aa:	4602      	mov	r2, r0
 80094ac:	460b      	mov	r3, r1
 80094ae:	4640      	mov	r0, r8
 80094b0:	4649      	mov	r1, r9
 80094b2:	f7f7 fb23 	bl	8000afc <__aeabi_dcmplt>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	f43f af2f 	beq.w	800931a <_dtoa_r+0x47a>
 80094bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80094be:	1e6b      	subs	r3, r5, #1
 80094c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80094c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094c6:	2b30      	cmp	r3, #48	; 0x30
 80094c8:	d0f8      	beq.n	80094bc <_dtoa_r+0x61c>
 80094ca:	46bb      	mov	fp, r7
 80094cc:	e04a      	b.n	8009564 <_dtoa_r+0x6c4>
 80094ce:	4b06      	ldr	r3, [pc, #24]	; (80094e8 <_dtoa_r+0x648>)
 80094d0:	f7f7 f8a2 	bl	8000618 <__aeabi_dmul>
 80094d4:	4680      	mov	r8, r0
 80094d6:	4689      	mov	r9, r1
 80094d8:	e7bd      	b.n	8009456 <_dtoa_r+0x5b6>
 80094da:	bf00      	nop
 80094dc:	0800b470 	.word	0x0800b470
 80094e0:	0800b448 	.word	0x0800b448
 80094e4:	3ff00000 	.word	0x3ff00000
 80094e8:	40240000 	.word	0x40240000
 80094ec:	401c0000 	.word	0x401c0000
 80094f0:	40140000 	.word	0x40140000
 80094f4:	3fe00000 	.word	0x3fe00000
 80094f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80094fc:	9d00      	ldr	r5, [sp, #0]
 80094fe:	4642      	mov	r2, r8
 8009500:	464b      	mov	r3, r9
 8009502:	4630      	mov	r0, r6
 8009504:	4639      	mov	r1, r7
 8009506:	f7f7 f9b1 	bl	800086c <__aeabi_ddiv>
 800950a:	f7f7 fb35 	bl	8000b78 <__aeabi_d2iz>
 800950e:	9001      	str	r0, [sp, #4]
 8009510:	f7f7 f818 	bl	8000544 <__aeabi_i2d>
 8009514:	4642      	mov	r2, r8
 8009516:	464b      	mov	r3, r9
 8009518:	f7f7 f87e 	bl	8000618 <__aeabi_dmul>
 800951c:	4602      	mov	r2, r0
 800951e:	460b      	mov	r3, r1
 8009520:	4630      	mov	r0, r6
 8009522:	4639      	mov	r1, r7
 8009524:	f7f6 fec0 	bl	80002a8 <__aeabi_dsub>
 8009528:	9e01      	ldr	r6, [sp, #4]
 800952a:	9f04      	ldr	r7, [sp, #16]
 800952c:	3630      	adds	r6, #48	; 0x30
 800952e:	f805 6b01 	strb.w	r6, [r5], #1
 8009532:	9e00      	ldr	r6, [sp, #0]
 8009534:	1bae      	subs	r6, r5, r6
 8009536:	42b7      	cmp	r7, r6
 8009538:	4602      	mov	r2, r0
 800953a:	460b      	mov	r3, r1
 800953c:	d134      	bne.n	80095a8 <_dtoa_r+0x708>
 800953e:	f7f6 feb5 	bl	80002ac <__adddf3>
 8009542:	4642      	mov	r2, r8
 8009544:	464b      	mov	r3, r9
 8009546:	4606      	mov	r6, r0
 8009548:	460f      	mov	r7, r1
 800954a:	f7f7 faf5 	bl	8000b38 <__aeabi_dcmpgt>
 800954e:	b9c8      	cbnz	r0, 8009584 <_dtoa_r+0x6e4>
 8009550:	4642      	mov	r2, r8
 8009552:	464b      	mov	r3, r9
 8009554:	4630      	mov	r0, r6
 8009556:	4639      	mov	r1, r7
 8009558:	f7f7 fac6 	bl	8000ae8 <__aeabi_dcmpeq>
 800955c:	b110      	cbz	r0, 8009564 <_dtoa_r+0x6c4>
 800955e:	9b01      	ldr	r3, [sp, #4]
 8009560:	07db      	lsls	r3, r3, #31
 8009562:	d40f      	bmi.n	8009584 <_dtoa_r+0x6e4>
 8009564:	4651      	mov	r1, sl
 8009566:	4620      	mov	r0, r4
 8009568:	f000 fbcc 	bl	8009d04 <_Bfree>
 800956c:	2300      	movs	r3, #0
 800956e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009570:	702b      	strb	r3, [r5, #0]
 8009572:	f10b 0301 	add.w	r3, fp, #1
 8009576:	6013      	str	r3, [r2, #0]
 8009578:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800957a:	2b00      	cmp	r3, #0
 800957c:	f43f ace2 	beq.w	8008f44 <_dtoa_r+0xa4>
 8009580:	601d      	str	r5, [r3, #0]
 8009582:	e4df      	b.n	8008f44 <_dtoa_r+0xa4>
 8009584:	465f      	mov	r7, fp
 8009586:	462b      	mov	r3, r5
 8009588:	461d      	mov	r5, r3
 800958a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800958e:	2a39      	cmp	r2, #57	; 0x39
 8009590:	d106      	bne.n	80095a0 <_dtoa_r+0x700>
 8009592:	9a00      	ldr	r2, [sp, #0]
 8009594:	429a      	cmp	r2, r3
 8009596:	d1f7      	bne.n	8009588 <_dtoa_r+0x6e8>
 8009598:	9900      	ldr	r1, [sp, #0]
 800959a:	2230      	movs	r2, #48	; 0x30
 800959c:	3701      	adds	r7, #1
 800959e:	700a      	strb	r2, [r1, #0]
 80095a0:	781a      	ldrb	r2, [r3, #0]
 80095a2:	3201      	adds	r2, #1
 80095a4:	701a      	strb	r2, [r3, #0]
 80095a6:	e790      	b.n	80094ca <_dtoa_r+0x62a>
 80095a8:	4ba3      	ldr	r3, [pc, #652]	; (8009838 <_dtoa_r+0x998>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	f7f7 f834 	bl	8000618 <__aeabi_dmul>
 80095b0:	2200      	movs	r2, #0
 80095b2:	2300      	movs	r3, #0
 80095b4:	4606      	mov	r6, r0
 80095b6:	460f      	mov	r7, r1
 80095b8:	f7f7 fa96 	bl	8000ae8 <__aeabi_dcmpeq>
 80095bc:	2800      	cmp	r0, #0
 80095be:	d09e      	beq.n	80094fe <_dtoa_r+0x65e>
 80095c0:	e7d0      	b.n	8009564 <_dtoa_r+0x6c4>
 80095c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095c4:	2a00      	cmp	r2, #0
 80095c6:	f000 80ca 	beq.w	800975e <_dtoa_r+0x8be>
 80095ca:	9a07      	ldr	r2, [sp, #28]
 80095cc:	2a01      	cmp	r2, #1
 80095ce:	f300 80ad 	bgt.w	800972c <_dtoa_r+0x88c>
 80095d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095d4:	2a00      	cmp	r2, #0
 80095d6:	f000 80a5 	beq.w	8009724 <_dtoa_r+0x884>
 80095da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80095de:	9e08      	ldr	r6, [sp, #32]
 80095e0:	9d05      	ldr	r5, [sp, #20]
 80095e2:	9a05      	ldr	r2, [sp, #20]
 80095e4:	441a      	add	r2, r3
 80095e6:	9205      	str	r2, [sp, #20]
 80095e8:	9a06      	ldr	r2, [sp, #24]
 80095ea:	2101      	movs	r1, #1
 80095ec:	441a      	add	r2, r3
 80095ee:	4620      	mov	r0, r4
 80095f0:	9206      	str	r2, [sp, #24]
 80095f2:	f000 fc3d 	bl	8009e70 <__i2b>
 80095f6:	4607      	mov	r7, r0
 80095f8:	b165      	cbz	r5, 8009614 <_dtoa_r+0x774>
 80095fa:	9b06      	ldr	r3, [sp, #24]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	dd09      	ble.n	8009614 <_dtoa_r+0x774>
 8009600:	42ab      	cmp	r3, r5
 8009602:	9a05      	ldr	r2, [sp, #20]
 8009604:	bfa8      	it	ge
 8009606:	462b      	movge	r3, r5
 8009608:	1ad2      	subs	r2, r2, r3
 800960a:	9205      	str	r2, [sp, #20]
 800960c:	9a06      	ldr	r2, [sp, #24]
 800960e:	1aed      	subs	r5, r5, r3
 8009610:	1ad3      	subs	r3, r2, r3
 8009612:	9306      	str	r3, [sp, #24]
 8009614:	9b08      	ldr	r3, [sp, #32]
 8009616:	b1f3      	cbz	r3, 8009656 <_dtoa_r+0x7b6>
 8009618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 80a3 	beq.w	8009766 <_dtoa_r+0x8c6>
 8009620:	2e00      	cmp	r6, #0
 8009622:	dd10      	ble.n	8009646 <_dtoa_r+0x7a6>
 8009624:	4639      	mov	r1, r7
 8009626:	4632      	mov	r2, r6
 8009628:	4620      	mov	r0, r4
 800962a:	f000 fce1 	bl	8009ff0 <__pow5mult>
 800962e:	4652      	mov	r2, sl
 8009630:	4601      	mov	r1, r0
 8009632:	4607      	mov	r7, r0
 8009634:	4620      	mov	r0, r4
 8009636:	f000 fc31 	bl	8009e9c <__multiply>
 800963a:	4651      	mov	r1, sl
 800963c:	4680      	mov	r8, r0
 800963e:	4620      	mov	r0, r4
 8009640:	f000 fb60 	bl	8009d04 <_Bfree>
 8009644:	46c2      	mov	sl, r8
 8009646:	9b08      	ldr	r3, [sp, #32]
 8009648:	1b9a      	subs	r2, r3, r6
 800964a:	d004      	beq.n	8009656 <_dtoa_r+0x7b6>
 800964c:	4651      	mov	r1, sl
 800964e:	4620      	mov	r0, r4
 8009650:	f000 fcce 	bl	8009ff0 <__pow5mult>
 8009654:	4682      	mov	sl, r0
 8009656:	2101      	movs	r1, #1
 8009658:	4620      	mov	r0, r4
 800965a:	f000 fc09 	bl	8009e70 <__i2b>
 800965e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009660:	2b00      	cmp	r3, #0
 8009662:	4606      	mov	r6, r0
 8009664:	f340 8081 	ble.w	800976a <_dtoa_r+0x8ca>
 8009668:	461a      	mov	r2, r3
 800966a:	4601      	mov	r1, r0
 800966c:	4620      	mov	r0, r4
 800966e:	f000 fcbf 	bl	8009ff0 <__pow5mult>
 8009672:	9b07      	ldr	r3, [sp, #28]
 8009674:	2b01      	cmp	r3, #1
 8009676:	4606      	mov	r6, r0
 8009678:	dd7a      	ble.n	8009770 <_dtoa_r+0x8d0>
 800967a:	f04f 0800 	mov.w	r8, #0
 800967e:	6933      	ldr	r3, [r6, #16]
 8009680:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009684:	6918      	ldr	r0, [r3, #16]
 8009686:	f000 fba5 	bl	8009dd4 <__hi0bits>
 800968a:	f1c0 0020 	rsb	r0, r0, #32
 800968e:	9b06      	ldr	r3, [sp, #24]
 8009690:	4418      	add	r0, r3
 8009692:	f010 001f 	ands.w	r0, r0, #31
 8009696:	f000 8094 	beq.w	80097c2 <_dtoa_r+0x922>
 800969a:	f1c0 0320 	rsb	r3, r0, #32
 800969e:	2b04      	cmp	r3, #4
 80096a0:	f340 8085 	ble.w	80097ae <_dtoa_r+0x90e>
 80096a4:	9b05      	ldr	r3, [sp, #20]
 80096a6:	f1c0 001c 	rsb	r0, r0, #28
 80096aa:	4403      	add	r3, r0
 80096ac:	9305      	str	r3, [sp, #20]
 80096ae:	9b06      	ldr	r3, [sp, #24]
 80096b0:	4403      	add	r3, r0
 80096b2:	4405      	add	r5, r0
 80096b4:	9306      	str	r3, [sp, #24]
 80096b6:	9b05      	ldr	r3, [sp, #20]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	dd05      	ble.n	80096c8 <_dtoa_r+0x828>
 80096bc:	4651      	mov	r1, sl
 80096be:	461a      	mov	r2, r3
 80096c0:	4620      	mov	r0, r4
 80096c2:	f000 fcef 	bl	800a0a4 <__lshift>
 80096c6:	4682      	mov	sl, r0
 80096c8:	9b06      	ldr	r3, [sp, #24]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	dd05      	ble.n	80096da <_dtoa_r+0x83a>
 80096ce:	4631      	mov	r1, r6
 80096d0:	461a      	mov	r2, r3
 80096d2:	4620      	mov	r0, r4
 80096d4:	f000 fce6 	bl	800a0a4 <__lshift>
 80096d8:	4606      	mov	r6, r0
 80096da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d072      	beq.n	80097c6 <_dtoa_r+0x926>
 80096e0:	4631      	mov	r1, r6
 80096e2:	4650      	mov	r0, sl
 80096e4:	f000 fd4a 	bl	800a17c <__mcmp>
 80096e8:	2800      	cmp	r0, #0
 80096ea:	da6c      	bge.n	80097c6 <_dtoa_r+0x926>
 80096ec:	2300      	movs	r3, #0
 80096ee:	4651      	mov	r1, sl
 80096f0:	220a      	movs	r2, #10
 80096f2:	4620      	mov	r0, r4
 80096f4:	f000 fb28 	bl	8009d48 <__multadd>
 80096f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096fa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80096fe:	4682      	mov	sl, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 81b0 	beq.w	8009a66 <_dtoa_r+0xbc6>
 8009706:	2300      	movs	r3, #0
 8009708:	4639      	mov	r1, r7
 800970a:	220a      	movs	r2, #10
 800970c:	4620      	mov	r0, r4
 800970e:	f000 fb1b 	bl	8009d48 <__multadd>
 8009712:	9b01      	ldr	r3, [sp, #4]
 8009714:	2b00      	cmp	r3, #0
 8009716:	4607      	mov	r7, r0
 8009718:	f300 8096 	bgt.w	8009848 <_dtoa_r+0x9a8>
 800971c:	9b07      	ldr	r3, [sp, #28]
 800971e:	2b02      	cmp	r3, #2
 8009720:	dc59      	bgt.n	80097d6 <_dtoa_r+0x936>
 8009722:	e091      	b.n	8009848 <_dtoa_r+0x9a8>
 8009724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009726:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800972a:	e758      	b.n	80095de <_dtoa_r+0x73e>
 800972c:	9b04      	ldr	r3, [sp, #16]
 800972e:	1e5e      	subs	r6, r3, #1
 8009730:	9b08      	ldr	r3, [sp, #32]
 8009732:	42b3      	cmp	r3, r6
 8009734:	bfbf      	itttt	lt
 8009736:	9b08      	ldrlt	r3, [sp, #32]
 8009738:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800973a:	9608      	strlt	r6, [sp, #32]
 800973c:	1af3      	sublt	r3, r6, r3
 800973e:	bfb4      	ite	lt
 8009740:	18d2      	addlt	r2, r2, r3
 8009742:	1b9e      	subge	r6, r3, r6
 8009744:	9b04      	ldr	r3, [sp, #16]
 8009746:	bfbc      	itt	lt
 8009748:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800974a:	2600      	movlt	r6, #0
 800974c:	2b00      	cmp	r3, #0
 800974e:	bfb7      	itett	lt
 8009750:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009754:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009758:	1a9d      	sublt	r5, r3, r2
 800975a:	2300      	movlt	r3, #0
 800975c:	e741      	b.n	80095e2 <_dtoa_r+0x742>
 800975e:	9e08      	ldr	r6, [sp, #32]
 8009760:	9d05      	ldr	r5, [sp, #20]
 8009762:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009764:	e748      	b.n	80095f8 <_dtoa_r+0x758>
 8009766:	9a08      	ldr	r2, [sp, #32]
 8009768:	e770      	b.n	800964c <_dtoa_r+0x7ac>
 800976a:	9b07      	ldr	r3, [sp, #28]
 800976c:	2b01      	cmp	r3, #1
 800976e:	dc19      	bgt.n	80097a4 <_dtoa_r+0x904>
 8009770:	9b02      	ldr	r3, [sp, #8]
 8009772:	b9bb      	cbnz	r3, 80097a4 <_dtoa_r+0x904>
 8009774:	9b03      	ldr	r3, [sp, #12]
 8009776:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800977a:	b99b      	cbnz	r3, 80097a4 <_dtoa_r+0x904>
 800977c:	9b03      	ldr	r3, [sp, #12]
 800977e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009782:	0d1b      	lsrs	r3, r3, #20
 8009784:	051b      	lsls	r3, r3, #20
 8009786:	b183      	cbz	r3, 80097aa <_dtoa_r+0x90a>
 8009788:	9b05      	ldr	r3, [sp, #20]
 800978a:	3301      	adds	r3, #1
 800978c:	9305      	str	r3, [sp, #20]
 800978e:	9b06      	ldr	r3, [sp, #24]
 8009790:	3301      	adds	r3, #1
 8009792:	9306      	str	r3, [sp, #24]
 8009794:	f04f 0801 	mov.w	r8, #1
 8009798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800979a:	2b00      	cmp	r3, #0
 800979c:	f47f af6f 	bne.w	800967e <_dtoa_r+0x7de>
 80097a0:	2001      	movs	r0, #1
 80097a2:	e774      	b.n	800968e <_dtoa_r+0x7ee>
 80097a4:	f04f 0800 	mov.w	r8, #0
 80097a8:	e7f6      	b.n	8009798 <_dtoa_r+0x8f8>
 80097aa:	4698      	mov	r8, r3
 80097ac:	e7f4      	b.n	8009798 <_dtoa_r+0x8f8>
 80097ae:	d082      	beq.n	80096b6 <_dtoa_r+0x816>
 80097b0:	9a05      	ldr	r2, [sp, #20]
 80097b2:	331c      	adds	r3, #28
 80097b4:	441a      	add	r2, r3
 80097b6:	9205      	str	r2, [sp, #20]
 80097b8:	9a06      	ldr	r2, [sp, #24]
 80097ba:	441a      	add	r2, r3
 80097bc:	441d      	add	r5, r3
 80097be:	9206      	str	r2, [sp, #24]
 80097c0:	e779      	b.n	80096b6 <_dtoa_r+0x816>
 80097c2:	4603      	mov	r3, r0
 80097c4:	e7f4      	b.n	80097b0 <_dtoa_r+0x910>
 80097c6:	9b04      	ldr	r3, [sp, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	dc37      	bgt.n	800983c <_dtoa_r+0x99c>
 80097cc:	9b07      	ldr	r3, [sp, #28]
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	dd34      	ble.n	800983c <_dtoa_r+0x99c>
 80097d2:	9b04      	ldr	r3, [sp, #16]
 80097d4:	9301      	str	r3, [sp, #4]
 80097d6:	9b01      	ldr	r3, [sp, #4]
 80097d8:	b963      	cbnz	r3, 80097f4 <_dtoa_r+0x954>
 80097da:	4631      	mov	r1, r6
 80097dc:	2205      	movs	r2, #5
 80097de:	4620      	mov	r0, r4
 80097e0:	f000 fab2 	bl	8009d48 <__multadd>
 80097e4:	4601      	mov	r1, r0
 80097e6:	4606      	mov	r6, r0
 80097e8:	4650      	mov	r0, sl
 80097ea:	f000 fcc7 	bl	800a17c <__mcmp>
 80097ee:	2800      	cmp	r0, #0
 80097f0:	f73f adbb 	bgt.w	800936a <_dtoa_r+0x4ca>
 80097f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f6:	9d00      	ldr	r5, [sp, #0]
 80097f8:	ea6f 0b03 	mvn.w	fp, r3
 80097fc:	f04f 0800 	mov.w	r8, #0
 8009800:	4631      	mov	r1, r6
 8009802:	4620      	mov	r0, r4
 8009804:	f000 fa7e 	bl	8009d04 <_Bfree>
 8009808:	2f00      	cmp	r7, #0
 800980a:	f43f aeab 	beq.w	8009564 <_dtoa_r+0x6c4>
 800980e:	f1b8 0f00 	cmp.w	r8, #0
 8009812:	d005      	beq.n	8009820 <_dtoa_r+0x980>
 8009814:	45b8      	cmp	r8, r7
 8009816:	d003      	beq.n	8009820 <_dtoa_r+0x980>
 8009818:	4641      	mov	r1, r8
 800981a:	4620      	mov	r0, r4
 800981c:	f000 fa72 	bl	8009d04 <_Bfree>
 8009820:	4639      	mov	r1, r7
 8009822:	4620      	mov	r0, r4
 8009824:	f000 fa6e 	bl	8009d04 <_Bfree>
 8009828:	e69c      	b.n	8009564 <_dtoa_r+0x6c4>
 800982a:	2600      	movs	r6, #0
 800982c:	4637      	mov	r7, r6
 800982e:	e7e1      	b.n	80097f4 <_dtoa_r+0x954>
 8009830:	46bb      	mov	fp, r7
 8009832:	4637      	mov	r7, r6
 8009834:	e599      	b.n	800936a <_dtoa_r+0x4ca>
 8009836:	bf00      	nop
 8009838:	40240000 	.word	0x40240000
 800983c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800983e:	2b00      	cmp	r3, #0
 8009840:	f000 80c8 	beq.w	80099d4 <_dtoa_r+0xb34>
 8009844:	9b04      	ldr	r3, [sp, #16]
 8009846:	9301      	str	r3, [sp, #4]
 8009848:	2d00      	cmp	r5, #0
 800984a:	dd05      	ble.n	8009858 <_dtoa_r+0x9b8>
 800984c:	4639      	mov	r1, r7
 800984e:	462a      	mov	r2, r5
 8009850:	4620      	mov	r0, r4
 8009852:	f000 fc27 	bl	800a0a4 <__lshift>
 8009856:	4607      	mov	r7, r0
 8009858:	f1b8 0f00 	cmp.w	r8, #0
 800985c:	d05b      	beq.n	8009916 <_dtoa_r+0xa76>
 800985e:	6879      	ldr	r1, [r7, #4]
 8009860:	4620      	mov	r0, r4
 8009862:	f000 fa0f 	bl	8009c84 <_Balloc>
 8009866:	4605      	mov	r5, r0
 8009868:	b928      	cbnz	r0, 8009876 <_dtoa_r+0x9d6>
 800986a:	4b83      	ldr	r3, [pc, #524]	; (8009a78 <_dtoa_r+0xbd8>)
 800986c:	4602      	mov	r2, r0
 800986e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009872:	f7ff bb2e 	b.w	8008ed2 <_dtoa_r+0x32>
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	3202      	adds	r2, #2
 800987a:	0092      	lsls	r2, r2, #2
 800987c:	f107 010c 	add.w	r1, r7, #12
 8009880:	300c      	adds	r0, #12
 8009882:	f7ff fa76 	bl	8008d72 <memcpy>
 8009886:	2201      	movs	r2, #1
 8009888:	4629      	mov	r1, r5
 800988a:	4620      	mov	r0, r4
 800988c:	f000 fc0a 	bl	800a0a4 <__lshift>
 8009890:	9b00      	ldr	r3, [sp, #0]
 8009892:	3301      	adds	r3, #1
 8009894:	9304      	str	r3, [sp, #16]
 8009896:	e9dd 2300 	ldrd	r2, r3, [sp]
 800989a:	4413      	add	r3, r2
 800989c:	9308      	str	r3, [sp, #32]
 800989e:	9b02      	ldr	r3, [sp, #8]
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	46b8      	mov	r8, r7
 80098a6:	9306      	str	r3, [sp, #24]
 80098a8:	4607      	mov	r7, r0
 80098aa:	9b04      	ldr	r3, [sp, #16]
 80098ac:	4631      	mov	r1, r6
 80098ae:	3b01      	subs	r3, #1
 80098b0:	4650      	mov	r0, sl
 80098b2:	9301      	str	r3, [sp, #4]
 80098b4:	f7ff fa6b 	bl	8008d8e <quorem>
 80098b8:	4641      	mov	r1, r8
 80098ba:	9002      	str	r0, [sp, #8]
 80098bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80098c0:	4650      	mov	r0, sl
 80098c2:	f000 fc5b 	bl	800a17c <__mcmp>
 80098c6:	463a      	mov	r2, r7
 80098c8:	9005      	str	r0, [sp, #20]
 80098ca:	4631      	mov	r1, r6
 80098cc:	4620      	mov	r0, r4
 80098ce:	f000 fc71 	bl	800a1b4 <__mdiff>
 80098d2:	68c2      	ldr	r2, [r0, #12]
 80098d4:	4605      	mov	r5, r0
 80098d6:	bb02      	cbnz	r2, 800991a <_dtoa_r+0xa7a>
 80098d8:	4601      	mov	r1, r0
 80098da:	4650      	mov	r0, sl
 80098dc:	f000 fc4e 	bl	800a17c <__mcmp>
 80098e0:	4602      	mov	r2, r0
 80098e2:	4629      	mov	r1, r5
 80098e4:	4620      	mov	r0, r4
 80098e6:	9209      	str	r2, [sp, #36]	; 0x24
 80098e8:	f000 fa0c 	bl	8009d04 <_Bfree>
 80098ec:	9b07      	ldr	r3, [sp, #28]
 80098ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098f0:	9d04      	ldr	r5, [sp, #16]
 80098f2:	ea43 0102 	orr.w	r1, r3, r2
 80098f6:	9b06      	ldr	r3, [sp, #24]
 80098f8:	4319      	orrs	r1, r3
 80098fa:	d110      	bne.n	800991e <_dtoa_r+0xa7e>
 80098fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009900:	d029      	beq.n	8009956 <_dtoa_r+0xab6>
 8009902:	9b05      	ldr	r3, [sp, #20]
 8009904:	2b00      	cmp	r3, #0
 8009906:	dd02      	ble.n	800990e <_dtoa_r+0xa6e>
 8009908:	9b02      	ldr	r3, [sp, #8]
 800990a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800990e:	9b01      	ldr	r3, [sp, #4]
 8009910:	f883 9000 	strb.w	r9, [r3]
 8009914:	e774      	b.n	8009800 <_dtoa_r+0x960>
 8009916:	4638      	mov	r0, r7
 8009918:	e7ba      	b.n	8009890 <_dtoa_r+0x9f0>
 800991a:	2201      	movs	r2, #1
 800991c:	e7e1      	b.n	80098e2 <_dtoa_r+0xa42>
 800991e:	9b05      	ldr	r3, [sp, #20]
 8009920:	2b00      	cmp	r3, #0
 8009922:	db04      	blt.n	800992e <_dtoa_r+0xa8e>
 8009924:	9907      	ldr	r1, [sp, #28]
 8009926:	430b      	orrs	r3, r1
 8009928:	9906      	ldr	r1, [sp, #24]
 800992a:	430b      	orrs	r3, r1
 800992c:	d120      	bne.n	8009970 <_dtoa_r+0xad0>
 800992e:	2a00      	cmp	r2, #0
 8009930:	dded      	ble.n	800990e <_dtoa_r+0xa6e>
 8009932:	4651      	mov	r1, sl
 8009934:	2201      	movs	r2, #1
 8009936:	4620      	mov	r0, r4
 8009938:	f000 fbb4 	bl	800a0a4 <__lshift>
 800993c:	4631      	mov	r1, r6
 800993e:	4682      	mov	sl, r0
 8009940:	f000 fc1c 	bl	800a17c <__mcmp>
 8009944:	2800      	cmp	r0, #0
 8009946:	dc03      	bgt.n	8009950 <_dtoa_r+0xab0>
 8009948:	d1e1      	bne.n	800990e <_dtoa_r+0xa6e>
 800994a:	f019 0f01 	tst.w	r9, #1
 800994e:	d0de      	beq.n	800990e <_dtoa_r+0xa6e>
 8009950:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009954:	d1d8      	bne.n	8009908 <_dtoa_r+0xa68>
 8009956:	9a01      	ldr	r2, [sp, #4]
 8009958:	2339      	movs	r3, #57	; 0x39
 800995a:	7013      	strb	r3, [r2, #0]
 800995c:	462b      	mov	r3, r5
 800995e:	461d      	mov	r5, r3
 8009960:	3b01      	subs	r3, #1
 8009962:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009966:	2a39      	cmp	r2, #57	; 0x39
 8009968:	d06c      	beq.n	8009a44 <_dtoa_r+0xba4>
 800996a:	3201      	adds	r2, #1
 800996c:	701a      	strb	r2, [r3, #0]
 800996e:	e747      	b.n	8009800 <_dtoa_r+0x960>
 8009970:	2a00      	cmp	r2, #0
 8009972:	dd07      	ble.n	8009984 <_dtoa_r+0xae4>
 8009974:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009978:	d0ed      	beq.n	8009956 <_dtoa_r+0xab6>
 800997a:	9a01      	ldr	r2, [sp, #4]
 800997c:	f109 0301 	add.w	r3, r9, #1
 8009980:	7013      	strb	r3, [r2, #0]
 8009982:	e73d      	b.n	8009800 <_dtoa_r+0x960>
 8009984:	9b04      	ldr	r3, [sp, #16]
 8009986:	9a08      	ldr	r2, [sp, #32]
 8009988:	f803 9c01 	strb.w	r9, [r3, #-1]
 800998c:	4293      	cmp	r3, r2
 800998e:	d043      	beq.n	8009a18 <_dtoa_r+0xb78>
 8009990:	4651      	mov	r1, sl
 8009992:	2300      	movs	r3, #0
 8009994:	220a      	movs	r2, #10
 8009996:	4620      	mov	r0, r4
 8009998:	f000 f9d6 	bl	8009d48 <__multadd>
 800999c:	45b8      	cmp	r8, r7
 800999e:	4682      	mov	sl, r0
 80099a0:	f04f 0300 	mov.w	r3, #0
 80099a4:	f04f 020a 	mov.w	r2, #10
 80099a8:	4641      	mov	r1, r8
 80099aa:	4620      	mov	r0, r4
 80099ac:	d107      	bne.n	80099be <_dtoa_r+0xb1e>
 80099ae:	f000 f9cb 	bl	8009d48 <__multadd>
 80099b2:	4680      	mov	r8, r0
 80099b4:	4607      	mov	r7, r0
 80099b6:	9b04      	ldr	r3, [sp, #16]
 80099b8:	3301      	adds	r3, #1
 80099ba:	9304      	str	r3, [sp, #16]
 80099bc:	e775      	b.n	80098aa <_dtoa_r+0xa0a>
 80099be:	f000 f9c3 	bl	8009d48 <__multadd>
 80099c2:	4639      	mov	r1, r7
 80099c4:	4680      	mov	r8, r0
 80099c6:	2300      	movs	r3, #0
 80099c8:	220a      	movs	r2, #10
 80099ca:	4620      	mov	r0, r4
 80099cc:	f000 f9bc 	bl	8009d48 <__multadd>
 80099d0:	4607      	mov	r7, r0
 80099d2:	e7f0      	b.n	80099b6 <_dtoa_r+0xb16>
 80099d4:	9b04      	ldr	r3, [sp, #16]
 80099d6:	9301      	str	r3, [sp, #4]
 80099d8:	9d00      	ldr	r5, [sp, #0]
 80099da:	4631      	mov	r1, r6
 80099dc:	4650      	mov	r0, sl
 80099de:	f7ff f9d6 	bl	8008d8e <quorem>
 80099e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80099e6:	9b00      	ldr	r3, [sp, #0]
 80099e8:	f805 9b01 	strb.w	r9, [r5], #1
 80099ec:	1aea      	subs	r2, r5, r3
 80099ee:	9b01      	ldr	r3, [sp, #4]
 80099f0:	4293      	cmp	r3, r2
 80099f2:	dd07      	ble.n	8009a04 <_dtoa_r+0xb64>
 80099f4:	4651      	mov	r1, sl
 80099f6:	2300      	movs	r3, #0
 80099f8:	220a      	movs	r2, #10
 80099fa:	4620      	mov	r0, r4
 80099fc:	f000 f9a4 	bl	8009d48 <__multadd>
 8009a00:	4682      	mov	sl, r0
 8009a02:	e7ea      	b.n	80099da <_dtoa_r+0xb3a>
 8009a04:	9b01      	ldr	r3, [sp, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	bfc8      	it	gt
 8009a0a:	461d      	movgt	r5, r3
 8009a0c:	9b00      	ldr	r3, [sp, #0]
 8009a0e:	bfd8      	it	le
 8009a10:	2501      	movle	r5, #1
 8009a12:	441d      	add	r5, r3
 8009a14:	f04f 0800 	mov.w	r8, #0
 8009a18:	4651      	mov	r1, sl
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f000 fb41 	bl	800a0a4 <__lshift>
 8009a22:	4631      	mov	r1, r6
 8009a24:	4682      	mov	sl, r0
 8009a26:	f000 fba9 	bl	800a17c <__mcmp>
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	dc96      	bgt.n	800995c <_dtoa_r+0xabc>
 8009a2e:	d102      	bne.n	8009a36 <_dtoa_r+0xb96>
 8009a30:	f019 0f01 	tst.w	r9, #1
 8009a34:	d192      	bne.n	800995c <_dtoa_r+0xabc>
 8009a36:	462b      	mov	r3, r5
 8009a38:	461d      	mov	r5, r3
 8009a3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a3e:	2a30      	cmp	r2, #48	; 0x30
 8009a40:	d0fa      	beq.n	8009a38 <_dtoa_r+0xb98>
 8009a42:	e6dd      	b.n	8009800 <_dtoa_r+0x960>
 8009a44:	9a00      	ldr	r2, [sp, #0]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d189      	bne.n	800995e <_dtoa_r+0xabe>
 8009a4a:	f10b 0b01 	add.w	fp, fp, #1
 8009a4e:	2331      	movs	r3, #49	; 0x31
 8009a50:	e796      	b.n	8009980 <_dtoa_r+0xae0>
 8009a52:	4b0a      	ldr	r3, [pc, #40]	; (8009a7c <_dtoa_r+0xbdc>)
 8009a54:	f7ff ba99 	b.w	8008f8a <_dtoa_r+0xea>
 8009a58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f47f aa6d 	bne.w	8008f3a <_dtoa_r+0x9a>
 8009a60:	4b07      	ldr	r3, [pc, #28]	; (8009a80 <_dtoa_r+0xbe0>)
 8009a62:	f7ff ba92 	b.w	8008f8a <_dtoa_r+0xea>
 8009a66:	9b01      	ldr	r3, [sp, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	dcb5      	bgt.n	80099d8 <_dtoa_r+0xb38>
 8009a6c:	9b07      	ldr	r3, [sp, #28]
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	f73f aeb1 	bgt.w	80097d6 <_dtoa_r+0x936>
 8009a74:	e7b0      	b.n	80099d8 <_dtoa_r+0xb38>
 8009a76:	bf00      	nop
 8009a78:	0800b3dd 	.word	0x0800b3dd
 8009a7c:	0800b33d 	.word	0x0800b33d
 8009a80:	0800b361 	.word	0x0800b361

08009a84 <_free_r>:
 8009a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a86:	2900      	cmp	r1, #0
 8009a88:	d044      	beq.n	8009b14 <_free_r+0x90>
 8009a8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a8e:	9001      	str	r0, [sp, #4]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f1a1 0404 	sub.w	r4, r1, #4
 8009a96:	bfb8      	it	lt
 8009a98:	18e4      	addlt	r4, r4, r3
 8009a9a:	f000 f8e7 	bl	8009c6c <__malloc_lock>
 8009a9e:	4a1e      	ldr	r2, [pc, #120]	; (8009b18 <_free_r+0x94>)
 8009aa0:	9801      	ldr	r0, [sp, #4]
 8009aa2:	6813      	ldr	r3, [r2, #0]
 8009aa4:	b933      	cbnz	r3, 8009ab4 <_free_r+0x30>
 8009aa6:	6063      	str	r3, [r4, #4]
 8009aa8:	6014      	str	r4, [r2, #0]
 8009aaa:	b003      	add	sp, #12
 8009aac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ab0:	f000 b8e2 	b.w	8009c78 <__malloc_unlock>
 8009ab4:	42a3      	cmp	r3, r4
 8009ab6:	d908      	bls.n	8009aca <_free_r+0x46>
 8009ab8:	6825      	ldr	r5, [r4, #0]
 8009aba:	1961      	adds	r1, r4, r5
 8009abc:	428b      	cmp	r3, r1
 8009abe:	bf01      	itttt	eq
 8009ac0:	6819      	ldreq	r1, [r3, #0]
 8009ac2:	685b      	ldreq	r3, [r3, #4]
 8009ac4:	1949      	addeq	r1, r1, r5
 8009ac6:	6021      	streq	r1, [r4, #0]
 8009ac8:	e7ed      	b.n	8009aa6 <_free_r+0x22>
 8009aca:	461a      	mov	r2, r3
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	b10b      	cbz	r3, 8009ad4 <_free_r+0x50>
 8009ad0:	42a3      	cmp	r3, r4
 8009ad2:	d9fa      	bls.n	8009aca <_free_r+0x46>
 8009ad4:	6811      	ldr	r1, [r2, #0]
 8009ad6:	1855      	adds	r5, r2, r1
 8009ad8:	42a5      	cmp	r5, r4
 8009ada:	d10b      	bne.n	8009af4 <_free_r+0x70>
 8009adc:	6824      	ldr	r4, [r4, #0]
 8009ade:	4421      	add	r1, r4
 8009ae0:	1854      	adds	r4, r2, r1
 8009ae2:	42a3      	cmp	r3, r4
 8009ae4:	6011      	str	r1, [r2, #0]
 8009ae6:	d1e0      	bne.n	8009aaa <_free_r+0x26>
 8009ae8:	681c      	ldr	r4, [r3, #0]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	6053      	str	r3, [r2, #4]
 8009aee:	440c      	add	r4, r1
 8009af0:	6014      	str	r4, [r2, #0]
 8009af2:	e7da      	b.n	8009aaa <_free_r+0x26>
 8009af4:	d902      	bls.n	8009afc <_free_r+0x78>
 8009af6:	230c      	movs	r3, #12
 8009af8:	6003      	str	r3, [r0, #0]
 8009afa:	e7d6      	b.n	8009aaa <_free_r+0x26>
 8009afc:	6825      	ldr	r5, [r4, #0]
 8009afe:	1961      	adds	r1, r4, r5
 8009b00:	428b      	cmp	r3, r1
 8009b02:	bf04      	itt	eq
 8009b04:	6819      	ldreq	r1, [r3, #0]
 8009b06:	685b      	ldreq	r3, [r3, #4]
 8009b08:	6063      	str	r3, [r4, #4]
 8009b0a:	bf04      	itt	eq
 8009b0c:	1949      	addeq	r1, r1, r5
 8009b0e:	6021      	streq	r1, [r4, #0]
 8009b10:	6054      	str	r4, [r2, #4]
 8009b12:	e7ca      	b.n	8009aaa <_free_r+0x26>
 8009b14:	b003      	add	sp, #12
 8009b16:	bd30      	pop	{r4, r5, pc}
 8009b18:	20005730 	.word	0x20005730

08009b1c <malloc>:
 8009b1c:	4b02      	ldr	r3, [pc, #8]	; (8009b28 <malloc+0xc>)
 8009b1e:	4601      	mov	r1, r0
 8009b20:	6818      	ldr	r0, [r3, #0]
 8009b22:	f000 b823 	b.w	8009b6c <_malloc_r>
 8009b26:	bf00      	nop
 8009b28:	20000120 	.word	0x20000120

08009b2c <sbrk_aligned>:
 8009b2c:	b570      	push	{r4, r5, r6, lr}
 8009b2e:	4e0e      	ldr	r6, [pc, #56]	; (8009b68 <sbrk_aligned+0x3c>)
 8009b30:	460c      	mov	r4, r1
 8009b32:	6831      	ldr	r1, [r6, #0]
 8009b34:	4605      	mov	r5, r0
 8009b36:	b911      	cbnz	r1, 8009b3e <sbrk_aligned+0x12>
 8009b38:	f000 fe1c 	bl	800a774 <_sbrk_r>
 8009b3c:	6030      	str	r0, [r6, #0]
 8009b3e:	4621      	mov	r1, r4
 8009b40:	4628      	mov	r0, r5
 8009b42:	f000 fe17 	bl	800a774 <_sbrk_r>
 8009b46:	1c43      	adds	r3, r0, #1
 8009b48:	d00a      	beq.n	8009b60 <sbrk_aligned+0x34>
 8009b4a:	1cc4      	adds	r4, r0, #3
 8009b4c:	f024 0403 	bic.w	r4, r4, #3
 8009b50:	42a0      	cmp	r0, r4
 8009b52:	d007      	beq.n	8009b64 <sbrk_aligned+0x38>
 8009b54:	1a21      	subs	r1, r4, r0
 8009b56:	4628      	mov	r0, r5
 8009b58:	f000 fe0c 	bl	800a774 <_sbrk_r>
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	d101      	bne.n	8009b64 <sbrk_aligned+0x38>
 8009b60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009b64:	4620      	mov	r0, r4
 8009b66:	bd70      	pop	{r4, r5, r6, pc}
 8009b68:	20005734 	.word	0x20005734

08009b6c <_malloc_r>:
 8009b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b70:	1ccd      	adds	r5, r1, #3
 8009b72:	f025 0503 	bic.w	r5, r5, #3
 8009b76:	3508      	adds	r5, #8
 8009b78:	2d0c      	cmp	r5, #12
 8009b7a:	bf38      	it	cc
 8009b7c:	250c      	movcc	r5, #12
 8009b7e:	2d00      	cmp	r5, #0
 8009b80:	4607      	mov	r7, r0
 8009b82:	db01      	blt.n	8009b88 <_malloc_r+0x1c>
 8009b84:	42a9      	cmp	r1, r5
 8009b86:	d905      	bls.n	8009b94 <_malloc_r+0x28>
 8009b88:	230c      	movs	r3, #12
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	2600      	movs	r6, #0
 8009b8e:	4630      	mov	r0, r6
 8009b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009c68 <_malloc_r+0xfc>
 8009b98:	f000 f868 	bl	8009c6c <__malloc_lock>
 8009b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8009ba0:	461c      	mov	r4, r3
 8009ba2:	bb5c      	cbnz	r4, 8009bfc <_malloc_r+0x90>
 8009ba4:	4629      	mov	r1, r5
 8009ba6:	4638      	mov	r0, r7
 8009ba8:	f7ff ffc0 	bl	8009b2c <sbrk_aligned>
 8009bac:	1c43      	adds	r3, r0, #1
 8009bae:	4604      	mov	r4, r0
 8009bb0:	d155      	bne.n	8009c5e <_malloc_r+0xf2>
 8009bb2:	f8d8 4000 	ldr.w	r4, [r8]
 8009bb6:	4626      	mov	r6, r4
 8009bb8:	2e00      	cmp	r6, #0
 8009bba:	d145      	bne.n	8009c48 <_malloc_r+0xdc>
 8009bbc:	2c00      	cmp	r4, #0
 8009bbe:	d048      	beq.n	8009c52 <_malloc_r+0xe6>
 8009bc0:	6823      	ldr	r3, [r4, #0]
 8009bc2:	4631      	mov	r1, r6
 8009bc4:	4638      	mov	r0, r7
 8009bc6:	eb04 0903 	add.w	r9, r4, r3
 8009bca:	f000 fdd3 	bl	800a774 <_sbrk_r>
 8009bce:	4581      	cmp	r9, r0
 8009bd0:	d13f      	bne.n	8009c52 <_malloc_r+0xe6>
 8009bd2:	6821      	ldr	r1, [r4, #0]
 8009bd4:	1a6d      	subs	r5, r5, r1
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	4638      	mov	r0, r7
 8009bda:	f7ff ffa7 	bl	8009b2c <sbrk_aligned>
 8009bde:	3001      	adds	r0, #1
 8009be0:	d037      	beq.n	8009c52 <_malloc_r+0xe6>
 8009be2:	6823      	ldr	r3, [r4, #0]
 8009be4:	442b      	add	r3, r5
 8009be6:	6023      	str	r3, [r4, #0]
 8009be8:	f8d8 3000 	ldr.w	r3, [r8]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d038      	beq.n	8009c62 <_malloc_r+0xf6>
 8009bf0:	685a      	ldr	r2, [r3, #4]
 8009bf2:	42a2      	cmp	r2, r4
 8009bf4:	d12b      	bne.n	8009c4e <_malloc_r+0xe2>
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	605a      	str	r2, [r3, #4]
 8009bfa:	e00f      	b.n	8009c1c <_malloc_r+0xb0>
 8009bfc:	6822      	ldr	r2, [r4, #0]
 8009bfe:	1b52      	subs	r2, r2, r5
 8009c00:	d41f      	bmi.n	8009c42 <_malloc_r+0xd6>
 8009c02:	2a0b      	cmp	r2, #11
 8009c04:	d917      	bls.n	8009c36 <_malloc_r+0xca>
 8009c06:	1961      	adds	r1, r4, r5
 8009c08:	42a3      	cmp	r3, r4
 8009c0a:	6025      	str	r5, [r4, #0]
 8009c0c:	bf18      	it	ne
 8009c0e:	6059      	strne	r1, [r3, #4]
 8009c10:	6863      	ldr	r3, [r4, #4]
 8009c12:	bf08      	it	eq
 8009c14:	f8c8 1000 	streq.w	r1, [r8]
 8009c18:	5162      	str	r2, [r4, r5]
 8009c1a:	604b      	str	r3, [r1, #4]
 8009c1c:	4638      	mov	r0, r7
 8009c1e:	f104 060b 	add.w	r6, r4, #11
 8009c22:	f000 f829 	bl	8009c78 <__malloc_unlock>
 8009c26:	f026 0607 	bic.w	r6, r6, #7
 8009c2a:	1d23      	adds	r3, r4, #4
 8009c2c:	1af2      	subs	r2, r6, r3
 8009c2e:	d0ae      	beq.n	8009b8e <_malloc_r+0x22>
 8009c30:	1b9b      	subs	r3, r3, r6
 8009c32:	50a3      	str	r3, [r4, r2]
 8009c34:	e7ab      	b.n	8009b8e <_malloc_r+0x22>
 8009c36:	42a3      	cmp	r3, r4
 8009c38:	6862      	ldr	r2, [r4, #4]
 8009c3a:	d1dd      	bne.n	8009bf8 <_malloc_r+0x8c>
 8009c3c:	f8c8 2000 	str.w	r2, [r8]
 8009c40:	e7ec      	b.n	8009c1c <_malloc_r+0xb0>
 8009c42:	4623      	mov	r3, r4
 8009c44:	6864      	ldr	r4, [r4, #4]
 8009c46:	e7ac      	b.n	8009ba2 <_malloc_r+0x36>
 8009c48:	4634      	mov	r4, r6
 8009c4a:	6876      	ldr	r6, [r6, #4]
 8009c4c:	e7b4      	b.n	8009bb8 <_malloc_r+0x4c>
 8009c4e:	4613      	mov	r3, r2
 8009c50:	e7cc      	b.n	8009bec <_malloc_r+0x80>
 8009c52:	230c      	movs	r3, #12
 8009c54:	603b      	str	r3, [r7, #0]
 8009c56:	4638      	mov	r0, r7
 8009c58:	f000 f80e 	bl	8009c78 <__malloc_unlock>
 8009c5c:	e797      	b.n	8009b8e <_malloc_r+0x22>
 8009c5e:	6025      	str	r5, [r4, #0]
 8009c60:	e7dc      	b.n	8009c1c <_malloc_r+0xb0>
 8009c62:	605b      	str	r3, [r3, #4]
 8009c64:	deff      	udf	#255	; 0xff
 8009c66:	bf00      	nop
 8009c68:	20005730 	.word	0x20005730

08009c6c <__malloc_lock>:
 8009c6c:	4801      	ldr	r0, [pc, #4]	; (8009c74 <__malloc_lock+0x8>)
 8009c6e:	f7ff b87e 	b.w	8008d6e <__retarget_lock_acquire_recursive>
 8009c72:	bf00      	nop
 8009c74:	2000572c 	.word	0x2000572c

08009c78 <__malloc_unlock>:
 8009c78:	4801      	ldr	r0, [pc, #4]	; (8009c80 <__malloc_unlock+0x8>)
 8009c7a:	f7ff b879 	b.w	8008d70 <__retarget_lock_release_recursive>
 8009c7e:	bf00      	nop
 8009c80:	2000572c 	.word	0x2000572c

08009c84 <_Balloc>:
 8009c84:	b570      	push	{r4, r5, r6, lr}
 8009c86:	69c6      	ldr	r6, [r0, #28]
 8009c88:	4604      	mov	r4, r0
 8009c8a:	460d      	mov	r5, r1
 8009c8c:	b976      	cbnz	r6, 8009cac <_Balloc+0x28>
 8009c8e:	2010      	movs	r0, #16
 8009c90:	f7ff ff44 	bl	8009b1c <malloc>
 8009c94:	4602      	mov	r2, r0
 8009c96:	61e0      	str	r0, [r4, #28]
 8009c98:	b920      	cbnz	r0, 8009ca4 <_Balloc+0x20>
 8009c9a:	4b18      	ldr	r3, [pc, #96]	; (8009cfc <_Balloc+0x78>)
 8009c9c:	4818      	ldr	r0, [pc, #96]	; (8009d00 <_Balloc+0x7c>)
 8009c9e:	216b      	movs	r1, #107	; 0x6b
 8009ca0:	f000 fd78 	bl	800a794 <__assert_func>
 8009ca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ca8:	6006      	str	r6, [r0, #0]
 8009caa:	60c6      	str	r6, [r0, #12]
 8009cac:	69e6      	ldr	r6, [r4, #28]
 8009cae:	68f3      	ldr	r3, [r6, #12]
 8009cb0:	b183      	cbz	r3, 8009cd4 <_Balloc+0x50>
 8009cb2:	69e3      	ldr	r3, [r4, #28]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cba:	b9b8      	cbnz	r0, 8009cec <_Balloc+0x68>
 8009cbc:	2101      	movs	r1, #1
 8009cbe:	fa01 f605 	lsl.w	r6, r1, r5
 8009cc2:	1d72      	adds	r2, r6, #5
 8009cc4:	0092      	lsls	r2, r2, #2
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f000 fd82 	bl	800a7d0 <_calloc_r>
 8009ccc:	b160      	cbz	r0, 8009ce8 <_Balloc+0x64>
 8009cce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009cd2:	e00e      	b.n	8009cf2 <_Balloc+0x6e>
 8009cd4:	2221      	movs	r2, #33	; 0x21
 8009cd6:	2104      	movs	r1, #4
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f000 fd79 	bl	800a7d0 <_calloc_r>
 8009cde:	69e3      	ldr	r3, [r4, #28]
 8009ce0:	60f0      	str	r0, [r6, #12]
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1e4      	bne.n	8009cb2 <_Balloc+0x2e>
 8009ce8:	2000      	movs	r0, #0
 8009cea:	bd70      	pop	{r4, r5, r6, pc}
 8009cec:	6802      	ldr	r2, [r0, #0]
 8009cee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009cf8:	e7f7      	b.n	8009cea <_Balloc+0x66>
 8009cfa:	bf00      	nop
 8009cfc:	0800b36e 	.word	0x0800b36e
 8009d00:	0800b3ee 	.word	0x0800b3ee

08009d04 <_Bfree>:
 8009d04:	b570      	push	{r4, r5, r6, lr}
 8009d06:	69c6      	ldr	r6, [r0, #28]
 8009d08:	4605      	mov	r5, r0
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	b976      	cbnz	r6, 8009d2c <_Bfree+0x28>
 8009d0e:	2010      	movs	r0, #16
 8009d10:	f7ff ff04 	bl	8009b1c <malloc>
 8009d14:	4602      	mov	r2, r0
 8009d16:	61e8      	str	r0, [r5, #28]
 8009d18:	b920      	cbnz	r0, 8009d24 <_Bfree+0x20>
 8009d1a:	4b09      	ldr	r3, [pc, #36]	; (8009d40 <_Bfree+0x3c>)
 8009d1c:	4809      	ldr	r0, [pc, #36]	; (8009d44 <_Bfree+0x40>)
 8009d1e:	218f      	movs	r1, #143	; 0x8f
 8009d20:	f000 fd38 	bl	800a794 <__assert_func>
 8009d24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d28:	6006      	str	r6, [r0, #0]
 8009d2a:	60c6      	str	r6, [r0, #12]
 8009d2c:	b13c      	cbz	r4, 8009d3e <_Bfree+0x3a>
 8009d2e:	69eb      	ldr	r3, [r5, #28]
 8009d30:	6862      	ldr	r2, [r4, #4]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d38:	6021      	str	r1, [r4, #0]
 8009d3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}
 8009d40:	0800b36e 	.word	0x0800b36e
 8009d44:	0800b3ee 	.word	0x0800b3ee

08009d48 <__multadd>:
 8009d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d4c:	690d      	ldr	r5, [r1, #16]
 8009d4e:	4607      	mov	r7, r0
 8009d50:	460c      	mov	r4, r1
 8009d52:	461e      	mov	r6, r3
 8009d54:	f101 0c14 	add.w	ip, r1, #20
 8009d58:	2000      	movs	r0, #0
 8009d5a:	f8dc 3000 	ldr.w	r3, [ip]
 8009d5e:	b299      	uxth	r1, r3
 8009d60:	fb02 6101 	mla	r1, r2, r1, r6
 8009d64:	0c1e      	lsrs	r6, r3, #16
 8009d66:	0c0b      	lsrs	r3, r1, #16
 8009d68:	fb02 3306 	mla	r3, r2, r6, r3
 8009d6c:	b289      	uxth	r1, r1
 8009d6e:	3001      	adds	r0, #1
 8009d70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d74:	4285      	cmp	r5, r0
 8009d76:	f84c 1b04 	str.w	r1, [ip], #4
 8009d7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d7e:	dcec      	bgt.n	8009d5a <__multadd+0x12>
 8009d80:	b30e      	cbz	r6, 8009dc6 <__multadd+0x7e>
 8009d82:	68a3      	ldr	r3, [r4, #8]
 8009d84:	42ab      	cmp	r3, r5
 8009d86:	dc19      	bgt.n	8009dbc <__multadd+0x74>
 8009d88:	6861      	ldr	r1, [r4, #4]
 8009d8a:	4638      	mov	r0, r7
 8009d8c:	3101      	adds	r1, #1
 8009d8e:	f7ff ff79 	bl	8009c84 <_Balloc>
 8009d92:	4680      	mov	r8, r0
 8009d94:	b928      	cbnz	r0, 8009da2 <__multadd+0x5a>
 8009d96:	4602      	mov	r2, r0
 8009d98:	4b0c      	ldr	r3, [pc, #48]	; (8009dcc <__multadd+0x84>)
 8009d9a:	480d      	ldr	r0, [pc, #52]	; (8009dd0 <__multadd+0x88>)
 8009d9c:	21ba      	movs	r1, #186	; 0xba
 8009d9e:	f000 fcf9 	bl	800a794 <__assert_func>
 8009da2:	6922      	ldr	r2, [r4, #16]
 8009da4:	3202      	adds	r2, #2
 8009da6:	f104 010c 	add.w	r1, r4, #12
 8009daa:	0092      	lsls	r2, r2, #2
 8009dac:	300c      	adds	r0, #12
 8009dae:	f7fe ffe0 	bl	8008d72 <memcpy>
 8009db2:	4621      	mov	r1, r4
 8009db4:	4638      	mov	r0, r7
 8009db6:	f7ff ffa5 	bl	8009d04 <_Bfree>
 8009dba:	4644      	mov	r4, r8
 8009dbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009dc0:	3501      	adds	r5, #1
 8009dc2:	615e      	str	r6, [r3, #20]
 8009dc4:	6125      	str	r5, [r4, #16]
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dcc:	0800b3dd 	.word	0x0800b3dd
 8009dd0:	0800b3ee 	.word	0x0800b3ee

08009dd4 <__hi0bits>:
 8009dd4:	0c03      	lsrs	r3, r0, #16
 8009dd6:	041b      	lsls	r3, r3, #16
 8009dd8:	b9d3      	cbnz	r3, 8009e10 <__hi0bits+0x3c>
 8009dda:	0400      	lsls	r0, r0, #16
 8009ddc:	2310      	movs	r3, #16
 8009dde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009de2:	bf04      	itt	eq
 8009de4:	0200      	lsleq	r0, r0, #8
 8009de6:	3308      	addeq	r3, #8
 8009de8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009dec:	bf04      	itt	eq
 8009dee:	0100      	lsleq	r0, r0, #4
 8009df0:	3304      	addeq	r3, #4
 8009df2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009df6:	bf04      	itt	eq
 8009df8:	0080      	lsleq	r0, r0, #2
 8009dfa:	3302      	addeq	r3, #2
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	db05      	blt.n	8009e0c <__hi0bits+0x38>
 8009e00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e04:	f103 0301 	add.w	r3, r3, #1
 8009e08:	bf08      	it	eq
 8009e0a:	2320      	moveq	r3, #32
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	4770      	bx	lr
 8009e10:	2300      	movs	r3, #0
 8009e12:	e7e4      	b.n	8009dde <__hi0bits+0xa>

08009e14 <__lo0bits>:
 8009e14:	6803      	ldr	r3, [r0, #0]
 8009e16:	f013 0207 	ands.w	r2, r3, #7
 8009e1a:	d00c      	beq.n	8009e36 <__lo0bits+0x22>
 8009e1c:	07d9      	lsls	r1, r3, #31
 8009e1e:	d422      	bmi.n	8009e66 <__lo0bits+0x52>
 8009e20:	079a      	lsls	r2, r3, #30
 8009e22:	bf49      	itett	mi
 8009e24:	085b      	lsrmi	r3, r3, #1
 8009e26:	089b      	lsrpl	r3, r3, #2
 8009e28:	6003      	strmi	r3, [r0, #0]
 8009e2a:	2201      	movmi	r2, #1
 8009e2c:	bf5c      	itt	pl
 8009e2e:	6003      	strpl	r3, [r0, #0]
 8009e30:	2202      	movpl	r2, #2
 8009e32:	4610      	mov	r0, r2
 8009e34:	4770      	bx	lr
 8009e36:	b299      	uxth	r1, r3
 8009e38:	b909      	cbnz	r1, 8009e3e <__lo0bits+0x2a>
 8009e3a:	0c1b      	lsrs	r3, r3, #16
 8009e3c:	2210      	movs	r2, #16
 8009e3e:	b2d9      	uxtb	r1, r3
 8009e40:	b909      	cbnz	r1, 8009e46 <__lo0bits+0x32>
 8009e42:	3208      	adds	r2, #8
 8009e44:	0a1b      	lsrs	r3, r3, #8
 8009e46:	0719      	lsls	r1, r3, #28
 8009e48:	bf04      	itt	eq
 8009e4a:	091b      	lsreq	r3, r3, #4
 8009e4c:	3204      	addeq	r2, #4
 8009e4e:	0799      	lsls	r1, r3, #30
 8009e50:	bf04      	itt	eq
 8009e52:	089b      	lsreq	r3, r3, #2
 8009e54:	3202      	addeq	r2, #2
 8009e56:	07d9      	lsls	r1, r3, #31
 8009e58:	d403      	bmi.n	8009e62 <__lo0bits+0x4e>
 8009e5a:	085b      	lsrs	r3, r3, #1
 8009e5c:	f102 0201 	add.w	r2, r2, #1
 8009e60:	d003      	beq.n	8009e6a <__lo0bits+0x56>
 8009e62:	6003      	str	r3, [r0, #0]
 8009e64:	e7e5      	b.n	8009e32 <__lo0bits+0x1e>
 8009e66:	2200      	movs	r2, #0
 8009e68:	e7e3      	b.n	8009e32 <__lo0bits+0x1e>
 8009e6a:	2220      	movs	r2, #32
 8009e6c:	e7e1      	b.n	8009e32 <__lo0bits+0x1e>
	...

08009e70 <__i2b>:
 8009e70:	b510      	push	{r4, lr}
 8009e72:	460c      	mov	r4, r1
 8009e74:	2101      	movs	r1, #1
 8009e76:	f7ff ff05 	bl	8009c84 <_Balloc>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	b928      	cbnz	r0, 8009e8a <__i2b+0x1a>
 8009e7e:	4b05      	ldr	r3, [pc, #20]	; (8009e94 <__i2b+0x24>)
 8009e80:	4805      	ldr	r0, [pc, #20]	; (8009e98 <__i2b+0x28>)
 8009e82:	f240 1145 	movw	r1, #325	; 0x145
 8009e86:	f000 fc85 	bl	800a794 <__assert_func>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	6144      	str	r4, [r0, #20]
 8009e8e:	6103      	str	r3, [r0, #16]
 8009e90:	bd10      	pop	{r4, pc}
 8009e92:	bf00      	nop
 8009e94:	0800b3dd 	.word	0x0800b3dd
 8009e98:	0800b3ee 	.word	0x0800b3ee

08009e9c <__multiply>:
 8009e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea0:	4691      	mov	r9, r2
 8009ea2:	690a      	ldr	r2, [r1, #16]
 8009ea4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	bfb8      	it	lt
 8009eac:	460b      	movlt	r3, r1
 8009eae:	460c      	mov	r4, r1
 8009eb0:	bfbc      	itt	lt
 8009eb2:	464c      	movlt	r4, r9
 8009eb4:	4699      	movlt	r9, r3
 8009eb6:	6927      	ldr	r7, [r4, #16]
 8009eb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ebc:	68a3      	ldr	r3, [r4, #8]
 8009ebe:	6861      	ldr	r1, [r4, #4]
 8009ec0:	eb07 060a 	add.w	r6, r7, sl
 8009ec4:	42b3      	cmp	r3, r6
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	bfb8      	it	lt
 8009eca:	3101      	addlt	r1, #1
 8009ecc:	f7ff feda 	bl	8009c84 <_Balloc>
 8009ed0:	b930      	cbnz	r0, 8009ee0 <__multiply+0x44>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	4b44      	ldr	r3, [pc, #272]	; (8009fe8 <__multiply+0x14c>)
 8009ed6:	4845      	ldr	r0, [pc, #276]	; (8009fec <__multiply+0x150>)
 8009ed8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009edc:	f000 fc5a 	bl	800a794 <__assert_func>
 8009ee0:	f100 0514 	add.w	r5, r0, #20
 8009ee4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ee8:	462b      	mov	r3, r5
 8009eea:	2200      	movs	r2, #0
 8009eec:	4543      	cmp	r3, r8
 8009eee:	d321      	bcc.n	8009f34 <__multiply+0x98>
 8009ef0:	f104 0314 	add.w	r3, r4, #20
 8009ef4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ef8:	f109 0314 	add.w	r3, r9, #20
 8009efc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009f00:	9202      	str	r2, [sp, #8]
 8009f02:	1b3a      	subs	r2, r7, r4
 8009f04:	3a15      	subs	r2, #21
 8009f06:	f022 0203 	bic.w	r2, r2, #3
 8009f0a:	3204      	adds	r2, #4
 8009f0c:	f104 0115 	add.w	r1, r4, #21
 8009f10:	428f      	cmp	r7, r1
 8009f12:	bf38      	it	cc
 8009f14:	2204      	movcc	r2, #4
 8009f16:	9201      	str	r2, [sp, #4]
 8009f18:	9a02      	ldr	r2, [sp, #8]
 8009f1a:	9303      	str	r3, [sp, #12]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d80c      	bhi.n	8009f3a <__multiply+0x9e>
 8009f20:	2e00      	cmp	r6, #0
 8009f22:	dd03      	ble.n	8009f2c <__multiply+0x90>
 8009f24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d05b      	beq.n	8009fe4 <__multiply+0x148>
 8009f2c:	6106      	str	r6, [r0, #16]
 8009f2e:	b005      	add	sp, #20
 8009f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f34:	f843 2b04 	str.w	r2, [r3], #4
 8009f38:	e7d8      	b.n	8009eec <__multiply+0x50>
 8009f3a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f3e:	f1ba 0f00 	cmp.w	sl, #0
 8009f42:	d024      	beq.n	8009f8e <__multiply+0xf2>
 8009f44:	f104 0e14 	add.w	lr, r4, #20
 8009f48:	46a9      	mov	r9, r5
 8009f4a:	f04f 0c00 	mov.w	ip, #0
 8009f4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009f52:	f8d9 1000 	ldr.w	r1, [r9]
 8009f56:	fa1f fb82 	uxth.w	fp, r2
 8009f5a:	b289      	uxth	r1, r1
 8009f5c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009f60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009f64:	f8d9 2000 	ldr.w	r2, [r9]
 8009f68:	4461      	add	r1, ip
 8009f6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f6e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009f72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f76:	b289      	uxth	r1, r1
 8009f78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009f7c:	4577      	cmp	r7, lr
 8009f7e:	f849 1b04 	str.w	r1, [r9], #4
 8009f82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f86:	d8e2      	bhi.n	8009f4e <__multiply+0xb2>
 8009f88:	9a01      	ldr	r2, [sp, #4]
 8009f8a:	f845 c002 	str.w	ip, [r5, r2]
 8009f8e:	9a03      	ldr	r2, [sp, #12]
 8009f90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f94:	3304      	adds	r3, #4
 8009f96:	f1b9 0f00 	cmp.w	r9, #0
 8009f9a:	d021      	beq.n	8009fe0 <__multiply+0x144>
 8009f9c:	6829      	ldr	r1, [r5, #0]
 8009f9e:	f104 0c14 	add.w	ip, r4, #20
 8009fa2:	46ae      	mov	lr, r5
 8009fa4:	f04f 0a00 	mov.w	sl, #0
 8009fa8:	f8bc b000 	ldrh.w	fp, [ip]
 8009fac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009fb0:	fb09 220b 	mla	r2, r9, fp, r2
 8009fb4:	4452      	add	r2, sl
 8009fb6:	b289      	uxth	r1, r1
 8009fb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009fbc:	f84e 1b04 	str.w	r1, [lr], #4
 8009fc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009fc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009fc8:	f8be 1000 	ldrh.w	r1, [lr]
 8009fcc:	fb09 110a 	mla	r1, r9, sl, r1
 8009fd0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009fd4:	4567      	cmp	r7, ip
 8009fd6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009fda:	d8e5      	bhi.n	8009fa8 <__multiply+0x10c>
 8009fdc:	9a01      	ldr	r2, [sp, #4]
 8009fde:	50a9      	str	r1, [r5, r2]
 8009fe0:	3504      	adds	r5, #4
 8009fe2:	e799      	b.n	8009f18 <__multiply+0x7c>
 8009fe4:	3e01      	subs	r6, #1
 8009fe6:	e79b      	b.n	8009f20 <__multiply+0x84>
 8009fe8:	0800b3dd 	.word	0x0800b3dd
 8009fec:	0800b3ee 	.word	0x0800b3ee

08009ff0 <__pow5mult>:
 8009ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ff4:	4615      	mov	r5, r2
 8009ff6:	f012 0203 	ands.w	r2, r2, #3
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	460f      	mov	r7, r1
 8009ffe:	d007      	beq.n	800a010 <__pow5mult+0x20>
 800a000:	4c25      	ldr	r4, [pc, #148]	; (800a098 <__pow5mult+0xa8>)
 800a002:	3a01      	subs	r2, #1
 800a004:	2300      	movs	r3, #0
 800a006:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a00a:	f7ff fe9d 	bl	8009d48 <__multadd>
 800a00e:	4607      	mov	r7, r0
 800a010:	10ad      	asrs	r5, r5, #2
 800a012:	d03d      	beq.n	800a090 <__pow5mult+0xa0>
 800a014:	69f4      	ldr	r4, [r6, #28]
 800a016:	b97c      	cbnz	r4, 800a038 <__pow5mult+0x48>
 800a018:	2010      	movs	r0, #16
 800a01a:	f7ff fd7f 	bl	8009b1c <malloc>
 800a01e:	4602      	mov	r2, r0
 800a020:	61f0      	str	r0, [r6, #28]
 800a022:	b928      	cbnz	r0, 800a030 <__pow5mult+0x40>
 800a024:	4b1d      	ldr	r3, [pc, #116]	; (800a09c <__pow5mult+0xac>)
 800a026:	481e      	ldr	r0, [pc, #120]	; (800a0a0 <__pow5mult+0xb0>)
 800a028:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a02c:	f000 fbb2 	bl	800a794 <__assert_func>
 800a030:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a034:	6004      	str	r4, [r0, #0]
 800a036:	60c4      	str	r4, [r0, #12]
 800a038:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a03c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a040:	b94c      	cbnz	r4, 800a056 <__pow5mult+0x66>
 800a042:	f240 2171 	movw	r1, #625	; 0x271
 800a046:	4630      	mov	r0, r6
 800a048:	f7ff ff12 	bl	8009e70 <__i2b>
 800a04c:	2300      	movs	r3, #0
 800a04e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a052:	4604      	mov	r4, r0
 800a054:	6003      	str	r3, [r0, #0]
 800a056:	f04f 0900 	mov.w	r9, #0
 800a05a:	07eb      	lsls	r3, r5, #31
 800a05c:	d50a      	bpl.n	800a074 <__pow5mult+0x84>
 800a05e:	4639      	mov	r1, r7
 800a060:	4622      	mov	r2, r4
 800a062:	4630      	mov	r0, r6
 800a064:	f7ff ff1a 	bl	8009e9c <__multiply>
 800a068:	4639      	mov	r1, r7
 800a06a:	4680      	mov	r8, r0
 800a06c:	4630      	mov	r0, r6
 800a06e:	f7ff fe49 	bl	8009d04 <_Bfree>
 800a072:	4647      	mov	r7, r8
 800a074:	106d      	asrs	r5, r5, #1
 800a076:	d00b      	beq.n	800a090 <__pow5mult+0xa0>
 800a078:	6820      	ldr	r0, [r4, #0]
 800a07a:	b938      	cbnz	r0, 800a08c <__pow5mult+0x9c>
 800a07c:	4622      	mov	r2, r4
 800a07e:	4621      	mov	r1, r4
 800a080:	4630      	mov	r0, r6
 800a082:	f7ff ff0b 	bl	8009e9c <__multiply>
 800a086:	6020      	str	r0, [r4, #0]
 800a088:	f8c0 9000 	str.w	r9, [r0]
 800a08c:	4604      	mov	r4, r0
 800a08e:	e7e4      	b.n	800a05a <__pow5mult+0x6a>
 800a090:	4638      	mov	r0, r7
 800a092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a096:	bf00      	nop
 800a098:	0800b538 	.word	0x0800b538
 800a09c:	0800b36e 	.word	0x0800b36e
 800a0a0:	0800b3ee 	.word	0x0800b3ee

0800a0a4 <__lshift>:
 800a0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a8:	460c      	mov	r4, r1
 800a0aa:	6849      	ldr	r1, [r1, #4]
 800a0ac:	6923      	ldr	r3, [r4, #16]
 800a0ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0b2:	68a3      	ldr	r3, [r4, #8]
 800a0b4:	4607      	mov	r7, r0
 800a0b6:	4691      	mov	r9, r2
 800a0b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a0bc:	f108 0601 	add.w	r6, r8, #1
 800a0c0:	42b3      	cmp	r3, r6
 800a0c2:	db0b      	blt.n	800a0dc <__lshift+0x38>
 800a0c4:	4638      	mov	r0, r7
 800a0c6:	f7ff fddd 	bl	8009c84 <_Balloc>
 800a0ca:	4605      	mov	r5, r0
 800a0cc:	b948      	cbnz	r0, 800a0e2 <__lshift+0x3e>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	4b28      	ldr	r3, [pc, #160]	; (800a174 <__lshift+0xd0>)
 800a0d2:	4829      	ldr	r0, [pc, #164]	; (800a178 <__lshift+0xd4>)
 800a0d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a0d8:	f000 fb5c 	bl	800a794 <__assert_func>
 800a0dc:	3101      	adds	r1, #1
 800a0de:	005b      	lsls	r3, r3, #1
 800a0e0:	e7ee      	b.n	800a0c0 <__lshift+0x1c>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	f100 0114 	add.w	r1, r0, #20
 800a0e8:	f100 0210 	add.w	r2, r0, #16
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	4553      	cmp	r3, sl
 800a0f0:	db33      	blt.n	800a15a <__lshift+0xb6>
 800a0f2:	6920      	ldr	r0, [r4, #16]
 800a0f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0f8:	f104 0314 	add.w	r3, r4, #20
 800a0fc:	f019 091f 	ands.w	r9, r9, #31
 800a100:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a104:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a108:	d02b      	beq.n	800a162 <__lshift+0xbe>
 800a10a:	f1c9 0e20 	rsb	lr, r9, #32
 800a10e:	468a      	mov	sl, r1
 800a110:	2200      	movs	r2, #0
 800a112:	6818      	ldr	r0, [r3, #0]
 800a114:	fa00 f009 	lsl.w	r0, r0, r9
 800a118:	4310      	orrs	r0, r2
 800a11a:	f84a 0b04 	str.w	r0, [sl], #4
 800a11e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a122:	459c      	cmp	ip, r3
 800a124:	fa22 f20e 	lsr.w	r2, r2, lr
 800a128:	d8f3      	bhi.n	800a112 <__lshift+0x6e>
 800a12a:	ebac 0304 	sub.w	r3, ip, r4
 800a12e:	3b15      	subs	r3, #21
 800a130:	f023 0303 	bic.w	r3, r3, #3
 800a134:	3304      	adds	r3, #4
 800a136:	f104 0015 	add.w	r0, r4, #21
 800a13a:	4584      	cmp	ip, r0
 800a13c:	bf38      	it	cc
 800a13e:	2304      	movcc	r3, #4
 800a140:	50ca      	str	r2, [r1, r3]
 800a142:	b10a      	cbz	r2, 800a148 <__lshift+0xa4>
 800a144:	f108 0602 	add.w	r6, r8, #2
 800a148:	3e01      	subs	r6, #1
 800a14a:	4638      	mov	r0, r7
 800a14c:	612e      	str	r6, [r5, #16]
 800a14e:	4621      	mov	r1, r4
 800a150:	f7ff fdd8 	bl	8009d04 <_Bfree>
 800a154:	4628      	mov	r0, r5
 800a156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a15a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a15e:	3301      	adds	r3, #1
 800a160:	e7c5      	b.n	800a0ee <__lshift+0x4a>
 800a162:	3904      	subs	r1, #4
 800a164:	f853 2b04 	ldr.w	r2, [r3], #4
 800a168:	f841 2f04 	str.w	r2, [r1, #4]!
 800a16c:	459c      	cmp	ip, r3
 800a16e:	d8f9      	bhi.n	800a164 <__lshift+0xc0>
 800a170:	e7ea      	b.n	800a148 <__lshift+0xa4>
 800a172:	bf00      	nop
 800a174:	0800b3dd 	.word	0x0800b3dd
 800a178:	0800b3ee 	.word	0x0800b3ee

0800a17c <__mcmp>:
 800a17c:	b530      	push	{r4, r5, lr}
 800a17e:	6902      	ldr	r2, [r0, #16]
 800a180:	690c      	ldr	r4, [r1, #16]
 800a182:	1b12      	subs	r2, r2, r4
 800a184:	d10e      	bne.n	800a1a4 <__mcmp+0x28>
 800a186:	f100 0314 	add.w	r3, r0, #20
 800a18a:	3114      	adds	r1, #20
 800a18c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a190:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a194:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a198:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a19c:	42a5      	cmp	r5, r4
 800a19e:	d003      	beq.n	800a1a8 <__mcmp+0x2c>
 800a1a0:	d305      	bcc.n	800a1ae <__mcmp+0x32>
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	4610      	mov	r0, r2
 800a1a6:	bd30      	pop	{r4, r5, pc}
 800a1a8:	4283      	cmp	r3, r0
 800a1aa:	d3f3      	bcc.n	800a194 <__mcmp+0x18>
 800a1ac:	e7fa      	b.n	800a1a4 <__mcmp+0x28>
 800a1ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1b2:	e7f7      	b.n	800a1a4 <__mcmp+0x28>

0800a1b4 <__mdiff>:
 800a1b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b8:	460c      	mov	r4, r1
 800a1ba:	4606      	mov	r6, r0
 800a1bc:	4611      	mov	r1, r2
 800a1be:	4620      	mov	r0, r4
 800a1c0:	4690      	mov	r8, r2
 800a1c2:	f7ff ffdb 	bl	800a17c <__mcmp>
 800a1c6:	1e05      	subs	r5, r0, #0
 800a1c8:	d110      	bne.n	800a1ec <__mdiff+0x38>
 800a1ca:	4629      	mov	r1, r5
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	f7ff fd59 	bl	8009c84 <_Balloc>
 800a1d2:	b930      	cbnz	r0, 800a1e2 <__mdiff+0x2e>
 800a1d4:	4b3a      	ldr	r3, [pc, #232]	; (800a2c0 <__mdiff+0x10c>)
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	f240 2137 	movw	r1, #567	; 0x237
 800a1dc:	4839      	ldr	r0, [pc, #228]	; (800a2c4 <__mdiff+0x110>)
 800a1de:	f000 fad9 	bl	800a794 <__assert_func>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a1e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ec:	bfa4      	itt	ge
 800a1ee:	4643      	movge	r3, r8
 800a1f0:	46a0      	movge	r8, r4
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a1f8:	bfa6      	itte	ge
 800a1fa:	461c      	movge	r4, r3
 800a1fc:	2500      	movge	r5, #0
 800a1fe:	2501      	movlt	r5, #1
 800a200:	f7ff fd40 	bl	8009c84 <_Balloc>
 800a204:	b920      	cbnz	r0, 800a210 <__mdiff+0x5c>
 800a206:	4b2e      	ldr	r3, [pc, #184]	; (800a2c0 <__mdiff+0x10c>)
 800a208:	4602      	mov	r2, r0
 800a20a:	f240 2145 	movw	r1, #581	; 0x245
 800a20e:	e7e5      	b.n	800a1dc <__mdiff+0x28>
 800a210:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a214:	6926      	ldr	r6, [r4, #16]
 800a216:	60c5      	str	r5, [r0, #12]
 800a218:	f104 0914 	add.w	r9, r4, #20
 800a21c:	f108 0514 	add.w	r5, r8, #20
 800a220:	f100 0e14 	add.w	lr, r0, #20
 800a224:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a228:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a22c:	f108 0210 	add.w	r2, r8, #16
 800a230:	46f2      	mov	sl, lr
 800a232:	2100      	movs	r1, #0
 800a234:	f859 3b04 	ldr.w	r3, [r9], #4
 800a238:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a23c:	fa11 f88b 	uxtah	r8, r1, fp
 800a240:	b299      	uxth	r1, r3
 800a242:	0c1b      	lsrs	r3, r3, #16
 800a244:	eba8 0801 	sub.w	r8, r8, r1
 800a248:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a24c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a250:	fa1f f888 	uxth.w	r8, r8
 800a254:	1419      	asrs	r1, r3, #16
 800a256:	454e      	cmp	r6, r9
 800a258:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a25c:	f84a 3b04 	str.w	r3, [sl], #4
 800a260:	d8e8      	bhi.n	800a234 <__mdiff+0x80>
 800a262:	1b33      	subs	r3, r6, r4
 800a264:	3b15      	subs	r3, #21
 800a266:	f023 0303 	bic.w	r3, r3, #3
 800a26a:	3304      	adds	r3, #4
 800a26c:	3415      	adds	r4, #21
 800a26e:	42a6      	cmp	r6, r4
 800a270:	bf38      	it	cc
 800a272:	2304      	movcc	r3, #4
 800a274:	441d      	add	r5, r3
 800a276:	4473      	add	r3, lr
 800a278:	469e      	mov	lr, r3
 800a27a:	462e      	mov	r6, r5
 800a27c:	4566      	cmp	r6, ip
 800a27e:	d30e      	bcc.n	800a29e <__mdiff+0xea>
 800a280:	f10c 0203 	add.w	r2, ip, #3
 800a284:	1b52      	subs	r2, r2, r5
 800a286:	f022 0203 	bic.w	r2, r2, #3
 800a28a:	3d03      	subs	r5, #3
 800a28c:	45ac      	cmp	ip, r5
 800a28e:	bf38      	it	cc
 800a290:	2200      	movcc	r2, #0
 800a292:	4413      	add	r3, r2
 800a294:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a298:	b17a      	cbz	r2, 800a2ba <__mdiff+0x106>
 800a29a:	6107      	str	r7, [r0, #16]
 800a29c:	e7a4      	b.n	800a1e8 <__mdiff+0x34>
 800a29e:	f856 8b04 	ldr.w	r8, [r6], #4
 800a2a2:	fa11 f288 	uxtah	r2, r1, r8
 800a2a6:	1414      	asrs	r4, r2, #16
 800a2a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a2ac:	b292      	uxth	r2, r2
 800a2ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a2b2:	f84e 2b04 	str.w	r2, [lr], #4
 800a2b6:	1421      	asrs	r1, r4, #16
 800a2b8:	e7e0      	b.n	800a27c <__mdiff+0xc8>
 800a2ba:	3f01      	subs	r7, #1
 800a2bc:	e7ea      	b.n	800a294 <__mdiff+0xe0>
 800a2be:	bf00      	nop
 800a2c0:	0800b3dd 	.word	0x0800b3dd
 800a2c4:	0800b3ee 	.word	0x0800b3ee

0800a2c8 <__d2b>:
 800a2c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2cc:	460f      	mov	r7, r1
 800a2ce:	2101      	movs	r1, #1
 800a2d0:	ec59 8b10 	vmov	r8, r9, d0
 800a2d4:	4616      	mov	r6, r2
 800a2d6:	f7ff fcd5 	bl	8009c84 <_Balloc>
 800a2da:	4604      	mov	r4, r0
 800a2dc:	b930      	cbnz	r0, 800a2ec <__d2b+0x24>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	4b24      	ldr	r3, [pc, #144]	; (800a374 <__d2b+0xac>)
 800a2e2:	4825      	ldr	r0, [pc, #148]	; (800a378 <__d2b+0xb0>)
 800a2e4:	f240 310f 	movw	r1, #783	; 0x30f
 800a2e8:	f000 fa54 	bl	800a794 <__assert_func>
 800a2ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a2f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2f4:	bb2d      	cbnz	r5, 800a342 <__d2b+0x7a>
 800a2f6:	9301      	str	r3, [sp, #4]
 800a2f8:	f1b8 0300 	subs.w	r3, r8, #0
 800a2fc:	d026      	beq.n	800a34c <__d2b+0x84>
 800a2fe:	4668      	mov	r0, sp
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	f7ff fd87 	bl	8009e14 <__lo0bits>
 800a306:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a30a:	b1e8      	cbz	r0, 800a348 <__d2b+0x80>
 800a30c:	f1c0 0320 	rsb	r3, r0, #32
 800a310:	fa02 f303 	lsl.w	r3, r2, r3
 800a314:	430b      	orrs	r3, r1
 800a316:	40c2      	lsrs	r2, r0
 800a318:	6163      	str	r3, [r4, #20]
 800a31a:	9201      	str	r2, [sp, #4]
 800a31c:	9b01      	ldr	r3, [sp, #4]
 800a31e:	61a3      	str	r3, [r4, #24]
 800a320:	2b00      	cmp	r3, #0
 800a322:	bf14      	ite	ne
 800a324:	2202      	movne	r2, #2
 800a326:	2201      	moveq	r2, #1
 800a328:	6122      	str	r2, [r4, #16]
 800a32a:	b1bd      	cbz	r5, 800a35c <__d2b+0x94>
 800a32c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a330:	4405      	add	r5, r0
 800a332:	603d      	str	r5, [r7, #0]
 800a334:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a338:	6030      	str	r0, [r6, #0]
 800a33a:	4620      	mov	r0, r4
 800a33c:	b003      	add	sp, #12
 800a33e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a346:	e7d6      	b.n	800a2f6 <__d2b+0x2e>
 800a348:	6161      	str	r1, [r4, #20]
 800a34a:	e7e7      	b.n	800a31c <__d2b+0x54>
 800a34c:	a801      	add	r0, sp, #4
 800a34e:	f7ff fd61 	bl	8009e14 <__lo0bits>
 800a352:	9b01      	ldr	r3, [sp, #4]
 800a354:	6163      	str	r3, [r4, #20]
 800a356:	3020      	adds	r0, #32
 800a358:	2201      	movs	r2, #1
 800a35a:	e7e5      	b.n	800a328 <__d2b+0x60>
 800a35c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a360:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a364:	6038      	str	r0, [r7, #0]
 800a366:	6918      	ldr	r0, [r3, #16]
 800a368:	f7ff fd34 	bl	8009dd4 <__hi0bits>
 800a36c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a370:	e7e2      	b.n	800a338 <__d2b+0x70>
 800a372:	bf00      	nop
 800a374:	0800b3dd 	.word	0x0800b3dd
 800a378:	0800b3ee 	.word	0x0800b3ee

0800a37c <__sfputc_r>:
 800a37c:	6893      	ldr	r3, [r2, #8]
 800a37e:	3b01      	subs	r3, #1
 800a380:	2b00      	cmp	r3, #0
 800a382:	b410      	push	{r4}
 800a384:	6093      	str	r3, [r2, #8]
 800a386:	da08      	bge.n	800a39a <__sfputc_r+0x1e>
 800a388:	6994      	ldr	r4, [r2, #24]
 800a38a:	42a3      	cmp	r3, r4
 800a38c:	db01      	blt.n	800a392 <__sfputc_r+0x16>
 800a38e:	290a      	cmp	r1, #10
 800a390:	d103      	bne.n	800a39a <__sfputc_r+0x1e>
 800a392:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a396:	f7fe bb6e 	b.w	8008a76 <__swbuf_r>
 800a39a:	6813      	ldr	r3, [r2, #0]
 800a39c:	1c58      	adds	r0, r3, #1
 800a39e:	6010      	str	r0, [r2, #0]
 800a3a0:	7019      	strb	r1, [r3, #0]
 800a3a2:	4608      	mov	r0, r1
 800a3a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <__sfputs_r>:
 800a3aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ac:	4606      	mov	r6, r0
 800a3ae:	460f      	mov	r7, r1
 800a3b0:	4614      	mov	r4, r2
 800a3b2:	18d5      	adds	r5, r2, r3
 800a3b4:	42ac      	cmp	r4, r5
 800a3b6:	d101      	bne.n	800a3bc <__sfputs_r+0x12>
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	e007      	b.n	800a3cc <__sfputs_r+0x22>
 800a3bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c0:	463a      	mov	r2, r7
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	f7ff ffda 	bl	800a37c <__sfputc_r>
 800a3c8:	1c43      	adds	r3, r0, #1
 800a3ca:	d1f3      	bne.n	800a3b4 <__sfputs_r+0xa>
 800a3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3d0 <_vfiprintf_r>:
 800a3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d4:	460d      	mov	r5, r1
 800a3d6:	b09d      	sub	sp, #116	; 0x74
 800a3d8:	4614      	mov	r4, r2
 800a3da:	4698      	mov	r8, r3
 800a3dc:	4606      	mov	r6, r0
 800a3de:	b118      	cbz	r0, 800a3e8 <_vfiprintf_r+0x18>
 800a3e0:	6a03      	ldr	r3, [r0, #32]
 800a3e2:	b90b      	cbnz	r3, 800a3e8 <_vfiprintf_r+0x18>
 800a3e4:	f7fe fa58 	bl	8008898 <__sinit>
 800a3e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3ea:	07d9      	lsls	r1, r3, #31
 800a3ec:	d405      	bmi.n	800a3fa <_vfiprintf_r+0x2a>
 800a3ee:	89ab      	ldrh	r3, [r5, #12]
 800a3f0:	059a      	lsls	r2, r3, #22
 800a3f2:	d402      	bmi.n	800a3fa <_vfiprintf_r+0x2a>
 800a3f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3f6:	f7fe fcba 	bl	8008d6e <__retarget_lock_acquire_recursive>
 800a3fa:	89ab      	ldrh	r3, [r5, #12]
 800a3fc:	071b      	lsls	r3, r3, #28
 800a3fe:	d501      	bpl.n	800a404 <_vfiprintf_r+0x34>
 800a400:	692b      	ldr	r3, [r5, #16]
 800a402:	b99b      	cbnz	r3, 800a42c <_vfiprintf_r+0x5c>
 800a404:	4629      	mov	r1, r5
 800a406:	4630      	mov	r0, r6
 800a408:	f7fe fb72 	bl	8008af0 <__swsetup_r>
 800a40c:	b170      	cbz	r0, 800a42c <_vfiprintf_r+0x5c>
 800a40e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a410:	07dc      	lsls	r4, r3, #31
 800a412:	d504      	bpl.n	800a41e <_vfiprintf_r+0x4e>
 800a414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a418:	b01d      	add	sp, #116	; 0x74
 800a41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a41e:	89ab      	ldrh	r3, [r5, #12]
 800a420:	0598      	lsls	r0, r3, #22
 800a422:	d4f7      	bmi.n	800a414 <_vfiprintf_r+0x44>
 800a424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a426:	f7fe fca3 	bl	8008d70 <__retarget_lock_release_recursive>
 800a42a:	e7f3      	b.n	800a414 <_vfiprintf_r+0x44>
 800a42c:	2300      	movs	r3, #0
 800a42e:	9309      	str	r3, [sp, #36]	; 0x24
 800a430:	2320      	movs	r3, #32
 800a432:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a436:	f8cd 800c 	str.w	r8, [sp, #12]
 800a43a:	2330      	movs	r3, #48	; 0x30
 800a43c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a5f0 <_vfiprintf_r+0x220>
 800a440:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a444:	f04f 0901 	mov.w	r9, #1
 800a448:	4623      	mov	r3, r4
 800a44a:	469a      	mov	sl, r3
 800a44c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a450:	b10a      	cbz	r2, 800a456 <_vfiprintf_r+0x86>
 800a452:	2a25      	cmp	r2, #37	; 0x25
 800a454:	d1f9      	bne.n	800a44a <_vfiprintf_r+0x7a>
 800a456:	ebba 0b04 	subs.w	fp, sl, r4
 800a45a:	d00b      	beq.n	800a474 <_vfiprintf_r+0xa4>
 800a45c:	465b      	mov	r3, fp
 800a45e:	4622      	mov	r2, r4
 800a460:	4629      	mov	r1, r5
 800a462:	4630      	mov	r0, r6
 800a464:	f7ff ffa1 	bl	800a3aa <__sfputs_r>
 800a468:	3001      	adds	r0, #1
 800a46a:	f000 80a9 	beq.w	800a5c0 <_vfiprintf_r+0x1f0>
 800a46e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a470:	445a      	add	r2, fp
 800a472:	9209      	str	r2, [sp, #36]	; 0x24
 800a474:	f89a 3000 	ldrb.w	r3, [sl]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 80a1 	beq.w	800a5c0 <_vfiprintf_r+0x1f0>
 800a47e:	2300      	movs	r3, #0
 800a480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a484:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a488:	f10a 0a01 	add.w	sl, sl, #1
 800a48c:	9304      	str	r3, [sp, #16]
 800a48e:	9307      	str	r3, [sp, #28]
 800a490:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a494:	931a      	str	r3, [sp, #104]	; 0x68
 800a496:	4654      	mov	r4, sl
 800a498:	2205      	movs	r2, #5
 800a49a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a49e:	4854      	ldr	r0, [pc, #336]	; (800a5f0 <_vfiprintf_r+0x220>)
 800a4a0:	f7f5 fea6 	bl	80001f0 <memchr>
 800a4a4:	9a04      	ldr	r2, [sp, #16]
 800a4a6:	b9d8      	cbnz	r0, 800a4e0 <_vfiprintf_r+0x110>
 800a4a8:	06d1      	lsls	r1, r2, #27
 800a4aa:	bf44      	itt	mi
 800a4ac:	2320      	movmi	r3, #32
 800a4ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4b2:	0713      	lsls	r3, r2, #28
 800a4b4:	bf44      	itt	mi
 800a4b6:	232b      	movmi	r3, #43	; 0x2b
 800a4b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4c2:	d015      	beq.n	800a4f0 <_vfiprintf_r+0x120>
 800a4c4:	9a07      	ldr	r2, [sp, #28]
 800a4c6:	4654      	mov	r4, sl
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	f04f 0c0a 	mov.w	ip, #10
 800a4ce:	4621      	mov	r1, r4
 800a4d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4d4:	3b30      	subs	r3, #48	; 0x30
 800a4d6:	2b09      	cmp	r3, #9
 800a4d8:	d94d      	bls.n	800a576 <_vfiprintf_r+0x1a6>
 800a4da:	b1b0      	cbz	r0, 800a50a <_vfiprintf_r+0x13a>
 800a4dc:	9207      	str	r2, [sp, #28]
 800a4de:	e014      	b.n	800a50a <_vfiprintf_r+0x13a>
 800a4e0:	eba0 0308 	sub.w	r3, r0, r8
 800a4e4:	fa09 f303 	lsl.w	r3, r9, r3
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	9304      	str	r3, [sp, #16]
 800a4ec:	46a2      	mov	sl, r4
 800a4ee:	e7d2      	b.n	800a496 <_vfiprintf_r+0xc6>
 800a4f0:	9b03      	ldr	r3, [sp, #12]
 800a4f2:	1d19      	adds	r1, r3, #4
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	9103      	str	r1, [sp, #12]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	bfbb      	ittet	lt
 800a4fc:	425b      	neglt	r3, r3
 800a4fe:	f042 0202 	orrlt.w	r2, r2, #2
 800a502:	9307      	strge	r3, [sp, #28]
 800a504:	9307      	strlt	r3, [sp, #28]
 800a506:	bfb8      	it	lt
 800a508:	9204      	strlt	r2, [sp, #16]
 800a50a:	7823      	ldrb	r3, [r4, #0]
 800a50c:	2b2e      	cmp	r3, #46	; 0x2e
 800a50e:	d10c      	bne.n	800a52a <_vfiprintf_r+0x15a>
 800a510:	7863      	ldrb	r3, [r4, #1]
 800a512:	2b2a      	cmp	r3, #42	; 0x2a
 800a514:	d134      	bne.n	800a580 <_vfiprintf_r+0x1b0>
 800a516:	9b03      	ldr	r3, [sp, #12]
 800a518:	1d1a      	adds	r2, r3, #4
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	9203      	str	r2, [sp, #12]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	bfb8      	it	lt
 800a522:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a526:	3402      	adds	r4, #2
 800a528:	9305      	str	r3, [sp, #20]
 800a52a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a600 <_vfiprintf_r+0x230>
 800a52e:	7821      	ldrb	r1, [r4, #0]
 800a530:	2203      	movs	r2, #3
 800a532:	4650      	mov	r0, sl
 800a534:	f7f5 fe5c 	bl	80001f0 <memchr>
 800a538:	b138      	cbz	r0, 800a54a <_vfiprintf_r+0x17a>
 800a53a:	9b04      	ldr	r3, [sp, #16]
 800a53c:	eba0 000a 	sub.w	r0, r0, sl
 800a540:	2240      	movs	r2, #64	; 0x40
 800a542:	4082      	lsls	r2, r0
 800a544:	4313      	orrs	r3, r2
 800a546:	3401      	adds	r4, #1
 800a548:	9304      	str	r3, [sp, #16]
 800a54a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a54e:	4829      	ldr	r0, [pc, #164]	; (800a5f4 <_vfiprintf_r+0x224>)
 800a550:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a554:	2206      	movs	r2, #6
 800a556:	f7f5 fe4b 	bl	80001f0 <memchr>
 800a55a:	2800      	cmp	r0, #0
 800a55c:	d03f      	beq.n	800a5de <_vfiprintf_r+0x20e>
 800a55e:	4b26      	ldr	r3, [pc, #152]	; (800a5f8 <_vfiprintf_r+0x228>)
 800a560:	bb1b      	cbnz	r3, 800a5aa <_vfiprintf_r+0x1da>
 800a562:	9b03      	ldr	r3, [sp, #12]
 800a564:	3307      	adds	r3, #7
 800a566:	f023 0307 	bic.w	r3, r3, #7
 800a56a:	3308      	adds	r3, #8
 800a56c:	9303      	str	r3, [sp, #12]
 800a56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a570:	443b      	add	r3, r7
 800a572:	9309      	str	r3, [sp, #36]	; 0x24
 800a574:	e768      	b.n	800a448 <_vfiprintf_r+0x78>
 800a576:	fb0c 3202 	mla	r2, ip, r2, r3
 800a57a:	460c      	mov	r4, r1
 800a57c:	2001      	movs	r0, #1
 800a57e:	e7a6      	b.n	800a4ce <_vfiprintf_r+0xfe>
 800a580:	2300      	movs	r3, #0
 800a582:	3401      	adds	r4, #1
 800a584:	9305      	str	r3, [sp, #20]
 800a586:	4619      	mov	r1, r3
 800a588:	f04f 0c0a 	mov.w	ip, #10
 800a58c:	4620      	mov	r0, r4
 800a58e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a592:	3a30      	subs	r2, #48	; 0x30
 800a594:	2a09      	cmp	r2, #9
 800a596:	d903      	bls.n	800a5a0 <_vfiprintf_r+0x1d0>
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d0c6      	beq.n	800a52a <_vfiprintf_r+0x15a>
 800a59c:	9105      	str	r1, [sp, #20]
 800a59e:	e7c4      	b.n	800a52a <_vfiprintf_r+0x15a>
 800a5a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e7f0      	b.n	800a58c <_vfiprintf_r+0x1bc>
 800a5aa:	ab03      	add	r3, sp, #12
 800a5ac:	9300      	str	r3, [sp, #0]
 800a5ae:	462a      	mov	r2, r5
 800a5b0:	4b12      	ldr	r3, [pc, #72]	; (800a5fc <_vfiprintf_r+0x22c>)
 800a5b2:	a904      	add	r1, sp, #16
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	f7fd fc5b 	bl	8007e70 <_printf_float>
 800a5ba:	4607      	mov	r7, r0
 800a5bc:	1c78      	adds	r0, r7, #1
 800a5be:	d1d6      	bne.n	800a56e <_vfiprintf_r+0x19e>
 800a5c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5c2:	07d9      	lsls	r1, r3, #31
 800a5c4:	d405      	bmi.n	800a5d2 <_vfiprintf_r+0x202>
 800a5c6:	89ab      	ldrh	r3, [r5, #12]
 800a5c8:	059a      	lsls	r2, r3, #22
 800a5ca:	d402      	bmi.n	800a5d2 <_vfiprintf_r+0x202>
 800a5cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5ce:	f7fe fbcf 	bl	8008d70 <__retarget_lock_release_recursive>
 800a5d2:	89ab      	ldrh	r3, [r5, #12]
 800a5d4:	065b      	lsls	r3, r3, #25
 800a5d6:	f53f af1d 	bmi.w	800a414 <_vfiprintf_r+0x44>
 800a5da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5dc:	e71c      	b.n	800a418 <_vfiprintf_r+0x48>
 800a5de:	ab03      	add	r3, sp, #12
 800a5e0:	9300      	str	r3, [sp, #0]
 800a5e2:	462a      	mov	r2, r5
 800a5e4:	4b05      	ldr	r3, [pc, #20]	; (800a5fc <_vfiprintf_r+0x22c>)
 800a5e6:	a904      	add	r1, sp, #16
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f7fd fee5 	bl	80083b8 <_printf_i>
 800a5ee:	e7e4      	b.n	800a5ba <_vfiprintf_r+0x1ea>
 800a5f0:	0800b544 	.word	0x0800b544
 800a5f4:	0800b54e 	.word	0x0800b54e
 800a5f8:	08007e71 	.word	0x08007e71
 800a5fc:	0800a3ab 	.word	0x0800a3ab
 800a600:	0800b54a 	.word	0x0800b54a

0800a604 <__swhatbuf_r>:
 800a604:	b570      	push	{r4, r5, r6, lr}
 800a606:	460c      	mov	r4, r1
 800a608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a60c:	2900      	cmp	r1, #0
 800a60e:	b096      	sub	sp, #88	; 0x58
 800a610:	4615      	mov	r5, r2
 800a612:	461e      	mov	r6, r3
 800a614:	da0d      	bge.n	800a632 <__swhatbuf_r+0x2e>
 800a616:	89a3      	ldrh	r3, [r4, #12]
 800a618:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a61c:	f04f 0100 	mov.w	r1, #0
 800a620:	bf0c      	ite	eq
 800a622:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a626:	2340      	movne	r3, #64	; 0x40
 800a628:	2000      	movs	r0, #0
 800a62a:	6031      	str	r1, [r6, #0]
 800a62c:	602b      	str	r3, [r5, #0]
 800a62e:	b016      	add	sp, #88	; 0x58
 800a630:	bd70      	pop	{r4, r5, r6, pc}
 800a632:	466a      	mov	r2, sp
 800a634:	f000 f87c 	bl	800a730 <_fstat_r>
 800a638:	2800      	cmp	r0, #0
 800a63a:	dbec      	blt.n	800a616 <__swhatbuf_r+0x12>
 800a63c:	9901      	ldr	r1, [sp, #4]
 800a63e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a642:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a646:	4259      	negs	r1, r3
 800a648:	4159      	adcs	r1, r3
 800a64a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a64e:	e7eb      	b.n	800a628 <__swhatbuf_r+0x24>

0800a650 <__smakebuf_r>:
 800a650:	898b      	ldrh	r3, [r1, #12]
 800a652:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a654:	079d      	lsls	r5, r3, #30
 800a656:	4606      	mov	r6, r0
 800a658:	460c      	mov	r4, r1
 800a65a:	d507      	bpl.n	800a66c <__smakebuf_r+0x1c>
 800a65c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a660:	6023      	str	r3, [r4, #0]
 800a662:	6123      	str	r3, [r4, #16]
 800a664:	2301      	movs	r3, #1
 800a666:	6163      	str	r3, [r4, #20]
 800a668:	b002      	add	sp, #8
 800a66a:	bd70      	pop	{r4, r5, r6, pc}
 800a66c:	ab01      	add	r3, sp, #4
 800a66e:	466a      	mov	r2, sp
 800a670:	f7ff ffc8 	bl	800a604 <__swhatbuf_r>
 800a674:	9900      	ldr	r1, [sp, #0]
 800a676:	4605      	mov	r5, r0
 800a678:	4630      	mov	r0, r6
 800a67a:	f7ff fa77 	bl	8009b6c <_malloc_r>
 800a67e:	b948      	cbnz	r0, 800a694 <__smakebuf_r+0x44>
 800a680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a684:	059a      	lsls	r2, r3, #22
 800a686:	d4ef      	bmi.n	800a668 <__smakebuf_r+0x18>
 800a688:	f023 0303 	bic.w	r3, r3, #3
 800a68c:	f043 0302 	orr.w	r3, r3, #2
 800a690:	81a3      	strh	r3, [r4, #12]
 800a692:	e7e3      	b.n	800a65c <__smakebuf_r+0xc>
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	6020      	str	r0, [r4, #0]
 800a698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a69c:	81a3      	strh	r3, [r4, #12]
 800a69e:	9b00      	ldr	r3, [sp, #0]
 800a6a0:	6163      	str	r3, [r4, #20]
 800a6a2:	9b01      	ldr	r3, [sp, #4]
 800a6a4:	6120      	str	r0, [r4, #16]
 800a6a6:	b15b      	cbz	r3, 800a6c0 <__smakebuf_r+0x70>
 800a6a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	f000 f851 	bl	800a754 <_isatty_r>
 800a6b2:	b128      	cbz	r0, 800a6c0 <__smakebuf_r+0x70>
 800a6b4:	89a3      	ldrh	r3, [r4, #12]
 800a6b6:	f023 0303 	bic.w	r3, r3, #3
 800a6ba:	f043 0301 	orr.w	r3, r3, #1
 800a6be:	81a3      	strh	r3, [r4, #12]
 800a6c0:	89a3      	ldrh	r3, [r4, #12]
 800a6c2:	431d      	orrs	r5, r3
 800a6c4:	81a5      	strh	r5, [r4, #12]
 800a6c6:	e7cf      	b.n	800a668 <__smakebuf_r+0x18>

0800a6c8 <_putc_r>:
 800a6c8:	b570      	push	{r4, r5, r6, lr}
 800a6ca:	460d      	mov	r5, r1
 800a6cc:	4614      	mov	r4, r2
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	b118      	cbz	r0, 800a6da <_putc_r+0x12>
 800a6d2:	6a03      	ldr	r3, [r0, #32]
 800a6d4:	b90b      	cbnz	r3, 800a6da <_putc_r+0x12>
 800a6d6:	f7fe f8df 	bl	8008898 <__sinit>
 800a6da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6dc:	07d8      	lsls	r0, r3, #31
 800a6de:	d405      	bmi.n	800a6ec <_putc_r+0x24>
 800a6e0:	89a3      	ldrh	r3, [r4, #12]
 800a6e2:	0599      	lsls	r1, r3, #22
 800a6e4:	d402      	bmi.n	800a6ec <_putc_r+0x24>
 800a6e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6e8:	f7fe fb41 	bl	8008d6e <__retarget_lock_acquire_recursive>
 800a6ec:	68a3      	ldr	r3, [r4, #8]
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	60a3      	str	r3, [r4, #8]
 800a6f4:	da05      	bge.n	800a702 <_putc_r+0x3a>
 800a6f6:	69a2      	ldr	r2, [r4, #24]
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	db12      	blt.n	800a722 <_putc_r+0x5a>
 800a6fc:	b2eb      	uxtb	r3, r5
 800a6fe:	2b0a      	cmp	r3, #10
 800a700:	d00f      	beq.n	800a722 <_putc_r+0x5a>
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	1c5a      	adds	r2, r3, #1
 800a706:	6022      	str	r2, [r4, #0]
 800a708:	701d      	strb	r5, [r3, #0]
 800a70a:	b2ed      	uxtb	r5, r5
 800a70c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a70e:	07da      	lsls	r2, r3, #31
 800a710:	d405      	bmi.n	800a71e <_putc_r+0x56>
 800a712:	89a3      	ldrh	r3, [r4, #12]
 800a714:	059b      	lsls	r3, r3, #22
 800a716:	d402      	bmi.n	800a71e <_putc_r+0x56>
 800a718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a71a:	f7fe fb29 	bl	8008d70 <__retarget_lock_release_recursive>
 800a71e:	4628      	mov	r0, r5
 800a720:	bd70      	pop	{r4, r5, r6, pc}
 800a722:	4629      	mov	r1, r5
 800a724:	4622      	mov	r2, r4
 800a726:	4630      	mov	r0, r6
 800a728:	f7fe f9a5 	bl	8008a76 <__swbuf_r>
 800a72c:	4605      	mov	r5, r0
 800a72e:	e7ed      	b.n	800a70c <_putc_r+0x44>

0800a730 <_fstat_r>:
 800a730:	b538      	push	{r3, r4, r5, lr}
 800a732:	4d07      	ldr	r5, [pc, #28]	; (800a750 <_fstat_r+0x20>)
 800a734:	2300      	movs	r3, #0
 800a736:	4604      	mov	r4, r0
 800a738:	4608      	mov	r0, r1
 800a73a:	4611      	mov	r1, r2
 800a73c:	602b      	str	r3, [r5, #0]
 800a73e:	f7f7 fe8a 	bl	8002456 <_fstat>
 800a742:	1c43      	adds	r3, r0, #1
 800a744:	d102      	bne.n	800a74c <_fstat_r+0x1c>
 800a746:	682b      	ldr	r3, [r5, #0]
 800a748:	b103      	cbz	r3, 800a74c <_fstat_r+0x1c>
 800a74a:	6023      	str	r3, [r4, #0]
 800a74c:	bd38      	pop	{r3, r4, r5, pc}
 800a74e:	bf00      	nop
 800a750:	20005728 	.word	0x20005728

0800a754 <_isatty_r>:
 800a754:	b538      	push	{r3, r4, r5, lr}
 800a756:	4d06      	ldr	r5, [pc, #24]	; (800a770 <_isatty_r+0x1c>)
 800a758:	2300      	movs	r3, #0
 800a75a:	4604      	mov	r4, r0
 800a75c:	4608      	mov	r0, r1
 800a75e:	602b      	str	r3, [r5, #0]
 800a760:	f7f7 fe89 	bl	8002476 <_isatty>
 800a764:	1c43      	adds	r3, r0, #1
 800a766:	d102      	bne.n	800a76e <_isatty_r+0x1a>
 800a768:	682b      	ldr	r3, [r5, #0]
 800a76a:	b103      	cbz	r3, 800a76e <_isatty_r+0x1a>
 800a76c:	6023      	str	r3, [r4, #0]
 800a76e:	bd38      	pop	{r3, r4, r5, pc}
 800a770:	20005728 	.word	0x20005728

0800a774 <_sbrk_r>:
 800a774:	b538      	push	{r3, r4, r5, lr}
 800a776:	4d06      	ldr	r5, [pc, #24]	; (800a790 <_sbrk_r+0x1c>)
 800a778:	2300      	movs	r3, #0
 800a77a:	4604      	mov	r4, r0
 800a77c:	4608      	mov	r0, r1
 800a77e:	602b      	str	r3, [r5, #0]
 800a780:	f7f7 fe92 	bl	80024a8 <_sbrk>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d102      	bne.n	800a78e <_sbrk_r+0x1a>
 800a788:	682b      	ldr	r3, [r5, #0]
 800a78a:	b103      	cbz	r3, 800a78e <_sbrk_r+0x1a>
 800a78c:	6023      	str	r3, [r4, #0]
 800a78e:	bd38      	pop	{r3, r4, r5, pc}
 800a790:	20005728 	.word	0x20005728

0800a794 <__assert_func>:
 800a794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a796:	4614      	mov	r4, r2
 800a798:	461a      	mov	r2, r3
 800a79a:	4b09      	ldr	r3, [pc, #36]	; (800a7c0 <__assert_func+0x2c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4605      	mov	r5, r0
 800a7a0:	68d8      	ldr	r0, [r3, #12]
 800a7a2:	b14c      	cbz	r4, 800a7b8 <__assert_func+0x24>
 800a7a4:	4b07      	ldr	r3, [pc, #28]	; (800a7c4 <__assert_func+0x30>)
 800a7a6:	9100      	str	r1, [sp, #0]
 800a7a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7ac:	4906      	ldr	r1, [pc, #24]	; (800a7c8 <__assert_func+0x34>)
 800a7ae:	462b      	mov	r3, r5
 800a7b0:	f000 f844 	bl	800a83c <fiprintf>
 800a7b4:	f000 f854 	bl	800a860 <abort>
 800a7b8:	4b04      	ldr	r3, [pc, #16]	; (800a7cc <__assert_func+0x38>)
 800a7ba:	461c      	mov	r4, r3
 800a7bc:	e7f3      	b.n	800a7a6 <__assert_func+0x12>
 800a7be:	bf00      	nop
 800a7c0:	20000120 	.word	0x20000120
 800a7c4:	0800b55f 	.word	0x0800b55f
 800a7c8:	0800b56c 	.word	0x0800b56c
 800a7cc:	0800b59a 	.word	0x0800b59a

0800a7d0 <_calloc_r>:
 800a7d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7d2:	fba1 2402 	umull	r2, r4, r1, r2
 800a7d6:	b94c      	cbnz	r4, 800a7ec <_calloc_r+0x1c>
 800a7d8:	4611      	mov	r1, r2
 800a7da:	9201      	str	r2, [sp, #4]
 800a7dc:	f7ff f9c6 	bl	8009b6c <_malloc_r>
 800a7e0:	9a01      	ldr	r2, [sp, #4]
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	b930      	cbnz	r0, 800a7f4 <_calloc_r+0x24>
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	b003      	add	sp, #12
 800a7ea:	bd30      	pop	{r4, r5, pc}
 800a7ec:	220c      	movs	r2, #12
 800a7ee:	6002      	str	r2, [r0, #0]
 800a7f0:	2500      	movs	r5, #0
 800a7f2:	e7f8      	b.n	800a7e6 <_calloc_r+0x16>
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	f7fe f9d3 	bl	8008ba0 <memset>
 800a7fa:	e7f4      	b.n	800a7e6 <_calloc_r+0x16>

0800a7fc <__ascii_mbtowc>:
 800a7fc:	b082      	sub	sp, #8
 800a7fe:	b901      	cbnz	r1, 800a802 <__ascii_mbtowc+0x6>
 800a800:	a901      	add	r1, sp, #4
 800a802:	b142      	cbz	r2, 800a816 <__ascii_mbtowc+0x1a>
 800a804:	b14b      	cbz	r3, 800a81a <__ascii_mbtowc+0x1e>
 800a806:	7813      	ldrb	r3, [r2, #0]
 800a808:	600b      	str	r3, [r1, #0]
 800a80a:	7812      	ldrb	r2, [r2, #0]
 800a80c:	1e10      	subs	r0, r2, #0
 800a80e:	bf18      	it	ne
 800a810:	2001      	movne	r0, #1
 800a812:	b002      	add	sp, #8
 800a814:	4770      	bx	lr
 800a816:	4610      	mov	r0, r2
 800a818:	e7fb      	b.n	800a812 <__ascii_mbtowc+0x16>
 800a81a:	f06f 0001 	mvn.w	r0, #1
 800a81e:	e7f8      	b.n	800a812 <__ascii_mbtowc+0x16>

0800a820 <__ascii_wctomb>:
 800a820:	b149      	cbz	r1, 800a836 <__ascii_wctomb+0x16>
 800a822:	2aff      	cmp	r2, #255	; 0xff
 800a824:	bf85      	ittet	hi
 800a826:	238a      	movhi	r3, #138	; 0x8a
 800a828:	6003      	strhi	r3, [r0, #0]
 800a82a:	700a      	strbls	r2, [r1, #0]
 800a82c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a830:	bf98      	it	ls
 800a832:	2001      	movls	r0, #1
 800a834:	4770      	bx	lr
 800a836:	4608      	mov	r0, r1
 800a838:	4770      	bx	lr
	...

0800a83c <fiprintf>:
 800a83c:	b40e      	push	{r1, r2, r3}
 800a83e:	b503      	push	{r0, r1, lr}
 800a840:	4601      	mov	r1, r0
 800a842:	ab03      	add	r3, sp, #12
 800a844:	4805      	ldr	r0, [pc, #20]	; (800a85c <fiprintf+0x20>)
 800a846:	f853 2b04 	ldr.w	r2, [r3], #4
 800a84a:	6800      	ldr	r0, [r0, #0]
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	f7ff fdbf 	bl	800a3d0 <_vfiprintf_r>
 800a852:	b002      	add	sp, #8
 800a854:	f85d eb04 	ldr.w	lr, [sp], #4
 800a858:	b003      	add	sp, #12
 800a85a:	4770      	bx	lr
 800a85c:	20000120 	.word	0x20000120

0800a860 <abort>:
 800a860:	b508      	push	{r3, lr}
 800a862:	2006      	movs	r0, #6
 800a864:	f000 f82c 	bl	800a8c0 <raise>
 800a868:	2001      	movs	r0, #1
 800a86a:	f7f7 fdc1 	bl	80023f0 <_exit>

0800a86e <_raise_r>:
 800a86e:	291f      	cmp	r1, #31
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	4604      	mov	r4, r0
 800a874:	460d      	mov	r5, r1
 800a876:	d904      	bls.n	800a882 <_raise_r+0x14>
 800a878:	2316      	movs	r3, #22
 800a87a:	6003      	str	r3, [r0, #0]
 800a87c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a880:	bd38      	pop	{r3, r4, r5, pc}
 800a882:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a884:	b112      	cbz	r2, 800a88c <_raise_r+0x1e>
 800a886:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a88a:	b94b      	cbnz	r3, 800a8a0 <_raise_r+0x32>
 800a88c:	4620      	mov	r0, r4
 800a88e:	f000 f831 	bl	800a8f4 <_getpid_r>
 800a892:	462a      	mov	r2, r5
 800a894:	4601      	mov	r1, r0
 800a896:	4620      	mov	r0, r4
 800a898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a89c:	f000 b818 	b.w	800a8d0 <_kill_r>
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d00a      	beq.n	800a8ba <_raise_r+0x4c>
 800a8a4:	1c59      	adds	r1, r3, #1
 800a8a6:	d103      	bne.n	800a8b0 <_raise_r+0x42>
 800a8a8:	2316      	movs	r3, #22
 800a8aa:	6003      	str	r3, [r0, #0]
 800a8ac:	2001      	movs	r0, #1
 800a8ae:	e7e7      	b.n	800a880 <_raise_r+0x12>
 800a8b0:	2400      	movs	r4, #0
 800a8b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	4798      	blx	r3
 800a8ba:	2000      	movs	r0, #0
 800a8bc:	e7e0      	b.n	800a880 <_raise_r+0x12>
	...

0800a8c0 <raise>:
 800a8c0:	4b02      	ldr	r3, [pc, #8]	; (800a8cc <raise+0xc>)
 800a8c2:	4601      	mov	r1, r0
 800a8c4:	6818      	ldr	r0, [r3, #0]
 800a8c6:	f7ff bfd2 	b.w	800a86e <_raise_r>
 800a8ca:	bf00      	nop
 800a8cc:	20000120 	.word	0x20000120

0800a8d0 <_kill_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	4d07      	ldr	r5, [pc, #28]	; (800a8f0 <_kill_r+0x20>)
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	4608      	mov	r0, r1
 800a8da:	4611      	mov	r1, r2
 800a8dc:	602b      	str	r3, [r5, #0]
 800a8de:	f7f7 fd77 	bl	80023d0 <_kill>
 800a8e2:	1c43      	adds	r3, r0, #1
 800a8e4:	d102      	bne.n	800a8ec <_kill_r+0x1c>
 800a8e6:	682b      	ldr	r3, [r5, #0]
 800a8e8:	b103      	cbz	r3, 800a8ec <_kill_r+0x1c>
 800a8ea:	6023      	str	r3, [r4, #0]
 800a8ec:	bd38      	pop	{r3, r4, r5, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20005728 	.word	0x20005728

0800a8f4 <_getpid_r>:
 800a8f4:	f7f7 bd64 	b.w	80023c0 <_getpid>

0800a8f8 <_init>:
 800a8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fa:	bf00      	nop
 800a8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8fe:	bc08      	pop	{r3}
 800a900:	469e      	mov	lr, r3
 800a902:	4770      	bx	lr

0800a904 <_fini>:
 800a904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a906:	bf00      	nop
 800a908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a90a:	bc08      	pop	{r3}
 800a90c:	469e      	mov	lr, r3
 800a90e:	4770      	bx	lr
