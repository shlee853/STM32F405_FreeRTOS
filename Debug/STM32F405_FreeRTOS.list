
STM32F405_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014858  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f54  080149e8  080149e8  000249e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801693c  0801693c  00031d38  2**0
                  CONTENTS
  4 .ARM          00000008  0801693c  0801693c  0002693c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016944  08016944  00031d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016944  08016944  00026944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016948  08016948  00026948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005ac  20000000  0801694c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmbss       00001764  200005ac  08016ef8  000305ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .nzds         00000028  20001d10  0801865c  00031d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ccmram       00000000  10000000  10000000  00031d38  2**0
                  CONTENTS
 12 .bss          00008198  20001d38  20001d38  00031d38  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  20009ed0  20009ed0  00031d38  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00031d38  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  00031d68  2**0
                  CONTENTS, READONLY
 16 .debug_info   0003343d  00000000  00000000  00031dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000093a1  00000000  00000000  000651e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002718  00000000  00000000  0006e590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001d82  00000000  00000000  00070ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00014027  00000000  00000000  00072a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003a5f0  00000000  00000000  00086a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000f6497  00000000  00000000  000c1041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000ae60  00000000  00000000  001b74d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  001c2338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001d38 	.word	0x20001d38
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080149d0 	.word	0x080149d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001d3c 	.word	0x20001d3c
 80001cc:	080149d0 	.word	0x080149d0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b9a4 	b.w	8000fc8 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f83a 	bl	8000d00 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_f2lz>:
 8000c98:	ee07 0a90 	vmov	s15, r0
 8000c9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca4:	d401      	bmi.n	8000caa <__aeabi_f2lz+0x12>
 8000ca6:	f000 b80b 	b.w	8000cc0 <__aeabi_f2ulz>
 8000caa:	eef1 7a67 	vneg.f32	s15, s15
 8000cae:	b508      	push	{r3, lr}
 8000cb0:	ee17 0a90 	vmov	r0, s15
 8000cb4:	f000 f804 	bl	8000cc0 <__aeabi_f2ulz>
 8000cb8:	4240      	negs	r0, r0
 8000cba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbe:	bd08      	pop	{r3, pc}

08000cc0 <__aeabi_f2ulz>:
 8000cc0:	b5d0      	push	{r4, r6, r7, lr}
 8000cc2:	f7ff fc51 	bl	8000568 <__aeabi_f2d>
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__aeabi_f2ulz+0x38>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4606      	mov	r6, r0
 8000ccc:	460f      	mov	r7, r1
 8000cce:	f7ff fca3 	bl	8000618 <__aeabi_dmul>
 8000cd2:	f000 f97b 	bl	8000fcc <__aeabi_d2uiz>
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	f7ff fc24 	bl	8000524 <__aeabi_ui2d>
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <__aeabi_f2ulz+0x3c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f7ff fc9a 	bl	8000618 <__aeabi_dmul>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4630      	mov	r0, r6
 8000cea:	4639      	mov	r1, r7
 8000cec:	f7ff fadc 	bl	80002a8 <__aeabi_dsub>
 8000cf0:	f000 f96c 	bl	8000fcc <__aeabi_d2uiz>
 8000cf4:	4621      	mov	r1, r4
 8000cf6:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf8:	3df00000 	.word	0x3df00000
 8000cfc:	41f00000 	.word	0x41f00000

08000d00 <__udivmoddi4>:
 8000d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d04:	9e08      	ldr	r6, [sp, #32]
 8000d06:	460d      	mov	r5, r1
 8000d08:	4604      	mov	r4, r0
 8000d0a:	460f      	mov	r7, r1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d14a      	bne.n	8000da6 <__udivmoddi4+0xa6>
 8000d10:	428a      	cmp	r2, r1
 8000d12:	4694      	mov	ip, r2
 8000d14:	d965      	bls.n	8000de2 <__udivmoddi4+0xe2>
 8000d16:	fab2 f382 	clz	r3, r2
 8000d1a:	b143      	cbz	r3, 8000d2e <__udivmoddi4+0x2e>
 8000d1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d20:	f1c3 0220 	rsb	r2, r3, #32
 8000d24:	409f      	lsls	r7, r3
 8000d26:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2a:	4317      	orrs	r7, r2
 8000d2c:	409c      	lsls	r4, r3
 8000d2e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d32:	fa1f f58c 	uxth.w	r5, ip
 8000d36:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d3a:	0c22      	lsrs	r2, r4, #16
 8000d3c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d40:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d44:	fb01 f005 	mul.w	r0, r1, r5
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	d90a      	bls.n	8000d62 <__udivmoddi4+0x62>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d54:	f080 811c 	bcs.w	8000f90 <__udivmoddi4+0x290>
 8000d58:	4290      	cmp	r0, r2
 8000d5a:	f240 8119 	bls.w	8000f90 <__udivmoddi4+0x290>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4462      	add	r2, ip
 8000d62:	1a12      	subs	r2, r2, r0
 8000d64:	b2a4      	uxth	r4, r4
 8000d66:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d6a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d6e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d72:	fb00 f505 	mul.w	r5, r0, r5
 8000d76:	42a5      	cmp	r5, r4
 8000d78:	d90a      	bls.n	8000d90 <__udivmoddi4+0x90>
 8000d7a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d82:	f080 8107 	bcs.w	8000f94 <__udivmoddi4+0x294>
 8000d86:	42a5      	cmp	r5, r4
 8000d88:	f240 8104 	bls.w	8000f94 <__udivmoddi4+0x294>
 8000d8c:	4464      	add	r4, ip
 8000d8e:	3802      	subs	r0, #2
 8000d90:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d94:	1b64      	subs	r4, r4, r5
 8000d96:	2100      	movs	r1, #0
 8000d98:	b11e      	cbz	r6, 8000da2 <__udivmoddi4+0xa2>
 8000d9a:	40dc      	lsrs	r4, r3
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e9c6 4300 	strd	r4, r3, [r6]
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0xbc>
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	f000 80ed 	beq.w	8000f8a <__udivmoddi4+0x28a>
 8000db0:	2100      	movs	r1, #0
 8000db2:	e9c6 0500 	strd	r0, r5, [r6]
 8000db6:	4608      	mov	r0, r1
 8000db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbc:	fab3 f183 	clz	r1, r3
 8000dc0:	2900      	cmp	r1, #0
 8000dc2:	d149      	bne.n	8000e58 <__udivmoddi4+0x158>
 8000dc4:	42ab      	cmp	r3, r5
 8000dc6:	d302      	bcc.n	8000dce <__udivmoddi4+0xce>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	f200 80f8 	bhi.w	8000fbe <__udivmoddi4+0x2be>
 8000dce:	1a84      	subs	r4, r0, r2
 8000dd0:	eb65 0203 	sbc.w	r2, r5, r3
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	4617      	mov	r7, r2
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d0e2      	beq.n	8000da2 <__udivmoddi4+0xa2>
 8000ddc:	e9c6 4700 	strd	r4, r7, [r6]
 8000de0:	e7df      	b.n	8000da2 <__udivmoddi4+0xa2>
 8000de2:	b902      	cbnz	r2, 8000de6 <__udivmoddi4+0xe6>
 8000de4:	deff      	udf	#255	; 0xff
 8000de6:	fab2 f382 	clz	r3, r2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f040 8090 	bne.w	8000f10 <__udivmoddi4+0x210>
 8000df0:	1a8a      	subs	r2, r1, r2
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e00:	fb07 2015 	mls	r0, r7, r5, r2
 8000e04:	0c22      	lsrs	r2, r4, #16
 8000e06:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e0a:	fb0e f005 	mul.w	r0, lr, r5
 8000e0e:	4290      	cmp	r0, r2
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x124>
 8000e12:	eb1c 0202 	adds.w	r2, ip, r2
 8000e16:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x122>
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2b8>
 8000e22:	4645      	mov	r5, r8
 8000e24:	1a12      	subs	r2, r2, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e2c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x14e>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x14c>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2c2>
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e56:	e79f      	b.n	8000d98 <__udivmoddi4+0x98>
 8000e58:	f1c1 0720 	rsb	r7, r1, #32
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e6e:	40fd      	lsrs	r5, r7
 8000e70:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e74:	4323      	orrs	r3, r4
 8000e76:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e7a:	fa1f fe8c 	uxth.w	lr, ip
 8000e7e:	fb09 5518 	mls	r5, r9, r8, r5
 8000e82:	0c1c      	lsrs	r4, r3, #16
 8000e84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e88:	fb08 f50e 	mul.w	r5, r8, lr
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e92:	fa00 f001 	lsl.w	r0, r0, r1
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b0>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2b4>
 8000ea4:	42a5      	cmp	r5, r4
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2b4>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4464      	add	r4, ip
 8000eb0:	1b64      	subs	r4, r4, r5
 8000eb2:	b29d      	uxth	r5, r3
 8000eb4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb8:	fb09 4413 	mls	r4, r9, r3, r4
 8000ebc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1da>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2ac>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2ac>
 8000ed6:	3b02      	subs	r3, #2
 8000ed8:	4464      	add	r4, ip
 8000eda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ede:	fba3 9502 	umull	r9, r5, r3, r2
 8000ee2:	eba4 040e 	sub.w	r4, r4, lr
 8000ee6:	42ac      	cmp	r4, r5
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46ae      	mov	lr, r5
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x29c>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x298>
 8000ef0:	b156      	cbz	r6, 8000f08 <__udivmoddi4+0x208>
 8000ef2:	ebb0 0208 	subs.w	r2, r0, r8
 8000ef6:	eb64 040e 	sbc.w	r4, r4, lr
 8000efa:	fa04 f707 	lsl.w	r7, r4, r7
 8000efe:	40ca      	lsrs	r2, r1
 8000f00:	40cc      	lsrs	r4, r1
 8000f02:	4317      	orrs	r7, r2
 8000f04:	e9c6 7400 	strd	r7, r4, [r6]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f10:	f1c3 0120 	rsb	r1, r3, #32
 8000f14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f18:	fa20 f201 	lsr.w	r2, r0, r1
 8000f1c:	fa25 f101 	lsr.w	r1, r5, r1
 8000f20:	409d      	lsls	r5, r3
 8000f22:	432a      	orrs	r2, r5
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f30:	fb07 1510 	mls	r5, r7, r0, r1
 8000f34:	0c11      	lsrs	r1, r2, #16
 8000f36:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f3a:	fb00 f50e 	mul.w	r5, r0, lr
 8000f3e:	428d      	cmp	r5, r1
 8000f40:	fa04 f403 	lsl.w	r4, r4, r3
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x258>
 8000f46:	eb1c 0101 	adds.w	r1, ip, r1
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b0>
 8000f50:	428d      	cmp	r5, r1
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b0>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4461      	add	r1, ip
 8000f58:	1b49      	subs	r1, r1, r5
 8000f5a:	b292      	uxth	r2, r2
 8000f5c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f60:	fb07 1115 	mls	r1, r7, r5, r1
 8000f64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f68:	fb05 f10e 	mul.w	r1, r5, lr
 8000f6c:	4291      	cmp	r1, r2
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x282>
 8000f70:	eb1c 0202 	adds.w	r2, ip, r2
 8000f74:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2a8>
 8000f7a:	4291      	cmp	r1, r2
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2a8>
 8000f7e:	3d02      	subs	r5, #2
 8000f80:	4462      	add	r2, ip
 8000f82:	1a52      	subs	r2, r2, r1
 8000f84:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0xfc>
 8000f8a:	4631      	mov	r1, r6
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xa2>
 8000f90:	4639      	mov	r1, r7
 8000f92:	e6e6      	b.n	8000d62 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e6fb      	b.n	8000d90 <__udivmoddi4+0x90>
 8000f98:	4548      	cmp	r0, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f0>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f0>
 8000fa8:	4645      	mov	r5, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x282>
 8000fac:	462b      	mov	r3, r5
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1da>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x258>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b0>
 8000fb8:	3d02      	subs	r5, #2
 8000fba:	4462      	add	r2, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x124>
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	e70a      	b.n	8000dd8 <__udivmoddi4+0xd8>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x14e>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <__aeabi_d2uiz>:
 8000fcc:	004a      	lsls	r2, r1, #1
 8000fce:	d211      	bcs.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fd4:	d211      	bcs.n	8000ffa <__aeabi_d2uiz+0x2e>
 8000fd6:	d50d      	bpl.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fe0:	d40e      	bmi.n	8001000 <__aeabi_d2uiz+0x34>
 8000fe2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fee:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff2:	4770      	bx	lr
 8000ff4:	f04f 0000 	mov.w	r0, #0
 8000ff8:	4770      	bx	lr
 8000ffa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ffe:	d102      	bne.n	8001006 <__aeabi_d2uiz+0x3a>
 8001000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr

0800100c <peerLocalizationInit>:
#include "task.h"
#include "peer_localization.h"


void peerLocalizationInit()
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  // All other_positions[in].id will be set to zero due to static initialization.
  // If we ever switch to dynamic allocation, we need to set them to zero explicitly.
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <appInit>:




void __attribute__((weak)) appInit()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af04      	add	r7, sp, #16
  if (isInit) {
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <appInit+0x38>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d111      	bne.n	800104e <appInit+0x32>
    return;
  }

  STATIC_MEM_TASK_CREATE(appTask, appTask, APP_TASK_NAME, NULL, CONFIG_APP_PRIORITY);
 800102a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800102e:	461a      	mov	r2, r3
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <appInit+0x3c>)
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <appInit+0x40>)
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	2300      	movs	r3, #0
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2300      	movs	r3, #0
 800103e:	4908      	ldr	r1, [pc, #32]	; (8001060 <appInit+0x44>)
 8001040:	4808      	ldr	r0, [pc, #32]	; (8001064 <appInit+0x48>)
 8001042:	f00d ff57 	bl	800eef4 <xTaskCreateStatic>
  isInit = true;
 8001046:	4b03      	ldr	r3, [pc, #12]	; (8001054 <appInit+0x38>)
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	e000      	b.n	8001050 <appInit+0x34>
    return;
 800104e:	bf00      	nop
}
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20001d54 	.word	0x20001d54
 8001058:	200005ac 	.word	0x200005ac
 800105c:	20001d58 	.word	0x20001d58
 8001060:	080149e8 	.word	0x080149e8
 8001064:	08001069 	.word	0x08001069

08001068 <appTask>:

static void appTask(void *param)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 8001070:	f001 fa84 	bl	800257c <systemWaitStart>

  appMain();
 8001074:	f000 f806 	bl	8001084 <appMain>

  while(1) {
    vTaskDelay(portMAX_DELAY);
 8001078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800107c:	f00e f8f2 	bl	800f264 <vTaskDelay>
 8001080:	e7fa      	b.n	8001078 <appTask+0x10>
	...

08001084 <appMain>:
  }
}


void appMain()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  DEBUG_PRINT("Waiting for activation ...\n");
 8001088:	4906      	ldr	r1, [pc, #24]	; (80010a4 <appMain+0x20>)
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <appMain+0x24>)
 800108c:	f002 fb8a 	bl	80037a4 <eprintf>

  /* make sure that the assertion is not simple enough to be optimized away
   * by the compiler */

  while(1) {
    vTaskDelay(M2T(2000));
 8001090:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001094:	f00e f8e6 	bl	800f264 <vTaskDelay>
    DEBUG_PRINT("Hello World!\n");
 8001098:	4904      	ldr	r1, [pc, #16]	; (80010ac <appMain+0x28>)
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <appMain+0x24>)
 800109c:	f002 fb82 	bl	80037a4 <eprintf>
    vTaskDelay(M2T(2000));
 80010a0:	e7f6      	b.n	8001090 <appMain+0xc>
 80010a2:	bf00      	nop
 80010a4:	080149ec 	.word	0x080149ec
 80010a8:	08002f15 	.word	0x08002f15
 80010ac:	08014a08 	.word	0x08014a08

080010b0 <crtpInit>:

STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpTxTask, CRTP_TX_TASK_STACKSIZE);
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpRxTask, CRTP_RX_TASK_STACKSIZE);

void crtpInit(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af04      	add	r7, sp, #16
  if(isInit)
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <crtpInit+0x70>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d12d      	bne.n	800111a <crtpInit+0x6a>
    return;

  txQueue = xQueueCreate(CRTP_TX_QUEUE_SIZE, sizeof(CRTPPacket));
 80010be:	2200      	movs	r2, #0
 80010c0:	2120      	movs	r1, #32
 80010c2:	2078      	movs	r0, #120	; 0x78
 80010c4:	f00d f84e 	bl	800e164 <xQueueGenericCreate>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a16      	ldr	r2, [pc, #88]	; (8001124 <crtpInit+0x74>)
 80010cc:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(txQueue);
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <crtpInit+0x74>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a15      	ldr	r2, [pc, #84]	; (8001128 <crtpInit+0x78>)
 80010d4:	4915      	ldr	r1, [pc, #84]	; (800112c <crtpInit+0x7c>)
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 fbc2 	bl	8003860 <qmRegisterQueue>

  STATIC_MEM_TASK_CREATE(crtpTxTask, crtpTxTask, CRTP_TX_TASK_NAME, NULL, CRTP_TX_TASK_PRI);
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	461a      	mov	r2, r3
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <crtpInit+0x80>)
 80010e2:	9302      	str	r3, [sp, #8]
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <crtpInit+0x84>)
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	2302      	movs	r3, #2
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2300      	movs	r3, #0
 80010ee:	4912      	ldr	r1, [pc, #72]	; (8001138 <crtpInit+0x88>)
 80010f0:	4812      	ldr	r0, [pc, #72]	; (800113c <crtpInit+0x8c>)
 80010f2:	f00d feff 	bl	800eef4 <xTaskCreateStatic>
  STATIC_MEM_TASK_CREATE(crtpRxTask, crtpRxTask, CRTP_RX_TASK_NAME, NULL, CRTP_RX_TASK_PRI);
 80010f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b10      	ldr	r3, [pc, #64]	; (8001140 <crtpInit+0x90>)
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <crtpInit+0x94>)
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	2302      	movs	r3, #2
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2300      	movs	r3, #0
 800110a:	490f      	ldr	r1, [pc, #60]	; (8001148 <crtpInit+0x98>)
 800110c:	480f      	ldr	r0, [pc, #60]	; (800114c <crtpInit+0x9c>)
 800110e:	f00d fef1 	bl	800eef4 <xTaskCreateStatic>

  isInit = true;
 8001112:	4b03      	ldr	r3, [pc, #12]	; (8001120 <crtpInit+0x70>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	e000      	b.n	800111c <crtpInit+0x6c>
    return;
 800111a:	bf00      	nop
}
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20002208 	.word	0x20002208
 8001124:	20002220 	.word	0x20002220
 8001128:	08014a18 	.word	0x08014a18
 800112c:	08014a20 	.word	0x08014a20
 8001130:	20000864 	.word	0x20000864
 8001134:	20000664 	.word	0x20000664
 8001138:	08014a3c 	.word	0x08014a3c
 800113c:	08001151 	.word	0x08001151
 8001140:	20000d1c 	.word	0x20000d1c
 8001144:	2000091c 	.word	0x2000091c
 8001148:	08014a44 	.word	0x08014a44
 800114c:	080011c1 	.word	0x080011c1

08001150 <crtpTxTask>:
{
  return (CRTP_TX_QUEUE_SIZE - uxQueueMessagesWaiting(txQueue));
}

void crtpTxTask(void *param)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  CRTPPacket p;

  while (true)
  {
    if (link != &nopLink)
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <crtpTxTask+0x60>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <crtpTxTask+0x64>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d021      	beq.n	80011a6 <crtpTxTask+0x56>
    {
      if (xQueueReceive(txQueue, &p, portMAX_DELAY) == pdTRUE)
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <crtpTxTask+0x68>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f107 0108 	add.w	r1, r7, #8
 800116a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800116e:	4618      	mov	r0, r3
 8001170:	f00d fac8 	bl	800e704 <xQueueReceive>
 8001174:	4603      	mov	r3, r0
 8001176:	2b01      	cmp	r3, #1
 8001178:	d1ee      	bne.n	8001158 <crtpTxTask+0x8>
      {
        // Keep testing, if the link changes to USB it will go though
        while (link->sendPacket(&p) == false)
 800117a:	e002      	b.n	8001182 <crtpTxTask+0x32>
        {
          // Relaxation time
          vTaskDelay((10));
 800117c:	200a      	movs	r0, #10
 800117e:	f00e f871 	bl	800f264 <vTaskDelay>
        while (link->sendPacket(&p) == false)
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <crtpTxTask+0x60>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f107 0208 	add.w	r2, r7, #8
 800118c:	4610      	mov	r0, r2
 800118e:	4798      	blx	r3
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0f2      	beq.n	800117c <crtpTxTask+0x2c>
        }
        stats.txCount++;
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <crtpTxTask+0x6c>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	3301      	adds	r3, #1
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <crtpTxTask+0x6c>)
 800119e:	6053      	str	r3, [r2, #4]
        updateStats();
 80011a0:	f000 f87e 	bl	80012a0 <updateStats>
 80011a4:	e7d8      	b.n	8001158 <crtpTxTask+0x8>
      }
    }
    else
    {
      vTaskDelay((10));
 80011a6:	200a      	movs	r0, #10
 80011a8:	f00e f85c 	bl	800f264 <vTaskDelay>
    if (link != &nopLink)
 80011ac:	e7d4      	b.n	8001158 <crtpTxTask+0x8>
 80011ae:	bf00      	nop
 80011b0:	20000014 	.word	0x20000014
 80011b4:	20000000 	.word	0x20000000
 80011b8:	20002220 	.word	0x20002220
 80011bc:	2000220c 	.word	0x2000220c

080011c0 <crtpRxTask>:
    }
  }
}

void crtpRxTask(void *param)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  CRTPPacket p;

  while (true)
  {
    if (link != &nopLink)
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <crtpRxTask+0x9c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a24      	ldr	r2, [pc, #144]	; (8001260 <crtpRxTask+0xa0>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d040      	beq.n	8001254 <crtpRxTask+0x94>
    {
      if (!link->receivePacket(&p))
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <crtpRxTask+0x9c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f107 0208 	add.w	r2, r7, #8
 80011dc:	4610      	mov	r0, r2
 80011de:	4798      	blx	r3
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <crtpRxTask+0x8>
      {
        if (queues[p.port])
 80011e6:	7a7b      	ldrb	r3, [r7, #9]
 80011e8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <crtpRxTask+0xa4>)
 80011f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00e      	beq.n	8001218 <crtpRxTask+0x58>
        {
          // Block, since we should never drop a packet
          xQueueSend(queues[p.port], &p, portMAX_DELAY);
 80011fa:	7a7b      	ldrb	r3, [r7, #9]
 80011fc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001200:	b2db      	uxtb	r3, r3
 8001202:	461a      	mov	r2, r3
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <crtpRxTask+0xa4>)
 8001206:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800120a:	f107 0108 	add.w	r1, r7, #8
 800120e:	2300      	movs	r3, #0
 8001210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001214:	f00d f850 	bl	800e2b8 <xQueueGenericSend>
        }

        if (callbacks[p.port])
 8001218:	7a7b      	ldrb	r3, [r7, #9]
 800121a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800121e:	b2db      	uxtb	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <crtpRxTask+0xa8>)
 8001224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00b      	beq.n	8001244 <crtpRxTask+0x84>
        {
          callbacks[p.port](&p);
 800122c:	7a7b      	ldrb	r3, [r7, #9]
 800122e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <crtpRxTask+0xa8>)
 8001238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123c:	f107 0208 	add.w	r2, r7, #8
 8001240:	4610      	mov	r0, r2
 8001242:	4798      	blx	r3
        }

        stats.rxCount++;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <crtpRxTask+0xac>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	4a08      	ldr	r2, [pc, #32]	; (800126c <crtpRxTask+0xac>)
 800124c:	6013      	str	r3, [r2, #0]
        updateStats();
 800124e:	f000 f827 	bl	80012a0 <updateStats>
 8001252:	e7b9      	b.n	80011c8 <crtpRxTask+0x8>
      }
    }
    else
    {
      vTaskDelay((10));
 8001254:	200a      	movs	r0, #10
 8001256:	f00e f805 	bl	800f264 <vTaskDelay>
    if (link != &nopLink)
 800125a:	e7b5      	b.n	80011c8 <crtpRxTask+0x8>
 800125c:	20000014 	.word	0x20000014
 8001260:	20000000 	.word	0x20000000
 8001264:	20002224 	.word	0x20002224
 8001268:	20002264 	.word	0x20002264
 800126c:	2000220c 	.word	0x2000220c

08001270 <nopFunc>:

  link->setEnable(true);
}

static int nopFunc(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ENETDOWN;
 8001274:	2373      	movs	r3, #115	; 0x73
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <clearStats>:

static void clearStats()
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  stats.rxCount = 0;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <clearStats+0x1c>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
  stats.txCount = 0;
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <clearStats+0x1c>)
 800128c:	2200      	movs	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	2000220c 	.word	0x2000220c

080012a0 <updateStats>:

static void updateStats()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
  uint32_t now = xTaskGetTickCount();
 80012a6:	f00e f99b 	bl	800f5e0 <xTaskGetTickCount>
 80012aa:	6078      	str	r0, [r7, #4]
  if (now > stats.nextStatisticsTime) {
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <updateStats+0x9c>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d93d      	bls.n	8001332 <updateStats+0x92>
    float interval = now - stats.previousStatisticsTime;
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <updateStats+0x9c>)
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c6:	edc7 7a00 	vstr	s15, [r7]
    stats.rxRate = (uint16_t)(1000.0f * stats.rxCount / interval);
 80012ca:	4b1c      	ldr	r3, [pc, #112]	; (800133c <updateStats+0x9c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001340 <updateStats+0xa0>
 80012da:	ee67 6a87 	vmul.f32	s13, s15, s14
 80012de:	ed97 7a00 	vldr	s14, [r7]
 80012e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ea:	ee17 3a90 	vmov	r3, s15
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <updateStats+0x9c>)
 80012f2:	811a      	strh	r2, [r3, #8]
    stats.txRate = (uint16_t)(1000.0f * stats.txCount / interval);
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <updateStats+0x9c>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001300:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001340 <updateStats+0xa0>
 8001304:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001308:	ed97 7a00 	vldr	s14, [r7]
 800130c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001314:	ee17 3a90 	vmov	r3, s15
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <updateStats+0x9c>)
 800131c:	815a      	strh	r2, [r3, #10]

    clearStats();
 800131e:	f7ff ffaf 	bl	8001280 <clearStats>
    stats.previousStatisticsTime = now;
 8001322:	4a06      	ldr	r2, [pc, #24]	; (800133c <updateStats+0x9c>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6113      	str	r3, [r2, #16]
    stats.nextStatisticsTime = now + STATS_INTERVAL;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800132e:	4a03      	ldr	r2, [pc, #12]	; (800133c <updateStats+0x9c>)
 8001330:	60d3      	str	r3, [r2, #12]
  }
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000220c 	.word	0x2000220c
 8001340:	447a0000 	.word	0x447a0000

08001344 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	601a      	str	r2, [r3, #0]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f023 0210 	bic.w	r2, r3, #16
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	431a      	orrs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	605a      	str	r2, [r3, #4]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800139e:	2301      	movs	r3, #1
 80013a0:	e000      	b.n	80013a4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d101      	bne.n	80013c8 <LL_SPI_IsActiveFlag_TXE+0x18>
 80013c4:	2301      	movs	r3, #1
 80013c6:	e000      	b.n	80013ca <LL_SPI_IsActiveFlag_TXE+0x1a>
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	330c      	adds	r3, #12
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b2db      	uxtb	r3, r3
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b085      	sub	sp, #20
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	330c      	adds	r3, #12
 8001402:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	78fa      	ldrb	r2, [r7, #3]
 8001408:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001424:	4907      	ldr	r1, [pc, #28]	; (8001444 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4313      	orrs	r3, r2
 800142a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800142e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4013      	ands	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001436:	68fb      	ldr	r3, [r7, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	40023800 	.word	0x40023800

08001448 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001452:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001454:	4907      	ldr	r1, [pc, #28]	; (8001474 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4313      	orrs	r3, r2
 800145a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <LL_APB2_GRP1_EnableClock+0x2c>)
 800145e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4013      	ands	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001466:	68fb      	ldr	r3, [r7, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	40023800 	.word	0x40023800

08001478 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	619a      	str	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	041a      	lsls	r2, r3, #16
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	619a      	str	r2, [r3, #24]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b090      	sub	sp, #64	; 0x40
 80014b8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80014ba:	f107 0318 	add.w	r3, r7, #24
 80014be:	2228      	movs	r2, #40	; 0x28
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f011 fbd8 	bl	8012c78 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	463b      	mov	r3, r7
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]
 80014d6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80014d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80014dc:	f7ff ffb4 	bl	8001448 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80014e0:	2001      	movs	r0, #1
 80014e2:	f7ff ff99 	bl	8001418 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80014e6:	2004      	movs	r0, #4
 80014e8:	f7ff ff96 	bl	8001418 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80014ec:	23e0      	movs	r3, #224	; 0xe0
 80014ee:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014f0:	2302      	movs	r3, #2
 80014f2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001500:	2305      	movs	r3, #5
 8001502:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	463b      	mov	r3, r7
 8001506:	4619      	mov	r1, r3
 8001508:	4825      	ldr	r0, [pc, #148]	; (80015a0 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800150a:	f009 f85c 	bl	800a5c6 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001512:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001516:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001518:	2300      	movs	r3, #0
 800151a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800151c:	2302      	movs	r3, #2
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001520:	2301      	movs	r3, #1
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800152a:	2310      	movs	r3, #16
 800152c:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800152e:	2300      	movs	r3, #0
 8001530:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001536:	230a      	movs	r3, #10
 8001538:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 800153a:	f107 0318 	add.w	r3, r7, #24
 800153e:	4619      	mov	r1, r3
 8001540:	4818      	ldr	r0, [pc, #96]	; (80015a4 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001542:	f009 f8e4 	bl	800a70e <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001546:	2100      	movs	r1, #0
 8001548:	4816      	ldr	r0, [pc, #88]	; (80015a4 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800154a:	f7ff ff0b 	bl	8001364 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 800154e:	2110      	movs	r1, #16
 8001550:	4813      	ldr	r0, [pc, #76]	; (80015a0 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001552:	f7ff ff9f 	bl	8001494 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8001556:	2310      	movs	r3, #16
 8001558:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800155a:	2301      	movs	r3, #1
 800155c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 800156a:	463b      	mov	r3, r7
 800156c:	4619      	mov	r1, r3
 800156e:	480c      	ldr	r0, [pc, #48]	; (80015a0 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001570:	f009 f829 	bl	800a5c6 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8001574:	2310      	movs	r3, #16
 8001576:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001578:	2300      	movs	r3, #0
 800157a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800157c:	2301      	movs	r3, #1
 800157e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001580:	463b      	mov	r3, r7
 8001582:	4619      	mov	r1, r3
 8001584:	4808      	ldr	r0, [pc, #32]	; (80015a8 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001586:	f009 f81e 	bl	800a5c6 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800158c:	f7ff feda 	bl	8001344 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001590:	2110      	movs	r1, #16
 8001592:	4803      	ldr	r0, [pc, #12]	; (80015a0 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001594:	f7ff ff70 	bl	8001478 <LL_GPIO_SetOutputPin>
}
 8001598:	bf00      	nop
 800159a:	3740      	adds	r7, #64	; 0x40
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40020000 	.word	0x40020000
 80015a4:	40013000 	.word	0x40013000
 80015a8:	40020800 	.word	0x40020800

080015ac <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 80015b6:	bf00      	nop
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <SPI1_SendByte+0x40>)
 80015ba:	f7ff fef9 	bl	80013b0 <LL_SPI_IsActiveFlag_TXE>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f9      	beq.n	80015b8 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4808      	ldr	r0, [pc, #32]	; (80015ec <SPI1_SendByte+0x40>)
 80015ca:	f7ff ff12 	bl	80013f2 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80015ce:	bf00      	nop
 80015d0:	4806      	ldr	r0, [pc, #24]	; (80015ec <SPI1_SendByte+0x40>)
 80015d2:	f7ff feda 	bl	800138a <LL_SPI_IsActiveFlag_RXNE>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f9      	beq.n	80015d0 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <SPI1_SendByte+0x40>)
 80015de:	f7ff fefa 	bl	80013d6 <LL_SPI_ReceiveData8>
 80015e2:	4603      	mov	r3, r0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40013000 	.word	0x40013000

080015f0 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 80015fa:	2110      	movs	r1, #16
 80015fc:	480b      	ldr	r0, [pc, #44]	; (800162c <ICM20602_Readbyte+0x3c>)
 80015fe:	f7ff ff49 	bl	8001494 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ffce 	bl	80015ac <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff ffcb 	bl	80015ac <SPI1_SendByte>
 8001616:	4603      	mov	r3, r0
 8001618:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800161a:	2110      	movs	r1, #16
 800161c:	4803      	ldr	r0, [pc, #12]	; (800162c <ICM20602_Readbyte+0x3c>)
 800161e:	f7ff ff2b 	bl	8001478 <LL_GPIO_SetOutputPin>
	
	return val;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40020000 	.word	0x40020000

08001630 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	460a      	mov	r2, r1
 800163a:	71fb      	strb	r3, [r7, #7]
 800163c:	4613      	mov	r3, r2
 800163e:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001640:	2110      	movs	r1, #16
 8001642:	480b      	ldr	r0, [pc, #44]	; (8001670 <ICM20602_Writebyte+0x40>)
 8001644:	f7ff ff26 	bl	8001494 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800164e:	b2db      	uxtb	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ffab 	bl	80015ac <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8001656:	79bb      	ldrb	r3, [r7, #6]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ffa7 	bl	80015ac <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 800165e:	2110      	movs	r1, #16
 8001660:	4803      	ldr	r0, [pc, #12]	; (8001670 <ICM20602_Writebyte+0x40>)
 8001662:	f7ff ff09 	bl	8001478 <LL_GPIO_SetOutputPin>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40020000 	.word	0x40020000

08001674 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 800167e:	f107 0308 	add.w	r3, r7, #8
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001688:	463b      	mov	r3, r7
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001690:	f7ff ff10 	bl	80014b4 <ICM20602_GPIO_SPI_Initialization>
	
	DEBUG_PRINT("Checking ICM20602...");
 8001694:	4934      	ldr	r1, [pc, #208]	; (8001768 <ICM20602_Initialization+0xf4>)
 8001696:	4835      	ldr	r0, [pc, #212]	; (800176c <ICM20602_Initialization+0xf8>)
 8001698:	f002 f884 	bl	80037a4 <eprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 800169c:	2075      	movs	r0, #117	; 0x75
 800169e:	f7ff ffa7 	bl	80015f0 <ICM20602_Readbyte>
 80016a2:	4603      	mov	r3, r0
 80016a4:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b12      	cmp	r3, #18
 80016aa:	d106      	bne.n	80016ba <ICM20602_Initialization+0x46>
	{
		DEBUG_PRINT("\r\nICM20602 who_am_i = 0x%02x.................Pass\n", who_am_i);
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	461a      	mov	r2, r3
 80016b0:	492f      	ldr	r1, [pc, #188]	; (8001770 <ICM20602_Initialization+0xfc>)
 80016b2:	482e      	ldr	r0, [pc, #184]	; (800176c <ICM20602_Initialization+0xf8>)
 80016b4:	f002 f876 	bl	80037a4 <eprintf>
 80016b8:	e012      	b.n	80016e0 <ICM20602_Initialization+0x6c>
	}
	// recheck
	else if(who_am_i != 0x12)
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	2b12      	cmp	r3, #18
 80016be:	d00f      	beq.n	80016e0 <ICM20602_Initialization+0x6c>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 80016c0:	2075      	movs	r0, #117	; 0x75
 80016c2:	f7ff ff95 	bl	80015f0 <ICM20602_Readbyte>
 80016c6:	4603      	mov	r3, r0
 80016c8:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	2b12      	cmp	r3, #18
 80016ce:	d007      	beq.n	80016e0 <ICM20602_Initialization+0x6c>
			DEBUG_PRINT( "ICM20602 is not found: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	2312      	movs	r3, #18
 80016d4:	4927      	ldr	r1, [pc, #156]	; (8001774 <ICM20602_Initialization+0x100>)
 80016d6:	4825      	ldr	r0, [pc, #148]	; (800176c <ICM20602_Initialization+0xf8>)
 80016d8:	f002 f864 	bl	80037a4 <eprintf>
			return 1; //ERROR
 80016dc:	2301      	movs	r3, #1
 80016de:	e03f      	b.n	8001760 <ICM20602_Initialization+0xec>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	206b      	movs	r0, #107	; 0x6b
 80016e4:	f7ff ffa4 	bl	8001630 <ICM20602_Writebyte>
	delay_us(5000000);
 80016e8:	4823      	ldr	r0, [pc, #140]	; (8001778 <ICM20602_Initialization+0x104>)
 80016ea:	f002 ff79 	bl	80045e0 <delay_us>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80016ee:	2101      	movs	r1, #1
 80016f0:	206b      	movs	r0, #107	; 0x6b
 80016f2:	f7ff ff9d 	bl	8001630 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	delay_us(5000000);
 80016f6:	4820      	ldr	r0, [pc, #128]	; (8001778 <ICM20602_Initialization+0x104>)
 80016f8:	f002 ff72 	bl	80045e0 <delay_us>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 80016fc:	2100      	movs	r1, #0
 80016fe:	206c      	movs	r0, #108	; 0x6c
 8001700:	f7ff ff96 	bl	8001630 <ICM20602_Writebyte>
	delay_us(5000000);
 8001704:	481c      	ldr	r0, [pc, #112]	; (8001778 <ICM20602_Initialization+0x104>)
 8001706:	f002 ff6b 	bl	80045e0 <delay_us>

	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 800170a:	2100      	movs	r1, #0
 800170c:	2019      	movs	r0, #25
 800170e:	f7ff ff8f 	bl	8001630 <ICM20602_Writebyte>
	delay_us(5000000);
 8001712:	4819      	ldr	r0, [pc, #100]	; (8001778 <ICM20602_Initialization+0x104>)
 8001714:	f002 ff64 	bl	80045e0 <delay_us>
	
	// Gyro DLPF Config
//	ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001718:	2105      	movs	r1, #5
 800171a:	201a      	movs	r0, #26
 800171c:	f7ff ff88 	bl	8001630 <ICM20602_Writebyte>
	delay_us(5000000);
 8001720:	4815      	ldr	r0, [pc, #84]	; (8001778 <ICM20602_Initialization+0x104>)
 8001722:	f002 ff5d 	bl	80045e0 <delay_us>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001726:	2118      	movs	r1, #24
 8001728:	201b      	movs	r0, #27
 800172a:	f7ff ff81 	bl	8001630 <ICM20602_Writebyte>
	delay_us(5000000);
 800172e:	4812      	ldr	r0, [pc, #72]	; (8001778 <ICM20602_Initialization+0x104>)
 8001730:	f002 ff56 	bl	80045e0 <delay_us>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001734:	2118      	movs	r1, #24
 8001736:	201c      	movs	r0, #28
 8001738:	f7ff ff7a 	bl	8001630 <ICM20602_Writebyte>
	delay_us(5000000);
 800173c:	480e      	ldr	r0, [pc, #56]	; (8001778 <ICM20602_Initialization+0x104>)
 800173e:	f002 ff4f 	bl	80045e0 <delay_us>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001742:	2103      	movs	r1, #3
 8001744:	201d      	movs	r0, #29
 8001746:	f7ff ff73 	bl	8001630 <ICM20602_Writebyte>
	delay_us(5000000);
 800174a:	480b      	ldr	r0, [pc, #44]	; (8001778 <ICM20602_Initialization+0x104>)
 800174c:	f002 ff48 	bl	80045e0 <delay_us>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001750:	2101      	movs	r1, #1
 8001752:	2038      	movs	r0, #56	; 0x38
 8001754:	f7ff ff6c 	bl	8001630 <ICM20602_Writebyte>
	delay_us(5000000);
 8001758:	4807      	ldr	r0, [pc, #28]	; (8001778 <ICM20602_Initialization+0x104>)
 800175a:	f002 ff41 	bl	80045e0 <delay_us>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	08014a98 	.word	0x08014a98
 800176c:	08002f15 	.word	0x08002f15
 8001770:	08014ab0 	.word	0x08014ab0
 8001774:	08014ae4 	.word	0x08014ae4
 8001778:	004c4b40 	.word	0x004c4b40

0800177c <branch_to_bootloader>:
 * Based from the micropython machine_bootloader function.
 * 
 * @param r0 The register to utilize
 * @param bl_addr The bootloader address to jump to
 */
static void branch_to_bootloader(uint32_t r0, uint32_t bl_addr){
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
    __asm volatile (
 8001786:	680a      	ldr	r2, [r1, #0]
 8001788:	f382 8808 	msr	MSP, r2
 800178c:	684a      	ldr	r2, [r1, #4]
 800178e:	4710      	bx	r2
        "msr msp, r2\n"         // get stack pointer
        "ldr r2, [r1, #4]\n"    // get address of destination
        "bx r2\n"               // branch to bootloader
        );
    //unreachable code
    while(1);
 8001790:	e7fe      	b.n	8001790 <branch_to_bootloader+0x14>
	...

08001794 <check_enter_bootloader>:
}

void check_enter_bootloader(){
 8001794:	b5b0      	push	{r4, r5, r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
    uint64_t bl_state = *BL_STATE_PTR;
 800179a:	491d      	ldr	r1, [pc, #116]	; (8001810 <check_enter_bootloader+0x7c>)
 800179c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017a0:	e9c7 0100 	strd	r0, r1, [r7]
    //set to invalid for next boot
    *BL_STATE_PTR = BL_STATE_INVALID;
 80017a4:	4c1a      	ldr	r4, [pc, #104]	; (8001810 <check_enter_bootloader+0x7c>)
 80017a6:	f04f 0000 	mov.w	r0, #0
 80017aa:	f04f 0100 	mov.w	r1, #0
 80017ae:	e9c4 0100 	strd	r0, r1, [r4]

    if(BL_STATE_GET_KEY(bl_state) == BL_STATE_KEY && (RCC->CSR & RCC_CSR_SFTRSTF)){
 80017b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017b6:	f04f 0000 	mov.w	r0, #0
 80017ba:	f04f 0100 	mov.w	r1, #0
 80017be:	0028      	movs	r0, r5
 80017c0:	2100      	movs	r1, #0
 80017c2:	f3c0 020b 	ubfx	r2, r0, #0, #12
 80017c6:	2300      	movs	r3, #0
 80017c8:	4912      	ldr	r1, [pc, #72]	; (8001814 <check_enter_bootloader+0x80>)
 80017ca:	4411      	add	r1, r2
 80017cc:	430b      	orrs	r3, r1
 80017ce:	d11a      	bne.n	8001806 <check_enter_bootloader+0x72>
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <check_enter_bootloader+0x84>)
 80017d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d014      	beq.n	8001806 <check_enter_bootloader+0x72>

        //remap memory to system flash
//        SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SystemFlash);
    		//위 함수를 아래 함수로 대체
        assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap_SystemFlash));
        SYSCFG->MEMRMP = SYSCFG_MemoryRemap_SystemFlash;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <check_enter_bootloader+0x88>)
 80017de:	2201      	movs	r2, #1
 80017e0:	601a      	str	r2, [r3, #0]

        branch_to_bootloader(BL_STATE_GET_REG(bl_state), BL_STATE_GET_ADDR(bl_state));
 80017e2:	683c      	ldr	r4, [r7, #0]
 80017e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	000a      	movs	r2, r1
 80017f2:	2300      	movs	r3, #0
 80017f4:	4613      	mov	r3, r2
 80017f6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80017fa:	f023 030f 	bic.w	r3, r3, #15
 80017fe:	4619      	mov	r1, r3
 8001800:	4620      	mov	r0, r4
 8001802:	f7ff ffbb 	bl	800177c <branch_to_bootloader>
    }
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bdb0      	pop	{r4, r5, r7, pc}
 800180e:	bf00      	nop
 8001810:	2001c000 	.word	0x2001c000
 8001814:	fffffa5b 	.word	0xfffffa5b
 8001818:	40023800 	.word	0x40023800
 800181c:	40013800 	.word	0x40013800

08001820 <buzzerInit>:




void buzzerInit()
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001824:	2100      	movs	r1, #0
 8001826:	4804      	ldr	r0, [pc, #16]	; (8001838 <buzzerInit+0x18>)
 8001828:	f006 fed4 	bl	80085d4 <HAL_TIM_PWM_Start>
	 TIM3->PSC= 0;
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <buzzerInit+0x1c>)
 800182e:	2200      	movs	r2, #0
 8001830:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20003fcc 	.word	0x20003fcc
 800183c:	40000400 	.word	0x40000400

08001840 <buzzerOff>:
{
  return true;
}

void buzzerOff()
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  TIM3->PSC= 0;
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <buzzerOff+0x18>)
 8001846:	2200      	movs	r2, #0
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800184a:	2100      	movs	r1, #0
 800184c:	4803      	ldr	r0, [pc, #12]	; (800185c <buzzerOff+0x1c>)
 800184e:	f006 ff89 	bl	8008764 <HAL_TIM_PWM_Stop>
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40000400 	.word	0x40000400
 800185c:	20003fcc 	.word	0x20003fcc

08001860 <buzzerOn>:

void buzzerOn(uint32_t freq)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	TIM3->PSC = (1000000-1)/freq;
 8001868:	4a05      	ldr	r2, [pc, #20]	; (8001880 <buzzerOn+0x20>)
 800186a:	4906      	ldr	r1, [pc, #24]	; (8001884 <buzzerOn+0x24>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001872:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	40000400 	.word	0x40000400
 8001884:	000f423f 	.word	0x000f423f

08001888 <ledSetForce>:
    ledSet(i, ledLastState[i]);
  }
}

static void ledSetForce(led_t led, bool value)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	71fb      	strb	r3, [r7, #7]
 8001894:	4613      	mov	r3, r2
 8001896:	71bb      	strb	r3, [r7, #6]
  if (led > LED_NUM)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	2b06      	cmp	r3, #6
 800189c:	d832      	bhi.n	8001904 <ledSetForce+0x7c>
  {
    return;
  }

  if (led_polarity[led] == LED_POL_NEG)
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	4a1a      	ldr	r2, [pc, #104]	; (800190c <ledSetForce+0x84>)
 80018a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d10d      	bne.n	80018c6 <ledSetForce+0x3e>
  {
    value = !value;
 80018aa:	79bb      	ldrb	r3, [r7, #6]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bf14      	ite	ne
 80018b0:	2301      	movne	r3, #1
 80018b2:	2300      	moveq	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	f083 0301 	eor.w	r3, r3, #1
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	71bb      	strb	r3, [r7, #6]
 80018be:	79bb      	ldrb	r3, [r7, #6]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	71bb      	strb	r3, [r7, #6]
    syslinkSendPacket(&slp);
  }
  else
  {
  */
    if (value)
 80018c6:	79bb      	ldrb	r3, [r7, #6]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00d      	beq.n	80018e8 <ledSetForce+0x60>
    {
      HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_SET);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <ledSetForce+0x88>)
 80018d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	4a0f      	ldr	r2, [pc, #60]	; (8001914 <ledSetForce+0x8c>)
 80018d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	2201      	movs	r2, #1
 80018e0:	4619      	mov	r1, r3
 80018e2:	f004 fe2d 	bl	8006540 <HAL_GPIO_WritePin>
 80018e6:	e00e      	b.n	8001906 <ledSetForce+0x7e>
    }
    else
    {
        HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_RESET);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <ledSetForce+0x88>)
 80018ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	4a08      	ldr	r2, [pc, #32]	; (8001914 <ledSetForce+0x8c>)
 80018f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	2200      	movs	r2, #0
 80018fc:	4619      	mov	r1, r3
 80018fe:	f004 fe1f 	bl	8006540 <HAL_GPIO_WritePin>
 8001902:	e000      	b.n	8001906 <ledSetForce+0x7e>
    return;
 8001904:	bf00      	nop
    }

//  }

}
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000048 	.word	0x20000048
 8001910:	20000018 	.word	0x20000018
 8001914:	20000030 	.word	0x20000030

08001918 <ledInit>:
    ledSetSwitch(LED_LEDSEQ);
  }
}

void ledInit(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
  int i;

  if(isInit)
 800191e:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <ledInit+0xd0>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d15b      	bne.n	80019de <ledInit+0xc6>
    return;

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <ledInit+0xd4>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a2b      	ldr	r2, [pc, #172]	; (80019ec <ledInit+0xd4>)
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b29      	ldr	r3, [pc, #164]	; (80019ec <ledInit+0xd4>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	4b25      	ldr	r3, [pc, #148]	; (80019ec <ledInit+0xd4>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a24      	ldr	r2, [pc, #144]	; (80019ec <ledInit+0xd4>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b22      	ldr	r3, [pc, #136]	; (80019ec <ledInit+0xd4>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	683b      	ldr	r3, [r7, #0]

  for (i = 0; i < LED_NUM; i++)
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	e02a      	b.n	80019ca <ledInit+0xb2>
  {
    //Initialize the LED pins as an output
	HAL_GPIO_WritePin(led_port[i], led_pin[i], GPIO_PIN_RESET);
 8001974:	4a1e      	ldr	r2, [pc, #120]	; (80019f0 <ledInit+0xd8>)
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800197c:	4a1d      	ldr	r2, [pc, #116]	; (80019f4 <ledInit+0xdc>)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001984:	b29b      	uxth	r3, r3
 8001986:	2200      	movs	r2, #0
 8001988:	4619      	mov	r1, r3
 800198a:	f004 fdd9 	bl	8006540 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = led_pin[i];
 800198e:	4a19      	ldr	r2, [pc, #100]	; (80019f4 <ledInit+0xdc>)
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001996:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	2301      	movs	r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800199c:	2301      	movs	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(led_port[i], &GPIO_InitStruct);
 80019a4:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <ledInit+0xd8>)
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ac:	f107 0208 	add.w	r2, r7, #8
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 fc28 	bl	8006208 <HAL_GPIO_Init>
    //Turn off the LED:s
    ledSet(i, 0);
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f81c 	bl	80019fc <ledSet>
  for (i = 0; i < LED_NUM; i++)
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	3301      	adds	r3, #1
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	ddd1      	ble.n	8001974 <ledInit+0x5c>
  }

  ledSwitchState = LED_LEDSEQ;
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <ledInit+0xe0>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
  isInit = true;
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <ledInit+0xd0>)
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
 80019dc:	e000      	b.n	80019e0 <ledInit+0xc8>
    return;
 80019de:	bf00      	nop
}
 80019e0:	3720      	adds	r7, #32
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200022a4 	.word	0x200022a4
 80019ec:	40023800 	.word	0x40023800
 80019f0:	20000018 	.word	0x20000018
 80019f4:	20000030 	.word	0x20000030
 80019f8:	200022ae 	.word	0x200022ae

080019fc <ledSet>:
    //Turn on the LED:s
    ledSet(i, 1);
  }
}
void ledSet(led_t led, bool value)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	460a      	mov	r2, r1
 8001a06:	71fb      	strb	r3, [r7, #7]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	71bb      	strb	r3, [r7, #6]
  ASSERT(led < LED_NUM);
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	2b05      	cmp	r3, #5
 8001a10:	d904      	bls.n	8001a1c <ledSet+0x20>
 8001a12:	22e4      	movs	r2, #228	; 0xe4
 8001a14:	490a      	ldr	r1, [pc, #40]	; (8001a40 <ledSet+0x44>)
 8001a16:	480b      	ldr	r0, [pc, #44]	; (8001a44 <ledSet+0x48>)
 8001a18:	f001 f964 	bl	8002ce4 <assertFail>
  if (ledSwitchState == LED_LEDSEQ)
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <ledSet+0x4c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d105      	bne.n	8001a30 <ledSet+0x34>
  {
    ledSetForce(led, value);
 8001a24:	79ba      	ldrb	r2, [r7, #6]
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	4611      	mov	r1, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ff2c 	bl	8001888 <ledSetForce>
  }

  ledLastState[led] = value;
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	79b9      	ldrb	r1, [r7, #6]
 8001a34:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <ledSet+0x50>)
 8001a36:	54d1      	strb	r1, [r2, r3]
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	08014b14 	.word	0x08014b14
 8001a44:	08014b30 	.word	0x08014b30
 8001a48:	200022ae 	.word	0x200022ae
 8001a4c:	200022a8 	.word	0x200022a8

08001a50 <ledShowFaultPattern>:

void ledShowFaultPattern(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  ledSet(LED_GREEN_L, 0);
 8001a54:	2100      	movs	r1, #0
 8001a56:	2001      	movs	r0, #1
 8001a58:	f7ff ffd0 	bl	80019fc <ledSet>
  ledSet(LED_GREEN_R, 0);
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2003      	movs	r0, #3
 8001a60:	f7ff ffcc 	bl	80019fc <ledSet>
  ledSet(LED_RED_L, 1);
 8001a64:	2101      	movs	r1, #1
 8001a66:	2002      	movs	r0, #2
 8001a68:	f7ff ffc8 	bl	80019fc <ledSet>
  ledSet(LED_RED_R, 1);
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	2004      	movs	r0, #4
 8001a70:	f7ff ffc4 	bl	80019fc <ledSet>
  ledSet(LED_BLUE_L, 0);
 8001a74:	2100      	movs	r1, #0
 8001a76:	2000      	movs	r0, #0
 8001a78:	f7ff ffc0 	bl	80019fc <ledSet>
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <ledseqInit>:
static bool isInit = false;
static bool ledseqEnabled = false;

static void lesdeqCmdTask(void* param);

void ledseqInit() {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af02      	add	r7, sp, #8
  if(isInit) {
 8001a86:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <ledseqInit+0xe4>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d165      	bne.n	8001b5a <ledseqInit+0xda>
    return;
  }

  ledInit();
 8001a8e:	f7ff ff43 	bl	8001918 <ledInit>

  /* Led sequence priority */
  ledseqRegisterSequence(&seq_testPassed);
 8001a92:	4835      	ldr	r0, [pc, #212]	; (8001b68 <ledseqInit+0xe8>)
 8001a94:	f000 f9f8 	bl	8001e88 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_testFailed);
 8001a98:	4834      	ldr	r0, [pc, #208]	; (8001b6c <ledseqInit+0xec>)
 8001a9a:	f000 f9f5 	bl	8001e88 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_lowbat);
 8001a9e:	4834      	ldr	r0, [pc, #208]	; (8001b70 <ledseqInit+0xf0>)
 8001aa0:	f000 f9f2 	bl	8001e88 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_charged);
 8001aa4:	4833      	ldr	r0, [pc, #204]	; (8001b74 <ledseqInit+0xf4>)
 8001aa6:	f000 f9ef 	bl	8001e88 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_charging);
 8001aaa:	4833      	ldr	r0, [pc, #204]	; (8001b78 <ledseqInit+0xf8>)
 8001aac:	f000 f9ec 	bl	8001e88 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_calibrated);
 8001ab0:	4832      	ldr	r0, [pc, #200]	; (8001b7c <ledseqInit+0xfc>)
 8001ab2:	f000 f9e9 	bl	8001e88 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_alive);
 8001ab6:	4832      	ldr	r0, [pc, #200]	; (8001b80 <ledseqInit+0x100>)
 8001ab8:	f000 f9e6 	bl	8001e88 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_linkUp);
 8001abc:	4831      	ldr	r0, [pc, #196]	; (8001b84 <ledseqInit+0x104>)
 8001abe:	f000 f9e3 	bl	8001e88 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_linkDown);
 8001ac2:	4831      	ldr	r0, [pc, #196]	; (8001b88 <ledseqInit+0x108>)
 8001ac4:	f000 f9e0 	bl	8001e88 <ledseqRegisterSequence>

  //Initialise the sequences state
  for(int i=0; i<LED_NUM; i++) {
 8001ac8:	2300      	movs	r3, #0
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	e007      	b.n	8001ade <ledseqInit+0x5e>
    activeSeq[i] = 0;
 8001ace:	4a2f      	ldr	r2, [pc, #188]	; (8001b8c <ledseqInit+0x10c>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i=0; i<LED_NUM; i++) {
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3301      	adds	r3, #1
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	ddf4      	ble.n	8001ace <ledseqInit+0x4e>
  }

  //Init the soft timers that runs the led sequences for each leds
  for(int i=0; i<LED_NUM; i++) {
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	e018      	b.n	8001b1c <ledseqInit+0x9c>
    timer[i] = xTimerCreateStatic("ledseqTimer", (1000), pdFALSE, (void*)i, runLedseq, &timerBuffer[i]);
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	212c      	movs	r1, #44	; 0x2c
 8001af0:	fb01 f303 	mul.w	r3, r1, r3
 8001af4:	4926      	ldr	r1, [pc, #152]	; (8001b90 <ledseqInit+0x110>)
 8001af6:	440b      	add	r3, r1
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <ledseqInit+0x114>)
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	4613      	mov	r3, r2
 8001b00:	2200      	movs	r2, #0
 8001b02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b06:	4824      	ldr	r0, [pc, #144]	; (8001b98 <ledseqInit+0x118>)
 8001b08:	f00e fd3a 	bl	8010580 <xTimerCreateStatic>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4923      	ldr	r1, [pc, #140]	; (8001b9c <ledseqInit+0x11c>)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<LED_NUM; i++) {
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	2b05      	cmp	r3, #5
 8001b20:	dde3      	ble.n	8001aea <ledseqInit+0x6a>
  }

  ledseqMutex = xSemaphoreCreateMutex();
 8001b22:	2001      	movs	r0, #1
 8001b24:	f00c fb95 	bl	800e252 <xQueueCreateMutex>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <ledseqInit+0x120>)
 8001b2c:	6013      	str	r3, [r2, #0]

  ledseqCmdQueue = xQueueCreate(10, sizeof(struct ledseqCmd_s));
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2108      	movs	r1, #8
 8001b32:	200a      	movs	r0, #10
 8001b34:	f00c fb16 	bl	800e164 <xQueueGenericCreate>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4a1a      	ldr	r2, [pc, #104]	; (8001ba4 <ledseqInit+0x124>)
 8001b3c:	6013      	str	r3, [r2, #0]
  xTaskCreate(lesdeqCmdTask, LEDSEQCMD_TASK_NAME, LEDSEQCMD_TASK_STACKSIZE, NULL, LEDSEQCMD_TASK_PRI, NULL);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	2301      	movs	r3, #1
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2300      	movs	r3, #0
 8001b48:	2280      	movs	r2, #128	; 0x80
 8001b4a:	4917      	ldr	r1, [pc, #92]	; (8001ba8 <ledseqInit+0x128>)
 8001b4c:	4817      	ldr	r0, [pc, #92]	; (8001bac <ledseqInit+0x12c>)
 8001b4e:	f00d fa27 	bl	800efa0 <xTaskCreate>

  isInit = true;
 8001b52:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <ledseqInit+0xe4>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	e000      	b.n	8001b5c <ledseqInit+0xdc>
    return;
 8001b5a:	bf00      	nop
}
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200022bc 	.word	0x200022bc
 8001b68:	20000238 	.word	0x20000238
 8001b6c:	20000248 	.word	0x20000248
 8001b70:	20000070 	.word	0x20000070
 8001b74:	20000188 	.word	0x20000188
 8001b78:	200001b0 	.word	0x200001b0
 8001b7c:	20000108 	.word	0x20000108
 8001b80:	20000130 	.word	0x20000130
 8001b84:	20000158 	.word	0x20000158
 8001b88:	20000168 	.word	0x20000168
 8001b8c:	20000dd4 	.word	0x20000dd4
 8001b90:	20000e04 	.word	0x20000e04
 8001b94:	08001d71 	.word	0x08001d71
 8001b98:	08014b58 	.word	0x08014b58
 8001b9c:	20000dec 	.word	0x20000dec
 8001ba0:	200022b4 	.word	0x200022b4
 8001ba4:	200022b8 	.word	0x200022b8
 8001ba8:	08014b64 	.word	0x08014b64
 8001bac:	08001bb1 	.word	0x08001bb1

08001bb0 <lesdeqCmdTask>:

static void lesdeqCmdTask(void* param) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  while(1) {
    xQueueReceive(ledseqCmdQueue, &command, portMAX_DELAY);
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <lesdeqCmdTask+0x3c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f107 0108 	add.w	r1, r7, #8
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f00c fd9d 	bl	800e704 <xQueueReceive>

    switch(command.command) {
 8001bca:	7a3b      	ldrb	r3, [r7, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <lesdeqCmdTask+0x26>
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d005      	beq.n	8001be0 <lesdeqCmdTask+0x30>
 8001bd4:	e009      	b.n	8001bea <lesdeqCmdTask+0x3a>
      case run:
        ledseqRunBlocking(command.sequence);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 f825 	bl	8001c28 <ledseqRunBlocking>
        break;
 8001bde:	e004      	b.n	8001bea <lesdeqCmdTask+0x3a>
      case stop:
        ledseqStopBlocking(command.sequence);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 f898 	bl	8001d18 <ledseqStopBlocking>
        break;
 8001be8:	bf00      	nop
    xQueueReceive(ledseqCmdQueue, &command, portMAX_DELAY);
 8001bea:	e7e5      	b.n	8001bb8 <lesdeqCmdTask+0x8>
 8001bec:	200022b8 	.word	0x200022b8

08001bf0 <ledseqRun>:

void ledseqEnable(bool enable) {
  ledseqEnabled = enable;
}

bool ledseqRun(ledseqContext_t *context) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  command.command = run;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	723b      	strb	r3, [r7, #8]
  command.sequence = context;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(ledseqCmdQueue, &command, 0) == pdPASS) {
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <ledseqRun+0x34>)
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	f107 0108 	add.w	r1, r7, #8
 8001c08:	2300      	movs	r3, #0
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f00c fb54 	bl	800e2b8 <xQueueGenericSend>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <ledseqRun+0x2a>
    return true;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <ledseqRun+0x2c>
  }
  return false;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	200022b8 	.word	0x200022b8

08001c28 <ledseqRunBlocking>:

void ledseqRunBlocking(ledseqContext_t *context) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  const led_t led = context->led;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7b1b      	ldrb	r3, [r3, #12]
 8001c34:	73fb      	strb	r3, [r7, #15]

  xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 8001c36:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <ledseqRunBlocking+0x5c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f00c fe40 	bl	800e8c4 <xQueueSemaphoreTake>
  context->state = 0;  //Reset the seq. to its first step
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  updateActive(led);
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 f94f 	bl	8001ef0 <updateActive>
  xSemaphoreGive(ledseqMutex);
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <ledseqRunBlocking+0x5c>)
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	2300      	movs	r3, #0
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	f00c fb2c 	bl	800e2b8 <xQueueGenericSend>

  // Run the first step if the new seq is the active sequence
  if(activeSeq[led] == context) {
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <ledseqRunBlocking+0x60>)
 8001c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d106      	bne.n	8001c7c <ledseqRunBlocking+0x54>
    runLedseq(timer[led]);
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <ledseqRunBlocking+0x64>)
 8001c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f87a 	bl	8001d70 <runLedseq>
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	200022b4 	.word	0x200022b4
 8001c88:	20000dd4 	.word	0x20000dd4
 8001c8c:	20000dec 	.word	0x20000dec

08001c90 <ledseqSetChargeLevel>:

void ledseqSetChargeLevel(const float chargeLevel) {
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	ed87 0a01 	vstr	s0, [r7, #4]
  int onTime = LEDSEQ_CHARGE_CYCLE_TIME_500MA * chargeLevel;
 8001c9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c9e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001cd8 <ledseqSetChargeLevel+0x48>
 8001ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001caa:	ee17 3a90 	vmov	r3, s15
 8001cae:	60fb      	str	r3, [r7, #12]
  int offTime = LEDSEQ_CHARGE_CYCLE_TIME_500MA - onTime;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001cb6:	60bb      	str	r3, [r7, #8]

  seq_charging.sequence[0].action = onTime;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <ledseqSetChargeLevel+0x4c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	605a      	str	r2, [r3, #4]
  seq_charging.sequence[1].action = offTime;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <ledseqSetChargeLevel+0x4c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3308      	adds	r3, #8
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	605a      	str	r2, [r3, #4]
}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	447a0000 	.word	0x447a0000
 8001cdc:	200001b0 	.word	0x200001b0

08001ce0 <ledseqStop>:

bool ledseqStop(ledseqContext_t *context) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  command.command = stop;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	723b      	strb	r3, [r7, #8]
  command.sequence = context;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(ledseqCmdQueue, &command, 0) == pdPASS) {
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <ledseqStop+0x34>)
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	f107 0108 	add.w	r1, r7, #8
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f00c fadc 	bl	800e2b8 <xQueueGenericSend>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <ledseqStop+0x2a>
    return true;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <ledseqStop+0x2c>
  }
  return false;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	200022b8 	.word	0x200022b8

08001d18 <ledseqStopBlocking>:

void ledseqStopBlocking(ledseqContext_t *context) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  const led_t led = context->led;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7b1b      	ldrb	r3, [r3, #12]
 8001d24:	73fb      	strb	r3, [r7, #15]

  xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <ledseqStopBlocking+0x50>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f00c fdc8 	bl	800e8c4 <xQueueSemaphoreTake>
  context->state = LEDSEQ_STOP;  //Stop the seq.
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d3a:	609a      	str	r2, [r3, #8]
  updateActive(led);
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f8d6 	bl	8001ef0 <updateActive>
  xSemaphoreGive(ledseqMutex);
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <ledseqStopBlocking+0x50>)
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	2300      	movs	r3, #0
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	f00c fab3 	bl	800e2b8 <xQueueGenericSend>

  //Run the next active sequence (if any...)
  runLedseq(timer[led]);
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <ledseqStopBlocking+0x54>)
 8001d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f808 	bl	8001d70 <runLedseq>
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	200022b4 	.word	0x200022b4
 8001d6c:	20000dec 	.word	0x20000dec

08001d70 <runLedseq>:

/* Center of the led sequence machine. This function is executed by the FreeRTOS
 * timers and runs the sequences
 */
static void runLedseq( xTimerHandle xTimer ) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	6078      	str	r0, [r7, #4]
  if (!ledseqEnabled) {
 8001d78:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <runLedseq+0x10c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	f083 0301 	eor.w	r3, r3, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d171      	bne.n	8001e6a <runLedseq+0xfa>
    return;
  }

  led_t led = (led_t)pvTimerGetTimerID(xTimer);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f00e ff6e 	bl	8010c68 <pvTimerGetTimerID>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	75bb      	strb	r3, [r7, #22]
  ledseqContext_t* context = activeSeq[led];
 8001d90:	7dbb      	ldrb	r3, [r7, #22]
 8001d92:	4a3b      	ldr	r2, [pc, #236]	; (8001e80 <runLedseq+0x110>)
 8001d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d98:	613b      	str	r3, [r7, #16]
  if (NO_CONTEXT == context) {
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d066      	beq.n	8001e6e <runLedseq+0xfe>
    return;
  }

  bool leave = false;
 8001da0:	2300      	movs	r3, #0
 8001da2:	75fb      	strb	r3, [r7, #23]
  while(!leave) {
 8001da4:	e05a      	b.n	8001e5c <runLedseq+0xec>
    if (context->state == LEDSEQ_STOP) {
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dae:	d060      	beq.n	8001e72 <runLedseq+0x102>
      return;
    }

    const ledseqStep_t* step = &context->sequence[context->state];
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4413      	add	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]

    xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 8001dbe:	4b31      	ldr	r3, [pc, #196]	; (8001e84 <runLedseq+0x114>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f00c fd7c 	bl	800e8c4 <xQueueSemaphoreTake>
    context->state++;
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	609a      	str	r2, [r3, #8]
    led_t led = context->led;
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	7b1b      	ldrb	r3, [r3, #12]
 8001dda:	72fb      	strb	r3, [r7, #11]

    switch(step->action) {
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f113 0f02 	cmn.w	r3, #2
 8001de4:	d003      	beq.n	8001dee <runLedseq+0x7e>
 8001de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dea:	d004      	beq.n	8001df6 <runLedseq+0x86>
 8001dec:	e00c      	b.n	8001e08 <runLedseq+0x98>
      case LEDSEQ_LOOP:
        context->state = 0;
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
        break;
 8001df4:	e02b      	b.n	8001e4e <runLedseq+0xde>
      case LEDSEQ_STOP:
        context->state = LEDSEQ_STOP;
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dfc:	609a      	str	r2, [r3, #8]
        updateActive(led);
 8001dfe:	7afb      	ldrb	r3, [r7, #11]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 f875 	bl	8001ef0 <updateActive>
        break;
 8001e06:	e022      	b.n	8001e4e <runLedseq+0xde>
      default:  //The step is a LED action and a time
        ledSet(led, step->value);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	781a      	ldrb	r2, [r3, #0]
 8001e0c:	7afb      	ldrb	r3, [r7, #11]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fdf3 	bl	80019fc <ledSet>
        if (step->action == 0) {
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d016      	beq.n	8001e4c <runLedseq+0xdc>
          break;
        }
        xTimerChangePeriod(xTimer, (step->action), 0);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	461a      	mov	r2, r3
 8001e24:	2300      	movs	r3, #0
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2300      	movs	r3, #0
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f00e fc1b 	bl	8010668 <xTimerGenericCommand>
        xTimerStart(xTimer, 0);
 8001e32:	f00d fbd5 	bl	800f5e0 <xTaskGetTickCount>
 8001e36:	4602      	mov	r2, r0
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2101      	movs	r1, #1
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f00e fc11 	bl	8010668 <xTimerGenericCommand>
        leave = true;
 8001e46:	2301      	movs	r3, #1
 8001e48:	75fb      	strb	r3, [r7, #23]
        break;
 8001e4a:	e000      	b.n	8001e4e <runLedseq+0xde>
          break;
 8001e4c:	bf00      	nop
    }
    xSemaphoreGive(ledseqMutex);
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <runLedseq+0x114>)
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	2300      	movs	r3, #0
 8001e54:	2200      	movs	r2, #0
 8001e56:	2100      	movs	r1, #0
 8001e58:	f00c fa2e 	bl	800e2b8 <xQueueGenericSend>
  while(!leave) {
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
 8001e5e:	f083 0301 	eor.w	r3, r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d19e      	bne.n	8001da6 <runLedseq+0x36>
 8001e68:	e004      	b.n	8001e74 <runLedseq+0x104>
    return;
 8001e6a:	bf00      	nop
 8001e6c:	e002      	b.n	8001e74 <runLedseq+0x104>
    return;
 8001e6e:	bf00      	nop
 8001e70:	e000      	b.n	8001e74 <runLedseq+0x104>
      return;
 8001e72:	bf00      	nop
  }
}
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200022bd 	.word	0x200022bd
 8001e80:	20000dd4 	.word	0x20000dd4
 8001e84:	200022b4 	.word	0x200022b4

08001e88 <ledseqRegisterSequence>:

void ledseqRegisterSequence(ledseqContext_t* context) {
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  context->state = LEDSEQ_STOP;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e96:	609a      	str	r2, [r3, #8]
  context->nextContext = NO_CONTEXT;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	605a      	str	r2, [r3, #4]

  if (sequences == NO_CONTEXT) {
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <ledseqRegisterSequence+0x64>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d103      	bne.n	8001eae <ledseqRegisterSequence+0x26>
    sequences = context;
 8001ea6:	4a11      	ldr	r2, [pc, #68]	; (8001eec <ledseqRegisterSequence+0x64>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	e019      	b.n	8001ee2 <ledseqRegisterSequence+0x5a>
  } else {
    ledseqContext_t* last = sequences;
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <ledseqRegisterSequence+0x64>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]
    if (last == context) {
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d00f      	beq.n	8001edc <ledseqRegisterSequence+0x54>
      // Skip if already registered
      return;
    }

    while (last->nextContext != NO_CONTEXT) {
 8001ebc:	e006      	b.n	8001ecc <ledseqRegisterSequence+0x44>
      last = last->nextContext;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	60fb      	str	r3, [r7, #12]
      if (last == context) {
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d009      	beq.n	8001ee0 <ledseqRegisterSequence+0x58>
    while (last->nextContext != NO_CONTEXT) {
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f4      	bne.n	8001ebe <ledseqRegisterSequence+0x36>
        // Skip if already registered
        return;
      }
    }

    last->nextContext = context;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	e002      	b.n	8001ee2 <ledseqRegisterSequence+0x5a>
      return;
 8001edc:	bf00      	nop
 8001ede:	e000      	b.n	8001ee2 <ledseqRegisterSequence+0x5a>
        return;
 8001ee0:	bf00      	nop
  }
}
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	200022b0 	.word	0x200022b0

08001ef0 <updateActive>:

// Utility functions

static void updateActive(led_t led) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  activeSeq[led] = NO_CONTEXT;
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <updateActive+0x5c>)
 8001efe:	2100      	movs	r1, #0
 8001f00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  ledSet(led, false);
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fd77 	bl	80019fc <ledSet>

  for (ledseqContext_t* sequence = sequences; sequence != 0; sequence = sequence->nextContext) {
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <updateActive+0x60>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	e012      	b.n	8001f3c <updateActive+0x4c>
    if (sequence->led == led && sequence->state != LEDSEQ_STOP) {
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	7b1b      	ldrb	r3, [r3, #12]
 8001f1a:	79fa      	ldrb	r2, [r7, #7]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d10a      	bne.n	8001f36 <updateActive+0x46>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f28:	d005      	beq.n	8001f36 <updateActive+0x46>
      activeSeq[led] = sequence;
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	4907      	ldr	r1, [pc, #28]	; (8001f4c <updateActive+0x5c>)
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      break;
 8001f34:	e006      	b.n	8001f44 <updateActive+0x54>
  for (ledseqContext_t* sequence = sequences; sequence != 0; sequence = sequence->nextContext) {
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1e9      	bne.n	8001f16 <updateActive+0x26>
    }
  }
}
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000dd4 	.word	0x20000dd4
 8001f50:	200022b0 	.word	0x200022b0

08001f54 <pmInit>:
};

STATIC_MEM_TASK_ALLOC(pmTask, PM_TASK_STACKSIZE);

void pmInit(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af04      	add	r7, sp, #16
  if(isInit) {
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <pmInit+0x60>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d125      	bne.n	8001fae <pmInit+0x5a>
    return;
  }

  HAL_ADC_Start_DMA(&hadc1, &adc1Val, 1);	// Current measurement
 8001f62:	2201      	movs	r2, #1
 8001f64:	4914      	ldr	r1, [pc, #80]	; (8001fb8 <pmInit+0x64>)
 8001f66:	4815      	ldr	r0, [pc, #84]	; (8001fbc <pmInit+0x68>)
 8001f68:	f003 f86c 	bl	8005044 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, &adc2Val, 1);	// Voltage measurement
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4914      	ldr	r1, [pc, #80]	; (8001fc0 <pmInit+0x6c>)
 8001f70:	4814      	ldr	r0, [pc, #80]	; (8001fc4 <pmInit+0x70>)
 8001f72:	f003 f867 	bl	8005044 <HAL_ADC_Start_DMA>

  STATIC_MEM_TASK_CREATE(pmTask, pmTask, PM_TASK_NAME, NULL, PM_TASK_PRI);
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <pmInit+0x74>)
 8001f7c:	9302      	str	r3, [sp, #8]
 8001f7e:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <pmInit+0x78>)
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	2300      	movs	r3, #0
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	2300      	movs	r3, #0
 8001f88:	4911      	ldr	r1, [pc, #68]	; (8001fd0 <pmInit+0x7c>)
 8001f8a:	4812      	ldr	r0, [pc, #72]	; (8001fd4 <pmInit+0x80>)
 8001f8c:	f00c ffb2 	bl	800eef4 <xTaskCreateStatic>

  isInit = true;
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <pmInit+0x60>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]

  pmSyslinkInfo.vBat = 3.7f;
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <pmInit+0x84>)
 8001f98:	4a10      	ldr	r2, [pc, #64]	; (8001fdc <pmInit+0x88>)
 8001f9a:	f8c3 2001 	str.w	r2, [r3, #1]
  pmSetBatteryVoltage(pmSyslinkInfo.vBat); //TODO remove
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <pmInit+0x84>)
 8001fa0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001fa4:	ee00 3a10 	vmov	s0, r3
 8001fa8:	f000 f81a 	bl	8001fe0 <pmSetBatteryVoltage>
 8001fac:	e000      	b.n	8001fb0 <pmInit+0x5c>
    return;
 8001fae:	bf00      	nop
}
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	200022ec 	.word	0x200022ec
 8001fb8:	200022fc 	.word	0x200022fc
 8001fbc:	20003e7c 	.word	0x20003e7c
 8001fc0:	200022fe 	.word	0x200022fe
 8001fc4:	20003ec4 	.word	0x20003ec4
 8001fc8:	20000f0c 	.word	0x20000f0c
 8001fcc:	20002300 	.word	0x20002300
 8001fd0:	08014b70 	.word	0x08014b70
 8001fd4:	0800225d 	.word	0x0800225d
 8001fd8:	200022f0 	.word	0x200022f0
 8001fdc:	406ccccd 	.word	0x406ccccd

08001fe0 <pmSetBatteryVoltage>:

/**
 * Sets the battery voltage and its min and max values
 */
static void pmSetBatteryVoltage(float voltage)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	ed87 0a01 	vstr	s0, [r7, #4]
  batteryVoltage = voltage;
 8001fea:	4a18      	ldr	r2, [pc, #96]	; (800204c <pmSetBatteryVoltage+0x6c>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6013      	str	r3, [r2, #0]
  batteryVoltageMV = (uint16_t)(voltage * 1000);
 8001ff0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ff4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002050 <pmSetBatteryVoltage+0x70>
 8001ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002000:	ee17 3a90 	vmov	r3, s15
 8002004:	b29a      	uxth	r2, r3
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <pmSetBatteryVoltage+0x74>)
 8002008:	801a      	strh	r2, [r3, #0]
  if (batteryVoltageMax < voltage)
 800200a:	4b13      	ldr	r3, [pc, #76]	; (8002058 <pmSetBatteryVoltage+0x78>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ed97 7a01 	vldr	s14, [r7, #4]
 8002014:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201c:	dd02      	ble.n	8002024 <pmSetBatteryVoltage+0x44>
  {
    batteryVoltageMax = voltage;
 800201e:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <pmSetBatteryVoltage+0x78>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6013      	str	r3, [r2, #0]
  }
  if (batteryVoltageMin > voltage)
 8002024:	4b0d      	ldr	r3, [pc, #52]	; (800205c <pmSetBatteryVoltage+0x7c>)
 8002026:	edd3 7a00 	vldr	s15, [r3]
 800202a:	ed97 7a01 	vldr	s14, [r7, #4]
 800202e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002036:	d400      	bmi.n	800203a <pmSetBatteryVoltage+0x5a>
  {
    batteryVoltageMin = voltage;
  }
}
 8002038:	e002      	b.n	8002040 <pmSetBatteryVoltage+0x60>
    batteryVoltageMin = voltage;
 800203a:	4a08      	ldr	r2, [pc, #32]	; (800205c <pmSetBatteryVoltage+0x7c>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6013      	str	r3, [r2, #0]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	200022c0 	.word	0x200022c0
 8002050:	447a0000 	.word	0x447a0000
 8002054:	200022c4 	.word	0x200022c4
 8002058:	200022c8 	.word	0x200022c8
 800205c:	20000258 	.word	0x20000258

08002060 <pmSystemShutdown>:

/**
 * Shutdown system
 */
static void pmSystemShutdown(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
#ifdef CONFIG_PM_AUTO_SHUTDOWN
  systemRequestShutdown();
#endif
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <pmBatteryChargeFromVoltage>:
/**
 * Returns a number from 0 to 9 where 0 is completely discharged
 * and 9 is 90% charged.
 */
static int32_t pmBatteryChargeFromVoltage(float voltage)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	ed87 0a01 	vstr	s0, [r7, #4]
  int charge = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]

  if (voltage < LiPoTypicalChargeCurve[0])
 800207e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002082:	edd7 7a01 	vldr	s15, [r7, #4]
 8002086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800208a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208e:	d501      	bpl.n	8002094 <pmBatteryChargeFromVoltage+0x24>
  {
    return 0;
 8002090:	2300      	movs	r3, #0
 8002092:	e01c      	b.n	80020ce <pmBatteryChargeFromVoltage+0x5e>
  }
  if (voltage > LiPoTypicalChargeCurve[9])
 8002094:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80020dc <pmBatteryChargeFromVoltage+0x6c>
 8002098:	edd7 7a01 	vldr	s15, [r7, #4]
 800209c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a4:	dd01      	ble.n	80020aa <pmBatteryChargeFromVoltage+0x3a>
  {
    return 9;
 80020a6:	2309      	movs	r3, #9
 80020a8:	e011      	b.n	80020ce <pmBatteryChargeFromVoltage+0x5e>
  }
  while (voltage >  LiPoTypicalChargeCurve[charge])
 80020aa:	e002      	b.n	80020b2 <pmBatteryChargeFromVoltage+0x42>
  {
    charge++;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	3301      	adds	r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
  while (voltage >  LiPoTypicalChargeCurve[charge])
 80020b2:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <pmBatteryChargeFromVoltage+0x70>)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	edd3 7a00 	vldr	s15, [r3]
 80020be:	ed97 7a01 	vldr	s14, [r7, #4]
 80020c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ca:	dcef      	bgt.n	80020ac <pmBatteryChargeFromVoltage+0x3c>
  }

  return charge;
 80020cc:	68fb      	ldr	r3, [r7, #12]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40833333 	.word	0x40833333
 80020e0:	08016570 	.word	0x08016570

080020e4 <pmGetBatteryVoltage>:


float pmGetBatteryVoltage(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return batteryVoltage;
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <pmGetBatteryVoltage+0x18>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	ee07 3a90 	vmov	s15, r3
}
 80020f0:	eeb0 0a67 	vmov.f32	s0, s15
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	200022c0 	.word	0x200022c0

08002100 <pmSetChargeState>:
    workerSchedule(pmGracefulShutdown, NULL);
  }
}

void pmSetChargeState(PMChargeStates chgState)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
  // TODO: Send syslink package with charge state
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <pmUpdateState>:

PMStates pmUpdateState()
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
  bool usbPluggedIn = pmSyslinkInfo.usbPluggedIn;
 800211e:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <pmUpdateState+0x98>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	bf14      	ite	ne
 800212c:	2301      	movne	r3, #1
 800212e:	2300      	moveq	r3, #0
 8002130:	71bb      	strb	r3, [r7, #6]
  bool isCharging = pmSyslinkInfo.isCharging;
 8002132:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <pmUpdateState+0x98>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf14      	ite	ne
 8002140:	2301      	movne	r3, #1
 8002142:	2300      	moveq	r3, #0
 8002144:	717b      	strb	r3, [r7, #5]
  PMStates nextState;

  uint32_t batteryLowTime = xTaskGetTickCount() - batteryLowTimeStamp;
 8002146:	f00d fa4b 	bl	800f5e0 <xTaskGetTickCount>
 800214a:	4602      	mov	r2, r0
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <pmUpdateState+0x9c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	603b      	str	r3, [r7, #0]

  if (ignoreChargedState)
 8002154:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <pmUpdateState+0xa0>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <pmUpdateState+0x4a>
  {
    // For some scenarios we might not care about the charging/charged state.
    nextState = battery;
 800215c:	2300      	movs	r3, #0
 800215e:	71fb      	strb	r3, [r7, #7]
 8002160:	e016      	b.n	8002190 <pmUpdateState+0x78>
  }
  else if (usbPluggedIn && !isCharging)
 8002162:	79bb      	ldrb	r3, [r7, #6]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <pmUpdateState+0x62>
 8002168:	797b      	ldrb	r3, [r7, #5]
 800216a:	f083 0301 	eor.w	r3, r3, #1
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <pmUpdateState+0x62>
  {
    nextState = charged;
 8002174:	2302      	movs	r3, #2
 8002176:	71fb      	strb	r3, [r7, #7]
 8002178:	e00a      	b.n	8002190 <pmUpdateState+0x78>
  }
  else if (usbPluggedIn && isCharging)
 800217a:	79bb      	ldrb	r3, [r7, #6]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <pmUpdateState+0x74>
 8002180:	797b      	ldrb	r3, [r7, #5]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <pmUpdateState+0x74>
  {
    nextState = charging;
 8002186:	2301      	movs	r3, #1
 8002188:	71fb      	strb	r3, [r7, #7]
 800218a:	e001      	b.n	8002190 <pmUpdateState+0x78>
  }
  else
  {
    nextState = battery;
 800218c:	2300      	movs	r3, #0
 800218e:	71fb      	strb	r3, [r7, #7]
  }

  if (nextState == battery && batteryLowTime > PM_BAT_LOW_TIMEOUT)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <pmUpdateState+0x8c>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	f241 3288 	movw	r2, #5000	; 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <pmUpdateState+0x8c>
  {
    // This is to avoid setting state to lowPower when we're plugged in to USB.
    nextState = lowPower;
 80021a0:	2303      	movs	r3, #3
 80021a2:	71fb      	strb	r3, [r7, #7]
  }

  return nextState;
 80021a4:	79fb      	ldrb	r3, [r7, #7]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200022f0 	.word	0x200022f0
 80021b4:	200022e4 	.word	0x200022e4
 80021b8:	200022fa 	.word	0x200022fa

080021bc <pmMeasureExtBatteryCurrent>:
  extBatCurrAmpPerVolt = ampPerVolt;
}
*/

float pmMeasureExtBatteryCurrent(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
  float current;

  if (isExtBatCurrDeckPinSet)
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <pmMeasureExtBatteryCurrent+0x44>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00d      	beq.n	80021e6 <pmMeasureExtBatteryCurrent+0x2a>
  {
    current = adc1Val * extBatCurrAmpPerVolt;
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <pmMeasureExtBatteryCurrent+0x48>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	ee07 3a90 	vmov	s15, r3
 80021d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <pmMeasureExtBatteryCurrent+0x4c>)
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80021e4:	e002      	b.n	80021ec <pmMeasureExtBatteryCurrent+0x30>
  }
  else
  {
    current = 0.0;
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	607b      	str	r3, [r7, #4]
  }

  return current;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	ee07 3a90 	vmov	s15, r3
}
 80021f2:	eeb0 0a67 	vmov.f32	s0, s15
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	200022dc 	.word	0x200022dc
 8002204:	200022fc 	.word	0x200022fc
 8002208:	200022e0 	.word	0x200022e0

0800220c <pmMeasureExtBatteryVoltage>:
  extBatVoltMultiplier = multiplier;
}
*/

float pmMeasureExtBatteryVoltage(void)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
  float voltage;

  if (isExtBatVoltDeckPinSet)
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <pmMeasureExtBatteryVoltage+0x44>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00d      	beq.n	8002236 <pmMeasureExtBatteryVoltage+0x2a>
  {
    voltage =  adc2Val * extBatVoltMultiplier;
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <pmMeasureExtBatteryVoltage+0x48>)
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	ee07 3a90 	vmov	s15, r3
 8002222:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <pmMeasureExtBatteryVoltage+0x4c>)
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002230:	edc7 7a01 	vstr	s15, [r7, #4]
 8002234:	e002      	b.n	800223c <pmMeasureExtBatteryVoltage+0x30>
  }
  else
  {
    voltage = 0.0;
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	607b      	str	r3, [r7, #4]
  }

  return voltage;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	ee07 3a90 	vmov	s15, r3
}
 8002242:	eeb0 0a67 	vmov.f32	s0, s15
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	200022d2 	.word	0x200022d2
 8002254:	200022fe 	.word	0x200022fe
 8002258:	200022d4 	.word	0x200022d4

0800225c <pmTask>:
bool pmIsDischarging(void) {
  return (pmState == lowPower) || (pmState == battery);
}
*/
void pmTask(void *param)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  PMStates pmStateOld = battery;
 8002264:	2300      	movs	r3, #0
 8002266:	75fb      	strb	r3, [r7, #23]
  uint32_t tickCount;

  vTaskSetApplicationTaskTag(0, (void*)TASK_PM_ID_NBR);
 8002268:	2105      	movs	r1, #5
 800226a:	2000      	movs	r0, #0
 800226c:	f00d fb16 	bl	800f89c <vTaskSetApplicationTaskTag>

  tickCount = xTaskGetTickCount();
 8002270:	f00d f9b6 	bl	800f5e0 <xTaskGetTickCount>
 8002274:	6138      	str	r0, [r7, #16]
  batteryLowTimeStamp = tickCount;
 8002276:	4a6f      	ldr	r2, [pc, #444]	; (8002434 <pmTask+0x1d8>)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	6013      	str	r3, [r2, #0]
  batteryCriticalLowTimeStamp = tickCount;
 800227c:	4a6e      	ldr	r2, [pc, #440]	; (8002438 <pmTask+0x1dc>)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	6013      	str	r3, [r2, #0]

  pmSetChargeState(charge500mA);
 8002282:	2001      	movs	r0, #1
 8002284:	f7ff ff3c 	bl	8002100 <pmSetChargeState>
  systemWaitStart();
 8002288:	f000 f978 	bl	800257c <systemWaitStart>
  // after system startup to avoid syslink queue overflow.
//  pmEnableBatteryStatusAutoupdate();

  while(1)
  {
    vTaskDelay(100);
 800228c:	2064      	movs	r0, #100	; 0x64
 800228e:	f00c ffe9 	bl	800f264 <vTaskDelay>
    tickCount = xTaskGetTickCount();
 8002292:	f00d f9a5 	bl	800f5e0 <xTaskGetTickCount>
 8002296:	6138      	str	r0, [r7, #16]

    extBatteryVoltage = pmMeasureExtBatteryVoltage();
 8002298:	f7ff ffb8 	bl	800220c <pmMeasureExtBatteryVoltage>
 800229c:	eef0 7a40 	vmov.f32	s15, s0
 80022a0:	4b66      	ldr	r3, [pc, #408]	; (800243c <pmTask+0x1e0>)
 80022a2:	edc3 7a00 	vstr	s15, [r3]
    extBatteryVoltageMV = (uint16_t)(extBatteryVoltage * 1000);
 80022a6:	4b65      	ldr	r3, [pc, #404]	; (800243c <pmTask+0x1e0>)
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8002440 <pmTask+0x1e4>
 80022b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022b8:	ee17 3a90 	vmov	r3, s15
 80022bc:	b29a      	uxth	r2, r3
 80022be:	4b61      	ldr	r3, [pc, #388]	; (8002444 <pmTask+0x1e8>)
 80022c0:	801a      	strh	r2, [r3, #0]
    extBatteryCurrent = pmMeasureExtBatteryCurrent();
 80022c2:	f7ff ff7b 	bl	80021bc <pmMeasureExtBatteryCurrent>
 80022c6:	eef0 7a40 	vmov.f32	s15, s0
 80022ca:	4b5f      	ldr	r3, [pc, #380]	; (8002448 <pmTask+0x1ec>)
 80022cc:	edc3 7a00 	vstr	s15, [r3]
    batteryLevel = pmBatteryChargeFromVoltage(pmGetBatteryVoltage()) * 10;
 80022d0:	f7ff ff08 	bl	80020e4 <pmGetBatteryVoltage>
 80022d4:	eef0 7a40 	vmov.f32	s15, s0
 80022d8:	eeb0 0a67 	vmov.f32	s0, s15
 80022dc:	f7ff fec8 	bl	8002070 <pmBatteryChargeFromVoltage>
 80022e0:	4603      	mov	r3, r0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	0092      	lsls	r2, r2, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4b57      	ldr	r3, [pc, #348]	; (800244c <pmTask+0x1f0>)
 80022f0:	701a      	strb	r2, [r3, #0]

    if (pmGetBatteryVoltage() > batteryLowVoltage)
 80022f2:	f7ff fef7 	bl	80020e4 <pmGetBatteryVoltage>
 80022f6:	eeb0 7a40 	vmov.f32	s14, s0
 80022fa:	4b55      	ldr	r3, [pc, #340]	; (8002450 <pmTask+0x1f4>)
 80022fc:	edd3 7a00 	vldr	s15, [r3]
 8002300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002308:	dd02      	ble.n	8002310 <pmTask+0xb4>
    {
      batteryLowTimeStamp = tickCount;
 800230a:	4a4a      	ldr	r2, [pc, #296]	; (8002434 <pmTask+0x1d8>)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	6013      	str	r3, [r2, #0]
    }
    if (pmGetBatteryVoltage() > batteryCriticalLowVoltage)
 8002310:	f7ff fee8 	bl	80020e4 <pmGetBatteryVoltage>
 8002314:	eeb0 7a40 	vmov.f32	s14, s0
 8002318:	4b4e      	ldr	r3, [pc, #312]	; (8002454 <pmTask+0x1f8>)
 800231a:	edd3 7a00 	vldr	s15, [r3]
 800231e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002326:	dd02      	ble.n	800232e <pmTask+0xd2>
    {
      batteryCriticalLowTimeStamp = tickCount;
 8002328:	4a43      	ldr	r2, [pc, #268]	; (8002438 <pmTask+0x1dc>)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	6013      	str	r3, [r2, #0]
    }

    pmState = pmUpdateState();
 800232e:	f7ff fef3 	bl	8002118 <pmUpdateState>
 8002332:	4603      	mov	r3, r0
 8002334:	461a      	mov	r2, r3
 8002336:	4b48      	ldr	r3, [pc, #288]	; (8002458 <pmTask+0x1fc>)
 8002338:	701a      	strb	r2, [r3, #0]

    if (pmState != pmStateOld)
 800233a:	4b47      	ldr	r3, [pc, #284]	; (8002458 <pmTask+0x1fc>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	7dfa      	ldrb	r2, [r7, #23]
 8002340:	429a      	cmp	r2, r3
 8002342:	d03b      	beq.n	80023bc <pmTask+0x160>
    {
      // Actions on state change
      switch (pmState)
 8002344:	4b44      	ldr	r3, [pc, #272]	; (8002458 <pmTask+0x1fc>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d833      	bhi.n	80023b4 <pmTask+0x158>
 800234c:	a201      	add	r2, pc, #4	; (adr r2, 8002354 <pmTask+0xf8>)
 800234e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002352:	bf00      	nop
 8002354:	080023a1 	.word	0x080023a1
 8002358:	08002379 	.word	0x08002379
 800235c:	08002365 	.word	0x08002365
 8002360:	08002393 	.word	0x08002393
      {
        case charged:
          ledseqStop(&seq_charging);
 8002364:	483d      	ldr	r0, [pc, #244]	; (800245c <pmTask+0x200>)
 8002366:	f7ff fcbb 	bl	8001ce0 <ledseqStop>
          ledseqRunBlocking(&seq_charged);
 800236a:	483d      	ldr	r0, [pc, #244]	; (8002460 <pmTask+0x204>)
 800236c:	f7ff fc5c 	bl	8001c28 <ledseqRunBlocking>
          soundSetEffect(SND_BAT_FULL);
 8002370:	2004      	movs	r0, #4
 8002372:	f000 f879 	bl	8002468 <soundSetEffect>
          break;
 8002376:	e01e      	b.n	80023b6 <pmTask+0x15a>
        case charging:
          ledseqStop(&seq_lowbat);
 8002378:	483a      	ldr	r0, [pc, #232]	; (8002464 <pmTask+0x208>)
 800237a:	f7ff fcb1 	bl	8001ce0 <ledseqStop>
          ledseqStop(&seq_charged);
 800237e:	4838      	ldr	r0, [pc, #224]	; (8002460 <pmTask+0x204>)
 8002380:	f7ff fcae 	bl	8001ce0 <ledseqStop>
          ledseqRunBlocking(&seq_charging);
 8002384:	4835      	ldr	r0, [pc, #212]	; (800245c <pmTask+0x200>)
 8002386:	f7ff fc4f 	bl	8001c28 <ledseqRunBlocking>
          soundSetEffect(SND_USB_CONN);
 800238a:	2003      	movs	r0, #3
 800238c:	f000 f86c 	bl	8002468 <soundSetEffect>
          break;
 8002390:	e011      	b.n	80023b6 <pmTask+0x15a>
        case lowPower:
          ledseqRunBlocking(&seq_lowbat);
 8002392:	4834      	ldr	r0, [pc, #208]	; (8002464 <pmTask+0x208>)
 8002394:	f7ff fc48 	bl	8001c28 <ledseqRunBlocking>
          soundSetEffect(SND_BAT_LOW);
 8002398:	2005      	movs	r0, #5
 800239a:	f000 f865 	bl	8002468 <soundSetEffect>
          break;
 800239e:	e00a      	b.n	80023b6 <pmTask+0x15a>
        case battery:
          ledseqRunBlocking(&seq_charging);
 80023a0:	482e      	ldr	r0, [pc, #184]	; (800245c <pmTask+0x200>)
 80023a2:	f7ff fc41 	bl	8001c28 <ledseqRunBlocking>
          ledseqRun(&seq_charged);
 80023a6:	482e      	ldr	r0, [pc, #184]	; (8002460 <pmTask+0x204>)
 80023a8:	f7ff fc22 	bl	8001bf0 <ledseqRun>
          soundSetEffect(SND_USB_DISC);
 80023ac:	2002      	movs	r0, #2
 80023ae:	f000 f85b 	bl	8002468 <soundSetEffect>
          break;
 80023b2:	e000      	b.n	80023b6 <pmTask+0x15a>
        default:
          break;
 80023b4:	bf00      	nop
      }
      pmStateOld = pmState;
 80023b6:	4b28      	ldr	r3, [pc, #160]	; (8002458 <pmTask+0x1fc>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	75fb      	strb	r3, [r7, #23]
    }
    // Actions during state
    switch (pmState)
 80023bc:	4b26      	ldr	r3, [pc, #152]	; (8002458 <pmTask+0x1fc>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d832      	bhi.n	800242a <pmTask+0x1ce>
 80023c4:	a201      	add	r2, pc, #4	; (adr r2, 80023cc <pmTask+0x170>)
 80023c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ca:	bf00      	nop
 80023cc:	08002425 	.word	0x08002425
 80023d0:	080023dd 	.word	0x080023dd
 80023d4:	0800242b 	.word	0x0800242b
 80023d8:	0800240b 	.word	0x0800240b
      case charged:
        break;
      case charging:
        {
          // Charge level between 0.0 and 1.0
          float chargeLevel = pmBatteryChargeFromVoltage(pmGetBatteryVoltage()) / 10.0f;
 80023dc:	f7ff fe82 	bl	80020e4 <pmGetBatteryVoltage>
 80023e0:	eef0 7a40 	vmov.f32	s15, s0
 80023e4:	eeb0 0a67 	vmov.f32	s0, s15
 80023e8:	f7ff fe42 	bl	8002070 <pmBatteryChargeFromVoltage>
 80023ec:	ee07 0a90 	vmov	s15, r0
 80023f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023f4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80023f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023fc:	edc7 7a02 	vstr	s15, [r7, #8]
          ledseqSetChargeLevel(chargeLevel);
 8002400:	ed97 0a02 	vldr	s0, [r7, #8]
 8002404:	f7ff fc44 	bl	8001c90 <ledseqSetChargeLevel>
        }
        break;
 8002408:	e012      	b.n	8002430 <pmTask+0x1d4>
      case lowPower:
        {
          uint32_t batteryCriticalLowTime;

          batteryCriticalLowTime = tickCount - batteryCriticalLowTimeStamp;
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <pmTask+0x1dc>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	60fb      	str	r3, [r7, #12]
          if (batteryCriticalLowTime > PM_BAT_CRITICAL_LOW_TIMEOUT)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f241 3288 	movw	r2, #5000	; 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d907      	bls.n	800242e <pmTask+0x1d2>
          {
            pmSystemShutdown();
 800241e:	f7ff fe1f 	bl	8002060 <pmSystemShutdown>
          }
        }
        break;
 8002422:	e004      	b.n	800242e <pmTask+0x1d2>
      case battery:
        {
//          if ((commanderGetInactivityTime() > PM_SYSTEM_SHUTDOWN_TIMEOUT))
          {
            pmSystemShutdown();
 8002424:	f7ff fe1c 	bl	8002060 <pmSystemShutdown>
          }
        }
        break;
 8002428:	e002      	b.n	8002430 <pmTask+0x1d4>
      default:
        break;
 800242a:	bf00      	nop
 800242c:	e72e      	b.n	800228c <pmTask+0x30>
        break;
 800242e:	bf00      	nop
    vTaskDelay(100);
 8002430:	e72c      	b.n	800228c <pmTask+0x30>
 8002432:	bf00      	nop
 8002434:	200022e4 	.word	0x200022e4
 8002438:	200022e8 	.word	0x200022e8
 800243c:	200022cc 	.word	0x200022cc
 8002440:	447a0000 	.word	0x447a0000
 8002444:	200022d0 	.word	0x200022d0
 8002448:	200022d8 	.word	0x200022d8
 800244c:	200022f9 	.word	0x200022f9
 8002450:	20000260 	.word	0x20000260
 8002454:	2000025c 	.word	0x2000025c
 8002458:	200022ed 	.word	0x200022ed
 800245c:	200001b0 	.word	0x200001b0
 8002460:	20000188 	.word	0x20000188
 8002464:	20000070 	.word	0x20000070

08002468 <soundSetEffect>:
{
  return isInit;
}

void soundSetEffect(uint32_t effect)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  sys_effect = effect;
 8002470:	4a04      	ldr	r2, [pc, #16]	; (8002484 <soundSetEffect+0x1c>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6013      	str	r3, [r2, #0]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20002500 	.word	0x20002500

08002488 <systemLaunch>:
/* Private functions */
static void systemTask(void *arg);

/* Public functions */
void systemLaunch(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 800248e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002492:	461a      	mov	r2, r3
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <systemLaunch+0x30>)
 8002496:	9302      	str	r3, [sp, #8]
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <systemLaunch+0x34>)
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	2302      	movs	r3, #2
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	2300      	movs	r3, #0
 80024a2:	4907      	ldr	r1, [pc, #28]	; (80024c0 <systemLaunch+0x38>)
 80024a4:	4807      	ldr	r0, [pc, #28]	; (80024c4 <systemLaunch+0x3c>)
 80024a6:	f00c fd25 	bl	800eef4 <xTaskCreateStatic>
  DEBUG_PRINT("[TASK] systemTask is running!\n");
 80024aa:	4907      	ldr	r1, [pc, #28]	; (80024c8 <systemLaunch+0x40>)
 80024ac:	4807      	ldr	r0, [pc, #28]	; (80024cc <systemLaunch+0x44>)
 80024ae:	f001 f979 	bl	80037a4 <eprintf>

}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000fc4 	.word	0x20000fc4
 80024bc:	20002510 	.word	0x20002510
 80024c0:	08014bf8 	.word	0x08014bf8
 80024c4:	080024d1 	.word	0x080024d1
 80024c8:	08014c00 	.word	0x08014c00
 80024cc:	08002f15 	.word	0x08002f15

080024d0 <systemTask>:


/* Private functions implementation */

void systemTask(void *arg)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  bool pass = true;
 80024d8:	2301      	movs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]


  uint32_t ld = SysTick->LOAD;
 80024dc:	4b1f      	ldr	r3, [pc, #124]	; (800255c <systemTask+0x8c>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	60bb      	str	r3, [r7, #8]
  time1 = DWT->CYCCNT;
 80024e2:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <systemTask+0x90>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4a1f      	ldr	r2, [pc, #124]	; (8002564 <systemTask+0x94>)
 80024e8:	6013      	str	r3, [r2, #0]
  delay_us(1000);	// 1ms
 80024ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024ee:	f002 f877 	bl	80045e0 <delay_us>
  time2 = DWT->CYCCNT;
 80024f2:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <systemTask+0x90>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <systemTask+0x98>)
 80024f8:	6013      	str	r3, [r2, #0]
  DEBUG_PRINT("delay = %.2f(us)\n",(float)(time2-time1)/CLOCK_PER_USEC);
 80024fa:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <systemTask+0x98>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	4b19      	ldr	r3, [pc, #100]	; (8002564 <systemTask+0x94>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	ee07 3a90 	vmov	s15, r3
 8002508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800250c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800256c <systemTask+0x9c>
 8002510:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002514:	ee16 0a90 	vmov	r0, s13
 8002518:	f7fe f826 	bl	8000568 <__aeabi_f2d>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4913      	ldr	r1, [pc, #76]	; (8002570 <systemTask+0xa0>)
 8002522:	4814      	ldr	r0, [pc, #80]	; (8002574 <systemTask+0xa4>)
 8002524:	f001 f93e 	bl	80037a4 <eprintf>


  ledInit();
 8002528:	f7ff f9f6 	bl	8001918 <ledInit>
  ledSet(CHG_LED, SET);
 800252c:	2101      	movs	r1, #1
 800252e:	2000      	movs	r0, #0
 8002530:	f7ff fa64 	bl	80019fc <ledSet>


#ifdef CONFIG_DEBUG_QUEUE_MONITOR
  queueMonitorInit();
 8002534:	f001 f94c 	bl	80037d0 <queueMonitorInit>
#endif

#ifdef CONFIG_DEBUG_QUEUE_MONITOR
  uartInit();
 8002538:	f000 fc52 	bl	8002de0 <uartInit>
  uartDmaInit();
 800253c:	f000 fc6e 	bl	8002e1c <uartDmaInit>
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
#endif

  ICM20602_Initialization();	// 여기서 일정 시간 지연이 있어야 STM32 VCP 포트가 활성화됨 원인파악중
 8002540:	f7ff f898 	bl	8001674 <ICM20602_Initialization>

  delay_us(5000000);
 8002544:	480c      	ldr	r0, [pc, #48]	; (8002578 <systemTask+0xa8>)
 8002546:	f002 f84b 	bl	80045e0 <delay_us>

  passthroughInit();	// Create passthrough task
 800254a:	f000 fa45 	bl	80029d8 <passthroughInit>

  systemInit();
 800254e:	f000 f837 	bl	80025c0 <systemInit>
//  commInit();
//  commanderInit();

}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	e000e010 	.word	0xe000e010
 8002560:	e0001000 	.word	0xe0001000
 8002564:	20002508 	.word	0x20002508
 8002568:	2000250c 	.word	0x2000250c
 800256c:	42900000 	.word	0x42900000
 8002570:	08014c24 	.word	0x08014c24
 8002574:	08002f15 	.word	0x08002f15
 8002578:	004c4b40 	.word	0x004c4b40

0800257c <systemWaitStart>:



void systemWaitStart(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  //This permits to guarantee that the system task is initialized before other
  //tasks waits for the start event.
  while(!isInit)
 8002580:	e002      	b.n	8002588 <systemWaitStart+0xc>
    vTaskDelay(2);
 8002582:	2002      	movs	r0, #2
 8002584:	f00c fe6e 	bl	800f264 <vTaskDelay>
  while(!isInit)
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <systemWaitStart+0x3c>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	f083 0301 	eor.w	r3, r3, #1
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f5      	bne.n	8002582 <systemWaitStart+0x6>

  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 8002596:	4b09      	ldr	r3, [pc, #36]	; (80025bc <systemWaitStart+0x40>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800259e:	4618      	mov	r0, r3
 80025a0:	f00c f990 	bl	800e8c4 <xQueueSemaphoreTake>
  xSemaphoreGive(canStartMutex);
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <systemWaitStart+0x40>)
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	2300      	movs	r3, #0
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	f00b fe83 	bl	800e2b8 <xQueueGenericSend>
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20002504 	.word	0x20002504
 80025bc:	20002910 	.word	0x20002910

080025c0 <systemInit>:



// This must be the first module to be initialized!
void systemInit(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af02      	add	r7, sp, #8
  if(isInit)
 80025c6:	4b55      	ldr	r3, [pc, #340]	; (800271c <systemInit+0x15c>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 80a3 	bne.w	8002716 <systemInit+0x156>
    return;

  canStartMutex = xSemaphoreCreateMutexStatic(&canStartMutexBuffer);
 80025d0:	4953      	ldr	r1, [pc, #332]	; (8002720 <systemInit+0x160>)
 80025d2:	2001      	movs	r0, #1
 80025d4:	f00b fe55 	bl	800e282 <xQueueCreateMutexStatic>
 80025d8:	4603      	mov	r3, r0
 80025da:	4a52      	ldr	r2, [pc, #328]	; (8002724 <systemInit+0x164>)
 80025dc:	6013      	str	r3, [r2, #0]
  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 80025de:	4b51      	ldr	r3, [pc, #324]	; (8002724 <systemInit+0x164>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025e6:	4618      	mov	r0, r3
 80025e8:	f00c f96c 	bl	800e8c4 <xQueueSemaphoreTake>

  usblinkInit();
 80025ec:	f000 f9ae 	bl	800294c <usblinkInit>
  DEBUG_PRINT("[TASK] usblinkTask is running!\n");
 80025f0:	494d      	ldr	r1, [pc, #308]	; (8002728 <systemInit+0x168>)
 80025f2:	484e      	ldr	r0, [pc, #312]	; (800272c <systemInit+0x16c>)
 80025f4:	f001 f8d6 	bl	80037a4 <eprintf>

  sysLoadInit();
 80025f8:	f001 fa0a 	bl	8003a10 <sysLoadInit>
  DEBUG_PRINT("sysLoadMonitorTimer is Initialized\n");
 80025fc:	494c      	ldr	r1, [pc, #304]	; (8002730 <systemInit+0x170>)
 80025fe:	484b      	ldr	r0, [pc, #300]	; (800272c <systemInit+0x16c>)
 8002600:	f001 f8d0 	bl	80037a4 <eprintf>
#if CONFIG_ENABLE_CPX
//  cpxlinkInit();
#endif

  /* Initialized here so that DEBUG_PRINT (buffered) can be used early */
  debugInit();
 8002604:	f000 fbe4 	bl	8002dd0 <debugInit>
  crtpInit();
 8002608:	f7fe fd52 	bl	80010b0 <crtpInit>
  DEBUG_PRINT("[TASK] crtpTxTask is running!\n");
 800260c:	4949      	ldr	r1, [pc, #292]	; (8002734 <systemInit+0x174>)
 800260e:	4847      	ldr	r0, [pc, #284]	; (800272c <systemInit+0x16c>)
 8002610:	f001 f8c8 	bl	80037a4 <eprintf>
  DEBUG_PRINT("[TASK] crtpRxTask is running!\n");
 8002614:	4948      	ldr	r1, [pc, #288]	; (8002738 <systemInit+0x178>)
 8002616:	4845      	ldr	r0, [pc, #276]	; (800272c <systemInit+0x16c>)
 8002618:	f001 f8c4 	bl	80037a4 <eprintf>

  consoleInit();
 800261c:	f000 fba8 	bl	8002d70 <consoleInit>

  DEBUG_PRINT("%s is up and running!\n", platformConfigGetDeviceTypeName());
 8002620:	f000 faec 	bl	8002bfc <platformConfigGetDeviceTypeName>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	4944      	ldr	r1, [pc, #272]	; (800273c <systemInit+0x17c>)
 800262a:	4840      	ldr	r0, [pc, #256]	; (800272c <systemInit+0x16c>)
 800262c:	f001 f8ba 	bl	80037a4 <eprintf>

  if (V_PRODUCTION_RELEASE) {
 8002630:	4b43      	ldr	r3, [pc, #268]	; (8002740 <systemInit+0x180>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d007      	beq.n	8002648 <systemInit+0x88>
    DEBUG_PRINT("Production release %s\n", V_STAG);
 8002638:	4b42      	ldr	r3, [pc, #264]	; (8002744 <systemInit+0x184>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	4942      	ldr	r1, [pc, #264]	; (8002748 <systemInit+0x188>)
 8002640:	483a      	ldr	r0, [pc, #232]	; (800272c <systemInit+0x16c>)
 8002642:	f001 f8af 	bl	80037a4 <eprintf>
 8002646:	e014      	b.n	8002672 <systemInit+0xb2>
  } else {
    DEBUG_PRINT("Build %s:%s (%s) %s\n", V_SLOCAL_REVISION,
 8002648:	4b40      	ldr	r3, [pc, #256]	; (800274c <systemInit+0x18c>)
 800264a:	6819      	ldr	r1, [r3, #0]
 800264c:	4b40      	ldr	r3, [pc, #256]	; (8002750 <systemInit+0x190>)
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	4b3c      	ldr	r3, [pc, #240]	; (8002744 <systemInit+0x184>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a3f      	ldr	r2, [pc, #252]	; (8002754 <systemInit+0x194>)
 8002656:	7812      	ldrb	r2, [r2, #0]
 8002658:	2a00      	cmp	r2, #0
 800265a:	d001      	beq.n	8002660 <systemInit+0xa0>
 800265c:	4a3e      	ldr	r2, [pc, #248]	; (8002758 <systemInit+0x198>)
 800265e:	e000      	b.n	8002662 <systemInit+0xa2>
 8002660:	4a3e      	ldr	r2, [pc, #248]	; (800275c <systemInit+0x19c>)
 8002662:	9201      	str	r2, [sp, #4]
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	4603      	mov	r3, r0
 8002668:	460a      	mov	r2, r1
 800266a:	493d      	ldr	r1, [pc, #244]	; (8002760 <systemInit+0x1a0>)
 800266c:	482f      	ldr	r0, [pc, #188]	; (800272c <systemInit+0x16c>)
 800266e:	f001 f899 	bl	80037a4 <eprintf>
                V_SREVISION, V_STAG, (V_MODIFIED)?"MODIFIED":"CLEAN");
  }
  DEBUG_PRINT("I am 0x%08X%08X%08X and I have %dKB of flash!\n",
 8002672:	4b3c      	ldr	r3, [pc, #240]	; (8002764 <systemInit+0x1a4>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4b3c      	ldr	r3, [pc, #240]	; (8002768 <systemInit+0x1a8>)
 8002678:	6819      	ldr	r1, [r3, #0]
 800267a:	4b3c      	ldr	r3, [pc, #240]	; (800276c <systemInit+0x1ac>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	483c      	ldr	r0, [pc, #240]	; (8002770 <systemInit+0x1b0>)
 8002680:	f9b0 0000 	ldrsh.w	r0, [r0]
 8002684:	9001      	str	r0, [sp, #4]
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	460b      	mov	r3, r1
 800268a:	493a      	ldr	r1, [pc, #232]	; (8002774 <systemInit+0x1b4>)
 800268c:	4827      	ldr	r0, [pc, #156]	; (800272c <systemInit+0x16c>)
 800268e:	f001 f889 	bl	80037a4 <eprintf>
              *((int*)(MCU_ID_ADDRESS+8)), *((int*)(MCU_ID_ADDRESS+4)),
              *((int*)(MCU_ID_ADDRESS+0)), *((short*)(MCU_FLASH_SIZE_ADDRESS)));

//  configblockInit();			// 현재 디바이스에 EEPROM이 존재하지 않음
//  storageInit();
  workerInit();
 8002692:	f001 faed 	bl	8003c70 <workerInit>
  ledseqInit();
 8002696:	f7ff f9f3 	bl	8001a80 <ledseqInit>
  DEBUG_PRINT("[TASK] lesdeqCmdTask is running!\n");
 800269a:	4937      	ldr	r1, [pc, #220]	; (8002778 <systemInit+0x1b8>)
 800269c:	4823      	ldr	r0, [pc, #140]	; (800272c <systemInit+0x16c>)
 800269e:	f001 f881 	bl	80037a4 <eprintf>


  pmInit();
 80026a2:	f7ff fc57 	bl	8001f54 <pmInit>
  DEBUG_PRINT("[TASK] pmTask is running!\n");
 80026a6:	4935      	ldr	r1, [pc, #212]	; (800277c <systemInit+0x1bc>)
 80026a8:	4820      	ldr	r0, [pc, #128]	; (800272c <systemInit+0x16c>)
 80026aa:	f001 f87b 	bl	80037a4 <eprintf>

  buzzerInit();
 80026ae:	f7ff f8b7 	bl	8001820 <buzzerInit>
  buzzerOn(1000);
 80026b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026b6:	f7ff f8d3 	bl	8001860 <buzzerOn>
  HAL_Delay(2);
 80026ba:	2002      	movs	r0, #2
 80026bc:	f002 fc5a 	bl	8004f74 <HAL_Delay>
  buzzerOn(2000);
 80026c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026c4:	f7ff f8cc 	bl	8001860 <buzzerOn>
  HAL_Delay(2);
 80026c8:	2002      	movs	r0, #2
 80026ca:	f002 fc53 	bl	8004f74 <HAL_Delay>
  buzzerOn(3000);
 80026ce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80026d2:	f7ff f8c5 	bl	8001860 <buzzerOn>
  HAL_Delay(2);
 80026d6:	2002      	movs	r0, #2
 80026d8:	f002 fc4c 	bl	8004f74 <HAL_Delay>
  buzzerOn(2000);
 80026dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026e0:	f7ff f8be 	bl	8001860 <buzzerOn>
  HAL_Delay(2);
 80026e4:	2002      	movs	r0, #2
 80026e6:	f002 fc45 	bl	8004f74 <HAL_Delay>
  buzzerOff();
 80026ea:	f7ff f8a9 	bl	8001840 <buzzerOff>

  peerLocalizationInit();
 80026ee:	f7fe fc8d 	bl	800100c <peerLocalizationInit>
  DEBUG_PRINT("peerLocalization is Initialized!\n");
 80026f2:	4923      	ldr	r1, [pc, #140]	; (8002780 <systemInit+0x1c0>)
 80026f4:	480d      	ldr	r0, [pc, #52]	; (800272c <systemInit+0x16c>)
 80026f6:	f001 f855 	bl	80037a4 <eprintf>


#ifdef CONFIG_APP_ENABLE
  DEBUG_PRINT("-------------- Start User application -----------------\n");
 80026fa:	4922      	ldr	r1, [pc, #136]	; (8002784 <systemInit+0x1c4>)
 80026fc:	480b      	ldr	r0, [pc, #44]	; (800272c <systemInit+0x16c>)
 80026fe:	f001 f851 	bl	80037a4 <eprintf>
  appInit();
 8002702:	f7fe fc8b 	bl	800101c <appInit>
  DEBUG_PRINT("[TASK] appTask is running!\n");
 8002706:	4920      	ldr	r1, [pc, #128]	; (8002788 <systemInit+0x1c8>)
 8002708:	4808      	ldr	r0, [pc, #32]	; (800272c <systemInit+0x16c>)
 800270a:	f001 f84b 	bl	80037a4 <eprintf>
#endif

  isInit = true;
 800270e:	4b03      	ldr	r3, [pc, #12]	; (800271c <systemInit+0x15c>)
 8002710:	2201      	movs	r2, #1
 8002712:	701a      	strb	r2, [r3, #0]
 8002714:	e000      	b.n	8002718 <systemInit+0x158>
    return;
 8002716:	bf00      	nop
}
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20002504 	.word	0x20002504
 8002720:	20002914 	.word	0x20002914
 8002724:	20002910 	.word	0x20002910
 8002728:	08014c3c 	.word	0x08014c3c
 800272c:	08002f15 	.word	0x08002f15
 8002730:	08014c64 	.word	0x08014c64
 8002734:	08014c90 	.word	0x08014c90
 8002738:	08014cb4 	.word	0x08014cb4
 800273c:	08014cd8 	.word	0x08014cd8
 8002740:	080165a9 	.word	0x080165a9
 8002744:	200002e0 	.word	0x200002e0
 8002748:	08014cf4 	.word	0x08014cf4
 800274c:	200002d8 	.word	0x200002d8
 8002750:	200002dc 	.word	0x200002dc
 8002754:	080165a8 	.word	0x080165a8
 8002758:	08014d10 	.word	0x08014d10
 800275c:	08014d1c 	.word	0x08014d1c
 8002760:	08014d24 	.word	0x08014d24
 8002764:	1fff7a18 	.word	0x1fff7a18
 8002768:	1fff7a14 	.word	0x1fff7a14
 800276c:	1fff7a10 	.word	0x1fff7a10
 8002770:	1fff7a22 	.word	0x1fff7a22
 8002774:	08014d40 	.word	0x08014d40
 8002778:	08014d74 	.word	0x08014d74
 800277c:	08014d9c 	.word	0x08014d9c
 8002780:	08014dbc 	.word	0x08014dbc
 8002784:	08014de4 	.word	0x08014de4
 8002788:	08014e24 	.word	0x08014e24

0800278c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	2b00      	cmp	r3, #0
 800279c:	db0b      	blt.n	80027b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	f003 021f 	and.w	r2, r3, #31
 80027a4:	4907      	ldr	r1, [pc, #28]	; (80027c4 <__NVIC_EnableIRQ+0x38>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	2001      	movs	r0, #1
 80027ae:	fa00 f202 	lsl.w	r2, r0, r2
 80027b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	e000e100 	.word	0xe000e100

080027c8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	db12      	blt.n	8002800 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	f003 021f 	and.w	r2, r3, #31
 80027e0:	490a      	ldr	r1, [pc, #40]	; (800280c <__NVIC_DisableIRQ+0x44>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	2001      	movs	r0, #1
 80027ea:	fa00 f202 	lsl.w	r2, r0, r2
 80027ee:	3320      	adds	r3, #32
 80027f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80027f4:	f3bf 8f4f 	dsb	sy
}
 80027f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027fa:	f3bf 8f6f 	isb	sy
}
 80027fe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000e100 	.word	0xe000e100

08002810 <usbGetDataBlocking>:
};
*/


bool usbGetDataBlocking(USBPacket *in)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  while (xQueueReceive(usbDataRx, in, portMAX_DELAY) != pdTRUE); // Don't return until we get some data on the USB
 8002818:	bf00      	nop
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <usbGetDataBlocking+0x50>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4618      	mov	r0, r3
 8002826:	f00b ff6d 	bl	800e704 <xQueueReceive>
 800282a:	4603      	mov	r3, r0
 800282c:	2b01      	cmp	r3, #1
 800282e:	d1f4      	bne.n	800281a <usbGetDataBlocking+0xa>

  // Disabling USB interrupt to make sure we can check and re-enable the endpoint
  // if it is not currently accepting data (ie. can happen if the RX queue was full)
  NVIC_DisableIRQ(OTG_FS_IRQn);
 8002830:	2043      	movs	r0, #67	; 0x43
 8002832:	f7ff ffc9 	bl	80027c8 <__NVIC_DisableIRQ>
  if (rxStopped) {
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <usbGetDataBlocking+0x54>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d008      	beq.n	8002850 <usbGetDataBlocking+0x40>
	  USBD_LL_PrepareReceive(&hUsbDeviceFS, CF_OUT_EP, (uint8_t*)(inPacket.data), USB_RX_TX_PACKET_SIZE);
 800283e:	2340      	movs	r3, #64	; 0x40
 8002840:	4a09      	ldr	r2, [pc, #36]	; (8002868 <usbGetDataBlocking+0x58>)
 8002842:	2101      	movs	r1, #1
 8002844:	4809      	ldr	r0, [pc, #36]	; (800286c <usbGetDataBlocking+0x5c>)
 8002846:	f00f fac3 	bl	8011dd0 <USBD_LL_PrepareReceive>
    rxStopped = false;
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <usbGetDataBlocking+0x54>)
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
  }
  NVIC_EnableIRQ(OTG_FS_IRQn);
 8002850:	2043      	movs	r0, #67	; 0x43
 8002852:	f7ff ff9b 	bl	800278c <__NVIC_EnableIRQ>

  return true;
 8002856:	2301      	movs	r3, #1
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20002968 	.word	0x20002968
 8002864:	20000264 	.word	0x20000264
 8002868:	20002971 	.word	0x20002971
 800286c:	200081a4 	.word	0x200081a4

08002870 <usbInit>:

void usbInit(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af02      	add	r7, sp, #8

//  MX_USB_DEVICE_Init();		// HAL 드라이버에서 생성됨
  usbDataRx = STATIC_MEM_QUEUE_CREATE(usbDataRx);
 8002876:	2305      	movs	r3, #5
 8002878:	4618      	mov	r0, r3
 800287a:	2341      	movs	r3, #65	; 0x41
 800287c:	4619      	mov	r1, r3
 800287e:	2300      	movs	r3, #0
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <usbInit+0x64>)
 8002884:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <usbInit+0x68>)
 8002886:	f00b fc01 	bl	800e08c <xQueueGenericCreateStatic>
 800288a:	4603      	mov	r3, r0
 800288c:	4a13      	ldr	r2, [pc, #76]	; (80028dc <usbInit+0x6c>)
 800288e:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataRx);
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <usbInit+0x6c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <usbInit+0x70>)
 8002896:	4913      	ldr	r1, [pc, #76]	; (80028e4 <usbInit+0x74>)
 8002898:	4618      	mov	r0, r3
 800289a:	f000 ffe1 	bl	8003860 <qmRegisterQueue>
  usbDataTx = STATIC_MEM_QUEUE_CREATE(usbDataTx);
 800289e:	2301      	movs	r3, #1
 80028a0:	4618      	mov	r0, r3
 80028a2:	2341      	movs	r3, #65	; 0x41
 80028a4:	4619      	mov	r1, r3
 80028a6:	2300      	movs	r3, #0
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <usbInit+0x78>)
 80028ac:	4a0f      	ldr	r2, [pc, #60]	; (80028ec <usbInit+0x7c>)
 80028ae:	f00b fbed 	bl	800e08c <xQueueGenericCreateStatic>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4a0e      	ldr	r2, [pc, #56]	; (80028f0 <usbInit+0x80>)
 80028b6:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataTx);
 80028b8:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <usbInit+0x80>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0d      	ldr	r2, [pc, #52]	; (80028f4 <usbInit+0x84>)
 80028be:	4909      	ldr	r1, [pc, #36]	; (80028e4 <usbInit+0x74>)
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 ffcd 	bl	8003860 <qmRegisterQueue>

  isInit = true;
 80028c6:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <usbInit+0x88>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	701a      	strb	r2, [r3, #0]
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	200011c4 	.word	0x200011c4
 80028d8:	2000107c 	.word	0x2000107c
 80028dc:	20002968 	.word	0x20002968
 80028e0:	08014e48 	.word	0x08014e48
 80028e4:	08014e54 	.word	0x08014e54
 80028e8:	20001258 	.word	0x20001258
 80028ec:	20001214 	.word	0x20001214
 80028f0:	2000296c 	.word	0x2000296c
 80028f4:	08014e70 	.word	0x08014e70
 80028f8:	20002964 	.word	0x20002964

080028fc <usblinkTask>:
 * and so much other cool things that I don't have time for it ...)
 */
static USBPacket usbIn;
static CRTPPacket p;
static void usblinkTask(void *param)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  while(1)
  {
    // Fetch a USB packet off the queue
    usbGetDataBlocking(&usbIn);
 8002904:	480c      	ldr	r0, [pc, #48]	; (8002938 <usblinkTask+0x3c>)
 8002906:	f7ff ff83 	bl	8002810 <usbGetDataBlocking>
    p.size = usbIn.size - 1;
 800290a:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <usblinkTask+0x3c>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	3b01      	subs	r3, #1
 8002910:	b2da      	uxtb	r2, r3
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <usblinkTask+0x40>)
 8002914:	701a      	strb	r2, [r3, #0]
    memcpy(&p.raw, usbIn.data, usbIn.size);
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <usblinkTask+0x3c>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	4908      	ldr	r1, [pc, #32]	; (8002940 <usblinkTask+0x44>)
 800291e:	4809      	ldr	r0, [pc, #36]	; (8002944 <usblinkTask+0x48>)
 8002920:	f010 fa93 	bl	8012e4a <memcpy>
    // This queuing will copy a CRTP packet size from usbIn
    xQueueSend(crtpPacketDelivery, &p, portMAX_DELAY);
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <usblinkTask+0x4c>)
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	2300      	movs	r3, #0
 800292a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800292e:	4903      	ldr	r1, [pc, #12]	; (800293c <usblinkTask+0x40>)
 8002930:	f00b fcc2 	bl	800e2b8 <xQueueGenericSend>
    usbGetDataBlocking(&usbIn);
 8002934:	e7e6      	b.n	8002904 <usblinkTask+0x8>
 8002936:	bf00      	nop
 8002938:	20002bb8 	.word	0x20002bb8
 800293c:	20002bfc 	.word	0x20002bfc
 8002940:	20002bb9 	.word	0x20002bb9
 8002944:	20002bfd 	.word	0x20002bfd
 8002948:	200029b4 	.word	0x200029b4

0800294c <usblinkInit>:
/*
 * Public functions
 */

void usblinkInit()
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af04      	add	r7, sp, #16
  if(isInit)
 8002952:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <usblinkInit+0x64>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d126      	bne.n	80029a8 <usblinkInit+0x5c>
    return;

  // Initialize the USB peripheral
  usbInit();
 800295a:	f7ff ff89 	bl	8002870 <usbInit>

  crtpPacketDelivery = STATIC_MEM_QUEUE_CREATE(crtpPacketDelivery);
 800295e:	2310      	movs	r3, #16
 8002960:	4618      	mov	r0, r3
 8002962:	2320      	movs	r3, #32
 8002964:	4619      	mov	r1, r3
 8002966:	2300      	movs	r3, #0
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <usblinkInit+0x68>)
 800296c:	4a12      	ldr	r2, [pc, #72]	; (80029b8 <usblinkInit+0x6c>)
 800296e:	f00b fb8d 	bl	800e08c <xQueueGenericCreateStatic>
 8002972:	4603      	mov	r3, r0
 8002974:	4a11      	ldr	r2, [pc, #68]	; (80029bc <usblinkInit+0x70>)
 8002976:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(crtpPacketDelivery);
 8002978:	4b10      	ldr	r3, [pc, #64]	; (80029bc <usblinkInit+0x70>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a10      	ldr	r2, [pc, #64]	; (80029c0 <usblinkInit+0x74>)
 800297e:	4911      	ldr	r1, [pc, #68]	; (80029c4 <usblinkInit+0x78>)
 8002980:	4618      	mov	r0, r3
 8002982:	f000 ff6d 	bl	8003860 <qmRegisterQueue>

  STATIC_MEM_TASK_CREATE(usblinkTask, usblinkTask, USBLINK_TASK_NAME, NULL, USBLINK_TASK_PRI);
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	461a      	mov	r2, r3
 800298a:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <usblinkInit+0x7c>)
 800298c:	9302      	str	r3, [sp, #8]
 800298e:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <usblinkInit+0x80>)
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	2303      	movs	r3, #3
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2300      	movs	r3, #0
 8002998:	490d      	ldr	r1, [pc, #52]	; (80029d0 <usblinkInit+0x84>)
 800299a:	480e      	ldr	r0, [pc, #56]	; (80029d4 <usblinkInit+0x88>)
 800299c:	f00c faaa 	bl	800eef4 <xTaskCreateStatic>

  isInit = true;
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <usblinkInit+0x64>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]
 80029a6:	e000      	b.n	80029aa <usblinkInit+0x5e>
    return;
 80029a8:	bf00      	nop
}
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200029b1 	.word	0x200029b1
 80029b4:	200014a8 	.word	0x200014a8
 80029b8:	200012a8 	.word	0x200012a8
 80029bc:	200029b4 	.word	0x200029b4
 80029c0:	08014e7c 	.word	0x08014e7c
 80029c4:	08014e90 	.word	0x08014e90
 80029c8:	200014f8 	.word	0x200014f8
 80029cc:	200029b8 	.word	0x200029b8
 80029d0:	08014eb0 	.word	0x08014eb0
 80029d4:	080028fd 	.word	0x080028fd

080029d8 <passthroughInit>:
static void blHeliConfigHandshake();

void passthroughTask(void *param);

void passthroughInit()
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af04      	add	r7, sp, #16
  if(isInit)
 80029de:	4b21      	ldr	r3, [pc, #132]	; (8002a64 <passthroughInit+0x8c>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d13b      	bne.n	8002a5e <passthroughInit+0x86>
    return;

  ptRxQueue = STATIC_MEM_QUEUE_CREATE(ptRxQueue);
 80029e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ea:	4618      	mov	r0, r3
 80029ec:	2301      	movs	r3, #1
 80029ee:	4619      	mov	r1, r3
 80029f0:	2300      	movs	r3, #0
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <passthroughInit+0x90>)
 80029f6:	4a1d      	ldr	r2, [pc, #116]	; (8002a6c <passthroughInit+0x94>)
 80029f8:	f00b fb48 	bl	800e08c <xQueueGenericCreateStatic>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4a1c      	ldr	r2, [pc, #112]	; (8002a70 <passthroughInit+0x98>)
 8002a00:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 8002a02:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <passthroughInit+0x98>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1b      	ldr	r2, [pc, #108]	; (8002a74 <passthroughInit+0x9c>)
 8002a08:	491b      	ldr	r1, [pc, #108]	; (8002a78 <passthroughInit+0xa0>)
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 ff28 	bl	8003860 <qmRegisterQueue>
  ptTxQueue = STATIC_MEM_QUEUE_CREATE(ptTxQueue);
 8002a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a14:	4618      	mov	r0, r3
 8002a16:	2301      	movs	r3, #1
 8002a18:	4619      	mov	r1, r3
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <passthroughInit+0xa4>)
 8002a20:	4a17      	ldr	r2, [pc, #92]	; (8002a80 <passthroughInit+0xa8>)
 8002a22:	f00b fb33 	bl	800e08c <xQueueGenericCreateStatic>
 8002a26:	4603      	mov	r3, r0
 8002a28:	4a16      	ldr	r2, [pc, #88]	; (8002a84 <passthroughInit+0xac>)
 8002a2a:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 8002a2c:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <passthroughInit+0x98>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a10      	ldr	r2, [pc, #64]	; (8002a74 <passthroughInit+0x9c>)
 8002a32:	4911      	ldr	r1, [pc, #68]	; (8002a78 <passthroughInit+0xa0>)
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 ff13 	bl	8003860 <qmRegisterQueue>

  passthroughTaskHandle = STATIC_MEM_TASK_CREATE(passthroughTask, passthroughTask, PASSTHROUGH_TASK_NAME, NULL, PASSTHROUGH_TASK_PRI);
 8002a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <passthroughInit+0xb0>)
 8002a42:	9302      	str	r3, [sp, #8]
 8002a44:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <passthroughInit+0xb4>)
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	2305      	movs	r3, #5
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	4910      	ldr	r1, [pc, #64]	; (8002a90 <passthroughInit+0xb8>)
 8002a50:	4810      	ldr	r0, [pc, #64]	; (8002a94 <passthroughInit+0xbc>)
 8002a52:	f00c fa4f 	bl	800eef4 <xTaskCreateStatic>
 8002a56:	4603      	mov	r3, r0
 8002a58:	4a0f      	ldr	r2, [pc, #60]	; (8002a98 <passthroughInit+0xc0>)
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	e000      	b.n	8002a60 <passthroughInit+0x88>
    return;
 8002a5e:	bf00      	nop
}
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20003020 	.word	0x20003020
 8002a68:	20001868 	.word	0x20001868
 8002a6c:	20001668 	.word	0x20001668
 8002a70:	20003024 	.word	0x20003024
 8002a74:	08014eb8 	.word	0x08014eb8
 8002a78:	08014ec4 	.word	0x08014ec4
 8002a7c:	20001ab8 	.word	0x20001ab8
 8002a80:	200018b8 	.word	0x200018b8
 8002a84:	20003028 	.word	0x20003028
 8002a88:	200015b0 	.word	0x200015b0
 8002a8c:	20002c20 	.word	0x20002c20
 8002a90:	08014ef0 	.word	0x08014ef0
 8002a94:	08002a9d 	.word	0x08002a9d
 8002a98:	20002c1c 	.word	0x20002c1c

08002a9c <passthroughTask>:
  BaseType_t xHigherPriorityTaskWoken;
  return xQueueReceiveFromISR(ptTxQueue, receiveChPtr, &xHigherPriorityTaskWoken);
}

void passthroughTask(void *param)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 8002aa4:	f7ff fd6a 	bl	800257c <systemWaitStart>

  while (true)
  {
    // Wait for interface to be activated, typically when ACM or COM port control message is sent
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002aa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002aac:	2001      	movs	r0, #1
 8002aae:	f00d fc49 	bl	8010344 <ulTaskNotifyTake>
//    paramVarId_t motorPowerSetEnableParam;
//    motorPowerSetEnableParam = paramGetVarId("motorPowerSet", "enable");
//    paramSetInt(motorPowerSetEnableParam, 0);

    // Clear any notifications that was queued during 4way process.
    ulTaskNotifyValueClear(NULL, 0xFFFFFFFF);
 8002ab2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f00d fc90 	bl	80103dc <ulTaskNotifyValueClear>
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002abc:	e7f4      	b.n	8002aa8 <passthroughTask+0xc>

08002abe <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 8002ac8:	1d3b      	adds	r3, r7, #4
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f8a2 	bl	8002c14 <platformGetListOfConfigurations>
 8002ad0:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f854 	bl	8002b84 <platformInitConfiguration>
 8002adc:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <platformInit+0x2c>
  }

//  platformInitHardware();	// NVIC, EXINT 초기화로 대체
  return 0;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b086      	sub	sp, #24
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b30      	cmp	r3, #48	; 0x30
 8002b02:	d104      	bne.n	8002b0e <platformParseDeviceTypeString+0x1c>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3301      	adds	r3, #1
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b3b      	cmp	r3, #59	; 0x3b
 8002b0c:	d001      	beq.n	8002b12 <platformParseDeviceTypeString+0x20>
    return 1;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e034      	b.n	8002b7c <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 8002b12:	2302      	movs	r3, #2
 8002b14:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	60fb      	str	r3, [r7, #12]
  int end = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	e00e      	b.n	8002b44 <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00c      	beq.n	8002b4c <platformParseDeviceTypeString+0x5a>
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	4413      	add	r3, r2
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b3b      	cmp	r3, #59	; 0x3b
 8002b3c:	d006      	beq.n	8002b4c <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	3301      	adds	r3, #1
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	ddec      	ble.n	8002b26 <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	dd01      	ble.n	8002b58 <platformParseDeviceTypeString+0x66>
    return 1;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e011      	b.n	8002b7c <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	6838      	ldr	r0, [r7, #0]
 8002b6c:	f010 f96d 	bl	8012e4a <memcpy>
  deviceType[length] = '\0';
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	4413      	add	r3, r2
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
  return 0;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b090      	sub	sp, #64	; 0x40
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 8002b8e:	f107 0314 	add.w	r3, r7, #20
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 f85e 	bl	8002c54 <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 8002b98:	f107 020c 	add.w	r2, r7, #12
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ffa5 	bl	8002af2 <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 8002ba8:	2300      	movs	r3, #0
 8002baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bac:	e01a      	b.n	8002be4 <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 8002bae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	63bb      	str	r3, [r7, #56]	; 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 8002bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc2:	f107 020c 	add.w	r2, r7, #12
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fd fb01 	bl	80001d0 <strcmp>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d104      	bne.n	8002bde <platformInitConfiguration+0x5a>
      active_config = config;
 8002bd4:	4a08      	ldr	r2, [pc, #32]	; (8002bf8 <platformInitConfiguration+0x74>)
 8002bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd8:	6013      	str	r3, [r2, #0]
      return 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e007      	b.n	8002bee <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 8002bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be0:	3301      	adds	r3, #1
 8002be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	dbe0      	blt.n	8002bae <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 8002bec:	2301      	movs	r3, #1
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3740      	adds	r7, #64	; 0x40
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	2000302c 	.word	0x2000302c

08002bfc <platformConfigGetDeviceTypeName>:

const char* platformConfigGetDeviceType() {
  return active_config->deviceType;
}

const char* platformConfigGetDeviceTypeName() {
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return active_config->deviceTypeName;
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <platformConfigGetDeviceTypeName+0x14>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3305      	adds	r3, #5
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	2000302c 	.word	0x2000302c

08002c14 <platformGetListOfConfigurations>:
  //  .motorMap = motorMapCF21Brushless,
  },
#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2203      	movs	r2, #3
 8002c20:	601a      	str	r2, [r3, #0]
  return configs;
 8002c22:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <platformGetListOfConfigurations+0x1c>)
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	20000268 	.word	0x20000268

08002c34 <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;CF20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8002c42:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002c46:	015b      	lsls	r3, r3, #5
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  char* block = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	e00d      	b.n	8002c82 <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 8002c66:	6938      	ldr	r0, [r7, #16]
 8002c68:	f7ff ffe4 	bl	8002c34 <getAddressOfOtpMemoryBlock>
 8002c6c:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	617b      	str	r3, [r7, #20]
      break;
 8002c7a:	e005      	b.n	8002c88 <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b0f      	cmp	r3, #15
 8002c86:	ddee      	ble.n	8002c66 <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <platformGetDeviceTypeString+0x42>
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2bff      	cmp	r3, #255	; 0xff
 8002c94:	d101      	bne.n	8002c9a <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 8002c96:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <platformGetDeviceTypeString+0x60>)
 8002c98:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	6979      	ldr	r1, [r7, #20]
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f00f fff2 	bl	8012c88 <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3320      	adds	r3, #32
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
}
 8002cac:	bf00      	nop
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	08014fe4 	.word	0x08014fe4

08002cb8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002cbc:	f3bf 8f4f 	dsb	sy
}
 8002cc0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <__NVIC_SystemReset+0x24>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002cca:	4904      	ldr	r1, [pc, #16]	; (8002cdc <__NVIC_SystemReset+0x24>)
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <__NVIC_SystemReset+0x28>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cd2:	f3bf 8f4f 	dsb	sy
}
 8002cd6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <__NVIC_SystemReset+0x20>
 8002cdc:	e000ed00 	.word	0xe000ed00
 8002ce0:	05fa0004 	.word	0x05fa0004

08002ce4 <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d02:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	68b8      	ldr	r0, [r7, #8]
 8002d08:	f000 f810 	bl	8002d2c <storeAssertFileData>
//  DEBUG_PRINT("Assert failed %s:%d\n", file, line);
//  motorsStop();
  ledShowFaultPattern();
 8002d0c:	f7fe fea0 	bl	8001a50 <ledShowFaultPattern>

  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <assertFail+0x44>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <assertFail+0x3c>
  {
    // Only reset if debugger is not connected
    NVIC_SystemReset();
 8002d1c:	f7ff ffcc 	bl	8002cb8 <__NVIC_SystemReset>
  }
}
 8002d20:	bf00      	nop
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	e000edf0 	.word	0xe000edf0

08002d2c <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <storeAssertFileData+0x38>)
 8002d38:	4a0b      	ldr	r2, [pc, #44]	; (8002d68 <storeAssertFileData+0x3c>)
 8002d3a:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 8002d3c:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <storeAssertFileData+0x38>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <storeAssertFileData+0x38>)
 8002d44:	791a      	ldrb	r2, [r3, #4]
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <storeAssertFileData+0x40>)
 8002d48:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 8002d4a:	4a06      	ldr	r2, [pc, #24]	; (8002d64 <storeAssertFileData+0x38>)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 8002d50:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <storeAssertFileData+0x38>)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	60d3      	str	r3, [r2, #12]
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20001d10 	.word	0x20001d10
 8002d68:	2f8a001f 	.word	0x2f8a001f
 8002d6c:	20003030 	.word	0x20003030

08002d70 <consoleInit>:

  return true;
}

void consoleInit()
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  if (isInit)
 8002d74:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <consoleInit+0x50>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d11f      	bne.n	8002dbc <consoleInit+0x4c>
    return;

  messageToPrint.size = 0;
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <consoleInit+0x54>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
  messageToPrint.header = CRTP_HEADER(CRTP_PORT_CONSOLE, 0);
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <consoleInit+0x54>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	705a      	strb	r2, [r3, #1]
  vSemaphoreCreateBinary(synch);
 8002d88:	2203      	movs	r2, #3
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	f00b f9e9 	bl	800e164 <xQueueGenericCreate>
 8002d92:	4603      	mov	r3, r0
 8002d94:	4a0c      	ldr	r2, [pc, #48]	; (8002dc8 <consoleInit+0x58>)
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <consoleInit+0x58>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d006      	beq.n	8002dae <consoleInit+0x3e>
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <consoleInit+0x58>)
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	2300      	movs	r3, #0
 8002da6:	2200      	movs	r2, #0
 8002da8:	2100      	movs	r1, #0
 8002daa:	f00b fa85 	bl	800e2b8 <xQueueGenericSend>
  messageSendingIsPending = false;
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <consoleInit+0x5c>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]

  isInit = true;
 8002db4:	4b02      	ldr	r3, [pc, #8]	; (8002dc0 <consoleInit+0x50>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	701a      	strb	r2, [r3, #0]
 8002dba:	e000      	b.n	8002dbe <consoleInit+0x4e>
    return;
 8002dbc:	bf00      	nop
}
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	2000305c 	.word	0x2000305c
 8002dc4:	20003034 	.word	0x20003034
 8002dc8:	20003058 	.word	0x20003058
 8002dcc:	20003054 	.word	0x20003054

08002dd0 <debugInit>:
 */
#include "debug.h"


void debugInit(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
#ifdef DEBUG_PRINT_ON_SEGGER_RTT
  SEGGER_RTT_Init();
  SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_TRIM);
#endif
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <uartInit>:
			return -1;
		return len;
}


void uartInit(void) {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af02      	add	r7, sp, #8
	uartqueue = STATIC_MEM_QUEUE_CREATE(uartqueue);
 8002de6:	2340      	movs	r3, #64	; 0x40
 8002de8:	4618      	mov	r0, r3
 8002dea:	2301      	movs	r3, #1
 8002dec:	4619      	mov	r1, r3
 8002dee:	2300      	movs	r3, #0
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <uartInit+0x2c>)
 8002df4:	4a06      	ldr	r2, [pc, #24]	; (8002e10 <uartInit+0x30>)
 8002df6:	f00b f949 	bl	800e08c <xQueueGenericCreateStatic>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4a05      	ldr	r2, [pc, #20]	; (8002e14 <uartInit+0x34>)
 8002dfe:	6013      	str	r3, [r2, #0]
    isInit = true;
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <uartInit+0x38>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20001b48 	.word	0x20001b48
 8002e10:	20001b08 	.word	0x20001b08
 8002e14:	20003060 	.word	0x20003060
 8002e18:	2000310d 	.word	0x2000310d

08002e1c <uartDmaInit>:



void uartDmaInit(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af02      	add	r7, sp, #8

  // initialize the FreeRTOS structures first, to prevent null pointers in interrupts
  waitUntilSendDone = xSemaphoreCreateBinaryStatic(&waitUntilSendDoneBuffer); // initialized as blocking
 8002e22:	2303      	movs	r3, #3
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	4b21      	ldr	r3, [pc, #132]	; (8002eac <uartDmaInit+0x90>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	f00b f92d 	bl	800e08c <xQueueGenericCreateStatic>
 8002e32:	4603      	mov	r3, r0
 8002e34:	4a1e      	ldr	r2, [pc, #120]	; (8002eb0 <uartDmaInit+0x94>)
 8002e36:	6013      	str	r3, [r2, #0]
  uartBusy = xSemaphoreCreateBinaryStatic(&uartBusyBuffer); // initialized as blocking
 8002e38:	2303      	movs	r3, #3
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <uartDmaInit+0x98>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2100      	movs	r1, #0
 8002e42:	2001      	movs	r0, #1
 8002e44:	f00b f922 	bl	800e08c <xQueueGenericCreateStatic>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	4a1b      	ldr	r2, [pc, #108]	; (8002eb8 <uartDmaInit+0x9c>)
 8002e4c:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(uartBusy); // but we give it because the uart isn't busy at initialization
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <uartDmaInit+0x9c>)
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	2300      	movs	r3, #0
 8002e54:	2200      	movs	r2, #0
 8002e56:	2100      	movs	r1, #0
 8002e58:	f00b fa2e 	bl	800e2b8 <xQueueGenericSend>
  xSemaphoreGive(waitUntilSendDone);
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <uartDmaInit+0x94>)
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	2300      	movs	r3, #0
 8002e62:	2200      	movs	r2, #0
 8002e64:	2100      	movs	r1, #0
 8002e66:	f00b fa27 	bl	800e2b8 <xQueueGenericSend>

  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	607b      	str	r3, [r7, #4]
 8002e6e:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <uartDmaInit+0xa0>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	4a12      	ldr	r2, [pc, #72]	; (8002ebc <uartDmaInit+0xa0>)
 8002e74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e78:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <uartDmaInit+0xa0>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e82:	607b      	str	r3, [r7, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
  HAL_DMA_Init(&hdma_usart6_tx);
 8002e86:	480e      	ldr	r0, [pc, #56]	; (8002ec0 <uartDmaInit+0xa4>)
 8002e88:	f002 fdbc 	bl	8005a04 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2105      	movs	r1, #5
 8002e90:	2045      	movs	r0, #69	; 0x45
 8002e92:	f002 fd80 	bl	8005996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002e96:	2045      	movs	r0, #69	; 0x45
 8002e98:	f002 fd99 	bl	80059ce <HAL_NVIC_EnableIRQ>

  isUartDmaInitialized = true;
 8002e9c:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <uartDmaInit+0xa8>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]

}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	200030bc 	.word	0x200030bc
 8002eb0:	200030b8 	.word	0x200030b8
 8002eb4:	20003068 	.word	0x20003068
 8002eb8:	20003064 	.word	0x20003064
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	200040a4 	.word	0x200040a4
 8002ec4:	2000310c 	.word	0x2000310c

08002ec8 <uartSendData>:




void uartSendData(uint32_t size, uint8_t* data)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t i;

  for(i = 0; i < size; i++)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	e00f      	b.n	8002ef8 <uartSendData+0x30>
  {
    while (!(USART6->SR & UART_FLAG_TXE));
 8002ed8:	bf00      	nop
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <uartSendData+0x48>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f9      	beq.n	8002eda <uartSendData+0x12>
    USART6->DR = (data[i] & 0x00FF);
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	781a      	ldrb	r2, [r3, #0]
 8002eee:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <uartSendData+0x48>)
 8002ef0:	605a      	str	r2, [r3, #4]
  for(i = 0; i < size; i++)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d3eb      	bcc.n	8002ed8 <uartSendData+0x10>
  }
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40011400 	.word	0x40011400

08002f14 <uartPutchar>:


int uartPutchar(int ch)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
    uartSendData(1, (uint8_t *)&ch);
 8002f1c:	1d3b      	adds	r3, r7, #4
 8002f1e:	4619      	mov	r1, r3
 8002f20:	2001      	movs	r0, #1
 8002f22:	f7ff ffd1 	bl	8002ec8 <uartSendData>
    return (unsigned char)ch;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	b2db      	uxtb	r3, r3
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <getIntLen>:

static const char digit[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 
                             'A', 'B', 'C', 'D', 'E', 'F'};

static int getIntLen (long int value)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  int l = 1;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
  while(value > 9)
 8002f40:	e00a      	b.n	8002f58 <getIntLen+0x24>
  {
    l++;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3301      	adds	r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
    value /= 10;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a08      	ldr	r2, [pc, #32]	; (8002f6c <getIntLen+0x38>)
 8002f4c:	fb82 1203 	smull	r1, r2, r2, r3
 8002f50:	1092      	asrs	r2, r2, #2
 8002f52:	17db      	asrs	r3, r3, #31
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	607b      	str	r3, [r7, #4]
  while(value > 9)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b09      	cmp	r3, #9
 8002f5c:	dcf1      	bgt.n	8002f42 <getIntLen+0xe>
  }
  return l;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	66666667 	.word	0x66666667

08002f70 <power>:

int power(int a, int b)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  int i;
  int x = a;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	60bb      	str	r3, [r7, #8]

  for (i = 1; i < b; i++)
 8002f7e:	2301      	movs	r3, #1
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	e007      	b.n	8002f94 <power+0x24>
  {
    x *= a;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	fb02 f303 	mul.w	r3, r2, r3
 8002f8c:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < b; i++)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	3301      	adds	r3, #1
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	dbf3      	blt.n	8002f84 <power+0x14>
  }

  return x;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <itoa10Unsigned>:

static int itoa10Unsigned(putc_t putcf, unsigned long long int num)
{
 8002fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb0:	b088      	sub	sp, #32
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]

  if (num == 0)
 8002fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	d104      	bne.n	8002fd0 <itoa10Unsigned+0x24>
  {
    putcf('0');
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2030      	movs	r0, #48	; 0x30
 8002fca:	4798      	blx	r3
    return 1;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e057      	b.n	8003080 <itoa10Unsigned+0xd4>
  }

  unsigned long long int i = 1;
 8002fd0:	f04f 0201 	mov.w	r2, #1
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	e9c7 2304 	strd	r2, r3, [r7, #16]

  while ((num / i) > 9)
 8002fdc:	e019      	b.n	8003012 <itoa10Unsigned+0x66>
  {
    i *= 10L;
 8002fde:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002fe2:	4642      	mov	r2, r8
 8002fe4:	464b      	mov	r3, r9
 8002fe6:	f04f 0000 	mov.w	r0, #0
 8002fea:	f04f 0100 	mov.w	r1, #0
 8002fee:	0099      	lsls	r1, r3, #2
 8002ff0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002ff4:	0090      	lsls	r0, r2, #2
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	eb12 0408 	adds.w	r4, r2, r8
 8002ffe:	eb43 0509 	adc.w	r5, r3, r9
 8003002:	eb14 0a04 	adds.w	sl, r4, r4
 8003006:	eb45 0b05 	adc.w	fp, r5, r5
 800300a:	4654      	mov	r4, sl
 800300c:	465d      	mov	r5, fp
 800300e:	e9c7 4504 	strd	r4, r5, [r7, #16]
  while ((num / i) > 9)
 8003012:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003016:	e9d7 0100 	ldrd	r0, r1, [r7]
 800301a:	f7fd fe25 	bl	8000c68 <__aeabi_uldivmod>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	2a0a      	cmp	r2, #10
 8003024:	f173 0300 	sbcs.w	r3, r3, #0
 8003028:	d2d9      	bcs.n	8002fde <itoa10Unsigned+0x32>
  }

  do
  {
    putcf(digit[(num / i) % 10L]);
 800302a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800302e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003032:	f7fd fe19 	bl	8000c68 <__aeabi_uldivmod>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4610      	mov	r0, r2
 800303c:	4619      	mov	r1, r3
 800303e:	f04f 020a 	mov.w	r2, #10
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	f7fd fe0f 	bl	8000c68 <__aeabi_uldivmod>
 800304a:	4910      	ldr	r1, [pc, #64]	; (800308c <itoa10Unsigned+0xe0>)
 800304c:	188b      	adds	r3, r1, r2
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4610      	mov	r0, r2
 8003056:	4798      	blx	r3
    len++;
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	3301      	adds	r3, #1
 800305c:	61fb      	str	r3, [r7, #28]
  }
  while (i /= 10L);
 800305e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003062:	f04f 020a 	mov.w	r2, #10
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	f7fd fdfd 	bl	8000c68 <__aeabi_uldivmod>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003076:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	d1d5      	bne.n	800302a <itoa10Unsigned+0x7e>

  return len;
 800307e:	69fb      	ldr	r3, [r7, #28]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3720      	adds	r7, #32
 8003084:	46bd      	mov	sp, r7
 8003086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800308a:	bf00      	nop
 800308c:	08016598 	.word	0x08016598

08003090 <itoa10>:

static int itoa10(putc_t putcf, long long int num, int precision)
{
 8003090:	b5b0      	push	{r4, r5, r7, lr}
 8003092:	b08a      	sub	sp, #40	; 0x28
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	627b      	str	r3, [r7, #36]	; 0x24

  if (num == 0)
 80030a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	d104      	bne.n	80030b2 <itoa10+0x22>
  {
    putcf('0');
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2030      	movs	r0, #48	; 0x30
 80030ac:	4798      	blx	r3
    return 1;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e037      	b.n	8003122 <itoa10+0x92>
  }

  long long unsigned int n = num;
 80030b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (num < 0)
 80030ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	da0d      	bge.n	80030de <itoa10+0x4e>
  {
    n = -num;
 80030c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030c6:	2100      	movs	r1, #0
 80030c8:	4254      	negs	r4, r2
 80030ca:	eb61 0503 	sbc.w	r5, r1, r3
 80030ce:	e9c7 4506 	strd	r4, r5, [r7, #24]
    putcf('-');
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	202d      	movs	r0, #45	; 0x2d
 80030d6:	4798      	blx	r3
    len++;
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	3301      	adds	r3, #1
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  int numLenght = getIntLen(num);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff27 	bl	8002f34 <getIntLen>
 80030e6:	6138      	str	r0, [r7, #16]
  if (numLenght < precision)
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ec:	429a      	cmp	r2, r3
 80030ee:	da10      	bge.n	8003112 <itoa10+0x82>
  {
    int fillWithZero = precision - numLenght;
 80030f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	617b      	str	r3, [r7, #20]
    while (fillWithZero > 0)
 80030f8:	e008      	b.n	800310c <itoa10+0x7c>
    {
      putcf('0');
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2030      	movs	r0, #48	; 0x30
 80030fe:	4798      	blx	r3
      len++;
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	3301      	adds	r3, #1
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
      fillWithZero--;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	3b01      	subs	r3, #1
 800310a:	617b      	str	r3, [r7, #20]
    while (fillWithZero > 0)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2b00      	cmp	r3, #0
 8003110:	dcf3      	bgt.n	80030fa <itoa10+0x6a>
    }
  }

  return itoa10Unsigned(putcf, n) + len;
 8003112:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff ff48 	bl	8002fac <itoa10Unsigned>
 800311c:	4602      	mov	r2, r0
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	4413      	add	r3, r2
}
 8003122:	4618      	mov	r0, r3
 8003124:	3728      	adds	r7, #40	; 0x28
 8003126:	46bd      	mov	sp, r7
 8003128:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800312c <itoa16>:

static int itoa16(putc_t putcf, uint64_t num, int width, char padChar)
{
 800312c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003130:	b08d      	sub	sp, #52	; 0x34
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
  bool foundFirst = false;
 800313e:	2300      	movs	r3, #0
 8003140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  for (int i = 15; i >= 0; i--)
 8003144:	230f      	movs	r3, #15
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
 8003148:	e059      	b.n	80031fe <itoa16+0xd2>
  {
    int shift = i * 4;
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	623b      	str	r3, [r7, #32]
    uint64_t mask = (uint64_t)0x0F << shift;
 8003150:	f04f 020f 	mov.w	r2, #15
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	6a39      	ldr	r1, [r7, #32]
 800315a:	f1a1 0620 	sub.w	r6, r1, #32
 800315e:	f1c1 0020 	rsb	r0, r1, #32
 8003162:	fa03 f501 	lsl.w	r5, r3, r1
 8003166:	fa02 f606 	lsl.w	r6, r2, r6
 800316a:	4335      	orrs	r5, r6
 800316c:	fa22 f000 	lsr.w	r0, r2, r0
 8003170:	4305      	orrs	r5, r0
 8003172:	fa02 f401 	lsl.w	r4, r2, r1
 8003176:	e9c7 4506 	strd	r4, r5, [r7, #24]
    uint64_t val = (num & mask) >> shift;
 800317a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800317e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003182:	ea00 0a02 	and.w	sl, r0, r2
 8003186:	ea01 0b03 	and.w	fp, r1, r3
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	f1c3 0120 	rsb	r1, r3, #32
 8003190:	f1a3 0220 	sub.w	r2, r3, #32
 8003194:	fa2a f803 	lsr.w	r8, sl, r3
 8003198:	fa0b f101 	lsl.w	r1, fp, r1
 800319c:	ea48 0801 	orr.w	r8, r8, r1
 80031a0:	fa2b f202 	lsr.w	r2, fp, r2
 80031a4:	ea48 0802 	orr.w	r8, r8, r2
 80031a8:	fa2b f903 	lsr.w	r9, fp, r3
 80031ac:	e9c7 8904 	strd	r8, r9, [r7, #16]

    if (val > 0)
 80031b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	d002      	beq.n	80031be <itoa16+0x92>
    {
      foundFirst = true;
 80031b8:	2301      	movs	r3, #1
 80031ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }

    if (foundFirst || i < width)
 80031be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d103      	bne.n	80031ce <itoa16+0xa2>
 80031c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ca:	429a      	cmp	r2, r3
 80031cc:	da14      	bge.n	80031f8 <itoa16+0xcc>
    {
      if (foundFirst)
 80031ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d008      	beq.n	80031e8 <itoa16+0xbc>
      {
        putcf(digit[val]);
 80031d6:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <itoa16+0xe4>)
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4610      	mov	r0, r2
 80031e4:	4798      	blx	r3
 80031e6:	e004      	b.n	80031f2 <itoa16+0xc6>
      }
      else
      {
        putcf(padChar);
 80031e8:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4610      	mov	r0, r2
 80031f0:	4798      	blx	r3
      }

      len++;
 80031f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f4:	3301      	adds	r3, #1
 80031f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (int i = 15; i >= 0; i--)
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	3b01      	subs	r3, #1
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	2b00      	cmp	r3, #0
 8003202:	daa2      	bge.n	800314a <itoa16+0x1e>
    }
  }

  return len;
 8003204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003206:	4618      	mov	r0, r3
 8003208:	3734      	adds	r7, #52	; 0x34
 800320a:	46bd      	mov	sp, r7
 800320c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003210:	08016598 	.word	0x08016598

08003214 <handleLongLong>:

static int handleLongLong(putc_t putcf, const char** fmt, unsigned long long int val, int width, char padChar)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]

  switch(*((*fmt)++))
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	1c59      	adds	r1, r3, #1
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	6011      	str	r1, [r2, #0]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	3b58      	subs	r3, #88	; 0x58
 8003234:	2b20      	cmp	r3, #32
 8003236:	d861      	bhi.n	80032fc <handleLongLong+0xe8>
 8003238:	a201      	add	r2, pc, #4	; (adr r2, 8003240 <handleLongLong+0x2c>)
 800323a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323e:	bf00      	nop
 8003240:	080032e5 	.word	0x080032e5
 8003244:	080032fd 	.word	0x080032fd
 8003248:	080032fd 	.word	0x080032fd
 800324c:	080032fd 	.word	0x080032fd
 8003250:	080032fd 	.word	0x080032fd
 8003254:	080032fd 	.word	0x080032fd
 8003258:	080032fd 	.word	0x080032fd
 800325c:	080032fd 	.word	0x080032fd
 8003260:	080032fd 	.word	0x080032fd
 8003264:	080032fd 	.word	0x080032fd
 8003268:	080032fd 	.word	0x080032fd
 800326c:	080032fd 	.word	0x080032fd
 8003270:	080032c5 	.word	0x080032c5
 8003274:	080032fd 	.word	0x080032fd
 8003278:	080032fd 	.word	0x080032fd
 800327c:	080032fd 	.word	0x080032fd
 8003280:	080032fd 	.word	0x080032fd
 8003284:	080032c5 	.word	0x080032c5
 8003288:	080032fd 	.word	0x080032fd
 800328c:	080032fd 	.word	0x080032fd
 8003290:	080032fd 	.word	0x080032fd
 8003294:	080032fd 	.word	0x080032fd
 8003298:	080032fd 	.word	0x080032fd
 800329c:	080032fd 	.word	0x080032fd
 80032a0:	080032fd 	.word	0x080032fd
 80032a4:	080032fd 	.word	0x080032fd
 80032a8:	080032fd 	.word	0x080032fd
 80032ac:	080032fd 	.word	0x080032fd
 80032b0:	080032fd 	.word	0x080032fd
 80032b4:	080032d7 	.word	0x080032d7
 80032b8:	080032fd 	.word	0x080032fd
 80032bc:	080032fd 	.word	0x080032fd
 80032c0:	080032e5 	.word	0x080032e5
  {
    case 'i':
    case 'd':
      len = itoa10(putcf, (long long int)val, 0);
 80032c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032c8:	2100      	movs	r1, #0
 80032ca:	9100      	str	r1, [sp, #0]
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f7ff fedf 	bl	8003090 <itoa10>
 80032d2:	6178      	str	r0, [r7, #20]
      break;
 80032d4:	e013      	b.n	80032fe <handleLongLong+0xea>
    case 'u':
      len = itoa10Unsigned(putcf, val);
 80032d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f7ff fe66 	bl	8002fac <itoa10Unsigned>
 80032e0:	6178      	str	r0, [r7, #20]
      break;
 80032e2:	e00c      	b.n	80032fe <handleLongLong+0xea>
    case 'x':
    case 'X':
      len = itoa16(putcf, val, width, padChar);
 80032e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032e8:	9301      	str	r3, [sp, #4]
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f7ff ff1a 	bl	800312c <itoa16>
 80032f8:	6178      	str	r0, [r7, #20]
      break;
 80032fa:	e000      	b.n	80032fe <handleLongLong+0xea>
    default:
      // Nothing here
      break;
 80032fc:	bf00      	nop
  }

  return len;
 80032fe:	697b      	ldr	r3, [r7, #20]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <handleLong>:

static int handleLong(putc_t putcf, const char** fmt, unsigned long int val, int width, char padChar)
{
 8003308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800330c:	b088      	sub	sp, #32
 800330e:	af02      	add	r7, sp, #8
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	603b      	str	r3, [r7, #0]
  int len = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]

  switch(*((*fmt)++))
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	1c59      	adds	r1, r3, #1
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	6011      	str	r1, [r2, #0]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	3b58      	subs	r3, #88	; 0x58
 800332a:	2b20      	cmp	r3, #32
 800332c:	d86c      	bhi.n	8003408 <handleLong+0x100>
 800332e:	a201      	add	r2, pc, #4	; (adr r2, 8003334 <handleLong+0x2c>)
 8003330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003334:	080033e9 	.word	0x080033e9
 8003338:	08003409 	.word	0x08003409
 800333c:	08003409 	.word	0x08003409
 8003340:	08003409 	.word	0x08003409
 8003344:	08003409 	.word	0x08003409
 8003348:	08003409 	.word	0x08003409
 800334c:	08003409 	.word	0x08003409
 8003350:	08003409 	.word	0x08003409
 8003354:	08003409 	.word	0x08003409
 8003358:	08003409 	.word	0x08003409
 800335c:	08003409 	.word	0x08003409
 8003360:	08003409 	.word	0x08003409
 8003364:	080033b9 	.word	0x080033b9
 8003368:	08003409 	.word	0x08003409
 800336c:	08003409 	.word	0x08003409
 8003370:	08003409 	.word	0x08003409
 8003374:	08003409 	.word	0x08003409
 8003378:	080033b9 	.word	0x080033b9
 800337c:	08003409 	.word	0x08003409
 8003380:	08003409 	.word	0x08003409
 8003384:	08003409 	.word	0x08003409
 8003388:	08003409 	.word	0x08003409
 800338c:	08003409 	.word	0x08003409
 8003390:	08003409 	.word	0x08003409
 8003394:	08003409 	.word	0x08003409
 8003398:	08003409 	.word	0x08003409
 800339c:	08003409 	.word	0x08003409
 80033a0:	08003409 	.word	0x08003409
 80033a4:	08003409 	.word	0x08003409
 80033a8:	080033d3 	.word	0x080033d3
 80033ac:	08003409 	.word	0x08003409
 80033b0:	08003409 	.word	0x08003409
 80033b4:	080033e9 	.word	0x080033e9
  {
    case 'i':
    case 'd':
      len = itoa10(putcf, (long int)val, 0);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	17da      	asrs	r2, r3, #31
 80033bc:	469a      	mov	sl, r3
 80033be:	4693      	mov	fp, r2
 80033c0:	2300      	movs	r3, #0
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	4652      	mov	r2, sl
 80033c6:	465b      	mov	r3, fp
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f7ff fe61 	bl	8003090 <itoa10>
 80033ce:	6178      	str	r0, [r7, #20]
      break;
 80033d0:	e01b      	b.n	800340a <handleLong+0x102>
    case 'u':
      len = itoa10Unsigned(putcf, val);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	4698      	mov	r8, r3
 80033d8:	4691      	mov	r9, r2
 80033da:	4642      	mov	r2, r8
 80033dc:	464b      	mov	r3, r9
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f7ff fde4 	bl	8002fac <itoa10Unsigned>
 80033e4:	6178      	str	r0, [r7, #20]
      break;
 80033e6:	e010      	b.n	800340a <handleLong+0x102>
    case 'x':
    case 'X':
      len = itoa16(putcf, val, width, padChar);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	461c      	mov	r4, r3
 80033ee:	4615      	mov	r5, r2
 80033f0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	4622      	mov	r2, r4
 80033fc:	462b      	mov	r3, r5
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff fe94 	bl	800312c <itoa16>
 8003404:	6178      	str	r0, [r7, #20]
      break;
 8003406:	e000      	b.n	800340a <handleLong+0x102>
    default:
      // Nothing here
      break;
 8003408:	bf00      	nop
  }

  return len;
 800340a:	697b      	ldr	r3, [r7, #20]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003416:	bf00      	nop

08003418 <evprintf>:

int evprintf(putc_t putcf, const char * fmt, va_list ap)
{
 8003418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800341c:	ed2d 8b02 	vpush	{d8}
 8003420:	b08e      	sub	sp, #56	; 0x38
 8003422:	af02      	add	r7, sp, #8
 8003424:	6178      	str	r0, [r7, #20]
 8003426:	6139      	str	r1, [r7, #16]
 8003428:	60fa      	str	r2, [r7, #12]
  int len=0;
 800342a:	2300      	movs	r3, #0
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
  char* str;
  int precision;
  int width;
  char padChar;

  while (*fmt)
 800342e:	e1ac      	b.n	800378a <evprintf+0x372>
  {
    if (*fmt == '%')
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b25      	cmp	r3, #37	; 0x25
 8003436:	f040 819d 	bne.w	8003774 <evprintf+0x35c>
    {
      precision = 6;
 800343a:	2306      	movs	r3, #6
 800343c:	623b      	str	r3, [r7, #32]
      padChar = ' ';
 800343e:	2320      	movs	r3, #32
 8003440:	76fb      	strb	r3, [r7, #27]
      width = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]

      fmt++;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	3301      	adds	r3, #1
 800344a:	613b      	str	r3, [r7, #16]
      if (*fmt == '%') {
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b25      	cmp	r3, #37	; 0x25
 8003452:	d110      	bne.n	8003476 <evprintf+0x5e>
        putcf(*fmt++);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	613a      	str	r2, [r7, #16]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	4610      	mov	r0, r2
 8003462:	4798      	blx	r3
        len++;
 8003464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003466:	3301      	adds	r3, #1
 8003468:	62fb      	str	r3, [r7, #44]	; 0x2c
        continue;
 800346a:	e18e      	b.n	800378a <evprintf+0x372>
      }

      while ('0' == *fmt)
      {
        padChar = '0';
 800346c:	2330      	movs	r3, #48	; 0x30
 800346e:	76fb      	strb	r3, [r7, #27]
        fmt++;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	3301      	adds	r3, #1
 8003474:	613b      	str	r3, [r7, #16]
      while ('0' == *fmt)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b30      	cmp	r3, #48	; 0x30
 800347c:	d0f6      	beq.n	800346c <evprintf+0x54>
      }

			while(isdigit((unsigned)*fmt))
 800347e:	e00e      	b.n	800349e <evprintf+0x86>
			{
				width *= 10;
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	61fb      	str	r3, [r7, #28]
				width += *fmt - '0';
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	3b30      	subs	r3, #48	; 0x30
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	4413      	add	r3, r2
 8003496:	61fb      	str	r3, [r7, #28]
				fmt++;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	3301      	adds	r3, #1
 800349c:	613b      	str	r3, [r7, #16]
			while(isdigit((unsigned)*fmt))
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	3301      	adds	r3, #1
 80034a4:	4ab2      	ldr	r2, [pc, #712]	; (8003770 <evprintf+0x358>)
 80034a6:	4413      	add	r3, r2
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1e6      	bne.n	8003480 <evprintf+0x68>
			}

      while (!isalpha((unsigned) *fmt))
 80034b2:	e017      	b.n	80034e4 <evprintf+0xcc>
      {
        if (*fmt == '.')
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b2e      	cmp	r3, #46	; 0x2e
 80034ba:	d113      	bne.n	80034e4 <evprintf+0xcc>
        {
          fmt++;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	3301      	adds	r3, #1
 80034c0:	613b      	str	r3, [r7, #16]
          if (isdigit((unsigned)*fmt))
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	3301      	adds	r3, #1
 80034c8:	4aa9      	ldr	r2, [pc, #676]	; (8003770 <evprintf+0x358>)
 80034ca:	4413      	add	r3, r2
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d006      	beq.n	80034e4 <evprintf+0xcc>
          {
            precision = *fmt - '0';
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	3b30      	subs	r3, #48	; 0x30
 80034dc:	623b      	str	r3, [r7, #32]
            fmt++;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	3301      	adds	r3, #1
 80034e2:	613b      	str	r3, [r7, #16]
      while (!isalpha((unsigned) *fmt))
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	4aa1      	ldr	r2, [pc, #644]	; (8003770 <evprintf+0x358>)
 80034ec:	4413      	add	r3, r2
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0dd      	beq.n	80034b4 <evprintf+0x9c>
          }
        }
      }
      switch (*fmt++)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	613a      	str	r2, [r7, #16]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	3b58      	subs	r3, #88	; 0x58
 8003502:	2b20      	cmp	r3, #32
 8003504:	f200 8132 	bhi.w	800376c <evprintf+0x354>
 8003508:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <evprintf+0xf8>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	080035dd 	.word	0x080035dd
 8003514:	0800376d 	.word	0x0800376d
 8003518:	0800376d 	.word	0x0800376d
 800351c:	0800376d 	.word	0x0800376d
 8003520:	0800376d 	.word	0x0800376d
 8003524:	0800376d 	.word	0x0800376d
 8003528:	0800376d 	.word	0x0800376d
 800352c:	0800376d 	.word	0x0800376d
 8003530:	0800376d 	.word	0x0800376d
 8003534:	0800376d 	.word	0x0800376d
 8003538:	0800376d 	.word	0x0800376d
 800353c:	08003753 	.word	0x08003753
 8003540:	08003595 	.word	0x08003595
 8003544:	0800376d 	.word	0x0800376d
 8003548:	08003667 	.word	0x08003667
 800354c:	0800376d 	.word	0x0800376d
 8003550:	0800376d 	.word	0x0800376d
 8003554:	08003595 	.word	0x08003595
 8003558:	0800376d 	.word	0x0800376d
 800355c:	0800376d 	.word	0x0800376d
 8003560:	08003607 	.word	0x08003607
 8003564:	0800376d 	.word	0x0800376d
 8003568:	0800376d 	.word	0x0800376d
 800356c:	0800376d 	.word	0x0800376d
 8003570:	0800376d 	.word	0x0800376d
 8003574:	0800376d 	.word	0x0800376d
 8003578:	0800376d 	.word	0x0800376d
 800357c:	08003727 	.word	0x08003727
 8003580:	0800376d 	.word	0x0800376d
 8003584:	080035bb 	.word	0x080035bb
 8003588:	0800376d 	.word	0x0800376d
 800358c:	0800376d 	.word	0x0800376d
 8003590:	080035dd 	.word	0x080035dd
      {
        case 'i':
        case 'd':
          len += itoa10(putcf, va_arg(ap, int), 0);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	1d1a      	adds	r2, r3, #4
 8003598:	60fa      	str	r2, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	17da      	asrs	r2, r3, #31
 800359e:	461c      	mov	r4, r3
 80035a0:	4615      	mov	r5, r2
 80035a2:	2300      	movs	r3, #0
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	4622      	mov	r2, r4
 80035a8:	462b      	mov	r3, r5
 80035aa:	6978      	ldr	r0, [r7, #20]
 80035ac:	f7ff fd70 	bl	8003090 <itoa10>
 80035b0:	4602      	mov	r2, r0
 80035b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b4:	4413      	add	r3, r2
 80035b6:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 80035b8:	e0e7      	b.n	800378a <evprintf+0x372>
        case 'u':
          len += itoa10Unsigned(putcf, va_arg(ap, unsigned int));
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1d1a      	adds	r2, r3, #4
 80035be:	60fa      	str	r2, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2200      	movs	r2, #0
 80035c4:	4698      	mov	r8, r3
 80035c6:	4691      	mov	r9, r2
 80035c8:	4642      	mov	r2, r8
 80035ca:	464b      	mov	r3, r9
 80035cc:	6978      	ldr	r0, [r7, #20]
 80035ce:	f7ff fced 	bl	8002fac <itoa10Unsigned>
 80035d2:	4602      	mov	r2, r0
 80035d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d6:	4413      	add	r3, r2
 80035d8:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 80035da:	e0d6      	b.n	800378a <evprintf+0x372>
        case 'x':
        case 'X':
          len += itoa16(putcf, va_arg(ap, unsigned int), width, padChar);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1d1a      	adds	r2, r3, #4
 80035e0:	60fa      	str	r2, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2200      	movs	r2, #0
 80035e6:	469a      	mov	sl, r3
 80035e8:	4693      	mov	fp, r2
 80035ea:	7efb      	ldrb	r3, [r7, #27]
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	4652      	mov	r2, sl
 80035f4:	465b      	mov	r3, fp
 80035f6:	6978      	ldr	r0, [r7, #20]
 80035f8:	f7ff fd98 	bl	800312c <itoa16>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003600:	4413      	add	r3, r2
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8003604:	e0c1      	b.n	800378a <evprintf+0x372>
        case 'l':
          // Look ahead for ll
          if (*fmt == 'l') {
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b6c      	cmp	r3, #108	; 0x6c
 800360c:	d11a      	bne.n	8003644 <evprintf+0x22c>
            fmt++;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	3301      	adds	r3, #1
 8003612:	613b      	str	r3, [r7, #16]
            len += handleLongLong(putcf, &fmt, va_arg(ap, unsigned long long int), width, padChar);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3307      	adds	r3, #7
 8003618:	f023 0307 	bic.w	r3, r3, #7
 800361c:	f103 0208 	add.w	r2, r3, #8
 8003620:	60fa      	str	r2, [r7, #12]
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	f107 0010 	add.w	r0, r7, #16
 800362a:	7ef9      	ldrb	r1, [r7, #27]
 800362c:	9101      	str	r1, [sp, #4]
 800362e:	69f9      	ldr	r1, [r7, #28]
 8003630:	9100      	str	r1, [sp, #0]
 8003632:	4601      	mov	r1, r0
 8003634:	6978      	ldr	r0, [r7, #20]
 8003636:	f7ff fded 	bl	8003214 <handleLongLong>
 800363a:	4602      	mov	r2, r0
 800363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363e:	4413      	add	r3, r2
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
          } else {
            len += handleLong(putcf, &fmt, va_arg(ap, unsigned long int), width, padChar);
          }

          break;
 8003642:	e0a2      	b.n	800378a <evprintf+0x372>
            len += handleLong(putcf, &fmt, va_arg(ap, unsigned long int), width, padChar);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1d1a      	adds	r2, r3, #4
 8003648:	60fa      	str	r2, [r7, #12]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	f107 0110 	add.w	r1, r7, #16
 8003650:	7efb      	ldrb	r3, [r7, #27]
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	6978      	ldr	r0, [r7, #20]
 8003658:	f7ff fe56 	bl	8003308 <handleLong>
 800365c:	4602      	mov	r2, r0
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	4413      	add	r3, r2
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8003664:	e091      	b.n	800378a <evprintf+0x372>
        case 'f':
          num = va_arg(ap, double);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	3307      	adds	r3, #7
 800366a:	f023 0307 	bic.w	r3, r3, #7
 800366e:	f103 0208 	add.w	r2, r3, #8
 8003672:	60fa      	str	r2, [r7, #12]
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	4610      	mov	r0, r2
 800367a:	4619      	mov	r1, r3
 800367c:	f7fd faa4 	bl	8000bc8 <__aeabi_d2f>
 8003680:	4603      	mov	r3, r0
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
          if(num<0)
 8003684:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003688:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800368c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003690:	d50b      	bpl.n	80036aa <evprintf+0x292>
          {
            putcf('-');
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	202d      	movs	r0, #45	; 0x2d
 8003696:	4798      	blx	r3
            num = -num;
 8003698:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800369c:	eef1 7a67 	vneg.f32	s15, s15
 80036a0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            len++;
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	3301      	adds	r3, #1
 80036a8:	62fb      	str	r3, [r7, #44]	; 0x2c
          }
          len += itoa10(putcf, (int)num, 0);
 80036aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80036ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036b2:	ee17 2a90 	vmov	r2, s15
 80036b6:	17d3      	asrs	r3, r2, #31
 80036b8:	603a      	str	r2, [r7, #0]
 80036ba:	607b      	str	r3, [r7, #4]
 80036bc:	2300      	movs	r3, #0
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036c4:	6978      	ldr	r0, [r7, #20]
 80036c6:	f7ff fce3 	bl	8003090 <itoa10>
 80036ca:	4602      	mov	r2, r0
 80036cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ce:	4413      	add	r3, r2
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
          putcf('.'); len++;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	202e      	movs	r0, #46	; 0x2e
 80036d6:	4798      	blx	r3
 80036d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036da:	3301      	adds	r3, #1
 80036dc:	62fb      	str	r3, [r7, #44]	; 0x2c
          len += itoa10(putcf, (num - (int)num) * power(10,precision), precision);
 80036de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80036e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80036ee:	ee37 8a67 	vsub.f32	s16, s14, s15
 80036f2:	6a39      	ldr	r1, [r7, #32]
 80036f4:	200a      	movs	r0, #10
 80036f6:	f7ff fc3b 	bl	8002f70 <power>
 80036fa:	ee07 0a90 	vmov	s15, r0
 80036fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003702:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003706:	ee17 0a90 	vmov	r0, s15
 800370a:	f7fd fac5 	bl	8000c98 <__aeabi_f2lz>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	6a39      	ldr	r1, [r7, #32]
 8003714:	9100      	str	r1, [sp, #0]
 8003716:	6978      	ldr	r0, [r7, #20]
 8003718:	f7ff fcba 	bl	8003090 <itoa10>
 800371c:	4602      	mov	r2, r0
 800371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003720:	4413      	add	r3, r2
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8003724:	e031      	b.n	800378a <evprintf+0x372>
        case 's':
          str = va_arg(ap, char* );
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1d1a      	adds	r2, r3, #4
 800372a:	60fa      	str	r2, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
          while(*str)
 8003730:	e00a      	b.n	8003748 <evprintf+0x330>
          {
            putcf(*str++);
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	627a      	str	r2, [r7, #36]	; 0x24
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	4610      	mov	r0, r2
 8003740:	4798      	blx	r3
            len++;
 8003742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003744:	3301      	adds	r3, #1
 8003746:	62fb      	str	r3, [r7, #44]	; 0x2c
          while(*str)
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f0      	bne.n	8003732 <evprintf+0x31a>
          }
          break;
 8003750:	e01b      	b.n	800378a <evprintf+0x372>
        case 'c':
          putcf((char)va_arg(ap, int));
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1d1a      	adds	r2, r3, #4
 8003756:	60fa      	str	r2, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	4610      	mov	r0, r2
 8003762:	4798      	blx	r3
          len++;
 8003764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003766:	3301      	adds	r3, #1
 8003768:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 800376a:	e00e      	b.n	800378a <evprintf+0x372>
        default:
          break;
 800376c:	bf00      	nop
 800376e:	e00c      	b.n	800378a <evprintf+0x372>
 8003770:	080165cc 	.word	0x080165cc
      }
    }
    else
    {
      putcf(*fmt++);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	613a      	str	r2, [r7, #16]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	4610      	mov	r0, r2
 8003782:	4798      	blx	r3
      len++;
 8003784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003786:	3301      	adds	r3, #1
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (*fmt)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	f47f ae4e 	bne.w	8003430 <evprintf+0x18>
    }
  }
  
  return len;
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003796:	4618      	mov	r0, r3
 8003798:	3730      	adds	r7, #48	; 0x30
 800379a:	46bd      	mov	sp, r7
 800379c:	ecbd 8b02 	vpop	{d8}
 80037a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080037a4 <eprintf>:

int eprintf(putc_t putcf, const char * fmt, ...)
{
 80037a4:	b40e      	push	{r1, r2, r3}
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b085      	sub	sp, #20
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  va_list ap;
  int len;

  va_start(ap, fmt);
 80037ae:	f107 0320 	add.w	r3, r7, #32
 80037b2:	60bb      	str	r3, [r7, #8]
  len = evprintf(putcf, fmt, ap);
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	69f9      	ldr	r1, [r7, #28]
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff fe2d 	bl	8003418 <evprintf>
 80037be:	60f8      	str	r0, [r7, #12]
  va_end(ap);

  return len;
 80037c0:	68fb      	ldr	r3, [r7, #12]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037cc:	b003      	add	sp, #12
 80037ce:	4770      	bx	lr

080037d0 <queueMonitorInit>:
static int getMaxWaiting(xQueueHandle* xQueue, int prevPeak);
static void resetCounters();

unsigned char ucQueueGetQueueNumber( xQueueHandle xQueue );

void queueMonitorInit() {
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 80037d6:	4b19      	ldr	r3, [pc, #100]	; (800383c <queueMonitorInit+0x6c>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	f083 0301 	eor.w	r3, r3, #1
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d104      	bne.n	80037ee <queueMonitorInit+0x1e>
 80037e4:	2248      	movs	r2, #72	; 0x48
 80037e6:	4916      	ldr	r1, [pc, #88]	; (8003840 <queueMonitorInit+0x70>)
 80037e8:	4816      	ldr	r0, [pc, #88]	; (8003844 <queueMonitorInit+0x74>)
 80037ea:	f7ff fa7b 	bl	8002ce4 <assertFail>
  timer = xTimerCreateStatic( "queueMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 80037ee:	4b16      	ldr	r3, [pc, #88]	; (8003848 <queueMonitorInit+0x78>)
 80037f0:	9301      	str	r3, [sp, #4]
 80037f2:	4b16      	ldr	r3, [pc, #88]	; (800384c <queueMonitorInit+0x7c>)
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	2300      	movs	r3, #0
 80037f8:	2201      	movs	r2, #1
 80037fa:	f242 7110 	movw	r1, #10000	; 0x2710
 80037fe:	4814      	ldr	r0, [pc, #80]	; (8003850 <queueMonitorInit+0x80>)
 8003800:	f00c febe 	bl	8010580 <xTimerCreateStatic>
 8003804:	4603      	mov	r3, r0
 8003806:	4a13      	ldr	r2, [pc, #76]	; (8003854 <queueMonitorInit+0x84>)
 8003808:	6013      	str	r3, [r2, #0]
  xTimerStart(timer, 100);
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <queueMonitorInit+0x84>)
 800380c:	681c      	ldr	r4, [r3, #0]
 800380e:	f00b fee7 	bl	800f5e0 <xTaskGetTickCount>
 8003812:	4602      	mov	r2, r0
 8003814:	2364      	movs	r3, #100	; 0x64
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	2300      	movs	r3, #0
 800381a:	2101      	movs	r1, #1
 800381c:	4620      	mov	r0, r4
 800381e:	f00c ff23 	bl	8010668 <xTimerGenericCommand>

  data[0].fileName = "Na";
 8003822:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <queueMonitorInit+0x88>)
 8003824:	4a0d      	ldr	r2, [pc, #52]	; (800385c <queueMonitorInit+0x8c>)
 8003826:	601a      	str	r2, [r3, #0]
  data[0].queueName = "Na";
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <queueMonitorInit+0x88>)
 800382a:	4a0c      	ldr	r2, [pc, #48]	; (800385c <queueMonitorInit+0x8c>)
 800382c:	605a      	str	r2, [r3, #4]

  initialized = true;
 800382e:	4b03      	ldr	r3, [pc, #12]	; (800383c <queueMonitorInit+0x6c>)
 8003830:	2201      	movs	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
}
 8003834:	bf00      	nop
 8003836:	3704      	adds	r7, #4
 8003838:	46bd      	mov	sp, r7
 800383a:	bd90      	pop	{r4, r7, pc}
 800383c:	200032d0 	.word	0x200032d0
 8003840:	08014fec 	.word	0x08014fec
 8003844:	08015010 	.word	0x08015010
 8003848:	200032a4 	.word	0x200032a4
 800384c:	080039fd 	.word	0x080039fd
 8003850:	08015020 	.word	0x08015020
 8003854:	200032a0 	.word	0x200032a0
 8003858:	20003110 	.word	0x20003110
 800385c:	08015034 	.word	0x08015034

08003860 <qmRegisterQueue>:

    queueData->fullCount++;
  }
}

void qmRegisterQueue(xQueueHandle* xQueue, char* fileName, char* queueName) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  ASSERT(initialized);
 800386c:	4b18      	ldr	r3, [pc, #96]	; (80038d0 <qmRegisterQueue+0x70>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d104      	bne.n	800387e <qmRegisterQueue+0x1e>
 8003874:	2265      	movs	r2, #101	; 0x65
 8003876:	4917      	ldr	r1, [pc, #92]	; (80038d4 <qmRegisterQueue+0x74>)
 8003878:	4817      	ldr	r0, [pc, #92]	; (80038d8 <qmRegisterQueue+0x78>)
 800387a:	f7ff fa33 	bl	8002ce4 <assertFail>
  ASSERT(nrOfQueues < MAX_NR_OF_QUEUES);
 800387e:	4b17      	ldr	r3, [pc, #92]	; (80038dc <qmRegisterQueue+0x7c>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b13      	cmp	r3, #19
 8003884:	d904      	bls.n	8003890 <qmRegisterQueue+0x30>
 8003886:	2266      	movs	r2, #102	; 0x66
 8003888:	4912      	ldr	r1, [pc, #72]	; (80038d4 <qmRegisterQueue+0x74>)
 800388a:	4815      	ldr	r0, [pc, #84]	; (80038e0 <qmRegisterQueue+0x80>)
 800388c:	f7ff fa2a 	bl	8002ce4 <assertFail>
  Data* queueData = &data[nrOfQueues];
 8003890:	4b12      	ldr	r3, [pc, #72]	; (80038dc <qmRegisterQueue+0x7c>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	4613      	mov	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4a11      	ldr	r2, [pc, #68]	; (80038e4 <qmRegisterQueue+0x84>)
 80038a0:	4413      	add	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  queueData->fileName = fileName;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	601a      	str	r2, [r3, #0]
  queueData->queueName = queueName;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	605a      	str	r2, [r3, #4]
  vQueueSetQueueNumber(xQueue, nrOfQueues);
 80038b0:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <qmRegisterQueue+0x7c>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	4619      	mov	r1, r3
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f00b f988 	bl	800ebcc <vQueueSetQueueNumber>

  nrOfQueues++;
 80038bc:	4b07      	ldr	r3, [pc, #28]	; (80038dc <qmRegisterQueue+0x7c>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	3301      	adds	r3, #1
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <qmRegisterQueue+0x7c>)
 80038c6:	701a      	strb	r2, [r3, #0]
}
 80038c8:	bf00      	nop
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	200032d0 	.word	0x200032d0
 80038d4:	08014fec 	.word	0x08014fec
 80038d8:	08015038 	.word	0x08015038
 80038dc:	200002d7 	.word	0x200002d7
 80038e0:	08015044 	.word	0x08015044
 80038e4:	20003110 	.word	0x20003110

080038e8 <debugPrint>:
    return waiting;
  }
  return prevPeak;
}

static void debugPrint() {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
  int i = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 80038f2:	2300      	movs	r3, #0
 80038f4:	607b      	str	r3, [r7, #4]
 80038f6:	e013      	b.n	8003920 <debugPrint+0x38>
    Data* queueData = &data[i];
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4a0d      	ldr	r2, [pc, #52]	; (8003938 <debugPrint+0x50>)
 8003904:	4413      	add	r3, r2
 8003906:	603b      	str	r3, [r7, #0]
    if (filter(queueData)) {
 8003908:	6838      	ldr	r0, [r7, #0]
 800390a:	f000 f819 	bl	8003940 <filter>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <debugPrint+0x32>
      debugPrintQueue(queueData);
 8003914:	6838      	ldr	r0, [r7, #0]
 8003916:	f000 f827 	bl	8003968 <debugPrintQueue>
  for (i = 0; i < nrOfQueues; i++) {
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3301      	adds	r3, #1
 800391e:	607b      	str	r3, [r7, #4]
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <debugPrint+0x54>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4293      	cmp	r3, r2
 800392a:	dbe5      	blt.n	80038f8 <debugPrint+0x10>
    }
  }

  if (RESET_COUNTERS_AFTER_DISPLAY) {
    resetCounters();
 800392c:	f000 f838 	bl	80039a0 <resetCounters>
  }
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20003110 	.word	0x20003110
 800393c:	200002d7 	.word	0x200002d7

08003940 <filter>:

static bool filter(Data* queueData) {
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  bool doDisplay = false;
 8003948:	2300      	movs	r3, #0
 800394a:	73fb      	strb	r3, [r7, #15]
  if (DISPLAY_ONLY_OVERFLOW_QUEUES) {
    doDisplay = (queueData->fullCount != 0);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	bf14      	ite	ne
 8003954:	2301      	movne	r3, #1
 8003956:	2300      	moveq	r3, #0
 8003958:	73fb      	strb	r3, [r7, #15]
  } else {
    doDisplay = true;
  }
  return doDisplay;
 800395a:	7bfb      	ldrb	r3, [r7, #15]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <debugPrintQueue>:

static void debugPrintQueue(Data* queueData) {
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b085      	sub	sp, #20
 800396c:	af02      	add	r7, sp, #8
 800396e:	6078      	str	r0, [r7, #4]
  printf("%s:%s, sent: %i, peak: %i, full: %i\n",queueData->fileName, queueData->queueName, queueData->sendCount,queueData->maxWaiting, queueData->fullCount);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6819      	ldr	r1, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6858      	ldr	r0, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689c      	ldr	r4, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6912      	ldr	r2, [r2, #16]
 8003984:	9201      	str	r2, [sp, #4]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	4623      	mov	r3, r4
 800398a:	4602      	mov	r2, r0
 800398c:	4803      	ldr	r0, [pc, #12]	; (800399c <debugPrintQueue+0x34>)
 800398e:	f00f f881 	bl	8012a94 <iprintf>
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bd90      	pop	{r4, r7, pc}
 800399a:	bf00      	nop
 800399c:	08015080 	.word	0x08015080

080039a0 <resetCounters>:

static void resetCounters() {
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
  int i = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 80039aa:	2300      	movs	r3, #0
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	e013      	b.n	80039d8 <resetCounters+0x38>
    Data* queueData = &data[i];
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4a0e      	ldr	r2, [pc, #56]	; (80039f4 <resetCounters+0x54>)
 80039bc:	4413      	add	r3, r2
 80039be:	603b      	str	r3, [r7, #0]

    queueData->sendCount = 0;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2200      	movs	r2, #0
 80039c4:	609a      	str	r2, [r3, #8]
    queueData->maxWaiting = 0;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2200      	movs	r2, #0
 80039ca:	60da      	str	r2, [r3, #12]
    queueData->fullCount = 0;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2200      	movs	r2, #0
 80039d0:	611a      	str	r2, [r3, #16]
  for (i = 0; i < nrOfQueues; i++) {
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3301      	adds	r3, #1
 80039d6:	607b      	str	r3, [r7, #4]
 80039d8:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <resetCounters+0x58>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4293      	cmp	r3, r2
 80039e2:	dbe5      	blt.n	80039b0 <resetCounters+0x10>
  }
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20003110 	.word	0x20003110
 80039f8:	200002d7 	.word	0x200002d7

080039fc <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  debugPrint();
 8003a04:	f7ff ff70 	bl	80038e8 <debugPrint>
}
 8003a08:	bf00      	nop
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <sysLoadInit>:
static int taskTopIndex = 0;
static uint32_t previousTotalRunTime = 0;

static StaticTimer_t timerBuffer;

void sysLoadInit() {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 8003a16:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <sysLoadInit+0x58>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	f083 0301 	eor.w	r3, r3, #1
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d104      	bne.n	8003a2e <sysLoadInit+0x1e>
 8003a24:	223c      	movs	r2, #60	; 0x3c
 8003a26:	4911      	ldr	r1, [pc, #68]	; (8003a6c <sysLoadInit+0x5c>)
 8003a28:	4811      	ldr	r0, [pc, #68]	; (8003a70 <sysLoadInit+0x60>)
 8003a2a:	f7ff f95b 	bl	8002ce4 <assertFail>

  xTimerHandle timer = xTimerCreateStatic( "sysLoadMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <sysLoadInit+0x64>)
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <sysLoadInit+0x68>)
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	2300      	movs	r3, #0
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a3e:	480f      	ldr	r0, [pc, #60]	; (8003a7c <sysLoadInit+0x6c>)
 8003a40:	f00c fd9e 	bl	8010580 <xTimerCreateStatic>
 8003a44:	6078      	str	r0, [r7, #4]
  xTimerStart(timer, 100);
 8003a46:	f00b fdcb 	bl	800f5e0 <xTaskGetTickCount>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	2364      	movs	r3, #100	; 0x64
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	2300      	movs	r3, #0
 8003a52:	2101      	movs	r1, #1
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f00c fe07 	bl	8010668 <xTimerGenericCommand>

  initialized = true;
 8003a5a:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <sysLoadInit+0x58>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	701a      	strb	r2, [r3, #0]
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	200032d1 	.word	0x200032d1
 8003a6c:	080150a8 	.word	0x080150a8
 8003a70:	080150c4 	.word	0x080150c4
 8003a74:	200032dc 	.word	0x200032dc
 8003a78:	08003b01 	.word	0x08003b01
 8003a7c:	080150d4 	.word	0x080150d4

08003a80 <getPreviousTaskData>:


static taskData_t* getPreviousTaskData(uint32_t xTaskNumber) {
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  // Try to find the task in the list of tasks
  for (int i = 0; i < taskTopIndex; i++) {
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	e00f      	b.n	8003aae <getPreviousTaskData+0x2e>
    if (previousSnapshot[i].xTaskNumber == xTaskNumber) {
 8003a8e:	4a18      	ldr	r2, [pc, #96]	; (8003af0 <getPreviousTaskData+0x70>)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d104      	bne.n	8003aa8 <getPreviousTaskData+0x28>
      return &previousSnapshot[i];
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4a13      	ldr	r2, [pc, #76]	; (8003af0 <getPreviousTaskData+0x70>)
 8003aa4:	4413      	add	r3, r2
 8003aa6:	e01f      	b.n	8003ae8 <getPreviousTaskData+0x68>
  for (int i = 0; i < taskTopIndex; i++) {
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	4b11      	ldr	r3, [pc, #68]	; (8003af4 <getPreviousTaskData+0x74>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	dbea      	blt.n	8003a8e <getPreviousTaskData+0xe>
    }
  }

  // Allocate a new entry
  ASSERT(taskTopIndex < TASK_MAX_COUNT);
 8003ab8:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <getPreviousTaskData+0x74>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b1f      	cmp	r3, #31
 8003abe:	dd04      	ble.n	8003aca <getPreviousTaskData+0x4a>
 8003ac0:	224e      	movs	r2, #78	; 0x4e
 8003ac2:	490d      	ldr	r1, [pc, #52]	; (8003af8 <getPreviousTaskData+0x78>)
 8003ac4:	480d      	ldr	r0, [pc, #52]	; (8003afc <getPreviousTaskData+0x7c>)
 8003ac6:	f7ff f90d 	bl	8002ce4 <assertFail>
  taskData_t* result = &previousSnapshot[taskTopIndex];
 8003aca:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <getPreviousTaskData+0x74>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4a07      	ldr	r2, [pc, #28]	; (8003af0 <getPreviousTaskData+0x70>)
 8003ad2:	4413      	add	r3, r2
 8003ad4:	60bb      	str	r3, [r7, #8]
  result->xTaskNumber = xTaskNumber;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	605a      	str	r2, [r3, #4]

  taskTopIndex++;
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <getPreviousTaskData+0x74>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	4a04      	ldr	r2, [pc, #16]	; (8003af4 <getPreviousTaskData+0x74>)
 8003ae4:	6013      	str	r3, [r2, #0]

  return result;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	20001b98 	.word	0x20001b98
 8003af4:	200032d4 	.word	0x200032d4
 8003af8:	080150a8 	.word	0x080150a8
 8003afc:	080150e8 	.word	0x080150e8

08003b00 <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8003b06:	af02      	add	r7, sp, #8
 8003b08:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003b0c:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003b10:	6018      	str	r0, [r3, #0]
  if (triggerDump != 0) {
 8003b12:	4b4e      	ldr	r3, [pc, #312]	; (8003c4c <timerHandler+0x14c>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 8092 	beq.w	8003c40 <timerHandler+0x140>
    uint32_t totalRunTime;

    TaskStatus_t taskStats[TASK_MAX_COUNT];
    uint32_t taskCount = uxTaskGetSystemState(taskStats, TASK_MAX_COUNT, &totalRunTime);
 8003b1c:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 8003b20:	f107 030c 	add.w	r3, r7, #12
 8003b24:	2120      	movs	r1, #32
 8003b26:	4618      	mov	r0, r3
 8003b28:	f00b fd6a 	bl	800f600 <uxTaskGetSystemState>
 8003b2c:	f8c7 04a8 	str.w	r0, [r7, #1192]	; 0x4a8
    ASSERT(taskCount < TASK_MAX_COUNT);
 8003b30:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8003b34:	2b1f      	cmp	r3, #31
 8003b36:	d904      	bls.n	8003b42 <timerHandler+0x42>
 8003b38:	225d      	movs	r2, #93	; 0x5d
 8003b3a:	4945      	ldr	r1, [pc, #276]	; (8003c50 <timerHandler+0x150>)
 8003b3c:	4845      	ldr	r0, [pc, #276]	; (8003c54 <timerHandler+0x154>)
 8003b3e:	f7ff f8d1 	bl	8002ce4 <assertFail>

    uint32_t totalDelta = totalRunTime - previousTotalRunTime;
 8003b42:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 8003b46:	4b44      	ldr	r3, [pc, #272]	; (8003c58 <timerHandler+0x158>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
    float f = 100.0 / totalDelta;
 8003b50:	f8d7 04a4 	ldr.w	r0, [r7, #1188]	; 0x4a4
 8003b54:	f7fc fce6 	bl	8000524 <__aeabi_ui2d>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	f04f 0000 	mov.w	r0, #0
 8003b60:	493e      	ldr	r1, [pc, #248]	; (8003c5c <timerHandler+0x15c>)
 8003b62:	f7fc fe83 	bl	800086c <__aeabi_ddiv>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	f7fd f82b 	bl	8000bc8 <__aeabi_d2f>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8003b78:	6013      	str	r3, [r2, #0]

    // Dumps the the CPU load and stack usage for all tasks
    // CPU usage is since last dump in % compared to total time spent in tasks. Note that time spent in interrupts will be included in measured time.
    // Stack usage is displayed as nr of unused bytes at peak stack usage.

    DEBUG_PRINT("Task dump\n");
 8003b7a:	4939      	ldr	r1, [pc, #228]	; (8003c60 <timerHandler+0x160>)
 8003b7c:	4839      	ldr	r0, [pc, #228]	; (8003c64 <timerHandler+0x164>)
 8003b7e:	f7ff fe11 	bl	80037a4 <eprintf>
    DEBUG_PRINT("Load\tStack left\tName\n");
 8003b82:	4939      	ldr	r1, [pc, #228]	; (8003c68 <timerHandler+0x168>)
 8003b84:	4837      	ldr	r0, [pc, #220]	; (8003c64 <timerHandler+0x164>)
 8003b86:	f7ff fe0d 	bl	80037a4 <eprintf>
    for (uint32_t i = 0; i < taskCount; i++) {
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8003b90:	e049      	b.n	8003c26 <timerHandler+0x126>
      TaskStatus_t* stats = &taskStats[i];
 8003b92:	f107 010c 	add.w	r1, r7, #12
 8003b96:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      taskData_t* previousTaskData = getPreviousTaskData(stats->xTaskNumber);
 8003ba8:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff ff66 	bl	8003a80 <getPreviousTaskData>
 8003bb4:	f8c7 0498 	str.w	r0, [r7, #1176]	; 0x498

      uint32_t taskRunTime = stats->ulRunTimeCounter;
 8003bb8:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
      float load = f * (taskRunTime - previousTaskData->ulRunTimeCounter);
 8003bc2:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd6:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8003bda:	ed93 7a00 	vldr	s14, [r3]
 8003bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be2:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003be6:	edc3 7a00 	vstr	s15, [r3]
      DEBUG_PRINT("%.2f \t%u \t%s\n", (double)load, stats->usStackHighWaterMark, stats->pcTaskName);
 8003bea:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	f7fc fcba 	bl	8000568 <__aeabi_f2d>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 8003bfc:	8c09      	ldrh	r1, [r1, #32]
 8003bfe:	4608      	mov	r0, r1
 8003c00:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 8003c04:	6849      	ldr	r1, [r1, #4]
 8003c06:	9101      	str	r1, [sp, #4]
 8003c08:	9000      	str	r0, [sp, #0]
 8003c0a:	4918      	ldr	r1, [pc, #96]	; (8003c6c <timerHandler+0x16c>)
 8003c0c:	4815      	ldr	r0, [pc, #84]	; (8003c64 <timerHandler+0x164>)
 8003c0e:	f7ff fdc9 	bl	80037a4 <eprintf>

      previousTaskData->ulRunTimeCounter = taskRunTime;
 8003c12:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8003c16:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 8003c1a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < taskCount; i++) {
 8003c1c:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 8003c20:	3301      	adds	r3, #1
 8003c22:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8003c26:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 8003c2a:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d3af      	bcc.n	8003b92 <timerHandler+0x92>
    }

    previousTotalRunTime = totalRunTime;
 8003c32:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8003c36:	4a08      	ldr	r2, [pc, #32]	; (8003c58 <timerHandler+0x158>)
 8003c38:	6013      	str	r3, [r2, #0]

    triggerDump = 0;
 8003c3a:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <timerHandler+0x14c>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	701a      	strb	r2, [r3, #0]
  }
}
 8003c40:	bf00      	nop
 8003c42:	f507 6796 	add.w	r7, r7, #1200	; 0x4b0
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200032d2 	.word	0x200032d2
 8003c50:	080150a8 	.word	0x080150a8
 8003c54:	08015108 	.word	0x08015108
 8003c58:	200032d8 	.word	0x200032d8
 8003c5c:	40590000 	.word	0x40590000
 8003c60:	08015124 	.word	0x08015124
 8003c64:	08002f15 	.word	0x08002f15
 8003c68:	08015138 	.word	0x08015138
 8003c6c:	08015158 	.word	0x08015158

08003c70 <workerInit>:

static xQueueHandle workerQueue;
STATIC_MEM_QUEUE_ALLOC(workerQueue, WORKER_QUEUE_LENGTH, sizeof(struct worker_work));

void workerInit()
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af02      	add	r7, sp, #8
  if (workerQueue)
 8003c76:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <workerInit+0x40>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d114      	bne.n	8003ca8 <workerInit+0x38>
    return;

  workerQueue = STATIC_MEM_QUEUE_CREATE(workerQueue);
 8003c7e:	2305      	movs	r3, #5
 8003c80:	4618      	mov	r0, r3
 8003c82:	2308      	movs	r3, #8
 8003c84:	4619      	mov	r1, r3
 8003c86:	2300      	movs	r3, #0
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <workerInit+0x44>)
 8003c8c:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <workerInit+0x48>)
 8003c8e:	f00a f9fd 	bl	800e08c <xQueueGenericCreateStatic>
 8003c92:	4603      	mov	r3, r0
 8003c94:	4a06      	ldr	r2, [pc, #24]	; (8003cb0 <workerInit+0x40>)
 8003c96:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(workerQueue);
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <workerInit+0x40>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a07      	ldr	r2, [pc, #28]	; (8003cbc <workerInit+0x4c>)
 8003c9e:	4908      	ldr	r1, [pc, #32]	; (8003cc0 <workerInit+0x50>)
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff fddd 	bl	8003860 <qmRegisterQueue>
 8003ca6:	e000      	b.n	8003caa <workerInit+0x3a>
    return;
 8003ca8:	bf00      	nop
}
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20003308 	.word	0x20003308
 8003cb4:	20001cc0 	.word	0x20001cc0
 8003cb8:	20001c98 	.word	0x20001c98
 8003cbc:	080151f8 	.word	0x080151f8
 8003cc0:	08015204 	.word	0x08015204

08003cc4 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0

}
 8003cc8:	bf00      	nop
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	af00      	add	r7, sp, #0
return 0;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4a07      	ldr	r2, [pc, #28]	; (8003d24 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	4a06      	ldr	r2, [pc, #24]	; (8003d28 <vApplicationGetIdleTaskMemory+0x30>)
 8003d0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2280      	movs	r2, #128	; 0x80
 8003d14:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003d16:	bf00      	nop
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	2000330c 	.word	0x2000330c
 8003d28:	200033c4 	.word	0x200033c4

08003d2c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4a07      	ldr	r2, [pc, #28]	; (8003d58 <vApplicationGetTimerTaskMemory+0x2c>)
 8003d3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4a06      	ldr	r2, [pc, #24]	; (8003d5c <vApplicationGetTimerTaskMemory+0x30>)
 8003d42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d4a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003d4c:	bf00      	nop
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	200035c4 	.word	0x200035c4
 8003d5c:	2000367c 	.word	0x2000367c

08003d60 <LL_SPI_SetStandard>:
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f023 0210 	bic.w	r2, r3, #16
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	605a      	str	r2, [r3, #4]
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <LL_AHB1_GRP1_EnableClock>:
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003d90:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d94:	4907      	ldr	r1, [pc, #28]	; (8003db4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4013      	ands	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003da6:	68fb      	ldr	r3, [r7, #12]
}
 8003da8:	bf00      	nop
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	40023800 	.word	0x40023800

08003db8 <LL_APB2_GRP1_EnableClock>:
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003dc0:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003dc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dc4:	4907      	ldr	r1, [pc, #28]	; (8003de4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003dcc:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003dce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	40023800 	.word	0x40023800

08003de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003de8:	b5b0      	push	{r4, r5, r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003dee:	f001 f84f 	bl	8004e90 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003df2:	f000 f877 	bl	8003ee4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003df6:	f000 fad9 	bl	80043ac <MX_GPIO_Init>
  MX_DMA_Init();
 8003dfa:	f000 faa7 	bl	800434c <MX_DMA_Init>
  MX_USART6_UART_Init();
 8003dfe:	f000 fa7b 	bl	80042f8 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 8003e02:	f000 fa43 	bl	800428c <MX_TIM7_Init>
  MX_SPI1_Init();
 8003e06:	f000 f979 	bl	80040fc <MX_SPI1_Init>
  MX_ADC1_Init();
 8003e0a:	f000 f8d3 	bl	8003fb4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003e0e:	f000 f923 	bl	8004058 <MX_ADC2_Init>
  MX_TIM3_Init();
 8003e12:	f000 f9c5 	bl	80041a0 <MX_TIM3_Init>
*/


//  InitTick(72000000, 1000000U);			//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8003e16:	4b29      	ldr	r3, [pc, #164]	; (8003ebc <main+0xd4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	4b27      	ldr	r3, [pc, #156]	; (8003ebc <main+0xd4>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f042 0220 	orr.w	r2, r2, #32
 8003e24:	60da      	str	r2, [r3, #12]

  freertos_IntroTitle();
 8003e26:	f000 fb4d 	bl	80044c4 <freertos_IntroTitle>



  check_enter_bootloader();
 8003e2a:	f7fd fcb3 	bl	8001794 <check_enter_bootloader>

  int err = platformInit();
 8003e2e:	f7fe fe46 	bl	8002abe <platformInit>
 8003e32:	61f8      	str	r0, [r7, #28]
  if (err != 0) {
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d000      	beq.n	8003e3c <main+0x54>
  	    // The firmware is running on the wrong hardware. Halt
  	    while(1);
 8003e3a:	e7fe      	b.n	8003e3a <main+0x52>
  }

  HAL_TIM_Base_Start_IT(&htim7);
 8003e3c:	4820      	ldr	r0, [pc, #128]	; (8003ec0 <main+0xd8>)
 8003e3e:	f004 fad1 	bl	80083e4 <HAL_TIM_Base_Start_IT>
  t1 = DWT->CYCCNT;
 8003e42:	4b20      	ldr	r3, [pc, #128]	; (8003ec4 <main+0xdc>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	4a20      	ldr	r2, [pc, #128]	; (8003ec8 <main+0xe0>)
 8003e48:	6013      	str	r3, [r2, #0]
//  vTaskDelay(M2T(2000));
  delay_us(1000);	// 1002 us
 8003e4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e4e:	f000 fbc7 	bl	80045e0 <delay_us>
//  vTaskDelay(1);	// 입력값에 상관없이 약 7us, 정상적인 동작 안됨
//  usDelay(10);
//  HAL_Delay(1);		// 1350 us
  t2 = DWT->CYCCNT;
 8003e52:	4b1c      	ldr	r3, [pc, #112]	; (8003ec4 <main+0xdc>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	4a1d      	ldr	r2, [pc, #116]	; (8003ecc <main+0xe4>)
 8003e58:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Stop_IT(&htim7);
 8003e5a:	4819      	ldr	r0, [pc, #100]	; (8003ec0 <main+0xd8>)
 8003e5c:	f004 fb32 	bl	80084c4 <HAL_TIM_Base_Stop_IT>
  DEBUG_PRINT("delay = %.2f(us)\n",(float)(t2-t1)/CLOCK_PER_USEC);
 8003e60:	4b1a      	ldr	r3, [pc, #104]	; (8003ecc <main+0xe4>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4b18      	ldr	r3, [pc, #96]	; (8003ec8 <main+0xe0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e72:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003ed0 <main+0xe8>
 8003e76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003e7a:	ee16 0a90 	vmov	r0, s13
 8003e7e:	f7fc fb73 	bl	8000568 <__aeabi_f2d>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4913      	ldr	r1, [pc, #76]	; (8003ed4 <main+0xec>)
 8003e88:	4813      	ldr	r0, [pc, #76]	; (8003ed8 <main+0xf0>)
 8003e8a:	f7ff fc8b 	bl	80037a4 <eprintf>

	  DEBUG_PRINT("ADC Measure - Current:[%04d]\t Voltage:[%04d]\n", adc1Val, adc2Val);
	  delay_us(1000);
  }
*/
  systemLaunch();
 8003e8e:	f7fe fafb 	bl	8002488 <systemLaunch>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003e92:	4b12      	ldr	r3, [pc, #72]	; (8003edc <main+0xf4>)
 8003e94:	463c      	mov	r4, r7
 8003e96:	461d      	mov	r5, r3
 8003e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ea0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003ea4:	463b      	mov	r3, r7
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f009 ff6c 	bl	800dd86 <osThreadCreate>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4a0b      	ldr	r2, [pc, #44]	; (8003ee0 <main+0xf8>)
 8003eb2:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003eb4:	f009 ff60 	bl	800dd78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003eb8:	e7fe      	b.n	8003eb8 <main+0xd0>
 8003eba:	bf00      	nop
 8003ebc:	2000405c 	.word	0x2000405c
 8003ec0:	20004014 	.word	0x20004014
 8003ec4:	e0001000 	.word	0xe0001000
 8003ec8:	20004108 	.word	0x20004108
 8003ecc:	2000410c 	.word	0x2000410c
 8003ed0:	42900000 	.word	0x42900000
 8003ed4:	08015220 	.word	0x08015220
 8003ed8:	08002f15 	.word	0x08002f15
 8003edc:	08015240 	.word	0x08015240
 8003ee0:	20004104 	.word	0x20004104

08003ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b094      	sub	sp, #80	; 0x50
 8003ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003eea:	f107 0320 	add.w	r3, r7, #32
 8003eee:	2230      	movs	r2, #48	; 0x30
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f00e fec0 	bl	8012c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ef8:	f107 030c 	add.w	r3, r7, #12
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	605a      	str	r2, [r3, #4]
 8003f02:	609a      	str	r2, [r3, #8]
 8003f04:	60da      	str	r2, [r3, #12]
 8003f06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	4b27      	ldr	r3, [pc, #156]	; (8003fac <SystemClock_Config+0xc8>)
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	4a26      	ldr	r2, [pc, #152]	; (8003fac <SystemClock_Config+0xc8>)
 8003f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f16:	6413      	str	r3, [r2, #64]	; 0x40
 8003f18:	4b24      	ldr	r3, [pc, #144]	; (8003fac <SystemClock_Config+0xc8>)
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f24:	2300      	movs	r3, #0
 8003f26:	607b      	str	r3, [r7, #4]
 8003f28:	4b21      	ldr	r3, [pc, #132]	; (8003fb0 <SystemClock_Config+0xcc>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a20      	ldr	r2, [pc, #128]	; (8003fb0 <SystemClock_Config+0xcc>)
 8003f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	4b1e      	ldr	r3, [pc, #120]	; (8003fb0 <SystemClock_Config+0xcc>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f3c:	607b      	str	r3, [r7, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f40:	2301      	movs	r3, #1
 8003f42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003f54:	2304      	movs	r3, #4
 8003f56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003f58:	2348      	movs	r3, #72	; 0x48
 8003f5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003f60:	2303      	movs	r3, #3
 8003f62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f64:	f107 0320 	add.w	r3, r7, #32
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f003 fd53 	bl	8007a14 <HAL_RCC_OscConfig>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003f74:	f000 fb62 	bl	800463c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f78:	230f      	movs	r3, #15
 8003f7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003f8e:	f107 030c 	add.w	r3, r7, #12
 8003f92:	2102      	movs	r1, #2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f003 ffb5 	bl	8007f04 <HAL_RCC_ClockConfig>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003fa0:	f000 fb4c 	bl	800463c <Error_Handler>
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	3750      	adds	r7, #80	; 0x50
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	40007000 	.word	0x40007000

08003fb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003fba:	463b      	mov	r3, r7
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	605a      	str	r2, [r3, #4]
 8003fc2:	609a      	str	r2, [r3, #8]
 8003fc4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003fc6:	4b21      	ldr	r3, [pc, #132]	; (800404c <MX_ADC1_Init+0x98>)
 8003fc8:	4a21      	ldr	r2, [pc, #132]	; (8004050 <MX_ADC1_Init+0x9c>)
 8003fca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003fcc:	4b1f      	ldr	r3, [pc, #124]	; (800404c <MX_ADC1_Init+0x98>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003fd2:	4b1e      	ldr	r3, [pc, #120]	; (800404c <MX_ADC1_Init+0x98>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003fd8:	4b1c      	ldr	r3, [pc, #112]	; (800404c <MX_ADC1_Init+0x98>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003fde:	4b1b      	ldr	r3, [pc, #108]	; (800404c <MX_ADC1_Init+0x98>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003fe4:	4b19      	ldr	r3, [pc, #100]	; (800404c <MX_ADC1_Init+0x98>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003fec:	4b17      	ldr	r3, [pc, #92]	; (800404c <MX_ADC1_Init+0x98>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ff2:	4b16      	ldr	r3, [pc, #88]	; (800404c <MX_ADC1_Init+0x98>)
 8003ff4:	4a17      	ldr	r2, [pc, #92]	; (8004054 <MX_ADC1_Init+0xa0>)
 8003ff6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ff8:	4b14      	ldr	r3, [pc, #80]	; (800404c <MX_ADC1_Init+0x98>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003ffe:	4b13      	ldr	r3, [pc, #76]	; (800404c <MX_ADC1_Init+0x98>)
 8004000:	2201      	movs	r2, #1
 8004002:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004004:	4b11      	ldr	r3, [pc, #68]	; (800404c <MX_ADC1_Init+0x98>)
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800400c:	4b0f      	ldr	r3, [pc, #60]	; (800404c <MX_ADC1_Init+0x98>)
 800400e:	2201      	movs	r2, #1
 8004010:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004012:	480e      	ldr	r0, [pc, #56]	; (800404c <MX_ADC1_Init+0x98>)
 8004014:	f000 ffd2 	bl	8004fbc <HAL_ADC_Init>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800401e:	f000 fb0d 	bl	800463c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004022:	230b      	movs	r3, #11
 8004024:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004026:	2301      	movs	r3, #1
 8004028:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800402a:	2307      	movs	r3, #7
 800402c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800402e:	463b      	mov	r3, r7
 8004030:	4619      	mov	r1, r3
 8004032:	4806      	ldr	r0, [pc, #24]	; (800404c <MX_ADC1_Init+0x98>)
 8004034:	f001 f934 	bl	80052a0 <HAL_ADC_ConfigChannel>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800403e:	f000 fafd 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20003e7c 	.word	0x20003e7c
 8004050:	40012000 	.word	0x40012000
 8004054:	0f000001 	.word	0x0f000001

08004058 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800405e:	463b      	mov	r3, r7
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	609a      	str	r2, [r3, #8]
 8004068:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800406a:	4b21      	ldr	r3, [pc, #132]	; (80040f0 <MX_ADC2_Init+0x98>)
 800406c:	4a21      	ldr	r2, [pc, #132]	; (80040f4 <MX_ADC2_Init+0x9c>)
 800406e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004070:	4b1f      	ldr	r3, [pc, #124]	; (80040f0 <MX_ADC2_Init+0x98>)
 8004072:	2200      	movs	r2, #0
 8004074:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004076:	4b1e      	ldr	r3, [pc, #120]	; (80040f0 <MX_ADC2_Init+0x98>)
 8004078:	2200      	movs	r2, #0
 800407a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800407c:	4b1c      	ldr	r3, [pc, #112]	; (80040f0 <MX_ADC2_Init+0x98>)
 800407e:	2200      	movs	r2, #0
 8004080:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004082:	4b1b      	ldr	r3, [pc, #108]	; (80040f0 <MX_ADC2_Init+0x98>)
 8004084:	2201      	movs	r2, #1
 8004086:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004088:	4b19      	ldr	r3, [pc, #100]	; (80040f0 <MX_ADC2_Init+0x98>)
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004090:	4b17      	ldr	r3, [pc, #92]	; (80040f0 <MX_ADC2_Init+0x98>)
 8004092:	2200      	movs	r2, #0
 8004094:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004096:	4b16      	ldr	r3, [pc, #88]	; (80040f0 <MX_ADC2_Init+0x98>)
 8004098:	4a17      	ldr	r2, [pc, #92]	; (80040f8 <MX_ADC2_Init+0xa0>)
 800409a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800409c:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <MX_ADC2_Init+0x98>)
 800409e:	2200      	movs	r2, #0
 80040a0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80040a2:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <MX_ADC2_Init+0x98>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80040a8:	4b11      	ldr	r3, [pc, #68]	; (80040f0 <MX_ADC2_Init+0x98>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040b0:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <MX_ADC2_Init+0x98>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80040b6:	480e      	ldr	r0, [pc, #56]	; (80040f0 <MX_ADC2_Init+0x98>)
 80040b8:	f000 ff80 	bl	8004fbc <HAL_ADC_Init>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80040c2:	f000 fabb 	bl	800463c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80040c6:	230c      	movs	r3, #12
 80040c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80040ca:	2301      	movs	r3, #1
 80040cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80040ce:	2307      	movs	r3, #7
 80040d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040d2:	463b      	mov	r3, r7
 80040d4:	4619      	mov	r1, r3
 80040d6:	4806      	ldr	r0, [pc, #24]	; (80040f0 <MX_ADC2_Init+0x98>)
 80040d8:	f001 f8e2 	bl	80052a0 <HAL_ADC_ConfigChannel>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80040e2:	f000 faab 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20003ec4 	.word	0x20003ec4
 80040f4:	40012100 	.word	0x40012100
 80040f8:	0f000001 	.word	0x0f000001

080040fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b090      	sub	sp, #64	; 0x40
 8004100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004102:	f107 0318 	add.w	r3, r7, #24
 8004106:	2228      	movs	r2, #40	; 0x28
 8004108:	2100      	movs	r1, #0
 800410a:	4618      	mov	r0, r3
 800410c:	f00e fdb4 	bl	8012c78 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004110:	463b      	mov	r3, r7
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	605a      	str	r2, [r3, #4]
 8004118:	609a      	str	r2, [r3, #8]
 800411a:	60da      	str	r2, [r3, #12]
 800411c:	611a      	str	r2, [r3, #16]
 800411e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8004120:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004124:	f7ff fe48 	bl	8003db8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004128:	2001      	movs	r0, #1
 800412a:	f7ff fe2d 	bl	8003d88 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800412e:	23e0      	movs	r3, #224	; 0xe0
 8004130:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004132:	2302      	movs	r3, #2
 8004134:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004136:	2303      	movs	r3, #3
 8004138:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800413e:	2300      	movs	r3, #0
 8004140:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004142:	2305      	movs	r3, #5
 8004144:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004146:	463b      	mov	r3, r7
 8004148:	4619      	mov	r1, r3
 800414a:	4813      	ldr	r0, [pc, #76]	; (8004198 <MX_SPI1_Init+0x9c>)
 800414c:	f006 fa3b 	bl	800a5c6 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004150:	2300      	movs	r3, #0
 8004152:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004154:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004158:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800415a:	2300      	movs	r3, #0
 800415c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800415e:	2302      	movs	r3, #2
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004162:	2301      	movs	r3, #1
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800416a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800416c:	2310      	movs	r3, #16
 800416e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004170:	2300      	movs	r3, #0
 8004172:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004174:	2300      	movs	r3, #0
 8004176:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8004178:	230a      	movs	r3, #10
 800417a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800417c:	f107 0318 	add.w	r3, r7, #24
 8004180:	4619      	mov	r1, r3
 8004182:	4806      	ldr	r0, [pc, #24]	; (800419c <MX_SPI1_Init+0xa0>)
 8004184:	f006 fac3 	bl	800a70e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8004188:	2100      	movs	r1, #0
 800418a:	4804      	ldr	r0, [pc, #16]	; (800419c <MX_SPI1_Init+0xa0>)
 800418c:	f7ff fde8 	bl	8003d60 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004190:	bf00      	nop
 8004192:	3740      	adds	r7, #64	; 0x40
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40020000 	.word	0x40020000
 800419c:	40013000 	.word	0x40013000

080041a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08e      	sub	sp, #56	; 0x38
 80041a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	605a      	str	r2, [r3, #4]
 80041b0:	609a      	str	r2, [r3, #8]
 80041b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041b4:	f107 0320 	add.w	r3, r7, #32
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041be:	1d3b      	adds	r3, r7, #4
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	605a      	str	r2, [r3, #4]
 80041c6:	609a      	str	r2, [r3, #8]
 80041c8:	60da      	str	r2, [r3, #12]
 80041ca:	611a      	str	r2, [r3, #16]
 80041cc:	615a      	str	r2, [r3, #20]
 80041ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80041d0:	4b2c      	ldr	r3, [pc, #176]	; (8004284 <MX_TIM3_Init+0xe4>)
 80041d2:	4a2d      	ldr	r2, [pc, #180]	; (8004288 <MX_TIM3_Init+0xe8>)
 80041d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 80041d6:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <MX_TIM3_Init+0xe4>)
 80041d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80041dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041de:	4b29      	ldr	r3, [pc, #164]	; (8004284 <MX_TIM3_Init+0xe4>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 71;
 80041e4:	4b27      	ldr	r3, [pc, #156]	; (8004284 <MX_TIM3_Init+0xe4>)
 80041e6:	2247      	movs	r2, #71	; 0x47
 80041e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041ea:	4b26      	ldr	r3, [pc, #152]	; (8004284 <MX_TIM3_Init+0xe4>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041f0:	4b24      	ldr	r3, [pc, #144]	; (8004284 <MX_TIM3_Init+0xe4>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80041f6:	4823      	ldr	r0, [pc, #140]	; (8004284 <MX_TIM3_Init+0xe4>)
 80041f8:	f004 f8a4 	bl	8008344 <HAL_TIM_Base_Init>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004202:	f000 fa1b 	bl	800463c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800420c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004210:	4619      	mov	r1, r3
 8004212:	481c      	ldr	r0, [pc, #112]	; (8004284 <MX_TIM3_Init+0xe4>)
 8004214:	f004 fcc8 	bl	8008ba8 <HAL_TIM_ConfigClockSource>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800421e:	f000 fa0d 	bl	800463c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004222:	4818      	ldr	r0, [pc, #96]	; (8004284 <MX_TIM3_Init+0xe4>)
 8004224:	f004 f97d 	bl	8008522 <HAL_TIM_PWM_Init>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800422e:	f000 fa05 	bl	800463c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004232:	2300      	movs	r3, #0
 8004234:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004236:	2300      	movs	r3, #0
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800423a:	f107 0320 	add.w	r3, r7, #32
 800423e:	4619      	mov	r1, r3
 8004240:	4810      	ldr	r0, [pc, #64]	; (8004284 <MX_TIM3_Init+0xe4>)
 8004242:	f005 f8c7 	bl	80093d4 <HAL_TIMEx_MasterConfigSynchronization>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800424c:	f000 f9f6 	bl	800463c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004250:	2360      	movs	r3, #96	; 0x60
 8004252:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 36;
 8004254:	2324      	movs	r3, #36	; 0x24
 8004256:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004260:	1d3b      	adds	r3, r7, #4
 8004262:	2200      	movs	r2, #0
 8004264:	4619      	mov	r1, r3
 8004266:	4807      	ldr	r0, [pc, #28]	; (8004284 <MX_TIM3_Init+0xe4>)
 8004268:	f004 fbdc 	bl	8008a24 <HAL_TIM_PWM_ConfigChannel>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004272:	f000 f9e3 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004276:	4803      	ldr	r0, [pc, #12]	; (8004284 <MX_TIM3_Init+0xe4>)
 8004278:	f000 fb34 	bl	80048e4 <HAL_TIM_MspPostInit>

}
 800427c:	bf00      	nop
 800427e:	3738      	adds	r7, #56	; 0x38
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20003fcc 	.word	0x20003fcc
 8004288:	40000400 	.word	0x40000400

0800428c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004292:	463b      	mov	r3, r7
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800429a:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <MX_TIM7_Init+0x64>)
 800429c:	4a15      	ldr	r2, [pc, #84]	; (80042f4 <MX_TIM7_Init+0x68>)
 800429e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 80042a0:	4b13      	ldr	r3, [pc, #76]	; (80042f0 <MX_TIM7_Init+0x64>)
 80042a2:	2247      	movs	r2, #71	; 0x47
 80042a4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042a6:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <MX_TIM7_Init+0x64>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80042ac:	4b10      	ldr	r3, [pc, #64]	; (80042f0 <MX_TIM7_Init+0x64>)
 80042ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042b2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042b4:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <MX_TIM7_Init+0x64>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80042ba:	480d      	ldr	r0, [pc, #52]	; (80042f0 <MX_TIM7_Init+0x64>)
 80042bc:	f004 f842 	bl	8008344 <HAL_TIM_Base_Init>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80042c6:	f000 f9b9 	bl	800463c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042ca:	2300      	movs	r3, #0
 80042cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80042d2:	463b      	mov	r3, r7
 80042d4:	4619      	mov	r1, r3
 80042d6:	4806      	ldr	r0, [pc, #24]	; (80042f0 <MX_TIM7_Init+0x64>)
 80042d8:	f005 f87c 	bl	80093d4 <HAL_TIMEx_MasterConfigSynchronization>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80042e2:	f000 f9ab 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80042e6:	bf00      	nop
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20004014 	.word	0x20004014
 80042f4:	40001400 	.word	0x40001400

080042f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80042fc:	4b11      	ldr	r3, [pc, #68]	; (8004344 <MX_USART6_UART_Init+0x4c>)
 80042fe:	4a12      	ldr	r2, [pc, #72]	; (8004348 <MX_USART6_UART_Init+0x50>)
 8004300:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004302:	4b10      	ldr	r3, [pc, #64]	; (8004344 <MX_USART6_UART_Init+0x4c>)
 8004304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004308:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800430a:	4b0e      	ldr	r3, [pc, #56]	; (8004344 <MX_USART6_UART_Init+0x4c>)
 800430c:	2200      	movs	r2, #0
 800430e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <MX_USART6_UART_Init+0x4c>)
 8004312:	2200      	movs	r2, #0
 8004314:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004316:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <MX_USART6_UART_Init+0x4c>)
 8004318:	2200      	movs	r2, #0
 800431a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800431c:	4b09      	ldr	r3, [pc, #36]	; (8004344 <MX_USART6_UART_Init+0x4c>)
 800431e:	220c      	movs	r2, #12
 8004320:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004322:	4b08      	ldr	r3, [pc, #32]	; (8004344 <MX_USART6_UART_Init+0x4c>)
 8004324:	2200      	movs	r2, #0
 8004326:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004328:	4b06      	ldr	r3, [pc, #24]	; (8004344 <MX_USART6_UART_Init+0x4c>)
 800432a:	2200      	movs	r2, #0
 800432c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800432e:	4805      	ldr	r0, [pc, #20]	; (8004344 <MX_USART6_UART_Init+0x4c>)
 8004330:	f005 f8e0 	bl	80094f4 <HAL_UART_Init>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800433a:	f000 f97f 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	2000405c 	.word	0x2000405c
 8004348:	40011400 	.word	0x40011400

0800434c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004352:	2300      	movs	r3, #0
 8004354:	607b      	str	r3, [r7, #4]
 8004356:	4b14      	ldr	r3, [pc, #80]	; (80043a8 <MX_DMA_Init+0x5c>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	4a13      	ldr	r2, [pc, #76]	; (80043a8 <MX_DMA_Init+0x5c>)
 800435c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004360:	6313      	str	r3, [r2, #48]	; 0x30
 8004362:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <MX_DMA_Init+0x5c>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436a:	607b      	str	r3, [r7, #4]
 800436c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800436e:	2200      	movs	r2, #0
 8004370:	2105      	movs	r1, #5
 8004372:	2038      	movs	r0, #56	; 0x38
 8004374:	f001 fb0f 	bl	8005996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004378:	2038      	movs	r0, #56	; 0x38
 800437a:	f001 fb28 	bl	80059ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800437e:	2200      	movs	r2, #0
 8004380:	2105      	movs	r1, #5
 8004382:	203a      	movs	r0, #58	; 0x3a
 8004384:	f001 fb07 	bl	8005996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004388:	203a      	movs	r0, #58	; 0x3a
 800438a:	f001 fb20 	bl	80059ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800438e:	2200      	movs	r2, #0
 8004390:	2105      	movs	r1, #5
 8004392:	2045      	movs	r0, #69	; 0x45
 8004394:	f001 faff 	bl	8005996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004398:	2045      	movs	r0, #69	; 0x45
 800439a:	f001 fb18 	bl	80059ce <HAL_NVIC_EnableIRQ>

}
 800439e:	bf00      	nop
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40023800 	.word	0x40023800

080043ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b2:	f107 0314 	add.w	r3, r7, #20
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	605a      	str	r2, [r3, #4]
 80043bc:	609a      	str	r2, [r3, #8]
 80043be:	60da      	str	r2, [r3, #12]
 80043c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043c2:	2300      	movs	r3, #0
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	4b36      	ldr	r3, [pc, #216]	; (80044a0 <MX_GPIO_Init+0xf4>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	4a35      	ldr	r2, [pc, #212]	; (80044a0 <MX_GPIO_Init+0xf4>)
 80043cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d0:	6313      	str	r3, [r2, #48]	; 0x30
 80043d2:	4b33      	ldr	r3, [pc, #204]	; (80044a0 <MX_GPIO_Init+0xf4>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	4b2f      	ldr	r3, [pc, #188]	; (80044a0 <MX_GPIO_Init+0xf4>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	4a2e      	ldr	r2, [pc, #184]	; (80044a0 <MX_GPIO_Init+0xf4>)
 80043e8:	f043 0304 	orr.w	r3, r3, #4
 80043ec:	6313      	str	r3, [r2, #48]	; 0x30
 80043ee:	4b2c      	ldr	r3, [pc, #176]	; (80044a0 <MX_GPIO_Init+0xf4>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	4b28      	ldr	r3, [pc, #160]	; (80044a0 <MX_GPIO_Init+0xf4>)
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	4a27      	ldr	r2, [pc, #156]	; (80044a0 <MX_GPIO_Init+0xf4>)
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	6313      	str	r3, [r2, #48]	; 0x30
 800440a:	4b25      	ldr	r3, [pc, #148]	; (80044a0 <MX_GPIO_Init+0xf4>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	60bb      	str	r3, [r7, #8]
 8004414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	607b      	str	r3, [r7, #4]
 800441a:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <MX_GPIO_Init+0xf4>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	4a20      	ldr	r2, [pc, #128]	; (80044a0 <MX_GPIO_Init+0xf4>)
 8004420:	f043 0302 	orr.w	r3, r3, #2
 8004424:	6313      	str	r3, [r2, #48]	; 0x30
 8004426:	4b1e      	ldr	r3, [pc, #120]	; (80044a0 <MX_GPIO_Init+0xf4>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	607b      	str	r3, [r7, #4]
 8004430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_PIN_GPIO_Port, SPI1_NSS_PIN_Pin, GPIO_PIN_SET);
 8004432:	2201      	movs	r2, #1
 8004434:	2110      	movs	r1, #16
 8004436:	481b      	ldr	r0, [pc, #108]	; (80044a4 <MX_GPIO_Init+0xf8>)
 8004438:	f002 f882 	bl	8006540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800443c:	2200      	movs	r2, #0
 800443e:	2120      	movs	r1, #32
 8004440:	4819      	ldr	r0, [pc, #100]	; (80044a8 <MX_GPIO_Init+0xfc>)
 8004442:	f002 f87d 	bl	8006540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_PIN_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_PIN_Pin;
 8004446:	2310      	movs	r3, #16
 8004448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800444a:	2301      	movs	r3, #1
 800444c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004452:	2303      	movs	r3, #3
 8004454:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_PIN_GPIO_Port, &GPIO_InitStruct);
 8004456:	f107 0314 	add.w	r3, r7, #20
 800445a:	4619      	mov	r1, r3
 800445c:	4811      	ldr	r0, [pc, #68]	; (80044a4 <MX_GPIO_Init+0xf8>)
 800445e:	f001 fed3 	bl	8006208 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_INT_Pin */
  GPIO_InitStruct.Pin = SPI1_INT_Pin;
 8004462:	2310      	movs	r3, #16
 8004464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004466:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800446a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446c:	2300      	movs	r3, #0
 800446e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_INT_GPIO_Port, &GPIO_InitStruct);
 8004470:	f107 0314 	add.w	r3, r7, #20
 8004474:	4619      	mov	r1, r3
 8004476:	480d      	ldr	r0, [pc, #52]	; (80044ac <MX_GPIO_Init+0x100>)
 8004478:	f001 fec6 	bl	8006208 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 800447c:	2320      	movs	r3, #32
 800447e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004480:	2301      	movs	r3, #1
 8004482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004484:	2300      	movs	r3, #0
 8004486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004488:	2300      	movs	r3, #0
 800448a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800448c:	f107 0314 	add.w	r3, r7, #20
 8004490:	4619      	mov	r1, r3
 8004492:	4805      	ldr	r0, [pc, #20]	; (80044a8 <MX_GPIO_Init+0xfc>)
 8004494:	f001 feb8 	bl	8006208 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004498:	bf00      	nop
 800449a:	3728      	adds	r7, #40	; 0x28
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40023800 	.word	0x40023800
 80044a4:	40020000 	.word	0x40020000
 80044a8:	40020400 	.word	0x40020400
 80044ac:	40020800 	.word	0x40020800

080044b0 <OSVersion>:

/* USER CODE BEGIN 4 */

char* OSVersion(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 80044b4:	4b02      	ldr	r3, [pc, #8]	; (80044c0 <OSVersion+0x10>)
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	0801525c 	.word	0x0801525c

080044c4 <freertos_IntroTitle>:


void freertos_IntroTitle(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 80044c8:	492e      	ldr	r1, [pc, #184]	; (8004584 <freertos_IntroTitle+0xc0>)
 80044ca:	482f      	ldr	r0, [pc, #188]	; (8004588 <freertos_IntroTitle+0xc4>)
 80044cc:	f7ff f96a 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 80044d0:	492e      	ldr	r1, [pc, #184]	; (800458c <freertos_IntroTitle+0xc8>)
 80044d2:	482d      	ldr	r0, [pc, #180]	; (8004588 <freertos_IntroTitle+0xc4>)
 80044d4:	f7ff f966 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 80044d8:	492d      	ldr	r1, [pc, #180]	; (8004590 <freertos_IntroTitle+0xcc>)
 80044da:	482b      	ldr	r0, [pc, #172]	; (8004588 <freertos_IntroTitle+0xc4>)
 80044dc:	f7ff f962 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 80044e0:	492c      	ldr	r1, [pc, #176]	; (8004594 <freertos_IntroTitle+0xd0>)
 80044e2:	4829      	ldr	r0, [pc, #164]	; (8004588 <freertos_IntroTitle+0xc4>)
 80044e4:	f7ff f95e 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 80044e8:	492b      	ldr	r1, [pc, #172]	; (8004598 <freertos_IntroTitle+0xd4>)
 80044ea:	4827      	ldr	r0, [pc, #156]	; (8004588 <freertos_IntroTitle+0xc4>)
 80044ec:	f7ff f95a 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 80044f0:	492a      	ldr	r1, [pc, #168]	; (800459c <freertos_IntroTitle+0xd8>)
 80044f2:	4825      	ldr	r0, [pc, #148]	; (8004588 <freertos_IntroTitle+0xc4>)
 80044f4:	f7ff f956 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 80044f8:	4929      	ldr	r1, [pc, #164]	; (80045a0 <freertos_IntroTitle+0xdc>)
 80044fa:	4823      	ldr	r0, [pc, #140]	; (8004588 <freertos_IntroTitle+0xc4>)
 80044fc:	f7ff f952 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 8004500:	4928      	ldr	r1, [pc, #160]	; (80045a4 <freertos_IntroTitle+0xe0>)
 8004502:	4821      	ldr	r0, [pc, #132]	; (8004588 <freertos_IntroTitle+0xc4>)
 8004504:	f7ff f94e 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 8004508:	4927      	ldr	r1, [pc, #156]	; (80045a8 <freertos_IntroTitle+0xe4>)
 800450a:	481f      	ldr	r0, [pc, #124]	; (8004588 <freertos_IntroTitle+0xc4>)
 800450c:	f7ff f94a 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 8004510:	4926      	ldr	r1, [pc, #152]	; (80045ac <freertos_IntroTitle+0xe8>)
 8004512:	481d      	ldr	r0, [pc, #116]	; (8004588 <freertos_IntroTitle+0xc4>)
 8004514:	f7ff f946 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 8004518:	4925      	ldr	r1, [pc, #148]	; (80045b0 <freertos_IntroTitle+0xec>)
 800451a:	481b      	ldr	r0, [pc, #108]	; (8004588 <freertos_IntroTitle+0xc4>)
 800451c:	f7ff f942 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 8004520:	4924      	ldr	r1, [pc, #144]	; (80045b4 <freertos_IntroTitle+0xf0>)
 8004522:	4819      	ldr	r0, [pc, #100]	; (8004588 <freertos_IntroTitle+0xc4>)
 8004524:	f7ff f93e 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 8004528:	4923      	ldr	r1, [pc, #140]	; (80045b8 <freertos_IntroTitle+0xf4>)
 800452a:	4817      	ldr	r0, [pc, #92]	; (8004588 <freertos_IntroTitle+0xc4>)
 800452c:	f7ff f93a 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 8004530:	4922      	ldr	r1, [pc, #136]	; (80045bc <freertos_IntroTitle+0xf8>)
 8004532:	4815      	ldr	r0, [pc, #84]	; (8004588 <freertos_IntroTitle+0xc4>)
 8004534:	f7ff f936 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 8004538:	4921      	ldr	r1, [pc, #132]	; (80045c0 <freertos_IntroTitle+0xfc>)
 800453a:	4813      	ldr	r0, [pc, #76]	; (8004588 <freertos_IntroTitle+0xc4>)
 800453c:	f7ff f932 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 8004540:	4920      	ldr	r1, [pc, #128]	; (80045c4 <freertos_IntroTitle+0x100>)
 8004542:	4811      	ldr	r0, [pc, #68]	; (8004588 <freertos_IntroTitle+0xc4>)
 8004544:	f7ff f92e 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 8004548:	491f      	ldr	r1, [pc, #124]	; (80045c8 <freertos_IntroTitle+0x104>)
 800454a:	480f      	ldr	r0, [pc, #60]	; (8004588 <freertos_IntroTitle+0xc4>)
 800454c:	f7ff f92a 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 8004550:	491e      	ldr	r1, [pc, #120]	; (80045cc <freertos_IntroTitle+0x108>)
 8004552:	480d      	ldr	r0, [pc, #52]	; (8004588 <freertos_IntroTitle+0xc4>)
 8004554:	f7ff f926 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8004558:	491d      	ldr	r1, [pc, #116]	; (80045d0 <freertos_IntroTitle+0x10c>)
 800455a:	480b      	ldr	r0, [pc, #44]	; (8004588 <freertos_IntroTitle+0xc4>)
 800455c:	f7ff f922 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 8004560:	f7ff ffa6 	bl	80044b0 <OSVersion>
 8004564:	4603      	mov	r3, r0
 8004566:	461a      	mov	r2, r3
 8004568:	491a      	ldr	r1, [pc, #104]	; (80045d4 <freertos_IntroTitle+0x110>)
 800456a:	4807      	ldr	r0, [pc, #28]	; (8004588 <freertos_IntroTitle+0xc4>)
 800456c:	f7ff f91a 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8004570:	4919      	ldr	r1, [pc, #100]	; (80045d8 <freertos_IntroTitle+0x114>)
 8004572:	4805      	ldr	r0, [pc, #20]	; (8004588 <freertos_IntroTitle+0xc4>)
 8004574:	f7ff f916 	bl	80037a4 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8004578:	4918      	ldr	r1, [pc, #96]	; (80045dc <freertos_IntroTitle+0x118>)
 800457a:	4803      	ldr	r0, [pc, #12]	; (8004588 <freertos_IntroTitle+0xc4>)
 800457c:	f7ff f912 	bl	80037a4 <eprintf>
}
 8004580:	bf00      	nop
 8004582:	bd80      	pop	{r7, pc}
 8004584:	08015264 	.word	0x08015264
 8004588:	08002f15 	.word	0x08002f15
 800458c:	080152a4 	.word	0x080152a4
 8004590:	080152f8 	.word	0x080152f8
 8004594:	0801534c 	.word	0x0801534c
 8004598:	080153a0 	.word	0x080153a0
 800459c:	080153f4 	.word	0x080153f4
 80045a0:	08015448 	.word	0x08015448
 80045a4:	0801549c 	.word	0x0801549c
 80045a8:	080154f0 	.word	0x080154f0
 80045ac:	08015544 	.word	0x08015544
 80045b0:	08015598 	.word	0x08015598
 80045b4:	080155ec 	.word	0x080155ec
 80045b8:	08015640 	.word	0x08015640
 80045bc:	08015694 	.word	0x08015694
 80045c0:	080156e8 	.word	0x080156e8
 80045c4:	0801573c 	.word	0x0801573c
 80045c8:	08015790 	.word	0x08015790
 80045cc:	080157e4 	.word	0x080157e4
 80045d0:	0801582c 	.word	0x0801582c
 80045d4:	0801585c 	.word	0x0801585c
 80045d8:	080158a0 	.word	0x080158a0
 80045dc:	080158cc 	.word	0x080158cc

080045e0 <delay_us>:
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; 				// 시간 측정 초기화
  DWT->CYCCNT = 0;   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

void delay_us (uint16_t us)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	80fb      	strh	r3, [r7, #6]

	HAL_TIM_Base_Start_IT(&htim7);
 80045ea:	480a      	ldr	r0, [pc, #40]	; (8004614 <delay_us+0x34>)
 80045ec:	f003 fefa 	bl	80083e4 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim7,0);  // set the counter value a 0
 80045f0:	4b08      	ldr	r3, [pc, #32]	; (8004614 <delay_us+0x34>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2200      	movs	r2, #0
 80045f6:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 80045f8:	bf00      	nop
 80045fa:	4b06      	ldr	r3, [pc, #24]	; (8004614 <delay_us+0x34>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004600:	88fb      	ldrh	r3, [r7, #6]
 8004602:	429a      	cmp	r2, r3
 8004604:	d3f9      	bcc.n	80045fa <delay_us+0x1a>
	HAL_TIM_Base_Stop_IT(&htim7);
 8004606:	4803      	ldr	r0, [pc, #12]	; (8004614 <delay_us+0x34>)
 8004608:	f003 ff5c 	bl	80084c4 <HAL_TIM_Base_Stop_IT>
}
 800460c:	bf00      	nop
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	20004014 	.word	0x20004014

08004618 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8004620:	f00c ff5a 	bl	80114d8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	DEBUG_PRINT("[TASK] StartDefaultTask is running!\n");
 8004624:	4903      	ldr	r1, [pc, #12]	; (8004634 <StartDefaultTask+0x1c>)
 8004626:	4804      	ldr	r0, [pc, #16]	; (8004638 <StartDefaultTask+0x20>)
 8004628:	f7ff f8bc 	bl	80037a4 <eprintf>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800462c:	2001      	movs	r0, #1
 800462e:	f009 fbf7 	bl	800de20 <osDelay>
 8004632:	e7fb      	b.n	800462c <StartDefaultTask+0x14>
 8004634:	08015918 	.word	0x08015918
 8004638:	08002f15 	.word	0x08002f15

0800463c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004640:	b672      	cpsid	i
}
 8004642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004644:	e7fe      	b.n	8004644 <Error_Handler+0x8>
	...

08004648 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	607b      	str	r3, [r7, #4]
 8004652:	4b16      	ldr	r3, [pc, #88]	; (80046ac <HAL_MspInit+0x64>)
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	4a15      	ldr	r2, [pc, #84]	; (80046ac <HAL_MspInit+0x64>)
 8004658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800465c:	6453      	str	r3, [r2, #68]	; 0x44
 800465e:	4b13      	ldr	r3, [pc, #76]	; (80046ac <HAL_MspInit+0x64>)
 8004660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004666:	607b      	str	r3, [r7, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	603b      	str	r3, [r7, #0]
 800466e:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <HAL_MspInit+0x64>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	4a0e      	ldr	r2, [pc, #56]	; (80046ac <HAL_MspInit+0x64>)
 8004674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004678:	6413      	str	r3, [r2, #64]	; 0x40
 800467a:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <HAL_MspInit+0x64>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004686:	2200      	movs	r2, #0
 8004688:	210f      	movs	r1, #15
 800468a:	f06f 0001 	mvn.w	r0, #1
 800468e:	f001 f982 	bl	8005996 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8004692:	2200      	movs	r2, #0
 8004694:	2105      	movs	r1, #5
 8004696:	2005      	movs	r0, #5
 8004698:	f001 f97d 	bl	8005996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800469c:	2005      	movs	r0, #5
 800469e:	f001 f996 	bl	80059ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40023800 	.word	0x40023800

080046b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08c      	sub	sp, #48	; 0x30
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b8:	f107 031c 	add.w	r3, r7, #28
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	60da      	str	r2, [r3, #12]
 80046c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a5e      	ldr	r2, [pc, #376]	; (8004848 <HAL_ADC_MspInit+0x198>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d158      	bne.n	8004784 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	61bb      	str	r3, [r7, #24]
 80046d6:	4b5d      	ldr	r3, [pc, #372]	; (800484c <HAL_ADC_MspInit+0x19c>)
 80046d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046da:	4a5c      	ldr	r2, [pc, #368]	; (800484c <HAL_ADC_MspInit+0x19c>)
 80046dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e0:	6453      	str	r3, [r2, #68]	; 0x44
 80046e2:	4b5a      	ldr	r3, [pc, #360]	; (800484c <HAL_ADC_MspInit+0x19c>)
 80046e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ea:	61bb      	str	r3, [r7, #24]
 80046ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	4b56      	ldr	r3, [pc, #344]	; (800484c <HAL_ADC_MspInit+0x19c>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	4a55      	ldr	r2, [pc, #340]	; (800484c <HAL_ADC_MspInit+0x19c>)
 80046f8:	f043 0304 	orr.w	r3, r3, #4
 80046fc:	6313      	str	r3, [r2, #48]	; 0x30
 80046fe:	4b53      	ldr	r3, [pc, #332]	; (800484c <HAL_ADC_MspInit+0x19c>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC1_CM_Pin;
 800470a:	2302      	movs	r3, #2
 800470c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800470e:	2303      	movs	r3, #3
 8004710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004712:	2300      	movs	r3, #0
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC1_CM_GPIO_Port, &GPIO_InitStruct);
 8004716:	f107 031c 	add.w	r3, r7, #28
 800471a:	4619      	mov	r1, r3
 800471c:	484c      	ldr	r0, [pc, #304]	; (8004850 <HAL_ADC_MspInit+0x1a0>)
 800471e:	f001 fd73 	bl	8006208 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004722:	4b4c      	ldr	r3, [pc, #304]	; (8004854 <HAL_ADC_MspInit+0x1a4>)
 8004724:	4a4c      	ldr	r2, [pc, #304]	; (8004858 <HAL_ADC_MspInit+0x1a8>)
 8004726:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004728:	4b4a      	ldr	r3, [pc, #296]	; (8004854 <HAL_ADC_MspInit+0x1a4>)
 800472a:	2200      	movs	r2, #0
 800472c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800472e:	4b49      	ldr	r3, [pc, #292]	; (8004854 <HAL_ADC_MspInit+0x1a4>)
 8004730:	2200      	movs	r2, #0
 8004732:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004734:	4b47      	ldr	r3, [pc, #284]	; (8004854 <HAL_ADC_MspInit+0x1a4>)
 8004736:	2200      	movs	r2, #0
 8004738:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800473a:	4b46      	ldr	r3, [pc, #280]	; (8004854 <HAL_ADC_MspInit+0x1a4>)
 800473c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004740:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004742:	4b44      	ldr	r3, [pc, #272]	; (8004854 <HAL_ADC_MspInit+0x1a4>)
 8004744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004748:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800474a:	4b42      	ldr	r3, [pc, #264]	; (8004854 <HAL_ADC_MspInit+0x1a4>)
 800474c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004750:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004752:	4b40      	ldr	r3, [pc, #256]	; (8004854 <HAL_ADC_MspInit+0x1a4>)
 8004754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004758:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800475a:	4b3e      	ldr	r3, [pc, #248]	; (8004854 <HAL_ADC_MspInit+0x1a4>)
 800475c:	2200      	movs	r2, #0
 800475e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004760:	4b3c      	ldr	r3, [pc, #240]	; (8004854 <HAL_ADC_MspInit+0x1a4>)
 8004762:	2200      	movs	r2, #0
 8004764:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004766:	483b      	ldr	r0, [pc, #236]	; (8004854 <HAL_ADC_MspInit+0x1a4>)
 8004768:	f001 f94c 	bl	8005a04 <HAL_DMA_Init>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004772:	f7ff ff63 	bl	800463c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a36      	ldr	r2, [pc, #216]	; (8004854 <HAL_ADC_MspInit+0x1a4>)
 800477a:	639a      	str	r2, [r3, #56]	; 0x38
 800477c:	4a35      	ldr	r2, [pc, #212]	; (8004854 <HAL_ADC_MspInit+0x1a4>)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004782:	e05d      	b.n	8004840 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a34      	ldr	r2, [pc, #208]	; (800485c <HAL_ADC_MspInit+0x1ac>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d158      	bne.n	8004840 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800478e:	2300      	movs	r3, #0
 8004790:	613b      	str	r3, [r7, #16]
 8004792:	4b2e      	ldr	r3, [pc, #184]	; (800484c <HAL_ADC_MspInit+0x19c>)
 8004794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004796:	4a2d      	ldr	r2, [pc, #180]	; (800484c <HAL_ADC_MspInit+0x19c>)
 8004798:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800479c:	6453      	str	r3, [r2, #68]	; 0x44
 800479e:	4b2b      	ldr	r3, [pc, #172]	; (800484c <HAL_ADC_MspInit+0x19c>)
 80047a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	4b27      	ldr	r3, [pc, #156]	; (800484c <HAL_ADC_MspInit+0x19c>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	4a26      	ldr	r2, [pc, #152]	; (800484c <HAL_ADC_MspInit+0x19c>)
 80047b4:	f043 0304 	orr.w	r3, r3, #4
 80047b8:	6313      	str	r3, [r2, #48]	; 0x30
 80047ba:	4b24      	ldr	r3, [pc, #144]	; (800484c <HAL_ADC_MspInit+0x19c>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC2_VM_Pin;
 80047c6:	2304      	movs	r3, #4
 80047c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047ca:	2303      	movs	r3, #3
 80047cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC2_VM_GPIO_Port, &GPIO_InitStruct);
 80047d2:	f107 031c 	add.w	r3, r7, #28
 80047d6:	4619      	mov	r1, r3
 80047d8:	481d      	ldr	r0, [pc, #116]	; (8004850 <HAL_ADC_MspInit+0x1a0>)
 80047da:	f001 fd15 	bl	8006208 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80047de:	4b20      	ldr	r3, [pc, #128]	; (8004860 <HAL_ADC_MspInit+0x1b0>)
 80047e0:	4a20      	ldr	r2, [pc, #128]	; (8004864 <HAL_ADC_MspInit+0x1b4>)
 80047e2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80047e4:	4b1e      	ldr	r3, [pc, #120]	; (8004860 <HAL_ADC_MspInit+0x1b0>)
 80047e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047ea:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047ec:	4b1c      	ldr	r3, [pc, #112]	; (8004860 <HAL_ADC_MspInit+0x1b0>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80047f2:	4b1b      	ldr	r3, [pc, #108]	; (8004860 <HAL_ADC_MspInit+0x1b0>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80047f8:	4b19      	ldr	r3, [pc, #100]	; (8004860 <HAL_ADC_MspInit+0x1b0>)
 80047fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047fe:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004800:	4b17      	ldr	r3, [pc, #92]	; (8004860 <HAL_ADC_MspInit+0x1b0>)
 8004802:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004806:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004808:	4b15      	ldr	r3, [pc, #84]	; (8004860 <HAL_ADC_MspInit+0x1b0>)
 800480a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800480e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004810:	4b13      	ldr	r3, [pc, #76]	; (8004860 <HAL_ADC_MspInit+0x1b0>)
 8004812:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004816:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004818:	4b11      	ldr	r3, [pc, #68]	; (8004860 <HAL_ADC_MspInit+0x1b0>)
 800481a:	2200      	movs	r2, #0
 800481c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800481e:	4b10      	ldr	r3, [pc, #64]	; (8004860 <HAL_ADC_MspInit+0x1b0>)
 8004820:	2200      	movs	r2, #0
 8004822:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004824:	480e      	ldr	r0, [pc, #56]	; (8004860 <HAL_ADC_MspInit+0x1b0>)
 8004826:	f001 f8ed 	bl	8005a04 <HAL_DMA_Init>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8004830:	f7ff ff04 	bl	800463c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a0a      	ldr	r2, [pc, #40]	; (8004860 <HAL_ADC_MspInit+0x1b0>)
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
 800483a:	4a09      	ldr	r2, [pc, #36]	; (8004860 <HAL_ADC_MspInit+0x1b0>)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004840:	bf00      	nop
 8004842:	3730      	adds	r7, #48	; 0x30
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40012000 	.word	0x40012000
 800484c:	40023800 	.word	0x40023800
 8004850:	40020800 	.word	0x40020800
 8004854:	20003f0c 	.word	0x20003f0c
 8004858:	40026410 	.word	0x40026410
 800485c:	40012100 	.word	0x40012100
 8004860:	20003f6c 	.word	0x20003f6c
 8004864:	40026440 	.word	0x40026440

08004868 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a18      	ldr	r2, [pc, #96]	; (80048d8 <HAL_TIM_Base_MspInit+0x70>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d10e      	bne.n	8004898 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	4b17      	ldr	r3, [pc, #92]	; (80048dc <HAL_TIM_Base_MspInit+0x74>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	4a16      	ldr	r2, [pc, #88]	; (80048dc <HAL_TIM_Base_MspInit+0x74>)
 8004884:	f043 0302 	orr.w	r3, r3, #2
 8004888:	6413      	str	r3, [r2, #64]	; 0x40
 800488a:	4b14      	ldr	r3, [pc, #80]	; (80048dc <HAL_TIM_Base_MspInit+0x74>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004896:	e01a      	b.n	80048ce <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a10      	ldr	r2, [pc, #64]	; (80048e0 <HAL_TIM_Base_MspInit+0x78>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d115      	bne.n	80048ce <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80048a2:	2300      	movs	r3, #0
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	4b0d      	ldr	r3, [pc, #52]	; (80048dc <HAL_TIM_Base_MspInit+0x74>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	4a0c      	ldr	r2, [pc, #48]	; (80048dc <HAL_TIM_Base_MspInit+0x74>)
 80048ac:	f043 0320 	orr.w	r3, r3, #32
 80048b0:	6413      	str	r3, [r2, #64]	; 0x40
 80048b2:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <HAL_TIM_Base_MspInit+0x74>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	60bb      	str	r3, [r7, #8]
 80048bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80048be:	2200      	movs	r2, #0
 80048c0:	2105      	movs	r1, #5
 80048c2:	2037      	movs	r0, #55	; 0x37
 80048c4:	f001 f867 	bl	8005996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80048c8:	2037      	movs	r0, #55	; 0x37
 80048ca:	f001 f880 	bl	80059ce <HAL_NVIC_EnableIRQ>
}
 80048ce:	bf00      	nop
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40000400 	.word	0x40000400
 80048dc:	40023800 	.word	0x40023800
 80048e0:	40001400 	.word	0x40001400

080048e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ec:	f107 030c 	add.w	r3, r7, #12
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	60da      	str	r2, [r3, #12]
 80048fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a12      	ldr	r2, [pc, #72]	; (800494c <HAL_TIM_MspPostInit+0x68>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d11d      	bne.n	8004942 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004906:	2300      	movs	r3, #0
 8004908:	60bb      	str	r3, [r7, #8]
 800490a:	4b11      	ldr	r3, [pc, #68]	; (8004950 <HAL_TIM_MspPostInit+0x6c>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	4a10      	ldr	r2, [pc, #64]	; (8004950 <HAL_TIM_MspPostInit+0x6c>)
 8004910:	f043 0302 	orr.w	r3, r3, #2
 8004914:	6313      	str	r3, [r2, #48]	; 0x30
 8004916:	4b0e      	ldr	r3, [pc, #56]	; (8004950 <HAL_TIM_MspPostInit+0x6c>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	60bb      	str	r3, [r7, #8]
 8004920:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_BUZZER_Pin;
 8004922:	2310      	movs	r3, #16
 8004924:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004926:	2302      	movs	r3, #2
 8004928:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800492e:	2300      	movs	r3, #0
 8004930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004932:	2302      	movs	r3, #2
 8004934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM3_BUZZER_GPIO_Port, &GPIO_InitStruct);
 8004936:	f107 030c 	add.w	r3, r7, #12
 800493a:	4619      	mov	r1, r3
 800493c:	4805      	ldr	r0, [pc, #20]	; (8004954 <HAL_TIM_MspPostInit+0x70>)
 800493e:	f001 fc63 	bl	8006208 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004942:	bf00      	nop
 8004944:	3720      	adds	r7, #32
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40000400 	.word	0x40000400
 8004950:	40023800 	.word	0x40023800
 8004954:	40020400 	.word	0x40020400

08004958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b08a      	sub	sp, #40	; 0x28
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004960:	f107 0314 	add.w	r3, r7, #20
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	605a      	str	r2, [r3, #4]
 800496a:	609a      	str	r2, [r3, #8]
 800496c:	60da      	str	r2, [r3, #12]
 800496e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a34      	ldr	r2, [pc, #208]	; (8004a48 <HAL_UART_MspInit+0xf0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d161      	bne.n	8004a3e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800497a:	2300      	movs	r3, #0
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	4b33      	ldr	r3, [pc, #204]	; (8004a4c <HAL_UART_MspInit+0xf4>)
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	4a32      	ldr	r2, [pc, #200]	; (8004a4c <HAL_UART_MspInit+0xf4>)
 8004984:	f043 0320 	orr.w	r3, r3, #32
 8004988:	6453      	str	r3, [r2, #68]	; 0x44
 800498a:	4b30      	ldr	r3, [pc, #192]	; (8004a4c <HAL_UART_MspInit+0xf4>)
 800498c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498e:	f003 0320 	and.w	r3, r3, #32
 8004992:	613b      	str	r3, [r7, #16]
 8004994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	4b2c      	ldr	r3, [pc, #176]	; (8004a4c <HAL_UART_MspInit+0xf4>)
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	4a2b      	ldr	r2, [pc, #172]	; (8004a4c <HAL_UART_MspInit+0xf4>)
 80049a0:	f043 0304 	orr.w	r3, r3, #4
 80049a4:	6313      	str	r3, [r2, #48]	; 0x30
 80049a6:	4b29      	ldr	r3, [pc, #164]	; (8004a4c <HAL_UART_MspInit+0xf4>)
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = UART6_TX_DEBUG_Pin|UART6_RX_DEBUG_Pin;
 80049b2:	23c0      	movs	r3, #192	; 0xc0
 80049b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b6:	2302      	movs	r3, #2
 80049b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049be:	2303      	movs	r3, #3
 80049c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80049c2:	2308      	movs	r3, #8
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049c6:	f107 0314 	add.w	r3, r7, #20
 80049ca:	4619      	mov	r1, r3
 80049cc:	4820      	ldr	r0, [pc, #128]	; (8004a50 <HAL_UART_MspInit+0xf8>)
 80049ce:	f001 fc1b 	bl	8006208 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80049d2:	4b20      	ldr	r3, [pc, #128]	; (8004a54 <HAL_UART_MspInit+0xfc>)
 80049d4:	4a20      	ldr	r2, [pc, #128]	; (8004a58 <HAL_UART_MspInit+0x100>)
 80049d6:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80049d8:	4b1e      	ldr	r3, [pc, #120]	; (8004a54 <HAL_UART_MspInit+0xfc>)
 80049da:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80049de:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049e0:	4b1c      	ldr	r3, [pc, #112]	; (8004a54 <HAL_UART_MspInit+0xfc>)
 80049e2:	2240      	movs	r2, #64	; 0x40
 80049e4:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049e6:	4b1b      	ldr	r3, [pc, #108]	; (8004a54 <HAL_UART_MspInit+0xfc>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049ec:	4b19      	ldr	r3, [pc, #100]	; (8004a54 <HAL_UART_MspInit+0xfc>)
 80049ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049f2:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049f4:	4b17      	ldr	r3, [pc, #92]	; (8004a54 <HAL_UART_MspInit+0xfc>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049fa:	4b16      	ldr	r3, [pc, #88]	; (8004a54 <HAL_UART_MspInit+0xfc>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004a00:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <HAL_UART_MspInit+0xfc>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a06:	4b13      	ldr	r3, [pc, #76]	; (8004a54 <HAL_UART_MspInit+0xfc>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a0c:	4b11      	ldr	r3, [pc, #68]	; (8004a54 <HAL_UART_MspInit+0xfc>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004a12:	4810      	ldr	r0, [pc, #64]	; (8004a54 <HAL_UART_MspInit+0xfc>)
 8004a14:	f000 fff6 	bl	8005a04 <HAL_DMA_Init>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004a1e:	f7ff fe0d 	bl	800463c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a0b      	ldr	r2, [pc, #44]	; (8004a54 <HAL_UART_MspInit+0xfc>)
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38
 8004a28:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <HAL_UART_MspInit+0xfc>)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004a2e:	2200      	movs	r2, #0
 8004a30:	2105      	movs	r1, #5
 8004a32:	2047      	movs	r0, #71	; 0x47
 8004a34:	f000 ffaf 	bl	8005996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004a38:	2047      	movs	r0, #71	; 0x47
 8004a3a:	f000 ffc8 	bl	80059ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004a3e:	bf00      	nop
 8004a40:	3728      	adds	r7, #40	; 0x28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40011400 	.word	0x40011400
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	40020800 	.word	0x40020800
 8004a54:	200040a4 	.word	0x200040a4
 8004a58:	400264a0 	.word	0x400264a0

08004a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a60:	e7fe      	b.n	8004a60 <NMI_Handler+0x4>

08004a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a62:	b480      	push	{r7}
 8004a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a66:	e7fe      	b.n	8004a66 <HardFault_Handler+0x4>

08004a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a6c:	e7fe      	b.n	8004a6c <MemManage_Handler+0x4>

08004a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a72:	e7fe      	b.n	8004a72 <BusFault_Handler+0x4>

08004a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a78:	e7fe      	b.n	8004a78 <UsageFault_Handler+0x4>

08004a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a7e:	bf00      	nop
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 8004a8c:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <SysTick_Handler+0x2c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d004      	beq.n	8004a9e <SysTick_Handler+0x16>

		TimingDelay--;
 8004a94:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <SysTick_Handler+0x2c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	4a06      	ldr	r2, [pc, #24]	; (8004ab4 <SysTick_Handler+0x2c>)
 8004a9c:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a9e:	f000 fa49 	bl	8004f34 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004aa2:	f00b fa9b 	bl	800ffdc <xTaskGetSchedulerState>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d001      	beq.n	8004ab0 <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004aac:	f00c fab4 	bl	8011018 <tickFreeRTOS>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ab0:	bf00      	nop
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20004114 	.word	0x20004114

08004ab8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004abc:	bf00      	nop
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
	...

08004ac8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004acc:	4802      	ldr	r0, [pc, #8]	; (8004ad8 <TIM7_IRQHandler+0x10>)
 8004ace:	f003 feb9 	bl	8008844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004ad2:	bf00      	nop
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20004014 	.word	0x20004014

08004adc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004ae0:	4802      	ldr	r0, [pc, #8]	; (8004aec <DMA2_Stream0_IRQHandler+0x10>)
 8004ae2:	f001 f927 	bl	8005d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004ae6:	bf00      	nop
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20003f0c 	.word	0x20003f0c

08004af0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004af4:	4802      	ldr	r0, [pc, #8]	; (8004b00 <DMA2_Stream2_IRQHandler+0x10>)
 8004af6:	f001 f91d 	bl	8005d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004afa:	bf00      	nop
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20003f6c 	.word	0x20003f6c

08004b04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004b08:	4802      	ldr	r0, [pc, #8]	; (8004b14 <OTG_FS_IRQHandler+0x10>)
 8004b0a:	f001 fe76 	bl	80067fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004b0e:	bf00      	nop
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20009680 	.word	0x20009680

08004b18 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
  xSemaphoreTakeFromISR(waitUntilSendDone, portMAX_DELAY);
 8004b1e:	4b28      	ldr	r3, [pc, #160]	; (8004bc0 <DMA2_Stream6_IRQHandler+0xa8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b26:	2100      	movs	r1, #0
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f009 ffd5 	bl	800ead8 <xQueueReceiveFromISR>

  portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	607b      	str	r3, [r7, #4]
  __HAL_DMA_CLEAR_FLAG(&hdma_usart6_tx, DMA_FLAG_TCIF2_6);
 8004b32:	4b24      	ldr	r3, [pc, #144]	; (8004bc4 <DMA2_Stream6_IRQHandler+0xac>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <DMA2_Stream6_IRQHandler+0xb0>)
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d904      	bls.n	8004b48 <DMA2_Stream6_IRQHandler+0x30>
 8004b3e:	4b23      	ldr	r3, [pc, #140]	; (8004bcc <DMA2_Stream6_IRQHandler+0xb4>)
 8004b40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	e019      	b.n	8004b7c <DMA2_Stream6_IRQHandler+0x64>
 8004b48:	4b1e      	ldr	r3, [pc, #120]	; (8004bc4 <DMA2_Stream6_IRQHandler+0xac>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <DMA2_Stream6_IRQHandler+0xb8>)
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d904      	bls.n	8004b5e <DMA2_Stream6_IRQHandler+0x46>
 8004b54:	4a1d      	ldr	r2, [pc, #116]	; (8004bcc <DMA2_Stream6_IRQHandler+0xb4>)
 8004b56:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b5a:	6093      	str	r3, [r2, #8]
 8004b5c:	e00e      	b.n	8004b7c <DMA2_Stream6_IRQHandler+0x64>
 8004b5e:	4b19      	ldr	r3, [pc, #100]	; (8004bc4 <DMA2_Stream6_IRQHandler+0xac>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	4b1b      	ldr	r3, [pc, #108]	; (8004bd4 <DMA2_Stream6_IRQHandler+0xbc>)
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d904      	bls.n	8004b74 <DMA2_Stream6_IRQHandler+0x5c>
 8004b6a:	4a1b      	ldr	r2, [pc, #108]	; (8004bd8 <DMA2_Stream6_IRQHandler+0xc0>)
 8004b6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b70:	60d3      	str	r3, [r2, #12]
 8004b72:	e003      	b.n	8004b7c <DMA2_Stream6_IRQHandler+0x64>
 8004b74:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <DMA2_Stream6_IRQHandler+0xc0>)
 8004b76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b7a:	6093      	str	r3, [r2, #8]
  __HAL_DMA_DISABLE(&hdma_usart6_tx);
 8004b7c:	4b11      	ldr	r3, [pc, #68]	; (8004bc4 <DMA2_Stream6_IRQHandler+0xac>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4b10      	ldr	r3, [pc, #64]	; (8004bc4 <DMA2_Stream6_IRQHandler+0xac>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]
  xSemaphoreGiveFromISR(waitUntilSendDone, &xHigherPriorityTaskWoken);
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <DMA2_Stream6_IRQHandler+0xa8>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	1d3a      	adds	r2, r7, #4
 8004b92:	4611      	mov	r1, r2
 8004b94:	4618      	mov	r0, r3
 8004b96:	f009 fd31 	bl	800e5fc <xQueueGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d007      	beq.n	8004bb0 <DMA2_Stream6_IRQHandler+0x98>
 8004ba0:	4b0e      	ldr	r3, [pc, #56]	; (8004bdc <DMA2_Stream6_IRQHandler+0xc4>)
 8004ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8004bb0:	4804      	ldr	r0, [pc, #16]	; (8004bc4 <DMA2_Stream6_IRQHandler+0xac>)
 8004bb2:	f001 f8bf 	bl	8005d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004bb6:	bf00      	nop
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	200030b8 	.word	0x200030b8
 8004bc4:	200040a4 	.word	0x200040a4
 8004bc8:	40026458 	.word	0x40026458
 8004bcc:	40026400 	.word	0x40026400
 8004bd0:	400260b8 	.word	0x400260b8
 8004bd4:	40026058 	.word	0x40026058
 8004bd8:	40026000 	.word	0x40026000
 8004bdc:	e000ed04 	.word	0xe000ed04

08004be0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)!=RESET)&&(__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_RXNE)!=RESET) ){
 8004be6:	4b1d      	ldr	r3, [pc, #116]	; (8004c5c <USART6_IRQHandler+0x7c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d12b      	bne.n	8004c4c <USART6_IRQHandler+0x6c>
 8004bf4:	4b19      	ldr	r3, [pc, #100]	; (8004c5c <USART6_IRQHandler+0x7c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d024      	beq.n	8004c4c <USART6_IRQHandler+0x6c>
		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8004c02:	2300      	movs	r3, #0
 8004c04:	607b      	str	r3, [r7, #4]
		g_rx_buffer = (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF);	// 데이터 1바이트 수신
 8004c06:	4b15      	ldr	r3, [pc, #84]	; (8004c5c <USART6_IRQHandler+0x7c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	4b14      	ldr	r3, [pc, #80]	; (8004c60 <USART6_IRQHandler+0x80>)
 8004c10:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_CLEAR_PEFLAG(&huart6);
 8004c12:	2300      	movs	r3, #0
 8004c14:	603b      	str	r3, [r7, #0]
 8004c16:	4b11      	ldr	r3, [pc, #68]	; (8004c5c <USART6_IRQHandler+0x7c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	603b      	str	r3, [r7, #0]
 8004c1e:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <USART6_IRQHandler+0x7c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	603b      	str	r3, [r7, #0]
 8004c26:	683b      	ldr	r3, [r7, #0]
		xQueueSendFromISR(uartqueue, &g_rx_buffer, &xHigherPriorityTaskWoken);	// Queue에서 멈춤
 8004c28:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <USART6_IRQHandler+0x84>)
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	1d3a      	adds	r2, r7, #4
 8004c2e:	2300      	movs	r3, #0
 8004c30:	490b      	ldr	r1, [pc, #44]	; (8004c60 <USART6_IRQHandler+0x80>)
 8004c32:	f009 fc4f 	bl	800e4d4 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d007      	beq.n	8004c4c <USART6_IRQHandler+0x6c>
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	; (8004c68 <USART6_IRQHandler+0x88>)
 8004c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	f3bf 8f6f 	isb	sy
	}

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004c4c:	4803      	ldr	r0, [pc, #12]	; (8004c5c <USART6_IRQHandler+0x7c>)
 8004c4e:	f004 fca1 	bl	8009594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004c52:	bf00      	nop
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	2000405c 	.word	0x2000405c
 8004c60:	20004110 	.word	0x20004110
 8004c64:	20003060 	.word	0x20003060
 8004c68:	e000ed04 	.word	0xe000ed04

08004c6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  return 1;
 8004c70:	2301      	movs	r3, #1
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <_kill>:

int _kill(int pid, int sig)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004c86:	f00e f8b3 	bl	8012df0 <__errno>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2216      	movs	r2, #22
 8004c8e:	601a      	str	r2, [r3, #0]
  return -1;
 8004c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <_exit>:

void _exit (int status)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ca4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7ff ffe7 	bl	8004c7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004cae:	e7fe      	b.n	8004cae <_exit+0x12>

08004cb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	e00a      	b.n	8004cd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004cc2:	f3af 8000 	nop.w
 8004cc6:	4601      	mov	r1, r0
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	60ba      	str	r2, [r7, #8]
 8004cce:	b2ca      	uxtb	r2, r1
 8004cd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	dbf0      	blt.n	8004cc2 <_read+0x12>
  }

  return len;
 8004ce0:	687b      	ldr	r3, [r7, #4]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b086      	sub	sp, #24
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	e009      	b.n	8004d10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	60ba      	str	r2, [r7, #8]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	dbf1      	blt.n	8004cfc <_write+0x12>
  }
  return len;
 8004d18:	687b      	ldr	r3, [r7, #4]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <_close>:

int _close(int file)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d4a:	605a      	str	r2, [r3, #4]
  return 0;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <_isatty>:

int _isatty(int file)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004d62:	2301      	movs	r3, #1
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
	...

08004d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d94:	4a14      	ldr	r2, [pc, #80]	; (8004de8 <_sbrk+0x5c>)
 8004d96:	4b15      	ldr	r3, [pc, #84]	; (8004dec <_sbrk+0x60>)
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004da0:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <_sbrk+0x64>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004da8:	4b11      	ldr	r3, [pc, #68]	; (8004df0 <_sbrk+0x64>)
 8004daa:	4a12      	ldr	r2, [pc, #72]	; (8004df4 <_sbrk+0x68>)
 8004dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004dae:	4b10      	ldr	r3, [pc, #64]	; (8004df0 <_sbrk+0x64>)
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4413      	add	r3, r2
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d207      	bcs.n	8004dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004dbc:	f00e f818 	bl	8012df0 <__errno>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	220c      	movs	r2, #12
 8004dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dca:	e009      	b.n	8004de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004dcc:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <_sbrk+0x64>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004dd2:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <_sbrk+0x64>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4413      	add	r3, r2
 8004dda:	4a05      	ldr	r2, [pc, #20]	; (8004df0 <_sbrk+0x64>)
 8004ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004dde:	68fb      	ldr	r3, [r7, #12]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20020000 	.word	0x20020000
 8004dec:	00000400 	.word	0x00000400
 8004df0:	20004118 	.word	0x20004118
 8004df4:	20009ed0 	.word	0x20009ed0

08004df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004dfc:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <SystemInit+0x20>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e02:	4a05      	ldr	r2, [pc, #20]	; (8004e18 <SystemInit+0x20>)
 8004e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e0c:	bf00      	nop
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	e000ed00 	.word	0xe000ed00

08004e1c <vApplicationIdleHook>:
	}
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook (void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
	printf("."); fflush(stdout);
 8004e20:	202e      	movs	r0, #46	; 0x2e
 8004e22:	f00d fe49 	bl	8012ab8 <putchar>
 8004e26:	4b04      	ldr	r3, [pc, #16]	; (8004e38 <vApplicationIdleHook+0x1c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f00d fd5b 	bl	80128e8 <fflush>
}
 8004e32:	bf00      	nop
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	2000043c 	.word	0x2000043c

08004e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004e40:	f7ff ffda 	bl	8004df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e44:	480c      	ldr	r0, [pc, #48]	; (8004e78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004e46:	490d      	ldr	r1, [pc, #52]	; (8004e7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004e48:	4a0d      	ldr	r2, [pc, #52]	; (8004e80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e4c:	e002      	b.n	8004e54 <LoopCopyDataInit>

08004e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e52:	3304      	adds	r3, #4

08004e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e58:	d3f9      	bcc.n	8004e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e5a:	4a0a      	ldr	r2, [pc, #40]	; (8004e84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e5c:	4c0a      	ldr	r4, [pc, #40]	; (8004e88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e60:	e001      	b.n	8004e66 <LoopFillZerobss>

08004e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e64:	3204      	adds	r2, #4

08004e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e68:	d3fb      	bcc.n	8004e62 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8004e6a:	f00d ffc7 	bl	8012dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e6e:	f7fe ffbb 	bl	8003de8 <main>
  bx  lr    
 8004e72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004e74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e7c:	200005ac 	.word	0x200005ac
  ldr r2, =_sidata
 8004e80:	0801694c 	.word	0x0801694c
  ldr r2, =_sbss
 8004e84:	20001d38 	.word	0x20001d38
  ldr r4, =_ebss
 8004e88:	20009ed0 	.word	0x20009ed0

08004e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e8c:	e7fe      	b.n	8004e8c <ADC_IRQHandler>
	...

08004e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e94:	4b0e      	ldr	r3, [pc, #56]	; (8004ed0 <HAL_Init+0x40>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a0d      	ldr	r2, [pc, #52]	; (8004ed0 <HAL_Init+0x40>)
 8004e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <HAL_Init+0x40>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a0a      	ldr	r2, [pc, #40]	; (8004ed0 <HAL_Init+0x40>)
 8004ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004eaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004eac:	4b08      	ldr	r3, [pc, #32]	; (8004ed0 <HAL_Init+0x40>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a07      	ldr	r2, [pc, #28]	; (8004ed0 <HAL_Init+0x40>)
 8004eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004eb8:	2003      	movs	r0, #3
 8004eba:	f000 fd61 	bl	8005980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ebe:	200f      	movs	r0, #15
 8004ec0:	f000 f808 	bl	8004ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ec4:	f7ff fbc0 	bl	8004648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40023c00 	.word	0x40023c00

08004ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004edc:	4b12      	ldr	r3, [pc, #72]	; (8004f28 <HAL_InitTick+0x54>)
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	4b12      	ldr	r3, [pc, #72]	; (8004f2c <HAL_InitTick+0x58>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8004eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fd79 	bl	80059ea <HAL_SYSTICK_Config>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e00e      	b.n	8004f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b0f      	cmp	r3, #15
 8004f06:	d80a      	bhi.n	8004f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f08:	2200      	movs	r2, #0
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f10:	f000 fd41 	bl	8005996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f14:	4a06      	ldr	r2, [pc, #24]	; (8004f30 <HAL_InitTick+0x5c>)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	e000      	b.n	8004f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	200002e4 	.word	0x200002e4
 8004f2c:	200002ec 	.word	0x200002ec
 8004f30:	200002e8 	.word	0x200002e8

08004f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f38:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <HAL_IncTick+0x20>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <HAL_IncTick+0x24>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4413      	add	r3, r2
 8004f44:	4a04      	ldr	r2, [pc, #16]	; (8004f58 <HAL_IncTick+0x24>)
 8004f46:	6013      	str	r3, [r2, #0]
}
 8004f48:	bf00      	nop
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	200002ec 	.word	0x200002ec
 8004f58:	2000411c 	.word	0x2000411c

08004f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8004f60:	4b03      	ldr	r3, [pc, #12]	; (8004f70 <HAL_GetTick+0x14>)
 8004f62:	681b      	ldr	r3, [r3, #0]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	2000411c 	.word	0x2000411c

08004f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f7c:	f7ff ffee 	bl	8004f5c <HAL_GetTick>
 8004f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f8c:	d005      	beq.n	8004f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f8e:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <HAL_Delay+0x44>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f9a:	bf00      	nop
 8004f9c:	f7ff ffde 	bl	8004f5c <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d8f7      	bhi.n	8004f9c <HAL_Delay+0x28>
  {
  }
}
 8004fac:	bf00      	nop
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	200002ec 	.word	0x200002ec

08004fbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e033      	b.n	800503a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d109      	bne.n	8004fee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff fb68 	bl	80046b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	f003 0310 	and.w	r3, r3, #16
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d118      	bne.n	800502c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005002:	f023 0302 	bic.w	r3, r3, #2
 8005006:	f043 0202 	orr.w	r2, r3, #2
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 fa68 	bl	80054e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	f023 0303 	bic.w	r3, r3, #3
 8005022:	f043 0201 	orr.w	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	641a      	str	r2, [r3, #64]	; 0x40
 800502a:	e001      	b.n	8005030 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005038:	7bfb      	ldrb	r3, [r7, #15]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_ADC_Start_DMA+0x1e>
 800505e:	2302      	movs	r3, #2
 8005060:	e0e9      	b.n	8005236 <HAL_ADC_Start_DMA+0x1f2>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b01      	cmp	r3, #1
 8005076:	d018      	beq.n	80050aa <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005088:	4b6d      	ldr	r3, [pc, #436]	; (8005240 <HAL_ADC_Start_DMA+0x1fc>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a6d      	ldr	r2, [pc, #436]	; (8005244 <HAL_ADC_Start_DMA+0x200>)
 800508e:	fba2 2303 	umull	r2, r3, r2, r3
 8005092:	0c9a      	lsrs	r2, r3, #18
 8005094:	4613      	mov	r3, r2
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	4413      	add	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800509c:	e002      	b.n	80050a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f9      	bne.n	800509e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b8:	d107      	bne.n	80050ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050c8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	f040 80a1 	bne.w	800521c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80050e2:	f023 0301 	bic.w	r3, r3, #1
 80050e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d007      	beq.n	800510c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005100:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005104:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005118:	d106      	bne.n	8005128 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	f023 0206 	bic.w	r2, r3, #6
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	645a      	str	r2, [r3, #68]	; 0x44
 8005126:	e002      	b.n	800512e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005136:	4b44      	ldr	r3, [pc, #272]	; (8005248 <HAL_ADC_Start_DMA+0x204>)
 8005138:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	4a43      	ldr	r2, [pc, #268]	; (800524c <HAL_ADC_Start_DMA+0x208>)
 8005140:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	4a42      	ldr	r2, [pc, #264]	; (8005250 <HAL_ADC_Start_DMA+0x20c>)
 8005148:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	4a41      	ldr	r2, [pc, #260]	; (8005254 <HAL_ADC_Start_DMA+0x210>)
 8005150:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800515a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800516a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800517a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	334c      	adds	r3, #76	; 0x4c
 8005186:	4619      	mov	r1, r3
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f000 fce8 	bl	8005b60 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f003 031f 	and.w	r3, r3, #31
 8005198:	2b00      	cmp	r3, #0
 800519a:	d12a      	bne.n	80051f2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a2d      	ldr	r2, [pc, #180]	; (8005258 <HAL_ADC_Start_DMA+0x214>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d015      	beq.n	80051d2 <HAL_ADC_Start_DMA+0x18e>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a2c      	ldr	r2, [pc, #176]	; (800525c <HAL_ADC_Start_DMA+0x218>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d105      	bne.n	80051bc <HAL_ADC_Start_DMA+0x178>
 80051b0:	4b25      	ldr	r3, [pc, #148]	; (8005248 <HAL_ADC_Start_DMA+0x204>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f003 031f 	and.w	r3, r3, #31
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a27      	ldr	r2, [pc, #156]	; (8005260 <HAL_ADC_Start_DMA+0x21c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d136      	bne.n	8005234 <HAL_ADC_Start_DMA+0x1f0>
 80051c6:	4b20      	ldr	r3, [pc, #128]	; (8005248 <HAL_ADC_Start_DMA+0x204>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d130      	bne.n	8005234 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d129      	bne.n	8005234 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80051ee:	609a      	str	r2, [r3, #8]
 80051f0:	e020      	b.n	8005234 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a18      	ldr	r2, [pc, #96]	; (8005258 <HAL_ADC_Start_DMA+0x214>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d11b      	bne.n	8005234 <HAL_ADC_Start_DMA+0x1f0>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d114      	bne.n	8005234 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005218:	609a      	str	r2, [r3, #8]
 800521a:	e00b      	b.n	8005234 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	f043 0210 	orr.w	r2, r3, #16
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522c:	f043 0201 	orr.w	r2, r3, #1
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	200002e4 	.word	0x200002e4
 8005244:	431bde83 	.word	0x431bde83
 8005248:	40012300 	.word	0x40012300
 800524c:	080056dd 	.word	0x080056dd
 8005250:	08005797 	.word	0x08005797
 8005254:	080057b3 	.word	0x080057b3
 8005258:	40012000 	.word	0x40012000
 800525c:	40012100 	.word	0x40012100
 8005260:	40012200 	.word	0x40012200

08005264 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <HAL_ADC_ConfigChannel+0x1c>
 80052b8:	2302      	movs	r3, #2
 80052ba:	e105      	b.n	80054c8 <HAL_ADC_ConfigChannel+0x228>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b09      	cmp	r3, #9
 80052ca:	d925      	bls.n	8005318 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68d9      	ldr	r1, [r3, #12]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	461a      	mov	r2, r3
 80052da:	4613      	mov	r3, r2
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	4413      	add	r3, r2
 80052e0:	3b1e      	subs	r3, #30
 80052e2:	2207      	movs	r2, #7
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	43da      	mvns	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	400a      	ands	r2, r1
 80052f0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68d9      	ldr	r1, [r3, #12]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	b29b      	uxth	r3, r3
 8005302:	4618      	mov	r0, r3
 8005304:	4603      	mov	r3, r0
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	4403      	add	r3, r0
 800530a:	3b1e      	subs	r3, #30
 800530c:	409a      	lsls	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	60da      	str	r2, [r3, #12]
 8005316:	e022      	b.n	800535e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6919      	ldr	r1, [r3, #16]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	4613      	mov	r3, r2
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	4413      	add	r3, r2
 800532c:	2207      	movs	r2, #7
 800532e:	fa02 f303 	lsl.w	r3, r2, r3
 8005332:	43da      	mvns	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	400a      	ands	r2, r1
 800533a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6919      	ldr	r1, [r3, #16]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	b29b      	uxth	r3, r3
 800534c:	4618      	mov	r0, r3
 800534e:	4603      	mov	r3, r0
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	4403      	add	r3, r0
 8005354:	409a      	lsls	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b06      	cmp	r3, #6
 8005364:	d824      	bhi.n	80053b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	3b05      	subs	r3, #5
 8005378:	221f      	movs	r2, #31
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	43da      	mvns	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	400a      	ands	r2, r1
 8005386:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	b29b      	uxth	r3, r3
 8005394:	4618      	mov	r0, r3
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	3b05      	subs	r3, #5
 80053a2:	fa00 f203 	lsl.w	r2, r0, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	635a      	str	r2, [r3, #52]	; 0x34
 80053ae:	e04c      	b.n	800544a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b0c      	cmp	r3, #12
 80053b6:	d824      	bhi.n	8005402 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	3b23      	subs	r3, #35	; 0x23
 80053ca:	221f      	movs	r2, #31
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	43da      	mvns	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	400a      	ands	r2, r1
 80053d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	4618      	mov	r0, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	3b23      	subs	r3, #35	; 0x23
 80053f4:	fa00 f203 	lsl.w	r2, r0, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	631a      	str	r2, [r3, #48]	; 0x30
 8005400:	e023      	b.n	800544a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	3b41      	subs	r3, #65	; 0x41
 8005414:	221f      	movs	r2, #31
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43da      	mvns	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	400a      	ands	r2, r1
 8005422:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	b29b      	uxth	r3, r3
 8005430:	4618      	mov	r0, r3
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	4613      	mov	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	3b41      	subs	r3, #65	; 0x41
 800543e:	fa00 f203 	lsl.w	r2, r0, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800544a:	4b22      	ldr	r3, [pc, #136]	; (80054d4 <HAL_ADC_ConfigChannel+0x234>)
 800544c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a21      	ldr	r2, [pc, #132]	; (80054d8 <HAL_ADC_ConfigChannel+0x238>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d109      	bne.n	800546c <HAL_ADC_ConfigChannel+0x1cc>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b12      	cmp	r3, #18
 800545e:	d105      	bne.n	800546c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a19      	ldr	r2, [pc, #100]	; (80054d8 <HAL_ADC_ConfigChannel+0x238>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d123      	bne.n	80054be <HAL_ADC_ConfigChannel+0x21e>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b10      	cmp	r3, #16
 800547c:	d003      	beq.n	8005486 <HAL_ADC_ConfigChannel+0x1e6>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b11      	cmp	r3, #17
 8005484:	d11b      	bne.n	80054be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b10      	cmp	r3, #16
 8005498:	d111      	bne.n	80054be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800549a:	4b10      	ldr	r3, [pc, #64]	; (80054dc <HAL_ADC_ConfigChannel+0x23c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a10      	ldr	r2, [pc, #64]	; (80054e0 <HAL_ADC_ConfigChannel+0x240>)
 80054a0:	fba2 2303 	umull	r2, r3, r2, r3
 80054a4:	0c9a      	lsrs	r2, r3, #18
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80054b0:	e002      	b.n	80054b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	3b01      	subs	r3, #1
 80054b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1f9      	bne.n	80054b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	40012300 	.word	0x40012300
 80054d8:	40012000 	.word	0x40012000
 80054dc:	200002e4 	.word	0x200002e4
 80054e0:	431bde83 	.word	0x431bde83

080054e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80054ec:	4b79      	ldr	r3, [pc, #484]	; (80056d4 <ADC_Init+0x1f0>)
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	431a      	orrs	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005518:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6859      	ldr	r1, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	021a      	lsls	r2, r3, #8
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800553c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6859      	ldr	r1, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800555e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6899      	ldr	r1, [r3, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005576:	4a58      	ldr	r2, [pc, #352]	; (80056d8 <ADC_Init+0x1f4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d022      	beq.n	80055c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800558a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6899      	ldr	r1, [r3, #8]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6899      	ldr	r1, [r3, #8]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	609a      	str	r2, [r3, #8]
 80055c0:	e00f      	b.n	80055e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0202 	bic.w	r2, r2, #2
 80055f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6899      	ldr	r1, [r3, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	7e1b      	ldrb	r3, [r3, #24]
 80055fc:	005a      	lsls	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d01b      	beq.n	8005648 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800561e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800562e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6859      	ldr	r1, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	3b01      	subs	r3, #1
 800563c:	035a      	lsls	r2, r3, #13
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]
 8005646:	e007      	b.n	8005658 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005656:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005666:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	3b01      	subs	r3, #1
 8005674:	051a      	lsls	r2, r3, #20
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800568c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6899      	ldr	r1, [r3, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800569a:	025a      	lsls	r2, r3, #9
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6899      	ldr	r1, [r3, #8]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	029a      	lsls	r2, r3, #10
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	609a      	str	r2, [r3, #8]
}
 80056c8:	bf00      	nop
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	40012300 	.word	0x40012300
 80056d8:	0f000001 	.word	0x0f000001

080056dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d13c      	bne.n	8005770 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d12b      	bne.n	8005768 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005714:	2b00      	cmp	r3, #0
 8005716:	d127      	bne.n	8005768 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005722:	2b00      	cmp	r3, #0
 8005724:	d006      	beq.n	8005734 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005730:	2b00      	cmp	r3, #0
 8005732:	d119      	bne.n	8005768 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0220 	bic.w	r2, r2, #32
 8005742:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d105      	bne.n	8005768 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	f043 0201 	orr.w	r2, r3, #1
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f7ff fd7b 	bl	8005264 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800576e:	e00e      	b.n	800578e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f7ff fd85 	bl	800528c <HAL_ADC_ErrorCallback>
}
 8005782:	e004      	b.n	800578e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	4798      	blx	r3
}
 800578e:	bf00      	nop
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b084      	sub	sp, #16
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f7ff fd67 	bl	8005278 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b084      	sub	sp, #16
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057be:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2240      	movs	r2, #64	; 0x40
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ca:	f043 0204 	orr.w	r2, r3, #4
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f7ff fd5a 	bl	800528c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057d8:	bf00      	nop
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <__NVIC_SetPriorityGrouping>:
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057f0:	4b0c      	ldr	r3, [pc, #48]	; (8005824 <__NVIC_SetPriorityGrouping+0x44>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057fc:	4013      	ands	r3, r2
 80057fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800580c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005812:	4a04      	ldr	r2, [pc, #16]	; (8005824 <__NVIC_SetPriorityGrouping+0x44>)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	60d3      	str	r3, [r2, #12]
}
 8005818:	bf00      	nop
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	e000ed00 	.word	0xe000ed00

08005828 <__NVIC_GetPriorityGrouping>:
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800582c:	4b04      	ldr	r3, [pc, #16]	; (8005840 <__NVIC_GetPriorityGrouping+0x18>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	0a1b      	lsrs	r3, r3, #8
 8005832:	f003 0307 	and.w	r3, r3, #7
}
 8005836:	4618      	mov	r0, r3
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	e000ed00 	.word	0xe000ed00

08005844 <__NVIC_EnableIRQ>:
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800584e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005852:	2b00      	cmp	r3, #0
 8005854:	db0b      	blt.n	800586e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	f003 021f 	and.w	r2, r3, #31
 800585c:	4907      	ldr	r1, [pc, #28]	; (800587c <__NVIC_EnableIRQ+0x38>)
 800585e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	2001      	movs	r0, #1
 8005866:	fa00 f202 	lsl.w	r2, r0, r2
 800586a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	e000e100 	.word	0xe000e100

08005880 <__NVIC_SetPriority>:
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	6039      	str	r1, [r7, #0]
 800588a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800588c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005890:	2b00      	cmp	r3, #0
 8005892:	db0a      	blt.n	80058aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	b2da      	uxtb	r2, r3
 8005898:	490c      	ldr	r1, [pc, #48]	; (80058cc <__NVIC_SetPriority+0x4c>)
 800589a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589e:	0112      	lsls	r2, r2, #4
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	440b      	add	r3, r1
 80058a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80058a8:	e00a      	b.n	80058c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	4908      	ldr	r1, [pc, #32]	; (80058d0 <__NVIC_SetPriority+0x50>)
 80058b0:	79fb      	ldrb	r3, [r7, #7]
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	3b04      	subs	r3, #4
 80058b8:	0112      	lsls	r2, r2, #4
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	440b      	add	r3, r1
 80058be:	761a      	strb	r2, [r3, #24]
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	e000e100 	.word	0xe000e100
 80058d0:	e000ed00 	.word	0xe000ed00

080058d4 <NVIC_EncodePriority>:
{
 80058d4:	b480      	push	{r7}
 80058d6:	b089      	sub	sp, #36	; 0x24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f1c3 0307 	rsb	r3, r3, #7
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	bf28      	it	cs
 80058f2:	2304      	movcs	r3, #4
 80058f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	3304      	adds	r3, #4
 80058fa:	2b06      	cmp	r3, #6
 80058fc:	d902      	bls.n	8005904 <NVIC_EncodePriority+0x30>
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	3b03      	subs	r3, #3
 8005902:	e000      	b.n	8005906 <NVIC_EncodePriority+0x32>
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	43da      	mvns	r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	401a      	ands	r2, r3
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800591c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	fa01 f303 	lsl.w	r3, r1, r3
 8005926:	43d9      	mvns	r1, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800592c:	4313      	orrs	r3, r2
}
 800592e:	4618      	mov	r0, r3
 8005930:	3724      	adds	r7, #36	; 0x24
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
	...

0800593c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3b01      	subs	r3, #1
 8005948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800594c:	d301      	bcc.n	8005952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800594e:	2301      	movs	r3, #1
 8005950:	e00f      	b.n	8005972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005952:	4a0a      	ldr	r2, [pc, #40]	; (800597c <SysTick_Config+0x40>)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3b01      	subs	r3, #1
 8005958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800595a:	210f      	movs	r1, #15
 800595c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005960:	f7ff ff8e 	bl	8005880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005964:	4b05      	ldr	r3, [pc, #20]	; (800597c <SysTick_Config+0x40>)
 8005966:	2200      	movs	r2, #0
 8005968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800596a:	4b04      	ldr	r3, [pc, #16]	; (800597c <SysTick_Config+0x40>)
 800596c:	2207      	movs	r2, #7
 800596e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	e000e010 	.word	0xe000e010

08005980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff ff29 	bl	80057e0 <__NVIC_SetPriorityGrouping>
}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005996:	b580      	push	{r7, lr}
 8005998:	b086      	sub	sp, #24
 800599a:	af00      	add	r7, sp, #0
 800599c:	4603      	mov	r3, r0
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	607a      	str	r2, [r7, #4]
 80059a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059a8:	f7ff ff3e 	bl	8005828 <__NVIC_GetPriorityGrouping>
 80059ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	68b9      	ldr	r1, [r7, #8]
 80059b2:	6978      	ldr	r0, [r7, #20]
 80059b4:	f7ff ff8e 	bl	80058d4 <NVIC_EncodePriority>
 80059b8:	4602      	mov	r2, r0
 80059ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059be:	4611      	mov	r1, r2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff ff5d 	bl	8005880 <__NVIC_SetPriority>
}
 80059c6:	bf00      	nop
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b082      	sub	sp, #8
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	4603      	mov	r3, r0
 80059d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff ff31 	bl	8005844 <__NVIC_EnableIRQ>
}
 80059e2:	bf00      	nop
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b082      	sub	sp, #8
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff ffa2 	bl	800593c <SysTick_Config>
 80059f8:	4603      	mov	r3, r0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a10:	f7ff faa4 	bl	8004f5c <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e099      	b.n	8005b54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 0201 	bic.w	r2, r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a40:	e00f      	b.n	8005a62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a42:	f7ff fa8b 	bl	8004f5c <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b05      	cmp	r3, #5
 8005a4e:	d908      	bls.n	8005a62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2203      	movs	r2, #3
 8005a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e078      	b.n	8005b54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e8      	bne.n	8005a42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4b38      	ldr	r3, [pc, #224]	; (8005b5c <HAL_DMA_Init+0x158>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005aa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d107      	bne.n	8005acc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f023 0307 	bic.w	r3, r3, #7
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d117      	bne.n	8005b26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00e      	beq.n	8005b26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fb01 	bl	8006110 <DMA_CheckFifoParam>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2240      	movs	r2, #64	; 0x40
 8005b18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005b22:	2301      	movs	r3, #1
 8005b24:	e016      	b.n	8005b54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fab8 	bl	80060a4 <DMA_CalcBaseAndBitshift>
 8005b34:	4603      	mov	r3, r0
 8005b36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b3c:	223f      	movs	r2, #63	; 0x3f
 8005b3e:	409a      	lsls	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3718      	adds	r7, #24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	f010803f 	.word	0xf010803f

08005b60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
 8005b6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <HAL_DMA_Start_IT+0x26>
 8005b82:	2302      	movs	r3, #2
 8005b84:	e040      	b.n	8005c08 <HAL_DMA_Start_IT+0xa8>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d12f      	bne.n	8005bfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	68b9      	ldr	r1, [r7, #8]
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 fa4a 	bl	8006048 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb8:	223f      	movs	r2, #63	; 0x3f
 8005bba:	409a      	lsls	r2, r3
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0216 	orr.w	r2, r2, #22
 8005bce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d007      	beq.n	8005be8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0208 	orr.w	r2, r2, #8
 8005be6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	e005      	b.n	8005c06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c02:	2302      	movs	r3, #2
 8005c04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005c1e:	f7ff f99d 	bl	8004f5c <HAL_GetTick>
 8005c22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d008      	beq.n	8005c42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2280      	movs	r2, #128	; 0x80
 8005c34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e052      	b.n	8005ce8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0216 	bic.w	r2, r2, #22
 8005c50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	695a      	ldr	r2, [r3, #20]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d103      	bne.n	8005c72 <HAL_DMA_Abort+0x62>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d007      	beq.n	8005c82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0208 	bic.w	r2, r2, #8
 8005c80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0201 	bic.w	r2, r2, #1
 8005c90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c92:	e013      	b.n	8005cbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c94:	f7ff f962 	bl	8004f5c <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b05      	cmp	r3, #5
 8005ca0:	d90c      	bls.n	8005cbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2203      	movs	r2, #3
 8005cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e015      	b.n	8005ce8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e4      	bne.n	8005c94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cce:	223f      	movs	r2, #63	; 0x3f
 8005cd0:	409a      	lsls	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d004      	beq.n	8005d0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2280      	movs	r2, #128	; 0x80
 8005d08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e00c      	b.n	8005d28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2205      	movs	r2, #5
 8005d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0201 	bic.w	r2, r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d40:	4b8e      	ldr	r3, [pc, #568]	; (8005f7c <HAL_DMA_IRQHandler+0x248>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a8e      	ldr	r2, [pc, #568]	; (8005f80 <HAL_DMA_IRQHandler+0x24c>)
 8005d46:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4a:	0a9b      	lsrs	r3, r3, #10
 8005d4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5e:	2208      	movs	r2, #8
 8005d60:	409a      	lsls	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4013      	ands	r3, r2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d01a      	beq.n	8005da0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d013      	beq.n	8005da0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0204 	bic.w	r2, r2, #4
 8005d86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8c:	2208      	movs	r2, #8
 8005d8e:	409a      	lsls	r2, r3
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d98:	f043 0201 	orr.w	r2, r3, #1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da4:	2201      	movs	r2, #1
 8005da6:	409a      	lsls	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d012      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00b      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	409a      	lsls	r2, r3
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dce:	f043 0202 	orr.w	r2, r3, #2
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dda:	2204      	movs	r2, #4
 8005ddc:	409a      	lsls	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4013      	ands	r3, r2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d012      	beq.n	8005e0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00b      	beq.n	8005e0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df8:	2204      	movs	r2, #4
 8005dfa:	409a      	lsls	r2, r3
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e04:	f043 0204 	orr.w	r2, r3, #4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e10:	2210      	movs	r2, #16
 8005e12:	409a      	lsls	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4013      	ands	r3, r2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d043      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d03c      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e2e:	2210      	movs	r2, #16
 8005e30:	409a      	lsls	r2, r3
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d018      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d108      	bne.n	8005e64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d024      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	4798      	blx	r3
 8005e62:	e01f      	b.n	8005ea4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d01b      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	4798      	blx	r3
 8005e74:	e016      	b.n	8005ea4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d107      	bne.n	8005e94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 0208 	bic.w	r2, r2, #8
 8005e92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	409a      	lsls	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 808f 	beq.w	8005fd4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0310 	and.w	r3, r3, #16
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 8087 	beq.w	8005fd4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eca:	2220      	movs	r2, #32
 8005ecc:	409a      	lsls	r2, r3
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b05      	cmp	r3, #5
 8005edc:	d136      	bne.n	8005f4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0216 	bic.w	r2, r2, #22
 8005eec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	695a      	ldr	r2, [r3, #20]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005efc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d103      	bne.n	8005f0e <HAL_DMA_IRQHandler+0x1da>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0208 	bic.w	r2, r2, #8
 8005f1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f22:	223f      	movs	r2, #63	; 0x3f
 8005f24:	409a      	lsls	r2, r3
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d07e      	beq.n	8006040 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	4798      	blx	r3
        }
        return;
 8005f4a:	e079      	b.n	8006040 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d01d      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10d      	bne.n	8005f84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d031      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	4798      	blx	r3
 8005f78:	e02c      	b.n	8005fd4 <HAL_DMA_IRQHandler+0x2a0>
 8005f7a:	bf00      	nop
 8005f7c:	200002e4 	.word	0x200002e4
 8005f80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d023      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	4798      	blx	r3
 8005f94:	e01e      	b.n	8005fd4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10f      	bne.n	8005fc4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0210 	bic.w	r2, r2, #16
 8005fb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d032      	beq.n	8006042 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d022      	beq.n	800602e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2205      	movs	r2, #5
 8005fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0201 	bic.w	r2, r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	3301      	adds	r3, #1
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	429a      	cmp	r2, r3
 800600a:	d307      	bcc.n	800601c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1f2      	bne.n	8006000 <HAL_DMA_IRQHandler+0x2cc>
 800601a:	e000      	b.n	800601e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800601c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006032:	2b00      	cmp	r3, #0
 8006034:	d005      	beq.n	8006042 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	4798      	blx	r3
 800603e:	e000      	b.n	8006042 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006040:	bf00      	nop
    }
  }
}
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006064:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	2b40      	cmp	r3, #64	; 0x40
 8006074:	d108      	bne.n	8006088 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006086:	e007      	b.n	8006098 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	60da      	str	r2, [r3, #12]
}
 8006098:	bf00      	nop
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	3b10      	subs	r3, #16
 80060b4:	4a14      	ldr	r2, [pc, #80]	; (8006108 <DMA_CalcBaseAndBitshift+0x64>)
 80060b6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ba:	091b      	lsrs	r3, r3, #4
 80060bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80060be:	4a13      	ldr	r2, [pc, #76]	; (800610c <DMA_CalcBaseAndBitshift+0x68>)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4413      	add	r3, r2
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d909      	bls.n	80060e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80060da:	f023 0303 	bic.w	r3, r3, #3
 80060de:	1d1a      	adds	r2, r3, #4
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	659a      	str	r2, [r3, #88]	; 0x58
 80060e4:	e007      	b.n	80060f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80060ee:	f023 0303 	bic.w	r3, r3, #3
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	aaaaaaab 	.word	0xaaaaaaab
 800610c:	080165c4 	.word	0x080165c4

08006110 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006120:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d11f      	bne.n	800616a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b03      	cmp	r3, #3
 800612e:	d856      	bhi.n	80061de <DMA_CheckFifoParam+0xce>
 8006130:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <DMA_CheckFifoParam+0x28>)
 8006132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006136:	bf00      	nop
 8006138:	08006149 	.word	0x08006149
 800613c:	0800615b 	.word	0x0800615b
 8006140:	08006149 	.word	0x08006149
 8006144:	080061df 	.word	0x080061df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d046      	beq.n	80061e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006158:	e043      	b.n	80061e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006162:	d140      	bne.n	80061e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006168:	e03d      	b.n	80061e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006172:	d121      	bne.n	80061b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2b03      	cmp	r3, #3
 8006178:	d837      	bhi.n	80061ea <DMA_CheckFifoParam+0xda>
 800617a:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <DMA_CheckFifoParam+0x70>)
 800617c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006180:	08006191 	.word	0x08006191
 8006184:	08006197 	.word	0x08006197
 8006188:	08006191 	.word	0x08006191
 800618c:	080061a9 	.word	0x080061a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	73fb      	strb	r3, [r7, #15]
      break;
 8006194:	e030      	b.n	80061f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d025      	beq.n	80061ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061a6:	e022      	b.n	80061ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061b0:	d11f      	bne.n	80061f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80061b6:	e01c      	b.n	80061f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d903      	bls.n	80061c6 <DMA_CheckFifoParam+0xb6>
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d003      	beq.n	80061cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80061c4:	e018      	b.n	80061f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	73fb      	strb	r3, [r7, #15]
      break;
 80061ca:	e015      	b.n	80061f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00e      	beq.n	80061f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	73fb      	strb	r3, [r7, #15]
      break;
 80061dc:	e00b      	b.n	80061f6 <DMA_CheckFifoParam+0xe6>
      break;
 80061de:	bf00      	nop
 80061e0:	e00a      	b.n	80061f8 <DMA_CheckFifoParam+0xe8>
      break;
 80061e2:	bf00      	nop
 80061e4:	e008      	b.n	80061f8 <DMA_CheckFifoParam+0xe8>
      break;
 80061e6:	bf00      	nop
 80061e8:	e006      	b.n	80061f8 <DMA_CheckFifoParam+0xe8>
      break;
 80061ea:	bf00      	nop
 80061ec:	e004      	b.n	80061f8 <DMA_CheckFifoParam+0xe8>
      break;
 80061ee:	bf00      	nop
 80061f0:	e002      	b.n	80061f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80061f2:	bf00      	nop
 80061f4:	e000      	b.n	80061f8 <DMA_CheckFifoParam+0xe8>
      break;
 80061f6:	bf00      	nop
    }
  } 
  
  return status; 
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop

08006208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006208:	b480      	push	{r7}
 800620a:	b089      	sub	sp, #36	; 0x24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006212:	2300      	movs	r3, #0
 8006214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006216:	2300      	movs	r3, #0
 8006218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800621a:	2300      	movs	r3, #0
 800621c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800621e:	2300      	movs	r3, #0
 8006220:	61fb      	str	r3, [r7, #28]
 8006222:	e16b      	b.n	80064fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006224:	2201      	movs	r2, #1
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	fa02 f303 	lsl.w	r3, r2, r3
 800622c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	4013      	ands	r3, r2
 8006236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	429a      	cmp	r2, r3
 800623e:	f040 815a 	bne.w	80064f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	2b01      	cmp	r3, #1
 800624c:	d005      	beq.n	800625a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006256:	2b02      	cmp	r3, #2
 8006258:	d130      	bne.n	80062bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	2203      	movs	r2, #3
 8006266:	fa02 f303 	lsl.w	r3, r2, r3
 800626a:	43db      	mvns	r3, r3
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	4013      	ands	r3, r2
 8006270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	005b      	lsls	r3, r3, #1
 800627a:	fa02 f303 	lsl.w	r3, r2, r3
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	4313      	orrs	r3, r2
 8006282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006290:	2201      	movs	r2, #1
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	43db      	mvns	r3, r3
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	4013      	ands	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	091b      	lsrs	r3, r3, #4
 80062a6:	f003 0201 	and.w	r2, r3, #1
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	fa02 f303 	lsl.w	r3, r2, r3
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f003 0303 	and.w	r3, r3, #3
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d017      	beq.n	80062f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	2203      	movs	r2, #3
 80062d4:	fa02 f303 	lsl.w	r3, r2, r3
 80062d8:	43db      	mvns	r3, r3
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	4013      	ands	r3, r2
 80062de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	005b      	lsls	r3, r3, #1
 80062e8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f003 0303 	and.w	r3, r3, #3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d123      	bne.n	800634c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	08da      	lsrs	r2, r3, #3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3208      	adds	r2, #8
 800630c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	220f      	movs	r2, #15
 800631c:	fa02 f303 	lsl.w	r3, r2, r3
 8006320:	43db      	mvns	r3, r3
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	4013      	ands	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	fa02 f303 	lsl.w	r3, r2, r3
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	4313      	orrs	r3, r2
 800633c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	08da      	lsrs	r2, r3, #3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	3208      	adds	r2, #8
 8006346:	69b9      	ldr	r1, [r7, #24]
 8006348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	2203      	movs	r2, #3
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	43db      	mvns	r3, r3
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	4013      	ands	r3, r2
 8006362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f003 0203 	and.w	r2, r3, #3
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	fa02 f303 	lsl.w	r3, r2, r3
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	4313      	orrs	r3, r2
 8006378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 80b4 	beq.w	80064f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	4b60      	ldr	r3, [pc, #384]	; (8006514 <HAL_GPIO_Init+0x30c>)
 8006394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006396:	4a5f      	ldr	r2, [pc, #380]	; (8006514 <HAL_GPIO_Init+0x30c>)
 8006398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800639c:	6453      	str	r3, [r2, #68]	; 0x44
 800639e:	4b5d      	ldr	r3, [pc, #372]	; (8006514 <HAL_GPIO_Init+0x30c>)
 80063a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063aa:	4a5b      	ldr	r2, [pc, #364]	; (8006518 <HAL_GPIO_Init+0x310>)
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	089b      	lsrs	r3, r3, #2
 80063b0:	3302      	adds	r3, #2
 80063b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	f003 0303 	and.w	r3, r3, #3
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	220f      	movs	r2, #15
 80063c2:	fa02 f303 	lsl.w	r3, r2, r3
 80063c6:	43db      	mvns	r3, r3
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	4013      	ands	r3, r2
 80063cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a52      	ldr	r2, [pc, #328]	; (800651c <HAL_GPIO_Init+0x314>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d02b      	beq.n	800642e <HAL_GPIO_Init+0x226>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a51      	ldr	r2, [pc, #324]	; (8006520 <HAL_GPIO_Init+0x318>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d025      	beq.n	800642a <HAL_GPIO_Init+0x222>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a50      	ldr	r2, [pc, #320]	; (8006524 <HAL_GPIO_Init+0x31c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d01f      	beq.n	8006426 <HAL_GPIO_Init+0x21e>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a4f      	ldr	r2, [pc, #316]	; (8006528 <HAL_GPIO_Init+0x320>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d019      	beq.n	8006422 <HAL_GPIO_Init+0x21a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a4e      	ldr	r2, [pc, #312]	; (800652c <HAL_GPIO_Init+0x324>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d013      	beq.n	800641e <HAL_GPIO_Init+0x216>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a4d      	ldr	r2, [pc, #308]	; (8006530 <HAL_GPIO_Init+0x328>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00d      	beq.n	800641a <HAL_GPIO_Init+0x212>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a4c      	ldr	r2, [pc, #304]	; (8006534 <HAL_GPIO_Init+0x32c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d007      	beq.n	8006416 <HAL_GPIO_Init+0x20e>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a4b      	ldr	r2, [pc, #300]	; (8006538 <HAL_GPIO_Init+0x330>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d101      	bne.n	8006412 <HAL_GPIO_Init+0x20a>
 800640e:	2307      	movs	r3, #7
 8006410:	e00e      	b.n	8006430 <HAL_GPIO_Init+0x228>
 8006412:	2308      	movs	r3, #8
 8006414:	e00c      	b.n	8006430 <HAL_GPIO_Init+0x228>
 8006416:	2306      	movs	r3, #6
 8006418:	e00a      	b.n	8006430 <HAL_GPIO_Init+0x228>
 800641a:	2305      	movs	r3, #5
 800641c:	e008      	b.n	8006430 <HAL_GPIO_Init+0x228>
 800641e:	2304      	movs	r3, #4
 8006420:	e006      	b.n	8006430 <HAL_GPIO_Init+0x228>
 8006422:	2303      	movs	r3, #3
 8006424:	e004      	b.n	8006430 <HAL_GPIO_Init+0x228>
 8006426:	2302      	movs	r3, #2
 8006428:	e002      	b.n	8006430 <HAL_GPIO_Init+0x228>
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <HAL_GPIO_Init+0x228>
 800642e:	2300      	movs	r3, #0
 8006430:	69fa      	ldr	r2, [r7, #28]
 8006432:	f002 0203 	and.w	r2, r2, #3
 8006436:	0092      	lsls	r2, r2, #2
 8006438:	4093      	lsls	r3, r2
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	4313      	orrs	r3, r2
 800643e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006440:	4935      	ldr	r1, [pc, #212]	; (8006518 <HAL_GPIO_Init+0x310>)
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	089b      	lsrs	r3, r3, #2
 8006446:	3302      	adds	r3, #2
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800644e:	4b3b      	ldr	r3, [pc, #236]	; (800653c <HAL_GPIO_Init+0x334>)
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	43db      	mvns	r3, r3
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	4013      	ands	r3, r2
 800645c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	4313      	orrs	r3, r2
 8006470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006472:	4a32      	ldr	r2, [pc, #200]	; (800653c <HAL_GPIO_Init+0x334>)
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006478:	4b30      	ldr	r3, [pc, #192]	; (800653c <HAL_GPIO_Init+0x334>)
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	43db      	mvns	r3, r3
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	4013      	ands	r3, r2
 8006486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	4313      	orrs	r3, r2
 800649a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800649c:	4a27      	ldr	r2, [pc, #156]	; (800653c <HAL_GPIO_Init+0x334>)
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80064a2:	4b26      	ldr	r3, [pc, #152]	; (800653c <HAL_GPIO_Init+0x334>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	43db      	mvns	r3, r3
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	4013      	ands	r3, r2
 80064b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064c6:	4a1d      	ldr	r2, [pc, #116]	; (800653c <HAL_GPIO_Init+0x334>)
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064cc:	4b1b      	ldr	r3, [pc, #108]	; (800653c <HAL_GPIO_Init+0x334>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	43db      	mvns	r3, r3
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	4013      	ands	r3, r2
 80064da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d003      	beq.n	80064f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80064f0:	4a12      	ldr	r2, [pc, #72]	; (800653c <HAL_GPIO_Init+0x334>)
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	3301      	adds	r3, #1
 80064fa:	61fb      	str	r3, [r7, #28]
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	2b0f      	cmp	r3, #15
 8006500:	f67f ae90 	bls.w	8006224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop
 8006508:	3724      	adds	r7, #36	; 0x24
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	40023800 	.word	0x40023800
 8006518:	40013800 	.word	0x40013800
 800651c:	40020000 	.word	0x40020000
 8006520:	40020400 	.word	0x40020400
 8006524:	40020800 	.word	0x40020800
 8006528:	40020c00 	.word	0x40020c00
 800652c:	40021000 	.word	0x40021000
 8006530:	40021400 	.word	0x40021400
 8006534:	40021800 	.word	0x40021800
 8006538:	40021c00 	.word	0x40021c00
 800653c:	40013c00 	.word	0x40013c00

08006540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	807b      	strh	r3, [r7, #2]
 800654c:	4613      	mov	r3, r2
 800654e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006550:	787b      	ldrb	r3, [r7, #1]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006556:	887a      	ldrh	r2, [r7, #2]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800655c:	e003      	b.n	8006566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800655e:	887b      	ldrh	r3, [r7, #2]
 8006560:	041a      	lsls	r2, r3, #16
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	619a      	str	r2, [r3, #24]
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b086      	sub	sp, #24
 8006576:	af02      	add	r7, sp, #8
 8006578:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e101      	b.n	8006788 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d106      	bne.n	80065a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f00b f97a 	bl	8011898 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2203      	movs	r2, #3
 80065a8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065b2:	d102      	bne.n	80065ba <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4618      	mov	r0, r3
 80065c0:	f004 fa0f 	bl	800a9e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6818      	ldr	r0, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	7c1a      	ldrb	r2, [r3, #16]
 80065cc:	f88d 2000 	strb.w	r2, [sp]
 80065d0:	3304      	adds	r3, #4
 80065d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065d4:	f004 f8ed 	bl	800a7b2 <USB_CoreInit>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2202      	movs	r2, #2
 80065e2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e0ce      	b.n	8006788 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2100      	movs	r1, #0
 80065f0:	4618      	mov	r0, r3
 80065f2:	f004 fa07 	bl	800aa04 <USB_SetCurrentMode>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d005      	beq.n	8006608 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e0bf      	b.n	8006788 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006608:	2300      	movs	r3, #0
 800660a:	73fb      	strb	r3, [r7, #15]
 800660c:	e04a      	b.n	80066a4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800660e:	7bfa      	ldrb	r2, [r7, #15]
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	4613      	mov	r3, r2
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	440b      	add	r3, r1
 800661c:	3315      	adds	r3, #21
 800661e:	2201      	movs	r2, #1
 8006620:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006622:	7bfa      	ldrb	r2, [r7, #15]
 8006624:	6879      	ldr	r1, [r7, #4]
 8006626:	4613      	mov	r3, r2
 8006628:	00db      	lsls	r3, r3, #3
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	3314      	adds	r3, #20
 8006632:	7bfa      	ldrb	r2, [r7, #15]
 8006634:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006636:	7bfa      	ldrb	r2, [r7, #15]
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	b298      	uxth	r0, r3
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	4613      	mov	r3, r2
 8006640:	00db      	lsls	r3, r3, #3
 8006642:	4413      	add	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	440b      	add	r3, r1
 8006648:	332e      	adds	r3, #46	; 0x2e
 800664a:	4602      	mov	r2, r0
 800664c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800664e:	7bfa      	ldrb	r2, [r7, #15]
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	4613      	mov	r3, r2
 8006654:	00db      	lsls	r3, r3, #3
 8006656:	4413      	add	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	440b      	add	r3, r1
 800665c:	3318      	adds	r3, #24
 800665e:	2200      	movs	r2, #0
 8006660:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006662:	7bfa      	ldrb	r2, [r7, #15]
 8006664:	6879      	ldr	r1, [r7, #4]
 8006666:	4613      	mov	r3, r2
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	4413      	add	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	440b      	add	r3, r1
 8006670:	331c      	adds	r3, #28
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006676:	7bfa      	ldrb	r2, [r7, #15]
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	4613      	mov	r3, r2
 800667c:	00db      	lsls	r3, r3, #3
 800667e:	4413      	add	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	440b      	add	r3, r1
 8006684:	3320      	adds	r3, #32
 8006686:	2200      	movs	r2, #0
 8006688:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800668a:	7bfa      	ldrb	r2, [r7, #15]
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	4613      	mov	r3, r2
 8006690:	00db      	lsls	r3, r3, #3
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	440b      	add	r3, r1
 8006698:	3324      	adds	r3, #36	; 0x24
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800669e:	7bfb      	ldrb	r3, [r7, #15]
 80066a0:	3301      	adds	r3, #1
 80066a2:	73fb      	strb	r3, [r7, #15]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	791b      	ldrb	r3, [r3, #4]
 80066a8:	7bfa      	ldrb	r2, [r7, #15]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d3af      	bcc.n	800660e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066ae:	2300      	movs	r3, #0
 80066b0:	73fb      	strb	r3, [r7, #15]
 80066b2:	e044      	b.n	800673e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80066b4:	7bfa      	ldrb	r2, [r7, #15]
 80066b6:	6879      	ldr	r1, [r7, #4]
 80066b8:	4613      	mov	r3, r2
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	440b      	add	r3, r1
 80066c2:	f203 2355 	addw	r3, r3, #597	; 0x255
 80066c6:	2200      	movs	r2, #0
 80066c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80066ca:	7bfa      	ldrb	r2, [r7, #15]
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	4613      	mov	r3, r2
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	4413      	add	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	440b      	add	r3, r1
 80066d8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80066dc:	7bfa      	ldrb	r2, [r7, #15]
 80066de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80066e0:	7bfa      	ldrb	r2, [r7, #15]
 80066e2:	6879      	ldr	r1, [r7, #4]
 80066e4:	4613      	mov	r3, r2
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	4413      	add	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	440b      	add	r3, r1
 80066ee:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80066f2:	2200      	movs	r2, #0
 80066f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80066f6:	7bfa      	ldrb	r2, [r7, #15]
 80066f8:	6879      	ldr	r1, [r7, #4]
 80066fa:	4613      	mov	r3, r2
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	440b      	add	r3, r1
 8006704:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800670c:	7bfa      	ldrb	r2, [r7, #15]
 800670e:	6879      	ldr	r1, [r7, #4]
 8006710:	4613      	mov	r3, r2
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	440b      	add	r3, r1
 800671a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006722:	7bfa      	ldrb	r2, [r7, #15]
 8006724:	6879      	ldr	r1, [r7, #4]
 8006726:	4613      	mov	r3, r2
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	4413      	add	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	440b      	add	r3, r1
 8006730:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	3301      	adds	r3, #1
 800673c:	73fb      	strb	r3, [r7, #15]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	791b      	ldrb	r3, [r3, #4]
 8006742:	7bfa      	ldrb	r2, [r7, #15]
 8006744:	429a      	cmp	r2, r3
 8006746:	d3b5      	bcc.n	80066b4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6818      	ldr	r0, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	7c1a      	ldrb	r2, [r3, #16]
 8006750:	f88d 2000 	strb.w	r2, [sp]
 8006754:	3304      	adds	r3, #4
 8006756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006758:	f004 f9a0 	bl	800aa9c <USB_DevInit>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d005      	beq.n	800676e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2202      	movs	r2, #2
 8006766:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e00c      	b.n	8006788 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4618      	mov	r0, r3
 8006782:	f005 f9e4 	bl	800bb4e <USB_DevDisconnect>

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_PCD_Start+0x1c>
 80067a8:	2302      	movs	r3, #2
 80067aa:	e022      	b.n	80067f2 <HAL_PCD_Start+0x62>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d009      	beq.n	80067d4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d105      	bne.n	80067d4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4618      	mov	r0, r3
 80067da:	f004 f8f1 	bl	800a9c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f005 f992 	bl	800bb0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80067fa:	b590      	push	{r4, r7, lr}
 80067fc:	b08d      	sub	sp, #52	; 0x34
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4618      	mov	r0, r3
 8006812:	f005 fa50 	bl	800bcb6 <USB_GetMode>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	f040 848c 	bne.w	8007136 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f005 f9b4 	bl	800bb90 <USB_ReadInterrupts>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	f000 8482 	beq.w	8007134 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	0a1b      	lsrs	r3, r3, #8
 800683a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4618      	mov	r0, r3
 800684a:	f005 f9a1 	bl	800bb90 <USB_ReadInterrupts>
 800684e:	4603      	mov	r3, r0
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b02      	cmp	r3, #2
 8006856:	d107      	bne.n	8006868 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	695a      	ldr	r2, [r3, #20]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f002 0202 	and.w	r2, r2, #2
 8006866:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4618      	mov	r0, r3
 800686e:	f005 f98f 	bl	800bb90 <USB_ReadInterrupts>
 8006872:	4603      	mov	r3, r0
 8006874:	f003 0310 	and.w	r3, r3, #16
 8006878:	2b10      	cmp	r3, #16
 800687a:	d161      	bne.n	8006940 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	699a      	ldr	r2, [r3, #24]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0210 	bic.w	r2, r2, #16
 800688a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	f003 020f 	and.w	r2, r3, #15
 8006898:	4613      	mov	r3, r2
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	4413      	add	r3, r2
 80068a8:	3304      	adds	r3, #4
 80068aa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	0c5b      	lsrs	r3, r3, #17
 80068b0:	f003 030f 	and.w	r3, r3, #15
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d124      	bne.n	8006902 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80068be:	4013      	ands	r3, r2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d035      	beq.n	8006930 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	091b      	lsrs	r3, r3, #4
 80068cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80068ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	461a      	mov	r2, r3
 80068d6:	6a38      	ldr	r0, [r7, #32]
 80068d8:	f004 ffc6 	bl	800b868 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	091b      	lsrs	r3, r3, #4
 80068e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068e8:	441a      	add	r2, r3
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	695a      	ldr	r2, [r3, #20]
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	091b      	lsrs	r3, r3, #4
 80068f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068fa:	441a      	add	r2, r3
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	615a      	str	r2, [r3, #20]
 8006900:	e016      	b.n	8006930 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	0c5b      	lsrs	r3, r3, #17
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	2b06      	cmp	r3, #6
 800690c:	d110      	bne.n	8006930 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006914:	2208      	movs	r2, #8
 8006916:	4619      	mov	r1, r3
 8006918:	6a38      	ldr	r0, [r7, #32]
 800691a:	f004 ffa5 	bl	800b868 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	695a      	ldr	r2, [r3, #20]
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	091b      	lsrs	r3, r3, #4
 8006926:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800692a:	441a      	add	r2, r3
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699a      	ldr	r2, [r3, #24]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f042 0210 	orr.w	r2, r2, #16
 800693e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4618      	mov	r0, r3
 8006946:	f005 f923 	bl	800bb90 <USB_ReadInterrupts>
 800694a:	4603      	mov	r3, r0
 800694c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006950:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006954:	f040 80a7 	bne.w	8006aa6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4618      	mov	r0, r3
 8006962:	f005 f928 	bl	800bbb6 <USB_ReadDevAllOutEpInterrupt>
 8006966:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006968:	e099      	b.n	8006a9e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800696a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 808e 	beq.w	8006a92 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800697c:	b2d2      	uxtb	r2, r2
 800697e:	4611      	mov	r1, r2
 8006980:	4618      	mov	r0, r3
 8006982:	f005 f94c 	bl	800bc1e <USB_ReadDevOutEPInterrupt>
 8006986:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00c      	beq.n	80069ac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699e:	461a      	mov	r2, r3
 80069a0:	2301      	movs	r3, #1
 80069a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80069a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fea2 	bl	80076f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f003 0308 	and.w	r3, r3, #8
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00c      	beq.n	80069d0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c2:	461a      	mov	r2, r3
 80069c4:	2308      	movs	r3, #8
 80069c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80069c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 ff78 	bl	80078c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f003 0310 	and.w	r3, r3, #16
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d008      	beq.n	80069ec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e6:	461a      	mov	r2, r3
 80069e8:	2310      	movs	r3, #16
 80069ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d030      	beq.n	8006a58 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069fe:	2b80      	cmp	r3, #128	; 0x80
 8006a00:	d109      	bne.n	8006a16 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	69fa      	ldr	r2, [r7, #28]
 8006a0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a14:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a18:	4613      	mov	r3, r2
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	4413      	add	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	4413      	add	r3, r2
 8006a28:	3304      	adds	r3, #4
 8006a2a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	78db      	ldrb	r3, [r3, #3]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d108      	bne.n	8006a46 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2200      	movs	r2, #0
 8006a38:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f00b f82f 	bl	8011aa4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a52:	461a      	mov	r2, r3
 8006a54:	2302      	movs	r3, #2
 8006a56:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d008      	beq.n	8006a74 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6e:	461a      	mov	r2, r3
 8006a70:	2320      	movs	r3, #32
 8006a72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d009      	beq.n	8006a92 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a90:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	3301      	adds	r3, #1
 8006a96:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	085b      	lsrs	r3, r3, #1
 8006a9c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f47f af62 	bne.w	800696a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f005 f870 	bl	800bb90 <USB_ReadInterrupts>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ab6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006aba:	f040 80db 	bne.w	8006c74 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f005 f891 	bl	800bbea <USB_ReadDevAllInEpInterrupt>
 8006ac8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006ace:	e0cd      	b.n	8006c6c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 80c2 	beq.w	8006c60 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	4611      	mov	r1, r2
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f005 f8b7 	bl	800bc5a <USB_ReadDevInEPInterrupt>
 8006aec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d057      	beq.n	8006ba8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	f003 030f 	and.w	r3, r3, #15
 8006afe:	2201      	movs	r2, #1
 8006b00:	fa02 f303 	lsl.w	r3, r2, r3
 8006b04:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	43db      	mvns	r3, r3
 8006b12:	69f9      	ldr	r1, [r7, #28]
 8006b14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b18:	4013      	ands	r3, r2
 8006b1a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b28:	461a      	mov	r2, r3
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	799b      	ldrb	r3, [r3, #6]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d132      	bne.n	8006b9c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006b36:	6879      	ldr	r1, [r7, #4]
 8006b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	00db      	lsls	r3, r3, #3
 8006b3e:	4413      	add	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	440b      	add	r3, r1
 8006b44:	3320      	adds	r3, #32
 8006b46:	6819      	ldr	r1, [r3, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	4413      	add	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4403      	add	r3, r0
 8006b56:	331c      	adds	r3, #28
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4419      	add	r1, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b60:	4613      	mov	r3, r2
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	4413      	add	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4403      	add	r3, r0
 8006b6a:	3320      	adds	r3, #32
 8006b6c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d113      	bne.n	8006b9c <HAL_PCD_IRQHandler+0x3a2>
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b78:	4613      	mov	r3, r2
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	4413      	add	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	440b      	add	r3, r1
 8006b82:	3324      	adds	r3, #36	; 0x24
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d108      	bne.n	8006b9c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6818      	ldr	r0, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006b94:	461a      	mov	r2, r3
 8006b96:	2101      	movs	r1, #1
 8006b98:	f005 f8be 	bl	800bd18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f00a fef9 	bl	801199a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f003 0308 	and.w	r3, r3, #8
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d008      	beq.n	8006bc4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	2308      	movs	r3, #8
 8006bc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f003 0310 	and.w	r3, r3, #16
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d008      	beq.n	8006be0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bda:	461a      	mov	r2, r3
 8006bdc:	2310      	movs	r3, #16
 8006bde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d008      	beq.n	8006bfc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	2340      	movs	r3, #64	; 0x40
 8006bfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d023      	beq.n	8006c4e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006c06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c08:	6a38      	ldr	r0, [r7, #32]
 8006c0a:	f004 f8ab 	bl	800ad64 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c10:	4613      	mov	r3, r2
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	4413      	add	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	3310      	adds	r3, #16
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3304      	adds	r3, #4
 8006c20:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	78db      	ldrb	r3, [r3, #3]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d108      	bne.n	8006c3c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f00a ff46 	bl	8011ac8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c48:	461a      	mov	r2, r3
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fcbb 	bl	80075d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	3301      	adds	r3, #1
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	085b      	lsrs	r3, r3, #1
 8006c6a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f47f af2e 	bne.w	8006ad0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f004 ff89 	bl	800bb90 <USB_ReadInterrupts>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c88:	d122      	bne.n	8006cd0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c98:	f023 0301 	bic.w	r3, r3, #1
 8006c9c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d108      	bne.n	8006cba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fea2 	bl	80079fc <HAL_PCDEx_LPM_Callback>
 8006cb8:	e002      	b.n	8006cc0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f00a fee4 	bl	8011a88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	695a      	ldr	r2, [r3, #20]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f004 ff5b 	bl	800bb90 <USB_ReadInterrupts>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ce4:	d112      	bne.n	8006d0c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d102      	bne.n	8006cfc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f00a fea0 	bl	8011a3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	695a      	ldr	r2, [r3, #20]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006d0a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f004 ff3d 	bl	800bb90 <USB_ReadInterrupts>
 8006d16:	4603      	mov	r3, r0
 8006d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d20:	f040 80b7 	bne.w	8006e92 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	69fa      	ldr	r2, [r7, #28]
 8006d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d32:	f023 0301 	bic.w	r3, r3, #1
 8006d36:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2110      	movs	r1, #16
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f004 f810 	bl	800ad64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d44:	2300      	movs	r3, #0
 8006d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d48:	e046      	b.n	8006dd8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d56:	461a      	mov	r2, r3
 8006d58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d5c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d6e:	0151      	lsls	r1, r2, #5
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	440a      	add	r2, r1
 8006d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d90:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006da2:	0151      	lsls	r1, r2, #5
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	440a      	add	r2, r1
 8006da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006db0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dc2:	0151      	lsls	r1, r2, #5
 8006dc4:	69fa      	ldr	r2, [r7, #28]
 8006dc6:	440a      	add	r2, r1
 8006dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006dd0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	791b      	ldrb	r3, [r3, #4]
 8006ddc:	461a      	mov	r2, r3
 8006dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d3b2      	bcc.n	8006d4a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dea:	69db      	ldr	r3, [r3, #28]
 8006dec:	69fa      	ldr	r2, [r7, #28]
 8006dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006df2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006df6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	7bdb      	ldrb	r3, [r3, #15]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d016      	beq.n	8006e2e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e0a:	69fa      	ldr	r2, [r7, #28]
 8006e0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e10:	f043 030b 	orr.w	r3, r3, #11
 8006e14:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e20:	69fa      	ldr	r2, [r7, #28]
 8006e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e26:	f043 030b 	orr.w	r3, r3, #11
 8006e2a:	6453      	str	r3, [r2, #68]	; 0x44
 8006e2c:	e015      	b.n	8006e5a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	69fa      	ldr	r2, [r7, #28]
 8006e38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e40:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006e44:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	69fa      	ldr	r2, [r7, #28]
 8006e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e54:	f043 030b 	orr.w	r3, r3, #11
 8006e58:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	69fa      	ldr	r2, [r7, #28]
 8006e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e68:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e6c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	f004 ff4b 	bl	800bd18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	695a      	ldr	r2, [r3, #20]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006e90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f004 fe7a 	bl	800bb90 <USB_ReadInterrupts>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea6:	d123      	bne.n	8006ef0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f004 ff10 	bl	800bcd2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f003 ffcd 	bl	800ae56 <USB_GetDevSpeed>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681c      	ldr	r4, [r3, #0]
 8006ec8:	f001 fa08 	bl	80082dc <HAL_RCC_GetHCLKFreq>
 8006ecc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f003 fcd1 	bl	800a87c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f00a fd85 	bl	80119ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	695a      	ldr	r2, [r3, #20]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f004 fe4b 	bl	800bb90 <USB_ReadInterrupts>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f003 0308 	and.w	r3, r3, #8
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d10a      	bne.n	8006f1a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f00a fd62 	bl	80119ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	695a      	ldr	r2, [r3, #20]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f002 0208 	and.w	r2, r2, #8
 8006f18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f004 fe36 	bl	800bb90 <USB_ReadInterrupts>
 8006f24:	4603      	mov	r3, r0
 8006f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2a:	2b80      	cmp	r3, #128	; 0x80
 8006f2c:	d123      	bne.n	8006f76 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f3e:	e014      	b.n	8006f6a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f44:	4613      	mov	r3, r2
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d105      	bne.n	8006f64 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fb08 	bl	8007574 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	3301      	adds	r3, #1
 8006f68:	627b      	str	r3, [r7, #36]	; 0x24
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	791b      	ldrb	r3, [r3, #4]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d3e4      	bcc.n	8006f40 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f004 fe08 	bl	800bb90 <USB_ReadInterrupts>
 8006f80:	4603      	mov	r3, r0
 8006f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f8a:	d13c      	bne.n	8007006 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f90:	e02b      	b.n	8006fea <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006fa2:	6879      	ldr	r1, [r7, #4]
 8006fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	00db      	lsls	r3, r3, #3
 8006faa:	4413      	add	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	440b      	add	r3, r1
 8006fb0:	3318      	adds	r3, #24
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d115      	bne.n	8006fe4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006fb8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	da12      	bge.n	8006fe4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006fbe:	6879      	ldr	r1, [r7, #4]
 8006fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	00db      	lsls	r3, r3, #3
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	440b      	add	r3, r1
 8006fcc:	3317      	adds	r3, #23
 8006fce:	2201      	movs	r2, #1
 8006fd0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fac8 	bl	8007574 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	791b      	ldrb	r3, [r3, #4]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d3cd      	bcc.n	8006f92 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	695a      	ldr	r2, [r3, #20]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007004:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4618      	mov	r0, r3
 800700c:	f004 fdc0 	bl	800bb90 <USB_ReadInterrupts>
 8007010:	4603      	mov	r3, r0
 8007012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007016:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800701a:	d156      	bne.n	80070ca <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800701c:	2301      	movs	r3, #1
 800701e:	627b      	str	r3, [r7, #36]	; 0x24
 8007020:	e045      	b.n	80070ae <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007024:	015a      	lsls	r2, r3, #5
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	4413      	add	r3, r2
 800702a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007032:	6879      	ldr	r1, [r7, #4]
 8007034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007036:	4613      	mov	r3, r2
 8007038:	00db      	lsls	r3, r3, #3
 800703a:	4413      	add	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	440b      	add	r3, r1
 8007040:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d12e      	bne.n	80070a8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800704a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800704c:	2b00      	cmp	r3, #0
 800704e:	da2b      	bge.n	80070a8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800705c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007060:	429a      	cmp	r2, r3
 8007062:	d121      	bne.n	80070a8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007068:	4613      	mov	r3, r2
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	4413      	add	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	440b      	add	r3, r1
 8007072:	f203 2357 	addw	r3, r3, #599	; 0x257
 8007076:	2201      	movs	r2, #1
 8007078:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10a      	bne.n	80070a8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	69fa      	ldr	r2, [r7, #28]
 800709c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070a4:	6053      	str	r3, [r2, #4]
            break;
 80070a6:	e008      	b.n	80070ba <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	3301      	adds	r3, #1
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	791b      	ldrb	r3, [r3, #4]
 80070b2:	461a      	mov	r2, r3
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d3b3      	bcc.n	8007022 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	695a      	ldr	r2, [r3, #20]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80070c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f004 fd5e 	bl	800bb90 <USB_ReadInterrupts>
 80070d4:	4603      	mov	r3, r0
 80070d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070de:	d10a      	bne.n	80070f6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f00a fd03 	bl	8011aec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	695a      	ldr	r2, [r3, #20]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80070f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f004 fd48 	bl	800bb90 <USB_ReadInterrupts>
 8007100:	4603      	mov	r3, r0
 8007102:	f003 0304 	and.w	r3, r3, #4
 8007106:	2b04      	cmp	r3, #4
 8007108:	d115      	bne.n	8007136 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f00a fcf3 	bl	8011b08 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6859      	ldr	r1, [r3, #4]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	430a      	orrs	r2, r1
 8007130:	605a      	str	r2, [r3, #4]
 8007132:	e000      	b.n	8007136 <HAL_PCD_IRQHandler+0x93c>
      return;
 8007134:	bf00      	nop
    }
  }
}
 8007136:	3734      	adds	r7, #52	; 0x34
 8007138:	46bd      	mov	sp, r7
 800713a:	bd90      	pop	{r4, r7, pc}

0800713c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	460b      	mov	r3, r1
 8007146:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800714e:	2b01      	cmp	r3, #1
 8007150:	d101      	bne.n	8007156 <HAL_PCD_SetAddress+0x1a>
 8007152:	2302      	movs	r3, #2
 8007154:	e012      	b.n	800717c <HAL_PCD_SetAddress+0x40>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	78fa      	ldrb	r2, [r7, #3]
 8007162:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	78fa      	ldrb	r2, [r7, #3]
 800716a:	4611      	mov	r1, r2
 800716c:	4618      	mov	r0, r3
 800716e:	f004 fca7 	bl	800bac0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	4608      	mov	r0, r1
 800718e:	4611      	mov	r1, r2
 8007190:	461a      	mov	r2, r3
 8007192:	4603      	mov	r3, r0
 8007194:	70fb      	strb	r3, [r7, #3]
 8007196:	460b      	mov	r3, r1
 8007198:	803b      	strh	r3, [r7, #0]
 800719a:	4613      	mov	r3, r2
 800719c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80071a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	da0f      	bge.n	80071ca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071aa:	78fb      	ldrb	r3, [r7, #3]
 80071ac:	f003 020f 	and.w	r2, r3, #15
 80071b0:	4613      	mov	r3, r2
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	4413      	add	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	3310      	adds	r3, #16
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	4413      	add	r3, r2
 80071be:	3304      	adds	r3, #4
 80071c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2201      	movs	r2, #1
 80071c6:	705a      	strb	r2, [r3, #1]
 80071c8:	e00f      	b.n	80071ea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	f003 020f 	and.w	r2, r3, #15
 80071d0:	4613      	mov	r3, r2
 80071d2:	00db      	lsls	r3, r3, #3
 80071d4:	4413      	add	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	4413      	add	r3, r2
 80071e0:	3304      	adds	r3, #4
 80071e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80071ea:	78fb      	ldrb	r3, [r7, #3]
 80071ec:	f003 030f 	and.w	r3, r3, #15
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80071f6:	883a      	ldrh	r2, [r7, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	78ba      	ldrb	r2, [r7, #2]
 8007200:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	785b      	ldrb	r3, [r3, #1]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d004      	beq.n	8007214 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	b29a      	uxth	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007214:	78bb      	ldrb	r3, [r7, #2]
 8007216:	2b02      	cmp	r3, #2
 8007218:	d102      	bne.n	8007220 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007226:	2b01      	cmp	r3, #1
 8007228:	d101      	bne.n	800722e <HAL_PCD_EP_Open+0xaa>
 800722a:	2302      	movs	r3, #2
 800722c:	e00e      	b.n	800724c <HAL_PCD_EP_Open+0xc8>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68f9      	ldr	r1, [r7, #12]
 800723c:	4618      	mov	r0, r3
 800723e:	f003 fe2f 	bl	800aea0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 800724a:	7afb      	ldrb	r3, [r7, #11]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	460b      	mov	r3, r1
 800725e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007260:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007264:	2b00      	cmp	r3, #0
 8007266:	da0f      	bge.n	8007288 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007268:	78fb      	ldrb	r3, [r7, #3]
 800726a:	f003 020f 	and.w	r2, r3, #15
 800726e:	4613      	mov	r3, r2
 8007270:	00db      	lsls	r3, r3, #3
 8007272:	4413      	add	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	3310      	adds	r3, #16
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	4413      	add	r3, r2
 800727c:	3304      	adds	r3, #4
 800727e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2201      	movs	r2, #1
 8007284:	705a      	strb	r2, [r3, #1]
 8007286:	e00f      	b.n	80072a8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007288:	78fb      	ldrb	r3, [r7, #3]
 800728a:	f003 020f 	and.w	r2, r3, #15
 800728e:	4613      	mov	r3, r2
 8007290:	00db      	lsls	r3, r3, #3
 8007292:	4413      	add	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	4413      	add	r3, r2
 800729e:	3304      	adds	r3, #4
 80072a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80072a8:	78fb      	ldrb	r3, [r7, #3]
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d101      	bne.n	80072c2 <HAL_PCD_EP_Close+0x6e>
 80072be:	2302      	movs	r3, #2
 80072c0:	e00e      	b.n	80072e0 <HAL_PCD_EP_Close+0x8c>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68f9      	ldr	r1, [r7, #12]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f003 fe6d 	bl	800afb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	607a      	str	r2, [r7, #4]
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	460b      	mov	r3, r1
 80072f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072f8:	7afb      	ldrb	r3, [r7, #11]
 80072fa:	f003 020f 	and.w	r2, r3, #15
 80072fe:	4613      	mov	r3, r2
 8007300:	00db      	lsls	r3, r3, #3
 8007302:	4413      	add	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	4413      	add	r3, r2
 800730e:	3304      	adds	r3, #4
 8007310:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2200      	movs	r2, #0
 8007322:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	2200      	movs	r2, #0
 8007328:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800732a:	7afb      	ldrb	r3, [r7, #11]
 800732c:	f003 030f 	and.w	r3, r3, #15
 8007330:	b2da      	uxtb	r2, r3
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	799b      	ldrb	r3, [r3, #6]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d102      	bne.n	8007344 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6818      	ldr	r0, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	799b      	ldrb	r3, [r3, #6]
 800734c:	461a      	mov	r2, r3
 800734e:	6979      	ldr	r1, [r7, #20]
 8007350:	f003 ff0a 	bl	800b168 <USB_EPStartXfer>

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800735e:	b480      	push	{r7}
 8007360:	b083      	sub	sp, #12
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	460b      	mov	r3, r1
 8007368:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800736a:	78fb      	ldrb	r3, [r7, #3]
 800736c:	f003 020f 	and.w	r2, r3, #15
 8007370:	6879      	ldr	r1, [r7, #4]
 8007372:	4613      	mov	r3, r2
 8007374:	00db      	lsls	r3, r3, #3
 8007376:	4413      	add	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	440b      	add	r3, r1
 800737c:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8007380:	681b      	ldr	r3, [r3, #0]
}
 8007382:	4618      	mov	r0, r3
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b086      	sub	sp, #24
 8007392:	af00      	add	r7, sp, #0
 8007394:	60f8      	str	r0, [r7, #12]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	603b      	str	r3, [r7, #0]
 800739a:	460b      	mov	r3, r1
 800739c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800739e:	7afb      	ldrb	r3, [r7, #11]
 80073a0:	f003 020f 	and.w	r2, r3, #15
 80073a4:	4613      	mov	r3, r2
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	4413      	add	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	3310      	adds	r3, #16
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	4413      	add	r3, r2
 80073b2:	3304      	adds	r3, #4
 80073b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2200      	movs	r2, #0
 80073c6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2201      	movs	r2, #1
 80073cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073ce:	7afb      	ldrb	r3, [r7, #11]
 80073d0:	f003 030f 	and.w	r3, r3, #15
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	799b      	ldrb	r3, [r3, #6]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d102      	bne.n	80073e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6818      	ldr	r0, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	799b      	ldrb	r3, [r3, #6]
 80073f0:	461a      	mov	r2, r3
 80073f2:	6979      	ldr	r1, [r7, #20]
 80073f4:	f003 feb8 	bl	800b168 <USB_EPStartXfer>

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3718      	adds	r7, #24
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	460b      	mov	r3, r1
 800740c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800740e:	78fb      	ldrb	r3, [r7, #3]
 8007410:	f003 030f 	and.w	r3, r3, #15
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	7912      	ldrb	r2, [r2, #4]
 8007418:	4293      	cmp	r3, r2
 800741a:	d901      	bls.n	8007420 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e04f      	b.n	80074c0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007424:	2b00      	cmp	r3, #0
 8007426:	da0f      	bge.n	8007448 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007428:	78fb      	ldrb	r3, [r7, #3]
 800742a:	f003 020f 	and.w	r2, r3, #15
 800742e:	4613      	mov	r3, r2
 8007430:	00db      	lsls	r3, r3, #3
 8007432:	4413      	add	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	3310      	adds	r3, #16
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	4413      	add	r3, r2
 800743c:	3304      	adds	r3, #4
 800743e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2201      	movs	r2, #1
 8007444:	705a      	strb	r2, [r3, #1]
 8007446:	e00d      	b.n	8007464 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007448:	78fa      	ldrb	r2, [r7, #3]
 800744a:	4613      	mov	r3, r2
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	4413      	add	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	4413      	add	r3, r2
 800745a:	3304      	adds	r3, #4
 800745c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2201      	movs	r2, #1
 8007468:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800746a:	78fb      	ldrb	r3, [r7, #3]
 800746c:	f003 030f 	and.w	r3, r3, #15
 8007470:	b2da      	uxtb	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800747c:	2b01      	cmp	r3, #1
 800747e:	d101      	bne.n	8007484 <HAL_PCD_EP_SetStall+0x82>
 8007480:	2302      	movs	r3, #2
 8007482:	e01d      	b.n	80074c0 <HAL_PCD_EP_SetStall+0xbe>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68f9      	ldr	r1, [r7, #12]
 8007492:	4618      	mov	r0, r3
 8007494:	f004 fa40 	bl	800b918 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d109      	bne.n	80074b6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6818      	ldr	r0, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	7999      	ldrb	r1, [r3, #6]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80074b0:	461a      	mov	r2, r3
 80074b2:	f004 fc31 	bl	800bd18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	460b      	mov	r3, r1
 80074d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	f003 030f 	and.w	r3, r3, #15
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	7912      	ldrb	r2, [r2, #4]
 80074de:	4293      	cmp	r3, r2
 80074e0:	d901      	bls.n	80074e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e042      	b.n	800756c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80074e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	da0f      	bge.n	800750e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074ee:	78fb      	ldrb	r3, [r7, #3]
 80074f0:	f003 020f 	and.w	r2, r3, #15
 80074f4:	4613      	mov	r3, r2
 80074f6:	00db      	lsls	r3, r3, #3
 80074f8:	4413      	add	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	3310      	adds	r3, #16
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	4413      	add	r3, r2
 8007502:	3304      	adds	r3, #4
 8007504:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	705a      	strb	r2, [r3, #1]
 800750c:	e00f      	b.n	800752e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800750e:	78fb      	ldrb	r3, [r7, #3]
 8007510:	f003 020f 	and.w	r2, r3, #15
 8007514:	4613      	mov	r3, r2
 8007516:	00db      	lsls	r3, r3, #3
 8007518:	4413      	add	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	4413      	add	r3, r2
 8007524:	3304      	adds	r3, #4
 8007526:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007534:	78fb      	ldrb	r3, [r7, #3]
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	b2da      	uxtb	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007546:	2b01      	cmp	r3, #1
 8007548:	d101      	bne.n	800754e <HAL_PCD_EP_ClrStall+0x86>
 800754a:	2302      	movs	r3, #2
 800754c:	e00e      	b.n	800756c <HAL_PCD_EP_ClrStall+0xa4>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68f9      	ldr	r1, [r7, #12]
 800755c:	4618      	mov	r0, r3
 800755e:	f004 fa49 	bl	800b9f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	460b      	mov	r3, r1
 800757e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007584:	2b00      	cmp	r3, #0
 8007586:	da0c      	bge.n	80075a2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	f003 020f 	and.w	r2, r3, #15
 800758e:	4613      	mov	r3, r2
 8007590:	00db      	lsls	r3, r3, #3
 8007592:	4413      	add	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	3310      	adds	r3, #16
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	4413      	add	r3, r2
 800759c:	3304      	adds	r3, #4
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	e00c      	b.n	80075bc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075a2:	78fb      	ldrb	r3, [r7, #3]
 80075a4:	f003 020f 	and.w	r2, r3, #15
 80075a8:	4613      	mov	r3, r2
 80075aa:	00db      	lsls	r3, r3, #3
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	4413      	add	r3, r2
 80075b8:	3304      	adds	r3, #4
 80075ba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68f9      	ldr	r1, [r7, #12]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f004 f868 	bl	800b698 <USB_EPStopXfer>
 80075c8:	4603      	mov	r3, r0
 80075ca:	72fb      	strb	r3, [r7, #11]

  return ret;
 80075cc:	7afb      	ldrb	r3, [r7, #11]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b08a      	sub	sp, #40	; 0x28
 80075da:	af02      	add	r7, sp, #8
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	4613      	mov	r3, r2
 80075ee:	00db      	lsls	r3, r3, #3
 80075f0:	4413      	add	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	3310      	adds	r3, #16
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	4413      	add	r3, r2
 80075fa:	3304      	adds	r3, #4
 80075fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	695a      	ldr	r2, [r3, #20]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	429a      	cmp	r2, r3
 8007608:	d901      	bls.n	800760e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e06b      	b.n	80076e6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	691a      	ldr	r2, [r3, #16]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	69fa      	ldr	r2, [r7, #28]
 8007620:	429a      	cmp	r2, r3
 8007622:	d902      	bls.n	800762a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	3303      	adds	r3, #3
 800762e:	089b      	lsrs	r3, r3, #2
 8007630:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007632:	e02a      	b.n	800768a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	691a      	ldr	r2, [r3, #16]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	69fa      	ldr	r2, [r7, #28]
 8007646:	429a      	cmp	r2, r3
 8007648:	d902      	bls.n	8007650 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	3303      	adds	r3, #3
 8007654:	089b      	lsrs	r3, r3, #2
 8007656:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	68d9      	ldr	r1, [r3, #12]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	b2da      	uxtb	r2, r3
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	4603      	mov	r3, r0
 800766c:	6978      	ldr	r0, [r7, #20]
 800766e:	f004 f8bd 	bl	800b7ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	68da      	ldr	r2, [r3, #12]
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	441a      	add	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	695a      	ldr	r2, [r3, #20]
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	441a      	add	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800769a:	69ba      	ldr	r2, [r7, #24]
 800769c:	429a      	cmp	r2, r3
 800769e:	d809      	bhi.n	80076b4 <PCD_WriteEmptyTxFifo+0xde>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	695a      	ldr	r2, [r3, #20]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d203      	bcs.n	80076b4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1bf      	bne.n	8007634 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	691a      	ldr	r2, [r3, #16]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	695b      	ldr	r3, [r3, #20]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d811      	bhi.n	80076e4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	f003 030f 	and.w	r3, r3, #15
 80076c6:	2201      	movs	r2, #1
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	43db      	mvns	r3, r3
 80076da:	6939      	ldr	r1, [r7, #16]
 80076dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076e0:	4013      	ands	r3, r2
 80076e2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3720      	adds	r7, #32
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
	...

080076f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b088      	sub	sp, #32
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	333c      	adds	r3, #60	; 0x3c
 8007708:	3304      	adds	r3, #4
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	4413      	add	r3, r2
 8007716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	799b      	ldrb	r3, [r3, #6]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d17b      	bne.n	800781e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	f003 0308 	and.w	r3, r3, #8
 800772c:	2b00      	cmp	r3, #0
 800772e:	d015      	beq.n	800775c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	4a61      	ldr	r2, [pc, #388]	; (80078b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	f240 80b9 	bls.w	80078ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 80b3 	beq.w	80078ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	015a      	lsls	r2, r3, #5
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	4413      	add	r3, r2
 800774e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007752:	461a      	mov	r2, r3
 8007754:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007758:	6093      	str	r3, [r2, #8]
 800775a:	e0a7      	b.n	80078ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f003 0320 	and.w	r3, r3, #32
 8007762:	2b00      	cmp	r3, #0
 8007764:	d009      	beq.n	800777a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	4413      	add	r3, r2
 800776e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007772:	461a      	mov	r2, r3
 8007774:	2320      	movs	r3, #32
 8007776:	6093      	str	r3, [r2, #8]
 8007778:	e098      	b.n	80078ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007780:	2b00      	cmp	r3, #0
 8007782:	f040 8093 	bne.w	80078ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	4a4b      	ldr	r2, [pc, #300]	; (80078b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d90f      	bls.n	80077ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00a      	beq.n	80077ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a4:	461a      	mov	r2, r3
 80077a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077aa:	6093      	str	r3, [r2, #8]
 80077ac:	e07e      	b.n	80078ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	4613      	mov	r3, r2
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	4413      	add	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	4413      	add	r3, r2
 80077c0:	3304      	adds	r3, #4
 80077c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6a1a      	ldr	r2, [r3, #32]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	0159      	lsls	r1, r3, #5
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	440b      	add	r3, r1
 80077d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077da:	1ad2      	subs	r2, r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d114      	bne.n	8007810 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d109      	bne.n	8007802 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80077f8:	461a      	mov	r2, r3
 80077fa:	2101      	movs	r1, #1
 80077fc:	f004 fa8c 	bl	800bd18 <USB_EP0_OutStart>
 8007800:	e006      	b.n	8007810 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	441a      	add	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	b2db      	uxtb	r3, r3
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f00a f8a4 	bl	8011964 <HAL_PCD_DataOutStageCallback>
 800781c:	e046      	b.n	80078ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	4a26      	ldr	r2, [pc, #152]	; (80078bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d124      	bne.n	8007870 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00a      	beq.n	8007846 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800783c:	461a      	mov	r2, r3
 800783e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007842:	6093      	str	r3, [r2, #8]
 8007844:	e032      	b.n	80078ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	f003 0320 	and.w	r3, r3, #32
 800784c:	2b00      	cmp	r3, #0
 800784e:	d008      	beq.n	8007862 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800785c:	461a      	mov	r2, r3
 800785e:	2320      	movs	r3, #32
 8007860:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	b2db      	uxtb	r3, r3
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f00a f87b 	bl	8011964 <HAL_PCD_DataOutStageCallback>
 800786e:	e01d      	b.n	80078ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d114      	bne.n	80078a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	4613      	mov	r3, r2
 800787c:	00db      	lsls	r3, r3, #3
 800787e:	4413      	add	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	440b      	add	r3, r1
 8007884:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d108      	bne.n	80078a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007898:	461a      	mov	r2, r3
 800789a:	2100      	movs	r1, #0
 800789c:	f004 fa3c 	bl	800bd18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f00a f85c 	bl	8011964 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3720      	adds	r7, #32
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	4f54300a 	.word	0x4f54300a
 80078bc:	4f54310a 	.word	0x4f54310a

080078c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	333c      	adds	r3, #60	; 0x3c
 80078d8:	3304      	adds	r3, #4
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4a15      	ldr	r2, [pc, #84]	; (8007948 <PCD_EP_OutSetupPacket_int+0x88>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d90e      	bls.n	8007914 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d009      	beq.n	8007914 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790c:	461a      	mov	r2, r3
 800790e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007912:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f00a f813 	bl	8011940 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	4a0a      	ldr	r2, [pc, #40]	; (8007948 <PCD_EP_OutSetupPacket_int+0x88>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d90c      	bls.n	800793c <PCD_EP_OutSetupPacket_int+0x7c>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	799b      	ldrb	r3, [r3, #6]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d108      	bne.n	800793c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6818      	ldr	r0, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007934:	461a      	mov	r2, r3
 8007936:	2101      	movs	r1, #1
 8007938:	f004 f9ee 	bl	800bd18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	4f54300a 	.word	0x4f54300a

0800794c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
 8007958:	4613      	mov	r3, r2
 800795a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007962:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007964:	78fb      	ldrb	r3, [r7, #3]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d107      	bne.n	800797a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800796a:	883b      	ldrh	r3, [r7, #0]
 800796c:	0419      	lsls	r1, r3, #16
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	430a      	orrs	r2, r1
 8007976:	629a      	str	r2, [r3, #40]	; 0x28
 8007978:	e028      	b.n	80079cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007980:	0c1b      	lsrs	r3, r3, #16
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	4413      	add	r3, r2
 8007986:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007988:	2300      	movs	r3, #0
 800798a:	73fb      	strb	r3, [r7, #15]
 800798c:	e00d      	b.n	80079aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	7bfb      	ldrb	r3, [r7, #15]
 8007994:	3340      	adds	r3, #64	; 0x40
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4413      	add	r3, r2
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	0c1b      	lsrs	r3, r3, #16
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	4413      	add	r3, r2
 80079a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
 80079a6:	3301      	adds	r3, #1
 80079a8:	73fb      	strb	r3, [r7, #15]
 80079aa:	7bfa      	ldrb	r2, [r7, #15]
 80079ac:	78fb      	ldrb	r3, [r7, #3]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d3ec      	bcc.n	800798e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80079b4:	883b      	ldrh	r3, [r7, #0]
 80079b6:	0418      	lsls	r0, r3, #16
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6819      	ldr	r1, [r3, #0]
 80079bc:	78fb      	ldrb	r3, [r7, #3]
 80079be:	3b01      	subs	r3, #1
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	4302      	orrs	r2, r0
 80079c4:	3340      	adds	r3, #64	; 0x40
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	440b      	add	r3, r1
 80079ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	460b      	mov	r3, r1
 80079e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	887a      	ldrh	r2, [r7, #2]
 80079ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	460b      	mov	r3, r1
 8007a06:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e267      	b.n	8007ef6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d075      	beq.n	8007b1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a32:	4b88      	ldr	r3, [pc, #544]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f003 030c 	and.w	r3, r3, #12
 8007a3a:	2b04      	cmp	r3, #4
 8007a3c:	d00c      	beq.n	8007a58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a3e:	4b85      	ldr	r3, [pc, #532]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a46:	2b08      	cmp	r3, #8
 8007a48:	d112      	bne.n	8007a70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a4a:	4b82      	ldr	r3, [pc, #520]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a56:	d10b      	bne.n	8007a70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a58:	4b7e      	ldr	r3, [pc, #504]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d05b      	beq.n	8007b1c <HAL_RCC_OscConfig+0x108>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d157      	bne.n	8007b1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e242      	b.n	8007ef6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a78:	d106      	bne.n	8007a88 <HAL_RCC_OscConfig+0x74>
 8007a7a:	4b76      	ldr	r3, [pc, #472]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a75      	ldr	r2, [pc, #468]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a84:	6013      	str	r3, [r2, #0]
 8007a86:	e01d      	b.n	8007ac4 <HAL_RCC_OscConfig+0xb0>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a90:	d10c      	bne.n	8007aac <HAL_RCC_OscConfig+0x98>
 8007a92:	4b70      	ldr	r3, [pc, #448]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a6f      	ldr	r2, [pc, #444]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	4b6d      	ldr	r3, [pc, #436]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a6c      	ldr	r2, [pc, #432]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aa8:	6013      	str	r3, [r2, #0]
 8007aaa:	e00b      	b.n	8007ac4 <HAL_RCC_OscConfig+0xb0>
 8007aac:	4b69      	ldr	r3, [pc, #420]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a68      	ldr	r2, [pc, #416]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	4b66      	ldr	r3, [pc, #408]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a65      	ldr	r2, [pc, #404]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d013      	beq.n	8007af4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007acc:	f7fd fa46 	bl	8004f5c <HAL_GetTick>
 8007ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ad2:	e008      	b.n	8007ae6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ad4:	f7fd fa42 	bl	8004f5c <HAL_GetTick>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	2b64      	cmp	r3, #100	; 0x64
 8007ae0:	d901      	bls.n	8007ae6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e207      	b.n	8007ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ae6:	4b5b      	ldr	r3, [pc, #364]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d0f0      	beq.n	8007ad4 <HAL_RCC_OscConfig+0xc0>
 8007af2:	e014      	b.n	8007b1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007af4:	f7fd fa32 	bl	8004f5c <HAL_GetTick>
 8007af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007afa:	e008      	b.n	8007b0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007afc:	f7fd fa2e 	bl	8004f5c <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	2b64      	cmp	r3, #100	; 0x64
 8007b08:	d901      	bls.n	8007b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e1f3      	b.n	8007ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b0e:	4b51      	ldr	r3, [pc, #324]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1f0      	bne.n	8007afc <HAL_RCC_OscConfig+0xe8>
 8007b1a:	e000      	b.n	8007b1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d063      	beq.n	8007bf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b2a:	4b4a      	ldr	r3, [pc, #296]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	f003 030c 	and.w	r3, r3, #12
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00b      	beq.n	8007b4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b36:	4b47      	ldr	r3, [pc, #284]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b3e:	2b08      	cmp	r3, #8
 8007b40:	d11c      	bne.n	8007b7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b42:	4b44      	ldr	r3, [pc, #272]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d116      	bne.n	8007b7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b4e:	4b41      	ldr	r3, [pc, #260]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0302 	and.w	r3, r3, #2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d005      	beq.n	8007b66 <HAL_RCC_OscConfig+0x152>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d001      	beq.n	8007b66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e1c7      	b.n	8007ef6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b66:	4b3b      	ldr	r3, [pc, #236]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	4937      	ldr	r1, [pc, #220]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b7a:	e03a      	b.n	8007bf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d020      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b84:	4b34      	ldr	r3, [pc, #208]	; (8007c58 <HAL_RCC_OscConfig+0x244>)
 8007b86:	2201      	movs	r2, #1
 8007b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b8a:	f7fd f9e7 	bl	8004f5c <HAL_GetTick>
 8007b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b90:	e008      	b.n	8007ba4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b92:	f7fd f9e3 	bl	8004f5c <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d901      	bls.n	8007ba4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e1a8      	b.n	8007ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ba4:	4b2b      	ldr	r3, [pc, #172]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d0f0      	beq.n	8007b92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bb0:	4b28      	ldr	r3, [pc, #160]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	00db      	lsls	r3, r3, #3
 8007bbe:	4925      	ldr	r1, [pc, #148]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	600b      	str	r3, [r1, #0]
 8007bc4:	e015      	b.n	8007bf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bc6:	4b24      	ldr	r3, [pc, #144]	; (8007c58 <HAL_RCC_OscConfig+0x244>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bcc:	f7fd f9c6 	bl	8004f5c <HAL_GetTick>
 8007bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bd2:	e008      	b.n	8007be6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bd4:	f7fd f9c2 	bl	8004f5c <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d901      	bls.n	8007be6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e187      	b.n	8007ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007be6:	4b1b      	ldr	r3, [pc, #108]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1f0      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 0308 	and.w	r3, r3, #8
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d036      	beq.n	8007c6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d016      	beq.n	8007c34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c06:	4b15      	ldr	r3, [pc, #84]	; (8007c5c <HAL_RCC_OscConfig+0x248>)
 8007c08:	2201      	movs	r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c0c:	f7fd f9a6 	bl	8004f5c <HAL_GetTick>
 8007c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c12:	e008      	b.n	8007c26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c14:	f7fd f9a2 	bl	8004f5c <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d901      	bls.n	8007c26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e167      	b.n	8007ef6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c26:	4b0b      	ldr	r3, [pc, #44]	; (8007c54 <HAL_RCC_OscConfig+0x240>)
 8007c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0f0      	beq.n	8007c14 <HAL_RCC_OscConfig+0x200>
 8007c32:	e01b      	b.n	8007c6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c34:	4b09      	ldr	r3, [pc, #36]	; (8007c5c <HAL_RCC_OscConfig+0x248>)
 8007c36:	2200      	movs	r2, #0
 8007c38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c3a:	f7fd f98f 	bl	8004f5c <HAL_GetTick>
 8007c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c40:	e00e      	b.n	8007c60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c42:	f7fd f98b 	bl	8004f5c <HAL_GetTick>
 8007c46:	4602      	mov	r2, r0
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d907      	bls.n	8007c60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e150      	b.n	8007ef6 <HAL_RCC_OscConfig+0x4e2>
 8007c54:	40023800 	.word	0x40023800
 8007c58:	42470000 	.word	0x42470000
 8007c5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c60:	4b88      	ldr	r3, [pc, #544]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1ea      	bne.n	8007c42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0304 	and.w	r3, r3, #4
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 8097 	beq.w	8007da8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c7e:	4b81      	ldr	r3, [pc, #516]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10f      	bne.n	8007caa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60bb      	str	r3, [r7, #8]
 8007c8e:	4b7d      	ldr	r3, [pc, #500]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c92:	4a7c      	ldr	r2, [pc, #496]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c98:	6413      	str	r3, [r2, #64]	; 0x40
 8007c9a:	4b7a      	ldr	r3, [pc, #488]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ca2:	60bb      	str	r3, [r7, #8]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007caa:	4b77      	ldr	r3, [pc, #476]	; (8007e88 <HAL_RCC_OscConfig+0x474>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d118      	bne.n	8007ce8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007cb6:	4b74      	ldr	r3, [pc, #464]	; (8007e88 <HAL_RCC_OscConfig+0x474>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a73      	ldr	r2, [pc, #460]	; (8007e88 <HAL_RCC_OscConfig+0x474>)
 8007cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cc2:	f7fd f94b 	bl	8004f5c <HAL_GetTick>
 8007cc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cc8:	e008      	b.n	8007cdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cca:	f7fd f947 	bl	8004f5c <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d901      	bls.n	8007cdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e10c      	b.n	8007ef6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cdc:	4b6a      	ldr	r3, [pc, #424]	; (8007e88 <HAL_RCC_OscConfig+0x474>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d0f0      	beq.n	8007cca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d106      	bne.n	8007cfe <HAL_RCC_OscConfig+0x2ea>
 8007cf0:	4b64      	ldr	r3, [pc, #400]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf4:	4a63      	ldr	r2, [pc, #396]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007cf6:	f043 0301 	orr.w	r3, r3, #1
 8007cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8007cfc:	e01c      	b.n	8007d38 <HAL_RCC_OscConfig+0x324>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	2b05      	cmp	r3, #5
 8007d04:	d10c      	bne.n	8007d20 <HAL_RCC_OscConfig+0x30c>
 8007d06:	4b5f      	ldr	r3, [pc, #380]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0a:	4a5e      	ldr	r2, [pc, #376]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007d0c:	f043 0304 	orr.w	r3, r3, #4
 8007d10:	6713      	str	r3, [r2, #112]	; 0x70
 8007d12:	4b5c      	ldr	r3, [pc, #368]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d16:	4a5b      	ldr	r2, [pc, #364]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007d18:	f043 0301 	orr.w	r3, r3, #1
 8007d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8007d1e:	e00b      	b.n	8007d38 <HAL_RCC_OscConfig+0x324>
 8007d20:	4b58      	ldr	r3, [pc, #352]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d24:	4a57      	ldr	r2, [pc, #348]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007d26:	f023 0301 	bic.w	r3, r3, #1
 8007d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d2c:	4b55      	ldr	r3, [pc, #340]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d30:	4a54      	ldr	r2, [pc, #336]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007d32:	f023 0304 	bic.w	r3, r3, #4
 8007d36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d015      	beq.n	8007d6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d40:	f7fd f90c 	bl	8004f5c <HAL_GetTick>
 8007d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d46:	e00a      	b.n	8007d5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d48:	f7fd f908 	bl	8004f5c <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d901      	bls.n	8007d5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e0cb      	b.n	8007ef6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d5e:	4b49      	ldr	r3, [pc, #292]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d0ee      	beq.n	8007d48 <HAL_RCC_OscConfig+0x334>
 8007d6a:	e014      	b.n	8007d96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d6c:	f7fd f8f6 	bl	8004f5c <HAL_GetTick>
 8007d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d72:	e00a      	b.n	8007d8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d74:	f7fd f8f2 	bl	8004f5c <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d901      	bls.n	8007d8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e0b5      	b.n	8007ef6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d8a:	4b3e      	ldr	r3, [pc, #248]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d8e:	f003 0302 	and.w	r3, r3, #2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1ee      	bne.n	8007d74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d96:	7dfb      	ldrb	r3, [r7, #23]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d105      	bne.n	8007da8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d9c:	4b39      	ldr	r3, [pc, #228]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da0:	4a38      	ldr	r2, [pc, #224]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007da6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 80a1 	beq.w	8007ef4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007db2:	4b34      	ldr	r3, [pc, #208]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f003 030c 	and.w	r3, r3, #12
 8007dba:	2b08      	cmp	r3, #8
 8007dbc:	d05c      	beq.n	8007e78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d141      	bne.n	8007e4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dc6:	4b31      	ldr	r3, [pc, #196]	; (8007e8c <HAL_RCC_OscConfig+0x478>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dcc:	f7fd f8c6 	bl	8004f5c <HAL_GetTick>
 8007dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dd2:	e008      	b.n	8007de6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dd4:	f7fd f8c2 	bl	8004f5c <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d901      	bls.n	8007de6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e087      	b.n	8007ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007de6:	4b27      	ldr	r3, [pc, #156]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1f0      	bne.n	8007dd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	69da      	ldr	r2, [r3, #28]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	019b      	lsls	r3, r3, #6
 8007e02:	431a      	orrs	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e08:	085b      	lsrs	r3, r3, #1
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	041b      	lsls	r3, r3, #16
 8007e0e:	431a      	orrs	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e14:	061b      	lsls	r3, r3, #24
 8007e16:	491b      	ldr	r1, [pc, #108]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e1c:	4b1b      	ldr	r3, [pc, #108]	; (8007e8c <HAL_RCC_OscConfig+0x478>)
 8007e1e:	2201      	movs	r2, #1
 8007e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e22:	f7fd f89b 	bl	8004f5c <HAL_GetTick>
 8007e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e28:	e008      	b.n	8007e3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e2a:	f7fd f897 	bl	8004f5c <HAL_GetTick>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d901      	bls.n	8007e3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e05c      	b.n	8007ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e3c:	4b11      	ldr	r3, [pc, #68]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d0f0      	beq.n	8007e2a <HAL_RCC_OscConfig+0x416>
 8007e48:	e054      	b.n	8007ef4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e4a:	4b10      	ldr	r3, [pc, #64]	; (8007e8c <HAL_RCC_OscConfig+0x478>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e50:	f7fd f884 	bl	8004f5c <HAL_GetTick>
 8007e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e56:	e008      	b.n	8007e6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e58:	f7fd f880 	bl	8004f5c <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d901      	bls.n	8007e6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e045      	b.n	8007ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e6a:	4b06      	ldr	r3, [pc, #24]	; (8007e84 <HAL_RCC_OscConfig+0x470>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1f0      	bne.n	8007e58 <HAL_RCC_OscConfig+0x444>
 8007e76:	e03d      	b.n	8007ef4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d107      	bne.n	8007e90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e038      	b.n	8007ef6 <HAL_RCC_OscConfig+0x4e2>
 8007e84:	40023800 	.word	0x40023800
 8007e88:	40007000 	.word	0x40007000
 8007e8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e90:	4b1b      	ldr	r3, [pc, #108]	; (8007f00 <HAL_RCC_OscConfig+0x4ec>)
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d028      	beq.n	8007ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d121      	bne.n	8007ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d11a      	bne.n	8007ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ec6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d111      	bne.n	8007ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed6:	085b      	lsrs	r3, r3, #1
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d107      	bne.n	8007ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d001      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e000      	b.n	8007ef6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3718      	adds	r7, #24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	40023800 	.word	0x40023800

08007f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e0cc      	b.n	80080b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f18:	4b68      	ldr	r3, [pc, #416]	; (80080bc <HAL_RCC_ClockConfig+0x1b8>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0307 	and.w	r3, r3, #7
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d90c      	bls.n	8007f40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f26:	4b65      	ldr	r3, [pc, #404]	; (80080bc <HAL_RCC_ClockConfig+0x1b8>)
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	b2d2      	uxtb	r2, r2
 8007f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f2e:	4b63      	ldr	r3, [pc, #396]	; (80080bc <HAL_RCC_ClockConfig+0x1b8>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0307 	and.w	r3, r3, #7
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d001      	beq.n	8007f40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e0b8      	b.n	80080b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0302 	and.w	r3, r3, #2
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d020      	beq.n	8007f8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d005      	beq.n	8007f64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f58:	4b59      	ldr	r3, [pc, #356]	; (80080c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	4a58      	ldr	r2, [pc, #352]	; (80080c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0308 	and.w	r3, r3, #8
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d005      	beq.n	8007f7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f70:	4b53      	ldr	r3, [pc, #332]	; (80080c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	4a52      	ldr	r2, [pc, #328]	; (80080c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f7c:	4b50      	ldr	r3, [pc, #320]	; (80080c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	494d      	ldr	r1, [pc, #308]	; (80080c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d044      	beq.n	8008024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d107      	bne.n	8007fb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fa2:	4b47      	ldr	r3, [pc, #284]	; (80080c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d119      	bne.n	8007fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e07f      	b.n	80080b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d003      	beq.n	8007fc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d107      	bne.n	8007fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fc2:	4b3f      	ldr	r3, [pc, #252]	; (80080c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d109      	bne.n	8007fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e06f      	b.n	80080b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fd2:	4b3b      	ldr	r3, [pc, #236]	; (80080c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d101      	bne.n	8007fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e067      	b.n	80080b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fe2:	4b37      	ldr	r3, [pc, #220]	; (80080c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f023 0203 	bic.w	r2, r3, #3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	4934      	ldr	r1, [pc, #208]	; (80080c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ff4:	f7fc ffb2 	bl	8004f5c <HAL_GetTick>
 8007ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ffa:	e00a      	b.n	8008012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ffc:	f7fc ffae 	bl	8004f5c <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	f241 3288 	movw	r2, #5000	; 0x1388
 800800a:	4293      	cmp	r3, r2
 800800c:	d901      	bls.n	8008012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e04f      	b.n	80080b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008012:	4b2b      	ldr	r3, [pc, #172]	; (80080c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	f003 020c 	and.w	r2, r3, #12
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	429a      	cmp	r2, r3
 8008022:	d1eb      	bne.n	8007ffc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008024:	4b25      	ldr	r3, [pc, #148]	; (80080bc <HAL_RCC_ClockConfig+0x1b8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0307 	and.w	r3, r3, #7
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	429a      	cmp	r2, r3
 8008030:	d20c      	bcs.n	800804c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008032:	4b22      	ldr	r3, [pc, #136]	; (80080bc <HAL_RCC_ClockConfig+0x1b8>)
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	b2d2      	uxtb	r2, r2
 8008038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800803a:	4b20      	ldr	r3, [pc, #128]	; (80080bc <HAL_RCC_ClockConfig+0x1b8>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0307 	and.w	r3, r3, #7
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	429a      	cmp	r2, r3
 8008046:	d001      	beq.n	800804c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e032      	b.n	80080b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0304 	and.w	r3, r3, #4
 8008054:	2b00      	cmp	r3, #0
 8008056:	d008      	beq.n	800806a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008058:	4b19      	ldr	r3, [pc, #100]	; (80080c0 <HAL_RCC_ClockConfig+0x1bc>)
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	4916      	ldr	r1, [pc, #88]	; (80080c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008066:	4313      	orrs	r3, r2
 8008068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 0308 	and.w	r3, r3, #8
 8008072:	2b00      	cmp	r3, #0
 8008074:	d009      	beq.n	800808a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008076:	4b12      	ldr	r3, [pc, #72]	; (80080c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	00db      	lsls	r3, r3, #3
 8008084:	490e      	ldr	r1, [pc, #56]	; (80080c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008086:	4313      	orrs	r3, r2
 8008088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800808a:	f000 f821 	bl	80080d0 <HAL_RCC_GetSysClockFreq>
 800808e:	4602      	mov	r2, r0
 8008090:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	091b      	lsrs	r3, r3, #4
 8008096:	f003 030f 	and.w	r3, r3, #15
 800809a:	490a      	ldr	r1, [pc, #40]	; (80080c4 <HAL_RCC_ClockConfig+0x1c0>)
 800809c:	5ccb      	ldrb	r3, [r1, r3]
 800809e:	fa22 f303 	lsr.w	r3, r2, r3
 80080a2:	4a09      	ldr	r2, [pc, #36]	; (80080c8 <HAL_RCC_ClockConfig+0x1c4>)
 80080a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80080a6:	4b09      	ldr	r3, [pc, #36]	; (80080cc <HAL_RCC_ClockConfig+0x1c8>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fc ff12 	bl	8004ed4 <HAL_InitTick>

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	40023c00 	.word	0x40023c00
 80080c0:	40023800 	.word	0x40023800
 80080c4:	080165ac 	.word	0x080165ac
 80080c8:	200002e4 	.word	0x200002e4
 80080cc:	200002e8 	.word	0x200002e8

080080d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080d4:	b094      	sub	sp, #80	; 0x50
 80080d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80080d8:	2300      	movs	r3, #0
 80080da:	647b      	str	r3, [r7, #68]	; 0x44
 80080dc:	2300      	movs	r3, #0
 80080de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080e0:	2300      	movs	r3, #0
 80080e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80080e4:	2300      	movs	r3, #0
 80080e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080e8:	4b79      	ldr	r3, [pc, #484]	; (80082d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f003 030c 	and.w	r3, r3, #12
 80080f0:	2b08      	cmp	r3, #8
 80080f2:	d00d      	beq.n	8008110 <HAL_RCC_GetSysClockFreq+0x40>
 80080f4:	2b08      	cmp	r3, #8
 80080f6:	f200 80e1 	bhi.w	80082bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d002      	beq.n	8008104 <HAL_RCC_GetSysClockFreq+0x34>
 80080fe:	2b04      	cmp	r3, #4
 8008100:	d003      	beq.n	800810a <HAL_RCC_GetSysClockFreq+0x3a>
 8008102:	e0db      	b.n	80082bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008104:	4b73      	ldr	r3, [pc, #460]	; (80082d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008106:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008108:	e0db      	b.n	80082c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800810a:	4b73      	ldr	r3, [pc, #460]	; (80082d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800810c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800810e:	e0d8      	b.n	80082c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008110:	4b6f      	ldr	r3, [pc, #444]	; (80082d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008118:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800811a:	4b6d      	ldr	r3, [pc, #436]	; (80082d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d063      	beq.n	80081ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008126:	4b6a      	ldr	r3, [pc, #424]	; (80082d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	099b      	lsrs	r3, r3, #6
 800812c:	2200      	movs	r2, #0
 800812e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008130:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008138:	633b      	str	r3, [r7, #48]	; 0x30
 800813a:	2300      	movs	r3, #0
 800813c:	637b      	str	r3, [r7, #52]	; 0x34
 800813e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008142:	4622      	mov	r2, r4
 8008144:	462b      	mov	r3, r5
 8008146:	f04f 0000 	mov.w	r0, #0
 800814a:	f04f 0100 	mov.w	r1, #0
 800814e:	0159      	lsls	r1, r3, #5
 8008150:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008154:	0150      	lsls	r0, r2, #5
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	4621      	mov	r1, r4
 800815c:	1a51      	subs	r1, r2, r1
 800815e:	6139      	str	r1, [r7, #16]
 8008160:	4629      	mov	r1, r5
 8008162:	eb63 0301 	sbc.w	r3, r3, r1
 8008166:	617b      	str	r3, [r7, #20]
 8008168:	f04f 0200 	mov.w	r2, #0
 800816c:	f04f 0300 	mov.w	r3, #0
 8008170:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008174:	4659      	mov	r1, fp
 8008176:	018b      	lsls	r3, r1, #6
 8008178:	4651      	mov	r1, sl
 800817a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800817e:	4651      	mov	r1, sl
 8008180:	018a      	lsls	r2, r1, #6
 8008182:	4651      	mov	r1, sl
 8008184:	ebb2 0801 	subs.w	r8, r2, r1
 8008188:	4659      	mov	r1, fp
 800818a:	eb63 0901 	sbc.w	r9, r3, r1
 800818e:	f04f 0200 	mov.w	r2, #0
 8008192:	f04f 0300 	mov.w	r3, #0
 8008196:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800819a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800819e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081a2:	4690      	mov	r8, r2
 80081a4:	4699      	mov	r9, r3
 80081a6:	4623      	mov	r3, r4
 80081a8:	eb18 0303 	adds.w	r3, r8, r3
 80081ac:	60bb      	str	r3, [r7, #8]
 80081ae:	462b      	mov	r3, r5
 80081b0:	eb49 0303 	adc.w	r3, r9, r3
 80081b4:	60fb      	str	r3, [r7, #12]
 80081b6:	f04f 0200 	mov.w	r2, #0
 80081ba:	f04f 0300 	mov.w	r3, #0
 80081be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80081c2:	4629      	mov	r1, r5
 80081c4:	024b      	lsls	r3, r1, #9
 80081c6:	4621      	mov	r1, r4
 80081c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80081cc:	4621      	mov	r1, r4
 80081ce:	024a      	lsls	r2, r1, #9
 80081d0:	4610      	mov	r0, r2
 80081d2:	4619      	mov	r1, r3
 80081d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081d6:	2200      	movs	r2, #0
 80081d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80081da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081e0:	f7f8 fd42 	bl	8000c68 <__aeabi_uldivmod>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4613      	mov	r3, r2
 80081ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081ec:	e058      	b.n	80082a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081ee:	4b38      	ldr	r3, [pc, #224]	; (80082d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	099b      	lsrs	r3, r3, #6
 80081f4:	2200      	movs	r2, #0
 80081f6:	4618      	mov	r0, r3
 80081f8:	4611      	mov	r1, r2
 80081fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80081fe:	623b      	str	r3, [r7, #32]
 8008200:	2300      	movs	r3, #0
 8008202:	627b      	str	r3, [r7, #36]	; 0x24
 8008204:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008208:	4642      	mov	r2, r8
 800820a:	464b      	mov	r3, r9
 800820c:	f04f 0000 	mov.w	r0, #0
 8008210:	f04f 0100 	mov.w	r1, #0
 8008214:	0159      	lsls	r1, r3, #5
 8008216:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800821a:	0150      	lsls	r0, r2, #5
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4641      	mov	r1, r8
 8008222:	ebb2 0a01 	subs.w	sl, r2, r1
 8008226:	4649      	mov	r1, r9
 8008228:	eb63 0b01 	sbc.w	fp, r3, r1
 800822c:	f04f 0200 	mov.w	r2, #0
 8008230:	f04f 0300 	mov.w	r3, #0
 8008234:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008238:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800823c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008240:	ebb2 040a 	subs.w	r4, r2, sl
 8008244:	eb63 050b 	sbc.w	r5, r3, fp
 8008248:	f04f 0200 	mov.w	r2, #0
 800824c:	f04f 0300 	mov.w	r3, #0
 8008250:	00eb      	lsls	r3, r5, #3
 8008252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008256:	00e2      	lsls	r2, r4, #3
 8008258:	4614      	mov	r4, r2
 800825a:	461d      	mov	r5, r3
 800825c:	4643      	mov	r3, r8
 800825e:	18e3      	adds	r3, r4, r3
 8008260:	603b      	str	r3, [r7, #0]
 8008262:	464b      	mov	r3, r9
 8008264:	eb45 0303 	adc.w	r3, r5, r3
 8008268:	607b      	str	r3, [r7, #4]
 800826a:	f04f 0200 	mov.w	r2, #0
 800826e:	f04f 0300 	mov.w	r3, #0
 8008272:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008276:	4629      	mov	r1, r5
 8008278:	028b      	lsls	r3, r1, #10
 800827a:	4621      	mov	r1, r4
 800827c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008280:	4621      	mov	r1, r4
 8008282:	028a      	lsls	r2, r1, #10
 8008284:	4610      	mov	r0, r2
 8008286:	4619      	mov	r1, r3
 8008288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800828a:	2200      	movs	r2, #0
 800828c:	61bb      	str	r3, [r7, #24]
 800828e:	61fa      	str	r2, [r7, #28]
 8008290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008294:	f7f8 fce8 	bl	8000c68 <__aeabi_uldivmod>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	4613      	mov	r3, r2
 800829e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80082a0:	4b0b      	ldr	r3, [pc, #44]	; (80082d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	0c1b      	lsrs	r3, r3, #16
 80082a6:	f003 0303 	and.w	r3, r3, #3
 80082aa:	3301      	adds	r3, #1
 80082ac:	005b      	lsls	r3, r3, #1
 80082ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80082b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80082ba:	e002      	b.n	80082c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80082bc:	4b05      	ldr	r3, [pc, #20]	; (80082d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80082be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80082c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3750      	adds	r7, #80	; 0x50
 80082c8:	46bd      	mov	sp, r7
 80082ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082ce:	bf00      	nop
 80082d0:	40023800 	.word	0x40023800
 80082d4:	00f42400 	.word	0x00f42400
 80082d8:	007a1200 	.word	0x007a1200

080082dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082dc:	b480      	push	{r7}
 80082de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082e0:	4b03      	ldr	r3, [pc, #12]	; (80082f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80082e2:	681b      	ldr	r3, [r3, #0]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	200002e4 	.word	0x200002e4

080082f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80082f8:	f7ff fff0 	bl	80082dc <HAL_RCC_GetHCLKFreq>
 80082fc:	4602      	mov	r2, r0
 80082fe:	4b05      	ldr	r3, [pc, #20]	; (8008314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	0a9b      	lsrs	r3, r3, #10
 8008304:	f003 0307 	and.w	r3, r3, #7
 8008308:	4903      	ldr	r1, [pc, #12]	; (8008318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800830a:	5ccb      	ldrb	r3, [r1, r3]
 800830c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008310:	4618      	mov	r0, r3
 8008312:	bd80      	pop	{r7, pc}
 8008314:	40023800 	.word	0x40023800
 8008318:	080165bc 	.word	0x080165bc

0800831c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008320:	f7ff ffdc 	bl	80082dc <HAL_RCC_GetHCLKFreq>
 8008324:	4602      	mov	r2, r0
 8008326:	4b05      	ldr	r3, [pc, #20]	; (800833c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	0b5b      	lsrs	r3, r3, #13
 800832c:	f003 0307 	and.w	r3, r3, #7
 8008330:	4903      	ldr	r1, [pc, #12]	; (8008340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008332:	5ccb      	ldrb	r3, [r1, r3]
 8008334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008338:	4618      	mov	r0, r3
 800833a:	bd80      	pop	{r7, pc}
 800833c:	40023800 	.word	0x40023800
 8008340:	080165bc 	.word	0x080165bc

08008344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e041      	b.n	80083da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d106      	bne.n	8008370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f7fc fa7c 	bl	8004868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2202      	movs	r2, #2
 8008374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	3304      	adds	r3, #4
 8008380:	4619      	mov	r1, r3
 8008382:	4610      	mov	r0, r2
 8008384:	f000 fd0a 	bl	8008d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
	...

080083e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d001      	beq.n	80083fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e04e      	b.n	800849a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68da      	ldr	r2, [r3, #12]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f042 0201 	orr.w	r2, r2, #1
 8008412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a23      	ldr	r2, [pc, #140]	; (80084a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d022      	beq.n	8008464 <HAL_TIM_Base_Start_IT+0x80>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008426:	d01d      	beq.n	8008464 <HAL_TIM_Base_Start_IT+0x80>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a1f      	ldr	r2, [pc, #124]	; (80084ac <HAL_TIM_Base_Start_IT+0xc8>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d018      	beq.n	8008464 <HAL_TIM_Base_Start_IT+0x80>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a1e      	ldr	r2, [pc, #120]	; (80084b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d013      	beq.n	8008464 <HAL_TIM_Base_Start_IT+0x80>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a1c      	ldr	r2, [pc, #112]	; (80084b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d00e      	beq.n	8008464 <HAL_TIM_Base_Start_IT+0x80>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a1b      	ldr	r2, [pc, #108]	; (80084b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d009      	beq.n	8008464 <HAL_TIM_Base_Start_IT+0x80>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a19      	ldr	r2, [pc, #100]	; (80084bc <HAL_TIM_Base_Start_IT+0xd8>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d004      	beq.n	8008464 <HAL_TIM_Base_Start_IT+0x80>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a18      	ldr	r2, [pc, #96]	; (80084c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d111      	bne.n	8008488 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f003 0307 	and.w	r3, r3, #7
 800846e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2b06      	cmp	r3, #6
 8008474:	d010      	beq.n	8008498 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f042 0201 	orr.w	r2, r2, #1
 8008484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008486:	e007      	b.n	8008498 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f042 0201 	orr.w	r2, r2, #1
 8008496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	40010000 	.word	0x40010000
 80084ac:	40000400 	.word	0x40000400
 80084b0:	40000800 	.word	0x40000800
 80084b4:	40000c00 	.word	0x40000c00
 80084b8:	40010400 	.word	0x40010400
 80084bc:	40014000 	.word	0x40014000
 80084c0:	40001800 	.word	0x40001800

080084c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f022 0201 	bic.w	r2, r2, #1
 80084da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6a1a      	ldr	r2, [r3, #32]
 80084e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80084e6:	4013      	ands	r3, r2
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10f      	bne.n	800850c <HAL_TIM_Base_Stop_IT+0x48>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	6a1a      	ldr	r2, [r3, #32]
 80084f2:	f240 4344 	movw	r3, #1092	; 0x444
 80084f6:	4013      	ands	r3, r2
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d107      	bne.n	800850c <HAL_TIM_Base_Stop_IT+0x48>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 0201 	bic.w	r2, r2, #1
 800850a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b082      	sub	sp, #8
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e041      	b.n	80085b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800853a:	b2db      	uxtb	r3, r3
 800853c:	2b00      	cmp	r3, #0
 800853e:	d106      	bne.n	800854e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f839 	bl	80085c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2202      	movs	r2, #2
 8008552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	3304      	adds	r3, #4
 800855e:	4619      	mov	r1, r3
 8008560:	4610      	mov	r0, r2
 8008562:	f000 fc1b 	bl	8008d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d109      	bne.n	80085f8 <HAL_TIM_PWM_Start+0x24>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	bf14      	ite	ne
 80085f0:	2301      	movne	r3, #1
 80085f2:	2300      	moveq	r3, #0
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	e022      	b.n	800863e <HAL_TIM_PWM_Start+0x6a>
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	d109      	bne.n	8008612 <HAL_TIM_PWM_Start+0x3e>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b01      	cmp	r3, #1
 8008608:	bf14      	ite	ne
 800860a:	2301      	movne	r3, #1
 800860c:	2300      	moveq	r3, #0
 800860e:	b2db      	uxtb	r3, r3
 8008610:	e015      	b.n	800863e <HAL_TIM_PWM_Start+0x6a>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b08      	cmp	r3, #8
 8008616:	d109      	bne.n	800862c <HAL_TIM_PWM_Start+0x58>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b01      	cmp	r3, #1
 8008622:	bf14      	ite	ne
 8008624:	2301      	movne	r3, #1
 8008626:	2300      	moveq	r3, #0
 8008628:	b2db      	uxtb	r3, r3
 800862a:	e008      	b.n	800863e <HAL_TIM_PWM_Start+0x6a>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b01      	cmp	r3, #1
 8008636:	bf14      	ite	ne
 8008638:	2301      	movne	r3, #1
 800863a:	2300      	moveq	r3, #0
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e07c      	b.n	8008740 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d104      	bne.n	8008656 <HAL_TIM_PWM_Start+0x82>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2202      	movs	r2, #2
 8008650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008654:	e013      	b.n	800867e <HAL_TIM_PWM_Start+0xaa>
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	2b04      	cmp	r3, #4
 800865a:	d104      	bne.n	8008666 <HAL_TIM_PWM_Start+0x92>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2202      	movs	r2, #2
 8008660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008664:	e00b      	b.n	800867e <HAL_TIM_PWM_Start+0xaa>
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2b08      	cmp	r3, #8
 800866a:	d104      	bne.n	8008676 <HAL_TIM_PWM_Start+0xa2>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2202      	movs	r2, #2
 8008670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008674:	e003      	b.n	800867e <HAL_TIM_PWM_Start+0xaa>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2202      	movs	r2, #2
 800867a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2201      	movs	r2, #1
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	4618      	mov	r0, r3
 8008688:	f000 fe7e 	bl	8009388 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a2d      	ldr	r2, [pc, #180]	; (8008748 <HAL_TIM_PWM_Start+0x174>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d004      	beq.n	80086a0 <HAL_TIM_PWM_Start+0xcc>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a2c      	ldr	r2, [pc, #176]	; (800874c <HAL_TIM_PWM_Start+0x178>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d101      	bne.n	80086a4 <HAL_TIM_PWM_Start+0xd0>
 80086a0:	2301      	movs	r3, #1
 80086a2:	e000      	b.n	80086a6 <HAL_TIM_PWM_Start+0xd2>
 80086a4:	2300      	movs	r3, #0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d007      	beq.n	80086ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a22      	ldr	r2, [pc, #136]	; (8008748 <HAL_TIM_PWM_Start+0x174>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d022      	beq.n	800870a <HAL_TIM_PWM_Start+0x136>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086cc:	d01d      	beq.n	800870a <HAL_TIM_PWM_Start+0x136>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a1f      	ldr	r2, [pc, #124]	; (8008750 <HAL_TIM_PWM_Start+0x17c>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d018      	beq.n	800870a <HAL_TIM_PWM_Start+0x136>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a1d      	ldr	r2, [pc, #116]	; (8008754 <HAL_TIM_PWM_Start+0x180>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d013      	beq.n	800870a <HAL_TIM_PWM_Start+0x136>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a1c      	ldr	r2, [pc, #112]	; (8008758 <HAL_TIM_PWM_Start+0x184>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d00e      	beq.n	800870a <HAL_TIM_PWM_Start+0x136>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a16      	ldr	r2, [pc, #88]	; (800874c <HAL_TIM_PWM_Start+0x178>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d009      	beq.n	800870a <HAL_TIM_PWM_Start+0x136>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a18      	ldr	r2, [pc, #96]	; (800875c <HAL_TIM_PWM_Start+0x188>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d004      	beq.n	800870a <HAL_TIM_PWM_Start+0x136>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a16      	ldr	r2, [pc, #88]	; (8008760 <HAL_TIM_PWM_Start+0x18c>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d111      	bne.n	800872e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	f003 0307 	and.w	r3, r3, #7
 8008714:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2b06      	cmp	r3, #6
 800871a:	d010      	beq.n	800873e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f042 0201 	orr.w	r2, r2, #1
 800872a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800872c:	e007      	b.n	800873e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f042 0201 	orr.w	r2, r2, #1
 800873c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	40010000 	.word	0x40010000
 800874c:	40010400 	.word	0x40010400
 8008750:	40000400 	.word	0x40000400
 8008754:	40000800 	.word	0x40000800
 8008758:	40000c00 	.word	0x40000c00
 800875c:	40014000 	.word	0x40014000
 8008760:	40001800 	.word	0x40001800

08008764 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2200      	movs	r2, #0
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	4618      	mov	r0, r3
 8008778:	f000 fe06 	bl	8009388 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a2e      	ldr	r2, [pc, #184]	; (800883c <HAL_TIM_PWM_Stop+0xd8>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d004      	beq.n	8008790 <HAL_TIM_PWM_Stop+0x2c>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a2d      	ldr	r2, [pc, #180]	; (8008840 <HAL_TIM_PWM_Stop+0xdc>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d101      	bne.n	8008794 <HAL_TIM_PWM_Stop+0x30>
 8008790:	2301      	movs	r3, #1
 8008792:	e000      	b.n	8008796 <HAL_TIM_PWM_Stop+0x32>
 8008794:	2300      	movs	r3, #0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d017      	beq.n	80087ca <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	6a1a      	ldr	r2, [r3, #32]
 80087a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80087a4:	4013      	ands	r3, r2
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10f      	bne.n	80087ca <HAL_TIM_PWM_Stop+0x66>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6a1a      	ldr	r2, [r3, #32]
 80087b0:	f240 4344 	movw	r3, #1092	; 0x444
 80087b4:	4013      	ands	r3, r2
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d107      	bne.n	80087ca <HAL_TIM_PWM_Stop+0x66>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80087c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	6a1a      	ldr	r2, [r3, #32]
 80087d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80087d4:	4013      	ands	r3, r2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10f      	bne.n	80087fa <HAL_TIM_PWM_Stop+0x96>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	6a1a      	ldr	r2, [r3, #32]
 80087e0:	f240 4344 	movw	r3, #1092	; 0x444
 80087e4:	4013      	ands	r3, r2
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d107      	bne.n	80087fa <HAL_TIM_PWM_Stop+0x96>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f022 0201 	bic.w	r2, r2, #1
 80087f8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d104      	bne.n	800880a <HAL_TIM_PWM_Stop+0xa6>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008808:	e013      	b.n	8008832 <HAL_TIM_PWM_Stop+0xce>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b04      	cmp	r3, #4
 800880e:	d104      	bne.n	800881a <HAL_TIM_PWM_Stop+0xb6>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008818:	e00b      	b.n	8008832 <HAL_TIM_PWM_Stop+0xce>
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b08      	cmp	r3, #8
 800881e:	d104      	bne.n	800882a <HAL_TIM_PWM_Stop+0xc6>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008828:	e003      	b.n	8008832 <HAL_TIM_PWM_Stop+0xce>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	40010000 	.word	0x40010000
 8008840:	40010400 	.word	0x40010400

08008844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	f003 0302 	and.w	r3, r3, #2
 8008862:	2b00      	cmp	r3, #0
 8008864:	d020      	beq.n	80088a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f003 0302 	and.w	r3, r3, #2
 800886c:	2b00      	cmp	r3, #0
 800886e:	d01b      	beq.n	80088a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f06f 0202 	mvn.w	r2, #2
 8008878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	f003 0303 	and.w	r3, r3, #3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d003      	beq.n	8008896 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fa65 	bl	8008d5e <HAL_TIM_IC_CaptureCallback>
 8008894:	e005      	b.n	80088a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fa57 	bl	8008d4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 fa68 	bl	8008d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f003 0304 	and.w	r3, r3, #4
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d020      	beq.n	80088f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f003 0304 	and.w	r3, r3, #4
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d01b      	beq.n	80088f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f06f 0204 	mvn.w	r2, #4
 80088c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2202      	movs	r2, #2
 80088ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d003      	beq.n	80088e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fa3f 	bl	8008d5e <HAL_TIM_IC_CaptureCallback>
 80088e0:	e005      	b.n	80088ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fa31 	bl	8008d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fa42 	bl	8008d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	f003 0308 	and.w	r3, r3, #8
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d020      	beq.n	8008940 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f003 0308 	and.w	r3, r3, #8
 8008904:	2b00      	cmp	r3, #0
 8008906:	d01b      	beq.n	8008940 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f06f 0208 	mvn.w	r2, #8
 8008910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2204      	movs	r2, #4
 8008916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	f003 0303 	and.w	r3, r3, #3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d003      	beq.n	800892e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fa19 	bl	8008d5e <HAL_TIM_IC_CaptureCallback>
 800892c:	e005      	b.n	800893a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fa0b 	bl	8008d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fa1c 	bl	8008d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	f003 0310 	and.w	r3, r3, #16
 8008946:	2b00      	cmp	r3, #0
 8008948:	d020      	beq.n	800898c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f003 0310 	and.w	r3, r3, #16
 8008950:	2b00      	cmp	r3, #0
 8008952:	d01b      	beq.n	800898c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f06f 0210 	mvn.w	r2, #16
 800895c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2208      	movs	r2, #8
 8008962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	69db      	ldr	r3, [r3, #28]
 800896a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800896e:	2b00      	cmp	r3, #0
 8008970:	d003      	beq.n	800897a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f9f3 	bl	8008d5e <HAL_TIM_IC_CaptureCallback>
 8008978:	e005      	b.n	8008986 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f9e5 	bl	8008d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f9f6 	bl	8008d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	f003 0301 	and.w	r3, r3, #1
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00c      	beq.n	80089b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	2b00      	cmp	r3, #0
 800899e:	d007      	beq.n	80089b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f06f 0201 	mvn.w	r2, #1
 80089a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f9c3 	bl	8008d36 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00c      	beq.n	80089d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d007      	beq.n	80089d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80089cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fd86 	bl	80094e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00c      	beq.n	80089f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d007      	beq.n	80089f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f9c7 	bl	8008d86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	f003 0320 	and.w	r3, r3, #32
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00c      	beq.n	8008a1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f003 0320 	and.w	r3, r3, #32
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d007      	beq.n	8008a1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f06f 0220 	mvn.w	r2, #32
 8008a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fd58 	bl	80094cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a1c:	bf00      	nop
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d101      	bne.n	8008a42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008a3e:	2302      	movs	r3, #2
 8008a40:	e0ae      	b.n	8008ba0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b0c      	cmp	r3, #12
 8008a4e:	f200 809f 	bhi.w	8008b90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008a52:	a201      	add	r2, pc, #4	; (adr r2, 8008a58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a58:	08008a8d 	.word	0x08008a8d
 8008a5c:	08008b91 	.word	0x08008b91
 8008a60:	08008b91 	.word	0x08008b91
 8008a64:	08008b91 	.word	0x08008b91
 8008a68:	08008acd 	.word	0x08008acd
 8008a6c:	08008b91 	.word	0x08008b91
 8008a70:	08008b91 	.word	0x08008b91
 8008a74:	08008b91 	.word	0x08008b91
 8008a78:	08008b0f 	.word	0x08008b0f
 8008a7c:	08008b91 	.word	0x08008b91
 8008a80:	08008b91 	.word	0x08008b91
 8008a84:	08008b91 	.word	0x08008b91
 8008a88:	08008b4f 	.word	0x08008b4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68b9      	ldr	r1, [r7, #8]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 fa2e 	bl	8008ef4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	699a      	ldr	r2, [r3, #24]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f042 0208 	orr.w	r2, r2, #8
 8008aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	699a      	ldr	r2, [r3, #24]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 0204 	bic.w	r2, r2, #4
 8008ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6999      	ldr	r1, [r3, #24]
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	691a      	ldr	r2, [r3, #16]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	619a      	str	r2, [r3, #24]
      break;
 8008aca:	e064      	b.n	8008b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68b9      	ldr	r1, [r7, #8]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 fa7e 	bl	8008fd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	699a      	ldr	r2, [r3, #24]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	699a      	ldr	r2, [r3, #24]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6999      	ldr	r1, [r3, #24]
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	021a      	lsls	r2, r3, #8
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	619a      	str	r2, [r3, #24]
      break;
 8008b0c:	e043      	b.n	8008b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68b9      	ldr	r1, [r7, #8]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f000 fad3 	bl	80090c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	69da      	ldr	r2, [r3, #28]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f042 0208 	orr.w	r2, r2, #8
 8008b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	69da      	ldr	r2, [r3, #28]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f022 0204 	bic.w	r2, r2, #4
 8008b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	69d9      	ldr	r1, [r3, #28]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	691a      	ldr	r2, [r3, #16]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	61da      	str	r2, [r3, #28]
      break;
 8008b4c:	e023      	b.n	8008b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68b9      	ldr	r1, [r7, #8]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 fb27 	bl	80091a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	69da      	ldr	r2, [r3, #28]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	69da      	ldr	r2, [r3, #28]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	69d9      	ldr	r1, [r3, #28]
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	021a      	lsls	r2, r3, #8
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	61da      	str	r2, [r3, #28]
      break;
 8008b8e:	e002      	b.n	8008b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	75fb      	strb	r3, [r7, #23]
      break;
 8008b94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3718      	adds	r7, #24
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d101      	bne.n	8008bc4 <HAL_TIM_ConfigClockSource+0x1c>
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	e0b4      	b.n	8008d2e <HAL_TIM_ConfigClockSource+0x186>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2202      	movs	r2, #2
 8008bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bfc:	d03e      	beq.n	8008c7c <HAL_TIM_ConfigClockSource+0xd4>
 8008bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c02:	f200 8087 	bhi.w	8008d14 <HAL_TIM_ConfigClockSource+0x16c>
 8008c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c0a:	f000 8086 	beq.w	8008d1a <HAL_TIM_ConfigClockSource+0x172>
 8008c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c12:	d87f      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x16c>
 8008c14:	2b70      	cmp	r3, #112	; 0x70
 8008c16:	d01a      	beq.n	8008c4e <HAL_TIM_ConfigClockSource+0xa6>
 8008c18:	2b70      	cmp	r3, #112	; 0x70
 8008c1a:	d87b      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x16c>
 8008c1c:	2b60      	cmp	r3, #96	; 0x60
 8008c1e:	d050      	beq.n	8008cc2 <HAL_TIM_ConfigClockSource+0x11a>
 8008c20:	2b60      	cmp	r3, #96	; 0x60
 8008c22:	d877      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x16c>
 8008c24:	2b50      	cmp	r3, #80	; 0x50
 8008c26:	d03c      	beq.n	8008ca2 <HAL_TIM_ConfigClockSource+0xfa>
 8008c28:	2b50      	cmp	r3, #80	; 0x50
 8008c2a:	d873      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x16c>
 8008c2c:	2b40      	cmp	r3, #64	; 0x40
 8008c2e:	d058      	beq.n	8008ce2 <HAL_TIM_ConfigClockSource+0x13a>
 8008c30:	2b40      	cmp	r3, #64	; 0x40
 8008c32:	d86f      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x16c>
 8008c34:	2b30      	cmp	r3, #48	; 0x30
 8008c36:	d064      	beq.n	8008d02 <HAL_TIM_ConfigClockSource+0x15a>
 8008c38:	2b30      	cmp	r3, #48	; 0x30
 8008c3a:	d86b      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x16c>
 8008c3c:	2b20      	cmp	r3, #32
 8008c3e:	d060      	beq.n	8008d02 <HAL_TIM_ConfigClockSource+0x15a>
 8008c40:	2b20      	cmp	r3, #32
 8008c42:	d867      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x16c>
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d05c      	beq.n	8008d02 <HAL_TIM_ConfigClockSource+0x15a>
 8008c48:	2b10      	cmp	r3, #16
 8008c4a:	d05a      	beq.n	8008d02 <HAL_TIM_ConfigClockSource+0x15a>
 8008c4c:	e062      	b.n	8008d14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c5e:	f000 fb73 	bl	8009348 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	609a      	str	r2, [r3, #8]
      break;
 8008c7a:	e04f      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c8c:	f000 fb5c 	bl	8009348 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	689a      	ldr	r2, [r3, #8]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c9e:	609a      	str	r2, [r3, #8]
      break;
 8008ca0:	e03c      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cae:	461a      	mov	r2, r3
 8008cb0:	f000 fad0 	bl	8009254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2150      	movs	r1, #80	; 0x50
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 fb29 	bl	8009312 <TIM_ITRx_SetConfig>
      break;
 8008cc0:	e02c      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cce:	461a      	mov	r2, r3
 8008cd0:	f000 faef 	bl	80092b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2160      	movs	r1, #96	; 0x60
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 fb19 	bl	8009312 <TIM_ITRx_SetConfig>
      break;
 8008ce0:	e01c      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cee:	461a      	mov	r2, r3
 8008cf0:	f000 fab0 	bl	8009254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2140      	movs	r1, #64	; 0x40
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 fb09 	bl	8009312 <TIM_ITRx_SetConfig>
      break;
 8008d00:	e00c      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	f000 fb00 	bl	8009312 <TIM_ITRx_SetConfig>
      break;
 8008d12:	e003      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	73fb      	strb	r3, [r7, #15]
      break;
 8008d18:	e000      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008d1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b083      	sub	sp, #12
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008d3e:	bf00      	nop
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b083      	sub	sp, #12
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d52:	bf00      	nop
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b083      	sub	sp, #12
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d66:	bf00      	nop
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b083      	sub	sp, #12
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d7a:	bf00      	nop
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d86:	b480      	push	{r7}
 8008d88:	b083      	sub	sp, #12
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d8e:	bf00      	nop
 8008d90:	370c      	adds	r7, #12
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
	...

08008d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a46      	ldr	r2, [pc, #280]	; (8008ec8 <TIM_Base_SetConfig+0x12c>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d013      	beq.n	8008ddc <TIM_Base_SetConfig+0x40>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dba:	d00f      	beq.n	8008ddc <TIM_Base_SetConfig+0x40>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a43      	ldr	r2, [pc, #268]	; (8008ecc <TIM_Base_SetConfig+0x130>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d00b      	beq.n	8008ddc <TIM_Base_SetConfig+0x40>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a42      	ldr	r2, [pc, #264]	; (8008ed0 <TIM_Base_SetConfig+0x134>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d007      	beq.n	8008ddc <TIM_Base_SetConfig+0x40>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a41      	ldr	r2, [pc, #260]	; (8008ed4 <TIM_Base_SetConfig+0x138>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d003      	beq.n	8008ddc <TIM_Base_SetConfig+0x40>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a40      	ldr	r2, [pc, #256]	; (8008ed8 <TIM_Base_SetConfig+0x13c>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d108      	bne.n	8008dee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a35      	ldr	r2, [pc, #212]	; (8008ec8 <TIM_Base_SetConfig+0x12c>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d02b      	beq.n	8008e4e <TIM_Base_SetConfig+0xb2>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dfc:	d027      	beq.n	8008e4e <TIM_Base_SetConfig+0xb2>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a32      	ldr	r2, [pc, #200]	; (8008ecc <TIM_Base_SetConfig+0x130>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d023      	beq.n	8008e4e <TIM_Base_SetConfig+0xb2>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a31      	ldr	r2, [pc, #196]	; (8008ed0 <TIM_Base_SetConfig+0x134>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d01f      	beq.n	8008e4e <TIM_Base_SetConfig+0xb2>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a30      	ldr	r2, [pc, #192]	; (8008ed4 <TIM_Base_SetConfig+0x138>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d01b      	beq.n	8008e4e <TIM_Base_SetConfig+0xb2>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a2f      	ldr	r2, [pc, #188]	; (8008ed8 <TIM_Base_SetConfig+0x13c>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d017      	beq.n	8008e4e <TIM_Base_SetConfig+0xb2>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a2e      	ldr	r2, [pc, #184]	; (8008edc <TIM_Base_SetConfig+0x140>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d013      	beq.n	8008e4e <TIM_Base_SetConfig+0xb2>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a2d      	ldr	r2, [pc, #180]	; (8008ee0 <TIM_Base_SetConfig+0x144>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d00f      	beq.n	8008e4e <TIM_Base_SetConfig+0xb2>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a2c      	ldr	r2, [pc, #176]	; (8008ee4 <TIM_Base_SetConfig+0x148>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d00b      	beq.n	8008e4e <TIM_Base_SetConfig+0xb2>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a2b      	ldr	r2, [pc, #172]	; (8008ee8 <TIM_Base_SetConfig+0x14c>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d007      	beq.n	8008e4e <TIM_Base_SetConfig+0xb2>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a2a      	ldr	r2, [pc, #168]	; (8008eec <TIM_Base_SetConfig+0x150>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d003      	beq.n	8008e4e <TIM_Base_SetConfig+0xb2>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a29      	ldr	r2, [pc, #164]	; (8008ef0 <TIM_Base_SetConfig+0x154>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d108      	bne.n	8008e60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	689a      	ldr	r2, [r3, #8]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a10      	ldr	r2, [pc, #64]	; (8008ec8 <TIM_Base_SetConfig+0x12c>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d003      	beq.n	8008e94 <TIM_Base_SetConfig+0xf8>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a12      	ldr	r2, [pc, #72]	; (8008ed8 <TIM_Base_SetConfig+0x13c>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d103      	bne.n	8008e9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	691a      	ldr	r2, [r3, #16]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	f003 0301 	and.w	r3, r3, #1
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d105      	bne.n	8008eba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	f023 0201 	bic.w	r2, r3, #1
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	611a      	str	r2, [r3, #16]
  }
}
 8008eba:	bf00      	nop
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	40010000 	.word	0x40010000
 8008ecc:	40000400 	.word	0x40000400
 8008ed0:	40000800 	.word	0x40000800
 8008ed4:	40000c00 	.word	0x40000c00
 8008ed8:	40010400 	.word	0x40010400
 8008edc:	40014000 	.word	0x40014000
 8008ee0:	40014400 	.word	0x40014400
 8008ee4:	40014800 	.word	0x40014800
 8008ee8:	40001800 	.word	0x40001800
 8008eec:	40001c00 	.word	0x40001c00
 8008ef0:	40002000 	.word	0x40002000

08008ef4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b087      	sub	sp, #28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a1b      	ldr	r3, [r3, #32]
 8008f08:	f023 0201 	bic.w	r2, r3, #1
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f023 0303 	bic.w	r3, r3, #3
 8008f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f023 0302 	bic.w	r3, r3, #2
 8008f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a20      	ldr	r2, [pc, #128]	; (8008fcc <TIM_OC1_SetConfig+0xd8>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d003      	beq.n	8008f58 <TIM_OC1_SetConfig+0x64>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a1f      	ldr	r2, [pc, #124]	; (8008fd0 <TIM_OC1_SetConfig+0xdc>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d10c      	bne.n	8008f72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	f023 0308 	bic.w	r3, r3, #8
 8008f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	f023 0304 	bic.w	r3, r3, #4
 8008f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a15      	ldr	r2, [pc, #84]	; (8008fcc <TIM_OC1_SetConfig+0xd8>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d003      	beq.n	8008f82 <TIM_OC1_SetConfig+0x8e>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a14      	ldr	r2, [pc, #80]	; (8008fd0 <TIM_OC1_SetConfig+0xdc>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d111      	bne.n	8008fa6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	693a      	ldr	r2, [r7, #16]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	685a      	ldr	r2, [r3, #4]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	697a      	ldr	r2, [r7, #20]
 8008fbe:	621a      	str	r2, [r3, #32]
}
 8008fc0:	bf00      	nop
 8008fc2:	371c      	adds	r7, #28
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	40010000 	.word	0x40010000
 8008fd0:	40010400 	.word	0x40010400

08008fd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a1b      	ldr	r3, [r3, #32]
 8008fe8:	f023 0210 	bic.w	r2, r3, #16
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800900a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	021b      	lsls	r3, r3, #8
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	4313      	orrs	r3, r2
 8009016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	f023 0320 	bic.w	r3, r3, #32
 800901e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	011b      	lsls	r3, r3, #4
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	4313      	orrs	r3, r2
 800902a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a22      	ldr	r2, [pc, #136]	; (80090b8 <TIM_OC2_SetConfig+0xe4>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d003      	beq.n	800903c <TIM_OC2_SetConfig+0x68>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a21      	ldr	r2, [pc, #132]	; (80090bc <TIM_OC2_SetConfig+0xe8>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d10d      	bne.n	8009058 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	011b      	lsls	r3, r3, #4
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	4313      	orrs	r3, r2
 800904e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009056:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a17      	ldr	r2, [pc, #92]	; (80090b8 <TIM_OC2_SetConfig+0xe4>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d003      	beq.n	8009068 <TIM_OC2_SetConfig+0x94>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a16      	ldr	r2, [pc, #88]	; (80090bc <TIM_OC2_SetConfig+0xe8>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d113      	bne.n	8009090 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800906e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009076:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	693a      	ldr	r2, [r7, #16]
 8009080:	4313      	orrs	r3, r2
 8009082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	699b      	ldr	r3, [r3, #24]
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	693a      	ldr	r2, [r7, #16]
 800908c:	4313      	orrs	r3, r2
 800908e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	693a      	ldr	r2, [r7, #16]
 8009094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	621a      	str	r2, [r3, #32]
}
 80090aa:	bf00      	nop
 80090ac:	371c      	adds	r7, #28
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	40010000 	.word	0x40010000
 80090bc:	40010400 	.word	0x40010400

080090c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b087      	sub	sp, #28
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a1b      	ldr	r3, [r3, #32]
 80090d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f023 0303 	bic.w	r3, r3, #3
 80090f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	4313      	orrs	r3, r2
 8009100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	021b      	lsls	r3, r3, #8
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	4313      	orrs	r3, r2
 8009114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a21      	ldr	r2, [pc, #132]	; (80091a0 <TIM_OC3_SetConfig+0xe0>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d003      	beq.n	8009126 <TIM_OC3_SetConfig+0x66>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a20      	ldr	r2, [pc, #128]	; (80091a4 <TIM_OC3_SetConfig+0xe4>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d10d      	bne.n	8009142 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800912c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	021b      	lsls	r3, r3, #8
 8009134:	697a      	ldr	r2, [r7, #20]
 8009136:	4313      	orrs	r3, r2
 8009138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a16      	ldr	r2, [pc, #88]	; (80091a0 <TIM_OC3_SetConfig+0xe0>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d003      	beq.n	8009152 <TIM_OC3_SetConfig+0x92>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a15      	ldr	r2, [pc, #84]	; (80091a4 <TIM_OC3_SetConfig+0xe4>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d113      	bne.n	800917a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	695b      	ldr	r3, [r3, #20]
 8009166:	011b      	lsls	r3, r3, #4
 8009168:	693a      	ldr	r2, [r7, #16]
 800916a:	4313      	orrs	r3, r2
 800916c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	011b      	lsls	r3, r3, #4
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	4313      	orrs	r3, r2
 8009178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	685a      	ldr	r2, [r3, #4]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	621a      	str	r2, [r3, #32]
}
 8009194:	bf00      	nop
 8009196:	371c      	adds	r7, #28
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	40010000 	.word	0x40010000
 80091a4:	40010400 	.word	0x40010400

080091a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b087      	sub	sp, #28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a1b      	ldr	r3, [r3, #32]
 80091bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	021b      	lsls	r3, r3, #8
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	031b      	lsls	r3, r3, #12
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a12      	ldr	r2, [pc, #72]	; (800924c <TIM_OC4_SetConfig+0xa4>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d003      	beq.n	8009210 <TIM_OC4_SetConfig+0x68>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a11      	ldr	r2, [pc, #68]	; (8009250 <TIM_OC4_SetConfig+0xa8>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d109      	bne.n	8009224 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009216:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	695b      	ldr	r3, [r3, #20]
 800921c:	019b      	lsls	r3, r3, #6
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	4313      	orrs	r3, r2
 8009222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	697a      	ldr	r2, [r7, #20]
 8009228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	685a      	ldr	r2, [r3, #4]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	621a      	str	r2, [r3, #32]
}
 800923e:	bf00      	nop
 8009240:	371c      	adds	r7, #28
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	40010000 	.word	0x40010000
 8009250:	40010400 	.word	0x40010400

08009254 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009254:	b480      	push	{r7}
 8009256:	b087      	sub	sp, #28
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6a1b      	ldr	r3, [r3, #32]
 8009264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	f023 0201 	bic.w	r2, r3, #1
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800927e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	011b      	lsls	r3, r3, #4
 8009284:	693a      	ldr	r2, [r7, #16]
 8009286:	4313      	orrs	r3, r2
 8009288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f023 030a 	bic.w	r3, r3, #10
 8009290:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	4313      	orrs	r3, r2
 8009298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	621a      	str	r2, [r3, #32]
}
 80092a6:	bf00      	nop
 80092a8:	371c      	adds	r7, #28
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b087      	sub	sp, #28
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	60f8      	str	r0, [r7, #12]
 80092ba:	60b9      	str	r1, [r7, #8]
 80092bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6a1b      	ldr	r3, [r3, #32]
 80092c8:	f023 0210 	bic.w	r2, r3, #16
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	031b      	lsls	r3, r3, #12
 80092e2:	693a      	ldr	r2, [r7, #16]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	011b      	lsls	r3, r3, #4
 80092f4:	697a      	ldr	r2, [r7, #20]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	621a      	str	r2, [r3, #32]
}
 8009306:	bf00      	nop
 8009308:	371c      	adds	r7, #28
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009312:	b480      	push	{r7}
 8009314:	b085      	sub	sp, #20
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009328:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	4313      	orrs	r3, r2
 8009330:	f043 0307 	orr.w	r3, r3, #7
 8009334:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	609a      	str	r2, [r3, #8]
}
 800933c:	bf00      	nop
 800933e:	3714      	adds	r7, #20
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009348:	b480      	push	{r7}
 800934a:	b087      	sub	sp, #28
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009362:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	021a      	lsls	r2, r3, #8
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	431a      	orrs	r2, r3
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	4313      	orrs	r3, r2
 8009370:	697a      	ldr	r2, [r7, #20]
 8009372:	4313      	orrs	r3, r2
 8009374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	609a      	str	r2, [r3, #8]
}
 800937c:	bf00      	nop
 800937e:	371c      	adds	r7, #28
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009388:	b480      	push	{r7}
 800938a:	b087      	sub	sp, #28
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	f003 031f 	and.w	r3, r3, #31
 800939a:	2201      	movs	r2, #1
 800939c:	fa02 f303 	lsl.w	r3, r2, r3
 80093a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6a1a      	ldr	r2, [r3, #32]
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	43db      	mvns	r3, r3
 80093aa:	401a      	ands	r2, r3
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6a1a      	ldr	r2, [r3, #32]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	f003 031f 	and.w	r3, r3, #31
 80093ba:	6879      	ldr	r1, [r7, #4]
 80093bc:	fa01 f303 	lsl.w	r3, r1, r3
 80093c0:	431a      	orrs	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	621a      	str	r2, [r3, #32]
}
 80093c6:	bf00      	nop
 80093c8:	371c      	adds	r7, #28
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
	...

080093d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d101      	bne.n	80093ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093e8:	2302      	movs	r3, #2
 80093ea:	e05a      	b.n	80094a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	4313      	orrs	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a21      	ldr	r2, [pc, #132]	; (80094b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d022      	beq.n	8009476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009438:	d01d      	beq.n	8009476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a1d      	ldr	r2, [pc, #116]	; (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d018      	beq.n	8009476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a1b      	ldr	r2, [pc, #108]	; (80094b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d013      	beq.n	8009476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a1a      	ldr	r2, [pc, #104]	; (80094bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d00e      	beq.n	8009476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a18      	ldr	r2, [pc, #96]	; (80094c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d009      	beq.n	8009476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a17      	ldr	r2, [pc, #92]	; (80094c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d004      	beq.n	8009476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a15      	ldr	r2, [pc, #84]	; (80094c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d10c      	bne.n	8009490 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800947c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	4313      	orrs	r3, r2
 8009486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3714      	adds	r7, #20
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	40010000 	.word	0x40010000
 80094b4:	40000400 	.word	0x40000400
 80094b8:	40000800 	.word	0x40000800
 80094bc:	40000c00 	.word	0x40000c00
 80094c0:	40010400 	.word	0x40010400
 80094c4:	40014000 	.word	0x40014000
 80094c8:	40001800 	.word	0x40001800

080094cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e042      	b.n	800958c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b00      	cmp	r3, #0
 8009510:	d106      	bne.n	8009520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7fb fa1c 	bl	8004958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2224      	movs	r2, #36	; 0x24
 8009524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68da      	ldr	r2, [r3, #12]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fc85 	bl	8009e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	691a      	ldr	r2, [r3, #16]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800954c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	695a      	ldr	r2, [r3, #20]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800955c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68da      	ldr	r2, [r3, #12]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800956c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2220      	movs	r2, #32
 8009578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2220      	movs	r2, #32
 8009580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b0ba      	sub	sp, #232	; 0xe8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80095ba:	2300      	movs	r3, #0
 80095bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80095c0:	2300      	movs	r3, #0
 80095c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80095c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ca:	f003 030f 	and.w	r3, r3, #15
 80095ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80095d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d10f      	bne.n	80095fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095de:	f003 0320 	and.w	r3, r3, #32
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d009      	beq.n	80095fa <HAL_UART_IRQHandler+0x66>
 80095e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095ea:	f003 0320 	and.w	r3, r3, #32
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d003      	beq.n	80095fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fb69 	bl	8009cca <UART_Receive_IT>
      return;
 80095f8:	e25b      	b.n	8009ab2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80095fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f000 80de 	beq.w	80097c0 <HAL_UART_IRQHandler+0x22c>
 8009604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	2b00      	cmp	r3, #0
 800960e:	d106      	bne.n	800961e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009614:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 80d1 	beq.w	80097c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800961e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009622:	f003 0301 	and.w	r3, r3, #1
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00b      	beq.n	8009642 <HAL_UART_IRQHandler+0xae>
 800962a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800962e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009632:	2b00      	cmp	r3, #0
 8009634:	d005      	beq.n	8009642 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800963a:	f043 0201 	orr.w	r2, r3, #1
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009646:	f003 0304 	and.w	r3, r3, #4
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00b      	beq.n	8009666 <HAL_UART_IRQHandler+0xd2>
 800964e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	2b00      	cmp	r3, #0
 8009658:	d005      	beq.n	8009666 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800965e:	f043 0202 	orr.w	r2, r3, #2
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800966a:	f003 0302 	and.w	r3, r3, #2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00b      	beq.n	800968a <HAL_UART_IRQHandler+0xf6>
 8009672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009676:	f003 0301 	and.w	r3, r3, #1
 800967a:	2b00      	cmp	r3, #0
 800967c:	d005      	beq.n	800968a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009682:	f043 0204 	orr.w	r2, r3, #4
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800968a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800968e:	f003 0308 	and.w	r3, r3, #8
 8009692:	2b00      	cmp	r3, #0
 8009694:	d011      	beq.n	80096ba <HAL_UART_IRQHandler+0x126>
 8009696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800969a:	f003 0320 	and.w	r3, r3, #32
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d105      	bne.n	80096ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80096a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d005      	beq.n	80096ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b2:	f043 0208 	orr.w	r2, r3, #8
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f000 81f2 	beq.w	8009aa8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096c8:	f003 0320 	and.w	r3, r3, #32
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d008      	beq.n	80096e2 <HAL_UART_IRQHandler+0x14e>
 80096d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096d4:	f003 0320 	and.w	r3, r3, #32
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d002      	beq.n	80096e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 faf4 	bl	8009cca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	695b      	ldr	r3, [r3, #20]
 80096e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ec:	2b40      	cmp	r3, #64	; 0x40
 80096ee:	bf0c      	ite	eq
 80096f0:	2301      	moveq	r3, #1
 80096f2:	2300      	movne	r3, #0
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096fe:	f003 0308 	and.w	r3, r3, #8
 8009702:	2b00      	cmp	r3, #0
 8009704:	d103      	bne.n	800970e <HAL_UART_IRQHandler+0x17a>
 8009706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800970a:	2b00      	cmp	r3, #0
 800970c:	d04f      	beq.n	80097ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f9fc 	bl	8009b0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800971e:	2b40      	cmp	r3, #64	; 0x40
 8009720:	d141      	bne.n	80097a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3314      	adds	r3, #20
 8009728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009730:	e853 3f00 	ldrex	r3, [r3]
 8009734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800973c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	3314      	adds	r3, #20
 800974a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800974e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009756:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800975a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800975e:	e841 2300 	strex	r3, r2, [r1]
 8009762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009766:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1d9      	bne.n	8009722 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009772:	2b00      	cmp	r3, #0
 8009774:	d013      	beq.n	800979e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800977a:	4a7e      	ldr	r2, [pc, #504]	; (8009974 <HAL_UART_IRQHandler+0x3e0>)
 800977c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009782:	4618      	mov	r0, r3
 8009784:	f7fc fab4 	bl	8005cf0 <HAL_DMA_Abort_IT>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d016      	beq.n	80097bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009798:	4610      	mov	r0, r2
 800979a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800979c:	e00e      	b.n	80097bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f99e 	bl	8009ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a4:	e00a      	b.n	80097bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f99a 	bl	8009ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ac:	e006      	b.n	80097bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f996 	bl	8009ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80097ba:	e175      	b.n	8009aa8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097bc:	bf00      	nop
    return;
 80097be:	e173      	b.n	8009aa8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	f040 814f 	bne.w	8009a68 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80097ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097ce:	f003 0310 	and.w	r3, r3, #16
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f000 8148 	beq.w	8009a68 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80097d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097dc:	f003 0310 	and.w	r3, r3, #16
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f000 8141 	beq.w	8009a68 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097e6:	2300      	movs	r3, #0
 80097e8:	60bb      	str	r3, [r7, #8]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	60bb      	str	r3, [r7, #8]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	60bb      	str	r3, [r7, #8]
 80097fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009806:	2b40      	cmp	r3, #64	; 0x40
 8009808:	f040 80b6 	bne.w	8009978 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009818:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 8145 	beq.w	8009aac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800982a:	429a      	cmp	r2, r3
 800982c:	f080 813e 	bcs.w	8009aac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009836:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800983c:	69db      	ldr	r3, [r3, #28]
 800983e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009842:	f000 8088 	beq.w	8009956 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	330c      	adds	r3, #12
 800984c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009854:	e853 3f00 	ldrex	r3, [r3]
 8009858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800985c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	330c      	adds	r3, #12
 800986e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009872:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800987e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009882:	e841 2300 	strex	r3, r2, [r1]
 8009886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800988a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1d9      	bne.n	8009846 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3314      	adds	r3, #20
 8009898:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800989c:	e853 3f00 	ldrex	r3, [r3]
 80098a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80098a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098a4:	f023 0301 	bic.w	r3, r3, #1
 80098a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	3314      	adds	r3, #20
 80098b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80098b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80098ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80098be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80098c2:	e841 2300 	strex	r3, r2, [r1]
 80098c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80098c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1e1      	bne.n	8009892 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3314      	adds	r3, #20
 80098d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098d8:	e853 3f00 	ldrex	r3, [r3]
 80098dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80098de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3314      	adds	r3, #20
 80098ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80098f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80098f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80098f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80098fa:	e841 2300 	strex	r3, r2, [r1]
 80098fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1e3      	bne.n	80098ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2220      	movs	r2, #32
 800990a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	330c      	adds	r3, #12
 800991a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800991e:	e853 3f00 	ldrex	r3, [r3]
 8009922:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009926:	f023 0310 	bic.w	r3, r3, #16
 800992a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	330c      	adds	r3, #12
 8009934:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009938:	65ba      	str	r2, [r7, #88]	; 0x58
 800993a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800993e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009940:	e841 2300 	strex	r3, r2, [r1]
 8009944:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1e3      	bne.n	8009914 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009950:	4618      	mov	r0, r3
 8009952:	f7fc f95d 	bl	8005c10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2202      	movs	r2, #2
 800995a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009964:	b29b      	uxth	r3, r3
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	b29b      	uxth	r3, r3
 800996a:	4619      	mov	r1, r3
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 f8c1 	bl	8009af4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009972:	e09b      	b.n	8009aac <HAL_UART_IRQHandler+0x518>
 8009974:	08009bd3 	.word	0x08009bd3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009980:	b29b      	uxth	r3, r3
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800998c:	b29b      	uxth	r3, r3
 800998e:	2b00      	cmp	r3, #0
 8009990:	f000 808e 	beq.w	8009ab0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009994:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009998:	2b00      	cmp	r3, #0
 800999a:	f000 8089 	beq.w	8009ab0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	330c      	adds	r3, #12
 80099a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a8:	e853 3f00 	ldrex	r3, [r3]
 80099ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80099ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	330c      	adds	r3, #12
 80099be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80099c2:	647a      	str	r2, [r7, #68]	; 0x44
 80099c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099ca:	e841 2300 	strex	r3, r2, [r1]
 80099ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1e3      	bne.n	800999e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3314      	adds	r3, #20
 80099dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e0:	e853 3f00 	ldrex	r3, [r3]
 80099e4:	623b      	str	r3, [r7, #32]
   return(result);
 80099e6:	6a3b      	ldr	r3, [r7, #32]
 80099e8:	f023 0301 	bic.w	r3, r3, #1
 80099ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	3314      	adds	r3, #20
 80099f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80099fa:	633a      	str	r2, [r7, #48]	; 0x30
 80099fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a02:	e841 2300 	strex	r3, r2, [r1]
 8009a06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1e3      	bne.n	80099d6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2220      	movs	r2, #32
 8009a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	330c      	adds	r3, #12
 8009a22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	e853 3f00 	ldrex	r3, [r3]
 8009a2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f023 0310 	bic.w	r3, r3, #16
 8009a32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	330c      	adds	r3, #12
 8009a3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009a40:	61fa      	str	r2, [r7, #28]
 8009a42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a44:	69b9      	ldr	r1, [r7, #24]
 8009a46:	69fa      	ldr	r2, [r7, #28]
 8009a48:	e841 2300 	strex	r3, r2, [r1]
 8009a4c:	617b      	str	r3, [r7, #20]
   return(result);
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1e3      	bne.n	8009a1c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2202      	movs	r2, #2
 8009a58:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a5e:	4619      	mov	r1, r3
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f847 	bl	8009af4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a66:	e023      	b.n	8009ab0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d009      	beq.n	8009a88 <HAL_UART_IRQHandler+0x4f4>
 8009a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d003      	beq.n	8009a88 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 f8ba 	bl	8009bfa <UART_Transmit_IT>
    return;
 8009a86:	e014      	b.n	8009ab2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00e      	beq.n	8009ab2 <HAL_UART_IRQHandler+0x51e>
 8009a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d008      	beq.n	8009ab2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f8fa 	bl	8009c9a <UART_EndTransmit_IT>
    return;
 8009aa6:	e004      	b.n	8009ab2 <HAL_UART_IRQHandler+0x51e>
    return;
 8009aa8:	bf00      	nop
 8009aaa:	e002      	b.n	8009ab2 <HAL_UART_IRQHandler+0x51e>
      return;
 8009aac:	bf00      	nop
 8009aae:	e000      	b.n	8009ab2 <HAL_UART_IRQHandler+0x51e>
      return;
 8009ab0:	bf00      	nop
  }
}
 8009ab2:	37e8      	adds	r7, #232	; 0xe8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	460b      	mov	r3, r1
 8009afe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b095      	sub	sp, #84	; 0x54
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	330c      	adds	r3, #12
 8009b1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b1e:	e853 3f00 	ldrex	r3, [r3]
 8009b22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	330c      	adds	r3, #12
 8009b32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b34:	643a      	str	r2, [r7, #64]	; 0x40
 8009b36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b3c:	e841 2300 	strex	r3, r2, [r1]
 8009b40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1e5      	bne.n	8009b14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	3314      	adds	r3, #20
 8009b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b50:	6a3b      	ldr	r3, [r7, #32]
 8009b52:	e853 3f00 	ldrex	r3, [r3]
 8009b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	f023 0301 	bic.w	r3, r3, #1
 8009b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3314      	adds	r3, #20
 8009b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b70:	e841 2300 	strex	r3, r2, [r1]
 8009b74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e5      	bne.n	8009b48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d119      	bne.n	8009bb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	330c      	adds	r3, #12
 8009b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	e853 3f00 	ldrex	r3, [r3]
 8009b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	f023 0310 	bic.w	r3, r3, #16
 8009b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	330c      	adds	r3, #12
 8009ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ba4:	61ba      	str	r2, [r7, #24]
 8009ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba8:	6979      	ldr	r1, [r7, #20]
 8009baa:	69ba      	ldr	r2, [r7, #24]
 8009bac:	e841 2300 	strex	r3, r2, [r1]
 8009bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1e5      	bne.n	8009b84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2220      	movs	r2, #32
 8009bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009bc6:	bf00      	nop
 8009bc8:	3754      	adds	r7, #84	; 0x54
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b084      	sub	sp, #16
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f7ff ff77 	bl	8009ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bf2:	bf00      	nop
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b085      	sub	sp, #20
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	2b21      	cmp	r3, #33	; 0x21
 8009c0c:	d13e      	bne.n	8009c8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c16:	d114      	bne.n	8009c42 <UART_Transmit_IT+0x48>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d110      	bne.n	8009c42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a1b      	ldr	r3, [r3, #32]
 8009c24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	881b      	ldrh	r3, [r3, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	1c9a      	adds	r2, r3, #2
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	621a      	str	r2, [r3, #32]
 8009c40:	e008      	b.n	8009c54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	1c59      	adds	r1, r3, #1
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	6211      	str	r1, [r2, #32]
 8009c4c:	781a      	ldrb	r2, [r3, #0]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	4619      	mov	r1, r3
 8009c62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d10f      	bne.n	8009c88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68da      	ldr	r2, [r3, #12]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68da      	ldr	r2, [r3, #12]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	e000      	b.n	8009c8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009c8c:	2302      	movs	r3, #2
  }
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3714      	adds	r7, #20
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr

08009c9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b082      	sub	sp, #8
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68da      	ldr	r2, [r3, #12]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2220      	movs	r2, #32
 8009cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7ff fefc 	bl	8009ab8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b08c      	sub	sp, #48	; 0x30
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b22      	cmp	r3, #34	; 0x22
 8009cdc:	f040 80ae 	bne.w	8009e3c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ce8:	d117      	bne.n	8009d1a <UART_Receive_IT+0x50>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d113      	bne.n	8009d1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cfa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d12:	1c9a      	adds	r2, r3, #2
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	629a      	str	r2, [r3, #40]	; 0x28
 8009d18:	e026      	b.n	8009d68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009d20:	2300      	movs	r3, #0
 8009d22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d2c:	d007      	beq.n	8009d3e <UART_Receive_IT+0x74>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10a      	bne.n	8009d4c <UART_Receive_IT+0x82>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d106      	bne.n	8009d4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d48:	701a      	strb	r2, [r3, #0]
 8009d4a:	e008      	b.n	8009d5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d58:	b2da      	uxtb	r2, r3
 8009d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d62:	1c5a      	adds	r2, r3, #1
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	4619      	mov	r1, r3
 8009d76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d15d      	bne.n	8009e38 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68da      	ldr	r2, [r3, #12]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f022 0220 	bic.w	r2, r2, #32
 8009d8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68da      	ldr	r2, [r3, #12]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	695a      	ldr	r2, [r3, #20]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f022 0201 	bic.w	r2, r2, #1
 8009daa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2220      	movs	r2, #32
 8009db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d135      	bne.n	8009e2e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	330c      	adds	r3, #12
 8009dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	e853 3f00 	ldrex	r3, [r3]
 8009dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	f023 0310 	bic.w	r3, r3, #16
 8009dde:	627b      	str	r3, [r7, #36]	; 0x24
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	330c      	adds	r3, #12
 8009de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de8:	623a      	str	r2, [r7, #32]
 8009dea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dec:	69f9      	ldr	r1, [r7, #28]
 8009dee:	6a3a      	ldr	r2, [r7, #32]
 8009df0:	e841 2300 	strex	r3, r2, [r1]
 8009df4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1e5      	bne.n	8009dc8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 0310 	and.w	r3, r3, #16
 8009e06:	2b10      	cmp	r3, #16
 8009e08:	d10a      	bne.n	8009e20 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	60fb      	str	r3, [r7, #12]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	60fb      	str	r3, [r7, #12]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	60fb      	str	r3, [r7, #12]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e24:	4619      	mov	r1, r3
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f7ff fe64 	bl	8009af4 <HAL_UARTEx_RxEventCallback>
 8009e2c:	e002      	b.n	8009e34 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7ff fe4c 	bl	8009acc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	e002      	b.n	8009e3e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	e000      	b.n	8009e3e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009e3c:	2302      	movs	r3, #2
  }
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3730      	adds	r7, #48	; 0x30
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
	...

08009e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e4c:	b0c0      	sub	sp, #256	; 0x100
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e64:	68d9      	ldr	r1, [r3, #12]
 8009e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	ea40 0301 	orr.w	r3, r0, r1
 8009e70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e76:	689a      	ldr	r2, [r3, #8]
 8009e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	431a      	orrs	r2, r3
 8009e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	431a      	orrs	r2, r3
 8009e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e8c:	69db      	ldr	r3, [r3, #28]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009ea0:	f021 010c 	bic.w	r1, r1, #12
 8009ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009eae:	430b      	orrs	r3, r1
 8009eb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ec2:	6999      	ldr	r1, [r3, #24]
 8009ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	ea40 0301 	orr.w	r3, r0, r1
 8009ece:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	4b8f      	ldr	r3, [pc, #572]	; (800a114 <UART_SetConfig+0x2cc>)
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d005      	beq.n	8009ee8 <UART_SetConfig+0xa0>
 8009edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	4b8d      	ldr	r3, [pc, #564]	; (800a118 <UART_SetConfig+0x2d0>)
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d104      	bne.n	8009ef2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ee8:	f7fe fa18 	bl	800831c <HAL_RCC_GetPCLK2Freq>
 8009eec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009ef0:	e003      	b.n	8009efa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ef2:	f7fe f9ff 	bl	80082f4 <HAL_RCC_GetPCLK1Freq>
 8009ef6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009efe:	69db      	ldr	r3, [r3, #28]
 8009f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f04:	f040 810c 	bne.w	800a120 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009f12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009f16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009f1a:	4622      	mov	r2, r4
 8009f1c:	462b      	mov	r3, r5
 8009f1e:	1891      	adds	r1, r2, r2
 8009f20:	65b9      	str	r1, [r7, #88]	; 0x58
 8009f22:	415b      	adcs	r3, r3
 8009f24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009f2a:	4621      	mov	r1, r4
 8009f2c:	eb12 0801 	adds.w	r8, r2, r1
 8009f30:	4629      	mov	r1, r5
 8009f32:	eb43 0901 	adc.w	r9, r3, r1
 8009f36:	f04f 0200 	mov.w	r2, #0
 8009f3a:	f04f 0300 	mov.w	r3, #0
 8009f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f4a:	4690      	mov	r8, r2
 8009f4c:	4699      	mov	r9, r3
 8009f4e:	4623      	mov	r3, r4
 8009f50:	eb18 0303 	adds.w	r3, r8, r3
 8009f54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f58:	462b      	mov	r3, r5
 8009f5a:	eb49 0303 	adc.w	r3, r9, r3
 8009f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009f72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009f76:	460b      	mov	r3, r1
 8009f78:	18db      	adds	r3, r3, r3
 8009f7a:	653b      	str	r3, [r7, #80]	; 0x50
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	eb42 0303 	adc.w	r3, r2, r3
 8009f82:	657b      	str	r3, [r7, #84]	; 0x54
 8009f84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009f88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009f8c:	f7f6 fe6c 	bl	8000c68 <__aeabi_uldivmod>
 8009f90:	4602      	mov	r2, r0
 8009f92:	460b      	mov	r3, r1
 8009f94:	4b61      	ldr	r3, [pc, #388]	; (800a11c <UART_SetConfig+0x2d4>)
 8009f96:	fba3 2302 	umull	r2, r3, r3, r2
 8009f9a:	095b      	lsrs	r3, r3, #5
 8009f9c:	011c      	lsls	r4, r3, #4
 8009f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009fa8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009fac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009fb0:	4642      	mov	r2, r8
 8009fb2:	464b      	mov	r3, r9
 8009fb4:	1891      	adds	r1, r2, r2
 8009fb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8009fb8:	415b      	adcs	r3, r3
 8009fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009fc0:	4641      	mov	r1, r8
 8009fc2:	eb12 0a01 	adds.w	sl, r2, r1
 8009fc6:	4649      	mov	r1, r9
 8009fc8:	eb43 0b01 	adc.w	fp, r3, r1
 8009fcc:	f04f 0200 	mov.w	r2, #0
 8009fd0:	f04f 0300 	mov.w	r3, #0
 8009fd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009fd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009fe0:	4692      	mov	sl, r2
 8009fe2:	469b      	mov	fp, r3
 8009fe4:	4643      	mov	r3, r8
 8009fe6:	eb1a 0303 	adds.w	r3, sl, r3
 8009fea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fee:	464b      	mov	r3, r9
 8009ff0:	eb4b 0303 	adc.w	r3, fp, r3
 8009ff4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a004:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a008:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a00c:	460b      	mov	r3, r1
 800a00e:	18db      	adds	r3, r3, r3
 800a010:	643b      	str	r3, [r7, #64]	; 0x40
 800a012:	4613      	mov	r3, r2
 800a014:	eb42 0303 	adc.w	r3, r2, r3
 800a018:	647b      	str	r3, [r7, #68]	; 0x44
 800a01a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a01e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a022:	f7f6 fe21 	bl	8000c68 <__aeabi_uldivmod>
 800a026:	4602      	mov	r2, r0
 800a028:	460b      	mov	r3, r1
 800a02a:	4611      	mov	r1, r2
 800a02c:	4b3b      	ldr	r3, [pc, #236]	; (800a11c <UART_SetConfig+0x2d4>)
 800a02e:	fba3 2301 	umull	r2, r3, r3, r1
 800a032:	095b      	lsrs	r3, r3, #5
 800a034:	2264      	movs	r2, #100	; 0x64
 800a036:	fb02 f303 	mul.w	r3, r2, r3
 800a03a:	1acb      	subs	r3, r1, r3
 800a03c:	00db      	lsls	r3, r3, #3
 800a03e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a042:	4b36      	ldr	r3, [pc, #216]	; (800a11c <UART_SetConfig+0x2d4>)
 800a044:	fba3 2302 	umull	r2, r3, r3, r2
 800a048:	095b      	lsrs	r3, r3, #5
 800a04a:	005b      	lsls	r3, r3, #1
 800a04c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a050:	441c      	add	r4, r3
 800a052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a056:	2200      	movs	r2, #0
 800a058:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a05c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a060:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a064:	4642      	mov	r2, r8
 800a066:	464b      	mov	r3, r9
 800a068:	1891      	adds	r1, r2, r2
 800a06a:	63b9      	str	r1, [r7, #56]	; 0x38
 800a06c:	415b      	adcs	r3, r3
 800a06e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a070:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a074:	4641      	mov	r1, r8
 800a076:	1851      	adds	r1, r2, r1
 800a078:	6339      	str	r1, [r7, #48]	; 0x30
 800a07a:	4649      	mov	r1, r9
 800a07c:	414b      	adcs	r3, r1
 800a07e:	637b      	str	r3, [r7, #52]	; 0x34
 800a080:	f04f 0200 	mov.w	r2, #0
 800a084:	f04f 0300 	mov.w	r3, #0
 800a088:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a08c:	4659      	mov	r1, fp
 800a08e:	00cb      	lsls	r3, r1, #3
 800a090:	4651      	mov	r1, sl
 800a092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a096:	4651      	mov	r1, sl
 800a098:	00ca      	lsls	r2, r1, #3
 800a09a:	4610      	mov	r0, r2
 800a09c:	4619      	mov	r1, r3
 800a09e:	4603      	mov	r3, r0
 800a0a0:	4642      	mov	r2, r8
 800a0a2:	189b      	adds	r3, r3, r2
 800a0a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0a8:	464b      	mov	r3, r9
 800a0aa:	460a      	mov	r2, r1
 800a0ac:	eb42 0303 	adc.w	r3, r2, r3
 800a0b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a0c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a0c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	18db      	adds	r3, r3, r3
 800a0cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	eb42 0303 	adc.w	r3, r2, r3
 800a0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a0de:	f7f6 fdc3 	bl	8000c68 <__aeabi_uldivmod>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4b0d      	ldr	r3, [pc, #52]	; (800a11c <UART_SetConfig+0x2d4>)
 800a0e8:	fba3 1302 	umull	r1, r3, r3, r2
 800a0ec:	095b      	lsrs	r3, r3, #5
 800a0ee:	2164      	movs	r1, #100	; 0x64
 800a0f0:	fb01 f303 	mul.w	r3, r1, r3
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	00db      	lsls	r3, r3, #3
 800a0f8:	3332      	adds	r3, #50	; 0x32
 800a0fa:	4a08      	ldr	r2, [pc, #32]	; (800a11c <UART_SetConfig+0x2d4>)
 800a0fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a100:	095b      	lsrs	r3, r3, #5
 800a102:	f003 0207 	and.w	r2, r3, #7
 800a106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4422      	add	r2, r4
 800a10e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a110:	e106      	b.n	800a320 <UART_SetConfig+0x4d8>
 800a112:	bf00      	nop
 800a114:	40011000 	.word	0x40011000
 800a118:	40011400 	.word	0x40011400
 800a11c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a124:	2200      	movs	r2, #0
 800a126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a12a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a12e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a132:	4642      	mov	r2, r8
 800a134:	464b      	mov	r3, r9
 800a136:	1891      	adds	r1, r2, r2
 800a138:	6239      	str	r1, [r7, #32]
 800a13a:	415b      	adcs	r3, r3
 800a13c:	627b      	str	r3, [r7, #36]	; 0x24
 800a13e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a142:	4641      	mov	r1, r8
 800a144:	1854      	adds	r4, r2, r1
 800a146:	4649      	mov	r1, r9
 800a148:	eb43 0501 	adc.w	r5, r3, r1
 800a14c:	f04f 0200 	mov.w	r2, #0
 800a150:	f04f 0300 	mov.w	r3, #0
 800a154:	00eb      	lsls	r3, r5, #3
 800a156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a15a:	00e2      	lsls	r2, r4, #3
 800a15c:	4614      	mov	r4, r2
 800a15e:	461d      	mov	r5, r3
 800a160:	4643      	mov	r3, r8
 800a162:	18e3      	adds	r3, r4, r3
 800a164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a168:	464b      	mov	r3, r9
 800a16a:	eb45 0303 	adc.w	r3, r5, r3
 800a16e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a17e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a182:	f04f 0200 	mov.w	r2, #0
 800a186:	f04f 0300 	mov.w	r3, #0
 800a18a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a18e:	4629      	mov	r1, r5
 800a190:	008b      	lsls	r3, r1, #2
 800a192:	4621      	mov	r1, r4
 800a194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a198:	4621      	mov	r1, r4
 800a19a:	008a      	lsls	r2, r1, #2
 800a19c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a1a0:	f7f6 fd62 	bl	8000c68 <__aeabi_uldivmod>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	4b60      	ldr	r3, [pc, #384]	; (800a32c <UART_SetConfig+0x4e4>)
 800a1aa:	fba3 2302 	umull	r2, r3, r3, r2
 800a1ae:	095b      	lsrs	r3, r3, #5
 800a1b0:	011c      	lsls	r4, r3, #4
 800a1b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a1bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a1c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a1c4:	4642      	mov	r2, r8
 800a1c6:	464b      	mov	r3, r9
 800a1c8:	1891      	adds	r1, r2, r2
 800a1ca:	61b9      	str	r1, [r7, #24]
 800a1cc:	415b      	adcs	r3, r3
 800a1ce:	61fb      	str	r3, [r7, #28]
 800a1d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a1d4:	4641      	mov	r1, r8
 800a1d6:	1851      	adds	r1, r2, r1
 800a1d8:	6139      	str	r1, [r7, #16]
 800a1da:	4649      	mov	r1, r9
 800a1dc:	414b      	adcs	r3, r1
 800a1de:	617b      	str	r3, [r7, #20]
 800a1e0:	f04f 0200 	mov.w	r2, #0
 800a1e4:	f04f 0300 	mov.w	r3, #0
 800a1e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a1ec:	4659      	mov	r1, fp
 800a1ee:	00cb      	lsls	r3, r1, #3
 800a1f0:	4651      	mov	r1, sl
 800a1f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1f6:	4651      	mov	r1, sl
 800a1f8:	00ca      	lsls	r2, r1, #3
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	4603      	mov	r3, r0
 800a200:	4642      	mov	r2, r8
 800a202:	189b      	adds	r3, r3, r2
 800a204:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a208:	464b      	mov	r3, r9
 800a20a:	460a      	mov	r2, r1
 800a20c:	eb42 0303 	adc.w	r3, r2, r3
 800a210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a21e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a220:	f04f 0200 	mov.w	r2, #0
 800a224:	f04f 0300 	mov.w	r3, #0
 800a228:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a22c:	4649      	mov	r1, r9
 800a22e:	008b      	lsls	r3, r1, #2
 800a230:	4641      	mov	r1, r8
 800a232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a236:	4641      	mov	r1, r8
 800a238:	008a      	lsls	r2, r1, #2
 800a23a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a23e:	f7f6 fd13 	bl	8000c68 <__aeabi_uldivmod>
 800a242:	4602      	mov	r2, r0
 800a244:	460b      	mov	r3, r1
 800a246:	4611      	mov	r1, r2
 800a248:	4b38      	ldr	r3, [pc, #224]	; (800a32c <UART_SetConfig+0x4e4>)
 800a24a:	fba3 2301 	umull	r2, r3, r3, r1
 800a24e:	095b      	lsrs	r3, r3, #5
 800a250:	2264      	movs	r2, #100	; 0x64
 800a252:	fb02 f303 	mul.w	r3, r2, r3
 800a256:	1acb      	subs	r3, r1, r3
 800a258:	011b      	lsls	r3, r3, #4
 800a25a:	3332      	adds	r3, #50	; 0x32
 800a25c:	4a33      	ldr	r2, [pc, #204]	; (800a32c <UART_SetConfig+0x4e4>)
 800a25e:	fba2 2303 	umull	r2, r3, r2, r3
 800a262:	095b      	lsrs	r3, r3, #5
 800a264:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a268:	441c      	add	r4, r3
 800a26a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a26e:	2200      	movs	r2, #0
 800a270:	673b      	str	r3, [r7, #112]	; 0x70
 800a272:	677a      	str	r2, [r7, #116]	; 0x74
 800a274:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a278:	4642      	mov	r2, r8
 800a27a:	464b      	mov	r3, r9
 800a27c:	1891      	adds	r1, r2, r2
 800a27e:	60b9      	str	r1, [r7, #8]
 800a280:	415b      	adcs	r3, r3
 800a282:	60fb      	str	r3, [r7, #12]
 800a284:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a288:	4641      	mov	r1, r8
 800a28a:	1851      	adds	r1, r2, r1
 800a28c:	6039      	str	r1, [r7, #0]
 800a28e:	4649      	mov	r1, r9
 800a290:	414b      	adcs	r3, r1
 800a292:	607b      	str	r3, [r7, #4]
 800a294:	f04f 0200 	mov.w	r2, #0
 800a298:	f04f 0300 	mov.w	r3, #0
 800a29c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a2a0:	4659      	mov	r1, fp
 800a2a2:	00cb      	lsls	r3, r1, #3
 800a2a4:	4651      	mov	r1, sl
 800a2a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2aa:	4651      	mov	r1, sl
 800a2ac:	00ca      	lsls	r2, r1, #3
 800a2ae:	4610      	mov	r0, r2
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	4642      	mov	r2, r8
 800a2b6:	189b      	adds	r3, r3, r2
 800a2b8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2ba:	464b      	mov	r3, r9
 800a2bc:	460a      	mov	r2, r1
 800a2be:	eb42 0303 	adc.w	r3, r2, r3
 800a2c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a2c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	663b      	str	r3, [r7, #96]	; 0x60
 800a2ce:	667a      	str	r2, [r7, #100]	; 0x64
 800a2d0:	f04f 0200 	mov.w	r2, #0
 800a2d4:	f04f 0300 	mov.w	r3, #0
 800a2d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a2dc:	4649      	mov	r1, r9
 800a2de:	008b      	lsls	r3, r1, #2
 800a2e0:	4641      	mov	r1, r8
 800a2e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2e6:	4641      	mov	r1, r8
 800a2e8:	008a      	lsls	r2, r1, #2
 800a2ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a2ee:	f7f6 fcbb 	bl	8000c68 <__aeabi_uldivmod>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	4b0d      	ldr	r3, [pc, #52]	; (800a32c <UART_SetConfig+0x4e4>)
 800a2f8:	fba3 1302 	umull	r1, r3, r3, r2
 800a2fc:	095b      	lsrs	r3, r3, #5
 800a2fe:	2164      	movs	r1, #100	; 0x64
 800a300:	fb01 f303 	mul.w	r3, r1, r3
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	011b      	lsls	r3, r3, #4
 800a308:	3332      	adds	r3, #50	; 0x32
 800a30a:	4a08      	ldr	r2, [pc, #32]	; (800a32c <UART_SetConfig+0x4e4>)
 800a30c:	fba2 2303 	umull	r2, r3, r2, r3
 800a310:	095b      	lsrs	r3, r3, #5
 800a312:	f003 020f 	and.w	r2, r3, #15
 800a316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4422      	add	r2, r4
 800a31e:	609a      	str	r2, [r3, #8]
}
 800a320:	bf00      	nop
 800a322:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a326:	46bd      	mov	sp, r7
 800a328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a32c:	51eb851f 	.word	0x51eb851f

0800a330 <LL_GPIO_SetPinMode>:
{
 800a330:	b480      	push	{r7}
 800a332:	b08b      	sub	sp, #44	; 0x2c
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	fa93 f3a3 	rbit	r3, r3
 800a34a:	613b      	str	r3, [r7, #16]
  return result;
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d101      	bne.n	800a35a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a356:	2320      	movs	r3, #32
 800a358:	e003      	b.n	800a362 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	fab3 f383 	clz	r3, r3
 800a360:	b2db      	uxtb	r3, r3
 800a362:	005b      	lsls	r3, r3, #1
 800a364:	2103      	movs	r1, #3
 800a366:	fa01 f303 	lsl.w	r3, r1, r3
 800a36a:	43db      	mvns	r3, r3
 800a36c:	401a      	ands	r2, r3
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a372:	6a3b      	ldr	r3, [r7, #32]
 800a374:	fa93 f3a3 	rbit	r3, r3
 800a378:	61fb      	str	r3, [r7, #28]
  return result;
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a380:	2b00      	cmp	r3, #0
 800a382:	d101      	bne.n	800a388 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a384:	2320      	movs	r3, #32
 800a386:	e003      	b.n	800a390 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38a:	fab3 f383 	clz	r3, r3
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	005b      	lsls	r3, r3, #1
 800a392:	6879      	ldr	r1, [r7, #4]
 800a394:	fa01 f303 	lsl.w	r3, r1, r3
 800a398:	431a      	orrs	r2, r3
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	601a      	str	r2, [r3, #0]
}
 800a39e:	bf00      	nop
 800a3a0:	372c      	adds	r7, #44	; 0x2c
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <LL_GPIO_SetPinOutputType>:
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b085      	sub	sp, #20
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	60f8      	str	r0, [r7, #12]
 800a3b2:	60b9      	str	r1, [r7, #8]
 800a3b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	685a      	ldr	r2, [r3, #4]
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	43db      	mvns	r3, r3
 800a3be:	401a      	ands	r2, r3
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	6879      	ldr	r1, [r7, #4]
 800a3c4:	fb01 f303 	mul.w	r3, r1, r3
 800a3c8:	431a      	orrs	r2, r3
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	605a      	str	r2, [r3, #4]
}
 800a3ce:	bf00      	nop
 800a3d0:	3714      	adds	r7, #20
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <LL_GPIO_SetPinSpeed>:
{
 800a3da:	b480      	push	{r7}
 800a3dc:	b08b      	sub	sp, #44	; 0x2c
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	60f8      	str	r0, [r7, #12]
 800a3e2:	60b9      	str	r1, [r7, #8]
 800a3e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	689a      	ldr	r2, [r3, #8]
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	fa93 f3a3 	rbit	r3, r3
 800a3f4:	613b      	str	r3, [r7, #16]
  return result;
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d101      	bne.n	800a404 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a400:	2320      	movs	r3, #32
 800a402:	e003      	b.n	800a40c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	fab3 f383 	clz	r3, r3
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	005b      	lsls	r3, r3, #1
 800a40e:	2103      	movs	r1, #3
 800a410:	fa01 f303 	lsl.w	r3, r1, r3
 800a414:	43db      	mvns	r3, r3
 800a416:	401a      	ands	r2, r3
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a41c:	6a3b      	ldr	r3, [r7, #32]
 800a41e:	fa93 f3a3 	rbit	r3, r3
 800a422:	61fb      	str	r3, [r7, #28]
  return result;
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a42e:	2320      	movs	r3, #32
 800a430:	e003      	b.n	800a43a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a434:	fab3 f383 	clz	r3, r3
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	005b      	lsls	r3, r3, #1
 800a43c:	6879      	ldr	r1, [r7, #4]
 800a43e:	fa01 f303 	lsl.w	r3, r1, r3
 800a442:	431a      	orrs	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	609a      	str	r2, [r3, #8]
}
 800a448:	bf00      	nop
 800a44a:	372c      	adds	r7, #44	; 0x2c
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <LL_GPIO_SetPinPull>:
{
 800a454:	b480      	push	{r7}
 800a456:	b08b      	sub	sp, #44	; 0x2c
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	68da      	ldr	r2, [r3, #12]
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	fa93 f3a3 	rbit	r3, r3
 800a46e:	613b      	str	r3, [r7, #16]
  return result;
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d101      	bne.n	800a47e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a47a:	2320      	movs	r3, #32
 800a47c:	e003      	b.n	800a486 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	fab3 f383 	clz	r3, r3
 800a484:	b2db      	uxtb	r3, r3
 800a486:	005b      	lsls	r3, r3, #1
 800a488:	2103      	movs	r1, #3
 800a48a:	fa01 f303 	lsl.w	r3, r1, r3
 800a48e:	43db      	mvns	r3, r3
 800a490:	401a      	ands	r2, r3
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a496:	6a3b      	ldr	r3, [r7, #32]
 800a498:	fa93 f3a3 	rbit	r3, r3
 800a49c:	61fb      	str	r3, [r7, #28]
  return result;
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a4a8:	2320      	movs	r3, #32
 800a4aa:	e003      	b.n	800a4b4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	fab3 f383 	clz	r3, r3
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	005b      	lsls	r3, r3, #1
 800a4b6:	6879      	ldr	r1, [r7, #4]
 800a4b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a4bc:	431a      	orrs	r2, r3
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	60da      	str	r2, [r3, #12]
}
 800a4c2:	bf00      	nop
 800a4c4:	372c      	adds	r7, #44	; 0x2c
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <LL_GPIO_SetAFPin_0_7>:
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b08b      	sub	sp, #44	; 0x2c
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	60f8      	str	r0, [r7, #12]
 800a4d6:	60b9      	str	r1, [r7, #8]
 800a4d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	6a1a      	ldr	r2, [r3, #32]
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	fa93 f3a3 	rbit	r3, r3
 800a4e8:	613b      	str	r3, [r7, #16]
  return result;
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d101      	bne.n	800a4f8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a4f4:	2320      	movs	r3, #32
 800a4f6:	e003      	b.n	800a500 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	fab3 f383 	clz	r3, r3
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	210f      	movs	r1, #15
 800a504:	fa01 f303 	lsl.w	r3, r1, r3
 800a508:	43db      	mvns	r3, r3
 800a50a:	401a      	ands	r2, r3
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a510:	6a3b      	ldr	r3, [r7, #32]
 800a512:	fa93 f3a3 	rbit	r3, r3
 800a516:	61fb      	str	r3, [r7, #28]
  return result;
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d101      	bne.n	800a526 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a522:	2320      	movs	r3, #32
 800a524:	e003      	b.n	800a52e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a528:	fab3 f383 	clz	r3, r3
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	6879      	ldr	r1, [r7, #4]
 800a532:	fa01 f303 	lsl.w	r3, r1, r3
 800a536:	431a      	orrs	r2, r3
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	621a      	str	r2, [r3, #32]
}
 800a53c:	bf00      	nop
 800a53e:	372c      	adds	r7, #44	; 0x2c
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <LL_GPIO_SetAFPin_8_15>:
{
 800a548:	b480      	push	{r7}
 800a54a:	b08b      	sub	sp, #44	; 0x2c
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	0a1b      	lsrs	r3, r3, #8
 800a55c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	fa93 f3a3 	rbit	r3, r3
 800a564:	613b      	str	r3, [r7, #16]
  return result;
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d101      	bne.n	800a574 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a570:	2320      	movs	r3, #32
 800a572:	e003      	b.n	800a57c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	fab3 f383 	clz	r3, r3
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	210f      	movs	r1, #15
 800a580:	fa01 f303 	lsl.w	r3, r1, r3
 800a584:	43db      	mvns	r3, r3
 800a586:	401a      	ands	r2, r3
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	0a1b      	lsrs	r3, r3, #8
 800a58c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a58e:	6a3b      	ldr	r3, [r7, #32]
 800a590:	fa93 f3a3 	rbit	r3, r3
 800a594:	61fb      	str	r3, [r7, #28]
  return result;
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d101      	bne.n	800a5a4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a5a0:	2320      	movs	r3, #32
 800a5a2:	e003      	b.n	800a5ac <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a6:	fab3 f383 	clz	r3, r3
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	6879      	ldr	r1, [r7, #4]
 800a5b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5b4:	431a      	orrs	r2, r3
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a5ba:	bf00      	nop
 800a5bc:	372c      	adds	r7, #44	; 0x2c
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b08a      	sub	sp, #40	; 0x28
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	fa93 f3a3 	rbit	r3, r3
 800a5e4:	617b      	str	r3, [r7, #20]
  return result;
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <LL_GPIO_Init+0x2e>
    return 32U;
 800a5f0:	2320      	movs	r3, #32
 800a5f2:	e003      	b.n	800a5fc <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	fab3 f383 	clz	r3, r3
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a5fe:	e057      	b.n	800a6b0 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	2101      	movs	r1, #1
 800a606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a608:	fa01 f303 	lsl.w	r3, r1, r3
 800a60c:	4013      	ands	r3, r2
 800a60e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800a610:	6a3b      	ldr	r3, [r7, #32]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d049      	beq.n	800a6aa <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d003      	beq.n	800a626 <LL_GPIO_Init+0x60>
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	2b02      	cmp	r3, #2
 800a624:	d10d      	bne.n	800a642 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	461a      	mov	r2, r3
 800a62c:	6a39      	ldr	r1, [r7, #32]
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f7ff fed3 	bl	800a3da <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	461a      	mov	r2, r3
 800a63a:	6a39      	ldr	r1, [r7, #32]
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f7ff feb4 	bl	800a3aa <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	461a      	mov	r2, r3
 800a648:	6a39      	ldr	r1, [r7, #32]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f7ff ff02 	bl	800a454 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	2b02      	cmp	r3, #2
 800a656:	d121      	bne.n	800a69c <LL_GPIO_Init+0xd6>
 800a658:	6a3b      	ldr	r3, [r7, #32]
 800a65a:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	fa93 f3a3 	rbit	r3, r3
 800a662:	60bb      	str	r3, [r7, #8]
  return result;
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d101      	bne.n	800a672 <LL_GPIO_Init+0xac>
    return 32U;
 800a66e:	2320      	movs	r3, #32
 800a670:	e003      	b.n	800a67a <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	fab3 f383 	clz	r3, r3
 800a678:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800a67a:	2b07      	cmp	r3, #7
 800a67c:	d807      	bhi.n	800a68e <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	695b      	ldr	r3, [r3, #20]
 800a682:	461a      	mov	r2, r3
 800a684:	6a39      	ldr	r1, [r7, #32]
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7ff ff21 	bl	800a4ce <LL_GPIO_SetAFPin_0_7>
 800a68c:	e006      	b.n	800a69c <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	695b      	ldr	r3, [r3, #20]
 800a692:	461a      	mov	r2, r3
 800a694:	6a39      	ldr	r1, [r7, #32]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f7ff ff56 	bl	800a548 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	6a39      	ldr	r1, [r7, #32]
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f7ff fe43 	bl	800a330 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1a0      	bne.n	800a600 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3728      	adds	r7, #40	; 0x28
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <LL_SPI_IsEnabled>:
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d8:	2b40      	cmp	r3, #64	; 0x40
 800a6da:	d101      	bne.n	800a6e0 <LL_SPI_IsEnabled+0x18>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e000      	b.n	800a6e2 <LL_SPI_IsEnabled+0x1a>
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	370c      	adds	r7, #12
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr

0800a6ee <LL_SPI_SetCRCPolynomial>:
{
 800a6ee:	b480      	push	{r7}
 800a6f0:	b083      	sub	sp, #12
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	611a      	str	r2, [r3, #16]
}
 800a702:	bf00      	nop
 800a704:	370c      	adds	r7, #12
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b084      	sub	sp, #16
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f7ff ffd3 	bl	800a6c8 <LL_SPI_IsEnabled>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d139      	bne.n	800a79c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a730:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800a734:	683a      	ldr	r2, [r7, #0]
 800a736:	6811      	ldr	r1, [r2, #0]
 800a738:	683a      	ldr	r2, [r7, #0]
 800a73a:	6852      	ldr	r2, [r2, #4]
 800a73c:	4311      	orrs	r1, r2
 800a73e:	683a      	ldr	r2, [r7, #0]
 800a740:	6892      	ldr	r2, [r2, #8]
 800a742:	4311      	orrs	r1, r2
 800a744:	683a      	ldr	r2, [r7, #0]
 800a746:	68d2      	ldr	r2, [r2, #12]
 800a748:	4311      	orrs	r1, r2
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	6912      	ldr	r2, [r2, #16]
 800a74e:	4311      	orrs	r1, r2
 800a750:	683a      	ldr	r2, [r7, #0]
 800a752:	6952      	ldr	r2, [r2, #20]
 800a754:	4311      	orrs	r1, r2
 800a756:	683a      	ldr	r2, [r7, #0]
 800a758:	6992      	ldr	r2, [r2, #24]
 800a75a:	4311      	orrs	r1, r2
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	69d2      	ldr	r2, [r2, #28]
 800a760:	4311      	orrs	r1, r2
 800a762:	683a      	ldr	r2, [r7, #0]
 800a764:	6a12      	ldr	r2, [r2, #32]
 800a766:	430a      	orrs	r2, r1
 800a768:	431a      	orrs	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	f023 0204 	bic.w	r2, r3, #4
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	0c1b      	lsrs	r3, r3, #16
 800a77c:	431a      	orrs	r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	6a1b      	ldr	r3, [r3, #32]
 800a786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a78a:	d105      	bne.n	800a798 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a790:	4619      	mov	r1, r3
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7ff ffab 	bl	800a6ee <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800a798:	2300      	movs	r3, #0
 800a79a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	69db      	ldr	r3, [r3, #28]
 800a7a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	61da      	str	r2, [r3, #28]
  return status;
 800a7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	f107 001c 	add.w	r0, r7, #28
 800a7c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a7c4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d123      	bne.n	800a814 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a7e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a7f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d105      	bne.n	800a808 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f001 fae3 	bl	800bdd4 <USB_CoreReset>
 800a80e:	4603      	mov	r3, r0
 800a810:	73fb      	strb	r3, [r7, #15]
 800a812:	e01b      	b.n	800a84c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f001 fad7 	bl	800bdd4 <USB_CoreReset>
 800a826:	4603      	mov	r3, r0
 800a828:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a82a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d106      	bne.n	800a840 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a836:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	639a      	str	r2, [r3, #56]	; 0x38
 800a83e:	e005      	b.n	800a84c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a844:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a84c:	7fbb      	ldrb	r3, [r7, #30]
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d10b      	bne.n	800a86a <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	f043 0206 	orr.w	r2, r3, #6
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f043 0220 	orr.w	r2, r3, #32
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a876:	b004      	add	sp, #16
 800a878:	4770      	bx	lr
	...

0800a87c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b087      	sub	sp, #28
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	4613      	mov	r3, r2
 800a888:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a88a:	79fb      	ldrb	r3, [r7, #7]
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	d165      	bne.n	800a95c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	4a41      	ldr	r2, [pc, #260]	; (800a998 <USB_SetTurnaroundTime+0x11c>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d906      	bls.n	800a8a6 <USB_SetTurnaroundTime+0x2a>
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	4a40      	ldr	r2, [pc, #256]	; (800a99c <USB_SetTurnaroundTime+0x120>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d202      	bcs.n	800a8a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a8a0:	230f      	movs	r3, #15
 800a8a2:	617b      	str	r3, [r7, #20]
 800a8a4:	e062      	b.n	800a96c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	4a3c      	ldr	r2, [pc, #240]	; (800a99c <USB_SetTurnaroundTime+0x120>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d306      	bcc.n	800a8bc <USB_SetTurnaroundTime+0x40>
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	4a3b      	ldr	r2, [pc, #236]	; (800a9a0 <USB_SetTurnaroundTime+0x124>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d202      	bcs.n	800a8bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a8b6:	230e      	movs	r3, #14
 800a8b8:	617b      	str	r3, [r7, #20]
 800a8ba:	e057      	b.n	800a96c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	4a38      	ldr	r2, [pc, #224]	; (800a9a0 <USB_SetTurnaroundTime+0x124>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d306      	bcc.n	800a8d2 <USB_SetTurnaroundTime+0x56>
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	4a37      	ldr	r2, [pc, #220]	; (800a9a4 <USB_SetTurnaroundTime+0x128>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d202      	bcs.n	800a8d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a8cc:	230d      	movs	r3, #13
 800a8ce:	617b      	str	r3, [r7, #20]
 800a8d0:	e04c      	b.n	800a96c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	4a33      	ldr	r2, [pc, #204]	; (800a9a4 <USB_SetTurnaroundTime+0x128>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d306      	bcc.n	800a8e8 <USB_SetTurnaroundTime+0x6c>
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	4a32      	ldr	r2, [pc, #200]	; (800a9a8 <USB_SetTurnaroundTime+0x12c>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d802      	bhi.n	800a8e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a8e2:	230c      	movs	r3, #12
 800a8e4:	617b      	str	r3, [r7, #20]
 800a8e6:	e041      	b.n	800a96c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	4a2f      	ldr	r2, [pc, #188]	; (800a9a8 <USB_SetTurnaroundTime+0x12c>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d906      	bls.n	800a8fe <USB_SetTurnaroundTime+0x82>
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	4a2e      	ldr	r2, [pc, #184]	; (800a9ac <USB_SetTurnaroundTime+0x130>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d802      	bhi.n	800a8fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a8f8:	230b      	movs	r3, #11
 800a8fa:	617b      	str	r3, [r7, #20]
 800a8fc:	e036      	b.n	800a96c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	4a2a      	ldr	r2, [pc, #168]	; (800a9ac <USB_SetTurnaroundTime+0x130>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d906      	bls.n	800a914 <USB_SetTurnaroundTime+0x98>
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	4a29      	ldr	r2, [pc, #164]	; (800a9b0 <USB_SetTurnaroundTime+0x134>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d802      	bhi.n	800a914 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a90e:	230a      	movs	r3, #10
 800a910:	617b      	str	r3, [r7, #20]
 800a912:	e02b      	b.n	800a96c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	4a26      	ldr	r2, [pc, #152]	; (800a9b0 <USB_SetTurnaroundTime+0x134>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d906      	bls.n	800a92a <USB_SetTurnaroundTime+0xae>
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	4a25      	ldr	r2, [pc, #148]	; (800a9b4 <USB_SetTurnaroundTime+0x138>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d202      	bcs.n	800a92a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a924:	2309      	movs	r3, #9
 800a926:	617b      	str	r3, [r7, #20]
 800a928:	e020      	b.n	800a96c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	4a21      	ldr	r2, [pc, #132]	; (800a9b4 <USB_SetTurnaroundTime+0x138>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d306      	bcc.n	800a940 <USB_SetTurnaroundTime+0xc4>
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	4a20      	ldr	r2, [pc, #128]	; (800a9b8 <USB_SetTurnaroundTime+0x13c>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d802      	bhi.n	800a940 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a93a:	2308      	movs	r3, #8
 800a93c:	617b      	str	r3, [r7, #20]
 800a93e:	e015      	b.n	800a96c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	4a1d      	ldr	r2, [pc, #116]	; (800a9b8 <USB_SetTurnaroundTime+0x13c>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d906      	bls.n	800a956 <USB_SetTurnaroundTime+0xda>
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	4a1c      	ldr	r2, [pc, #112]	; (800a9bc <USB_SetTurnaroundTime+0x140>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d202      	bcs.n	800a956 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a950:	2307      	movs	r3, #7
 800a952:	617b      	str	r3, [r7, #20]
 800a954:	e00a      	b.n	800a96c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a956:	2306      	movs	r3, #6
 800a958:	617b      	str	r3, [r7, #20]
 800a95a:	e007      	b.n	800a96c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a95c:	79fb      	ldrb	r3, [r7, #7]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d102      	bne.n	800a968 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a962:	2309      	movs	r3, #9
 800a964:	617b      	str	r3, [r7, #20]
 800a966:	e001      	b.n	800a96c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a968:	2309      	movs	r3, #9
 800a96a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	68da      	ldr	r2, [r3, #12]
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	029b      	lsls	r3, r3, #10
 800a980:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a984:	431a      	orrs	r2, r3
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	371c      	adds	r7, #28
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr
 800a998:	00d8acbf 	.word	0x00d8acbf
 800a99c:	00e4e1c0 	.word	0x00e4e1c0
 800a9a0:	00f42400 	.word	0x00f42400
 800a9a4:	01067380 	.word	0x01067380
 800a9a8:	011a499f 	.word	0x011a499f
 800a9ac:	01312cff 	.word	0x01312cff
 800a9b0:	014ca43f 	.word	0x014ca43f
 800a9b4:	016e3600 	.word	0x016e3600
 800a9b8:	01a6ab1f 	.word	0x01a6ab1f
 800a9bc:	01e84800 	.word	0x01e84800

0800a9c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	f043 0201 	orr.w	r2, r3, #1
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	370c      	adds	r7, #12
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b083      	sub	sp, #12
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	689b      	ldr	r3, [r3, #8]
 800a9ee:	f023 0201 	bic.w	r2, r3, #1
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a9f6:	2300      	movs	r3, #0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800aa10:	2300      	movs	r3, #0
 800aa12:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aa20:	78fb      	ldrb	r3, [r7, #3]
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d115      	bne.n	800aa52 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800aa32:	200a      	movs	r0, #10
 800aa34:	f7fa fa9e 	bl	8004f74 <HAL_Delay>
      ms += 10U;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	330a      	adds	r3, #10
 800aa3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f001 f939 	bl	800bcb6 <USB_GetMode>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d01e      	beq.n	800aa88 <USB_SetCurrentMode+0x84>
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2bc7      	cmp	r3, #199	; 0xc7
 800aa4e:	d9f0      	bls.n	800aa32 <USB_SetCurrentMode+0x2e>
 800aa50:	e01a      	b.n	800aa88 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aa52:	78fb      	ldrb	r3, [r7, #3]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d115      	bne.n	800aa84 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800aa64:	200a      	movs	r0, #10
 800aa66:	f7fa fa85 	bl	8004f74 <HAL_Delay>
      ms += 10U;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	330a      	adds	r3, #10
 800aa6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f001 f920 	bl	800bcb6 <USB_GetMode>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d005      	beq.n	800aa88 <USB_SetCurrentMode+0x84>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2bc7      	cmp	r3, #199	; 0xc7
 800aa80:	d9f0      	bls.n	800aa64 <USB_SetCurrentMode+0x60>
 800aa82:	e001      	b.n	800aa88 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e005      	b.n	800aa94 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2bc8      	cmp	r3, #200	; 0xc8
 800aa8c:	d101      	bne.n	800aa92 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e000      	b.n	800aa94 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa9c:	b084      	sub	sp, #16
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b086      	sub	sp, #24
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aaaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aaae:	2300      	movs	r3, #0
 800aab0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aab6:	2300      	movs	r3, #0
 800aab8:	613b      	str	r3, [r7, #16]
 800aaba:	e009      	b.n	800aad0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	3340      	adds	r3, #64	; 0x40
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4413      	add	r3, r2
 800aac6:	2200      	movs	r2, #0
 800aac8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	3301      	adds	r3, #1
 800aace:	613b      	str	r3, [r7, #16]
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	2b0e      	cmp	r3, #14
 800aad4:	d9f2      	bls.n	800aabc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aad6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d11c      	bne.n	800ab18 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aaec:	f043 0302 	orr.w	r3, r3, #2
 800aaf0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab02:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab0e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	639a      	str	r2, [r3, #56]	; 0x38
 800ab16:	e00b      	b.n	800ab30 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab28:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab36:	461a      	mov	r2, r3
 800ab38:	2300      	movs	r3, #0
 800ab3a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab3c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d10d      	bne.n	800ab60 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ab44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d104      	bne.n	800ab56 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 f968 	bl	800ae24 <USB_SetDevSpeed>
 800ab54:	e008      	b.n	800ab68 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ab56:	2101      	movs	r1, #1
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 f963 	bl	800ae24 <USB_SetDevSpeed>
 800ab5e:	e003      	b.n	800ab68 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ab60:	2103      	movs	r1, #3
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 f95e 	bl	800ae24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ab68:	2110      	movs	r1, #16
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f8fa 	bl	800ad64 <USB_FlushTxFifo>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d001      	beq.n	800ab7a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800ab76:	2301      	movs	r3, #1
 800ab78:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 f924 	bl	800adc8 <USB_FlushRxFifo>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d001      	beq.n	800ab8a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800ab86:	2301      	movs	r3, #1
 800ab88:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab90:	461a      	mov	r2, r3
 800ab92:	2300      	movs	r3, #0
 800ab94:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	2300      	movs	r3, #0
 800aba0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aba8:	461a      	mov	r2, r3
 800abaa:	2300      	movs	r3, #0
 800abac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abae:	2300      	movs	r3, #0
 800abb0:	613b      	str	r3, [r7, #16]
 800abb2:	e043      	b.n	800ac3c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	015a      	lsls	r2, r3, #5
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	4413      	add	r3, r2
 800abbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abca:	d118      	bne.n	800abfe <USB_DevInit+0x162>
    {
      if (i == 0U)
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d10a      	bne.n	800abe8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	015a      	lsls	r2, r3, #5
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	4413      	add	r3, r2
 800abda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abde:	461a      	mov	r2, r3
 800abe0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800abe4:	6013      	str	r3, [r2, #0]
 800abe6:	e013      	b.n	800ac10 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	015a      	lsls	r2, r3, #5
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	4413      	add	r3, r2
 800abf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abf4:	461a      	mov	r2, r3
 800abf6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800abfa:	6013      	str	r3, [r2, #0]
 800abfc:	e008      	b.n	800ac10 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	015a      	lsls	r2, r3, #5
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	4413      	add	r3, r2
 800ac06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	015a      	lsls	r2, r3, #5
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	4413      	add	r3, r2
 800ac18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	2300      	movs	r3, #0
 800ac20:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	015a      	lsls	r2, r3, #5
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	4413      	add	r3, r2
 800ac2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac2e:	461a      	mov	r2, r3
 800ac30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	613b      	str	r3, [r7, #16]
 800ac3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ac40:	461a      	mov	r2, r3
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d3b5      	bcc.n	800abb4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac48:	2300      	movs	r3, #0
 800ac4a:	613b      	str	r3, [r7, #16]
 800ac4c:	e043      	b.n	800acd6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	015a      	lsls	r2, r3, #5
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	4413      	add	r3, r2
 800ac56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac64:	d118      	bne.n	800ac98 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10a      	bne.n	800ac82 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	015a      	lsls	r2, r3, #5
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	4413      	add	r3, r2
 800ac74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac78:	461a      	mov	r2, r3
 800ac7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac7e:	6013      	str	r3, [r2, #0]
 800ac80:	e013      	b.n	800acaa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	015a      	lsls	r2, r3, #5
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	4413      	add	r3, r2
 800ac8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac8e:	461a      	mov	r2, r3
 800ac90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ac94:	6013      	str	r3, [r2, #0]
 800ac96:	e008      	b.n	800acaa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	015a      	lsls	r2, r3, #5
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	4413      	add	r3, r2
 800aca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aca4:	461a      	mov	r2, r3
 800aca6:	2300      	movs	r3, #0
 800aca8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	015a      	lsls	r2, r3, #5
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	4413      	add	r3, r2
 800acb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acb6:	461a      	mov	r2, r3
 800acb8:	2300      	movs	r3, #0
 800acba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	015a      	lsls	r2, r3, #5
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	4413      	add	r3, r2
 800acc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acc8:	461a      	mov	r2, r3
 800acca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800acce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	3301      	adds	r3, #1
 800acd4:	613b      	str	r3, [r7, #16]
 800acd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800acda:	461a      	mov	r2, r3
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	4293      	cmp	r3, r2
 800ace0:	d3b5      	bcc.n	800ac4e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	68fa      	ldr	r2, [r7, #12]
 800acec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acf4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ad02:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ad04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d105      	bne.n	800ad18 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	699b      	ldr	r3, [r3, #24]
 800ad10:	f043 0210 	orr.w	r2, r3, #16
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	699a      	ldr	r2, [r3, #24]
 800ad1c:	4b10      	ldr	r3, [pc, #64]	; (800ad60 <USB_DevInit+0x2c4>)
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ad24:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d005      	beq.n	800ad38 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	699b      	ldr	r3, [r3, #24]
 800ad30:	f043 0208 	orr.w	r2, r3, #8
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ad38:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d107      	bne.n	800ad50 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad48:	f043 0304 	orr.w	r3, r3, #4
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ad50:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3718      	adds	r7, #24
 800ad56:	46bd      	mov	sp, r7
 800ad58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad5c:	b004      	add	sp, #16
 800ad5e:	4770      	bx	lr
 800ad60:	803c3800 	.word	0x803c3800

0800ad64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	3301      	adds	r3, #1
 800ad76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ad7e:	d901      	bls.n	800ad84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ad80:	2303      	movs	r3, #3
 800ad82:	e01b      	b.n	800adbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	daf2      	bge.n	800ad72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	019b      	lsls	r3, r3, #6
 800ad94:	f043 0220 	orr.w	r2, r3, #32
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ada8:	d901      	bls.n	800adae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800adaa:	2303      	movs	r3, #3
 800adac:	e006      	b.n	800adbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	f003 0320 	and.w	r3, r3, #32
 800adb6:	2b20      	cmp	r3, #32
 800adb8:	d0f0      	beq.n	800ad9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800adba:	2300      	movs	r3, #0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3714      	adds	r7, #20
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800add0:	2300      	movs	r3, #0
 800add2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	3301      	adds	r3, #1
 800add8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ade0:	d901      	bls.n	800ade6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ade2:	2303      	movs	r3, #3
 800ade4:	e018      	b.n	800ae18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	2b00      	cmp	r3, #0
 800adec:	daf2      	bge.n	800add4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800adee:	2300      	movs	r3, #0
 800adf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2210      	movs	r2, #16
 800adf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	3301      	adds	r3, #1
 800adfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ae04:	d901      	bls.n	800ae0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ae06:	2303      	movs	r3, #3
 800ae08:	e006      	b.n	800ae18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	f003 0310 	and.w	r3, r3, #16
 800ae12:	2b10      	cmp	r3, #16
 800ae14:	d0f0      	beq.n	800adf8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	78fb      	ldrb	r3, [r7, #3]
 800ae3e:	68f9      	ldr	r1, [r7, #12]
 800ae40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae44:	4313      	orrs	r3, r2
 800ae46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3714      	adds	r7, #20
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr

0800ae56 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae56:	b480      	push	{r7}
 800ae58:	b087      	sub	sp, #28
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	f003 0306 	and.w	r3, r3, #6
 800ae6e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d102      	bne.n	800ae7c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ae76:	2300      	movs	r3, #0
 800ae78:	75fb      	strb	r3, [r7, #23]
 800ae7a:	e00a      	b.n	800ae92 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d002      	beq.n	800ae88 <USB_GetDevSpeed+0x32>
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2b06      	cmp	r3, #6
 800ae86:	d102      	bne.n	800ae8e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ae88:	2302      	movs	r3, #2
 800ae8a:	75fb      	strb	r3, [r7, #23]
 800ae8c:	e001      	b.n	800ae92 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ae8e:	230f      	movs	r3, #15
 800ae90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ae92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	371c      	adds	r7, #28
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	785b      	ldrb	r3, [r3, #1]
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d13a      	bne.n	800af32 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aec2:	69da      	ldr	r2, [r3, #28]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	f003 030f 	and.w	r3, r3, #15
 800aecc:	2101      	movs	r1, #1
 800aece:	fa01 f303 	lsl.w	r3, r1, r3
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	68f9      	ldr	r1, [r7, #12]
 800aed6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aeda:	4313      	orrs	r3, r2
 800aedc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	015a      	lsls	r2, r3, #5
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	4413      	add	r3, r2
 800aee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d155      	bne.n	800afa0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	015a      	lsls	r2, r3, #5
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	4413      	add	r3, r2
 800aefc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	791b      	ldrb	r3, [r3, #4]
 800af0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800af10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	059b      	lsls	r3, r3, #22
 800af16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800af18:	4313      	orrs	r3, r2
 800af1a:	68ba      	ldr	r2, [r7, #8]
 800af1c:	0151      	lsls	r1, r2, #5
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	440a      	add	r2, r1
 800af22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af2e:	6013      	str	r3, [r2, #0]
 800af30:	e036      	b.n	800afa0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af38:	69da      	ldr	r2, [r3, #28]
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	f003 030f 	and.w	r3, r3, #15
 800af42:	2101      	movs	r1, #1
 800af44:	fa01 f303 	lsl.w	r3, r1, r3
 800af48:	041b      	lsls	r3, r3, #16
 800af4a:	68f9      	ldr	r1, [r7, #12]
 800af4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af50:	4313      	orrs	r3, r2
 800af52:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	015a      	lsls	r2, r3, #5
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	4413      	add	r3, r2
 800af5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af66:	2b00      	cmp	r3, #0
 800af68:	d11a      	bne.n	800afa0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	015a      	lsls	r2, r3, #5
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	4413      	add	r3, r2
 800af72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	791b      	ldrb	r3, [r3, #4]
 800af84:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800af86:	430b      	orrs	r3, r1
 800af88:	4313      	orrs	r3, r2
 800af8a:	68ba      	ldr	r2, [r7, #8]
 800af8c:	0151      	lsls	r1, r2, #5
 800af8e:	68fa      	ldr	r2, [r7, #12]
 800af90:	440a      	add	r2, r1
 800af92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af9e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3714      	adds	r7, #20
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr
	...

0800afb0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b085      	sub	sp, #20
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	785b      	ldrb	r3, [r3, #1]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d161      	bne.n	800b090 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	015a      	lsls	r2, r3, #5
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	4413      	add	r3, r2
 800afd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afe2:	d11f      	bne.n	800b024 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	015a      	lsls	r2, r3, #5
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	4413      	add	r3, r2
 800afec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68ba      	ldr	r2, [r7, #8]
 800aff4:	0151      	lsls	r1, r2, #5
 800aff6:	68fa      	ldr	r2, [r7, #12]
 800aff8:	440a      	add	r2, r1
 800affa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800affe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b002:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	015a      	lsls	r2, r3, #5
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	4413      	add	r3, r2
 800b00c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	68ba      	ldr	r2, [r7, #8]
 800b014:	0151      	lsls	r1, r2, #5
 800b016:	68fa      	ldr	r2, [r7, #12]
 800b018:	440a      	add	r2, r1
 800b01a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b01e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b022:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b02a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	f003 030f 	and.w	r3, r3, #15
 800b034:	2101      	movs	r1, #1
 800b036:	fa01 f303 	lsl.w	r3, r1, r3
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	43db      	mvns	r3, r3
 800b03e:	68f9      	ldr	r1, [r7, #12]
 800b040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b044:	4013      	ands	r3, r2
 800b046:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b04e:	69da      	ldr	r2, [r3, #28]
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	f003 030f 	and.w	r3, r3, #15
 800b058:	2101      	movs	r1, #1
 800b05a:	fa01 f303 	lsl.w	r3, r1, r3
 800b05e:	b29b      	uxth	r3, r3
 800b060:	43db      	mvns	r3, r3
 800b062:	68f9      	ldr	r1, [r7, #12]
 800b064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b068:	4013      	ands	r3, r2
 800b06a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	015a      	lsls	r2, r3, #5
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	4413      	add	r3, r2
 800b074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	0159      	lsls	r1, r3, #5
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	440b      	add	r3, r1
 800b082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b086:	4619      	mov	r1, r3
 800b088:	4b35      	ldr	r3, [pc, #212]	; (800b160 <USB_DeactivateEndpoint+0x1b0>)
 800b08a:	4013      	ands	r3, r2
 800b08c:	600b      	str	r3, [r1, #0]
 800b08e:	e060      	b.n	800b152 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	015a      	lsls	r2, r3, #5
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	4413      	add	r3, r2
 800b098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b0a6:	d11f      	bne.n	800b0e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	015a      	lsls	r2, r3, #5
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	68ba      	ldr	r2, [r7, #8]
 800b0b8:	0151      	lsls	r1, r2, #5
 800b0ba:	68fa      	ldr	r2, [r7, #12]
 800b0bc:	440a      	add	r2, r1
 800b0be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b0c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	015a      	lsls	r2, r3, #5
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	68ba      	ldr	r2, [r7, #8]
 800b0d8:	0151      	lsls	r1, r2, #5
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	440a      	add	r2, r1
 800b0de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b0e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	f003 030f 	and.w	r3, r3, #15
 800b0f8:	2101      	movs	r1, #1
 800b0fa:	fa01 f303 	lsl.w	r3, r1, r3
 800b0fe:	041b      	lsls	r3, r3, #16
 800b100:	43db      	mvns	r3, r3
 800b102:	68f9      	ldr	r1, [r7, #12]
 800b104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b108:	4013      	ands	r3, r2
 800b10a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b112:	69da      	ldr	r2, [r3, #28]
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	f003 030f 	and.w	r3, r3, #15
 800b11c:	2101      	movs	r1, #1
 800b11e:	fa01 f303 	lsl.w	r3, r1, r3
 800b122:	041b      	lsls	r3, r3, #16
 800b124:	43db      	mvns	r3, r3
 800b126:	68f9      	ldr	r1, [r7, #12]
 800b128:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b12c:	4013      	ands	r3, r2
 800b12e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	015a      	lsls	r2, r3, #5
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	4413      	add	r3, r2
 800b138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	0159      	lsls	r1, r3, #5
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	440b      	add	r3, r1
 800b146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b14a:	4619      	mov	r1, r3
 800b14c:	4b05      	ldr	r3, [pc, #20]	; (800b164 <USB_DeactivateEndpoint+0x1b4>)
 800b14e:	4013      	ands	r3, r2
 800b150:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr
 800b160:	ec337800 	.word	0xec337800
 800b164:	eff37800 	.word	0xeff37800

0800b168 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b08a      	sub	sp, #40	; 0x28
 800b16c:	af02      	add	r7, sp, #8
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	4613      	mov	r3, r2
 800b174:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	785b      	ldrb	r3, [r3, #1]
 800b184:	2b01      	cmp	r3, #1
 800b186:	f040 817a 	bne.w	800b47e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	691b      	ldr	r3, [r3, #16]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d132      	bne.n	800b1f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b192:	69bb      	ldr	r3, [r7, #24]
 800b194:	015a      	lsls	r2, r3, #5
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	4413      	add	r3, r2
 800b19a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b19e:	691b      	ldr	r3, [r3, #16]
 800b1a0:	69ba      	ldr	r2, [r7, #24]
 800b1a2:	0151      	lsls	r1, r2, #5
 800b1a4:	69fa      	ldr	r2, [r7, #28]
 800b1a6:	440a      	add	r2, r1
 800b1a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b1b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b1b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	015a      	lsls	r2, r3, #5
 800b1ba:	69fb      	ldr	r3, [r7, #28]
 800b1bc:	4413      	add	r3, r2
 800b1be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1c2:	691b      	ldr	r3, [r3, #16]
 800b1c4:	69ba      	ldr	r2, [r7, #24]
 800b1c6:	0151      	lsls	r1, r2, #5
 800b1c8:	69fa      	ldr	r2, [r7, #28]
 800b1ca:	440a      	add	r2, r1
 800b1cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b1d6:	69bb      	ldr	r3, [r7, #24]
 800b1d8:	015a      	lsls	r2, r3, #5
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	4413      	add	r3, r2
 800b1de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1e2:	691b      	ldr	r3, [r3, #16]
 800b1e4:	69ba      	ldr	r2, [r7, #24]
 800b1e6:	0151      	lsls	r1, r2, #5
 800b1e8:	69fa      	ldr	r2, [r7, #28]
 800b1ea:	440a      	add	r2, r1
 800b1ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1f0:	0cdb      	lsrs	r3, r3, #19
 800b1f2:	04db      	lsls	r3, r3, #19
 800b1f4:	6113      	str	r3, [r2, #16]
 800b1f6:	e092      	b.n	800b31e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	015a      	lsls	r2, r3, #5
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	4413      	add	r3, r2
 800b200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	69ba      	ldr	r2, [r7, #24]
 800b208:	0151      	lsls	r1, r2, #5
 800b20a:	69fa      	ldr	r2, [r7, #28]
 800b20c:	440a      	add	r2, r1
 800b20e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b212:	0cdb      	lsrs	r3, r3, #19
 800b214:	04db      	lsls	r3, r3, #19
 800b216:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	015a      	lsls	r2, r3, #5
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	4413      	add	r3, r2
 800b220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b224:	691b      	ldr	r3, [r3, #16]
 800b226:	69ba      	ldr	r2, [r7, #24]
 800b228:	0151      	lsls	r1, r2, #5
 800b22a:	69fa      	ldr	r2, [r7, #28]
 800b22c:	440a      	add	r2, r1
 800b22e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b232:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b236:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b23a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d11a      	bne.n	800b278 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	691a      	ldr	r2, [r3, #16]
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d903      	bls.n	800b256 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	689a      	ldr	r2, [r3, #8]
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	015a      	lsls	r2, r3, #5
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	4413      	add	r3, r2
 800b25e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b262:	691b      	ldr	r3, [r3, #16]
 800b264:	69ba      	ldr	r2, [r7, #24]
 800b266:	0151      	lsls	r1, r2, #5
 800b268:	69fa      	ldr	r2, [r7, #28]
 800b26a:	440a      	add	r2, r1
 800b26c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b270:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b274:	6113      	str	r3, [r2, #16]
 800b276:	e01b      	b.n	800b2b0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	015a      	lsls	r2, r3, #5
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	4413      	add	r3, r2
 800b280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b284:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	6919      	ldr	r1, [r3, #16]
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	440b      	add	r3, r1
 800b290:	1e59      	subs	r1, r3, #1
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	fbb1 f3f3 	udiv	r3, r1, r3
 800b29a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b29c:	4ba2      	ldr	r3, [pc, #648]	; (800b528 <USB_EPStartXfer+0x3c0>)
 800b29e:	400b      	ands	r3, r1
 800b2a0:	69b9      	ldr	r1, [r7, #24]
 800b2a2:	0148      	lsls	r0, r1, #5
 800b2a4:	69f9      	ldr	r1, [r7, #28]
 800b2a6:	4401      	add	r1, r0
 800b2a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	015a      	lsls	r2, r3, #5
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2bc:	691a      	ldr	r2, [r3, #16]
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2c6:	69b9      	ldr	r1, [r7, #24]
 800b2c8:	0148      	lsls	r0, r1, #5
 800b2ca:	69f9      	ldr	r1, [r7, #28]
 800b2cc:	4401      	add	r1, r0
 800b2ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	791b      	ldrb	r3, [r3, #4]
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d11f      	bne.n	800b31e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	015a      	lsls	r2, r3, #5
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2ea:	691b      	ldr	r3, [r3, #16]
 800b2ec:	69ba      	ldr	r2, [r7, #24]
 800b2ee:	0151      	lsls	r1, r2, #5
 800b2f0:	69fa      	ldr	r2, [r7, #28]
 800b2f2:	440a      	add	r2, r1
 800b2f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b2fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	015a      	lsls	r2, r3, #5
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	4413      	add	r3, r2
 800b306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	69ba      	ldr	r2, [r7, #24]
 800b30e:	0151      	lsls	r1, r2, #5
 800b310:	69fa      	ldr	r2, [r7, #28]
 800b312:	440a      	add	r2, r1
 800b314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b318:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b31c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b31e:	79fb      	ldrb	r3, [r7, #7]
 800b320:	2b01      	cmp	r3, #1
 800b322:	d14b      	bne.n	800b3bc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	69db      	ldr	r3, [r3, #28]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d009      	beq.n	800b340 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	015a      	lsls	r2, r3, #5
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	4413      	add	r3, r2
 800b334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b338:	461a      	mov	r2, r3
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	69db      	ldr	r3, [r3, #28]
 800b33e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	791b      	ldrb	r3, [r3, #4]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d128      	bne.n	800b39a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b354:	2b00      	cmp	r3, #0
 800b356:	d110      	bne.n	800b37a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b358:	69bb      	ldr	r3, [r7, #24]
 800b35a:	015a      	lsls	r2, r3, #5
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	4413      	add	r3, r2
 800b360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	69ba      	ldr	r2, [r7, #24]
 800b368:	0151      	lsls	r1, r2, #5
 800b36a:	69fa      	ldr	r2, [r7, #28]
 800b36c:	440a      	add	r2, r1
 800b36e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b372:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b376:	6013      	str	r3, [r2, #0]
 800b378:	e00f      	b.n	800b39a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	015a      	lsls	r2, r3, #5
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	4413      	add	r3, r2
 800b382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	69ba      	ldr	r2, [r7, #24]
 800b38a:	0151      	lsls	r1, r2, #5
 800b38c:	69fa      	ldr	r2, [r7, #28]
 800b38e:	440a      	add	r2, r1
 800b390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b398:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	015a      	lsls	r2, r3, #5
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	69ba      	ldr	r2, [r7, #24]
 800b3aa:	0151      	lsls	r1, r2, #5
 800b3ac:	69fa      	ldr	r2, [r7, #28]
 800b3ae:	440a      	add	r2, r1
 800b3b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3b8:	6013      	str	r3, [r2, #0]
 800b3ba:	e165      	b.n	800b688 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	015a      	lsls	r2, r3, #5
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	69ba      	ldr	r2, [r7, #24]
 800b3cc:	0151      	lsls	r1, r2, #5
 800b3ce:	69fa      	ldr	r2, [r7, #28]
 800b3d0:	440a      	add	r2, r1
 800b3d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	791b      	ldrb	r3, [r3, #4]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d015      	beq.n	800b410 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f000 814d 	beq.w	800b688 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	f003 030f 	and.w	r3, r3, #15
 800b3fe:	2101      	movs	r1, #1
 800b400:	fa01 f303 	lsl.w	r3, r1, r3
 800b404:	69f9      	ldr	r1, [r7, #28]
 800b406:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b40a:	4313      	orrs	r3, r2
 800b40c:	634b      	str	r3, [r1, #52]	; 0x34
 800b40e:	e13b      	b.n	800b688 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d110      	bne.n	800b442 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	015a      	lsls	r2, r3, #5
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	4413      	add	r3, r2
 800b428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	69ba      	ldr	r2, [r7, #24]
 800b430:	0151      	lsls	r1, r2, #5
 800b432:	69fa      	ldr	r2, [r7, #28]
 800b434:	440a      	add	r2, r1
 800b436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b43a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b43e:	6013      	str	r3, [r2, #0]
 800b440:	e00f      	b.n	800b462 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	015a      	lsls	r2, r3, #5
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	4413      	add	r3, r2
 800b44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	69ba      	ldr	r2, [r7, #24]
 800b452:	0151      	lsls	r1, r2, #5
 800b454:	69fa      	ldr	r2, [r7, #28]
 800b456:	440a      	add	r2, r1
 800b458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b45c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b460:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	68d9      	ldr	r1, [r3, #12]
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	781a      	ldrb	r2, [r3, #0]
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	b298      	uxth	r0, r3
 800b470:	79fb      	ldrb	r3, [r7, #7]
 800b472:	9300      	str	r3, [sp, #0]
 800b474:	4603      	mov	r3, r0
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	f000 f9b8 	bl	800b7ec <USB_WritePacket>
 800b47c:	e104      	b.n	800b688 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	015a      	lsls	r2, r3, #5
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	4413      	add	r3, r2
 800b486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b48a:	691b      	ldr	r3, [r3, #16]
 800b48c:	69ba      	ldr	r2, [r7, #24]
 800b48e:	0151      	lsls	r1, r2, #5
 800b490:	69fa      	ldr	r2, [r7, #28]
 800b492:	440a      	add	r2, r1
 800b494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b498:	0cdb      	lsrs	r3, r3, #19
 800b49a:	04db      	lsls	r3, r3, #19
 800b49c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	015a      	lsls	r2, r3, #5
 800b4a2:	69fb      	ldr	r3, [r7, #28]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	69ba      	ldr	r2, [r7, #24]
 800b4ae:	0151      	lsls	r1, r2, #5
 800b4b0:	69fa      	ldr	r2, [r7, #28]
 800b4b2:	440a      	add	r2, r1
 800b4b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b4bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b4c0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d131      	bne.n	800b52c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d003      	beq.n	800b4d8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	689a      	ldr	r2, [r3, #8]
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	689a      	ldr	r2, [r3, #8]
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	015a      	lsls	r2, r3, #5
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ec:	691a      	ldr	r2, [r3, #16]
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	6a1b      	ldr	r3, [r3, #32]
 800b4f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4f6:	69b9      	ldr	r1, [r7, #24]
 800b4f8:	0148      	lsls	r0, r1, #5
 800b4fa:	69f9      	ldr	r1, [r7, #28]
 800b4fc:	4401      	add	r1, r0
 800b4fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b502:	4313      	orrs	r3, r2
 800b504:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	015a      	lsls	r2, r3, #5
 800b50a:	69fb      	ldr	r3, [r7, #28]
 800b50c:	4413      	add	r3, r2
 800b50e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b512:	691b      	ldr	r3, [r3, #16]
 800b514:	69ba      	ldr	r2, [r7, #24]
 800b516:	0151      	lsls	r1, r2, #5
 800b518:	69fa      	ldr	r2, [r7, #28]
 800b51a:	440a      	add	r2, r1
 800b51c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b520:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b524:	6113      	str	r3, [r2, #16]
 800b526:	e061      	b.n	800b5ec <USB_EPStartXfer+0x484>
 800b528:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d123      	bne.n	800b57c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	015a      	lsls	r2, r3, #5
 800b538:	69fb      	ldr	r3, [r7, #28]
 800b53a:	4413      	add	r3, r2
 800b53c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b540:	691a      	ldr	r2, [r3, #16]
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b54a:	69b9      	ldr	r1, [r7, #24]
 800b54c:	0148      	lsls	r0, r1, #5
 800b54e:	69f9      	ldr	r1, [r7, #28]
 800b550:	4401      	add	r1, r0
 800b552:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b556:	4313      	orrs	r3, r2
 800b558:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b55a:	69bb      	ldr	r3, [r7, #24]
 800b55c:	015a      	lsls	r2, r3, #5
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	4413      	add	r3, r2
 800b562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b566:	691b      	ldr	r3, [r3, #16]
 800b568:	69ba      	ldr	r2, [r7, #24]
 800b56a:	0151      	lsls	r1, r2, #5
 800b56c:	69fa      	ldr	r2, [r7, #28]
 800b56e:	440a      	add	r2, r1
 800b570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b578:	6113      	str	r3, [r2, #16]
 800b57a:	e037      	b.n	800b5ec <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	691a      	ldr	r2, [r3, #16]
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	4413      	add	r3, r2
 800b586:	1e5a      	subs	r2, r3, #1
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b590:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	8afa      	ldrh	r2, [r7, #22]
 800b598:	fb03 f202 	mul.w	r2, r3, r2
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b5a0:	69bb      	ldr	r3, [r7, #24]
 800b5a2:	015a      	lsls	r2, r3, #5
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5ac:	691a      	ldr	r2, [r3, #16]
 800b5ae:	8afb      	ldrh	r3, [r7, #22]
 800b5b0:	04d9      	lsls	r1, r3, #19
 800b5b2:	4b38      	ldr	r3, [pc, #224]	; (800b694 <USB_EPStartXfer+0x52c>)
 800b5b4:	400b      	ands	r3, r1
 800b5b6:	69b9      	ldr	r1, [r7, #24]
 800b5b8:	0148      	lsls	r0, r1, #5
 800b5ba:	69f9      	ldr	r1, [r7, #28]
 800b5bc:	4401      	add	r1, r0
 800b5be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	015a      	lsls	r2, r3, #5
 800b5ca:	69fb      	ldr	r3, [r7, #28]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5d2:	691a      	ldr	r2, [r3, #16]
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	6a1b      	ldr	r3, [r3, #32]
 800b5d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5dc:	69b9      	ldr	r1, [r7, #24]
 800b5de:	0148      	lsls	r0, r1, #5
 800b5e0:	69f9      	ldr	r1, [r7, #28]
 800b5e2:	4401      	add	r1, r0
 800b5e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b5ec:	79fb      	ldrb	r3, [r7, #7]
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d10d      	bne.n	800b60e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d009      	beq.n	800b60e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	68d9      	ldr	r1, [r3, #12]
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	015a      	lsls	r2, r3, #5
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	4413      	add	r3, r2
 800b606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b60a:	460a      	mov	r2, r1
 800b60c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	791b      	ldrb	r3, [r3, #4]
 800b612:	2b01      	cmp	r3, #1
 800b614:	d128      	bne.n	800b668 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b622:	2b00      	cmp	r3, #0
 800b624:	d110      	bne.n	800b648 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	015a      	lsls	r2, r3, #5
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	4413      	add	r3, r2
 800b62e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	69ba      	ldr	r2, [r7, #24]
 800b636:	0151      	lsls	r1, r2, #5
 800b638:	69fa      	ldr	r2, [r7, #28]
 800b63a:	440a      	add	r2, r1
 800b63c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b640:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b644:	6013      	str	r3, [r2, #0]
 800b646:	e00f      	b.n	800b668 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b648:	69bb      	ldr	r3, [r7, #24]
 800b64a:	015a      	lsls	r2, r3, #5
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	4413      	add	r3, r2
 800b650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	69ba      	ldr	r2, [r7, #24]
 800b658:	0151      	lsls	r1, r2, #5
 800b65a:	69fa      	ldr	r2, [r7, #28]
 800b65c:	440a      	add	r2, r1
 800b65e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b666:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	015a      	lsls	r2, r3, #5
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	4413      	add	r3, r2
 800b670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	69ba      	ldr	r2, [r7, #24]
 800b678:	0151      	lsls	r1, r2, #5
 800b67a:	69fa      	ldr	r2, [r7, #28]
 800b67c:	440a      	add	r2, r1
 800b67e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b682:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b686:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3720      	adds	r7, #32
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	1ff80000 	.word	0x1ff80000

0800b698 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b698:	b480      	push	{r7}
 800b69a:	b087      	sub	sp, #28
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	785b      	ldrb	r3, [r3, #1]
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d14a      	bne.n	800b74c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	015a      	lsls	r2, r3, #5
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	4413      	add	r3, r2
 800b6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6ce:	f040 8086 	bne.w	800b7de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	015a      	lsls	r2, r3, #5
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	4413      	add	r3, r2
 800b6dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	7812      	ldrb	r2, [r2, #0]
 800b6e6:	0151      	lsls	r1, r2, #5
 800b6e8:	693a      	ldr	r2, [r7, #16]
 800b6ea:	440a      	add	r2, r1
 800b6ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b6f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	015a      	lsls	r2, r3, #5
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	4413      	add	r3, r2
 800b700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	683a      	ldr	r2, [r7, #0]
 800b708:	7812      	ldrb	r2, [r2, #0]
 800b70a:	0151      	lsls	r1, r2, #5
 800b70c:	693a      	ldr	r2, [r7, #16]
 800b70e:	440a      	add	r2, r1
 800b710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b714:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b718:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	3301      	adds	r3, #1
 800b71e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f242 7210 	movw	r2, #10000	; 0x2710
 800b726:	4293      	cmp	r3, r2
 800b728:	d902      	bls.n	800b730 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	75fb      	strb	r3, [r7, #23]
          break;
 800b72e:	e056      	b.n	800b7de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	015a      	lsls	r2, r3, #5
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	4413      	add	r3, r2
 800b73a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b748:	d0e7      	beq.n	800b71a <USB_EPStopXfer+0x82>
 800b74a:	e048      	b.n	800b7de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	015a      	lsls	r2, r3, #5
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	4413      	add	r3, r2
 800b756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b764:	d13b      	bne.n	800b7de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	015a      	lsls	r2, r3, #5
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	4413      	add	r3, r2
 800b770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	683a      	ldr	r2, [r7, #0]
 800b778:	7812      	ldrb	r2, [r2, #0]
 800b77a:	0151      	lsls	r1, r2, #5
 800b77c:	693a      	ldr	r2, [r7, #16]
 800b77e:	440a      	add	r2, r1
 800b780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b784:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b788:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	015a      	lsls	r2, r3, #5
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	4413      	add	r3, r2
 800b794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	683a      	ldr	r2, [r7, #0]
 800b79c:	7812      	ldrb	r2, [r2, #0]
 800b79e:	0151      	lsls	r1, r2, #5
 800b7a0:	693a      	ldr	r2, [r7, #16]
 800b7a2:	440a      	add	r2, r1
 800b7a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f242 7210 	movw	r2, #10000	; 0x2710
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d902      	bls.n	800b7c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	75fb      	strb	r3, [r7, #23]
          break;
 800b7c2:	e00c      	b.n	800b7de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	015a      	lsls	r2, r3, #5
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7dc:	d0e7      	beq.n	800b7ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b7de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	371c      	adds	r7, #28
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b089      	sub	sp, #36	; 0x24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	4611      	mov	r1, r2
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	71fb      	strb	r3, [r7, #7]
 800b7fe:	4613      	mov	r3, r2
 800b800:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b80a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d123      	bne.n	800b85a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b812:	88bb      	ldrh	r3, [r7, #4]
 800b814:	3303      	adds	r3, #3
 800b816:	089b      	lsrs	r3, r3, #2
 800b818:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b81a:	2300      	movs	r3, #0
 800b81c:	61bb      	str	r3, [r7, #24]
 800b81e:	e018      	b.n	800b852 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b820:	79fb      	ldrb	r3, [r7, #7]
 800b822:	031a      	lsls	r2, r3, #12
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	4413      	add	r3, r2
 800b828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b82c:	461a      	mov	r2, r3
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b834:	69fb      	ldr	r3, [r7, #28]
 800b836:	3301      	adds	r3, #1
 800b838:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	3301      	adds	r3, #1
 800b83e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	3301      	adds	r3, #1
 800b844:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b846:	69fb      	ldr	r3, [r7, #28]
 800b848:	3301      	adds	r3, #1
 800b84a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	3301      	adds	r3, #1
 800b850:	61bb      	str	r3, [r7, #24]
 800b852:	69ba      	ldr	r2, [r7, #24]
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	429a      	cmp	r2, r3
 800b858:	d3e2      	bcc.n	800b820 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3724      	adds	r7, #36	; 0x24
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b868:	b480      	push	{r7}
 800b86a:	b08b      	sub	sp, #44	; 0x2c
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	4613      	mov	r3, r2
 800b874:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b87e:	88fb      	ldrh	r3, [r7, #6]
 800b880:	089b      	lsrs	r3, r3, #2
 800b882:	b29b      	uxth	r3, r3
 800b884:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b886:	88fb      	ldrh	r3, [r7, #6]
 800b888:	f003 0303 	and.w	r3, r3, #3
 800b88c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b88e:	2300      	movs	r3, #0
 800b890:	623b      	str	r3, [r7, #32]
 800b892:	e014      	b.n	800b8be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b894:	69bb      	ldr	r3, [r7, #24]
 800b896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89e:	601a      	str	r2, [r3, #0]
    pDest++;
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b8b8:	6a3b      	ldr	r3, [r7, #32]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	623b      	str	r3, [r7, #32]
 800b8be:	6a3a      	ldr	r2, [r7, #32]
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d3e6      	bcc.n	800b894 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b8c6:	8bfb      	ldrh	r3, [r7, #30]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d01e      	beq.n	800b90a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	f107 0310 	add.w	r3, r7, #16
 800b8dc:	6812      	ldr	r2, [r2, #0]
 800b8de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b8e0:	693a      	ldr	r2, [r7, #16]
 800b8e2:	6a3b      	ldr	r3, [r7, #32]
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	00db      	lsls	r3, r3, #3
 800b8e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b8ec:	b2da      	uxtb	r2, r3
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f0:	701a      	strb	r2, [r3, #0]
      i++;
 800b8f2:	6a3b      	ldr	r3, [r7, #32]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	623b      	str	r3, [r7, #32]
      pDest++;
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b8fe:	8bfb      	ldrh	r3, [r7, #30]
 800b900:	3b01      	subs	r3, #1
 800b902:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b904:	8bfb      	ldrh	r3, [r7, #30]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d1ea      	bne.n	800b8e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	372c      	adds	r7, #44	; 0x2c
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b918:	b480      	push	{r7}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	785b      	ldrb	r3, [r3, #1]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d12c      	bne.n	800b98e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	015a      	lsls	r2, r3, #5
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	4413      	add	r3, r2
 800b93c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	db12      	blt.n	800b96c <USB_EPSetStall+0x54>
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00f      	beq.n	800b96c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	015a      	lsls	r2, r3, #5
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	4413      	add	r3, r2
 800b954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	68ba      	ldr	r2, [r7, #8]
 800b95c:	0151      	lsls	r1, r2, #5
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	440a      	add	r2, r1
 800b962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b966:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b96a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	015a      	lsls	r2, r3, #5
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	4413      	add	r3, r2
 800b974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	0151      	lsls	r1, r2, #5
 800b97e:	68fa      	ldr	r2, [r7, #12]
 800b980:	440a      	add	r2, r1
 800b982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b986:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b98a:	6013      	str	r3, [r2, #0]
 800b98c:	e02b      	b.n	800b9e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	015a      	lsls	r2, r3, #5
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	4413      	add	r3, r2
 800b996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	db12      	blt.n	800b9c6 <USB_EPSetStall+0xae>
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00f      	beq.n	800b9c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	015a      	lsls	r2, r3, #5
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	68ba      	ldr	r2, [r7, #8]
 800b9b6:	0151      	lsls	r1, r2, #5
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	440a      	add	r2, r1
 800b9bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b9c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	015a      	lsls	r2, r3, #5
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	0151      	lsls	r1, r2, #5
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	440a      	add	r2, r1
 800b9dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b9e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b9e6:	2300      	movs	r3, #0
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3714      	adds	r7, #20
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	785b      	ldrb	r3, [r3, #1]
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d128      	bne.n	800ba62 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	015a      	lsls	r2, r3, #5
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	4413      	add	r3, r2
 800ba18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68ba      	ldr	r2, [r7, #8]
 800ba20:	0151      	lsls	r1, r2, #5
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	440a      	add	r2, r1
 800ba26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba2e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	791b      	ldrb	r3, [r3, #4]
 800ba34:	2b03      	cmp	r3, #3
 800ba36:	d003      	beq.n	800ba40 <USB_EPClearStall+0x4c>
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	791b      	ldrb	r3, [r3, #4]
 800ba3c:	2b02      	cmp	r3, #2
 800ba3e:	d138      	bne.n	800bab2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	015a      	lsls	r2, r3, #5
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	4413      	add	r3, r2
 800ba48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	68ba      	ldr	r2, [r7, #8]
 800ba50:	0151      	lsls	r1, r2, #5
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	440a      	add	r2, r1
 800ba56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba5e:	6013      	str	r3, [r2, #0]
 800ba60:	e027      	b.n	800bab2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	015a      	lsls	r2, r3, #5
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	4413      	add	r3, r2
 800ba6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	0151      	lsls	r1, r2, #5
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	440a      	add	r2, r1
 800ba78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	791b      	ldrb	r3, [r3, #4]
 800ba86:	2b03      	cmp	r3, #3
 800ba88:	d003      	beq.n	800ba92 <USB_EPClearStall+0x9e>
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	791b      	ldrb	r3, [r3, #4]
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d10f      	bne.n	800bab2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	015a      	lsls	r2, r3, #5
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	4413      	add	r3, r2
 800ba9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	68ba      	ldr	r2, [r7, #8]
 800baa2:	0151      	lsls	r1, r2, #5
 800baa4:	68fa      	ldr	r2, [r7, #12]
 800baa6:	440a      	add	r2, r1
 800baa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bab0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bab2:	2300      	movs	r3, #0
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3714      	adds	r7, #20
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b085      	sub	sp, #20
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	460b      	mov	r3, r1
 800baca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68fa      	ldr	r2, [r7, #12]
 800bada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bade:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bae2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	78fb      	ldrb	r3, [r7, #3]
 800baee:	011b      	lsls	r3, r3, #4
 800baf0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800baf4:	68f9      	ldr	r1, [r7, #12]
 800baf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bafa:	4313      	orrs	r3, r2
 800bafc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3714      	adds	r7, #20
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b085      	sub	sp, #20
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb26:	f023 0303 	bic.w	r3, r3, #3
 800bb2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb3a:	f023 0302 	bic.w	r3, r3, #2
 800bb3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3714      	adds	r7, #20
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr

0800bb4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb4e:	b480      	push	{r7}
 800bb50:	b085      	sub	sp, #20
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb68:	f023 0303 	bic.w	r3, r3, #3
 800bb6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb7c:	f043 0302 	orr.w	r3, r3, #2
 800bb80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb82:	2300      	movs	r3, #0
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3714      	adds	r7, #20
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b085      	sub	sp, #20
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	699b      	ldr	r3, [r3, #24]
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	4013      	ands	r3, r2
 800bba6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bba8:	68fb      	ldr	r3, [r7, #12]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3714      	adds	r7, #20
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr

0800bbb6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bbb6:	b480      	push	{r7}
 800bbb8:	b085      	sub	sp, #20
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbc8:	699b      	ldr	r3, [r3, #24]
 800bbca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbd2:	69db      	ldr	r3, [r3, #28]
 800bbd4:	68ba      	ldr	r2, [r7, #8]
 800bbd6:	4013      	ands	r3, r2
 800bbd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	0c1b      	lsrs	r3, r3, #16
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3714      	adds	r7, #20
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr

0800bbea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bbea:	b480      	push	{r7}
 800bbec:	b085      	sub	sp, #20
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbfc:	699b      	ldr	r3, [r3, #24]
 800bbfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc06:	69db      	ldr	r3, [r3, #28]
 800bc08:	68ba      	ldr	r2, [r7, #8]
 800bc0a:	4013      	ands	r3, r2
 800bc0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	b29b      	uxth	r3, r3
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3714      	adds	r7, #20
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr

0800bc1e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bc1e:	b480      	push	{r7}
 800bc20:	b085      	sub	sp, #20
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
 800bc26:	460b      	mov	r3, r1
 800bc28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bc2e:	78fb      	ldrb	r3, [r7, #3]
 800bc30:	015a      	lsls	r2, r3, #5
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	4413      	add	r3, r2
 800bc36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc44:	695b      	ldr	r3, [r3, #20]
 800bc46:	68ba      	ldr	r2, [r7, #8]
 800bc48:	4013      	ands	r3, r2
 800bc4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bc4c:	68bb      	ldr	r3, [r7, #8]
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3714      	adds	r7, #20
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr

0800bc5a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bc5a:	b480      	push	{r7}
 800bc5c:	b087      	sub	sp, #28
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
 800bc62:	460b      	mov	r3, r1
 800bc64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc7c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bc7e:	78fb      	ldrb	r3, [r7, #3]
 800bc80:	f003 030f 	and.w	r3, r3, #15
 800bc84:	68fa      	ldr	r2, [r7, #12]
 800bc86:	fa22 f303 	lsr.w	r3, r2, r3
 800bc8a:	01db      	lsls	r3, r3, #7
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	693a      	ldr	r2, [r7, #16]
 800bc90:	4313      	orrs	r3, r2
 800bc92:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bc94:	78fb      	ldrb	r3, [r7, #3]
 800bc96:	015a      	lsls	r2, r3, #5
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	4413      	add	r3, r2
 800bc9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	693a      	ldr	r2, [r7, #16]
 800bca4:	4013      	ands	r3, r2
 800bca6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bca8:	68bb      	ldr	r3, [r7, #8]
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	371c      	adds	r7, #28
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr

0800bcb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bcb6:	b480      	push	{r7}
 800bcb8:	b083      	sub	sp, #12
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	695b      	ldr	r3, [r3, #20]
 800bcc2:	f003 0301 	and.w	r3, r3, #1
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	370c      	adds	r7, #12
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr

0800bcd2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bcd2:	b480      	push	{r7}
 800bcd4:	b085      	sub	sp, #20
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bcf0:	f023 0307 	bic.w	r3, r3, #7
 800bcf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	68fa      	ldr	r2, [r7, #12]
 800bd00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd0a:	2300      	movs	r3, #0
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3714      	adds	r7, #20
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b087      	sub	sp, #28
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	460b      	mov	r3, r1
 800bd22:	607a      	str	r2, [r7, #4]
 800bd24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	333c      	adds	r3, #60	; 0x3c
 800bd2e:	3304      	adds	r3, #4
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	4a26      	ldr	r2, [pc, #152]	; (800bdd0 <USB_EP0_OutStart+0xb8>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d90a      	bls.n	800bd52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd4c:	d101      	bne.n	800bd52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	e037      	b.n	800bdc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd58:	461a      	mov	r2, r3
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	697a      	ldr	r2, [r7, #20]
 800bd68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	697a      	ldr	r2, [r7, #20]
 800bd7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd80:	f043 0318 	orr.w	r3, r3, #24
 800bd84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	697a      	ldr	r2, [r7, #20]
 800bd90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bd98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bd9a:	7afb      	ldrb	r3, [r7, #11]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d10f      	bne.n	800bdc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda6:	461a      	mov	r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	697a      	ldr	r2, [r7, #20]
 800bdb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bdbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	371c      	adds	r7, #28
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr
 800bdce:	bf00      	nop
 800bdd0:	4f54300a 	.word	0x4f54300a

0800bdd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bddc:	2300      	movs	r3, #0
 800bdde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	3301      	adds	r3, #1
 800bde4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bdec:	d901      	bls.n	800bdf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bdee:	2303      	movs	r3, #3
 800bdf0:	e01b      	b.n	800be2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	691b      	ldr	r3, [r3, #16]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	daf2      	bge.n	800bde0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	691b      	ldr	r3, [r3, #16]
 800be02:	f043 0201 	orr.w	r2, r3, #1
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	3301      	adds	r3, #1
 800be0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800be16:	d901      	bls.n	800be1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800be18:	2303      	movs	r3, #3
 800be1a:	e006      	b.n	800be2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	691b      	ldr	r3, [r3, #16]
 800be20:	f003 0301 	and.w	r3, r3, #1
 800be24:	2b01      	cmp	r3, #1
 800be26:	d0f0      	beq.n	800be0a <USB_CoreReset+0x36>

  return HAL_OK;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3714      	adds	r7, #20
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
	...

0800be38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	460b      	mov	r3, r1
 800be42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800be44:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800be48:	f005 fff6 	bl	8011e38 <USBD_static_malloc>
 800be4c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d109      	bne.n	800be68 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	32b0      	adds	r2, #176	; 0xb0
 800be5e:	2100      	movs	r1, #0
 800be60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800be64:	2302      	movs	r3, #2
 800be66:	e0d4      	b.n	800c012 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800be68:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800be6c:	2100      	movs	r1, #0
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f006 ff02 	bl	8012c78 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	32b0      	adds	r2, #176	; 0xb0
 800be7e:	68f9      	ldr	r1, [r7, #12]
 800be80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	32b0      	adds	r2, #176	; 0xb0
 800be8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	7c1b      	ldrb	r3, [r3, #16]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d138      	bne.n	800bf12 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bea0:	4b5e      	ldr	r3, [pc, #376]	; (800c01c <USBD_CDC_Init+0x1e4>)
 800bea2:	7819      	ldrb	r1, [r3, #0]
 800bea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bea8:	2202      	movs	r2, #2
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f005 fea1 	bl	8011bf2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800beb0:	4b5a      	ldr	r3, [pc, #360]	; (800c01c <USBD_CDC_Init+0x1e4>)
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	f003 020f 	and.w	r2, r3, #15
 800beb8:	6879      	ldr	r1, [r7, #4]
 800beba:	4613      	mov	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4413      	add	r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	440b      	add	r3, r1
 800bec4:	3324      	adds	r3, #36	; 0x24
 800bec6:	2201      	movs	r2, #1
 800bec8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800beca:	4b55      	ldr	r3, [pc, #340]	; (800c020 <USBD_CDC_Init+0x1e8>)
 800becc:	7819      	ldrb	r1, [r3, #0]
 800bece:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bed2:	2202      	movs	r2, #2
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f005 fe8c 	bl	8011bf2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800beda:	4b51      	ldr	r3, [pc, #324]	; (800c020 <USBD_CDC_Init+0x1e8>)
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	f003 020f 	and.w	r2, r3, #15
 800bee2:	6879      	ldr	r1, [r7, #4]
 800bee4:	4613      	mov	r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	4413      	add	r3, r2
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	440b      	add	r3, r1
 800beee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bef2:	2201      	movs	r2, #1
 800bef4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bef6:	4b4b      	ldr	r3, [pc, #300]	; (800c024 <USBD_CDC_Init+0x1ec>)
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	f003 020f 	and.w	r2, r3, #15
 800befe:	6879      	ldr	r1, [r7, #4]
 800bf00:	4613      	mov	r3, r2
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	4413      	add	r3, r2
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	440b      	add	r3, r1
 800bf0a:	3326      	adds	r3, #38	; 0x26
 800bf0c:	2210      	movs	r2, #16
 800bf0e:	801a      	strh	r2, [r3, #0]
 800bf10:	e035      	b.n	800bf7e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bf12:	4b42      	ldr	r3, [pc, #264]	; (800c01c <USBD_CDC_Init+0x1e4>)
 800bf14:	7819      	ldrb	r1, [r3, #0]
 800bf16:	2340      	movs	r3, #64	; 0x40
 800bf18:	2202      	movs	r2, #2
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f005 fe69 	bl	8011bf2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bf20:	4b3e      	ldr	r3, [pc, #248]	; (800c01c <USBD_CDC_Init+0x1e4>)
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	f003 020f 	and.w	r2, r3, #15
 800bf28:	6879      	ldr	r1, [r7, #4]
 800bf2a:	4613      	mov	r3, r2
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	4413      	add	r3, r2
 800bf30:	009b      	lsls	r3, r3, #2
 800bf32:	440b      	add	r3, r1
 800bf34:	3324      	adds	r3, #36	; 0x24
 800bf36:	2201      	movs	r2, #1
 800bf38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bf3a:	4b39      	ldr	r3, [pc, #228]	; (800c020 <USBD_CDC_Init+0x1e8>)
 800bf3c:	7819      	ldrb	r1, [r3, #0]
 800bf3e:	2340      	movs	r3, #64	; 0x40
 800bf40:	2202      	movs	r2, #2
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f005 fe55 	bl	8011bf2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bf48:	4b35      	ldr	r3, [pc, #212]	; (800c020 <USBD_CDC_Init+0x1e8>)
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	f003 020f 	and.w	r2, r3, #15
 800bf50:	6879      	ldr	r1, [r7, #4]
 800bf52:	4613      	mov	r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	4413      	add	r3, r2
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	440b      	add	r3, r1
 800bf5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf60:	2201      	movs	r2, #1
 800bf62:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bf64:	4b2f      	ldr	r3, [pc, #188]	; (800c024 <USBD_CDC_Init+0x1ec>)
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	f003 020f 	and.w	r2, r3, #15
 800bf6c:	6879      	ldr	r1, [r7, #4]
 800bf6e:	4613      	mov	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4413      	add	r3, r2
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	440b      	add	r3, r1
 800bf78:	3326      	adds	r3, #38	; 0x26
 800bf7a:	2210      	movs	r2, #16
 800bf7c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bf7e:	4b29      	ldr	r3, [pc, #164]	; (800c024 <USBD_CDC_Init+0x1ec>)
 800bf80:	7819      	ldrb	r1, [r3, #0]
 800bf82:	2308      	movs	r3, #8
 800bf84:	2203      	movs	r2, #3
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f005 fe33 	bl	8011bf2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bf8c:	4b25      	ldr	r3, [pc, #148]	; (800c024 <USBD_CDC_Init+0x1ec>)
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	f003 020f 	and.w	r2, r3, #15
 800bf94:	6879      	ldr	r1, [r7, #4]
 800bf96:	4613      	mov	r3, r2
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	4413      	add	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	440b      	add	r3, r1
 800bfa0:	3324      	adds	r3, #36	; 0x24
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	33b0      	adds	r3, #176	; 0xb0
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	4413      	add	r3, r2
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d101      	bne.n	800bfe0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bfdc:	2302      	movs	r3, #2
 800bfde:	e018      	b.n	800c012 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	7c1b      	ldrb	r3, [r3, #16]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d10a      	bne.n	800bffe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bfe8:	4b0d      	ldr	r3, [pc, #52]	; (800c020 <USBD_CDC_Init+0x1e8>)
 800bfea:	7819      	ldrb	r1, [r3, #0]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f005 feea 	bl	8011dd0 <USBD_LL_PrepareReceive>
 800bffc:	e008      	b.n	800c010 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bffe:	4b08      	ldr	r3, [pc, #32]	; (800c020 <USBD_CDC_Init+0x1e8>)
 800c000:	7819      	ldrb	r1, [r3, #0]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c008:	2340      	movs	r3, #64	; 0x40
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f005 fee0 	bl	8011dd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	20000377 	.word	0x20000377
 800c020:	20000378 	.word	0x20000378
 800c024:	20000379 	.word	0x20000379

0800c028 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	460b      	mov	r3, r1
 800c032:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c034:	4b3a      	ldr	r3, [pc, #232]	; (800c120 <USBD_CDC_DeInit+0xf8>)
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	4619      	mov	r1, r3
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f005 fdff 	bl	8011c3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c040:	4b37      	ldr	r3, [pc, #220]	; (800c120 <USBD_CDC_DeInit+0xf8>)
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	f003 020f 	and.w	r2, r3, #15
 800c048:	6879      	ldr	r1, [r7, #4]
 800c04a:	4613      	mov	r3, r2
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	4413      	add	r3, r2
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	440b      	add	r3, r1
 800c054:	3324      	adds	r3, #36	; 0x24
 800c056:	2200      	movs	r2, #0
 800c058:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c05a:	4b32      	ldr	r3, [pc, #200]	; (800c124 <USBD_CDC_DeInit+0xfc>)
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	4619      	mov	r1, r3
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f005 fdec 	bl	8011c3e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c066:	4b2f      	ldr	r3, [pc, #188]	; (800c124 <USBD_CDC_DeInit+0xfc>)
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	f003 020f 	and.w	r2, r3, #15
 800c06e:	6879      	ldr	r1, [r7, #4]
 800c070:	4613      	mov	r3, r2
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	4413      	add	r3, r2
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	440b      	add	r3, r1
 800c07a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c07e:	2200      	movs	r2, #0
 800c080:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c082:	4b29      	ldr	r3, [pc, #164]	; (800c128 <USBD_CDC_DeInit+0x100>)
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	4619      	mov	r1, r3
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f005 fdd8 	bl	8011c3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c08e:	4b26      	ldr	r3, [pc, #152]	; (800c128 <USBD_CDC_DeInit+0x100>)
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	f003 020f 	and.w	r2, r3, #15
 800c096:	6879      	ldr	r1, [r7, #4]
 800c098:	4613      	mov	r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	4413      	add	r3, r2
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	440b      	add	r3, r1
 800c0a2:	3324      	adds	r3, #36	; 0x24
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c0a8:	4b1f      	ldr	r3, [pc, #124]	; (800c128 <USBD_CDC_DeInit+0x100>)
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	f003 020f 	and.w	r2, r3, #15
 800c0b0:	6879      	ldr	r1, [r7, #4]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4413      	add	r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	440b      	add	r3, r1
 800c0bc:	3326      	adds	r3, #38	; 0x26
 800c0be:	2200      	movs	r2, #0
 800c0c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	32b0      	adds	r2, #176	; 0xb0
 800c0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d01f      	beq.n	800c114 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	33b0      	adds	r3, #176	; 0xb0
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	4413      	add	r3, r2
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	32b0      	adds	r2, #176	; 0xb0
 800c0f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f005 feac 	bl	8011e54 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	32b0      	adds	r2, #176	; 0xb0
 800c106:	2100      	movs	r1, #0
 800c108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2200      	movs	r2, #0
 800c110:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	3708      	adds	r7, #8
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	20000377 	.word	0x20000377
 800c124:	20000378 	.word	0x20000378
 800c128:	20000379 	.word	0x20000379

0800c12c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b086      	sub	sp, #24
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	32b0      	adds	r2, #176	; 0xb0
 800c140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c144:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c146:	2300      	movs	r3, #0
 800c148:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c14a:	2300      	movs	r3, #0
 800c14c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c14e:	2300      	movs	r3, #0
 800c150:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d101      	bne.n	800c15c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c158:	2303      	movs	r3, #3
 800c15a:	e0bf      	b.n	800c2dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c164:	2b00      	cmp	r3, #0
 800c166:	d050      	beq.n	800c20a <USBD_CDC_Setup+0xde>
 800c168:	2b20      	cmp	r3, #32
 800c16a:	f040 80af 	bne.w	800c2cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	88db      	ldrh	r3, [r3, #6]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d03a      	beq.n	800c1ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	b25b      	sxtb	r3, r3
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	da1b      	bge.n	800c1b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	33b0      	adds	r3, #176	; 0xb0
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	4413      	add	r3, r2
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	683a      	ldr	r2, [r7, #0]
 800c194:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c196:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c198:	683a      	ldr	r2, [r7, #0]
 800c19a:	88d2      	ldrh	r2, [r2, #6]
 800c19c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	88db      	ldrh	r3, [r3, #6]
 800c1a2:	2b07      	cmp	r3, #7
 800c1a4:	bf28      	it	cs
 800c1a6:	2307      	movcs	r3, #7
 800c1a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	89fa      	ldrh	r2, [r7, #14]
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f001 fd49 	bl	800dc48 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c1b6:	e090      	b.n	800c2da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	785a      	ldrb	r2, [r3, #1]
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	88db      	ldrh	r3, [r3, #6]
 800c1c6:	2b3f      	cmp	r3, #63	; 0x3f
 800c1c8:	d803      	bhi.n	800c1d2 <USBD_CDC_Setup+0xa6>
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	88db      	ldrh	r3, [r3, #6]
 800c1ce:	b2da      	uxtb	r2, r3
 800c1d0:	e000      	b.n	800c1d4 <USBD_CDC_Setup+0xa8>
 800c1d2:	2240      	movs	r2, #64	; 0x40
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c1da:	6939      	ldr	r1, [r7, #16]
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f001 fd5b 	bl	800dca0 <USBD_CtlPrepareRx>
      break;
 800c1ea:	e076      	b.n	800c2da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	33b0      	adds	r3, #176	; 0xb0
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	4413      	add	r3, r2
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	683a      	ldr	r2, [r7, #0]
 800c200:	7850      	ldrb	r0, [r2, #1]
 800c202:	2200      	movs	r2, #0
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	4798      	blx	r3
      break;
 800c208:	e067      	b.n	800c2da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	785b      	ldrb	r3, [r3, #1]
 800c20e:	2b0b      	cmp	r3, #11
 800c210:	d851      	bhi.n	800c2b6 <USBD_CDC_Setup+0x18a>
 800c212:	a201      	add	r2, pc, #4	; (adr r2, 800c218 <USBD_CDC_Setup+0xec>)
 800c214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c218:	0800c249 	.word	0x0800c249
 800c21c:	0800c2c5 	.word	0x0800c2c5
 800c220:	0800c2b7 	.word	0x0800c2b7
 800c224:	0800c2b7 	.word	0x0800c2b7
 800c228:	0800c2b7 	.word	0x0800c2b7
 800c22c:	0800c2b7 	.word	0x0800c2b7
 800c230:	0800c2b7 	.word	0x0800c2b7
 800c234:	0800c2b7 	.word	0x0800c2b7
 800c238:	0800c2b7 	.word	0x0800c2b7
 800c23c:	0800c2b7 	.word	0x0800c2b7
 800c240:	0800c273 	.word	0x0800c273
 800c244:	0800c29d 	.word	0x0800c29d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	2b03      	cmp	r3, #3
 800c252:	d107      	bne.n	800c264 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c254:	f107 030a 	add.w	r3, r7, #10
 800c258:	2202      	movs	r2, #2
 800c25a:	4619      	mov	r1, r3
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f001 fcf3 	bl	800dc48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c262:	e032      	b.n	800c2ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f001 fc7d 	bl	800db66 <USBD_CtlError>
            ret = USBD_FAIL;
 800c26c:	2303      	movs	r3, #3
 800c26e:	75fb      	strb	r3, [r7, #23]
          break;
 800c270:	e02b      	b.n	800c2ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	2b03      	cmp	r3, #3
 800c27c:	d107      	bne.n	800c28e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c27e:	f107 030d 	add.w	r3, r7, #13
 800c282:	2201      	movs	r2, #1
 800c284:	4619      	mov	r1, r3
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f001 fcde 	bl	800dc48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c28c:	e01d      	b.n	800c2ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c28e:	6839      	ldr	r1, [r7, #0]
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f001 fc68 	bl	800db66 <USBD_CtlError>
            ret = USBD_FAIL;
 800c296:	2303      	movs	r3, #3
 800c298:	75fb      	strb	r3, [r7, #23]
          break;
 800c29a:	e016      	b.n	800c2ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	2b03      	cmp	r3, #3
 800c2a6:	d00f      	beq.n	800c2c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c2a8:	6839      	ldr	r1, [r7, #0]
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f001 fc5b 	bl	800db66 <USBD_CtlError>
            ret = USBD_FAIL;
 800c2b0:	2303      	movs	r3, #3
 800c2b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c2b4:	e008      	b.n	800c2c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c2b6:	6839      	ldr	r1, [r7, #0]
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f001 fc54 	bl	800db66 <USBD_CtlError>
          ret = USBD_FAIL;
 800c2be:	2303      	movs	r3, #3
 800c2c0:	75fb      	strb	r3, [r7, #23]
          break;
 800c2c2:	e002      	b.n	800c2ca <USBD_CDC_Setup+0x19e>
          break;
 800c2c4:	bf00      	nop
 800c2c6:	e008      	b.n	800c2da <USBD_CDC_Setup+0x1ae>
          break;
 800c2c8:	bf00      	nop
      }
      break;
 800c2ca:	e006      	b.n	800c2da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c2cc:	6839      	ldr	r1, [r7, #0]
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f001 fc49 	bl	800db66 <USBD_CtlError>
      ret = USBD_FAIL;
 800c2d4:	2303      	movs	r3, #3
 800c2d6:	75fb      	strb	r3, [r7, #23]
      break;
 800c2d8:	bf00      	nop
  }

  return (uint8_t)ret;
 800c2da:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3718      	adds	r7, #24
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	32b0      	adds	r2, #176	; 0xb0
 800c302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d101      	bne.n	800c30e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c30a:	2303      	movs	r3, #3
 800c30c:	e065      	b.n	800c3da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	32b0      	adds	r2, #176	; 0xb0
 800c318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c31c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c31e:	78fb      	ldrb	r3, [r7, #3]
 800c320:	f003 020f 	and.w	r2, r3, #15
 800c324:	6879      	ldr	r1, [r7, #4]
 800c326:	4613      	mov	r3, r2
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	4413      	add	r3, r2
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	440b      	add	r3, r1
 800c330:	3318      	adds	r3, #24
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d02f      	beq.n	800c398 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c338:	78fb      	ldrb	r3, [r7, #3]
 800c33a:	f003 020f 	and.w	r2, r3, #15
 800c33e:	6879      	ldr	r1, [r7, #4]
 800c340:	4613      	mov	r3, r2
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	4413      	add	r3, r2
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	440b      	add	r3, r1
 800c34a:	3318      	adds	r3, #24
 800c34c:	681a      	ldr	r2, [r3, #0]
 800c34e:	78fb      	ldrb	r3, [r7, #3]
 800c350:	f003 010f 	and.w	r1, r3, #15
 800c354:	68f8      	ldr	r0, [r7, #12]
 800c356:	460b      	mov	r3, r1
 800c358:	00db      	lsls	r3, r3, #3
 800c35a:	440b      	add	r3, r1
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	4403      	add	r3, r0
 800c360:	331c      	adds	r3, #28
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	fbb2 f1f3 	udiv	r1, r2, r3
 800c368:	fb01 f303 	mul.w	r3, r1, r3
 800c36c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d112      	bne.n	800c398 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c372:	78fb      	ldrb	r3, [r7, #3]
 800c374:	f003 020f 	and.w	r2, r3, #15
 800c378:	6879      	ldr	r1, [r7, #4]
 800c37a:	4613      	mov	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	4413      	add	r3, r2
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	440b      	add	r3, r1
 800c384:	3318      	adds	r3, #24
 800c386:	2200      	movs	r2, #0
 800c388:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c38a:	78f9      	ldrb	r1, [r7, #3]
 800c38c:	2300      	movs	r3, #0
 800c38e:	2200      	movs	r2, #0
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f005 fcfc 	bl	8011d8e <USBD_LL_Transmit>
 800c396:	e01f      	b.n	800c3d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	33b0      	adds	r3, #176	; 0xb0
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	4413      	add	r3, r2
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	691b      	ldr	r3, [r3, #16]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d010      	beq.n	800c3d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	33b0      	adds	r3, #176	; 0xb0
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	4413      	add	r3, r2
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	691b      	ldr	r3, [r3, #16]
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c3ce:	68ba      	ldr	r2, [r7, #8]
 800c3d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c3d4:	78fa      	ldrb	r2, [r7, #3]
 800c3d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b084      	sub	sp, #16
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	32b0      	adds	r2, #176	; 0xb0
 800c3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	32b0      	adds	r2, #176	; 0xb0
 800c408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d101      	bne.n	800c414 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c410:	2303      	movs	r3, #3
 800c412:	e01a      	b.n	800c44a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c414:	78fb      	ldrb	r3, [r7, #3]
 800c416:	4619      	mov	r1, r3
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f005 fcfa 	bl	8011e12 <USBD_LL_GetRxDataSize>
 800c41e:	4602      	mov	r2, r0
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	33b0      	adds	r3, #176	; 0xb0
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	4413      	add	r3, r2
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c43e:	68fa      	ldr	r2, [r7, #12]
 800c440:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c444:	4611      	mov	r1, r2
 800c446:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3710      	adds	r7, #16
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c452:	b580      	push	{r7, lr}
 800c454:	b084      	sub	sp, #16
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	32b0      	adds	r2, #176	; 0xb0
 800c464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c468:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d101      	bne.n	800c474 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c470:	2303      	movs	r3, #3
 800c472:	e025      	b.n	800c4c0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	33b0      	adds	r3, #176	; 0xb0
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	4413      	add	r3, r2
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d01a      	beq.n	800c4be <USBD_CDC_EP0_RxReady+0x6c>
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c48e:	2bff      	cmp	r3, #255	; 0xff
 800c490:	d015      	beq.n	800c4be <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	33b0      	adds	r3, #176	; 0xb0
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	4413      	add	r3, r2
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c4aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c4b2:	b292      	uxth	r2, r2
 800c4b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	22ff      	movs	r2, #255	; 0xff
 800c4ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c4be:	2300      	movs	r3, #0
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b086      	sub	sp, #24
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c4d0:	2182      	movs	r1, #130	; 0x82
 800c4d2:	4818      	ldr	r0, [pc, #96]	; (800c534 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c4d4:	f000 fd0f 	bl	800cef6 <USBD_GetEpDesc>
 800c4d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c4da:	2101      	movs	r1, #1
 800c4dc:	4815      	ldr	r0, [pc, #84]	; (800c534 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c4de:	f000 fd0a 	bl	800cef6 <USBD_GetEpDesc>
 800c4e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c4e4:	2181      	movs	r1, #129	; 0x81
 800c4e6:	4813      	ldr	r0, [pc, #76]	; (800c534 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c4e8:	f000 fd05 	bl	800cef6 <USBD_GetEpDesc>
 800c4ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d002      	beq.n	800c4fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	2210      	movs	r2, #16
 800c4f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d006      	beq.n	800c50e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	2200      	movs	r2, #0
 800c504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c508:	711a      	strb	r2, [r3, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d006      	beq.n	800c522 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2200      	movs	r2, #0
 800c518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c51c:	711a      	strb	r2, [r3, #4]
 800c51e:	2200      	movs	r2, #0
 800c520:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2243      	movs	r2, #67	; 0x43
 800c526:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c528:	4b02      	ldr	r3, [pc, #8]	; (800c534 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3718      	adds	r7, #24
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	20000334 	.word	0x20000334

0800c538 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b086      	sub	sp, #24
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c540:	2182      	movs	r1, #130	; 0x82
 800c542:	4818      	ldr	r0, [pc, #96]	; (800c5a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c544:	f000 fcd7 	bl	800cef6 <USBD_GetEpDesc>
 800c548:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c54a:	2101      	movs	r1, #1
 800c54c:	4815      	ldr	r0, [pc, #84]	; (800c5a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c54e:	f000 fcd2 	bl	800cef6 <USBD_GetEpDesc>
 800c552:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c554:	2181      	movs	r1, #129	; 0x81
 800c556:	4813      	ldr	r0, [pc, #76]	; (800c5a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c558:	f000 fccd 	bl	800cef6 <USBD_GetEpDesc>
 800c55c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d002      	beq.n	800c56a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	2210      	movs	r2, #16
 800c568:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d006      	beq.n	800c57e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	2200      	movs	r2, #0
 800c574:	711a      	strb	r2, [r3, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	f042 0202 	orr.w	r2, r2, #2
 800c57c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d006      	beq.n	800c592 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2200      	movs	r2, #0
 800c588:	711a      	strb	r2, [r3, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	f042 0202 	orr.w	r2, r2, #2
 800c590:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2243      	movs	r2, #67	; 0x43
 800c596:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c598:	4b02      	ldr	r3, [pc, #8]	; (800c5a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3718      	adds	r7, #24
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	20000334 	.word	0x20000334

0800c5a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b086      	sub	sp, #24
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c5b0:	2182      	movs	r1, #130	; 0x82
 800c5b2:	4818      	ldr	r0, [pc, #96]	; (800c614 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c5b4:	f000 fc9f 	bl	800cef6 <USBD_GetEpDesc>
 800c5b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c5ba:	2101      	movs	r1, #1
 800c5bc:	4815      	ldr	r0, [pc, #84]	; (800c614 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c5be:	f000 fc9a 	bl	800cef6 <USBD_GetEpDesc>
 800c5c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c5c4:	2181      	movs	r1, #129	; 0x81
 800c5c6:	4813      	ldr	r0, [pc, #76]	; (800c614 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c5c8:	f000 fc95 	bl	800cef6 <USBD_GetEpDesc>
 800c5cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d002      	beq.n	800c5da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	2210      	movs	r2, #16
 800c5d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d006      	beq.n	800c5ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c5e8:	711a      	strb	r2, [r3, #4]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d006      	beq.n	800c602 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c5fc:	711a      	strb	r2, [r3, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2243      	movs	r2, #67	; 0x43
 800c606:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c608:	4b02      	ldr	r3, [pc, #8]	; (800c614 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3718      	adds	r7, #24
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	20000334 	.word	0x20000334

0800c618 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	220a      	movs	r2, #10
 800c624:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c626:	4b03      	ldr	r3, [pc, #12]	; (800c634 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c628:	4618      	mov	r0, r3
 800c62a:	370c      	adds	r7, #12
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr
 800c634:	200002f0 	.word	0x200002f0

0800c638 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d101      	bne.n	800c64c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c648:	2303      	movs	r3, #3
 800c64a:	e009      	b.n	800c660 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	33b0      	adds	r3, #176	; 0xb0
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	4413      	add	r3, r2
 800c65a:	683a      	ldr	r2, [r7, #0]
 800c65c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c65e:	2300      	movs	r3, #0
}
 800c660:	4618      	mov	r0, r3
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b087      	sub	sp, #28
 800c670:	af00      	add	r7, sp, #0
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	60b9      	str	r1, [r7, #8]
 800c676:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	32b0      	adds	r2, #176	; 0xb0
 800c682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c686:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c68e:	2303      	movs	r3, #3
 800c690:	e008      	b.n	800c6a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	68ba      	ldr	r2, [r7, #8]
 800c696:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c6a2:	2300      	movs	r3, #0
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	371c      	adds	r7, #28
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	32b0      	adds	r2, #176	; 0xb0
 800c6c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d101      	bne.n	800c6d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c6d0:	2303      	movs	r3, #3
 800c6d2:	e004      	b.n	800c6de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	683a      	ldr	r2, [r7, #0]
 800c6d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3714      	adds	r7, #20
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr
	...

0800c6ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	32b0      	adds	r2, #176	; 0xb0
 800c6fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c702:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	32b0      	adds	r2, #176	; 0xb0
 800c70e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d101      	bne.n	800c71a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c716:	2303      	movs	r3, #3
 800c718:	e018      	b.n	800c74c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	7c1b      	ldrb	r3, [r3, #16]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d10a      	bne.n	800c738 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c722:	4b0c      	ldr	r3, [pc, #48]	; (800c754 <USBD_CDC_ReceivePacket+0x68>)
 800c724:	7819      	ldrb	r1, [r3, #0]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c72c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f005 fb4d 	bl	8011dd0 <USBD_LL_PrepareReceive>
 800c736:	e008      	b.n	800c74a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c738:	4b06      	ldr	r3, [pc, #24]	; (800c754 <USBD_CDC_ReceivePacket+0x68>)
 800c73a:	7819      	ldrb	r1, [r3, #0]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c742:	2340      	movs	r3, #64	; 0x40
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f005 fb43 	bl	8011dd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c74a:	2300      	movs	r3, #0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3710      	adds	r7, #16
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	20000378 	.word	0x20000378

0800c758 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b086      	sub	sp, #24
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	4613      	mov	r3, r2
 800c764:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d101      	bne.n	800c770 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c76c:	2303      	movs	r3, #3
 800c76e:	e01f      	b.n	800c7b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2200      	movs	r2, #0
 800c774:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2200      	movs	r2, #0
 800c77c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2200      	movs	r2, #0
 800c784:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d003      	beq.n	800c796 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	68ba      	ldr	r2, [r7, #8]
 800c792:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2201      	movs	r2, #1
 800c79a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	79fa      	ldrb	r2, [r7, #7]
 800c7a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f005 f9bd 	bl	8011b24 <USBD_LL_Init>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c7ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3718      	adds	r7, #24
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d101      	bne.n	800c7d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c7cc:	2303      	movs	r3, #3
 800c7ce:	e025      	b.n	800c81c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	683a      	ldr	r2, [r7, #0]
 800c7d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	32ae      	adds	r2, #174	; 0xae
 800c7e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00f      	beq.n	800c80c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	32ae      	adds	r2, #174	; 0xae
 800c7f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7fc:	f107 020e 	add.w	r2, r7, #14
 800c800:	4610      	mov	r0, r2
 800c802:	4798      	blx	r3
 800c804:	4602      	mov	r2, r0
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c812:	1c5a      	adds	r2, r3, #1
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c81a:	2300      	movs	r3, #0
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f005 f9c5 	bl	8011bbc <USBD_LL_Start>
 800c832:	4603      	mov	r3, r0
}
 800c834:	4618      	mov	r0, r3
 800c836:	3708      	adds	r7, #8
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c844:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c846:	4618      	mov	r0, r3
 800c848:	370c      	adds	r7, #12
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr

0800c852 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c852:	b580      	push	{r7, lr}
 800c854:	b084      	sub	sp, #16
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
 800c85a:	460b      	mov	r3, r1
 800c85c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c85e:	2300      	movs	r3, #0
 800c860:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d009      	beq.n	800c880 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	78fa      	ldrb	r2, [r7, #3]
 800c876:	4611      	mov	r1, r2
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	4798      	blx	r3
 800c87c:	4603      	mov	r3, r0
 800c87e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c880:	7bfb      	ldrb	r3, [r7, #15]
}
 800c882:	4618      	mov	r0, r3
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b084      	sub	sp, #16
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
 800c892:	460b      	mov	r3, r1
 800c894:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c896:	2300      	movs	r3, #0
 800c898:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	78fa      	ldrb	r2, [r7, #3]
 800c8a4:	4611      	mov	r1, r2
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	4798      	blx	r3
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d001      	beq.n	800c8b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c8b0:	2303      	movs	r3, #3
 800c8b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b084      	sub	sp, #16
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
 800c8c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c8ce:	6839      	ldr	r1, [r7, #0]
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f001 f90e 	bl	800daf2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2201      	movs	r2, #1
 800c8da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c8f2:	f003 031f 	and.w	r3, r3, #31
 800c8f6:	2b02      	cmp	r3, #2
 800c8f8:	d01a      	beq.n	800c930 <USBD_LL_SetupStage+0x72>
 800c8fa:	2b02      	cmp	r3, #2
 800c8fc:	d822      	bhi.n	800c944 <USBD_LL_SetupStage+0x86>
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d002      	beq.n	800c908 <USBD_LL_SetupStage+0x4a>
 800c902:	2b01      	cmp	r3, #1
 800c904:	d00a      	beq.n	800c91c <USBD_LL_SetupStage+0x5e>
 800c906:	e01d      	b.n	800c944 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c90e:	4619      	mov	r1, r3
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f000 fb65 	bl	800cfe0 <USBD_StdDevReq>
 800c916:	4603      	mov	r3, r0
 800c918:	73fb      	strb	r3, [r7, #15]
      break;
 800c91a:	e020      	b.n	800c95e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c922:	4619      	mov	r1, r3
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 fbcd 	bl	800d0c4 <USBD_StdItfReq>
 800c92a:	4603      	mov	r3, r0
 800c92c:	73fb      	strb	r3, [r7, #15]
      break;
 800c92e:	e016      	b.n	800c95e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c936:	4619      	mov	r1, r3
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 fc2f 	bl	800d19c <USBD_StdEPReq>
 800c93e:	4603      	mov	r3, r0
 800c940:	73fb      	strb	r3, [r7, #15]
      break;
 800c942:	e00c      	b.n	800c95e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c94a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	4619      	mov	r1, r3
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f005 f992 	bl	8011c7c <USBD_LL_StallEP>
 800c958:	4603      	mov	r3, r0
 800c95a:	73fb      	strb	r3, [r7, #15]
      break;
 800c95c:	bf00      	nop
  }

  return ret;
 800c95e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c960:	4618      	mov	r0, r3
 800c962:	3710      	adds	r7, #16
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b086      	sub	sp, #24
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	460b      	mov	r3, r1
 800c972:	607a      	str	r2, [r7, #4]
 800c974:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c976:	2300      	movs	r3, #0
 800c978:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c97a:	7afb      	ldrb	r3, [r7, #11]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d16e      	bne.n	800ca5e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c986:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c98e:	2b03      	cmp	r3, #3
 800c990:	f040 8098 	bne.w	800cac4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	689a      	ldr	r2, [r3, #8]
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d913      	bls.n	800c9c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	689a      	ldr	r2, [r3, #8]
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	1ad2      	subs	r2, r2, r3
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	68da      	ldr	r2, [r3, #12]
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	bf28      	it	cs
 800c9ba:	4613      	movcs	r3, r2
 800c9bc:	461a      	mov	r2, r3
 800c9be:	6879      	ldr	r1, [r7, #4]
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f001 f98a 	bl	800dcda <USBD_CtlContinueRx>
 800c9c6:	e07d      	b.n	800cac4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c9ce:	f003 031f 	and.w	r3, r3, #31
 800c9d2:	2b02      	cmp	r3, #2
 800c9d4:	d014      	beq.n	800ca00 <USBD_LL_DataOutStage+0x98>
 800c9d6:	2b02      	cmp	r3, #2
 800c9d8:	d81d      	bhi.n	800ca16 <USBD_LL_DataOutStage+0xae>
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d002      	beq.n	800c9e4 <USBD_LL_DataOutStage+0x7c>
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d003      	beq.n	800c9ea <USBD_LL_DataOutStage+0x82>
 800c9e2:	e018      	b.n	800ca16 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	75bb      	strb	r3, [r7, #22]
            break;
 800c9e8:	e018      	b.n	800ca1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	68f8      	ldr	r0, [r7, #12]
 800c9f6:	f000 fa64 	bl	800cec2 <USBD_CoreFindIF>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	75bb      	strb	r3, [r7, #22]
            break;
 800c9fe:	e00d      	b.n	800ca1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	4619      	mov	r1, r3
 800ca0a:	68f8      	ldr	r0, [r7, #12]
 800ca0c:	f000 fa66 	bl	800cedc <USBD_CoreFindEP>
 800ca10:	4603      	mov	r3, r0
 800ca12:	75bb      	strb	r3, [r7, #22]
            break;
 800ca14:	e002      	b.n	800ca1c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ca16:	2300      	movs	r3, #0
 800ca18:	75bb      	strb	r3, [r7, #22]
            break;
 800ca1a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ca1c:	7dbb      	ldrb	r3, [r7, #22]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d119      	bne.n	800ca56 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	2b03      	cmp	r3, #3
 800ca2c:	d113      	bne.n	800ca56 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ca2e:	7dba      	ldrb	r2, [r7, #22]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	32ae      	adds	r2, #174	; 0xae
 800ca34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca38:	691b      	ldr	r3, [r3, #16]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00b      	beq.n	800ca56 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ca3e:	7dba      	ldrb	r2, [r7, #22]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ca46:	7dba      	ldrb	r2, [r7, #22]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	32ae      	adds	r2, #174	; 0xae
 800ca4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca50:	691b      	ldr	r3, [r3, #16]
 800ca52:	68f8      	ldr	r0, [r7, #12]
 800ca54:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ca56:	68f8      	ldr	r0, [r7, #12]
 800ca58:	f001 f950 	bl	800dcfc <USBD_CtlSendStatus>
 800ca5c:	e032      	b.n	800cac4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ca5e:	7afb      	ldrb	r3, [r7, #11]
 800ca60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	4619      	mov	r1, r3
 800ca68:	68f8      	ldr	r0, [r7, #12]
 800ca6a:	f000 fa37 	bl	800cedc <USBD_CoreFindEP>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca72:	7dbb      	ldrb	r3, [r7, #22]
 800ca74:	2bff      	cmp	r3, #255	; 0xff
 800ca76:	d025      	beq.n	800cac4 <USBD_LL_DataOutStage+0x15c>
 800ca78:	7dbb      	ldrb	r3, [r7, #22]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d122      	bne.n	800cac4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	2b03      	cmp	r3, #3
 800ca88:	d117      	bne.n	800caba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ca8a:	7dba      	ldrb	r2, [r7, #22]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	32ae      	adds	r2, #174	; 0xae
 800ca90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca94:	699b      	ldr	r3, [r3, #24]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d00f      	beq.n	800caba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ca9a:	7dba      	ldrb	r2, [r7, #22]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800caa2:	7dba      	ldrb	r2, [r7, #22]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	32ae      	adds	r2, #174	; 0xae
 800caa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caac:	699b      	ldr	r3, [r3, #24]
 800caae:	7afa      	ldrb	r2, [r7, #11]
 800cab0:	4611      	mov	r1, r2
 800cab2:	68f8      	ldr	r0, [r7, #12]
 800cab4:	4798      	blx	r3
 800cab6:	4603      	mov	r3, r0
 800cab8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800caba:	7dfb      	ldrb	r3, [r7, #23]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d001      	beq.n	800cac4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cac0:	7dfb      	ldrb	r3, [r7, #23]
 800cac2:	e000      	b.n	800cac6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3718      	adds	r7, #24
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b086      	sub	sp, #24
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	60f8      	str	r0, [r7, #12]
 800cad6:	460b      	mov	r3, r1
 800cad8:	607a      	str	r2, [r7, #4]
 800cada:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cadc:	7afb      	ldrb	r3, [r7, #11]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d16f      	bne.n	800cbc2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	3314      	adds	r3, #20
 800cae6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800caee:	2b02      	cmp	r3, #2
 800caf0:	d15a      	bne.n	800cba8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	689a      	ldr	r2, [r3, #8]
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d914      	bls.n	800cb28 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	689a      	ldr	r2, [r3, #8]
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	68db      	ldr	r3, [r3, #12]
 800cb06:	1ad2      	subs	r2, r2, r3
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	461a      	mov	r2, r3
 800cb12:	6879      	ldr	r1, [r7, #4]
 800cb14:	68f8      	ldr	r0, [r7, #12]
 800cb16:	f001 f8b2 	bl	800dc7e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	2100      	movs	r1, #0
 800cb20:	68f8      	ldr	r0, [r7, #12]
 800cb22:	f005 f955 	bl	8011dd0 <USBD_LL_PrepareReceive>
 800cb26:	e03f      	b.n	800cba8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	68da      	ldr	r2, [r3, #12]
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d11c      	bne.n	800cb6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	685a      	ldr	r2, [r3, #4]
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d316      	bcc.n	800cb6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	685a      	ldr	r2, [r3, #4]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d20f      	bcs.n	800cb6e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cb4e:	2200      	movs	r2, #0
 800cb50:	2100      	movs	r1, #0
 800cb52:	68f8      	ldr	r0, [r7, #12]
 800cb54:	f001 f893 	bl	800dc7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb60:	2300      	movs	r3, #0
 800cb62:	2200      	movs	r2, #0
 800cb64:	2100      	movs	r1, #0
 800cb66:	68f8      	ldr	r0, [r7, #12]
 800cb68:	f005 f932 	bl	8011dd0 <USBD_LL_PrepareReceive>
 800cb6c:	e01c      	b.n	800cba8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	2b03      	cmp	r3, #3
 800cb78:	d10f      	bne.n	800cb9a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb80:	68db      	ldr	r3, [r3, #12]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d009      	beq.n	800cb9a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	68f8      	ldr	r0, [r7, #12]
 800cb98:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb9a:	2180      	movs	r1, #128	; 0x80
 800cb9c:	68f8      	ldr	r0, [r7, #12]
 800cb9e:	f005 f86d 	bl	8011c7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f001 f8bd 	bl	800dd22 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d03a      	beq.n	800cc28 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cbb2:	68f8      	ldr	r0, [r7, #12]
 800cbb4:	f7ff fe42 	bl	800c83c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cbc0:	e032      	b.n	800cc28 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cbc2:	7afb      	ldrb	r3, [r7, #11]
 800cbc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	4619      	mov	r1, r3
 800cbcc:	68f8      	ldr	r0, [r7, #12]
 800cbce:	f000 f985 	bl	800cedc <USBD_CoreFindEP>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cbd6:	7dfb      	ldrb	r3, [r7, #23]
 800cbd8:	2bff      	cmp	r3, #255	; 0xff
 800cbda:	d025      	beq.n	800cc28 <USBD_LL_DataInStage+0x15a>
 800cbdc:	7dfb      	ldrb	r3, [r7, #23]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d122      	bne.n	800cc28 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	2b03      	cmp	r3, #3
 800cbec:	d11c      	bne.n	800cc28 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cbee:	7dfa      	ldrb	r2, [r7, #23]
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	32ae      	adds	r2, #174	; 0xae
 800cbf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbf8:	695b      	ldr	r3, [r3, #20]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d014      	beq.n	800cc28 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cbfe:	7dfa      	ldrb	r2, [r7, #23]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cc06:	7dfa      	ldrb	r2, [r7, #23]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	32ae      	adds	r2, #174	; 0xae
 800cc0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc10:	695b      	ldr	r3, [r3, #20]
 800cc12:	7afa      	ldrb	r2, [r7, #11]
 800cc14:	4611      	mov	r1, r2
 800cc16:	68f8      	ldr	r0, [r7, #12]
 800cc18:	4798      	blx	r3
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cc1e:	7dbb      	ldrb	r3, [r7, #22]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d001      	beq.n	800cc28 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cc24:	7dbb      	ldrb	r3, [r7, #22]
 800cc26:	e000      	b.n	800cc2a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cc28:	2300      	movs	r3, #0
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3718      	adds	r7, #24
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}

0800cc32 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b084      	sub	sp, #16
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2201      	movs	r2, #1
 800cc42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2200      	movs	r2, #0
 800cc52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d014      	beq.n	800cc98 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00e      	beq.n	800cc98 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	6852      	ldr	r2, [r2, #4]
 800cc86:	b2d2      	uxtb	r2, r2
 800cc88:	4611      	mov	r1, r2
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	4798      	blx	r3
 800cc8e:	4603      	mov	r3, r0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d001      	beq.n	800cc98 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cc94:	2303      	movs	r3, #3
 800cc96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cc98:	2340      	movs	r3, #64	; 0x40
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f004 ffa7 	bl	8011bf2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2201      	movs	r2, #1
 800cca8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2240      	movs	r2, #64	; 0x40
 800ccb0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ccb4:	2340      	movs	r3, #64	; 0x40
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	2180      	movs	r1, #128	; 0x80
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f004 ff99 	bl	8011bf2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2240      	movs	r2, #64	; 0x40
 800ccca:	621a      	str	r2, [r3, #32]

  return ret;
 800cccc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ccd6:	b480      	push	{r7}
 800ccd8:	b083      	sub	sp, #12
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
 800ccde:	460b      	mov	r3, r1
 800cce0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	78fa      	ldrb	r2, [r7, #3]
 800cce6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cce8:	2300      	movs	r3, #0
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	370c      	adds	r7, #12
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr

0800ccf6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ccf6:	b480      	push	{r7}
 800ccf8:	b083      	sub	sp, #12
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	2b04      	cmp	r3, #4
 800cd08:	d006      	beq.n	800cd18 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd10:	b2da      	uxtb	r2, r3
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2204      	movs	r2, #4
 800cd1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cd20:	2300      	movs	r3, #0
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	370c      	adds	r7, #12
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr

0800cd2e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cd2e:	b480      	push	{r7}
 800cd30:	b083      	sub	sp, #12
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	2b04      	cmp	r3, #4
 800cd40:	d106      	bne.n	800cd50 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cd48:	b2da      	uxtb	r2, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	370c      	adds	r7, #12
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr

0800cd5e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cd5e:	b580      	push	{r7, lr}
 800cd60:	b082      	sub	sp, #8
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd6c:	b2db      	uxtb	r3, r3
 800cd6e:	2b03      	cmp	r3, #3
 800cd70:	d110      	bne.n	800cd94 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d00b      	beq.n	800cd94 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd82:	69db      	ldr	r3, [r3, #28]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d005      	beq.n	800cd94 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd8e:	69db      	ldr	r3, [r3, #28]
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cd94:	2300      	movs	r3, #0
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3708      	adds	r7, #8
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cd9e:	b580      	push	{r7, lr}
 800cda0:	b082      	sub	sp, #8
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
 800cda6:	460b      	mov	r3, r1
 800cda8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	32ae      	adds	r2, #174	; 0xae
 800cdb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d101      	bne.n	800cdc0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cdbc:	2303      	movs	r3, #3
 800cdbe:	e01c      	b.n	800cdfa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	2b03      	cmp	r3, #3
 800cdca:	d115      	bne.n	800cdf8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	32ae      	adds	r2, #174	; 0xae
 800cdd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdda:	6a1b      	ldr	r3, [r3, #32]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d00b      	beq.n	800cdf8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	32ae      	adds	r2, #174	; 0xae
 800cdea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdee:	6a1b      	ldr	r3, [r3, #32]
 800cdf0:	78fa      	ldrb	r2, [r7, #3]
 800cdf2:	4611      	mov	r1, r2
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3708      	adds	r7, #8
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b082      	sub	sp, #8
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	32ae      	adds	r2, #174	; 0xae
 800ce18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d101      	bne.n	800ce24 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ce20:	2303      	movs	r3, #3
 800ce22:	e01c      	b.n	800ce5e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	2b03      	cmp	r3, #3
 800ce2e:	d115      	bne.n	800ce5c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	32ae      	adds	r2, #174	; 0xae
 800ce3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d00b      	beq.n	800ce5c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	32ae      	adds	r2, #174	; 0xae
 800ce4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce54:	78fa      	ldrb	r2, [r7, #3]
 800ce56:	4611      	mov	r1, r2
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3708      	adds	r7, #8
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}

0800ce66 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ce66:	b480      	push	{r7}
 800ce68:	b083      	sub	sp, #12
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ce6e:	2300      	movs	r3, #0
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	370c      	adds	r7, #12
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ce84:	2300      	movs	r3, #0
 800ce86:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d00e      	beq.n	800ceb8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	6852      	ldr	r2, [r2, #4]
 800cea6:	b2d2      	uxtb	r2, r2
 800cea8:	4611      	mov	r1, r2
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	4798      	blx	r3
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d001      	beq.n	800ceb8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ceb4:	2303      	movs	r3, #3
 800ceb6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ceb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cec2:	b480      	push	{r7}
 800cec4:	b083      	sub	sp, #12
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
 800ceca:	460b      	mov	r3, r1
 800cecc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cece:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	370c      	adds	r7, #12
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	460b      	mov	r3, r1
 800cee6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cee8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	370c      	adds	r7, #12
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr

0800cef6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b086      	sub	sp, #24
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	460b      	mov	r3, r1
 800cf00:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	885b      	ldrh	r3, [r3, #2]
 800cf12:	b29a      	uxth	r2, r3
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	b29b      	uxth	r3, r3
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d920      	bls.n	800cf60 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cf26:	e013      	b.n	800cf50 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cf28:	f107 030a 	add.w	r3, r7, #10
 800cf2c:	4619      	mov	r1, r3
 800cf2e:	6978      	ldr	r0, [r7, #20]
 800cf30:	f000 f81b 	bl	800cf6a <USBD_GetNextDesc>
 800cf34:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	785b      	ldrb	r3, [r3, #1]
 800cf3a:	2b05      	cmp	r3, #5
 800cf3c:	d108      	bne.n	800cf50 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	789b      	ldrb	r3, [r3, #2]
 800cf46:	78fa      	ldrb	r2, [r7, #3]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d008      	beq.n	800cf5e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	885b      	ldrh	r3, [r3, #2]
 800cf54:	b29a      	uxth	r2, r3
 800cf56:	897b      	ldrh	r3, [r7, #10]
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d8e5      	bhi.n	800cf28 <USBD_GetEpDesc+0x32>
 800cf5c:	e000      	b.n	800cf60 <USBD_GetEpDesc+0x6a>
          break;
 800cf5e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cf60:	693b      	ldr	r3, [r7, #16]
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3718      	adds	r7, #24
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cf6a:	b480      	push	{r7}
 800cf6c:	b085      	sub	sp, #20
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
 800cf72:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	881a      	ldrh	r2, [r3, #0]
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	4413      	add	r3, r2
 800cf84:	b29a      	uxth	r2, r3
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	461a      	mov	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	4413      	add	r3, r2
 800cf94:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cf96:	68fb      	ldr	r3, [r7, #12]
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3714      	adds	r7, #20
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr

0800cfa4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b087      	sub	sp, #28
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cfc2:	8a3b      	ldrh	r3, [r7, #16]
 800cfc4:	021b      	lsls	r3, r3, #8
 800cfc6:	b21a      	sxth	r2, r3
 800cfc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	b21b      	sxth	r3, r3
 800cfd0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cfd2:	89fb      	ldrh	r3, [r7, #14]
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	371c      	adds	r7, #28
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfea:	2300      	movs	r3, #0
 800cfec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cff6:	2b40      	cmp	r3, #64	; 0x40
 800cff8:	d005      	beq.n	800d006 <USBD_StdDevReq+0x26>
 800cffa:	2b40      	cmp	r3, #64	; 0x40
 800cffc:	d857      	bhi.n	800d0ae <USBD_StdDevReq+0xce>
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d00f      	beq.n	800d022 <USBD_StdDevReq+0x42>
 800d002:	2b20      	cmp	r3, #32
 800d004:	d153      	bne.n	800d0ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	32ae      	adds	r2, #174	; 0xae
 800d010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d014:	689b      	ldr	r3, [r3, #8]
 800d016:	6839      	ldr	r1, [r7, #0]
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	4798      	blx	r3
 800d01c:	4603      	mov	r3, r0
 800d01e:	73fb      	strb	r3, [r7, #15]
      break;
 800d020:	e04a      	b.n	800d0b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	785b      	ldrb	r3, [r3, #1]
 800d026:	2b09      	cmp	r3, #9
 800d028:	d83b      	bhi.n	800d0a2 <USBD_StdDevReq+0xc2>
 800d02a:	a201      	add	r2, pc, #4	; (adr r2, 800d030 <USBD_StdDevReq+0x50>)
 800d02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d030:	0800d085 	.word	0x0800d085
 800d034:	0800d099 	.word	0x0800d099
 800d038:	0800d0a3 	.word	0x0800d0a3
 800d03c:	0800d08f 	.word	0x0800d08f
 800d040:	0800d0a3 	.word	0x0800d0a3
 800d044:	0800d063 	.word	0x0800d063
 800d048:	0800d059 	.word	0x0800d059
 800d04c:	0800d0a3 	.word	0x0800d0a3
 800d050:	0800d07b 	.word	0x0800d07b
 800d054:	0800d06d 	.word	0x0800d06d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d058:	6839      	ldr	r1, [r7, #0]
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 fa3c 	bl	800d4d8 <USBD_GetDescriptor>
          break;
 800d060:	e024      	b.n	800d0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d062:	6839      	ldr	r1, [r7, #0]
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 fba1 	bl	800d7ac <USBD_SetAddress>
          break;
 800d06a:	e01f      	b.n	800d0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d06c:	6839      	ldr	r1, [r7, #0]
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f000 fbe0 	bl	800d834 <USBD_SetConfig>
 800d074:	4603      	mov	r3, r0
 800d076:	73fb      	strb	r3, [r7, #15]
          break;
 800d078:	e018      	b.n	800d0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d07a:	6839      	ldr	r1, [r7, #0]
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f000 fc83 	bl	800d988 <USBD_GetConfig>
          break;
 800d082:	e013      	b.n	800d0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d084:	6839      	ldr	r1, [r7, #0]
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f000 fcb4 	bl	800d9f4 <USBD_GetStatus>
          break;
 800d08c:	e00e      	b.n	800d0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d08e:	6839      	ldr	r1, [r7, #0]
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f000 fce3 	bl	800da5c <USBD_SetFeature>
          break;
 800d096:	e009      	b.n	800d0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d098:	6839      	ldr	r1, [r7, #0]
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 fd07 	bl	800daae <USBD_ClrFeature>
          break;
 800d0a0:	e004      	b.n	800d0ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d0a2:	6839      	ldr	r1, [r7, #0]
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f000 fd5e 	bl	800db66 <USBD_CtlError>
          break;
 800d0aa:	bf00      	nop
      }
      break;
 800d0ac:	e004      	b.n	800d0b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d0ae:	6839      	ldr	r1, [r7, #0]
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 fd58 	bl	800db66 <USBD_CtlError>
      break;
 800d0b6:	bf00      	nop
  }

  return ret;
 800d0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3710      	adds	r7, #16
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop

0800d0c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b084      	sub	sp, #16
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d0da:	2b40      	cmp	r3, #64	; 0x40
 800d0dc:	d005      	beq.n	800d0ea <USBD_StdItfReq+0x26>
 800d0de:	2b40      	cmp	r3, #64	; 0x40
 800d0e0:	d852      	bhi.n	800d188 <USBD_StdItfReq+0xc4>
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d001      	beq.n	800d0ea <USBD_StdItfReq+0x26>
 800d0e6:	2b20      	cmp	r3, #32
 800d0e8:	d14e      	bne.n	800d188 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	3b01      	subs	r3, #1
 800d0f4:	2b02      	cmp	r3, #2
 800d0f6:	d840      	bhi.n	800d17a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	889b      	ldrh	r3, [r3, #4]
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	2b01      	cmp	r3, #1
 800d100:	d836      	bhi.n	800d170 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	889b      	ldrh	r3, [r3, #4]
 800d106:	b2db      	uxtb	r3, r3
 800d108:	4619      	mov	r1, r3
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f7ff fed9 	bl	800cec2 <USBD_CoreFindIF>
 800d110:	4603      	mov	r3, r0
 800d112:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d114:	7bbb      	ldrb	r3, [r7, #14]
 800d116:	2bff      	cmp	r3, #255	; 0xff
 800d118:	d01d      	beq.n	800d156 <USBD_StdItfReq+0x92>
 800d11a:	7bbb      	ldrb	r3, [r7, #14]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d11a      	bne.n	800d156 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d120:	7bba      	ldrb	r2, [r7, #14]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	32ae      	adds	r2, #174	; 0xae
 800d126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00f      	beq.n	800d150 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d130:	7bba      	ldrb	r2, [r7, #14]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d138:	7bba      	ldrb	r2, [r7, #14]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	32ae      	adds	r2, #174	; 0xae
 800d13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	6839      	ldr	r1, [r7, #0]
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	4798      	blx	r3
 800d14a:	4603      	mov	r3, r0
 800d14c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d14e:	e004      	b.n	800d15a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d150:	2303      	movs	r3, #3
 800d152:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d154:	e001      	b.n	800d15a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d156:	2303      	movs	r3, #3
 800d158:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	88db      	ldrh	r3, [r3, #6]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d110      	bne.n	800d184 <USBD_StdItfReq+0xc0>
 800d162:	7bfb      	ldrb	r3, [r7, #15]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d10d      	bne.n	800d184 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 fdc7 	bl	800dcfc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d16e:	e009      	b.n	800d184 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d170:	6839      	ldr	r1, [r7, #0]
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 fcf7 	bl	800db66 <USBD_CtlError>
          break;
 800d178:	e004      	b.n	800d184 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d17a:	6839      	ldr	r1, [r7, #0]
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 fcf2 	bl	800db66 <USBD_CtlError>
          break;
 800d182:	e000      	b.n	800d186 <USBD_StdItfReq+0xc2>
          break;
 800d184:	bf00      	nop
      }
      break;
 800d186:	e004      	b.n	800d192 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d188:	6839      	ldr	r1, [r7, #0]
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f000 fceb 	bl	800db66 <USBD_CtlError>
      break;
 800d190:	bf00      	nop
  }

  return ret;
 800d192:	7bfb      	ldrb	r3, [r7, #15]
}
 800d194:	4618      	mov	r0, r3
 800d196:	3710      	adds	r7, #16
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	889b      	ldrh	r3, [r3, #4]
 800d1ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1b8:	2b40      	cmp	r3, #64	; 0x40
 800d1ba:	d007      	beq.n	800d1cc <USBD_StdEPReq+0x30>
 800d1bc:	2b40      	cmp	r3, #64	; 0x40
 800d1be:	f200 817f 	bhi.w	800d4c0 <USBD_StdEPReq+0x324>
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d02a      	beq.n	800d21c <USBD_StdEPReq+0x80>
 800d1c6:	2b20      	cmp	r3, #32
 800d1c8:	f040 817a 	bne.w	800d4c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d1cc:	7bbb      	ldrb	r3, [r7, #14]
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f7ff fe83 	bl	800cedc <USBD_CoreFindEP>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1da:	7b7b      	ldrb	r3, [r7, #13]
 800d1dc:	2bff      	cmp	r3, #255	; 0xff
 800d1de:	f000 8174 	beq.w	800d4ca <USBD_StdEPReq+0x32e>
 800d1e2:	7b7b      	ldrb	r3, [r7, #13]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	f040 8170 	bne.w	800d4ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d1ea:	7b7a      	ldrb	r2, [r7, #13]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d1f2:	7b7a      	ldrb	r2, [r7, #13]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	32ae      	adds	r2, #174	; 0xae
 800d1f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f000 8163 	beq.w	800d4ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d204:	7b7a      	ldrb	r2, [r7, #13]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	32ae      	adds	r2, #174	; 0xae
 800d20a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	6839      	ldr	r1, [r7, #0]
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	4798      	blx	r3
 800d216:	4603      	mov	r3, r0
 800d218:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d21a:	e156      	b.n	800d4ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	785b      	ldrb	r3, [r3, #1]
 800d220:	2b03      	cmp	r3, #3
 800d222:	d008      	beq.n	800d236 <USBD_StdEPReq+0x9a>
 800d224:	2b03      	cmp	r3, #3
 800d226:	f300 8145 	bgt.w	800d4b4 <USBD_StdEPReq+0x318>
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	f000 809b 	beq.w	800d366 <USBD_StdEPReq+0x1ca>
 800d230:	2b01      	cmp	r3, #1
 800d232:	d03c      	beq.n	800d2ae <USBD_StdEPReq+0x112>
 800d234:	e13e      	b.n	800d4b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	2b02      	cmp	r3, #2
 800d240:	d002      	beq.n	800d248 <USBD_StdEPReq+0xac>
 800d242:	2b03      	cmp	r3, #3
 800d244:	d016      	beq.n	800d274 <USBD_StdEPReq+0xd8>
 800d246:	e02c      	b.n	800d2a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d248:	7bbb      	ldrb	r3, [r7, #14]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d00d      	beq.n	800d26a <USBD_StdEPReq+0xce>
 800d24e:	7bbb      	ldrb	r3, [r7, #14]
 800d250:	2b80      	cmp	r3, #128	; 0x80
 800d252:	d00a      	beq.n	800d26a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d254:	7bbb      	ldrb	r3, [r7, #14]
 800d256:	4619      	mov	r1, r3
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f004 fd0f 	bl	8011c7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d25e:	2180      	movs	r1, #128	; 0x80
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f004 fd0b 	bl	8011c7c <USBD_LL_StallEP>
 800d266:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d268:	e020      	b.n	800d2ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d26a:	6839      	ldr	r1, [r7, #0]
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 fc7a 	bl	800db66 <USBD_CtlError>
              break;
 800d272:	e01b      	b.n	800d2ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	885b      	ldrh	r3, [r3, #2]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d10e      	bne.n	800d29a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d27c:	7bbb      	ldrb	r3, [r7, #14]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d00b      	beq.n	800d29a <USBD_StdEPReq+0xfe>
 800d282:	7bbb      	ldrb	r3, [r7, #14]
 800d284:	2b80      	cmp	r3, #128	; 0x80
 800d286:	d008      	beq.n	800d29a <USBD_StdEPReq+0xfe>
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	88db      	ldrh	r3, [r3, #6]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d104      	bne.n	800d29a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d290:	7bbb      	ldrb	r3, [r7, #14]
 800d292:	4619      	mov	r1, r3
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f004 fcf1 	bl	8011c7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 fd2e 	bl	800dcfc <USBD_CtlSendStatus>

              break;
 800d2a0:	e004      	b.n	800d2ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d2a2:	6839      	ldr	r1, [r7, #0]
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f000 fc5e 	bl	800db66 <USBD_CtlError>
              break;
 800d2aa:	bf00      	nop
          }
          break;
 800d2ac:	e107      	b.n	800d4be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2b4:	b2db      	uxtb	r3, r3
 800d2b6:	2b02      	cmp	r3, #2
 800d2b8:	d002      	beq.n	800d2c0 <USBD_StdEPReq+0x124>
 800d2ba:	2b03      	cmp	r3, #3
 800d2bc:	d016      	beq.n	800d2ec <USBD_StdEPReq+0x150>
 800d2be:	e04b      	b.n	800d358 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d2c0:	7bbb      	ldrb	r3, [r7, #14]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d00d      	beq.n	800d2e2 <USBD_StdEPReq+0x146>
 800d2c6:	7bbb      	ldrb	r3, [r7, #14]
 800d2c8:	2b80      	cmp	r3, #128	; 0x80
 800d2ca:	d00a      	beq.n	800d2e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d2cc:	7bbb      	ldrb	r3, [r7, #14]
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f004 fcd3 	bl	8011c7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d2d6:	2180      	movs	r1, #128	; 0x80
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f004 fccf 	bl	8011c7c <USBD_LL_StallEP>
 800d2de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d2e0:	e040      	b.n	800d364 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d2e2:	6839      	ldr	r1, [r7, #0]
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 fc3e 	bl	800db66 <USBD_CtlError>
              break;
 800d2ea:	e03b      	b.n	800d364 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	885b      	ldrh	r3, [r3, #2]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d136      	bne.n	800d362 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d2f4:	7bbb      	ldrb	r3, [r7, #14]
 800d2f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d004      	beq.n	800d308 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d2fe:	7bbb      	ldrb	r3, [r7, #14]
 800d300:	4619      	mov	r1, r3
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f004 fcd9 	bl	8011cba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 fcf7 	bl	800dcfc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d30e:	7bbb      	ldrb	r3, [r7, #14]
 800d310:	4619      	mov	r1, r3
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f7ff fde2 	bl	800cedc <USBD_CoreFindEP>
 800d318:	4603      	mov	r3, r0
 800d31a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d31c:	7b7b      	ldrb	r3, [r7, #13]
 800d31e:	2bff      	cmp	r3, #255	; 0xff
 800d320:	d01f      	beq.n	800d362 <USBD_StdEPReq+0x1c6>
 800d322:	7b7b      	ldrb	r3, [r7, #13]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d11c      	bne.n	800d362 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d328:	7b7a      	ldrb	r2, [r7, #13]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d330:	7b7a      	ldrb	r2, [r7, #13]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	32ae      	adds	r2, #174	; 0xae
 800d336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d010      	beq.n	800d362 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d340:	7b7a      	ldrb	r2, [r7, #13]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	32ae      	adds	r2, #174	; 0xae
 800d346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	6839      	ldr	r1, [r7, #0]
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	4798      	blx	r3
 800d352:	4603      	mov	r3, r0
 800d354:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d356:	e004      	b.n	800d362 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d358:	6839      	ldr	r1, [r7, #0]
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 fc03 	bl	800db66 <USBD_CtlError>
              break;
 800d360:	e000      	b.n	800d364 <USBD_StdEPReq+0x1c8>
              break;
 800d362:	bf00      	nop
          }
          break;
 800d364:	e0ab      	b.n	800d4be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d36c:	b2db      	uxtb	r3, r3
 800d36e:	2b02      	cmp	r3, #2
 800d370:	d002      	beq.n	800d378 <USBD_StdEPReq+0x1dc>
 800d372:	2b03      	cmp	r3, #3
 800d374:	d032      	beq.n	800d3dc <USBD_StdEPReq+0x240>
 800d376:	e097      	b.n	800d4a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d378:	7bbb      	ldrb	r3, [r7, #14]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d007      	beq.n	800d38e <USBD_StdEPReq+0x1f2>
 800d37e:	7bbb      	ldrb	r3, [r7, #14]
 800d380:	2b80      	cmp	r3, #128	; 0x80
 800d382:	d004      	beq.n	800d38e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d384:	6839      	ldr	r1, [r7, #0]
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 fbed 	bl	800db66 <USBD_CtlError>
                break;
 800d38c:	e091      	b.n	800d4b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d38e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d392:	2b00      	cmp	r3, #0
 800d394:	da0b      	bge.n	800d3ae <USBD_StdEPReq+0x212>
 800d396:	7bbb      	ldrb	r3, [r7, #14]
 800d398:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d39c:	4613      	mov	r3, r2
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	4413      	add	r3, r2
 800d3a2:	009b      	lsls	r3, r3, #2
 800d3a4:	3310      	adds	r3, #16
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	4413      	add	r3, r2
 800d3aa:	3304      	adds	r3, #4
 800d3ac:	e00b      	b.n	800d3c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d3ae:	7bbb      	ldrb	r3, [r7, #14]
 800d3b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3b4:	4613      	mov	r3, r2
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	4413      	add	r3, r2
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	4413      	add	r3, r2
 800d3c4:	3304      	adds	r3, #4
 800d3c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	2202      	movs	r2, #2
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f000 fc37 	bl	800dc48 <USBD_CtlSendData>
              break;
 800d3da:	e06a      	b.n	800d4b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d3dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	da11      	bge.n	800d408 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d3e4:	7bbb      	ldrb	r3, [r7, #14]
 800d3e6:	f003 020f 	and.w	r2, r3, #15
 800d3ea:	6879      	ldr	r1, [r7, #4]
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	4413      	add	r3, r2
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	440b      	add	r3, r1
 800d3f6:	3324      	adds	r3, #36	; 0x24
 800d3f8:	881b      	ldrh	r3, [r3, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d117      	bne.n	800d42e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d3fe:	6839      	ldr	r1, [r7, #0]
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 fbb0 	bl	800db66 <USBD_CtlError>
                  break;
 800d406:	e054      	b.n	800d4b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d408:	7bbb      	ldrb	r3, [r7, #14]
 800d40a:	f003 020f 	and.w	r2, r3, #15
 800d40e:	6879      	ldr	r1, [r7, #4]
 800d410:	4613      	mov	r3, r2
 800d412:	009b      	lsls	r3, r3, #2
 800d414:	4413      	add	r3, r2
 800d416:	009b      	lsls	r3, r3, #2
 800d418:	440b      	add	r3, r1
 800d41a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d41e:	881b      	ldrh	r3, [r3, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d104      	bne.n	800d42e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d424:	6839      	ldr	r1, [r7, #0]
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 fb9d 	bl	800db66 <USBD_CtlError>
                  break;
 800d42c:	e041      	b.n	800d4b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d42e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d432:	2b00      	cmp	r3, #0
 800d434:	da0b      	bge.n	800d44e <USBD_StdEPReq+0x2b2>
 800d436:	7bbb      	ldrb	r3, [r7, #14]
 800d438:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d43c:	4613      	mov	r3, r2
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	4413      	add	r3, r2
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	3310      	adds	r3, #16
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	4413      	add	r3, r2
 800d44a:	3304      	adds	r3, #4
 800d44c:	e00b      	b.n	800d466 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d44e:	7bbb      	ldrb	r3, [r7, #14]
 800d450:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d454:	4613      	mov	r3, r2
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	4413      	add	r3, r2
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	4413      	add	r3, r2
 800d464:	3304      	adds	r3, #4
 800d466:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d468:	7bbb      	ldrb	r3, [r7, #14]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d002      	beq.n	800d474 <USBD_StdEPReq+0x2d8>
 800d46e:	7bbb      	ldrb	r3, [r7, #14]
 800d470:	2b80      	cmp	r3, #128	; 0x80
 800d472:	d103      	bne.n	800d47c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	2200      	movs	r2, #0
 800d478:	601a      	str	r2, [r3, #0]
 800d47a:	e00e      	b.n	800d49a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d47c:	7bbb      	ldrb	r3, [r7, #14]
 800d47e:	4619      	mov	r1, r3
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f004 fc39 	bl	8011cf8 <USBD_LL_IsStallEP>
 800d486:	4603      	mov	r3, r0
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d003      	beq.n	800d494 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	2201      	movs	r2, #1
 800d490:	601a      	str	r2, [r3, #0]
 800d492:	e002      	b.n	800d49a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	2200      	movs	r2, #0
 800d498:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	2202      	movs	r2, #2
 800d49e:	4619      	mov	r1, r3
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f000 fbd1 	bl	800dc48 <USBD_CtlSendData>
              break;
 800d4a6:	e004      	b.n	800d4b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d4a8:	6839      	ldr	r1, [r7, #0]
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f000 fb5b 	bl	800db66 <USBD_CtlError>
              break;
 800d4b0:	bf00      	nop
          }
          break;
 800d4b2:	e004      	b.n	800d4be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d4b4:	6839      	ldr	r1, [r7, #0]
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 fb55 	bl	800db66 <USBD_CtlError>
          break;
 800d4bc:	bf00      	nop
      }
      break;
 800d4be:	e005      	b.n	800d4cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d4c0:	6839      	ldr	r1, [r7, #0]
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 fb4f 	bl	800db66 <USBD_CtlError>
      break;
 800d4c8:	e000      	b.n	800d4cc <USBD_StdEPReq+0x330>
      break;
 800d4ca:	bf00      	nop
  }

  return ret;
 800d4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3710      	adds	r7, #16
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
	...

0800d4d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	885b      	ldrh	r3, [r3, #2]
 800d4f2:	0a1b      	lsrs	r3, r3, #8
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	3b01      	subs	r3, #1
 800d4f8:	2b06      	cmp	r3, #6
 800d4fa:	f200 8128 	bhi.w	800d74e <USBD_GetDescriptor+0x276>
 800d4fe:	a201      	add	r2, pc, #4	; (adr r2, 800d504 <USBD_GetDescriptor+0x2c>)
 800d500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d504:	0800d521 	.word	0x0800d521
 800d508:	0800d539 	.word	0x0800d539
 800d50c:	0800d579 	.word	0x0800d579
 800d510:	0800d74f 	.word	0x0800d74f
 800d514:	0800d74f 	.word	0x0800d74f
 800d518:	0800d6ef 	.word	0x0800d6ef
 800d51c:	0800d71b 	.word	0x0800d71b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	7c12      	ldrb	r2, [r2, #16]
 800d52c:	f107 0108 	add.w	r1, r7, #8
 800d530:	4610      	mov	r0, r2
 800d532:	4798      	blx	r3
 800d534:	60f8      	str	r0, [r7, #12]
      break;
 800d536:	e112      	b.n	800d75e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	7c1b      	ldrb	r3, [r3, #16]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d10d      	bne.n	800d55c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d548:	f107 0208 	add.w	r2, r7, #8
 800d54c:	4610      	mov	r0, r2
 800d54e:	4798      	blx	r3
 800d550:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	3301      	adds	r3, #1
 800d556:	2202      	movs	r2, #2
 800d558:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d55a:	e100      	b.n	800d75e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d564:	f107 0208 	add.w	r2, r7, #8
 800d568:	4610      	mov	r0, r2
 800d56a:	4798      	blx	r3
 800d56c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	3301      	adds	r3, #1
 800d572:	2202      	movs	r2, #2
 800d574:	701a      	strb	r2, [r3, #0]
      break;
 800d576:	e0f2      	b.n	800d75e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	885b      	ldrh	r3, [r3, #2]
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	2b05      	cmp	r3, #5
 800d580:	f200 80ac 	bhi.w	800d6dc <USBD_GetDescriptor+0x204>
 800d584:	a201      	add	r2, pc, #4	; (adr r2, 800d58c <USBD_GetDescriptor+0xb4>)
 800d586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d58a:	bf00      	nop
 800d58c:	0800d5a5 	.word	0x0800d5a5
 800d590:	0800d5d9 	.word	0x0800d5d9
 800d594:	0800d60d 	.word	0x0800d60d
 800d598:	0800d641 	.word	0x0800d641
 800d59c:	0800d675 	.word	0x0800d675
 800d5a0:	0800d6a9 	.word	0x0800d6a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d00b      	beq.n	800d5c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5b6:	685b      	ldr	r3, [r3, #4]
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	7c12      	ldrb	r2, [r2, #16]
 800d5bc:	f107 0108 	add.w	r1, r7, #8
 800d5c0:	4610      	mov	r0, r2
 800d5c2:	4798      	blx	r3
 800d5c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5c6:	e091      	b.n	800d6ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d5c8:	6839      	ldr	r1, [r7, #0]
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 facb 	bl	800db66 <USBD_CtlError>
            err++;
 800d5d0:	7afb      	ldrb	r3, [r7, #11]
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	72fb      	strb	r3, [r7, #11]
          break;
 800d5d6:	e089      	b.n	800d6ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5de:	689b      	ldr	r3, [r3, #8]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d00b      	beq.n	800d5fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5ea:	689b      	ldr	r3, [r3, #8]
 800d5ec:	687a      	ldr	r2, [r7, #4]
 800d5ee:	7c12      	ldrb	r2, [r2, #16]
 800d5f0:	f107 0108 	add.w	r1, r7, #8
 800d5f4:	4610      	mov	r0, r2
 800d5f6:	4798      	blx	r3
 800d5f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5fa:	e077      	b.n	800d6ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d5fc:	6839      	ldr	r1, [r7, #0]
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f000 fab1 	bl	800db66 <USBD_CtlError>
            err++;
 800d604:	7afb      	ldrb	r3, [r7, #11]
 800d606:	3301      	adds	r3, #1
 800d608:	72fb      	strb	r3, [r7, #11]
          break;
 800d60a:	e06f      	b.n	800d6ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d00b      	beq.n	800d630 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	7c12      	ldrb	r2, [r2, #16]
 800d624:	f107 0108 	add.w	r1, r7, #8
 800d628:	4610      	mov	r0, r2
 800d62a:	4798      	blx	r3
 800d62c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d62e:	e05d      	b.n	800d6ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d630:	6839      	ldr	r1, [r7, #0]
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f000 fa97 	bl	800db66 <USBD_CtlError>
            err++;
 800d638:	7afb      	ldrb	r3, [r7, #11]
 800d63a:	3301      	adds	r3, #1
 800d63c:	72fb      	strb	r3, [r7, #11]
          break;
 800d63e:	e055      	b.n	800d6ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d646:	691b      	ldr	r3, [r3, #16]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d00b      	beq.n	800d664 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d652:	691b      	ldr	r3, [r3, #16]
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	7c12      	ldrb	r2, [r2, #16]
 800d658:	f107 0108 	add.w	r1, r7, #8
 800d65c:	4610      	mov	r0, r2
 800d65e:	4798      	blx	r3
 800d660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d662:	e043      	b.n	800d6ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d664:	6839      	ldr	r1, [r7, #0]
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 fa7d 	bl	800db66 <USBD_CtlError>
            err++;
 800d66c:	7afb      	ldrb	r3, [r7, #11]
 800d66e:	3301      	adds	r3, #1
 800d670:	72fb      	strb	r3, [r7, #11]
          break;
 800d672:	e03b      	b.n	800d6ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d67a:	695b      	ldr	r3, [r3, #20]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d00b      	beq.n	800d698 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d686:	695b      	ldr	r3, [r3, #20]
 800d688:	687a      	ldr	r2, [r7, #4]
 800d68a:	7c12      	ldrb	r2, [r2, #16]
 800d68c:	f107 0108 	add.w	r1, r7, #8
 800d690:	4610      	mov	r0, r2
 800d692:	4798      	blx	r3
 800d694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d696:	e029      	b.n	800d6ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d698:	6839      	ldr	r1, [r7, #0]
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 fa63 	bl	800db66 <USBD_CtlError>
            err++;
 800d6a0:	7afb      	ldrb	r3, [r7, #11]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	72fb      	strb	r3, [r7, #11]
          break;
 800d6a6:	e021      	b.n	800d6ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6ae:	699b      	ldr	r3, [r3, #24]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d00b      	beq.n	800d6cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6ba:	699b      	ldr	r3, [r3, #24]
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	7c12      	ldrb	r2, [r2, #16]
 800d6c0:	f107 0108 	add.w	r1, r7, #8
 800d6c4:	4610      	mov	r0, r2
 800d6c6:	4798      	blx	r3
 800d6c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6ca:	e00f      	b.n	800d6ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d6cc:	6839      	ldr	r1, [r7, #0]
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 fa49 	bl	800db66 <USBD_CtlError>
            err++;
 800d6d4:	7afb      	ldrb	r3, [r7, #11]
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	72fb      	strb	r3, [r7, #11]
          break;
 800d6da:	e007      	b.n	800d6ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d6dc:	6839      	ldr	r1, [r7, #0]
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 fa41 	bl	800db66 <USBD_CtlError>
          err++;
 800d6e4:	7afb      	ldrb	r3, [r7, #11]
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d6ea:	bf00      	nop
      }
      break;
 800d6ec:	e037      	b.n	800d75e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	7c1b      	ldrb	r3, [r3, #16]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d109      	bne.n	800d70a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6fe:	f107 0208 	add.w	r2, r7, #8
 800d702:	4610      	mov	r0, r2
 800d704:	4798      	blx	r3
 800d706:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d708:	e029      	b.n	800d75e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d70a:	6839      	ldr	r1, [r7, #0]
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 fa2a 	bl	800db66 <USBD_CtlError>
        err++;
 800d712:	7afb      	ldrb	r3, [r7, #11]
 800d714:	3301      	adds	r3, #1
 800d716:	72fb      	strb	r3, [r7, #11]
      break;
 800d718:	e021      	b.n	800d75e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	7c1b      	ldrb	r3, [r3, #16]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d10d      	bne.n	800d73e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d72a:	f107 0208 	add.w	r2, r7, #8
 800d72e:	4610      	mov	r0, r2
 800d730:	4798      	blx	r3
 800d732:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	3301      	adds	r3, #1
 800d738:	2207      	movs	r2, #7
 800d73a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d73c:	e00f      	b.n	800d75e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d73e:	6839      	ldr	r1, [r7, #0]
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 fa10 	bl	800db66 <USBD_CtlError>
        err++;
 800d746:	7afb      	ldrb	r3, [r7, #11]
 800d748:	3301      	adds	r3, #1
 800d74a:	72fb      	strb	r3, [r7, #11]
      break;
 800d74c:	e007      	b.n	800d75e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d74e:	6839      	ldr	r1, [r7, #0]
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 fa08 	bl	800db66 <USBD_CtlError>
      err++;
 800d756:	7afb      	ldrb	r3, [r7, #11]
 800d758:	3301      	adds	r3, #1
 800d75a:	72fb      	strb	r3, [r7, #11]
      break;
 800d75c:	bf00      	nop
  }

  if (err != 0U)
 800d75e:	7afb      	ldrb	r3, [r7, #11]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d11e      	bne.n	800d7a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	88db      	ldrh	r3, [r3, #6]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d016      	beq.n	800d79a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d76c:	893b      	ldrh	r3, [r7, #8]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d00e      	beq.n	800d790 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	88da      	ldrh	r2, [r3, #6]
 800d776:	893b      	ldrh	r3, [r7, #8]
 800d778:	4293      	cmp	r3, r2
 800d77a:	bf28      	it	cs
 800d77c:	4613      	movcs	r3, r2
 800d77e:	b29b      	uxth	r3, r3
 800d780:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d782:	893b      	ldrh	r3, [r7, #8]
 800d784:	461a      	mov	r2, r3
 800d786:	68f9      	ldr	r1, [r7, #12]
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 fa5d 	bl	800dc48 <USBD_CtlSendData>
 800d78e:	e009      	b.n	800d7a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d790:	6839      	ldr	r1, [r7, #0]
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f000 f9e7 	bl	800db66 <USBD_CtlError>
 800d798:	e004      	b.n	800d7a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f000 faae 	bl	800dcfc <USBD_CtlSendStatus>
 800d7a0:	e000      	b.n	800d7a4 <USBD_GetDescriptor+0x2cc>
    return;
 800d7a2:	bf00      	nop
  }
}
 800d7a4:	3710      	adds	r7, #16
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop

0800d7ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	889b      	ldrh	r3, [r3, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d131      	bne.n	800d822 <USBD_SetAddress+0x76>
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	88db      	ldrh	r3, [r3, #6]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d12d      	bne.n	800d822 <USBD_SetAddress+0x76>
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	885b      	ldrh	r3, [r3, #2]
 800d7ca:	2b7f      	cmp	r3, #127	; 0x7f
 800d7cc:	d829      	bhi.n	800d822 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	885b      	ldrh	r3, [r3, #2]
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	2b03      	cmp	r3, #3
 800d7e4:	d104      	bne.n	800d7f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d7e6:	6839      	ldr	r1, [r7, #0]
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f000 f9bc 	bl	800db66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7ee:	e01d      	b.n	800d82c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	7bfa      	ldrb	r2, [r7, #15]
 800d7f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d7f8:	7bfb      	ldrb	r3, [r7, #15]
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f004 faa7 	bl	8011d50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 fa7a 	bl	800dcfc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d808:	7bfb      	ldrb	r3, [r7, #15]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d004      	beq.n	800d818 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2202      	movs	r2, #2
 800d812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d816:	e009      	b.n	800d82c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2201      	movs	r2, #1
 800d81c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d820:	e004      	b.n	800d82c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d822:	6839      	ldr	r1, [r7, #0]
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f000 f99e 	bl	800db66 <USBD_CtlError>
  }
}
 800d82a:	bf00      	nop
 800d82c:	bf00      	nop
 800d82e:	3710      	adds	r7, #16
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d83e:	2300      	movs	r3, #0
 800d840:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	885b      	ldrh	r3, [r3, #2]
 800d846:	b2da      	uxtb	r2, r3
 800d848:	4b4e      	ldr	r3, [pc, #312]	; (800d984 <USBD_SetConfig+0x150>)
 800d84a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d84c:	4b4d      	ldr	r3, [pc, #308]	; (800d984 <USBD_SetConfig+0x150>)
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	2b01      	cmp	r3, #1
 800d852:	d905      	bls.n	800d860 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d854:	6839      	ldr	r1, [r7, #0]
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f000 f985 	bl	800db66 <USBD_CtlError>
    return USBD_FAIL;
 800d85c:	2303      	movs	r3, #3
 800d85e:	e08c      	b.n	800d97a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d866:	b2db      	uxtb	r3, r3
 800d868:	2b02      	cmp	r3, #2
 800d86a:	d002      	beq.n	800d872 <USBD_SetConfig+0x3e>
 800d86c:	2b03      	cmp	r3, #3
 800d86e:	d029      	beq.n	800d8c4 <USBD_SetConfig+0x90>
 800d870:	e075      	b.n	800d95e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d872:	4b44      	ldr	r3, [pc, #272]	; (800d984 <USBD_SetConfig+0x150>)
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d020      	beq.n	800d8bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d87a:	4b42      	ldr	r3, [pc, #264]	; (800d984 <USBD_SetConfig+0x150>)
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	461a      	mov	r2, r3
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d884:	4b3f      	ldr	r3, [pc, #252]	; (800d984 <USBD_SetConfig+0x150>)
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	4619      	mov	r1, r3
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f7fe ffe1 	bl	800c852 <USBD_SetClassConfig>
 800d890:	4603      	mov	r3, r0
 800d892:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d894:	7bfb      	ldrb	r3, [r7, #15]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d008      	beq.n	800d8ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d89a:	6839      	ldr	r1, [r7, #0]
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f000 f962 	bl	800db66 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2202      	movs	r2, #2
 800d8a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d8aa:	e065      	b.n	800d978 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f000 fa25 	bl	800dcfc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2203      	movs	r2, #3
 800d8b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d8ba:	e05d      	b.n	800d978 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 fa1d 	bl	800dcfc <USBD_CtlSendStatus>
      break;
 800d8c2:	e059      	b.n	800d978 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d8c4:	4b2f      	ldr	r3, [pc, #188]	; (800d984 <USBD_SetConfig+0x150>)
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d112      	bne.n	800d8f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2202      	movs	r2, #2
 800d8d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d8d4:	4b2b      	ldr	r3, [pc, #172]	; (800d984 <USBD_SetConfig+0x150>)
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	461a      	mov	r2, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d8de:	4b29      	ldr	r3, [pc, #164]	; (800d984 <USBD_SetConfig+0x150>)
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f7fe ffd0 	bl	800c88a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 fa06 	bl	800dcfc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d8f0:	e042      	b.n	800d978 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d8f2:	4b24      	ldr	r3, [pc, #144]	; (800d984 <USBD_SetConfig+0x150>)
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d02a      	beq.n	800d956 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	b2db      	uxtb	r3, r3
 800d906:	4619      	mov	r1, r3
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f7fe ffbe 	bl	800c88a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d90e:	4b1d      	ldr	r3, [pc, #116]	; (800d984 <USBD_SetConfig+0x150>)
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	461a      	mov	r2, r3
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d918:	4b1a      	ldr	r3, [pc, #104]	; (800d984 <USBD_SetConfig+0x150>)
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	4619      	mov	r1, r3
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f7fe ff97 	bl	800c852 <USBD_SetClassConfig>
 800d924:	4603      	mov	r3, r0
 800d926:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d928:	7bfb      	ldrb	r3, [r7, #15]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00f      	beq.n	800d94e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d92e:	6839      	ldr	r1, [r7, #0]
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f000 f918 	bl	800db66 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	4619      	mov	r1, r3
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f7fe ffa3 	bl	800c88a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2202      	movs	r2, #2
 800d948:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d94c:	e014      	b.n	800d978 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 f9d4 	bl	800dcfc <USBD_CtlSendStatus>
      break;
 800d954:	e010      	b.n	800d978 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 f9d0 	bl	800dcfc <USBD_CtlSendStatus>
      break;
 800d95c:	e00c      	b.n	800d978 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d95e:	6839      	ldr	r1, [r7, #0]
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f000 f900 	bl	800db66 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d966:	4b07      	ldr	r3, [pc, #28]	; (800d984 <USBD_SetConfig+0x150>)
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	4619      	mov	r1, r3
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f7fe ff8c 	bl	800c88a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d972:	2303      	movs	r3, #3
 800d974:	73fb      	strb	r3, [r7, #15]
      break;
 800d976:	bf00      	nop
  }

  return ret;
 800d978:	7bfb      	ldrb	r3, [r7, #15]
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3710      	adds	r7, #16
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
 800d982:	bf00      	nop
 800d984:	20004120 	.word	0x20004120

0800d988 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	88db      	ldrh	r3, [r3, #6]
 800d996:	2b01      	cmp	r3, #1
 800d998:	d004      	beq.n	800d9a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d99a:	6839      	ldr	r1, [r7, #0]
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f000 f8e2 	bl	800db66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d9a2:	e023      	b.n	800d9ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	2b02      	cmp	r3, #2
 800d9ae:	dc02      	bgt.n	800d9b6 <USBD_GetConfig+0x2e>
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	dc03      	bgt.n	800d9bc <USBD_GetConfig+0x34>
 800d9b4:	e015      	b.n	800d9e2 <USBD_GetConfig+0x5a>
 800d9b6:	2b03      	cmp	r3, #3
 800d9b8:	d00b      	beq.n	800d9d2 <USBD_GetConfig+0x4a>
 800d9ba:	e012      	b.n	800d9e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	3308      	adds	r3, #8
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f000 f93c 	bl	800dc48 <USBD_CtlSendData>
        break;
 800d9d0:	e00c      	b.n	800d9ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	3304      	adds	r3, #4
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	4619      	mov	r1, r3
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f000 f934 	bl	800dc48 <USBD_CtlSendData>
        break;
 800d9e0:	e004      	b.n	800d9ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d9e2:	6839      	ldr	r1, [r7, #0]
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f000 f8be 	bl	800db66 <USBD_CtlError>
        break;
 800d9ea:	bf00      	nop
}
 800d9ec:	bf00      	nop
 800d9ee:	3708      	adds	r7, #8
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da04:	b2db      	uxtb	r3, r3
 800da06:	3b01      	subs	r3, #1
 800da08:	2b02      	cmp	r3, #2
 800da0a:	d81e      	bhi.n	800da4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	88db      	ldrh	r3, [r3, #6]
 800da10:	2b02      	cmp	r3, #2
 800da12:	d004      	beq.n	800da1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800da14:	6839      	ldr	r1, [r7, #0]
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 f8a5 	bl	800db66 <USBD_CtlError>
        break;
 800da1c:	e01a      	b.n	800da54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2201      	movs	r2, #1
 800da22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d005      	beq.n	800da3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	68db      	ldr	r3, [r3, #12]
 800da32:	f043 0202 	orr.w	r2, r3, #2
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	330c      	adds	r3, #12
 800da3e:	2202      	movs	r2, #2
 800da40:	4619      	mov	r1, r3
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 f900 	bl	800dc48 <USBD_CtlSendData>
      break;
 800da48:	e004      	b.n	800da54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800da4a:	6839      	ldr	r1, [r7, #0]
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 f88a 	bl	800db66 <USBD_CtlError>
      break;
 800da52:	bf00      	nop
  }
}
 800da54:	bf00      	nop
 800da56:	3708      	adds	r7, #8
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	885b      	ldrh	r3, [r3, #2]
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d107      	bne.n	800da7e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2201      	movs	r2, #1
 800da72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 f940 	bl	800dcfc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800da7c:	e013      	b.n	800daa6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	885b      	ldrh	r3, [r3, #2]
 800da82:	2b02      	cmp	r3, #2
 800da84:	d10b      	bne.n	800da9e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	889b      	ldrh	r3, [r3, #4]
 800da8a:	0a1b      	lsrs	r3, r3, #8
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	b2da      	uxtb	r2, r3
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 f930 	bl	800dcfc <USBD_CtlSendStatus>
}
 800da9c:	e003      	b.n	800daa6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800da9e:	6839      	ldr	r1, [r7, #0]
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 f860 	bl	800db66 <USBD_CtlError>
}
 800daa6:	bf00      	nop
 800daa8:	3708      	adds	r7, #8
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}

0800daae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800daae:	b580      	push	{r7, lr}
 800dab0:	b082      	sub	sp, #8
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
 800dab6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dabe:	b2db      	uxtb	r3, r3
 800dac0:	3b01      	subs	r3, #1
 800dac2:	2b02      	cmp	r3, #2
 800dac4:	d80b      	bhi.n	800dade <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	885b      	ldrh	r3, [r3, #2]
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d10c      	bne.n	800dae8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2200      	movs	r2, #0
 800dad2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f000 f910 	bl	800dcfc <USBD_CtlSendStatus>
      }
      break;
 800dadc:	e004      	b.n	800dae8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dade:	6839      	ldr	r1, [r7, #0]
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f000 f840 	bl	800db66 <USBD_CtlError>
      break;
 800dae6:	e000      	b.n	800daea <USBD_ClrFeature+0x3c>
      break;
 800dae8:	bf00      	nop
  }
}
 800daea:	bf00      	nop
 800daec:	3708      	adds	r7, #8
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b084      	sub	sp, #16
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
 800dafa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	781a      	ldrb	r2, [r3, #0]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	3301      	adds	r3, #1
 800db0c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	781a      	ldrb	r2, [r3, #0]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	3301      	adds	r3, #1
 800db1a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800db1c:	68f8      	ldr	r0, [r7, #12]
 800db1e:	f7ff fa41 	bl	800cfa4 <SWAPBYTE>
 800db22:	4603      	mov	r3, r0
 800db24:	461a      	mov	r2, r3
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	3301      	adds	r3, #1
 800db2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	3301      	adds	r3, #1
 800db34:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800db36:	68f8      	ldr	r0, [r7, #12]
 800db38:	f7ff fa34 	bl	800cfa4 <SWAPBYTE>
 800db3c:	4603      	mov	r3, r0
 800db3e:	461a      	mov	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	3301      	adds	r3, #1
 800db48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	3301      	adds	r3, #1
 800db4e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	f7ff fa27 	bl	800cfa4 <SWAPBYTE>
 800db56:	4603      	mov	r3, r0
 800db58:	461a      	mov	r2, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	80da      	strh	r2, [r3, #6]
}
 800db5e:	bf00      	nop
 800db60:	3710      	adds	r7, #16
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}

0800db66 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db66:	b580      	push	{r7, lr}
 800db68:	b082      	sub	sp, #8
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
 800db6e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800db70:	2180      	movs	r1, #128	; 0x80
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f004 f882 	bl	8011c7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800db78:	2100      	movs	r1, #0
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f004 f87e 	bl	8011c7c <USBD_LL_StallEP>
}
 800db80:	bf00      	nop
 800db82:	3708      	adds	r7, #8
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}

0800db88 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b086      	sub	sp, #24
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800db94:	2300      	movs	r3, #0
 800db96:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d036      	beq.n	800dc0c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dba2:	6938      	ldr	r0, [r7, #16]
 800dba4:	f000 f836 	bl	800dc14 <USBD_GetLen>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	3301      	adds	r3, #1
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	005b      	lsls	r3, r3, #1
 800dbb0:	b29a      	uxth	r2, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dbb6:	7dfb      	ldrb	r3, [r7, #23]
 800dbb8:	68ba      	ldr	r2, [r7, #8]
 800dbba:	4413      	add	r3, r2
 800dbbc:	687a      	ldr	r2, [r7, #4]
 800dbbe:	7812      	ldrb	r2, [r2, #0]
 800dbc0:	701a      	strb	r2, [r3, #0]
  idx++;
 800dbc2:	7dfb      	ldrb	r3, [r7, #23]
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dbc8:	7dfb      	ldrb	r3, [r7, #23]
 800dbca:	68ba      	ldr	r2, [r7, #8]
 800dbcc:	4413      	add	r3, r2
 800dbce:	2203      	movs	r2, #3
 800dbd0:	701a      	strb	r2, [r3, #0]
  idx++;
 800dbd2:	7dfb      	ldrb	r3, [r7, #23]
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dbd8:	e013      	b.n	800dc02 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dbda:	7dfb      	ldrb	r3, [r7, #23]
 800dbdc:	68ba      	ldr	r2, [r7, #8]
 800dbde:	4413      	add	r3, r2
 800dbe0:	693a      	ldr	r2, [r7, #16]
 800dbe2:	7812      	ldrb	r2, [r2, #0]
 800dbe4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	3301      	adds	r3, #1
 800dbea:	613b      	str	r3, [r7, #16]
    idx++;
 800dbec:	7dfb      	ldrb	r3, [r7, #23]
 800dbee:	3301      	adds	r3, #1
 800dbf0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dbf2:	7dfb      	ldrb	r3, [r7, #23]
 800dbf4:	68ba      	ldr	r2, [r7, #8]
 800dbf6:	4413      	add	r3, r2
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	701a      	strb	r2, [r3, #0]
    idx++;
 800dbfc:	7dfb      	ldrb	r3, [r7, #23]
 800dbfe:	3301      	adds	r3, #1
 800dc00:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d1e7      	bne.n	800dbda <USBD_GetString+0x52>
 800dc0a:	e000      	b.n	800dc0e <USBD_GetString+0x86>
    return;
 800dc0c:	bf00      	nop
  }
}
 800dc0e:	3718      	adds	r7, #24
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}

0800dc14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b085      	sub	sp, #20
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dc24:	e005      	b.n	800dc32 <USBD_GetLen+0x1e>
  {
    len++;
 800dc26:	7bfb      	ldrb	r3, [r7, #15]
 800dc28:	3301      	adds	r3, #1
 800dc2a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d1f5      	bne.n	800dc26 <USBD_GetLen+0x12>
  }

  return len;
 800dc3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3714      	adds	r7, #20
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr

0800dc48 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b084      	sub	sp, #16
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	60b9      	str	r1, [r7, #8]
 800dc52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2202      	movs	r2, #2
 800dc58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	687a      	ldr	r2, [r7, #4]
 800dc66:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	68ba      	ldr	r2, [r7, #8]
 800dc6c:	2100      	movs	r1, #0
 800dc6e:	68f8      	ldr	r0, [r7, #12]
 800dc70:	f004 f88d 	bl	8011d8e <USBD_LL_Transmit>

  return USBD_OK;
 800dc74:	2300      	movs	r3, #0
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3710      	adds	r7, #16
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dc7e:	b580      	push	{r7, lr}
 800dc80:	b084      	sub	sp, #16
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	60f8      	str	r0, [r7, #12]
 800dc86:	60b9      	str	r1, [r7, #8]
 800dc88:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	68ba      	ldr	r2, [r7, #8]
 800dc8e:	2100      	movs	r1, #0
 800dc90:	68f8      	ldr	r0, [r7, #12]
 800dc92:	f004 f87c 	bl	8011d8e <USBD_LL_Transmit>

  return USBD_OK;
 800dc96:	2300      	movs	r3, #0
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3710      	adds	r7, #16
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	60f8      	str	r0, [r7, #12]
 800dca8:	60b9      	str	r1, [r7, #8]
 800dcaa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2203      	movs	r2, #3
 800dcb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	687a      	ldr	r2, [r7, #4]
 800dcc0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	68ba      	ldr	r2, [r7, #8]
 800dcc8:	2100      	movs	r1, #0
 800dcca:	68f8      	ldr	r0, [r7, #12]
 800dccc:	f004 f880 	bl	8011dd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcd0:	2300      	movs	r3, #0
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dcda:	b580      	push	{r7, lr}
 800dcdc:	b084      	sub	sp, #16
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	60f8      	str	r0, [r7, #12]
 800dce2:	60b9      	str	r1, [r7, #8]
 800dce4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	68ba      	ldr	r2, [r7, #8]
 800dcea:	2100      	movs	r1, #0
 800dcec:	68f8      	ldr	r0, [r7, #12]
 800dcee:	f004 f86f 	bl	8011dd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcf2:	2300      	movs	r3, #0
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3710      	adds	r7, #16
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b082      	sub	sp, #8
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2204      	movs	r2, #4
 800dd08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	2200      	movs	r2, #0
 800dd10:	2100      	movs	r1, #0
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f004 f83b 	bl	8011d8e <USBD_LL_Transmit>

  return USBD_OK;
 800dd18:	2300      	movs	r3, #0
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3708      	adds	r7, #8
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}

0800dd22 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b082      	sub	sp, #8
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2205      	movs	r2, #5
 800dd2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd32:	2300      	movs	r3, #0
 800dd34:	2200      	movs	r2, #0
 800dd36:	2100      	movs	r1, #0
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f004 f849 	bl	8011dd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd3e:	2300      	movs	r3, #0
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3708      	adds	r7, #8
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b085      	sub	sp, #20
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	4603      	mov	r3, r0
 800dd50:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800dd52:	2300      	movs	r3, #0
 800dd54:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800dd56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd5a:	2b84      	cmp	r3, #132	; 0x84
 800dd5c:	d005      	beq.n	800dd6a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800dd5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	4413      	add	r3, r2
 800dd66:	3303      	adds	r3, #3
 800dd68:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3714      	adds	r7, #20
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr

0800dd78 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800dd7c:	f001 fb0c 	bl	800f398 <vTaskStartScheduler>
  
  return osOK;
 800dd80:	2300      	movs	r3, #0
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800dd86:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd88:	b089      	sub	sp, #36	; 0x24
 800dd8a:	af04      	add	r7, sp, #16
 800dd8c:	6078      	str	r0, [r7, #4]
 800dd8e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	695b      	ldr	r3, [r3, #20]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d020      	beq.n	800ddda <osThreadCreate+0x54>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	699b      	ldr	r3, [r3, #24]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d01c      	beq.n	800ddda <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	685c      	ldr	r4, [r3, #4]
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	691e      	ldr	r6, [r3, #16]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7ff ffc8 	bl	800dd48 <makeFreeRtosPriority>
 800ddb8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	695b      	ldr	r3, [r3, #20]
 800ddbe:	687a      	ldr	r2, [r7, #4]
 800ddc0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ddc2:	9202      	str	r2, [sp, #8]
 800ddc4:	9301      	str	r3, [sp, #4]
 800ddc6:	9100      	str	r1, [sp, #0]
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	4632      	mov	r2, r6
 800ddcc:	4629      	mov	r1, r5
 800ddce:	4620      	mov	r0, r4
 800ddd0:	f001 f890 	bl	800eef4 <xTaskCreateStatic>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	60fb      	str	r3, [r7, #12]
 800ddd8:	e01c      	b.n	800de14 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	685c      	ldr	r4, [r3, #4]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dde6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7ff ffaa 	bl	800dd48 <makeFreeRtosPriority>
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	f107 030c 	add.w	r3, r7, #12
 800ddfa:	9301      	str	r3, [sp, #4]
 800ddfc:	9200      	str	r2, [sp, #0]
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	4632      	mov	r2, r6
 800de02:	4629      	mov	r1, r5
 800de04:	4620      	mov	r0, r4
 800de06:	f001 f8cb 	bl	800efa0 <xTaskCreate>
 800de0a:	4603      	mov	r3, r0
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d001      	beq.n	800de14 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800de10:	2300      	movs	r3, #0
 800de12:	e000      	b.n	800de16 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800de14:	68fb      	ldr	r3, [r7, #12]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3714      	adds	r7, #20
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800de20 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4a09      	ldr	r2, [pc, #36]	; (800de50 <osDelay+0x30>)
 800de2c:	fba2 2303 	umull	r2, r3, r2, r3
 800de30:	099b      	lsrs	r3, r3, #6
 800de32:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d001      	beq.n	800de3e <osDelay+0x1e>
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	e000      	b.n	800de40 <osDelay+0x20>
 800de3e:	2301      	movs	r3, #1
 800de40:	4618      	mov	r0, r3
 800de42:	f001 fa0f 	bl	800f264 <vTaskDelay>
  
  return osOK;
 800de46:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3710      	adds	r7, #16
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	10624dd3 	.word	0x10624dd3

0800de54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f103 0208 	add.w	r2, r3, #8
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f103 0208 	add.w	r2, r3, #8
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f103 0208 	add.w	r2, r3, #8
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2200      	movs	r2, #0
 800de86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800de88:	bf00      	nop
 800de8a:	370c      	adds	r7, #12
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr

0800de94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800de94:	b480      	push	{r7}
 800de96:	b083      	sub	sp, #12
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2200      	movs	r2, #0
 800dea0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dea2:	bf00      	nop
 800dea4:	370c      	adds	r7, #12
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr

0800deae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800deae:	b480      	push	{r7}
 800deb0:	b085      	sub	sp, #20
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
 800deb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	685b      	ldr	r3, [r3, #4]
 800debc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	68fa      	ldr	r2, [r7, #12]
 800dec2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	689a      	ldr	r2, [r3, #8]
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	689b      	ldr	r3, [r3, #8]
 800ded0:	683a      	ldr	r2, [r7, #0]
 800ded2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	683a      	ldr	r2, [r7, #0]
 800ded8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	687a      	ldr	r2, [r7, #4]
 800dede:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	1c5a      	adds	r2, r3, #1
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	601a      	str	r2, [r3, #0]
}
 800deea:	bf00      	nop
 800deec:	3714      	adds	r7, #20
 800deee:	46bd      	mov	sp, r7
 800def0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def4:	4770      	bx	lr

0800def6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800def6:	b480      	push	{r7}
 800def8:	b085      	sub	sp, #20
 800defa:	af00      	add	r7, sp, #0
 800defc:	6078      	str	r0, [r7, #4]
 800defe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df0c:	d103      	bne.n	800df16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	691b      	ldr	r3, [r3, #16]
 800df12:	60fb      	str	r3, [r7, #12]
 800df14:	e00c      	b.n	800df30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	3308      	adds	r3, #8
 800df1a:	60fb      	str	r3, [r7, #12]
 800df1c:	e002      	b.n	800df24 <vListInsert+0x2e>
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	60fb      	str	r3, [r7, #12]
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	68ba      	ldr	r2, [r7, #8]
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d2f6      	bcs.n	800df1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	685a      	ldr	r2, [r3, #4]
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	685b      	ldr	r3, [r3, #4]
 800df3c:	683a      	ldr	r2, [r7, #0]
 800df3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	683a      	ldr	r2, [r7, #0]
 800df4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	1c5a      	adds	r2, r3, #1
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	601a      	str	r2, [r3, #0]
}
 800df5c:	bf00      	nop
 800df5e:	3714      	adds	r7, #20
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800df68:	b480      	push	{r7}
 800df6a:	b085      	sub	sp, #20
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	691b      	ldr	r3, [r3, #16]
 800df74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	687a      	ldr	r2, [r7, #4]
 800df7c:	6892      	ldr	r2, [r2, #8]
 800df7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	687a      	ldr	r2, [r7, #4]
 800df86:	6852      	ldr	r2, [r2, #4]
 800df88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	429a      	cmp	r2, r3
 800df92:	d103      	bne.n	800df9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	689a      	ldr	r2, [r3, #8]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	1e5a      	subs	r2, r3, #1
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3714      	adds	r7, #20
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr

0800dfbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b084      	sub	sp, #16
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d105      	bne.n	800dfdc <xQueueGenericReset+0x20>
 800dfd0:	f240 1203 	movw	r2, #259	; 0x103
 800dfd4:	492a      	ldr	r1, [pc, #168]	; (800e080 <xQueueGenericReset+0xc4>)
 800dfd6:	482b      	ldr	r0, [pc, #172]	; (800e084 <xQueueGenericReset+0xc8>)
 800dfd8:	f7f4 fe84 	bl	8002ce4 <assertFail>

	taskENTER_CRITICAL();
 800dfdc:	f002 ff90 	bl	8010f00 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681a      	ldr	r2, [r3, #0]
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfe8:	68f9      	ldr	r1, [r7, #12]
 800dfea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dfec:	fb01 f303 	mul.w	r3, r1, r3
 800dff0:	441a      	add	r2, r3
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2200      	movs	r2, #0
 800dffa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681a      	ldr	r2, [r3, #0]
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e00c:	3b01      	subs	r3, #1
 800e00e:	68f9      	ldr	r1, [r7, #12]
 800e010:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e012:	fb01 f303 	mul.w	r3, r1, r3
 800e016:	441a      	add	r2, r3
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	22ff      	movs	r2, #255	; 0xff
 800e020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	22ff      	movs	r2, #255	; 0xff
 800e028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d114      	bne.n	800e05c <xQueueGenericReset+0xa0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	691b      	ldr	r3, [r3, #16]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d01a      	beq.n	800e070 <xQueueGenericReset+0xb4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	3310      	adds	r3, #16
 800e03e:	4618      	mov	r0, r3
 800e040:	f001 fd3a 	bl	800fab8 <xTaskRemoveFromEventList>
 800e044:	4603      	mov	r3, r0
 800e046:	2b00      	cmp	r3, #0
 800e048:	d012      	beq.n	800e070 <xQueueGenericReset+0xb4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e04a:	4b0f      	ldr	r3, [pc, #60]	; (800e088 <xQueueGenericReset+0xcc>)
 800e04c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e050:	601a      	str	r2, [r3, #0]
 800e052:	f3bf 8f4f 	dsb	sy
 800e056:	f3bf 8f6f 	isb	sy
 800e05a:	e009      	b.n	800e070 <xQueueGenericReset+0xb4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	3310      	adds	r3, #16
 800e060:	4618      	mov	r0, r3
 800e062:	f7ff fef7 	bl	800de54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	3324      	adds	r3, #36	; 0x24
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7ff fef2 	bl	800de54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e070:	f002 ff74 	bl	8010f5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e074:	2301      	movs	r3, #1
}
 800e076:	4618      	mov	r0, r3
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	08015940 	.word	0x08015940
 800e084:	08015974 	.word	0x08015974
 800e088:	e000ed04 	.word	0xe000ed04

0800e08c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b088      	sub	sp, #32
 800e090:	af02      	add	r7, sp, #8
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	607a      	str	r2, [r7, #4]
 800e098:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d105      	bne.n	800e0ac <xQueueGenericCreateStatic+0x20>
 800e0a0:	f44f 729d 	mov.w	r2, #314	; 0x13a
 800e0a4:	4929      	ldr	r1, [pc, #164]	; (800e14c <xQueueGenericCreateStatic+0xc0>)
 800e0a6:	482a      	ldr	r0, [pc, #168]	; (800e150 <xQueueGenericCreateStatic+0xc4>)
 800e0a8:	f7f4 fe1c 	bl	8002ce4 <assertFail>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d105      	bne.n	800e0be <xQueueGenericCreateStatic+0x32>
 800e0b2:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800e0b6:	4925      	ldr	r1, [pc, #148]	; (800e14c <xQueueGenericCreateStatic+0xc0>)
 800e0b8:	4826      	ldr	r0, [pc, #152]	; (800e154 <xQueueGenericCreateStatic+0xc8>)
 800e0ba:	f7f4 fe13 	bl	8002ce4 <assertFail>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d002      	beq.n	800e0ca <xQueueGenericCreateStatic+0x3e>
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d001      	beq.n	800e0ce <xQueueGenericCreateStatic+0x42>
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	e000      	b.n	800e0d0 <xQueueGenericCreateStatic+0x44>
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d105      	bne.n	800e0e0 <xQueueGenericCreateStatic+0x54>
 800e0d4:	f44f 72a1 	mov.w	r2, #322	; 0x142
 800e0d8:	491c      	ldr	r1, [pc, #112]	; (800e14c <xQueueGenericCreateStatic+0xc0>)
 800e0da:	481f      	ldr	r0, [pc, #124]	; (800e158 <xQueueGenericCreateStatic+0xcc>)
 800e0dc:	f7f4 fe02 	bl	8002ce4 <assertFail>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d102      	bne.n	800e0ec <xQueueGenericCreateStatic+0x60>
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d101      	bne.n	800e0f0 <xQueueGenericCreateStatic+0x64>
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	e000      	b.n	800e0f2 <xQueueGenericCreateStatic+0x66>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d105      	bne.n	800e102 <xQueueGenericCreateStatic+0x76>
 800e0f6:	f240 1243 	movw	r2, #323	; 0x143
 800e0fa:	4914      	ldr	r1, [pc, #80]	; (800e14c <xQueueGenericCreateStatic+0xc0>)
 800e0fc:	4817      	ldr	r0, [pc, #92]	; (800e15c <xQueueGenericCreateStatic+0xd0>)
 800e0fe:	f7f4 fdf1 	bl	8002ce4 <assertFail>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e102:	2350      	movs	r3, #80	; 0x50
 800e104:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	2b50      	cmp	r3, #80	; 0x50
 800e10a:	d005      	beq.n	800e118 <xQueueGenericCreateStatic+0x8c>
 800e10c:	f240 124b 	movw	r2, #331	; 0x14b
 800e110:	490e      	ldr	r1, [pc, #56]	; (800e14c <xQueueGenericCreateStatic+0xc0>)
 800e112:	4813      	ldr	r0, [pc, #76]	; (800e160 <xQueueGenericCreateStatic+0xd4>)
 800e114:	f7f4 fde6 	bl	8002ce4 <assertFail>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e118:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d00d      	beq.n	800e140 <xQueueGenericCreateStatic+0xb4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	2201      	movs	r2, #1
 800e128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e12c:	f897 2020 	ldrb.w	r2, [r7, #32]
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	9300      	str	r3, [sp, #0]
 800e134:	4613      	mov	r3, r2
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	68b9      	ldr	r1, [r7, #8]
 800e13a:	68f8      	ldr	r0, [r7, #12]
 800e13c:	f000 f84c 	bl	800e1d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e140:	697b      	ldr	r3, [r7, #20]
	}
 800e142:	4618      	mov	r0, r3
 800e144:	3718      	adds	r7, #24
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	08015940 	.word	0x08015940
 800e150:	0801597c 	.word	0x0801597c
 800e154:	080159a0 	.word	0x080159a0
 800e158:	080159b8 	.word	0x080159b8
 800e15c:	080159f0 	.word	0x080159f0
 800e160:	08015a28 	.word	0x08015a28

0800e164 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e164:	b580      	push	{r7, lr}
 800e166:	b08a      	sub	sp, #40	; 0x28
 800e168:	af02      	add	r7, sp, #8
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	4613      	mov	r3, r2
 800e170:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d105      	bne.n	800e184 <xQueueGenericCreate+0x20>
 800e178:	f44f 72bb 	mov.w	r2, #374	; 0x176
 800e17c:	4914      	ldr	r1, [pc, #80]	; (800e1d0 <xQueueGenericCreate+0x6c>)
 800e17e:	4815      	ldr	r0, [pc, #84]	; (800e1d4 <xQueueGenericCreate+0x70>)
 800e180:	f7f4 fdb0 	bl	8002ce4 <assertFail>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	68ba      	ldr	r2, [r7, #8]
 800e188:	fb02 f303 	mul.w	r3, r2, r3
 800e18c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	3350      	adds	r3, #80	; 0x50
 800e192:	4618      	mov	r0, r3
 800e194:	f002 ffc4 	bl	8011120 <pvPortMalloc>
 800e198:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e19a:	69bb      	ldr	r3, [r7, #24]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d011      	beq.n	800e1c4 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e1a0:	69bb      	ldr	r3, [r7, #24]
 800e1a2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	3350      	adds	r3, #80	; 0x50
 800e1a8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e1aa:	69bb      	ldr	r3, [r7, #24]
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e1b2:	79fa      	ldrb	r2, [r7, #7]
 800e1b4:	69bb      	ldr	r3, [r7, #24]
 800e1b6:	9300      	str	r3, [sp, #0]
 800e1b8:	4613      	mov	r3, r2
 800e1ba:	697a      	ldr	r2, [r7, #20]
 800e1bc:	68b9      	ldr	r1, [r7, #8]
 800e1be:	68f8      	ldr	r0, [r7, #12]
 800e1c0:	f000 f80a 	bl	800e1d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e1c4:	69bb      	ldr	r3, [r7, #24]
	}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3720      	adds	r7, #32
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	08015940 	.word	0x08015940
 800e1d4:	0801597c 	.word	0x0801597c

0800e1d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b084      	sub	sp, #16
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	60f8      	str	r0, [r7, #12]
 800e1e0:	60b9      	str	r1, [r7, #8]
 800e1e2:	607a      	str	r2, [r7, #4]
 800e1e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d103      	bne.n	800e1f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e1ec:	69bb      	ldr	r3, [r7, #24]
 800e1ee:	69ba      	ldr	r2, [r7, #24]
 800e1f0:	601a      	str	r2, [r3, #0]
 800e1f2:	e002      	b.n	800e1fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e1f4:	69bb      	ldr	r3, [r7, #24]
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	68fa      	ldr	r2, [r7, #12]
 800e1fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	68ba      	ldr	r2, [r7, #8]
 800e204:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e206:	2101      	movs	r1, #1
 800e208:	69b8      	ldr	r0, [r7, #24]
 800e20a:	f7ff fed7 	bl	800dfbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e20e:	69bb      	ldr	r3, [r7, #24]
 800e210:	78fa      	ldrb	r2, [r7, #3]
 800e212:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e216:	bf00      	nop
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}

0800e21e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e21e:	b580      	push	{r7, lr}
 800e220:	b082      	sub	sp, #8
 800e222:	af00      	add	r7, sp, #0
 800e224:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d00e      	beq.n	800e24a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2200      	movs	r2, #0
 800e230:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2200      	movs	r2, #0
 800e236:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2200      	movs	r2, #0
 800e23c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e23e:	2300      	movs	r3, #0
 800e240:	2200      	movs	r2, #0
 800e242:	2100      	movs	r1, #0
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f000 f837 	bl	800e2b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e24a:	bf00      	nop
 800e24c:	3708      	adds	r7, #8
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}

0800e252 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e252:	b580      	push	{r7, lr}
 800e254:	b086      	sub	sp, #24
 800e256:	af00      	add	r7, sp, #0
 800e258:	4603      	mov	r3, r0
 800e25a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e25c:	2301      	movs	r3, #1
 800e25e:	617b      	str	r3, [r7, #20]
 800e260:	2300      	movs	r3, #0
 800e262:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e264:	79fb      	ldrb	r3, [r7, #7]
 800e266:	461a      	mov	r2, r3
 800e268:	6939      	ldr	r1, [r7, #16]
 800e26a:	6978      	ldr	r0, [r7, #20]
 800e26c:	f7ff ff7a 	bl	800e164 <xQueueGenericCreate>
 800e270:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e272:	68f8      	ldr	r0, [r7, #12]
 800e274:	f7ff ffd3 	bl	800e21e <prvInitialiseMutex>

		return xNewQueue;
 800e278:	68fb      	ldr	r3, [r7, #12]
	}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3718      	adds	r7, #24
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}

0800e282 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e282:	b580      	push	{r7, lr}
 800e284:	b088      	sub	sp, #32
 800e286:	af02      	add	r7, sp, #8
 800e288:	4603      	mov	r3, r0
 800e28a:	6039      	str	r1, [r7, #0]
 800e28c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e28e:	2301      	movs	r3, #1
 800e290:	617b      	str	r3, [r7, #20]
 800e292:	2300      	movs	r3, #0
 800e294:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e296:	79fb      	ldrb	r3, [r7, #7]
 800e298:	9300      	str	r3, [sp, #0]
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	2200      	movs	r2, #0
 800e29e:	6939      	ldr	r1, [r7, #16]
 800e2a0:	6978      	ldr	r0, [r7, #20]
 800e2a2:	f7ff fef3 	bl	800e08c <xQueueGenericCreateStatic>
 800e2a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	f7ff ffb8 	bl	800e21e <prvInitialiseMutex>

		return xNewQueue;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
	}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3718      	adds	r7, #24
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}

0800e2b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b08a      	sub	sp, #40	; 0x28
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	60f8      	str	r0, [r7, #12]
 800e2c0:	60b9      	str	r1, [r7, #8]
 800e2c2:	607a      	str	r2, [r7, #4]
 800e2c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800e2ce:	6a3b      	ldr	r3, [r7, #32]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d105      	bne.n	800e2e0 <xQueueGenericSend+0x28>
 800e2d4:	f240 22ea 	movw	r2, #746	; 0x2ea
 800e2d8:	4977      	ldr	r1, [pc, #476]	; (800e4b8 <xQueueGenericSend+0x200>)
 800e2da:	4878      	ldr	r0, [pc, #480]	; (800e4bc <xQueueGenericSend+0x204>)
 800e2dc:	f7f4 fd02 	bl	8002ce4 <assertFail>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d103      	bne.n	800e2ee <xQueueGenericSend+0x36>
 800e2e6:	6a3b      	ldr	r3, [r7, #32]
 800e2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d101      	bne.n	800e2f2 <xQueueGenericSend+0x3a>
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	e000      	b.n	800e2f4 <xQueueGenericSend+0x3c>
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d105      	bne.n	800e304 <xQueueGenericSend+0x4c>
 800e2f8:	f240 22eb 	movw	r2, #747	; 0x2eb
 800e2fc:	496e      	ldr	r1, [pc, #440]	; (800e4b8 <xQueueGenericSend+0x200>)
 800e2fe:	4870      	ldr	r0, [pc, #448]	; (800e4c0 <xQueueGenericSend+0x208>)
 800e300:	f7f4 fcf0 	bl	8002ce4 <assertFail>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	2b02      	cmp	r3, #2
 800e308:	d103      	bne.n	800e312 <xQueueGenericSend+0x5a>
 800e30a:	6a3b      	ldr	r3, [r7, #32]
 800e30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e30e:	2b01      	cmp	r3, #1
 800e310:	d101      	bne.n	800e316 <xQueueGenericSend+0x5e>
 800e312:	2301      	movs	r3, #1
 800e314:	e000      	b.n	800e318 <xQueueGenericSend+0x60>
 800e316:	2300      	movs	r3, #0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d105      	bne.n	800e328 <xQueueGenericSend+0x70>
 800e31c:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800e320:	4965      	ldr	r1, [pc, #404]	; (800e4b8 <xQueueGenericSend+0x200>)
 800e322:	4868      	ldr	r0, [pc, #416]	; (800e4c4 <xQueueGenericSend+0x20c>)
 800e324:	f7f4 fcde 	bl	8002ce4 <assertFail>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e328:	f001 fe58 	bl	800ffdc <xTaskGetSchedulerState>
 800e32c:	4603      	mov	r3, r0
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d102      	bne.n	800e338 <xQueueGenericSend+0x80>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d101      	bne.n	800e33c <xQueueGenericSend+0x84>
 800e338:	2301      	movs	r3, #1
 800e33a:	e000      	b.n	800e33e <xQueueGenericSend+0x86>
 800e33c:	2300      	movs	r3, #0
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d105      	bne.n	800e34e <xQueueGenericSend+0x96>
 800e342:	f240 22ef 	movw	r2, #751	; 0x2ef
 800e346:	495c      	ldr	r1, [pc, #368]	; (800e4b8 <xQueueGenericSend+0x200>)
 800e348:	485f      	ldr	r0, [pc, #380]	; (800e4c8 <xQueueGenericSend+0x210>)
 800e34a:	f7f4 fccb 	bl	8002ce4 <assertFail>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e34e:	f002 fdd7 	bl	8010f00 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e352:	6a3b      	ldr	r3, [r7, #32]
 800e354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e356:	6a3b      	ldr	r3, [r7, #32]
 800e358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d302      	bcc.n	800e364 <xQueueGenericSend+0xac>
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	2b02      	cmp	r3, #2
 800e362:	d12f      	bne.n	800e3c4 <xQueueGenericSend+0x10c>
			{
				traceQUEUE_SEND( pxQueue );
 800e364:	6a3b      	ldr	r3, [r7, #32]
 800e366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e368:	4a58      	ldr	r2, [pc, #352]	; (800e4cc <xQueueGenericSend+0x214>)
 800e36a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e36e:	6013      	str	r3, [r2, #0]
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e370:	683a      	ldr	r2, [r7, #0]
 800e372:	68b9      	ldr	r1, [r7, #8]
 800e374:	6a38      	ldr	r0, [r7, #32]
 800e376:	f000 fc4f 	bl	800ec18 <prvCopyDataToQueue>
 800e37a:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e37c:	6a3b      	ldr	r3, [r7, #32]
 800e37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e380:	2b00      	cmp	r3, #0
 800e382:	d010      	beq.n	800e3a6 <xQueueGenericSend+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e384:	6a3b      	ldr	r3, [r7, #32]
 800e386:	3324      	adds	r3, #36	; 0x24
 800e388:	4618      	mov	r0, r3
 800e38a:	f001 fb95 	bl	800fab8 <xTaskRemoveFromEventList>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d013      	beq.n	800e3bc <xQueueGenericSend+0x104>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e394:	4b4e      	ldr	r3, [pc, #312]	; (800e4d0 <xQueueGenericSend+0x218>)
 800e396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e39a:	601a      	str	r2, [r3, #0]
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	f3bf 8f6f 	isb	sy
 800e3a4:	e00a      	b.n	800e3bc <xQueueGenericSend+0x104>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d007      	beq.n	800e3bc <xQueueGenericSend+0x104>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e3ac:	4b48      	ldr	r3, [pc, #288]	; (800e4d0 <xQueueGenericSend+0x218>)
 800e3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3b2:	601a      	str	r2, [r3, #0]
 800e3b4:	f3bf 8f4f 	dsb	sy
 800e3b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e3bc:	f002 fdce 	bl	8010f5c <vPortExitCritical>
				return pdPASS;
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	e075      	b.n	800e4b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d109      	bne.n	800e3de <xQueueGenericSend+0x126>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e3ca:	f002 fdc7 	bl	8010f5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800e3ce:	6a3b      	ldr	r3, [r7, #32]
 800e3d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3d2:	4a3e      	ldr	r2, [pc, #248]	; (800e4cc <xQueueGenericSend+0x214>)
 800e3d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e3d8:	6013      	str	r3, [r2, #0]
					return errQUEUE_FULL;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	e068      	b.n	800e4b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d106      	bne.n	800e3f2 <xQueueGenericSend+0x13a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e3e4:	f107 0314 	add.w	r3, r7, #20
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f001 fbc7 	bl	800fb7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e3f2:	f002 fdb3 	bl	8010f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e3f6:	f001 f849 	bl	800f48c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e3fa:	f002 fd81 	bl	8010f00 <vPortEnterCritical>
 800e3fe:	6a3b      	ldr	r3, [r7, #32]
 800e400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e404:	b25b      	sxtb	r3, r3
 800e406:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e40a:	d103      	bne.n	800e414 <xQueueGenericSend+0x15c>
 800e40c:	6a3b      	ldr	r3, [r7, #32]
 800e40e:	2200      	movs	r2, #0
 800e410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e414:	6a3b      	ldr	r3, [r7, #32]
 800e416:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e41a:	b25b      	sxtb	r3, r3
 800e41c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e420:	d103      	bne.n	800e42a <xQueueGenericSend+0x172>
 800e422:	6a3b      	ldr	r3, [r7, #32]
 800e424:	2200      	movs	r2, #0
 800e426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e42a:	f002 fd97 	bl	8010f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e42e:	1d3a      	adds	r2, r7, #4
 800e430:	f107 0314 	add.w	r3, r7, #20
 800e434:	4611      	mov	r1, r2
 800e436:	4618      	mov	r0, r3
 800e438:	f001 fbb6 	bl	800fba8 <xTaskCheckForTimeOut>
 800e43c:	4603      	mov	r3, r0
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d12a      	bne.n	800e498 <xQueueGenericSend+0x1e0>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e442:	6a38      	ldr	r0, [r7, #32]
 800e444:	f000 fce0 	bl	800ee08 <prvIsQueueFull>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d01e      	beq.n	800e48c <xQueueGenericSend+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 800e44e:	6a3b      	ldr	r3, [r7, #32]
 800e450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e452:	4a1e      	ldr	r2, [pc, #120]	; (800e4cc <xQueueGenericSend+0x214>)
 800e454:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e458:	6013      	str	r3, [r2, #0]
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e45a:	6a3b      	ldr	r3, [r7, #32]
 800e45c:	3310      	adds	r3, #16
 800e45e:	687a      	ldr	r2, [r7, #4]
 800e460:	4611      	mov	r1, r2
 800e462:	4618      	mov	r0, r3
 800e464:	f001 fada 	bl	800fa1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e468:	6a38      	ldr	r0, [r7, #32]
 800e46a:	f000 fc65 	bl	800ed38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e46e:	f001 f81b 	bl	800f4a8 <xTaskResumeAll>
 800e472:	4603      	mov	r3, r0
 800e474:	2b00      	cmp	r3, #0
 800e476:	f47f af6a 	bne.w	800e34e <xQueueGenericSend+0x96>
				{
					portYIELD_WITHIN_API();
 800e47a:	4b15      	ldr	r3, [pc, #84]	; (800e4d0 <xQueueGenericSend+0x218>)
 800e47c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e480:	601a      	str	r2, [r3, #0]
 800e482:	f3bf 8f4f 	dsb	sy
 800e486:	f3bf 8f6f 	isb	sy
 800e48a:	e760      	b.n	800e34e <xQueueGenericSend+0x96>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e48c:	6a38      	ldr	r0, [r7, #32]
 800e48e:	f000 fc53 	bl	800ed38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e492:	f001 f809 	bl	800f4a8 <xTaskResumeAll>
 800e496:	e75a      	b.n	800e34e <xQueueGenericSend+0x96>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e498:	6a38      	ldr	r0, [r7, #32]
 800e49a:	f000 fc4d 	bl	800ed38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e49e:	f001 f803 	bl	800f4a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800e4a2:	6a3b      	ldr	r3, [r7, #32]
 800e4a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4a6:	4a09      	ldr	r2, [pc, #36]	; (800e4cc <xQueueGenericSend+0x214>)
 800e4a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e4ac:	6013      	str	r3, [r2, #0]
			return errQUEUE_FULL;
 800e4ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3728      	adds	r7, #40	; 0x28
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	08015940 	.word	0x08015940
 800e4bc:	08015974 	.word	0x08015974
 800e4c0:	08015a44 	.word	0x08015a44
 800e4c4:	08015a94 	.word	0x08015a94
 800e4c8:	08015adc 	.word	0x08015adc
 800e4cc:	e000000c 	.word	0xe000000c
 800e4d0:	e000ed04 	.word	0xe000ed04

0800e4d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b08c      	sub	sp, #48	; 0x30
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	60f8      	str	r0, [r7, #12]
 800e4dc:	60b9      	str	r1, [r7, #8]
 800e4de:	607a      	str	r2, [r7, #4]
 800e4e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 800e4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d105      	bne.n	800e4f8 <xQueueGenericSendFromISR+0x24>
 800e4ec:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800e4f0:	493e      	ldr	r1, [pc, #248]	; (800e5ec <xQueueGenericSendFromISR+0x118>)
 800e4f2:	483f      	ldr	r0, [pc, #252]	; (800e5f0 <xQueueGenericSendFromISR+0x11c>)
 800e4f4:	f7f4 fbf6 	bl	8002ce4 <assertFail>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d103      	bne.n	800e506 <xQueueGenericSendFromISR+0x32>
 800e4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e502:	2b00      	cmp	r3, #0
 800e504:	d101      	bne.n	800e50a <xQueueGenericSendFromISR+0x36>
 800e506:	2301      	movs	r3, #1
 800e508:	e000      	b.n	800e50c <xQueueGenericSendFromISR+0x38>
 800e50a:	2300      	movs	r3, #0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d105      	bne.n	800e51c <xQueueGenericSendFromISR+0x48>
 800e510:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e514:	4935      	ldr	r1, [pc, #212]	; (800e5ec <xQueueGenericSendFromISR+0x118>)
 800e516:	4837      	ldr	r0, [pc, #220]	; (800e5f4 <xQueueGenericSendFromISR+0x120>)
 800e518:	f7f4 fbe4 	bl	8002ce4 <assertFail>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	2b02      	cmp	r3, #2
 800e520:	d103      	bne.n	800e52a <xQueueGenericSendFromISR+0x56>
 800e522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e526:	2b01      	cmp	r3, #1
 800e528:	d101      	bne.n	800e52e <xQueueGenericSendFromISR+0x5a>
 800e52a:	2301      	movs	r3, #1
 800e52c:	e000      	b.n	800e530 <xQueueGenericSendFromISR+0x5c>
 800e52e:	2300      	movs	r3, #0
 800e530:	2b00      	cmp	r3, #0
 800e532:	d105      	bne.n	800e540 <xQueueGenericSendFromISR+0x6c>
 800e534:	f240 32be 	movw	r2, #958	; 0x3be
 800e538:	492c      	ldr	r1, [pc, #176]	; (800e5ec <xQueueGenericSendFromISR+0x118>)
 800e53a:	482f      	ldr	r0, [pc, #188]	; (800e5f8 <xQueueGenericSendFromISR+0x124>)
 800e53c:	f7f4 fbd2 	bl	8002ce4 <assertFail>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e540:	f002 fdb4 	bl	80110ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e544:	f3ef 8211 	mrs	r2, BASEPRI
 800e548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e54c:	f383 8811 	msr	BASEPRI, r3
 800e550:	f3bf 8f6f 	isb	sy
 800e554:	f3bf 8f4f 	dsb	sy
 800e558:	61ba      	str	r2, [r7, #24]
 800e55a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e55c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e55e:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e568:	429a      	cmp	r2, r3
 800e56a:	d302      	bcc.n	800e572 <xQueueGenericSendFromISR+0x9e>
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	2b02      	cmp	r3, #2
 800e570:	d12f      	bne.n	800e5d2 <xQueueGenericSendFromISR+0xfe>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e574:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e578:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e580:	61fb      	str	r3, [r7, #28]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e582:	683a      	ldr	r2, [r7, #0]
 800e584:	68b9      	ldr	r1, [r7, #8]
 800e586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e588:	f000 fb46 	bl	800ec18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e58c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e594:	d112      	bne.n	800e5bc <xQueueGenericSendFromISR+0xe8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d016      	beq.n	800e5cc <xQueueGenericSendFromISR+0xf8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a0:	3324      	adds	r3, #36	; 0x24
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f001 fa88 	bl	800fab8 <xTaskRemoveFromEventList>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d00e      	beq.n	800e5cc <xQueueGenericSendFromISR+0xf8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d00b      	beq.n	800e5cc <xQueueGenericSendFromISR+0xf8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	601a      	str	r2, [r3, #0]
 800e5ba:	e007      	b.n	800e5cc <xQueueGenericSendFromISR+0xf8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e5bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	b25a      	sxtb	r2, r3
 800e5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 800e5d0:	e001      	b.n	800e5d6 <xQueueGenericSendFromISR+0x102>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e5e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3730      	adds	r7, #48	; 0x30
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	08015940 	.word	0x08015940
 800e5f0:	08015974 	.word	0x08015974
 800e5f4:	08015a44 	.word	0x08015a44
 800e5f8:	08015a94 	.word	0x08015a94

0800e5fc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b08a      	sub	sp, #40	; 0x28
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e60a:	6a3b      	ldr	r3, [r7, #32]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d105      	bne.n	800e61c <xQueueGiveFromISR+0x20>
 800e610:	f240 4264 	movw	r2, #1124	; 0x464
 800e614:	4937      	ldr	r1, [pc, #220]	; (800e6f4 <xQueueGiveFromISR+0xf8>)
 800e616:	4838      	ldr	r0, [pc, #224]	; (800e6f8 <xQueueGiveFromISR+0xfc>)
 800e618:	f7f4 fb64 	bl	8002ce4 <assertFail>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e61c:	6a3b      	ldr	r3, [r7, #32]
 800e61e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e620:	2b00      	cmp	r3, #0
 800e622:	d005      	beq.n	800e630 <xQueueGiveFromISR+0x34>
 800e624:	f44f 628d 	mov.w	r2, #1128	; 0x468
 800e628:	4932      	ldr	r1, [pc, #200]	; (800e6f4 <xQueueGiveFromISR+0xf8>)
 800e62a:	4834      	ldr	r0, [pc, #208]	; (800e6fc <xQueueGiveFromISR+0x100>)
 800e62c:	f7f4 fb5a 	bl	8002ce4 <assertFail>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e630:	6a3b      	ldr	r3, [r7, #32]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d103      	bne.n	800e640 <xQueueGiveFromISR+0x44>
 800e638:	6a3b      	ldr	r3, [r7, #32]
 800e63a:	689b      	ldr	r3, [r3, #8]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d101      	bne.n	800e644 <xQueueGiveFromISR+0x48>
 800e640:	2301      	movs	r3, #1
 800e642:	e000      	b.n	800e646 <xQueueGiveFromISR+0x4a>
 800e644:	2300      	movs	r3, #0
 800e646:	2b00      	cmp	r3, #0
 800e648:	d105      	bne.n	800e656 <xQueueGiveFromISR+0x5a>
 800e64a:	f240 426d 	movw	r2, #1133	; 0x46d
 800e64e:	4929      	ldr	r1, [pc, #164]	; (800e6f4 <xQueueGiveFromISR+0xf8>)
 800e650:	482b      	ldr	r0, [pc, #172]	; (800e700 <xQueueGiveFromISR+0x104>)
 800e652:	f7f4 fb47 	bl	8002ce4 <assertFail>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e656:	f002 fd29 	bl	80110ac <vPortValidateInterruptPriority>
	__asm volatile
 800e65a:	f3ef 8211 	mrs	r2, BASEPRI
 800e65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e662:	f383 8811 	msr	BASEPRI, r3
 800e666:	f3bf 8f6f 	isb	sy
 800e66a:	f3bf 8f4f 	dsb	sy
 800e66e:	613a      	str	r2, [r7, #16]
 800e670:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 800e672:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e674:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e676:	6a3b      	ldr	r3, [r7, #32]
 800e678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e67a:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e67c:	6a3b      	ldr	r3, [r7, #32]
 800e67e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e680:	69ba      	ldr	r2, [r7, #24]
 800e682:	429a      	cmp	r2, r3
 800e684:	d229      	bcs.n	800e6da <xQueueGiveFromISR+0xde>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e686:	6a3b      	ldr	r3, [r7, #32]
 800e688:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e68c:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e68e:	69bb      	ldr	r3, [r7, #24]
 800e690:	1c5a      	adds	r2, r3, #1
 800e692:	6a3b      	ldr	r3, [r7, #32]
 800e694:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e696:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e69a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e69e:	d112      	bne.n	800e6c6 <xQueueGiveFromISR+0xca>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6a0:	6a3b      	ldr	r3, [r7, #32]
 800e6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d015      	beq.n	800e6d4 <xQueueGiveFromISR+0xd8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6a8:	6a3b      	ldr	r3, [r7, #32]
 800e6aa:	3324      	adds	r3, #36	; 0x24
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f001 fa03 	bl	800fab8 <xTaskRemoveFromEventList>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d00d      	beq.n	800e6d4 <xQueueGiveFromISR+0xd8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00a      	beq.n	800e6d4 <xQueueGiveFromISR+0xd8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	601a      	str	r2, [r3, #0]
 800e6c4:	e006      	b.n	800e6d4 <xQueueGiveFromISR+0xd8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e6c6:	7dfb      	ldrb	r3, [r7, #23]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	b2db      	uxtb	r3, r3
 800e6cc:	b25a      	sxtb	r2, r3
 800e6ce:	6a3b      	ldr	r3, [r7, #32]
 800e6d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	627b      	str	r3, [r7, #36]	; 0x24
 800e6d8:	e001      	b.n	800e6de <xQueueGiveFromISR+0xe2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	627b      	str	r3, [r7, #36]	; 0x24
 800e6de:	69fb      	ldr	r3, [r7, #28]
 800e6e0:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	f383 8811 	msr	BASEPRI, r3
}
 800e6e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3728      	adds	r7, #40	; 0x28
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}
 800e6f4:	08015940 	.word	0x08015940
 800e6f8:	08015974 	.word	0x08015974
 800e6fc:	08015b34 	.word	0x08015b34
 800e700:	08015b50 	.word	0x08015b50

0800e704 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b08a      	sub	sp, #40	; 0x28
 800e708:	af00      	add	r7, sp, #0
 800e70a:	60f8      	str	r0, [r7, #12]
 800e70c:	60b9      	str	r1, [r7, #8]
 800e70e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e710:	2300      	movs	r3, #0
 800e712:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e718:	6a3b      	ldr	r3, [r7, #32]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d105      	bne.n	800e72a <xQueueReceive+0x26>
 800e71e:	f240 5204 	movw	r2, #1284	; 0x504
 800e722:	4962      	ldr	r1, [pc, #392]	; (800e8ac <xQueueReceive+0x1a8>)
 800e724:	4862      	ldr	r0, [pc, #392]	; (800e8b0 <xQueueReceive+0x1ac>)
 800e726:	f7f4 fadd 	bl	8002ce4 <assertFail>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d103      	bne.n	800e738 <xQueueReceive+0x34>
 800e730:	6a3b      	ldr	r3, [r7, #32]
 800e732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e734:	2b00      	cmp	r3, #0
 800e736:	d101      	bne.n	800e73c <xQueueReceive+0x38>
 800e738:	2301      	movs	r3, #1
 800e73a:	e000      	b.n	800e73e <xQueueReceive+0x3a>
 800e73c:	2300      	movs	r3, #0
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d105      	bne.n	800e74e <xQueueReceive+0x4a>
 800e742:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 800e746:	4959      	ldr	r1, [pc, #356]	; (800e8ac <xQueueReceive+0x1a8>)
 800e748:	485a      	ldr	r0, [pc, #360]	; (800e8b4 <xQueueReceive+0x1b0>)
 800e74a:	f7f4 facb 	bl	8002ce4 <assertFail>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e74e:	f001 fc45 	bl	800ffdc <xTaskGetSchedulerState>
 800e752:	4603      	mov	r3, r0
 800e754:	2b00      	cmp	r3, #0
 800e756:	d102      	bne.n	800e75e <xQueueReceive+0x5a>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d101      	bne.n	800e762 <xQueueReceive+0x5e>
 800e75e:	2301      	movs	r3, #1
 800e760:	e000      	b.n	800e764 <xQueueReceive+0x60>
 800e762:	2300      	movs	r3, #0
 800e764:	2b00      	cmp	r3, #0
 800e766:	d105      	bne.n	800e774 <xQueueReceive+0x70>
 800e768:	f240 520d 	movw	r2, #1293	; 0x50d
 800e76c:	494f      	ldr	r1, [pc, #316]	; (800e8ac <xQueueReceive+0x1a8>)
 800e76e:	4852      	ldr	r0, [pc, #328]	; (800e8b8 <xQueueReceive+0x1b4>)
 800e770:	f7f4 fab8 	bl	8002ce4 <assertFail>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e774:	f002 fbc4 	bl	8010f00 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e778:	6a3b      	ldr	r3, [r7, #32]
 800e77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e77c:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d01f      	beq.n	800e7c4 <xQueueReceive+0xc0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e784:	68b9      	ldr	r1, [r7, #8]
 800e786:	6a38      	ldr	r0, [r7, #32]
 800e788:	f000 fab0 	bl	800ecec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e78c:	69fb      	ldr	r3, [r7, #28]
 800e78e:	1e5a      	subs	r2, r3, #1
 800e790:	6a3b      	ldr	r3, [r7, #32]
 800e792:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e794:	6a3b      	ldr	r3, [r7, #32]
 800e796:	691b      	ldr	r3, [r3, #16]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d00f      	beq.n	800e7bc <xQueueReceive+0xb8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e79c:	6a3b      	ldr	r3, [r7, #32]
 800e79e:	3310      	adds	r3, #16
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f001 f989 	bl	800fab8 <xTaskRemoveFromEventList>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d007      	beq.n	800e7bc <xQueueReceive+0xb8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e7ac:	4b43      	ldr	r3, [pc, #268]	; (800e8bc <xQueueReceive+0x1b8>)
 800e7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7b2:	601a      	str	r2, [r3, #0]
 800e7b4:	f3bf 8f4f 	dsb	sy
 800e7b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e7bc:	f002 fbce 	bl	8010f5c <vPortExitCritical>
				return pdPASS;
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	e06f      	b.n	800e8a4 <xQueueReceive+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d103      	bne.n	800e7d2 <xQueueReceive+0xce>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e7ca:	f002 fbc7 	bl	8010f5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	e068      	b.n	800e8a4 <xQueueReceive+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d106      	bne.n	800e7e6 <xQueueReceive+0xe2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e7d8:	f107 0314 	add.w	r3, r7, #20
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f001 f9cd 	bl	800fb7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e7e6:	f002 fbb9 	bl	8010f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e7ea:	f000 fe4f 	bl	800f48c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e7ee:	f002 fb87 	bl	8010f00 <vPortEnterCritical>
 800e7f2:	6a3b      	ldr	r3, [r7, #32]
 800e7f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e7f8:	b25b      	sxtb	r3, r3
 800e7fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7fe:	d103      	bne.n	800e808 <xQueueReceive+0x104>
 800e800:	6a3b      	ldr	r3, [r7, #32]
 800e802:	2200      	movs	r2, #0
 800e804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e808:	6a3b      	ldr	r3, [r7, #32]
 800e80a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e80e:	b25b      	sxtb	r3, r3
 800e810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e814:	d103      	bne.n	800e81e <xQueueReceive+0x11a>
 800e816:	6a3b      	ldr	r3, [r7, #32]
 800e818:	2200      	movs	r2, #0
 800e81a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e81e:	f002 fb9d 	bl	8010f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e822:	1d3a      	adds	r2, r7, #4
 800e824:	f107 0314 	add.w	r3, r7, #20
 800e828:	4611      	mov	r1, r2
 800e82a:	4618      	mov	r0, r3
 800e82c:	f001 f9bc 	bl	800fba8 <xTaskCheckForTimeOut>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d129      	bne.n	800e88a <xQueueReceive+0x186>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e836:	6a38      	ldr	r0, [r7, #32]
 800e838:	f000 fad0 	bl	800eddc <prvIsQueueEmpty>
 800e83c:	4603      	mov	r3, r0
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d01d      	beq.n	800e87e <xQueueReceive+0x17a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 800e842:	6a3b      	ldr	r3, [r7, #32]
 800e844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e846:	4a1e      	ldr	r2, [pc, #120]	; (800e8c0 <xQueueReceive+0x1bc>)
 800e848:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e84c:	6013      	str	r3, [r2, #0]
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e84e:	6a3b      	ldr	r3, [r7, #32]
 800e850:	3324      	adds	r3, #36	; 0x24
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	4611      	mov	r1, r2
 800e856:	4618      	mov	r0, r3
 800e858:	f001 f8e0 	bl	800fa1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e85c:	6a38      	ldr	r0, [r7, #32]
 800e85e:	f000 fa6b 	bl	800ed38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e862:	f000 fe21 	bl	800f4a8 <xTaskResumeAll>
 800e866:	4603      	mov	r3, r0
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d183      	bne.n	800e774 <xQueueReceive+0x70>
				{
					portYIELD_WITHIN_API();
 800e86c:	4b13      	ldr	r3, [pc, #76]	; (800e8bc <xQueueReceive+0x1b8>)
 800e86e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e872:	601a      	str	r2, [r3, #0]
 800e874:	f3bf 8f4f 	dsb	sy
 800e878:	f3bf 8f6f 	isb	sy
 800e87c:	e77a      	b.n	800e774 <xQueueReceive+0x70>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e87e:	6a38      	ldr	r0, [r7, #32]
 800e880:	f000 fa5a 	bl	800ed38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e884:	f000 fe10 	bl	800f4a8 <xTaskResumeAll>
 800e888:	e774      	b.n	800e774 <xQueueReceive+0x70>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e88a:	6a38      	ldr	r0, [r7, #32]
 800e88c:	f000 fa54 	bl	800ed38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e890:	f000 fe0a 	bl	800f4a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e894:	6a38      	ldr	r0, [r7, #32]
 800e896:	f000 faa1 	bl	800eddc <prvIsQueueEmpty>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	f43f af69 	beq.w	800e774 <xQueueReceive+0x70>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e8a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3728      	adds	r7, #40	; 0x28
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	08015940 	.word	0x08015940
 800e8b0:	08015bb8 	.word	0x08015bb8
 800e8b4:	08015bc4 	.word	0x08015bc4
 800e8b8:	08015adc 	.word	0x08015adc
 800e8bc:	e000ed04 	.word	0xe000ed04
 800e8c0:	e000000c 	.word	0xe000000c

0800e8c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b08a      	sub	sp, #40	; 0x28
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d105      	bne.n	800e8ec <xQueueSemaphoreTake+0x28>
 800e8e0:	f240 5295 	movw	r2, #1429	; 0x595
 800e8e4:	4975      	ldr	r1, [pc, #468]	; (800eabc <xQueueSemaphoreTake+0x1f8>)
 800e8e6:	4876      	ldr	r0, [pc, #472]	; (800eac0 <xQueueSemaphoreTake+0x1fc>)
 800e8e8:	f7f4 f9fc 	bl	8002ce4 <assertFail>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d005      	beq.n	800e900 <xQueueSemaphoreTake+0x3c>
 800e8f4:	f240 5299 	movw	r2, #1433	; 0x599
 800e8f8:	4970      	ldr	r1, [pc, #448]	; (800eabc <xQueueSemaphoreTake+0x1f8>)
 800e8fa:	4872      	ldr	r0, [pc, #456]	; (800eac4 <xQueueSemaphoreTake+0x200>)
 800e8fc:	f7f4 f9f2 	bl	8002ce4 <assertFail>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e900:	f001 fb6c 	bl	800ffdc <xTaskGetSchedulerState>
 800e904:	4603      	mov	r3, r0
 800e906:	2b00      	cmp	r3, #0
 800e908:	d102      	bne.n	800e910 <xQueueSemaphoreTake+0x4c>
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d101      	bne.n	800e914 <xQueueSemaphoreTake+0x50>
 800e910:	2301      	movs	r3, #1
 800e912:	e000      	b.n	800e916 <xQueueSemaphoreTake+0x52>
 800e914:	2300      	movs	r3, #0
 800e916:	2b00      	cmp	r3, #0
 800e918:	d105      	bne.n	800e926 <xQueueSemaphoreTake+0x62>
 800e91a:	f240 529e 	movw	r2, #1438	; 0x59e
 800e91e:	4967      	ldr	r1, [pc, #412]	; (800eabc <xQueueSemaphoreTake+0x1f8>)
 800e920:	4869      	ldr	r0, [pc, #420]	; (800eac8 <xQueueSemaphoreTake+0x204>)
 800e922:	f7f4 f9df 	bl	8002ce4 <assertFail>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e926:	f002 faeb 	bl	8010f00 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e92a:	69fb      	ldr	r3, [r7, #28]
 800e92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e92e:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e930:	69bb      	ldr	r3, [r7, #24]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d024      	beq.n	800e980 <xQueueSemaphoreTake+0xbc>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e936:	69bb      	ldr	r3, [r7, #24]
 800e938:	1e5a      	subs	r2, r3, #1
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e93e:	69fb      	ldr	r3, [r7, #28]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d104      	bne.n	800e950 <xQueueSemaphoreTake+0x8c>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e946:	f001 fce9 	bl	801031c <pvTaskIncrementMutexHeldCount>
 800e94a:	4602      	mov	r2, r0
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e950:	69fb      	ldr	r3, [r7, #28]
 800e952:	691b      	ldr	r3, [r3, #16]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d00f      	beq.n	800e978 <xQueueSemaphoreTake+0xb4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e958:	69fb      	ldr	r3, [r7, #28]
 800e95a:	3310      	adds	r3, #16
 800e95c:	4618      	mov	r0, r3
 800e95e:	f001 f8ab 	bl	800fab8 <xTaskRemoveFromEventList>
 800e962:	4603      	mov	r3, r0
 800e964:	2b00      	cmp	r3, #0
 800e966:	d007      	beq.n	800e978 <xQueueSemaphoreTake+0xb4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e968:	4b58      	ldr	r3, [pc, #352]	; (800eacc <xQueueSemaphoreTake+0x208>)
 800e96a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e96e:	601a      	str	r2, [r3, #0]
 800e970:	f3bf 8f4f 	dsb	sy
 800e974:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e978:	f002 faf0 	bl	8010f5c <vPortExitCritical>
				return pdPASS;
 800e97c:	2301      	movs	r3, #1
 800e97e:	e098      	b.n	800eab2 <xQueueSemaphoreTake+0x1ee>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d10c      	bne.n	800e9a0 <xQueueSemaphoreTake+0xdc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e986:	6a3b      	ldr	r3, [r7, #32]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d005      	beq.n	800e998 <xQueueSemaphoreTake+0xd4>
 800e98c:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800e990:	494a      	ldr	r1, [pc, #296]	; (800eabc <xQueueSemaphoreTake+0x1f8>)
 800e992:	484f      	ldr	r0, [pc, #316]	; (800ead0 <xQueueSemaphoreTake+0x20c>)
 800e994:	f7f4 f9a6 	bl	8002ce4 <assertFail>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e998:	f002 fae0 	bl	8010f5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e99c:	2300      	movs	r3, #0
 800e99e:	e088      	b.n	800eab2 <xQueueSemaphoreTake+0x1ee>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d106      	bne.n	800e9b4 <xQueueSemaphoreTake+0xf0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e9a6:	f107 030c 	add.w	r3, r7, #12
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f001 f8e6 	bl	800fb7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e9b4:	f002 fad2 	bl	8010f5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e9b8:	f000 fd68 	bl	800f48c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e9bc:	f002 faa0 	bl	8010f00 <vPortEnterCritical>
 800e9c0:	69fb      	ldr	r3, [r7, #28]
 800e9c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e9c6:	b25b      	sxtb	r3, r3
 800e9c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9cc:	d103      	bne.n	800e9d6 <xQueueSemaphoreTake+0x112>
 800e9ce:	69fb      	ldr	r3, [r7, #28]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9dc:	b25b      	sxtb	r3, r3
 800e9de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9e2:	d103      	bne.n	800e9ec <xQueueSemaphoreTake+0x128>
 800e9e4:	69fb      	ldr	r3, [r7, #28]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e9ec:	f002 fab6 	bl	8010f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e9f0:	463a      	mov	r2, r7
 800e9f2:	f107 030c 	add.w	r3, r7, #12
 800e9f6:	4611      	mov	r1, r2
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f001 f8d5 	bl	800fba8 <xTaskCheckForTimeOut>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d138      	bne.n	800ea76 <xQueueSemaphoreTake+0x1b2>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea04:	69f8      	ldr	r0, [r7, #28]
 800ea06:	f000 f9e9 	bl	800eddc <prvIsQueueEmpty>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d02c      	beq.n	800ea6a <xQueueSemaphoreTake+0x1a6>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 800ea10:	69fb      	ldr	r3, [r7, #28]
 800ea12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea14:	4a2f      	ldr	r2, [pc, #188]	; (800ead4 <xQueueSemaphoreTake+0x210>)
 800ea16:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ea1a:	6013      	str	r3, [r2, #0]

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d109      	bne.n	800ea38 <xQueueSemaphoreTake+0x174>
					{
						taskENTER_CRITICAL();
 800ea24:	f002 fa6c 	bl	8010f00 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ea28:	69fb      	ldr	r3, [r7, #28]
 800ea2a:	689b      	ldr	r3, [r3, #8]
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f001 faf3 	bl	8010018 <xTaskPriorityInherit>
 800ea32:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800ea34:	f002 fa92 	bl	8010f5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	3324      	adds	r3, #36	; 0x24
 800ea3c:	683a      	ldr	r2, [r7, #0]
 800ea3e:	4611      	mov	r1, r2
 800ea40:	4618      	mov	r0, r3
 800ea42:	f000 ffeb 	bl	800fa1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ea46:	69f8      	ldr	r0, [r7, #28]
 800ea48:	f000 f976 	bl	800ed38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ea4c:	f000 fd2c 	bl	800f4a8 <xTaskResumeAll>
 800ea50:	4603      	mov	r3, r0
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	f47f af67 	bne.w	800e926 <xQueueSemaphoreTake+0x62>
				{
					portYIELD_WITHIN_API();
 800ea58:	4b1c      	ldr	r3, [pc, #112]	; (800eacc <xQueueSemaphoreTake+0x208>)
 800ea5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea5e:	601a      	str	r2, [r3, #0]
 800ea60:	f3bf 8f4f 	dsb	sy
 800ea64:	f3bf 8f6f 	isb	sy
 800ea68:	e75d      	b.n	800e926 <xQueueSemaphoreTake+0x62>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ea6a:	69f8      	ldr	r0, [r7, #28]
 800ea6c:	f000 f964 	bl	800ed38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea70:	f000 fd1a 	bl	800f4a8 <xTaskResumeAll>
 800ea74:	e757      	b.n	800e926 <xQueueSemaphoreTake+0x62>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ea76:	69f8      	ldr	r0, [r7, #28]
 800ea78:	f000 f95e 	bl	800ed38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea7c:	f000 fd14 	bl	800f4a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea80:	69f8      	ldr	r0, [r7, #28]
 800ea82:	f000 f9ab 	bl	800eddc <prvIsQueueEmpty>
 800ea86:	4603      	mov	r3, r0
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	f43f af4c 	beq.w	800e926 <xQueueSemaphoreTake+0x62>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ea8e:	6a3b      	ldr	r3, [r7, #32]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d00d      	beq.n	800eab0 <xQueueSemaphoreTake+0x1ec>
					{
						taskENTER_CRITICAL();
 800ea94:	f002 fa34 	bl	8010f00 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ea98:	69f8      	ldr	r0, [r7, #28]
 800ea9a:	f000 f8a5 	bl	800ebe8 <prvGetDisinheritPriorityAfterTimeout>
 800ea9e:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	689b      	ldr	r3, [r3, #8]
 800eaa4:	6979      	ldr	r1, [r7, #20]
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f001 fbae 	bl	8010208 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800eaac:	f002 fa56 	bl	8010f5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eab0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3728      	adds	r7, #40	; 0x28
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	bf00      	nop
 800eabc:	08015940 	.word	0x08015940
 800eac0:	08015bb8 	.word	0x08015bb8
 800eac4:	08015b34 	.word	0x08015b34
 800eac8:	08015adc 	.word	0x08015adc
 800eacc:	e000ed04 	.word	0xe000ed04
 800ead0:	08015c18 	.word	0x08015c18
 800ead4:	e000000c 	.word	0xe000000c

0800ead8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b08c      	sub	sp, #48	; 0x30
 800eadc:	af00      	add	r7, sp, #0
 800eade:	60f8      	str	r0, [r7, #12]
 800eae0:	60b9      	str	r1, [r7, #8]
 800eae2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 800eae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d105      	bne.n	800eafa <xQueueReceiveFromISR+0x22>
 800eaee:	f240 62ff 	movw	r2, #1791	; 0x6ff
 800eaf2:	4933      	ldr	r1, [pc, #204]	; (800ebc0 <xQueueReceiveFromISR+0xe8>)
 800eaf4:	4833      	ldr	r0, [pc, #204]	; (800ebc4 <xQueueReceiveFromISR+0xec>)
 800eaf6:	f7f4 f8f5 	bl	8002ce4 <assertFail>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d103      	bne.n	800eb08 <xQueueReceiveFromISR+0x30>
 800eb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d101      	bne.n	800eb0c <xQueueReceiveFromISR+0x34>
 800eb08:	2301      	movs	r3, #1
 800eb0a:	e000      	b.n	800eb0e <xQueueReceiveFromISR+0x36>
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d105      	bne.n	800eb1e <xQueueReceiveFromISR+0x46>
 800eb12:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800eb16:	492a      	ldr	r1, [pc, #168]	; (800ebc0 <xQueueReceiveFromISR+0xe8>)
 800eb18:	482b      	ldr	r0, [pc, #172]	; (800ebc8 <xQueueReceiveFromISR+0xf0>)
 800eb1a:	f7f4 f8e3 	bl	8002ce4 <assertFail>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb1e:	f002 fac5 	bl	80110ac <vPortValidateInterruptPriority>
	__asm volatile
 800eb22:	f3ef 8211 	mrs	r2, BASEPRI
 800eb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb2a:	f383 8811 	msr	BASEPRI, r3
 800eb2e:	f3bf 8f6f 	isb	sy
 800eb32:	f3bf 8f4f 	dsb	sy
 800eb36:	61ba      	str	r2, [r7, #24]
 800eb38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800eb3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb3c:	627b      	str	r3, [r7, #36]	; 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb42:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb44:	6a3b      	ldr	r3, [r7, #32]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d02d      	beq.n	800eba6 <xQueueReceiveFromISR+0xce>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800eb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb50:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eb52:	68b9      	ldr	r1, [r7, #8]
 800eb54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb56:	f000 f8c9 	bl	800ecec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eb5a:	6a3b      	ldr	r3, [r7, #32]
 800eb5c:	1e5a      	subs	r2, r3, #1
 800eb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb60:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800eb62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800eb66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb6a:	d112      	bne.n	800eb92 <xQueueReceiveFromISR+0xba>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb6e:	691b      	ldr	r3, [r3, #16]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d015      	beq.n	800eba0 <xQueueReceiveFromISR+0xc8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb76:	3310      	adds	r3, #16
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f000 ff9d 	bl	800fab8 <xTaskRemoveFromEventList>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d00d      	beq.n	800eba0 <xQueueReceiveFromISR+0xc8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d00a      	beq.n	800eba0 <xQueueReceiveFromISR+0xc8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	601a      	str	r2, [r3, #0]
 800eb90:	e006      	b.n	800eba0 <xQueueReceiveFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800eb92:	7ffb      	ldrb	r3, [r7, #31]
 800eb94:	3301      	adds	r3, #1
 800eb96:	b2db      	uxtb	r3, r3
 800eb98:	b25a      	sxtb	r2, r3
 800eb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800eba0:	2301      	movs	r3, #1
 800eba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eba4:	e001      	b.n	800ebaa <xQueueReceiveFromISR+0xd2>
		}
		else
		{
			xReturn = pdFAIL;
 800eba6:	2300      	movs	r3, #0
 800eba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ebaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebac:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	f383 8811 	msr	BASEPRI, r3
}
 800ebb4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ebb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3730      	adds	r7, #48	; 0x30
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}
 800ebc0:	08015940 	.word	0x08015940
 800ebc4:	08015974 	.word	0x08015974
 800ebc8:	08015c38 	.word	0x08015c38

0800ebcc <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 800ebcc:	b480      	push	{r7}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	683a      	ldr	r2, [r7, #0]
 800ebda:	649a      	str	r2, [r3, #72]	; 0x48
	}
 800ebdc:	bf00      	nop
 800ebde:	370c      	adds	r7, #12
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr

0800ebe8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ebe8:	b480      	push	{r7}
 800ebea:	b085      	sub	sp, #20
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d006      	beq.n	800ec06 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f1c3 0314 	rsb	r3, r3, #20
 800ec02:	60fb      	str	r3, [r7, #12]
 800ec04:	e001      	b.n	800ec0a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ec06:	2300      	movs	r3, #0
 800ec08:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
	}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3714      	adds	r7, #20
 800ec10:	46bd      	mov	sp, r7
 800ec12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec16:	4770      	bx	lr

0800ec18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b086      	sub	sp, #24
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	60f8      	str	r0, [r7, #12]
 800ec20:	60b9      	str	r1, [r7, #8]
 800ec22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ec24:	2300      	movs	r3, #0
 800ec26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d10d      	bne.n	800ec52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d14d      	bne.n	800ecda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	689b      	ldr	r3, [r3, #8]
 800ec42:	4618      	mov	r0, r3
 800ec44:	f001 fa5e 	bl	8010104 <xTaskPriorityDisinherit>
 800ec48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	609a      	str	r2, [r3, #8]
 800ec50:	e043      	b.n	800ecda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d119      	bne.n	800ec8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	6858      	ldr	r0, [r3, #4]
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec60:	461a      	mov	r2, r3
 800ec62:	68b9      	ldr	r1, [r7, #8]
 800ec64:	f004 f8f1 	bl	8012e4a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	685a      	ldr	r2, [r3, #4]
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec70:	441a      	add	r2, r3
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	685a      	ldr	r2, [r3, #4]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	689b      	ldr	r3, [r3, #8]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d32b      	bcc.n	800ecda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681a      	ldr	r2, [r3, #0]
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	605a      	str	r2, [r3, #4]
 800ec8a:	e026      	b.n	800ecda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	68d8      	ldr	r0, [r3, #12]
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec94:	461a      	mov	r2, r3
 800ec96:	68b9      	ldr	r1, [r7, #8]
 800ec98:	f004 f8d7 	bl	8012e4a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	68da      	ldr	r2, [r3, #12]
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eca4:	425b      	negs	r3, r3
 800eca6:	441a      	add	r2, r3
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	68da      	ldr	r2, [r3, #12]
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d207      	bcs.n	800ecc8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	689a      	ldr	r2, [r3, #8]
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecc0:	425b      	negs	r3, r3
 800ecc2:	441a      	add	r2, r3
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2b02      	cmp	r3, #2
 800eccc:	d105      	bne.n	800ecda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d002      	beq.n	800ecda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	3b01      	subs	r3, #1
 800ecd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	1c5a      	adds	r2, r3, #1
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ece2:	697b      	ldr	r3, [r7, #20]
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3718      	adds	r7, #24
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d018      	beq.n	800ed30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	68da      	ldr	r2, [r3, #12]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed06:	441a      	add	r2, r3
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	68da      	ldr	r2, [r3, #12]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	689b      	ldr	r3, [r3, #8]
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d303      	bcc.n	800ed20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	68d9      	ldr	r1, [r3, #12]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed28:	461a      	mov	r2, r3
 800ed2a:	6838      	ldr	r0, [r7, #0]
 800ed2c:	f004 f88d 	bl	8012e4a <memcpy>
	}
}
 800ed30:	bf00      	nop
 800ed32:	3708      	adds	r7, #8
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}

0800ed38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b084      	sub	sp, #16
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ed40:	f002 f8de 	bl	8010f00 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ed4c:	e011      	b.n	800ed72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d012      	beq.n	800ed7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	3324      	adds	r3, #36	; 0x24
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f000 feac 	bl	800fab8 <xTaskRemoveFromEventList>
 800ed60:	4603      	mov	r3, r0
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d001      	beq.n	800ed6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ed66:	f000 ff7d 	bl	800fc64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ed6a:	7bfb      	ldrb	r3, [r7, #15]
 800ed6c:	3b01      	subs	r3, #1
 800ed6e:	b2db      	uxtb	r3, r3
 800ed70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ed72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	dce9      	bgt.n	800ed4e <prvUnlockQueue+0x16>
 800ed7a:	e000      	b.n	800ed7e <prvUnlockQueue+0x46>
					break;
 800ed7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	22ff      	movs	r2, #255	; 0xff
 800ed82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ed86:	f002 f8e9 	bl	8010f5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ed8a:	f002 f8b9 	bl	8010f00 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ed96:	e011      	b.n	800edbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	691b      	ldr	r3, [r3, #16]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d012      	beq.n	800edc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	3310      	adds	r3, #16
 800eda4:	4618      	mov	r0, r3
 800eda6:	f000 fe87 	bl	800fab8 <xTaskRemoveFromEventList>
 800edaa:	4603      	mov	r3, r0
 800edac:	2b00      	cmp	r3, #0
 800edae:	d001      	beq.n	800edb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800edb0:	f000 ff58 	bl	800fc64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800edb4:	7bbb      	ldrb	r3, [r7, #14]
 800edb6:	3b01      	subs	r3, #1
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800edbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	dce9      	bgt.n	800ed98 <prvUnlockQueue+0x60>
 800edc4:	e000      	b.n	800edc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800edc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	22ff      	movs	r2, #255	; 0xff
 800edcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800edd0:	f002 f8c4 	bl	8010f5c <vPortExitCritical>
}
 800edd4:	bf00      	nop
 800edd6:	3710      	adds	r7, #16
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ede4:	f002 f88c 	bl	8010f00 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edec:	2b00      	cmp	r3, #0
 800edee:	d102      	bne.n	800edf6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800edf0:	2301      	movs	r3, #1
 800edf2:	60fb      	str	r3, [r7, #12]
 800edf4:	e001      	b.n	800edfa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800edf6:	2300      	movs	r3, #0
 800edf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800edfa:	f002 f8af 	bl	8010f5c <vPortExitCritical>

	return xReturn;
 800edfe:	68fb      	ldr	r3, [r7, #12]
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3710      	adds	r7, #16
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b084      	sub	sp, #16
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ee10:	f002 f876 	bl	8010f00 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d102      	bne.n	800ee26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ee20:	2301      	movs	r3, #1
 800ee22:	60fb      	str	r3, [r7, #12]
 800ee24:	e001      	b.n	800ee2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ee26:	2300      	movs	r3, #0
 800ee28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ee2a:	f002 f897 	bl	8010f5c <vPortExitCritical>

	return xReturn;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3710      	adds	r7, #16
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}

0800ee38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ee38:	b480      	push	{r7}
 800ee3a:	b085      	sub	sp, #20
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ee42:	2300      	movs	r3, #0
 800ee44:	60fb      	str	r3, [r7, #12]
 800ee46:	e014      	b.n	800ee72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ee48:	4a0f      	ldr	r2, [pc, #60]	; (800ee88 <vQueueAddToRegistry+0x50>)
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d10b      	bne.n	800ee6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ee54:	490c      	ldr	r1, [pc, #48]	; (800ee88 <vQueueAddToRegistry+0x50>)
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	683a      	ldr	r2, [r7, #0]
 800ee5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ee5e:	4a0a      	ldr	r2, [pc, #40]	; (800ee88 <vQueueAddToRegistry+0x50>)
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	00db      	lsls	r3, r3, #3
 800ee64:	4413      	add	r3, r2
 800ee66:	687a      	ldr	r2, [r7, #4]
 800ee68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ee6a:	e006      	b.n	800ee7a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	3301      	adds	r3, #1
 800ee70:	60fb      	str	r3, [r7, #12]
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2b09      	cmp	r3, #9
 800ee76:	d9e7      	bls.n	800ee48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ee78:	bf00      	nop
 800ee7a:	bf00      	nop
 800ee7c:	3714      	adds	r7, #20
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	20004124 	.word	0x20004124

0800ee8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b086      	sub	sp, #24
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	60f8      	str	r0, [r7, #12]
 800ee94:	60b9      	str	r1, [r7, #8]
 800ee96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ee9c:	f002 f830 	bl	8010f00 <vPortEnterCritical>
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eea6:	b25b      	sxtb	r3, r3
 800eea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eeac:	d103      	bne.n	800eeb6 <vQueueWaitForMessageRestricted+0x2a>
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eebc:	b25b      	sxtb	r3, r3
 800eebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eec2:	d103      	bne.n	800eecc <vQueueWaitForMessageRestricted+0x40>
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	2200      	movs	r2, #0
 800eec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eecc:	f002 f846 	bl	8010f5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d106      	bne.n	800eee6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	3324      	adds	r3, #36	; 0x24
 800eedc:	687a      	ldr	r2, [r7, #4]
 800eede:	68b9      	ldr	r1, [r7, #8]
 800eee0:	4618      	mov	r0, r3
 800eee2:	f000 fdbf 	bl	800fa64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eee6:	6978      	ldr	r0, [r7, #20]
 800eee8:	f7ff ff26 	bl	800ed38 <prvUnlockQueue>
	}
 800eeec:	bf00      	nop
 800eeee:	3718      	adds	r7, #24
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b08c      	sub	sp, #48	; 0x30
 800eef8:	af04      	add	r7, sp, #16
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	60b9      	str	r1, [r7, #8]
 800eefe:	607a      	str	r2, [r7, #4]
 800ef00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ef02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d105      	bne.n	800ef14 <xTaskCreateStatic+0x20>
 800ef08:	f44f 7214 	mov.w	r2, #592	; 0x250
 800ef0c:	4920      	ldr	r1, [pc, #128]	; (800ef90 <xTaskCreateStatic+0x9c>)
 800ef0e:	4821      	ldr	r0, [pc, #132]	; (800ef94 <xTaskCreateStatic+0xa0>)
 800ef10:	f7f3 fee8 	bl	8002ce4 <assertFail>
		configASSERT( pxTaskBuffer != NULL );
 800ef14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d105      	bne.n	800ef26 <xTaskCreateStatic+0x32>
 800ef1a:	f240 2251 	movw	r2, #593	; 0x251
 800ef1e:	491c      	ldr	r1, [pc, #112]	; (800ef90 <xTaskCreateStatic+0x9c>)
 800ef20:	481d      	ldr	r0, [pc, #116]	; (800ef98 <xTaskCreateStatic+0xa4>)
 800ef22:	f7f3 fedf 	bl	8002ce4 <assertFail>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ef26:	23b8      	movs	r3, #184	; 0xb8
 800ef28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	2bb8      	cmp	r3, #184	; 0xb8
 800ef2e:	d005      	beq.n	800ef3c <xTaskCreateStatic+0x48>
 800ef30:	f240 2259 	movw	r2, #601	; 0x259
 800ef34:	4916      	ldr	r1, [pc, #88]	; (800ef90 <xTaskCreateStatic+0x9c>)
 800ef36:	4819      	ldr	r0, [pc, #100]	; (800ef9c <xTaskCreateStatic+0xa8>)
 800ef38:	f7f3 fed4 	bl	8002ce4 <assertFail>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ef3c:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ef3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d01e      	beq.n	800ef82 <xTaskCreateStatic+0x8e>
 800ef44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d01b      	beq.n	800ef82 <xTaskCreateStatic+0x8e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ef4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef4c:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ef4e:	69fb      	ldr	r3, [r7, #28]
 800ef50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef52:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ef54:	69fb      	ldr	r3, [r7, #28]
 800ef56:	2202      	movs	r2, #2
 800ef58:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	9303      	str	r3, [sp, #12]
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	9302      	str	r3, [sp, #8]
 800ef64:	f107 0318 	add.w	r3, r7, #24
 800ef68:	9301      	str	r3, [sp, #4]
 800ef6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef6c:	9300      	str	r3, [sp, #0]
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	687a      	ldr	r2, [r7, #4]
 800ef72:	68b9      	ldr	r1, [r7, #8]
 800ef74:	68f8      	ldr	r0, [r7, #12]
 800ef76:	f000 f859 	bl	800f02c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ef7a:	69f8      	ldr	r0, [r7, #28]
 800ef7c:	f000 f904 	bl	800f188 <prvAddNewTaskToReadyList>
 800ef80:	e001      	b.n	800ef86 <xTaskCreateStatic+0x92>
		}
		else
		{
			xReturn = NULL;
 800ef82:	2300      	movs	r3, #0
 800ef84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ef86:	69bb      	ldr	r3, [r7, #24]
	}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3720      	adds	r7, #32
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}
 800ef90:	08015ca8 	.word	0x08015ca8
 800ef94:	08015cdc 	.word	0x08015cdc
 800ef98:	08015cf4 	.word	0x08015cf4
 800ef9c:	08015d0c 	.word	0x08015d0c

0800efa0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b08c      	sub	sp, #48	; 0x30
 800efa4:	af04      	add	r7, sp, #16
 800efa6:	60f8      	str	r0, [r7, #12]
 800efa8:	60b9      	str	r1, [r7, #8]
 800efaa:	603b      	str	r3, [r7, #0]
 800efac:	4613      	mov	r3, r2
 800efae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800efb0:	88fb      	ldrh	r3, [r7, #6]
 800efb2:	009b      	lsls	r3, r3, #2
 800efb4:	4618      	mov	r0, r3
 800efb6:	f002 f8b3 	bl	8011120 <pvPortMalloc>
 800efba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d00e      	beq.n	800efe0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800efc2:	20b8      	movs	r0, #184	; 0xb8
 800efc4:	f002 f8ac 	bl	8011120 <pvPortMalloc>
 800efc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800efca:	69fb      	ldr	r3, [r7, #28]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d003      	beq.n	800efd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	697a      	ldr	r2, [r7, #20]
 800efd4:	631a      	str	r2, [r3, #48]	; 0x30
 800efd6:	e005      	b.n	800efe4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800efd8:	6978      	ldr	r0, [r7, #20]
 800efda:	f002 f963 	bl	80112a4 <vPortFree>
 800efde:	e001      	b.n	800efe4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800efe0:	2300      	movs	r3, #0
 800efe2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800efe4:	69fb      	ldr	r3, [r7, #28]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d017      	beq.n	800f01a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	2200      	movs	r2, #0
 800efee:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eff2:	88fa      	ldrh	r2, [r7, #6]
 800eff4:	2300      	movs	r3, #0
 800eff6:	9303      	str	r3, [sp, #12]
 800eff8:	69fb      	ldr	r3, [r7, #28]
 800effa:	9302      	str	r3, [sp, #8]
 800effc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effe:	9301      	str	r3, [sp, #4]
 800f000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f002:	9300      	str	r3, [sp, #0]
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	68b9      	ldr	r1, [r7, #8]
 800f008:	68f8      	ldr	r0, [r7, #12]
 800f00a:	f000 f80f 	bl	800f02c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f00e:	69f8      	ldr	r0, [r7, #28]
 800f010:	f000 f8ba 	bl	800f188 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f014:	2301      	movs	r3, #1
 800f016:	61bb      	str	r3, [r7, #24]
 800f018:	e002      	b.n	800f020 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f01a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f01e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f020:	69bb      	ldr	r3, [r7, #24]
	}
 800f022:	4618      	mov	r0, r3
 800f024:	3720      	adds	r7, #32
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
	...

0800f02c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b086      	sub	sp, #24
 800f030:	af00      	add	r7, sp, #0
 800f032:	60f8      	str	r0, [r7, #12]
 800f034:	60b9      	str	r1, [r7, #8]
 800f036:	607a      	str	r2, [r7, #4]
 800f038:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f03c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	009b      	lsls	r3, r3, #2
 800f042:	461a      	mov	r2, r3
 800f044:	21a5      	movs	r1, #165	; 0xa5
 800f046:	f003 fe17 	bl	8012c78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f04c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f054:	3b01      	subs	r3, #1
 800f056:	009b      	lsls	r3, r3, #2
 800f058:	4413      	add	r3, r2
 800f05a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	f023 0307 	bic.w	r3, r3, #7
 800f062:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	f003 0307 	and.w	r3, r3, #7
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d005      	beq.n	800f07a <prvInitialiseNewTask+0x4e>
 800f06e:	f44f 7259 	mov.w	r2, #868	; 0x364
 800f072:	4940      	ldr	r1, [pc, #256]	; (800f174 <prvInitialiseNewTask+0x148>)
 800f074:	4840      	ldr	r0, [pc, #256]	; (800f178 <prvInitialiseNewTask+0x14c>)
 800f076:	f7f3 fe35 	bl	8002ce4 <assertFail>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800f07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f07c:	693a      	ldr	r2, [r7, #16]
 800f07e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d01f      	beq.n	800f0c6 <prvInitialiseNewTask+0x9a>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f086:	2300      	movs	r3, #0
 800f088:	617b      	str	r3, [r7, #20]
 800f08a:	e012      	b.n	800f0b2 <prvInitialiseNewTask+0x86>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f08c:	68ba      	ldr	r2, [r7, #8]
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	4413      	add	r3, r2
 800f092:	7819      	ldrb	r1, [r3, #0]
 800f094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	4413      	add	r3, r2
 800f09a:	3334      	adds	r3, #52	; 0x34
 800f09c:	460a      	mov	r2, r1
 800f09e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f0a0:	68ba      	ldr	r2, [r7, #8]
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d006      	beq.n	800f0ba <prvInitialiseNewTask+0x8e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	617b      	str	r3, [r7, #20]
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	2b0f      	cmp	r3, #15
 800f0b6:	d9e9      	bls.n	800f08c <prvInitialiseNewTask+0x60>
 800f0b8:	e000      	b.n	800f0bc <prvInitialiseNewTask+0x90>
			{
				break;
 800f0ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0be:	2200      	movs	r2, #0
 800f0c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f0c4:	e003      	b.n	800f0ce <prvInitialiseNewTask+0xa2>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f0ce:	6a3b      	ldr	r3, [r7, #32]
 800f0d0:	2b13      	cmp	r3, #19
 800f0d2:	d901      	bls.n	800f0d8 <prvInitialiseNewTask+0xac>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f0d4:	2313      	movs	r3, #19
 800f0d6:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0da:	6a3a      	ldr	r2, [r7, #32]
 800f0dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e0:	6a3a      	ldr	r2, [r7, #32]
 800f0e2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800f0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ec:	3304      	adds	r3, #4
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7fe fed0 	bl	800de94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f6:	3318      	adds	r3, #24
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7fe fecb 	bl	800de94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f102:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f104:	6a3b      	ldr	r3, [r7, #32]
 800f106:	f1c3 0214 	rsb	r2, r3, #20
 800f10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f10c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f112:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800f114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f116:	2200      	movs	r2, #0
 800f118:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800f11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11c:	2200      	movs	r2, #0
 800f11e:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f122:	2200      	movs	r2, #0
 800f124:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12a:	2200      	movs	r2, #0
 800f12c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f132:	3360      	adds	r3, #96	; 0x60
 800f134:	224c      	movs	r2, #76	; 0x4c
 800f136:	2100      	movs	r1, #0
 800f138:	4618      	mov	r0, r3
 800f13a:	f003 fd9d 	bl	8012c78 <memset>
 800f13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f140:	4a0e      	ldr	r2, [pc, #56]	; (800f17c <prvInitialiseNewTask+0x150>)
 800f142:	665a      	str	r2, [r3, #100]	; 0x64
 800f144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f146:	4a0e      	ldr	r2, [pc, #56]	; (800f180 <prvInitialiseNewTask+0x154>)
 800f148:	669a      	str	r2, [r3, #104]	; 0x68
 800f14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f14c:	4a0d      	ldr	r2, [pc, #52]	; (800f184 <prvInitialiseNewTask+0x158>)
 800f14e:	66da      	str	r2, [r3, #108]	; 0x6c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f150:	683a      	ldr	r2, [r7, #0]
 800f152:	68f9      	ldr	r1, [r7, #12]
 800f154:	6938      	ldr	r0, [r7, #16]
 800f156:	f001 fda7 	bl	8010ca8 <pxPortInitialiseStack>
 800f15a:	4602      	mov	r2, r0
 800f15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f15e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f162:	2b00      	cmp	r3, #0
 800f164:	d002      	beq.n	800f16c <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f16a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f16c:	bf00      	nop
 800f16e:	3718      	adds	r7, #24
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}
 800f174:	08015ca8 	.word	0x08015ca8
 800f178:	08015d28 	.word	0x08015d28
 800f17c:	20009d84 	.word	0x20009d84
 800f180:	20009dec 	.word	0x20009dec
 800f184:	20009e54 	.word	0x20009e54

0800f188 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b082      	sub	sp, #8
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f190:	f001 feb6 	bl	8010f00 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f194:	4b2c      	ldr	r3, [pc, #176]	; (800f248 <prvAddNewTaskToReadyList+0xc0>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	3301      	adds	r3, #1
 800f19a:	4a2b      	ldr	r2, [pc, #172]	; (800f248 <prvAddNewTaskToReadyList+0xc0>)
 800f19c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f19e:	4b2b      	ldr	r3, [pc, #172]	; (800f24c <prvAddNewTaskToReadyList+0xc4>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d109      	bne.n	800f1ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f1a6:	4a29      	ldr	r2, [pc, #164]	; (800f24c <prvAddNewTaskToReadyList+0xc4>)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f1ac:	4b26      	ldr	r3, [pc, #152]	; (800f248 <prvAddNewTaskToReadyList+0xc0>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	2b01      	cmp	r3, #1
 800f1b2:	d110      	bne.n	800f1d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f1b4:	f000 fd7c 	bl	800fcb0 <prvInitialiseTaskLists>
 800f1b8:	e00d      	b.n	800f1d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f1ba:	4b25      	ldr	r3, [pc, #148]	; (800f250 <prvAddNewTaskToReadyList+0xc8>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d109      	bne.n	800f1d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f1c2:	4b22      	ldr	r3, [pc, #136]	; (800f24c <prvAddNewTaskToReadyList+0xc4>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d802      	bhi.n	800f1d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f1d0:	4a1e      	ldr	r2, [pc, #120]	; (800f24c <prvAddNewTaskToReadyList+0xc4>)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f1d6:	4b1f      	ldr	r3, [pc, #124]	; (800f254 <prvAddNewTaskToReadyList+0xcc>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	3301      	adds	r3, #1
 800f1dc:	4a1d      	ldr	r2, [pc, #116]	; (800f254 <prvAddNewTaskToReadyList+0xcc>)
 800f1de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f1e0:	4b1c      	ldr	r3, [pc, #112]	; (800f254 <prvAddNewTaskToReadyList+0xcc>)
 800f1e2:	681a      	ldr	r2, [r3, #0]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	409a      	lsls	r2, r3
 800f1f0:	4b19      	ldr	r3, [pc, #100]	; (800f258 <prvAddNewTaskToReadyList+0xd0>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	4313      	orrs	r3, r2
 800f1f6:	4a18      	ldr	r2, [pc, #96]	; (800f258 <prvAddNewTaskToReadyList+0xd0>)
 800f1f8:	6013      	str	r3, [r2, #0]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1fe:	4613      	mov	r3, r2
 800f200:	009b      	lsls	r3, r3, #2
 800f202:	4413      	add	r3, r2
 800f204:	009b      	lsls	r3, r3, #2
 800f206:	4a15      	ldr	r2, [pc, #84]	; (800f25c <prvAddNewTaskToReadyList+0xd4>)
 800f208:	441a      	add	r2, r3
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	3304      	adds	r3, #4
 800f20e:	4619      	mov	r1, r3
 800f210:	4610      	mov	r0, r2
 800f212:	f7fe fe4c 	bl	800deae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f216:	f001 fea1 	bl	8010f5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f21a:	4b0d      	ldr	r3, [pc, #52]	; (800f250 <prvAddNewTaskToReadyList+0xc8>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d00e      	beq.n	800f240 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f222:	4b0a      	ldr	r3, [pc, #40]	; (800f24c <prvAddNewTaskToReadyList+0xc4>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d207      	bcs.n	800f240 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f230:	4b0b      	ldr	r3, [pc, #44]	; (800f260 <prvAddNewTaskToReadyList+0xd8>)
 800f232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f236:	601a      	str	r2, [r3, #0]
 800f238:	f3bf 8f4f 	dsb	sy
 800f23c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f240:	bf00      	nop
 800f242:	3708      	adds	r7, #8
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	2000437c 	.word	0x2000437c
 800f24c:	20004174 	.word	0x20004174
 800f250:	20004388 	.word	0x20004388
 800f254:	20004398 	.word	0x20004398
 800f258:	20004384 	.word	0x20004384
 800f25c:	20004178 	.word	0x20004178
 800f260:	e000ed04 	.word	0xe000ed04

0800f264 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f264:	b580      	push	{r7, lr}
 800f266:	b084      	sub	sp, #16
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f26c:	2300      	movs	r3, #0
 800f26e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d012      	beq.n	800f29c <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f276:	4b11      	ldr	r3, [pc, #68]	; (800f2bc <vTaskDelay+0x58>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d005      	beq.n	800f28a <vTaskDelay+0x26>
 800f27e:	f240 5244 	movw	r2, #1348	; 0x544
 800f282:	490f      	ldr	r1, [pc, #60]	; (800f2c0 <vTaskDelay+0x5c>)
 800f284:	480f      	ldr	r0, [pc, #60]	; (800f2c4 <vTaskDelay+0x60>)
 800f286:	f7f3 fd2d 	bl	8002ce4 <assertFail>
			vTaskSuspendAll();
 800f28a:	f000 f8ff 	bl	800f48c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f28e:	2100      	movs	r1, #0
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f001 f8c9 	bl	8010428 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f296:	f000 f907 	bl	800f4a8 <xTaskResumeAll>
 800f29a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d107      	bne.n	800f2b2 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
 800f2a2:	4b09      	ldr	r3, [pc, #36]	; (800f2c8 <vTaskDelay+0x64>)
 800f2a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2a8:	601a      	str	r2, [r3, #0]
 800f2aa:	f3bf 8f4f 	dsb	sy
 800f2ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f2b2:	bf00      	nop
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	200043a4 	.word	0x200043a4
 800f2c0:	08015ca8 	.word	0x08015ca8
 800f2c4:	08015d94 	.word	0x08015d94
 800f2c8:	e000ed04 	.word	0xe000ed04

0800f2cc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b088      	sub	sp, #32
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800f2d8:	69bb      	ldr	r3, [r7, #24]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d105      	bne.n	800f2ea <eTaskGetState+0x1e>
 800f2de:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800f2e2:	4926      	ldr	r1, [pc, #152]	; (800f37c <eTaskGetState+0xb0>)
 800f2e4:	4826      	ldr	r0, [pc, #152]	; (800f380 <eTaskGetState+0xb4>)
 800f2e6:	f7f3 fcfd 	bl	8002ce4 <assertFail>

		if( pxTCB == pxCurrentTCB )
 800f2ea:	4b26      	ldr	r3, [pc, #152]	; (800f384 <eTaskGetState+0xb8>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	69ba      	ldr	r2, [r7, #24]
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d102      	bne.n	800f2fa <eTaskGetState+0x2e>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	77fb      	strb	r3, [r7, #31]
 800f2f8:	e03a      	b.n	800f370 <eTaskGetState+0xa4>
		}
		else
		{
			taskENTER_CRITICAL();
 800f2fa:	f001 fe01 	bl	8010f00 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800f2fe:	69bb      	ldr	r3, [r7, #24]
 800f300:	695b      	ldr	r3, [r3, #20]
 800f302:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800f304:	4b20      	ldr	r3, [pc, #128]	; (800f388 <eTaskGetState+0xbc>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800f30a:	4b20      	ldr	r3, [pc, #128]	; (800f38c <eTaskGetState+0xc0>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800f310:	f001 fe24 	bl	8010f5c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800f314:	697a      	ldr	r2, [r7, #20]
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d003      	beq.n	800f324 <eTaskGetState+0x58>
 800f31c:	697a      	ldr	r2, [r7, #20]
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	429a      	cmp	r2, r3
 800f322:	d102      	bne.n	800f32a <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800f324:	2302      	movs	r3, #2
 800f326:	77fb      	strb	r3, [r7, #31]
 800f328:	e022      	b.n	800f370 <eTaskGetState+0xa4>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	4a18      	ldr	r2, [pc, #96]	; (800f390 <eTaskGetState+0xc4>)
 800f32e:	4293      	cmp	r3, r2
 800f330:	d112      	bne.n	800f358 <eTaskGetState+0x8c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f336:	2b00      	cmp	r3, #0
 800f338:	d10b      	bne.n	800f352 <eTaskGetState+0x86>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800f33a:	69bb      	ldr	r3, [r7, #24]
 800f33c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800f340:	b2db      	uxtb	r3, r3
 800f342:	2b01      	cmp	r3, #1
 800f344:	d102      	bne.n	800f34c <eTaskGetState+0x80>
							{
								eReturn = eBlocked;
 800f346:	2302      	movs	r3, #2
 800f348:	77fb      	strb	r3, [r7, #31]
 800f34a:	e011      	b.n	800f370 <eTaskGetState+0xa4>
							}
							else
							{
								eReturn = eSuspended;
 800f34c:	2303      	movs	r3, #3
 800f34e:	77fb      	strb	r3, [r7, #31]
 800f350:	e00e      	b.n	800f370 <eTaskGetState+0xa4>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800f352:	2302      	movs	r3, #2
 800f354:	77fb      	strb	r3, [r7, #31]
 800f356:	e00b      	b.n	800f370 <eTaskGetState+0xa4>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	4a0e      	ldr	r2, [pc, #56]	; (800f394 <eTaskGetState+0xc8>)
 800f35c:	4293      	cmp	r3, r2
 800f35e:	d002      	beq.n	800f366 <eTaskGetState+0x9a>
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d102      	bne.n	800f36c <eTaskGetState+0xa0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800f366:	2304      	movs	r3, #4
 800f368:	77fb      	strb	r3, [r7, #31]
 800f36a:	e001      	b.n	800f370 <eTaskGetState+0xa4>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800f36c:	2301      	movs	r3, #1
 800f36e:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800f370:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800f372:	4618      	mov	r0, r3
 800f374:	3720      	adds	r7, #32
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	bf00      	nop
 800f37c:	08015ca8 	.word	0x08015ca8
 800f380:	08015ddc 	.word	0x08015ddc
 800f384:	20004174 	.word	0x20004174
 800f388:	20004330 	.word	0x20004330
 800f38c:	20004334 	.word	0x20004334
 800f390:	20004364 	.word	0x20004364
 800f394:	2000434c 	.word	0x2000434c

0800f398 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b08a      	sub	sp, #40	; 0x28
 800f39c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f3a6:	1d3a      	adds	r2, r7, #4
 800f3a8:	f107 0108 	add.w	r1, r7, #8
 800f3ac:	f107 030c 	add.w	r3, r7, #12
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7f4 fca1 	bl	8003cf8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f3b6:	6879      	ldr	r1, [r7, #4]
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	68fa      	ldr	r2, [r7, #12]
 800f3bc:	9202      	str	r2, [sp, #8]
 800f3be:	9301      	str	r3, [sp, #4]
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	9300      	str	r3, [sp, #0]
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	460a      	mov	r2, r1
 800f3c8:	4925      	ldr	r1, [pc, #148]	; (800f460 <vTaskStartScheduler+0xc8>)
 800f3ca:	4826      	ldr	r0, [pc, #152]	; (800f464 <vTaskStartScheduler+0xcc>)
 800f3cc:	f7ff fd92 	bl	800eef4 <xTaskCreateStatic>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	4a25      	ldr	r2, [pc, #148]	; (800f468 <vTaskStartScheduler+0xd0>)
 800f3d4:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f3d6:	4b24      	ldr	r3, [pc, #144]	; (800f468 <vTaskStartScheduler+0xd0>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d002      	beq.n	800f3e4 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 800f3de:	2301      	movs	r3, #1
 800f3e0:	617b      	str	r3, [r7, #20]
 800f3e2:	e001      	b.n	800f3e8 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	2b01      	cmp	r3, #1
 800f3ec:	d102      	bne.n	800f3f4 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800f3ee:	f001 f881 	bl	80104f4 <xTimerCreateTimerTask>
 800f3f2:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	d123      	bne.n	800f442 <vTaskStartScheduler+0xaa>
	__asm volatile
 800f3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3fe:	f383 8811 	msr	BASEPRI, r3
 800f402:	f3bf 8f6f 	isb	sy
 800f406:	f3bf 8f4f 	dsb	sy
 800f40a:	613b      	str	r3, [r7, #16]
}
 800f40c:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f40e:	4b17      	ldr	r3, [pc, #92]	; (800f46c <vTaskStartScheduler+0xd4>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	3360      	adds	r3, #96	; 0x60
 800f414:	4a16      	ldr	r2, [pc, #88]	; (800f470 <vTaskStartScheduler+0xd8>)
 800f416:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f418:	4b16      	ldr	r3, [pc, #88]	; (800f474 <vTaskStartScheduler+0xdc>)
 800f41a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f41e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f420:	4b15      	ldr	r3, [pc, #84]	; (800f478 <vTaskStartScheduler+0xe0>)
 800f422:	2201      	movs	r2, #1
 800f424:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f426:	4b15      	ldr	r3, [pc, #84]	; (800f47c <vTaskStartScheduler+0xe4>)
 800f428:	2200      	movs	r2, #0
 800f42a:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f42c:	f7f4 fc4a 	bl	8003cc4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();
 800f430:	4b0e      	ldr	r3, [pc, #56]	; (800f46c <vTaskStartScheduler+0xd4>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	3334      	adds	r3, #52	; 0x34
 800f436:	4a12      	ldr	r2, [pc, #72]	; (800f480 <vTaskStartScheduler+0xe8>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	6013      	str	r3, [r2, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f43c:	f001 fcb8 	bl	8010db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f440:	e009      	b.n	800f456 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f448:	d105      	bne.n	800f456 <vTaskStartScheduler+0xbe>
 800f44a:	f640 022a 	movw	r2, #2090	; 0x82a
 800f44e:	490d      	ldr	r1, [pc, #52]	; (800f484 <vTaskStartScheduler+0xec>)
 800f450:	480d      	ldr	r0, [pc, #52]	; (800f488 <vTaskStartScheduler+0xf0>)
 800f452:	f7f3 fc47 	bl	8002ce4 <assertFail>
}
 800f456:	bf00      	nop
 800f458:	3718      	adds	r7, #24
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop
 800f460:	08015e28 	.word	0x08015e28
 800f464:	0800fc7d 	.word	0x0800fc7d
 800f468:	200043a0 	.word	0x200043a0
 800f46c:	20004174 	.word	0x20004174
 800f470:	2000043c 	.word	0x2000043c
 800f474:	2000439c 	.word	0x2000439c
 800f478:	20004388 	.word	0x20004388
 800f47c:	20004380 	.word	0x20004380
 800f480:	e0000004 	.word	0xe0000004
 800f484:	08015ca8 	.word	0x08015ca8
 800f488:	08015e30 	.word	0x08015e30

0800f48c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f48c:	b480      	push	{r7}
 800f48e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f490:	4b04      	ldr	r3, [pc, #16]	; (800f4a4 <vTaskSuspendAll+0x18>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	3301      	adds	r3, #1
 800f496:	4a03      	ldr	r2, [pc, #12]	; (800f4a4 <vTaskSuspendAll+0x18>)
 800f498:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f49a:	bf00      	nop
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr
 800f4a4:	200043a4 	.word	0x200043a4

0800f4a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b084      	sub	sp, #16
 800f4ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f4b6:	4b3f      	ldr	r3, [pc, #252]	; (800f5b4 <xTaskResumeAll+0x10c>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d105      	bne.n	800f4ca <xTaskResumeAll+0x22>
 800f4be:	f640 0299 	movw	r2, #2201	; 0x899
 800f4c2:	493d      	ldr	r1, [pc, #244]	; (800f5b8 <xTaskResumeAll+0x110>)
 800f4c4:	483d      	ldr	r0, [pc, #244]	; (800f5bc <xTaskResumeAll+0x114>)
 800f4c6:	f7f3 fc0d 	bl	8002ce4 <assertFail>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f4ca:	f001 fd19 	bl	8010f00 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f4ce:	4b39      	ldr	r3, [pc, #228]	; (800f5b4 <xTaskResumeAll+0x10c>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	3b01      	subs	r3, #1
 800f4d4:	4a37      	ldr	r2, [pc, #220]	; (800f5b4 <xTaskResumeAll+0x10c>)
 800f4d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4d8:	4b36      	ldr	r3, [pc, #216]	; (800f5b4 <xTaskResumeAll+0x10c>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d161      	bne.n	800f5a4 <xTaskResumeAll+0xfc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f4e0:	4b37      	ldr	r3, [pc, #220]	; (800f5c0 <xTaskResumeAll+0x118>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d05d      	beq.n	800f5a4 <xTaskResumeAll+0xfc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f4e8:	e02e      	b.n	800f548 <xTaskResumeAll+0xa0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4ea:	4b36      	ldr	r3, [pc, #216]	; (800f5c4 <xTaskResumeAll+0x11c>)
 800f4ec:	68db      	ldr	r3, [r3, #12]
 800f4ee:	68db      	ldr	r3, [r3, #12]
 800f4f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	3318      	adds	r3, #24
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7fe fd36 	bl	800df68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	3304      	adds	r3, #4
 800f500:	4618      	mov	r0, r3
 800f502:	f7fe fd31 	bl	800df68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f50a:	2201      	movs	r2, #1
 800f50c:	409a      	lsls	r2, r3
 800f50e:	4b2e      	ldr	r3, [pc, #184]	; (800f5c8 <xTaskResumeAll+0x120>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	4313      	orrs	r3, r2
 800f514:	4a2c      	ldr	r2, [pc, #176]	; (800f5c8 <xTaskResumeAll+0x120>)
 800f516:	6013      	str	r3, [r2, #0]
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f51c:	4613      	mov	r3, r2
 800f51e:	009b      	lsls	r3, r3, #2
 800f520:	4413      	add	r3, r2
 800f522:	009b      	lsls	r3, r3, #2
 800f524:	4a29      	ldr	r2, [pc, #164]	; (800f5cc <xTaskResumeAll+0x124>)
 800f526:	441a      	add	r2, r3
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	3304      	adds	r3, #4
 800f52c:	4619      	mov	r1, r3
 800f52e:	4610      	mov	r0, r2
 800f530:	f7fe fcbd 	bl	800deae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f538:	4b25      	ldr	r3, [pc, #148]	; (800f5d0 <xTaskResumeAll+0x128>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f53e:	429a      	cmp	r2, r3
 800f540:	d302      	bcc.n	800f548 <xTaskResumeAll+0xa0>
					{
						xYieldPending = pdTRUE;
 800f542:	4b24      	ldr	r3, [pc, #144]	; (800f5d4 <xTaskResumeAll+0x12c>)
 800f544:	2201      	movs	r2, #1
 800f546:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f548:	4b1e      	ldr	r3, [pc, #120]	; (800f5c4 <xTaskResumeAll+0x11c>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d1cc      	bne.n	800f4ea <xTaskResumeAll+0x42>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d001      	beq.n	800f55a <xTaskResumeAll+0xb2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f556:	f000 fd21 	bl	800ff9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f55a:	4b1f      	ldr	r3, [pc, #124]	; (800f5d8 <xTaskResumeAll+0x130>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d010      	beq.n	800f588 <xTaskResumeAll+0xe0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f566:	f000 f8db 	bl	800f720 <xTaskIncrementTick>
 800f56a:	4603      	mov	r3, r0
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d002      	beq.n	800f576 <xTaskResumeAll+0xce>
							{
								xYieldPending = pdTRUE;
 800f570:	4b18      	ldr	r3, [pc, #96]	; (800f5d4 <xTaskResumeAll+0x12c>)
 800f572:	2201      	movs	r2, #1
 800f574:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	3b01      	subs	r3, #1
 800f57a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d1f1      	bne.n	800f566 <xTaskResumeAll+0xbe>

						xPendedTicks = 0;
 800f582:	4b15      	ldr	r3, [pc, #84]	; (800f5d8 <xTaskResumeAll+0x130>)
 800f584:	2200      	movs	r2, #0
 800f586:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f588:	4b12      	ldr	r3, [pc, #72]	; (800f5d4 <xTaskResumeAll+0x12c>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d009      	beq.n	800f5a4 <xTaskResumeAll+0xfc>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f590:	2301      	movs	r3, #1
 800f592:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f594:	4b11      	ldr	r3, [pc, #68]	; (800f5dc <xTaskResumeAll+0x134>)
 800f596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f59a:	601a      	str	r2, [r3, #0]
 800f59c:	f3bf 8f4f 	dsb	sy
 800f5a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f5a4:	f001 fcda 	bl	8010f5c <vPortExitCritical>

	return xAlreadyYielded;
 800f5a8:	68bb      	ldr	r3, [r7, #8]
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	3710      	adds	r7, #16
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}
 800f5b2:	bf00      	nop
 800f5b4:	200043a4 	.word	0x200043a4
 800f5b8:	08015ca8 	.word	0x08015ca8
 800f5bc:	08015e64 	.word	0x08015e64
 800f5c0:	2000437c 	.word	0x2000437c
 800f5c4:	20004338 	.word	0x20004338
 800f5c8:	20004384 	.word	0x20004384
 800f5cc:	20004178 	.word	0x20004178
 800f5d0:	20004174 	.word	0x20004174
 800f5d4:	20004390 	.word	0x20004390
 800f5d8:	2000438c 	.word	0x2000438c
 800f5dc:	e000ed04 	.word	0xe000ed04

0800f5e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b083      	sub	sp, #12
 800f5e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f5e6:	4b05      	ldr	r3, [pc, #20]	; (800f5fc <xTaskGetTickCount+0x1c>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f5ec:	687b      	ldr	r3, [r7, #4]
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	370c      	adds	r7, #12
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr
 800f5fa:	bf00      	nop
 800f5fc:	20004380 	.word	0x20004380

0800f600 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800f600:	b580      	push	{r7, lr}
 800f602:	b086      	sub	sp, #24
 800f604:	af00      	add	r7, sp, #0
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	60b9      	str	r1, [r7, #8]
 800f60a:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f60c:	2300      	movs	r3, #0
 800f60e:	617b      	str	r3, [r7, #20]
 800f610:	2314      	movs	r3, #20
 800f612:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800f614:	f7ff ff3a 	bl	800f48c <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f618:	4b3b      	ldr	r3, [pc, #236]	; (800f708 <uxTaskGetSystemState+0x108>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	68ba      	ldr	r2, [r7, #8]
 800f61e:	429a      	cmp	r2, r3
 800f620:	d36a      	bcc.n	800f6f8 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	3b01      	subs	r3, #1
 800f626:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f628:	697a      	ldr	r2, [r7, #20]
 800f62a:	4613      	mov	r3, r2
 800f62c:	00db      	lsls	r3, r3, #3
 800f62e:	4413      	add	r3, r2
 800f630:	009b      	lsls	r3, r3, #2
 800f632:	461a      	mov	r2, r3
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	1898      	adds	r0, r3, r2
 800f638:	693a      	ldr	r2, [r7, #16]
 800f63a:	4613      	mov	r3, r2
 800f63c:	009b      	lsls	r3, r3, #2
 800f63e:	4413      	add	r3, r2
 800f640:	009b      	lsls	r3, r3, #2
 800f642:	4a32      	ldr	r2, [pc, #200]	; (800f70c <uxTaskGetSystemState+0x10c>)
 800f644:	4413      	add	r3, r2
 800f646:	2201      	movs	r2, #1
 800f648:	4619      	mov	r1, r3
 800f64a:	f000 fc05 	bl	800fe58 <prvListTasksWithinSingleList>
 800f64e:	4602      	mov	r2, r0
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	4413      	add	r3, r2
 800f654:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f656:	693b      	ldr	r3, [r7, #16]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d1e2      	bne.n	800f622 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f65c:	697a      	ldr	r2, [r7, #20]
 800f65e:	4613      	mov	r3, r2
 800f660:	00db      	lsls	r3, r3, #3
 800f662:	4413      	add	r3, r2
 800f664:	009b      	lsls	r3, r3, #2
 800f666:	461a      	mov	r2, r3
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	4413      	add	r3, r2
 800f66c:	4a28      	ldr	r2, [pc, #160]	; (800f710 <uxTaskGetSystemState+0x110>)
 800f66e:	6811      	ldr	r1, [r2, #0]
 800f670:	2202      	movs	r2, #2
 800f672:	4618      	mov	r0, r3
 800f674:	f000 fbf0 	bl	800fe58 <prvListTasksWithinSingleList>
 800f678:	4602      	mov	r2, r0
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	4413      	add	r3, r2
 800f67e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f680:	697a      	ldr	r2, [r7, #20]
 800f682:	4613      	mov	r3, r2
 800f684:	00db      	lsls	r3, r3, #3
 800f686:	4413      	add	r3, r2
 800f688:	009b      	lsls	r3, r3, #2
 800f68a:	461a      	mov	r2, r3
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	4413      	add	r3, r2
 800f690:	4a20      	ldr	r2, [pc, #128]	; (800f714 <uxTaskGetSystemState+0x114>)
 800f692:	6811      	ldr	r1, [r2, #0]
 800f694:	2202      	movs	r2, #2
 800f696:	4618      	mov	r0, r3
 800f698:	f000 fbde 	bl	800fe58 <prvListTasksWithinSingleList>
 800f69c:	4602      	mov	r2, r0
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	4413      	add	r3, r2
 800f6a2:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f6a4:	697a      	ldr	r2, [r7, #20]
 800f6a6:	4613      	mov	r3, r2
 800f6a8:	00db      	lsls	r3, r3, #3
 800f6aa:	4413      	add	r3, r2
 800f6ac:	009b      	lsls	r3, r3, #2
 800f6ae:	461a      	mov	r2, r3
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	2204      	movs	r2, #4
 800f6b6:	4918      	ldr	r1, [pc, #96]	; (800f718 <uxTaskGetSystemState+0x118>)
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f000 fbcd 	bl	800fe58 <prvListTasksWithinSingleList>
 800f6be:	4602      	mov	r2, r0
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	4413      	add	r3, r2
 800f6c4:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f6c6:	697a      	ldr	r2, [r7, #20]
 800f6c8:	4613      	mov	r3, r2
 800f6ca:	00db      	lsls	r3, r3, #3
 800f6cc:	4413      	add	r3, r2
 800f6ce:	009b      	lsls	r3, r3, #2
 800f6d0:	461a      	mov	r2, r3
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	4413      	add	r3, r2
 800f6d6:	2203      	movs	r2, #3
 800f6d8:	4910      	ldr	r1, [pc, #64]	; (800f71c <uxTaskGetSystemState+0x11c>)
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f000 fbbc 	bl	800fe58 <prvListTasksWithinSingleList>
 800f6e0:	4602      	mov	r2, r0
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	4413      	add	r3, r2
 800f6e6:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d004      	beq.n	800f6f8 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f6ee:	f7f4 faf0 	bl	8003cd2 <getRunTimeCounterValue>
 800f6f2:	4602      	mov	r2, r0
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800f6f8:	f7ff fed6 	bl	800f4a8 <xTaskResumeAll>

		return uxTask;
 800f6fc:	697b      	ldr	r3, [r7, #20]
	}
 800f6fe:	4618      	mov	r0, r3
 800f700:	3718      	adds	r7, #24
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}
 800f706:	bf00      	nop
 800f708:	2000437c 	.word	0x2000437c
 800f70c:	20004178 	.word	0x20004178
 800f710:	20004330 	.word	0x20004330
 800f714:	20004334 	.word	0x20004334
 800f718:	2000434c 	.word	0x2000434c
 800f71c:	20004364 	.word	0x20004364

0800f720 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b086      	sub	sp, #24
 800f724:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f726:	2300      	movs	r3, #0
 800f728:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 800f72a:	4a4e      	ldr	r2, [pc, #312]	; (800f864 <xTaskIncrementTick+0x144>)
 800f72c:	4b4e      	ldr	r3, [pc, #312]	; (800f868 <xTaskIncrementTick+0x148>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	6013      	str	r3, [r2, #0]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f732:	4b4e      	ldr	r3, [pc, #312]	; (800f86c <xTaskIncrementTick+0x14c>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	2b00      	cmp	r3, #0
 800f738:	f040 8089 	bne.w	800f84e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f73c:	4b4a      	ldr	r3, [pc, #296]	; (800f868 <xTaskIncrementTick+0x148>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	3301      	adds	r3, #1
 800f742:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f744:	4a48      	ldr	r2, [pc, #288]	; (800f868 <xTaskIncrementTick+0x148>)
 800f746:	693b      	ldr	r3, [r7, #16]
 800f748:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d11b      	bne.n	800f788 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800f750:	4b47      	ldr	r3, [pc, #284]	; (800f870 <xTaskIncrementTick+0x150>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d005      	beq.n	800f766 <xTaskIncrementTick+0x46>
 800f75a:	f640 22a9 	movw	r2, #2729	; 0xaa9
 800f75e:	4945      	ldr	r1, [pc, #276]	; (800f874 <xTaskIncrementTick+0x154>)
 800f760:	4845      	ldr	r0, [pc, #276]	; (800f878 <xTaskIncrementTick+0x158>)
 800f762:	f7f3 fabf 	bl	8002ce4 <assertFail>
 800f766:	4b42      	ldr	r3, [pc, #264]	; (800f870 <xTaskIncrementTick+0x150>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	60fb      	str	r3, [r7, #12]
 800f76c:	4b43      	ldr	r3, [pc, #268]	; (800f87c <xTaskIncrementTick+0x15c>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4a3f      	ldr	r2, [pc, #252]	; (800f870 <xTaskIncrementTick+0x150>)
 800f772:	6013      	str	r3, [r2, #0]
 800f774:	4a41      	ldr	r2, [pc, #260]	; (800f87c <xTaskIncrementTick+0x15c>)
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	6013      	str	r3, [r2, #0]
 800f77a:	4b41      	ldr	r3, [pc, #260]	; (800f880 <xTaskIncrementTick+0x160>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	3301      	adds	r3, #1
 800f780:	4a3f      	ldr	r2, [pc, #252]	; (800f880 <xTaskIncrementTick+0x160>)
 800f782:	6013      	str	r3, [r2, #0]
 800f784:	f000 fc0a 	bl	800ff9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f788:	4b3e      	ldr	r3, [pc, #248]	; (800f884 <xTaskIncrementTick+0x164>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	693a      	ldr	r2, [r7, #16]
 800f78e:	429a      	cmp	r2, r3
 800f790:	d348      	bcc.n	800f824 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f792:	4b37      	ldr	r3, [pc, #220]	; (800f870 <xTaskIncrementTick+0x150>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d104      	bne.n	800f7a6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f79c:	4b39      	ldr	r3, [pc, #228]	; (800f884 <xTaskIncrementTick+0x164>)
 800f79e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f7a2:	601a      	str	r2, [r3, #0]
					break;
 800f7a4:	e03e      	b.n	800f824 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7a6:	4b32      	ldr	r3, [pc, #200]	; (800f870 <xTaskIncrementTick+0x150>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	68db      	ldr	r3, [r3, #12]
 800f7ac:	68db      	ldr	r3, [r3, #12]
 800f7ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f7b6:	693a      	ldr	r2, [r7, #16]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d203      	bcs.n	800f7c6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f7be:	4a31      	ldr	r2, [pc, #196]	; (800f884 <xTaskIncrementTick+0x164>)
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f7c4:	e02e      	b.n	800f824 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	3304      	adds	r3, #4
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7fe fbcc 	bl	800df68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d004      	beq.n	800f7e2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	3318      	adds	r3, #24
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7fe fbc3 	bl	800df68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7e6:	2201      	movs	r2, #1
 800f7e8:	409a      	lsls	r2, r3
 800f7ea:	4b27      	ldr	r3, [pc, #156]	; (800f888 <xTaskIncrementTick+0x168>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	4313      	orrs	r3, r2
 800f7f0:	4a25      	ldr	r2, [pc, #148]	; (800f888 <xTaskIncrementTick+0x168>)
 800f7f2:	6013      	str	r3, [r2, #0]
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7f8:	4613      	mov	r3, r2
 800f7fa:	009b      	lsls	r3, r3, #2
 800f7fc:	4413      	add	r3, r2
 800f7fe:	009b      	lsls	r3, r3, #2
 800f800:	4a22      	ldr	r2, [pc, #136]	; (800f88c <xTaskIncrementTick+0x16c>)
 800f802:	441a      	add	r2, r3
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	3304      	adds	r3, #4
 800f808:	4619      	mov	r1, r3
 800f80a:	4610      	mov	r0, r2
 800f80c:	f7fe fb4f 	bl	800deae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f814:	4b1e      	ldr	r3, [pc, #120]	; (800f890 <xTaskIncrementTick+0x170>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d3b9      	bcc.n	800f792 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800f81e:	2301      	movs	r3, #1
 800f820:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f822:	e7b6      	b.n	800f792 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f824:	4b1a      	ldr	r3, [pc, #104]	; (800f890 <xTaskIncrementTick+0x170>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f82a:	4918      	ldr	r1, [pc, #96]	; (800f88c <xTaskIncrementTick+0x16c>)
 800f82c:	4613      	mov	r3, r2
 800f82e:	009b      	lsls	r3, r3, #2
 800f830:	4413      	add	r3, r2
 800f832:	009b      	lsls	r3, r3, #2
 800f834:	440b      	add	r3, r1
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	2b01      	cmp	r3, #1
 800f83a:	d901      	bls.n	800f840 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 800f83c:	2301      	movs	r3, #1
 800f83e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f840:	4b14      	ldr	r3, [pc, #80]	; (800f894 <xTaskIncrementTick+0x174>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d007      	beq.n	800f858 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800f848:	2301      	movs	r3, #1
 800f84a:	617b      	str	r3, [r7, #20]
 800f84c:	e004      	b.n	800f858 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f84e:	4b12      	ldr	r3, [pc, #72]	; (800f898 <xTaskIncrementTick+0x178>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	3301      	adds	r3, #1
 800f854:	4a10      	ldr	r2, [pc, #64]	; (800f898 <xTaskIncrementTick+0x178>)
 800f856:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f858:	697b      	ldr	r3, [r7, #20]
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3718      	adds	r7, #24
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
 800f862:	bf00      	nop
 800f864:	e0000008 	.word	0xe0000008
 800f868:	20004380 	.word	0x20004380
 800f86c:	200043a4 	.word	0x200043a4
 800f870:	20004330 	.word	0x20004330
 800f874:	08015ca8 	.word	0x08015ca8
 800f878:	08015eb0 	.word	0x08015eb0
 800f87c:	20004334 	.word	0x20004334
 800f880:	20004394 	.word	0x20004394
 800f884:	2000439c 	.word	0x2000439c
 800f888:	20004384 	.word	0x20004384
 800f88c:	20004178 	.word	0x20004178
 800f890:	20004174 	.word	0x20004174
 800f894:	20004390 	.word	0x20004390
 800f898:	2000438c 	.word	0x2000438c

0800f89c <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b084      	sub	sp, #16
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d103      	bne.n	800f8b4 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800f8ac:	4b08      	ldr	r3, [pc, #32]	; (800f8d0 <vTaskSetApplicationTaskTag+0x34>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	60fb      	str	r3, [r7, #12]
 800f8b2:	e001      	b.n	800f8b8 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 800f8b8:	f001 fb22 	bl	8010f00 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	683a      	ldr	r2, [r7, #0]
 800f8c0:	659a      	str	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800f8c2:	f001 fb4b 	bl	8010f5c <vPortExitCritical>
	}
 800f8c6:	bf00      	nop
 800f8c8:	3710      	adds	r7, #16
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	20004174 	.word	0x20004174

0800f8d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b084      	sub	sp, #16
 800f8d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f8da:	4b44      	ldr	r3, [pc, #272]	; (800f9ec <vTaskSwitchContext+0x118>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d003      	beq.n	800f8ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f8e2:	4b43      	ldr	r3, [pc, #268]	; (800f9f0 <vTaskSwitchContext+0x11c>)
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f8e8:	e07b      	b.n	800f9e2 <vTaskSwitchContext+0x10e>
		xYieldPending = pdFALSE;
 800f8ea:	4b41      	ldr	r3, [pc, #260]	; (800f9f0 <vTaskSwitchContext+0x11c>)
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f8f0:	f7f4 f9ef 	bl	8003cd2 <getRunTimeCounterValue>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	4a3f      	ldr	r2, [pc, #252]	; (800f9f4 <vTaskSwitchContext+0x120>)
 800f8f8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f8fa:	4b3e      	ldr	r3, [pc, #248]	; (800f9f4 <vTaskSwitchContext+0x120>)
 800f8fc:	681a      	ldr	r2, [r3, #0]
 800f8fe:	4b3e      	ldr	r3, [pc, #248]	; (800f9f8 <vTaskSwitchContext+0x124>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	429a      	cmp	r2, r3
 800f904:	d909      	bls.n	800f91a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f906:	4b3d      	ldr	r3, [pc, #244]	; (800f9fc <vTaskSwitchContext+0x128>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f90c:	4a39      	ldr	r2, [pc, #228]	; (800f9f4 <vTaskSwitchContext+0x120>)
 800f90e:	6810      	ldr	r0, [r2, #0]
 800f910:	4a39      	ldr	r2, [pc, #228]	; (800f9f8 <vTaskSwitchContext+0x124>)
 800f912:	6812      	ldr	r2, [r2, #0]
 800f914:	1a82      	subs	r2, r0, r2
 800f916:	440a      	add	r2, r1
 800f918:	65da      	str	r2, [r3, #92]	; 0x5c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800f91a:	4b36      	ldr	r3, [pc, #216]	; (800f9f4 <vTaskSwitchContext+0x120>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	4a36      	ldr	r2, [pc, #216]	; (800f9f8 <vTaskSwitchContext+0x124>)
 800f920:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f922:	4b36      	ldr	r3, [pc, #216]	; (800f9fc <vTaskSwitchContext+0x128>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	681a      	ldr	r2, [r3, #0]
 800f928:	4b34      	ldr	r3, [pc, #208]	; (800f9fc <vTaskSwitchContext+0x128>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f92e:	429a      	cmp	r2, r3
 800f930:	d808      	bhi.n	800f944 <vTaskSwitchContext+0x70>
 800f932:	4b32      	ldr	r3, [pc, #200]	; (800f9fc <vTaskSwitchContext+0x128>)
 800f934:	681a      	ldr	r2, [r3, #0]
 800f936:	4b31      	ldr	r3, [pc, #196]	; (800f9fc <vTaskSwitchContext+0x128>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	3334      	adds	r3, #52	; 0x34
 800f93c:	4619      	mov	r1, r3
 800f93e:	4610      	mov	r0, r2
 800f940:	f7f4 f9cf 	bl	8003ce2 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800f944:	4b2d      	ldr	r3, [pc, #180]	; (800f9fc <vTaskSwitchContext+0x128>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	4a2d      	ldr	r2, [pc, #180]	; (800fa00 <vTaskSwitchContext+0x12c>)
 800f94a:	6812      	ldr	r2, [r2, #0]
 800f94c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f950:	4b2c      	ldr	r3, [pc, #176]	; (800fa04 <vTaskSwitchContext+0x130>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	fab3 f383 	clz	r3, r3
 800f95c:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800f95e:	78fb      	ldrb	r3, [r7, #3]
 800f960:	f1c3 031f 	rsb	r3, r3, #31
 800f964:	60fb      	str	r3, [r7, #12]
 800f966:	4928      	ldr	r1, [pc, #160]	; (800fa08 <vTaskSwitchContext+0x134>)
 800f968:	68fa      	ldr	r2, [r7, #12]
 800f96a:	4613      	mov	r3, r2
 800f96c:	009b      	lsls	r3, r3, #2
 800f96e:	4413      	add	r3, r2
 800f970:	009b      	lsls	r3, r3, #2
 800f972:	440b      	add	r3, r1
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d105      	bne.n	800f986 <vTaskSwitchContext+0xb2>
 800f97a:	f640 32e1 	movw	r2, #3041	; 0xbe1
 800f97e:	4923      	ldr	r1, [pc, #140]	; (800fa0c <vTaskSwitchContext+0x138>)
 800f980:	4823      	ldr	r0, [pc, #140]	; (800fa10 <vTaskSwitchContext+0x13c>)
 800f982:	f7f3 f9af 	bl	8002ce4 <assertFail>
 800f986:	68fa      	ldr	r2, [r7, #12]
 800f988:	4613      	mov	r3, r2
 800f98a:	009b      	lsls	r3, r3, #2
 800f98c:	4413      	add	r3, r2
 800f98e:	009b      	lsls	r3, r3, #2
 800f990:	4a1d      	ldr	r2, [pc, #116]	; (800fa08 <vTaskSwitchContext+0x134>)
 800f992:	4413      	add	r3, r2
 800f994:	60bb      	str	r3, [r7, #8]
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	685b      	ldr	r3, [r3, #4]
 800f99a:	685a      	ldr	r2, [r3, #4]
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	605a      	str	r2, [r3, #4]
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	685a      	ldr	r2, [r3, #4]
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	3308      	adds	r3, #8
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d104      	bne.n	800f9b6 <vTaskSwitchContext+0xe2>
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	685b      	ldr	r3, [r3, #4]
 800f9b0:	685a      	ldr	r2, [r3, #4]
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	605a      	str	r2, [r3, #4]
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	685b      	ldr	r3, [r3, #4]
 800f9ba:	68db      	ldr	r3, [r3, #12]
 800f9bc:	4a0f      	ldr	r2, [pc, #60]	; (800f9fc <vTaskSwitchContext+0x128>)
 800f9be:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800f9c0:	4b0e      	ldr	r3, [pc, #56]	; (800f9fc <vTaskSwitchContext+0x128>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	3334      	adds	r3, #52	; 0x34
 800f9c6:	4a13      	ldr	r2, [pc, #76]	; (800fa14 <vTaskSwitchContext+0x140>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800f9cc:	4b0b      	ldr	r3, [pc, #44]	; (800f9fc <vTaskSwitchContext+0x128>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f9d4:	4a0a      	ldr	r2, [pc, #40]	; (800fa00 <vTaskSwitchContext+0x12c>)
 800f9d6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f9d8:	4b08      	ldr	r3, [pc, #32]	; (800f9fc <vTaskSwitchContext+0x128>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	3360      	adds	r3, #96	; 0x60
 800f9de:	4a0e      	ldr	r2, [pc, #56]	; (800fa18 <vTaskSwitchContext+0x144>)
 800f9e0:	6013      	str	r3, [r2, #0]
}
 800f9e2:	bf00      	nop
 800f9e4:	3710      	adds	r7, #16
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}
 800f9ea:	bf00      	nop
 800f9ec:	200043a4 	.word	0x200043a4
 800f9f0:	20004390 	.word	0x20004390
 800f9f4:	200043ac 	.word	0x200043ac
 800f9f8:	200043a8 	.word	0x200043a8
 800f9fc:	20004174 	.word	0x20004174
 800fa00:	20004378 	.word	0x20004378
 800fa04:	20004384 	.word	0x20004384
 800fa08:	20004178 	.word	0x20004178
 800fa0c:	08015ca8 	.word	0x08015ca8
 800fa10:	08015edc 	.word	0x08015edc
 800fa14:	e0000004 	.word	0xe0000004
 800fa18:	2000043c 	.word	0x2000043c

0800fa1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b082      	sub	sp, #8
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
 800fa24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d105      	bne.n	800fa38 <vTaskPlaceOnEventList+0x1c>
 800fa2c:	f640 32fa 	movw	r2, #3066	; 0xbfa
 800fa30:	4909      	ldr	r1, [pc, #36]	; (800fa58 <vTaskPlaceOnEventList+0x3c>)
 800fa32:	480a      	ldr	r0, [pc, #40]	; (800fa5c <vTaskPlaceOnEventList+0x40>)
 800fa34:	f7f3 f956 	bl	8002ce4 <assertFail>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fa38:	4b09      	ldr	r3, [pc, #36]	; (800fa60 <vTaskPlaceOnEventList+0x44>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	3318      	adds	r3, #24
 800fa3e:	4619      	mov	r1, r3
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f7fe fa58 	bl	800def6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fa46:	2101      	movs	r1, #1
 800fa48:	6838      	ldr	r0, [r7, #0]
 800fa4a:	f000 fced 	bl	8010428 <prvAddCurrentTaskToDelayedList>
}
 800fa4e:	bf00      	nop
 800fa50:	3708      	adds	r7, #8
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}
 800fa56:	bf00      	nop
 800fa58:	08015ca8 	.word	0x08015ca8
 800fa5c:	08015f24 	.word	0x08015f24
 800fa60:	20004174 	.word	0x20004174

0800fa64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b084      	sub	sp, #16
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	60f8      	str	r0, [r7, #12]
 800fa6c:	60b9      	str	r1, [r7, #8]
 800fa6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d105      	bne.n	800fa82 <vTaskPlaceOnEventListRestricted+0x1e>
 800fa76:	f640 4225 	movw	r2, #3109	; 0xc25
 800fa7a:	490c      	ldr	r1, [pc, #48]	; (800faac <vTaskPlaceOnEventListRestricted+0x48>)
 800fa7c:	480c      	ldr	r0, [pc, #48]	; (800fab0 <vTaskPlaceOnEventListRestricted+0x4c>)
 800fa7e:	f7f3 f931 	bl	8002ce4 <assertFail>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fa82:	4b0c      	ldr	r3, [pc, #48]	; (800fab4 <vTaskPlaceOnEventListRestricted+0x50>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	3318      	adds	r3, #24
 800fa88:	4619      	mov	r1, r3
 800fa8a:	68f8      	ldr	r0, [r7, #12]
 800fa8c:	f7fe fa0f 	bl	800deae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d002      	beq.n	800fa9c <vTaskPlaceOnEventListRestricted+0x38>
		{
			xTicksToWait = portMAX_DELAY;
 800fa96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fa9a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fa9c:	6879      	ldr	r1, [r7, #4]
 800fa9e:	68b8      	ldr	r0, [r7, #8]
 800faa0:	f000 fcc2 	bl	8010428 <prvAddCurrentTaskToDelayedList>
	}
 800faa4:	bf00      	nop
 800faa6:	3710      	adds	r7, #16
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	08015ca8 	.word	0x08015ca8
 800fab0:	08015f24 	.word	0x08015f24
 800fab4:	20004174 	.word	0x20004174

0800fab8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b084      	sub	sp, #16
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	68db      	ldr	r3, [r3, #12]
 800fac6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d105      	bne.n	800fada <xTaskRemoveFromEventList+0x22>
 800face:	f640 4255 	movw	r2, #3157	; 0xc55
 800fad2:	4922      	ldr	r1, [pc, #136]	; (800fb5c <xTaskRemoveFromEventList+0xa4>)
 800fad4:	4822      	ldr	r0, [pc, #136]	; (800fb60 <xTaskRemoveFromEventList+0xa8>)
 800fad6:	f7f3 f905 	bl	8002ce4 <assertFail>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	3318      	adds	r3, #24
 800fade:	4618      	mov	r0, r3
 800fae0:	f7fe fa42 	bl	800df68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fae4:	4b1f      	ldr	r3, [pc, #124]	; (800fb64 <xTaskRemoveFromEventList+0xac>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d11c      	bne.n	800fb26 <xTaskRemoveFromEventList+0x6e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	3304      	adds	r3, #4
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7fe fa39 	bl	800df68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fafa:	2201      	movs	r2, #1
 800fafc:	409a      	lsls	r2, r3
 800fafe:	4b1a      	ldr	r3, [pc, #104]	; (800fb68 <xTaskRemoveFromEventList+0xb0>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	4313      	orrs	r3, r2
 800fb04:	4a18      	ldr	r2, [pc, #96]	; (800fb68 <xTaskRemoveFromEventList+0xb0>)
 800fb06:	6013      	str	r3, [r2, #0]
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb0c:	4613      	mov	r3, r2
 800fb0e:	009b      	lsls	r3, r3, #2
 800fb10:	4413      	add	r3, r2
 800fb12:	009b      	lsls	r3, r3, #2
 800fb14:	4a15      	ldr	r2, [pc, #84]	; (800fb6c <xTaskRemoveFromEventList+0xb4>)
 800fb16:	441a      	add	r2, r3
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	3304      	adds	r3, #4
 800fb1c:	4619      	mov	r1, r3
 800fb1e:	4610      	mov	r0, r2
 800fb20:	f7fe f9c5 	bl	800deae <vListInsertEnd>
 800fb24:	e005      	b.n	800fb32 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	3318      	adds	r3, #24
 800fb2a:	4619      	mov	r1, r3
 800fb2c:	4810      	ldr	r0, [pc, #64]	; (800fb70 <xTaskRemoveFromEventList+0xb8>)
 800fb2e:	f7fe f9be 	bl	800deae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fb32:	68bb      	ldr	r3, [r7, #8]
 800fb34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb36:	4b0f      	ldr	r3, [pc, #60]	; (800fb74 <xTaskRemoveFromEventList+0xbc>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	d905      	bls.n	800fb4c <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fb40:	2301      	movs	r3, #1
 800fb42:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fb44:	4b0c      	ldr	r3, [pc, #48]	; (800fb78 <xTaskRemoveFromEventList+0xc0>)
 800fb46:	2201      	movs	r2, #1
 800fb48:	601a      	str	r2, [r3, #0]
 800fb4a:	e001      	b.n	800fb50 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800fb50:	68fb      	ldr	r3, [r7, #12]
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	3710      	adds	r7, #16
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
 800fb5a:	bf00      	nop
 800fb5c:	08015ca8 	.word	0x08015ca8
 800fb60:	08015f4c 	.word	0x08015f4c
 800fb64:	200043a4 	.word	0x200043a4
 800fb68:	20004384 	.word	0x20004384
 800fb6c:	20004178 	.word	0x20004178
 800fb70:	20004338 	.word	0x20004338
 800fb74:	20004174 	.word	0x20004174
 800fb78:	20004390 	.word	0x20004390

0800fb7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b083      	sub	sp, #12
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fb84:	4b06      	ldr	r3, [pc, #24]	; (800fba0 <vTaskInternalSetTimeOutState+0x24>)
 800fb86:	681a      	ldr	r2, [r3, #0]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fb8c:	4b05      	ldr	r3, [pc, #20]	; (800fba4 <vTaskInternalSetTimeOutState+0x28>)
 800fb8e:	681a      	ldr	r2, [r3, #0]
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	605a      	str	r2, [r3, #4]
}
 800fb94:	bf00      	nop
 800fb96:	370c      	adds	r7, #12
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9e:	4770      	bx	lr
 800fba0:	20004394 	.word	0x20004394
 800fba4:	20004380 	.word	0x20004380

0800fba8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b086      	sub	sp, #24
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d105      	bne.n	800fbc4 <xTaskCheckForTimeOut+0x1c>
 800fbb8:	f640 42ce 	movw	r2, #3278	; 0xcce
 800fbbc:	4924      	ldr	r1, [pc, #144]	; (800fc50 <xTaskCheckForTimeOut+0xa8>)
 800fbbe:	4825      	ldr	r0, [pc, #148]	; (800fc54 <xTaskCheckForTimeOut+0xac>)
 800fbc0:	f7f3 f890 	bl	8002ce4 <assertFail>
	configASSERT( pxTicksToWait );
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d105      	bne.n	800fbd6 <xTaskCheckForTimeOut+0x2e>
 800fbca:	f640 42cf 	movw	r2, #3279	; 0xccf
 800fbce:	4920      	ldr	r1, [pc, #128]	; (800fc50 <xTaskCheckForTimeOut+0xa8>)
 800fbd0:	4821      	ldr	r0, [pc, #132]	; (800fc58 <xTaskCheckForTimeOut+0xb0>)
 800fbd2:	f7f3 f887 	bl	8002ce4 <assertFail>

	taskENTER_CRITICAL();
 800fbd6:	f001 f993 	bl	8010f00 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fbda:	4b20      	ldr	r3, [pc, #128]	; (800fc5c <xTaskCheckForTimeOut+0xb4>)
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	693a      	ldr	r2, [r7, #16]
 800fbe6:	1ad3      	subs	r3, r2, r3
 800fbe8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fbf2:	d102      	bne.n	800fbfa <xTaskCheckForTimeOut+0x52>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	617b      	str	r3, [r7, #20]
 800fbf8:	e023      	b.n	800fc42 <xTaskCheckForTimeOut+0x9a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681a      	ldr	r2, [r3, #0]
 800fbfe:	4b18      	ldr	r3, [pc, #96]	; (800fc60 <xTaskCheckForTimeOut+0xb8>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d007      	beq.n	800fc16 <xTaskCheckForTimeOut+0x6e>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	685b      	ldr	r3, [r3, #4]
 800fc0a:	693a      	ldr	r2, [r7, #16]
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d302      	bcc.n	800fc16 <xTaskCheckForTimeOut+0x6e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fc10:	2301      	movs	r3, #1
 800fc12:	617b      	str	r3, [r7, #20]
 800fc14:	e015      	b.n	800fc42 <xTaskCheckForTimeOut+0x9a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	68fa      	ldr	r2, [r7, #12]
 800fc1c:	429a      	cmp	r2, r3
 800fc1e:	d20b      	bcs.n	800fc38 <xTaskCheckForTimeOut+0x90>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	681a      	ldr	r2, [r3, #0]
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	1ad2      	subs	r2, r2, r3
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f7ff ffa5 	bl	800fb7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fc32:	2300      	movs	r3, #0
 800fc34:	617b      	str	r3, [r7, #20]
 800fc36:	e004      	b.n	800fc42 <xTaskCheckForTimeOut+0x9a>
		}
		else
		{
			*pxTicksToWait = 0;
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fc3e:	2301      	movs	r3, #1
 800fc40:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800fc42:	f001 f98b 	bl	8010f5c <vPortExitCritical>

	return xReturn;
 800fc46:	697b      	ldr	r3, [r7, #20]
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3718      	adds	r7, #24
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	08015ca8 	.word	0x08015ca8
 800fc54:	08015f7c 	.word	0x08015f7c
 800fc58:	08015f88 	.word	0x08015f88
 800fc5c:	20004380 	.word	0x20004380
 800fc60:	20004394 	.word	0x20004394

0800fc64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fc64:	b480      	push	{r7}
 800fc66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fc68:	4b03      	ldr	r3, [pc, #12]	; (800fc78 <vTaskMissedYield+0x14>)
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	601a      	str	r2, [r3, #0]
}
 800fc6e:	bf00      	nop
 800fc70:	46bd      	mov	sp, r7
 800fc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc76:	4770      	bx	lr
 800fc78:	20004390 	.word	0x20004390

0800fc7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fc84:	f000 f854 	bl	800fd30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fc88:	4b07      	ldr	r3, [pc, #28]	; (800fca8 <prvIdleTask+0x2c>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	2b01      	cmp	r3, #1
 800fc8e:	d907      	bls.n	800fca0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800fc90:	4b06      	ldr	r3, [pc, #24]	; (800fcac <prvIdleTask+0x30>)
 800fc92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc96:	601a      	str	r2, [r3, #0]
 800fc98:	f3bf 8f4f 	dsb	sy
 800fc9c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800fca0:	f7f5 f8bc 	bl	8004e1c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800fca4:	e7ee      	b.n	800fc84 <prvIdleTask+0x8>
 800fca6:	bf00      	nop
 800fca8:	20004178 	.word	0x20004178
 800fcac:	e000ed04 	.word	0xe000ed04

0800fcb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b082      	sub	sp, #8
 800fcb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	607b      	str	r3, [r7, #4]
 800fcba:	e00c      	b.n	800fcd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fcbc:	687a      	ldr	r2, [r7, #4]
 800fcbe:	4613      	mov	r3, r2
 800fcc0:	009b      	lsls	r3, r3, #2
 800fcc2:	4413      	add	r3, r2
 800fcc4:	009b      	lsls	r3, r3, #2
 800fcc6:	4a12      	ldr	r2, [pc, #72]	; (800fd10 <prvInitialiseTaskLists+0x60>)
 800fcc8:	4413      	add	r3, r2
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7fe f8c2 	bl	800de54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	607b      	str	r3, [r7, #4]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	2b13      	cmp	r3, #19
 800fcda:	d9ef      	bls.n	800fcbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fcdc:	480d      	ldr	r0, [pc, #52]	; (800fd14 <prvInitialiseTaskLists+0x64>)
 800fcde:	f7fe f8b9 	bl	800de54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fce2:	480d      	ldr	r0, [pc, #52]	; (800fd18 <prvInitialiseTaskLists+0x68>)
 800fce4:	f7fe f8b6 	bl	800de54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fce8:	480c      	ldr	r0, [pc, #48]	; (800fd1c <prvInitialiseTaskLists+0x6c>)
 800fcea:	f7fe f8b3 	bl	800de54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fcee:	480c      	ldr	r0, [pc, #48]	; (800fd20 <prvInitialiseTaskLists+0x70>)
 800fcf0:	f7fe f8b0 	bl	800de54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fcf4:	480b      	ldr	r0, [pc, #44]	; (800fd24 <prvInitialiseTaskLists+0x74>)
 800fcf6:	f7fe f8ad 	bl	800de54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fcfa:	4b0b      	ldr	r3, [pc, #44]	; (800fd28 <prvInitialiseTaskLists+0x78>)
 800fcfc:	4a05      	ldr	r2, [pc, #20]	; (800fd14 <prvInitialiseTaskLists+0x64>)
 800fcfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fd00:	4b0a      	ldr	r3, [pc, #40]	; (800fd2c <prvInitialiseTaskLists+0x7c>)
 800fd02:	4a05      	ldr	r2, [pc, #20]	; (800fd18 <prvInitialiseTaskLists+0x68>)
 800fd04:	601a      	str	r2, [r3, #0]
}
 800fd06:	bf00      	nop
 800fd08:	3708      	adds	r7, #8
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
 800fd0e:	bf00      	nop
 800fd10:	20004178 	.word	0x20004178
 800fd14:	20004308 	.word	0x20004308
 800fd18:	2000431c 	.word	0x2000431c
 800fd1c:	20004338 	.word	0x20004338
 800fd20:	2000434c 	.word	0x2000434c
 800fd24:	20004364 	.word	0x20004364
 800fd28:	20004330 	.word	0x20004330
 800fd2c:	20004334 	.word	0x20004334

0800fd30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fd36:	e019      	b.n	800fd6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fd38:	f001 f8e2 	bl	8010f00 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd3c:	4b10      	ldr	r3, [pc, #64]	; (800fd80 <prvCheckTasksWaitingTermination+0x50>)
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	68db      	ldr	r3, [r3, #12]
 800fd42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	3304      	adds	r3, #4
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7fe f90d 	bl	800df68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fd4e:	4b0d      	ldr	r3, [pc, #52]	; (800fd84 <prvCheckTasksWaitingTermination+0x54>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	3b01      	subs	r3, #1
 800fd54:	4a0b      	ldr	r2, [pc, #44]	; (800fd84 <prvCheckTasksWaitingTermination+0x54>)
 800fd56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fd58:	4b0b      	ldr	r3, [pc, #44]	; (800fd88 <prvCheckTasksWaitingTermination+0x58>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	3b01      	subs	r3, #1
 800fd5e:	4a0a      	ldr	r2, [pc, #40]	; (800fd88 <prvCheckTasksWaitingTermination+0x58>)
 800fd60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fd62:	f001 f8fb 	bl	8010f5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 f8e4 	bl	800ff34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fd6c:	4b06      	ldr	r3, [pc, #24]	; (800fd88 <prvCheckTasksWaitingTermination+0x58>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d1e1      	bne.n	800fd38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fd74:	bf00      	nop
 800fd76:	bf00      	nop
 800fd78:	3708      	adds	r7, #8
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop
 800fd80:	2000434c 	.word	0x2000434c
 800fd84:	2000437c 	.word	0x2000437c
 800fd88:	20004360 	.word	0x20004360

0800fd8c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b086      	sub	sp, #24
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	60f8      	str	r0, [r7, #12]
 800fd94:	60b9      	str	r1, [r7, #8]
 800fd96:	607a      	str	r2, [r7, #4]
 800fd98:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d102      	bne.n	800fda6 <vTaskGetInfo+0x1a>
 800fda0:	4b2c      	ldr	r3, [pc, #176]	; (800fe54 <vTaskGetInfo+0xc8>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	e000      	b.n	800fda8 <vTaskGetInfo+0x1c>
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	697a      	ldr	r2, [r7, #20]
 800fdae:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fdb6:	68bb      	ldr	r3, [r7, #8]
 800fdb8:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdbe:	68bb      	ldr	r3, [r7, #8]
 800fdc0:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800fdd2:	697b      	ldr	r3, [r7, #20]
 800fdd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800fde2:	78fb      	ldrb	r3, [r7, #3]
 800fde4:	2b05      	cmp	r3, #5
 800fde6:	d01a      	beq.n	800fe1e <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800fde8:	4b1a      	ldr	r3, [pc, #104]	; (800fe54 <vTaskGetInfo+0xc8>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	697a      	ldr	r2, [r7, #20]
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	d103      	bne.n	800fdfa <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	731a      	strb	r2, [r3, #12]
 800fdf8:	e018      	b.n	800fe2c <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	78fa      	ldrb	r2, [r7, #3]
 800fdfe:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800fe00:	78fb      	ldrb	r3, [r7, #3]
 800fe02:	2b03      	cmp	r3, #3
 800fe04:	d112      	bne.n	800fe2c <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800fe06:	f7ff fb41 	bl	800f48c <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d002      	beq.n	800fe18 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	2202      	movs	r2, #2
 800fe16:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800fe18:	f7ff fb46 	bl	800f4a8 <xTaskResumeAll>
 800fe1c:	e006      	b.n	800fe2c <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800fe1e:	6978      	ldr	r0, [r7, #20]
 800fe20:	f7ff fa54 	bl	800f2cc <eTaskGetState>
 800fe24:	4603      	mov	r3, r0
 800fe26:	461a      	mov	r2, r3
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d009      	beq.n	800fe46 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe36:	4618      	mov	r0, r3
 800fe38:	f000 f860 	bl	800fefc <prvTaskCheckFreeStackSpace>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	461a      	mov	r2, r3
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800fe44:	e002      	b.n	800fe4c <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	841a      	strh	r2, [r3, #32]
	}
 800fe4c:	bf00      	nop
 800fe4e:	3718      	adds	r7, #24
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}
 800fe54:	20004174 	.word	0x20004174

0800fe58 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b08a      	sub	sp, #40	; 0x28
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	60f8      	str	r0, [r7, #12]
 800fe60:	60b9      	str	r1, [r7, #8]
 800fe62:	4613      	mov	r3, r2
 800fe64:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800fe66:	2300      	movs	r3, #0
 800fe68:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d03f      	beq.n	800fef2 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	623b      	str	r3, [r7, #32]
 800fe76:	6a3b      	ldr	r3, [r7, #32]
 800fe78:	685b      	ldr	r3, [r3, #4]
 800fe7a:	685a      	ldr	r2, [r3, #4]
 800fe7c:	6a3b      	ldr	r3, [r7, #32]
 800fe7e:	605a      	str	r2, [r3, #4]
 800fe80:	6a3b      	ldr	r3, [r7, #32]
 800fe82:	685a      	ldr	r2, [r3, #4]
 800fe84:	6a3b      	ldr	r3, [r7, #32]
 800fe86:	3308      	adds	r3, #8
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d104      	bne.n	800fe96 <prvListTasksWithinSingleList+0x3e>
 800fe8c:	6a3b      	ldr	r3, [r7, #32]
 800fe8e:	685b      	ldr	r3, [r3, #4]
 800fe90:	685a      	ldr	r2, [r3, #4]
 800fe92:	6a3b      	ldr	r3, [r7, #32]
 800fe94:	605a      	str	r2, [r3, #4]
 800fe96:	6a3b      	ldr	r3, [r7, #32]
 800fe98:	685b      	ldr	r3, [r3, #4]
 800fe9a:	68db      	ldr	r3, [r3, #12]
 800fe9c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	61bb      	str	r3, [r7, #24]
 800fea2:	69bb      	ldr	r3, [r7, #24]
 800fea4:	685b      	ldr	r3, [r3, #4]
 800fea6:	685a      	ldr	r2, [r3, #4]
 800fea8:	69bb      	ldr	r3, [r7, #24]
 800feaa:	605a      	str	r2, [r3, #4]
 800feac:	69bb      	ldr	r3, [r7, #24]
 800feae:	685a      	ldr	r2, [r3, #4]
 800feb0:	69bb      	ldr	r3, [r7, #24]
 800feb2:	3308      	adds	r3, #8
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d104      	bne.n	800fec2 <prvListTasksWithinSingleList+0x6a>
 800feb8:	69bb      	ldr	r3, [r7, #24]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	685a      	ldr	r2, [r3, #4]
 800febe:	69bb      	ldr	r3, [r7, #24]
 800fec0:	605a      	str	r2, [r3, #4]
 800fec2:	69bb      	ldr	r3, [r7, #24]
 800fec4:	685b      	ldr	r3, [r3, #4]
 800fec6:	68db      	ldr	r3, [r3, #12]
 800fec8:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800feca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fecc:	4613      	mov	r3, r2
 800fece:	00db      	lsls	r3, r3, #3
 800fed0:	4413      	add	r3, r2
 800fed2:	009b      	lsls	r3, r3, #2
 800fed4:	461a      	mov	r2, r3
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	1899      	adds	r1, r3, r2
 800feda:	79fb      	ldrb	r3, [r7, #7]
 800fedc:	2201      	movs	r2, #1
 800fede:	6978      	ldr	r0, [r7, #20]
 800fee0:	f7ff ff54 	bl	800fd8c <vTaskGetInfo>
				uxTask++;
 800fee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee6:	3301      	adds	r3, #1
 800fee8:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800feea:	697a      	ldr	r2, [r7, #20]
 800feec:	69fb      	ldr	r3, [r7, #28]
 800feee:	429a      	cmp	r2, r3
 800fef0:	d1d5      	bne.n	800fe9e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800fef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800fef4:	4618      	mov	r0, r3
 800fef6:	3728      	adds	r7, #40	; 0x28
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800fefc:	b480      	push	{r7}
 800fefe:	b085      	sub	sp, #20
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800ff04:	2300      	movs	r3, #0
 800ff06:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ff08:	e005      	b.n	800ff16 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	3301      	adds	r3, #1
 800ff14:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	781b      	ldrb	r3, [r3, #0]
 800ff1a:	2ba5      	cmp	r3, #165	; 0xa5
 800ff1c:	d0f5      	beq.n	800ff0a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	089b      	lsrs	r3, r3, #2
 800ff22:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	b29b      	uxth	r3, r3
	}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	3714      	adds	r7, #20
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff32:	4770      	bx	lr

0800ff34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b082      	sub	sp, #8
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	3360      	adds	r3, #96	; 0x60
 800ff40:	4618      	mov	r0, r3
 800ff42:	f002 fec9 	bl	8012cd8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d108      	bne.n	800ff62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff54:	4618      	mov	r0, r3
 800ff56:	f001 f9a5 	bl	80112a4 <vPortFree>
				vPortFree( pxTCB );
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f001 f9a2 	bl	80112a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ff60:	e013      	b.n	800ff8a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	d103      	bne.n	800ff74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f001 f999 	bl	80112a4 <vPortFree>
	}
 800ff72:	e00a      	b.n	800ff8a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ff7a:	2b02      	cmp	r3, #2
 800ff7c:	d005      	beq.n	800ff8a <prvDeleteTCB+0x56>
 800ff7e:	f640 725d 	movw	r2, #3933	; 0xf5d
 800ff82:	4904      	ldr	r1, [pc, #16]	; (800ff94 <prvDeleteTCB+0x60>)
 800ff84:	4804      	ldr	r0, [pc, #16]	; (800ff98 <prvDeleteTCB+0x64>)
 800ff86:	f7f2 fead 	bl	8002ce4 <assertFail>
	}
 800ff8a:	bf00      	nop
 800ff8c:	3708      	adds	r7, #8
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}
 800ff92:	bf00      	nop
 800ff94:	08015ca8 	.word	0x08015ca8
 800ff98:	08015f98 	.word	0x08015f98

0800ff9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b083      	sub	sp, #12
 800ffa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ffa2:	4b0c      	ldr	r3, [pc, #48]	; (800ffd4 <prvResetNextTaskUnblockTime+0x38>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d104      	bne.n	800ffb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ffac:	4b0a      	ldr	r3, [pc, #40]	; (800ffd8 <prvResetNextTaskUnblockTime+0x3c>)
 800ffae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ffb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ffb4:	e008      	b.n	800ffc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffb6:	4b07      	ldr	r3, [pc, #28]	; (800ffd4 <prvResetNextTaskUnblockTime+0x38>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	68db      	ldr	r3, [r3, #12]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	4a04      	ldr	r2, [pc, #16]	; (800ffd8 <prvResetNextTaskUnblockTime+0x3c>)
 800ffc6:	6013      	str	r3, [r2, #0]
}
 800ffc8:	bf00      	nop
 800ffca:	370c      	adds	r7, #12
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd2:	4770      	bx	lr
 800ffd4:	20004330 	.word	0x20004330
 800ffd8:	2000439c 	.word	0x2000439c

0800ffdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ffdc:	b480      	push	{r7}
 800ffde:	b083      	sub	sp, #12
 800ffe0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ffe2:	4b0b      	ldr	r3, [pc, #44]	; (8010010 <xTaskGetSchedulerState+0x34>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d102      	bne.n	800fff0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ffea:	2301      	movs	r3, #1
 800ffec:	607b      	str	r3, [r7, #4]
 800ffee:	e008      	b.n	8010002 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fff0:	4b08      	ldr	r3, [pc, #32]	; (8010014 <xTaskGetSchedulerState+0x38>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d102      	bne.n	800fffe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fff8:	2302      	movs	r3, #2
 800fffa:	607b      	str	r3, [r7, #4]
 800fffc:	e001      	b.n	8010002 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fffe:	2300      	movs	r3, #0
 8010000:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010002:	687b      	ldr	r3, [r7, #4]
	}
 8010004:	4618      	mov	r0, r3
 8010006:	370c      	adds	r7, #12
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr
 8010010:	20004388 	.word	0x20004388
 8010014:	200043a4 	.word	0x200043a4

08010018 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010018:	b580      	push	{r7, lr}
 801001a:	b084      	sub	sp, #16
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010024:	2300      	movs	r3, #0
 8010026:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d05e      	beq.n	80100ec <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010032:	4b31      	ldr	r3, [pc, #196]	; (80100f8 <xTaskPriorityInherit+0xe0>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010038:	429a      	cmp	r2, r3
 801003a:	d24e      	bcs.n	80100da <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	699b      	ldr	r3, [r3, #24]
 8010040:	2b00      	cmp	r3, #0
 8010042:	db06      	blt.n	8010052 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010044:	4b2c      	ldr	r3, [pc, #176]	; (80100f8 <xTaskPriorityInherit+0xe0>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801004a:	f1c3 0214 	rsb	r2, r3, #20
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	6959      	ldr	r1, [r3, #20]
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801005a:	4613      	mov	r3, r2
 801005c:	009b      	lsls	r3, r3, #2
 801005e:	4413      	add	r3, r2
 8010060:	009b      	lsls	r3, r3, #2
 8010062:	4a26      	ldr	r2, [pc, #152]	; (80100fc <xTaskPriorityInherit+0xe4>)
 8010064:	4413      	add	r3, r2
 8010066:	4299      	cmp	r1, r3
 8010068:	d12f      	bne.n	80100ca <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	3304      	adds	r3, #4
 801006e:	4618      	mov	r0, r3
 8010070:	f7fd ff7a 	bl	800df68 <uxListRemove>
 8010074:	4603      	mov	r3, r0
 8010076:	2b00      	cmp	r3, #0
 8010078:	d10a      	bne.n	8010090 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801007e:	2201      	movs	r2, #1
 8010080:	fa02 f303 	lsl.w	r3, r2, r3
 8010084:	43da      	mvns	r2, r3
 8010086:	4b1e      	ldr	r3, [pc, #120]	; (8010100 <xTaskPriorityInherit+0xe8>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	4013      	ands	r3, r2
 801008c:	4a1c      	ldr	r2, [pc, #112]	; (8010100 <xTaskPriorityInherit+0xe8>)
 801008e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010090:	4b19      	ldr	r3, [pc, #100]	; (80100f8 <xTaskPriorityInherit+0xe0>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801009e:	2201      	movs	r2, #1
 80100a0:	409a      	lsls	r2, r3
 80100a2:	4b17      	ldr	r3, [pc, #92]	; (8010100 <xTaskPriorityInherit+0xe8>)
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	4313      	orrs	r3, r2
 80100a8:	4a15      	ldr	r2, [pc, #84]	; (8010100 <xTaskPriorityInherit+0xe8>)
 80100aa:	6013      	str	r3, [r2, #0]
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100b0:	4613      	mov	r3, r2
 80100b2:	009b      	lsls	r3, r3, #2
 80100b4:	4413      	add	r3, r2
 80100b6:	009b      	lsls	r3, r3, #2
 80100b8:	4a10      	ldr	r2, [pc, #64]	; (80100fc <xTaskPriorityInherit+0xe4>)
 80100ba:	441a      	add	r2, r3
 80100bc:	68bb      	ldr	r3, [r7, #8]
 80100be:	3304      	adds	r3, #4
 80100c0:	4619      	mov	r1, r3
 80100c2:	4610      	mov	r0, r2
 80100c4:	f7fd fef3 	bl	800deae <vListInsertEnd>
 80100c8:	e004      	b.n	80100d4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80100ca:	4b0b      	ldr	r3, [pc, #44]	; (80100f8 <xTaskPriorityInherit+0xe0>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80100d4:	2301      	movs	r3, #1
 80100d6:	60fb      	str	r3, [r7, #12]
 80100d8:	e008      	b.n	80100ec <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80100de:	4b06      	ldr	r3, [pc, #24]	; (80100f8 <xTaskPriorityInherit+0xe0>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100e4:	429a      	cmp	r2, r3
 80100e6:	d201      	bcs.n	80100ec <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80100e8:	2301      	movs	r3, #1
 80100ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80100ec:	68fb      	ldr	r3, [r7, #12]
	}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3710      	adds	r7, #16
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	20004174 	.word	0x20004174
 80100fc:	20004178 	.word	0x20004178
 8010100:	20004384 	.word	0x20004384

08010104 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010104:	b580      	push	{r7, lr}
 8010106:	b084      	sub	sp, #16
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010110:	2300      	movs	r3, #0
 8010112:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d064      	beq.n	80101e4 <xTaskPriorityDisinherit+0xe0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801011a:	4b35      	ldr	r3, [pc, #212]	; (80101f0 <xTaskPriorityDisinherit+0xec>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	68ba      	ldr	r2, [r7, #8]
 8010120:	429a      	cmp	r2, r3
 8010122:	d005      	beq.n	8010130 <xTaskPriorityDisinherit+0x2c>
 8010124:	f241 0213 	movw	r2, #4115	; 0x1013
 8010128:	4932      	ldr	r1, [pc, #200]	; (80101f4 <xTaskPriorityDisinherit+0xf0>)
 801012a:	4833      	ldr	r0, [pc, #204]	; (80101f8 <xTaskPriorityDisinherit+0xf4>)
 801012c:	f7f2 fdda 	bl	8002ce4 <assertFail>
			configASSERT( pxTCB->uxMutexesHeld );
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010134:	2b00      	cmp	r3, #0
 8010136:	d105      	bne.n	8010144 <xTaskPriorityDisinherit+0x40>
 8010138:	f241 0214 	movw	r2, #4116	; 0x1014
 801013c:	492d      	ldr	r1, [pc, #180]	; (80101f4 <xTaskPriorityDisinherit+0xf0>)
 801013e:	482f      	ldr	r0, [pc, #188]	; (80101fc <xTaskPriorityDisinherit+0xf8>)
 8010140:	f7f2 fdd0 	bl	8002ce4 <assertFail>
			( pxTCB->uxMutexesHeld )--;
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010148:	1e5a      	subs	r2, r3, #1
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010156:	429a      	cmp	r2, r3
 8010158:	d044      	beq.n	80101e4 <xTaskPriorityDisinherit+0xe0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801015e:	2b00      	cmp	r3, #0
 8010160:	d140      	bne.n	80101e4 <xTaskPriorityDisinherit+0xe0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	3304      	adds	r3, #4
 8010166:	4618      	mov	r0, r3
 8010168:	f7fd fefe 	bl	800df68 <uxListRemove>
 801016c:	4603      	mov	r3, r0
 801016e:	2b00      	cmp	r3, #0
 8010170:	d115      	bne.n	801019e <xTaskPriorityDisinherit+0x9a>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010176:	4922      	ldr	r1, [pc, #136]	; (8010200 <xTaskPriorityDisinherit+0xfc>)
 8010178:	4613      	mov	r3, r2
 801017a:	009b      	lsls	r3, r3, #2
 801017c:	4413      	add	r3, r2
 801017e:	009b      	lsls	r3, r3, #2
 8010180:	440b      	add	r3, r1
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d10a      	bne.n	801019e <xTaskPriorityDisinherit+0x9a>
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801018c:	2201      	movs	r2, #1
 801018e:	fa02 f303 	lsl.w	r3, r2, r3
 8010192:	43da      	mvns	r2, r3
 8010194:	4b1b      	ldr	r3, [pc, #108]	; (8010204 <xTaskPriorityDisinherit+0x100>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	4013      	ands	r3, r2
 801019a:	4a1a      	ldr	r2, [pc, #104]	; (8010204 <xTaskPriorityDisinherit+0x100>)
 801019c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101aa:	f1c3 0214 	rsb	r2, r3, #20
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101b6:	2201      	movs	r2, #1
 80101b8:	409a      	lsls	r2, r3
 80101ba:	4b12      	ldr	r3, [pc, #72]	; (8010204 <xTaskPriorityDisinherit+0x100>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	4313      	orrs	r3, r2
 80101c0:	4a10      	ldr	r2, [pc, #64]	; (8010204 <xTaskPriorityDisinherit+0x100>)
 80101c2:	6013      	str	r3, [r2, #0]
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101c8:	4613      	mov	r3, r2
 80101ca:	009b      	lsls	r3, r3, #2
 80101cc:	4413      	add	r3, r2
 80101ce:	009b      	lsls	r3, r3, #2
 80101d0:	4a0b      	ldr	r2, [pc, #44]	; (8010200 <xTaskPriorityDisinherit+0xfc>)
 80101d2:	441a      	add	r2, r3
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	3304      	adds	r3, #4
 80101d8:	4619      	mov	r1, r3
 80101da:	4610      	mov	r0, r2
 80101dc:	f7fd fe67 	bl	800deae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80101e0:	2301      	movs	r3, #1
 80101e2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80101e4:	68fb      	ldr	r3, [r7, #12]
	}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3710      	adds	r7, #16
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	20004174 	.word	0x20004174
 80101f4:	08015ca8 	.word	0x08015ca8
 80101f8:	08015fe0 	.word	0x08015fe0
 80101fc:	08015ff8 	.word	0x08015ff8
 8010200:	20004178 	.word	0x20004178
 8010204:	20004384 	.word	0x20004384

08010208 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010208:	b580      	push	{r7, lr}
 801020a:	b086      	sub	sp, #24
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010216:	2301      	movs	r3, #1
 8010218:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d06d      	beq.n	80102fc <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010224:	2b00      	cmp	r3, #0
 8010226:	d105      	bne.n	8010234 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 8010228:	f241 0262 	movw	r2, #4194	; 0x1062
 801022c:	4935      	ldr	r1, [pc, #212]	; (8010304 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801022e:	4836      	ldr	r0, [pc, #216]	; (8010308 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010230:	f7f2 fd58 	bl	8002ce4 <assertFail>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010234:	693b      	ldr	r3, [r7, #16]
 8010236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010238:	683a      	ldr	r2, [r7, #0]
 801023a:	429a      	cmp	r2, r3
 801023c:	d902      	bls.n	8010244 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	617b      	str	r3, [r7, #20]
 8010242:	e002      	b.n	801024a <vTaskPriorityDisinheritAfterTimeout+0x42>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010248:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801024a:	693b      	ldr	r3, [r7, #16]
 801024c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801024e:	697a      	ldr	r2, [r7, #20]
 8010250:	429a      	cmp	r2, r3
 8010252:	d053      	beq.n	80102fc <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010254:	693b      	ldr	r3, [r7, #16]
 8010256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010258:	68fa      	ldr	r2, [r7, #12]
 801025a:	429a      	cmp	r2, r3
 801025c:	d14e      	bne.n	80102fc <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801025e:	4b2b      	ldr	r3, [pc, #172]	; (801030c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	693a      	ldr	r2, [r7, #16]
 8010264:	429a      	cmp	r2, r3
 8010266:	d105      	bne.n	8010274 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 8010268:	f241 027d 	movw	r2, #4221	; 0x107d
 801026c:	4925      	ldr	r1, [pc, #148]	; (8010304 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801026e:	4828      	ldr	r0, [pc, #160]	; (8010310 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8010270:	f7f2 fd38 	bl	8002ce4 <assertFail>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010274:	693b      	ldr	r3, [r7, #16]
 8010276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010278:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	697a      	ldr	r2, [r7, #20]
 801027e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010280:	693b      	ldr	r3, [r7, #16]
 8010282:	699b      	ldr	r3, [r3, #24]
 8010284:	2b00      	cmp	r3, #0
 8010286:	db04      	blt.n	8010292 <vTaskPriorityDisinheritAfterTimeout+0x8a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	f1c3 0214 	rsb	r2, r3, #20
 801028e:	693b      	ldr	r3, [r7, #16]
 8010290:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010292:	693b      	ldr	r3, [r7, #16]
 8010294:	6959      	ldr	r1, [r3, #20]
 8010296:	68ba      	ldr	r2, [r7, #8]
 8010298:	4613      	mov	r3, r2
 801029a:	009b      	lsls	r3, r3, #2
 801029c:	4413      	add	r3, r2
 801029e:	009b      	lsls	r3, r3, #2
 80102a0:	4a1c      	ldr	r2, [pc, #112]	; (8010314 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80102a2:	4413      	add	r3, r2
 80102a4:	4299      	cmp	r1, r3
 80102a6:	d129      	bne.n	80102fc <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	3304      	adds	r3, #4
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7fd fe5b 	bl	800df68 <uxListRemove>
 80102b2:	4603      	mov	r3, r0
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d10a      	bne.n	80102ce <vTaskPriorityDisinheritAfterTimeout+0xc6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102bc:	2201      	movs	r2, #1
 80102be:	fa02 f303 	lsl.w	r3, r2, r3
 80102c2:	43da      	mvns	r2, r3
 80102c4:	4b14      	ldr	r3, [pc, #80]	; (8010318 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	4013      	ands	r3, r2
 80102ca:	4a13      	ldr	r2, [pc, #76]	; (8010318 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80102cc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102d2:	2201      	movs	r2, #1
 80102d4:	409a      	lsls	r2, r3
 80102d6:	4b10      	ldr	r3, [pc, #64]	; (8010318 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	4313      	orrs	r3, r2
 80102dc:	4a0e      	ldr	r2, [pc, #56]	; (8010318 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80102de:	6013      	str	r3, [r2, #0]
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102e4:	4613      	mov	r3, r2
 80102e6:	009b      	lsls	r3, r3, #2
 80102e8:	4413      	add	r3, r2
 80102ea:	009b      	lsls	r3, r3, #2
 80102ec:	4a09      	ldr	r2, [pc, #36]	; (8010314 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80102ee:	441a      	add	r2, r3
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	3304      	adds	r3, #4
 80102f4:	4619      	mov	r1, r3
 80102f6:	4610      	mov	r0, r2
 80102f8:	f7fd fdd9 	bl	800deae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80102fc:	bf00      	nop
 80102fe:	3718      	adds	r7, #24
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}
 8010304:	08015ca8 	.word	0x08015ca8
 8010308:	08015ff8 	.word	0x08015ff8
 801030c:	20004174 	.word	0x20004174
 8010310:	08016010 	.word	0x08016010
 8010314:	20004178 	.word	0x20004178
 8010318:	20004384 	.word	0x20004384

0801031c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801031c:	b480      	push	{r7}
 801031e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010320:	4b07      	ldr	r3, [pc, #28]	; (8010340 <pvTaskIncrementMutexHeldCount+0x24>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d004      	beq.n	8010332 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010328:	4b05      	ldr	r3, [pc, #20]	; (8010340 <pvTaskIncrementMutexHeldCount+0x24>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801032e:	3201      	adds	r2, #1
 8010330:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8010332:	4b03      	ldr	r3, [pc, #12]	; (8010340 <pvTaskIncrementMutexHeldCount+0x24>)
 8010334:	681b      	ldr	r3, [r3, #0]
	}
 8010336:	4618      	mov	r0, r3
 8010338:	46bd      	mov	sp, r7
 801033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033e:	4770      	bx	lr
 8010340:	20004174 	.word	0x20004174

08010344 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8010344:	b580      	push	{r7, lr}
 8010346:	b084      	sub	sp, #16
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801034e:	f000 fdd7 	bl	8010f00 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8010352:	4b20      	ldr	r3, [pc, #128]	; (80103d4 <ulTaskNotifyTake+0x90>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801035a:	2b00      	cmp	r3, #0
 801035c:	d113      	bne.n	8010386 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801035e:	4b1d      	ldr	r3, [pc, #116]	; (80103d4 <ulTaskNotifyTake+0x90>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	2201      	movs	r2, #1
 8010364:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d00b      	beq.n	8010386 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801036e:	2101      	movs	r1, #1
 8010370:	6838      	ldr	r0, [r7, #0]
 8010372:	f000 f859 	bl	8010428 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010376:	4b18      	ldr	r3, [pc, #96]	; (80103d8 <ulTaskNotifyTake+0x94>)
 8010378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801037c:	601a      	str	r2, [r3, #0]
 801037e:	f3bf 8f4f 	dsb	sy
 8010382:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010386:	f000 fde9 	bl	8010f5c <vPortExitCritical>

		taskENTER_CRITICAL();
 801038a:	f000 fdb9 	bl	8010f00 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801038e:	4b11      	ldr	r3, [pc, #68]	; (80103d4 <ulTaskNotifyTake+0x90>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010396:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d00e      	beq.n	80103bc <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d005      	beq.n	80103b0 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80103a4:	4b0b      	ldr	r3, [pc, #44]	; (80103d4 <ulTaskNotifyTake+0x90>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	2200      	movs	r2, #0
 80103aa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80103ae:	e005      	b.n	80103bc <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80103b0:	4b08      	ldr	r3, [pc, #32]	; (80103d4 <ulTaskNotifyTake+0x90>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	68fa      	ldr	r2, [r7, #12]
 80103b6:	3a01      	subs	r2, #1
 80103b8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80103bc:	4b05      	ldr	r3, [pc, #20]	; (80103d4 <ulTaskNotifyTake+0x90>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	2200      	movs	r2, #0
 80103c2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 80103c6:	f000 fdc9 	bl	8010f5c <vPortExitCritical>

		return ulReturn;
 80103ca:	68fb      	ldr	r3, [r7, #12]
	}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3710      	adds	r7, #16
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}
 80103d4:	20004174 	.word	0x20004174
 80103d8:	e000ed04 	.word	0xe000ed04

080103dc <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d102      	bne.n	80103f2 <ulTaskNotifyValueClear+0x16>
 80103ec:	4b0d      	ldr	r3, [pc, #52]	; (8010424 <ulTaskNotifyValueClear+0x48>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	e000      	b.n	80103f4 <ulTaskNotifyValueClear+0x18>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	60fb      	str	r3, [r7, #12]

		taskENTER_CRITICAL();
 80103f6:	f000 fd83 	bl	8010f00 <vPortEnterCritical>
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80103fa:	4b0a      	ldr	r3, [pc, #40]	; (8010424 <ulTaskNotifyValueClear+0x48>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010402:	60bb      	str	r3, [r7, #8]
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	43db      	mvns	r3, r3
 801040e:	401a      	ands	r2, r3
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 8010416:	f000 fda1 	bl	8010f5c <vPortExitCritical>

		return ulReturn;
 801041a:	68bb      	ldr	r3, [r7, #8]
	}
 801041c:	4618      	mov	r0, r3
 801041e:	3710      	adds	r7, #16
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}
 8010424:	20004174 	.word	0x20004174

08010428 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b084      	sub	sp, #16
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010432:	4b29      	ldr	r3, [pc, #164]	; (80104d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010438:	4b28      	ldr	r3, [pc, #160]	; (80104dc <prvAddCurrentTaskToDelayedList+0xb4>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	3304      	adds	r3, #4
 801043e:	4618      	mov	r0, r3
 8010440:	f7fd fd92 	bl	800df68 <uxListRemove>
 8010444:	4603      	mov	r3, r0
 8010446:	2b00      	cmp	r3, #0
 8010448:	d10b      	bne.n	8010462 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801044a:	4b24      	ldr	r3, [pc, #144]	; (80104dc <prvAddCurrentTaskToDelayedList+0xb4>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010450:	2201      	movs	r2, #1
 8010452:	fa02 f303 	lsl.w	r3, r2, r3
 8010456:	43da      	mvns	r2, r3
 8010458:	4b21      	ldr	r3, [pc, #132]	; (80104e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	4013      	ands	r3, r2
 801045e:	4a20      	ldr	r2, [pc, #128]	; (80104e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010460:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010468:	d10a      	bne.n	8010480 <prvAddCurrentTaskToDelayedList+0x58>
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d007      	beq.n	8010480 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010470:	4b1a      	ldr	r3, [pc, #104]	; (80104dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	3304      	adds	r3, #4
 8010476:	4619      	mov	r1, r3
 8010478:	481a      	ldr	r0, [pc, #104]	; (80104e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801047a:	f7fd fd18 	bl	800deae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801047e:	e026      	b.n	80104ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010480:	68fa      	ldr	r2, [r7, #12]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	4413      	add	r3, r2
 8010486:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010488:	4b14      	ldr	r3, [pc, #80]	; (80104dc <prvAddCurrentTaskToDelayedList+0xb4>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	68ba      	ldr	r2, [r7, #8]
 801048e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010490:	68ba      	ldr	r2, [r7, #8]
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	429a      	cmp	r2, r3
 8010496:	d209      	bcs.n	80104ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010498:	4b13      	ldr	r3, [pc, #76]	; (80104e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801049a:	681a      	ldr	r2, [r3, #0]
 801049c:	4b0f      	ldr	r3, [pc, #60]	; (80104dc <prvAddCurrentTaskToDelayedList+0xb4>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	3304      	adds	r3, #4
 80104a2:	4619      	mov	r1, r3
 80104a4:	4610      	mov	r0, r2
 80104a6:	f7fd fd26 	bl	800def6 <vListInsert>
}
 80104aa:	e010      	b.n	80104ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80104ac:	4b0f      	ldr	r3, [pc, #60]	; (80104ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80104ae:	681a      	ldr	r2, [r3, #0]
 80104b0:	4b0a      	ldr	r3, [pc, #40]	; (80104dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	3304      	adds	r3, #4
 80104b6:	4619      	mov	r1, r3
 80104b8:	4610      	mov	r0, r2
 80104ba:	f7fd fd1c 	bl	800def6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80104be:	4b0c      	ldr	r3, [pc, #48]	; (80104f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	68ba      	ldr	r2, [r7, #8]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d202      	bcs.n	80104ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80104c8:	4a09      	ldr	r2, [pc, #36]	; (80104f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	6013      	str	r3, [r2, #0]
}
 80104ce:	bf00      	nop
 80104d0:	3710      	adds	r7, #16
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
 80104d6:	bf00      	nop
 80104d8:	20004380 	.word	0x20004380
 80104dc:	20004174 	.word	0x20004174
 80104e0:	20004384 	.word	0x20004384
 80104e4:	20004364 	.word	0x20004364
 80104e8:	20004334 	.word	0x20004334
 80104ec:	20004330 	.word	0x20004330
 80104f0:	2000439c 	.word	0x2000439c

080104f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b088      	sub	sp, #32
 80104f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80104fa:	2300      	movs	r3, #0
 80104fc:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80104fe:	f000 fb73 	bl	8010be8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010502:	4b19      	ldr	r3, [pc, #100]	; (8010568 <xTimerCreateTimerTask+0x74>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d020      	beq.n	801054c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801050a:	2300      	movs	r3, #0
 801050c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801050e:	2300      	movs	r3, #0
 8010510:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010512:	463a      	mov	r2, r7
 8010514:	1d39      	adds	r1, r7, #4
 8010516:	f107 0308 	add.w	r3, r7, #8
 801051a:	4618      	mov	r0, r3
 801051c:	f7f3 fc06 	bl	8003d2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010520:	6839      	ldr	r1, [r7, #0]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	68ba      	ldr	r2, [r7, #8]
 8010526:	9202      	str	r2, [sp, #8]
 8010528:	9301      	str	r3, [sp, #4]
 801052a:	2301      	movs	r3, #1
 801052c:	9300      	str	r3, [sp, #0]
 801052e:	2300      	movs	r3, #0
 8010530:	460a      	mov	r2, r1
 8010532:	490e      	ldr	r1, [pc, #56]	; (801056c <xTimerCreateTimerTask+0x78>)
 8010534:	480e      	ldr	r0, [pc, #56]	; (8010570 <xTimerCreateTimerTask+0x7c>)
 8010536:	f7fe fcdd 	bl	800eef4 <xTaskCreateStatic>
 801053a:	4603      	mov	r3, r0
 801053c:	4a0d      	ldr	r2, [pc, #52]	; (8010574 <xTimerCreateTimerTask+0x80>)
 801053e:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010540:	4b0c      	ldr	r3, [pc, #48]	; (8010574 <xTimerCreateTimerTask+0x80>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d001      	beq.n	801054c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8010548:	2301      	movs	r3, #1
 801054a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d105      	bne.n	801055e <xTimerCreateTimerTask+0x6a>
 8010552:	f240 1213 	movw	r2, #275	; 0x113
 8010556:	4908      	ldr	r1, [pc, #32]	; (8010578 <xTimerCreateTimerTask+0x84>)
 8010558:	4808      	ldr	r0, [pc, #32]	; (801057c <xTimerCreateTimerTask+0x88>)
 801055a:	f7f2 fbc3 	bl	8002ce4 <assertFail>
	return xReturn;
 801055e:	68fb      	ldr	r3, [r7, #12]
}
 8010560:	4618      	mov	r0, r3
 8010562:	3710      	adds	r7, #16
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}
 8010568:	200043e0 	.word	0x200043e0
 801056c:	080160c0 	.word	0x080160c0
 8010570:	08010799 	.word	0x08010799
 8010574:	200043e4 	.word	0x200043e4
 8010578:	080160c8 	.word	0x080160c8
 801057c:	080160fc 	.word	0x080160fc

08010580 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8010580:	b580      	push	{r7, lr}
 8010582:	b088      	sub	sp, #32
 8010584:	af02      	add	r7, sp, #8
 8010586:	60f8      	str	r0, [r7, #12]
 8010588:	60b9      	str	r1, [r7, #8]
 801058a:	607a      	str	r2, [r7, #4]
 801058c:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 801058e:	232c      	movs	r3, #44	; 0x2c
 8010590:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8010592:	693b      	ldr	r3, [r7, #16]
 8010594:	2b2c      	cmp	r3, #44	; 0x2c
 8010596:	d005      	beq.n	80105a4 <xTimerCreateStatic+0x24>
 8010598:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801059c:	4912      	ldr	r1, [pc, #72]	; (80105e8 <xTimerCreateStatic+0x68>)
 801059e:	4813      	ldr	r0, [pc, #76]	; (80105ec <xTimerCreateStatic+0x6c>)
 80105a0:	f7f2 fba0 	bl	8002ce4 <assertFail>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80105a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80105a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d105      	bne.n	80105b8 <xTimerCreateStatic+0x38>
 80105ac:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80105b0:	490d      	ldr	r1, [pc, #52]	; (80105e8 <xTimerCreateStatic+0x68>)
 80105b2:	480f      	ldr	r0, [pc, #60]	; (80105f0 <xTimerCreateStatic+0x70>)
 80105b4:	f7f2 fb96 	bl	8002ce4 <assertFail>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80105b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ba:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d00d      	beq.n	80105de <xTimerCreateStatic+0x5e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	2202      	movs	r2, #2
 80105c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	9301      	str	r3, [sp, #4]
 80105ce:	6a3b      	ldr	r3, [r7, #32]
 80105d0:	9300      	str	r3, [sp, #0]
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	687a      	ldr	r2, [r7, #4]
 80105d6:	68b9      	ldr	r1, [r7, #8]
 80105d8:	68f8      	ldr	r0, [r7, #12]
 80105da:	f000 f80b 	bl	80105f4 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80105de:	697b      	ldr	r3, [r7, #20]
	}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3718      	adds	r7, #24
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}
 80105e8:	080160c8 	.word	0x080160c8
 80105ec:	08016104 	.word	0x08016104
 80105f0:	08016120 	.word	0x08016120

080105f4 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b084      	sub	sp, #16
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	60f8      	str	r0, [r7, #12]
 80105fc:	60b9      	str	r1, [r7, #8]
 80105fe:	607a      	str	r2, [r7, #4]
 8010600:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d105      	bne.n	8010614 <prvInitialiseNewTimer+0x20>
 8010608:	f240 1265 	movw	r2, #357	; 0x165
 801060c:	4914      	ldr	r1, [pc, #80]	; (8010660 <prvInitialiseNewTimer+0x6c>)
 801060e:	4815      	ldr	r0, [pc, #84]	; (8010664 <prvInitialiseNewTimer+0x70>)
 8010610:	f7f2 fb68 	bl	8002ce4 <assertFail>

	if( pxNewTimer != NULL )
 8010614:	69fb      	ldr	r3, [r7, #28]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d01e      	beq.n	8010658 <prvInitialiseNewTimer+0x64>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801061a:	f000 fae5 	bl	8010be8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801061e:	69fb      	ldr	r3, [r7, #28]
 8010620:	68fa      	ldr	r2, [r7, #12]
 8010622:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8010624:	69fb      	ldr	r3, [r7, #28]
 8010626:	68ba      	ldr	r2, [r7, #8]
 8010628:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801062a:	69fb      	ldr	r3, [r7, #28]
 801062c:	683a      	ldr	r2, [r7, #0]
 801062e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8010630:	69fb      	ldr	r3, [r7, #28]
 8010632:	69ba      	ldr	r2, [r7, #24]
 8010634:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8010636:	69fb      	ldr	r3, [r7, #28]
 8010638:	3304      	adds	r3, #4
 801063a:	4618      	mov	r0, r3
 801063c:	f7fd fc2a 	bl	800de94 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d008      	beq.n	8010658 <prvInitialiseNewTimer+0x64>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8010646:	69fb      	ldr	r3, [r7, #28]
 8010648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801064c:	f043 0304 	orr.w	r3, r3, #4
 8010650:	b2da      	uxtb	r2, r3
 8010652:	69fb      	ldr	r3, [r7, #28]
 8010654:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8010658:	bf00      	nop
 801065a:	3710      	adds	r7, #16
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	080160c8 	.word	0x080160c8
 8010664:	08016130 	.word	0x08016130

08010668 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b08a      	sub	sp, #40	; 0x28
 801066c:	af00      	add	r7, sp, #0
 801066e:	60f8      	str	r0, [r7, #12]
 8010670:	60b9      	str	r1, [r7, #8]
 8010672:	607a      	str	r2, [r7, #4]
 8010674:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010676:	2300      	movs	r3, #0
 8010678:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d105      	bne.n	801068c <xTimerGenericCommand+0x24>
 8010680:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8010684:	491b      	ldr	r1, [pc, #108]	; (80106f4 <xTimerGenericCommand+0x8c>)
 8010686:	481c      	ldr	r0, [pc, #112]	; (80106f8 <xTimerGenericCommand+0x90>)
 8010688:	f7f2 fb2c 	bl	8002ce4 <assertFail>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801068c:	4b1b      	ldr	r3, [pc, #108]	; (80106fc <xTimerGenericCommand+0x94>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d02a      	beq.n	80106ea <xTimerGenericCommand+0x82>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	2b05      	cmp	r3, #5
 80106a4:	dc18      	bgt.n	80106d8 <xTimerGenericCommand+0x70>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80106a6:	f7ff fc99 	bl	800ffdc <xTaskGetSchedulerState>
 80106aa:	4603      	mov	r3, r0
 80106ac:	2b02      	cmp	r3, #2
 80106ae:	d109      	bne.n	80106c4 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80106b0:	4b12      	ldr	r3, [pc, #72]	; (80106fc <xTimerGenericCommand+0x94>)
 80106b2:	6818      	ldr	r0, [r3, #0]
 80106b4:	f107 0114 	add.w	r1, r7, #20
 80106b8:	2300      	movs	r3, #0
 80106ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106bc:	f7fd fdfc 	bl	800e2b8 <xQueueGenericSend>
 80106c0:	6278      	str	r0, [r7, #36]	; 0x24
 80106c2:	e012      	b.n	80106ea <xTimerGenericCommand+0x82>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80106c4:	4b0d      	ldr	r3, [pc, #52]	; (80106fc <xTimerGenericCommand+0x94>)
 80106c6:	6818      	ldr	r0, [r3, #0]
 80106c8:	f107 0114 	add.w	r1, r7, #20
 80106cc:	2300      	movs	r3, #0
 80106ce:	2200      	movs	r2, #0
 80106d0:	f7fd fdf2 	bl	800e2b8 <xQueueGenericSend>
 80106d4:	6278      	str	r0, [r7, #36]	; 0x24
 80106d6:	e008      	b.n	80106ea <xTimerGenericCommand+0x82>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80106d8:	4b08      	ldr	r3, [pc, #32]	; (80106fc <xTimerGenericCommand+0x94>)
 80106da:	6818      	ldr	r0, [r3, #0]
 80106dc:	f107 0114 	add.w	r1, r7, #20
 80106e0:	2300      	movs	r3, #0
 80106e2:	683a      	ldr	r2, [r7, #0]
 80106e4:	f7fd fef6 	bl	800e4d4 <xQueueGenericSendFromISR>
 80106e8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80106ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80106ec:	4618      	mov	r0, r3
 80106ee:	3728      	adds	r7, #40	; 0x28
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bd80      	pop	{r7, pc}
 80106f4:	080160c8 	.word	0x080160c8
 80106f8:	0801614c 	.word	0x0801614c
 80106fc:	200043e0 	.word	0x200043e0

08010700 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b086      	sub	sp, #24
 8010704:	af02      	add	r7, sp, #8
 8010706:	6078      	str	r0, [r7, #4]
 8010708:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801070a:	4b20      	ldr	r3, [pc, #128]	; (801078c <prvProcessExpiredTimer+0x8c>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	68db      	ldr	r3, [r3, #12]
 8010710:	68db      	ldr	r3, [r3, #12]
 8010712:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	3304      	adds	r3, #4
 8010718:	4618      	mov	r0, r3
 801071a:	f7fd fc25 	bl	800df68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010724:	f003 0304 	and.w	r3, r3, #4
 8010728:	2b00      	cmp	r3, #0
 801072a:	d01e      	beq.n	801076a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	699a      	ldr	r2, [r3, #24]
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	18d1      	adds	r1, r2, r3
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	683a      	ldr	r2, [r7, #0]
 8010738:	68f8      	ldr	r0, [r7, #12]
 801073a:	f000 f8d1 	bl	80108e0 <prvInsertTimerInActiveList>
 801073e:	4603      	mov	r3, r0
 8010740:	2b00      	cmp	r3, #0
 8010742:	d01b      	beq.n	801077c <prvProcessExpiredTimer+0x7c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010744:	2300      	movs	r3, #0
 8010746:	9300      	str	r3, [sp, #0]
 8010748:	2300      	movs	r3, #0
 801074a:	687a      	ldr	r2, [r7, #4]
 801074c:	2100      	movs	r1, #0
 801074e:	68f8      	ldr	r0, [r7, #12]
 8010750:	f7ff ff8a 	bl	8010668 <xTimerGenericCommand>
 8010754:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d10f      	bne.n	801077c <prvProcessExpiredTimer+0x7c>
 801075c:	f240 2211 	movw	r2, #529	; 0x211
 8010760:	490b      	ldr	r1, [pc, #44]	; (8010790 <prvProcessExpiredTimer+0x90>)
 8010762:	480c      	ldr	r0, [pc, #48]	; (8010794 <prvProcessExpiredTimer+0x94>)
 8010764:	f7f2 fabe 	bl	8002ce4 <assertFail>
 8010768:	e008      	b.n	801077c <prvProcessExpiredTimer+0x7c>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010770:	f023 0301 	bic.w	r3, r3, #1
 8010774:	b2da      	uxtb	r2, r3
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	6a1b      	ldr	r3, [r3, #32]
 8010780:	68f8      	ldr	r0, [r7, #12]
 8010782:	4798      	blx	r3
}
 8010784:	bf00      	nop
 8010786:	3710      	adds	r7, #16
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}
 801078c:	200043d8 	.word	0x200043d8
 8010790:	080160c8 	.word	0x080160c8
 8010794:	08016174 	.word	0x08016174

08010798 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b084      	sub	sp, #16
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80107a0:	f107 0308 	add.w	r3, r7, #8
 80107a4:	4618      	mov	r0, r3
 80107a6:	f000 f857 	bl	8010858 <prvGetNextExpireTime>
 80107aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	4619      	mov	r1, r3
 80107b0:	68f8      	ldr	r0, [r7, #12]
 80107b2:	f000 f803 	bl	80107bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80107b6:	f000 f8d5 	bl	8010964 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80107ba:	e7f1      	b.n	80107a0 <prvTimerTask+0x8>

080107bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b084      	sub	sp, #16
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80107c6:	f7fe fe61 	bl	800f48c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80107ca:	f107 0308 	add.w	r3, r7, #8
 80107ce:	4618      	mov	r0, r3
 80107d0:	f000 f866 	bl	80108a0 <prvSampleTimeNow>
 80107d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d130      	bne.n	801083e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d10a      	bne.n	80107f8 <prvProcessTimerOrBlockTask+0x3c>
 80107e2:	687a      	ldr	r2, [r7, #4]
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	429a      	cmp	r2, r3
 80107e8:	d806      	bhi.n	80107f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80107ea:	f7fe fe5d 	bl	800f4a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80107ee:	68f9      	ldr	r1, [r7, #12]
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f7ff ff85 	bl	8010700 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80107f6:	e024      	b.n	8010842 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d008      	beq.n	8010810 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80107fe:	4b13      	ldr	r3, [pc, #76]	; (801084c <prvProcessTimerOrBlockTask+0x90>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d101      	bne.n	801080c <prvProcessTimerOrBlockTask+0x50>
 8010808:	2301      	movs	r3, #1
 801080a:	e000      	b.n	801080e <prvProcessTimerOrBlockTask+0x52>
 801080c:	2300      	movs	r3, #0
 801080e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010810:	4b0f      	ldr	r3, [pc, #60]	; (8010850 <prvProcessTimerOrBlockTask+0x94>)
 8010812:	6818      	ldr	r0, [r3, #0]
 8010814:	687a      	ldr	r2, [r7, #4]
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	1ad3      	subs	r3, r2, r3
 801081a:	683a      	ldr	r2, [r7, #0]
 801081c:	4619      	mov	r1, r3
 801081e:	f7fe fb35 	bl	800ee8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010822:	f7fe fe41 	bl	800f4a8 <xTaskResumeAll>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d10a      	bne.n	8010842 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801082c:	4b09      	ldr	r3, [pc, #36]	; (8010854 <prvProcessTimerOrBlockTask+0x98>)
 801082e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010832:	601a      	str	r2, [r3, #0]
 8010834:	f3bf 8f4f 	dsb	sy
 8010838:	f3bf 8f6f 	isb	sy
}
 801083c:	e001      	b.n	8010842 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801083e:	f7fe fe33 	bl	800f4a8 <xTaskResumeAll>
}
 8010842:	bf00      	nop
 8010844:	3710      	adds	r7, #16
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}
 801084a:	bf00      	nop
 801084c:	200043dc 	.word	0x200043dc
 8010850:	200043e0 	.word	0x200043e0
 8010854:	e000ed04 	.word	0xe000ed04

08010858 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010858:	b480      	push	{r7}
 801085a:	b085      	sub	sp, #20
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010860:	4b0e      	ldr	r3, [pc, #56]	; (801089c <prvGetNextExpireTime+0x44>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d101      	bne.n	801086e <prvGetNextExpireTime+0x16>
 801086a:	2201      	movs	r2, #1
 801086c:	e000      	b.n	8010870 <prvGetNextExpireTime+0x18>
 801086e:	2200      	movs	r2, #0
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d105      	bne.n	8010888 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801087c:	4b07      	ldr	r3, [pc, #28]	; (801089c <prvGetNextExpireTime+0x44>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	68db      	ldr	r3, [r3, #12]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	60fb      	str	r3, [r7, #12]
 8010886:	e001      	b.n	801088c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010888:	2300      	movs	r3, #0
 801088a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801088c:	68fb      	ldr	r3, [r7, #12]
}
 801088e:	4618      	mov	r0, r3
 8010890:	3714      	adds	r7, #20
 8010892:	46bd      	mov	sp, r7
 8010894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010898:	4770      	bx	lr
 801089a:	bf00      	nop
 801089c:	200043d8 	.word	0x200043d8

080108a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b084      	sub	sp, #16
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80108a8:	f7fe fe9a 	bl	800f5e0 <xTaskGetTickCount>
 80108ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80108ae:	4b0b      	ldr	r3, [pc, #44]	; (80108dc <prvSampleTimeNow+0x3c>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	68fa      	ldr	r2, [r7, #12]
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d205      	bcs.n	80108c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80108b8:	f000 f932 	bl	8010b20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2201      	movs	r2, #1
 80108c0:	601a      	str	r2, [r3, #0]
 80108c2:	e002      	b.n	80108ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2200      	movs	r2, #0
 80108c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80108ca:	4a04      	ldr	r2, [pc, #16]	; (80108dc <prvSampleTimeNow+0x3c>)
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80108d0:	68fb      	ldr	r3, [r7, #12]
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	3710      	adds	r7, #16
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}
 80108da:	bf00      	nop
 80108dc:	200043e8 	.word	0x200043e8

080108e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b086      	sub	sp, #24
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	60f8      	str	r0, [r7, #12]
 80108e8:	60b9      	str	r1, [r7, #8]
 80108ea:	607a      	str	r2, [r7, #4]
 80108ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80108ee:	2300      	movs	r3, #0
 80108f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	68ba      	ldr	r2, [r7, #8]
 80108f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	68fa      	ldr	r2, [r7, #12]
 80108fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80108fe:	68ba      	ldr	r2, [r7, #8]
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	429a      	cmp	r2, r3
 8010904:	d812      	bhi.n	801092c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010906:	687a      	ldr	r2, [r7, #4]
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	1ad2      	subs	r2, r2, r3
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	699b      	ldr	r3, [r3, #24]
 8010910:	429a      	cmp	r2, r3
 8010912:	d302      	bcc.n	801091a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010914:	2301      	movs	r3, #1
 8010916:	617b      	str	r3, [r7, #20]
 8010918:	e01b      	b.n	8010952 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801091a:	4b10      	ldr	r3, [pc, #64]	; (801095c <prvInsertTimerInActiveList+0x7c>)
 801091c:	681a      	ldr	r2, [r3, #0]
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	3304      	adds	r3, #4
 8010922:	4619      	mov	r1, r3
 8010924:	4610      	mov	r0, r2
 8010926:	f7fd fae6 	bl	800def6 <vListInsert>
 801092a:	e012      	b.n	8010952 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801092c:	687a      	ldr	r2, [r7, #4]
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	429a      	cmp	r2, r3
 8010932:	d206      	bcs.n	8010942 <prvInsertTimerInActiveList+0x62>
 8010934:	68ba      	ldr	r2, [r7, #8]
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	429a      	cmp	r2, r3
 801093a:	d302      	bcc.n	8010942 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801093c:	2301      	movs	r3, #1
 801093e:	617b      	str	r3, [r7, #20]
 8010940:	e007      	b.n	8010952 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010942:	4b07      	ldr	r3, [pc, #28]	; (8010960 <prvInsertTimerInActiveList+0x80>)
 8010944:	681a      	ldr	r2, [r3, #0]
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	3304      	adds	r3, #4
 801094a:	4619      	mov	r1, r3
 801094c:	4610      	mov	r0, r2
 801094e:	f7fd fad2 	bl	800def6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010952:	697b      	ldr	r3, [r7, #20]
}
 8010954:	4618      	mov	r0, r3
 8010956:	3718      	adds	r7, #24
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}
 801095c:	200043dc 	.word	0x200043dc
 8010960:	200043d8 	.word	0x200043d8

08010964 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b08c      	sub	sp, #48	; 0x30
 8010968:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801096a:	e0bd      	b.n	8010ae8 <prvProcessReceivedCommands+0x184>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	2b00      	cmp	r3, #0
 8010970:	da14      	bge.n	801099c <prvProcessReceivedCommands+0x38>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010972:	f107 0308 	add.w	r3, r7, #8
 8010976:	3304      	adds	r3, #4
 8010978:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801097c:	2b00      	cmp	r3, #0
 801097e:	d105      	bne.n	801098c <prvProcessReceivedCommands+0x28>
 8010980:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010984:	4961      	ldr	r1, [pc, #388]	; (8010b0c <prvProcessReceivedCommands+0x1a8>)
 8010986:	4862      	ldr	r0, [pc, #392]	; (8010b10 <prvProcessReceivedCommands+0x1ac>)
 8010988:	f7f2 f9ac 	bl	8002ce4 <assertFail>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010992:	6850      	ldr	r0, [r2, #4]
 8010994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010996:	6892      	ldr	r2, [r2, #8]
 8010998:	4611      	mov	r1, r2
 801099a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	f2c0 80a2 	blt.w	8010ae8 <prvProcessReceivedCommands+0x184>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80109a4:	693b      	ldr	r3, [r7, #16]
 80109a6:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80109a8:	6a3b      	ldr	r3, [r7, #32]
 80109aa:	695b      	ldr	r3, [r3, #20]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d004      	beq.n	80109ba <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80109b0:	6a3b      	ldr	r3, [r7, #32]
 80109b2:	3304      	adds	r3, #4
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7fd fad7 	bl	800df68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80109ba:	1d3b      	adds	r3, r7, #4
 80109bc:	4618      	mov	r0, r3
 80109be:	f7ff ff6f 	bl	80108a0 <prvSampleTimeNow>
 80109c2:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	2b09      	cmp	r3, #9
 80109c8:	f200 808d 	bhi.w	8010ae6 <prvProcessReceivedCommands+0x182>
 80109cc:	a201      	add	r2, pc, #4	; (adr r2, 80109d4 <prvProcessReceivedCommands+0x70>)
 80109ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109d2:	bf00      	nop
 80109d4:	080109fd 	.word	0x080109fd
 80109d8:	080109fd 	.word	0x080109fd
 80109dc:	080109fd 	.word	0x080109fd
 80109e0:	08010a69 	.word	0x08010a69
 80109e4:	08010a7d 	.word	0x08010a7d
 80109e8:	08010abd 	.word	0x08010abd
 80109ec:	080109fd 	.word	0x080109fd
 80109f0:	080109fd 	.word	0x080109fd
 80109f4:	08010a69 	.word	0x08010a69
 80109f8:	08010a7d 	.word	0x08010a7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80109fc:	6a3b      	ldr	r3, [r7, #32]
 80109fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a02:	f043 0301 	orr.w	r3, r3, #1
 8010a06:	b2da      	uxtb	r2, r3
 8010a08:	6a3b      	ldr	r3, [r7, #32]
 8010a0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010a0e:	68fa      	ldr	r2, [r7, #12]
 8010a10:	6a3b      	ldr	r3, [r7, #32]
 8010a12:	699b      	ldr	r3, [r3, #24]
 8010a14:	18d1      	adds	r1, r2, r3
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	69fa      	ldr	r2, [r7, #28]
 8010a1a:	6a38      	ldr	r0, [r7, #32]
 8010a1c:	f7ff ff60 	bl	80108e0 <prvInsertTimerInActiveList>
 8010a20:	4603      	mov	r3, r0
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d060      	beq.n	8010ae8 <prvProcessReceivedCommands+0x184>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a26:	6a3b      	ldr	r3, [r7, #32]
 8010a28:	6a1b      	ldr	r3, [r3, #32]
 8010a2a:	6a38      	ldr	r0, [r7, #32]
 8010a2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a2e:	6a3b      	ldr	r3, [r7, #32]
 8010a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a34:	f003 0304 	and.w	r3, r3, #4
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d055      	beq.n	8010ae8 <prvProcessReceivedCommands+0x184>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010a3c:	68fa      	ldr	r2, [r7, #12]
 8010a3e:	6a3b      	ldr	r3, [r7, #32]
 8010a40:	699b      	ldr	r3, [r3, #24]
 8010a42:	441a      	add	r2, r3
 8010a44:	2300      	movs	r3, #0
 8010a46:	9300      	str	r3, [sp, #0]
 8010a48:	2300      	movs	r3, #0
 8010a4a:	2100      	movs	r1, #0
 8010a4c:	6a38      	ldr	r0, [r7, #32]
 8010a4e:	f7ff fe0b 	bl	8010668 <xTimerGenericCommand>
 8010a52:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8010a54:	69bb      	ldr	r3, [r7, #24]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d146      	bne.n	8010ae8 <prvProcessReceivedCommands+0x184>
 8010a5a:	f44f 724b 	mov.w	r2, #812	; 0x32c
 8010a5e:	492b      	ldr	r1, [pc, #172]	; (8010b0c <prvProcessReceivedCommands+0x1a8>)
 8010a60:	482c      	ldr	r0, [pc, #176]	; (8010b14 <prvProcessReceivedCommands+0x1b0>)
 8010a62:	f7f2 f93f 	bl	8002ce4 <assertFail>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8010a66:	e03f      	b.n	8010ae8 <prvProcessReceivedCommands+0x184>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010a68:	6a3b      	ldr	r3, [r7, #32]
 8010a6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a6e:	f023 0301 	bic.w	r3, r3, #1
 8010a72:	b2da      	uxtb	r2, r3
 8010a74:	6a3b      	ldr	r3, [r7, #32]
 8010a76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010a7a:	e035      	b.n	8010ae8 <prvProcessReceivedCommands+0x184>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010a7c:	6a3b      	ldr	r3, [r7, #32]
 8010a7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a82:	f043 0301 	orr.w	r3, r3, #1
 8010a86:	b2da      	uxtb	r2, r3
 8010a88:	6a3b      	ldr	r3, [r7, #32]
 8010a8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010a8e:	68fa      	ldr	r2, [r7, #12]
 8010a90:	6a3b      	ldr	r3, [r7, #32]
 8010a92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010a94:	6a3b      	ldr	r3, [r7, #32]
 8010a96:	699b      	ldr	r3, [r3, #24]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d105      	bne.n	8010aa8 <prvProcessReceivedCommands+0x144>
 8010a9c:	f44f 7251 	mov.w	r2, #836	; 0x344
 8010aa0:	491a      	ldr	r1, [pc, #104]	; (8010b0c <prvProcessReceivedCommands+0x1a8>)
 8010aa2:	481d      	ldr	r0, [pc, #116]	; (8010b18 <prvProcessReceivedCommands+0x1b4>)
 8010aa4:	f7f2 f91e 	bl	8002ce4 <assertFail>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010aa8:	6a3b      	ldr	r3, [r7, #32]
 8010aaa:	699a      	ldr	r2, [r3, #24]
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	18d1      	adds	r1, r2, r3
 8010ab0:	69fb      	ldr	r3, [r7, #28]
 8010ab2:	69fa      	ldr	r2, [r7, #28]
 8010ab4:	6a38      	ldr	r0, [r7, #32]
 8010ab6:	f7ff ff13 	bl	80108e0 <prvInsertTimerInActiveList>
					break;
 8010aba:	e015      	b.n	8010ae8 <prvProcessReceivedCommands+0x184>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010abc:	6a3b      	ldr	r3, [r7, #32]
 8010abe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ac2:	f003 0302 	and.w	r3, r3, #2
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d103      	bne.n	8010ad2 <prvProcessReceivedCommands+0x16e>
						{
							vPortFree( pxTimer );
 8010aca:	6a38      	ldr	r0, [r7, #32]
 8010acc:	f000 fbea 	bl	80112a4 <vPortFree>
 8010ad0:	e00a      	b.n	8010ae8 <prvProcessReceivedCommands+0x184>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010ad2:	6a3b      	ldr	r3, [r7, #32]
 8010ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ad8:	f023 0301 	bic.w	r3, r3, #1
 8010adc:	b2da      	uxtb	r2, r3
 8010ade:	6a3b      	ldr	r3, [r7, #32]
 8010ae0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010ae4:	e000      	b.n	8010ae8 <prvProcessReceivedCommands+0x184>

				default	:
					/* Don't expect to get here. */
					break;
 8010ae6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010ae8:	4b0c      	ldr	r3, [pc, #48]	; (8010b1c <prvProcessReceivedCommands+0x1b8>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	f107 0108 	add.w	r1, r7, #8
 8010af0:	2200      	movs	r2, #0
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7fd fe06 	bl	800e704 <xQueueReceive>
 8010af8:	4603      	mov	r3, r0
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	f47f af36 	bne.w	801096c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010b00:	bf00      	nop
 8010b02:	bf00      	nop
 8010b04:	3728      	adds	r7, #40	; 0x28
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}
 8010b0a:	bf00      	nop
 8010b0c:	080160c8 	.word	0x080160c8
 8010b10:	0801617c 	.word	0x0801617c
 8010b14:	08016174 	.word	0x08016174
 8010b18:	08016188 	.word	0x08016188
 8010b1c:	200043e0 	.word	0x200043e0

08010b20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b088      	sub	sp, #32
 8010b24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010b26:	e043      	b.n	8010bb0 <prvSwitchTimerLists+0x90>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010b28:	4b2b      	ldr	r3, [pc, #172]	; (8010bd8 <prvSwitchTimerLists+0xb8>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	68db      	ldr	r3, [r3, #12]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b32:	4b29      	ldr	r3, [pc, #164]	; (8010bd8 <prvSwitchTimerLists+0xb8>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	68db      	ldr	r3, [r3, #12]
 8010b38:	68db      	ldr	r3, [r3, #12]
 8010b3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	3304      	adds	r3, #4
 8010b40:	4618      	mov	r0, r3
 8010b42:	f7fd fa11 	bl	800df68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	6a1b      	ldr	r3, [r3, #32]
 8010b4a:	68f8      	ldr	r0, [r7, #12]
 8010b4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b54:	f003 0304 	and.w	r3, r3, #4
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d029      	beq.n	8010bb0 <prvSwitchTimerLists+0x90>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	699b      	ldr	r3, [r3, #24]
 8010b60:	693a      	ldr	r2, [r7, #16]
 8010b62:	4413      	add	r3, r2
 8010b64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010b66:	68ba      	ldr	r2, [r7, #8]
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	d90e      	bls.n	8010b8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	68ba      	ldr	r2, [r7, #8]
 8010b72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	68fa      	ldr	r2, [r7, #12]
 8010b78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010b7a:	4b17      	ldr	r3, [pc, #92]	; (8010bd8 <prvSwitchTimerLists+0xb8>)
 8010b7c:	681a      	ldr	r2, [r3, #0]
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	3304      	adds	r3, #4
 8010b82:	4619      	mov	r1, r3
 8010b84:	4610      	mov	r0, r2
 8010b86:	f7fd f9b6 	bl	800def6 <vListInsert>
 8010b8a:	e011      	b.n	8010bb0 <prvSwitchTimerLists+0x90>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	9300      	str	r3, [sp, #0]
 8010b90:	2300      	movs	r3, #0
 8010b92:	693a      	ldr	r2, [r7, #16]
 8010b94:	2100      	movs	r1, #0
 8010b96:	68f8      	ldr	r0, [r7, #12]
 8010b98:	f7ff fd66 	bl	8010668 <xTimerGenericCommand>
 8010b9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d105      	bne.n	8010bb0 <prvSwitchTimerLists+0x90>
 8010ba4:	f240 329d 	movw	r2, #925	; 0x39d
 8010ba8:	490c      	ldr	r1, [pc, #48]	; (8010bdc <prvSwitchTimerLists+0xbc>)
 8010baa:	480d      	ldr	r0, [pc, #52]	; (8010be0 <prvSwitchTimerLists+0xc0>)
 8010bac:	f7f2 f89a 	bl	8002ce4 <assertFail>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010bb0:	4b09      	ldr	r3, [pc, #36]	; (8010bd8 <prvSwitchTimerLists+0xb8>)
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d1b6      	bne.n	8010b28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010bba:	4b07      	ldr	r3, [pc, #28]	; (8010bd8 <prvSwitchTimerLists+0xb8>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010bc0:	4b08      	ldr	r3, [pc, #32]	; (8010be4 <prvSwitchTimerLists+0xc4>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	4a04      	ldr	r2, [pc, #16]	; (8010bd8 <prvSwitchTimerLists+0xb8>)
 8010bc6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010bc8:	4a06      	ldr	r2, [pc, #24]	; (8010be4 <prvSwitchTimerLists+0xc4>)
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	6013      	str	r3, [r2, #0]
}
 8010bce:	bf00      	nop
 8010bd0:	3718      	adds	r7, #24
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}
 8010bd6:	bf00      	nop
 8010bd8:	200043d8 	.word	0x200043d8
 8010bdc:	080160c8 	.word	0x080160c8
 8010be0:	08016174 	.word	0x08016174
 8010be4:	200043dc 	.word	0x200043dc

08010be8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b082      	sub	sp, #8
 8010bec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010bee:	f000 f987 	bl	8010f00 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010bf2:	4b15      	ldr	r3, [pc, #84]	; (8010c48 <prvCheckForValidListAndQueue+0x60>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d120      	bne.n	8010c3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010bfa:	4814      	ldr	r0, [pc, #80]	; (8010c4c <prvCheckForValidListAndQueue+0x64>)
 8010bfc:	f7fd f92a 	bl	800de54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010c00:	4813      	ldr	r0, [pc, #76]	; (8010c50 <prvCheckForValidListAndQueue+0x68>)
 8010c02:	f7fd f927 	bl	800de54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010c06:	4b13      	ldr	r3, [pc, #76]	; (8010c54 <prvCheckForValidListAndQueue+0x6c>)
 8010c08:	4a10      	ldr	r2, [pc, #64]	; (8010c4c <prvCheckForValidListAndQueue+0x64>)
 8010c0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010c0c:	4b12      	ldr	r3, [pc, #72]	; (8010c58 <prvCheckForValidListAndQueue+0x70>)
 8010c0e:	4a10      	ldr	r2, [pc, #64]	; (8010c50 <prvCheckForValidListAndQueue+0x68>)
 8010c10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010c12:	2300      	movs	r3, #0
 8010c14:	9300      	str	r3, [sp, #0]
 8010c16:	4b11      	ldr	r3, [pc, #68]	; (8010c5c <prvCheckForValidListAndQueue+0x74>)
 8010c18:	4a11      	ldr	r2, [pc, #68]	; (8010c60 <prvCheckForValidListAndQueue+0x78>)
 8010c1a:	2110      	movs	r1, #16
 8010c1c:	2014      	movs	r0, #20
 8010c1e:	f7fd fa35 	bl	800e08c <xQueueGenericCreateStatic>
 8010c22:	4603      	mov	r3, r0
 8010c24:	4a08      	ldr	r2, [pc, #32]	; (8010c48 <prvCheckForValidListAndQueue+0x60>)
 8010c26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010c28:	4b07      	ldr	r3, [pc, #28]	; (8010c48 <prvCheckForValidListAndQueue+0x60>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d005      	beq.n	8010c3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010c30:	4b05      	ldr	r3, [pc, #20]	; (8010c48 <prvCheckForValidListAndQueue+0x60>)
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	490b      	ldr	r1, [pc, #44]	; (8010c64 <prvCheckForValidListAndQueue+0x7c>)
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7fe f8fe 	bl	800ee38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010c3c:	f000 f98e 	bl	8010f5c <vPortExitCritical>
}
 8010c40:	bf00      	nop
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}
 8010c46:	bf00      	nop
 8010c48:	200043e0 	.word	0x200043e0
 8010c4c:	200043b0 	.word	0x200043b0
 8010c50:	200043c4 	.word	0x200043c4
 8010c54:	200043d8 	.word	0x200043d8
 8010c58:	200043dc 	.word	0x200043dc
 8010c5c:	2000452c 	.word	0x2000452c
 8010c60:	200043ec 	.word	0x200043ec
 8010c64:	080161b0 	.word	0x080161b0

08010c68 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b084      	sub	sp, #16
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d105      	bne.n	8010c86 <pvTimerGetTimerID+0x1e>
 8010c7a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8010c7e:	4908      	ldr	r1, [pc, #32]	; (8010ca0 <pvTimerGetTimerID+0x38>)
 8010c80:	4808      	ldr	r0, [pc, #32]	; (8010ca4 <pvTimerGetTimerID+0x3c>)
 8010c82:	f7f2 f82f 	bl	8002ce4 <assertFail>

	taskENTER_CRITICAL();
 8010c86:	f000 f93b 	bl	8010f00 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	69db      	ldr	r3, [r3, #28]
 8010c8e:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8010c90:	f000 f964 	bl	8010f5c <vPortExitCritical>

	return pvReturn;
 8010c94:	68bb      	ldr	r3, [r7, #8]
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	3710      	adds	r7, #16
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}
 8010c9e:	bf00      	nop
 8010ca0:	080160c8 	.word	0x080160c8
 8010ca4:	0801614c 	.word	0x0801614c

08010ca8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010ca8:	b480      	push	{r7}
 8010caa:	b085      	sub	sp, #20
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	60f8      	str	r0, [r7, #12]
 8010cb0:	60b9      	str	r1, [r7, #8]
 8010cb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	3b04      	subs	r3, #4
 8010cb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	3b04      	subs	r3, #4
 8010cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	f023 0201 	bic.w	r2, r3, #1
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	3b04      	subs	r3, #4
 8010cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010cd8:	4a0c      	ldr	r2, [pc, #48]	; (8010d0c <pxPortInitialiseStack+0x64>)
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	3b14      	subs	r3, #20
 8010ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	3b04      	subs	r3, #4
 8010cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	f06f 0202 	mvn.w	r2, #2
 8010cf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	3b20      	subs	r3, #32
 8010cfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010cfe:	68fb      	ldr	r3, [r7, #12]
}
 8010d00:	4618      	mov	r0, r3
 8010d02:	3714      	adds	r7, #20
 8010d04:	46bd      	mov	sp, r7
 8010d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0a:	4770      	bx	lr
 8010d0c:	08010d11 	.word	0x08010d11

08010d10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b082      	sub	sp, #8
 8010d14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010d16:	2300      	movs	r3, #0
 8010d18:	603b      	str	r3, [r7, #0]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010d1a:	4b0e      	ldr	r3, [pc, #56]	; (8010d54 <prvTaskExitError+0x44>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d22:	d004      	beq.n	8010d2e <prvTaskExitError+0x1e>
 8010d24:	22e3      	movs	r2, #227	; 0xe3
 8010d26:	490c      	ldr	r1, [pc, #48]	; (8010d58 <prvTaskExitError+0x48>)
 8010d28:	480c      	ldr	r0, [pc, #48]	; (8010d5c <prvTaskExitError+0x4c>)
 8010d2a:	f7f1 ffdb 	bl	8002ce4 <assertFail>
	__asm volatile
 8010d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d32:	f383 8811 	msr	BASEPRI, r3
 8010d36:	f3bf 8f6f 	isb	sy
 8010d3a:	f3bf 8f4f 	dsb	sy
 8010d3e:	607b      	str	r3, [r7, #4]
}
 8010d40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010d42:	bf00      	nop
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d0fc      	beq.n	8010d44 <prvTaskExitError+0x34>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010d4a:	bf00      	nop
 8010d4c:	bf00      	nop
 8010d4e:	3708      	adds	r7, #8
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd80      	pop	{r7, pc}
 8010d54:	2000037c 	.word	0x2000037c
 8010d58:	080161c4 	.word	0x080161c4
 8010d5c:	0801620c 	.word	0x0801620c

08010d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010d60:	4b07      	ldr	r3, [pc, #28]	; (8010d80 <pxCurrentTCBConst2>)
 8010d62:	6819      	ldr	r1, [r3, #0]
 8010d64:	6808      	ldr	r0, [r1, #0]
 8010d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d6a:	f380 8809 	msr	PSP, r0
 8010d6e:	f3bf 8f6f 	isb	sy
 8010d72:	f04f 0000 	mov.w	r0, #0
 8010d76:	f380 8811 	msr	BASEPRI, r0
 8010d7a:	4770      	bx	lr
 8010d7c:	f3af 8000 	nop.w

08010d80 <pxCurrentTCBConst2>:
 8010d80:	20004174 	.word	0x20004174
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010d84:	bf00      	nop
 8010d86:	bf00      	nop

08010d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010d88:	4808      	ldr	r0, [pc, #32]	; (8010dac <prvPortStartFirstTask+0x24>)
 8010d8a:	6800      	ldr	r0, [r0, #0]
 8010d8c:	6800      	ldr	r0, [r0, #0]
 8010d8e:	f380 8808 	msr	MSP, r0
 8010d92:	f04f 0000 	mov.w	r0, #0
 8010d96:	f380 8814 	msr	CONTROL, r0
 8010d9a:	b662      	cpsie	i
 8010d9c:	b661      	cpsie	f
 8010d9e:	f3bf 8f4f 	dsb	sy
 8010da2:	f3bf 8f6f 	isb	sy
 8010da6:	df00      	svc	0
 8010da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010daa:	bf00      	nop
 8010dac:	e000ed08 	.word	0xe000ed08

08010db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b084      	sub	sp, #16
 8010db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010db6:	4b44      	ldr	r3, [pc, #272]	; (8010ec8 <xPortStartScheduler+0x118>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	4a44      	ldr	r2, [pc, #272]	; (8010ecc <xPortStartScheduler+0x11c>)
 8010dbc:	4293      	cmp	r3, r2
 8010dbe:	d105      	bne.n	8010dcc <xPortStartScheduler+0x1c>
 8010dc0:	f44f 7294 	mov.w	r2, #296	; 0x128
 8010dc4:	4942      	ldr	r1, [pc, #264]	; (8010ed0 <xPortStartScheduler+0x120>)
 8010dc6:	4843      	ldr	r0, [pc, #268]	; (8010ed4 <xPortStartScheduler+0x124>)
 8010dc8:	f7f1 ff8c 	bl	8002ce4 <assertFail>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010dcc:	4b3e      	ldr	r3, [pc, #248]	; (8010ec8 <xPortStartScheduler+0x118>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4a41      	ldr	r2, [pc, #260]	; (8010ed8 <xPortStartScheduler+0x128>)
 8010dd2:	4293      	cmp	r3, r2
 8010dd4:	d105      	bne.n	8010de2 <xPortStartScheduler+0x32>
 8010dd6:	f240 1229 	movw	r2, #297	; 0x129
 8010dda:	493d      	ldr	r1, [pc, #244]	; (8010ed0 <xPortStartScheduler+0x120>)
 8010ddc:	483f      	ldr	r0, [pc, #252]	; (8010edc <xPortStartScheduler+0x12c>)
 8010dde:	f7f1 ff81 	bl	8002ce4 <assertFail>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010de2:	4b3f      	ldr	r3, [pc, #252]	; (8010ee0 <xPortStartScheduler+0x130>)
 8010de4:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	781b      	ldrb	r3, [r3, #0]
 8010dea:	b2db      	uxtb	r3, r3
 8010dec:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	22ff      	movs	r2, #255	; 0xff
 8010df2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	b2db      	uxtb	r3, r3
 8010dfa:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010dfc:	79fb      	ldrb	r3, [r7, #7]
 8010dfe:	b2db      	uxtb	r3, r3
 8010e00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010e04:	b2da      	uxtb	r2, r3
 8010e06:	4b37      	ldr	r3, [pc, #220]	; (8010ee4 <xPortStartScheduler+0x134>)
 8010e08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010e0a:	4b37      	ldr	r3, [pc, #220]	; (8010ee8 <xPortStartScheduler+0x138>)
 8010e0c:	2207      	movs	r2, #7
 8010e0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010e10:	e009      	b.n	8010e26 <xPortStartScheduler+0x76>
		{
			ulMaxPRIGROUPValue--;
 8010e12:	4b35      	ldr	r3, [pc, #212]	; (8010ee8 <xPortStartScheduler+0x138>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	3b01      	subs	r3, #1
 8010e18:	4a33      	ldr	r2, [pc, #204]	; (8010ee8 <xPortStartScheduler+0x138>)
 8010e1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010e1c:	79fb      	ldrb	r3, [r7, #7]
 8010e1e:	b2db      	uxtb	r3, r3
 8010e20:	005b      	lsls	r3, r3, #1
 8010e22:	b2db      	uxtb	r3, r3
 8010e24:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010e26:	79fb      	ldrb	r3, [r7, #7]
 8010e28:	b2db      	uxtb	r3, r3
 8010e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e2e:	2b80      	cmp	r3, #128	; 0x80
 8010e30:	d0ef      	beq.n	8010e12 <xPortStartScheduler+0x62>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8010e32:	4b2d      	ldr	r3, [pc, #180]	; (8010ee8 <xPortStartScheduler+0x138>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	f1c3 0307 	rsb	r3, r3, #7
 8010e3a:	2b04      	cmp	r3, #4
 8010e3c:	d005      	beq.n	8010e4a <xPortStartScheduler+0x9a>
 8010e3e:	f240 1251 	movw	r2, #337	; 0x151
 8010e42:	4923      	ldr	r1, [pc, #140]	; (8010ed0 <xPortStartScheduler+0x120>)
 8010e44:	4829      	ldr	r0, [pc, #164]	; (8010eec <xPortStartScheduler+0x13c>)
 8010e46:	f7f1 ff4d 	bl	8002ce4 <assertFail>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010e4a:	4b27      	ldr	r3, [pc, #156]	; (8010ee8 <xPortStartScheduler+0x138>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	f1c3 0307 	rsb	r3, r3, #7
 8010e52:	2b04      	cmp	r3, #4
 8010e54:	d005      	beq.n	8010e62 <xPortStartScheduler+0xb2>
 8010e56:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8010e5a:	491d      	ldr	r1, [pc, #116]	; (8010ed0 <xPortStartScheduler+0x120>)
 8010e5c:	4824      	ldr	r0, [pc, #144]	; (8010ef0 <xPortStartScheduler+0x140>)
 8010e5e:	f7f1 ff41 	bl	8002ce4 <assertFail>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010e62:	4b21      	ldr	r3, [pc, #132]	; (8010ee8 <xPortStartScheduler+0x138>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	021b      	lsls	r3, r3, #8
 8010e68:	4a1f      	ldr	r2, [pc, #124]	; (8010ee8 <xPortStartScheduler+0x138>)
 8010e6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010e6c:	4b1e      	ldr	r3, [pc, #120]	; (8010ee8 <xPortStartScheduler+0x138>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010e74:	4a1c      	ldr	r2, [pc, #112]	; (8010ee8 <xPortStartScheduler+0x138>)
 8010e76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010e78:	68bb      	ldr	r3, [r7, #8]
 8010e7a:	b2da      	uxtb	r2, r3
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010e80:	4b1c      	ldr	r3, [pc, #112]	; (8010ef4 <xPortStartScheduler+0x144>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	4a1b      	ldr	r2, [pc, #108]	; (8010ef4 <xPortStartScheduler+0x144>)
 8010e86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010e8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010e8c:	4b19      	ldr	r3, [pc, #100]	; (8010ef4 <xPortStartScheduler+0x144>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	4a18      	ldr	r2, [pc, #96]	; (8010ef4 <xPortStartScheduler+0x144>)
 8010e92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010e96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010e98:	f000 f8e0 	bl	801105c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010e9c:	4b16      	ldr	r3, [pc, #88]	; (8010ef8 <xPortStartScheduler+0x148>)
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010ea2:	f000 f8f9 	bl	8011098 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010ea6:	4b15      	ldr	r3, [pc, #84]	; (8010efc <xPortStartScheduler+0x14c>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	4a14      	ldr	r2, [pc, #80]	; (8010efc <xPortStartScheduler+0x14c>)
 8010eac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010eb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010eb2:	f7ff ff69 	bl	8010d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010eb6:	f7fe fd0d 	bl	800f8d4 <vTaskSwitchContext>
	prvTaskExitError();
 8010eba:	f7ff ff29 	bl	8010d10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010ebe:	2300      	movs	r3, #0
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3710      	adds	r7, #16
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}
 8010ec8:	e000ed00 	.word	0xe000ed00
 8010ecc:	410fc271 	.word	0x410fc271
 8010ed0:	080161c4 	.word	0x080161c4
 8010ed4:	08016228 	.word	0x08016228
 8010ed8:	410fc270 	.word	0x410fc270
 8010edc:	0801624c 	.word	0x0801624c
 8010ee0:	e000e400 	.word	0xe000e400
 8010ee4:	2000457c 	.word	0x2000457c
 8010ee8:	20004580 	.word	0x20004580
 8010eec:	08016270 	.word	0x08016270
 8010ef0:	080162b4 	.word	0x080162b4
 8010ef4:	e000ed20 	.word	0xe000ed20
 8010ef8:	2000037c 	.word	0x2000037c
 8010efc:	e000ef34 	.word	0xe000ef34

08010f00 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	af00      	add	r7, sp, #0
	__asm volatile
 8010f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f0a:	f383 8811 	msr	BASEPRI, r3
 8010f0e:	f3bf 8f6f 	isb	sy
 8010f12:	f3bf 8f4f 	dsb	sy
 8010f16:	607b      	str	r3, [r7, #4]
}
 8010f18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010f1a:	4b0c      	ldr	r3, [pc, #48]	; (8010f4c <vPortEnterCritical+0x4c>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	4a0a      	ldr	r2, [pc, #40]	; (8010f4c <vPortEnterCritical+0x4c>)
 8010f22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010f24:	4b09      	ldr	r3, [pc, #36]	; (8010f4c <vPortEnterCritical+0x4c>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	d10a      	bne.n	8010f42 <vPortEnterCritical+0x42>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010f2c:	4b08      	ldr	r3, [pc, #32]	; (8010f50 <vPortEnterCritical+0x50>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	b2db      	uxtb	r3, r3
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d005      	beq.n	8010f42 <vPortEnterCritical+0x42>
 8010f36:	f240 129f 	movw	r2, #415	; 0x19f
 8010f3a:	4906      	ldr	r1, [pc, #24]	; (8010f54 <vPortEnterCritical+0x54>)
 8010f3c:	4806      	ldr	r0, [pc, #24]	; (8010f58 <vPortEnterCritical+0x58>)
 8010f3e:	f7f1 fed1 	bl	8002ce4 <assertFail>
	}
}
 8010f42:	bf00      	nop
 8010f44:	3708      	adds	r7, #8
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bd80      	pop	{r7, pc}
 8010f4a:	bf00      	nop
 8010f4c:	2000037c 	.word	0x2000037c
 8010f50:	e000ed04 	.word	0xe000ed04
 8010f54:	080161c4 	.word	0x080161c4
 8010f58:	08016314 	.word	0x08016314

08010f5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b082      	sub	sp, #8
 8010f60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010f62:	4b0e      	ldr	r3, [pc, #56]	; (8010f9c <vPortExitCritical+0x40>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d105      	bne.n	8010f76 <vPortExitCritical+0x1a>
 8010f6a:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8010f6e:	490c      	ldr	r1, [pc, #48]	; (8010fa0 <vPortExitCritical+0x44>)
 8010f70:	480c      	ldr	r0, [pc, #48]	; (8010fa4 <vPortExitCritical+0x48>)
 8010f72:	f7f1 feb7 	bl	8002ce4 <assertFail>
	uxCriticalNesting--;
 8010f76:	4b09      	ldr	r3, [pc, #36]	; (8010f9c <vPortExitCritical+0x40>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	3b01      	subs	r3, #1
 8010f7c:	4a07      	ldr	r2, [pc, #28]	; (8010f9c <vPortExitCritical+0x40>)
 8010f7e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010f80:	4b06      	ldr	r3, [pc, #24]	; (8010f9c <vPortExitCritical+0x40>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d105      	bne.n	8010f94 <vPortExitCritical+0x38>
 8010f88:	2300      	movs	r3, #0
 8010f8a:	607b      	str	r3, [r7, #4]
	__asm volatile
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f383 8811 	msr	BASEPRI, r3
}
 8010f92:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010f94:	bf00      	nop
 8010f96:	3708      	adds	r7, #8
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}
 8010f9c:	2000037c 	.word	0x2000037c
 8010fa0:	080161c4 	.word	0x080161c4
 8010fa4:	0801634c 	.word	0x0801634c
	...

08010fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010fb0:	f3ef 8009 	mrs	r0, PSP
 8010fb4:	f3bf 8f6f 	isb	sy
 8010fb8:	4b15      	ldr	r3, [pc, #84]	; (8011010 <pxCurrentTCBConst>)
 8010fba:	681a      	ldr	r2, [r3, #0]
 8010fbc:	f01e 0f10 	tst.w	lr, #16
 8010fc0:	bf08      	it	eq
 8010fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fca:	6010      	str	r0, [r2, #0]
 8010fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010fd4:	f380 8811 	msr	BASEPRI, r0
 8010fd8:	f3bf 8f4f 	dsb	sy
 8010fdc:	f3bf 8f6f 	isb	sy
 8010fe0:	f7fe fc78 	bl	800f8d4 <vTaskSwitchContext>
 8010fe4:	f04f 0000 	mov.w	r0, #0
 8010fe8:	f380 8811 	msr	BASEPRI, r0
 8010fec:	bc09      	pop	{r0, r3}
 8010fee:	6819      	ldr	r1, [r3, #0]
 8010ff0:	6808      	ldr	r0, [r1, #0]
 8010ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ff6:	f01e 0f10 	tst.w	lr, #16
 8010ffa:	bf08      	it	eq
 8010ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011000:	f380 8809 	msr	PSP, r0
 8011004:	f3bf 8f6f 	isb	sy
 8011008:	4770      	bx	lr
 801100a:	bf00      	nop
 801100c:	f3af 8000 	nop.w

08011010 <pxCurrentTCBConst>:
 8011010:	20004174 	.word	0x20004174
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011014:	bf00      	nop
 8011016:	bf00      	nop

08011018 <tickFreeRTOS>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
	__asm volatile
 801101e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011022:	f383 8811 	msr	BASEPRI, r3
 8011026:	f3bf 8f6f 	isb	sy
 801102a:	f3bf 8f4f 	dsb	sy
 801102e:	607b      	str	r3, [r7, #4]
}
 8011030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011032:	f7fe fb75 	bl	800f720 <xTaskIncrementTick>
 8011036:	4603      	mov	r3, r0
 8011038:	2b00      	cmp	r3, #0
 801103a:	d003      	beq.n	8011044 <tickFreeRTOS+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801103c:	4b06      	ldr	r3, [pc, #24]	; (8011058 <tickFreeRTOS+0x40>)
 801103e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011042:	601a      	str	r2, [r3, #0]
 8011044:	2300      	movs	r3, #0
 8011046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	f383 8811 	msr	BASEPRI, r3
}
 801104e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011050:	bf00      	nop
 8011052:	3708      	adds	r7, #8
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}
 8011058:	e000ed04 	.word	0xe000ed04

0801105c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801105c:	b480      	push	{r7}
 801105e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011060:	4b09      	ldr	r3, [pc, #36]	; (8011088 <vPortSetupTimerInterrupt+0x2c>)
 8011062:	2200      	movs	r2, #0
 8011064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011066:	4b09      	ldr	r3, [pc, #36]	; (801108c <vPortSetupTimerInterrupt+0x30>)
 8011068:	2200      	movs	r2, #0
 801106a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801106c:	4b08      	ldr	r3, [pc, #32]	; (8011090 <vPortSetupTimerInterrupt+0x34>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	4a08      	ldr	r2, [pc, #32]	; (8011094 <vPortSetupTimerInterrupt+0x38>)
 8011072:	3b01      	subs	r3, #1
 8011074:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011076:	4b04      	ldr	r3, [pc, #16]	; (8011088 <vPortSetupTimerInterrupt+0x2c>)
 8011078:	2207      	movs	r2, #7
 801107a:	601a      	str	r2, [r3, #0]
}
 801107c:	bf00      	nop
 801107e:	46bd      	mov	sp, r7
 8011080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011084:	4770      	bx	lr
 8011086:	bf00      	nop
 8011088:	e000e010 	.word	0xe000e010
 801108c:	e000e018 	.word	0xe000e018
 8011090:	200002e4 	.word	0x200002e4
 8011094:	e000e014 	.word	0xe000e014

08011098 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011098:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80110a8 <vPortEnableVFP+0x10>
 801109c:	6801      	ldr	r1, [r0, #0]
 801109e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80110a2:	6001      	str	r1, [r0, #0]
 80110a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80110a6:	bf00      	nop
 80110a8:	e000ed88 	.word	0xe000ed88

080110ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b082      	sub	sp, #8
 80110b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80110b2:	f3ef 8305 	mrs	r3, IPSR
 80110b6:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2b0f      	cmp	r3, #15
 80110bc:	d90f      	bls.n	80110de <vPortValidateInterruptPriority+0x32>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80110be:	4a11      	ldr	r2, [pc, #68]	; (8011104 <vPortValidateInterruptPriority+0x58>)
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	4413      	add	r3, r2
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80110c8:	4b0f      	ldr	r3, [pc, #60]	; (8011108 <vPortValidateInterruptPriority+0x5c>)
 80110ca:	781b      	ldrb	r3, [r3, #0]
 80110cc:	78fa      	ldrb	r2, [r7, #3]
 80110ce:	429a      	cmp	r2, r3
 80110d0:	d205      	bcs.n	80110de <vPortValidateInterruptPriority+0x32>
 80110d2:	f240 22f2 	movw	r2, #754	; 0x2f2
 80110d6:	490d      	ldr	r1, [pc, #52]	; (801110c <vPortValidateInterruptPriority+0x60>)
 80110d8:	480d      	ldr	r0, [pc, #52]	; (8011110 <vPortValidateInterruptPriority+0x64>)
 80110da:	f7f1 fe03 	bl	8002ce4 <assertFail>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80110de:	4b0d      	ldr	r3, [pc, #52]	; (8011114 <vPortValidateInterruptPriority+0x68>)
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80110e6:	4b0c      	ldr	r3, [pc, #48]	; (8011118 <vPortValidateInterruptPriority+0x6c>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d905      	bls.n	80110fa <vPortValidateInterruptPriority+0x4e>
 80110ee:	f240 3202 	movw	r2, #770	; 0x302
 80110f2:	4906      	ldr	r1, [pc, #24]	; (801110c <vPortValidateInterruptPriority+0x60>)
 80110f4:	4809      	ldr	r0, [pc, #36]	; (801111c <vPortValidateInterruptPriority+0x70>)
 80110f6:	f7f1 fdf5 	bl	8002ce4 <assertFail>
	}
 80110fa:	bf00      	nop
 80110fc:	3708      	adds	r7, #8
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
 8011102:	bf00      	nop
 8011104:	e000e3f0 	.word	0xe000e3f0
 8011108:	2000457c 	.word	0x2000457c
 801110c:	080161c4 	.word	0x080161c4
 8011110:	08016360 	.word	0x08016360
 8011114:	e000ed0c 	.word	0xe000ed0c
 8011118:	20004580 	.word	0x20004580
 801111c:	0801638c 	.word	0x0801638c

08011120 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b086      	sub	sp, #24
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011128:	2300      	movs	r3, #0
 801112a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 801112c:	f7fe f9ae 	bl	800f48c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011130:	4b52      	ldr	r3, [pc, #328]	; (801127c <pvPortMalloc+0x15c>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d101      	bne.n	801113c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011138:	f000 f912 	bl	8011360 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801113c:	4b50      	ldr	r3, [pc, #320]	; (8011280 <pvPortMalloc+0x160>)
 801113e:	681a      	ldr	r2, [r3, #0]
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	4013      	ands	r3, r2
 8011144:	2b00      	cmp	r3, #0
 8011146:	f040 8087 	bne.w	8011258 <pvPortMalloc+0x138>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d017      	beq.n	8011180 <pvPortMalloc+0x60>
			{
				xWantedSize += xHeapStructSize;
 8011150:	2208      	movs	r2, #8
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	4413      	add	r3, r2
 8011156:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f003 0307 	and.w	r3, r3, #7
 801115e:	2b00      	cmp	r3, #0
 8011160:	d00e      	beq.n	8011180 <pvPortMalloc+0x60>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f023 0307 	bic.w	r3, r3, #7
 8011168:	3308      	adds	r3, #8
 801116a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f003 0307 	and.w	r3, r3, #7
 8011172:	2b00      	cmp	r3, #0
 8011174:	d004      	beq.n	8011180 <pvPortMalloc+0x60>
 8011176:	2297      	movs	r2, #151	; 0x97
 8011178:	4942      	ldr	r1, [pc, #264]	; (8011284 <pvPortMalloc+0x164>)
 801117a:	4843      	ldr	r0, [pc, #268]	; (8011288 <pvPortMalloc+0x168>)
 801117c:	f7f1 fdb2 	bl	8002ce4 <assertFail>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d068      	beq.n	8011258 <pvPortMalloc+0x138>
 8011186:	4b41      	ldr	r3, [pc, #260]	; (801128c <pvPortMalloc+0x16c>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	687a      	ldr	r2, [r7, #4]
 801118c:	429a      	cmp	r2, r3
 801118e:	d863      	bhi.n	8011258 <pvPortMalloc+0x138>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011190:	4b3f      	ldr	r3, [pc, #252]	; (8011290 <pvPortMalloc+0x170>)
 8011192:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8011194:	4b3e      	ldr	r3, [pc, #248]	; (8011290 <pvPortMalloc+0x170>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801119a:	e004      	b.n	80111a6 <pvPortMalloc+0x86>
				{
					pxPreviousBlock = pxBlock;
 801119c:	697b      	ldr	r3, [r7, #20]
 801119e:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80111a0:	697b      	ldr	r3, [r7, #20]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	685b      	ldr	r3, [r3, #4]
 80111aa:	687a      	ldr	r2, [r7, #4]
 80111ac:	429a      	cmp	r2, r3
 80111ae:	d903      	bls.n	80111b8 <pvPortMalloc+0x98>
 80111b0:	697b      	ldr	r3, [r7, #20]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d1f1      	bne.n	801119c <pvPortMalloc+0x7c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80111b8:	4b30      	ldr	r3, [pc, #192]	; (801127c <pvPortMalloc+0x15c>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	697a      	ldr	r2, [r7, #20]
 80111be:	429a      	cmp	r2, r3
 80111c0:	d04a      	beq.n	8011258 <pvPortMalloc+0x138>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	2208      	movs	r2, #8
 80111c8:	4413      	add	r3, r2
 80111ca:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	681a      	ldr	r2, [r3, #0]
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80111d4:	697b      	ldr	r3, [r7, #20]
 80111d6:	685a      	ldr	r2, [r3, #4]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	1ad2      	subs	r2, r2, r3
 80111dc:	2308      	movs	r3, #8
 80111de:	005b      	lsls	r3, r3, #1
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d919      	bls.n	8011218 <pvPortMalloc+0xf8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80111e4:	697a      	ldr	r2, [r7, #20]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	4413      	add	r3, r2
 80111ea:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	f003 0307 	and.w	r3, r3, #7
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d004      	beq.n	8011200 <pvPortMalloc+0xe0>
 80111f6:	22c4      	movs	r2, #196	; 0xc4
 80111f8:	4922      	ldr	r1, [pc, #136]	; (8011284 <pvPortMalloc+0x164>)
 80111fa:	4826      	ldr	r0, [pc, #152]	; (8011294 <pvPortMalloc+0x174>)
 80111fc:	f7f1 fd72 	bl	8002ce4 <assertFail>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011200:	697b      	ldr	r3, [r7, #20]
 8011202:	685a      	ldr	r2, [r3, #4]
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	1ad2      	subs	r2, r2, r3
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801120c:	697b      	ldr	r3, [r7, #20]
 801120e:	687a      	ldr	r2, [r7, #4]
 8011210:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011212:	68b8      	ldr	r0, [r7, #8]
 8011214:	f000 f906 	bl	8011424 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011218:	4b1c      	ldr	r3, [pc, #112]	; (801128c <pvPortMalloc+0x16c>)
 801121a:	681a      	ldr	r2, [r3, #0]
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	685b      	ldr	r3, [r3, #4]
 8011220:	1ad3      	subs	r3, r2, r3
 8011222:	4a1a      	ldr	r2, [pc, #104]	; (801128c <pvPortMalloc+0x16c>)
 8011224:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011226:	4b19      	ldr	r3, [pc, #100]	; (801128c <pvPortMalloc+0x16c>)
 8011228:	681a      	ldr	r2, [r3, #0]
 801122a:	4b1b      	ldr	r3, [pc, #108]	; (8011298 <pvPortMalloc+0x178>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	429a      	cmp	r2, r3
 8011230:	d203      	bcs.n	801123a <pvPortMalloc+0x11a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011232:	4b16      	ldr	r3, [pc, #88]	; (801128c <pvPortMalloc+0x16c>)
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	4a18      	ldr	r2, [pc, #96]	; (8011298 <pvPortMalloc+0x178>)
 8011238:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	685a      	ldr	r2, [r3, #4]
 801123e:	4b10      	ldr	r3, [pc, #64]	; (8011280 <pvPortMalloc+0x160>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	431a      	orrs	r2, r3
 8011244:	697b      	ldr	r3, [r7, #20]
 8011246:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	2200      	movs	r2, #0
 801124c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801124e:	4b13      	ldr	r3, [pc, #76]	; (801129c <pvPortMalloc+0x17c>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	3301      	adds	r3, #1
 8011254:	4a11      	ldr	r2, [pc, #68]	; (801129c <pvPortMalloc+0x17c>)
 8011256:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011258:	f7fe f926 	bl	800f4a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	f003 0307 	and.w	r3, r3, #7
 8011262:	2b00      	cmp	r3, #0
 8011264:	d005      	beq.n	8011272 <pvPortMalloc+0x152>
 8011266:	f240 1205 	movw	r2, #261	; 0x105
 801126a:	4906      	ldr	r1, [pc, #24]	; (8011284 <pvPortMalloc+0x164>)
 801126c:	480c      	ldr	r0, [pc, #48]	; (80112a0 <pvPortMalloc+0x180>)
 801126e:	f7f1 fd39 	bl	8002ce4 <assertFail>
	return pvReturn;
 8011272:	68fb      	ldr	r3, [r7, #12]
}
 8011274:	4618      	mov	r0, r3
 8011276:	3718      	adds	r7, #24
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}
 801127c:	2000818c 	.word	0x2000818c
 8011280:	200081a0 	.word	0x200081a0
 8011284:	080163d0 	.word	0x080163d0
 8011288:	08016418 	.word	0x08016418
 801128c:	20008190 	.word	0x20008190
 8011290:	20008184 	.word	0x20008184
 8011294:	08016448 	.word	0x08016448
 8011298:	20008194 	.word	0x20008194
 801129c:	20008198 	.word	0x20008198
 80112a0:	0801648c 	.word	0x0801648c

080112a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b084      	sub	sp, #16
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d043      	beq.n	801133e <vPortFree+0x9a>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80112b6:	2308      	movs	r3, #8
 80112b8:	425b      	negs	r3, r3
 80112ba:	68fa      	ldr	r2, [r7, #12]
 80112bc:	4413      	add	r3, r2
 80112be:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	685a      	ldr	r2, [r3, #4]
 80112c8:	4b1f      	ldr	r3, [pc, #124]	; (8011348 <vPortFree+0xa4>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	4013      	ands	r3, r2
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d105      	bne.n	80112de <vPortFree+0x3a>
 80112d2:	f240 1219 	movw	r2, #281	; 0x119
 80112d6:	491d      	ldr	r1, [pc, #116]	; (801134c <vPortFree+0xa8>)
 80112d8:	481d      	ldr	r0, [pc, #116]	; (8011350 <vPortFree+0xac>)
 80112da:	f7f1 fd03 	bl	8002ce4 <assertFail>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d005      	beq.n	80112f2 <vPortFree+0x4e>
 80112e6:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80112ea:	4918      	ldr	r1, [pc, #96]	; (801134c <vPortFree+0xa8>)
 80112ec:	4819      	ldr	r0, [pc, #100]	; (8011354 <vPortFree+0xb0>)
 80112ee:	f7f1 fcf9 	bl	8002ce4 <assertFail>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	685a      	ldr	r2, [r3, #4]
 80112f6:	4b14      	ldr	r3, [pc, #80]	; (8011348 <vPortFree+0xa4>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	4013      	ands	r3, r2
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d01e      	beq.n	801133e <vPortFree+0x9a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d11a      	bne.n	801133e <vPortFree+0x9a>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	685a      	ldr	r2, [r3, #4]
 801130c:	4b0e      	ldr	r3, [pc, #56]	; (8011348 <vPortFree+0xa4>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	43db      	mvns	r3, r3
 8011312:	401a      	ands	r2, r3
 8011314:	68bb      	ldr	r3, [r7, #8]
 8011316:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011318:	f7fe f8b8 	bl	800f48c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	685a      	ldr	r2, [r3, #4]
 8011320:	4b0d      	ldr	r3, [pc, #52]	; (8011358 <vPortFree+0xb4>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	4413      	add	r3, r2
 8011326:	4a0c      	ldr	r2, [pc, #48]	; (8011358 <vPortFree+0xb4>)
 8011328:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801132a:	68b8      	ldr	r0, [r7, #8]
 801132c:	f000 f87a 	bl	8011424 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011330:	4b0a      	ldr	r3, [pc, #40]	; (801135c <vPortFree+0xb8>)
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	3301      	adds	r3, #1
 8011336:	4a09      	ldr	r2, [pc, #36]	; (801135c <vPortFree+0xb8>)
 8011338:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801133a:	f7fe f8b5 	bl	800f4a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801133e:	bf00      	nop
 8011340:	3710      	adds	r7, #16
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}
 8011346:	bf00      	nop
 8011348:	200081a0 	.word	0x200081a0
 801134c:	080163d0 	.word	0x080163d0
 8011350:	080164d4 	.word	0x080164d4
 8011354:	08016508 	.word	0x08016508
 8011358:	20008190 	.word	0x20008190
 801135c:	2000819c 	.word	0x2000819c

08011360 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011360:	b480      	push	{r7}
 8011362:	b085      	sub	sp, #20
 8011364:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011366:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801136a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801136c:	4b27      	ldr	r3, [pc, #156]	; (801140c <prvHeapInit+0xac>)
 801136e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	f003 0307 	and.w	r3, r3, #7
 8011376:	2b00      	cmp	r3, #0
 8011378:	d00c      	beq.n	8011394 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	3307      	adds	r3, #7
 801137e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	f023 0307 	bic.w	r3, r3, #7
 8011386:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011388:	68ba      	ldr	r2, [r7, #8]
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	1ad3      	subs	r3, r2, r3
 801138e:	4a1f      	ldr	r2, [pc, #124]	; (801140c <prvHeapInit+0xac>)
 8011390:	4413      	add	r3, r2
 8011392:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011398:	4a1d      	ldr	r2, [pc, #116]	; (8011410 <prvHeapInit+0xb0>)
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801139e:	4b1c      	ldr	r3, [pc, #112]	; (8011410 <prvHeapInit+0xb0>)
 80113a0:	2200      	movs	r2, #0
 80113a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	68ba      	ldr	r2, [r7, #8]
 80113a8:	4413      	add	r3, r2
 80113aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80113ac:	2208      	movs	r2, #8
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	1a9b      	subs	r3, r3, r2
 80113b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	f023 0307 	bic.w	r3, r3, #7
 80113ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	4a15      	ldr	r2, [pc, #84]	; (8011414 <prvHeapInit+0xb4>)
 80113c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80113c2:	4b14      	ldr	r3, [pc, #80]	; (8011414 <prvHeapInit+0xb4>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	2200      	movs	r2, #0
 80113c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80113ca:	4b12      	ldr	r3, [pc, #72]	; (8011414 <prvHeapInit+0xb4>)
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	2200      	movs	r2, #0
 80113d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	68fa      	ldr	r2, [r7, #12]
 80113da:	1ad2      	subs	r2, r2, r3
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80113e0:	4b0c      	ldr	r3, [pc, #48]	; (8011414 <prvHeapInit+0xb4>)
 80113e2:	681a      	ldr	r2, [r3, #0]
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	685b      	ldr	r3, [r3, #4]
 80113ec:	4a0a      	ldr	r2, [pc, #40]	; (8011418 <prvHeapInit+0xb8>)
 80113ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	685b      	ldr	r3, [r3, #4]
 80113f4:	4a09      	ldr	r2, [pc, #36]	; (801141c <prvHeapInit+0xbc>)
 80113f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80113f8:	4b09      	ldr	r3, [pc, #36]	; (8011420 <prvHeapInit+0xc0>)
 80113fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80113fe:	601a      	str	r2, [r3, #0]
}
 8011400:	bf00      	nop
 8011402:	3714      	adds	r7, #20
 8011404:	46bd      	mov	sp, r7
 8011406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140a:	4770      	bx	lr
 801140c:	20004584 	.word	0x20004584
 8011410:	20008184 	.word	0x20008184
 8011414:	2000818c 	.word	0x2000818c
 8011418:	20008194 	.word	0x20008194
 801141c:	20008190 	.word	0x20008190
 8011420:	200081a0 	.word	0x200081a0

08011424 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011424:	b480      	push	{r7}
 8011426:	b085      	sub	sp, #20
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801142c:	4b28      	ldr	r3, [pc, #160]	; (80114d0 <prvInsertBlockIntoFreeList+0xac>)
 801142e:	60fb      	str	r3, [r7, #12]
 8011430:	e002      	b.n	8011438 <prvInsertBlockIntoFreeList+0x14>
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	60fb      	str	r3, [r7, #12]
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	687a      	ldr	r2, [r7, #4]
 801143e:	429a      	cmp	r2, r3
 8011440:	d8f7      	bhi.n	8011432 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	68ba      	ldr	r2, [r7, #8]
 801144c:	4413      	add	r3, r2
 801144e:	687a      	ldr	r2, [r7, #4]
 8011450:	429a      	cmp	r2, r3
 8011452:	d108      	bne.n	8011466 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	685a      	ldr	r2, [r3, #4]
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	685b      	ldr	r3, [r3, #4]
 801145c:	441a      	add	r2, r3
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	685b      	ldr	r3, [r3, #4]
 801146e:	68ba      	ldr	r2, [r7, #8]
 8011470:	441a      	add	r2, r3
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	429a      	cmp	r2, r3
 8011478:	d118      	bne.n	80114ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	681a      	ldr	r2, [r3, #0]
 801147e:	4b15      	ldr	r3, [pc, #84]	; (80114d4 <prvInsertBlockIntoFreeList+0xb0>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	429a      	cmp	r2, r3
 8011484:	d00d      	beq.n	80114a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	685a      	ldr	r2, [r3, #4]
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	685b      	ldr	r3, [r3, #4]
 8011490:	441a      	add	r2, r3
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	681a      	ldr	r2, [r3, #0]
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	601a      	str	r2, [r3, #0]
 80114a0:	e008      	b.n	80114b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80114a2:	4b0c      	ldr	r3, [pc, #48]	; (80114d4 <prvInsertBlockIntoFreeList+0xb0>)
 80114a4:	681a      	ldr	r2, [r3, #0]
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	601a      	str	r2, [r3, #0]
 80114aa:	e003      	b.n	80114b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	681a      	ldr	r2, [r3, #0]
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80114b4:	68fa      	ldr	r2, [r7, #12]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d002      	beq.n	80114c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	687a      	ldr	r2, [r7, #4]
 80114c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80114c2:	bf00      	nop
 80114c4:	3714      	adds	r7, #20
 80114c6:	46bd      	mov	sp, r7
 80114c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114cc:	4770      	bx	lr
 80114ce:	bf00      	nop
 80114d0:	20008184 	.word	0x20008184
 80114d4:	2000818c 	.word	0x2000818c

080114d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80114dc:	2200      	movs	r2, #0
 80114de:	4912      	ldr	r1, [pc, #72]	; (8011528 <MX_USB_DEVICE_Init+0x50>)
 80114e0:	4812      	ldr	r0, [pc, #72]	; (801152c <MX_USB_DEVICE_Init+0x54>)
 80114e2:	f7fb f939 	bl	800c758 <USBD_Init>
 80114e6:	4603      	mov	r3, r0
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d001      	beq.n	80114f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80114ec:	f7f3 f8a6 	bl	800463c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80114f0:	490f      	ldr	r1, [pc, #60]	; (8011530 <MX_USB_DEVICE_Init+0x58>)
 80114f2:	480e      	ldr	r0, [pc, #56]	; (801152c <MX_USB_DEVICE_Init+0x54>)
 80114f4:	f7fb f960 	bl	800c7b8 <USBD_RegisterClass>
 80114f8:	4603      	mov	r3, r0
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d001      	beq.n	8011502 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80114fe:	f7f3 f89d 	bl	800463c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011502:	490c      	ldr	r1, [pc, #48]	; (8011534 <MX_USB_DEVICE_Init+0x5c>)
 8011504:	4809      	ldr	r0, [pc, #36]	; (801152c <MX_USB_DEVICE_Init+0x54>)
 8011506:	f7fb f897 	bl	800c638 <USBD_CDC_RegisterInterface>
 801150a:	4603      	mov	r3, r0
 801150c:	2b00      	cmp	r3, #0
 801150e:	d001      	beq.n	8011514 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011510:	f7f3 f894 	bl	800463c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011514:	4805      	ldr	r0, [pc, #20]	; (801152c <MX_USB_DEVICE_Init+0x54>)
 8011516:	f7fb f985 	bl	800c824 <USBD_Start>
 801151a:	4603      	mov	r3, r0
 801151c:	2b00      	cmp	r3, #0
 801151e:	d001      	beq.n	8011524 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011520:	f7f3 f88c 	bl	800463c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011524:	bf00      	nop
 8011526:	bd80      	pop	{r7, pc}
 8011528:	20000394 	.word	0x20000394
 801152c:	200081a4 	.word	0x200081a4
 8011530:	200002fc 	.word	0x200002fc
 8011534:	20000380 	.word	0x20000380

08011538 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801153c:	2200      	movs	r2, #0
 801153e:	4905      	ldr	r1, [pc, #20]	; (8011554 <CDC_Init_FS+0x1c>)
 8011540:	4805      	ldr	r0, [pc, #20]	; (8011558 <CDC_Init_FS+0x20>)
 8011542:	f7fb f893 	bl	800c66c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011546:	4905      	ldr	r1, [pc, #20]	; (801155c <CDC_Init_FS+0x24>)
 8011548:	4803      	ldr	r0, [pc, #12]	; (8011558 <CDC_Init_FS+0x20>)
 801154a:	f7fb f8b1 	bl	800c6b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801154e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011550:	4618      	mov	r0, r3
 8011552:	bd80      	pop	{r7, pc}
 8011554:	20008c80 	.word	0x20008c80
 8011558:	200081a4 	.word	0x200081a4
 801155c:	20008480 	.word	0x20008480

08011560 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011560:	b480      	push	{r7}
 8011562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011564:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011566:	4618      	mov	r0, r3
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr

08011570 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011570:	b480      	push	{r7}
 8011572:	b083      	sub	sp, #12
 8011574:	af00      	add	r7, sp, #0
 8011576:	4603      	mov	r3, r0
 8011578:	6039      	str	r1, [r7, #0]
 801157a:	71fb      	strb	r3, [r7, #7]
 801157c:	4613      	mov	r3, r2
 801157e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011580:	79fb      	ldrb	r3, [r7, #7]
 8011582:	2b23      	cmp	r3, #35	; 0x23
 8011584:	d84a      	bhi.n	801161c <CDC_Control_FS+0xac>
 8011586:	a201      	add	r2, pc, #4	; (adr r2, 801158c <CDC_Control_FS+0x1c>)
 8011588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801158c:	0801161d 	.word	0x0801161d
 8011590:	0801161d 	.word	0x0801161d
 8011594:	0801161d 	.word	0x0801161d
 8011598:	0801161d 	.word	0x0801161d
 801159c:	0801161d 	.word	0x0801161d
 80115a0:	0801161d 	.word	0x0801161d
 80115a4:	0801161d 	.word	0x0801161d
 80115a8:	0801161d 	.word	0x0801161d
 80115ac:	0801161d 	.word	0x0801161d
 80115b0:	0801161d 	.word	0x0801161d
 80115b4:	0801161d 	.word	0x0801161d
 80115b8:	0801161d 	.word	0x0801161d
 80115bc:	0801161d 	.word	0x0801161d
 80115c0:	0801161d 	.word	0x0801161d
 80115c4:	0801161d 	.word	0x0801161d
 80115c8:	0801161d 	.word	0x0801161d
 80115cc:	0801161d 	.word	0x0801161d
 80115d0:	0801161d 	.word	0x0801161d
 80115d4:	0801161d 	.word	0x0801161d
 80115d8:	0801161d 	.word	0x0801161d
 80115dc:	0801161d 	.word	0x0801161d
 80115e0:	0801161d 	.word	0x0801161d
 80115e4:	0801161d 	.word	0x0801161d
 80115e8:	0801161d 	.word	0x0801161d
 80115ec:	0801161d 	.word	0x0801161d
 80115f0:	0801161d 	.word	0x0801161d
 80115f4:	0801161d 	.word	0x0801161d
 80115f8:	0801161d 	.word	0x0801161d
 80115fc:	0801161d 	.word	0x0801161d
 8011600:	0801161d 	.word	0x0801161d
 8011604:	0801161d 	.word	0x0801161d
 8011608:	0801161d 	.word	0x0801161d
 801160c:	0801161d 	.word	0x0801161d
 8011610:	0801161d 	.word	0x0801161d
 8011614:	0801161d 	.word	0x0801161d
 8011618:	0801161d 	.word	0x0801161d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801161c:	bf00      	nop
  }

  return (USBD_OK);
 801161e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011620:	4618      	mov	r0, r3
 8011622:	370c      	adds	r7, #12
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr

0801162c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b082      	sub	sp, #8
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011636:	6879      	ldr	r1, [r7, #4]
 8011638:	4805      	ldr	r0, [pc, #20]	; (8011650 <CDC_Receive_FS+0x24>)
 801163a:	f7fb f839 	bl	800c6b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801163e:	4804      	ldr	r0, [pc, #16]	; (8011650 <CDC_Receive_FS+0x24>)
 8011640:	f7fb f854 	bl	800c6ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011644:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011646:	4618      	mov	r0, r3
 8011648:	3708      	adds	r7, #8
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
 801164e:	bf00      	nop
 8011650:	200081a4 	.word	0x200081a4

08011654 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011654:	b480      	push	{r7}
 8011656:	b087      	sub	sp, #28
 8011658:	af00      	add	r7, sp, #0
 801165a:	60f8      	str	r0, [r7, #12]
 801165c:	60b9      	str	r1, [r7, #8]
 801165e:	4613      	mov	r3, r2
 8011660:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011662:	2300      	movs	r3, #0
 8011664:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011666:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801166a:	4618      	mov	r0, r3
 801166c:	371c      	adds	r7, #28
 801166e:	46bd      	mov	sp, r7
 8011670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011674:	4770      	bx	lr
	...

08011678 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011678:	b480      	push	{r7}
 801167a:	b083      	sub	sp, #12
 801167c:	af00      	add	r7, sp, #0
 801167e:	4603      	mov	r3, r0
 8011680:	6039      	str	r1, [r7, #0]
 8011682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	2212      	movs	r2, #18
 8011688:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801168a:	4b03      	ldr	r3, [pc, #12]	; (8011698 <USBD_FS_DeviceDescriptor+0x20>)
}
 801168c:	4618      	mov	r0, r3
 801168e:	370c      	adds	r7, #12
 8011690:	46bd      	mov	sp, r7
 8011692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011696:	4770      	bx	lr
 8011698:	200003b0 	.word	0x200003b0

0801169c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801169c:	b480      	push	{r7}
 801169e:	b083      	sub	sp, #12
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	4603      	mov	r3, r0
 80116a4:	6039      	str	r1, [r7, #0]
 80116a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	2204      	movs	r2, #4
 80116ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80116ae:	4b03      	ldr	r3, [pc, #12]	; (80116bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	370c      	adds	r7, #12
 80116b4:	46bd      	mov	sp, r7
 80116b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ba:	4770      	bx	lr
 80116bc:	200003c4 	.word	0x200003c4

080116c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b082      	sub	sp, #8
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	4603      	mov	r3, r0
 80116c8:	6039      	str	r1, [r7, #0]
 80116ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80116cc:	79fb      	ldrb	r3, [r7, #7]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d105      	bne.n	80116de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80116d2:	683a      	ldr	r2, [r7, #0]
 80116d4:	4907      	ldr	r1, [pc, #28]	; (80116f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80116d6:	4808      	ldr	r0, [pc, #32]	; (80116f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80116d8:	f7fc fa56 	bl	800db88 <USBD_GetString>
 80116dc:	e004      	b.n	80116e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80116de:	683a      	ldr	r2, [r7, #0]
 80116e0:	4904      	ldr	r1, [pc, #16]	; (80116f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80116e2:	4805      	ldr	r0, [pc, #20]	; (80116f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80116e4:	f7fc fa50 	bl	800db88 <USBD_GetString>
  }
  return USBD_StrDesc;
 80116e8:	4b02      	ldr	r3, [pc, #8]	; (80116f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	3708      	adds	r7, #8
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}
 80116f2:	bf00      	nop
 80116f4:	20009480 	.word	0x20009480
 80116f8:	08016528 	.word	0x08016528

080116fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b082      	sub	sp, #8
 8011700:	af00      	add	r7, sp, #0
 8011702:	4603      	mov	r3, r0
 8011704:	6039      	str	r1, [r7, #0]
 8011706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011708:	683a      	ldr	r2, [r7, #0]
 801170a:	4904      	ldr	r1, [pc, #16]	; (801171c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801170c:	4804      	ldr	r0, [pc, #16]	; (8011720 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801170e:	f7fc fa3b 	bl	800db88 <USBD_GetString>
  return USBD_StrDesc;
 8011712:	4b02      	ldr	r3, [pc, #8]	; (801171c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011714:	4618      	mov	r0, r3
 8011716:	3708      	adds	r7, #8
 8011718:	46bd      	mov	sp, r7
 801171a:	bd80      	pop	{r7, pc}
 801171c:	20009480 	.word	0x20009480
 8011720:	08016540 	.word	0x08016540

08011724 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b082      	sub	sp, #8
 8011728:	af00      	add	r7, sp, #0
 801172a:	4603      	mov	r3, r0
 801172c:	6039      	str	r1, [r7, #0]
 801172e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	221a      	movs	r2, #26
 8011734:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011736:	f000 f843 	bl	80117c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801173a:	4b02      	ldr	r3, [pc, #8]	; (8011744 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801173c:	4618      	mov	r0, r3
 801173e:	3708      	adds	r7, #8
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}
 8011744:	200003c8 	.word	0x200003c8

08011748 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
 801174e:	4603      	mov	r3, r0
 8011750:	6039      	str	r1, [r7, #0]
 8011752:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011754:	79fb      	ldrb	r3, [r7, #7]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d105      	bne.n	8011766 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801175a:	683a      	ldr	r2, [r7, #0]
 801175c:	4907      	ldr	r1, [pc, #28]	; (801177c <USBD_FS_ConfigStrDescriptor+0x34>)
 801175e:	4808      	ldr	r0, [pc, #32]	; (8011780 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011760:	f7fc fa12 	bl	800db88 <USBD_GetString>
 8011764:	e004      	b.n	8011770 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011766:	683a      	ldr	r2, [r7, #0]
 8011768:	4904      	ldr	r1, [pc, #16]	; (801177c <USBD_FS_ConfigStrDescriptor+0x34>)
 801176a:	4805      	ldr	r0, [pc, #20]	; (8011780 <USBD_FS_ConfigStrDescriptor+0x38>)
 801176c:	f7fc fa0c 	bl	800db88 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011770:	4b02      	ldr	r3, [pc, #8]	; (801177c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011772:	4618      	mov	r0, r3
 8011774:	3708      	adds	r7, #8
 8011776:	46bd      	mov	sp, r7
 8011778:	bd80      	pop	{r7, pc}
 801177a:	bf00      	nop
 801177c:	20009480 	.word	0x20009480
 8011780:	08016554 	.word	0x08016554

08011784 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	4603      	mov	r3, r0
 801178c:	6039      	str	r1, [r7, #0]
 801178e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011790:	79fb      	ldrb	r3, [r7, #7]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d105      	bne.n	80117a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011796:	683a      	ldr	r2, [r7, #0]
 8011798:	4907      	ldr	r1, [pc, #28]	; (80117b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801179a:	4808      	ldr	r0, [pc, #32]	; (80117bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 801179c:	f7fc f9f4 	bl	800db88 <USBD_GetString>
 80117a0:	e004      	b.n	80117ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80117a2:	683a      	ldr	r2, [r7, #0]
 80117a4:	4904      	ldr	r1, [pc, #16]	; (80117b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80117a6:	4805      	ldr	r0, [pc, #20]	; (80117bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80117a8:	f7fc f9ee 	bl	800db88 <USBD_GetString>
  }
  return USBD_StrDesc;
 80117ac:	4b02      	ldr	r3, [pc, #8]	; (80117b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80117ae:	4618      	mov	r0, r3
 80117b0:	3708      	adds	r7, #8
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}
 80117b6:	bf00      	nop
 80117b8:	20009480 	.word	0x20009480
 80117bc:	08016560 	.word	0x08016560

080117c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b084      	sub	sp, #16
 80117c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80117c6:	4b0f      	ldr	r3, [pc, #60]	; (8011804 <Get_SerialNum+0x44>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80117cc:	4b0e      	ldr	r3, [pc, #56]	; (8011808 <Get_SerialNum+0x48>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80117d2:	4b0e      	ldr	r3, [pc, #56]	; (801180c <Get_SerialNum+0x4c>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80117d8:	68fa      	ldr	r2, [r7, #12]
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	4413      	add	r3, r2
 80117de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d009      	beq.n	80117fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80117e6:	2208      	movs	r2, #8
 80117e8:	4909      	ldr	r1, [pc, #36]	; (8011810 <Get_SerialNum+0x50>)
 80117ea:	68f8      	ldr	r0, [r7, #12]
 80117ec:	f000 f814 	bl	8011818 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80117f0:	2204      	movs	r2, #4
 80117f2:	4908      	ldr	r1, [pc, #32]	; (8011814 <Get_SerialNum+0x54>)
 80117f4:	68b8      	ldr	r0, [r7, #8]
 80117f6:	f000 f80f 	bl	8011818 <IntToUnicode>
  }
}
 80117fa:	bf00      	nop
 80117fc:	3710      	adds	r7, #16
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}
 8011802:	bf00      	nop
 8011804:	1fff7a10 	.word	0x1fff7a10
 8011808:	1fff7a14 	.word	0x1fff7a14
 801180c:	1fff7a18 	.word	0x1fff7a18
 8011810:	200003ca 	.word	0x200003ca
 8011814:	200003da 	.word	0x200003da

08011818 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011818:	b480      	push	{r7}
 801181a:	b087      	sub	sp, #28
 801181c:	af00      	add	r7, sp, #0
 801181e:	60f8      	str	r0, [r7, #12]
 8011820:	60b9      	str	r1, [r7, #8]
 8011822:	4613      	mov	r3, r2
 8011824:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011826:	2300      	movs	r3, #0
 8011828:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801182a:	2300      	movs	r3, #0
 801182c:	75fb      	strb	r3, [r7, #23]
 801182e:	e027      	b.n	8011880 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	0f1b      	lsrs	r3, r3, #28
 8011834:	2b09      	cmp	r3, #9
 8011836:	d80b      	bhi.n	8011850 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	0f1b      	lsrs	r3, r3, #28
 801183c:	b2da      	uxtb	r2, r3
 801183e:	7dfb      	ldrb	r3, [r7, #23]
 8011840:	005b      	lsls	r3, r3, #1
 8011842:	4619      	mov	r1, r3
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	440b      	add	r3, r1
 8011848:	3230      	adds	r2, #48	; 0x30
 801184a:	b2d2      	uxtb	r2, r2
 801184c:	701a      	strb	r2, [r3, #0]
 801184e:	e00a      	b.n	8011866 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	0f1b      	lsrs	r3, r3, #28
 8011854:	b2da      	uxtb	r2, r3
 8011856:	7dfb      	ldrb	r3, [r7, #23]
 8011858:	005b      	lsls	r3, r3, #1
 801185a:	4619      	mov	r1, r3
 801185c:	68bb      	ldr	r3, [r7, #8]
 801185e:	440b      	add	r3, r1
 8011860:	3237      	adds	r2, #55	; 0x37
 8011862:	b2d2      	uxtb	r2, r2
 8011864:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	011b      	lsls	r3, r3, #4
 801186a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801186c:	7dfb      	ldrb	r3, [r7, #23]
 801186e:	005b      	lsls	r3, r3, #1
 8011870:	3301      	adds	r3, #1
 8011872:	68ba      	ldr	r2, [r7, #8]
 8011874:	4413      	add	r3, r2
 8011876:	2200      	movs	r2, #0
 8011878:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801187a:	7dfb      	ldrb	r3, [r7, #23]
 801187c:	3301      	adds	r3, #1
 801187e:	75fb      	strb	r3, [r7, #23]
 8011880:	7dfa      	ldrb	r2, [r7, #23]
 8011882:	79fb      	ldrb	r3, [r7, #7]
 8011884:	429a      	cmp	r2, r3
 8011886:	d3d3      	bcc.n	8011830 <IntToUnicode+0x18>
  }
}
 8011888:	bf00      	nop
 801188a:	bf00      	nop
 801188c:	371c      	adds	r7, #28
 801188e:	46bd      	mov	sp, r7
 8011890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011894:	4770      	bx	lr
	...

08011898 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b08a      	sub	sp, #40	; 0x28
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80118a0:	f107 0314 	add.w	r3, r7, #20
 80118a4:	2200      	movs	r2, #0
 80118a6:	601a      	str	r2, [r3, #0]
 80118a8:	605a      	str	r2, [r3, #4]
 80118aa:	609a      	str	r2, [r3, #8]
 80118ac:	60da      	str	r2, [r3, #12]
 80118ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80118b8:	d13a      	bne.n	8011930 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80118ba:	2300      	movs	r3, #0
 80118bc:	613b      	str	r3, [r7, #16]
 80118be:	4b1e      	ldr	r3, [pc, #120]	; (8011938 <HAL_PCD_MspInit+0xa0>)
 80118c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118c2:	4a1d      	ldr	r2, [pc, #116]	; (8011938 <HAL_PCD_MspInit+0xa0>)
 80118c4:	f043 0301 	orr.w	r3, r3, #1
 80118c8:	6313      	str	r3, [r2, #48]	; 0x30
 80118ca:	4b1b      	ldr	r3, [pc, #108]	; (8011938 <HAL_PCD_MspInit+0xa0>)
 80118cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118ce:	f003 0301 	and.w	r3, r3, #1
 80118d2:	613b      	str	r3, [r7, #16]
 80118d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80118d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80118da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80118dc:	2302      	movs	r3, #2
 80118de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80118e0:	2300      	movs	r3, #0
 80118e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80118e4:	2303      	movs	r3, #3
 80118e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80118e8:	230a      	movs	r3, #10
 80118ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80118ec:	f107 0314 	add.w	r3, r7, #20
 80118f0:	4619      	mov	r1, r3
 80118f2:	4812      	ldr	r0, [pc, #72]	; (801193c <HAL_PCD_MspInit+0xa4>)
 80118f4:	f7f4 fc88 	bl	8006208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80118f8:	4b0f      	ldr	r3, [pc, #60]	; (8011938 <HAL_PCD_MspInit+0xa0>)
 80118fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118fc:	4a0e      	ldr	r2, [pc, #56]	; (8011938 <HAL_PCD_MspInit+0xa0>)
 80118fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011902:	6353      	str	r3, [r2, #52]	; 0x34
 8011904:	2300      	movs	r3, #0
 8011906:	60fb      	str	r3, [r7, #12]
 8011908:	4b0b      	ldr	r3, [pc, #44]	; (8011938 <HAL_PCD_MspInit+0xa0>)
 801190a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801190c:	4a0a      	ldr	r2, [pc, #40]	; (8011938 <HAL_PCD_MspInit+0xa0>)
 801190e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011912:	6453      	str	r3, [r2, #68]	; 0x44
 8011914:	4b08      	ldr	r3, [pc, #32]	; (8011938 <HAL_PCD_MspInit+0xa0>)
 8011916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801191c:	60fb      	str	r3, [r7, #12]
 801191e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011920:	2200      	movs	r2, #0
 8011922:	2105      	movs	r1, #5
 8011924:	2043      	movs	r0, #67	; 0x43
 8011926:	f7f4 f836 	bl	8005996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801192a:	2043      	movs	r0, #67	; 0x43
 801192c:	f7f4 f84f 	bl	80059ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011930:	bf00      	nop
 8011932:	3728      	adds	r7, #40	; 0x28
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}
 8011938:	40023800 	.word	0x40023800
 801193c:	40020000 	.word	0x40020000

08011940 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b082      	sub	sp, #8
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8011954:	4619      	mov	r1, r3
 8011956:	4610      	mov	r0, r2
 8011958:	f7fa ffb1 	bl	800c8be <USBD_LL_SetupStage>
}
 801195c:	bf00      	nop
 801195e:	3708      	adds	r7, #8
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}

08011964 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b082      	sub	sp, #8
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	460b      	mov	r3, r1
 801196e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8011976:	78fa      	ldrb	r2, [r7, #3]
 8011978:	6879      	ldr	r1, [r7, #4]
 801197a:	4613      	mov	r3, r2
 801197c:	00db      	lsls	r3, r3, #3
 801197e:	4413      	add	r3, r2
 8011980:	009b      	lsls	r3, r3, #2
 8011982:	440b      	add	r3, r1
 8011984:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8011988:	681a      	ldr	r2, [r3, #0]
 801198a:	78fb      	ldrb	r3, [r7, #3]
 801198c:	4619      	mov	r1, r3
 801198e:	f7fa ffeb 	bl	800c968 <USBD_LL_DataOutStage>
}
 8011992:	bf00      	nop
 8011994:	3708      	adds	r7, #8
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}

0801199a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801199a:	b580      	push	{r7, lr}
 801199c:	b082      	sub	sp, #8
 801199e:	af00      	add	r7, sp, #0
 80119a0:	6078      	str	r0, [r7, #4]
 80119a2:	460b      	mov	r3, r1
 80119a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80119ac:	78fa      	ldrb	r2, [r7, #3]
 80119ae:	6879      	ldr	r1, [r7, #4]
 80119b0:	4613      	mov	r3, r2
 80119b2:	00db      	lsls	r3, r3, #3
 80119b4:	4413      	add	r3, r2
 80119b6:	009b      	lsls	r3, r3, #2
 80119b8:	440b      	add	r3, r1
 80119ba:	3320      	adds	r3, #32
 80119bc:	681a      	ldr	r2, [r3, #0]
 80119be:	78fb      	ldrb	r3, [r7, #3]
 80119c0:	4619      	mov	r1, r3
 80119c2:	f7fb f884 	bl	800cace <USBD_LL_DataInStage>
}
 80119c6:	bf00      	nop
 80119c8:	3708      	adds	r7, #8
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}

080119ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119ce:	b580      	push	{r7, lr}
 80119d0:	b082      	sub	sp, #8
 80119d2:	af00      	add	r7, sp, #0
 80119d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80119dc:	4618      	mov	r0, r3
 80119de:	f7fb f9be 	bl	800cd5e <USBD_LL_SOF>
}
 80119e2:	bf00      	nop
 80119e4:	3708      	adds	r7, #8
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}

080119ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119ea:	b580      	push	{r7, lr}
 80119ec:	b084      	sub	sp, #16
 80119ee:	af00      	add	r7, sp, #0
 80119f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80119f2:	2301      	movs	r3, #1
 80119f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	79db      	ldrb	r3, [r3, #7]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d102      	bne.n	8011a04 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80119fe:	2300      	movs	r3, #0
 8011a00:	73fb      	strb	r3, [r7, #15]
 8011a02:	e008      	b.n	8011a16 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	79db      	ldrb	r3, [r3, #7]
 8011a08:	2b02      	cmp	r3, #2
 8011a0a:	d102      	bne.n	8011a12 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	73fb      	strb	r3, [r7, #15]
 8011a10:	e001      	b.n	8011a16 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011a12:	f7f2 fe13 	bl	800463c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011a1c:	7bfa      	ldrb	r2, [r7, #15]
 8011a1e:	4611      	mov	r1, r2
 8011a20:	4618      	mov	r0, r3
 8011a22:	f7fb f958 	bl	800ccd6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7fb f900 	bl	800cc32 <USBD_LL_Reset>
}
 8011a32:	bf00      	nop
 8011a34:	3710      	adds	r7, #16
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bd80      	pop	{r7, pc}
	...

08011a3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b082      	sub	sp, #8
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7fb f953 	bl	800ccf6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	687a      	ldr	r2, [r7, #4]
 8011a5c:	6812      	ldr	r2, [r2, #0]
 8011a5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011a62:	f043 0301 	orr.w	r3, r3, #1
 8011a66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	7adb      	ldrb	r3, [r3, #11]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d005      	beq.n	8011a7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011a70:	4b04      	ldr	r3, [pc, #16]	; (8011a84 <HAL_PCD_SuspendCallback+0x48>)
 8011a72:	691b      	ldr	r3, [r3, #16]
 8011a74:	4a03      	ldr	r2, [pc, #12]	; (8011a84 <HAL_PCD_SuspendCallback+0x48>)
 8011a76:	f043 0306 	orr.w	r3, r3, #6
 8011a7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011a7c:	bf00      	nop
 8011a7e:	3708      	adds	r7, #8
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd80      	pop	{r7, pc}
 8011a84:	e000ed00 	.word	0xe000ed00

08011a88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b082      	sub	sp, #8
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7fb f949 	bl	800cd2e <USBD_LL_Resume>
}
 8011a9c:	bf00      	nop
 8011a9e:	3708      	adds	r7, #8
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	460b      	mov	r3, r1
 8011aae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011ab6:	78fa      	ldrb	r2, [r7, #3]
 8011ab8:	4611      	mov	r1, r2
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7fb f9a1 	bl	800ce02 <USBD_LL_IsoOUTIncomplete>
}
 8011ac0:	bf00      	nop
 8011ac2:	3708      	adds	r7, #8
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}

08011ac8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b082      	sub	sp, #8
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	460b      	mov	r3, r1
 8011ad2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011ada:	78fa      	ldrb	r2, [r7, #3]
 8011adc:	4611      	mov	r1, r2
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f7fb f95d 	bl	800cd9e <USBD_LL_IsoINIncomplete>
}
 8011ae4:	bf00      	nop
 8011ae6:	3708      	adds	r7, #8
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}

08011aec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b082      	sub	sp, #8
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7fb f9b3 	bl	800ce66 <USBD_LL_DevConnected>
}
 8011b00:	bf00      	nop
 8011b02:	3708      	adds	r7, #8
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd80      	pop	{r7, pc}

08011b08 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b082      	sub	sp, #8
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7fb f9b0 	bl	800ce7c <USBD_LL_DevDisconnected>
}
 8011b1c:	bf00      	nop
 8011b1e:	3708      	adds	r7, #8
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}

08011b24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b082      	sub	sp, #8
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	781b      	ldrb	r3, [r3, #0]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d13c      	bne.n	8011bae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011b34:	4a20      	ldr	r2, [pc, #128]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	4a1e      	ldr	r2, [pc, #120]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b40:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011b44:	4b1c      	ldr	r3, [pc, #112]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011b4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011b4c:	4b1a      	ldr	r3, [pc, #104]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b4e:	2204      	movs	r2, #4
 8011b50:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011b52:	4b19      	ldr	r3, [pc, #100]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b54:	2202      	movs	r2, #2
 8011b56:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011b58:	4b17      	ldr	r3, [pc, #92]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011b5e:	4b16      	ldr	r3, [pc, #88]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b60:	2202      	movs	r2, #2
 8011b62:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011b64:	4b14      	ldr	r3, [pc, #80]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b66:	2200      	movs	r2, #0
 8011b68:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011b6a:	4b13      	ldr	r3, [pc, #76]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011b70:	4b11      	ldr	r3, [pc, #68]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b72:	2200      	movs	r2, #0
 8011b74:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011b76:	4b10      	ldr	r3, [pc, #64]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b78:	2200      	movs	r2, #0
 8011b7a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011b7c:	4b0e      	ldr	r3, [pc, #56]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b7e:	2200      	movs	r2, #0
 8011b80:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011b82:	480d      	ldr	r0, [pc, #52]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b84:	f7f4 fcf5 	bl	8006572 <HAL_PCD_Init>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d001      	beq.n	8011b92 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011b8e:	f7f2 fd55 	bl	800463c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011b92:	2180      	movs	r1, #128	; 0x80
 8011b94:	4808      	ldr	r0, [pc, #32]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b96:	f7f5 ff20 	bl	80079da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011b9a:	2240      	movs	r2, #64	; 0x40
 8011b9c:	2100      	movs	r1, #0
 8011b9e:	4806      	ldr	r0, [pc, #24]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011ba0:	f7f5 fed4 	bl	800794c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011ba4:	2280      	movs	r2, #128	; 0x80
 8011ba6:	2101      	movs	r1, #1
 8011ba8:	4803      	ldr	r0, [pc, #12]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011baa:	f7f5 fecf 	bl	800794c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011bae:	2300      	movs	r3, #0
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3708      	adds	r7, #8
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}
 8011bb8:	20009680 	.word	0x20009680

08011bbc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b084      	sub	sp, #16
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bc8:	2300      	movs	r3, #0
 8011bca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f7f4 fddc 	bl	8006790 <HAL_PCD_Start>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bdc:	7bfb      	ldrb	r3, [r7, #15]
 8011bde:	4618      	mov	r0, r3
 8011be0:	f000 f942 	bl	8011e68 <USBD_Get_USB_Status>
 8011be4:	4603      	mov	r3, r0
 8011be6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	3710      	adds	r7, #16
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}

08011bf2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011bf2:	b580      	push	{r7, lr}
 8011bf4:	b084      	sub	sp, #16
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	6078      	str	r0, [r7, #4]
 8011bfa:	4608      	mov	r0, r1
 8011bfc:	4611      	mov	r1, r2
 8011bfe:	461a      	mov	r2, r3
 8011c00:	4603      	mov	r3, r0
 8011c02:	70fb      	strb	r3, [r7, #3]
 8011c04:	460b      	mov	r3, r1
 8011c06:	70bb      	strb	r3, [r7, #2]
 8011c08:	4613      	mov	r3, r2
 8011c0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c10:	2300      	movs	r3, #0
 8011c12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011c1a:	78bb      	ldrb	r3, [r7, #2]
 8011c1c:	883a      	ldrh	r2, [r7, #0]
 8011c1e:	78f9      	ldrb	r1, [r7, #3]
 8011c20:	f7f5 fab0 	bl	8007184 <HAL_PCD_EP_Open>
 8011c24:	4603      	mov	r3, r0
 8011c26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c28:	7bfb      	ldrb	r3, [r7, #15]
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f000 f91c 	bl	8011e68 <USBD_Get_USB_Status>
 8011c30:	4603      	mov	r3, r0
 8011c32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	3710      	adds	r7, #16
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}

08011c3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b084      	sub	sp, #16
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]
 8011c46:	460b      	mov	r3, r1
 8011c48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011c58:	78fa      	ldrb	r2, [r7, #3]
 8011c5a:	4611      	mov	r1, r2
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f7f5 faf9 	bl	8007254 <HAL_PCD_EP_Close>
 8011c62:	4603      	mov	r3, r0
 8011c64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c66:	7bfb      	ldrb	r3, [r7, #15]
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f000 f8fd 	bl	8011e68 <USBD_Get_USB_Status>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c72:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	3710      	adds	r7, #16
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}

08011c7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b084      	sub	sp, #16
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	460b      	mov	r3, r1
 8011c86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c88:	2300      	movs	r3, #0
 8011c8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011c96:	78fa      	ldrb	r2, [r7, #3]
 8011c98:	4611      	mov	r1, r2
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f7f5 fbb1 	bl	8007402 <HAL_PCD_EP_SetStall>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ca4:	7bfb      	ldrb	r3, [r7, #15]
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	f000 f8de 	bl	8011e68 <USBD_Get_USB_Status>
 8011cac:	4603      	mov	r3, r0
 8011cae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	3710      	adds	r7, #16
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}

08011cba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011cba:	b580      	push	{r7, lr}
 8011cbc:	b084      	sub	sp, #16
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	6078      	str	r0, [r7, #4]
 8011cc2:	460b      	mov	r3, r1
 8011cc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011cd4:	78fa      	ldrb	r2, [r7, #3]
 8011cd6:	4611      	mov	r1, r2
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7f5 fbf5 	bl	80074c8 <HAL_PCD_EP_ClrStall>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ce2:	7bfb      	ldrb	r3, [r7, #15]
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f000 f8bf 	bl	8011e68 <USBD_Get_USB_Status>
 8011cea:	4603      	mov	r3, r0
 8011cec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cee:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3710      	adds	r7, #16
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}

08011cf8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b085      	sub	sp, #20
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	460b      	mov	r3, r1
 8011d02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011d0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011d0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	da0b      	bge.n	8011d2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011d14:	78fb      	ldrb	r3, [r7, #3]
 8011d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011d1a:	68f9      	ldr	r1, [r7, #12]
 8011d1c:	4613      	mov	r3, r2
 8011d1e:	00db      	lsls	r3, r3, #3
 8011d20:	4413      	add	r3, r2
 8011d22:	009b      	lsls	r3, r3, #2
 8011d24:	440b      	add	r3, r1
 8011d26:	3316      	adds	r3, #22
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	e00b      	b.n	8011d44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011d2c:	78fb      	ldrb	r3, [r7, #3]
 8011d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011d32:	68f9      	ldr	r1, [r7, #12]
 8011d34:	4613      	mov	r3, r2
 8011d36:	00db      	lsls	r3, r3, #3
 8011d38:	4413      	add	r3, r2
 8011d3a:	009b      	lsls	r3, r3, #2
 8011d3c:	440b      	add	r3, r1
 8011d3e:	f203 2356 	addw	r3, r3, #598	; 0x256
 8011d42:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011d44:	4618      	mov	r0, r3
 8011d46:	3714      	adds	r7, #20
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4e:	4770      	bx	lr

08011d50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b084      	sub	sp, #16
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
 8011d58:	460b      	mov	r3, r1
 8011d5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d60:	2300      	movs	r3, #0
 8011d62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011d6a:	78fa      	ldrb	r2, [r7, #3]
 8011d6c:	4611      	mov	r1, r2
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f7f5 f9e4 	bl	800713c <HAL_PCD_SetAddress>
 8011d74:	4603      	mov	r3, r0
 8011d76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d78:	7bfb      	ldrb	r3, [r7, #15]
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f000 f874 	bl	8011e68 <USBD_Get_USB_Status>
 8011d80:	4603      	mov	r3, r0
 8011d82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d84:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3710      	adds	r7, #16
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}

08011d8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011d8e:	b580      	push	{r7, lr}
 8011d90:	b086      	sub	sp, #24
 8011d92:	af00      	add	r7, sp, #0
 8011d94:	60f8      	str	r0, [r7, #12]
 8011d96:	607a      	str	r2, [r7, #4]
 8011d98:	603b      	str	r3, [r7, #0]
 8011d9a:	460b      	mov	r3, r1
 8011d9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011da2:	2300      	movs	r3, #0
 8011da4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011dac:	7af9      	ldrb	r1, [r7, #11]
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	687a      	ldr	r2, [r7, #4]
 8011db2:	f7f5 faec 	bl	800738e <HAL_PCD_EP_Transmit>
 8011db6:	4603      	mov	r3, r0
 8011db8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011dba:	7dfb      	ldrb	r3, [r7, #23]
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f000 f853 	bl	8011e68 <USBD_Get_USB_Status>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011dc6:	7dbb      	ldrb	r3, [r7, #22]
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	3718      	adds	r7, #24
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}

08011dd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b086      	sub	sp, #24
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	60f8      	str	r0, [r7, #12]
 8011dd8:	607a      	str	r2, [r7, #4]
 8011dda:	603b      	str	r3, [r7, #0]
 8011ddc:	460b      	mov	r3, r1
 8011dde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011de0:	2300      	movs	r3, #0
 8011de2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011de4:	2300      	movs	r3, #0
 8011de6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011dee:	7af9      	ldrb	r1, [r7, #11]
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	687a      	ldr	r2, [r7, #4]
 8011df4:	f7f5 fa78 	bl	80072e8 <HAL_PCD_EP_Receive>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011dfc:	7dfb      	ldrb	r3, [r7, #23]
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f000 f832 	bl	8011e68 <USBD_Get_USB_Status>
 8011e04:	4603      	mov	r3, r0
 8011e06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011e08:	7dbb      	ldrb	r3, [r7, #22]
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3718      	adds	r7, #24
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}

08011e12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011e12:	b580      	push	{r7, lr}
 8011e14:	b082      	sub	sp, #8
 8011e16:	af00      	add	r7, sp, #0
 8011e18:	6078      	str	r0, [r7, #4]
 8011e1a:	460b      	mov	r3, r1
 8011e1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011e24:	78fa      	ldrb	r2, [r7, #3]
 8011e26:	4611      	mov	r1, r2
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7f5 fa98 	bl	800735e <HAL_PCD_EP_GetRxCount>
 8011e2e:	4603      	mov	r3, r0
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	3708      	adds	r7, #8
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}

08011e38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011e38:	b480      	push	{r7}
 8011e3a:	b083      	sub	sp, #12
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011e40:	4b03      	ldr	r3, [pc, #12]	; (8011e50 <USBD_static_malloc+0x18>)
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	370c      	adds	r7, #12
 8011e46:	46bd      	mov	sp, r7
 8011e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4c:	4770      	bx	lr
 8011e4e:	bf00      	nop
 8011e50:	20009b64 	.word	0x20009b64

08011e54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011e54:	b480      	push	{r7}
 8011e56:	b083      	sub	sp, #12
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]

}
 8011e5c:	bf00      	nop
 8011e5e:	370c      	adds	r7, #12
 8011e60:	46bd      	mov	sp, r7
 8011e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e66:	4770      	bx	lr

08011e68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011e68:	b480      	push	{r7}
 8011e6a:	b085      	sub	sp, #20
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	4603      	mov	r3, r0
 8011e70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e72:	2300      	movs	r3, #0
 8011e74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011e76:	79fb      	ldrb	r3, [r7, #7]
 8011e78:	2b03      	cmp	r3, #3
 8011e7a:	d817      	bhi.n	8011eac <USBD_Get_USB_Status+0x44>
 8011e7c:	a201      	add	r2, pc, #4	; (adr r2, 8011e84 <USBD_Get_USB_Status+0x1c>)
 8011e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e82:	bf00      	nop
 8011e84:	08011e95 	.word	0x08011e95
 8011e88:	08011e9b 	.word	0x08011e9b
 8011e8c:	08011ea1 	.word	0x08011ea1
 8011e90:	08011ea7 	.word	0x08011ea7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011e94:	2300      	movs	r3, #0
 8011e96:	73fb      	strb	r3, [r7, #15]
    break;
 8011e98:	e00b      	b.n	8011eb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011e9a:	2303      	movs	r3, #3
 8011e9c:	73fb      	strb	r3, [r7, #15]
    break;
 8011e9e:	e008      	b.n	8011eb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8011ea4:	e005      	b.n	8011eb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011ea6:	2303      	movs	r3, #3
 8011ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8011eaa:	e002      	b.n	8011eb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011eac:	2303      	movs	r3, #3
 8011eae:	73fb      	strb	r3, [r7, #15]
    break;
 8011eb0:	bf00      	nop
  }
  return usb_status;
 8011eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	3714      	adds	r7, #20
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ebe:	4770      	bx	lr

08011ec0 <__cvt>:
 8011ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ec4:	ec55 4b10 	vmov	r4, r5, d0
 8011ec8:	2d00      	cmp	r5, #0
 8011eca:	460e      	mov	r6, r1
 8011ecc:	4619      	mov	r1, r3
 8011ece:	462b      	mov	r3, r5
 8011ed0:	bfbb      	ittet	lt
 8011ed2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011ed6:	461d      	movlt	r5, r3
 8011ed8:	2300      	movge	r3, #0
 8011eda:	232d      	movlt	r3, #45	; 0x2d
 8011edc:	700b      	strb	r3, [r1, #0]
 8011ede:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ee0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011ee4:	4691      	mov	r9, r2
 8011ee6:	f023 0820 	bic.w	r8, r3, #32
 8011eea:	bfbc      	itt	lt
 8011eec:	4622      	movlt	r2, r4
 8011eee:	4614      	movlt	r4, r2
 8011ef0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011ef4:	d005      	beq.n	8011f02 <__cvt+0x42>
 8011ef6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011efa:	d100      	bne.n	8011efe <__cvt+0x3e>
 8011efc:	3601      	adds	r6, #1
 8011efe:	2102      	movs	r1, #2
 8011f00:	e000      	b.n	8011f04 <__cvt+0x44>
 8011f02:	2103      	movs	r1, #3
 8011f04:	ab03      	add	r3, sp, #12
 8011f06:	9301      	str	r3, [sp, #4]
 8011f08:	ab02      	add	r3, sp, #8
 8011f0a:	9300      	str	r3, [sp, #0]
 8011f0c:	ec45 4b10 	vmov	d0, r4, r5
 8011f10:	4653      	mov	r3, sl
 8011f12:	4632      	mov	r2, r6
 8011f14:	f001 f830 	bl	8012f78 <_dtoa_r>
 8011f18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011f1c:	4607      	mov	r7, r0
 8011f1e:	d102      	bne.n	8011f26 <__cvt+0x66>
 8011f20:	f019 0f01 	tst.w	r9, #1
 8011f24:	d022      	beq.n	8011f6c <__cvt+0xac>
 8011f26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011f2a:	eb07 0906 	add.w	r9, r7, r6
 8011f2e:	d110      	bne.n	8011f52 <__cvt+0x92>
 8011f30:	783b      	ldrb	r3, [r7, #0]
 8011f32:	2b30      	cmp	r3, #48	; 0x30
 8011f34:	d10a      	bne.n	8011f4c <__cvt+0x8c>
 8011f36:	2200      	movs	r2, #0
 8011f38:	2300      	movs	r3, #0
 8011f3a:	4620      	mov	r0, r4
 8011f3c:	4629      	mov	r1, r5
 8011f3e:	f7ee fdd3 	bl	8000ae8 <__aeabi_dcmpeq>
 8011f42:	b918      	cbnz	r0, 8011f4c <__cvt+0x8c>
 8011f44:	f1c6 0601 	rsb	r6, r6, #1
 8011f48:	f8ca 6000 	str.w	r6, [sl]
 8011f4c:	f8da 3000 	ldr.w	r3, [sl]
 8011f50:	4499      	add	r9, r3
 8011f52:	2200      	movs	r2, #0
 8011f54:	2300      	movs	r3, #0
 8011f56:	4620      	mov	r0, r4
 8011f58:	4629      	mov	r1, r5
 8011f5a:	f7ee fdc5 	bl	8000ae8 <__aeabi_dcmpeq>
 8011f5e:	b108      	cbz	r0, 8011f64 <__cvt+0xa4>
 8011f60:	f8cd 900c 	str.w	r9, [sp, #12]
 8011f64:	2230      	movs	r2, #48	; 0x30
 8011f66:	9b03      	ldr	r3, [sp, #12]
 8011f68:	454b      	cmp	r3, r9
 8011f6a:	d307      	bcc.n	8011f7c <__cvt+0xbc>
 8011f6c:	9b03      	ldr	r3, [sp, #12]
 8011f6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011f70:	1bdb      	subs	r3, r3, r7
 8011f72:	4638      	mov	r0, r7
 8011f74:	6013      	str	r3, [r2, #0]
 8011f76:	b004      	add	sp, #16
 8011f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f7c:	1c59      	adds	r1, r3, #1
 8011f7e:	9103      	str	r1, [sp, #12]
 8011f80:	701a      	strb	r2, [r3, #0]
 8011f82:	e7f0      	b.n	8011f66 <__cvt+0xa6>

08011f84 <__exponent>:
 8011f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f86:	4603      	mov	r3, r0
 8011f88:	2900      	cmp	r1, #0
 8011f8a:	bfb8      	it	lt
 8011f8c:	4249      	neglt	r1, r1
 8011f8e:	f803 2b02 	strb.w	r2, [r3], #2
 8011f92:	bfb4      	ite	lt
 8011f94:	222d      	movlt	r2, #45	; 0x2d
 8011f96:	222b      	movge	r2, #43	; 0x2b
 8011f98:	2909      	cmp	r1, #9
 8011f9a:	7042      	strb	r2, [r0, #1]
 8011f9c:	dd2a      	ble.n	8011ff4 <__exponent+0x70>
 8011f9e:	f10d 0207 	add.w	r2, sp, #7
 8011fa2:	4617      	mov	r7, r2
 8011fa4:	260a      	movs	r6, #10
 8011fa6:	4694      	mov	ip, r2
 8011fa8:	fb91 f5f6 	sdiv	r5, r1, r6
 8011fac:	fb06 1415 	mls	r4, r6, r5, r1
 8011fb0:	3430      	adds	r4, #48	; 0x30
 8011fb2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8011fb6:	460c      	mov	r4, r1
 8011fb8:	2c63      	cmp	r4, #99	; 0x63
 8011fba:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8011fbe:	4629      	mov	r1, r5
 8011fc0:	dcf1      	bgt.n	8011fa6 <__exponent+0x22>
 8011fc2:	3130      	adds	r1, #48	; 0x30
 8011fc4:	f1ac 0402 	sub.w	r4, ip, #2
 8011fc8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011fcc:	1c41      	adds	r1, r0, #1
 8011fce:	4622      	mov	r2, r4
 8011fd0:	42ba      	cmp	r2, r7
 8011fd2:	d30a      	bcc.n	8011fea <__exponent+0x66>
 8011fd4:	f10d 0209 	add.w	r2, sp, #9
 8011fd8:	eba2 020c 	sub.w	r2, r2, ip
 8011fdc:	42bc      	cmp	r4, r7
 8011fde:	bf88      	it	hi
 8011fe0:	2200      	movhi	r2, #0
 8011fe2:	4413      	add	r3, r2
 8011fe4:	1a18      	subs	r0, r3, r0
 8011fe6:	b003      	add	sp, #12
 8011fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fea:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011fee:	f801 5f01 	strb.w	r5, [r1, #1]!
 8011ff2:	e7ed      	b.n	8011fd0 <__exponent+0x4c>
 8011ff4:	2330      	movs	r3, #48	; 0x30
 8011ff6:	3130      	adds	r1, #48	; 0x30
 8011ff8:	7083      	strb	r3, [r0, #2]
 8011ffa:	70c1      	strb	r1, [r0, #3]
 8011ffc:	1d03      	adds	r3, r0, #4
 8011ffe:	e7f1      	b.n	8011fe4 <__exponent+0x60>

08012000 <_printf_float>:
 8012000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012004:	ed2d 8b02 	vpush	{d8}
 8012008:	b08d      	sub	sp, #52	; 0x34
 801200a:	460c      	mov	r4, r1
 801200c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012010:	4616      	mov	r6, r2
 8012012:	461f      	mov	r7, r3
 8012014:	4605      	mov	r5, r0
 8012016:	f000 fe4b 	bl	8012cb0 <_localeconv_r>
 801201a:	f8d0 a000 	ldr.w	sl, [r0]
 801201e:	4650      	mov	r0, sl
 8012020:	f7ee f936 	bl	8000290 <strlen>
 8012024:	2300      	movs	r3, #0
 8012026:	930a      	str	r3, [sp, #40]	; 0x28
 8012028:	6823      	ldr	r3, [r4, #0]
 801202a:	9305      	str	r3, [sp, #20]
 801202c:	f8d8 3000 	ldr.w	r3, [r8]
 8012030:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012034:	3307      	adds	r3, #7
 8012036:	f023 0307 	bic.w	r3, r3, #7
 801203a:	f103 0208 	add.w	r2, r3, #8
 801203e:	f8c8 2000 	str.w	r2, [r8]
 8012042:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012046:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801204a:	9307      	str	r3, [sp, #28]
 801204c:	f8cd 8018 	str.w	r8, [sp, #24]
 8012050:	ee08 0a10 	vmov	s16, r0
 8012054:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8012058:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801205c:	4b9e      	ldr	r3, [pc, #632]	; (80122d8 <_printf_float+0x2d8>)
 801205e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012062:	f7ee fd73 	bl	8000b4c <__aeabi_dcmpun>
 8012066:	bb88      	cbnz	r0, 80120cc <_printf_float+0xcc>
 8012068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801206c:	4b9a      	ldr	r3, [pc, #616]	; (80122d8 <_printf_float+0x2d8>)
 801206e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012072:	f7ee fd4d 	bl	8000b10 <__aeabi_dcmple>
 8012076:	bb48      	cbnz	r0, 80120cc <_printf_float+0xcc>
 8012078:	2200      	movs	r2, #0
 801207a:	2300      	movs	r3, #0
 801207c:	4640      	mov	r0, r8
 801207e:	4649      	mov	r1, r9
 8012080:	f7ee fd3c 	bl	8000afc <__aeabi_dcmplt>
 8012084:	b110      	cbz	r0, 801208c <_printf_float+0x8c>
 8012086:	232d      	movs	r3, #45	; 0x2d
 8012088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801208c:	4a93      	ldr	r2, [pc, #588]	; (80122dc <_printf_float+0x2dc>)
 801208e:	4b94      	ldr	r3, [pc, #592]	; (80122e0 <_printf_float+0x2e0>)
 8012090:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012094:	bf94      	ite	ls
 8012096:	4690      	movls	r8, r2
 8012098:	4698      	movhi	r8, r3
 801209a:	2303      	movs	r3, #3
 801209c:	6123      	str	r3, [r4, #16]
 801209e:	9b05      	ldr	r3, [sp, #20]
 80120a0:	f023 0304 	bic.w	r3, r3, #4
 80120a4:	6023      	str	r3, [r4, #0]
 80120a6:	f04f 0900 	mov.w	r9, #0
 80120aa:	9700      	str	r7, [sp, #0]
 80120ac:	4633      	mov	r3, r6
 80120ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80120b0:	4621      	mov	r1, r4
 80120b2:	4628      	mov	r0, r5
 80120b4:	f000 f9da 	bl	801246c <_printf_common>
 80120b8:	3001      	adds	r0, #1
 80120ba:	f040 8090 	bne.w	80121de <_printf_float+0x1de>
 80120be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80120c2:	b00d      	add	sp, #52	; 0x34
 80120c4:	ecbd 8b02 	vpop	{d8}
 80120c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120cc:	4642      	mov	r2, r8
 80120ce:	464b      	mov	r3, r9
 80120d0:	4640      	mov	r0, r8
 80120d2:	4649      	mov	r1, r9
 80120d4:	f7ee fd3a 	bl	8000b4c <__aeabi_dcmpun>
 80120d8:	b140      	cbz	r0, 80120ec <_printf_float+0xec>
 80120da:	464b      	mov	r3, r9
 80120dc:	2b00      	cmp	r3, #0
 80120de:	bfbc      	itt	lt
 80120e0:	232d      	movlt	r3, #45	; 0x2d
 80120e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80120e6:	4a7f      	ldr	r2, [pc, #508]	; (80122e4 <_printf_float+0x2e4>)
 80120e8:	4b7f      	ldr	r3, [pc, #508]	; (80122e8 <_printf_float+0x2e8>)
 80120ea:	e7d1      	b.n	8012090 <_printf_float+0x90>
 80120ec:	6863      	ldr	r3, [r4, #4]
 80120ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80120f2:	9206      	str	r2, [sp, #24]
 80120f4:	1c5a      	adds	r2, r3, #1
 80120f6:	d13f      	bne.n	8012178 <_printf_float+0x178>
 80120f8:	2306      	movs	r3, #6
 80120fa:	6063      	str	r3, [r4, #4]
 80120fc:	9b05      	ldr	r3, [sp, #20]
 80120fe:	6861      	ldr	r1, [r4, #4]
 8012100:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012104:	2300      	movs	r3, #0
 8012106:	9303      	str	r3, [sp, #12]
 8012108:	ab0a      	add	r3, sp, #40	; 0x28
 801210a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801210e:	ab09      	add	r3, sp, #36	; 0x24
 8012110:	ec49 8b10 	vmov	d0, r8, r9
 8012114:	9300      	str	r3, [sp, #0]
 8012116:	6022      	str	r2, [r4, #0]
 8012118:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801211c:	4628      	mov	r0, r5
 801211e:	f7ff fecf 	bl	8011ec0 <__cvt>
 8012122:	9b06      	ldr	r3, [sp, #24]
 8012124:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012126:	2b47      	cmp	r3, #71	; 0x47
 8012128:	4680      	mov	r8, r0
 801212a:	d108      	bne.n	801213e <_printf_float+0x13e>
 801212c:	1cc8      	adds	r0, r1, #3
 801212e:	db02      	blt.n	8012136 <_printf_float+0x136>
 8012130:	6863      	ldr	r3, [r4, #4]
 8012132:	4299      	cmp	r1, r3
 8012134:	dd41      	ble.n	80121ba <_printf_float+0x1ba>
 8012136:	f1ab 0302 	sub.w	r3, fp, #2
 801213a:	fa5f fb83 	uxtb.w	fp, r3
 801213e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012142:	d820      	bhi.n	8012186 <_printf_float+0x186>
 8012144:	3901      	subs	r1, #1
 8012146:	465a      	mov	r2, fp
 8012148:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801214c:	9109      	str	r1, [sp, #36]	; 0x24
 801214e:	f7ff ff19 	bl	8011f84 <__exponent>
 8012152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012154:	1813      	adds	r3, r2, r0
 8012156:	2a01      	cmp	r2, #1
 8012158:	4681      	mov	r9, r0
 801215a:	6123      	str	r3, [r4, #16]
 801215c:	dc02      	bgt.n	8012164 <_printf_float+0x164>
 801215e:	6822      	ldr	r2, [r4, #0]
 8012160:	07d2      	lsls	r2, r2, #31
 8012162:	d501      	bpl.n	8012168 <_printf_float+0x168>
 8012164:	3301      	adds	r3, #1
 8012166:	6123      	str	r3, [r4, #16]
 8012168:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801216c:	2b00      	cmp	r3, #0
 801216e:	d09c      	beq.n	80120aa <_printf_float+0xaa>
 8012170:	232d      	movs	r3, #45	; 0x2d
 8012172:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012176:	e798      	b.n	80120aa <_printf_float+0xaa>
 8012178:	9a06      	ldr	r2, [sp, #24]
 801217a:	2a47      	cmp	r2, #71	; 0x47
 801217c:	d1be      	bne.n	80120fc <_printf_float+0xfc>
 801217e:	2b00      	cmp	r3, #0
 8012180:	d1bc      	bne.n	80120fc <_printf_float+0xfc>
 8012182:	2301      	movs	r3, #1
 8012184:	e7b9      	b.n	80120fa <_printf_float+0xfa>
 8012186:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801218a:	d118      	bne.n	80121be <_printf_float+0x1be>
 801218c:	2900      	cmp	r1, #0
 801218e:	6863      	ldr	r3, [r4, #4]
 8012190:	dd0b      	ble.n	80121aa <_printf_float+0x1aa>
 8012192:	6121      	str	r1, [r4, #16]
 8012194:	b913      	cbnz	r3, 801219c <_printf_float+0x19c>
 8012196:	6822      	ldr	r2, [r4, #0]
 8012198:	07d0      	lsls	r0, r2, #31
 801219a:	d502      	bpl.n	80121a2 <_printf_float+0x1a2>
 801219c:	3301      	adds	r3, #1
 801219e:	440b      	add	r3, r1
 80121a0:	6123      	str	r3, [r4, #16]
 80121a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80121a4:	f04f 0900 	mov.w	r9, #0
 80121a8:	e7de      	b.n	8012168 <_printf_float+0x168>
 80121aa:	b913      	cbnz	r3, 80121b2 <_printf_float+0x1b2>
 80121ac:	6822      	ldr	r2, [r4, #0]
 80121ae:	07d2      	lsls	r2, r2, #31
 80121b0:	d501      	bpl.n	80121b6 <_printf_float+0x1b6>
 80121b2:	3302      	adds	r3, #2
 80121b4:	e7f4      	b.n	80121a0 <_printf_float+0x1a0>
 80121b6:	2301      	movs	r3, #1
 80121b8:	e7f2      	b.n	80121a0 <_printf_float+0x1a0>
 80121ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80121be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121c0:	4299      	cmp	r1, r3
 80121c2:	db05      	blt.n	80121d0 <_printf_float+0x1d0>
 80121c4:	6823      	ldr	r3, [r4, #0]
 80121c6:	6121      	str	r1, [r4, #16]
 80121c8:	07d8      	lsls	r0, r3, #31
 80121ca:	d5ea      	bpl.n	80121a2 <_printf_float+0x1a2>
 80121cc:	1c4b      	adds	r3, r1, #1
 80121ce:	e7e7      	b.n	80121a0 <_printf_float+0x1a0>
 80121d0:	2900      	cmp	r1, #0
 80121d2:	bfd4      	ite	le
 80121d4:	f1c1 0202 	rsble	r2, r1, #2
 80121d8:	2201      	movgt	r2, #1
 80121da:	4413      	add	r3, r2
 80121dc:	e7e0      	b.n	80121a0 <_printf_float+0x1a0>
 80121de:	6823      	ldr	r3, [r4, #0]
 80121e0:	055a      	lsls	r2, r3, #21
 80121e2:	d407      	bmi.n	80121f4 <_printf_float+0x1f4>
 80121e4:	6923      	ldr	r3, [r4, #16]
 80121e6:	4642      	mov	r2, r8
 80121e8:	4631      	mov	r1, r6
 80121ea:	4628      	mov	r0, r5
 80121ec:	47b8      	blx	r7
 80121ee:	3001      	adds	r0, #1
 80121f0:	d12c      	bne.n	801224c <_printf_float+0x24c>
 80121f2:	e764      	b.n	80120be <_printf_float+0xbe>
 80121f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80121f8:	f240 80e0 	bls.w	80123bc <_printf_float+0x3bc>
 80121fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012200:	2200      	movs	r2, #0
 8012202:	2300      	movs	r3, #0
 8012204:	f7ee fc70 	bl	8000ae8 <__aeabi_dcmpeq>
 8012208:	2800      	cmp	r0, #0
 801220a:	d034      	beq.n	8012276 <_printf_float+0x276>
 801220c:	4a37      	ldr	r2, [pc, #220]	; (80122ec <_printf_float+0x2ec>)
 801220e:	2301      	movs	r3, #1
 8012210:	4631      	mov	r1, r6
 8012212:	4628      	mov	r0, r5
 8012214:	47b8      	blx	r7
 8012216:	3001      	adds	r0, #1
 8012218:	f43f af51 	beq.w	80120be <_printf_float+0xbe>
 801221c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012220:	429a      	cmp	r2, r3
 8012222:	db02      	blt.n	801222a <_printf_float+0x22a>
 8012224:	6823      	ldr	r3, [r4, #0]
 8012226:	07d8      	lsls	r0, r3, #31
 8012228:	d510      	bpl.n	801224c <_printf_float+0x24c>
 801222a:	ee18 3a10 	vmov	r3, s16
 801222e:	4652      	mov	r2, sl
 8012230:	4631      	mov	r1, r6
 8012232:	4628      	mov	r0, r5
 8012234:	47b8      	blx	r7
 8012236:	3001      	adds	r0, #1
 8012238:	f43f af41 	beq.w	80120be <_printf_float+0xbe>
 801223c:	f04f 0800 	mov.w	r8, #0
 8012240:	f104 091a 	add.w	r9, r4, #26
 8012244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012246:	3b01      	subs	r3, #1
 8012248:	4543      	cmp	r3, r8
 801224a:	dc09      	bgt.n	8012260 <_printf_float+0x260>
 801224c:	6823      	ldr	r3, [r4, #0]
 801224e:	079b      	lsls	r3, r3, #30
 8012250:	f100 8107 	bmi.w	8012462 <_printf_float+0x462>
 8012254:	68e0      	ldr	r0, [r4, #12]
 8012256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012258:	4298      	cmp	r0, r3
 801225a:	bfb8      	it	lt
 801225c:	4618      	movlt	r0, r3
 801225e:	e730      	b.n	80120c2 <_printf_float+0xc2>
 8012260:	2301      	movs	r3, #1
 8012262:	464a      	mov	r2, r9
 8012264:	4631      	mov	r1, r6
 8012266:	4628      	mov	r0, r5
 8012268:	47b8      	blx	r7
 801226a:	3001      	adds	r0, #1
 801226c:	f43f af27 	beq.w	80120be <_printf_float+0xbe>
 8012270:	f108 0801 	add.w	r8, r8, #1
 8012274:	e7e6      	b.n	8012244 <_printf_float+0x244>
 8012276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012278:	2b00      	cmp	r3, #0
 801227a:	dc39      	bgt.n	80122f0 <_printf_float+0x2f0>
 801227c:	4a1b      	ldr	r2, [pc, #108]	; (80122ec <_printf_float+0x2ec>)
 801227e:	2301      	movs	r3, #1
 8012280:	4631      	mov	r1, r6
 8012282:	4628      	mov	r0, r5
 8012284:	47b8      	blx	r7
 8012286:	3001      	adds	r0, #1
 8012288:	f43f af19 	beq.w	80120be <_printf_float+0xbe>
 801228c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012290:	4313      	orrs	r3, r2
 8012292:	d102      	bne.n	801229a <_printf_float+0x29a>
 8012294:	6823      	ldr	r3, [r4, #0]
 8012296:	07d9      	lsls	r1, r3, #31
 8012298:	d5d8      	bpl.n	801224c <_printf_float+0x24c>
 801229a:	ee18 3a10 	vmov	r3, s16
 801229e:	4652      	mov	r2, sl
 80122a0:	4631      	mov	r1, r6
 80122a2:	4628      	mov	r0, r5
 80122a4:	47b8      	blx	r7
 80122a6:	3001      	adds	r0, #1
 80122a8:	f43f af09 	beq.w	80120be <_printf_float+0xbe>
 80122ac:	f04f 0900 	mov.w	r9, #0
 80122b0:	f104 0a1a 	add.w	sl, r4, #26
 80122b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122b6:	425b      	negs	r3, r3
 80122b8:	454b      	cmp	r3, r9
 80122ba:	dc01      	bgt.n	80122c0 <_printf_float+0x2c0>
 80122bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122be:	e792      	b.n	80121e6 <_printf_float+0x1e6>
 80122c0:	2301      	movs	r3, #1
 80122c2:	4652      	mov	r2, sl
 80122c4:	4631      	mov	r1, r6
 80122c6:	4628      	mov	r0, r5
 80122c8:	47b8      	blx	r7
 80122ca:	3001      	adds	r0, #1
 80122cc:	f43f aef7 	beq.w	80120be <_printf_float+0xbe>
 80122d0:	f109 0901 	add.w	r9, r9, #1
 80122d4:	e7ee      	b.n	80122b4 <_printf_float+0x2b4>
 80122d6:	bf00      	nop
 80122d8:	7fefffff 	.word	0x7fefffff
 80122dc:	080166cd 	.word	0x080166cd
 80122e0:	080166d1 	.word	0x080166d1
 80122e4:	080166d5 	.word	0x080166d5
 80122e8:	080166d9 	.word	0x080166d9
 80122ec:	080166dd 	.word	0x080166dd
 80122f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80122f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80122f4:	429a      	cmp	r2, r3
 80122f6:	bfa8      	it	ge
 80122f8:	461a      	movge	r2, r3
 80122fa:	2a00      	cmp	r2, #0
 80122fc:	4691      	mov	r9, r2
 80122fe:	dc37      	bgt.n	8012370 <_printf_float+0x370>
 8012300:	f04f 0b00 	mov.w	fp, #0
 8012304:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012308:	f104 021a 	add.w	r2, r4, #26
 801230c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801230e:	9305      	str	r3, [sp, #20]
 8012310:	eba3 0309 	sub.w	r3, r3, r9
 8012314:	455b      	cmp	r3, fp
 8012316:	dc33      	bgt.n	8012380 <_printf_float+0x380>
 8012318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801231c:	429a      	cmp	r2, r3
 801231e:	db3b      	blt.n	8012398 <_printf_float+0x398>
 8012320:	6823      	ldr	r3, [r4, #0]
 8012322:	07da      	lsls	r2, r3, #31
 8012324:	d438      	bmi.n	8012398 <_printf_float+0x398>
 8012326:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801232a:	eba2 0903 	sub.w	r9, r2, r3
 801232e:	9b05      	ldr	r3, [sp, #20]
 8012330:	1ad2      	subs	r2, r2, r3
 8012332:	4591      	cmp	r9, r2
 8012334:	bfa8      	it	ge
 8012336:	4691      	movge	r9, r2
 8012338:	f1b9 0f00 	cmp.w	r9, #0
 801233c:	dc35      	bgt.n	80123aa <_printf_float+0x3aa>
 801233e:	f04f 0800 	mov.w	r8, #0
 8012342:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012346:	f104 0a1a 	add.w	sl, r4, #26
 801234a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801234e:	1a9b      	subs	r3, r3, r2
 8012350:	eba3 0309 	sub.w	r3, r3, r9
 8012354:	4543      	cmp	r3, r8
 8012356:	f77f af79 	ble.w	801224c <_printf_float+0x24c>
 801235a:	2301      	movs	r3, #1
 801235c:	4652      	mov	r2, sl
 801235e:	4631      	mov	r1, r6
 8012360:	4628      	mov	r0, r5
 8012362:	47b8      	blx	r7
 8012364:	3001      	adds	r0, #1
 8012366:	f43f aeaa 	beq.w	80120be <_printf_float+0xbe>
 801236a:	f108 0801 	add.w	r8, r8, #1
 801236e:	e7ec      	b.n	801234a <_printf_float+0x34a>
 8012370:	4613      	mov	r3, r2
 8012372:	4631      	mov	r1, r6
 8012374:	4642      	mov	r2, r8
 8012376:	4628      	mov	r0, r5
 8012378:	47b8      	blx	r7
 801237a:	3001      	adds	r0, #1
 801237c:	d1c0      	bne.n	8012300 <_printf_float+0x300>
 801237e:	e69e      	b.n	80120be <_printf_float+0xbe>
 8012380:	2301      	movs	r3, #1
 8012382:	4631      	mov	r1, r6
 8012384:	4628      	mov	r0, r5
 8012386:	9205      	str	r2, [sp, #20]
 8012388:	47b8      	blx	r7
 801238a:	3001      	adds	r0, #1
 801238c:	f43f ae97 	beq.w	80120be <_printf_float+0xbe>
 8012390:	9a05      	ldr	r2, [sp, #20]
 8012392:	f10b 0b01 	add.w	fp, fp, #1
 8012396:	e7b9      	b.n	801230c <_printf_float+0x30c>
 8012398:	ee18 3a10 	vmov	r3, s16
 801239c:	4652      	mov	r2, sl
 801239e:	4631      	mov	r1, r6
 80123a0:	4628      	mov	r0, r5
 80123a2:	47b8      	blx	r7
 80123a4:	3001      	adds	r0, #1
 80123a6:	d1be      	bne.n	8012326 <_printf_float+0x326>
 80123a8:	e689      	b.n	80120be <_printf_float+0xbe>
 80123aa:	9a05      	ldr	r2, [sp, #20]
 80123ac:	464b      	mov	r3, r9
 80123ae:	4442      	add	r2, r8
 80123b0:	4631      	mov	r1, r6
 80123b2:	4628      	mov	r0, r5
 80123b4:	47b8      	blx	r7
 80123b6:	3001      	adds	r0, #1
 80123b8:	d1c1      	bne.n	801233e <_printf_float+0x33e>
 80123ba:	e680      	b.n	80120be <_printf_float+0xbe>
 80123bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123be:	2a01      	cmp	r2, #1
 80123c0:	dc01      	bgt.n	80123c6 <_printf_float+0x3c6>
 80123c2:	07db      	lsls	r3, r3, #31
 80123c4:	d53a      	bpl.n	801243c <_printf_float+0x43c>
 80123c6:	2301      	movs	r3, #1
 80123c8:	4642      	mov	r2, r8
 80123ca:	4631      	mov	r1, r6
 80123cc:	4628      	mov	r0, r5
 80123ce:	47b8      	blx	r7
 80123d0:	3001      	adds	r0, #1
 80123d2:	f43f ae74 	beq.w	80120be <_printf_float+0xbe>
 80123d6:	ee18 3a10 	vmov	r3, s16
 80123da:	4652      	mov	r2, sl
 80123dc:	4631      	mov	r1, r6
 80123de:	4628      	mov	r0, r5
 80123e0:	47b8      	blx	r7
 80123e2:	3001      	adds	r0, #1
 80123e4:	f43f ae6b 	beq.w	80120be <_printf_float+0xbe>
 80123e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80123ec:	2200      	movs	r2, #0
 80123ee:	2300      	movs	r3, #0
 80123f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80123f4:	f7ee fb78 	bl	8000ae8 <__aeabi_dcmpeq>
 80123f8:	b9d8      	cbnz	r0, 8012432 <_printf_float+0x432>
 80123fa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80123fe:	f108 0201 	add.w	r2, r8, #1
 8012402:	4631      	mov	r1, r6
 8012404:	4628      	mov	r0, r5
 8012406:	47b8      	blx	r7
 8012408:	3001      	adds	r0, #1
 801240a:	d10e      	bne.n	801242a <_printf_float+0x42a>
 801240c:	e657      	b.n	80120be <_printf_float+0xbe>
 801240e:	2301      	movs	r3, #1
 8012410:	4652      	mov	r2, sl
 8012412:	4631      	mov	r1, r6
 8012414:	4628      	mov	r0, r5
 8012416:	47b8      	blx	r7
 8012418:	3001      	adds	r0, #1
 801241a:	f43f ae50 	beq.w	80120be <_printf_float+0xbe>
 801241e:	f108 0801 	add.w	r8, r8, #1
 8012422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012424:	3b01      	subs	r3, #1
 8012426:	4543      	cmp	r3, r8
 8012428:	dcf1      	bgt.n	801240e <_printf_float+0x40e>
 801242a:	464b      	mov	r3, r9
 801242c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012430:	e6da      	b.n	80121e8 <_printf_float+0x1e8>
 8012432:	f04f 0800 	mov.w	r8, #0
 8012436:	f104 0a1a 	add.w	sl, r4, #26
 801243a:	e7f2      	b.n	8012422 <_printf_float+0x422>
 801243c:	2301      	movs	r3, #1
 801243e:	4642      	mov	r2, r8
 8012440:	e7df      	b.n	8012402 <_printf_float+0x402>
 8012442:	2301      	movs	r3, #1
 8012444:	464a      	mov	r2, r9
 8012446:	4631      	mov	r1, r6
 8012448:	4628      	mov	r0, r5
 801244a:	47b8      	blx	r7
 801244c:	3001      	adds	r0, #1
 801244e:	f43f ae36 	beq.w	80120be <_printf_float+0xbe>
 8012452:	f108 0801 	add.w	r8, r8, #1
 8012456:	68e3      	ldr	r3, [r4, #12]
 8012458:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801245a:	1a5b      	subs	r3, r3, r1
 801245c:	4543      	cmp	r3, r8
 801245e:	dcf0      	bgt.n	8012442 <_printf_float+0x442>
 8012460:	e6f8      	b.n	8012254 <_printf_float+0x254>
 8012462:	f04f 0800 	mov.w	r8, #0
 8012466:	f104 0919 	add.w	r9, r4, #25
 801246a:	e7f4      	b.n	8012456 <_printf_float+0x456>

0801246c <_printf_common>:
 801246c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012470:	4616      	mov	r6, r2
 8012472:	4699      	mov	r9, r3
 8012474:	688a      	ldr	r2, [r1, #8]
 8012476:	690b      	ldr	r3, [r1, #16]
 8012478:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801247c:	4293      	cmp	r3, r2
 801247e:	bfb8      	it	lt
 8012480:	4613      	movlt	r3, r2
 8012482:	6033      	str	r3, [r6, #0]
 8012484:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012488:	4607      	mov	r7, r0
 801248a:	460c      	mov	r4, r1
 801248c:	b10a      	cbz	r2, 8012492 <_printf_common+0x26>
 801248e:	3301      	adds	r3, #1
 8012490:	6033      	str	r3, [r6, #0]
 8012492:	6823      	ldr	r3, [r4, #0]
 8012494:	0699      	lsls	r1, r3, #26
 8012496:	bf42      	ittt	mi
 8012498:	6833      	ldrmi	r3, [r6, #0]
 801249a:	3302      	addmi	r3, #2
 801249c:	6033      	strmi	r3, [r6, #0]
 801249e:	6825      	ldr	r5, [r4, #0]
 80124a0:	f015 0506 	ands.w	r5, r5, #6
 80124a4:	d106      	bne.n	80124b4 <_printf_common+0x48>
 80124a6:	f104 0a19 	add.w	sl, r4, #25
 80124aa:	68e3      	ldr	r3, [r4, #12]
 80124ac:	6832      	ldr	r2, [r6, #0]
 80124ae:	1a9b      	subs	r3, r3, r2
 80124b0:	42ab      	cmp	r3, r5
 80124b2:	dc26      	bgt.n	8012502 <_printf_common+0x96>
 80124b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80124b8:	1e13      	subs	r3, r2, #0
 80124ba:	6822      	ldr	r2, [r4, #0]
 80124bc:	bf18      	it	ne
 80124be:	2301      	movne	r3, #1
 80124c0:	0692      	lsls	r2, r2, #26
 80124c2:	d42b      	bmi.n	801251c <_printf_common+0xb0>
 80124c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80124c8:	4649      	mov	r1, r9
 80124ca:	4638      	mov	r0, r7
 80124cc:	47c0      	blx	r8
 80124ce:	3001      	adds	r0, #1
 80124d0:	d01e      	beq.n	8012510 <_printf_common+0xa4>
 80124d2:	6823      	ldr	r3, [r4, #0]
 80124d4:	6922      	ldr	r2, [r4, #16]
 80124d6:	f003 0306 	and.w	r3, r3, #6
 80124da:	2b04      	cmp	r3, #4
 80124dc:	bf02      	ittt	eq
 80124de:	68e5      	ldreq	r5, [r4, #12]
 80124e0:	6833      	ldreq	r3, [r6, #0]
 80124e2:	1aed      	subeq	r5, r5, r3
 80124e4:	68a3      	ldr	r3, [r4, #8]
 80124e6:	bf0c      	ite	eq
 80124e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80124ec:	2500      	movne	r5, #0
 80124ee:	4293      	cmp	r3, r2
 80124f0:	bfc4      	itt	gt
 80124f2:	1a9b      	subgt	r3, r3, r2
 80124f4:	18ed      	addgt	r5, r5, r3
 80124f6:	2600      	movs	r6, #0
 80124f8:	341a      	adds	r4, #26
 80124fa:	42b5      	cmp	r5, r6
 80124fc:	d11a      	bne.n	8012534 <_printf_common+0xc8>
 80124fe:	2000      	movs	r0, #0
 8012500:	e008      	b.n	8012514 <_printf_common+0xa8>
 8012502:	2301      	movs	r3, #1
 8012504:	4652      	mov	r2, sl
 8012506:	4649      	mov	r1, r9
 8012508:	4638      	mov	r0, r7
 801250a:	47c0      	blx	r8
 801250c:	3001      	adds	r0, #1
 801250e:	d103      	bne.n	8012518 <_printf_common+0xac>
 8012510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012518:	3501      	adds	r5, #1
 801251a:	e7c6      	b.n	80124aa <_printf_common+0x3e>
 801251c:	18e1      	adds	r1, r4, r3
 801251e:	1c5a      	adds	r2, r3, #1
 8012520:	2030      	movs	r0, #48	; 0x30
 8012522:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012526:	4422      	add	r2, r4
 8012528:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801252c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012530:	3302      	adds	r3, #2
 8012532:	e7c7      	b.n	80124c4 <_printf_common+0x58>
 8012534:	2301      	movs	r3, #1
 8012536:	4622      	mov	r2, r4
 8012538:	4649      	mov	r1, r9
 801253a:	4638      	mov	r0, r7
 801253c:	47c0      	blx	r8
 801253e:	3001      	adds	r0, #1
 8012540:	d0e6      	beq.n	8012510 <_printf_common+0xa4>
 8012542:	3601      	adds	r6, #1
 8012544:	e7d9      	b.n	80124fa <_printf_common+0x8e>
	...

08012548 <_printf_i>:
 8012548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801254c:	7e0f      	ldrb	r7, [r1, #24]
 801254e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012550:	2f78      	cmp	r7, #120	; 0x78
 8012552:	4691      	mov	r9, r2
 8012554:	4680      	mov	r8, r0
 8012556:	460c      	mov	r4, r1
 8012558:	469a      	mov	sl, r3
 801255a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801255e:	d807      	bhi.n	8012570 <_printf_i+0x28>
 8012560:	2f62      	cmp	r7, #98	; 0x62
 8012562:	d80a      	bhi.n	801257a <_printf_i+0x32>
 8012564:	2f00      	cmp	r7, #0
 8012566:	f000 80d4 	beq.w	8012712 <_printf_i+0x1ca>
 801256a:	2f58      	cmp	r7, #88	; 0x58
 801256c:	f000 80c0 	beq.w	80126f0 <_printf_i+0x1a8>
 8012570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012574:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012578:	e03a      	b.n	80125f0 <_printf_i+0xa8>
 801257a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801257e:	2b15      	cmp	r3, #21
 8012580:	d8f6      	bhi.n	8012570 <_printf_i+0x28>
 8012582:	a101      	add	r1, pc, #4	; (adr r1, 8012588 <_printf_i+0x40>)
 8012584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012588:	080125e1 	.word	0x080125e1
 801258c:	080125f5 	.word	0x080125f5
 8012590:	08012571 	.word	0x08012571
 8012594:	08012571 	.word	0x08012571
 8012598:	08012571 	.word	0x08012571
 801259c:	08012571 	.word	0x08012571
 80125a0:	080125f5 	.word	0x080125f5
 80125a4:	08012571 	.word	0x08012571
 80125a8:	08012571 	.word	0x08012571
 80125ac:	08012571 	.word	0x08012571
 80125b0:	08012571 	.word	0x08012571
 80125b4:	080126f9 	.word	0x080126f9
 80125b8:	08012621 	.word	0x08012621
 80125bc:	080126b3 	.word	0x080126b3
 80125c0:	08012571 	.word	0x08012571
 80125c4:	08012571 	.word	0x08012571
 80125c8:	0801271b 	.word	0x0801271b
 80125cc:	08012571 	.word	0x08012571
 80125d0:	08012621 	.word	0x08012621
 80125d4:	08012571 	.word	0x08012571
 80125d8:	08012571 	.word	0x08012571
 80125dc:	080126bb 	.word	0x080126bb
 80125e0:	682b      	ldr	r3, [r5, #0]
 80125e2:	1d1a      	adds	r2, r3, #4
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	602a      	str	r2, [r5, #0]
 80125e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80125ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80125f0:	2301      	movs	r3, #1
 80125f2:	e09f      	b.n	8012734 <_printf_i+0x1ec>
 80125f4:	6820      	ldr	r0, [r4, #0]
 80125f6:	682b      	ldr	r3, [r5, #0]
 80125f8:	0607      	lsls	r7, r0, #24
 80125fa:	f103 0104 	add.w	r1, r3, #4
 80125fe:	6029      	str	r1, [r5, #0]
 8012600:	d501      	bpl.n	8012606 <_printf_i+0xbe>
 8012602:	681e      	ldr	r6, [r3, #0]
 8012604:	e003      	b.n	801260e <_printf_i+0xc6>
 8012606:	0646      	lsls	r6, r0, #25
 8012608:	d5fb      	bpl.n	8012602 <_printf_i+0xba>
 801260a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801260e:	2e00      	cmp	r6, #0
 8012610:	da03      	bge.n	801261a <_printf_i+0xd2>
 8012612:	232d      	movs	r3, #45	; 0x2d
 8012614:	4276      	negs	r6, r6
 8012616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801261a:	485a      	ldr	r0, [pc, #360]	; (8012784 <_printf_i+0x23c>)
 801261c:	230a      	movs	r3, #10
 801261e:	e012      	b.n	8012646 <_printf_i+0xfe>
 8012620:	682b      	ldr	r3, [r5, #0]
 8012622:	6820      	ldr	r0, [r4, #0]
 8012624:	1d19      	adds	r1, r3, #4
 8012626:	6029      	str	r1, [r5, #0]
 8012628:	0605      	lsls	r5, r0, #24
 801262a:	d501      	bpl.n	8012630 <_printf_i+0xe8>
 801262c:	681e      	ldr	r6, [r3, #0]
 801262e:	e002      	b.n	8012636 <_printf_i+0xee>
 8012630:	0641      	lsls	r1, r0, #25
 8012632:	d5fb      	bpl.n	801262c <_printf_i+0xe4>
 8012634:	881e      	ldrh	r6, [r3, #0]
 8012636:	4853      	ldr	r0, [pc, #332]	; (8012784 <_printf_i+0x23c>)
 8012638:	2f6f      	cmp	r7, #111	; 0x6f
 801263a:	bf0c      	ite	eq
 801263c:	2308      	moveq	r3, #8
 801263e:	230a      	movne	r3, #10
 8012640:	2100      	movs	r1, #0
 8012642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012646:	6865      	ldr	r5, [r4, #4]
 8012648:	60a5      	str	r5, [r4, #8]
 801264a:	2d00      	cmp	r5, #0
 801264c:	bfa2      	ittt	ge
 801264e:	6821      	ldrge	r1, [r4, #0]
 8012650:	f021 0104 	bicge.w	r1, r1, #4
 8012654:	6021      	strge	r1, [r4, #0]
 8012656:	b90e      	cbnz	r6, 801265c <_printf_i+0x114>
 8012658:	2d00      	cmp	r5, #0
 801265a:	d04b      	beq.n	80126f4 <_printf_i+0x1ac>
 801265c:	4615      	mov	r5, r2
 801265e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012662:	fb03 6711 	mls	r7, r3, r1, r6
 8012666:	5dc7      	ldrb	r7, [r0, r7]
 8012668:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801266c:	4637      	mov	r7, r6
 801266e:	42bb      	cmp	r3, r7
 8012670:	460e      	mov	r6, r1
 8012672:	d9f4      	bls.n	801265e <_printf_i+0x116>
 8012674:	2b08      	cmp	r3, #8
 8012676:	d10b      	bne.n	8012690 <_printf_i+0x148>
 8012678:	6823      	ldr	r3, [r4, #0]
 801267a:	07de      	lsls	r6, r3, #31
 801267c:	d508      	bpl.n	8012690 <_printf_i+0x148>
 801267e:	6923      	ldr	r3, [r4, #16]
 8012680:	6861      	ldr	r1, [r4, #4]
 8012682:	4299      	cmp	r1, r3
 8012684:	bfde      	ittt	le
 8012686:	2330      	movle	r3, #48	; 0x30
 8012688:	f805 3c01 	strble.w	r3, [r5, #-1]
 801268c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012690:	1b52      	subs	r2, r2, r5
 8012692:	6122      	str	r2, [r4, #16]
 8012694:	f8cd a000 	str.w	sl, [sp]
 8012698:	464b      	mov	r3, r9
 801269a:	aa03      	add	r2, sp, #12
 801269c:	4621      	mov	r1, r4
 801269e:	4640      	mov	r0, r8
 80126a0:	f7ff fee4 	bl	801246c <_printf_common>
 80126a4:	3001      	adds	r0, #1
 80126a6:	d14a      	bne.n	801273e <_printf_i+0x1f6>
 80126a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126ac:	b004      	add	sp, #16
 80126ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126b2:	6823      	ldr	r3, [r4, #0]
 80126b4:	f043 0320 	orr.w	r3, r3, #32
 80126b8:	6023      	str	r3, [r4, #0]
 80126ba:	4833      	ldr	r0, [pc, #204]	; (8012788 <_printf_i+0x240>)
 80126bc:	2778      	movs	r7, #120	; 0x78
 80126be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80126c2:	6823      	ldr	r3, [r4, #0]
 80126c4:	6829      	ldr	r1, [r5, #0]
 80126c6:	061f      	lsls	r7, r3, #24
 80126c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80126cc:	d402      	bmi.n	80126d4 <_printf_i+0x18c>
 80126ce:	065f      	lsls	r7, r3, #25
 80126d0:	bf48      	it	mi
 80126d2:	b2b6      	uxthmi	r6, r6
 80126d4:	07df      	lsls	r7, r3, #31
 80126d6:	bf48      	it	mi
 80126d8:	f043 0320 	orrmi.w	r3, r3, #32
 80126dc:	6029      	str	r1, [r5, #0]
 80126de:	bf48      	it	mi
 80126e0:	6023      	strmi	r3, [r4, #0]
 80126e2:	b91e      	cbnz	r6, 80126ec <_printf_i+0x1a4>
 80126e4:	6823      	ldr	r3, [r4, #0]
 80126e6:	f023 0320 	bic.w	r3, r3, #32
 80126ea:	6023      	str	r3, [r4, #0]
 80126ec:	2310      	movs	r3, #16
 80126ee:	e7a7      	b.n	8012640 <_printf_i+0xf8>
 80126f0:	4824      	ldr	r0, [pc, #144]	; (8012784 <_printf_i+0x23c>)
 80126f2:	e7e4      	b.n	80126be <_printf_i+0x176>
 80126f4:	4615      	mov	r5, r2
 80126f6:	e7bd      	b.n	8012674 <_printf_i+0x12c>
 80126f8:	682b      	ldr	r3, [r5, #0]
 80126fa:	6826      	ldr	r6, [r4, #0]
 80126fc:	6961      	ldr	r1, [r4, #20]
 80126fe:	1d18      	adds	r0, r3, #4
 8012700:	6028      	str	r0, [r5, #0]
 8012702:	0635      	lsls	r5, r6, #24
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	d501      	bpl.n	801270c <_printf_i+0x1c4>
 8012708:	6019      	str	r1, [r3, #0]
 801270a:	e002      	b.n	8012712 <_printf_i+0x1ca>
 801270c:	0670      	lsls	r0, r6, #25
 801270e:	d5fb      	bpl.n	8012708 <_printf_i+0x1c0>
 8012710:	8019      	strh	r1, [r3, #0]
 8012712:	2300      	movs	r3, #0
 8012714:	6123      	str	r3, [r4, #16]
 8012716:	4615      	mov	r5, r2
 8012718:	e7bc      	b.n	8012694 <_printf_i+0x14c>
 801271a:	682b      	ldr	r3, [r5, #0]
 801271c:	1d1a      	adds	r2, r3, #4
 801271e:	602a      	str	r2, [r5, #0]
 8012720:	681d      	ldr	r5, [r3, #0]
 8012722:	6862      	ldr	r2, [r4, #4]
 8012724:	2100      	movs	r1, #0
 8012726:	4628      	mov	r0, r5
 8012728:	f7ed fd62 	bl	80001f0 <memchr>
 801272c:	b108      	cbz	r0, 8012732 <_printf_i+0x1ea>
 801272e:	1b40      	subs	r0, r0, r5
 8012730:	6060      	str	r0, [r4, #4]
 8012732:	6863      	ldr	r3, [r4, #4]
 8012734:	6123      	str	r3, [r4, #16]
 8012736:	2300      	movs	r3, #0
 8012738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801273c:	e7aa      	b.n	8012694 <_printf_i+0x14c>
 801273e:	6923      	ldr	r3, [r4, #16]
 8012740:	462a      	mov	r2, r5
 8012742:	4649      	mov	r1, r9
 8012744:	4640      	mov	r0, r8
 8012746:	47d0      	blx	sl
 8012748:	3001      	adds	r0, #1
 801274a:	d0ad      	beq.n	80126a8 <_printf_i+0x160>
 801274c:	6823      	ldr	r3, [r4, #0]
 801274e:	079b      	lsls	r3, r3, #30
 8012750:	d413      	bmi.n	801277a <_printf_i+0x232>
 8012752:	68e0      	ldr	r0, [r4, #12]
 8012754:	9b03      	ldr	r3, [sp, #12]
 8012756:	4298      	cmp	r0, r3
 8012758:	bfb8      	it	lt
 801275a:	4618      	movlt	r0, r3
 801275c:	e7a6      	b.n	80126ac <_printf_i+0x164>
 801275e:	2301      	movs	r3, #1
 8012760:	4632      	mov	r2, r6
 8012762:	4649      	mov	r1, r9
 8012764:	4640      	mov	r0, r8
 8012766:	47d0      	blx	sl
 8012768:	3001      	adds	r0, #1
 801276a:	d09d      	beq.n	80126a8 <_printf_i+0x160>
 801276c:	3501      	adds	r5, #1
 801276e:	68e3      	ldr	r3, [r4, #12]
 8012770:	9903      	ldr	r1, [sp, #12]
 8012772:	1a5b      	subs	r3, r3, r1
 8012774:	42ab      	cmp	r3, r5
 8012776:	dcf2      	bgt.n	801275e <_printf_i+0x216>
 8012778:	e7eb      	b.n	8012752 <_printf_i+0x20a>
 801277a:	2500      	movs	r5, #0
 801277c:	f104 0619 	add.w	r6, r4, #25
 8012780:	e7f5      	b.n	801276e <_printf_i+0x226>
 8012782:	bf00      	nop
 8012784:	080166df 	.word	0x080166df
 8012788:	080166f0 	.word	0x080166f0

0801278c <__sflush_r>:
 801278c:	898a      	ldrh	r2, [r1, #12]
 801278e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012792:	4605      	mov	r5, r0
 8012794:	0710      	lsls	r0, r2, #28
 8012796:	460c      	mov	r4, r1
 8012798:	d458      	bmi.n	801284c <__sflush_r+0xc0>
 801279a:	684b      	ldr	r3, [r1, #4]
 801279c:	2b00      	cmp	r3, #0
 801279e:	dc05      	bgt.n	80127ac <__sflush_r+0x20>
 80127a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	dc02      	bgt.n	80127ac <__sflush_r+0x20>
 80127a6:	2000      	movs	r0, #0
 80127a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80127ae:	2e00      	cmp	r6, #0
 80127b0:	d0f9      	beq.n	80127a6 <__sflush_r+0x1a>
 80127b2:	2300      	movs	r3, #0
 80127b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80127b8:	682f      	ldr	r7, [r5, #0]
 80127ba:	6a21      	ldr	r1, [r4, #32]
 80127bc:	602b      	str	r3, [r5, #0]
 80127be:	d032      	beq.n	8012826 <__sflush_r+0x9a>
 80127c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80127c2:	89a3      	ldrh	r3, [r4, #12]
 80127c4:	075a      	lsls	r2, r3, #29
 80127c6:	d505      	bpl.n	80127d4 <__sflush_r+0x48>
 80127c8:	6863      	ldr	r3, [r4, #4]
 80127ca:	1ac0      	subs	r0, r0, r3
 80127cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127ce:	b10b      	cbz	r3, 80127d4 <__sflush_r+0x48>
 80127d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80127d2:	1ac0      	subs	r0, r0, r3
 80127d4:	2300      	movs	r3, #0
 80127d6:	4602      	mov	r2, r0
 80127d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80127da:	6a21      	ldr	r1, [r4, #32]
 80127dc:	4628      	mov	r0, r5
 80127de:	47b0      	blx	r6
 80127e0:	1c43      	adds	r3, r0, #1
 80127e2:	89a3      	ldrh	r3, [r4, #12]
 80127e4:	d106      	bne.n	80127f4 <__sflush_r+0x68>
 80127e6:	6829      	ldr	r1, [r5, #0]
 80127e8:	291d      	cmp	r1, #29
 80127ea:	d82b      	bhi.n	8012844 <__sflush_r+0xb8>
 80127ec:	4a29      	ldr	r2, [pc, #164]	; (8012894 <__sflush_r+0x108>)
 80127ee:	410a      	asrs	r2, r1
 80127f0:	07d6      	lsls	r6, r2, #31
 80127f2:	d427      	bmi.n	8012844 <__sflush_r+0xb8>
 80127f4:	2200      	movs	r2, #0
 80127f6:	6062      	str	r2, [r4, #4]
 80127f8:	04d9      	lsls	r1, r3, #19
 80127fa:	6922      	ldr	r2, [r4, #16]
 80127fc:	6022      	str	r2, [r4, #0]
 80127fe:	d504      	bpl.n	801280a <__sflush_r+0x7e>
 8012800:	1c42      	adds	r2, r0, #1
 8012802:	d101      	bne.n	8012808 <__sflush_r+0x7c>
 8012804:	682b      	ldr	r3, [r5, #0]
 8012806:	b903      	cbnz	r3, 801280a <__sflush_r+0x7e>
 8012808:	6560      	str	r0, [r4, #84]	; 0x54
 801280a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801280c:	602f      	str	r7, [r5, #0]
 801280e:	2900      	cmp	r1, #0
 8012810:	d0c9      	beq.n	80127a6 <__sflush_r+0x1a>
 8012812:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012816:	4299      	cmp	r1, r3
 8012818:	d002      	beq.n	8012820 <__sflush_r+0x94>
 801281a:	4628      	mov	r0, r5
 801281c:	f001 f99e 	bl	8013b5c <_free_r>
 8012820:	2000      	movs	r0, #0
 8012822:	6360      	str	r0, [r4, #52]	; 0x34
 8012824:	e7c0      	b.n	80127a8 <__sflush_r+0x1c>
 8012826:	2301      	movs	r3, #1
 8012828:	4628      	mov	r0, r5
 801282a:	47b0      	blx	r6
 801282c:	1c41      	adds	r1, r0, #1
 801282e:	d1c8      	bne.n	80127c2 <__sflush_r+0x36>
 8012830:	682b      	ldr	r3, [r5, #0]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d0c5      	beq.n	80127c2 <__sflush_r+0x36>
 8012836:	2b1d      	cmp	r3, #29
 8012838:	d001      	beq.n	801283e <__sflush_r+0xb2>
 801283a:	2b16      	cmp	r3, #22
 801283c:	d101      	bne.n	8012842 <__sflush_r+0xb6>
 801283e:	602f      	str	r7, [r5, #0]
 8012840:	e7b1      	b.n	80127a6 <__sflush_r+0x1a>
 8012842:	89a3      	ldrh	r3, [r4, #12]
 8012844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012848:	81a3      	strh	r3, [r4, #12]
 801284a:	e7ad      	b.n	80127a8 <__sflush_r+0x1c>
 801284c:	690f      	ldr	r7, [r1, #16]
 801284e:	2f00      	cmp	r7, #0
 8012850:	d0a9      	beq.n	80127a6 <__sflush_r+0x1a>
 8012852:	0793      	lsls	r3, r2, #30
 8012854:	680e      	ldr	r6, [r1, #0]
 8012856:	bf08      	it	eq
 8012858:	694b      	ldreq	r3, [r1, #20]
 801285a:	600f      	str	r7, [r1, #0]
 801285c:	bf18      	it	ne
 801285e:	2300      	movne	r3, #0
 8012860:	eba6 0807 	sub.w	r8, r6, r7
 8012864:	608b      	str	r3, [r1, #8]
 8012866:	f1b8 0f00 	cmp.w	r8, #0
 801286a:	dd9c      	ble.n	80127a6 <__sflush_r+0x1a>
 801286c:	6a21      	ldr	r1, [r4, #32]
 801286e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012870:	4643      	mov	r3, r8
 8012872:	463a      	mov	r2, r7
 8012874:	4628      	mov	r0, r5
 8012876:	47b0      	blx	r6
 8012878:	2800      	cmp	r0, #0
 801287a:	dc06      	bgt.n	801288a <__sflush_r+0xfe>
 801287c:	89a3      	ldrh	r3, [r4, #12]
 801287e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012882:	81a3      	strh	r3, [r4, #12]
 8012884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012888:	e78e      	b.n	80127a8 <__sflush_r+0x1c>
 801288a:	4407      	add	r7, r0
 801288c:	eba8 0800 	sub.w	r8, r8, r0
 8012890:	e7e9      	b.n	8012866 <__sflush_r+0xda>
 8012892:	bf00      	nop
 8012894:	dfbffffe 	.word	0xdfbffffe

08012898 <_fflush_r>:
 8012898:	b538      	push	{r3, r4, r5, lr}
 801289a:	690b      	ldr	r3, [r1, #16]
 801289c:	4605      	mov	r5, r0
 801289e:	460c      	mov	r4, r1
 80128a0:	b913      	cbnz	r3, 80128a8 <_fflush_r+0x10>
 80128a2:	2500      	movs	r5, #0
 80128a4:	4628      	mov	r0, r5
 80128a6:	bd38      	pop	{r3, r4, r5, pc}
 80128a8:	b118      	cbz	r0, 80128b2 <_fflush_r+0x1a>
 80128aa:	6a03      	ldr	r3, [r0, #32]
 80128ac:	b90b      	cbnz	r3, 80128b2 <_fflush_r+0x1a>
 80128ae:	f000 f8bb 	bl	8012a28 <__sinit>
 80128b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d0f3      	beq.n	80128a2 <_fflush_r+0xa>
 80128ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80128bc:	07d0      	lsls	r0, r2, #31
 80128be:	d404      	bmi.n	80128ca <_fflush_r+0x32>
 80128c0:	0599      	lsls	r1, r3, #22
 80128c2:	d402      	bmi.n	80128ca <_fflush_r+0x32>
 80128c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128c6:	f000 fabe 	bl	8012e46 <__retarget_lock_acquire_recursive>
 80128ca:	4628      	mov	r0, r5
 80128cc:	4621      	mov	r1, r4
 80128ce:	f7ff ff5d 	bl	801278c <__sflush_r>
 80128d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80128d4:	07da      	lsls	r2, r3, #31
 80128d6:	4605      	mov	r5, r0
 80128d8:	d4e4      	bmi.n	80128a4 <_fflush_r+0xc>
 80128da:	89a3      	ldrh	r3, [r4, #12]
 80128dc:	059b      	lsls	r3, r3, #22
 80128de:	d4e1      	bmi.n	80128a4 <_fflush_r+0xc>
 80128e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128e2:	f000 fab1 	bl	8012e48 <__retarget_lock_release_recursive>
 80128e6:	e7dd      	b.n	80128a4 <_fflush_r+0xc>

080128e8 <fflush>:
 80128e8:	4601      	mov	r1, r0
 80128ea:	b920      	cbnz	r0, 80128f6 <fflush+0xe>
 80128ec:	4a04      	ldr	r2, [pc, #16]	; (8012900 <fflush+0x18>)
 80128ee:	4905      	ldr	r1, [pc, #20]	; (8012904 <fflush+0x1c>)
 80128f0:	4805      	ldr	r0, [pc, #20]	; (8012908 <fflush+0x20>)
 80128f2:	f000 b8b1 	b.w	8012a58 <_fwalk_sglue>
 80128f6:	4b05      	ldr	r3, [pc, #20]	; (801290c <fflush+0x24>)
 80128f8:	6818      	ldr	r0, [r3, #0]
 80128fa:	f7ff bfcd 	b.w	8012898 <_fflush_r>
 80128fe:	bf00      	nop
 8012900:	200003e4 	.word	0x200003e4
 8012904:	08012899 	.word	0x08012899
 8012908:	200003f0 	.word	0x200003f0
 801290c:	2000043c 	.word	0x2000043c

08012910 <std>:
 8012910:	2300      	movs	r3, #0
 8012912:	b510      	push	{r4, lr}
 8012914:	4604      	mov	r4, r0
 8012916:	e9c0 3300 	strd	r3, r3, [r0]
 801291a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801291e:	6083      	str	r3, [r0, #8]
 8012920:	8181      	strh	r1, [r0, #12]
 8012922:	6643      	str	r3, [r0, #100]	; 0x64
 8012924:	81c2      	strh	r2, [r0, #14]
 8012926:	6183      	str	r3, [r0, #24]
 8012928:	4619      	mov	r1, r3
 801292a:	2208      	movs	r2, #8
 801292c:	305c      	adds	r0, #92	; 0x5c
 801292e:	f000 f9a3 	bl	8012c78 <memset>
 8012932:	4b0d      	ldr	r3, [pc, #52]	; (8012968 <std+0x58>)
 8012934:	6263      	str	r3, [r4, #36]	; 0x24
 8012936:	4b0d      	ldr	r3, [pc, #52]	; (801296c <std+0x5c>)
 8012938:	62a3      	str	r3, [r4, #40]	; 0x28
 801293a:	4b0d      	ldr	r3, [pc, #52]	; (8012970 <std+0x60>)
 801293c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801293e:	4b0d      	ldr	r3, [pc, #52]	; (8012974 <std+0x64>)
 8012940:	6323      	str	r3, [r4, #48]	; 0x30
 8012942:	4b0d      	ldr	r3, [pc, #52]	; (8012978 <std+0x68>)
 8012944:	6224      	str	r4, [r4, #32]
 8012946:	429c      	cmp	r4, r3
 8012948:	d006      	beq.n	8012958 <std+0x48>
 801294a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801294e:	4294      	cmp	r4, r2
 8012950:	d002      	beq.n	8012958 <std+0x48>
 8012952:	33d0      	adds	r3, #208	; 0xd0
 8012954:	429c      	cmp	r4, r3
 8012956:	d105      	bne.n	8012964 <std+0x54>
 8012958:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801295c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012960:	f000 ba70 	b.w	8012e44 <__retarget_lock_init_recursive>
 8012964:	bd10      	pop	{r4, pc}
 8012966:	bf00      	nop
 8012968:	08012ac9 	.word	0x08012ac9
 801296c:	08012aeb 	.word	0x08012aeb
 8012970:	08012b23 	.word	0x08012b23
 8012974:	08012b47 	.word	0x08012b47
 8012978:	20009d84 	.word	0x20009d84

0801297c <stdio_exit_handler>:
 801297c:	4a02      	ldr	r2, [pc, #8]	; (8012988 <stdio_exit_handler+0xc>)
 801297e:	4903      	ldr	r1, [pc, #12]	; (801298c <stdio_exit_handler+0x10>)
 8012980:	4803      	ldr	r0, [pc, #12]	; (8012990 <stdio_exit_handler+0x14>)
 8012982:	f000 b869 	b.w	8012a58 <_fwalk_sglue>
 8012986:	bf00      	nop
 8012988:	200003e4 	.word	0x200003e4
 801298c:	08012899 	.word	0x08012899
 8012990:	200003f0 	.word	0x200003f0

08012994 <cleanup_stdio>:
 8012994:	6841      	ldr	r1, [r0, #4]
 8012996:	4b0c      	ldr	r3, [pc, #48]	; (80129c8 <cleanup_stdio+0x34>)
 8012998:	4299      	cmp	r1, r3
 801299a:	b510      	push	{r4, lr}
 801299c:	4604      	mov	r4, r0
 801299e:	d001      	beq.n	80129a4 <cleanup_stdio+0x10>
 80129a0:	f7ff ff7a 	bl	8012898 <_fflush_r>
 80129a4:	68a1      	ldr	r1, [r4, #8]
 80129a6:	4b09      	ldr	r3, [pc, #36]	; (80129cc <cleanup_stdio+0x38>)
 80129a8:	4299      	cmp	r1, r3
 80129aa:	d002      	beq.n	80129b2 <cleanup_stdio+0x1e>
 80129ac:	4620      	mov	r0, r4
 80129ae:	f7ff ff73 	bl	8012898 <_fflush_r>
 80129b2:	68e1      	ldr	r1, [r4, #12]
 80129b4:	4b06      	ldr	r3, [pc, #24]	; (80129d0 <cleanup_stdio+0x3c>)
 80129b6:	4299      	cmp	r1, r3
 80129b8:	d004      	beq.n	80129c4 <cleanup_stdio+0x30>
 80129ba:	4620      	mov	r0, r4
 80129bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129c0:	f7ff bf6a 	b.w	8012898 <_fflush_r>
 80129c4:	bd10      	pop	{r4, pc}
 80129c6:	bf00      	nop
 80129c8:	20009d84 	.word	0x20009d84
 80129cc:	20009dec 	.word	0x20009dec
 80129d0:	20009e54 	.word	0x20009e54

080129d4 <global_stdio_init.part.0>:
 80129d4:	b510      	push	{r4, lr}
 80129d6:	4b0b      	ldr	r3, [pc, #44]	; (8012a04 <global_stdio_init.part.0+0x30>)
 80129d8:	4c0b      	ldr	r4, [pc, #44]	; (8012a08 <global_stdio_init.part.0+0x34>)
 80129da:	4a0c      	ldr	r2, [pc, #48]	; (8012a0c <global_stdio_init.part.0+0x38>)
 80129dc:	601a      	str	r2, [r3, #0]
 80129de:	4620      	mov	r0, r4
 80129e0:	2200      	movs	r2, #0
 80129e2:	2104      	movs	r1, #4
 80129e4:	f7ff ff94 	bl	8012910 <std>
 80129e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80129ec:	2201      	movs	r2, #1
 80129ee:	2109      	movs	r1, #9
 80129f0:	f7ff ff8e 	bl	8012910 <std>
 80129f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80129f8:	2202      	movs	r2, #2
 80129fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129fe:	2112      	movs	r1, #18
 8012a00:	f7ff bf86 	b.w	8012910 <std>
 8012a04:	20009ebc 	.word	0x20009ebc
 8012a08:	20009d84 	.word	0x20009d84
 8012a0c:	0801297d 	.word	0x0801297d

08012a10 <__sfp_lock_acquire>:
 8012a10:	4801      	ldr	r0, [pc, #4]	; (8012a18 <__sfp_lock_acquire+0x8>)
 8012a12:	f000 ba18 	b.w	8012e46 <__retarget_lock_acquire_recursive>
 8012a16:	bf00      	nop
 8012a18:	20009ec5 	.word	0x20009ec5

08012a1c <__sfp_lock_release>:
 8012a1c:	4801      	ldr	r0, [pc, #4]	; (8012a24 <__sfp_lock_release+0x8>)
 8012a1e:	f000 ba13 	b.w	8012e48 <__retarget_lock_release_recursive>
 8012a22:	bf00      	nop
 8012a24:	20009ec5 	.word	0x20009ec5

08012a28 <__sinit>:
 8012a28:	b510      	push	{r4, lr}
 8012a2a:	4604      	mov	r4, r0
 8012a2c:	f7ff fff0 	bl	8012a10 <__sfp_lock_acquire>
 8012a30:	6a23      	ldr	r3, [r4, #32]
 8012a32:	b11b      	cbz	r3, 8012a3c <__sinit+0x14>
 8012a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a38:	f7ff bff0 	b.w	8012a1c <__sfp_lock_release>
 8012a3c:	4b04      	ldr	r3, [pc, #16]	; (8012a50 <__sinit+0x28>)
 8012a3e:	6223      	str	r3, [r4, #32]
 8012a40:	4b04      	ldr	r3, [pc, #16]	; (8012a54 <__sinit+0x2c>)
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d1f5      	bne.n	8012a34 <__sinit+0xc>
 8012a48:	f7ff ffc4 	bl	80129d4 <global_stdio_init.part.0>
 8012a4c:	e7f2      	b.n	8012a34 <__sinit+0xc>
 8012a4e:	bf00      	nop
 8012a50:	08012995 	.word	0x08012995
 8012a54:	20009ebc 	.word	0x20009ebc

08012a58 <_fwalk_sglue>:
 8012a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a5c:	4607      	mov	r7, r0
 8012a5e:	4688      	mov	r8, r1
 8012a60:	4614      	mov	r4, r2
 8012a62:	2600      	movs	r6, #0
 8012a64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012a68:	f1b9 0901 	subs.w	r9, r9, #1
 8012a6c:	d505      	bpl.n	8012a7a <_fwalk_sglue+0x22>
 8012a6e:	6824      	ldr	r4, [r4, #0]
 8012a70:	2c00      	cmp	r4, #0
 8012a72:	d1f7      	bne.n	8012a64 <_fwalk_sglue+0xc>
 8012a74:	4630      	mov	r0, r6
 8012a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a7a:	89ab      	ldrh	r3, [r5, #12]
 8012a7c:	2b01      	cmp	r3, #1
 8012a7e:	d907      	bls.n	8012a90 <_fwalk_sglue+0x38>
 8012a80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012a84:	3301      	adds	r3, #1
 8012a86:	d003      	beq.n	8012a90 <_fwalk_sglue+0x38>
 8012a88:	4629      	mov	r1, r5
 8012a8a:	4638      	mov	r0, r7
 8012a8c:	47c0      	blx	r8
 8012a8e:	4306      	orrs	r6, r0
 8012a90:	3568      	adds	r5, #104	; 0x68
 8012a92:	e7e9      	b.n	8012a68 <_fwalk_sglue+0x10>

08012a94 <iprintf>:
 8012a94:	b40f      	push	{r0, r1, r2, r3}
 8012a96:	b507      	push	{r0, r1, r2, lr}
 8012a98:	4906      	ldr	r1, [pc, #24]	; (8012ab4 <iprintf+0x20>)
 8012a9a:	ab04      	add	r3, sp, #16
 8012a9c:	6808      	ldr	r0, [r1, #0]
 8012a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012aa2:	6881      	ldr	r1, [r0, #8]
 8012aa4:	9301      	str	r3, [sp, #4]
 8012aa6:	f001 fcff 	bl	80144a8 <_vfiprintf_r>
 8012aaa:	b003      	add	sp, #12
 8012aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ab0:	b004      	add	sp, #16
 8012ab2:	4770      	bx	lr
 8012ab4:	2000043c 	.word	0x2000043c

08012ab8 <putchar>:
 8012ab8:	4b02      	ldr	r3, [pc, #8]	; (8012ac4 <putchar+0xc>)
 8012aba:	4601      	mov	r1, r0
 8012abc:	6818      	ldr	r0, [r3, #0]
 8012abe:	6882      	ldr	r2, [r0, #8]
 8012ac0:	f001 be6e 	b.w	80147a0 <_putc_r>
 8012ac4:	2000043c 	.word	0x2000043c

08012ac8 <__sread>:
 8012ac8:	b510      	push	{r4, lr}
 8012aca:	460c      	mov	r4, r1
 8012acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ad0:	f000 f96a 	bl	8012da8 <_read_r>
 8012ad4:	2800      	cmp	r0, #0
 8012ad6:	bfab      	itete	ge
 8012ad8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012ada:	89a3      	ldrhlt	r3, [r4, #12]
 8012adc:	181b      	addge	r3, r3, r0
 8012ade:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012ae2:	bfac      	ite	ge
 8012ae4:	6563      	strge	r3, [r4, #84]	; 0x54
 8012ae6:	81a3      	strhlt	r3, [r4, #12]
 8012ae8:	bd10      	pop	{r4, pc}

08012aea <__swrite>:
 8012aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aee:	461f      	mov	r7, r3
 8012af0:	898b      	ldrh	r3, [r1, #12]
 8012af2:	05db      	lsls	r3, r3, #23
 8012af4:	4605      	mov	r5, r0
 8012af6:	460c      	mov	r4, r1
 8012af8:	4616      	mov	r6, r2
 8012afa:	d505      	bpl.n	8012b08 <__swrite+0x1e>
 8012afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b00:	2302      	movs	r3, #2
 8012b02:	2200      	movs	r2, #0
 8012b04:	f000 f93e 	bl	8012d84 <_lseek_r>
 8012b08:	89a3      	ldrh	r3, [r4, #12]
 8012b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012b12:	81a3      	strh	r3, [r4, #12]
 8012b14:	4632      	mov	r2, r6
 8012b16:	463b      	mov	r3, r7
 8012b18:	4628      	mov	r0, r5
 8012b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b1e:	f000 b955 	b.w	8012dcc <_write_r>

08012b22 <__sseek>:
 8012b22:	b510      	push	{r4, lr}
 8012b24:	460c      	mov	r4, r1
 8012b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b2a:	f000 f92b 	bl	8012d84 <_lseek_r>
 8012b2e:	1c43      	adds	r3, r0, #1
 8012b30:	89a3      	ldrh	r3, [r4, #12]
 8012b32:	bf15      	itete	ne
 8012b34:	6560      	strne	r0, [r4, #84]	; 0x54
 8012b36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012b3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012b3e:	81a3      	strheq	r3, [r4, #12]
 8012b40:	bf18      	it	ne
 8012b42:	81a3      	strhne	r3, [r4, #12]
 8012b44:	bd10      	pop	{r4, pc}

08012b46 <__sclose>:
 8012b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b4a:	f000 b8b5 	b.w	8012cb8 <_close_r>

08012b4e <__swbuf_r>:
 8012b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b50:	460e      	mov	r6, r1
 8012b52:	4614      	mov	r4, r2
 8012b54:	4605      	mov	r5, r0
 8012b56:	b118      	cbz	r0, 8012b60 <__swbuf_r+0x12>
 8012b58:	6a03      	ldr	r3, [r0, #32]
 8012b5a:	b90b      	cbnz	r3, 8012b60 <__swbuf_r+0x12>
 8012b5c:	f7ff ff64 	bl	8012a28 <__sinit>
 8012b60:	69a3      	ldr	r3, [r4, #24]
 8012b62:	60a3      	str	r3, [r4, #8]
 8012b64:	89a3      	ldrh	r3, [r4, #12]
 8012b66:	071a      	lsls	r2, r3, #28
 8012b68:	d525      	bpl.n	8012bb6 <__swbuf_r+0x68>
 8012b6a:	6923      	ldr	r3, [r4, #16]
 8012b6c:	b31b      	cbz	r3, 8012bb6 <__swbuf_r+0x68>
 8012b6e:	6823      	ldr	r3, [r4, #0]
 8012b70:	6922      	ldr	r2, [r4, #16]
 8012b72:	1a98      	subs	r0, r3, r2
 8012b74:	6963      	ldr	r3, [r4, #20]
 8012b76:	b2f6      	uxtb	r6, r6
 8012b78:	4283      	cmp	r3, r0
 8012b7a:	4637      	mov	r7, r6
 8012b7c:	dc04      	bgt.n	8012b88 <__swbuf_r+0x3a>
 8012b7e:	4621      	mov	r1, r4
 8012b80:	4628      	mov	r0, r5
 8012b82:	f7ff fe89 	bl	8012898 <_fflush_r>
 8012b86:	b9e0      	cbnz	r0, 8012bc2 <__swbuf_r+0x74>
 8012b88:	68a3      	ldr	r3, [r4, #8]
 8012b8a:	3b01      	subs	r3, #1
 8012b8c:	60a3      	str	r3, [r4, #8]
 8012b8e:	6823      	ldr	r3, [r4, #0]
 8012b90:	1c5a      	adds	r2, r3, #1
 8012b92:	6022      	str	r2, [r4, #0]
 8012b94:	701e      	strb	r6, [r3, #0]
 8012b96:	6962      	ldr	r2, [r4, #20]
 8012b98:	1c43      	adds	r3, r0, #1
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d004      	beq.n	8012ba8 <__swbuf_r+0x5a>
 8012b9e:	89a3      	ldrh	r3, [r4, #12]
 8012ba0:	07db      	lsls	r3, r3, #31
 8012ba2:	d506      	bpl.n	8012bb2 <__swbuf_r+0x64>
 8012ba4:	2e0a      	cmp	r6, #10
 8012ba6:	d104      	bne.n	8012bb2 <__swbuf_r+0x64>
 8012ba8:	4621      	mov	r1, r4
 8012baa:	4628      	mov	r0, r5
 8012bac:	f7ff fe74 	bl	8012898 <_fflush_r>
 8012bb0:	b938      	cbnz	r0, 8012bc2 <__swbuf_r+0x74>
 8012bb2:	4638      	mov	r0, r7
 8012bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bb6:	4621      	mov	r1, r4
 8012bb8:	4628      	mov	r0, r5
 8012bba:	f000 f805 	bl	8012bc8 <__swsetup_r>
 8012bbe:	2800      	cmp	r0, #0
 8012bc0:	d0d5      	beq.n	8012b6e <__swbuf_r+0x20>
 8012bc2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012bc6:	e7f4      	b.n	8012bb2 <__swbuf_r+0x64>

08012bc8 <__swsetup_r>:
 8012bc8:	b538      	push	{r3, r4, r5, lr}
 8012bca:	4b2a      	ldr	r3, [pc, #168]	; (8012c74 <__swsetup_r+0xac>)
 8012bcc:	4605      	mov	r5, r0
 8012bce:	6818      	ldr	r0, [r3, #0]
 8012bd0:	460c      	mov	r4, r1
 8012bd2:	b118      	cbz	r0, 8012bdc <__swsetup_r+0x14>
 8012bd4:	6a03      	ldr	r3, [r0, #32]
 8012bd6:	b90b      	cbnz	r3, 8012bdc <__swsetup_r+0x14>
 8012bd8:	f7ff ff26 	bl	8012a28 <__sinit>
 8012bdc:	89a3      	ldrh	r3, [r4, #12]
 8012bde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012be2:	0718      	lsls	r0, r3, #28
 8012be4:	d422      	bmi.n	8012c2c <__swsetup_r+0x64>
 8012be6:	06d9      	lsls	r1, r3, #27
 8012be8:	d407      	bmi.n	8012bfa <__swsetup_r+0x32>
 8012bea:	2309      	movs	r3, #9
 8012bec:	602b      	str	r3, [r5, #0]
 8012bee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012bf2:	81a3      	strh	r3, [r4, #12]
 8012bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012bf8:	e034      	b.n	8012c64 <__swsetup_r+0x9c>
 8012bfa:	0758      	lsls	r0, r3, #29
 8012bfc:	d512      	bpl.n	8012c24 <__swsetup_r+0x5c>
 8012bfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c00:	b141      	cbz	r1, 8012c14 <__swsetup_r+0x4c>
 8012c02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c06:	4299      	cmp	r1, r3
 8012c08:	d002      	beq.n	8012c10 <__swsetup_r+0x48>
 8012c0a:	4628      	mov	r0, r5
 8012c0c:	f000 ffa6 	bl	8013b5c <_free_r>
 8012c10:	2300      	movs	r3, #0
 8012c12:	6363      	str	r3, [r4, #52]	; 0x34
 8012c14:	89a3      	ldrh	r3, [r4, #12]
 8012c16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012c1a:	81a3      	strh	r3, [r4, #12]
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	6063      	str	r3, [r4, #4]
 8012c20:	6923      	ldr	r3, [r4, #16]
 8012c22:	6023      	str	r3, [r4, #0]
 8012c24:	89a3      	ldrh	r3, [r4, #12]
 8012c26:	f043 0308 	orr.w	r3, r3, #8
 8012c2a:	81a3      	strh	r3, [r4, #12]
 8012c2c:	6923      	ldr	r3, [r4, #16]
 8012c2e:	b94b      	cbnz	r3, 8012c44 <__swsetup_r+0x7c>
 8012c30:	89a3      	ldrh	r3, [r4, #12]
 8012c32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c3a:	d003      	beq.n	8012c44 <__swsetup_r+0x7c>
 8012c3c:	4621      	mov	r1, r4
 8012c3e:	4628      	mov	r0, r5
 8012c40:	f001 fd72 	bl	8014728 <__smakebuf_r>
 8012c44:	89a0      	ldrh	r0, [r4, #12]
 8012c46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c4a:	f010 0301 	ands.w	r3, r0, #1
 8012c4e:	d00a      	beq.n	8012c66 <__swsetup_r+0x9e>
 8012c50:	2300      	movs	r3, #0
 8012c52:	60a3      	str	r3, [r4, #8]
 8012c54:	6963      	ldr	r3, [r4, #20]
 8012c56:	425b      	negs	r3, r3
 8012c58:	61a3      	str	r3, [r4, #24]
 8012c5a:	6923      	ldr	r3, [r4, #16]
 8012c5c:	b943      	cbnz	r3, 8012c70 <__swsetup_r+0xa8>
 8012c5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012c62:	d1c4      	bne.n	8012bee <__swsetup_r+0x26>
 8012c64:	bd38      	pop	{r3, r4, r5, pc}
 8012c66:	0781      	lsls	r1, r0, #30
 8012c68:	bf58      	it	pl
 8012c6a:	6963      	ldrpl	r3, [r4, #20]
 8012c6c:	60a3      	str	r3, [r4, #8]
 8012c6e:	e7f4      	b.n	8012c5a <__swsetup_r+0x92>
 8012c70:	2000      	movs	r0, #0
 8012c72:	e7f7      	b.n	8012c64 <__swsetup_r+0x9c>
 8012c74:	2000043c 	.word	0x2000043c

08012c78 <memset>:
 8012c78:	4402      	add	r2, r0
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	4293      	cmp	r3, r2
 8012c7e:	d100      	bne.n	8012c82 <memset+0xa>
 8012c80:	4770      	bx	lr
 8012c82:	f803 1b01 	strb.w	r1, [r3], #1
 8012c86:	e7f9      	b.n	8012c7c <memset+0x4>

08012c88 <strncpy>:
 8012c88:	b510      	push	{r4, lr}
 8012c8a:	3901      	subs	r1, #1
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	b132      	cbz	r2, 8012c9e <strncpy+0x16>
 8012c90:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012c94:	f803 4b01 	strb.w	r4, [r3], #1
 8012c98:	3a01      	subs	r2, #1
 8012c9a:	2c00      	cmp	r4, #0
 8012c9c:	d1f7      	bne.n	8012c8e <strncpy+0x6>
 8012c9e:	441a      	add	r2, r3
 8012ca0:	2100      	movs	r1, #0
 8012ca2:	4293      	cmp	r3, r2
 8012ca4:	d100      	bne.n	8012ca8 <strncpy+0x20>
 8012ca6:	bd10      	pop	{r4, pc}
 8012ca8:	f803 1b01 	strb.w	r1, [r3], #1
 8012cac:	e7f9      	b.n	8012ca2 <strncpy+0x1a>
	...

08012cb0 <_localeconv_r>:
 8012cb0:	4800      	ldr	r0, [pc, #0]	; (8012cb4 <_localeconv_r+0x4>)
 8012cb2:	4770      	bx	lr
 8012cb4:	20000530 	.word	0x20000530

08012cb8 <_close_r>:
 8012cb8:	b538      	push	{r3, r4, r5, lr}
 8012cba:	4d06      	ldr	r5, [pc, #24]	; (8012cd4 <_close_r+0x1c>)
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	4604      	mov	r4, r0
 8012cc0:	4608      	mov	r0, r1
 8012cc2:	602b      	str	r3, [r5, #0]
 8012cc4:	f7f2 f82d 	bl	8004d22 <_close>
 8012cc8:	1c43      	adds	r3, r0, #1
 8012cca:	d102      	bne.n	8012cd2 <_close_r+0x1a>
 8012ccc:	682b      	ldr	r3, [r5, #0]
 8012cce:	b103      	cbz	r3, 8012cd2 <_close_r+0x1a>
 8012cd0:	6023      	str	r3, [r4, #0]
 8012cd2:	bd38      	pop	{r3, r4, r5, pc}
 8012cd4:	20009ec0 	.word	0x20009ec0

08012cd8 <_reclaim_reent>:
 8012cd8:	4b29      	ldr	r3, [pc, #164]	; (8012d80 <_reclaim_reent+0xa8>)
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	4283      	cmp	r3, r0
 8012cde:	b570      	push	{r4, r5, r6, lr}
 8012ce0:	4604      	mov	r4, r0
 8012ce2:	d04b      	beq.n	8012d7c <_reclaim_reent+0xa4>
 8012ce4:	69c3      	ldr	r3, [r0, #28]
 8012ce6:	b143      	cbz	r3, 8012cfa <_reclaim_reent+0x22>
 8012ce8:	68db      	ldr	r3, [r3, #12]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d144      	bne.n	8012d78 <_reclaim_reent+0xa0>
 8012cee:	69e3      	ldr	r3, [r4, #28]
 8012cf0:	6819      	ldr	r1, [r3, #0]
 8012cf2:	b111      	cbz	r1, 8012cfa <_reclaim_reent+0x22>
 8012cf4:	4620      	mov	r0, r4
 8012cf6:	f000 ff31 	bl	8013b5c <_free_r>
 8012cfa:	6961      	ldr	r1, [r4, #20]
 8012cfc:	b111      	cbz	r1, 8012d04 <_reclaim_reent+0x2c>
 8012cfe:	4620      	mov	r0, r4
 8012d00:	f000 ff2c 	bl	8013b5c <_free_r>
 8012d04:	69e1      	ldr	r1, [r4, #28]
 8012d06:	b111      	cbz	r1, 8012d0e <_reclaim_reent+0x36>
 8012d08:	4620      	mov	r0, r4
 8012d0a:	f000 ff27 	bl	8013b5c <_free_r>
 8012d0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012d10:	b111      	cbz	r1, 8012d18 <_reclaim_reent+0x40>
 8012d12:	4620      	mov	r0, r4
 8012d14:	f000 ff22 	bl	8013b5c <_free_r>
 8012d18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d1a:	b111      	cbz	r1, 8012d22 <_reclaim_reent+0x4a>
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	f000 ff1d 	bl	8013b5c <_free_r>
 8012d22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012d24:	b111      	cbz	r1, 8012d2c <_reclaim_reent+0x54>
 8012d26:	4620      	mov	r0, r4
 8012d28:	f000 ff18 	bl	8013b5c <_free_r>
 8012d2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012d2e:	b111      	cbz	r1, 8012d36 <_reclaim_reent+0x5e>
 8012d30:	4620      	mov	r0, r4
 8012d32:	f000 ff13 	bl	8013b5c <_free_r>
 8012d36:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012d38:	b111      	cbz	r1, 8012d40 <_reclaim_reent+0x68>
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	f000 ff0e 	bl	8013b5c <_free_r>
 8012d40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012d42:	b111      	cbz	r1, 8012d4a <_reclaim_reent+0x72>
 8012d44:	4620      	mov	r0, r4
 8012d46:	f000 ff09 	bl	8013b5c <_free_r>
 8012d4a:	6a23      	ldr	r3, [r4, #32]
 8012d4c:	b1b3      	cbz	r3, 8012d7c <_reclaim_reent+0xa4>
 8012d4e:	4620      	mov	r0, r4
 8012d50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d54:	4718      	bx	r3
 8012d56:	5949      	ldr	r1, [r1, r5]
 8012d58:	b941      	cbnz	r1, 8012d6c <_reclaim_reent+0x94>
 8012d5a:	3504      	adds	r5, #4
 8012d5c:	69e3      	ldr	r3, [r4, #28]
 8012d5e:	2d80      	cmp	r5, #128	; 0x80
 8012d60:	68d9      	ldr	r1, [r3, #12]
 8012d62:	d1f8      	bne.n	8012d56 <_reclaim_reent+0x7e>
 8012d64:	4620      	mov	r0, r4
 8012d66:	f000 fef9 	bl	8013b5c <_free_r>
 8012d6a:	e7c0      	b.n	8012cee <_reclaim_reent+0x16>
 8012d6c:	680e      	ldr	r6, [r1, #0]
 8012d6e:	4620      	mov	r0, r4
 8012d70:	f000 fef4 	bl	8013b5c <_free_r>
 8012d74:	4631      	mov	r1, r6
 8012d76:	e7ef      	b.n	8012d58 <_reclaim_reent+0x80>
 8012d78:	2500      	movs	r5, #0
 8012d7a:	e7ef      	b.n	8012d5c <_reclaim_reent+0x84>
 8012d7c:	bd70      	pop	{r4, r5, r6, pc}
 8012d7e:	bf00      	nop
 8012d80:	2000043c 	.word	0x2000043c

08012d84 <_lseek_r>:
 8012d84:	b538      	push	{r3, r4, r5, lr}
 8012d86:	4d07      	ldr	r5, [pc, #28]	; (8012da4 <_lseek_r+0x20>)
 8012d88:	4604      	mov	r4, r0
 8012d8a:	4608      	mov	r0, r1
 8012d8c:	4611      	mov	r1, r2
 8012d8e:	2200      	movs	r2, #0
 8012d90:	602a      	str	r2, [r5, #0]
 8012d92:	461a      	mov	r2, r3
 8012d94:	f7f1 ffec 	bl	8004d70 <_lseek>
 8012d98:	1c43      	adds	r3, r0, #1
 8012d9a:	d102      	bne.n	8012da2 <_lseek_r+0x1e>
 8012d9c:	682b      	ldr	r3, [r5, #0]
 8012d9e:	b103      	cbz	r3, 8012da2 <_lseek_r+0x1e>
 8012da0:	6023      	str	r3, [r4, #0]
 8012da2:	bd38      	pop	{r3, r4, r5, pc}
 8012da4:	20009ec0 	.word	0x20009ec0

08012da8 <_read_r>:
 8012da8:	b538      	push	{r3, r4, r5, lr}
 8012daa:	4d07      	ldr	r5, [pc, #28]	; (8012dc8 <_read_r+0x20>)
 8012dac:	4604      	mov	r4, r0
 8012dae:	4608      	mov	r0, r1
 8012db0:	4611      	mov	r1, r2
 8012db2:	2200      	movs	r2, #0
 8012db4:	602a      	str	r2, [r5, #0]
 8012db6:	461a      	mov	r2, r3
 8012db8:	f7f1 ff7a 	bl	8004cb0 <_read>
 8012dbc:	1c43      	adds	r3, r0, #1
 8012dbe:	d102      	bne.n	8012dc6 <_read_r+0x1e>
 8012dc0:	682b      	ldr	r3, [r5, #0]
 8012dc2:	b103      	cbz	r3, 8012dc6 <_read_r+0x1e>
 8012dc4:	6023      	str	r3, [r4, #0]
 8012dc6:	bd38      	pop	{r3, r4, r5, pc}
 8012dc8:	20009ec0 	.word	0x20009ec0

08012dcc <_write_r>:
 8012dcc:	b538      	push	{r3, r4, r5, lr}
 8012dce:	4d07      	ldr	r5, [pc, #28]	; (8012dec <_write_r+0x20>)
 8012dd0:	4604      	mov	r4, r0
 8012dd2:	4608      	mov	r0, r1
 8012dd4:	4611      	mov	r1, r2
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	602a      	str	r2, [r5, #0]
 8012dda:	461a      	mov	r2, r3
 8012ddc:	f7f1 ff85 	bl	8004cea <_write>
 8012de0:	1c43      	adds	r3, r0, #1
 8012de2:	d102      	bne.n	8012dea <_write_r+0x1e>
 8012de4:	682b      	ldr	r3, [r5, #0]
 8012de6:	b103      	cbz	r3, 8012dea <_write_r+0x1e>
 8012de8:	6023      	str	r3, [r4, #0]
 8012dea:	bd38      	pop	{r3, r4, r5, pc}
 8012dec:	20009ec0 	.word	0x20009ec0

08012df0 <__errno>:
 8012df0:	4b01      	ldr	r3, [pc, #4]	; (8012df8 <__errno+0x8>)
 8012df2:	6818      	ldr	r0, [r3, #0]
 8012df4:	4770      	bx	lr
 8012df6:	bf00      	nop
 8012df8:	2000043c 	.word	0x2000043c

08012dfc <__libc_init_array>:
 8012dfc:	b570      	push	{r4, r5, r6, lr}
 8012dfe:	4d0d      	ldr	r5, [pc, #52]	; (8012e34 <__libc_init_array+0x38>)
 8012e00:	4c0d      	ldr	r4, [pc, #52]	; (8012e38 <__libc_init_array+0x3c>)
 8012e02:	1b64      	subs	r4, r4, r5
 8012e04:	10a4      	asrs	r4, r4, #2
 8012e06:	2600      	movs	r6, #0
 8012e08:	42a6      	cmp	r6, r4
 8012e0a:	d109      	bne.n	8012e20 <__libc_init_array+0x24>
 8012e0c:	4d0b      	ldr	r5, [pc, #44]	; (8012e3c <__libc_init_array+0x40>)
 8012e0e:	4c0c      	ldr	r4, [pc, #48]	; (8012e40 <__libc_init_array+0x44>)
 8012e10:	f001 fdde 	bl	80149d0 <_init>
 8012e14:	1b64      	subs	r4, r4, r5
 8012e16:	10a4      	asrs	r4, r4, #2
 8012e18:	2600      	movs	r6, #0
 8012e1a:	42a6      	cmp	r6, r4
 8012e1c:	d105      	bne.n	8012e2a <__libc_init_array+0x2e>
 8012e1e:	bd70      	pop	{r4, r5, r6, pc}
 8012e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e24:	4798      	blx	r3
 8012e26:	3601      	adds	r6, #1
 8012e28:	e7ee      	b.n	8012e08 <__libc_init_array+0xc>
 8012e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e2e:	4798      	blx	r3
 8012e30:	3601      	adds	r6, #1
 8012e32:	e7f2      	b.n	8012e1a <__libc_init_array+0x1e>
 8012e34:	08016944 	.word	0x08016944
 8012e38:	08016944 	.word	0x08016944
 8012e3c:	08016944 	.word	0x08016944
 8012e40:	08016948 	.word	0x08016948

08012e44 <__retarget_lock_init_recursive>:
 8012e44:	4770      	bx	lr

08012e46 <__retarget_lock_acquire_recursive>:
 8012e46:	4770      	bx	lr

08012e48 <__retarget_lock_release_recursive>:
 8012e48:	4770      	bx	lr

08012e4a <memcpy>:
 8012e4a:	440a      	add	r2, r1
 8012e4c:	4291      	cmp	r1, r2
 8012e4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012e52:	d100      	bne.n	8012e56 <memcpy+0xc>
 8012e54:	4770      	bx	lr
 8012e56:	b510      	push	{r4, lr}
 8012e58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e60:	4291      	cmp	r1, r2
 8012e62:	d1f9      	bne.n	8012e58 <memcpy+0xe>
 8012e64:	bd10      	pop	{r4, pc}

08012e66 <quorem>:
 8012e66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e6a:	6903      	ldr	r3, [r0, #16]
 8012e6c:	690c      	ldr	r4, [r1, #16]
 8012e6e:	42a3      	cmp	r3, r4
 8012e70:	4607      	mov	r7, r0
 8012e72:	db7e      	blt.n	8012f72 <quorem+0x10c>
 8012e74:	3c01      	subs	r4, #1
 8012e76:	f101 0814 	add.w	r8, r1, #20
 8012e7a:	f100 0514 	add.w	r5, r0, #20
 8012e7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012e82:	9301      	str	r3, [sp, #4]
 8012e84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012e88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012e8c:	3301      	adds	r3, #1
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012e94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012e98:	fbb2 f6f3 	udiv	r6, r2, r3
 8012e9c:	d331      	bcc.n	8012f02 <quorem+0x9c>
 8012e9e:	f04f 0e00 	mov.w	lr, #0
 8012ea2:	4640      	mov	r0, r8
 8012ea4:	46ac      	mov	ip, r5
 8012ea6:	46f2      	mov	sl, lr
 8012ea8:	f850 2b04 	ldr.w	r2, [r0], #4
 8012eac:	b293      	uxth	r3, r2
 8012eae:	fb06 e303 	mla	r3, r6, r3, lr
 8012eb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012eb6:	0c1a      	lsrs	r2, r3, #16
 8012eb8:	b29b      	uxth	r3, r3
 8012eba:	ebaa 0303 	sub.w	r3, sl, r3
 8012ebe:	f8dc a000 	ldr.w	sl, [ip]
 8012ec2:	fa13 f38a 	uxtah	r3, r3, sl
 8012ec6:	fb06 220e 	mla	r2, r6, lr, r2
 8012eca:	9300      	str	r3, [sp, #0]
 8012ecc:	9b00      	ldr	r3, [sp, #0]
 8012ece:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012ed2:	b292      	uxth	r2, r2
 8012ed4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012ed8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012edc:	f8bd 3000 	ldrh.w	r3, [sp]
 8012ee0:	4581      	cmp	r9, r0
 8012ee2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012ee6:	f84c 3b04 	str.w	r3, [ip], #4
 8012eea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012eee:	d2db      	bcs.n	8012ea8 <quorem+0x42>
 8012ef0:	f855 300b 	ldr.w	r3, [r5, fp]
 8012ef4:	b92b      	cbnz	r3, 8012f02 <quorem+0x9c>
 8012ef6:	9b01      	ldr	r3, [sp, #4]
 8012ef8:	3b04      	subs	r3, #4
 8012efa:	429d      	cmp	r5, r3
 8012efc:	461a      	mov	r2, r3
 8012efe:	d32c      	bcc.n	8012f5a <quorem+0xf4>
 8012f00:	613c      	str	r4, [r7, #16]
 8012f02:	4638      	mov	r0, r7
 8012f04:	f001 f9a6 	bl	8014254 <__mcmp>
 8012f08:	2800      	cmp	r0, #0
 8012f0a:	db22      	blt.n	8012f52 <quorem+0xec>
 8012f0c:	3601      	adds	r6, #1
 8012f0e:	4629      	mov	r1, r5
 8012f10:	2000      	movs	r0, #0
 8012f12:	f858 2b04 	ldr.w	r2, [r8], #4
 8012f16:	f8d1 c000 	ldr.w	ip, [r1]
 8012f1a:	b293      	uxth	r3, r2
 8012f1c:	1ac3      	subs	r3, r0, r3
 8012f1e:	0c12      	lsrs	r2, r2, #16
 8012f20:	fa13 f38c 	uxtah	r3, r3, ip
 8012f24:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012f28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012f2c:	b29b      	uxth	r3, r3
 8012f2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012f32:	45c1      	cmp	r9, r8
 8012f34:	f841 3b04 	str.w	r3, [r1], #4
 8012f38:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012f3c:	d2e9      	bcs.n	8012f12 <quorem+0xac>
 8012f3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012f42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012f46:	b922      	cbnz	r2, 8012f52 <quorem+0xec>
 8012f48:	3b04      	subs	r3, #4
 8012f4a:	429d      	cmp	r5, r3
 8012f4c:	461a      	mov	r2, r3
 8012f4e:	d30a      	bcc.n	8012f66 <quorem+0x100>
 8012f50:	613c      	str	r4, [r7, #16]
 8012f52:	4630      	mov	r0, r6
 8012f54:	b003      	add	sp, #12
 8012f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f5a:	6812      	ldr	r2, [r2, #0]
 8012f5c:	3b04      	subs	r3, #4
 8012f5e:	2a00      	cmp	r2, #0
 8012f60:	d1ce      	bne.n	8012f00 <quorem+0x9a>
 8012f62:	3c01      	subs	r4, #1
 8012f64:	e7c9      	b.n	8012efa <quorem+0x94>
 8012f66:	6812      	ldr	r2, [r2, #0]
 8012f68:	3b04      	subs	r3, #4
 8012f6a:	2a00      	cmp	r2, #0
 8012f6c:	d1f0      	bne.n	8012f50 <quorem+0xea>
 8012f6e:	3c01      	subs	r4, #1
 8012f70:	e7eb      	b.n	8012f4a <quorem+0xe4>
 8012f72:	2000      	movs	r0, #0
 8012f74:	e7ee      	b.n	8012f54 <quorem+0xee>
	...

08012f78 <_dtoa_r>:
 8012f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f7c:	ed2d 8b04 	vpush	{d8-d9}
 8012f80:	69c5      	ldr	r5, [r0, #28]
 8012f82:	b093      	sub	sp, #76	; 0x4c
 8012f84:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012f88:	ec57 6b10 	vmov	r6, r7, d0
 8012f8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012f90:	9107      	str	r1, [sp, #28]
 8012f92:	4604      	mov	r4, r0
 8012f94:	920a      	str	r2, [sp, #40]	; 0x28
 8012f96:	930d      	str	r3, [sp, #52]	; 0x34
 8012f98:	b975      	cbnz	r5, 8012fb8 <_dtoa_r+0x40>
 8012f9a:	2010      	movs	r0, #16
 8012f9c:	f000 fe2a 	bl	8013bf4 <malloc>
 8012fa0:	4602      	mov	r2, r0
 8012fa2:	61e0      	str	r0, [r4, #28]
 8012fa4:	b920      	cbnz	r0, 8012fb0 <_dtoa_r+0x38>
 8012fa6:	4bae      	ldr	r3, [pc, #696]	; (8013260 <_dtoa_r+0x2e8>)
 8012fa8:	21ef      	movs	r1, #239	; 0xef
 8012faa:	48ae      	ldr	r0, [pc, #696]	; (8013264 <_dtoa_r+0x2ec>)
 8012fac:	f001 fc5e 	bl	801486c <__assert_func>
 8012fb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012fb4:	6005      	str	r5, [r0, #0]
 8012fb6:	60c5      	str	r5, [r0, #12]
 8012fb8:	69e3      	ldr	r3, [r4, #28]
 8012fba:	6819      	ldr	r1, [r3, #0]
 8012fbc:	b151      	cbz	r1, 8012fd4 <_dtoa_r+0x5c>
 8012fbe:	685a      	ldr	r2, [r3, #4]
 8012fc0:	604a      	str	r2, [r1, #4]
 8012fc2:	2301      	movs	r3, #1
 8012fc4:	4093      	lsls	r3, r2
 8012fc6:	608b      	str	r3, [r1, #8]
 8012fc8:	4620      	mov	r0, r4
 8012fca:	f000 ff07 	bl	8013ddc <_Bfree>
 8012fce:	69e3      	ldr	r3, [r4, #28]
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	601a      	str	r2, [r3, #0]
 8012fd4:	1e3b      	subs	r3, r7, #0
 8012fd6:	bfbb      	ittet	lt
 8012fd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012fdc:	9303      	strlt	r3, [sp, #12]
 8012fde:	2300      	movge	r3, #0
 8012fe0:	2201      	movlt	r2, #1
 8012fe2:	bfac      	ite	ge
 8012fe4:	f8c8 3000 	strge.w	r3, [r8]
 8012fe8:	f8c8 2000 	strlt.w	r2, [r8]
 8012fec:	4b9e      	ldr	r3, [pc, #632]	; (8013268 <_dtoa_r+0x2f0>)
 8012fee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012ff2:	ea33 0308 	bics.w	r3, r3, r8
 8012ff6:	d11b      	bne.n	8013030 <_dtoa_r+0xb8>
 8012ff8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012ffa:	f242 730f 	movw	r3, #9999	; 0x270f
 8012ffe:	6013      	str	r3, [r2, #0]
 8013000:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8013004:	4333      	orrs	r3, r6
 8013006:	f000 8593 	beq.w	8013b30 <_dtoa_r+0xbb8>
 801300a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801300c:	b963      	cbnz	r3, 8013028 <_dtoa_r+0xb0>
 801300e:	4b97      	ldr	r3, [pc, #604]	; (801326c <_dtoa_r+0x2f4>)
 8013010:	e027      	b.n	8013062 <_dtoa_r+0xea>
 8013012:	4b97      	ldr	r3, [pc, #604]	; (8013270 <_dtoa_r+0x2f8>)
 8013014:	9300      	str	r3, [sp, #0]
 8013016:	3308      	adds	r3, #8
 8013018:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801301a:	6013      	str	r3, [r2, #0]
 801301c:	9800      	ldr	r0, [sp, #0]
 801301e:	b013      	add	sp, #76	; 0x4c
 8013020:	ecbd 8b04 	vpop	{d8-d9}
 8013024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013028:	4b90      	ldr	r3, [pc, #576]	; (801326c <_dtoa_r+0x2f4>)
 801302a:	9300      	str	r3, [sp, #0]
 801302c:	3303      	adds	r3, #3
 801302e:	e7f3      	b.n	8013018 <_dtoa_r+0xa0>
 8013030:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013034:	2200      	movs	r2, #0
 8013036:	ec51 0b17 	vmov	r0, r1, d7
 801303a:	eeb0 8a47 	vmov.f32	s16, s14
 801303e:	eef0 8a67 	vmov.f32	s17, s15
 8013042:	2300      	movs	r3, #0
 8013044:	f7ed fd50 	bl	8000ae8 <__aeabi_dcmpeq>
 8013048:	4681      	mov	r9, r0
 801304a:	b160      	cbz	r0, 8013066 <_dtoa_r+0xee>
 801304c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801304e:	2301      	movs	r3, #1
 8013050:	6013      	str	r3, [r2, #0]
 8013052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013054:	2b00      	cmp	r3, #0
 8013056:	f000 8568 	beq.w	8013b2a <_dtoa_r+0xbb2>
 801305a:	4b86      	ldr	r3, [pc, #536]	; (8013274 <_dtoa_r+0x2fc>)
 801305c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801305e:	6013      	str	r3, [r2, #0]
 8013060:	3b01      	subs	r3, #1
 8013062:	9300      	str	r3, [sp, #0]
 8013064:	e7da      	b.n	801301c <_dtoa_r+0xa4>
 8013066:	aa10      	add	r2, sp, #64	; 0x40
 8013068:	a911      	add	r1, sp, #68	; 0x44
 801306a:	4620      	mov	r0, r4
 801306c:	eeb0 0a48 	vmov.f32	s0, s16
 8013070:	eef0 0a68 	vmov.f32	s1, s17
 8013074:	f001 f994 	bl	80143a0 <__d2b>
 8013078:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801307c:	4682      	mov	sl, r0
 801307e:	2d00      	cmp	r5, #0
 8013080:	d07f      	beq.n	8013182 <_dtoa_r+0x20a>
 8013082:	ee18 3a90 	vmov	r3, s17
 8013086:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801308a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801308e:	ec51 0b18 	vmov	r0, r1, d8
 8013092:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013096:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801309a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801309e:	4619      	mov	r1, r3
 80130a0:	2200      	movs	r2, #0
 80130a2:	4b75      	ldr	r3, [pc, #468]	; (8013278 <_dtoa_r+0x300>)
 80130a4:	f7ed f900 	bl	80002a8 <__aeabi_dsub>
 80130a8:	a367      	add	r3, pc, #412	; (adr r3, 8013248 <_dtoa_r+0x2d0>)
 80130aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ae:	f7ed fab3 	bl	8000618 <__aeabi_dmul>
 80130b2:	a367      	add	r3, pc, #412	; (adr r3, 8013250 <_dtoa_r+0x2d8>)
 80130b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b8:	f7ed f8f8 	bl	80002ac <__adddf3>
 80130bc:	4606      	mov	r6, r0
 80130be:	4628      	mov	r0, r5
 80130c0:	460f      	mov	r7, r1
 80130c2:	f7ed fa3f 	bl	8000544 <__aeabi_i2d>
 80130c6:	a364      	add	r3, pc, #400	; (adr r3, 8013258 <_dtoa_r+0x2e0>)
 80130c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130cc:	f7ed faa4 	bl	8000618 <__aeabi_dmul>
 80130d0:	4602      	mov	r2, r0
 80130d2:	460b      	mov	r3, r1
 80130d4:	4630      	mov	r0, r6
 80130d6:	4639      	mov	r1, r7
 80130d8:	f7ed f8e8 	bl	80002ac <__adddf3>
 80130dc:	4606      	mov	r6, r0
 80130de:	460f      	mov	r7, r1
 80130e0:	f7ed fd4a 	bl	8000b78 <__aeabi_d2iz>
 80130e4:	2200      	movs	r2, #0
 80130e6:	4683      	mov	fp, r0
 80130e8:	2300      	movs	r3, #0
 80130ea:	4630      	mov	r0, r6
 80130ec:	4639      	mov	r1, r7
 80130ee:	f7ed fd05 	bl	8000afc <__aeabi_dcmplt>
 80130f2:	b148      	cbz	r0, 8013108 <_dtoa_r+0x190>
 80130f4:	4658      	mov	r0, fp
 80130f6:	f7ed fa25 	bl	8000544 <__aeabi_i2d>
 80130fa:	4632      	mov	r2, r6
 80130fc:	463b      	mov	r3, r7
 80130fe:	f7ed fcf3 	bl	8000ae8 <__aeabi_dcmpeq>
 8013102:	b908      	cbnz	r0, 8013108 <_dtoa_r+0x190>
 8013104:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013108:	f1bb 0f16 	cmp.w	fp, #22
 801310c:	d857      	bhi.n	80131be <_dtoa_r+0x246>
 801310e:	4b5b      	ldr	r3, [pc, #364]	; (801327c <_dtoa_r+0x304>)
 8013110:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013118:	ec51 0b18 	vmov	r0, r1, d8
 801311c:	f7ed fcee 	bl	8000afc <__aeabi_dcmplt>
 8013120:	2800      	cmp	r0, #0
 8013122:	d04e      	beq.n	80131c2 <_dtoa_r+0x24a>
 8013124:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013128:	2300      	movs	r3, #0
 801312a:	930c      	str	r3, [sp, #48]	; 0x30
 801312c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801312e:	1b5b      	subs	r3, r3, r5
 8013130:	1e5a      	subs	r2, r3, #1
 8013132:	bf45      	ittet	mi
 8013134:	f1c3 0301 	rsbmi	r3, r3, #1
 8013138:	9305      	strmi	r3, [sp, #20]
 801313a:	2300      	movpl	r3, #0
 801313c:	2300      	movmi	r3, #0
 801313e:	9206      	str	r2, [sp, #24]
 8013140:	bf54      	ite	pl
 8013142:	9305      	strpl	r3, [sp, #20]
 8013144:	9306      	strmi	r3, [sp, #24]
 8013146:	f1bb 0f00 	cmp.w	fp, #0
 801314a:	db3c      	blt.n	80131c6 <_dtoa_r+0x24e>
 801314c:	9b06      	ldr	r3, [sp, #24]
 801314e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8013152:	445b      	add	r3, fp
 8013154:	9306      	str	r3, [sp, #24]
 8013156:	2300      	movs	r3, #0
 8013158:	9308      	str	r3, [sp, #32]
 801315a:	9b07      	ldr	r3, [sp, #28]
 801315c:	2b09      	cmp	r3, #9
 801315e:	d868      	bhi.n	8013232 <_dtoa_r+0x2ba>
 8013160:	2b05      	cmp	r3, #5
 8013162:	bfc4      	itt	gt
 8013164:	3b04      	subgt	r3, #4
 8013166:	9307      	strgt	r3, [sp, #28]
 8013168:	9b07      	ldr	r3, [sp, #28]
 801316a:	f1a3 0302 	sub.w	r3, r3, #2
 801316e:	bfcc      	ite	gt
 8013170:	2500      	movgt	r5, #0
 8013172:	2501      	movle	r5, #1
 8013174:	2b03      	cmp	r3, #3
 8013176:	f200 8085 	bhi.w	8013284 <_dtoa_r+0x30c>
 801317a:	e8df f003 	tbb	[pc, r3]
 801317e:	3b2e      	.short	0x3b2e
 8013180:	5839      	.short	0x5839
 8013182:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013186:	441d      	add	r5, r3
 8013188:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801318c:	2b20      	cmp	r3, #32
 801318e:	bfc1      	itttt	gt
 8013190:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013194:	fa08 f803 	lslgt.w	r8, r8, r3
 8013198:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801319c:	fa26 f303 	lsrgt.w	r3, r6, r3
 80131a0:	bfd6      	itet	le
 80131a2:	f1c3 0320 	rsble	r3, r3, #32
 80131a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80131aa:	fa06 f003 	lslle.w	r0, r6, r3
 80131ae:	f7ed f9b9 	bl	8000524 <__aeabi_ui2d>
 80131b2:	2201      	movs	r2, #1
 80131b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80131b8:	3d01      	subs	r5, #1
 80131ba:	920e      	str	r2, [sp, #56]	; 0x38
 80131bc:	e76f      	b.n	801309e <_dtoa_r+0x126>
 80131be:	2301      	movs	r3, #1
 80131c0:	e7b3      	b.n	801312a <_dtoa_r+0x1b2>
 80131c2:	900c      	str	r0, [sp, #48]	; 0x30
 80131c4:	e7b2      	b.n	801312c <_dtoa_r+0x1b4>
 80131c6:	9b05      	ldr	r3, [sp, #20]
 80131c8:	eba3 030b 	sub.w	r3, r3, fp
 80131cc:	9305      	str	r3, [sp, #20]
 80131ce:	f1cb 0300 	rsb	r3, fp, #0
 80131d2:	9308      	str	r3, [sp, #32]
 80131d4:	2300      	movs	r3, #0
 80131d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80131d8:	e7bf      	b.n	801315a <_dtoa_r+0x1e2>
 80131da:	2300      	movs	r3, #0
 80131dc:	9309      	str	r3, [sp, #36]	; 0x24
 80131de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	dc52      	bgt.n	801328a <_dtoa_r+0x312>
 80131e4:	2301      	movs	r3, #1
 80131e6:	9301      	str	r3, [sp, #4]
 80131e8:	9304      	str	r3, [sp, #16]
 80131ea:	461a      	mov	r2, r3
 80131ec:	920a      	str	r2, [sp, #40]	; 0x28
 80131ee:	e00b      	b.n	8013208 <_dtoa_r+0x290>
 80131f0:	2301      	movs	r3, #1
 80131f2:	e7f3      	b.n	80131dc <_dtoa_r+0x264>
 80131f4:	2300      	movs	r3, #0
 80131f6:	9309      	str	r3, [sp, #36]	; 0x24
 80131f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131fa:	445b      	add	r3, fp
 80131fc:	9301      	str	r3, [sp, #4]
 80131fe:	3301      	adds	r3, #1
 8013200:	2b01      	cmp	r3, #1
 8013202:	9304      	str	r3, [sp, #16]
 8013204:	bfb8      	it	lt
 8013206:	2301      	movlt	r3, #1
 8013208:	69e0      	ldr	r0, [r4, #28]
 801320a:	2100      	movs	r1, #0
 801320c:	2204      	movs	r2, #4
 801320e:	f102 0614 	add.w	r6, r2, #20
 8013212:	429e      	cmp	r6, r3
 8013214:	d93d      	bls.n	8013292 <_dtoa_r+0x31a>
 8013216:	6041      	str	r1, [r0, #4]
 8013218:	4620      	mov	r0, r4
 801321a:	f000 fd9f 	bl	8013d5c <_Balloc>
 801321e:	9000      	str	r0, [sp, #0]
 8013220:	2800      	cmp	r0, #0
 8013222:	d139      	bne.n	8013298 <_dtoa_r+0x320>
 8013224:	4b16      	ldr	r3, [pc, #88]	; (8013280 <_dtoa_r+0x308>)
 8013226:	4602      	mov	r2, r0
 8013228:	f240 11af 	movw	r1, #431	; 0x1af
 801322c:	e6bd      	b.n	8012faa <_dtoa_r+0x32>
 801322e:	2301      	movs	r3, #1
 8013230:	e7e1      	b.n	80131f6 <_dtoa_r+0x27e>
 8013232:	2501      	movs	r5, #1
 8013234:	2300      	movs	r3, #0
 8013236:	9307      	str	r3, [sp, #28]
 8013238:	9509      	str	r5, [sp, #36]	; 0x24
 801323a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801323e:	9301      	str	r3, [sp, #4]
 8013240:	9304      	str	r3, [sp, #16]
 8013242:	2200      	movs	r2, #0
 8013244:	2312      	movs	r3, #18
 8013246:	e7d1      	b.n	80131ec <_dtoa_r+0x274>
 8013248:	636f4361 	.word	0x636f4361
 801324c:	3fd287a7 	.word	0x3fd287a7
 8013250:	8b60c8b3 	.word	0x8b60c8b3
 8013254:	3fc68a28 	.word	0x3fc68a28
 8013258:	509f79fb 	.word	0x509f79fb
 801325c:	3fd34413 	.word	0x3fd34413
 8013260:	0801670e 	.word	0x0801670e
 8013264:	08016725 	.word	0x08016725
 8013268:	7ff00000 	.word	0x7ff00000
 801326c:	0801670a 	.word	0x0801670a
 8013270:	08016701 	.word	0x08016701
 8013274:	080166de 	.word	0x080166de
 8013278:	3ff80000 	.word	0x3ff80000
 801327c:	08016810 	.word	0x08016810
 8013280:	0801677d 	.word	0x0801677d
 8013284:	2301      	movs	r3, #1
 8013286:	9309      	str	r3, [sp, #36]	; 0x24
 8013288:	e7d7      	b.n	801323a <_dtoa_r+0x2c2>
 801328a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801328c:	9301      	str	r3, [sp, #4]
 801328e:	9304      	str	r3, [sp, #16]
 8013290:	e7ba      	b.n	8013208 <_dtoa_r+0x290>
 8013292:	3101      	adds	r1, #1
 8013294:	0052      	lsls	r2, r2, #1
 8013296:	e7ba      	b.n	801320e <_dtoa_r+0x296>
 8013298:	69e3      	ldr	r3, [r4, #28]
 801329a:	9a00      	ldr	r2, [sp, #0]
 801329c:	601a      	str	r2, [r3, #0]
 801329e:	9b04      	ldr	r3, [sp, #16]
 80132a0:	2b0e      	cmp	r3, #14
 80132a2:	f200 80a8 	bhi.w	80133f6 <_dtoa_r+0x47e>
 80132a6:	2d00      	cmp	r5, #0
 80132a8:	f000 80a5 	beq.w	80133f6 <_dtoa_r+0x47e>
 80132ac:	f1bb 0f00 	cmp.w	fp, #0
 80132b0:	dd38      	ble.n	8013324 <_dtoa_r+0x3ac>
 80132b2:	4bc0      	ldr	r3, [pc, #768]	; (80135b4 <_dtoa_r+0x63c>)
 80132b4:	f00b 020f 	and.w	r2, fp, #15
 80132b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80132bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80132c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80132c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80132c8:	d019      	beq.n	80132fe <_dtoa_r+0x386>
 80132ca:	4bbb      	ldr	r3, [pc, #748]	; (80135b8 <_dtoa_r+0x640>)
 80132cc:	ec51 0b18 	vmov	r0, r1, d8
 80132d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80132d4:	f7ed faca 	bl	800086c <__aeabi_ddiv>
 80132d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132dc:	f008 080f 	and.w	r8, r8, #15
 80132e0:	2503      	movs	r5, #3
 80132e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80135b8 <_dtoa_r+0x640>
 80132e6:	f1b8 0f00 	cmp.w	r8, #0
 80132ea:	d10a      	bne.n	8013302 <_dtoa_r+0x38a>
 80132ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132f0:	4632      	mov	r2, r6
 80132f2:	463b      	mov	r3, r7
 80132f4:	f7ed faba 	bl	800086c <__aeabi_ddiv>
 80132f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132fc:	e02b      	b.n	8013356 <_dtoa_r+0x3de>
 80132fe:	2502      	movs	r5, #2
 8013300:	e7ef      	b.n	80132e2 <_dtoa_r+0x36a>
 8013302:	f018 0f01 	tst.w	r8, #1
 8013306:	d008      	beq.n	801331a <_dtoa_r+0x3a2>
 8013308:	4630      	mov	r0, r6
 801330a:	4639      	mov	r1, r7
 801330c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013310:	f7ed f982 	bl	8000618 <__aeabi_dmul>
 8013314:	3501      	adds	r5, #1
 8013316:	4606      	mov	r6, r0
 8013318:	460f      	mov	r7, r1
 801331a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801331e:	f109 0908 	add.w	r9, r9, #8
 8013322:	e7e0      	b.n	80132e6 <_dtoa_r+0x36e>
 8013324:	f000 809f 	beq.w	8013466 <_dtoa_r+0x4ee>
 8013328:	f1cb 0600 	rsb	r6, fp, #0
 801332c:	4ba1      	ldr	r3, [pc, #644]	; (80135b4 <_dtoa_r+0x63c>)
 801332e:	4fa2      	ldr	r7, [pc, #648]	; (80135b8 <_dtoa_r+0x640>)
 8013330:	f006 020f 	and.w	r2, r6, #15
 8013334:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333c:	ec51 0b18 	vmov	r0, r1, d8
 8013340:	f7ed f96a 	bl	8000618 <__aeabi_dmul>
 8013344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013348:	1136      	asrs	r6, r6, #4
 801334a:	2300      	movs	r3, #0
 801334c:	2502      	movs	r5, #2
 801334e:	2e00      	cmp	r6, #0
 8013350:	d17e      	bne.n	8013450 <_dtoa_r+0x4d8>
 8013352:	2b00      	cmp	r3, #0
 8013354:	d1d0      	bne.n	80132f8 <_dtoa_r+0x380>
 8013356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013358:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801335c:	2b00      	cmp	r3, #0
 801335e:	f000 8084 	beq.w	801346a <_dtoa_r+0x4f2>
 8013362:	4b96      	ldr	r3, [pc, #600]	; (80135bc <_dtoa_r+0x644>)
 8013364:	2200      	movs	r2, #0
 8013366:	4640      	mov	r0, r8
 8013368:	4649      	mov	r1, r9
 801336a:	f7ed fbc7 	bl	8000afc <__aeabi_dcmplt>
 801336e:	2800      	cmp	r0, #0
 8013370:	d07b      	beq.n	801346a <_dtoa_r+0x4f2>
 8013372:	9b04      	ldr	r3, [sp, #16]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d078      	beq.n	801346a <_dtoa_r+0x4f2>
 8013378:	9b01      	ldr	r3, [sp, #4]
 801337a:	2b00      	cmp	r3, #0
 801337c:	dd39      	ble.n	80133f2 <_dtoa_r+0x47a>
 801337e:	4b90      	ldr	r3, [pc, #576]	; (80135c0 <_dtoa_r+0x648>)
 8013380:	2200      	movs	r2, #0
 8013382:	4640      	mov	r0, r8
 8013384:	4649      	mov	r1, r9
 8013386:	f7ed f947 	bl	8000618 <__aeabi_dmul>
 801338a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801338e:	9e01      	ldr	r6, [sp, #4]
 8013390:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8013394:	3501      	adds	r5, #1
 8013396:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801339a:	4628      	mov	r0, r5
 801339c:	f7ed f8d2 	bl	8000544 <__aeabi_i2d>
 80133a0:	4642      	mov	r2, r8
 80133a2:	464b      	mov	r3, r9
 80133a4:	f7ed f938 	bl	8000618 <__aeabi_dmul>
 80133a8:	4b86      	ldr	r3, [pc, #536]	; (80135c4 <_dtoa_r+0x64c>)
 80133aa:	2200      	movs	r2, #0
 80133ac:	f7ec ff7e 	bl	80002ac <__adddf3>
 80133b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80133b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80133b8:	9303      	str	r3, [sp, #12]
 80133ba:	2e00      	cmp	r6, #0
 80133bc:	d158      	bne.n	8013470 <_dtoa_r+0x4f8>
 80133be:	4b82      	ldr	r3, [pc, #520]	; (80135c8 <_dtoa_r+0x650>)
 80133c0:	2200      	movs	r2, #0
 80133c2:	4640      	mov	r0, r8
 80133c4:	4649      	mov	r1, r9
 80133c6:	f7ec ff6f 	bl	80002a8 <__aeabi_dsub>
 80133ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80133ce:	4680      	mov	r8, r0
 80133d0:	4689      	mov	r9, r1
 80133d2:	f7ed fbb1 	bl	8000b38 <__aeabi_dcmpgt>
 80133d6:	2800      	cmp	r0, #0
 80133d8:	f040 8296 	bne.w	8013908 <_dtoa_r+0x990>
 80133dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80133e0:	4640      	mov	r0, r8
 80133e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80133e6:	4649      	mov	r1, r9
 80133e8:	f7ed fb88 	bl	8000afc <__aeabi_dcmplt>
 80133ec:	2800      	cmp	r0, #0
 80133ee:	f040 8289 	bne.w	8013904 <_dtoa_r+0x98c>
 80133f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80133f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	f2c0 814e 	blt.w	801369a <_dtoa_r+0x722>
 80133fe:	f1bb 0f0e 	cmp.w	fp, #14
 8013402:	f300 814a 	bgt.w	801369a <_dtoa_r+0x722>
 8013406:	4b6b      	ldr	r3, [pc, #428]	; (80135b4 <_dtoa_r+0x63c>)
 8013408:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801340c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013412:	2b00      	cmp	r3, #0
 8013414:	f280 80dc 	bge.w	80135d0 <_dtoa_r+0x658>
 8013418:	9b04      	ldr	r3, [sp, #16]
 801341a:	2b00      	cmp	r3, #0
 801341c:	f300 80d8 	bgt.w	80135d0 <_dtoa_r+0x658>
 8013420:	f040 826f 	bne.w	8013902 <_dtoa_r+0x98a>
 8013424:	4b68      	ldr	r3, [pc, #416]	; (80135c8 <_dtoa_r+0x650>)
 8013426:	2200      	movs	r2, #0
 8013428:	4640      	mov	r0, r8
 801342a:	4649      	mov	r1, r9
 801342c:	f7ed f8f4 	bl	8000618 <__aeabi_dmul>
 8013430:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013434:	f7ed fb76 	bl	8000b24 <__aeabi_dcmpge>
 8013438:	9e04      	ldr	r6, [sp, #16]
 801343a:	4637      	mov	r7, r6
 801343c:	2800      	cmp	r0, #0
 801343e:	f040 8245 	bne.w	80138cc <_dtoa_r+0x954>
 8013442:	9d00      	ldr	r5, [sp, #0]
 8013444:	2331      	movs	r3, #49	; 0x31
 8013446:	f805 3b01 	strb.w	r3, [r5], #1
 801344a:	f10b 0b01 	add.w	fp, fp, #1
 801344e:	e241      	b.n	80138d4 <_dtoa_r+0x95c>
 8013450:	07f2      	lsls	r2, r6, #31
 8013452:	d505      	bpl.n	8013460 <_dtoa_r+0x4e8>
 8013454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013458:	f7ed f8de 	bl	8000618 <__aeabi_dmul>
 801345c:	3501      	adds	r5, #1
 801345e:	2301      	movs	r3, #1
 8013460:	1076      	asrs	r6, r6, #1
 8013462:	3708      	adds	r7, #8
 8013464:	e773      	b.n	801334e <_dtoa_r+0x3d6>
 8013466:	2502      	movs	r5, #2
 8013468:	e775      	b.n	8013356 <_dtoa_r+0x3de>
 801346a:	9e04      	ldr	r6, [sp, #16]
 801346c:	465f      	mov	r7, fp
 801346e:	e792      	b.n	8013396 <_dtoa_r+0x41e>
 8013470:	9900      	ldr	r1, [sp, #0]
 8013472:	4b50      	ldr	r3, [pc, #320]	; (80135b4 <_dtoa_r+0x63c>)
 8013474:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013478:	4431      	add	r1, r6
 801347a:	9102      	str	r1, [sp, #8]
 801347c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801347e:	eeb0 9a47 	vmov.f32	s18, s14
 8013482:	eef0 9a67 	vmov.f32	s19, s15
 8013486:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801348a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801348e:	2900      	cmp	r1, #0
 8013490:	d044      	beq.n	801351c <_dtoa_r+0x5a4>
 8013492:	494e      	ldr	r1, [pc, #312]	; (80135cc <_dtoa_r+0x654>)
 8013494:	2000      	movs	r0, #0
 8013496:	f7ed f9e9 	bl	800086c <__aeabi_ddiv>
 801349a:	ec53 2b19 	vmov	r2, r3, d9
 801349e:	f7ec ff03 	bl	80002a8 <__aeabi_dsub>
 80134a2:	9d00      	ldr	r5, [sp, #0]
 80134a4:	ec41 0b19 	vmov	d9, r0, r1
 80134a8:	4649      	mov	r1, r9
 80134aa:	4640      	mov	r0, r8
 80134ac:	f7ed fb64 	bl	8000b78 <__aeabi_d2iz>
 80134b0:	4606      	mov	r6, r0
 80134b2:	f7ed f847 	bl	8000544 <__aeabi_i2d>
 80134b6:	4602      	mov	r2, r0
 80134b8:	460b      	mov	r3, r1
 80134ba:	4640      	mov	r0, r8
 80134bc:	4649      	mov	r1, r9
 80134be:	f7ec fef3 	bl	80002a8 <__aeabi_dsub>
 80134c2:	3630      	adds	r6, #48	; 0x30
 80134c4:	f805 6b01 	strb.w	r6, [r5], #1
 80134c8:	ec53 2b19 	vmov	r2, r3, d9
 80134cc:	4680      	mov	r8, r0
 80134ce:	4689      	mov	r9, r1
 80134d0:	f7ed fb14 	bl	8000afc <__aeabi_dcmplt>
 80134d4:	2800      	cmp	r0, #0
 80134d6:	d164      	bne.n	80135a2 <_dtoa_r+0x62a>
 80134d8:	4642      	mov	r2, r8
 80134da:	464b      	mov	r3, r9
 80134dc:	4937      	ldr	r1, [pc, #220]	; (80135bc <_dtoa_r+0x644>)
 80134de:	2000      	movs	r0, #0
 80134e0:	f7ec fee2 	bl	80002a8 <__aeabi_dsub>
 80134e4:	ec53 2b19 	vmov	r2, r3, d9
 80134e8:	f7ed fb08 	bl	8000afc <__aeabi_dcmplt>
 80134ec:	2800      	cmp	r0, #0
 80134ee:	f040 80b6 	bne.w	801365e <_dtoa_r+0x6e6>
 80134f2:	9b02      	ldr	r3, [sp, #8]
 80134f4:	429d      	cmp	r5, r3
 80134f6:	f43f af7c 	beq.w	80133f2 <_dtoa_r+0x47a>
 80134fa:	4b31      	ldr	r3, [pc, #196]	; (80135c0 <_dtoa_r+0x648>)
 80134fc:	ec51 0b19 	vmov	r0, r1, d9
 8013500:	2200      	movs	r2, #0
 8013502:	f7ed f889 	bl	8000618 <__aeabi_dmul>
 8013506:	4b2e      	ldr	r3, [pc, #184]	; (80135c0 <_dtoa_r+0x648>)
 8013508:	ec41 0b19 	vmov	d9, r0, r1
 801350c:	2200      	movs	r2, #0
 801350e:	4640      	mov	r0, r8
 8013510:	4649      	mov	r1, r9
 8013512:	f7ed f881 	bl	8000618 <__aeabi_dmul>
 8013516:	4680      	mov	r8, r0
 8013518:	4689      	mov	r9, r1
 801351a:	e7c5      	b.n	80134a8 <_dtoa_r+0x530>
 801351c:	ec51 0b17 	vmov	r0, r1, d7
 8013520:	f7ed f87a 	bl	8000618 <__aeabi_dmul>
 8013524:	9b02      	ldr	r3, [sp, #8]
 8013526:	9d00      	ldr	r5, [sp, #0]
 8013528:	930f      	str	r3, [sp, #60]	; 0x3c
 801352a:	ec41 0b19 	vmov	d9, r0, r1
 801352e:	4649      	mov	r1, r9
 8013530:	4640      	mov	r0, r8
 8013532:	f7ed fb21 	bl	8000b78 <__aeabi_d2iz>
 8013536:	4606      	mov	r6, r0
 8013538:	f7ed f804 	bl	8000544 <__aeabi_i2d>
 801353c:	3630      	adds	r6, #48	; 0x30
 801353e:	4602      	mov	r2, r0
 8013540:	460b      	mov	r3, r1
 8013542:	4640      	mov	r0, r8
 8013544:	4649      	mov	r1, r9
 8013546:	f7ec feaf 	bl	80002a8 <__aeabi_dsub>
 801354a:	f805 6b01 	strb.w	r6, [r5], #1
 801354e:	9b02      	ldr	r3, [sp, #8]
 8013550:	429d      	cmp	r5, r3
 8013552:	4680      	mov	r8, r0
 8013554:	4689      	mov	r9, r1
 8013556:	f04f 0200 	mov.w	r2, #0
 801355a:	d124      	bne.n	80135a6 <_dtoa_r+0x62e>
 801355c:	4b1b      	ldr	r3, [pc, #108]	; (80135cc <_dtoa_r+0x654>)
 801355e:	ec51 0b19 	vmov	r0, r1, d9
 8013562:	f7ec fea3 	bl	80002ac <__adddf3>
 8013566:	4602      	mov	r2, r0
 8013568:	460b      	mov	r3, r1
 801356a:	4640      	mov	r0, r8
 801356c:	4649      	mov	r1, r9
 801356e:	f7ed fae3 	bl	8000b38 <__aeabi_dcmpgt>
 8013572:	2800      	cmp	r0, #0
 8013574:	d173      	bne.n	801365e <_dtoa_r+0x6e6>
 8013576:	ec53 2b19 	vmov	r2, r3, d9
 801357a:	4914      	ldr	r1, [pc, #80]	; (80135cc <_dtoa_r+0x654>)
 801357c:	2000      	movs	r0, #0
 801357e:	f7ec fe93 	bl	80002a8 <__aeabi_dsub>
 8013582:	4602      	mov	r2, r0
 8013584:	460b      	mov	r3, r1
 8013586:	4640      	mov	r0, r8
 8013588:	4649      	mov	r1, r9
 801358a:	f7ed fab7 	bl	8000afc <__aeabi_dcmplt>
 801358e:	2800      	cmp	r0, #0
 8013590:	f43f af2f 	beq.w	80133f2 <_dtoa_r+0x47a>
 8013594:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013596:	1e6b      	subs	r3, r5, #1
 8013598:	930f      	str	r3, [sp, #60]	; 0x3c
 801359a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801359e:	2b30      	cmp	r3, #48	; 0x30
 80135a0:	d0f8      	beq.n	8013594 <_dtoa_r+0x61c>
 80135a2:	46bb      	mov	fp, r7
 80135a4:	e04a      	b.n	801363c <_dtoa_r+0x6c4>
 80135a6:	4b06      	ldr	r3, [pc, #24]	; (80135c0 <_dtoa_r+0x648>)
 80135a8:	f7ed f836 	bl	8000618 <__aeabi_dmul>
 80135ac:	4680      	mov	r8, r0
 80135ae:	4689      	mov	r9, r1
 80135b0:	e7bd      	b.n	801352e <_dtoa_r+0x5b6>
 80135b2:	bf00      	nop
 80135b4:	08016810 	.word	0x08016810
 80135b8:	080167e8 	.word	0x080167e8
 80135bc:	3ff00000 	.word	0x3ff00000
 80135c0:	40240000 	.word	0x40240000
 80135c4:	401c0000 	.word	0x401c0000
 80135c8:	40140000 	.word	0x40140000
 80135cc:	3fe00000 	.word	0x3fe00000
 80135d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80135d4:	9d00      	ldr	r5, [sp, #0]
 80135d6:	4642      	mov	r2, r8
 80135d8:	464b      	mov	r3, r9
 80135da:	4630      	mov	r0, r6
 80135dc:	4639      	mov	r1, r7
 80135de:	f7ed f945 	bl	800086c <__aeabi_ddiv>
 80135e2:	f7ed fac9 	bl	8000b78 <__aeabi_d2iz>
 80135e6:	9001      	str	r0, [sp, #4]
 80135e8:	f7ec ffac 	bl	8000544 <__aeabi_i2d>
 80135ec:	4642      	mov	r2, r8
 80135ee:	464b      	mov	r3, r9
 80135f0:	f7ed f812 	bl	8000618 <__aeabi_dmul>
 80135f4:	4602      	mov	r2, r0
 80135f6:	460b      	mov	r3, r1
 80135f8:	4630      	mov	r0, r6
 80135fa:	4639      	mov	r1, r7
 80135fc:	f7ec fe54 	bl	80002a8 <__aeabi_dsub>
 8013600:	9e01      	ldr	r6, [sp, #4]
 8013602:	9f04      	ldr	r7, [sp, #16]
 8013604:	3630      	adds	r6, #48	; 0x30
 8013606:	f805 6b01 	strb.w	r6, [r5], #1
 801360a:	9e00      	ldr	r6, [sp, #0]
 801360c:	1bae      	subs	r6, r5, r6
 801360e:	42b7      	cmp	r7, r6
 8013610:	4602      	mov	r2, r0
 8013612:	460b      	mov	r3, r1
 8013614:	d134      	bne.n	8013680 <_dtoa_r+0x708>
 8013616:	f7ec fe49 	bl	80002ac <__adddf3>
 801361a:	4642      	mov	r2, r8
 801361c:	464b      	mov	r3, r9
 801361e:	4606      	mov	r6, r0
 8013620:	460f      	mov	r7, r1
 8013622:	f7ed fa89 	bl	8000b38 <__aeabi_dcmpgt>
 8013626:	b9c8      	cbnz	r0, 801365c <_dtoa_r+0x6e4>
 8013628:	4642      	mov	r2, r8
 801362a:	464b      	mov	r3, r9
 801362c:	4630      	mov	r0, r6
 801362e:	4639      	mov	r1, r7
 8013630:	f7ed fa5a 	bl	8000ae8 <__aeabi_dcmpeq>
 8013634:	b110      	cbz	r0, 801363c <_dtoa_r+0x6c4>
 8013636:	9b01      	ldr	r3, [sp, #4]
 8013638:	07db      	lsls	r3, r3, #31
 801363a:	d40f      	bmi.n	801365c <_dtoa_r+0x6e4>
 801363c:	4651      	mov	r1, sl
 801363e:	4620      	mov	r0, r4
 8013640:	f000 fbcc 	bl	8013ddc <_Bfree>
 8013644:	2300      	movs	r3, #0
 8013646:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013648:	702b      	strb	r3, [r5, #0]
 801364a:	f10b 0301 	add.w	r3, fp, #1
 801364e:	6013      	str	r3, [r2, #0]
 8013650:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013652:	2b00      	cmp	r3, #0
 8013654:	f43f ace2 	beq.w	801301c <_dtoa_r+0xa4>
 8013658:	601d      	str	r5, [r3, #0]
 801365a:	e4df      	b.n	801301c <_dtoa_r+0xa4>
 801365c:	465f      	mov	r7, fp
 801365e:	462b      	mov	r3, r5
 8013660:	461d      	mov	r5, r3
 8013662:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013666:	2a39      	cmp	r2, #57	; 0x39
 8013668:	d106      	bne.n	8013678 <_dtoa_r+0x700>
 801366a:	9a00      	ldr	r2, [sp, #0]
 801366c:	429a      	cmp	r2, r3
 801366e:	d1f7      	bne.n	8013660 <_dtoa_r+0x6e8>
 8013670:	9900      	ldr	r1, [sp, #0]
 8013672:	2230      	movs	r2, #48	; 0x30
 8013674:	3701      	adds	r7, #1
 8013676:	700a      	strb	r2, [r1, #0]
 8013678:	781a      	ldrb	r2, [r3, #0]
 801367a:	3201      	adds	r2, #1
 801367c:	701a      	strb	r2, [r3, #0]
 801367e:	e790      	b.n	80135a2 <_dtoa_r+0x62a>
 8013680:	4ba3      	ldr	r3, [pc, #652]	; (8013910 <_dtoa_r+0x998>)
 8013682:	2200      	movs	r2, #0
 8013684:	f7ec ffc8 	bl	8000618 <__aeabi_dmul>
 8013688:	2200      	movs	r2, #0
 801368a:	2300      	movs	r3, #0
 801368c:	4606      	mov	r6, r0
 801368e:	460f      	mov	r7, r1
 8013690:	f7ed fa2a 	bl	8000ae8 <__aeabi_dcmpeq>
 8013694:	2800      	cmp	r0, #0
 8013696:	d09e      	beq.n	80135d6 <_dtoa_r+0x65e>
 8013698:	e7d0      	b.n	801363c <_dtoa_r+0x6c4>
 801369a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801369c:	2a00      	cmp	r2, #0
 801369e:	f000 80ca 	beq.w	8013836 <_dtoa_r+0x8be>
 80136a2:	9a07      	ldr	r2, [sp, #28]
 80136a4:	2a01      	cmp	r2, #1
 80136a6:	f300 80ad 	bgt.w	8013804 <_dtoa_r+0x88c>
 80136aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80136ac:	2a00      	cmp	r2, #0
 80136ae:	f000 80a5 	beq.w	80137fc <_dtoa_r+0x884>
 80136b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80136b6:	9e08      	ldr	r6, [sp, #32]
 80136b8:	9d05      	ldr	r5, [sp, #20]
 80136ba:	9a05      	ldr	r2, [sp, #20]
 80136bc:	441a      	add	r2, r3
 80136be:	9205      	str	r2, [sp, #20]
 80136c0:	9a06      	ldr	r2, [sp, #24]
 80136c2:	2101      	movs	r1, #1
 80136c4:	441a      	add	r2, r3
 80136c6:	4620      	mov	r0, r4
 80136c8:	9206      	str	r2, [sp, #24]
 80136ca:	f000 fc3d 	bl	8013f48 <__i2b>
 80136ce:	4607      	mov	r7, r0
 80136d0:	b165      	cbz	r5, 80136ec <_dtoa_r+0x774>
 80136d2:	9b06      	ldr	r3, [sp, #24]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	dd09      	ble.n	80136ec <_dtoa_r+0x774>
 80136d8:	42ab      	cmp	r3, r5
 80136da:	9a05      	ldr	r2, [sp, #20]
 80136dc:	bfa8      	it	ge
 80136de:	462b      	movge	r3, r5
 80136e0:	1ad2      	subs	r2, r2, r3
 80136e2:	9205      	str	r2, [sp, #20]
 80136e4:	9a06      	ldr	r2, [sp, #24]
 80136e6:	1aed      	subs	r5, r5, r3
 80136e8:	1ad3      	subs	r3, r2, r3
 80136ea:	9306      	str	r3, [sp, #24]
 80136ec:	9b08      	ldr	r3, [sp, #32]
 80136ee:	b1f3      	cbz	r3, 801372e <_dtoa_r+0x7b6>
 80136f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	f000 80a3 	beq.w	801383e <_dtoa_r+0x8c6>
 80136f8:	2e00      	cmp	r6, #0
 80136fa:	dd10      	ble.n	801371e <_dtoa_r+0x7a6>
 80136fc:	4639      	mov	r1, r7
 80136fe:	4632      	mov	r2, r6
 8013700:	4620      	mov	r0, r4
 8013702:	f000 fce1 	bl	80140c8 <__pow5mult>
 8013706:	4652      	mov	r2, sl
 8013708:	4601      	mov	r1, r0
 801370a:	4607      	mov	r7, r0
 801370c:	4620      	mov	r0, r4
 801370e:	f000 fc31 	bl	8013f74 <__multiply>
 8013712:	4651      	mov	r1, sl
 8013714:	4680      	mov	r8, r0
 8013716:	4620      	mov	r0, r4
 8013718:	f000 fb60 	bl	8013ddc <_Bfree>
 801371c:	46c2      	mov	sl, r8
 801371e:	9b08      	ldr	r3, [sp, #32]
 8013720:	1b9a      	subs	r2, r3, r6
 8013722:	d004      	beq.n	801372e <_dtoa_r+0x7b6>
 8013724:	4651      	mov	r1, sl
 8013726:	4620      	mov	r0, r4
 8013728:	f000 fcce 	bl	80140c8 <__pow5mult>
 801372c:	4682      	mov	sl, r0
 801372e:	2101      	movs	r1, #1
 8013730:	4620      	mov	r0, r4
 8013732:	f000 fc09 	bl	8013f48 <__i2b>
 8013736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013738:	2b00      	cmp	r3, #0
 801373a:	4606      	mov	r6, r0
 801373c:	f340 8081 	ble.w	8013842 <_dtoa_r+0x8ca>
 8013740:	461a      	mov	r2, r3
 8013742:	4601      	mov	r1, r0
 8013744:	4620      	mov	r0, r4
 8013746:	f000 fcbf 	bl	80140c8 <__pow5mult>
 801374a:	9b07      	ldr	r3, [sp, #28]
 801374c:	2b01      	cmp	r3, #1
 801374e:	4606      	mov	r6, r0
 8013750:	dd7a      	ble.n	8013848 <_dtoa_r+0x8d0>
 8013752:	f04f 0800 	mov.w	r8, #0
 8013756:	6933      	ldr	r3, [r6, #16]
 8013758:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801375c:	6918      	ldr	r0, [r3, #16]
 801375e:	f000 fba5 	bl	8013eac <__hi0bits>
 8013762:	f1c0 0020 	rsb	r0, r0, #32
 8013766:	9b06      	ldr	r3, [sp, #24]
 8013768:	4418      	add	r0, r3
 801376a:	f010 001f 	ands.w	r0, r0, #31
 801376e:	f000 8094 	beq.w	801389a <_dtoa_r+0x922>
 8013772:	f1c0 0320 	rsb	r3, r0, #32
 8013776:	2b04      	cmp	r3, #4
 8013778:	f340 8085 	ble.w	8013886 <_dtoa_r+0x90e>
 801377c:	9b05      	ldr	r3, [sp, #20]
 801377e:	f1c0 001c 	rsb	r0, r0, #28
 8013782:	4403      	add	r3, r0
 8013784:	9305      	str	r3, [sp, #20]
 8013786:	9b06      	ldr	r3, [sp, #24]
 8013788:	4403      	add	r3, r0
 801378a:	4405      	add	r5, r0
 801378c:	9306      	str	r3, [sp, #24]
 801378e:	9b05      	ldr	r3, [sp, #20]
 8013790:	2b00      	cmp	r3, #0
 8013792:	dd05      	ble.n	80137a0 <_dtoa_r+0x828>
 8013794:	4651      	mov	r1, sl
 8013796:	461a      	mov	r2, r3
 8013798:	4620      	mov	r0, r4
 801379a:	f000 fcef 	bl	801417c <__lshift>
 801379e:	4682      	mov	sl, r0
 80137a0:	9b06      	ldr	r3, [sp, #24]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	dd05      	ble.n	80137b2 <_dtoa_r+0x83a>
 80137a6:	4631      	mov	r1, r6
 80137a8:	461a      	mov	r2, r3
 80137aa:	4620      	mov	r0, r4
 80137ac:	f000 fce6 	bl	801417c <__lshift>
 80137b0:	4606      	mov	r6, r0
 80137b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d072      	beq.n	801389e <_dtoa_r+0x926>
 80137b8:	4631      	mov	r1, r6
 80137ba:	4650      	mov	r0, sl
 80137bc:	f000 fd4a 	bl	8014254 <__mcmp>
 80137c0:	2800      	cmp	r0, #0
 80137c2:	da6c      	bge.n	801389e <_dtoa_r+0x926>
 80137c4:	2300      	movs	r3, #0
 80137c6:	4651      	mov	r1, sl
 80137c8:	220a      	movs	r2, #10
 80137ca:	4620      	mov	r0, r4
 80137cc:	f000 fb28 	bl	8013e20 <__multadd>
 80137d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137d2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80137d6:	4682      	mov	sl, r0
 80137d8:	2b00      	cmp	r3, #0
 80137da:	f000 81b0 	beq.w	8013b3e <_dtoa_r+0xbc6>
 80137de:	2300      	movs	r3, #0
 80137e0:	4639      	mov	r1, r7
 80137e2:	220a      	movs	r2, #10
 80137e4:	4620      	mov	r0, r4
 80137e6:	f000 fb1b 	bl	8013e20 <__multadd>
 80137ea:	9b01      	ldr	r3, [sp, #4]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	4607      	mov	r7, r0
 80137f0:	f300 8096 	bgt.w	8013920 <_dtoa_r+0x9a8>
 80137f4:	9b07      	ldr	r3, [sp, #28]
 80137f6:	2b02      	cmp	r3, #2
 80137f8:	dc59      	bgt.n	80138ae <_dtoa_r+0x936>
 80137fa:	e091      	b.n	8013920 <_dtoa_r+0x9a8>
 80137fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80137fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013802:	e758      	b.n	80136b6 <_dtoa_r+0x73e>
 8013804:	9b04      	ldr	r3, [sp, #16]
 8013806:	1e5e      	subs	r6, r3, #1
 8013808:	9b08      	ldr	r3, [sp, #32]
 801380a:	42b3      	cmp	r3, r6
 801380c:	bfbf      	itttt	lt
 801380e:	9b08      	ldrlt	r3, [sp, #32]
 8013810:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8013812:	9608      	strlt	r6, [sp, #32]
 8013814:	1af3      	sublt	r3, r6, r3
 8013816:	bfb4      	ite	lt
 8013818:	18d2      	addlt	r2, r2, r3
 801381a:	1b9e      	subge	r6, r3, r6
 801381c:	9b04      	ldr	r3, [sp, #16]
 801381e:	bfbc      	itt	lt
 8013820:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8013822:	2600      	movlt	r6, #0
 8013824:	2b00      	cmp	r3, #0
 8013826:	bfb7      	itett	lt
 8013828:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801382c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013830:	1a9d      	sublt	r5, r3, r2
 8013832:	2300      	movlt	r3, #0
 8013834:	e741      	b.n	80136ba <_dtoa_r+0x742>
 8013836:	9e08      	ldr	r6, [sp, #32]
 8013838:	9d05      	ldr	r5, [sp, #20]
 801383a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801383c:	e748      	b.n	80136d0 <_dtoa_r+0x758>
 801383e:	9a08      	ldr	r2, [sp, #32]
 8013840:	e770      	b.n	8013724 <_dtoa_r+0x7ac>
 8013842:	9b07      	ldr	r3, [sp, #28]
 8013844:	2b01      	cmp	r3, #1
 8013846:	dc19      	bgt.n	801387c <_dtoa_r+0x904>
 8013848:	9b02      	ldr	r3, [sp, #8]
 801384a:	b9bb      	cbnz	r3, 801387c <_dtoa_r+0x904>
 801384c:	9b03      	ldr	r3, [sp, #12]
 801384e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013852:	b99b      	cbnz	r3, 801387c <_dtoa_r+0x904>
 8013854:	9b03      	ldr	r3, [sp, #12]
 8013856:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801385a:	0d1b      	lsrs	r3, r3, #20
 801385c:	051b      	lsls	r3, r3, #20
 801385e:	b183      	cbz	r3, 8013882 <_dtoa_r+0x90a>
 8013860:	9b05      	ldr	r3, [sp, #20]
 8013862:	3301      	adds	r3, #1
 8013864:	9305      	str	r3, [sp, #20]
 8013866:	9b06      	ldr	r3, [sp, #24]
 8013868:	3301      	adds	r3, #1
 801386a:	9306      	str	r3, [sp, #24]
 801386c:	f04f 0801 	mov.w	r8, #1
 8013870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013872:	2b00      	cmp	r3, #0
 8013874:	f47f af6f 	bne.w	8013756 <_dtoa_r+0x7de>
 8013878:	2001      	movs	r0, #1
 801387a:	e774      	b.n	8013766 <_dtoa_r+0x7ee>
 801387c:	f04f 0800 	mov.w	r8, #0
 8013880:	e7f6      	b.n	8013870 <_dtoa_r+0x8f8>
 8013882:	4698      	mov	r8, r3
 8013884:	e7f4      	b.n	8013870 <_dtoa_r+0x8f8>
 8013886:	d082      	beq.n	801378e <_dtoa_r+0x816>
 8013888:	9a05      	ldr	r2, [sp, #20]
 801388a:	331c      	adds	r3, #28
 801388c:	441a      	add	r2, r3
 801388e:	9205      	str	r2, [sp, #20]
 8013890:	9a06      	ldr	r2, [sp, #24]
 8013892:	441a      	add	r2, r3
 8013894:	441d      	add	r5, r3
 8013896:	9206      	str	r2, [sp, #24]
 8013898:	e779      	b.n	801378e <_dtoa_r+0x816>
 801389a:	4603      	mov	r3, r0
 801389c:	e7f4      	b.n	8013888 <_dtoa_r+0x910>
 801389e:	9b04      	ldr	r3, [sp, #16]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	dc37      	bgt.n	8013914 <_dtoa_r+0x99c>
 80138a4:	9b07      	ldr	r3, [sp, #28]
 80138a6:	2b02      	cmp	r3, #2
 80138a8:	dd34      	ble.n	8013914 <_dtoa_r+0x99c>
 80138aa:	9b04      	ldr	r3, [sp, #16]
 80138ac:	9301      	str	r3, [sp, #4]
 80138ae:	9b01      	ldr	r3, [sp, #4]
 80138b0:	b963      	cbnz	r3, 80138cc <_dtoa_r+0x954>
 80138b2:	4631      	mov	r1, r6
 80138b4:	2205      	movs	r2, #5
 80138b6:	4620      	mov	r0, r4
 80138b8:	f000 fab2 	bl	8013e20 <__multadd>
 80138bc:	4601      	mov	r1, r0
 80138be:	4606      	mov	r6, r0
 80138c0:	4650      	mov	r0, sl
 80138c2:	f000 fcc7 	bl	8014254 <__mcmp>
 80138c6:	2800      	cmp	r0, #0
 80138c8:	f73f adbb 	bgt.w	8013442 <_dtoa_r+0x4ca>
 80138cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138ce:	9d00      	ldr	r5, [sp, #0]
 80138d0:	ea6f 0b03 	mvn.w	fp, r3
 80138d4:	f04f 0800 	mov.w	r8, #0
 80138d8:	4631      	mov	r1, r6
 80138da:	4620      	mov	r0, r4
 80138dc:	f000 fa7e 	bl	8013ddc <_Bfree>
 80138e0:	2f00      	cmp	r7, #0
 80138e2:	f43f aeab 	beq.w	801363c <_dtoa_r+0x6c4>
 80138e6:	f1b8 0f00 	cmp.w	r8, #0
 80138ea:	d005      	beq.n	80138f8 <_dtoa_r+0x980>
 80138ec:	45b8      	cmp	r8, r7
 80138ee:	d003      	beq.n	80138f8 <_dtoa_r+0x980>
 80138f0:	4641      	mov	r1, r8
 80138f2:	4620      	mov	r0, r4
 80138f4:	f000 fa72 	bl	8013ddc <_Bfree>
 80138f8:	4639      	mov	r1, r7
 80138fa:	4620      	mov	r0, r4
 80138fc:	f000 fa6e 	bl	8013ddc <_Bfree>
 8013900:	e69c      	b.n	801363c <_dtoa_r+0x6c4>
 8013902:	2600      	movs	r6, #0
 8013904:	4637      	mov	r7, r6
 8013906:	e7e1      	b.n	80138cc <_dtoa_r+0x954>
 8013908:	46bb      	mov	fp, r7
 801390a:	4637      	mov	r7, r6
 801390c:	e599      	b.n	8013442 <_dtoa_r+0x4ca>
 801390e:	bf00      	nop
 8013910:	40240000 	.word	0x40240000
 8013914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013916:	2b00      	cmp	r3, #0
 8013918:	f000 80c8 	beq.w	8013aac <_dtoa_r+0xb34>
 801391c:	9b04      	ldr	r3, [sp, #16]
 801391e:	9301      	str	r3, [sp, #4]
 8013920:	2d00      	cmp	r5, #0
 8013922:	dd05      	ble.n	8013930 <_dtoa_r+0x9b8>
 8013924:	4639      	mov	r1, r7
 8013926:	462a      	mov	r2, r5
 8013928:	4620      	mov	r0, r4
 801392a:	f000 fc27 	bl	801417c <__lshift>
 801392e:	4607      	mov	r7, r0
 8013930:	f1b8 0f00 	cmp.w	r8, #0
 8013934:	d05b      	beq.n	80139ee <_dtoa_r+0xa76>
 8013936:	6879      	ldr	r1, [r7, #4]
 8013938:	4620      	mov	r0, r4
 801393a:	f000 fa0f 	bl	8013d5c <_Balloc>
 801393e:	4605      	mov	r5, r0
 8013940:	b928      	cbnz	r0, 801394e <_dtoa_r+0x9d6>
 8013942:	4b83      	ldr	r3, [pc, #524]	; (8013b50 <_dtoa_r+0xbd8>)
 8013944:	4602      	mov	r2, r0
 8013946:	f240 21ef 	movw	r1, #751	; 0x2ef
 801394a:	f7ff bb2e 	b.w	8012faa <_dtoa_r+0x32>
 801394e:	693a      	ldr	r2, [r7, #16]
 8013950:	3202      	adds	r2, #2
 8013952:	0092      	lsls	r2, r2, #2
 8013954:	f107 010c 	add.w	r1, r7, #12
 8013958:	300c      	adds	r0, #12
 801395a:	f7ff fa76 	bl	8012e4a <memcpy>
 801395e:	2201      	movs	r2, #1
 8013960:	4629      	mov	r1, r5
 8013962:	4620      	mov	r0, r4
 8013964:	f000 fc0a 	bl	801417c <__lshift>
 8013968:	9b00      	ldr	r3, [sp, #0]
 801396a:	3301      	adds	r3, #1
 801396c:	9304      	str	r3, [sp, #16]
 801396e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013972:	4413      	add	r3, r2
 8013974:	9308      	str	r3, [sp, #32]
 8013976:	9b02      	ldr	r3, [sp, #8]
 8013978:	f003 0301 	and.w	r3, r3, #1
 801397c:	46b8      	mov	r8, r7
 801397e:	9306      	str	r3, [sp, #24]
 8013980:	4607      	mov	r7, r0
 8013982:	9b04      	ldr	r3, [sp, #16]
 8013984:	4631      	mov	r1, r6
 8013986:	3b01      	subs	r3, #1
 8013988:	4650      	mov	r0, sl
 801398a:	9301      	str	r3, [sp, #4]
 801398c:	f7ff fa6b 	bl	8012e66 <quorem>
 8013990:	4641      	mov	r1, r8
 8013992:	9002      	str	r0, [sp, #8]
 8013994:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013998:	4650      	mov	r0, sl
 801399a:	f000 fc5b 	bl	8014254 <__mcmp>
 801399e:	463a      	mov	r2, r7
 80139a0:	9005      	str	r0, [sp, #20]
 80139a2:	4631      	mov	r1, r6
 80139a4:	4620      	mov	r0, r4
 80139a6:	f000 fc71 	bl	801428c <__mdiff>
 80139aa:	68c2      	ldr	r2, [r0, #12]
 80139ac:	4605      	mov	r5, r0
 80139ae:	bb02      	cbnz	r2, 80139f2 <_dtoa_r+0xa7a>
 80139b0:	4601      	mov	r1, r0
 80139b2:	4650      	mov	r0, sl
 80139b4:	f000 fc4e 	bl	8014254 <__mcmp>
 80139b8:	4602      	mov	r2, r0
 80139ba:	4629      	mov	r1, r5
 80139bc:	4620      	mov	r0, r4
 80139be:	9209      	str	r2, [sp, #36]	; 0x24
 80139c0:	f000 fa0c 	bl	8013ddc <_Bfree>
 80139c4:	9b07      	ldr	r3, [sp, #28]
 80139c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139c8:	9d04      	ldr	r5, [sp, #16]
 80139ca:	ea43 0102 	orr.w	r1, r3, r2
 80139ce:	9b06      	ldr	r3, [sp, #24]
 80139d0:	4319      	orrs	r1, r3
 80139d2:	d110      	bne.n	80139f6 <_dtoa_r+0xa7e>
 80139d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80139d8:	d029      	beq.n	8013a2e <_dtoa_r+0xab6>
 80139da:	9b05      	ldr	r3, [sp, #20]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	dd02      	ble.n	80139e6 <_dtoa_r+0xa6e>
 80139e0:	9b02      	ldr	r3, [sp, #8]
 80139e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80139e6:	9b01      	ldr	r3, [sp, #4]
 80139e8:	f883 9000 	strb.w	r9, [r3]
 80139ec:	e774      	b.n	80138d8 <_dtoa_r+0x960>
 80139ee:	4638      	mov	r0, r7
 80139f0:	e7ba      	b.n	8013968 <_dtoa_r+0x9f0>
 80139f2:	2201      	movs	r2, #1
 80139f4:	e7e1      	b.n	80139ba <_dtoa_r+0xa42>
 80139f6:	9b05      	ldr	r3, [sp, #20]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	db04      	blt.n	8013a06 <_dtoa_r+0xa8e>
 80139fc:	9907      	ldr	r1, [sp, #28]
 80139fe:	430b      	orrs	r3, r1
 8013a00:	9906      	ldr	r1, [sp, #24]
 8013a02:	430b      	orrs	r3, r1
 8013a04:	d120      	bne.n	8013a48 <_dtoa_r+0xad0>
 8013a06:	2a00      	cmp	r2, #0
 8013a08:	dded      	ble.n	80139e6 <_dtoa_r+0xa6e>
 8013a0a:	4651      	mov	r1, sl
 8013a0c:	2201      	movs	r2, #1
 8013a0e:	4620      	mov	r0, r4
 8013a10:	f000 fbb4 	bl	801417c <__lshift>
 8013a14:	4631      	mov	r1, r6
 8013a16:	4682      	mov	sl, r0
 8013a18:	f000 fc1c 	bl	8014254 <__mcmp>
 8013a1c:	2800      	cmp	r0, #0
 8013a1e:	dc03      	bgt.n	8013a28 <_dtoa_r+0xab0>
 8013a20:	d1e1      	bne.n	80139e6 <_dtoa_r+0xa6e>
 8013a22:	f019 0f01 	tst.w	r9, #1
 8013a26:	d0de      	beq.n	80139e6 <_dtoa_r+0xa6e>
 8013a28:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013a2c:	d1d8      	bne.n	80139e0 <_dtoa_r+0xa68>
 8013a2e:	9a01      	ldr	r2, [sp, #4]
 8013a30:	2339      	movs	r3, #57	; 0x39
 8013a32:	7013      	strb	r3, [r2, #0]
 8013a34:	462b      	mov	r3, r5
 8013a36:	461d      	mov	r5, r3
 8013a38:	3b01      	subs	r3, #1
 8013a3a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013a3e:	2a39      	cmp	r2, #57	; 0x39
 8013a40:	d06c      	beq.n	8013b1c <_dtoa_r+0xba4>
 8013a42:	3201      	adds	r2, #1
 8013a44:	701a      	strb	r2, [r3, #0]
 8013a46:	e747      	b.n	80138d8 <_dtoa_r+0x960>
 8013a48:	2a00      	cmp	r2, #0
 8013a4a:	dd07      	ble.n	8013a5c <_dtoa_r+0xae4>
 8013a4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013a50:	d0ed      	beq.n	8013a2e <_dtoa_r+0xab6>
 8013a52:	9a01      	ldr	r2, [sp, #4]
 8013a54:	f109 0301 	add.w	r3, r9, #1
 8013a58:	7013      	strb	r3, [r2, #0]
 8013a5a:	e73d      	b.n	80138d8 <_dtoa_r+0x960>
 8013a5c:	9b04      	ldr	r3, [sp, #16]
 8013a5e:	9a08      	ldr	r2, [sp, #32]
 8013a60:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013a64:	4293      	cmp	r3, r2
 8013a66:	d043      	beq.n	8013af0 <_dtoa_r+0xb78>
 8013a68:	4651      	mov	r1, sl
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	220a      	movs	r2, #10
 8013a6e:	4620      	mov	r0, r4
 8013a70:	f000 f9d6 	bl	8013e20 <__multadd>
 8013a74:	45b8      	cmp	r8, r7
 8013a76:	4682      	mov	sl, r0
 8013a78:	f04f 0300 	mov.w	r3, #0
 8013a7c:	f04f 020a 	mov.w	r2, #10
 8013a80:	4641      	mov	r1, r8
 8013a82:	4620      	mov	r0, r4
 8013a84:	d107      	bne.n	8013a96 <_dtoa_r+0xb1e>
 8013a86:	f000 f9cb 	bl	8013e20 <__multadd>
 8013a8a:	4680      	mov	r8, r0
 8013a8c:	4607      	mov	r7, r0
 8013a8e:	9b04      	ldr	r3, [sp, #16]
 8013a90:	3301      	adds	r3, #1
 8013a92:	9304      	str	r3, [sp, #16]
 8013a94:	e775      	b.n	8013982 <_dtoa_r+0xa0a>
 8013a96:	f000 f9c3 	bl	8013e20 <__multadd>
 8013a9a:	4639      	mov	r1, r7
 8013a9c:	4680      	mov	r8, r0
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	220a      	movs	r2, #10
 8013aa2:	4620      	mov	r0, r4
 8013aa4:	f000 f9bc 	bl	8013e20 <__multadd>
 8013aa8:	4607      	mov	r7, r0
 8013aaa:	e7f0      	b.n	8013a8e <_dtoa_r+0xb16>
 8013aac:	9b04      	ldr	r3, [sp, #16]
 8013aae:	9301      	str	r3, [sp, #4]
 8013ab0:	9d00      	ldr	r5, [sp, #0]
 8013ab2:	4631      	mov	r1, r6
 8013ab4:	4650      	mov	r0, sl
 8013ab6:	f7ff f9d6 	bl	8012e66 <quorem>
 8013aba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013abe:	9b00      	ldr	r3, [sp, #0]
 8013ac0:	f805 9b01 	strb.w	r9, [r5], #1
 8013ac4:	1aea      	subs	r2, r5, r3
 8013ac6:	9b01      	ldr	r3, [sp, #4]
 8013ac8:	4293      	cmp	r3, r2
 8013aca:	dd07      	ble.n	8013adc <_dtoa_r+0xb64>
 8013acc:	4651      	mov	r1, sl
 8013ace:	2300      	movs	r3, #0
 8013ad0:	220a      	movs	r2, #10
 8013ad2:	4620      	mov	r0, r4
 8013ad4:	f000 f9a4 	bl	8013e20 <__multadd>
 8013ad8:	4682      	mov	sl, r0
 8013ada:	e7ea      	b.n	8013ab2 <_dtoa_r+0xb3a>
 8013adc:	9b01      	ldr	r3, [sp, #4]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	bfc8      	it	gt
 8013ae2:	461d      	movgt	r5, r3
 8013ae4:	9b00      	ldr	r3, [sp, #0]
 8013ae6:	bfd8      	it	le
 8013ae8:	2501      	movle	r5, #1
 8013aea:	441d      	add	r5, r3
 8013aec:	f04f 0800 	mov.w	r8, #0
 8013af0:	4651      	mov	r1, sl
 8013af2:	2201      	movs	r2, #1
 8013af4:	4620      	mov	r0, r4
 8013af6:	f000 fb41 	bl	801417c <__lshift>
 8013afa:	4631      	mov	r1, r6
 8013afc:	4682      	mov	sl, r0
 8013afe:	f000 fba9 	bl	8014254 <__mcmp>
 8013b02:	2800      	cmp	r0, #0
 8013b04:	dc96      	bgt.n	8013a34 <_dtoa_r+0xabc>
 8013b06:	d102      	bne.n	8013b0e <_dtoa_r+0xb96>
 8013b08:	f019 0f01 	tst.w	r9, #1
 8013b0c:	d192      	bne.n	8013a34 <_dtoa_r+0xabc>
 8013b0e:	462b      	mov	r3, r5
 8013b10:	461d      	mov	r5, r3
 8013b12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013b16:	2a30      	cmp	r2, #48	; 0x30
 8013b18:	d0fa      	beq.n	8013b10 <_dtoa_r+0xb98>
 8013b1a:	e6dd      	b.n	80138d8 <_dtoa_r+0x960>
 8013b1c:	9a00      	ldr	r2, [sp, #0]
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d189      	bne.n	8013a36 <_dtoa_r+0xabe>
 8013b22:	f10b 0b01 	add.w	fp, fp, #1
 8013b26:	2331      	movs	r3, #49	; 0x31
 8013b28:	e796      	b.n	8013a58 <_dtoa_r+0xae0>
 8013b2a:	4b0a      	ldr	r3, [pc, #40]	; (8013b54 <_dtoa_r+0xbdc>)
 8013b2c:	f7ff ba99 	b.w	8013062 <_dtoa_r+0xea>
 8013b30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	f47f aa6d 	bne.w	8013012 <_dtoa_r+0x9a>
 8013b38:	4b07      	ldr	r3, [pc, #28]	; (8013b58 <_dtoa_r+0xbe0>)
 8013b3a:	f7ff ba92 	b.w	8013062 <_dtoa_r+0xea>
 8013b3e:	9b01      	ldr	r3, [sp, #4]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	dcb5      	bgt.n	8013ab0 <_dtoa_r+0xb38>
 8013b44:	9b07      	ldr	r3, [sp, #28]
 8013b46:	2b02      	cmp	r3, #2
 8013b48:	f73f aeb1 	bgt.w	80138ae <_dtoa_r+0x936>
 8013b4c:	e7b0      	b.n	8013ab0 <_dtoa_r+0xb38>
 8013b4e:	bf00      	nop
 8013b50:	0801677d 	.word	0x0801677d
 8013b54:	080166dd 	.word	0x080166dd
 8013b58:	08016701 	.word	0x08016701

08013b5c <_free_r>:
 8013b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b5e:	2900      	cmp	r1, #0
 8013b60:	d044      	beq.n	8013bec <_free_r+0x90>
 8013b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b66:	9001      	str	r0, [sp, #4]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	f1a1 0404 	sub.w	r4, r1, #4
 8013b6e:	bfb8      	it	lt
 8013b70:	18e4      	addlt	r4, r4, r3
 8013b72:	f000 f8e7 	bl	8013d44 <__malloc_lock>
 8013b76:	4a1e      	ldr	r2, [pc, #120]	; (8013bf0 <_free_r+0x94>)
 8013b78:	9801      	ldr	r0, [sp, #4]
 8013b7a:	6813      	ldr	r3, [r2, #0]
 8013b7c:	b933      	cbnz	r3, 8013b8c <_free_r+0x30>
 8013b7e:	6063      	str	r3, [r4, #4]
 8013b80:	6014      	str	r4, [r2, #0]
 8013b82:	b003      	add	sp, #12
 8013b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b88:	f000 b8e2 	b.w	8013d50 <__malloc_unlock>
 8013b8c:	42a3      	cmp	r3, r4
 8013b8e:	d908      	bls.n	8013ba2 <_free_r+0x46>
 8013b90:	6825      	ldr	r5, [r4, #0]
 8013b92:	1961      	adds	r1, r4, r5
 8013b94:	428b      	cmp	r3, r1
 8013b96:	bf01      	itttt	eq
 8013b98:	6819      	ldreq	r1, [r3, #0]
 8013b9a:	685b      	ldreq	r3, [r3, #4]
 8013b9c:	1949      	addeq	r1, r1, r5
 8013b9e:	6021      	streq	r1, [r4, #0]
 8013ba0:	e7ed      	b.n	8013b7e <_free_r+0x22>
 8013ba2:	461a      	mov	r2, r3
 8013ba4:	685b      	ldr	r3, [r3, #4]
 8013ba6:	b10b      	cbz	r3, 8013bac <_free_r+0x50>
 8013ba8:	42a3      	cmp	r3, r4
 8013baa:	d9fa      	bls.n	8013ba2 <_free_r+0x46>
 8013bac:	6811      	ldr	r1, [r2, #0]
 8013bae:	1855      	adds	r5, r2, r1
 8013bb0:	42a5      	cmp	r5, r4
 8013bb2:	d10b      	bne.n	8013bcc <_free_r+0x70>
 8013bb4:	6824      	ldr	r4, [r4, #0]
 8013bb6:	4421      	add	r1, r4
 8013bb8:	1854      	adds	r4, r2, r1
 8013bba:	42a3      	cmp	r3, r4
 8013bbc:	6011      	str	r1, [r2, #0]
 8013bbe:	d1e0      	bne.n	8013b82 <_free_r+0x26>
 8013bc0:	681c      	ldr	r4, [r3, #0]
 8013bc2:	685b      	ldr	r3, [r3, #4]
 8013bc4:	6053      	str	r3, [r2, #4]
 8013bc6:	440c      	add	r4, r1
 8013bc8:	6014      	str	r4, [r2, #0]
 8013bca:	e7da      	b.n	8013b82 <_free_r+0x26>
 8013bcc:	d902      	bls.n	8013bd4 <_free_r+0x78>
 8013bce:	230c      	movs	r3, #12
 8013bd0:	6003      	str	r3, [r0, #0]
 8013bd2:	e7d6      	b.n	8013b82 <_free_r+0x26>
 8013bd4:	6825      	ldr	r5, [r4, #0]
 8013bd6:	1961      	adds	r1, r4, r5
 8013bd8:	428b      	cmp	r3, r1
 8013bda:	bf04      	itt	eq
 8013bdc:	6819      	ldreq	r1, [r3, #0]
 8013bde:	685b      	ldreq	r3, [r3, #4]
 8013be0:	6063      	str	r3, [r4, #4]
 8013be2:	bf04      	itt	eq
 8013be4:	1949      	addeq	r1, r1, r5
 8013be6:	6021      	streq	r1, [r4, #0]
 8013be8:	6054      	str	r4, [r2, #4]
 8013bea:	e7ca      	b.n	8013b82 <_free_r+0x26>
 8013bec:	b003      	add	sp, #12
 8013bee:	bd30      	pop	{r4, r5, pc}
 8013bf0:	20009ec8 	.word	0x20009ec8

08013bf4 <malloc>:
 8013bf4:	4b02      	ldr	r3, [pc, #8]	; (8013c00 <malloc+0xc>)
 8013bf6:	4601      	mov	r1, r0
 8013bf8:	6818      	ldr	r0, [r3, #0]
 8013bfa:	f000 b823 	b.w	8013c44 <_malloc_r>
 8013bfe:	bf00      	nop
 8013c00:	2000043c 	.word	0x2000043c

08013c04 <sbrk_aligned>:
 8013c04:	b570      	push	{r4, r5, r6, lr}
 8013c06:	4e0e      	ldr	r6, [pc, #56]	; (8013c40 <sbrk_aligned+0x3c>)
 8013c08:	460c      	mov	r4, r1
 8013c0a:	6831      	ldr	r1, [r6, #0]
 8013c0c:	4605      	mov	r5, r0
 8013c0e:	b911      	cbnz	r1, 8013c16 <sbrk_aligned+0x12>
 8013c10:	f000 fe1c 	bl	801484c <_sbrk_r>
 8013c14:	6030      	str	r0, [r6, #0]
 8013c16:	4621      	mov	r1, r4
 8013c18:	4628      	mov	r0, r5
 8013c1a:	f000 fe17 	bl	801484c <_sbrk_r>
 8013c1e:	1c43      	adds	r3, r0, #1
 8013c20:	d00a      	beq.n	8013c38 <sbrk_aligned+0x34>
 8013c22:	1cc4      	adds	r4, r0, #3
 8013c24:	f024 0403 	bic.w	r4, r4, #3
 8013c28:	42a0      	cmp	r0, r4
 8013c2a:	d007      	beq.n	8013c3c <sbrk_aligned+0x38>
 8013c2c:	1a21      	subs	r1, r4, r0
 8013c2e:	4628      	mov	r0, r5
 8013c30:	f000 fe0c 	bl	801484c <_sbrk_r>
 8013c34:	3001      	adds	r0, #1
 8013c36:	d101      	bne.n	8013c3c <sbrk_aligned+0x38>
 8013c38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013c3c:	4620      	mov	r0, r4
 8013c3e:	bd70      	pop	{r4, r5, r6, pc}
 8013c40:	20009ecc 	.word	0x20009ecc

08013c44 <_malloc_r>:
 8013c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c48:	1ccd      	adds	r5, r1, #3
 8013c4a:	f025 0503 	bic.w	r5, r5, #3
 8013c4e:	3508      	adds	r5, #8
 8013c50:	2d0c      	cmp	r5, #12
 8013c52:	bf38      	it	cc
 8013c54:	250c      	movcc	r5, #12
 8013c56:	2d00      	cmp	r5, #0
 8013c58:	4607      	mov	r7, r0
 8013c5a:	db01      	blt.n	8013c60 <_malloc_r+0x1c>
 8013c5c:	42a9      	cmp	r1, r5
 8013c5e:	d905      	bls.n	8013c6c <_malloc_r+0x28>
 8013c60:	230c      	movs	r3, #12
 8013c62:	603b      	str	r3, [r7, #0]
 8013c64:	2600      	movs	r6, #0
 8013c66:	4630      	mov	r0, r6
 8013c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013d40 <_malloc_r+0xfc>
 8013c70:	f000 f868 	bl	8013d44 <__malloc_lock>
 8013c74:	f8d8 3000 	ldr.w	r3, [r8]
 8013c78:	461c      	mov	r4, r3
 8013c7a:	bb5c      	cbnz	r4, 8013cd4 <_malloc_r+0x90>
 8013c7c:	4629      	mov	r1, r5
 8013c7e:	4638      	mov	r0, r7
 8013c80:	f7ff ffc0 	bl	8013c04 <sbrk_aligned>
 8013c84:	1c43      	adds	r3, r0, #1
 8013c86:	4604      	mov	r4, r0
 8013c88:	d155      	bne.n	8013d36 <_malloc_r+0xf2>
 8013c8a:	f8d8 4000 	ldr.w	r4, [r8]
 8013c8e:	4626      	mov	r6, r4
 8013c90:	2e00      	cmp	r6, #0
 8013c92:	d145      	bne.n	8013d20 <_malloc_r+0xdc>
 8013c94:	2c00      	cmp	r4, #0
 8013c96:	d048      	beq.n	8013d2a <_malloc_r+0xe6>
 8013c98:	6823      	ldr	r3, [r4, #0]
 8013c9a:	4631      	mov	r1, r6
 8013c9c:	4638      	mov	r0, r7
 8013c9e:	eb04 0903 	add.w	r9, r4, r3
 8013ca2:	f000 fdd3 	bl	801484c <_sbrk_r>
 8013ca6:	4581      	cmp	r9, r0
 8013ca8:	d13f      	bne.n	8013d2a <_malloc_r+0xe6>
 8013caa:	6821      	ldr	r1, [r4, #0]
 8013cac:	1a6d      	subs	r5, r5, r1
 8013cae:	4629      	mov	r1, r5
 8013cb0:	4638      	mov	r0, r7
 8013cb2:	f7ff ffa7 	bl	8013c04 <sbrk_aligned>
 8013cb6:	3001      	adds	r0, #1
 8013cb8:	d037      	beq.n	8013d2a <_malloc_r+0xe6>
 8013cba:	6823      	ldr	r3, [r4, #0]
 8013cbc:	442b      	add	r3, r5
 8013cbe:	6023      	str	r3, [r4, #0]
 8013cc0:	f8d8 3000 	ldr.w	r3, [r8]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d038      	beq.n	8013d3a <_malloc_r+0xf6>
 8013cc8:	685a      	ldr	r2, [r3, #4]
 8013cca:	42a2      	cmp	r2, r4
 8013ccc:	d12b      	bne.n	8013d26 <_malloc_r+0xe2>
 8013cce:	2200      	movs	r2, #0
 8013cd0:	605a      	str	r2, [r3, #4]
 8013cd2:	e00f      	b.n	8013cf4 <_malloc_r+0xb0>
 8013cd4:	6822      	ldr	r2, [r4, #0]
 8013cd6:	1b52      	subs	r2, r2, r5
 8013cd8:	d41f      	bmi.n	8013d1a <_malloc_r+0xd6>
 8013cda:	2a0b      	cmp	r2, #11
 8013cdc:	d917      	bls.n	8013d0e <_malloc_r+0xca>
 8013cde:	1961      	adds	r1, r4, r5
 8013ce0:	42a3      	cmp	r3, r4
 8013ce2:	6025      	str	r5, [r4, #0]
 8013ce4:	bf18      	it	ne
 8013ce6:	6059      	strne	r1, [r3, #4]
 8013ce8:	6863      	ldr	r3, [r4, #4]
 8013cea:	bf08      	it	eq
 8013cec:	f8c8 1000 	streq.w	r1, [r8]
 8013cf0:	5162      	str	r2, [r4, r5]
 8013cf2:	604b      	str	r3, [r1, #4]
 8013cf4:	4638      	mov	r0, r7
 8013cf6:	f104 060b 	add.w	r6, r4, #11
 8013cfa:	f000 f829 	bl	8013d50 <__malloc_unlock>
 8013cfe:	f026 0607 	bic.w	r6, r6, #7
 8013d02:	1d23      	adds	r3, r4, #4
 8013d04:	1af2      	subs	r2, r6, r3
 8013d06:	d0ae      	beq.n	8013c66 <_malloc_r+0x22>
 8013d08:	1b9b      	subs	r3, r3, r6
 8013d0a:	50a3      	str	r3, [r4, r2]
 8013d0c:	e7ab      	b.n	8013c66 <_malloc_r+0x22>
 8013d0e:	42a3      	cmp	r3, r4
 8013d10:	6862      	ldr	r2, [r4, #4]
 8013d12:	d1dd      	bne.n	8013cd0 <_malloc_r+0x8c>
 8013d14:	f8c8 2000 	str.w	r2, [r8]
 8013d18:	e7ec      	b.n	8013cf4 <_malloc_r+0xb0>
 8013d1a:	4623      	mov	r3, r4
 8013d1c:	6864      	ldr	r4, [r4, #4]
 8013d1e:	e7ac      	b.n	8013c7a <_malloc_r+0x36>
 8013d20:	4634      	mov	r4, r6
 8013d22:	6876      	ldr	r6, [r6, #4]
 8013d24:	e7b4      	b.n	8013c90 <_malloc_r+0x4c>
 8013d26:	4613      	mov	r3, r2
 8013d28:	e7cc      	b.n	8013cc4 <_malloc_r+0x80>
 8013d2a:	230c      	movs	r3, #12
 8013d2c:	603b      	str	r3, [r7, #0]
 8013d2e:	4638      	mov	r0, r7
 8013d30:	f000 f80e 	bl	8013d50 <__malloc_unlock>
 8013d34:	e797      	b.n	8013c66 <_malloc_r+0x22>
 8013d36:	6025      	str	r5, [r4, #0]
 8013d38:	e7dc      	b.n	8013cf4 <_malloc_r+0xb0>
 8013d3a:	605b      	str	r3, [r3, #4]
 8013d3c:	deff      	udf	#255	; 0xff
 8013d3e:	bf00      	nop
 8013d40:	20009ec8 	.word	0x20009ec8

08013d44 <__malloc_lock>:
 8013d44:	4801      	ldr	r0, [pc, #4]	; (8013d4c <__malloc_lock+0x8>)
 8013d46:	f7ff b87e 	b.w	8012e46 <__retarget_lock_acquire_recursive>
 8013d4a:	bf00      	nop
 8013d4c:	20009ec4 	.word	0x20009ec4

08013d50 <__malloc_unlock>:
 8013d50:	4801      	ldr	r0, [pc, #4]	; (8013d58 <__malloc_unlock+0x8>)
 8013d52:	f7ff b879 	b.w	8012e48 <__retarget_lock_release_recursive>
 8013d56:	bf00      	nop
 8013d58:	20009ec4 	.word	0x20009ec4

08013d5c <_Balloc>:
 8013d5c:	b570      	push	{r4, r5, r6, lr}
 8013d5e:	69c6      	ldr	r6, [r0, #28]
 8013d60:	4604      	mov	r4, r0
 8013d62:	460d      	mov	r5, r1
 8013d64:	b976      	cbnz	r6, 8013d84 <_Balloc+0x28>
 8013d66:	2010      	movs	r0, #16
 8013d68:	f7ff ff44 	bl	8013bf4 <malloc>
 8013d6c:	4602      	mov	r2, r0
 8013d6e:	61e0      	str	r0, [r4, #28]
 8013d70:	b920      	cbnz	r0, 8013d7c <_Balloc+0x20>
 8013d72:	4b18      	ldr	r3, [pc, #96]	; (8013dd4 <_Balloc+0x78>)
 8013d74:	4818      	ldr	r0, [pc, #96]	; (8013dd8 <_Balloc+0x7c>)
 8013d76:	216b      	movs	r1, #107	; 0x6b
 8013d78:	f000 fd78 	bl	801486c <__assert_func>
 8013d7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d80:	6006      	str	r6, [r0, #0]
 8013d82:	60c6      	str	r6, [r0, #12]
 8013d84:	69e6      	ldr	r6, [r4, #28]
 8013d86:	68f3      	ldr	r3, [r6, #12]
 8013d88:	b183      	cbz	r3, 8013dac <_Balloc+0x50>
 8013d8a:	69e3      	ldr	r3, [r4, #28]
 8013d8c:	68db      	ldr	r3, [r3, #12]
 8013d8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013d92:	b9b8      	cbnz	r0, 8013dc4 <_Balloc+0x68>
 8013d94:	2101      	movs	r1, #1
 8013d96:	fa01 f605 	lsl.w	r6, r1, r5
 8013d9a:	1d72      	adds	r2, r6, #5
 8013d9c:	0092      	lsls	r2, r2, #2
 8013d9e:	4620      	mov	r0, r4
 8013da0:	f000 fd82 	bl	80148a8 <_calloc_r>
 8013da4:	b160      	cbz	r0, 8013dc0 <_Balloc+0x64>
 8013da6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013daa:	e00e      	b.n	8013dca <_Balloc+0x6e>
 8013dac:	2221      	movs	r2, #33	; 0x21
 8013dae:	2104      	movs	r1, #4
 8013db0:	4620      	mov	r0, r4
 8013db2:	f000 fd79 	bl	80148a8 <_calloc_r>
 8013db6:	69e3      	ldr	r3, [r4, #28]
 8013db8:	60f0      	str	r0, [r6, #12]
 8013dba:	68db      	ldr	r3, [r3, #12]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d1e4      	bne.n	8013d8a <_Balloc+0x2e>
 8013dc0:	2000      	movs	r0, #0
 8013dc2:	bd70      	pop	{r4, r5, r6, pc}
 8013dc4:	6802      	ldr	r2, [r0, #0]
 8013dc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013dca:	2300      	movs	r3, #0
 8013dcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013dd0:	e7f7      	b.n	8013dc2 <_Balloc+0x66>
 8013dd2:	bf00      	nop
 8013dd4:	0801670e 	.word	0x0801670e
 8013dd8:	0801678e 	.word	0x0801678e

08013ddc <_Bfree>:
 8013ddc:	b570      	push	{r4, r5, r6, lr}
 8013dde:	69c6      	ldr	r6, [r0, #28]
 8013de0:	4605      	mov	r5, r0
 8013de2:	460c      	mov	r4, r1
 8013de4:	b976      	cbnz	r6, 8013e04 <_Bfree+0x28>
 8013de6:	2010      	movs	r0, #16
 8013de8:	f7ff ff04 	bl	8013bf4 <malloc>
 8013dec:	4602      	mov	r2, r0
 8013dee:	61e8      	str	r0, [r5, #28]
 8013df0:	b920      	cbnz	r0, 8013dfc <_Bfree+0x20>
 8013df2:	4b09      	ldr	r3, [pc, #36]	; (8013e18 <_Bfree+0x3c>)
 8013df4:	4809      	ldr	r0, [pc, #36]	; (8013e1c <_Bfree+0x40>)
 8013df6:	218f      	movs	r1, #143	; 0x8f
 8013df8:	f000 fd38 	bl	801486c <__assert_func>
 8013dfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e00:	6006      	str	r6, [r0, #0]
 8013e02:	60c6      	str	r6, [r0, #12]
 8013e04:	b13c      	cbz	r4, 8013e16 <_Bfree+0x3a>
 8013e06:	69eb      	ldr	r3, [r5, #28]
 8013e08:	6862      	ldr	r2, [r4, #4]
 8013e0a:	68db      	ldr	r3, [r3, #12]
 8013e0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013e10:	6021      	str	r1, [r4, #0]
 8013e12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013e16:	bd70      	pop	{r4, r5, r6, pc}
 8013e18:	0801670e 	.word	0x0801670e
 8013e1c:	0801678e 	.word	0x0801678e

08013e20 <__multadd>:
 8013e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e24:	690d      	ldr	r5, [r1, #16]
 8013e26:	4607      	mov	r7, r0
 8013e28:	460c      	mov	r4, r1
 8013e2a:	461e      	mov	r6, r3
 8013e2c:	f101 0c14 	add.w	ip, r1, #20
 8013e30:	2000      	movs	r0, #0
 8013e32:	f8dc 3000 	ldr.w	r3, [ip]
 8013e36:	b299      	uxth	r1, r3
 8013e38:	fb02 6101 	mla	r1, r2, r1, r6
 8013e3c:	0c1e      	lsrs	r6, r3, #16
 8013e3e:	0c0b      	lsrs	r3, r1, #16
 8013e40:	fb02 3306 	mla	r3, r2, r6, r3
 8013e44:	b289      	uxth	r1, r1
 8013e46:	3001      	adds	r0, #1
 8013e48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013e4c:	4285      	cmp	r5, r0
 8013e4e:	f84c 1b04 	str.w	r1, [ip], #4
 8013e52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013e56:	dcec      	bgt.n	8013e32 <__multadd+0x12>
 8013e58:	b30e      	cbz	r6, 8013e9e <__multadd+0x7e>
 8013e5a:	68a3      	ldr	r3, [r4, #8]
 8013e5c:	42ab      	cmp	r3, r5
 8013e5e:	dc19      	bgt.n	8013e94 <__multadd+0x74>
 8013e60:	6861      	ldr	r1, [r4, #4]
 8013e62:	4638      	mov	r0, r7
 8013e64:	3101      	adds	r1, #1
 8013e66:	f7ff ff79 	bl	8013d5c <_Balloc>
 8013e6a:	4680      	mov	r8, r0
 8013e6c:	b928      	cbnz	r0, 8013e7a <__multadd+0x5a>
 8013e6e:	4602      	mov	r2, r0
 8013e70:	4b0c      	ldr	r3, [pc, #48]	; (8013ea4 <__multadd+0x84>)
 8013e72:	480d      	ldr	r0, [pc, #52]	; (8013ea8 <__multadd+0x88>)
 8013e74:	21ba      	movs	r1, #186	; 0xba
 8013e76:	f000 fcf9 	bl	801486c <__assert_func>
 8013e7a:	6922      	ldr	r2, [r4, #16]
 8013e7c:	3202      	adds	r2, #2
 8013e7e:	f104 010c 	add.w	r1, r4, #12
 8013e82:	0092      	lsls	r2, r2, #2
 8013e84:	300c      	adds	r0, #12
 8013e86:	f7fe ffe0 	bl	8012e4a <memcpy>
 8013e8a:	4621      	mov	r1, r4
 8013e8c:	4638      	mov	r0, r7
 8013e8e:	f7ff ffa5 	bl	8013ddc <_Bfree>
 8013e92:	4644      	mov	r4, r8
 8013e94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013e98:	3501      	adds	r5, #1
 8013e9a:	615e      	str	r6, [r3, #20]
 8013e9c:	6125      	str	r5, [r4, #16]
 8013e9e:	4620      	mov	r0, r4
 8013ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ea4:	0801677d 	.word	0x0801677d
 8013ea8:	0801678e 	.word	0x0801678e

08013eac <__hi0bits>:
 8013eac:	0c03      	lsrs	r3, r0, #16
 8013eae:	041b      	lsls	r3, r3, #16
 8013eb0:	b9d3      	cbnz	r3, 8013ee8 <__hi0bits+0x3c>
 8013eb2:	0400      	lsls	r0, r0, #16
 8013eb4:	2310      	movs	r3, #16
 8013eb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013eba:	bf04      	itt	eq
 8013ebc:	0200      	lsleq	r0, r0, #8
 8013ebe:	3308      	addeq	r3, #8
 8013ec0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013ec4:	bf04      	itt	eq
 8013ec6:	0100      	lsleq	r0, r0, #4
 8013ec8:	3304      	addeq	r3, #4
 8013eca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013ece:	bf04      	itt	eq
 8013ed0:	0080      	lsleq	r0, r0, #2
 8013ed2:	3302      	addeq	r3, #2
 8013ed4:	2800      	cmp	r0, #0
 8013ed6:	db05      	blt.n	8013ee4 <__hi0bits+0x38>
 8013ed8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013edc:	f103 0301 	add.w	r3, r3, #1
 8013ee0:	bf08      	it	eq
 8013ee2:	2320      	moveq	r3, #32
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	4770      	bx	lr
 8013ee8:	2300      	movs	r3, #0
 8013eea:	e7e4      	b.n	8013eb6 <__hi0bits+0xa>

08013eec <__lo0bits>:
 8013eec:	6803      	ldr	r3, [r0, #0]
 8013eee:	f013 0207 	ands.w	r2, r3, #7
 8013ef2:	d00c      	beq.n	8013f0e <__lo0bits+0x22>
 8013ef4:	07d9      	lsls	r1, r3, #31
 8013ef6:	d422      	bmi.n	8013f3e <__lo0bits+0x52>
 8013ef8:	079a      	lsls	r2, r3, #30
 8013efa:	bf49      	itett	mi
 8013efc:	085b      	lsrmi	r3, r3, #1
 8013efe:	089b      	lsrpl	r3, r3, #2
 8013f00:	6003      	strmi	r3, [r0, #0]
 8013f02:	2201      	movmi	r2, #1
 8013f04:	bf5c      	itt	pl
 8013f06:	6003      	strpl	r3, [r0, #0]
 8013f08:	2202      	movpl	r2, #2
 8013f0a:	4610      	mov	r0, r2
 8013f0c:	4770      	bx	lr
 8013f0e:	b299      	uxth	r1, r3
 8013f10:	b909      	cbnz	r1, 8013f16 <__lo0bits+0x2a>
 8013f12:	0c1b      	lsrs	r3, r3, #16
 8013f14:	2210      	movs	r2, #16
 8013f16:	b2d9      	uxtb	r1, r3
 8013f18:	b909      	cbnz	r1, 8013f1e <__lo0bits+0x32>
 8013f1a:	3208      	adds	r2, #8
 8013f1c:	0a1b      	lsrs	r3, r3, #8
 8013f1e:	0719      	lsls	r1, r3, #28
 8013f20:	bf04      	itt	eq
 8013f22:	091b      	lsreq	r3, r3, #4
 8013f24:	3204      	addeq	r2, #4
 8013f26:	0799      	lsls	r1, r3, #30
 8013f28:	bf04      	itt	eq
 8013f2a:	089b      	lsreq	r3, r3, #2
 8013f2c:	3202      	addeq	r2, #2
 8013f2e:	07d9      	lsls	r1, r3, #31
 8013f30:	d403      	bmi.n	8013f3a <__lo0bits+0x4e>
 8013f32:	085b      	lsrs	r3, r3, #1
 8013f34:	f102 0201 	add.w	r2, r2, #1
 8013f38:	d003      	beq.n	8013f42 <__lo0bits+0x56>
 8013f3a:	6003      	str	r3, [r0, #0]
 8013f3c:	e7e5      	b.n	8013f0a <__lo0bits+0x1e>
 8013f3e:	2200      	movs	r2, #0
 8013f40:	e7e3      	b.n	8013f0a <__lo0bits+0x1e>
 8013f42:	2220      	movs	r2, #32
 8013f44:	e7e1      	b.n	8013f0a <__lo0bits+0x1e>
	...

08013f48 <__i2b>:
 8013f48:	b510      	push	{r4, lr}
 8013f4a:	460c      	mov	r4, r1
 8013f4c:	2101      	movs	r1, #1
 8013f4e:	f7ff ff05 	bl	8013d5c <_Balloc>
 8013f52:	4602      	mov	r2, r0
 8013f54:	b928      	cbnz	r0, 8013f62 <__i2b+0x1a>
 8013f56:	4b05      	ldr	r3, [pc, #20]	; (8013f6c <__i2b+0x24>)
 8013f58:	4805      	ldr	r0, [pc, #20]	; (8013f70 <__i2b+0x28>)
 8013f5a:	f240 1145 	movw	r1, #325	; 0x145
 8013f5e:	f000 fc85 	bl	801486c <__assert_func>
 8013f62:	2301      	movs	r3, #1
 8013f64:	6144      	str	r4, [r0, #20]
 8013f66:	6103      	str	r3, [r0, #16]
 8013f68:	bd10      	pop	{r4, pc}
 8013f6a:	bf00      	nop
 8013f6c:	0801677d 	.word	0x0801677d
 8013f70:	0801678e 	.word	0x0801678e

08013f74 <__multiply>:
 8013f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f78:	4691      	mov	r9, r2
 8013f7a:	690a      	ldr	r2, [r1, #16]
 8013f7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013f80:	429a      	cmp	r2, r3
 8013f82:	bfb8      	it	lt
 8013f84:	460b      	movlt	r3, r1
 8013f86:	460c      	mov	r4, r1
 8013f88:	bfbc      	itt	lt
 8013f8a:	464c      	movlt	r4, r9
 8013f8c:	4699      	movlt	r9, r3
 8013f8e:	6927      	ldr	r7, [r4, #16]
 8013f90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013f94:	68a3      	ldr	r3, [r4, #8]
 8013f96:	6861      	ldr	r1, [r4, #4]
 8013f98:	eb07 060a 	add.w	r6, r7, sl
 8013f9c:	42b3      	cmp	r3, r6
 8013f9e:	b085      	sub	sp, #20
 8013fa0:	bfb8      	it	lt
 8013fa2:	3101      	addlt	r1, #1
 8013fa4:	f7ff feda 	bl	8013d5c <_Balloc>
 8013fa8:	b930      	cbnz	r0, 8013fb8 <__multiply+0x44>
 8013faa:	4602      	mov	r2, r0
 8013fac:	4b44      	ldr	r3, [pc, #272]	; (80140c0 <__multiply+0x14c>)
 8013fae:	4845      	ldr	r0, [pc, #276]	; (80140c4 <__multiply+0x150>)
 8013fb0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8013fb4:	f000 fc5a 	bl	801486c <__assert_func>
 8013fb8:	f100 0514 	add.w	r5, r0, #20
 8013fbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013fc0:	462b      	mov	r3, r5
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	4543      	cmp	r3, r8
 8013fc6:	d321      	bcc.n	801400c <__multiply+0x98>
 8013fc8:	f104 0314 	add.w	r3, r4, #20
 8013fcc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013fd0:	f109 0314 	add.w	r3, r9, #20
 8013fd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013fd8:	9202      	str	r2, [sp, #8]
 8013fda:	1b3a      	subs	r2, r7, r4
 8013fdc:	3a15      	subs	r2, #21
 8013fde:	f022 0203 	bic.w	r2, r2, #3
 8013fe2:	3204      	adds	r2, #4
 8013fe4:	f104 0115 	add.w	r1, r4, #21
 8013fe8:	428f      	cmp	r7, r1
 8013fea:	bf38      	it	cc
 8013fec:	2204      	movcc	r2, #4
 8013fee:	9201      	str	r2, [sp, #4]
 8013ff0:	9a02      	ldr	r2, [sp, #8]
 8013ff2:	9303      	str	r3, [sp, #12]
 8013ff4:	429a      	cmp	r2, r3
 8013ff6:	d80c      	bhi.n	8014012 <__multiply+0x9e>
 8013ff8:	2e00      	cmp	r6, #0
 8013ffa:	dd03      	ble.n	8014004 <__multiply+0x90>
 8013ffc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014000:	2b00      	cmp	r3, #0
 8014002:	d05b      	beq.n	80140bc <__multiply+0x148>
 8014004:	6106      	str	r6, [r0, #16]
 8014006:	b005      	add	sp, #20
 8014008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801400c:	f843 2b04 	str.w	r2, [r3], #4
 8014010:	e7d8      	b.n	8013fc4 <__multiply+0x50>
 8014012:	f8b3 a000 	ldrh.w	sl, [r3]
 8014016:	f1ba 0f00 	cmp.w	sl, #0
 801401a:	d024      	beq.n	8014066 <__multiply+0xf2>
 801401c:	f104 0e14 	add.w	lr, r4, #20
 8014020:	46a9      	mov	r9, r5
 8014022:	f04f 0c00 	mov.w	ip, #0
 8014026:	f85e 2b04 	ldr.w	r2, [lr], #4
 801402a:	f8d9 1000 	ldr.w	r1, [r9]
 801402e:	fa1f fb82 	uxth.w	fp, r2
 8014032:	b289      	uxth	r1, r1
 8014034:	fb0a 110b 	mla	r1, sl, fp, r1
 8014038:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801403c:	f8d9 2000 	ldr.w	r2, [r9]
 8014040:	4461      	add	r1, ip
 8014042:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014046:	fb0a c20b 	mla	r2, sl, fp, ip
 801404a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801404e:	b289      	uxth	r1, r1
 8014050:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014054:	4577      	cmp	r7, lr
 8014056:	f849 1b04 	str.w	r1, [r9], #4
 801405a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801405e:	d8e2      	bhi.n	8014026 <__multiply+0xb2>
 8014060:	9a01      	ldr	r2, [sp, #4]
 8014062:	f845 c002 	str.w	ip, [r5, r2]
 8014066:	9a03      	ldr	r2, [sp, #12]
 8014068:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801406c:	3304      	adds	r3, #4
 801406e:	f1b9 0f00 	cmp.w	r9, #0
 8014072:	d021      	beq.n	80140b8 <__multiply+0x144>
 8014074:	6829      	ldr	r1, [r5, #0]
 8014076:	f104 0c14 	add.w	ip, r4, #20
 801407a:	46ae      	mov	lr, r5
 801407c:	f04f 0a00 	mov.w	sl, #0
 8014080:	f8bc b000 	ldrh.w	fp, [ip]
 8014084:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014088:	fb09 220b 	mla	r2, r9, fp, r2
 801408c:	4452      	add	r2, sl
 801408e:	b289      	uxth	r1, r1
 8014090:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014094:	f84e 1b04 	str.w	r1, [lr], #4
 8014098:	f85c 1b04 	ldr.w	r1, [ip], #4
 801409c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80140a0:	f8be 1000 	ldrh.w	r1, [lr]
 80140a4:	fb09 110a 	mla	r1, r9, sl, r1
 80140a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80140ac:	4567      	cmp	r7, ip
 80140ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80140b2:	d8e5      	bhi.n	8014080 <__multiply+0x10c>
 80140b4:	9a01      	ldr	r2, [sp, #4]
 80140b6:	50a9      	str	r1, [r5, r2]
 80140b8:	3504      	adds	r5, #4
 80140ba:	e799      	b.n	8013ff0 <__multiply+0x7c>
 80140bc:	3e01      	subs	r6, #1
 80140be:	e79b      	b.n	8013ff8 <__multiply+0x84>
 80140c0:	0801677d 	.word	0x0801677d
 80140c4:	0801678e 	.word	0x0801678e

080140c8 <__pow5mult>:
 80140c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140cc:	4615      	mov	r5, r2
 80140ce:	f012 0203 	ands.w	r2, r2, #3
 80140d2:	4606      	mov	r6, r0
 80140d4:	460f      	mov	r7, r1
 80140d6:	d007      	beq.n	80140e8 <__pow5mult+0x20>
 80140d8:	4c25      	ldr	r4, [pc, #148]	; (8014170 <__pow5mult+0xa8>)
 80140da:	3a01      	subs	r2, #1
 80140dc:	2300      	movs	r3, #0
 80140de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80140e2:	f7ff fe9d 	bl	8013e20 <__multadd>
 80140e6:	4607      	mov	r7, r0
 80140e8:	10ad      	asrs	r5, r5, #2
 80140ea:	d03d      	beq.n	8014168 <__pow5mult+0xa0>
 80140ec:	69f4      	ldr	r4, [r6, #28]
 80140ee:	b97c      	cbnz	r4, 8014110 <__pow5mult+0x48>
 80140f0:	2010      	movs	r0, #16
 80140f2:	f7ff fd7f 	bl	8013bf4 <malloc>
 80140f6:	4602      	mov	r2, r0
 80140f8:	61f0      	str	r0, [r6, #28]
 80140fa:	b928      	cbnz	r0, 8014108 <__pow5mult+0x40>
 80140fc:	4b1d      	ldr	r3, [pc, #116]	; (8014174 <__pow5mult+0xac>)
 80140fe:	481e      	ldr	r0, [pc, #120]	; (8014178 <__pow5mult+0xb0>)
 8014100:	f240 11b3 	movw	r1, #435	; 0x1b3
 8014104:	f000 fbb2 	bl	801486c <__assert_func>
 8014108:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801410c:	6004      	str	r4, [r0, #0]
 801410e:	60c4      	str	r4, [r0, #12]
 8014110:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8014114:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014118:	b94c      	cbnz	r4, 801412e <__pow5mult+0x66>
 801411a:	f240 2171 	movw	r1, #625	; 0x271
 801411e:	4630      	mov	r0, r6
 8014120:	f7ff ff12 	bl	8013f48 <__i2b>
 8014124:	2300      	movs	r3, #0
 8014126:	f8c8 0008 	str.w	r0, [r8, #8]
 801412a:	4604      	mov	r4, r0
 801412c:	6003      	str	r3, [r0, #0]
 801412e:	f04f 0900 	mov.w	r9, #0
 8014132:	07eb      	lsls	r3, r5, #31
 8014134:	d50a      	bpl.n	801414c <__pow5mult+0x84>
 8014136:	4639      	mov	r1, r7
 8014138:	4622      	mov	r2, r4
 801413a:	4630      	mov	r0, r6
 801413c:	f7ff ff1a 	bl	8013f74 <__multiply>
 8014140:	4639      	mov	r1, r7
 8014142:	4680      	mov	r8, r0
 8014144:	4630      	mov	r0, r6
 8014146:	f7ff fe49 	bl	8013ddc <_Bfree>
 801414a:	4647      	mov	r7, r8
 801414c:	106d      	asrs	r5, r5, #1
 801414e:	d00b      	beq.n	8014168 <__pow5mult+0xa0>
 8014150:	6820      	ldr	r0, [r4, #0]
 8014152:	b938      	cbnz	r0, 8014164 <__pow5mult+0x9c>
 8014154:	4622      	mov	r2, r4
 8014156:	4621      	mov	r1, r4
 8014158:	4630      	mov	r0, r6
 801415a:	f7ff ff0b 	bl	8013f74 <__multiply>
 801415e:	6020      	str	r0, [r4, #0]
 8014160:	f8c0 9000 	str.w	r9, [r0]
 8014164:	4604      	mov	r4, r0
 8014166:	e7e4      	b.n	8014132 <__pow5mult+0x6a>
 8014168:	4638      	mov	r0, r7
 801416a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801416e:	bf00      	nop
 8014170:	080168d8 	.word	0x080168d8
 8014174:	0801670e 	.word	0x0801670e
 8014178:	0801678e 	.word	0x0801678e

0801417c <__lshift>:
 801417c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014180:	460c      	mov	r4, r1
 8014182:	6849      	ldr	r1, [r1, #4]
 8014184:	6923      	ldr	r3, [r4, #16]
 8014186:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801418a:	68a3      	ldr	r3, [r4, #8]
 801418c:	4607      	mov	r7, r0
 801418e:	4691      	mov	r9, r2
 8014190:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014194:	f108 0601 	add.w	r6, r8, #1
 8014198:	42b3      	cmp	r3, r6
 801419a:	db0b      	blt.n	80141b4 <__lshift+0x38>
 801419c:	4638      	mov	r0, r7
 801419e:	f7ff fddd 	bl	8013d5c <_Balloc>
 80141a2:	4605      	mov	r5, r0
 80141a4:	b948      	cbnz	r0, 80141ba <__lshift+0x3e>
 80141a6:	4602      	mov	r2, r0
 80141a8:	4b28      	ldr	r3, [pc, #160]	; (801424c <__lshift+0xd0>)
 80141aa:	4829      	ldr	r0, [pc, #164]	; (8014250 <__lshift+0xd4>)
 80141ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80141b0:	f000 fb5c 	bl	801486c <__assert_func>
 80141b4:	3101      	adds	r1, #1
 80141b6:	005b      	lsls	r3, r3, #1
 80141b8:	e7ee      	b.n	8014198 <__lshift+0x1c>
 80141ba:	2300      	movs	r3, #0
 80141bc:	f100 0114 	add.w	r1, r0, #20
 80141c0:	f100 0210 	add.w	r2, r0, #16
 80141c4:	4618      	mov	r0, r3
 80141c6:	4553      	cmp	r3, sl
 80141c8:	db33      	blt.n	8014232 <__lshift+0xb6>
 80141ca:	6920      	ldr	r0, [r4, #16]
 80141cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80141d0:	f104 0314 	add.w	r3, r4, #20
 80141d4:	f019 091f 	ands.w	r9, r9, #31
 80141d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80141dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80141e0:	d02b      	beq.n	801423a <__lshift+0xbe>
 80141e2:	f1c9 0e20 	rsb	lr, r9, #32
 80141e6:	468a      	mov	sl, r1
 80141e8:	2200      	movs	r2, #0
 80141ea:	6818      	ldr	r0, [r3, #0]
 80141ec:	fa00 f009 	lsl.w	r0, r0, r9
 80141f0:	4310      	orrs	r0, r2
 80141f2:	f84a 0b04 	str.w	r0, [sl], #4
 80141f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80141fa:	459c      	cmp	ip, r3
 80141fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8014200:	d8f3      	bhi.n	80141ea <__lshift+0x6e>
 8014202:	ebac 0304 	sub.w	r3, ip, r4
 8014206:	3b15      	subs	r3, #21
 8014208:	f023 0303 	bic.w	r3, r3, #3
 801420c:	3304      	adds	r3, #4
 801420e:	f104 0015 	add.w	r0, r4, #21
 8014212:	4584      	cmp	ip, r0
 8014214:	bf38      	it	cc
 8014216:	2304      	movcc	r3, #4
 8014218:	50ca      	str	r2, [r1, r3]
 801421a:	b10a      	cbz	r2, 8014220 <__lshift+0xa4>
 801421c:	f108 0602 	add.w	r6, r8, #2
 8014220:	3e01      	subs	r6, #1
 8014222:	4638      	mov	r0, r7
 8014224:	612e      	str	r6, [r5, #16]
 8014226:	4621      	mov	r1, r4
 8014228:	f7ff fdd8 	bl	8013ddc <_Bfree>
 801422c:	4628      	mov	r0, r5
 801422e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014232:	f842 0f04 	str.w	r0, [r2, #4]!
 8014236:	3301      	adds	r3, #1
 8014238:	e7c5      	b.n	80141c6 <__lshift+0x4a>
 801423a:	3904      	subs	r1, #4
 801423c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014240:	f841 2f04 	str.w	r2, [r1, #4]!
 8014244:	459c      	cmp	ip, r3
 8014246:	d8f9      	bhi.n	801423c <__lshift+0xc0>
 8014248:	e7ea      	b.n	8014220 <__lshift+0xa4>
 801424a:	bf00      	nop
 801424c:	0801677d 	.word	0x0801677d
 8014250:	0801678e 	.word	0x0801678e

08014254 <__mcmp>:
 8014254:	b530      	push	{r4, r5, lr}
 8014256:	6902      	ldr	r2, [r0, #16]
 8014258:	690c      	ldr	r4, [r1, #16]
 801425a:	1b12      	subs	r2, r2, r4
 801425c:	d10e      	bne.n	801427c <__mcmp+0x28>
 801425e:	f100 0314 	add.w	r3, r0, #20
 8014262:	3114      	adds	r1, #20
 8014264:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014268:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801426c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014270:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014274:	42a5      	cmp	r5, r4
 8014276:	d003      	beq.n	8014280 <__mcmp+0x2c>
 8014278:	d305      	bcc.n	8014286 <__mcmp+0x32>
 801427a:	2201      	movs	r2, #1
 801427c:	4610      	mov	r0, r2
 801427e:	bd30      	pop	{r4, r5, pc}
 8014280:	4283      	cmp	r3, r0
 8014282:	d3f3      	bcc.n	801426c <__mcmp+0x18>
 8014284:	e7fa      	b.n	801427c <__mcmp+0x28>
 8014286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801428a:	e7f7      	b.n	801427c <__mcmp+0x28>

0801428c <__mdiff>:
 801428c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014290:	460c      	mov	r4, r1
 8014292:	4606      	mov	r6, r0
 8014294:	4611      	mov	r1, r2
 8014296:	4620      	mov	r0, r4
 8014298:	4690      	mov	r8, r2
 801429a:	f7ff ffdb 	bl	8014254 <__mcmp>
 801429e:	1e05      	subs	r5, r0, #0
 80142a0:	d110      	bne.n	80142c4 <__mdiff+0x38>
 80142a2:	4629      	mov	r1, r5
 80142a4:	4630      	mov	r0, r6
 80142a6:	f7ff fd59 	bl	8013d5c <_Balloc>
 80142aa:	b930      	cbnz	r0, 80142ba <__mdiff+0x2e>
 80142ac:	4b3a      	ldr	r3, [pc, #232]	; (8014398 <__mdiff+0x10c>)
 80142ae:	4602      	mov	r2, r0
 80142b0:	f240 2137 	movw	r1, #567	; 0x237
 80142b4:	4839      	ldr	r0, [pc, #228]	; (801439c <__mdiff+0x110>)
 80142b6:	f000 fad9 	bl	801486c <__assert_func>
 80142ba:	2301      	movs	r3, #1
 80142bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80142c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142c4:	bfa4      	itt	ge
 80142c6:	4643      	movge	r3, r8
 80142c8:	46a0      	movge	r8, r4
 80142ca:	4630      	mov	r0, r6
 80142cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80142d0:	bfa6      	itte	ge
 80142d2:	461c      	movge	r4, r3
 80142d4:	2500      	movge	r5, #0
 80142d6:	2501      	movlt	r5, #1
 80142d8:	f7ff fd40 	bl	8013d5c <_Balloc>
 80142dc:	b920      	cbnz	r0, 80142e8 <__mdiff+0x5c>
 80142de:	4b2e      	ldr	r3, [pc, #184]	; (8014398 <__mdiff+0x10c>)
 80142e0:	4602      	mov	r2, r0
 80142e2:	f240 2145 	movw	r1, #581	; 0x245
 80142e6:	e7e5      	b.n	80142b4 <__mdiff+0x28>
 80142e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80142ec:	6926      	ldr	r6, [r4, #16]
 80142ee:	60c5      	str	r5, [r0, #12]
 80142f0:	f104 0914 	add.w	r9, r4, #20
 80142f4:	f108 0514 	add.w	r5, r8, #20
 80142f8:	f100 0e14 	add.w	lr, r0, #20
 80142fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014300:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014304:	f108 0210 	add.w	r2, r8, #16
 8014308:	46f2      	mov	sl, lr
 801430a:	2100      	movs	r1, #0
 801430c:	f859 3b04 	ldr.w	r3, [r9], #4
 8014310:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014314:	fa11 f88b 	uxtah	r8, r1, fp
 8014318:	b299      	uxth	r1, r3
 801431a:	0c1b      	lsrs	r3, r3, #16
 801431c:	eba8 0801 	sub.w	r8, r8, r1
 8014320:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014324:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014328:	fa1f f888 	uxth.w	r8, r8
 801432c:	1419      	asrs	r1, r3, #16
 801432e:	454e      	cmp	r6, r9
 8014330:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014334:	f84a 3b04 	str.w	r3, [sl], #4
 8014338:	d8e8      	bhi.n	801430c <__mdiff+0x80>
 801433a:	1b33      	subs	r3, r6, r4
 801433c:	3b15      	subs	r3, #21
 801433e:	f023 0303 	bic.w	r3, r3, #3
 8014342:	3304      	adds	r3, #4
 8014344:	3415      	adds	r4, #21
 8014346:	42a6      	cmp	r6, r4
 8014348:	bf38      	it	cc
 801434a:	2304      	movcc	r3, #4
 801434c:	441d      	add	r5, r3
 801434e:	4473      	add	r3, lr
 8014350:	469e      	mov	lr, r3
 8014352:	462e      	mov	r6, r5
 8014354:	4566      	cmp	r6, ip
 8014356:	d30e      	bcc.n	8014376 <__mdiff+0xea>
 8014358:	f10c 0203 	add.w	r2, ip, #3
 801435c:	1b52      	subs	r2, r2, r5
 801435e:	f022 0203 	bic.w	r2, r2, #3
 8014362:	3d03      	subs	r5, #3
 8014364:	45ac      	cmp	ip, r5
 8014366:	bf38      	it	cc
 8014368:	2200      	movcc	r2, #0
 801436a:	4413      	add	r3, r2
 801436c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014370:	b17a      	cbz	r2, 8014392 <__mdiff+0x106>
 8014372:	6107      	str	r7, [r0, #16]
 8014374:	e7a4      	b.n	80142c0 <__mdiff+0x34>
 8014376:	f856 8b04 	ldr.w	r8, [r6], #4
 801437a:	fa11 f288 	uxtah	r2, r1, r8
 801437e:	1414      	asrs	r4, r2, #16
 8014380:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014384:	b292      	uxth	r2, r2
 8014386:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801438a:	f84e 2b04 	str.w	r2, [lr], #4
 801438e:	1421      	asrs	r1, r4, #16
 8014390:	e7e0      	b.n	8014354 <__mdiff+0xc8>
 8014392:	3f01      	subs	r7, #1
 8014394:	e7ea      	b.n	801436c <__mdiff+0xe0>
 8014396:	bf00      	nop
 8014398:	0801677d 	.word	0x0801677d
 801439c:	0801678e 	.word	0x0801678e

080143a0 <__d2b>:
 80143a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80143a4:	460f      	mov	r7, r1
 80143a6:	2101      	movs	r1, #1
 80143a8:	ec59 8b10 	vmov	r8, r9, d0
 80143ac:	4616      	mov	r6, r2
 80143ae:	f7ff fcd5 	bl	8013d5c <_Balloc>
 80143b2:	4604      	mov	r4, r0
 80143b4:	b930      	cbnz	r0, 80143c4 <__d2b+0x24>
 80143b6:	4602      	mov	r2, r0
 80143b8:	4b24      	ldr	r3, [pc, #144]	; (801444c <__d2b+0xac>)
 80143ba:	4825      	ldr	r0, [pc, #148]	; (8014450 <__d2b+0xb0>)
 80143bc:	f240 310f 	movw	r1, #783	; 0x30f
 80143c0:	f000 fa54 	bl	801486c <__assert_func>
 80143c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80143c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80143cc:	bb2d      	cbnz	r5, 801441a <__d2b+0x7a>
 80143ce:	9301      	str	r3, [sp, #4]
 80143d0:	f1b8 0300 	subs.w	r3, r8, #0
 80143d4:	d026      	beq.n	8014424 <__d2b+0x84>
 80143d6:	4668      	mov	r0, sp
 80143d8:	9300      	str	r3, [sp, #0]
 80143da:	f7ff fd87 	bl	8013eec <__lo0bits>
 80143de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80143e2:	b1e8      	cbz	r0, 8014420 <__d2b+0x80>
 80143e4:	f1c0 0320 	rsb	r3, r0, #32
 80143e8:	fa02 f303 	lsl.w	r3, r2, r3
 80143ec:	430b      	orrs	r3, r1
 80143ee:	40c2      	lsrs	r2, r0
 80143f0:	6163      	str	r3, [r4, #20]
 80143f2:	9201      	str	r2, [sp, #4]
 80143f4:	9b01      	ldr	r3, [sp, #4]
 80143f6:	61a3      	str	r3, [r4, #24]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	bf14      	ite	ne
 80143fc:	2202      	movne	r2, #2
 80143fe:	2201      	moveq	r2, #1
 8014400:	6122      	str	r2, [r4, #16]
 8014402:	b1bd      	cbz	r5, 8014434 <__d2b+0x94>
 8014404:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014408:	4405      	add	r5, r0
 801440a:	603d      	str	r5, [r7, #0]
 801440c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014410:	6030      	str	r0, [r6, #0]
 8014412:	4620      	mov	r0, r4
 8014414:	b003      	add	sp, #12
 8014416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801441a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801441e:	e7d6      	b.n	80143ce <__d2b+0x2e>
 8014420:	6161      	str	r1, [r4, #20]
 8014422:	e7e7      	b.n	80143f4 <__d2b+0x54>
 8014424:	a801      	add	r0, sp, #4
 8014426:	f7ff fd61 	bl	8013eec <__lo0bits>
 801442a:	9b01      	ldr	r3, [sp, #4]
 801442c:	6163      	str	r3, [r4, #20]
 801442e:	3020      	adds	r0, #32
 8014430:	2201      	movs	r2, #1
 8014432:	e7e5      	b.n	8014400 <__d2b+0x60>
 8014434:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014438:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801443c:	6038      	str	r0, [r7, #0]
 801443e:	6918      	ldr	r0, [r3, #16]
 8014440:	f7ff fd34 	bl	8013eac <__hi0bits>
 8014444:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014448:	e7e2      	b.n	8014410 <__d2b+0x70>
 801444a:	bf00      	nop
 801444c:	0801677d 	.word	0x0801677d
 8014450:	0801678e 	.word	0x0801678e

08014454 <__sfputc_r>:
 8014454:	6893      	ldr	r3, [r2, #8]
 8014456:	3b01      	subs	r3, #1
 8014458:	2b00      	cmp	r3, #0
 801445a:	b410      	push	{r4}
 801445c:	6093      	str	r3, [r2, #8]
 801445e:	da08      	bge.n	8014472 <__sfputc_r+0x1e>
 8014460:	6994      	ldr	r4, [r2, #24]
 8014462:	42a3      	cmp	r3, r4
 8014464:	db01      	blt.n	801446a <__sfputc_r+0x16>
 8014466:	290a      	cmp	r1, #10
 8014468:	d103      	bne.n	8014472 <__sfputc_r+0x1e>
 801446a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801446e:	f7fe bb6e 	b.w	8012b4e <__swbuf_r>
 8014472:	6813      	ldr	r3, [r2, #0]
 8014474:	1c58      	adds	r0, r3, #1
 8014476:	6010      	str	r0, [r2, #0]
 8014478:	7019      	strb	r1, [r3, #0]
 801447a:	4608      	mov	r0, r1
 801447c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014480:	4770      	bx	lr

08014482 <__sfputs_r>:
 8014482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014484:	4606      	mov	r6, r0
 8014486:	460f      	mov	r7, r1
 8014488:	4614      	mov	r4, r2
 801448a:	18d5      	adds	r5, r2, r3
 801448c:	42ac      	cmp	r4, r5
 801448e:	d101      	bne.n	8014494 <__sfputs_r+0x12>
 8014490:	2000      	movs	r0, #0
 8014492:	e007      	b.n	80144a4 <__sfputs_r+0x22>
 8014494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014498:	463a      	mov	r2, r7
 801449a:	4630      	mov	r0, r6
 801449c:	f7ff ffda 	bl	8014454 <__sfputc_r>
 80144a0:	1c43      	adds	r3, r0, #1
 80144a2:	d1f3      	bne.n	801448c <__sfputs_r+0xa>
 80144a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080144a8 <_vfiprintf_r>:
 80144a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144ac:	460d      	mov	r5, r1
 80144ae:	b09d      	sub	sp, #116	; 0x74
 80144b0:	4614      	mov	r4, r2
 80144b2:	4698      	mov	r8, r3
 80144b4:	4606      	mov	r6, r0
 80144b6:	b118      	cbz	r0, 80144c0 <_vfiprintf_r+0x18>
 80144b8:	6a03      	ldr	r3, [r0, #32]
 80144ba:	b90b      	cbnz	r3, 80144c0 <_vfiprintf_r+0x18>
 80144bc:	f7fe fab4 	bl	8012a28 <__sinit>
 80144c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144c2:	07d9      	lsls	r1, r3, #31
 80144c4:	d405      	bmi.n	80144d2 <_vfiprintf_r+0x2a>
 80144c6:	89ab      	ldrh	r3, [r5, #12]
 80144c8:	059a      	lsls	r2, r3, #22
 80144ca:	d402      	bmi.n	80144d2 <_vfiprintf_r+0x2a>
 80144cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144ce:	f7fe fcba 	bl	8012e46 <__retarget_lock_acquire_recursive>
 80144d2:	89ab      	ldrh	r3, [r5, #12]
 80144d4:	071b      	lsls	r3, r3, #28
 80144d6:	d501      	bpl.n	80144dc <_vfiprintf_r+0x34>
 80144d8:	692b      	ldr	r3, [r5, #16]
 80144da:	b99b      	cbnz	r3, 8014504 <_vfiprintf_r+0x5c>
 80144dc:	4629      	mov	r1, r5
 80144de:	4630      	mov	r0, r6
 80144e0:	f7fe fb72 	bl	8012bc8 <__swsetup_r>
 80144e4:	b170      	cbz	r0, 8014504 <_vfiprintf_r+0x5c>
 80144e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144e8:	07dc      	lsls	r4, r3, #31
 80144ea:	d504      	bpl.n	80144f6 <_vfiprintf_r+0x4e>
 80144ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80144f0:	b01d      	add	sp, #116	; 0x74
 80144f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144f6:	89ab      	ldrh	r3, [r5, #12]
 80144f8:	0598      	lsls	r0, r3, #22
 80144fa:	d4f7      	bmi.n	80144ec <_vfiprintf_r+0x44>
 80144fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144fe:	f7fe fca3 	bl	8012e48 <__retarget_lock_release_recursive>
 8014502:	e7f3      	b.n	80144ec <_vfiprintf_r+0x44>
 8014504:	2300      	movs	r3, #0
 8014506:	9309      	str	r3, [sp, #36]	; 0x24
 8014508:	2320      	movs	r3, #32
 801450a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801450e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014512:	2330      	movs	r3, #48	; 0x30
 8014514:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80146c8 <_vfiprintf_r+0x220>
 8014518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801451c:	f04f 0901 	mov.w	r9, #1
 8014520:	4623      	mov	r3, r4
 8014522:	469a      	mov	sl, r3
 8014524:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014528:	b10a      	cbz	r2, 801452e <_vfiprintf_r+0x86>
 801452a:	2a25      	cmp	r2, #37	; 0x25
 801452c:	d1f9      	bne.n	8014522 <_vfiprintf_r+0x7a>
 801452e:	ebba 0b04 	subs.w	fp, sl, r4
 8014532:	d00b      	beq.n	801454c <_vfiprintf_r+0xa4>
 8014534:	465b      	mov	r3, fp
 8014536:	4622      	mov	r2, r4
 8014538:	4629      	mov	r1, r5
 801453a:	4630      	mov	r0, r6
 801453c:	f7ff ffa1 	bl	8014482 <__sfputs_r>
 8014540:	3001      	adds	r0, #1
 8014542:	f000 80a9 	beq.w	8014698 <_vfiprintf_r+0x1f0>
 8014546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014548:	445a      	add	r2, fp
 801454a:	9209      	str	r2, [sp, #36]	; 0x24
 801454c:	f89a 3000 	ldrb.w	r3, [sl]
 8014550:	2b00      	cmp	r3, #0
 8014552:	f000 80a1 	beq.w	8014698 <_vfiprintf_r+0x1f0>
 8014556:	2300      	movs	r3, #0
 8014558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801455c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014560:	f10a 0a01 	add.w	sl, sl, #1
 8014564:	9304      	str	r3, [sp, #16]
 8014566:	9307      	str	r3, [sp, #28]
 8014568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801456c:	931a      	str	r3, [sp, #104]	; 0x68
 801456e:	4654      	mov	r4, sl
 8014570:	2205      	movs	r2, #5
 8014572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014576:	4854      	ldr	r0, [pc, #336]	; (80146c8 <_vfiprintf_r+0x220>)
 8014578:	f7eb fe3a 	bl	80001f0 <memchr>
 801457c:	9a04      	ldr	r2, [sp, #16]
 801457e:	b9d8      	cbnz	r0, 80145b8 <_vfiprintf_r+0x110>
 8014580:	06d1      	lsls	r1, r2, #27
 8014582:	bf44      	itt	mi
 8014584:	2320      	movmi	r3, #32
 8014586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801458a:	0713      	lsls	r3, r2, #28
 801458c:	bf44      	itt	mi
 801458e:	232b      	movmi	r3, #43	; 0x2b
 8014590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014594:	f89a 3000 	ldrb.w	r3, [sl]
 8014598:	2b2a      	cmp	r3, #42	; 0x2a
 801459a:	d015      	beq.n	80145c8 <_vfiprintf_r+0x120>
 801459c:	9a07      	ldr	r2, [sp, #28]
 801459e:	4654      	mov	r4, sl
 80145a0:	2000      	movs	r0, #0
 80145a2:	f04f 0c0a 	mov.w	ip, #10
 80145a6:	4621      	mov	r1, r4
 80145a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80145ac:	3b30      	subs	r3, #48	; 0x30
 80145ae:	2b09      	cmp	r3, #9
 80145b0:	d94d      	bls.n	801464e <_vfiprintf_r+0x1a6>
 80145b2:	b1b0      	cbz	r0, 80145e2 <_vfiprintf_r+0x13a>
 80145b4:	9207      	str	r2, [sp, #28]
 80145b6:	e014      	b.n	80145e2 <_vfiprintf_r+0x13a>
 80145b8:	eba0 0308 	sub.w	r3, r0, r8
 80145bc:	fa09 f303 	lsl.w	r3, r9, r3
 80145c0:	4313      	orrs	r3, r2
 80145c2:	9304      	str	r3, [sp, #16]
 80145c4:	46a2      	mov	sl, r4
 80145c6:	e7d2      	b.n	801456e <_vfiprintf_r+0xc6>
 80145c8:	9b03      	ldr	r3, [sp, #12]
 80145ca:	1d19      	adds	r1, r3, #4
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	9103      	str	r1, [sp, #12]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	bfbb      	ittet	lt
 80145d4:	425b      	neglt	r3, r3
 80145d6:	f042 0202 	orrlt.w	r2, r2, #2
 80145da:	9307      	strge	r3, [sp, #28]
 80145dc:	9307      	strlt	r3, [sp, #28]
 80145de:	bfb8      	it	lt
 80145e0:	9204      	strlt	r2, [sp, #16]
 80145e2:	7823      	ldrb	r3, [r4, #0]
 80145e4:	2b2e      	cmp	r3, #46	; 0x2e
 80145e6:	d10c      	bne.n	8014602 <_vfiprintf_r+0x15a>
 80145e8:	7863      	ldrb	r3, [r4, #1]
 80145ea:	2b2a      	cmp	r3, #42	; 0x2a
 80145ec:	d134      	bne.n	8014658 <_vfiprintf_r+0x1b0>
 80145ee:	9b03      	ldr	r3, [sp, #12]
 80145f0:	1d1a      	adds	r2, r3, #4
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	9203      	str	r2, [sp, #12]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	bfb8      	it	lt
 80145fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80145fe:	3402      	adds	r4, #2
 8014600:	9305      	str	r3, [sp, #20]
 8014602:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80146d8 <_vfiprintf_r+0x230>
 8014606:	7821      	ldrb	r1, [r4, #0]
 8014608:	2203      	movs	r2, #3
 801460a:	4650      	mov	r0, sl
 801460c:	f7eb fdf0 	bl	80001f0 <memchr>
 8014610:	b138      	cbz	r0, 8014622 <_vfiprintf_r+0x17a>
 8014612:	9b04      	ldr	r3, [sp, #16]
 8014614:	eba0 000a 	sub.w	r0, r0, sl
 8014618:	2240      	movs	r2, #64	; 0x40
 801461a:	4082      	lsls	r2, r0
 801461c:	4313      	orrs	r3, r2
 801461e:	3401      	adds	r4, #1
 8014620:	9304      	str	r3, [sp, #16]
 8014622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014626:	4829      	ldr	r0, [pc, #164]	; (80146cc <_vfiprintf_r+0x224>)
 8014628:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801462c:	2206      	movs	r2, #6
 801462e:	f7eb fddf 	bl	80001f0 <memchr>
 8014632:	2800      	cmp	r0, #0
 8014634:	d03f      	beq.n	80146b6 <_vfiprintf_r+0x20e>
 8014636:	4b26      	ldr	r3, [pc, #152]	; (80146d0 <_vfiprintf_r+0x228>)
 8014638:	bb1b      	cbnz	r3, 8014682 <_vfiprintf_r+0x1da>
 801463a:	9b03      	ldr	r3, [sp, #12]
 801463c:	3307      	adds	r3, #7
 801463e:	f023 0307 	bic.w	r3, r3, #7
 8014642:	3308      	adds	r3, #8
 8014644:	9303      	str	r3, [sp, #12]
 8014646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014648:	443b      	add	r3, r7
 801464a:	9309      	str	r3, [sp, #36]	; 0x24
 801464c:	e768      	b.n	8014520 <_vfiprintf_r+0x78>
 801464e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014652:	460c      	mov	r4, r1
 8014654:	2001      	movs	r0, #1
 8014656:	e7a6      	b.n	80145a6 <_vfiprintf_r+0xfe>
 8014658:	2300      	movs	r3, #0
 801465a:	3401      	adds	r4, #1
 801465c:	9305      	str	r3, [sp, #20]
 801465e:	4619      	mov	r1, r3
 8014660:	f04f 0c0a 	mov.w	ip, #10
 8014664:	4620      	mov	r0, r4
 8014666:	f810 2b01 	ldrb.w	r2, [r0], #1
 801466a:	3a30      	subs	r2, #48	; 0x30
 801466c:	2a09      	cmp	r2, #9
 801466e:	d903      	bls.n	8014678 <_vfiprintf_r+0x1d0>
 8014670:	2b00      	cmp	r3, #0
 8014672:	d0c6      	beq.n	8014602 <_vfiprintf_r+0x15a>
 8014674:	9105      	str	r1, [sp, #20]
 8014676:	e7c4      	b.n	8014602 <_vfiprintf_r+0x15a>
 8014678:	fb0c 2101 	mla	r1, ip, r1, r2
 801467c:	4604      	mov	r4, r0
 801467e:	2301      	movs	r3, #1
 8014680:	e7f0      	b.n	8014664 <_vfiprintf_r+0x1bc>
 8014682:	ab03      	add	r3, sp, #12
 8014684:	9300      	str	r3, [sp, #0]
 8014686:	462a      	mov	r2, r5
 8014688:	4b12      	ldr	r3, [pc, #72]	; (80146d4 <_vfiprintf_r+0x22c>)
 801468a:	a904      	add	r1, sp, #16
 801468c:	4630      	mov	r0, r6
 801468e:	f7fd fcb7 	bl	8012000 <_printf_float>
 8014692:	4607      	mov	r7, r0
 8014694:	1c78      	adds	r0, r7, #1
 8014696:	d1d6      	bne.n	8014646 <_vfiprintf_r+0x19e>
 8014698:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801469a:	07d9      	lsls	r1, r3, #31
 801469c:	d405      	bmi.n	80146aa <_vfiprintf_r+0x202>
 801469e:	89ab      	ldrh	r3, [r5, #12]
 80146a0:	059a      	lsls	r2, r3, #22
 80146a2:	d402      	bmi.n	80146aa <_vfiprintf_r+0x202>
 80146a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80146a6:	f7fe fbcf 	bl	8012e48 <__retarget_lock_release_recursive>
 80146aa:	89ab      	ldrh	r3, [r5, #12]
 80146ac:	065b      	lsls	r3, r3, #25
 80146ae:	f53f af1d 	bmi.w	80144ec <_vfiprintf_r+0x44>
 80146b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80146b4:	e71c      	b.n	80144f0 <_vfiprintf_r+0x48>
 80146b6:	ab03      	add	r3, sp, #12
 80146b8:	9300      	str	r3, [sp, #0]
 80146ba:	462a      	mov	r2, r5
 80146bc:	4b05      	ldr	r3, [pc, #20]	; (80146d4 <_vfiprintf_r+0x22c>)
 80146be:	a904      	add	r1, sp, #16
 80146c0:	4630      	mov	r0, r6
 80146c2:	f7fd ff41 	bl	8012548 <_printf_i>
 80146c6:	e7e4      	b.n	8014692 <_vfiprintf_r+0x1ea>
 80146c8:	080168e4 	.word	0x080168e4
 80146cc:	080168ee 	.word	0x080168ee
 80146d0:	08012001 	.word	0x08012001
 80146d4:	08014483 	.word	0x08014483
 80146d8:	080168ea 	.word	0x080168ea

080146dc <__swhatbuf_r>:
 80146dc:	b570      	push	{r4, r5, r6, lr}
 80146de:	460c      	mov	r4, r1
 80146e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146e4:	2900      	cmp	r1, #0
 80146e6:	b096      	sub	sp, #88	; 0x58
 80146e8:	4615      	mov	r5, r2
 80146ea:	461e      	mov	r6, r3
 80146ec:	da0d      	bge.n	801470a <__swhatbuf_r+0x2e>
 80146ee:	89a3      	ldrh	r3, [r4, #12]
 80146f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80146f4:	f04f 0100 	mov.w	r1, #0
 80146f8:	bf0c      	ite	eq
 80146fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80146fe:	2340      	movne	r3, #64	; 0x40
 8014700:	2000      	movs	r0, #0
 8014702:	6031      	str	r1, [r6, #0]
 8014704:	602b      	str	r3, [r5, #0]
 8014706:	b016      	add	sp, #88	; 0x58
 8014708:	bd70      	pop	{r4, r5, r6, pc}
 801470a:	466a      	mov	r2, sp
 801470c:	f000 f87c 	bl	8014808 <_fstat_r>
 8014710:	2800      	cmp	r0, #0
 8014712:	dbec      	blt.n	80146ee <__swhatbuf_r+0x12>
 8014714:	9901      	ldr	r1, [sp, #4]
 8014716:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801471a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801471e:	4259      	negs	r1, r3
 8014720:	4159      	adcs	r1, r3
 8014722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014726:	e7eb      	b.n	8014700 <__swhatbuf_r+0x24>

08014728 <__smakebuf_r>:
 8014728:	898b      	ldrh	r3, [r1, #12]
 801472a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801472c:	079d      	lsls	r5, r3, #30
 801472e:	4606      	mov	r6, r0
 8014730:	460c      	mov	r4, r1
 8014732:	d507      	bpl.n	8014744 <__smakebuf_r+0x1c>
 8014734:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014738:	6023      	str	r3, [r4, #0]
 801473a:	6123      	str	r3, [r4, #16]
 801473c:	2301      	movs	r3, #1
 801473e:	6163      	str	r3, [r4, #20]
 8014740:	b002      	add	sp, #8
 8014742:	bd70      	pop	{r4, r5, r6, pc}
 8014744:	ab01      	add	r3, sp, #4
 8014746:	466a      	mov	r2, sp
 8014748:	f7ff ffc8 	bl	80146dc <__swhatbuf_r>
 801474c:	9900      	ldr	r1, [sp, #0]
 801474e:	4605      	mov	r5, r0
 8014750:	4630      	mov	r0, r6
 8014752:	f7ff fa77 	bl	8013c44 <_malloc_r>
 8014756:	b948      	cbnz	r0, 801476c <__smakebuf_r+0x44>
 8014758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801475c:	059a      	lsls	r2, r3, #22
 801475e:	d4ef      	bmi.n	8014740 <__smakebuf_r+0x18>
 8014760:	f023 0303 	bic.w	r3, r3, #3
 8014764:	f043 0302 	orr.w	r3, r3, #2
 8014768:	81a3      	strh	r3, [r4, #12]
 801476a:	e7e3      	b.n	8014734 <__smakebuf_r+0xc>
 801476c:	89a3      	ldrh	r3, [r4, #12]
 801476e:	6020      	str	r0, [r4, #0]
 8014770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014774:	81a3      	strh	r3, [r4, #12]
 8014776:	9b00      	ldr	r3, [sp, #0]
 8014778:	6163      	str	r3, [r4, #20]
 801477a:	9b01      	ldr	r3, [sp, #4]
 801477c:	6120      	str	r0, [r4, #16]
 801477e:	b15b      	cbz	r3, 8014798 <__smakebuf_r+0x70>
 8014780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014784:	4630      	mov	r0, r6
 8014786:	f000 f851 	bl	801482c <_isatty_r>
 801478a:	b128      	cbz	r0, 8014798 <__smakebuf_r+0x70>
 801478c:	89a3      	ldrh	r3, [r4, #12]
 801478e:	f023 0303 	bic.w	r3, r3, #3
 8014792:	f043 0301 	orr.w	r3, r3, #1
 8014796:	81a3      	strh	r3, [r4, #12]
 8014798:	89a3      	ldrh	r3, [r4, #12]
 801479a:	431d      	orrs	r5, r3
 801479c:	81a5      	strh	r5, [r4, #12]
 801479e:	e7cf      	b.n	8014740 <__smakebuf_r+0x18>

080147a0 <_putc_r>:
 80147a0:	b570      	push	{r4, r5, r6, lr}
 80147a2:	460d      	mov	r5, r1
 80147a4:	4614      	mov	r4, r2
 80147a6:	4606      	mov	r6, r0
 80147a8:	b118      	cbz	r0, 80147b2 <_putc_r+0x12>
 80147aa:	6a03      	ldr	r3, [r0, #32]
 80147ac:	b90b      	cbnz	r3, 80147b2 <_putc_r+0x12>
 80147ae:	f7fe f93b 	bl	8012a28 <__sinit>
 80147b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80147b4:	07d8      	lsls	r0, r3, #31
 80147b6:	d405      	bmi.n	80147c4 <_putc_r+0x24>
 80147b8:	89a3      	ldrh	r3, [r4, #12]
 80147ba:	0599      	lsls	r1, r3, #22
 80147bc:	d402      	bmi.n	80147c4 <_putc_r+0x24>
 80147be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147c0:	f7fe fb41 	bl	8012e46 <__retarget_lock_acquire_recursive>
 80147c4:	68a3      	ldr	r3, [r4, #8]
 80147c6:	3b01      	subs	r3, #1
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	60a3      	str	r3, [r4, #8]
 80147cc:	da05      	bge.n	80147da <_putc_r+0x3a>
 80147ce:	69a2      	ldr	r2, [r4, #24]
 80147d0:	4293      	cmp	r3, r2
 80147d2:	db12      	blt.n	80147fa <_putc_r+0x5a>
 80147d4:	b2eb      	uxtb	r3, r5
 80147d6:	2b0a      	cmp	r3, #10
 80147d8:	d00f      	beq.n	80147fa <_putc_r+0x5a>
 80147da:	6823      	ldr	r3, [r4, #0]
 80147dc:	1c5a      	adds	r2, r3, #1
 80147de:	6022      	str	r2, [r4, #0]
 80147e0:	701d      	strb	r5, [r3, #0]
 80147e2:	b2ed      	uxtb	r5, r5
 80147e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80147e6:	07da      	lsls	r2, r3, #31
 80147e8:	d405      	bmi.n	80147f6 <_putc_r+0x56>
 80147ea:	89a3      	ldrh	r3, [r4, #12]
 80147ec:	059b      	lsls	r3, r3, #22
 80147ee:	d402      	bmi.n	80147f6 <_putc_r+0x56>
 80147f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147f2:	f7fe fb29 	bl	8012e48 <__retarget_lock_release_recursive>
 80147f6:	4628      	mov	r0, r5
 80147f8:	bd70      	pop	{r4, r5, r6, pc}
 80147fa:	4629      	mov	r1, r5
 80147fc:	4622      	mov	r2, r4
 80147fe:	4630      	mov	r0, r6
 8014800:	f7fe f9a5 	bl	8012b4e <__swbuf_r>
 8014804:	4605      	mov	r5, r0
 8014806:	e7ed      	b.n	80147e4 <_putc_r+0x44>

08014808 <_fstat_r>:
 8014808:	b538      	push	{r3, r4, r5, lr}
 801480a:	4d07      	ldr	r5, [pc, #28]	; (8014828 <_fstat_r+0x20>)
 801480c:	2300      	movs	r3, #0
 801480e:	4604      	mov	r4, r0
 8014810:	4608      	mov	r0, r1
 8014812:	4611      	mov	r1, r2
 8014814:	602b      	str	r3, [r5, #0]
 8014816:	f7f0 fa90 	bl	8004d3a <_fstat>
 801481a:	1c43      	adds	r3, r0, #1
 801481c:	d102      	bne.n	8014824 <_fstat_r+0x1c>
 801481e:	682b      	ldr	r3, [r5, #0]
 8014820:	b103      	cbz	r3, 8014824 <_fstat_r+0x1c>
 8014822:	6023      	str	r3, [r4, #0]
 8014824:	bd38      	pop	{r3, r4, r5, pc}
 8014826:	bf00      	nop
 8014828:	20009ec0 	.word	0x20009ec0

0801482c <_isatty_r>:
 801482c:	b538      	push	{r3, r4, r5, lr}
 801482e:	4d06      	ldr	r5, [pc, #24]	; (8014848 <_isatty_r+0x1c>)
 8014830:	2300      	movs	r3, #0
 8014832:	4604      	mov	r4, r0
 8014834:	4608      	mov	r0, r1
 8014836:	602b      	str	r3, [r5, #0]
 8014838:	f7f0 fa8f 	bl	8004d5a <_isatty>
 801483c:	1c43      	adds	r3, r0, #1
 801483e:	d102      	bne.n	8014846 <_isatty_r+0x1a>
 8014840:	682b      	ldr	r3, [r5, #0]
 8014842:	b103      	cbz	r3, 8014846 <_isatty_r+0x1a>
 8014844:	6023      	str	r3, [r4, #0]
 8014846:	bd38      	pop	{r3, r4, r5, pc}
 8014848:	20009ec0 	.word	0x20009ec0

0801484c <_sbrk_r>:
 801484c:	b538      	push	{r3, r4, r5, lr}
 801484e:	4d06      	ldr	r5, [pc, #24]	; (8014868 <_sbrk_r+0x1c>)
 8014850:	2300      	movs	r3, #0
 8014852:	4604      	mov	r4, r0
 8014854:	4608      	mov	r0, r1
 8014856:	602b      	str	r3, [r5, #0]
 8014858:	f7f0 fa98 	bl	8004d8c <_sbrk>
 801485c:	1c43      	adds	r3, r0, #1
 801485e:	d102      	bne.n	8014866 <_sbrk_r+0x1a>
 8014860:	682b      	ldr	r3, [r5, #0]
 8014862:	b103      	cbz	r3, 8014866 <_sbrk_r+0x1a>
 8014864:	6023      	str	r3, [r4, #0]
 8014866:	bd38      	pop	{r3, r4, r5, pc}
 8014868:	20009ec0 	.word	0x20009ec0

0801486c <__assert_func>:
 801486c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801486e:	4614      	mov	r4, r2
 8014870:	461a      	mov	r2, r3
 8014872:	4b09      	ldr	r3, [pc, #36]	; (8014898 <__assert_func+0x2c>)
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	4605      	mov	r5, r0
 8014878:	68d8      	ldr	r0, [r3, #12]
 801487a:	b14c      	cbz	r4, 8014890 <__assert_func+0x24>
 801487c:	4b07      	ldr	r3, [pc, #28]	; (801489c <__assert_func+0x30>)
 801487e:	9100      	str	r1, [sp, #0]
 8014880:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014884:	4906      	ldr	r1, [pc, #24]	; (80148a0 <__assert_func+0x34>)
 8014886:	462b      	mov	r3, r5
 8014888:	f000 f844 	bl	8014914 <fiprintf>
 801488c:	f000 f854 	bl	8014938 <abort>
 8014890:	4b04      	ldr	r3, [pc, #16]	; (80148a4 <__assert_func+0x38>)
 8014892:	461c      	mov	r4, r3
 8014894:	e7f3      	b.n	801487e <__assert_func+0x12>
 8014896:	bf00      	nop
 8014898:	2000043c 	.word	0x2000043c
 801489c:	080168ff 	.word	0x080168ff
 80148a0:	0801690c 	.word	0x0801690c
 80148a4:	0801693a 	.word	0x0801693a

080148a8 <_calloc_r>:
 80148a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80148aa:	fba1 2402 	umull	r2, r4, r1, r2
 80148ae:	b94c      	cbnz	r4, 80148c4 <_calloc_r+0x1c>
 80148b0:	4611      	mov	r1, r2
 80148b2:	9201      	str	r2, [sp, #4]
 80148b4:	f7ff f9c6 	bl	8013c44 <_malloc_r>
 80148b8:	9a01      	ldr	r2, [sp, #4]
 80148ba:	4605      	mov	r5, r0
 80148bc:	b930      	cbnz	r0, 80148cc <_calloc_r+0x24>
 80148be:	4628      	mov	r0, r5
 80148c0:	b003      	add	sp, #12
 80148c2:	bd30      	pop	{r4, r5, pc}
 80148c4:	220c      	movs	r2, #12
 80148c6:	6002      	str	r2, [r0, #0]
 80148c8:	2500      	movs	r5, #0
 80148ca:	e7f8      	b.n	80148be <_calloc_r+0x16>
 80148cc:	4621      	mov	r1, r4
 80148ce:	f7fe f9d3 	bl	8012c78 <memset>
 80148d2:	e7f4      	b.n	80148be <_calloc_r+0x16>

080148d4 <__ascii_mbtowc>:
 80148d4:	b082      	sub	sp, #8
 80148d6:	b901      	cbnz	r1, 80148da <__ascii_mbtowc+0x6>
 80148d8:	a901      	add	r1, sp, #4
 80148da:	b142      	cbz	r2, 80148ee <__ascii_mbtowc+0x1a>
 80148dc:	b14b      	cbz	r3, 80148f2 <__ascii_mbtowc+0x1e>
 80148de:	7813      	ldrb	r3, [r2, #0]
 80148e0:	600b      	str	r3, [r1, #0]
 80148e2:	7812      	ldrb	r2, [r2, #0]
 80148e4:	1e10      	subs	r0, r2, #0
 80148e6:	bf18      	it	ne
 80148e8:	2001      	movne	r0, #1
 80148ea:	b002      	add	sp, #8
 80148ec:	4770      	bx	lr
 80148ee:	4610      	mov	r0, r2
 80148f0:	e7fb      	b.n	80148ea <__ascii_mbtowc+0x16>
 80148f2:	f06f 0001 	mvn.w	r0, #1
 80148f6:	e7f8      	b.n	80148ea <__ascii_mbtowc+0x16>

080148f8 <__ascii_wctomb>:
 80148f8:	b149      	cbz	r1, 801490e <__ascii_wctomb+0x16>
 80148fa:	2aff      	cmp	r2, #255	; 0xff
 80148fc:	bf85      	ittet	hi
 80148fe:	238a      	movhi	r3, #138	; 0x8a
 8014900:	6003      	strhi	r3, [r0, #0]
 8014902:	700a      	strbls	r2, [r1, #0]
 8014904:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014908:	bf98      	it	ls
 801490a:	2001      	movls	r0, #1
 801490c:	4770      	bx	lr
 801490e:	4608      	mov	r0, r1
 8014910:	4770      	bx	lr
	...

08014914 <fiprintf>:
 8014914:	b40e      	push	{r1, r2, r3}
 8014916:	b503      	push	{r0, r1, lr}
 8014918:	4601      	mov	r1, r0
 801491a:	ab03      	add	r3, sp, #12
 801491c:	4805      	ldr	r0, [pc, #20]	; (8014934 <fiprintf+0x20>)
 801491e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014922:	6800      	ldr	r0, [r0, #0]
 8014924:	9301      	str	r3, [sp, #4]
 8014926:	f7ff fdbf 	bl	80144a8 <_vfiprintf_r>
 801492a:	b002      	add	sp, #8
 801492c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014930:	b003      	add	sp, #12
 8014932:	4770      	bx	lr
 8014934:	2000043c 	.word	0x2000043c

08014938 <abort>:
 8014938:	b508      	push	{r3, lr}
 801493a:	2006      	movs	r0, #6
 801493c:	f000 f82c 	bl	8014998 <raise>
 8014940:	2001      	movs	r0, #1
 8014942:	f7f0 f9ab 	bl	8004c9c <_exit>

08014946 <_raise_r>:
 8014946:	291f      	cmp	r1, #31
 8014948:	b538      	push	{r3, r4, r5, lr}
 801494a:	4604      	mov	r4, r0
 801494c:	460d      	mov	r5, r1
 801494e:	d904      	bls.n	801495a <_raise_r+0x14>
 8014950:	2316      	movs	r3, #22
 8014952:	6003      	str	r3, [r0, #0]
 8014954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014958:	bd38      	pop	{r3, r4, r5, pc}
 801495a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801495c:	b112      	cbz	r2, 8014964 <_raise_r+0x1e>
 801495e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014962:	b94b      	cbnz	r3, 8014978 <_raise_r+0x32>
 8014964:	4620      	mov	r0, r4
 8014966:	f000 f831 	bl	80149cc <_getpid_r>
 801496a:	462a      	mov	r2, r5
 801496c:	4601      	mov	r1, r0
 801496e:	4620      	mov	r0, r4
 8014970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014974:	f000 b818 	b.w	80149a8 <_kill_r>
 8014978:	2b01      	cmp	r3, #1
 801497a:	d00a      	beq.n	8014992 <_raise_r+0x4c>
 801497c:	1c59      	adds	r1, r3, #1
 801497e:	d103      	bne.n	8014988 <_raise_r+0x42>
 8014980:	2316      	movs	r3, #22
 8014982:	6003      	str	r3, [r0, #0]
 8014984:	2001      	movs	r0, #1
 8014986:	e7e7      	b.n	8014958 <_raise_r+0x12>
 8014988:	2400      	movs	r4, #0
 801498a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801498e:	4628      	mov	r0, r5
 8014990:	4798      	blx	r3
 8014992:	2000      	movs	r0, #0
 8014994:	e7e0      	b.n	8014958 <_raise_r+0x12>
	...

08014998 <raise>:
 8014998:	4b02      	ldr	r3, [pc, #8]	; (80149a4 <raise+0xc>)
 801499a:	4601      	mov	r1, r0
 801499c:	6818      	ldr	r0, [r3, #0]
 801499e:	f7ff bfd2 	b.w	8014946 <_raise_r>
 80149a2:	bf00      	nop
 80149a4:	2000043c 	.word	0x2000043c

080149a8 <_kill_r>:
 80149a8:	b538      	push	{r3, r4, r5, lr}
 80149aa:	4d07      	ldr	r5, [pc, #28]	; (80149c8 <_kill_r+0x20>)
 80149ac:	2300      	movs	r3, #0
 80149ae:	4604      	mov	r4, r0
 80149b0:	4608      	mov	r0, r1
 80149b2:	4611      	mov	r1, r2
 80149b4:	602b      	str	r3, [r5, #0]
 80149b6:	f7f0 f961 	bl	8004c7c <_kill>
 80149ba:	1c43      	adds	r3, r0, #1
 80149bc:	d102      	bne.n	80149c4 <_kill_r+0x1c>
 80149be:	682b      	ldr	r3, [r5, #0]
 80149c0:	b103      	cbz	r3, 80149c4 <_kill_r+0x1c>
 80149c2:	6023      	str	r3, [r4, #0]
 80149c4:	bd38      	pop	{r3, r4, r5, pc}
 80149c6:	bf00      	nop
 80149c8:	20009ec0 	.word	0x20009ec0

080149cc <_getpid_r>:
 80149cc:	f7f0 b94e 	b.w	8004c6c <_getpid>

080149d0 <_init>:
 80149d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149d2:	bf00      	nop
 80149d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149d6:	bc08      	pop	{r3}
 80149d8:	469e      	mov	lr, r3
 80149da:	4770      	bx	lr

080149dc <_fini>:
 80149dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149de:	bf00      	nop
 80149e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149e2:	bc08      	pop	{r3}
 80149e4:	469e      	mov	lr, r3
 80149e6:	4770      	bx	lr
